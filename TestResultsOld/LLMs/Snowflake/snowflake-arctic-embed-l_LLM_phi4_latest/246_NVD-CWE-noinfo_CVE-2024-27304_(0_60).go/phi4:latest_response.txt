The retrieved information pertains to a single CVE identifier: **CVE-2024-27304**. Here is the detailed information about this vulnerability:

### Vulnerability Details

1. **Description**:  
   The vulnerability involves the `pgx` library, which is a PostgreSQL driver and toolkit for Go. An SQL injection can occur if an attacker causes a single query or bind message to exceed 4 GB in size. This situation may lead to an integer overflow when calculating the message size, allowing multiple messages to be sent under the attacker's control.

2. **Resolution**:  
   The issue is resolved in versions `v4.18.2` and `v5.5.4`. As a workaround, it is recommended to reject user input that could cause a single query or bind message to exceed 4 GB in size.

3. **Commit Message**:
   - A fix was applied to the SQL sanitizer to wrap arguments in parentheses, mitigating potential SQL injection vulnerabilities.
   - This change addresses an issue in `pgx v5`, although it was not initially vulnerable due to how the sanitizer was called. The underlying problem with the sanitizer itself was still present and required correction.

4. **Type of Change**:  
   The changes were modifications to existing code, specifically focused on preventing SQL injection via line comment creation by wrapping strings in parentheses.

### Code Changes

- **sanitize.go**:
  - Added lines that wrap arguments within parentheses to prevent SQL injection.
  
- **sanitize_test.go**:
  - Tests were updated to verify the correct handling of various types and scenarios with wrapped inputs, ensuring robustness against potential SQL injections.

These changes ensure better security practices by preventing attackers from exploiting integer overflow vulnerabilities in message size calculations.