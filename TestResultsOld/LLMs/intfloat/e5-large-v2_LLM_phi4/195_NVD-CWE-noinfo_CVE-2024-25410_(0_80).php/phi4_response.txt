To evaluate whether the provided PHP script contains a security vulnerability related to file uploads, we can use the guidance given by the referenced CVEs and their descriptions. Here's a step-by-step analysis:

### Analysis of the Provided Script

1. **File Upload Handling**:
   - The script checks if a file is uploaded (`$_FILES["brand_icone"]`) and verifies its type against an allowed list (`$allowed_file_types`), which includes `image/png`, `image/jpeg`, and `image/gif`.
   - It also checks the size of the uploaded file to ensure it does not exceed 100KB.
   - The script generates a unique filename using `bin2hex(random_bytes(8))` combined with the original file's name, preventing overwriting existing files.

2. **File Storage**:
   - The target directory for uploads is defined as `ROOT_PATH . "/uploads/"`.
   - The script uses `move_uploaded_file()` to securely move the uploaded file to its destination, which is a secure method to handle file uploads in PHP.

3. **Security Considerations**:
   - The use of `move_uploaded_file()` ensures that only files uploaded via HTTP POST are moved.
   - Unique filenames help mitigate risks associated with filename collisions and overwriting.
   - File type and size checks add an additional layer of security by ensuring only expected file formats and sizes are processed.

### Comparison with CVE Descriptions

- **CVE-2024-25410**:
  - This CVE is related to improper validation and sanitization of user-controlled input in a web application, leading to arbitrary code execution through file uploads.
  - The script in question performs type and size checks and uses `move_uploaded_file()`, which are good practices for preventing such vulnerabilities.

- **CVE-2023-30777**:
  - This CVE involves improper handling of uploaded files, allowing attackers to upload malicious scripts that are executed on the server.
  - The script mitigates this by checking file types against a whitelist and using unique filenames.

- **CVE-2022-31099**:
  - This vulnerability arises from insufficient validation of uploaded files, enabling attackers to execute arbitrary code.
  - The provided script addresses this by validating file types and ensuring secure file handling with `move_uploaded_file()`.

### Conclusion

The PHP script demonstrates good practices for securely handling file uploads. It validates the file type and size, uses unique filenames to prevent overwriting, and employs `move_uploaded_file()` for secure file transfer. These measures align well with mitigating the vulnerabilities described in the CVEs provided.

**No vulnerability related to the CVEs mentioned is found in this script.**

Therefore, based on the analysis, there is no identified vulnerability in the script concerning the CVEs referenced.