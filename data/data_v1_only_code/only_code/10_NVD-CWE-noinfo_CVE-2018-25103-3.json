{
    "cve_id": "CVE-2018-25103",
    "cve_description": "There exists use-after-free vulnerabilities in lighttpd <= 1.4.50 request parsing which might read from invalid pointers to memory used in the same request, not from other requests.",
    "cve_publish_date": "2024-06-17",
    "cwe_id": "NVD-CWE-noinfo",
    "commit_message": "[core] security: use-after-free invalid Range req\n\n(thx Marcus Wengelin)",
    "type_of_change": "Modification",
    "filename_of_changes": "request.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "0",
    "number_of_lines_deleted_vulnerable_to_cve": "24",
    "vulnerable_lines": [
        "// Line_Reference 1121:                             } else if (cmp > 0 && 0 == (cmp = buffer_caseless_compare(CONST_BUF_LEN(ds->key), CONST_STR_LEN(\"Range\")))) {",
        "// Line_Reference 1122:                                 if (!con->request.http_range) {",
        "// Line_Reference 1123:                                     /* bytes=.*-.* */",
        "// Line_Reference 1124: ",
        "// Line_Reference 1125:                                     if (0 == strncasecmp(ds->value->ptr, \"bytes=\", 6) &&",
        "// Line_Reference 1126:                                         NULL != strchr(ds->value->ptr+6, '-')) {",
        "// Line_Reference 1127: ",
        "// Line_Reference 1128:                                         /* if dup, only the first one will survive */",
        "// Line_Reference 1129:                                         con->request.http_range = ds->value->ptr + 6;",
        "// Line_Reference 1130:                                     }",
        "// Line_Reference 1131:                                 } else {",
        "// Line_Reference 1132:                                     con->http_status = 400;",
        "// Line_Reference 1133:                                     con->keep_alive = 0;",
        "// Line_Reference 1134: ",
        "// Line_Reference 1135:                                     if (srv->srvconf.log_request_header_on_error) {",
        "// Line_Reference 1136:                                         log_error_write(srv, __FILE__, __LINE__, \"s\",",
        "// Line_Reference 1137:                                                 \"duplicate Range-header -> 400\");",
        "// Line_Reference 1138:                                         log_error_write(srv, __FILE__, __LINE__, \"Sb\",",
        "// Line_Reference 1139:                                                 \"request-header:\\n\",",
        "// Line_Reference 1140:                                                 con->request.request);",
        "// Line_Reference 1141:                                     }",
        "// Line_Reference 1142:                                     array_insert_unique(con->request.headers, (data_unset *)ds);",
        "// Line_Reference 1143:                                     return 0;",
        "// Line_Reference 1144:                                 }"
    ]
}