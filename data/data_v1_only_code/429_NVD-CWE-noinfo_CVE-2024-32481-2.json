{
    "cve_id": "CVE-2024-32481",
    "cve_description": "Vyper is a pythonic Smart Contract Language for the Ethereum virtual machine. Starting in version 0.3.8 and prior to version 0.4.0b1, when looping over a `range` of the form `range(start, start + N)`, if `start` is negative, the execution will always revert. This issue is caused by an incorrect assertion inserted by the code generation of the range `stmt.parse_For_range()`. The issue arises when `start` is signed, instead of using `sle`, `le` is used and `start` is interpreted as an unsigned integer for the comparison. If it is a negative number, its 255th bit is set to `1` and is hence interpreted as a very large unsigned integer making the assertion always fail. Any contract having a `range(start, start + N)` where `start` is a signed integer with the possibility for `start` to be negative is affected. If a call goes through the loop while supplying a negative `start` the execution will revert. Version 0.4.0b1 fixes the issue.",
    "cve_publish_date": "2024-04-25",
    "cwe_id": "NVD-CWE-noinfo",
    "commit_message": "feat: allow `range(x, y, bound=N)` (#3679)\n\n- allow range where both start and end arguments are variables, so long\r\n  as a bound is supplied\r\n\r\n- ban range expressions of the form `range(x, x + N)` since the new form\r\n  is cleaner and supersedes it.\r\n\r\n- also do a bit of refactoring of the codegen for range\r\n\r\n---------\r\n\r\nCo-authored-by: Charles Cooper <cooper.charles.m@gmail.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "test_for_in_list.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "13",
    "number_of_lines_deleted_vulnerable_to_cve": "6",
    "vulnerable_lines": [
        "// Line_Reference 703:     \"\"\"",
        "// Line_Reference 793: @pytest.mark.parametrize(\"code\", BAD_CODE)",
        "// Line_Reference 794: def test_bad_code(assert_compile_failed, get_contract, code):",
        "// Line_Reference 795:     err = StructureException",
        "// Line_Reference 796:     if not isinstance(code, str):",
        "// Line_Reference 797:         code, err = code"
    ]
}