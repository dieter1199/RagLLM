{
    "cve_id": "CVE-2024-3573",
    "cve_description": "mlflow/mlflow is vulnerable to Local File Inclusion (LFI) due to improper parsing of URIs, allowing attackers to bypass checks and read arbitrary files on the system. The issue arises from the 'is_local_uri' function's failure to properly handle URIs with empty or 'file' schemes, leading to the misclassification of URIs as non-local. Attackers can exploit this by crafting malicious model versions with specially crafted 'source' parameters, enabling the reading of sensitive files within at least two directory levels from the server's root.",
    "cve_publish_date": "2024-04-16",
    "cwe_id": "CWE-29",
    "cwe_name": "Path Traversal: '\\..\\filename'",
    "cwe_description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '\\..\\filename' (leading backslash dot dot) sequences that can resolve to a location that is outside of that directory.",
    "commit_message": "Fix local uri (#10651)\n\nSigned-off-by: Serena Ruan <serena.rxy@gmail.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "test_artifacts.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "1",
    "number_of_lines_deleted_vulnerable_to_cve": "21",
    "vulnerable_lines": [
        "// Line_Reference 11: from mlflow.utils.file_utils import local_file_uri_to_path, mkdir, path_to_local_file_uri",
        "// Line_Reference 250: ",
        "// Line_Reference 251:     experiment_test_2_artifact_location = \"file://my_server/my_path/my_sub_path\"",
        "// Line_Reference 252:     experiment_test_2_id = mlflow.create_experiment(",
        "// Line_Reference 253:         \"test_exp_e\", experiment_test_2_artifact_location",
        "// Line_Reference 254:     )",
        "// Line_Reference 255:     with mlflow.start_run(experiment_id=experiment_test_2_id) as run:",
        "// Line_Reference 256:         with mock.patch(\"shutil.copy2\") as copyfile_mock, mock.patch(",
        "// Line_Reference 257:             \"os.path.exists\", return_value=True",
        "// Line_Reference 258:         ) as exists_mock:",
        "// Line_Reference 259:             mlflow.log_artifact(text_artifact.artifact_path)",
        "// Line_Reference 260:             copyfile_mock.assert_called_once()",
        "// Line_Reference 261:             exists_mock.assert_called_once()",
        "// Line_Reference 262:             local_path = mlflow.artifacts.download_artifacts(",
        "// Line_Reference 263:                 run_id=run.info.run_id, artifact_path=text_artifact.artifact_name",
        "// Line_Reference 264:             )",
        "// Line_Reference 265:             assert (",
        "// Line_Reference 266:                 local_file_uri_to_path(experiment_test_2_artifact_location)",
        "// Line_Reference 267:                 + rf\"\\{run.info.run_id}\\artifacts\\{text_artifact.artifact_name}\"",
        "// Line_Reference 268:                 == local_path",
        "// Line_Reference 269:             )"
    ]
}