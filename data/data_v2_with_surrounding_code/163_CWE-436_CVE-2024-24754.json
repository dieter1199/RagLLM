{
    "cve_id": "CVE-2024-24754",
    "cve_description": "Bref enable serverless PHP on AWS Lambda. When Bref is used with the Event-Driven Function runtime and the handler is a `RequestHandlerInterface`, then the Lambda event is converted to a PSR7 object. During the conversion process, if the request is a MultiPart, each part is parsed and its content added in the `$files` or `$parsedBody` arrays. The conversion process produces a different output compared to the one of plain PHP when keys ending with and open square bracket ([) are used. Based on the application logic the difference in the body parsing might lead to vulnerabilities and/or undefined behaviors. This vulnerability is patched in 2.1.13.",
    "cve_publish_date": "2024-02-01T16:17Z",
    "cwe_id": "CWE-436",
    "cwe_name": "Interpretation Conflict",
    "cwe_description": "Product A handles inputs or steps differently than Product B, which causes A to perform incorrect actions based on its perception of B's state.",
    "commit_message": "Cleanup uploaded files for PSR-15 handlers",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "Psr15Handler.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "Psr7Bridge.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "18",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 101:             if (str_starts_with($contentType, 'application/x-www-form-urlencoded')) {",
                "// Line 102:                 parse_str($bodyString, $parsedBody);",
                "// Line 103:             } else {",
                "// Line 104:                 $document = new Part(\"Content-type: $contentType",
                "// Line 105: ",
                "// Line 106: \" . $bodyString);",
                "// Line 107:                 if ($document->isMultiPart()) {",
                "// Line 108:                     $parsedBody = [];",
                "// Line 109:                     foreach ($document->getParts() as $part) {",
                "// Line 110:                         if ($part->isFile()) {",
                "// vulnerable line: 111: $tmpPath = tempnam(sys_get_temp_dir(), 'bref_upload_');",
                "// Line 112:                             if ($tmpPath === false) {",
                "// Line 113:                                 throw new RuntimeException('Unable to create a temporary directory');",
                "// Line 114:                             }",
                "// Line 115:                             file_put_contents($tmpPath, $part->getBody());",
                "// Line 116:                             $file = new UploadedFile($tmpPath, filesize($tmpPath), UPLOAD_ERR_OK, $part->getFileName(), $part->getMimeType());",
                "// Line 117: ",
                "// Line 118:                             self::parseKeyAndInsertValueInArray($files, $part->getName(), $file);",
                "// Line 119:                         } else {",
                "// Line 120:                             self::parseKeyAndInsertValueInArray($parsedBody, $part->getName(), $part->getBody());",
                "// Line 121:                         }"
            ]
        }
    ]
}