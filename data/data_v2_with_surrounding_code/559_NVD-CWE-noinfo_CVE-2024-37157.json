{
    "cve_id": "CVE-2024-37157",
    "cve_description": "Discourse is an open-source discussion platform. Prior to version 3.2.3 on the `stable` branch and version 3.3.0.beta4 on the `beta` and `tests-passed` branches, a malicious actor could get the FastImage library to redirect requests to an internal Discourse IP. This issue is patched in version 3.2.3 on the `stable` branch and version 3.3.0.beta4 on the `beta` and `tests-passed` branches. No known workarounds are available.",
    "cve_publish_date": "2024-07-03T20:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "SECURITY: Add FastImage SSRF safe freedom patch",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "cooked_processor_mixin.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 186:     if url && Upload.secure_uploads_url?(url)",
                "// Line 187:       absolute_url = Upload.signed_url_from_secure_uploads_url(absolute_url)",
                "// Line 188:     end",
                "// Line 189: ",
                "// Line 190:     return unless is_valid_image_url?(absolute_url)",
                "// Line 191: ",
                "// Line 192:     upload = Upload.get_from_url(absolute_url)",
                "// Line 193:     if upload && upload.width && upload.width > 0",
                "// Line 194:       @size_cache[url] = [upload.width, upload.height]",
                "// Line 195:     else",
                "// vulnerable line: 196: @size_cache[url] = FinalDestination::FastImage.size(absolute_url)",
                "// Line 197:     end",
                "// Line 198:   rescue Zlib::BufError, URI::Error, OpenSSL::SSL::SSLError",
                "// Line 199:     # FastImage.size raises BufError for some gifs, leave it.",
                "// Line 200:   end",
                "// Line 201: ",
                "// Line 202:   def is_valid_image_url?(url)",
                "// Line 203:     uri = URI.parse(url)",
                "// Line 204:     %w[http https].include? uri.scheme",
                "// Line 205:   rescue URI::Error",
                "// Line 206:   end"
            ]
        },
        {
            "filename_of_changes": "fast_image.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "11",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "fast_image_spec.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "28",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "search_indexer_spec.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "5",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 11:     SiteSetting.default_locale = \"zh_CN\"",
                "// Line 12:     data = \"你好世界\"",
                "// Line 13: ",
                "// Line 14:     SearchIndexer.update_posts_index(",
                "// Line 15:       post_id: post_id,",
                "// Line 16:       topic_title: \"\",",
                "// Line 17:       category_name: \"\",",
                "// Line 18:       topic_tags: \"\",",
                "// Line 19:       cooked: data,",
                "// Line 20:       private_message: false,",
                "// vulnerable line: 21: )",
                "// Line 22: ",
                "// Line 23:     post_search_data = PostSearchData.find_by(post_id: post_id)",
                "// Line 24: ",
                "// Line 25:     expect(post_search_data.raw_data).to eq(\"你好 世界\")",
                "// Line 26:     expect(post_search_data.search_data).to eq(\"'世界':2 '你好':1\")",
                "// Line 27:   end",
                "// Line 28: ",
                "// Line 29:   it \"extract youtube title\" do",
                "// Line 30:     html =",
                "// Line 31:       \"<div class=\"lazy-video-container\" data-video-id=\"lmFgeFh2nlw\" data-video-title=\"Metallica Mixer Explains Missing Bass on 'And Justice for All' [Exclusive]\" data-provider-name=\"youtube\"></div>\"",
                "// Line 32:     scrubbed = SearchIndexer::HtmlScrubber.scrub(html)",
                "// Line 33:     expect(scrubbed).to eq(",
                "// Line 34:       \"Metallica Mixer Explains Missing Bass on 'And Justice for All' [Exclusive]\",",
                "// vulnerable line: 35: )",
                "// Line 36:   end",
                "// Line 37: ",
                "// Line 38:   it \"extract a link\" do",
                "// Line 39:     html = \"<a href='http://meta.discourse.org/'>link</a>\"",
                "// Line 40:     scrubbed = SearchIndexer::HtmlScrubber.scrub(html)",
                "// Line 41:     expect(scrubbed).to eq(\"http://meta.discourse.org/ link\")",
                "// Line 42:   end",
                "// Line 43: ",
                "// Line 44:   it \"ignores autogenerated link anchors\" do",
                "// Line 45:     html = \"<a class='anchor' href='#something-special'>something special</a>\"",
                "// Line 94: ",
                "// Line 95:   it \"correctly indexes a post according to version\" do",
                "// Line 96:     # Preparing so that they can be indexed to right version",
                "// Line 97:     SearchIndexer.update_posts_index(",
                "// Line 98:       post_id: post_id,",
                "// Line 99:       topic_title: \"dummy\",",
                "// Line 100:       category_name: \"\",",
                "// Line 101:       topic_tags: nil,",
                "// Line 102:       cooked: nil,",
                "// Line 103:       private_message: false,",
                "// vulnerable line: 104: )",
                "// Line 105: ",
                "// Line 106:     PostSearchData.find_by(post_id: post_id).update!(version: -1)",
                "// Line 107: ",
                "// Line 108:     data = \"<a>This</a> is a test\"",
                "// Line 109: ",
                "// Line 110:     SearchIndexer.update_posts_index(",
                "// Line 111:       post_id: post_id,",
                "// Line 112:       topic_title: \"\",",
                "// Line 113:       category_name: \"\",",
                "// Line 114:       topic_tags: nil,",
                "// Line 115:       cooked: data,",
                "// Line 116:       private_message: false,",
                "// vulnerable line: 117: )",
                "// Line 118: ",
                "// Line 119:     raw_data, locale, version =",
                "// Line 120:       PostSearchData.where(post_id: post_id).pluck(:raw_data, :locale, :version)[0]",
                "// Line 121:     expect(raw_data).to eq(\"This is a test\")",
                "// Line 122:     expect(locale).to eq(SiteSetting.default_locale)",
                "// Line 123:     expect(version).to eq(SearchIndexer::POST_INDEX_VERSION)",
                "// Line 124:   end",
                "// Line 125: ",
                "// Line 126:   describe \".index\" do",
                "// Line 127:     let(:topic) { Fabricate(:topic, title: \"this is a title that I am testing\") }",
                "// Line 147:         Test.00E5A4.1",
                "// Line 148:       HTML",
                "// Line 149: ",
                "// Line 150:       SearchIndexer.update_posts_index(",
                "// Line 151:         post_id: post.id,",
                "// Line 152:         topic_title: post.topic.title,",
                "// Line 153:         category_name: post.topic.category&.name,",
                "// Line 154:         topic_tags: post.topic.tags.map(&:name).join(\" \"),",
                "// Line 155:         cooked: post.cooked,",
                "// Line 156:         private_message: post.topic.private_message?,",
                "// vulnerable line: 157: )",
                "// Line 158:     end",
                "// Line 159: ",
                "// Line 160:     it \"should work with invalid HTML\" do",
                "// Line 161:       post.update!(cooked: \"<FD>\" * Nokogiri::Gumbo::DEFAULT_MAX_TREE_DEPTH)",
                "// Line 162: ",
                "// Line 163:       SearchIndexer.update_posts_index(",
                "// Line 164:         post_id: post.id,",
                "// Line 165:         topic_title: post.topic.title,",
                "// Line 166:         category_name: post.topic.category&.name,",
                "// Line 167:         topic_tags: post.topic.tags.map(&:name).join(\" \"),",
                "// Line 168:         cooked: post.cooked,",
                "// Line 169:         private_message: post.topic.private_message?,",
                "// vulnerable line: 170: )",
                "// Line 171:     end",
                "// Line 172: ",
                "// Line 173:     it \"should not index posts with empty raw\" do",
                "// Line 174:       expect do",
                "// Line 175:         post = Fabricate.build(:post, raw: \"\", post_type: Post.types[:small_action])",
                "// Line 176:         post.save!(validate: false)",
                "// Line 177:       end.to_not change { PostSearchData.count }",
                "// Line 178:     end",
                "// Line 179: ",
                "// Line 180:     it \"should not tokenize urls and duplicate title and href in <a>\" do",
                "// Line 182:       https://meta.discourse.org/some.png",
                "// Line 183:       RAW",
                "// Line 184: ",
                "// Line 185:       post.rebake!",
                "// Line 186:       post.reload",
                "// Line 187: ",
                "// Line 188:       expect(post.post_search_data.raw_data).to eq(\"https://meta.discourse.org/some.png\")",
                "// Line 189: ",
                "// Line 190:       expect(post.post_search_data.search_data).to eq_ts_vector(",
                "// Line 191:         \"'/some.png':12 'discourse.org':11 'meta.discourse.org':11 'meta.discourse.org/some.png':10 'org':11 'test':8A 'titl':4A 'uncategor':9B 'meta':11 'discours':11\",",
                "// vulnerable line: 192: )",
                "// Line 193:     end",
                "// Line 194: ",
                "// Line 195:     it \"should not tokenize versions\" do",
                "// Line 196:       post.update!(raw: \"123.223\")",
                "// Line 197: ",
                "// Line 198:       expect(post.post_search_data.search_data).to eq(",
                "// Line 199:         \"'123.223':10 'test':8A 'titl':4A 'uncategor':9B\",",
                "// vulnerable line: 200: )",
                "// Line 201: ",
                "// Line 202:       post.update!(raw: \"15.2.231.423\")",
                "// Line 203:       post.reload",
                "// Line 204: ",
                "// Line 205:       expect(post.post_search_data.search_data).to eq(",
                "// Line 206:         \"'15.2.231.423':10 'test':8A 'titl':4A 'uncategor':9B\",",
                "// vulnerable line: 207: )",
                "// Line 208:     end",
                "// Line 209: ",
                "// Line 210:     it \"should tokenize host of a URL and removes query string\" do",
                "// Line 211:       category = Fabricate(:category, name: \"awesome category\")",
                "// Line 212:       topic = Fabricate(:topic, category: category, title: \"this is a test topic\")",
                "// Line 213: ",
                "// Line 214:       post = Fabricate(:post, topic: topic, raw: <<~RAW)",
                "// Line 215:       a https://car.com?bob=1, http://efg.com.au?bill=1 b hij.net/xyz=1",
                "// Line 216:       www.klm.net/?IGNORE=1 <a href=\"http://abc.de.nop.co.uk?IGNORE=1&ignore2=2\">test</a> https://cars.com",
                "// Line 217:       RAW",
                "// Line 220:       post.reload",
                "// Line 221:       topic = post.topic",
                "// Line 222: ",
                "// Line 223:       # Note, a random non URL string should be tokenized properly,",
                "// Line 224:       # hence www.klm.net?IGNORE=1 it was inserted in autolinking.",
                "// Line 225:       # We could consider amending the auto linker to add",
                "// Line 226:       # more context to say \"hey, this part of <a href>...</a> was a guess by autolinker.",
                "// Line 227:       # A blanket treating of non-urls without this logic is risky.",
                "// Line 228:       expect(post.post_search_data.raw_data).to eq(",
                "// Line 229:         \"a https://car.com , http://efg.com.au b http://hij.net/xyz=1 hij.net/xyz=1 http://www.klm.net/ www.klm.net/?IGNORE=1 http://abc.de.nop.co.uk test https://cars.com\",",
                "// vulnerable line: 230: )",
                "// Line 231: ",
                "// Line 232:       expect(post.post_search_data.search_data).to eq_ts_vector(",
                "// Line 233:         \"'/?ignore=1':21 '/xyz=1':14,17 'car.com':9 'cars.com':24 'abc.de.nop.co.uk':22 'au':10 'awesom':6B 'b':11 'categori':7B 'co.uk':22 'com':9,10,24 'com.au':10 'de.nop.co.uk':22 'efg.com.au':10 'hij.net':13,16 'hij.net/xyz=1':12,15 'klm.net':18,20 'net':13,16,18,20 'nop.co.uk':22 'test':4A,23 'topic':5A 'uk':22 'www.klm.net':18,20 'www.klm.net/?ignore=1':19 'car':9,24 'co':22 'de':22 'efg':10 'hij':13,16 'klm':18,20 'nop':22 'www':18,20 'abc':22\",",
                "// vulnerable line: 234: )",
                "// Line 235:     end",
                "// Line 236: ",
                "// Line 237:     it \"should not include lightbox in search\" do",
                "// Line 238:       Jobs.run_immediately!",
                "// Line 239:       SiteSetting.max_image_width = 1",
                "// Line 240: ",
                "// vulnerable line: 241: stub_request(:get, \"https://1.2.3.4/some.png\").to_return(",
                "// vulnerable line: 242: status: 200,",
                "// vulnerable line: 243: body: file_from_fixtures(\"logo.png\").read,",
                "// vulnerable line: 244: )",
                "// Line 245: ",
                "// Line 246:       src = \"https://meta.discourse.org/some.png\"",
                "// Line 247: ",
                "// Line 248:       post = Fabricate(:post, raw: <<~RAW)",
                "// Line 249:       Let me see how I can fix this image",
                "// Line 250:       <img src=\"#{src}\" title=\"GOT\" alt=\"white walkers\" width=\"2\" height=\"2\">",
                "// Line 251:       RAW",
                "// Line 252: ",
                "// Line 253:       post.rebake!",
                "// Line 254:       post.reload",
                "// Line 255: ",
                "// Line 256:       expect(post.cooked).not_to include(CookedPostProcessor::LIGHTBOX_WRAPPER_CSS_CLASS)",
                "// Line 257: ",
                "// Line 258:       expect(post.post_search_data.raw_data).to eq(",
                "// Line 259:         \"Let me see how I can fix this image white walkers GOT\",",
                "// vulnerable line: 260: )",
                "// Line 261:     end",
                "// Line 262: ",
                "// Line 263:     it \"should strips audio and videos URLs from raw data\" do",
                "// Line 264:       SiteSetting.authorized_extensions = \"mp4\"",
                "// Line 265:       Fabricate(:video_upload)",
                "// Line 266: ",
                "// Line 267:       post.update!(raw: <<~RAW)",
                "// Line 268:       link to an external page: https://google.com/?u=bar",
                "// Line 269: ",
                "// Line 270:       link to an audio file: https://somesite.com/audio.m4a",
                "// Line 271: ",
                "// Line 272:       link to a video file: https://somesite.com/content/somethingelse.MOV",
                "// Line 273: ",
                "// Line 274:       link to an invalid URL: http:error]",
                "// Line 275:       RAW",
                "// Line 276: ",
                "// Line 277:       expect(post.post_search_data.raw_data).to eq(",
                "// Line 278:         \"link to an external page: https://google.com/ link to an audio file: #{I18n.t(\"search.audio\")} link to a video file: #{I18n.t(\"search.video\")} link to an invalid URL: http:error]\",",
                "// vulnerable line: 279: )",
                "// Line 280: ",
                "// Line 281:       expect(post.post_search_data.search_data).to eq_ts_vector(",
                "// Line 282:         \"'/audio.m4a':23 '/content/somethingelse.mov':31 'audio':19 'com':15,22,30 'error':38 'extern':13 'file':20,28 'google.com':15 'http':37 'invalid':35 'link':10,16,24,32 'page':14 'somesite.com':22,30 'somesite.com/audio.m4a':21 'somesite.com/content/somethingelse.mov':29 'test':8A 'titl':4A 'uncategor':9B 'url':36 'video':27 'googl':15 'somesit':22,30\",",
                "// vulnerable line: 283: )",
                "// Line 284:     end",
                "// Line 285: ",
                "// Line 286:     it \"should unaccent indexed content\" do",
                "// Line 287:       SiteSetting.search_ignore_accents = true",
                "// Line 288:       post.update!(raw: \"Cette oeuvre d'art n'est pas une œuvre\")",
                "// Line 289:       post.post_search_data.reload",
                "// Line 290:       expect(post.post_search_data.search_data).not_to include(\"œuvr\")",
                "// Line 291:       expect(post.post_search_data.search_data).to include(\"oeuvr\")",
                "// Line 292: ",
                "// Line 293:       SiteSetting.search_ignore_accents = false",
                "// Line 312:       words = post_search_data.search_data.scan(/'([^']*)'/).map { |match| match[0] }",
                "// Line 313:       expect(words).to contain_exactly(",
                "// Line 314:         \"best\",",
                "// Line 315:         \"beig\",",
                "// Line 316:         \"obj\",",
                "// Line 317:         \"http\",",
                "// Line 318:         \"titl\",",
                "// Line 319:         \"long\",",
                "// Line 320:         \"enou\",",
                "// Line 321:         \"unca\",",
                "// vulnerable line: 322: )",
                "// Line 323:     end",
                "// Line 324: ",
                "// Line 325:     it \"limits number of repeated terms when max_duplicate_search_index_terms site setting has been configured\" do",
                "// Line 326:       SiteSetting.max_duplicate_search_index_terms = 5",
                "// Line 327: ",
                "// Line 328:       contents = <<~TEXT",
                "// Line 329:         #{\"sam \" * 10}",
                "// Line 330:         <a href=\"https://something.com/path:path'path?term='hello'\">url</a>",
                "// Line 331:         <a href=\"https://somethings.com/path:path'path?term='hello'\">url</a>",
                "// Line 332:       TEXT"
            ]
        }
    ]
}