{
    "cve_id": "CVE-2024-28113",
    "cve_description": "Peering Manager is a BGP session management tool. In Peering Manager <=1.8.2, it is possible to redirect users to an arbitrary page using a crafted url. As a result users can be redirected to an unexpected location. This issue has been addressed in version 1.8.3. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "cve_publish_date": "2024-03-12T20:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Make sure URL is not absolute before redirecting",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "views.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 30: class GetReturnURLMixin:",
                "// Line 31:     \"\"\"",
                "// Line 32:     Provides logic for determining where a user should be redirected after processing",
                "// Line 33:     a form.",
                "// Line 34:     \"\"\"",
                "// Line 35: ",
                "// Line 36:     default_return_url = None",
                "// Line 37: ",
                "// Line 38:     def get_return_url(self, request, instance=None):",
                "// Line 39:         # Check if `return_url` was specified as a query parameter or form",
                "// vulnerable line: 40: # data, use this URL only if it's safe",
                "// Line 41:         return_url = request.GET.get(\"return_url\") or request.POST.get(\"return_url\")",
                "// vulnerable line: 42: if return_url and return_url.startswith(\"/\"):",
                "// Line 43:             return return_url",
                "// Line 44: ",
                "// Line 45:         # Check if the object being modified (if any) has an absolute URL",
                "// Line 46:         if (",
                "// Line 47:             instance is not None",
                "// Line 48:             and instance.pk",
                "// Line 49:             and hasattr(instance, \"get_absolute_url\")",
                "// Line 50:         ):",
                "// Line 51:             return instance.get_absolute_url()",
                "// Line 52: "
            ]
        }
    ]
}