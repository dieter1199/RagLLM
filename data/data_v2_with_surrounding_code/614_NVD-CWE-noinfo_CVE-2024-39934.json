{
    "cve_id": "CVE-2024-39934",
    "cve_description": "Robotmk before 2.0.1 allows a local user to escalate privileges (e.g., to SYSTEM) if automated Python environment setup is enabled, because the \"shared holotree usage\" feature allows any user to edit any Python environment.",
    "cve_publish_date": "2024-07-04T19:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "don't enable shared holotrees\n\nCMK-17546",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "rcc.rs",
            "code_language": "Rust",
            "number_of_lines_added_for_mitigation": "0",
            "number_of_lines_deleted_vulnerable_to_cve": "26",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 21: use std::vec;",
                "// Line 22: ",
                "// Line 23: pub fn setup(global_config: &GlobalConfig, plans: Vec<Plan>) -> AnyhowResult<Vec<Plan>> {",
                "// Line 24:     let (rcc_plans, mut system_plans): (Vec<Plan>, Vec<Plan>) = plans",
                "// Line 25:         .into_iter()",
                "// Line 26:         .partition(|plan| matches!(plan.environment, Environment::Rcc(_)));",
                "// Line 27: ",
                "// Line 28:     if rcc_plans.is_empty() {",
                "// Line 29:         sort_plans_by_grouping(&mut system_plans);",
                "// Line 30:         return Ok(system_plans);",
                "// vulnerable line: 31: }",
                "// Line 32: ",
                "// Line 33:     clear_rcc_setup_working_directory(&rcc_setup_working_directory(",
                "// Line 34:         &global_config.working_directory,",
                "// Line 35:     ))?;",
                "// Line 36: ",
                "// Line 37:     let mut rcc_setup_failures = RCCSetupFailures::default();",
                "// Line 38:     let surviving_rcc_plans = adjust_rcc_file_permissions(",
                "// Line 39:         &global_config.rcc_config,",
                "// Line 40:         rcc_plans,",
                "// Line 41:         &mut rcc_setup_failures,",
                "// vulnerable line: 42: );",
                "// Line 43:     let surviving_rcc_plans =",
                "// Line 44:         rcc_setup(global_config, surviving_rcc_plans, &mut rcc_setup_failures)?;",
                "// Line 45: ",
                "// Line 46:     rcc_setup_failures.write(",
                "// Line 47:         global_config",
                "// Line 48:             .results_directory",
                "// Line 49:             .join(\"rcc_setup_failures.json\"),",
                "// Line 50:         &global_config.results_directory_locker,",
                "// Line 51:     )?;",
                "// Line 52: ",
                "// Line 53:     let mut surviving_plans = vec![];",
                "// Line 54:     surviving_plans.extend(surviving_rcc_plans);",
                "// Line 55:     surviving_plans.extend(system_plans);",
                "// Line 56:     sort_plans_by_grouping(&mut surviving_plans);",
                "// Line 57:     Ok(surviving_plans)",
                "// vulnerable line: 58: }",
                "// Line 59: ",
                "// Line 60: fn clear_rcc_setup_working_directory(working_directory: &Utf8Path) -> AnyhowResult<()> {",
                "// Line 61:     if working_directory.exists() {",
                "// Line 62:         remove_dir_all(working_directory).context(format!(",
                "// Line 63:             \"Failed to remove working directory for RCC setup: {working_directory}\"",
                "// Line 64:         ))?;",
                "// vulnerable line: 65: }",
                "// Line 66:     create_dir_all(working_directory).context(format!(",
                "// Line 67:         \"Failed to create working directory for RCC setup: {working_directory}\"",
                "// Line 68:     ))",
                "// vulnerable line: 69: }",
                "// Line 70: ",
                "// Line 71: fn rcc_setup_working_directory(working_directory: &Utf8Path) -> Utf8PathBuf {",
                "// Line 72:     working_directory.join(\"rcc_setup\")",
                "// vulnerable line: 73: }",
                "// Line 74: ",
                "// Line 75: fn adjust_rcc_file_permissions(",
                "// Line 76:     rcc_config: &RCCConfig,",
                "// Line 77:     rcc_plans: Vec<Plan>,",
                "// Line 78:     rcc_setup_failures: &mut RCCSetupFailures,",
                "// Line 79: ) -> Vec<Plan> {",
                "// Line 80:     let mut surviving_rcc_plans: Vec<Plan>;",
                "// Line 81: ",
                "// Line 82:     debug!(",
                "// Line 83:         \"Granting all plan users read and execute access to {}\",",
                "// Line 84:         rcc_config.binary_path",
                "// vulnerable line: 85: );",
                "// Line 86:     (surviving_rcc_plans, rcc_setup_failures.binary_permissions) =",
                "// Line 87:         grant_permissions_to_all_plan_users(&rcc_config.binary_path, rcc_plans, \"(RX)\", &[]);",
                "// Line 88:     if !rcc_setup_failures.binary_permissions.is_empty() {",
                "// vulnerable line: 89: error!(",
                "// Line 90:             \"Dropping the following plans due to failure to adjust RCC binary permissions: {}\",",
                "// Line 91:             failed_plan_ids_human_readable(rcc_setup_failures.binary_permissions.keys())",
                "// vulnerable line: 92: );",
                "// vulnerable line: 93: }",
                "// Line 94: ",
                "// Line 95:     if let RCCProfileConfig::Custom(custom_rcc_profile_config) = &rcc_config.profile_config {",
                "// Line 96:         debug!(",
                "// Line 97:             \"Granting all plan users read access to {}\",",
                "// Line 98:             custom_rcc_profile_config.path",
                "// vulnerable line: 99: );",
                "// Line 100:         (surviving_rcc_plans, rcc_setup_failures.profile_permissions) =",
                "// Line 101:             grant_permissions_to_all_plan_users(",
                "// Line 102:                 &custom_rcc_profile_config.path,",
                "// Line 103:                 surviving_rcc_plans,",
                "// Line 104:                 \"(R)\",",
                "// Line 105:                 &[],",
                "// vulnerable line: 106: );",
                "// Line 107:         if !rcc_setup_failures.profile_permissions.is_empty() {",
                "// vulnerable line: 108: error!(",
                "// Line 109:                 \"Dropping the following plans due to failure to adjust RCC profile permissions: {}\",",
                "// Line 110:                 failed_plan_ids_human_readable(rcc_setup_failures.profile_permissions.keys())",
                "// vulnerable line: 111: );",
                "// vulnerable line: 112: }",
                "// vulnerable line: 113: }",
                "// Line 114: ",
                "// Line 115:     surviving_rcc_plans",
                "// vulnerable line: 116: }",
                "// Line 117: ",
                "// Line 118: fn rcc_setup(",
                "// vulnerable line: 119: global_config: &GlobalConfig,",
                "// Line 120:     rcc_plans: Vec<Plan>,",
                "// Line 121:     rcc_setup_failures: &mut RCCSetupFailures,",
                "// Line 122: ) -> AnyhowResult<Vec<Plan>> {",
                "// Line 123:     let mut sucessful_plans: Vec<Plan>;",
                "// Line 124: ",
                "// Line 125:     debug!(\"Disabling RCC telemetry\");",
                "// Line 126:     (sucessful_plans, rcc_setup_failures.telemetry_disabling) =",
                "// Line 127:         disable_rcc_telemetry(global_config, rcc_plans)",
                "// Line 128:             .context(\"Received termination signal while disabling RCC telemetry\")?;",
                "// Line 129:     if !rcc_setup_failures.telemetry_disabling.is_empty() {",
                "// vulnerable line: 130: error!(",
                "// Line 131:             \"Dropping the following plans due to RCC telemetry disabling failure: {}\",",
                "// Line 132:             failed_plan_ids_human_readable(rcc_setup_failures.telemetry_disabling.keys())",
                "// vulnerable line: 133: );",
                "// vulnerable line: 134: }",
                "// Line 135: ",
                "// Line 136:     debug!(\"Configuring RCC profile\");",
                "// Line 137:     (sucessful_plans, rcc_setup_failures.profile_configuring) =",
                "// Line 138:         configure_rcc_profile(global_config, sucessful_plans)",
                "// Line 139:             .context(\"Received termination signal while configuring RCC profile\")?;",
                "// Line 140:     if !rcc_setup_failures.profile_configuring.is_empty() {",
                "// vulnerable line: 141: error!(",
                "// Line 142:             \"Dropping the following plans due to profile configuring failure: {}\",",
                "// Line 143:             failed_plan_ids_human_readable(rcc_setup_failures.profile_configuring.keys())",
                "// vulnerable line: 144: );",
                "// vulnerable line: 145: }",
                "// Line 146: ",
                "// Line 147:     debug!(\"Enabling support for long paths\");",
                "// Line 148:     (sucessful_plans, rcc_setup_failures.long_path_support) =",
                "// Line 149:         enable_long_path_support(global_config, sucessful_plans)",
                "// Line 150:             .context(\"Received termination signal while enabling support for long paths\")?;",
                "// Line 151:     if !rcc_setup_failures.long_path_support.is_empty() {",
                "// vulnerable line: 152: error!(",
                "// Line 153:             \"Dropping the following plans due to long path support enabling failure: {}\",",
                "// Line 154:             failed_plan_ids_human_readable(rcc_setup_failures.long_path_support.keys())",
                "// vulnerable line: 155: );",
                "// vulnerable line: 156: }",
                "// Line 157: ",
                "// vulnerable line: 158: debug!(\"Initializing shared holotree\");",
                "// vulnerable line: 159: (sucessful_plans, rcc_setup_failures.shared_holotree) =",
                "// vulnerable line: 160: shared_holotree_init(global_config, sucessful_plans)",
                "// vulnerable line: 161: .context(\"Received termination signal while initializing shared holotree\")?;",
                "// vulnerable line: 162: if !rcc_setup_failures.shared_holotree.is_empty() {",
                "// vulnerable line: 163: error!(",
                "// vulnerable line: 164: \"Dropping the following plans due to shared holotree initialization failure: {}\",",
                "// vulnerable line: 165: failed_plan_ids_human_readable(rcc_setup_failures.shared_holotree.keys())",
                "// vulnerable line: 166: );",
                "// vulnerable line: 167: }",
                "// Line 168: ",
                "// Line 169:     debug!(\"Initializing holotree\");",
                "// Line 170:     (sucessful_plans, rcc_setup_failures.holotree_init) =",
                "// Line 171:         holotree_init(global_config, sucessful_plans)",
                "// Line 172:             .context(\"Received termination signal while initializing holotree\")?;",
                "// Line 173:     if !rcc_setup_failures.holotree_init.is_empty() {",
                "// vulnerable line: 174: error!(",
                "// Line 175:             \"Dropping the following plans due to holotree initialization failure: {}\",",
                "// Line 176:             failed_plan_ids_human_readable(rcc_setup_failures.holotree_init.keys())",
                "// vulnerable line: 177: );",
                "// vulnerable line: 178: }",
                "// Line 179: ",
                "// Line 180:     Ok(sucessful_plans)",
                "// vulnerable line: 181: }",
                "// Line 182: ",
                "// Line 183: fn disable_rcc_telemetry(",
                "// vulnerable line: 184: global_config: &GlobalConfig,",
                "// vulnerable line: 185: plans: Vec<Plan>,",
                "// vulnerable line: 186: ) -> Result<(Vec<Plan>, HashMap<String, String>), Cancelled> {",
                "// vulnerable line: 187: let mut command_spec =",
                "// vulnerable line: 188: RCCEnvironment::bundled_command_spec(&global_config.rcc_config.binary_path);",
                "// Line 189:     command_spec.add_arguments([\"configure\", \"identity\", \"--do-not-track\"]);",
                "// Line 190:     run_command_spec_per_session(global_config, plans, &command_spec, \"telemetry_disabling\")",
                "// vulnerable line: 191: }",
                "// Line 192: ",
                "// Line 193: fn configure_rcc_profile(",
                "// vulnerable line: 194: global_config: &GlobalConfig,",
                "// vulnerable line: 195: plans: Vec<Plan>,",
                "// vulnerable line: 196: ) -> Result<(Vec<Plan>, HashMap<String, String>), Cancelled> {",
                "// Line 197:     match &global_config.rcc_config.profile_config {",
                "// Line 198:         RCCProfileConfig::Default => configure_default_rcc_profile(global_config, plans),",
                "// Line 199:         RCCProfileConfig::Custom(custom_rcc_profile_config) => {",
                "// Line 200:             configure_custom_rcc_profile(custom_rcc_profile_config, global_config, plans)",
                "// vulnerable line: 201: }",
                "// vulnerable line: 202: }",
                "// vulnerable line: 203: }",
                "// Line 204: ",
                "// Line 205: fn configure_default_rcc_profile(",
                "// vulnerable line: 206: global_config: &GlobalConfig,",
                "// vulnerable line: 207: plans: Vec<Plan>,",
                "// vulnerable line: 208: ) -> Result<(Vec<Plan>, HashMap<String, String>), Cancelled> {",
                "// vulnerable line: 209: let mut command_spec =",
                "// vulnerable line: 210: RCCEnvironment::bundled_command_spec(&global_config.rcc_config.binary_path);",
                "// Line 211:     command_spec.add_arguments([\"configuration\", \"switch\", \"--noprofile\"]);",
                "// Line 212:     run_command_spec_per_session(",
                "// vulnerable line: 213: global_config,",
                "// vulnerable line: 214: plans,",
                "// vulnerable line: 215: &command_spec,",
                "// Line 216:         \"default_profile_switch\",",
                "// vulnerable line: 217: )",
                "// vulnerable line: 218: }",
                "// Line 219: ",
                "// Line 220: fn configure_custom_rcc_profile(",
                "// Line 221:     custom_rcc_profile_config: &CustomRCCProfileConfig,",
                "// vulnerable line: 222: global_config: &GlobalConfig,",
                "// vulnerable line: 223: plans: Vec<Plan>,",
                "// vulnerable line: 224: ) -> Result<(Vec<Plan>, HashMap<String, String>), Cancelled> {",
                "// Line 225:     let mut command_spec_import =",
                "// vulnerable line: 226: RCCEnvironment::bundled_command_spec(&global_config.rcc_config.binary_path);",
                "// Line 227:     command_spec_import.add_arguments([",
                "// Line 228:         \"configuration\",",
                "// Line 229:         \"import\",",
                "// Line 230:         \"--filename\",",
                "// Line 231:         custom_rcc_profile_config.path.as_str(),",
                "// Line 232:     ]);",
                "// Line 233:     let (sucessful_plans_import, failed_plans_import) = run_command_spec_per_session(",
                "// vulnerable line: 234: global_config,",
                "// vulnerable line: 235: plans,",
                "// Line 236:         &command_spec_import,",
                "// Line 237:         \"custom_profile_import\",",
                "// Line 238:     )?;",
                "// Line 239:     let mut command_spec_switch =",
                "// vulnerable line: 240: RCCEnvironment::bundled_command_spec(&global_config.rcc_config.binary_path);",
                "// Line 241:     command_spec_switch.add_arguments([",
                "// Line 242:         \"configuration\",",
                "// Line 243:         \"switch\",",
                "// Line 244:         \"--profile\",",
                "// Line 245:         custom_rcc_profile_config.name.as_str(),",
                "// Line 246:     ]);",
                "// Line 247:     let (sucessful_plans_switch, failed_plans_switch) = run_command_spec_per_session(",
                "// vulnerable line: 248: global_config,",
                "// Line 249:         sucessful_plans_import,",
                "// Line 250:         &command_spec_switch,",
                "// Line 251:         \"custom_profile_switch\",",
                "// Line 252:     )?;",
                "// Line 253:     let mut failed_plans = HashMap::new();",
                "// Line 254:     failed_plans.extend(failed_plans_import);",
                "// Line 255:     failed_plans.extend(failed_plans_switch);",
                "// Line 256:     Ok((sucessful_plans_switch, failed_plans))",
                "// vulnerable line: 257: }",
                "// Line 258: ",
                "// Line 259: fn enable_long_path_support(",
                "// vulnerable line: 260: global_config: &GlobalConfig,",
                "// vulnerable line: 261: plans: Vec<Plan>,",
                "// vulnerable line: 262: ) -> Result<(Vec<Plan>, HashMap<String, String>), Cancelled> {",
                "// vulnerable line: 263: let mut command_spec =",
                "// vulnerable line: 264: RCCEnvironment::bundled_command_spec(&global_config.rcc_config.binary_path);",
                "// Line 265:     command_spec.add_arguments([\"configure\", \"longpaths\", \"--enable\"]);",
                "// vulnerable line: 266: run_command_spec_once_in_current_session(",
                "// vulnerable line: 267: global_config,",
                "// vulnerable line: 268: plans,",
                "// vulnerable line: 269: &command_spec,",
                "// Line 270:         \"long_path_support_enabling\",",
                "// vulnerable line: 271: )",
                "// vulnerable line: 272: }",
                "// Line 273: ",
                "// vulnerable line: 274: fn shared_holotree_init(",
                "// vulnerable line: 275: global_config: &GlobalConfig,",
                "// vulnerable line: 276: plans: Vec<Plan>,",
                "// vulnerable line: 277: ) -> Result<(Vec<Plan>, HashMap<String, String>), Cancelled> {",
                "// vulnerable line: 278: let mut command_spec =",
                "// vulnerable line: 279: RCCEnvironment::bundled_command_spec(&global_config.rcc_config.binary_path);",
                "// vulnerable line: 280: command_spec.add_arguments([\"holotree\", \"shared\", \"--enable\", \"--once\"]);",
                "// vulnerable line: 281: run_command_spec_once_in_current_session(",
                "// vulnerable line: 282: global_config,",
                "// vulnerable line: 283: plans,",
                "// vulnerable line: 284: &command_spec,",
                "// vulnerable line: 285: \"shared_holotree_init\",",
                "// vulnerable line: 286: )",
                "// vulnerable line: 287: }",
                "// Line 288: ",
                "// Line 289: fn holotree_init(",
                "// vulnerable line: 290: global_config: &GlobalConfig,",
                "// vulnerable line: 291: plans: Vec<Plan>,",
                "// vulnerable line: 292: ) -> Result<(Vec<Plan>, HashMap<String, String>), Cancelled> {",
                "// vulnerable line: 293: let mut command_spec =",
                "// vulnerable line: 294: RCCEnvironment::bundled_command_spec(&global_config.rcc_config.binary_path);",
                "// Line 295:     command_spec.add_arguments([\"holotree\", \"init\"]);",
                "// Line 296:     run_command_spec_per_session(",
                "// vulnerable line: 297: global_config,",
                "// vulnerable line: 298: plans,",
                "// vulnerable line: 299: &command_spec,",
                "// Line 300:         \"holotree_initialization\",",
                "// vulnerable line: 301: )",
                "// vulnerable line: 302: }",
                "// Line 303: ",
                "// Line 304: fn run_command_spec_once_in_current_session(",
                "// vulnerable line: 305: global_config: &GlobalConfig,",
                "// vulnerable line: 306: plans: Vec<Plan>,",
                "// Line 307:     command_spec: &CommandSpec,",
                "// Line 308:     id: &str,",
                "// vulnerable line: 309: ) -> Result<(Vec<Plan>, HashMap<String, String>), Cancelled> {",
                "// Line 310:     Ok(",
                "// Line 311:         match execute_run_spec_in_session(",
                "// Line 312:             &Session::Current(CurrentSession {}),",
                "// Line 313:             &RunSpec {",
                "// Line 314:                 id: &format!(\"robotmk_{id}\"),",
                "// Line 315:                 command_spec,",
                "// Line 316:                 base_path: &rcc_setup_working_directory(&global_config.working_directory).join(id),",
                "// Line 317:                 timeout: 120,",
                "// Line 318:                 cancellation_token: &global_config.cancellation_token,",
                "// Line 319:             },",
                "// Line 320:         )? {",
                "// Line 321:             None => (plans, HashMap::new()),",
                "// Line 322:             Some(error_msg) => (",
                "// Line 323:                 vec![],",
                "// Line 324:                 HashMap::from_iter(plans.into_iter().map(|plan| (plan.id, error_msg.clone()))),",
                "// Line 325:             ),",
                "// Line 326:         },",
                "// vulnerable line: 327: )",
                "// vulnerable line: 328: }",
                "// Line 329: ",
                "// Line 330: fn run_command_spec_per_session(",
                "// vulnerable line: 331: global_config: &GlobalConfig,",
                "// vulnerable line: 332: plans: Vec<Plan>,",
                "// Line 333:     command_spec: &CommandSpec,",
                "// Line 334:     id: &str,",
                "// vulnerable line: 335: ) -> Result<(Vec<Plan>, HashMap<String, String>), Cancelled> {",
                "// Line 336:     let mut succesful_plans = vec![];",
                "// Line 337:     let mut failed_plans: HashMap<String, String> = HashMap::new();",
                "// Line 338: ",
                "// Line 339:     for (session, plans) in plans_by_sessions(plans) {",
                "// Line 340:         let session_id = format!(",
                "// Line 341:             \"{}_{}\",",
                "// Line 342:             id,",
                "// Line 343:             match &session {",
                "// Line 344:                 Session::Current(_) => \"current_user\".into(),",
                "// Line 345:                 Session::User(user_session) => format!(\"user_{}\", user_session.user_name),",
                "// vulnerable line: 346: }",
                "// vulnerable line: 347: );",
                "// Line 348: ",
                "// Line 349:         debug!(\"Running {} for `{}`\", command_spec, &session);",
                "// Line 350:         match execute_run_spec_in_session(",
                "// Line 351:             &session,",
                "// Line 352:             &RunSpec {",
                "// Line 353:                 id: &format!(\"robotmk_{session_id}\"),",
                "// Line 354:                 command_spec,",
                "// Line 355:                 base_path: &rcc_setup_working_directory(&global_config.working_directory)",
                "// Line 356:                     .join(session_id),",
                "// Line 357:                 timeout: 120,",
                "// Line 358:                 cancellation_token: &global_config.cancellation_token,",
                "// Line 359:             },",
                "// Line 360:         )? {",
                "// Line 361:             Some(error_msg) => {",
                "// Line 362:                 for plan in plans {",
                "// Line 363:                     failed_plans.insert(plan.id, error_msg.clone());",
                "// vulnerable line: 364: }",
                "// vulnerable line: 365: }",
                "// Line 366:             None => succesful_plans.extend(plans),",
                "// vulnerable line: 367: }",
                "// vulnerable line: 368: }",
                "// Line 369: ",
                "// Line 370:     Ok((succesful_plans, failed_plans))",
                "// vulnerable line: 371: }",
                "// Line 372: ",
                "// Line 373: fn execute_run_spec_in_session(",
                "// Line 374:     session: &Session,",
                "// Line 375:     run_spec: &RunSpec,",
                "// Line 376: ) -> Result<Option<String>, Cancelled> {",
                "// Line 377:     let run_outcome = match session.run(run_spec).context(format!(",
                "// Line 378:         \"Failed to run {} for `{session}`\",",
                "// Line 379:         run_spec.command_spec",
                "// Line 380:     )) {",
                "// Line 381:         Ok(run_outcome) => run_outcome,",
                "// Line 382:         Err(error) => {",
                "// Line 383:             let error = log_and_return_error(error);",
                "// Line 384:             return Ok(Some(format!(\"{error:?}\")));",
                "// vulnerable line: 385: }",
                "// Line 386:     };",
                "// Line 387:     let exit_code = match run_outcome {",
                "// Line 388:         Outcome::Completed(exit_code) => exit_code,",
                "// Line 389:         Outcome::Timeout => {",
                "// Line 390:             error!(\"{} for `{session}` timed out\", run_spec.command_spec);",
                "// Line 391:             return Ok(Some(\"Timeout\".into()));",
                "// vulnerable line: 392: }",
                "// Line 393:         Outcome::Cancel => {",
                "// Line 394:             error!(\"{} for `{session}` cancelled\", run_spec.command_spec);",
                "// Line 395:             return Err(Cancelled {});",
                "// vulnerable line: 396: }",
                "// Line 397:     };",
                "// Line 398:     if exit_code == 0 {",
                "// Line 399:         debug!(\"{} for `{session}` successful\", run_spec.command_spec);",
                "// Line 400:         Ok(None)",
                "// Line 401:     } else {",
                "// vulnerable line: 402: error!(",
                "// Line 403:             \"{} for `{session}` exited non-successfully\",",
                "// Line 404:             run_spec.command_spec",
                "// vulnerable line: 405: );",
                "// Line 406:         Ok(Some(format!(",
                "// Line 407:             \"Non-zero exit code, see {} for stdio logs\",",
                "// Line 408:             run_spec.base_path",
                "// Line 409:         )))",
                "// vulnerable line: 410: }",
                "// vulnerable line: 411: }"
            ]
        },
        {
            "filename_of_changes": "results.rs",
            "code_language": "Rust",
            "number_of_lines_added_for_mitigation": "0",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 33:     }",
                "// Line 34: }",
                "// Line 35: ",
                "// Line 36: #[derive(Default, Serialize)]",
                "// Line 37: pub struct RCCSetupFailures {",
                "// Line 38:     pub binary_permissions: HashMap<String, String>,",
                "// Line 39:     pub profile_permissions: HashMap<String, String>,",
                "// Line 40:     pub telemetry_disabling: HashMap<String, String>,",
                "// Line 41:     pub profile_configuring: HashMap<String, String>,",
                "// Line 42:     pub long_path_support: HashMap<String, String>,",
                "// vulnerable line: 43: pub shared_holotree: HashMap<String, String>,",
                "// Line 44:     pub holotree_init: HashMap<String, String>,",
                "// Line 45: }",
                "// Line 46: ",
                "// Line 47: impl WriteSection for RCCSetupFailures {",
                "// Line 48:     fn name() -> &'static str {",
                "// Line 49:         \"robotmk_rcc_setup_failures_v2\"",
                "// Line 50:     }",
                "// Line 51: }",
                "// Line 52: ",
                "// Line 53: #[derive(Serialize)]"
            ]
        },
        {
            "filename_of_changes": "test_scheduler.rs",
            "code_language": "Rust",
            "number_of_lines_added_for_mitigation": "0",
            "number_of_lines_deleted_vulnerable_to_cve": "4",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 227:             &format!(\"custom_profile_switch_user_{headed_user_name}.stderr\"),",
                "// Line 228:             &format!(\"custom_profile_switch_user_{headed_user_name}.stdout\"),",
                "// Line 229:             \"holotree_initialization_current_user.stderr\",",
                "// Line 230:             \"holotree_initialization_current_user.stdout\",",
                "// Line 231:             &format!(\"holotree_initialization_user_{headed_user_name}.bat\"),",
                "// Line 232:             &format!(\"holotree_initialization_user_{headed_user_name}.exit_code\"),",
                "// Line 233:             &format!(\"holotree_initialization_user_{headed_user_name}.stderr\"),",
                "// Line 234:             &format!(\"holotree_initialization_user_{headed_user_name}.stdout\"),",
                "// Line 235:             \"long_path_support_enabling.stderr\",",
                "// Line 236:             \"long_path_support_enabling.stdout\",",
                "// vulnerable line: 237: \"shared_holotree_init.stderr\",",
                "// vulnerable line: 238: \"shared_holotree_init.stdout\",",
                "// Line 239:             \"telemetry_disabling_current_user.stderr\",",
                "// Line 240:             \"telemetry_disabling_current_user.stdout\",",
                "// Line 241:             &format!(\"telemetry_disabling_user_{headed_user_name}.bat\"),",
                "// Line 242:             &format!(\"telemetry_disabling_user_{headed_user_name}.exit_code\"),",
                "// Line 243:             &format!(\"telemetry_disabling_user_{headed_user_name}.stderr\"),",
                "// Line 244:             &format!(\"telemetry_disabling_user_{headed_user_name}.stdout\")",
                "// Line 245:         ]",
                "// Line 246:     );",
                "// Line 247:     assert_eq!(",
                "// Line 248:         directory_entries(working_directory.join(\"environment_building\"), 1),"
            ]
        }
    ]
}