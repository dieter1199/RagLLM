{
    "cve_id": "CVE-2024-1727",
    "cve_description": "A Cross-Site Request Forgery (CSRF) vulnerability in gradio-app/gradio allows attackers to upload multiple large files to a victim's system if they are running Gradio locally. By crafting a malicious HTML page that triggers an unauthorized file upload to the victim's server, an attacker can deplete the system's disk space, potentially leading to a denial of service. This issue affects the file upload functionality as implemented in gradio/routes.py.",
    "cve_publish_date": "2024-03-21T20:15Z",
    "cwe_id": "CWE-352",
    "cwe_name": "Cross-Site Request Forgery (CSRF)",
    "cwe_description": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",
    "commit_message": "Tighten CORS rules (#7503)\n\n* tighten cors rules\r\n\r\n* add changeset\r\n\r\n* cors policy\r\n\r\n* cors\r\n\r\n* add changeset\r\n\r\n* lint\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* logging\r\n\r\n* add null\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* options\r\n\r\n* options\r\n\r\n* safe changes\r\n\r\n* let browser enforce cors\r\n\r\n* clean\r\n\r\n* route utils\r\n\r\n* fix\r\n\r\n* fix test\r\n\r\n* fix\r\n\r\n---------\r\n\r\nCo-authored-by: gradio-pr-bot <gradio-pr-bot@users.noreply.github.com>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "routes.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "7",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 22: import traceback",
                "// Line 23: from pathlib import Path",
                "// Line 24: from queue import Empty as EmptyQueue",
                "// Line 25: from typing import TYPE_CHECKING, Any, AsyncIterator, Dict, List, Optional, Type",
                "// Line 26: ",
                "// Line 27: import fastapi",
                "// Line 28: import httpx",
                "// Line 29: import markupsafe",
                "// Line 30: import orjson",
                "// Line 31: from fastapi import BackgroundTasks, Depends, FastAPI, HTTPException, status",
                "// vulnerable line: 32: from fastapi.middleware.cors import CORSMiddleware",
                "// Line 33: from fastapi.responses import (",
                "// Line 34:     FileResponse,",
                "// Line 35:     HTMLResponse,",
                "// Line 36:     JSONResponse,",
                "// Line 37:     PlainTextResponse,",
                "// vulnerable line: 38: )",
                "// Line 39: from fastapi.security import OAuth2PasswordRequestForm",
                "// Line 40: from fastapi.templating import Jinja2Templates",
                "// Line 41: from gradio_client import utils as client_utils",
                "// Line 42: from gradio_client.documentation import document",
                "// Line 43: from gradio_client.utils import ServerMessage",
                "// Line 44: from jinja2.exceptions import TemplateNotFound",
                "// Line 45: from multipart.multipart import parse_options_header",
                "// Line 46: from starlette.background import BackgroundTask",
                "// Line 47: from starlette.responses import RedirectResponse, StreamingResponse",
                "// Line 48: ",
                "// Line 57: from gradio.route_utils import (  # noqa: F401",
                "// Line 58:     FileUploadProgress,",
                "// Line 59:     FileUploadProgressNotQueuedError,",
                "// Line 60:     FileUploadProgressNotTrackedError,",
                "// Line 61:     GradioMultiPartParser,",
                "// Line 62:     GradioUploadFile,",
                "// Line 63:     MultiPartException,",
                "// Line 64:     Request,",
                "// Line 65:     compare_passwords_securely,",
                "// Line 66:     move_uploaded_files_to_cache,",
                "// vulnerable line: 67: )",
                "// Line 68: from gradio.state_holder import StateHolder",
                "// Line 69: from gradio.utils import get_package_version, get_upload_folder",
                "// Line 70: ",
                "// Line 71: if TYPE_CHECKING:",
                "// Line 72:     from gradio.blocks import Block",
                "// Line 73: ",
                "// Line 74: ",
                "// Line 75: mimetypes.init()",
                "// Line 76: ",
                "// Line 77: STATIC_TEMPLATE_LIB = files(\"gradio\").joinpath(\"templates\").as_posix()  # type: ignore",
                "// Line 82: ",
                "// Line 83: class ORJSONResponse(JSONResponse):",
                "// Line 84:     media_type = \"application/json\"",
                "// Line 85: ",
                "// Line 86:     @staticmethod",
                "// Line 87:     def _render(content: Any) -> bytes:",
                "// Line 88:         return orjson.dumps(",
                "// Line 89:             content,",
                "// Line 90:             option=orjson.OPT_SERIALIZE_NUMPY | orjson.OPT_PASSTHROUGH_DATETIME,",
                "// Line 91:             default=str,",
                "// vulnerable line: 92: )",
                "// Line 93: ",
                "// Line 94:     def render(self, content: Any) -> bytes:",
                "// Line 95:         return ORJSONResponse._render(content)",
                "// Line 96: ",
                "// Line 97:     @staticmethod",
                "// Line 98:     def _render_str(content: Any) -> str:",
                "// Line 99:         return ORJSONResponse._render(content).decode(\"utf-8\")",
                "// Line 100: ",
                "// Line 101: ",
                "// Line 102: def toorjson(value):",
                "// Line 103:     return markupsafe.Markup(",
                "// Line 104:         ORJSONResponse._render_str(value)",
                "// Line 105:         .replace(\"<\", \"<\")",
                "// Line 106:         .replace(\">\", \">\")",
                "// Line 107:         .replace(\"&\", \"&\")",
                "// Line 108:         .replace(\"'\", \"'\")",
                "// vulnerable line: 109: )",
                "// Line 110: ",
                "// Line 111: ",
                "// Line 112: templates = Jinja2Templates(directory=STATIC_TEMPLATE_LIB)",
                "// Line 113: templates.env.filters[\"toorjson\"] = toorjson",
                "// Line 114: ",
                "// Line 115: client = httpx.AsyncClient()",
                "// Line 116: ",
                "// Line 117: file_upload_statuses = FileUploadProgress()",
                "// Line 118: ",
                "// Line 119: ",
                "// Line 164:             raise ValueError(\"No Blocks has been configured for this app.\")",
                "// Line 165:         return self.blocks",
                "// Line 166: ",
                "// Line 167:     def build_proxy_request(self, url_path):",
                "// Line 168:         url = httpx.URL(url_path)",
                "// Line 169:         assert self.blocks  # noqa: S101",
                "// Line 170:         # Don't proxy a URL unless it's a URL specifically loaded by the user using",
                "// Line 171:         # gr.load() to prevent SSRF or harvesting of HF tokens by malicious Spaces.",
                "// Line 172:         is_safe_url = any(",
                "// Line 173:             url.host == httpx.URL(root).host for root in self.blocks.proxy_urls",
                "// vulnerable line: 174: )",
                "// Line 175:         if not is_safe_url:",
                "// Line 176:             raise PermissionError(\"This URL cannot be proxied.\")",
                "// Line 177:         is_hf_url = url.host.endswith(\".hf.space\")",
                "// Line 178:         headers = {}",
                "// Line 179:         if Context.hf_token is not None and is_hf_url:",
                "// Line 180:             headers[\"Authorization\"] = f\"Bearer {Context.hf_token}\"",
                "// Line 181:         rp_req = client.build_request(\"GET\", url, headers=headers)",
                "// Line 182:         return rp_req",
                "// Line 183: ",
                "// Line 184:     def _cancel_asyncio_tasks(self):",
                "// Line 189:     @staticmethod",
                "// Line 190:     def create_app(",
                "// Line 191:         blocks: gradio.Blocks, app_kwargs: Dict[str, Any] | None = None",
                "// Line 192:     ) -> App:",
                "// Line 193:         app_kwargs = app_kwargs or {}",
                "// Line 194:         app_kwargs.setdefault(\"default_response_class\", ORJSONResponse)",
                "// Line 195:         app = App(**app_kwargs)",
                "// Line 196:         app.configure_app(blocks)",
                "// Line 197: ",
                "// Line 198:         if not wasm_utils.IS_WASM:",
                "// vulnerable line: 199: app.add_middleware(",
                "// vulnerable line: 200: CORSMiddleware,",
                "// vulnerable line: 201: allow_origins=[\"*\"],",
                "// vulnerable line: 202: allow_methods=[\"*\"],",
                "// vulnerable line: 203: allow_headers=[\"*\"],",
                "// vulnerable line: 204: )",
                "// Line 205: ",
                "// Line 206:         @app.get(\"/user\")",
                "// Line 207:         @app.get(\"/user/\")",
                "// Line 208:         def get_current_user(request: fastapi.Request) -> Optional[str]:",
                "// Line 209:             token = request.cookies.get(",
                "// Line 210:                 f\"access-token-{app.cookie_id}\"",
                "// Line 211:             ) or request.cookies.get(f\"access-token-unsecure-{app.cookie_id}\")",
                "// Line 212:             return app.tokens.get(token)",
                "// Line 213: ",
                "// Line 214:         @app.get(\"/login_check\")",
                "// Line 215:         @app.get(\"/login_check/\")",
                "// Line 216:         def login_check(user: str = Depends(get_current_user)):",
                "// Line 217:             if app.auth is None or user is not None:",
                "// Line 218:                 return",
                "// Line 219:             raise HTTPException(",
                "// Line 220:                 status_code=status.HTTP_401_UNAUTHORIZED, detail=\"Not authenticated\"",
                "// vulnerable line: 221: )",
                "// Line 222: ",
                "// Line 223:         @app.get(\"/token\")",
                "// Line 224:         @app.get(\"/token/\")",
                "// Line 225:         def get_token(request: fastapi.Request) -> dict:",
                "// Line 226:             token = request.cookies.get(f\"access-token-{app.cookie_id}\")",
                "// Line 227:             return {\"token\": token, \"user\": app.tokens.get(token)}",
                "// Line 228: ",
                "// Line 229:         @app.get(\"/app_id\")",
                "// Line 230:         @app.get(\"/app_id/\")",
                "// Line 231:         def app_id(request: fastapi.Request) -> dict:  # noqa: ARG001",
                "// Line 253:                     await asyncio.sleep(check_rate)",
                "// Line 254:                     if time.perf_counter() - last_heartbeat > heartbeat_rate:",
                "// Line 255:                         yield \"\"\"data: HEARTBEAT",
                "// Line 256: ",
                "// Line 257: \"\"\"",
                "// Line 258:                         last_heartbeat = time.time()",
                "// Line 259: ",
                "// Line 260:             return StreamingResponse(",
                "// Line 261:                 reload_checker(request),",
                "// Line 262:                 media_type=\"text/event-stream\",",
                "// vulnerable line: 263: )",
                "// Line 264: ",
                "// Line 265:         @app.post(\"/login\")",
                "// Line 266:         @app.post(\"/login/\")",
                "// Line 267:         def login(form_data: OAuth2PasswordRequestForm = Depends()):",
                "// Line 268:             username, password = form_data.username.strip(), form_data.password",
                "// Line 269:             if app.auth is None:",
                "// Line 270:                 return RedirectResponse(url=\"/\", status_code=status.HTTP_302_FOUND)",
                "// Line 271:             if (",
                "// Line 272:                 not callable(app.auth)",
                "// Line 273:                 and username in app.auth",
                "// Line 275:             ) or (callable(app.auth) and app.auth.__call__(username, password)):",
                "// Line 276:                 token = secrets.token_urlsafe(16)",
                "// Line 277:                 app.tokens[token] = username",
                "// Line 278:                 response = JSONResponse(content={\"success\": True})",
                "// Line 279:                 response.set_cookie(",
                "// Line 280:                     key=f\"access-token-{app.cookie_id}\",",
                "// Line 281:                     value=token,",
                "// Line 282:                     httponly=True,",
                "// Line 283:                     samesite=\"none\",",
                "// Line 284:                     secure=True,",
                "// vulnerable line: 285: )",
                "// Line 286:                 response.set_cookie(",
                "// Line 287:                     key=f\"access-token-unsecure-{app.cookie_id}\",",
                "// Line 288:                     value=token,",
                "// Line 289:                     httponly=True,",
                "// vulnerable line: 290: )",
                "// Line 291:                 return response",
                "// Line 292:             else:",
                "// Line 293:                 raise HTTPException(status_code=400, detail=\"Incorrect credentials.\")",
                "// Line 294: ",
                "// Line 295:         ###############",
                "// Line 296:         # OAuth Routes",
                "// Line 297:         ###############",
                "// Line 298: ",
                "// Line 299:         # Define OAuth routes if the app expects it (i.e. a LoginButton is defined).",
                "// Line 300:         # It allows users to \"Sign in with HuggingFace\".",
                "// Line 305:         # Main Routes",
                "// Line 306:         ###############",
                "// Line 307: ",
                "// Line 308:         @app.head(\"/\", response_class=HTMLResponse)",
                "// Line 309:         @app.get(\"/\", response_class=HTMLResponse)",
                "// Line 310:         def main(request: fastapi.Request, user: str = Depends(get_current_user)):",
                "// Line 311:             mimetypes.add_type(\"application/javascript\", \".js\")",
                "// Line 312:             blocks = app.get_blocks()",
                "// Line 313:             root = route_utils.get_root_url(",
                "// Line 314:                 request=request, route_path=\"/\", root_path=app.root_path",
                "// vulnerable line: 315: )",
                "// Line 316:             if app.auth is None or user is not None:",
                "// Line 317:                 config = app.get_blocks().config",
                "// Line 318:                 config = route_utils.update_root_in_config(config, root)",
                "// Line 319:             else:",
                "// Line 320:                 config = {",
                "// Line 321:                     \"auth_required\": True,",
                "// Line 322:                     \"auth_message\": blocks.auth_message,",
                "// Line 323:                     \"space_id\": app.get_blocks().space_id,",
                "// Line 324:                     \"root\": root,",
                "// Line 325:                 }",
                "// Line 326: ",
                "// Line 327:             try:",
                "// Line 328:                 template = (",
                "// Line 329:                     \"frontend/share.html\" if blocks.share else \"frontend/index.html\"",
                "// vulnerable line: 330: )",
                "// Line 331:                 return templates.TemplateResponse(",
                "// Line 332:                     template,",
                "// Line 333:                     {\"request\": request, \"config\": config},",
                "// vulnerable line: 334: )",
                "// Line 335:             except TemplateNotFound as err:",
                "// Line 336:                 if blocks.share:",
                "// Line 337:                     raise ValueError(",
                "// Line 338:                         \"Did you install Gradio from source files? Share mode only \"",
                "// Line 339:                         \"works when Gradio is installed through the pip package.\"",
                "// Line 340:                     ) from err",
                "// Line 341:                 else:",
                "// Line 342:                     raise ValueError(",
                "// Line 343:                         \"Did you install Gradio from source files? You need to build \"",
                "// Line 344:                         \"the frontend by running /scripts/build_frontend.sh\"",
                "// Line 348:         @app.get(\"/info\", dependencies=[Depends(login_check)])",
                "// Line 349:         def api_info():",
                "// Line 350:             return app.get_blocks().get_api_info()  # type: ignore",
                "// Line 351: ",
                "// Line 352:         @app.get(\"/config/\", dependencies=[Depends(login_check)])",
                "// Line 353:         @app.get(\"/config\", dependencies=[Depends(login_check)])",
                "// Line 354:         def get_config(request: fastapi.Request):",
                "// Line 355:             config = app.get_blocks().config",
                "// Line 356:             root = route_utils.get_root_url(",
                "// Line 357:                 request=request, route_path=\"/config\", root_path=app.root_path",
                "// vulnerable line: 358: )",
                "// Line 359:             config = route_utils.update_root_in_config(config, root)",
                "// Line 360:             return ORJSONResponse(content=config)",
                "// Line 361: ",
                "// Line 362:         @app.get(\"/static/{path:path}\")",
                "// Line 363:         def static_resource(path: str):",
                "// Line 364:             static_file = safe_join(STATIC_PATH_LIB, path)",
                "// Line 365:             return FileResponse(static_file)",
                "// Line 366: ",
                "// Line 367:         @app.get(\"/custom_component/{id}/{type}/{file_name}\")",
                "// Line 368:         def custom_component_path(id: str, type: str, file_name: str):",
                "// Line 369:             config = app.get_blocks().config",
                "// Line 370:             components = config[\"components\"]",
                "// Line 371:             location = next(",
                "// Line 372:                 (item for item in components if item[\"component_class_id\"] == id), None",
                "// vulnerable line: 373: )",
                "// Line 374: ",
                "// Line 375:             if location is None:",
                "// Line 376:                 raise HTTPException(status_code=404, detail=\"Component not found.\")",
                "// Line 377: ",
                "// Line 378:             component_instance = app.get_blocks().get_component(location[\"id\"])",
                "// Line 379: ",
                "// Line 380:             module_name = component_instance.__class__.__module__",
                "// Line 381:             module_path = sys.modules[module_name].__file__",
                "// Line 382: ",
                "// Line 383:             if module_path is None or component_instance is None:",
                "// Line 384:                 raise HTTPException(status_code=404, detail=\"Component not found.\")",
                "// Line 385: ",
                "// Line 386:             return FileResponse(",
                "// Line 387:                 safe_join(",
                "// Line 388:                     str(Path(module_path).parent),",
                "// Line 389:                     f\"{component_instance.__class__.TEMPLATE_DIR}/{type}/{file_name}\",",
                "// vulnerable line: 390: )",
                "// vulnerable line: 391: )",
                "// Line 392: ",
                "// Line 393:         @app.get(\"/assets/{path:path}\")",
                "// Line 394:         def build_resource(path: str):",
                "// Line 395:             build_file = safe_join(BUILD_PATH_LIB, path)",
                "// Line 396:             return FileResponse(build_file)",
                "// Line 397: ",
                "// Line 398:         @app.get(\"/favicon.ico\")",
                "// Line 399:         async def favicon():",
                "// Line 400:             blocks = app.get_blocks()",
                "// Line 401:             if blocks.favicon_path is None:",
                "// Line 410:             try:",
                "// Line 411:                 rp_req = app.build_proxy_request(url_path)",
                "// Line 412:             except PermissionError as err:",
                "// Line 413:                 raise HTTPException(status_code=400, detail=str(err)) from err",
                "// Line 414:             rp_resp = await client.send(rp_req, stream=True)",
                "// Line 415:             return StreamingResponse(",
                "// Line 416:                 rp_resp.aiter_raw(),",
                "// Line 417:                 status_code=rp_resp.status_code,",
                "// Line 418:                 headers=rp_resp.headers,  # type: ignore",
                "// Line 419:                 background=BackgroundTask(rp_resp.aclose),",
                "// vulnerable line: 420: )",
                "// Line 421: ",
                "// Line 422:         @app.head(\"/file={path_or_url:path}\", dependencies=[Depends(login_check)])",
                "// Line 423:         @app.get(\"/file={path_or_url:path}\", dependencies=[Depends(login_check)])",
                "// Line 424:         async def file(path_or_url: str, request: fastapi.Request):",
                "// Line 425:             blocks = app.get_blocks()",
                "// Line 426:             if client_utils.is_http_url_like(path_or_url):",
                "// Line 427:                 return RedirectResponse(",
                "// Line 428:                     url=path_or_url, status_code=status.HTTP_302_FOUND",
                "// vulnerable line: 429: )",
                "// Line 430: ",
                "// Line 431:             if route_utils.starts_with_protocol(path_or_url):",
                "// Line 432:                 raise HTTPException(403, f\"File not allowed: {path_or_url}.\")",
                "// Line 433: ",
                "// Line 434:             abs_path = utils.abspath(path_or_url)",
                "// Line 435: ",
                "// Line 436:             in_blocklist = any(",
                "// Line 437:                 utils.is_in_or_equal(abs_path, blocked_path)",
                "// Line 438:                 for blocked_path in blocks.blocked_paths",
                "// vulnerable line: 439: )",
                "// Line 440: ",
                "// Line 441:             is_dir = abs_path.is_dir()",
                "// Line 442: ",
                "// Line 443:             if in_blocklist or is_dir:",
                "// Line 444:                 raise HTTPException(403, f\"File not allowed: {path_or_url}.\")",
                "// Line 445: ",
                "// Line 446:             created_by_app = False",
                "// Line 447:             for temp_file_set in blocks.temp_file_sets:",
                "// Line 448:                 if abs_path in temp_file_set:",
                "// Line 449:                     created_by_app = True",
                "// Line 450:                     break",
                "// Line 451:             in_allowlist = any(",
                "// Line 452:                 utils.is_in_or_equal(abs_path, allowed_path)",
                "// Line 453:                 for allowed_path in blocks.allowed_paths",
                "// vulnerable line: 454: )",
                "// Line 455:             was_uploaded = utils.is_in_or_equal(abs_path, app.uploaded_file_dir)",
                "// Line 456:             is_cached_example = utils.is_in_or_equal(",
                "// Line 457:                 abs_path, utils.abspath(utils.get_cache_folder())",
                "// vulnerable line: 458: )",
                "// Line 459: ",
                "// Line 460:             if not (",
                "// Line 461:                 created_by_app or in_allowlist or was_uploaded or is_cached_example",
                "// Line 462:             ):",
                "// Line 463:                 raise HTTPException(403, f\"File not allowed: {path_or_url}.\")",
                "// Line 464: ",
                "// Line 465:             if not abs_path.exists():",
                "// Line 466:                 raise HTTPException(404, f\"File not found: {path_or_url}.\")",
                "// Line 467: ",
                "// Line 468:             range_val = request.headers.get(\"Range\", \"\").strip()",
                "// Line 470:                 range_val = range_val[6:]",
                "// Line 471:                 start, end = range_val.split(\"-\")",
                "// Line 472:                 if start.isnumeric() and end.isnumeric():",
                "// Line 473:                     start = int(start)",
                "// Line 474:                     end = int(end)",
                "// Line 475:                     response = ranged_response.RangedFileResponse(",
                "// Line 476:                         abs_path,",
                "// Line 477:                         ranged_response.OpenRange(start, end),",
                "// Line 478:                         dict(request.headers),",
                "// Line 479:                         stat_result=os.stat(abs_path),",
                "// vulnerable line: 480: )",
                "// Line 481:                     return response",
                "// Line 482: ",
                "// Line 483:             return FileResponse(abs_path, headers={\"Accept-Ranges\": \"bytes\"})",
                "// Line 484: ",
                "// Line 485:         @app.get(",
                "// Line 486:             \"/stream/{session_hash}/{run}/{component_id}\",",
                "// Line 487:             dependencies=[Depends(login_check)],",
                "// vulnerable line: 488: )",
                "// Line 489:         async def stream(",
                "// Line 490:             session_hash: str,",
                "// Line 491:             run: int,",
                "// Line 492:             component_id: int,",
                "// Line 493:             request: fastapi.Request,  # noqa: ARG001",
                "// Line 494:         ):",
                "// Line 495:             stream: list = (",
                "// Line 496:                 app.get_blocks()",
                "// Line 497:                 .pending_streams[session_hash]",
                "// Line 498:                 .get(run, {})",
                "// Line 499:                 .get(component_id, None)",
                "// vulnerable line: 500: )",
                "// Line 501:             if stream is None:",
                "// Line 502:                 raise HTTPException(404, \"Stream not found.\")",
                "// Line 503: ",
                "// Line 504:             def stream_wrapper():",
                "// Line 505:                 check_stream_rate = 0.01",
                "// Line 506:                 max_wait_time = 120  # maximum wait between yields - assume generator thread has crashed otherwise.",
                "// Line 507:                 wait_time = 0",
                "// Line 508:                 while True:",
                "// Line 509:                     if len(stream) == 0:",
                "// Line 510:                         if wait_time > max_wait_time:",
                "// Line 541:         @app.post(\"/api/{api_name}\", dependencies=[Depends(login_check)])",
                "// Line 542:         @app.post(\"/api/{api_name}/\", dependencies=[Depends(login_check)])",
                "// Line 543:         async def predict(",
                "// Line 544:             api_name: str,",
                "// Line 545:             body: PredictBody,",
                "// Line 546:             request: fastapi.Request,",
                "// Line 547:             username: str = Depends(get_current_user),",
                "// Line 548:         ):",
                "// Line 549:             fn_index_inferred = route_utils.infer_fn_index(",
                "// Line 550:                 app=app, api_name=api_name, body=body",
                "// vulnerable line: 551: )",
                "// Line 552: ",
                "// Line 553:             if not app.get_blocks().api_open and app.get_blocks().queue_enabled_for_fn(",
                "// Line 554:                 fn_index_inferred",
                "// Line 555:             ):",
                "// Line 556:                 raise HTTPException(",
                "// Line 557:                     detail=\"This API endpoint does not accept direct HTTP POST requests. Please join the queue to use this API.\",",
                "// Line 558:                     status_code=status.HTTP_404_NOT_FOUND,",
                "// vulnerable line: 559: )",
                "// Line 560: ",
                "// Line 561:             gr_request = route_utils.compile_gr_request(",
                "// Line 562:                 app,",
                "// Line 563:                 body,",
                "// Line 564:                 fn_index_inferred=fn_index_inferred,",
                "// Line 565:                 username=username,",
                "// Line 566:                 request=request,",
                "// vulnerable line: 567: )",
                "// Line 568: ",
                "// Line 569:             try:",
                "// Line 570:                 output = await route_utils.call_process_api(",
                "// Line 571:                     app=app,",
                "// Line 572:                     body=body,",
                "// Line 573:                     gr_request=gr_request,",
                "// Line 574:                     fn_index_inferred=fn_index_inferred,",
                "// vulnerable line: 575: )",
                "// Line 576:             except BaseException as error:",
                "// Line 577:                 show_error = app.get_blocks().show_error or isinstance(error, Error)",
                "// Line 578:                 traceback.print_exc()",
                "// Line 579:                 return JSONResponse(",
                "// Line 580:                     content={\"error\": str(error) if show_error else None},",
                "// Line 581:                     status_code=500,",
                "// vulnerable line: 582: )",
                "// Line 583:             root_path = route_utils.get_root_url(",
                "// Line 584:                 request=request, route_path=f\"/api/{api_name}\", root_path=app.root_path",
                "// vulnerable line: 585: )",
                "// Line 586:             output = add_root_url(output, root_path, None)",
                "// Line 587:             return output",
                "// Line 588: ",
                "// Line 589:         @app.get(\"/queue/data\", dependencies=[Depends(login_check)])",
                "// Line 590:         async def queue_data(",
                "// Line 591:             request: fastapi.Request,",
                "// Line 592:             session_hash: str,",
                "// Line 593:         ):",
                "// Line 594:             blocks = app.get_blocks()",
                "// Line 595:             root_path = route_utils.get_root_url(",
                "// Line 596:                 request=request, route_path=\"/queue/data\", root_path=app.root_path",
                "// vulnerable line: 597: )",
                "// Line 598: ",
                "// Line 599:             async def sse_stream(request: fastapi.Request):",
                "// Line 600:                 try:",
                "// Line 601:                     last_heartbeat = time.perf_counter()",
                "// Line 602:                     while True:",
                "// Line 603:                         if await request.is_disconnected():",
                "// Line 604:                             await blocks._queue.clean_events(session_hash=session_hash)",
                "// Line 605:                             return",
                "// Line 606: ",
                "// Line 607:                         if (",
                "// Line 608:                             session_hash",
                "// Line 609:                             not in blocks._queue.pending_messages_per_session",
                "// Line 610:                         ):",
                "// Line 611:                             raise HTTPException(",
                "// Line 612:                                 status_code=status.HTTP_404_NOT_FOUND,",
                "// Line 613:                                 detail=\"Session not found.\",",
                "// vulnerable line: 614: )",
                "// Line 615: ",
                "// Line 616:                         heartbeat_rate = 15",
                "// Line 617:                         check_rate = 0.05",
                "// Line 618:                         message = None",
                "// Line 619:                         try:",
                "// Line 620:                             messages = blocks._queue.pending_messages_per_session[",
                "// Line 621:                                 session_hash",
                "// Line 622:                             ]",
                "// Line 623:                             message = messages.get_nowait()",
                "// Line 624:                         except EmptyQueue:",
                "// Line 648:                                 blocks._queue.pending_event_ids_session[",
                "// Line 649:                                     session_hash",
                "// Line 650:                                 ].remove(message[\"event_id\"])",
                "// Line 651:                                 if message[\"msg\"] == ServerMessage.server_stopped or (",
                "// Line 652:                                     message[\"msg\"] == ServerMessage.process_completed",
                "// Line 653:                                     and (",
                "// Line 654:                                         len(",
                "// Line 655:                                             blocks._queue.pending_event_ids_session[",
                "// Line 656:                                                 session_hash",
                "// Line 657:                                             ]",
                "// vulnerable line: 658: )",
                "// Line 659:                                         == 0",
                "// vulnerable line: 660: )",
                "// Line 661:                                 ):",
                "// Line 662:                                     return",
                "// Line 663:                 except BaseException as e:",
                "// Line 664:                     message = {",
                "// Line 665:                         \"msg\": \"unexpected_error\",",
                "// Line 666:                         \"success\": False,",
                "// Line 667:                         \"message\": str(e),",
                "// Line 668:                     }",
                "// Line 669:                     yield f\"data: {json.dumps(message)}",
                "// Line 670: ",
                "// Line 671: \"",
                "// Line 672:                     if isinstance(e, asyncio.CancelledError):",
                "// Line 673:                         del blocks._queue.pending_messages_per_session[session_hash]",
                "// Line 674:                         await blocks._queue.clean_events(session_hash=session_hash)",
                "// Line 675:                     raise e",
                "// Line 676: ",
                "// Line 677:             return StreamingResponse(",
                "// Line 678:                 sse_stream(request),",
                "// Line 679:                 media_type=\"text/event-stream\",",
                "// vulnerable line: 680: )",
                "// Line 681: ",
                "// Line 682:         @app.post(\"/queue/join\", dependencies=[Depends(login_check)])",
                "// Line 683:         async def queue_join(",
                "// Line 684:             body: PredictBody,",
                "// Line 685:             request: fastapi.Request,",
                "// Line 686:             username: str = Depends(get_current_user),",
                "// Line 687:         ):",
                "// Line 688:             blocks = app.get_blocks()",
                "// Line 689: ",
                "// Line 690:             if blocks._queue.server_app is None:",
                "// Line 691:                 blocks._queue.set_server_app(app)",
                "// Line 692: ",
                "// Line 693:             if blocks._queue.stopped:",
                "// Line 694:                 raise HTTPException(",
                "// Line 695:                     status_code=status.HTTP_503_SERVICE_UNAVAILABLE,",
                "// Line 696:                     detail=\"Queue is stopped.\",",
                "// vulnerable line: 697: )",
                "// Line 698: ",
                "// Line 699:             success, event_id = await blocks._queue.push(body, request, username)",
                "// Line 700:             if not success:",
                "// Line 701:                 status_code = (",
                "// Line 702:                     status.HTTP_503_SERVICE_UNAVAILABLE",
                "// Line 703:                     if \"Queue is full.\" in event_id",
                "// Line 704:                     else status.HTTP_400_BAD_REQUEST",
                "// vulnerable line: 705: )",
                "// Line 706:                 raise HTTPException(status_code=status_code, detail=event_id)",
                "// Line 707:             return {\"event_id\": event_id}",
                "// Line 708: ",
                "// Line 709:         @app.post(\"/component_server\", dependencies=[Depends(login_check)])",
                "// Line 710:         @app.post(\"/component_server/\", dependencies=[Depends(login_check)])",
                "// Line 711:         def component_server(body: ComponentServerBody):",
                "// Line 712:             state = app.state_holder[body.session_hash]",
                "// Line 713:             component_id = body.component_id",
                "// Line 714:             block: Block",
                "// Line 715:             if component_id in state:",
                "// Line 716:                 block = state[component_id]",
                "// Line 717:             else:",
                "// Line 718:                 block = app.get_blocks().blocks[component_id]",
                "// Line 719:             fn = getattr(block, body.fn_name, None)",
                "// Line 720:             if fn is None or not getattr(fn, \"_is_server_fn\", False):",
                "// Line 721:                 raise HTTPException(",
                "// Line 722:                     status_code=status.HTTP_404_NOT_FOUND,",
                "// Line 723:                     detail=\"Function not found.\",",
                "// vulnerable line: 724: )",
                "// Line 725:             return fn(body.data)",
                "// Line 726: ",
                "// Line 727:         @app.get(",
                "// Line 728:             \"/queue/status\",",
                "// Line 729:             dependencies=[Depends(login_check)],",
                "// Line 730:             response_model=Estimation,",
                "// vulnerable line: 731: )",
                "// Line 732:         async def get_queue_status():",
                "// Line 733:             return app.get_blocks()._queue.get_status()",
                "// Line 734: ",
                "// Line 735:         @app.get(\"/upload_progress\")",
                "// Line 736:         def get_upload_progress(upload_id: str, request: fastapi.Request):",
                "// Line 737:             async def sse_stream(request: fastapi.Request):",
                "// Line 738:                 last_heartbeat = time.perf_counter()",
                "// Line 739:                 is_done = False",
                "// Line 740:                 while True:",
                "// Line 741:                     if await request.is_disconnected():",
                "// Line 768:                         if time.perf_counter() - last_heartbeat > heartbeat_rate:",
                "// Line 769:                             message = {\"msg\": \"heartbeat\"}",
                "// Line 770:                             yield f\"data: {json.dumps(message)}",
                "// Line 771: ",
                "// Line 772: \"",
                "// Line 773:                             last_heartbeat = time.perf_counter()",
                "// Line 774: ",
                "// Line 775:             return StreamingResponse(",
                "// Line 776:                 sse_stream(request),",
                "// Line 777:                 media_type=\"text/event-stream\",",
                "// vulnerable line: 778: )",
                "// Line 779: ",
                "// Line 780:         @app.post(\"/upload\", dependencies=[Depends(login_check)])",
                "// Line 781:         async def upload_file(",
                "// Line 782:             request: fastapi.Request,",
                "// Line 783:             bg_tasks: BackgroundTasks,",
                "// Line 784:             upload_id: Optional[str] = None,",
                "// Line 785:         ):",
                "// Line 786:             content_type_header = request.headers.get(\"Content-Type\")",
                "// Line 787:             content_type: bytes",
                "// Line 788:             content_type, _ = parse_options_header(content_type_header or \"\")",
                "// Line 792:             try:",
                "// Line 793:                 if upload_id:",
                "// Line 794:                     file_upload_statuses.track(upload_id)",
                "// Line 795:                 multipart_parser = GradioMultiPartParser(",
                "// Line 796:                     request.headers,",
                "// Line 797:                     request.stream(),",
                "// Line 798:                     max_files=1000,",
                "// Line 799:                     max_fields=1000,",
                "// Line 800:                     upload_id=upload_id if upload_id else None,",
                "// Line 801:                     upload_progress=file_upload_statuses if upload_id else None,",
                "// vulnerable line: 802: )",
                "// Line 803:                 form = await multipart_parser.parse()",
                "// Line 804:             except MultiPartException as exc:",
                "// Line 805:                 raise HTTPException(status_code=400, detail=exc.message) from exc",
                "// Line 806: ",
                "// Line 807:             output_files = []",
                "// Line 808:             files_to_copy = []",
                "// Line 809:             locations: list[str] = []",
                "// Line 810:             for temp_file in form.getlist(\"files\"):",
                "// Line 811:                 if not isinstance(temp_file, GradioUploadFile):",
                "// Line 812:                     raise TypeError(\"File is not an instance of GradioUploadFile\")",
                "// Line 826:                 # if that fails, we move in the background.",
                "// Line 827:                 try:",
                "// Line 828:                     os.rename(temp_file.file.name, dest)",
                "// Line 829:                 except OSError:",
                "// Line 830:                     files_to_copy.append(temp_file.file.name)",
                "// Line 831:                     locations.append(str(dest))",
                "// Line 832:                 output_files.append(dest)",
                "// Line 833:             if files_to_copy:",
                "// Line 834:                 bg_tasks.add_task(",
                "// Line 835:                     move_uploaded_files_to_cache, files_to_copy, locations",
                "// vulnerable line: 836: )",
                "// Line 837:             return output_files",
                "// Line 838: ",
                "// Line 839:         @app.on_event(\"startup\")",
                "// Line 840:         @app.get(\"/startup-events\")",
                "// Line 841:         async def startup_events():",
                "// Line 842:             if not app.startup_events_triggered:",
                "// Line 843:                 app.get_blocks().startup_events()",
                "// Line 844:                 app.startup_events_triggered = True",
                "// Line 845:                 return True",
                "// Line 846:             return False"
            ]
        },
        {
            "filename_of_changes": "test_routes.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "18",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        }
    ]
}