{
    "cve_id": "CVE-2024-3761",
    "cve_description": "In lunary-ai/lunary version 1.2.2, the DELETE endpoint located at `packages/backend/src/api/v1/datasets` is vulnerable to unauthorized dataset deletion due to missing authorization and authentication mechanisms. This vulnerability allows any user, even those without a valid token, to delete a dataset by sending a DELETE request to the endpoint. The issue was fixed in version 1.2.8. The impact of this vulnerability is significant as it permits unauthorized users to delete datasets, potentially leading to data loss or disruption of service.",
    "cve_publish_date": "2024-05-20T09:15Z",
    "cwe_id": "CWE-862",
    "cwe_name": "Missing Authorization",
    "cwe_description": "The product does not perform an authorization check when an actor attempts to access a resource or perform an action.",
    "commit_message": "fix: authorization delete dataset (#204)",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "index.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "10",
            "number_of_lines_deleted_vulnerable_to_cve": "5",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 2: import Context from \"@/src/utils/koa\"",
                "// Line 3: import Router from \"koa-router\"",
                "// Line 4: import { z } from \"zod\"",
                "// Line 5: import { getDatasetById, getDatasetBySlug } from \"./utils\"",
                "// Line 6: import { validateUUID } from \"@/src/utils/misc\"",
                "// Line 7: import { clearUndefined } from \"@/src/utils/ingest\"",
                "// Line 8: import { checkAccess } from \"@/src/utils/authorization\"",
                "// Line 9: ",
                "// Line 10: const datasets = new Router({",
                "// Line 11:   prefix: \"/datasets\",",
                "// vulnerable line: 12: })",
                "// Line 13: ",
                "// Line 14: datasets.get(\"/\", checkAccess(\"datasets\", \"list\"), async (ctx: Context) => {",
                "// Line 15:   const { projectId } = ctx.state",
                "// Line 16: ",
                "// Line 17:   const rows =",
                "// Line 18:     await sql`select * from dataset d where project_id = ${projectId} order by created_at desc`",
                "// Line 19: ",
                "// Line 20:   ctx.body = rows",
                "// vulnerable line: 21: })",
                "// Line 22: ",
                "// Line 23: // Can be public route",
                "// Line 24: datasets.get(",
                "// Line 25:   \"/:identifier\",",
                "// Line 26:   // checkAccess(\"datasets\", \"read\"),",
                "// Line 27:   async (ctx: Context) => {",
                "// Line 28:     const { projectId } = ctx.state",
                "// Line 29:     const { identifier } = ctx.params",
                "// Line 30: ",
                "// Line 31:     const isUUID = validateUUID(identifier)",
                "// Line 60:     },",
                "// Line 61:   ],",
                "// Line 62:   text: \"What is the result of 1 + 1?\",",
                "// Line 63: }",
                "// Line 64: ",
                "// Line 65: datasets.post(\"/\", checkAccess(\"datasets\", \"create\"), async (ctx: Context) => {",
                "// Line 66:   const { projectId, userId } = ctx.state",
                "// Line 67:   const body = z.object({",
                "// Line 68:     slug: z.string(),",
                "// Line 69:     format: z.string().optional().default(\"text\"),",
                "// vulnerable line: 70: })",
                "// Line 71: ",
                "// Line 72:   const { slug, format } = body.parse(ctx.request.body)",
                "// Line 73: ",
                "// Line 74:   const [dataset] = await sql`",
                "// Line 75:     insert into dataset ${sql({",
                "// Line 76:       slug,",
                "// Line 77:       format,",
                "// Line 78:       ownerId: userId,",
                "// Line 79:       projectId,",
                "// Line 80:     })} returning *",
                "// Line 92:     ${sql({",
                "// Line 93:       promptId: prompt.id,",
                "// Line 94:       variables: {},",
                "// Line 95:       context: \"\",",
                "// Line 96:       idealOutput: \"\",",
                "// Line 97:     })}",
                "// Line 98:     returning *",
                "// Line 99:   `",
                "// Line 100: ",
                "// Line 101:   ctx.body = dataset",
                "// vulnerable line: 102: })",
                "// Line 103: ",
                "// Line 104: datasets.patch(",
                "// Line 105:   \"/:id\",",
                "// Line 106:   checkAccess(\"datasets\", \"update\"),",
                "// Line 107:   async (ctx: Context) => {",
                "// Line 108:     const { projectId } = ctx.state",
                "// vulnerable line: 109: const { id } = ctx.params",
                "// Line 110: ",
                "// Line 111:     const { slug } = ctx.request.body as {",
                "// Line 112:       slug: string",
                "// Line 113:     }",
                "// Line 114: ",
                "// Line 115:     const [dataset] = await sql`",
                "// Line 116:     update dataset set slug = ${slug} where id = ${id} and project_id = ${projectId} returning *",
                "// Line 117:   `",
                "// Line 118: ",
                "// Line 119:     ctx.body = dataset",
                "// Line 120:   },",
                "// Line 121: )",
                "// Line 122: ",
                "// vulnerable line: 123: datasets.delete(\"/:id\", async (ctx: Context) => {",
                "// vulnerable line: 124: const { id } = ctx.params",
                "// Line 125: ",
                "// vulnerable line: 126: await sql`delete from dataset where id = ${id}`",
                "// Line 127: ",
                "// vulnerable line: 128: ctx.status = 200",
                "// vulnerable line: 129: })",
                "// Line 130: ",
                "// Line 131: // Create prompt",
                "// Line 132: datasets.post(",
                "// Line 133:   \"/prompts\",",
                "// Line 134:   checkAccess(\"datasets\", \"update\"),",
                "// Line 135:   async (ctx: Context) => {",
                "// Line 136:     const { projectId } = ctx.state",
                "// Line 137: ",
                "// Line 138:     const { datasetId, messages } = ctx.request.body as {",
                "// Line 139:       datasetId: string",
                "// Line 185: ",
                "// Line 186:     ctx.body = prompt",
                "// Line 187:   },",
                "// Line 188: )",
                "// Line 189: ",
                "// Line 190: // add route ot to delete dataset_prompt and dataset_prompt_variation",
                "// Line 191: datasets.delete(",
                "// Line 192:   \"/prompts/:id\",",
                "// Line 193:   checkAccess(\"datasets\", \"update\"),",
                "// Line 194:   async (ctx: Context) => {",
                "// vulnerable line: 195: const { id } = ctx.params",
                "// Line 196: ",
                "// Line 197:     await sql`delete from dataset_prompt where id = ${id}`",
                "// Line 198:     await sql`delete from dataset_prompt_variation where prompt_id = ${id}`",
                "// Line 199: ",
                "// vulnerable line: 200: ctx.status = 200",
                "// Line 201:   },",
                "// Line 202: )",
                "// Line 203: ",
                "// Line 204: // Update prompt",
                "// Line 205: datasets.patch(",
                "// Line 206:   \"/prompts/:id\",",
                "// Line 207:   checkAccess(\"datasets\", \"update\"),",
                "// Line 208:   async (ctx: Context) => {",
                "// vulnerable line: 209: const { id } = ctx.params",
                "// Line 210:     const { messages } = ctx.request.body as {",
                "// Line 211:       messages: string",
                "// Line 212:     }",
                "// Line 213: ",
                "// Line 214:     const [prompt] =",
                "// Line 215:       await sql`update dataset_prompt set messages = ${messages} where id = ${id} returning *`",
                "// Line 216: ",
                "// Line 217:     ctx.body = prompt",
                "// Line 218:   },",
                "// Line 219: )",
                "// Line 220: ",
                "// Line 221: datasets.get(",
                "// Line 222:   \"/variations/:id\",",
                "// Line 223:   checkAccess(\"datasets\", \"read\"),",
                "// Line 224:   async (ctx: Context) => {",
                "// vulnerable line: 225: const { id } = ctx.params",
                "// Line 226: ",
                "// Line 227:     const [variation] = await sql`",
                "// Line 228:     select * from dataset_prompt_variation where id = ${id}",
                "// Line 229:   `",
                "// Line 230: ",
                "// Line 231:     if (!variation) {",
                "// Line 232:       ctx.throw(404, \"Variation not found\")",
                "// Line 233:     }",
                "// Line 234: ",
                "// Line 235:     ctx.body = variation",
                "// Line 236:   },",
                "// Line 237: )",
                "// Line 238: ",
                "// Line 239: datasets.delete(",
                "// Line 240:   \"/variations/:id\",",
                "// Line 241:   checkAccess(\"datasets\", \"update\"),",
                "// Line 242:   async (ctx: Context) => {",
                "// vulnerable line: 243: const { id } = ctx.params",
                "// Line 244: ",
                "// Line 245:     await sql`delete from dataset_prompt_variation where id = ${id}`",
                "// Line 246: ",
                "// vulnerable line: 247: ctx.status = 200",
                "// Line 248:   },",
                "// Line 249: )",
                "// Line 250: ",
                "// Line 251: // Update variation",
                "// Line 252: datasets.patch(",
                "// Line 253:   \"/variations/:variationId\",",
                "// Line 254:   checkAccess(\"datasets\", \"update\"),",
                "// Line 255:   async (ctx: Context) => {",
                "// Line 256:     const { variationId } = ctx.params",
                "// Line 257:     const { variables, context, idealOutput } = ctx.request.body as {"
            ]
        }
    ]
}