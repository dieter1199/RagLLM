{
    "cve_id": "CVE-2024-28103",
    "cve_description": "Action Pack is a framework for handling and responding to web requests. Since 6.1.0, the application configurable Permissions-Policy is only served on responses with an HTML related Content-Type. This vulnerability is fixed in  6.1.7.8, 7.0.8.2, and 7.1.3.3.",
    "cve_publish_date": "2024-06-04T20:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "include the HTTP Permissions-Policy on non-HTML Content-Types\n\n[CVE-2024-28103]\n\nThe application configurable Permissions-Policy is only\nserved on responses with an HTML related Content-Type.\n\nThis change allows all Content-Types to serve the\nconfigured Permissions-Policy as there are many non-HTML\nContent-Types that would benefit from this header.\n(examples include image/svg+xml and application/xml)",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "permissions_policy.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "0",
            "number_of_lines_deleted_vulnerable_to_cve": "7",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 25:   #",
                "// Line 26:   # The Feature-Policy header has been renamed to Permissions-Policy. The",
                "// Line 27:   # Permissions-Policy requires a different implementation and isn't yet supported",
                "// Line 28:   # by all browsers. To avoid having to rename this middleware in the future we",
                "// Line 29:   # use the new name for the middleware but keep the old header name and",
                "// Line 30:   # implementation for now.",
                "// Line 31:   class PermissionsPolicy",
                "// Line 32:     class Middleware",
                "// Line 33:       def initialize(app)",
                "// Line 34:         @app = app",
                "// vulnerable line: 35: end",
                "// Line 36: ",
                "// Line 37:       def call(env)",
                "// Line 38:         _, headers, _ = response = @app.call(env)",
                "// Line 39: ",
                "// vulnerable line: 40: return response unless html_response?(headers)",
                "// Line 41:         return response if policy_present?(headers)",
                "// Line 42: ",
                "// Line 43:         request = ActionDispatch::Request.new(env)",
                "// Line 44: ",
                "// Line 45:         if policy = request.permissions_policy",
                "// Line 46:           headers[ActionDispatch::Constants::FEATURE_POLICY] = policy.build(request.controller_instance)",
                "// vulnerable line: 47: end",
                "// Line 48: ",
                "// Line 49:         if policy_empty?(policy)",
                "// Line 50:           headers.delete(ActionDispatch::Constants::FEATURE_POLICY)",
                "// vulnerable line: 51: end",
                "// Line 52: ",
                "// Line 53:         response",
                "// vulnerable line: 54: end",
                "// Line 55: ",
                "// Line 56:       private",
                "// vulnerable line: 57: def html_response?(headers)",
                "// vulnerable line: 58: if content_type = headers[Rack::CONTENT_TYPE]",
                "// vulnerable line: 59: content_type.include?(\"html\")",
                "// vulnerable line: 60: end",
                "// vulnerable line: 61: end",
                "// Line 62: ",
                "// Line 63:         def policy_present?(headers)",
                "// Line 64:           headers[ActionDispatch::Constants::FEATURE_POLICY]",
                "// vulnerable line: 65: end",
                "// Line 66: ",
                "// Line 67:         def policy_empty?(policy)",
                "// Line 68:           policy&.directives&.empty?",
                "// vulnerable line: 69: end",
                "// vulnerable line: 70: end",
                "// Line 71: ",
                "// Line 72:     module Request",
                "// Line 73:       POLICY = \"action_dispatch.permissions_policy\"",
                "// Line 74: ",
                "// Line 75:       def permissions_policy",
                "// Line 76:         get_header(POLICY)",
                "// vulnerable line: 77: end",
                "// Line 78: ",
                "// Line 79:       def permissions_policy=(policy)",
                "// Line 80:         set_header(POLICY, policy)",
                "// vulnerable line: 81: end",
                "// vulnerable line: 82: end",
                "// Line 83: ",
                "// Line 84:     MAPPINGS = {",
                "// Line 85:       self: \"'self'\",",
                "// Line 86:       none: \"'none'\",",
                "// Line 87:     }.freeze",
                "// Line 88: ",
                "// Line 89:     # List of available permissions can be found at",
                "// Line 90:     # https://github.com/w3c/webappsec-permissions-policy/blob/main/features.md#policy-controlled-features",
                "// Line 91:     DIRECTIVES = {",
                "// Line 92:       accelerometer:        \"accelerometer\",",
                "// Line 113:       web_share:            \"web-share\",",
                "// Line 114:     }.freeze",
                "// Line 115: ",
                "// Line 116:     private_constant :MAPPINGS, :DIRECTIVES",
                "// Line 117: ",
                "// Line 118:     attr_reader :directives",
                "// Line 119: ",
                "// Line 120:     def initialize",
                "// Line 121:       @directives = {}",
                "// Line 122:       yield self if block_given?",
                "// vulnerable line: 123: end",
                "// Line 124: ",
                "// Line 125:     def initialize_copy(other)",
                "// Line 126:       @directives = other.directives.deep_dup",
                "// vulnerable line: 127: end",
                "// Line 128: ",
                "// Line 129:     DIRECTIVES.each do |name, directive|",
                "// Line 130:       define_method(name) do |*sources|",
                "// Line 131:         if sources.first",
                "// Line 132:           @directives[directive] = apply_mappings(sources)",
                "// Line 133:         else",
                "// Line 134:           @directives.delete(directive)",
                "// vulnerable line: 135: end",
                "// vulnerable line: 136: end",
                "// vulnerable line: 137: end",
                "// Line 138: ",
                "// Line 139:     def build(context = nil)",
                "// Line 140:       build_directives(context).compact.join(\"; \")",
                "// vulnerable line: 141: end",
                "// Line 142: ",
                "// Line 143:     private",
                "// Line 144:       def apply_mappings(sources)",
                "// Line 145:         sources.map do |source|",
                "// Line 146:           case source",
                "// Line 147:           when Symbol",
                "// Line 148:             apply_mapping(source)",
                "// Line 149:           when String, Proc",
                "// Line 150:             source",
                "// Line 151:           else",
                "// Line 152:             raise ArgumentError, \"Invalid HTTP permissions policy source: #{source.inspect}\"",
                "// vulnerable line: 153: end",
                "// vulnerable line: 154: end",
                "// vulnerable line: 155: end",
                "// Line 156: ",
                "// Line 157:       def apply_mapping(source)",
                "// Line 158:         MAPPINGS.fetch(source) do",
                "// Line 159:           raise ArgumentError, \"Unknown HTTP permissions policy source mapping: #{source.inspect}\"",
                "// vulnerable line: 160: end",
                "// vulnerable line: 161: end",
                "// Line 162: ",
                "// Line 163:       def build_directives(context)",
                "// Line 164:         @directives.map do |directive, sources|",
                "// Line 165:           if sources.is_a?(Array)",
                "// Line 166:             \"#{directive} #{build_directive(sources, context).join(' ')}\"",
                "// Line 167:           elsif sources",
                "// Line 168:             directive",
                "// Line 169:           else",
                "// Line 170:             nil",
                "// vulnerable line: 171: end",
                "// vulnerable line: 172: end",
                "// vulnerable line: 173: end",
                "// Line 174: ",
                "// Line 175:       def build_directive(sources, context)",
                "// Line 176:         sources.map { |source| resolve_source(source, context) }",
                "// vulnerable line: 177: end",
                "// Line 178: ",
                "// Line 179:       def resolve_source(source, context)",
                "// Line 180:         case source",
                "// Line 181:         when String",
                "// Line 182:           source",
                "// Line 183:         when Symbol",
                "// Line 184:           source.to_s",
                "// Line 185:         when Proc",
                "// Line 186:           if context.nil?",
                "// Line 187:             raise RuntimeError, \"Missing context for the dynamic permissions policy source: #{source.inspect}\"",
                "// Line 188:           else",
                "// Line 189:             context.instance_exec(&source)",
                "// vulnerable line: 190: end",
                "// Line 191:         else",
                "// Line 192:           raise RuntimeError, \"Unexpected permissions policy source: #{source.inspect}\"",
                "// vulnerable line: 193: end",
                "// vulnerable line: 194: end",
                "// vulnerable line: 195: end",
                "// vulnerable line: 196: end"
            ]
        },
        {
            "filename_of_changes": "permissions_policy_test.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 62:   end",
                "// Line 63: ",
                "// Line 64:   test \"html requests will set a policy\" do",
                "// Line 65:     @app = build_app(->(env) { [200, { Rack::CONTENT_TYPE => \"text/html\" }, []] })",
                "// Line 66: ",
                "// Line 67:     get \"/index\"",
                "// Line 68: ",
                "// Line 69:     assert_equal \"gyroscope 'self'\", response.headers[ActionDispatch::Constants::FEATURE_POLICY]",
                "// Line 70:   end",
                "// Line 71: ",
                "// vulnerable line: 72: test \"non-html requests will not set a policy\" do",
                "// Line 73:     @app = build_app(->(env) { [200, { Rack::CONTENT_TYPE => \"application/json\" }, []] })",
                "// Line 74: ",
                "// Line 75:     get \"/index\"",
                "// Line 76: ",
                "// vulnerable line: 77: assert_nil response.headers[ActionDispatch::Constants::FEATURE_POLICY]",
                "// Line 78:   end",
                "// Line 79: ",
                "// Line 80:   test \"existing policies will not be overwritten\" do",
                "// Line 81:     @app = build_app(->(env) { [200, { ActionDispatch::Constants::FEATURE_POLICY => \"gyroscope 'none'\" }, []] })",
                "// Line 82: ",
                "// Line 83:     get \"/index\"",
                "// Line 84: ",
                "// Line 85:     assert_equal \"gyroscope 'none'\", response.headers[ActionDispatch::Constants::FEATURE_POLICY]",
                "// Line 86:   end",
                "// Line 87: "
            ]
        }
    ]
}