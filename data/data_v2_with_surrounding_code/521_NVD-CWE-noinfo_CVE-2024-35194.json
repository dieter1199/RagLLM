{
    "cve_id": "CVE-2024-35194",
    "cve_description": "Minder is a software supply chain security platform. Prior to version 0.0.50, Minder engine is susceptible to a denial of service from memory exhaustion that can be triggered from maliciously created templates. Minder engine uses templating to generate strings for various use cases such as URLs, messages for pull requests, descriptions for advisories. In some cases can the user control both the template and the params for it, and in a subset of these cases, Minder reads the generated template entirely into memory. When Minders templating meets both of these conditions, an attacker is able to generate large enough templates that Minder will exhaust memory and crash. This vulnerability is fixed in 0.0.50.",
    "cve_publish_date": "2024-05-20T21:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Merge pull request from GHSA-8fmj-33gw-g7pw\n\nSimilarly to other readers, this also limits the size. In this case, it\nwas set to 10MB, since attestations can get pretty big.\n\nSigned-off-by: Juan Antonio Osorio <ozz@stacklok.com>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "container.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "9",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 285:     resp, err := ghCli.Do(ctx, req)",
                "// Line 286:     if err != nil {",
                "// Line 287:         if resp != nil && resp.StatusCode == http.StatusNotFound {",
                "// Line 288:             return nil, fmt.Errorf(\"%w: %s\", ErrProvenanceNotFoundOrIncomplete, err.Error())",
                "// Line 289:         }",
                "// Line 290:         return nil, fmt.Errorf(\"error doing request: %w\", err)",
                "// Line 291:     }",
                "// Line 292:     defer resp.Body.Close()",
                "// Line 293: ",
                "// Line 294:     var attestationReply AttestationReply",
                "// vulnerable line: 295: if err := json.NewDecoder(resp.Body).Decode(&attestationReply); err != nil {",
                "// Line 296:         return nil, fmt.Errorf(\"error decoding response: %w\", err)",
                "// Line 297:     }",
                "// Line 298: ",
                "// Line 299:     return &attestationReply, nil",
                "// Line 300: }",
                "// Line 301: ",
                "// Line 302: func unmarhsalAttestationReply(attestation *Attestation) (*bundle.ProtobufBundle, error) {",
                "// Line 303:     var pbBundle protobundle.Bundle",
                "// Line 304:     if err := protojson.Unmarshal(attestation.Bundle, &pbBundle); err != nil {",
                "// Line 305:         return nil, fmt.Errorf(\"error unmarshaling attestation: %w\", err)",
                "// Line 439: func getSimpleSigningLayersFromSignatureManifest(manifestRef string, auth authn.Authenticator) ([]v1.Descriptor, error) {",
                "// Line 440:     craneOpts := []crane.Option{crane.WithAuth(auth)}",
                "// Line 441: ",
                "// Line 442:     // Get the manifest of the signature",
                "// Line 443:     mf, err := crane.Manifest(manifestRef, craneOpts...)",
                "// Line 444:     if err != nil {",
                "// Line 445:         return nil, fmt.Errorf(\"error getting signature manifest: %w\", err)",
                "// Line 446:     }",
                "// Line 447: ",
                "// Line 448:     // Parse the manifest",
                "// vulnerable line: 449: manifest, err := v1.ParseManifest(bytes.NewReader(mf))",
                "// Line 450:     if err != nil {",
                "// Line 451:         return nil, fmt.Errorf(\"error parsing signature manifest: %w\", err)",
                "// Line 452:     }",
                "// Line 453: ",
                "// Line 454:     // Loop through its layers and extract the simple signing layers",
                "// Line 455:     var results []v1.Descriptor",
                "// Line 456:     for _, layer := range manifest.Layers {",
                "// Line 457:         if layer.MediaType == \"application/vnd.dev.cosign.simplesigning.v1+json\" {",
                "// Line 458:             // We found a simple signing layer, store and return it even if we may fail to parse it later",
                "// Line 459:             results = append(results, layer)"
            ]
        }
    ]
}