{
    "cve_id": "CVE-2024-37166",
    "cve_description": "ghtml is software that uses tagged templates for template engine functionality. It is possible to introduce user-controlled JavaScript code and trigger a Cross-Site Scripting (XSS) vulnerability in some cases. Version 2.0.0 introduces changes to mitigate this issue. Version 2.0.0 contains updated documentation to clarify that while ghtml escapes characters with special meaning in HTML, it does not provide comprehensive protection against all types of XSS attacks in every scenario. This aligns with the approach taken by other template engines. Developers should be cautious and take additional measures to sanitize user input and prevent potential vulnerabilities. Additionally, the backtick character (`) is now also escaped to prevent the creation of strings in most cases where a malicious actor somehow gains the ability to write JavaScript. This does not provide comprehensive protection either.",
    "cve_publish_date": "2024-06-10T22:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Merge pull request from GHSA-vvhj-v88f-5gxr\n\n* add = to escaped chars\n\n* add Security to README and remove XSS protection\n\n* add `\n\n* remove =\n\n* format\n\n* improve readme.md\n\n* update\n\n* update README.md",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "index.js",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "11",
            "number_of_lines_deleted_vulnerable_to_cve": "11",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 52: test(\"renders safe content\", () => {",
                "// Line 53:   assert.strictEqual(",
                "// Line 54:     html`<p>${descriptionSafe}</p>`,",
                "// Line 55:     \"<p>This is a safe description.</p>\",",
                "// Line 56:   );",
                "// Line 57: });",
                "// Line 58: ",
                "// Line 59: test(\"renders unsafe content\", () => {",
                "// Line 60:   assert.strictEqual(",
                "// Line 61:     html`<p>${descriptionUnsafe}</p>`,",
                "// vulnerable line: 62: `<p>&lt;script&gt;alert(&apos;This is an unsafe description.&apos;)&lt;/script&gt;</p>`,",
                "// Line 63:   );",
                "// Line 64: });",
                "// Line 65: ",
                "// Line 66: test(\"renders arrays\", () => {",
                "// Line 67:   assert.strictEqual(",
                "// Line 68:     html`<p>${[descriptionSafe, descriptionUnsafe]}</p>`,",
                "// vulnerable line: 69: \"<p>This is a safe description.&lt;script&gt;alert(&apos;This is an unsafe description.&apos;)&lt;/script&gt;</p>\",",
                "// Line 70:   );",
                "// Line 71: });",
                "// Line 72: ",
                "// Line 73: test(\"bypasses escaping\", () => {",
                "// Line 74:   assert.strictEqual(",
                "// Line 75:     html`<p>!${[descriptionSafe, descriptionUnsafe]}</p>`,",
                "// Line 76:     \"<p>This is a safe description.<script>alert('This is an unsafe description.')</script></p>\",",
                "// Line 77:   );",
                "// Line 78: });",
                "// Line 79: ",
                "// Line 80: test(\"renders nested html calls\", () => {",
                "// Line 81:   // prettier-ignore",
                "// Line 82:   assert.strictEqual(",
                "// Line 83:     html`<p>!${conditionTrue ? html`<strong>${descriptionUnsafe}</strong>` : \"\"}</p>`,",
                "// vulnerable line: 84: \"<p><strong>&lt;script&gt;alert(&apos;This is an unsafe description.&apos;)&lt;/script&gt;</strong></p>\",",
                "// Line 85:   );",
                "// Line 86: });",
                "// Line 87: ",
                "// Line 88: test(\"renders multiple html calls\", () => {",
                "// Line 89:   assert.strictEqual(",
                "// Line 90:     html`",
                "// Line 91:       <p>",
                "// Line 92:         !${conditionFalse ? \"\" : html`<strong> ${descriptionSafe} </strong>`}",
                "// Line 93:         <em> ${array1} </em>",
                "// Line 94:         !${conditionFalse ? html`<em> ${array1} </em>` : \"\"}",
                "// Line 149: test(\"htmlGenerator renders unsafe content\", () => {",
                "// Line 150:   const generator = htmlGenerator`<p>${descriptionSafe}${descriptionUnsafe}${htmlGenerator`${array1}`}${null}${255}</p>`;",
                "// Line 151:   let accumulator = \"\";",
                "// Line 152: ",
                "// Line 153:   for (const value of generator) {",
                "// Line 154:     accumulator += value;",
                "// Line 155:   }",
                "// Line 156: ",
                "// Line 157:   assert.strictEqual(",
                "// Line 158:     accumulator,",
                "// vulnerable line: 159: \"<p>This is a safe description.&lt;script&gt;alert(&apos;This is an unsafe description.&apos;)&lt;/script&gt;12345255</p>\",",
                "// Line 160:   );",
                "// Line 161: });",
                "// Line 162: ",
                "// Line 163: test(\"htmlGenerator works with nested htmlGenerator calls in an array\", () => {",
                "// Line 164:   const generator = htmlGenerator`<ul>!${[1, 2, 3].map((index) => {",
                "// Line 165:     return htmlGenerator`<li>${index}</li>`;",
                "// Line 166:   })}</ul>`;",
                "// Line 167:   let accumulator = \"\";",
                "// Line 168: ",
                "// Line 169:   for (const value of generator) {",
                "// Line 192: test(\"htmlGenerator works with other generators (escaped)\", () => {",
                "// Line 193:   const generator = htmlGenerator`<div>${generatorExample()}</div>`;",
                "// Line 194:   let accumulator = \"\";",
                "// Line 195: ",
                "// Line 196:   for (const value of generator) {",
                "// Line 197:     accumulator += value;",
                "// Line 198:   }",
                "// Line 199: ",
                "// Line 200:   assert.strictEqual(",
                "// Line 201:     accumulator,",
                "// vulnerable line: 202: \"<div>&lt;p&gt;This is a safe description.&lt;script&gt;alert(&apos;This is an unsafe description.&apos;)&lt;/script&gt;12345255&lt;/p&gt;</div>\",",
                "// Line 203:   );",
                "// Line 204:   assert.strictEqual(generator.next().done, true);",
                "// Line 205: });",
                "// Line 206: ",
                "// Line 207: test(\"htmlGenerator works with other generators within an array (raw)\", () => {",
                "// Line 208:   const generator = htmlGenerator`<div>!${[generatorExample()]}</div>`;",
                "// Line 209:   let accumulator = \"\";",
                "// Line 210: ",
                "// Line 211:   for (const value of generator) {",
                "// Line 212:     accumulator += value;",
                "// Line 222: test(\"htmlGenerator works with other generators within an array (escaped)\", () => {",
                "// Line 223:   const generator = htmlGenerator`<div>${[generatorExample()]}</div>`;",
                "// Line 224:   let accumulator = \"\";",
                "// Line 225: ",
                "// Line 226:   for (const value of generator) {",
                "// Line 227:     accumulator += value;",
                "// Line 228:   }",
                "// Line 229: ",
                "// Line 230:   assert.strictEqual(",
                "// Line 231:     accumulator,",
                "// vulnerable line: 232: \"<div>&lt;p&gt;This is a safe description.&lt;script&gt;alert(&apos;This is an unsafe description.&apos;)&lt;/script&gt;1,2,3,4,5255&lt;/p&gt;</div>\",",
                "// Line 233:   );",
                "// Line 234:   assert.strictEqual(generator.next().done, true);",
                "// Line 235: });",
                "// Line 236: ",
                "// Line 237: test(\"htmlAsyncGenerator renders safe content\", async () => {",
                "// Line 238:   const generator = htmlAsyncGenerator`<p>${descriptionSafe}!${descriptionUnsafe}G!${htmlAsyncGenerator`${array1}`}!${null}${255}</p>`;",
                "// Line 239:   let accumulator = \"\";",
                "// Line 240: ",
                "// Line 241:   for await (const value of generator) {",
                "// Line 242:     accumulator += value;",
                "// Line 251: test(\"htmlAsyncGenerator renders unsafe content\", async () => {",
                "// Line 252:   const generator = htmlAsyncGenerator`<p>${descriptionSafe}${descriptionUnsafe}${htmlAsyncGenerator`${array1}`}${null}${255}</p>`;",
                "// Line 253:   let accumulator = \"\";",
                "// Line 254: ",
                "// Line 255:   for await (const value of generator) {",
                "// Line 256:     accumulator += value;",
                "// Line 257:   }",
                "// Line 258: ",
                "// Line 259:   assert.strictEqual(",
                "// Line 260:     accumulator,",
                "// vulnerable line: 261: \"<p>This is a safe description.&lt;script&gt;alert(&apos;This is an unsafe description.&apos;)&lt;/script&gt;12345255</p>\",",
                "// Line 262:   );",
                "// Line 263: });",
                "// Line 264: ",
                "// Line 265: test(\"htmlAsyncGenerator works with other generators (raw)\", async () => {",
                "// Line 266:   const generator = htmlAsyncGenerator`<div>!${generatorExample()}</div>`;",
                "// Line 267:   let accumulator = \"\";",
                "// Line 268: ",
                "// Line 269:   for await (const value of generator) {",
                "// Line 270:     accumulator += value;",
                "// Line 271:   }",
                "// Line 279: test(\"htmlAsyncGenerator works with other generators (escaped)\", async () => {",
                "// Line 280:   const generator = htmlAsyncGenerator`<div>${generatorExample()}</div>`;",
                "// Line 281:   let accumulator = \"\";",
                "// Line 282: ",
                "// Line 283:   for await (const value of generator) {",
                "// Line 284:     accumulator += value;",
                "// Line 285:   }",
                "// Line 286: ",
                "// Line 287:   assert.strictEqual(",
                "// Line 288:     accumulator,",
                "// vulnerable line: 289: \"<div>&lt;p&gt;This is a safe description.&lt;script&gt;alert(&apos;This is an unsafe description.&apos;)&lt;/script&gt;12345255&lt;/p&gt;</div>\",",
                "// Line 290:   );",
                "// Line 291: });",
                "// Line 292: ",
                "// Line 293: test(\"htmlAsyncGenerator works with nested htmlAsyncGenerator calls in an array\", async () => {",
                "// Line 294:   const generator = htmlAsyncGenerator`!${[1, 2, 3].map((i) => {",
                "// Line 295:     return htmlAsyncGenerator`${i}: <p>${readFile(\"test/test.md\", \"utf8\")}</p>`;",
                "// Line 296:   })}`;",
                "// Line 297:   let accumulator = \"\";",
                "// Line 298: ",
                "// Line 299:   for await (const value of generator) {",
                "// Line 300:     accumulator += value;",
                "// Line 301:   }",
                "// Line 302: ",
                "// Line 303:   assert.strictEqual(",
                "// Line 304:     accumulator.replaceAll(\"",
                "// Line 305: \", \"\").trim(),",
                "// vulnerable line: 306: \"1: <p># test.md&gt;</p>2: <p># test.md&gt;</p>3: <p># test.md&gt;</p>\",",
                "// Line 307:   );",
                "// Line 308: });",
                "// Line 309: ",
                "// Line 310: test(\"htmlAsyncGenerator renders chunks with promises (escaped)\", async () => {",
                "// Line 311:   const generator = htmlAsyncGenerator`<ul>!${[1, 2].map((i) => {",
                "// Line 312:     return htmlAsyncGenerator`${i}: ${readFile(\"test/test.md\", \"utf8\")}`;",
                "// Line 313:   })}</ul>`;",
                "// Line 314:   const fileContent = readFileSync(\"test/test.md\", \"utf8\").replaceAll(",
                "// Line 315:     \">\",",
                "// vulnerable line: 316: \"&gt;\",",
                "// Line 317:   );",
                "// Line 318: ",
                "// Line 319:   let value = await generator.next();",
                "// Line 320:   assert.strictEqual(value.value, \"<ul>\");",
                "// Line 321: ",
                "// Line 322:   value = await generator.next();",
                "// Line 323:   assert.strictEqual(value.value, `1`);",
                "// Line 324: ",
                "// Line 325:   value = await generator.next();",
                "// Line 326:   assert.strictEqual(value.value, `: ${fileContent}`);",
                "// Line 366:   assert.strictEqual(value.done, true);",
                "// Line 367: });",
                "// Line 368: ",
                "// Line 369: test(\"htmlAsyncGenerator redners in chuncks\", async () => {",
                "// Line 370:   const generator = htmlAsyncGenerator`<ul>${generatorPromiseExample()}</ul>`;",
                "// Line 371: ",
                "// Line 372:   let value = await generator.next();",
                "// Line 373:   assert.strictEqual(value.value, \"<ul>\");",
                "// Line 374: ",
                "// Line 375:   value = await generator.next();",
                "// vulnerable line: 376: assert.strictEqual(value.value, \"&lt;p&gt;\");",
                "// Line 377: ",
                "// Line 378:   value = await generator.next();",
                "// Line 379:   assert.strictEqual(value.value, \"12\");",
                "// Line 380: ",
                "// Line 381:   value = await generator.next();",
                "// Line 382:   assert.strictEqual(value.value, \"</ul>\");",
                "// Line 383: ",
                "// Line 384:   value = await generator.next();",
                "// Line 385:   assert.strictEqual(value.done, true);",
                "// Line 386: });"
            ]
        },
        {
            "filename_of_changes": "package.json",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: {",
                "// Line 2:   \"name\": \"ghtml\",",
                "// Line 3:   \"description\": \"Replace your template engine with fast JavaScript by leveraging the power of tagged templates.\",",
                "// Line 4:   \"author\": \"Gürgün Dayıoğlu\",",
                "// Line 5:   \"license\": \"MIT\",",
                "// vulnerable line: 6: \"version\": \"1.7.2\",",
                "// Line 7:   \"type\": \"module\",",
                "// Line 8:   \"main\": \"./src/index.js\",",
                "// Line 9:   \"exports\": {",
                "// Line 10:     \".\": \"./src/index.js\",",
                "// Line 11:     \"./*.js\": \"./src/*.js\"",
                "// Line 12:   },",
                "// Line 13:   \"engines\": {",
                "// Line 14:     \"node\": \">=18\"",
                "// Line 15:   },",
                "// Line 16:   \"scripts\": {",
                "// Line 17:     \"benchmark\": \"node bench/index.js\",",
                "// Line 18:     \"test\": \"npm run lint && c8 --100 node --test test/*.js\",",
                "// Line 19:     \"lint\": \"eslint . && prettier --check .\",",
                "// Line 20:     \"lint:fix\": \"eslint --fix . && prettier --write .\"",
                "// Line 21:   },",
                "// Line 22:   \"devDependencies\": {",
                "// Line 23:     \"@fastify/pre-commit\": \"^2.1.0\",",
                "// Line 24:     \"c8\": \"^9.1.0\",",
                "// vulnerable line: 25: \"grules\": \"^0.17.1\",",
                "// Line 26:     \"tinybench\": \"^2.8.0\"",
                "// Line 27:   },",
                "// Line 28:   \"repository\": {",
                "// Line 29:     \"type\": \"git\",",
                "// Line 30:     \"url\": \"git+https://github.com/gurgunday/ghtml.git\"",
                "// Line 31:   }",
                "// Line 32: }"
            ]
        }
    ]
}