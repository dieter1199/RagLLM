{
    "cve_id": "CVE-2024-28101",
    "cve_description": "The Apollo Router is a graph router written in Rust to run a federated supergraph that uses Apollo Federation. Versions 0.9.5 until 1.40.2 are subject to a Denial-of-Service (DoS) type vulnerability. When receiving compressed HTTP payloads, affected versions of the Router evaluate the `limits.http_max_request_bytes` configuration option after the entirety of the compressed payload is decompressed. If affected versions of the Router receive highly compressed payloads, this could result in significant memory consumption while the compressed payload is expanded. Router version 1.40.2 has a fix for the vulnerability. Those who are unable to upgrade may be able to implement mitigations at proxies or load balancers positioned in front of their Router fleet (e.g. Nginx, HAProxy, or cloud-native WAF services) by creating limits on HTTP body upload size. \n",
    "cve_publish_date": "2024-03-21T02:52Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "streaming body decompression\n\nClient request body was fully loaded in memory before decompressing, we\nare now decompressing it as it goes",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "common.rs",
            "code_language": "Rust",
            "number_of_lines_added_for_mitigation": "6",
            "number_of_lines_deleted_vulnerable_to_cve": "5",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 3: use std::net::SocketAddr;",
                "// Line 4: use std::net::TcpListener;",
                "// Line 5: use std::path::PathBuf;",
                "// Line 6: use std::process::Stdio;",
                "// Line 7: use std::sync::Arc;",
                "// Line 8: use std::time::Duration;",
                "// Line 9: use std::time::SystemTime;",
                "// Line 10: ",
                "// Line 11: use buildstructor::buildstructor;",
                "// Line 12: use http::header::ACCEPT;",
                "// vulnerable line: 13: use http::header::CONTENT_ENCODING;",
                "// Line 14: use http::header::CONTENT_TYPE;",
                "// Line 15: use http::HeaderValue;",
                "// Line 16: use jsonpath_lib::Selector;",
                "// Line 17: use mime::APPLICATION_JSON;",
                "// Line 18: use once_cell::sync::OnceCell;",
                "// Line 19: use opentelemetry::global;",
                "// Line 20: use opentelemetry::propagation::TextMapPropagator;",
                "// Line 21: use opentelemetry::trace::Span;",
                "// Line 22: use opentelemetry::trace::TraceContextExt;",
                "// Line 23: use opentelemetry::trace::Tracer;",
                "// Line 374:     }",
                "// Line 375: ",
                "// Line 376:     #[allow(dead_code)]",
                "// Line 377:     pub fn execute_huge_query(",
                "// Line 378:         &self,",
                "// Line 379:     ) -> impl std::future::Future<Output = (String, reqwest::Response)> {",
                "// Line 380:         self.execute_query_internal(&json!({\"query\":\"query {topProducts{name, name, name, name, name, name, name, name, name, name}}\",\"variables\":{}}), None)",
                "// Line 381:     }",
                "// Line 382: ",
                "// Line 383:     #[allow(dead_code)]",
                "// vulnerable line: 384: pub fn execute_bad_content_encoding(",
                "// Line 385:         &self,",
                "// Line 386:     ) -> impl std::future::Future<Output = (String, reqwest::Response)> {",
                "// Line 387:         self.execute_query_internal(&json!({\"garbage\":{}}), Some(\"garbage\"))",
                "// Line 388:     }",
                "// Line 389: ",
                "// Line 390:     fn execute_query_internal(",
                "// Line 391:         &self,",
                "// Line 392:         query: &Value,",
                "// vulnerable line: 393: content_encoding: Option<&'static str>,",
                "// Line 394:     ) -> impl std::future::Future<Output = (String, reqwest::Response)> {",
                "// Line 395:         assert!(",
                "// Line 396:             self.router.is_some(),",
                "// Line 397:             \"router was not started, call `router.start().await; router.assert_started().await`\"",
                "// Line 398:         );",
                "// Line 399:         let dispatch = self.subscriber.clone();",
                "// Line 400:         let query = query.clone();",
                "// Line 401:         async move {",
                "// Line 402:             let span = info_span!(\"client_request\");",
                "// Line 403:             let span_id = span.context().span().span_context().trace_id().to_string();",
                "// Line 404: ",
                "// Line 405:             async move {",
                "// Line 406:                 let client = reqwest::Client::new();",
                "// Line 407: ",
                "// Line 408:                 let mut request = client",
                "// Line 409:                     .post(\"http://localhost:4000\")",
                "// vulnerable line: 410: .header(CONTENT_TYPE, APPLICATION_JSON.essence_str())",
                "// vulnerable line: 411: .header(CONTENT_ENCODING, content_encoding.unwrap_or(\"identity\"))",
                "// Line 412:                     .header(\"apollographql-client-name\", \"custom_name\")",
                "// Line 413:                     .header(\"apollographql-client-version\", \"1.0\")",
                "// Line 414:                     .header(\"x-my-header\", \"test\")",
                "// Line 415:                     .json(&query)",
                "// Line 416:                     .build()",
                "// Line 417:                     .unwrap();",
                "// Line 418:                 global::get_text_map_propagator(|propagator| {",
                "// Line 419:                     propagator.inject_context(",
                "// Line 420:                         &tracing::span::Span::current().context(),",
                "// Line 421:                         &mut opentelemetry_http::HeaderInjector(request.headers_mut()),",
                "// Line 445:             \"router was not started, call `router.start().await; router.assert_started().await`\"",
                "// Line 446:         );",
                "// Line 447:         let query = query.clone();",
                "// Line 448:         let dispatch = self.subscriber.clone();",
                "// Line 449: ",
                "// Line 450:         async move {",
                "// Line 451:             let client = reqwest::Client::new();",
                "// Line 452: ",
                "// Line 453:             let mut request = client",
                "// Line 454:                 .post(\"http://localhost:4000\")",
                "// vulnerable line: 455: .header(CONTENT_TYPE, APPLICATION_JSON.essence_str())",
                "// Line 456:                 .header(\"apollographql-client-name\", \"custom_name\")",
                "// Line 457:                 .header(\"apollographql-client-version\", \"1.0\")",
                "// Line 458:                 .json(&query)",
                "// Line 459:                 .build()",
                "// Line 460:                 .unwrap();",
                "// Line 461: ",
                "// Line 462:             request.headers_mut().remove(ACCEPT);",
                "// Line 463:             match client.execute(request).await {",
                "// Line 464:                 Ok(response) => (",
                "// Line 465:                     response",
                "// Line 486:             self.router.is_some(),",
                "// Line 487:             \"router was not started, call `router.start().await; router.assert_started().await`\"",
                "// Line 488:         );",
                "// Line 489:         let client = reqwest::Client::new();",
                "// Line 490:         let id = Uuid::new_v4().to_string();",
                "// Line 491:         let span = info_span!(\"client_request\", unit_test = id.as_str());",
                "// Line 492:         let _span_guard = span.enter();",
                "// Line 493: ",
                "// Line 494:         let mut request = client",
                "// Line 495:             .post(\"http://localhost:4000\")",
                "// vulnerable line: 496: .header(CONTENT_TYPE, APPLICATION_JSON.essence_str())",
                "// Line 497:             .header(ACCEPT, \"multipart/mixed;subscriptionSpec=1.0\")",
                "// Line 498:             .header(\"apollographql-client-name\", \"custom_name\")",
                "// Line 499:             .header(\"apollographql-client-version\", \"1.0\")",
                "// Line 500:             .json(&json!({\"query\":subscription,\"variables\":{}}))",
                "// Line 501:             .build()",
                "// Line 502:             .unwrap();",
                "// Line 503: ",
                "// Line 504:         global::get_text_map_propagator(|propagator| {",
                "// Line 505:             propagator.inject_context(",
                "// Line 506:                 &span.context(),"
            ]
        },
        {
            "filename_of_changes": "content_negotiation.rs",
            "code_language": "Rust",
            "number_of_lines_added_for_mitigation": "11",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "metrics.rs",
            "code_language": "Rust",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 128: ",
                "// Line 129:     router.start().await;",
                "// Line 130:     router.assert_started().await;",
                "// Line 131:     router.execute_default_query().await;",
                "// Line 132:     router",
                "// Line 133:         .assert_metrics_contains(",
                "// Line 134:             r#\"apollo_router_http_requests_total{status=\"200\",otel_scope_name=\"apollo/router\"}\"#,",
                "// Line 135:             None,",
                "// Line 136:         )",
                "// Line 137:         .await;",
                "// vulnerable line: 138: router.execute_bad_content_encoding().await;",
                "// Line 139:     router",
                "// Line 140:             .assert_metrics_contains(",
                "// Line 141:                 r#\"apollo_router_http_requests_total{error=\"unknown content-encoding header value \"garbage\"\",status=\"400\",otel_scope_name=\"apollo/router\"}\"#,",
                "// Line 142:                 None,",
                "// Line 143:             )",
                "// Line 144:             .await;",
                "// Line 145: ",
                "// Line 146:     router.execute_bad_query().await;",
                "// Line 147:     router",
                "// Line 148:         .assert_metrics_contains("
            ]
        },
        {
            "filename_of_changes": "service.rs",
            "code_language": "Rust",
            "number_of_lines_added_for_mitigation": "7",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        }
    ]
}