{
    "cve_id": "CVE-2024-28866",
    "cve_description": "GoCD is a continuous delivery server. GoCD versions from 19.4.0 to 23.5.0 (inclusive) are potentially vulnerable to a reflected cross-site scripting vulnerability on the loading page displayed while GoCD is starting, via abuse of a `redirect_to` query parameter with inadequate validation.\n\nAttackers could theoretically abuse the query parameter to steal session tokens or other values from the user's browser. In practice exploiting this to perform privileged actions is likely rather difficult to exploit because the target user would need to be triggered to open an attacker-crafted link in the period where the server is starting up (but not completely started), requiring chaining with a separate denial-of-service vulnerability. Additionally, GoCD server restarts invalidate earlier session tokens (i.e GoCD does not support persistent sessions), so a stolen session token would be unusable once the server has completed restart, and executed XSS would be done within a logged-out context.\n\nThe issue is fixed in GoCD 24.1.0. As a workaround, it is technically possible in earlier GoCD versions to override the loading page with an earlier version which is not vulnerable, by starting GoCD with the Java system property override as either `-Dloading.page.resource.path=/loading_pages/default.loading.page.html` (simpler early version of loading page without GoCD introduction) or `-Dloading.page.resource.path=/does_not_exist.html` (to display a simple message with no interactivity).",
    "cve_publish_date": "2024-05-14T15:14Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Clean up loading page\n\n- Remove unnecessary code\n- Use latest glide.js and attribute correctly\n- Remove old loading page which was replaced years ago with the current page",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "GoServerLoadingIndicationHandler.java",
            "code_language": "Java",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "7",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 10:  * Unless required by applicable law or agreed to in writing, software",
                "// Line 11:  * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "// Line 12:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "// Line 13:  * See the License for the specific language governing permissions and",
                "// Line 14:  * limitations under the License.",
                "// Line 15:  */",
                "// Line 16: package com.thoughtworks.go.server;",
                "// Line 17: ",
                "// Line 18: import com.thoughtworks.go.util.GoConstants;",
                "// Line 19: import com.thoughtworks.go.util.SystemEnvironment;",
                "// vulnerable line: 20: import org.apache.commons.io.IOUtils;",
                "// Line 21: import org.eclipse.jetty.http.HttpHeader;",
                "// Line 22: import org.eclipse.jetty.http.HttpStatus;",
                "// Line 23: import org.eclipse.jetty.http.MimeTypes;",
                "// Line 24: import org.eclipse.jetty.server.Request;",
                "// Line 25: import org.eclipse.jetty.server.handler.AbstractHandler;",
                "// Line 26: import org.eclipse.jetty.server.handler.ContextHandler;",
                "// Line 27: import org.eclipse.jetty.webapp.WebAppContext;",
                "// Line 28: ",
                "// Line 29: import javax.servlet.http.HttpServletRequest;",
                "// Line 30: import javax.servlet.http.HttpServletResponse;",
                "// Line 31: import java.io.IOException;",
                "// Line 32: import java.nio.charset.StandardCharsets;",
                "// Line 33: import java.util.List;",
                "// Line 34: import java.util.Objects;",
                "// Line 35: ",
                "// vulnerable line: 36: import static com.thoughtworks.go.util.SystemEnvironment.LOADING_PAGE;",
                "// Line 37: import static org.eclipse.jetty.http.MimeTypes.Type.*;",
                "// Line 38: ",
                "// Line 39: /** When GoCD is starting. This is the only handler that will be active (till the web application context handler is up).",
                "// Line 40:  *  During that time, this handler shows a 503 for all requests, while waiting for the rest of the server to be up.",
                "// Line 41:  */",
                "// Line 42: class GoServerLoadingIndicationHandler extends ContextHandler {",
                "// Line 43:     private final WebAppContext webAppContext;",
                "// Line 44:     private final SystemEnvironment systemEnvironment;",
                "// Line 45:     private volatile boolean isWebAppStarting;",
                "// Line 46: ",
                "// Line 99:         private void addHeaders(HttpServletResponse response) {",
                "// Line 100:             response.setHeader(\"Cache-Control\", \"no-cache, must-revalidate, no-store\");",
                "// Line 101:             response.setHeader(\"X-XSS-Protection\", \"1; mode=block\");",
                "// Line 102:             response.setHeader(\"X-Content-Type-Options\", \"nosniff\");",
                "// Line 103:             response.setHeader(\"X-Frame-Options\", \"SAMEORIGIN\");",
                "// Line 104:             response.setHeader(\"X-UA-Compatible\", \"chrome=1\");",
                "// Line 105:         }",
                "// Line 106: ",
                "// Line 107:     }",
                "// Line 108: ",
                "// vulnerable line: 109: private String loadingPage() {",
                "// vulnerable line: 110: try {",
                "// vulnerable line: 111: return IOUtils.toString(Objects.requireNonNull(getClass().getResource(systemEnvironment.get(LOADING_PAGE))), StandardCharsets.UTF_8);",
                "// vulnerable line: 112: } catch (Exception e) {",
                "// vulnerable line: 113: return \"<h2>GoCD is starting up. Please wait ....</h2>\";",
                "// Line 114:         }",
                "// Line 115:     }",
                "// Line 116: }"
            ]
        },
        {
            "filename_of_changes": "GoServerLoadingIndicationHandlerTest.java",
            "code_language": "Java",
            "number_of_lines_added_for_mitigation": "7",
            "number_of_lines_deleted_vulnerable_to_cve": "24",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 45:     private WebAppContext webAppContext;",
                "// Line 46: ",
                "// Line 47:     @Mock",
                "// Line 48:     private SystemEnvironment systemEnvironment;",
                "// Line 49: ",
                "// Line 50:     private GoServerLoadingIndicationHandler handler;",
                "// Line 51: ",
                "// Line 52:     @BeforeEach",
                "// Line 53:     void setUp() {",
                "// Line 54:         handler = new GoServerLoadingIndicationHandler(webAppContext, systemEnvironment);",
                "// vulnerable line: 55: }",
                "// Line 56: ",
                "// Line 57:     @Nested",
                "// Line 58:     @DisplayName(\"When web app has started\")",
                "// Line 59:     class WhenWebAppHasStarted {",
                "// Line 60:         @BeforeEach",
                "// Line 61:         void setUp() {",
                "// Line 62:             webAppHasStarted();",
                "// vulnerable line: 63: }",
                "// Line 64: ",
                "// vulnerable line: 65: @Test",
                "// Line 66:         void shouldRedirectSlashOrRootToLandingPage() throws Exception {",
                "// Line 67:             landingPageIsSetTo(\"/landingpage\");",
                "// Line 68: ",
                "// Line 69:             MockResponse response = request(\"/\", \"*/*\");",
                "// Line 70: ",
                "// Line 71:             assertTrue(response.wasRedirectedTo(\"/go/landingpage\").done());",
                "// vulnerable line: 72: }",
                "// vulnerable line: 73: }",
                "// Line 74: ",
                "// Line 75: ",
                "// Line 76:     @Nested",
                "// Line 77:     @DisplayName(\"When web app is starting\")",
                "// Line 78:     class WhenWebAppIsStarting {",
                "// Line 79:         @BeforeEach",
                "// Line 80:         void setUp() {",
                "// vulnerable line: 81: webAppIsStarting();",
                "// vulnerable line: 82: }",
                "// Line 83: ",
                "// Line 84:         @ParameterizedTest",
                "// Line 85:         @ValueSource(strings = {\"/\", \"/go/pipelines\", \"/this/doesnt/exist\"})",
                "// Line 86:         void shouldRespondWithMessageInPlainTextWhenRequestAcceptHeaderIsNotJSONOrHTML(String target) throws Exception {",
                "// vulnerable line: 87: webAppIsStarting();",
                "// Line 88: ",
                "// Line 89:             MockResponse response = request(target, \"*/*\");",
                "// Line 90: ",
                "// Line 91:             assertLoadingResponseInPlainText(response);",
                "// vulnerable line: 92: }",
                "// Line 93: ",
                "// Line 94:         @ParameterizedTest",
                "// Line 95:         @ValueSource(strings = {\"/\", \"/go/pipelines\", \"/this/doesnt/exist\"})",
                "// Line 96:         void shouldRespondWithMessageInJSONWhenRequestAcceptHeaderIsJSON(String target) throws Exception {",
                "// vulnerable line: 97: webAppIsStarting();",
                "// Line 98: ",
                "// Line 99:             MockResponse response = request(target, \"application/json\");",
                "// Line 100: ",
                "// Line 101:             assertLoadingResponseInJSON(response);",
                "// vulnerable line: 102: }",
                "// Line 103: ",
                "// Line 104:         @ParameterizedTest",
                "// Line 105:         @ValueSource(strings = {\"/\", \"/go/pipelines\", \"/this/doesnt/exist\"})",
                "// Line 106:         void shouldRespondWithMessageInHTMLWhenRequestAcceptHeaderIsHTML(String target) throws Exception {",
                "// vulnerable line: 107: webAppIsStarting();",
                "// vulnerable line: 108: loadingPageIsSetTo(\"/test.loading.page.html\");",
                "// Line 109: ",
                "// Line 110:             MockResponse response = request(target, \"text/html\");",
                "// Line 111: ",
                "// vulnerable line: 112: assertLoadingResponseInHTML(response, \"<div><b>GoCD server is starting. This comes from test.loading.page.html</b></div>\");",
                "// vulnerable line: 113: }",
                "// Line 114: ",
                "// Line 115:         @ParameterizedTest",
                "// Line 116:         @DisplayName(\"should respond with application/json when Accept header value after sorting by quality factor contains the word json\")",
                "// Line 117:         @ValueSource(strings = {\"application/json\", \"something/json\", \"text/html;q=0.5,application/json;q=0.8\",",
                "// Line 118:                 \"application/vnd.go.cd.v3+json\", \"something-with-json-in-it\"})",
                "// Line 119:         void shouldRespondWithMessageInJSONWhenAcceptHeaderContainsJSON(String acceptHeaderValue) throws Exception {",
                "// vulnerable line: 120: webAppIsStarting();",
                "// Line 121: ",
                "// Line 122:             MockResponse response = request(\"/go/pipelines\", acceptHeaderValue);",
                "// Line 123: ",
                "// Line 124:             assertLoadingResponseInJSON(response);",
                "// vulnerable line: 125: }",
                "// Line 126: ",
                "// Line 127:         @ParameterizedTest",
                "// Line 128:         @DisplayName(\"should respond with text/html when Accept header value after sorting by quality factor contains the word html or is empty\")",
                "// Line 129:         @ValueSource(strings = {\"text/html\", \"something/html\", \"application/json;q=0.5,text/html;q=0.8\", \"something-with-html-in-it\", \"\"})",
                "// Line 130:         void shouldRespondWithMessageInHTMLWhenAcceptHeaderContainsHTML(String acceptHeaderValue) throws Exception {",
                "// vulnerable line: 131: webAppIsStarting();",
                "// vulnerable line: 132: loadingPageIsSetTo(\"/test.loading.page.html\");",
                "// Line 133: ",
                "// Line 134:             MockResponse response = request(\"/go/pipelines\", acceptHeaderValue);",
                "// Line 135: ",
                "// vulnerable line: 136: assertLoadingResponseInHTML(response, \"<div><b>GoCD server is starting. This comes from test.loading.page.html</b></div>\");",
                "// vulnerable line: 137: }",
                "// Line 138: ",
                "// Line 139:         @ParameterizedTest",
                "// Line 140:         @DisplayName(\"should respond with text/plain when Accept header value is unknown or not HTML/JSON after sorting by quality factor\")",
                "// Line 141:         @ValueSource(strings = {\"some-random-value\", \"image/svg\", \"text/html;q=0.5,*/*;q=0.8\", \"text/html;q=0.5,text/plain;q=0.8\", \"text/html;q=0.5,image/svg;q=0.8\", \"*/*\"})",
                "// Line 142:         void shouldRespondWithMessageInPlainTextWhenAcceptHeaderIsNotHTMLOrJSON(String acceptHeaderValue) throws Exception {",
                "// vulnerable line: 143: webAppIsStarting();",
                "// Line 144: ",
                "// Line 145:             MockResponse response = request(\"/go/pipelines\", acceptHeaderValue);",
                "// Line 146: ",
                "// Line 147:             assertLoadingResponseInPlainText(response);",
                "// vulnerable line: 148: }",
                "// Line 149: ",
                "// vulnerable line: 150: @Test",
                "// Line 151:         void shouldRespondWithMessageInHTMLWhenAcceptHeaderIsMissing() throws Exception {",
                "// vulnerable line: 152: webAppIsStarting();",
                "// vulnerable line: 153: loadingPageIsSetTo(\"/test.loading.page.html\");",
                "// Line 154: ",
                "// Line 155:             MockResponse response = request(\"/go/pipelines\", null);",
                "// Line 156: ",
                "// vulnerable line: 157: assertLoadingResponseInHTML(response, \"<div><b>GoCD server is starting. This comes from test.loading.page.html</b></div>\");",
                "// vulnerable line: 158: }",
                "// Line 159: ",
                "// vulnerable line: 160: @Test",
                "// vulnerable line: 161: void shouldRespondWithSimpleMessageIfLoadingHTMLFileCannotBeLoaded() throws Exception {",
                "// vulnerable line: 162: webAppIsStarting();",
                "// vulnerable line: 163: loadingPageIsSetTo(\"/some-non-existent-file\");",
                "// Line 164: ",
                "// vulnerable line: 165: MockResponse response = request(\"/go/pipelines\", \"text/html\");",
                "// Line 166: ",
                "// vulnerable line: 167: assertLoadingResponseInHTML(response, \"<h2>GoCD is starting up. Please wait ....</h2>\");",
                "// vulnerable line: 168: }",
                "// vulnerable line: 169: }",
                "// Line 170: ",
                "// Line 171:     private void assertLoadingResponseInPlainText(MockResponse response) {",
                "// Line 172:         assertTrue(response.",
                "// Line 173:                 hasStatus(503).",
                "// Line 174:                 withContentType(\"text/plain\").",
                "// Line 175:                 withBody(\"GoCD server is starting\").",
                "// Line 176:                 withNoCaching().",
                "// Line 177:                 done());",
                "// vulnerable line: 178: }",
                "// Line 179: ",
                "// Line 180:     private void assertLoadingResponseInJSON(MockResponse response) {",
                "// Line 181:         assertTrue(response.",
                "// Line 182:                 hasStatus(503).",
                "// Line 183:                 withContentType(\"application/json\").",
                "// Line 184:                 withBody(\"{ \"message\": \"GoCD server is starting\" }\").",
                "// Line 185:                 withNoCaching().",
                "// Line 186:                 done());",
                "// vulnerable line: 187: }",
                "// Line 188: ",
                "// vulnerable line: 189: private void assertLoadingResponseInHTML(MockResponse response, String expectedBody) {",
                "// Line 190:         assertTrue(response.",
                "// Line 191:                 hasStatus(503).",
                "// Line 192:                 withContentType(\"text/html\").",
                "// vulnerable line: 193: withBody(expectedBody).",
                "// Line 194:                 withNoCaching().",
                "// Line 195:                 done());",
                "// vulnerable line: 196: }",
                "// Line 197: ",
                "// Line 198:     private MockResponse request(String target, String acceptHeaderValue) throws IOException, ServletException {",
                "// Line 199:         Request baseRequest = mock(Request.class);",
                "// Line 200:         HttpFields httpFields = acceptHeaderValue != null ? HttpFields.from(new HttpField(\"Accept\", acceptHeaderValue)) : HttpFields.from();",
                "// Line 201:         lenient().when(baseRequest.getHttpFields()).thenReturn(httpFields);",
                "// Line 202: ",
                "// Line 203:         HttpServletRequest servletRequest = mock(HttpServletRequest.class);",
                "// Line 204:         HttpServletResponse servletResponse = mock(HttpServletResponse.class);",
                "// Line 205:         PrintWriter printWriter = mock(PrintWriter.class);",
                "// Line 206:         lenient().when(servletResponse.getWriter()).thenReturn(printWriter);",
                "// Line 207: ",
                "// Line 208:         handler.getHandler().handle(target, baseRequest, servletRequest, servletResponse);",
                "// Line 209: ",
                "// Line 210:         return new MockResponse(servletResponse, printWriter);",
                "// vulnerable line: 211: }",
                "// Line 212: ",
                "// Line 213:     private void webAppIsStarting() {",
                "// Line 214:         when(webAppContext.isAvailable()).thenReturn(false);",
                "// vulnerable line: 215: }",
                "// Line 216: ",
                "// Line 217:     private void webAppHasStarted() {",
                "// Line 218:         when(webAppContext.isAvailable()).thenReturn(true);",
                "// vulnerable line: 219: }",
                "// Line 220: ",
                "// Line 221:     private void landingPageIsSetTo(String landingPage) {",
                "// Line 222:         when(systemEnvironment.landingPage()).thenReturn(landingPage);",
                "// vulnerable line: 223: }",
                "// Line 224: ",
                "// vulnerable line: 225: private void loadingPageIsSetTo(String loadingPageResourcePath) {",
                "// vulnerable line: 226: when(systemEnvironment.get(SystemEnvironment.LOADING_PAGE)).thenReturn(loadingPageResourcePath);",
                "// vulnerable line: 227: }",
                "// Line 228: ",
                "// Line 229:     private static class MockResponse {",
                "// vulnerable line: 230: private HttpServletResponse response;",
                "// vulnerable line: 231: private PrintWriter printWriter;",
                "// Line 232: ",
                "// Line 233:         MockResponse(HttpServletResponse response, PrintWriter printWriter) {",
                "// Line 234:             this.response = response;",
                "// Line 235:             this.printWriter = printWriter;",
                "// vulnerable line: 236: }",
                "// Line 237: ",
                "// Line 238:         MockResponse hasStatus(int expectedStatus) {",
                "// Line 239:             verify(response).setStatus(expectedStatus);",
                "// Line 240:             return this;",
                "// vulnerable line: 241: }",
                "// Line 242: ",
                "// Line 243:         MockResponse withNoCaching() {",
                "// Line 244:             verify(response).setHeader(\"Cache-Control\", \"no-cache, must-revalidate, no-store\");",
                "// Line 245:             return this;",
                "// vulnerable line: 246: }",
                "// Line 247: ",
                "// Line 248:         MockResponse withContentType(String expectedContentType) {",
                "// Line 249:             verify(response).setContentType(expectedContentType);",
                "// Line 250:             return this;",
                "// vulnerable line: 251: }",
                "// Line 252: ",
                "// Line 253:         MockResponse wasRedirectedTo(String redirectLocation) throws IOException {",
                "// Line 254:             verify(response).sendRedirect(redirectLocation);",
                "// Line 255:             return this;",
                "// vulnerable line: 256: }",
                "// Line 257: ",
                "// Line 258:         MockResponse withBody(String expectedBody) {",
                "// Line 259:             verify(printWriter).println(expectedBody);",
                "// Line 260:             return this;",
                "// vulnerable line: 261: }",
                "// Line 262: ",
                "// Line 263:         boolean done() {",
                "// Line 264:             return true;",
                "// vulnerable line: 265: }",
                "// vulnerable line: 266: }",
                "// vulnerable line: 267: }"
            ]
        },
        {
            "filename_of_changes": "SystemEnvironment.java",
            "code_language": "Java",
            "number_of_lines_added_for_mitigation": "0",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 179:     private static final GoSystemProperty<Boolean> AGENT_STATUS_API_ENABLED = new GoBooleanSystemProperty(\"go.agent.status.api.enabled\", true);",
                "// Line 180:     private static final GoSystemProperty<String> AGENT_STATUS_API_BIND_HOST = new GoStringSystemProperty(\"go.agent.status.api.bind.host\", \"localhost\");",
                "// Line 181:     private static final GoSystemProperty<Integer> AGENT_STATUS_API_BIND_PORT = new GoIntSystemProperty(\"go.agent.status.api.bind.port\", 8152);",
                "// Line 182: ",
                "// Line 183:     private static final GoSystemProperty<Integer> GO_SPA_TIMEOUT_IN_MILLIS = new GoIntSystemProperty(\"go.spa.timeout\", (int) SECONDS.toMillis(60));",
                "// Line 184:     private static final GoSystemProperty<Integer> GO_SPA_REFRESH_INTERVAL_IN_MILLIS = new GoIntSystemProperty(\"go.spa.refresh.interval\", (int) SECONDS.toMillis(10));",
                "// Line 185:     private static final GoSystemProperty<Long> GO_PAC_CLONE_TIMEOUT_IN_MILLIS = new GoLongSystemProperty(\"go.pac.clone.timeout\", SECONDS.toMillis(30));",
                "// Line 186: ",
                "// Line 187:     private static final GoSystemProperty<Boolean> ENABLE_ANALYTICS_ONLY_FOR_ADMINS = new GoBooleanSystemProperty(\"go.enable.analytics.only.for.admins\", false);",
                "// Line 188:     public static final GoSystemProperty<Boolean> FAIL_STARTUP_ON_DATA_ERROR = new GoBooleanSystemProperty(\"gocd.fail.startup.on.data.error\", false);",
                "// vulnerable line: 189: public static final GoSystemProperty<String> LOADING_PAGE = new GoStringSystemProperty(\"loading.page.resource.path\", \"/loading_pages/new.loading.page.html\");",
                "// Line 190:     public static final GoSystemProperty<Long> NOTIFICATION_PLUGIN_MESSAGES_TTL_IN_MILLIS = new GoLongSystemProperty(\"plugins.notification.message.ttl.millis\", MINUTES.toMillis(2));",
                "// Line 191:     public static final GoSystemProperty<Boolean> ALLOW_EVERYONE_TO_VIEW_OPERATE_GROUPS_WITH_NO_GROUP_AUTHORIZATION_SETUP = new GoBooleanSystemProperty(\"allow.everyone.to.view.operate.groups.with.no.authorization.setup\", false);",
                "// Line 192: ",
                "// Line 193:     public static final GoSystemProperty<Boolean> ENABLE_HSTS_HEADER = new GoBooleanSystemProperty(\"gocd.enable.hsts.header\", false);",
                "// Line 194:     public static final GoSystemProperty<Long> HSTS_HEADER_MAX_AGE_IN_SECONDS = new GoLongSystemProperty(\"gocd.hsts.header.max.age\", DAYS.toSeconds(365));",
                "// Line 195:     public static final GoSystemProperty<Boolean> HSTS_HEADER_INCLUDE_SUBDOMAINS = new GoBooleanSystemProperty(\"gocd.hsts.header.include.subdomains\", false);",
                "// Line 196:     public static final GoSystemProperty<Boolean> HSTS_HEADER_PRELOAD = new GoBooleanSystemProperty(\"gocd.hsts.header.preload\", false);",
                "// Line 197:     public static final GoSystemProperty<Long> EPHEMERAL_AUTO_REGISTER_KEY_EXPIRY_IN_MILLIS = new GoLongSystemProperty(\"gocd.ephemeral.auto.register.key.expiry.millis\", MINUTES.toMillis(30));",
                "// Line 198:     public static final GoSystemProperty<Double> MDU_EXPONENTIAL_BACKOFF_MULTIPLIER = new GoDoubleSystemProperty(\"gocd.mdu.exponential.backoff.multiplier\", 1.5);",
                "// Line 199: "
            ]
        }
    ]
}