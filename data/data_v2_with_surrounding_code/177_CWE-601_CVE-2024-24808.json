{
    "cve_id": "CVE-2024-24808",
    "cve_description": "pyLoad is an open-source Download Manager written in pure Python. There is an open redirect vulnerability due to incorrect validation of input values when redirecting users after login. pyLoad is validating URLs via the `get_redirect_url` function when redirecting users at login. This vulnerability has been patched with commit fe94451.",
    "cve_publish_date": "2024-02-06T04:15Z",
    "cwe_id": "CWE-601",
    "cwe_name": "URL Redirection to Untrusted Site ('Open Redirect')",
    "cwe_description": "A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.",
    "commit_message": "fix GHSA-g3cm-qg2v-2hj5 security advisory",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "app_blueprint.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "5",
            "number_of_lines_deleted_vulnerable_to_cve": "5",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 41: def robots():",
                "// Line 42:     return \"User-agent: *",
                "// Line 43: Disallow: /\"",
                "// Line 44: ",
                "// Line 45: ",
                "// Line 46: # TODO: Rewrite login route using flask-login",
                "// Line 47: @bp.route(\"/login\", methods=[\"GET\", \"POST\"], endpoint=\"login\")",
                "// Line 48: def login():",
                "// Line 49:     api = flask.current_app.config[\"PYLOAD_API\"]",
                "// Line 50: ",
                "// vulnerable line: 51: next = get_redirect_url(fallback=flask.url_for(\"app.dashboard\"))",
                "// Line 52: ",
                "// Line 53:     if flask.request.method == \"POST\":",
                "// Line 54:         user = flask.request.form[\"username\"]",
                "// Line 55:         password = flask.request.form[\"password\"]",
                "// Line 56:         user_info = api.check_auth(user, password)",
                "// Line 57: ",
                "// Line 58:         sanitized_user = user.replace(\"",
                "// Line 59: \", \"",
                "// Line 60: \").replace(\"",
                "// Line 61: \", \"",
                "// Line 62: \")",
                "// Line 63:         if not user_info:",
                "// Line 64:             log.error(f\"Login failed for user '{sanitized_user}'\")",
                "// vulnerable line: 65: return render_template(\"login.html\", next=next, errors=True)",
                "// Line 66: ",
                "// Line 67:         set_session(user_info)",
                "// Line 68:         log.info(f\"User '{sanitized_user}' successfully logged in\")",
                "// Line 69:         flask.flash(\"Logged in successfully\")",
                "// Line 70: ",
                "// Line 71:     if is_authenticated():",
                "// vulnerable line: 72: return flask.redirect(next)",
                "// Line 73: ",
                "// Line 74:     if api.get_config_value(\"webui\", \"autologin\"):",
                "// Line 75:         allusers = api.get_all_userdata()",
                "// Line 76:         if len(allusers) == 1:  # TODO: check if localhost",
                "// Line 77:             user_info = list(allusers.values())[0]",
                "// Line 78:             set_session(user_info)",
                "// Line 79:             # NOTE: Double-check authentication here because if session[name] is empty,",
                "// Line 80:             #       next login_required redirects here again and all loop out.",
                "// Line 81:             if is_authenticated():",
                "// vulnerable line: 82: return flask.redirect(next)",
                "// Line 83: ",
                "// vulnerable line: 84: return render_template(\"login.html\", next=next)",
                "// Line 85: ",
                "// Line 86: ",
                "// Line 87: @bp.route(\"/logout\", endpoint=\"logout\")",
                "// Line 88: def logout():",
                "// Line 89:     s = flask.session",
                "// Line 90:     user = s.get(\"name\")",
                "// Line 91:     clear_session(s)",
                "// Line 92:     if user:",
                "// Line 93:         log.info(f\"User '{user}' logged out\")",
                "// Line 94:     return render_template(\"logout.html\")"
            ]
        },
        {
            "filename_of_changes": "helpers.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "19",
            "number_of_lines_deleted_vulnerable_to_cve": "15",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: # -*- coding: utf-8 -*-",
                "// Line 2: ",
                "// Line 3: import json",
                "// Line 4: from functools import wraps",
                "// vulnerable line: 5: from urllib.parse import unquote, urljoin, urlparse",
                "// Line 6: ",
                "// Line 7: import flask",
                "// Line 8: import flask_themes2",
                "// Line 9: from pyload.core.api import Perms, Role, has_permission",
                "// Line 10: ",
                "// Line 11: ",
                "// Line 12: class JSONEncoder(json.JSONEncoder):",
                "// Line 13:     def default(self, obj):",
                "// Line 14:         try:",
                "// Line 15:             return dict(obj)",
                "// Line 26:     class JSONProvider(JSONProviderBase):",
                "// Line 27:         def dumps(self, obj, **kwargs):",
                "// Line 28:             return json.dumps(obj, **kwargs, cls=JSONEncoder)",
                "// Line 29: ",
                "// Line 30:         def loads(self, s, **kwargs):",
                "// Line 31:             return json.loads(s, **kwargs)",
                "// Line 32: ",
                "// Line 33: ",
                "// Line 34: #: Checks if location belongs to same host address",
                "// Line 35: def is_safe_url(location):",
                "// vulnerable line: 36: ref_url = urlparse(flask.request.host_url)",
                "// vulnerable line: 37: test_url = urlparse(urljoin(flask.request.host_url, location))",
                "// vulnerable line: 38: return test_url.scheme in ('http', 'https') and ref_url.netloc == test_url.netloc",
                "// Line 39: ",
                "// Line 40: ",
                "// Line 41: def get_redirect_url(fallback=None):",
                "// vulnerable line: 42: login_url = urljoin(flask.request.url_root, flask.url_for('app.login'))",
                "// vulnerable line: 43: request_url = unquote(flask.request.url)",
                "// vulnerable line: 44: for location in flask.request.values.get(\"next\"), flask.request.referrer:",
                "// vulnerable line: 45: if not location:",
                "// vulnerable line: 46: continue",
                "// vulnerable line: 47: if location in (request_url, login_url):  # don't redirect to same location",
                "// vulnerable line: 48: continue",
                "// vulnerable line: 49: if is_safe_url(location):",
                "// vulnerable line: 50: return location",
                "// vulnerable line: 51: return fallback",
                "// Line 52: ",
                "// Line 53: ",
                "// Line 54: def render_base(messages):",
                "// Line 55:     return render_template(\"base.html\", messages=messages)",
                "// Line 56: ",
                "// Line 57: ",
                "// Line 58: def clear_session(session=flask.session, permanent=True):",
                "// Line 59:     session.permanent = bool(permanent)",
                "// Line 60:     session.clear()",
                "// Line 61:     # session.modified = True",
                "// Line 124: ",
                "// Line 125: def set_permission(perms):",
                "// Line 126:     \"\"\"",
                "// Line 127:     generates permission bits from dictionary.",
                "// Line 128: ",
                "// Line 129:     :param perms: dict",
                "// Line 130:     \"\"\"",
                "// Line 131:     permission = 0",
                "// Line 132:     for name in permlist():",
                "// Line 133:         if name.startswith(\"_\"):",
                "// vulnerable line: 134: continue",
                "// Line 135: ",
                "// Line 136:         if name in perms and perms[name]:",
                "// Line 137:             permission |= getattr(Perms, name)",
                "// Line 138: ",
                "// Line 139:     return permission",
                "// Line 140: ",
                "// Line 141: ",
                "// Line 142: def set_session(user_info, session=flask.session, permanent=True):",
                "// Line 143:     session.permanent = bool(permanent)",
                "// Line 144:     session.update(",
                "// Line 199:                     response = func(*args, **kwargs)",
                "// Line 200: ",
                "// Line 201:             else:",
                "// Line 202:                 clear_session(s)",
                "// Line 203:                 if flask.request.headers.get(\"X-Requested-With\") == \"XMLHttpRequest\":",
                "// Line 204:                     response = \"Forbidden\", 403",
                "// Line 205: ",
                "// Line 206:                 else:",
                "// Line 207:                     location = flask.url_for(",
                "// Line 208:                         \"app.login\",",
                "// vulnerable line: 209: next=flask.request.url",
                "// Line 210:                     )",
                "// Line 211:                     response = flask.redirect(location)",
                "// Line 212: ",
                "// Line 213:             return response",
                "// Line 214: ",
                "// Line 215:         return wrapper",
                "// Line 216: ",
                "// Line 217:     return decorator"
            ]
        }
    ]
}