{
    "cve_id": "CVE-2024-34066",
    "cve_description": "Pterodactyl wings is the server control plane for Pterodactyl Panel. If the Wings token is leaked either by viewing the node configuration or posting it accidentally somewhere, an attacker can use it to gain arbitrary file write and read access on the node the token is associated to. This issue has been addressed in version 1.11.12 and users are advised to upgrade. Users unable to upgrade may enable the `ignore_panel_config_updates` option as a workaround.",
    "cve_publish_date": "2024-05-03T18:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "config: prevent programmatic updates to specific fields",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "config.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "12",
            "number_of_lines_deleted_vulnerable_to_cve": "10",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 82:     // SSL configuration for the daemon.",
                "// Line 83:     Ssl struct {",
                "// Line 84:         Enabled         bool   `json:\"enabled\" yaml:\"enabled\"`",
                "// Line 85:         CertificateFile string `json:\"cert\" yaml:\"cert\"`",
                "// Line 86:         KeyFile         string `json:\"key\" yaml:\"key\"`",
                "// Line 87:     }",
                "// Line 88: ",
                "// Line 89:     // Determines if functionality for allowing remote download of files into server directories",
                "// Line 90:     // is enabled on this instance. If set to \"true\" remote downloads will not be possible for",
                "// Line 91:     // servers.",
                "// vulnerable line: 92: DisableRemoteDownload bool `json:\"disable_remote_download\" yaml:\"disable_remote_download\"`",
                "// Line 93: ",
                "// Line 94:     // The maximum size for files uploaded through the Panel in MB.",
                "// Line 95:     UploadLimit int64 `default:\"100\" json:\"upload_limit\" yaml:\"upload_limit\"`",
                "// Line 96: ",
                "// Line 97:     // A list of IP address of proxies that may send a X-Forwarded-For header to set the true clients IP",
                "// Line 98:     TrustedProxies []string `json:\"trusted_proxies\" yaml:\"trusted_proxies\"`",
                "// Line 99: }",
                "// Line 100: ",
                "// Line 101: // RemoteQueryConfiguration defines the configuration settings for remote requests",
                "// Line 102: // from Wings to the Panel.",
                "// Line 116:     // It is not recommended to change this from the default as you will likely encounter",
                "// Line 117:     // memory limits on your Panel instance. In the grand scheme of things 4 requests for",
                "// Line 118:     // 50 servers is likely just as quick as two for 100 or one for 400, and will certainly",
                "// Line 119:     // be less likely to cause performance issues on the Panel.",
                "// Line 120:     BootServersPerPage int `default:\"50\" yaml:\"boot_servers_per_page\"`",
                "// Line 121: }",
                "// Line 122: ",
                "// Line 123: // SystemConfiguration defines basic system configuration settings.",
                "// Line 124: type SystemConfiguration struct {",
                "// Line 125:     // The root directory where all of the pterodactyl data is stored at.",
                "// vulnerable line: 126: RootDirectory string `default:\"/var/lib/pterodactyl\" yaml:\"root_directory\"`",
                "// Line 127: ",
                "// Line 128:     // Directory where logs for server installations and other wings events are logged.",
                "// vulnerable line: 129: LogDirectory string `default:\"/var/log/pterodactyl\" yaml:\"log_directory\"`",
                "// Line 130: ",
                "// Line 131:     // Directory where the server data is stored at.",
                "// vulnerable line: 132: Data string `default:\"/var/lib/pterodactyl/volumes\" yaml:\"data\"`",
                "// Line 133: ",
                "// Line 134:     // Directory where server archives for transferring will be stored.",
                "// vulnerable line: 135: ArchiveDirectory string `default:\"/var/lib/pterodactyl/archives\" yaml:\"archive_directory\"`",
                "// Line 136: ",
                "// Line 137:     // Directory where local backups will be stored on the machine.",
                "// vulnerable line: 138: BackupDirectory string `default:\"/var/lib/pterodactyl/backups\" yaml:\"backup_directory\"`",
                "// Line 139: ",
                "// Line 140:     // TmpDirectory specifies where temporary files for Pterodactyl installation processes",
                "// Line 141:     // should be created. This supports environments running docker-in-docker.",
                "// vulnerable line: 142: TmpDirectory string `default:\"/tmp/pterodactyl\" yaml:\"tmp_directory\"`",
                "// Line 143: ",
                "// Line 144:     // The user that should own all of the server files, and be used for containers.",
                "// Line 145:     Username string `default:\"pterodactyl\" yaml:\"username\"`",
                "// Line 146: ",
                "// Line 147:     // The timezone for this Wings instance. This is detected by Wings automatically if possible,",
                "// Line 148:     // and falls back to UTC if not able to be detected. If you need to set this manually, that",
                "// Line 149:     // can also be done.",
                "// Line 150:     //",
                "// Line 151:     // This timezone value is passed into all containers created by Wings.",
                "// Line 152:     Timezone string `yaml:\"timezone\"`",
                "// Line 299:     Api    ApiConfiguration    `json:\"api\" yaml:\"api\"`",
                "// Line 300:     System SystemConfiguration `json:\"system\" yaml:\"system\"`",
                "// Line 301:     Docker DockerConfiguration `json:\"docker\" yaml:\"docker\"`",
                "// Line 302: ",
                "// Line 303:     // Defines internal throttling configurations for server processes to prevent",
                "// Line 304:     // someone from running an endless loop that spams data to logs.",
                "// Line 305:     Throttles ConsoleThrottles",
                "// Line 306: ",
                "// Line 307:     // The location where the panel is running that this daemon should connect to",
                "// Line 308:     // to collect data and send events.",
                "// vulnerable line: 309: PanelLocation string                   `json:\"remote\" yaml:\"remote\"`",
                "// Line 310:     RemoteQuery   RemoteQueryConfiguration `json:\"remote_query\" yaml:\"remote_query\"`",
                "// Line 311: ",
                "// Line 312:     // AllowedMounts is a list of allowed host-system mount points.",
                "// Line 313:     // This is required to have the \"Server Mounts\" feature work properly.",
                "// Line 314:     AllowedMounts []string `json:\"-\" yaml:\"allowed_mounts\"`",
                "// Line 315: ",
                "// Line 316:     // AllowedOrigins is a list of allowed request origins.",
                "// Line 317:     // The Panel URL is automatically allowed, this is only needed for adding",
                "// Line 318:     // additional origins.",
                "// Line 319:     AllowedOrigins []string `json:\"allowed_origins\" yaml:\"allowed_origins\"`",
                "// Line 669: // Gets the system release name.",
                "// Line 670: func getSystemName() (string, error) {",
                "// Line 671:     // use osrelease to get release version and ID",
                "// Line 672:     release, err := osrelease.Read()",
                "// Line 673:     if err != nil {",
                "// Line 674:         return \"\", err",
                "// Line 675:     }",
                "// Line 676:     return release[\"ID\"], nil",
                "// Line 677: }",
                "// Line 678: ",
                "// vulnerable line: 679: var openat2 atomic.Bool",
                "// vulnerable line: 680: var openat2Set atomic.Bool",
                "// Line 681: ",
                "// Line 682: func UseOpenat2() bool {",
                "// Line 683:     if openat2Set.Load() {",
                "// Line 684:         return openat2.Load()",
                "// Line 685:     }",
                "// Line 686:     defer openat2Set.Store(true)",
                "// Line 687: ",
                "// Line 688:     c := Get()",
                "// Line 689:     openatMode := c.System.OpenatMode",
                "// Line 690:     switch openatMode {"
            ]
        }
    ]
}