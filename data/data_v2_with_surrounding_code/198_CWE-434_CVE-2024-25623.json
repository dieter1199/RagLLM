{
    "cve_id": "CVE-2024-25623",
    "cve_description": "Mastodon is a free, open-source social network server based on ActivityPub. Prior to versions 4.2.7, 4.1.15, 4.0.15, and 3.5.19, when fetching remote statuses, Mastodon doesn't check that the response from the remote server has a `Content-Type` header value of the Activity Streams media type, which allows a threat actor to upload a crafted Activity Streams document to a remote server and make a Mastodon server fetch it, if the remote server accepts arbitrary user uploads. The vulnerability allows a threat actor to impersonate an account on a remote server that satisfies all of the following properties: allows the attacker to register an account; accepts arbitrary user-uploaded documents and places them on the same domain as the ActivityPub actors; and serves user-uploaded document in response to requests with an `Accept` header value of the Activity Streams media type. Versions 4.2.7, 4.1.15, 4.0.15, and 3.5.19 contain a fix for this issue.",
    "cve_publish_date": "2024-02-19T16:15Z",
    "cwe_id": "CWE-434",
    "cwe_name": "Unrestricted Upload of File with Dangerous Type",
    "cwe_description": "The product allows the upload or transfer of dangerous file types that are automatically processed within its environment.",
    "commit_message": "Merge pull request from GHSA-jhrq-qvrm-qr36\n\n* Fix insufficient Content-Type checking of fetched ActivityStreams objects\n\n* Allow JSON-LD documents with multiple profiles",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "announce_spec.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 28:       attributedTo: 'https://example.com/actor',",
                "// Line 29:       content: 'Hello world',",
                "// Line 30:       to: 'http://example.com/followers',",
                "// Line 31:     }",
                "// Line 32:   end",
                "// Line 33: ",
                "// Line 34:   describe '#perform' do",
                "// Line 35:     context 'when sender is followed by a local account' do",
                "// Line 36:       before do",
                "// Line 37:         Fabricate(:account).follow!(sender)",
                "// vulnerable line: 38: stub_request(:get, 'https://example.com/actor/hello-world').to_return(body: Oj.dump(unknown_object_json))",
                "// Line 39:         subject.perform",
                "// Line 40:       end",
                "// Line 41: ",
                "// Line 42:       context 'with known status' do",
                "// Line 43:         let(:object_json) do",
                "// Line 44:           ActivityPub::TagManager.instance.uri_for(status)",
                "// Line 45:         end",
                "// Line 46: ",
                "// Line 47:         it 'creates a reblog by sender of status' do",
                "// Line 48:           expect(sender.reblogged?(status)).to be true",
                "// Line 113: ",
                "// Line 114:     context 'when the sender is relayed' do",
                "// Line 115:       subject { described_class.new(json, sender, relayed_through_actor: relay_account) }",
                "// Line 116: ",
                "// Line 117:       let!(:relay_account) { Fabricate(:account, inbox_url: 'https://relay.example.com/inbox', domain: 'relay.example.com') }",
                "// Line 118:       let!(:relay) { Fabricate(:relay, inbox_url: 'https://relay.example.com/inbox') }",
                "// Line 119: ",
                "// Line 120:       let(:object_json) { 'https://example.com/actor/hello-world' }",
                "// Line 121: ",
                "// Line 122:       before do",
                "// vulnerable line: 123: stub_request(:get, 'https://example.com/actor/hello-world').to_return(body: Oj.dump(unknown_object_json))",
                "// Line 124:       end",
                "// Line 125: ",
                "// Line 126:       context 'when the relay is enabled' do",
                "// Line 127:         before do",
                "// Line 128:           relay.update(state: :accepted)",
                "// Line 129:           subject.perform",
                "// Line 130:         end",
                "// Line 131: ",
                "// Line 132:         it 'fetches the remote status' do",
                "// Line 133:           expect(a_request(:get, 'https://example.com/actor/hello-world')).to have_been_made"
            ]
        },
        {
            "filename_of_changes": "fetch_featured_collection_service_spec.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "9",
            "number_of_lines_deleted_vulnerable_to_cve": "9",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 65:     {",
                "// Line 66:       '@context': 'https://www.w3.org/ns/activitystreams',",
                "// Line 67:       type: 'Collection',",
                "// Line 68:       id: actor.featured_collection_url,",
                "// Line 69:       items: items,",
                "// Line 70:     }.with_indifferent_access",
                "// Line 71:   end",
                "// Line 72: ",
                "// Line 73:   shared_examples 'sets pinned posts' do",
                "// Line 74:     before do",
                "// vulnerable line: 75: stub_request(:get, 'https://example.com/account/pinned/known').to_return(status: 200, body: Oj.dump(status_json_pinned_known))",
                "// vulnerable line: 76: stub_request(:get, 'https://example.com/account/pinned/unknown-inlined').to_return(status: 200, body: Oj.dump(status_json_pinned_unknown_inlined))",
                "// Line 77:       stub_request(:get, 'https://example.com/account/pinned/unknown-unreachable').to_return(status: 404)",
                "// vulnerable line: 78: stub_request(:get, 'https://example.com/account/pinned/unknown-reachable').to_return(status: 200, body: Oj.dump(status_json_pinned_unknown_reachable))",
                "// vulnerable line: 79: stub_request(:get, 'https://example.com/account/collections/featured').to_return(status: 200, body: Oj.dump(featured_with_null))",
                "// Line 80: ",
                "// Line 81:       subject.call(actor, note: true, hashtag: false)",
                "// Line 82:     end",
                "// Line 83: ",
                "// Line 84:     it 'sets expected posts as pinned posts' do",
                "// Line 85:       expect(actor.pinned_statuses.pluck(:uri)).to contain_exactly(",
                "// Line 86:         'https://example.com/account/pinned/known',",
                "// Line 87:         'https://example.com/account/pinned/unknown-inlined',",
                "// Line 88:         'https://example.com/account/pinned/unknown-reachable'",
                "// Line 89:       )",
                "// Line 90:       expect(actor.pinned_statuses).to_not include(known_status)",
                "// Line 91:     end",
                "// Line 92:   end",
                "// Line 93: ",
                "// Line 94:   describe '#call' do",
                "// Line 95:     context 'when the endpoint is a Collection' do",
                "// Line 96:       before do",
                "// vulnerable line: 97: stub_request(:get, actor.featured_collection_url).to_return(status: 200, body: Oj.dump(payload))",
                "// Line 98:       end",
                "// Line 99: ",
                "// Line 100:       it_behaves_like 'sets pinned posts'",
                "// Line 101:     end",
                "// Line 102: ",
                "// Line 103:     context 'when the endpoint is an OrderedCollection' do",
                "// Line 104:       let(:payload) do",
                "// Line 105:         {",
                "// Line 106:           '@context': 'https://www.w3.org/ns/activitystreams',",
                "// Line 107:           type: 'OrderedCollection',",
                "// Line 108:           id: actor.featured_collection_url,",
                "// Line 109:           orderedItems: items,",
                "// Line 110:         }.with_indifferent_access",
                "// Line 111:       end",
                "// Line 112: ",
                "// Line 113:       before do",
                "// vulnerable line: 114: stub_request(:get, actor.featured_collection_url).to_return(status: 200, body: Oj.dump(payload))",
                "// Line 115:       end",
                "// Line 116: ",
                "// Line 117:       it_behaves_like 'sets pinned posts'",
                "// Line 118: ",
                "// Line 119:       context 'when there is a single item, with the array compacted away' do",
                "// Line 120:         let(:items) { 'https://example.com/account/pinned/unknown-reachable' }",
                "// Line 121: ",
                "// Line 122:         before do",
                "// vulnerable line: 123: stub_request(:get, 'https://example.com/account/pinned/unknown-reachable').to_return(status: 200, body: Oj.dump(status_json_pinned_unknown_reachable))",
                "// Line 124:           subject.call(actor, note: true, hashtag: false)",
                "// Line 125:         end",
                "// Line 126: ",
                "// Line 127:         it 'sets expected posts as pinned posts' do",
                "// Line 128:           expect(actor.pinned_statuses.pluck(:uri)).to contain_exactly(",
                "// Line 129:             'https://example.com/account/pinned/unknown-reachable'",
                "// Line 130:           )",
                "// Line 131:         end",
                "// Line 132:       end",
                "// Line 133:     end",
                "// Line 140:           id: actor.featured_collection_url,",
                "// Line 141:           first: {",
                "// Line 142:             type: 'CollectionPage',",
                "// Line 143:             partOf: actor.featured_collection_url,",
                "// Line 144:             items: items,",
                "// Line 145:           },",
                "// Line 146:         }.with_indifferent_access",
                "// Line 147:       end",
                "// Line 148: ",
                "// Line 149:       before do",
                "// vulnerable line: 150: stub_request(:get, actor.featured_collection_url).to_return(status: 200, body: Oj.dump(payload))",
                "// Line 151:       end",
                "// Line 152: ",
                "// Line 153:       it_behaves_like 'sets pinned posts'",
                "// Line 154: ",
                "// Line 155:       context 'when there is a single item, with the array compacted away' do",
                "// Line 156:         let(:items) { 'https://example.com/account/pinned/unknown-reachable' }",
                "// Line 157: ",
                "// Line 158:         before do",
                "// vulnerable line: 159: stub_request(:get, 'https://example.com/account/pinned/unknown-reachable').to_return(status: 200, body: Oj.dump(status_json_pinned_unknown_reachable))",
                "// Line 160:           subject.call(actor, note: true, hashtag: false)",
                "// Line 161:         end",
                "// Line 162: ",
                "// Line 163:         it 'sets expected posts as pinned posts' do",
                "// Line 164:           expect(actor.pinned_statuses.pluck(:uri)).to contain_exactly(",
                "// Line 165:             'https://example.com/account/pinned/unknown-reachable'",
                "// Line 166:           )",
                "// Line 167:         end",
                "// Line 168:       end",
                "// Line 169:     end"
            ]
        },
        {
            "filename_of_changes": "fetch_featured_tags_collection_service_spec.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "4",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 31:     end",
                "// Line 32: ",
                "// Line 33:     it 'sets expected tags as pinned tags' do",
                "// Line 34:       expect(actor.featured_tags.map(&:display_name)).to match_array %w(Foo bar baZ)",
                "// Line 35:     end",
                "// Line 36:   end",
                "// Line 37: ",
                "// Line 38:   describe '#call' do",
                "// Line 39:     context 'when the endpoint is a Collection' do",
                "// Line 40:       before do",
                "// vulnerable line: 41: stub_request(:get, collection_url).to_return(status: 200, body: Oj.dump(payload))",
                "// Line 42:       end",
                "// Line 43: ",
                "// Line 44:       it_behaves_like 'sets featured tags'",
                "// Line 45:     end",
                "// Line 46: ",
                "// Line 47:     context 'when the account already has featured tags' do",
                "// Line 48:       before do",
                "// vulnerable line: 49: stub_request(:get, collection_url).to_return(status: 200, body: Oj.dump(payload))",
                "// Line 50: ",
                "// Line 51:         actor.featured_tags.create!(name: 'FoO')",
                "// Line 52:         actor.featured_tags.create!(name: 'baz')",
                "// Line 53:         actor.featured_tags.create!(name: 'oh').update(name: nil)",
                "// Line 54:       end",
                "// Line 55: ",
                "// Line 56:       it_behaves_like 'sets featured tags'",
                "// Line 57:     end",
                "// Line 58: ",
                "// Line 59:     context 'when the endpoint is an OrderedCollection' do",
                "// Line 60:       let(:payload) do",
                "// Line 61:         {",
                "// Line 62:           '@context': 'https://www.w3.org/ns/activitystreams',",
                "// Line 63:           type: 'OrderedCollection',",
                "// Line 64:           id: collection_url,",
                "// Line 65:           orderedItems: items,",
                "// Line 66:         }.with_indifferent_access",
                "// Line 67:       end",
                "// Line 68: ",
                "// Line 69:       before do",
                "// vulnerable line: 70: stub_request(:get, collection_url).to_return(status: 200, body: Oj.dump(payload))",
                "// Line 71:       end",
                "// Line 72: ",
                "// Line 73:       it_behaves_like 'sets featured tags'",
                "// Line 74:     end",
                "// Line 75: ",
                "// Line 76:     context 'when the endpoint is a paginated Collection' do",
                "// Line 77:       let(:payload) do",
                "// Line 78:         {",
                "// Line 79:           '@context': 'https://www.w3.org/ns/activitystreams',",
                "// Line 80:           type: 'Collection',",
                "// Line 81:           id: collection_url,",
                "// Line 82:           first: {",
                "// Line 83:             type: 'CollectionPage',",
                "// Line 84:             partOf: collection_url,",
                "// Line 85:             items: items,",
                "// Line 86:           },",
                "// Line 87:         }.with_indifferent_access",
                "// Line 88:       end",
                "// Line 89: ",
                "// Line 90:       before do",
                "// vulnerable line: 91: stub_request(:get, collection_url).to_return(status: 200, body: Oj.dump(payload))",
                "// Line 92:       end",
                "// Line 93: ",
                "// Line 94:       it_behaves_like 'sets featured tags'",
                "// Line 95:     end",
                "// Line 96:   end",
                "// Line 97: end"
            ]
        },
        {
            "filename_of_changes": "fetch_remote_account_service_spec.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "5",
            "number_of_lines_deleted_vulnerable_to_cve": "5",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 31:           )",
                "// Line 32:       end",
                "// Line 33:     end",
                "// Line 34: ",
                "// Line 35:     context 'when the account does not have a inbox' do",
                "// Line 36:       let!(:webfinger) { { subject: 'acct:alice@example.com', links: [{ rel: 'self', href: 'https://example.com/alice' }] } }",
                "// Line 37: ",
                "// Line 38:       before do",
                "// Line 39:         actor[:inbox] = nil",
                "// Line 40: ",
                "// vulnerable line: 41: stub_request(:get, 'https://example.com/alice').to_return(body: Oj.dump(actor))",
                "// Line 42:         stub_request(:get, 'https://example.com/.well-known/webfinger?resource=acct:alice@example.com').to_return(body: Oj.dump(webfinger), headers: { 'Content-Type': 'application/jrd+json' })",
                "// Line 43:       end",
                "// Line 44: ",
                "// Line 45:       it 'fetches resource and looks up webfinger and returns nil' do",
                "// Line 46:         expect(account).to be_nil",
                "// Line 47: ",
                "// Line 48:         expect(a_request(:get, 'https://example.com/alice')).to have_been_made.once",
                "// Line 49:         expect(a_request(:get, 'https://example.com/.well-known/webfinger?resource=acct:alice@example.com')).to have_been_made.once",
                "// Line 50:       end",
                "// Line 51:     end",
                "// Line 52: ",
                "// Line 53:     context 'when URI and WebFinger share the same host' do",
                "// Line 54:       let!(:webfinger) { { subject: 'acct:alice@example.com', links: [{ rel: 'self', href: 'https://example.com/alice' }] } }",
                "// Line 55: ",
                "// Line 56:       before do",
                "// vulnerable line: 57: stub_request(:get, 'https://example.com/alice').to_return(body: Oj.dump(actor))",
                "// Line 58:         stub_request(:get, 'https://example.com/.well-known/webfinger?resource=acct:alice@example.com').to_return(body: Oj.dump(webfinger), headers: { 'Content-Type': 'application/jrd+json' })",
                "// Line 59:       end",
                "// Line 60: ",
                "// Line 61:       it 'fetches resource and looks up webfinger and sets attributes' do",
                "// Line 62:         account",
                "// Line 63: ",
                "// Line 64:         expect(a_request(:get, 'https://example.com/alice')).to have_been_made.once",
                "// Line 65:         expect(a_request(:get, 'https://example.com/.well-known/webfinger?resource=acct:alice@example.com')).to have_been_made.once",
                "// Line 66: ",
                "// Line 67:         expect(account.username).to eq 'alice'",
                "// Line 68:         expect(account.domain).to eq 'example.com'",
                "// Line 69:       end",
                "// Line 70: ",
                "// Line 71:       include_examples 'sets profile data'",
                "// Line 72:     end",
                "// Line 73: ",
                "// Line 74:     context 'when WebFinger presents different domain than URI' do",
                "// Line 75:       let!(:webfinger) { { subject: 'acct:alice@iscool.af', links: [{ rel: 'self', href: 'https://example.com/alice' }] } }",
                "// Line 76: ",
                "// Line 77:       before do",
                "// vulnerable line: 78: stub_request(:get, 'https://example.com/alice').to_return(body: Oj.dump(actor))",
                "// Line 79:         stub_request(:get, 'https://example.com/.well-known/webfinger?resource=acct:alice@example.com').to_return(body: Oj.dump(webfinger), headers: { 'Content-Type': 'application/jrd+json' })",
                "// Line 80:         stub_request(:get, 'https://iscool.af/.well-known/webfinger?resource=acct:alice@iscool.af').to_return(body: Oj.dump(webfinger), headers: { 'Content-Type': 'application/jrd+json' })",
                "// Line 81:       end",
                "// Line 82: ",
                "// Line 83:       it 'fetches resource and looks up webfinger and follows redirection and sets attributes' do",
                "// Line 84:         account",
                "// Line 85: ",
                "// Line 86:         expect(a_request(:get, 'https://example.com/alice')).to have_been_made.once",
                "// Line 87:         expect(a_request(:get, 'https://example.com/.well-known/webfinger?resource=acct:alice@example.com')).to have_been_made.once",
                "// Line 88:         expect(a_request(:get, 'https://iscool.af/.well-known/webfinger?resource=acct:alice@iscool.af')).to have_been_made.once",
                "// Line 91:         expect(account.domain).to eq 'iscool.af'",
                "// Line 92:       end",
                "// Line 93: ",
                "// Line 94:       include_examples 'sets profile data'",
                "// Line 95:     end",
                "// Line 96: ",
                "// Line 97:     context 'when WebFinger returns a different URI' do",
                "// Line 98:       let!(:webfinger) { { subject: 'acct:alice@example.com', links: [{ rel: 'self', href: 'https://example.com/bob' }] } }",
                "// Line 99: ",
                "// Line 100:       before do",
                "// vulnerable line: 101: stub_request(:get, 'https://example.com/alice').to_return(body: Oj.dump(actor))",
                "// Line 102:         stub_request(:get, 'https://example.com/.well-known/webfinger?resource=acct:alice@example.com').to_return(body: Oj.dump(webfinger), headers: { 'Content-Type': 'application/jrd+json' })",
                "// Line 103:       end",
                "// Line 104: ",
                "// Line 105:       it 'fetches resource and looks up webfinger and does not create account' do",
                "// Line 106:         expect(account).to be_nil",
                "// Line 107: ",
                "// Line 108:         expect(a_request(:get, 'https://example.com/alice')).to have_been_made.once",
                "// Line 109:         expect(a_request(:get, 'https://example.com/.well-known/webfinger?resource=acct:alice@example.com')).to have_been_made.once",
                "// Line 110:       end",
                "// Line 111:     end",
                "// Line 112: ",
                "// Line 113:     context 'when WebFinger returns a different URI after a redirection' do",
                "// Line 114:       let!(:webfinger) { { subject: 'acct:alice@iscool.af', links: [{ rel: 'self', href: 'https://example.com/bob' }] } }",
                "// Line 115: ",
                "// Line 116:       before do",
                "// vulnerable line: 117: stub_request(:get, 'https://example.com/alice').to_return(body: Oj.dump(actor))",
                "// Line 118:         stub_request(:get, 'https://example.com/.well-known/webfinger?resource=acct:alice@example.com').to_return(body: Oj.dump(webfinger), headers: { 'Content-Type': 'application/jrd+json' })",
                "// Line 119:         stub_request(:get, 'https://iscool.af/.well-known/webfinger?resource=acct:alice@iscool.af').to_return(body: Oj.dump(webfinger), headers: { 'Content-Type': 'application/jrd+json' })",
                "// Line 120:       end",
                "// Line 121: ",
                "// Line 122:       it 'fetches resource and looks up webfinger and follows redirect and does not create account' do",
                "// Line 123:         expect(account).to be_nil",
                "// Line 124: ",
                "// Line 125:         expect(a_request(:get, 'https://example.com/alice')).to have_been_made.once",
                "// Line 126:         expect(a_request(:get, 'https://example.com/.well-known/webfinger?resource=acct:alice@example.com')).to have_been_made.once",
                "// Line 127:         expect(a_request(:get, 'https://iscool.af/.well-known/webfinger?resource=acct:alice@iscool.af')).to have_been_made.once"
            ]
        },
        {
            "filename_of_changes": "fetch_remote_actor_service_spec.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "5",
            "number_of_lines_deleted_vulnerable_to_cve": "5",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 31:           )",
                "// Line 32:       end",
                "// Line 33:     end",
                "// Line 34: ",
                "// Line 35:     context 'when the account does not have a inbox' do",
                "// Line 36:       let!(:webfinger) { { subject: 'acct:alice@example.com', links: [{ rel: 'self', href: 'https://example.com/alice' }] } }",
                "// Line 37: ",
                "// Line 38:       before do",
                "// Line 39:         actor[:inbox] = nil",
                "// Line 40: ",
                "// vulnerable line: 41: stub_request(:get, 'https://example.com/alice').to_return(body: Oj.dump(actor))",
                "// Line 42:         stub_request(:get, 'https://example.com/.well-known/webfinger?resource=acct:alice@example.com').to_return(body: Oj.dump(webfinger), headers: { 'Content-Type': 'application/jrd+json' })",
                "// Line 43:       end",
                "// Line 44: ",
                "// Line 45:       it 'fetches resource and looks up webfinger and returns nil' do",
                "// Line 46:         expect(account).to be_nil",
                "// Line 47: ",
                "// Line 48:         expect(a_request(:get, 'https://example.com/alice')).to have_been_made.once",
                "// Line 49:         expect(a_request(:get, 'https://example.com/.well-known/webfinger?resource=acct:alice@example.com')).to have_been_made.once",
                "// Line 50:       end",
                "// Line 51:     end",
                "// Line 52: ",
                "// Line 53:     context 'when URI and WebFinger share the same host' do",
                "// Line 54:       let!(:webfinger) { { subject: 'acct:alice@example.com', links: [{ rel: 'self', href: 'https://example.com/alice' }] } }",
                "// Line 55: ",
                "// Line 56:       before do",
                "// vulnerable line: 57: stub_request(:get, 'https://example.com/alice').to_return(body: Oj.dump(actor))",
                "// Line 58:         stub_request(:get, 'https://example.com/.well-known/webfinger?resource=acct:alice@example.com').to_return(body: Oj.dump(webfinger), headers: { 'Content-Type': 'application/jrd+json' })",
                "// Line 59:       end",
                "// Line 60: ",
                "// Line 61:       it 'fetches resource and looks up webfinger and sets values' do",
                "// Line 62:         account",
                "// Line 63: ",
                "// Line 64:         expect(a_request(:get, 'https://example.com/alice')).to have_been_made.once",
                "// Line 65:         expect(a_request(:get, 'https://example.com/.well-known/webfinger?resource=acct:alice@example.com')).to have_been_made.once",
                "// Line 66: ",
                "// Line 67:         expect(account.username).to eq 'alice'",
                "// Line 68:         expect(account.domain).to eq 'example.com'",
                "// Line 69:       end",
                "// Line 70: ",
                "// Line 71:       include_examples 'sets profile data'",
                "// Line 72:     end",
                "// Line 73: ",
                "// Line 74:     context 'when WebFinger presents different domain than URI' do",
                "// Line 75:       let!(:webfinger) { { subject: 'acct:alice@iscool.af', links: [{ rel: 'self', href: 'https://example.com/alice' }] } }",
                "// Line 76: ",
                "// Line 77:       before do",
                "// vulnerable line: 78: stub_request(:get, 'https://example.com/alice').to_return(body: Oj.dump(actor))",
                "// Line 79:         stub_request(:get, 'https://example.com/.well-known/webfinger?resource=acct:alice@example.com').to_return(body: Oj.dump(webfinger), headers: { 'Content-Type': 'application/jrd+json' })",
                "// Line 80:         stub_request(:get, 'https://iscool.af/.well-known/webfinger?resource=acct:alice@iscool.af').to_return(body: Oj.dump(webfinger), headers: { 'Content-Type': 'application/jrd+json' })",
                "// Line 81:       end",
                "// Line 82: ",
                "// Line 83:       it 'fetches resource and looks up webfinger and follows redirect and sets values' do",
                "// Line 84:         account",
                "// Line 85: ",
                "// Line 86:         expect(a_request(:get, 'https://example.com/alice')).to have_been_made.once",
                "// Line 87:         expect(a_request(:get, 'https://example.com/.well-known/webfinger?resource=acct:alice@example.com')).to have_been_made.once",
                "// Line 88:         expect(a_request(:get, 'https://iscool.af/.well-known/webfinger?resource=acct:alice@iscool.af')).to have_been_made.once",
                "// Line 91:         expect(account.domain).to eq 'iscool.af'",
                "// Line 92:       end",
                "// Line 93: ",
                "// Line 94:       include_examples 'sets profile data'",
                "// Line 95:     end",
                "// Line 96: ",
                "// Line 97:     context 'when WebFinger returns a different URI' do",
                "// Line 98:       let!(:webfinger) { { subject: 'acct:alice@example.com', links: [{ rel: 'self', href: 'https://example.com/bob' }] } }",
                "// Line 99: ",
                "// Line 100:       before do",
                "// vulnerable line: 101: stub_request(:get, 'https://example.com/alice').to_return(body: Oj.dump(actor))",
                "// Line 102:         stub_request(:get, 'https://example.com/.well-known/webfinger?resource=acct:alice@example.com').to_return(body: Oj.dump(webfinger), headers: { 'Content-Type': 'application/jrd+json' })",
                "// Line 103:       end",
                "// Line 104: ",
                "// Line 105:       it 'fetches resource and looks up webfinger and does not create account' do",
                "// Line 106:         expect(account).to be_nil",
                "// Line 107: ",
                "// Line 108:         expect(a_request(:get, 'https://example.com/alice')).to have_been_made.once",
                "// Line 109:         expect(a_request(:get, 'https://example.com/.well-known/webfinger?resource=acct:alice@example.com')).to have_been_made.once",
                "// Line 110:       end",
                "// Line 111:     end",
                "// Line 112: ",
                "// Line 113:     context 'when WebFinger returns a different URI after a redirection' do",
                "// Line 114:       let!(:webfinger) { { subject: 'acct:alice@iscool.af', links: [{ rel: 'self', href: 'https://example.com/bob' }] } }",
                "// Line 115: ",
                "// Line 116:       before do",
                "// vulnerable line: 117: stub_request(:get, 'https://example.com/alice').to_return(body: Oj.dump(actor))",
                "// Line 118:         stub_request(:get, 'https://example.com/.well-known/webfinger?resource=acct:alice@example.com').to_return(body: Oj.dump(webfinger), headers: { 'Content-Type': 'application/jrd+json' })",
                "// Line 119:         stub_request(:get, 'https://iscool.af/.well-known/webfinger?resource=acct:alice@iscool.af').to_return(body: Oj.dump(webfinger), headers: { 'Content-Type': 'application/jrd+json' })",
                "// Line 120:       end",
                "// Line 121: ",
                "// Line 122:       it 'fetches resource and looks up webfinger and follows redirect and does not create account' do",
                "// Line 123:         expect(account).to be_nil",
                "// Line 124: ",
                "// Line 125:         expect(a_request(:get, 'https://example.com/alice')).to have_been_made.once",
                "// Line 126:         expect(a_request(:get, 'https://example.com/.well-known/webfinger?resource=acct:alice@example.com')).to have_been_made.once",
                "// Line 127:         expect(a_request(:get, 'https://iscool.af/.well-known/webfinger?resource=acct:alice@iscool.af')).to have_been_made.once"
            ]
        },
        {
            "filename_of_changes": "fetch_remote_key_service_spec.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "4",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 43:       type: 'Person',",
                "// Line 44:       preferredUsername: 'alice',",
                "// Line 45:       name: 'Alice',",
                "// Line 46:       summary: 'Foo bar',",
                "// Line 47:       inbox: 'http://example.com/alice/inbox',",
                "// Line 48:       publicKey: actor_public_key,",
                "// Line 49:     }",
                "// Line 50:   end",
                "// Line 51: ",
                "// Line 52:   before do",
                "// vulnerable line: 53: stub_request(:get, 'https://example.com/alice').to_return(body: Oj.dump(actor))",
                "// Line 54:     stub_request(:get, 'https://example.com/.well-known/webfinger?resource=acct:alice@example.com').to_return(body: Oj.dump(webfinger), headers: { 'Content-Type': 'application/jrd+json' })",
                "// Line 55:   end",
                "// Line 56: ",
                "// Line 57:   describe '#call' do",
                "// Line 58:     let(:account) { subject.call(public_key_id) }",
                "// Line 59: ",
                "// Line 60:     context 'when the key is a sub-object from the actor' do",
                "// Line 61:       before do",
                "// vulnerable line: 62: stub_request(:get, public_key_id).to_return(body: Oj.dump(actor))",
                "// Line 63:       end",
                "// Line 64: ",
                "// Line 65:       it 'returns the expected account' do",
                "// Line 66:         expect(account.uri).to eq 'https://example.com/alice'",
                "// Line 67:       end",
                "// Line 68:     end",
                "// Line 69: ",
                "// Line 70:     context 'when the key is a separate document' do",
                "// Line 71:       let(:public_key_id) { 'https://example.com/alice-public-key.json' }",
                "// Line 72: ",
                "// Line 73:       before do",
                "// vulnerable line: 74: stub_request(:get, public_key_id).to_return(body: Oj.dump(key_json.merge({ '@context': ['https://www.w3.org/ns/activitystreams', 'https://w3id.org/security/v1'] })))",
                "// Line 75:       end",
                "// Line 76: ",
                "// Line 77:       it 'returns the expected account' do",
                "// Line 78:         expect(account.uri).to eq 'https://example.com/alice'",
                "// Line 79:       end",
                "// Line 80:     end",
                "// Line 81: ",
                "// Line 82:     context 'when the key and owner do not match' do",
                "// Line 83:       let(:public_key_id) { 'https://example.com/fake-public-key.json' }",
                "// Line 84:       let(:actor_public_key) { 'https://example.com/alice-public-key.json' }",
                "// Line 85: ",
                "// Line 86:       before do",
                "// vulnerable line: 87: stub_request(:get, public_key_id).to_return(body: Oj.dump(key_json.merge({ '@context': ['https://www.w3.org/ns/activitystreams', 'https://w3id.org/security/v1'] })))",
                "// Line 88:       end",
                "// Line 89: ",
                "// Line 90:       it 'returns the nil' do",
                "// Line 91:         expect(account).to be_nil",
                "// Line 92:       end",
                "// Line 93:     end",
                "// Line 94:   end",
                "// Line 95: end"
            ]
        },
        {
            "filename_of_changes": "fetch_replies_service_spec.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 51:           allow(FetchReplyWorker).to receive(:push_bulk)",
                "// Line 52: ",
                "// Line 53:           subject.call(status, payload)",
                "// Line 54: ",
                "// Line 55:           expect(FetchReplyWorker).to have_received(:push_bulk).with(['http://example.com/self-reply-1', 'http://example.com/self-reply-2', 'http://example.com/self-reply-3', 'http://example.com/self-reply-4', 'http://example.com/self-reply-5'])",
                "// Line 56:         end",
                "// Line 57:       end",
                "// Line 58: ",
                "// Line 59:       context 'when passing the URL to the collection' do",
                "// Line 60:         before do",
                "// vulnerable line: 61: stub_request(:get, collection_uri).to_return(status: 200, body: Oj.dump(payload))",
                "// Line 62:         end",
                "// Line 63: ",
                "// Line 64:         it 'spawns workers for up to 5 replies on the same server' do",
                "// Line 65:           allow(FetchReplyWorker).to receive(:push_bulk)",
                "// Line 66: ",
                "// Line 67:           subject.call(status, collection_uri)",
                "// Line 68: ",
                "// Line 69:           expect(FetchReplyWorker).to have_received(:push_bulk).with(['http://example.com/self-reply-1', 'http://example.com/self-reply-2', 'http://example.com/self-reply-3', 'http://example.com/self-reply-4', 'http://example.com/self-reply-5'])",
                "// Line 70:         end",
                "// Line 71:       end",
                "// Line 86:           allow(FetchReplyWorker).to receive(:push_bulk)",
                "// Line 87: ",
                "// Line 88:           subject.call(status, payload)",
                "// Line 89: ",
                "// Line 90:           expect(FetchReplyWorker).to have_received(:push_bulk).with(['http://example.com/self-reply-1', 'http://example.com/self-reply-2', 'http://example.com/self-reply-3', 'http://example.com/self-reply-4', 'http://example.com/self-reply-5'])",
                "// Line 91:         end",
                "// Line 92:       end",
                "// Line 93: ",
                "// Line 94:       context 'when passing the URL to the collection' do",
                "// Line 95:         before do",
                "// vulnerable line: 96: stub_request(:get, collection_uri).to_return(status: 200, body: Oj.dump(payload))",
                "// Line 97:         end",
                "// Line 98: ",
                "// Line 99:         it 'spawns workers for up to 5 replies on the same server' do",
                "// Line 100:           allow(FetchReplyWorker).to receive(:push_bulk)",
                "// Line 101: ",
                "// Line 102:           subject.call(status, collection_uri)",
                "// Line 103: ",
                "// Line 104:           expect(FetchReplyWorker).to have_received(:push_bulk).with(['http://example.com/self-reply-1', 'http://example.com/self-reply-2', 'http://example.com/self-reply-3', 'http://example.com/self-reply-4', 'http://example.com/self-reply-5'])",
                "// Line 105:         end",
                "// Line 106:       end",
                "// Line 125:           allow(FetchReplyWorker).to receive(:push_bulk)",
                "// Line 126: ",
                "// Line 127:           subject.call(status, payload)",
                "// Line 128: ",
                "// Line 129:           expect(FetchReplyWorker).to have_received(:push_bulk).with(['http://example.com/self-reply-1', 'http://example.com/self-reply-2', 'http://example.com/self-reply-3', 'http://example.com/self-reply-4', 'http://example.com/self-reply-5'])",
                "// Line 130:         end",
                "// Line 131:       end",
                "// Line 132: ",
                "// Line 133:       context 'when passing the URL to the collection' do",
                "// Line 134:         before do",
                "// vulnerable line: 135: stub_request(:get, collection_uri).to_return(status: 200, body: Oj.dump(payload))",
                "// Line 136:         end",
                "// Line 137: ",
                "// Line 138:         it 'spawns workers for up to 5 replies on the same server' do",
                "// Line 139:           allow(FetchReplyWorker).to receive(:push_bulk)",
                "// Line 140: ",
                "// Line 141:           subject.call(status, collection_uri)",
                "// Line 142: ",
                "// Line 143:           expect(FetchReplyWorker).to have_received(:push_bulk).with(['http://example.com/self-reply-1', 'http://example.com/self-reply-2', 'http://example.com/self-reply-3', 'http://example.com/self-reply-4', 'http://example.com/self-reply-5'])",
                "// Line 144:         end",
                "// Line 145:       end"
            ]
        },
        {
            "filename_of_changes": "fetch_replies_worker_spec.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 14:       id: 'https://example.com/statuses_replies/1',",
                "// Line 15:       type: 'Collection',",
                "// Line 16:       items: [],",
                "// Line 17:     }",
                "// Line 18:   end",
                "// Line 19: ",
                "// Line 20:   let(:json) { Oj.dump(payload) }",
                "// Line 21: ",
                "// Line 22:   describe 'perform' do",
                "// Line 23:     it 'performs a request if the collection URI is from the same host' do",
                "// vulnerable line: 24: stub_request(:get, 'https://example.com/statuses_replies/1').to_return(status: 200, body: json)",
                "// Line 25:       subject.perform(status.id, 'https://example.com/statuses_replies/1')",
                "// Line 26:       expect(a_request(:get, 'https://example.com/statuses_replies/1')).to have_been_made.once",
                "// Line 27:     end",
                "// Line 28: ",
                "// Line 29:     it 'does not perform a request if the collection URI is from a different host' do",
                "// Line 30:       stub_request(:get, 'https://other.com/statuses_replies/1').to_return(status: 200)",
                "// Line 31:       subject.perform(status.id, 'https://other.com/statuses_replies/1')",
                "// Line 32:       expect(a_request(:get, 'https://other.com/statuses_replies/1')).to_not have_been_made",
                "// Line 33:     end",
                "// Line 34: "
            ]
        },
        {
            "filename_of_changes": "fetch_resource_service.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 37:       # don't do it",
                "// Line 38: ",
                "// Line 39:       request.on_behalf_of(Account.representative) unless Rails.env.development?",
                "// Line 40:     end.perform(&block)",
                "// Line 41:   end",
                "// Line 42: ",
                "// Line 43:   def process_response(response, terminal = false)",
                "// Line 44:     @response_code = response.code",
                "// Line 45:     return nil if response.code != 200",
                "// Line 46: ",
                "// vulnerable line: 47: if ['application/activity+json', 'application/ld+json'].include?(response.mime_type)",
                "// Line 48:       body = response.body_with_limit",
                "// Line 49:       json = body_to_json(body)",
                "// Line 50: ",
                "// Line 51:       return unless supported_context?(json) && (equals_or_includes_any?(json['type'], ActivityPub::FetchRemoteActorService::SUPPORTED_TYPES) || expected_type?(json))",
                "// Line 52: ",
                "// Line 53:       if json['id'] != @url",
                "// Line 54:         return if terminal",
                "// Line 55: ",
                "// Line 56:         return process(json['id'], terminal: true)",
                "// Line 57:       end"
            ]
        },
        {
            "filename_of_changes": "json_ld_helper_spec.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "7",
            "number_of_lines_deleted_vulnerable_to_cve": "7",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 49:       it 'returns false' do",
                "// Line 50:         json = nil",
                "// Line 51:         expect(helper.supported_context?(json)).to be false",
                "// Line 52:       end",
                "// Line 53:     end",
                "// Line 54:   end",
                "// Line 55: ",
                "// Line 56:   describe '#fetch_resource' do",
                "// Line 57:     context 'when the second argument is false' do",
                "// Line 58:       it 'returns resource even if the retrieved ID and the given URI does not match' do",
                "// vulnerable line: 59: stub_request(:get, 'https://bob.test/').to_return body: '{\"id\": \"https://alice.test/\"}'",
                "// vulnerable line: 60: stub_request(:get, 'https://alice.test/').to_return body: '{\"id\": \"https://alice.test/\"}'",
                "// Line 61: ",
                "// Line 62:         expect(fetch_resource('https://bob.test/', false)).to eq({ 'id' => 'https://alice.test/' })",
                "// Line 63:       end",
                "// Line 64: ",
                "// Line 65:       it 'returns nil if the object identified by the given URI and the object identified by the retrieved ID does not match' do",
                "// vulnerable line: 66: stub_request(:get, 'https://mallory.test/').to_return body: '{\"id\": \"https://marvin.test/\"}'",
                "// vulnerable line: 67: stub_request(:get, 'https://marvin.test/').to_return body: '{\"id\": \"https://alice.test/\"}'",
                "// Line 68: ",
                "// Line 69:         expect(fetch_resource('https://mallory.test/', false)).to be_nil",
                "// Line 70:       end",
                "// Line 71:     end",
                "// Line 72: ",
                "// Line 73:     context 'when the second argument is true' do",
                "// Line 74:       it 'returns nil if the retrieved ID and the given URI does not match' do",
                "// vulnerable line: 75: stub_request(:get, 'https://mallory.test/').to_return body: '{\"id\": \"https://alice.test/\"}'",
                "// Line 76:         expect(fetch_resource('https://mallory.test/', true)).to be_nil",
                "// Line 77:       end",
                "// Line 78:     end",
                "// Line 79:   end",
                "// Line 80: ",
                "// Line 81:   describe '#fetch_resource_without_id_validation' do",
                "// Line 82:     it 'returns nil if the status code is not 200' do",
                "// vulnerable line: 83: stub_request(:get, 'https://host.test/').to_return status: 400, body: '{}'",
                "// Line 84:       expect(fetch_resource_without_id_validation('https://host.test/')).to be_nil",
                "// Line 85:     end",
                "// Line 86: ",
                "// Line 87:     it 'returns hash' do",
                "// vulnerable line: 88: stub_request(:get, 'https://host.test/').to_return status: 200, body: '{}'",
                "// Line 89:       expect(fetch_resource_without_id_validation('https://host.test/')).to eq({})",
                "// Line 90:     end",
                "// Line 91:   end",
                "// Line 92: ",
                "// Line 93:   context 'with compaction and forwarding' do",
                "// Line 94:     let(:json) do",
                "// Line 95:       {",
                "// Line 96:         '@context' => [",
                "// Line 97:           'https://www.w3.org/ns/activitystreams',",
                "// Line 98:           'https://w3id.org/security/v1',"
            ]
        },
        {
            "filename_of_changes": "jsonld_helper.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "13",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 167:     json = fetch_resource_without_id_validation(uri, on_behalf_of, request_options: request_options)",
                "// Line 168:     json.present? && json['id'] == uri ? json : nil",
                "// Line 169:   end",
                "// Line 170: ",
                "// Line 171:   def fetch_resource_without_id_validation(uri, on_behalf_of = nil, raise_on_temporary_error = false, request_options: {})",
                "// Line 172:     on_behalf_of ||= Account.representative",
                "// Line 173: ",
                "// Line 174:     build_request(uri, on_behalf_of, options: request_options).perform do |response|",
                "// Line 175:       raise Mastodon::UnexpectedResponseError, response unless response_successful?(response) || response_error_unsalvageable?(response) || !raise_on_temporary_error",
                "// Line 176: ",
                "// vulnerable line: 177: body_to_json(response.body_with_limit) if response.code == 200",
                "// Line 178:     end",
                "// Line 179:   end",
                "// Line 180: ",
                "// Line 181:   def body_to_json(body, compare_id: nil)",
                "// Line 182:     json = body.is_a?(String) ? Oj.load(body, mode: :strict) : body",
                "// Line 183: ",
                "// Line 184:     return if compare_id.present? && json['id'] != compare_id",
                "// Line 185: ",
                "// Line 186:     json",
                "// Line 187:   rescue Oj::ParseError"
            ]
        },
        {
            "filename_of_changes": "synchronize_followers_service_spec.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 53:     end",
                "// Line 54: ",
                "// Line 55:     it 'sends an Undo Follow to the actor' do",
                "// Line 56:       expect(ActivityPub::DeliveryWorker).to have_received(:perform_async).with(anything, eve.id, actor.inbox_url)",
                "// Line 57:     end",
                "// Line 58:   end",
                "// Line 59: ",
                "// Line 60:   describe '#call' do",
                "// Line 61:     context 'when the endpoint is a Collection of actor URIs' do",
                "// Line 62:       before do",
                "// vulnerable line: 63: stub_request(:get, collection_uri).to_return(status: 200, body: Oj.dump(payload))",
                "// Line 64:       end",
                "// Line 65: ",
                "// Line 66:       it_behaves_like 'synchronizes followers'",
                "// Line 67:     end",
                "// Line 68: ",
                "// Line 69:     context 'when the endpoint is an OrderedCollection of actor URIs' do",
                "// Line 70:       let(:payload) do",
                "// Line 71:         {",
                "// Line 72:           '@context': 'https://www.w3.org/ns/activitystreams',",
                "// Line 73:           type: 'OrderedCollection',",
                "// Line 74:           id: collection_uri,",
                "// Line 75:           orderedItems: items,",
                "// Line 76:         }.with_indifferent_access",
                "// Line 77:       end",
                "// Line 78: ",
                "// Line 79:       before do",
                "// vulnerable line: 80: stub_request(:get, collection_uri).to_return(status: 200, body: Oj.dump(payload))",
                "// Line 81:       end",
                "// Line 82: ",
                "// Line 83:       it_behaves_like 'synchronizes followers'",
                "// Line 84:     end",
                "// Line 85: ",
                "// Line 86:     context 'when the endpoint is a paginated Collection of actor URIs' do",
                "// Line 87:       let(:payload) do",
                "// Line 88:         {",
                "// Line 89:           '@context': 'https://www.w3.org/ns/activitystreams',",
                "// Line 90:           type: 'Collection',",
                "// Line 91:           id: collection_uri,",
                "// Line 92:           first: {",
                "// Line 93:             type: 'CollectionPage',",
                "// Line 94:             partOf: collection_uri,",
                "// Line 95:             items: items,",
                "// Line 96:           },",
                "// Line 97:         }.with_indifferent_access",
                "// Line 98:       end",
                "// Line 99: ",
                "// Line 100:       before do",
                "// vulnerable line: 101: stub_request(:get, collection_uri).to_return(status: 200, body: Oj.dump(payload))",
                "// Line 102:       end",
                "// Line 103: ",
                "// Line 104:       it_behaves_like 'synchronizes followers'",
                "// Line 105:     end",
                "// Line 106:   end",
                "// Line 107: end"
            ]
        }
    ]
}