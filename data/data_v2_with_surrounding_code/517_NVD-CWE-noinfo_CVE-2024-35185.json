{
    "cve_id": "CVE-2024-35185",
    "cve_description": "Minder is a software supply chain security platform. Prior to version 0.0.49, the Minder REST ingester is vulnerable to a denial of service attack via an attacker-controlled REST endpoint that can crash the Minder server. The REST ingester allows users to interact with REST endpoints to fetch data for rule evaluation. When fetching data with the REST ingester, Minder sends a request to an endpoint and will use the data from the body of the response as the data to evaluate against a certain rule. If the response is sufficiently large, it can drain memory on the machine and crash the Minder server. The attacker can control the remote REST endpoints that Minder sends requests to, and they can configure the remote REST endpoints to return responses with large bodies. They would then instruct Minder to send a request to their configured endpoint that would return the large response which would crash the Minder server. Version 0.0.49 fixes this issue.",
    "cve_publish_date": "2024-05-16T16:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Merge pull request from GHSA-fjw8-3gp8-4cvx\n\nThis ensures that a malicious (or faulty) REST server does not crash\nminder with too big requests. Minder will thus limit requests body reads\nto 1Mb.\n\nSigned-off-by: Juan Antonio Osorio <ozz@stacklok.com>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "rest.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "8",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 196: func (rdi *Ingestor) parseBody(body io.Reader) (any, error) {",
                "// Line 197:     var data any",
                "// Line 198:     var err error",
                "// Line 199: ",
                "// Line 200:     if body == nil {",
                "// Line 201:         return nil, nil",
                "// Line 202:     }",
                "// Line 203: ",
                "// Line 204:     if rdi.restCfg.Parse == \"json\" {",
                "// Line 205:         var jsonData any",
                "// vulnerable line: 206: dec := json.NewDecoder(body)",
                "// Line 207:         if err := dec.Decode(&jsonData); err != nil {",
                "// Line 208:             return nil, fmt.Errorf(\"cannot decode json: %w\", err)",
                "// Line 209:         }",
                "// Line 210: ",
                "// Line 211:         data = jsonData",
                "// Line 212:     } else {",
                "// vulnerable line: 213: data, err = io.ReadAll(body)",
                "// Line 214:         if err != nil {",
                "// Line 215:             return nil, fmt.Errorf(\"cannot read response body: %w\", err)",
                "// Line 216:         }",
                "// Line 217:     }",
                "// Line 218: ",
                "// Line 219:     return data, nil",
                "// Line 220: }"
            ]
        }
    ]
}