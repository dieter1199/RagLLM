{
    "cve_id": "CVE-2024-24753",
    "cve_description": "Bref enable serverless PHP on AWS Lambda. When Bref is used in combination with an API Gateway with the v2 format, it does not handle multiple values headers. If PHP generates a response with two headers having the same key but different values only the latest one is kept. If an application relies on multiple headers with the same key being set for security reasons, then Bref would lower the application security. For example, if an application sets multiple `Content-Security-Policy` headers, then Bref would just reflect the latest one. This vulnerability is patched in 2.1.13.",
    "cve_publish_date": "2024-02-01T16:17Z",
    "cwe_id": "CWE-436",
    "cwe_name": "Interpretation Conflict",
    "cwe_description": "Product A handles inputs or steps differently than Product B, which causes A to perform incorrect actions based on its perception of B's state.",
    "commit_message": "Add support for multi-value response headers with API Gateway v2",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "HttpResponse.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 27: ",
                "// Line 28:         $headers = [];",
                "// Line 29:         foreach ($this->headers as $name => $values) {",
                "// Line 30:             $name = $this->capitalizeHeaderName($name);",
                "// Line 31: ",
                "// Line 32:             if ($multiHeaders) {",
                "// Line 33:                 // Make sure the values are always arrays",
                "// Line 34:                 $headers[$name] = is_array($values) ? $values : [$values];",
                "// Line 35:             } else {",
                "// Line 36:                 // Make sure the values are never arrays",
                "// vulnerable line: 37: $headers[$name] = is_array($values) ? end($values) : $values;",
                "// Line 38:             }",
                "// Line 39:         }",
                "// Line 40: ",
                "// Line 41:         // The headers must be a JSON object. If the PHP array is empty it is",
                "// Line 42:         // serialized to `[]` (we want `{}`) so we force it to an empty object.",
                "// Line 43:         $headers = empty($headers) ? new \\stdClass : $headers;",
                "// Line 44: ",
                "// Line 45:         // Support for multi-value headers (only in version 1.0 of the http payload)",
                "// Line 46:         $headersKey = $multiHeaders ? 'multiValueHeaders' : 'headers';",
                "// Line 47: ",
                "// Line 65:         $headers = [];",
                "// Line 66:         $cookies = [];",
                "// Line 67:         foreach ($this->headers as $name => $values) {",
                "// Line 68:             $name = $this->capitalizeHeaderName($name);",
                "// Line 69: ",
                "// Line 70:             if ($name === 'Set-Cookie') {",
                "// Line 71:                 $cookies = is_array($values) ? $values : [$values];",
                "// Line 72:             } else {",
                "// Line 73:                 // Make sure the values are never arrays",
                "// Line 74:                 // because API Gateway v2 does not support multi-value headers",
                "// vulnerable line: 75: $headers[$name] = is_array($values) ? end($values) : $values;",
                "// Line 76:             }",
                "// Line 77:         }",
                "// Line 78: ",
                "// Line 79:         // The headers must be a JSON object. If the PHP array is empty it is",
                "// Line 80:         // serialized to `[]` (we want `{}`) so we force it to an empty object.",
                "// Line 81:         $headers = empty($headers) ? new \\stdClass : $headers;",
                "// Line 82: ",
                "// Line 83:         return [",
                "// Line 84:             'cookies' => $cookies,",
                "// Line 85:             'isBase64Encoded' => $base64Encoding,"
            ]
        },
        {
            "filename_of_changes": "HttpResponseTest.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "5",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 51: ",
                "// Line 52:         self::assertEquals([",
                "// Line 53:             'cookies' => [],",
                "// Line 54:             'isBase64Encoded' => false,",
                "// Line 55:             'statusCode' => 200,",
                "// Line 56:             'headers' => ['X-Foo-Bar' => 'baz'],",
                "// Line 57:             'body' => '',",
                "// Line 58:         ], $response->toApiGatewayFormatV2());",
                "// Line 59:     }",
                "// Line 60: ",
                "// vulnerable line: 61: public function test nested arrays in headers are flattened()",
                "// Line 62:     {",
                "// Line 63:         $response = new HttpResponse('', [",
                "// Line 64:             'foo' => ['bar', 'baz'],",
                "// Line 65:         ]);",
                "// Line 66: ",
                "// Line 67:         self::assertEquals([",
                "// Line 68:             'isBase64Encoded' => false,",
                "// Line 69:             'statusCode' => 200,",
                "// vulnerable line: 70: // The last value is kept (when multiheaders are not enabled)",
                "// vulnerable line: 71: 'headers' => ['Foo' => 'baz'],",
                "// Line 72:             'body' => '',",
                "// Line 73:         ], $response->toApiGatewayFormat());",
                "// Line 74: ",
                "// Line 75:         self::assertEquals([",
                "// Line 76:             'cookies' => [],",
                "// Line 77:             'isBase64Encoded' => false,",
                "// Line 78:             'statusCode' => 200,",
                "// vulnerable line: 79: // The last value is kept (when multiheaders are not enabled)",
                "// vulnerable line: 80: 'headers' => ['Foo' => 'baz'],",
                "// Line 81:             'body' => '',",
                "// Line 82:         ], $response->toApiGatewayFormatV2());",
                "// Line 83:     }",
                "// Line 84: ",
                "// Line 85:     public function test empty headers are considered objects()",
                "// Line 86:     {",
                "// Line 87:         $response = new HttpResponse('');",
                "// Line 88: ",
                "// Line 89:         // Make sure that the headers are `\"headers\":{}` (object) and not `\"headers\":[]` (array)",
                "// Line 90:         self::assertEquals('{\"isBase64Encoded\":false,\"statusCode\":200,\"headers\":{},\"body\":\"\"}', json_encode($response->toApiGatewayFormat()));"
            ]
        }
    ]
}