{
    "cve_id": "CVE-2024-29195",
    "cve_description": "The azure-c-shared-utility is a C library for AMQP/MQTT communication to Azure Cloud Services. This library may be used by the Azure IoT C SDK for communication between IoT Hub and IoT Hub devices. An attacker can cause an integer wraparound or under-allocation or heap buffer overflow due to vulnerabilities in parameter checking mechanism, by exploiting the buffer length parameter in Azure C SDK, which may lead to remote code execution. Requirements for RCE are 1. Compromised Azure account allowing malformed payloads to be sent to the device via IoT Hub service, 2. By passing IoT hub service max message payload limit of 128KB, and 3. Ability to overwrite code space with remote code. Fixed in commit https://github.com/Azure/azure-c-shared-utility/commit/1129147c38ac02ad974c4c701a1e01b2141b9fe2.",
    "cve_publish_date": "2024-03-26T03:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Add malloc size checks (#652)\n\n* Add malloc size checks\r\n\r\n* Update adapters/socketio_berkeley.c\r\n\r\nCo-authored-by: Valerie Avva Lim <54871851+vaavva@users.noreply.github.com>\r\n\r\n* Update adapters/string_utils.c\r\n\r\nCo-authored-by: Valerie Avva Lim <54871851+vaavva@users.noreply.github.com>\r\n\r\n* PR review\r\n\r\n---------\r\n\r\nCo-authored-by: Valerie Avva Lim <54871851+vaavva@users.noreply.github.com>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "buffer.c",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "14",
            "number_of_lines_deleted_vulnerable_to_cve": "8",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 221:             {",
                "// Line 222:                 /* Codes_SRS_BUFFER_07_031: [ ... and copy the contents of source to handle->buffer. ] */",
                "// Line 223:                 (void)memcpy(handle->buffer, source, size);",
                "// Line 224:                 /* Codes_SRS_BUFFER_07_034: [ On success BUFFER_append_build shall return 0 ] */",
                "// Line 225:                 result = 0;",
                "// Line 226:             }",
                "// Line 227:         }",
                "// Line 228:         else",
                "// Line 229:         {",
                "// Line 230:             /* Codes_SRS_BUFFER_07_032: [ if handle->buffer is not NULL BUFFER_append_build shall realloc the buffer to be the handle->size + size ] */",
                "// vulnerable line: 231: unsigned char* temp = (unsigned char*)realloc(handle->buffer, handle->size + size);",
                "// vulnerable line: 232: if (temp == NULL)",
                "// Line 233:             {",
                "// Line 234:                 /* Codes_SRS_BUFFER_07_035: [ If any error is encountered BUFFER_append_build shall return a non-null value. ] */",
                "// vulnerable line: 235: LogError(\"Failure reallocating temporary buffer\");",
                "// Line 236:                 result = MU_FAILURE;",
                "// Line 237:             }",
                "// Line 238:             else",
                "// Line 239:             {",
                "// Line 240:                 /* Codes_SRS_BUFFER_07_033: [ ... and copy the contents of source to the end of the buffer. ] */",
                "// Line 241:                 handle->buffer = temp;",
                "// Line 242:                 // Append the BUFFER",
                "// Line 243:                 (void)memcpy(&handle->buffer[handle->size], source, size);",
                "// Line 244:                 handle->size += size;",
                "// Line 245:                 /* Codes_SRS_BUFFER_07_034: [ On success BUFFER_append_build shall return 0 ] */",
                "// Line 351:     }",
                "// Line 352:     else if (enlargeSize == 0)",
                "// Line 353:     {",
                "// Line 354:         /* Codes_SRS_BUFFER_07_017: [BUFFER_enlarge shall return a nonzero result if any parameters are NULL or zero.] */",
                "// Line 355:         LogError(\"Failure: enlargeSize size is 0.\");",
                "// Line 356:         result = MU_FAILURE;",
                "// Line 357:     }",
                "// Line 358:     else",
                "// Line 359:     {",
                "// Line 360:         BUFFER* b = (BUFFER*)handle;",
                "// vulnerable line: 361: unsigned char* temp = (unsigned char*)realloc(b->buffer, b->size + enlargeSize);",
                "// vulnerable line: 362: if (temp == NULL)",
                "// Line 363:         {",
                "// Line 364:             /* Codes_SRS_BUFFER_07_018: [BUFFER_enlarge shall return a nonzero result if any error is encountered.] */",
                "// vulnerable line: 365: LogError(\"Failure: allocating temp buffer.\");",
                "// Line 366:             result = MU_FAILURE;",
                "// Line 367:         }",
                "// Line 368:         else",
                "// Line 369:         {",
                "// Line 370:             b->buffer = temp;",
                "// Line 371:             b->size += enlargeSize;",
                "// Line 372:             result = 0;",
                "// Line 373:         }",
                "// Line 374:     }",
                "// Line 375:     return result;",
                "// Line 407:             handle->buffer = NULL;",
                "// Line 408:             handle->size = 0;",
                "// Line 409:             result = 0;",
                "// Line 410:         }",
                "// Line 411:         else",
                "// Line 412:         {",
                "// Line 413:             unsigned char* tmp = malloc(alloc_size);",
                "// Line 414:             if (tmp == NULL)",
                "// Line 415:             {",
                "// Line 416:                 /* Codes_SRS_BUFFER_07_042: [ If a failure is encountered, BUFFER_shrink shall return a non-null value ] */",
                "// vulnerable line: 417: LogError(\"Failure: allocating temp buffer.\");",
                "// Line 418:                 result = MU_FAILURE;",
                "// Line 419:             }",
                "// Line 420:             else",
                "// Line 421:             {",
                "// Line 422:                 if (fromEnd)",
                "// Line 423:                 {",
                "// Line 424:                     /* Codes_SRS_BUFFER_07_040: [ if the fromEnd variable is true, BUFFER_shrink shall remove the end of the buffer of size decreaseSize. ] */",
                "// Line 425:                     memcpy(tmp, handle->buffer, alloc_size);",
                "// Line 426:                     free(handle->buffer);",
                "// Line 427:                     handle->buffer = tmp;",
                "// Line 487:         else",
                "// Line 488:         {",
                "// Line 489:             if (b2->size ==0)",
                "// Line 490:             {",
                "// Line 491:                 // b2->size = 0, whatever b1->size is, do nothing",
                "// Line 492:                 result = 0;",
                "// Line 493:             }",
                "// Line 494:             else",
                "// Line 495:             {",
                "// Line 496:                 // b2->size != 0, whatever b1->size is",
                "// vulnerable line: 497: unsigned char* temp = (unsigned char*)realloc(b1->buffer, b1->size + b2->size);",
                "// vulnerable line: 498: if (temp == NULL)",
                "// Line 499:                 {",
                "// Line 500:                     /* Codes_SRS_BUFFER_07_023: [BUFFER_append shall return a nonzero upon any error that is encountered.] */",
                "// vulnerable line: 501: LogError(\"Failure: allocating temp buffer.\");",
                "// Line 502:                     result = MU_FAILURE;",
                "// Line 503:                 }",
                "// Line 504:                 else",
                "// Line 505:                 {",
                "// Line 506:                     /* Codes_SRS_BUFFER_07_024: [BUFFER_append concatenates b2 onto b1 without modifying b2 and shall return zero on success.]*/",
                "// Line 507:                     b1->buffer = temp;",
                "// Line 508:                     // Append the BUFFER",
                "// Line 509:                     (void)memcpy(&b1->buffer[b1->size], b2->buffer, b2->size);",
                "// Line 510:                     b1->size += b2->size;",
                "// Line 511:                     result = 0;",
                "// Line 549:             }",
                "// Line 550:             else if (malloc_size == SIZE_MAX)",
                "// Line 551:             {",
                "// Line 552:                 LogError(\"Failure: size_t overflow.\");",
                "// Line 553:                 result = MU_FAILURE;",
                "// Line 554:             }",
                "// Line 555:             else",
                "// Line 556:             {",
                "// Line 557:                 // b2->size != 0",
                "// Line 558:                 unsigned char* temp = (unsigned char*)malloc(malloc_size);",
                "// vulnerable line: 559: if (temp == NULL)",
                "// Line 560:                 {",
                "// Line 561:                     /* Codes_SRS_BUFFER_01_005: [ BUFFER_prepend shall return a non-zero upon value any error that is encountered. ]*/",
                "// vulnerable line: 562: LogError(\"Failure: allocating temp buffer.\");",
                "// Line 563:                     result = MU_FAILURE;",
                "// Line 564:                 }",
                "// Line 565:                 else",
                "// Line 566:                 {",
                "// Line 567:                     /* Codes_SRS_BUFFER_01_004: [ BUFFER_prepend concatenates handle1 onto handle2 without modifying handle1 and shall return zero on success. ]*/",
                "// Line 568:                     // Append the BUFFER",
                "// Line 569: #ifdef _MSC_VER",
                "// Line 570: #pragma warning(disable:6386) // Buffer overrun while writing to 'temp'",
                "// Line 571: #endif",
                "// Line 572:                     (void)memcpy(temp, b2->buffer, b2->size);",
                "// Line 654:     }",
                "// Line 655:     else",
                "// Line 656:     {",
                "// Line 657:         BUFFER* suppliedBuff = (BUFFER*)handle;",
                "// Line 658:         BUFFER* b = (BUFFER*)calloc(1, sizeof(BUFFER));",
                "// Line 659:         if (b != NULL)",
                "// Line 660:         {",
                "// Line 661:             if (BUFFER_safemalloc(b, suppliedBuff->size) != 0)",
                "// Line 662:             {",
                "// Line 663:                 free(b);",
                "// vulnerable line: 664: LogError(\"Failure: allocating temp buffer.\");",
                "// Line 665:                 result = NULL;",
                "// Line 666:             }",
                "// Line 667:             else",
                "// Line 668:             {",
                "// Line 669:                 (void)memcpy(b->buffer, suppliedBuff->buffer, suppliedBuff->size);",
                "// Line 670:                 b->size = suppliedBuff->size;",
                "// Line 671:                 result = (BUFFER_HANDLE)b;",
                "// Line 672:             }",
                "// Line 673:         }",
                "// Line 674:         else"
            ]
        },
        {
            "filename_of_changes": "constbuffer.c",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "12",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 22:     CONSTBUFFER_CUSTOM_FREE_FUNC custom_free_func;",
                "// Line 23:     void* custom_free_func_context;",
                "// Line 24:     CONSTBUFFER_HANDLE originalHandle; /*where the CONSTBUFFER_TYPE_FROM_OFFSET_AND_SIZE was build from*/",
                "// Line 25: } CONSTBUFFER_HANDLE_DATA;",
                "// Line 26: ",
                "// Line 27: static CONSTBUFFER_HANDLE CONSTBUFFER_Create_Internal(const unsigned char* source, size_t size)",
                "// Line 28: {",
                "// Line 29:     CONSTBUFFER_HANDLE result;",
                "// Line 30:     /*Codes_SRS_CONSTBUFFER_02_005: [The non-NULL handle returned by CONSTBUFFER_Create shall have its ref count set to \"1\".]*/",
                "// Line 31:     /*Codes_SRS_CONSTBUFFER_02_010: [The non-NULL handle returned by CONSTBUFFER_CreateFromBuffer shall have its ref count set to \"1\".]*/",
                "// vulnerable line: 32: result = (CONSTBUFFER_HANDLE)calloc(1, (sizeof(CONSTBUFFER_HANDLE_DATA) + size));",
                "// Line 33:     if (result == NULL)",
                "// Line 34:     {",
                "// Line 35:         /*Codes_SRS_CONSTBUFFER_02_003: [If creating the copy fails then CONSTBUFFER_Create shall return NULL.]*/",
                "// Line 36:         /*Codes_SRS_CONSTBUFFER_02_008: [If copying the content fails, then CONSTBUFFER_CreateFromBuffer shall fail and return NULL.] */",
                "// Line 37:         LogError(\"unable to malloc\");",
                "// Line 38:         /*return as is*/",
                "// Line 39:     }",
                "// Line 40:     else",
                "// Line 41:     {",
                "// Line 42:         INIT_REF_VAR(result->count);"
            ]
        },
        {
            "filename_of_changes": "httpapi_tirtos.c",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "12",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 191:             LogError(\"HTTP read response header failed, ret=%d\", ret);",
                "// Line 192:             ret = HTTPAPI_RECEIVE_RESPONSE_FAILED;",
                "// Line 193:             goto headersDone;",
                "// Line 194:         }",
                "// Line 195:         else if (ret == 0) {",
                "// Line 196:             /* All headers read */",
                "// Line 197:             goto headersDone;",
                "// Line 198:         }",
                "// Line 199: ",
                "// Line 200:         if (cnt < offset + ret) {",
                "// vulnerable line: 201: hname = (char *)realloc(hname, offset + ret);",
                "// Line 202:             if (hname == NULL) {",
                "// Line 203:                 LogError(\"Failed reallocating memory\");",
                "// Line 204:                 ret = HTTPAPI_ALLOC_FAILED;",
                "// Line 205:                 goto headersDone;",
                "// Line 206:             }",
                "// Line 207:             cnt = offset + ret;",
                "// Line 208:         }",
                "// Line 209: ",
                "// Line 210:         memcpy(hname + offset, contentBuf, ret);",
                "// Line 211:         offset += ret;"
            ]
        },
        {
            "filename_of_changes": "socketio_win32.c",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "13",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 329:             if (result->pending_io_list == NULL)",
                "// Line 330:             {",
                "// Line 331:                 LogError(\"Failure: singlylinkedlist_create unable to create pending list.\");",
                "// Line 332:                 destroy_socket_io_instance(result);",
                "// Line 333:                 result = NULL;",
                "// Line 334:             }",
                "// Line 335:             else",
                "// Line 336:             {",
                "// Line 337:                 if (socket_io_config->hostname != NULL)",
                "// Line 338:                 {",
                "// vulnerable line: 339: result->hostname = (char*)malloc(strlen(socket_io_config->hostname) + 1);",
                "// vulnerable line: 340: if (result->hostname != NULL)",
                "// Line 341:                     {",
                "// vulnerable line: 342: (void)strcpy(result->hostname, socket_io_config->hostname);",
                "// Line 343:                     }",
                "// Line 344: ",
                "// Line 345:                     result->socket = INVALID_SOCKET;",
                "// Line 346:                 }",
                "// Line 347:                 else",
                "// Line 348:                 {",
                "// Line 349:                     result->hostname = NULL;",
                "// Line 350:                     result->socket = *((SOCKET*)socket_io_config->accepted_socket);",
                "// Line 351:                 }",
                "// Line 352: "
            ]
        },
        {
            "filename_of_changes": "tlsio_mbedtls.c",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "11",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 201:         }",
                "// Line 202:     }",
                "// Line 203: }",
                "// Line 204: ",
                "// Line 205: static void on_underlying_io_bytes_received(void *context, const unsigned char *buffer, size_t size)",
                "// Line 206: {",
                "// Line 207:     if (context != NULL)",
                "// Line 208:     {",
                "// Line 209:         TLS_IO_INSTANCE *tls_io_instance = (TLS_IO_INSTANCE *)context;",
                "// Line 210: ",
                "// vulnerable line: 211: unsigned char *new_socket_io_read_bytes = (unsigned char *)realloc(tls_io_instance->socket_io_read_bytes, tls_io_instance->socket_io_read_byte_count + size);",
                "// Line 212: ",
                "// vulnerable line: 213: if (new_socket_io_read_bytes == NULL)",
                "// Line 214:         {",
                "// Line 215:             tls_io_instance->tlsio_state = TLSIO_STATE_ERROR;",
                "// Line 216:             indicate_error(tls_io_instance);",
                "// Line 217:         }",
                "// Line 218:         else",
                "// Line 219:         {",
                "// Line 220:             tls_io_instance->socket_io_read_bytes = new_socket_io_read_bytes;",
                "// Line 221:             (void)memcpy(tls_io_instance->socket_io_read_bytes + tls_io_instance->socket_io_read_byte_count, buffer, size);",
                "// Line 222:             tls_io_instance->socket_io_read_byte_count += size;",
                "// Line 223:         }"
            ]
        },
        {
            "filename_of_changes": "tlsio_openssl.c",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "9",
            "number_of_lines_deleted_vulnerable_to_cve": "5",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 600: {",
                "// Line 601:     int result;",
                "// Line 602: ",
                "// Line 603:     if (openssl_locks != NULL)",
                "// Line 604:     {",
                "// Line 605:         LogInfo(\"Locks already initialized\");",
                "// Line 606:         result = MU_FAILURE;",
                "// Line 607:     }",
                "// Line 608:     else",
                "// Line 609:     {",
                "// vulnerable line: 610: openssl_locks = malloc(CRYPTO_num_locks() * sizeof(LOCK_HANDLE));",
                "// vulnerable line: 611: if (openssl_locks == NULL)",
                "// Line 612:         {",
                "// vulnerable line: 613: LogError(\"Failed to allocate locks\");",
                "// Line 614:             result = MU_FAILURE;",
                "// Line 615:         }",
                "// Line 616:         else",
                "// Line 617:         {",
                "// Line 618:             int i;",
                "// Line 619:             for (i = 0; i < CRYPTO_num_locks(); i++)",
                "// Line 620:             {",
                "// Line 621:                 openssl_locks[i] = Lock_Init();",
                "// Line 622:                 if (openssl_locks[i] == NULL)",
                "// Line 623:                 {",
                "// Line 1647: ",
                "// Line 1648:             if (tls_io_instance->certificate != NULL)",
                "// Line 1649:             {",
                "// Line 1650:                 // Free the memory if it has been previously allocated",
                "// Line 1651:                 free(tls_io_instance->certificate);",
                "// Line 1652:                 tls_io_instance->certificate = NULL;",
                "// Line 1653:             }",
                "// Line 1654: ",
                "// Line 1655:             // Store the certificate",
                "// Line 1656:             len = strlen(cert);",
                "// vulnerable line: 1657: tls_io_instance->certificate = malloc(len + 1);",
                "// vulnerable line: 1658: if (tls_io_instance->certificate == NULL)",
                "// Line 1659:             {",
                "// Line 1660:                 result = MU_FAILURE;",
                "// Line 1661:             }",
                "// Line 1662:             else",
                "// Line 1663:             {",
                "// Line 1664:                 strcpy(tls_io_instance->certificate, cert);",
                "// Line 1665:                 result = 0;",
                "// Line 1666:             }",
                "// Line 1667: ",
                "// Line 1668:             // If we're previously connected then add the cert to the context"
            ]
        },
        {
            "filename_of_changes": "tlsio_schannel.c",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "12",
            "number_of_lines_deleted_vulnerable_to_cve": "7",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 502:             SECURITY_STATUS status = QueryContextAttributes(&tls_io_instance->security_context, SECPKG_ATTR_STREAM_SIZES, &sizes);",
                "// Line 503:             if (status != SEC_E_OK)",
                "// Line 504:             {",
                "// Line 505:                 LogError(\"QueryContextAttributes failed: %x\", status);",
                "// Line 506:                 result = MU_FAILURE;",
                "// Line 507:             }",
                "// Line 508:             else",
                "// Line 509:             {",
                "// Line 510:                 SecBuffer security_buffers[4];",
                "// Line 511:                 SecBufferDesc security_buffers_desc;",
                "// vulnerable line: 512: size_t needed_buffer = sizes.cbHeader + size + sizes.cbTrailer;",
                "// vulnerable line: 513: unsigned char* out_buffer = (unsigned char*)malloc(needed_buffer);",
                "// vulnerable line: 514: if (out_buffer == NULL)",
                "// Line 515:                 {",
                "// vulnerable line: 516: LogError(\"malloc failed\");",
                "// Line 517:                     result = MU_FAILURE;",
                "// Line 518:                 }",
                "// Line 519:                 else",
                "// Line 520:                 {",
                "// Line 521:                     (void)memcpy(out_buffer + sizes.cbHeader, buffer, size);",
                "// Line 522: ",
                "// Line 523:                     security_buffers[0].BufferType = SECBUFFER_STREAM_HEADER;",
                "// Line 524:                     security_buffers[0].cbBuffer = sizes.cbHeader;",
                "// Line 525:                     security_buffers[0].pvBuffer = out_buffer;",
                "// Line 526:                     security_buffers[1].BufferType = SECBUFFER_DATA;",
                "// Line 1068:     if (tls_io_config == NULL)",
                "// Line 1069:     {",
                "// Line 1070:         LogError(\"invalid argument detected: void* io_create_parameters = %p\", tls_io_config);",
                "// Line 1071:         result = NULL;",
                "// Line 1072:     }",
                "// Line 1073:     else",
                "// Line 1074:     {",
                "// Line 1075:         result = (TLS_IO_INSTANCE*)malloc(sizeof(TLS_IO_INSTANCE));",
                "// Line 1076:         if (result == NULL)",
                "// Line 1077:         {",
                "// vulnerable line: 1078: LogError(\"malloc failed\");",
                "// Line 1079:         }",
                "// Line 1080:         else",
                "// Line 1081:         {",
                "// Line 1082:             (void)memset(result, 0, sizeof(TLS_IO_INSTANCE));",
                "// Line 1083: ",
                "// vulnerable line: 1084: result->host_name = (SEC_TCHAR*)malloc(sizeof(SEC_TCHAR) * (1 + strlen(tls_io_config->hostname)));",
                "// vulnerable line: 1085: if (result->host_name == NULL)",
                "// Line 1086:             {",
                "// vulnerable line: 1087: LogError(\"malloc failed\");",
                "// Line 1088:                 free(result);",
                "// Line 1089:                 result = NULL;",
                "// Line 1090:             }",
                "// Line 1091:             else",
                "// Line 1092:             {",
                "// Line 1093:                 SOCKETIO_CONFIG socketio_config;",
                "// Line 1094:                 const IO_INTERFACE_DESCRIPTION* underlying_io_interface;",
                "// Line 1095:                 void* io_interface_parameters;",
                "// Line 1096: ",
                "// Line 1097:                 (void)strcpy(result->host_name, tls_io_config->hostname);"
            ]
        },
        {
            "filename_of_changes": "tlsio_wolfssl.c",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "6",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 297:         }",
                "// Line 298:     }",
                "// Line 299: }",
                "// Line 300: ",
                "// Line 301: static void on_underlying_io_bytes_received(void* context, const unsigned char* buffer, size_t size)",
                "// Line 302: {",
                "// Line 303:     if (context != NULL)",
                "// Line 304:     {",
                "// Line 305:         TLS_IO_INSTANCE* tls_io_instance = (TLS_IO_INSTANCE*)context;",
                "// Line 306: ",
                "// vulnerable line: 307: unsigned char* new_socket_io_read_bytes = (unsigned char*)realloc(tls_io_instance->socket_io_read_bytes, tls_io_instance->socket_io_read_byte_count + size);",
                "// vulnerable line: 308: if (new_socket_io_read_bytes == NULL)",
                "// Line 309:         {",
                "// vulnerable line: 310: LogError(\"Failed allocating memory for received bytes\");",
                "// Line 311:             tls_io_instance->tlsio_state = TLSIO_STATE_ERROR;",
                "// Line 312:             indicate_error(tls_io_instance);",
                "// Line 313:         }",
                "// Line 314:         else",
                "// Line 315:         {",
                "// Line 316:             tls_io_instance->socket_io_read_bytes = new_socket_io_read_bytes;",
                "// Line 317:             (void)memcpy(tls_io_instance->socket_io_read_bytes + tls_io_instance->socket_io_read_byte_count, buffer, size);",
                "// Line 318:             tls_io_instance->socket_io_read_byte_count += size;",
                "// Line 319:         }",
                "// Line 320:     }"
            ]
        },
        {
            "filename_of_changes": "xlogging.h",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": []
        }
    ]
}