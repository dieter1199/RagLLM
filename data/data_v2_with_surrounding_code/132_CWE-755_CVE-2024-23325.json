{
    "cve_id": "CVE-2024-23325",
    "cve_description": "Envoy is a high-performance edge/middle/service proxy. Envoy crashes in Proxy protocol when using an address type that isnâ€™t supported by the OS. Envoy is susceptible to crashing on a host with IPv6 disabled and a listener config with proxy protocol enabled when it receives a request where the client presents its IPv6 address.  It is valid for a client to present its IPv6 address to a target server even though the whole chain is connected via IPv4. This issue has been addressed in released 1.29.1, 1.28.1, 1.27.3, and 1.26.7. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "cve_publish_date": "2024-02-09T23:15Z",
    "cwe_id": "CWE-755",
    "cwe_name": "Improper Handling of Exceptional Conditions",
    "cwe_description": "The product does not handle or incorrectly handles an exceptional condition.",
    "commit_message": "Fix crash when proxy protocol receives an address type that isn't\nsupported by the operating system\n\nFix [CVE-2024-23325](https://github.com/envoyproxy/envoy/security/advisories/GHSA-5m7c-mrwr-pm26)\n\nSigned-off-by: Greg Greenway <ggreenway@apple.com>\nSigned-off-by: Ryan Northey <ryan@synca.io>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "address_impl.cc",
            "code_language": "C++",
            "number_of_lines_added_for_mitigation": "22",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 207:       ASSERT(start > str);",
                "// Line 208:       *--start = '.';",
                "// Line 209:     }",
                "// Line 210:   }",
                "// Line 211:   const std::string::size_type end = str + BufferSize - start;",
                "// Line 212:   return {start, end};",
                "// Line 213: }",
                "// Line 214: ",
                "// Line 215: absl::Status Ipv4Instance::validateProtocolSupported() {",
                "// Line 216:   static const bool supported = SocketInterfaceSingleton::get().ipFamilySupported(AF_INET);",
                "// vulnerable line: 217: if (supported) {",
                "// Line 218:     return absl::OkStatus();",
                "// Line 219:   }",
                "// Line 220:   return absl::FailedPreconditionError(\"IPv4 addresses are not supported on this machine\");",
                "// Line 221: }",
                "// Line 222: ",
                "// Line 223: void Ipv4Instance::initHelper(const sockaddr_in* address) {",
                "// Line 224:   memset(&ip_.ipv4_.address_, 0, sizeof(ip_.ipv4_.address_));",
                "// Line 225:   ip_.ipv4_.address_ = *address;",
                "// Line 226:   ip_.friendly_address_ = sockaddrToString(*address);",
                "// Line 227: ",
                "// Line 319:     : InstanceBase(Type::Ip, sockInterfaceOrDefault(sock_interface)) {",
                "// Line 320:   status = validateProtocolSupported();",
                "// Line 321:   if (!status.ok()) {",
                "// Line 322:     return;",
                "// Line 323:   }",
                "// Line 324:   initHelper(address, v6only);",
                "// Line 325: }",
                "// Line 326: ",
                "// Line 327: absl::Status Ipv6Instance::validateProtocolSupported() {",
                "// Line 328:   static const bool supported = SocketInterfaceSingleton::get().ipFamilySupported(AF_INET6);",
                "// vulnerable line: 329: if (supported) {",
                "// Line 330:     return absl::OkStatus();",
                "// Line 331:   }",
                "// Line 332:   return absl::FailedPreconditionError(\"IPv6 addresses are not supported on this machine\");",
                "// Line 333: }",
                "// Line 334: ",
                "// Line 335: void Ipv6Instance::initHelper(const sockaddr_in6& address, bool v6only) {",
                "// Line 336:   ip_.ipv6_.address_ = address;",
                "// Line 337:   ip_.friendly_address_ = ip_.ipv6_.makeFriendlyAddress();",
                "// Line 338:   ip_.ipv6_.v6only_ = v6only;",
                "// Line 339:   friendly_name_ = fmt::format(\"[{}]:{}\", ip_.friendly_address_, ip_.port());"
            ]
        },
        {
            "filename_of_changes": "address_impl.h",
            "code_language": "C++",
            "number_of_lines_added_for_mitigation": "16",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "connection_info_impl_base.cc",
            "code_language": "C++",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 180: absl::Span<const std::string> ConnectionInfoImplBase::ipSansPeerCertificate() const {",
                "// Line 181:   if (!cached_ip_san_peer_certificate_.empty()) {",
                "// Line 182:     return cached_ip_san_peer_certificate_;",
                "// Line 183:   }",
                "// Line 184: ",
                "// Line 185:   bssl::UniquePtr<X509> cert(SSL_get_peer_certificate(ssl()));",
                "// Line 186:   if (!cert) {",
                "// Line 187:     ASSERT(cached_ip_san_peer_certificate_.empty());",
                "// Line 188:     return cached_ip_san_peer_certificate_;",
                "// Line 189:   }",
                "// vulnerable line: 190: cached_ip_san_peer_certificate_ = Utility::getSubjectAltNames(*cert, GEN_IPADD);",
                "// Line 191:   return cached_ip_san_peer_certificate_;",
                "// Line 192: }",
                "// Line 193: ",
                "// Line 194: uint16_t ConnectionInfoImplBase::ciphersuiteId() const {",
                "// Line 195:   const SSL_CIPHER* cipher = SSL_get_current_cipher(ssl());",
                "// Line 196:   if (cipher == nullptr) {",
                "// Line 197:     return 0xffff;",
                "// Line 198:   }",
                "// Line 199: ",
                "// Line 200:   // From the OpenSSL docs:"
            ]
        },
        {
            "filename_of_changes": "proxy_protocol.cc",
            "code_language": "C++",
            "number_of_lines_added_for_mitigation": "28",
            "number_of_lines_deleted_vulnerable_to_cve": "10",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 269:         sockaddr_in ra4, la4;",
                "// Line 270:         memset(&ra4, 0, sizeof(ra4));",
                "// Line 271:         memset(&la4, 0, sizeof(la4));",
                "// Line 272:         ra4.sin_family = AF_INET;",
                "// Line 273:         ra4.sin_port = v4->src_port;",
                "// Line 274:         ra4.sin_addr.s_addr = v4->src_addr;",
                "// Line 275: ",
                "// Line 276:         la4.sin_family = AF_INET;",
                "// Line 277:         la4.sin_port = v4->dst_port;",
                "// Line 278:         la4.sin_addr.s_addr = v4->dst_addr;",
                "// vulnerable line: 279: proxy_protocol_header_.emplace(",
                "// vulnerable line: 280: WireHeader{PROXY_PROTO_V2_HEADER_LEN, hdr_addr_len, PROXY_PROTO_V2_ADDR_LEN_INET,",
                "// vulnerable line: 281: hdr_addr_len - PROXY_PROTO_V2_ADDR_LEN_INET, Network::Address::IpVersion::v4,",
                "// vulnerable line: 282: std::make_shared<Network::Address::Ipv4Instance>(&ra4),",
                "// vulnerable line: 283: std::make_shared<Network::Address::Ipv4Instance>(&la4)});",
                "// Line 284:         return true;",
                "// Line 285:       } else if (((proto_family & 0xf0) >> 4) == PROXY_PROTO_V2_AF_INET6) {",
                "// Line 286:         PACKED_STRUCT(struct pp_ipv6_addr {",
                "// Line 287:           uint8_t src_addr[16];",
                "// Line 288:           uint8_t dst_addr[16];",
                "// Line 289:           uint16_t src_port;",
                "// Line 290:           uint16_t dst_port;",
                "// Line 291:         });",
                "// Line 292:         const pp_ipv6_addr* v6;",
                "// Line 293:         v6 = reinterpret_cast<const pp_ipv6_addr*>(&buf[PROXY_PROTO_V2_HEADER_LEN]);",
                "// Line 295:         memset(&ra6, 0, sizeof(ra6));",
                "// Line 296:         memset(&la6, 0, sizeof(la6));",
                "// Line 297:         ra6.sin6_family = AF_INET6;",
                "// Line 298:         ra6.sin6_port = v6->src_port;",
                "// Line 299:         safeMemcpy(&(ra6.sin6_addr.s6_addr), &(v6->src_addr));",
                "// Line 300: ",
                "// Line 301:         la6.sin6_family = AF_INET6;",
                "// Line 302:         la6.sin6_port = v6->dst_port;",
                "// Line 303:         safeMemcpy(&(la6.sin6_addr.s6_addr), &(v6->dst_addr));",
                "// Line 304: ",
                "// vulnerable line: 305: proxy_protocol_header_.emplace(WireHeader{",
                "// vulnerable line: 306: PROXY_PROTO_V2_HEADER_LEN, hdr_addr_len, PROXY_PROTO_V2_ADDR_LEN_INET6,",
                "// vulnerable line: 307: hdr_addr_len - PROXY_PROTO_V2_ADDR_LEN_INET6, Network::Address::IpVersion::v6,",
                "// vulnerable line: 308: std::make_shared<Network::Address::Ipv6Instance>(ra6),",
                "// vulnerable line: 309: std::make_shared<Network::Address::Ipv6Instance>(la6)});",
                "// Line 310:         return true;",
                "// Line 311:       }",
                "// Line 312:     }",
                "// Line 313:   }",
                "// Line 314:   ENVOY_LOG(debug, \"Unsupported command or address family or transport\");",
                "// Line 315:   return false;",
                "// Line 316: }",
                "// Line 317: ",
                "// Line 318: bool Filter::parseV1Header(const char* buf, size_t len) {",
                "// Line 319:   std::string proxy_line;",
                "// Line 344:       const Network::Address::InstanceConstSharedPtr remote_address =",
                "// Line 345:           Network::Utility::parseInternetAddressAndPortNoThrow(std::string{line_parts[2]} + \":\" +",
                "// Line 346:                                                                std::string{line_parts[4]});",
                "// Line 347:       const Network::Address::InstanceConstSharedPtr local_address =",
                "// Line 348:           Network::Utility::parseInternetAddressAndPortNoThrow(std::string{line_parts[3]} + \":\" +",
                "// Line 349:                                                                std::string{line_parts[5]});",
                "// Line 350: ",
                "// Line 351:       if (remote_address == nullptr || local_address == nullptr) {",
                "// Line 352:         return false;",
                "// Line 353:       }",
                "// vulnerable line: 354: proxy_protocol_header_.emplace(",
                "// Line 355:           WireHeader{len, 0, 0, 0, Network::Address::IpVersion::v4, remote_address, local_address});",
                "// Line 356:       return true;",
                "// Line 357:     } else if (line_parts[1] == \"TCP6\") {",
                "// Line 358:       const Network::Address::InstanceConstSharedPtr remote_address =",
                "// Line 359:           Network::Utility::parseInternetAddressAndPortNoThrow(\"[\" + std::string{line_parts[2]} +",
                "// Line 360:                                                                \"]:\" + std::string{line_parts[4]});",
                "// Line 361:       const Network::Address::InstanceConstSharedPtr local_address =",
                "// Line 362:           Network::Utility::parseInternetAddressAndPortNoThrow(\"[\" + std::string{line_parts[3]} +",
                "// Line 363:                                                                \"]:\" + std::string{line_parts[5]});",
                "// Line 364: ",
                "// Line 365:       if (remote_address == nullptr || local_address == nullptr) {",
                "// Line 366:         return false;",
                "// Line 367:       }",
                "// vulnerable line: 368: proxy_protocol_header_.emplace(",
                "// Line 369:           WireHeader{len, 0, 0, 0, Network::Address::IpVersion::v6, remote_address, local_address});",
                "// Line 370:       return true;",
                "// Line 371:     } else {",
                "// Line 372:       ENVOY_LOG(debug, \"failed to read proxy protocol\");",
                "// Line 373:       return false;",
                "// Line 374:     }",
                "// Line 375:   }",
                "// Line 376:   proxy_protocol_header_.emplace(WireHeader{len, 0, 0, 0});",
                "// Line 377:   return true;",
                "// Line 378: }"
            ]
        },
        {
            "filename_of_changes": "utility.cc",
            "code_language": "C++",
            "number_of_lines_added_for_mitigation": "10",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 160:   char* char_serial_number = BN_bn2hex(&num_bn);",
                "// Line 161:   BN_free(&num_bn);",
                "// Line 162:   if (char_serial_number != nullptr) {",
                "// Line 163:     std::string serial_number(char_serial_number);",
                "// Line 164:     OPENSSL_free(char_serial_number);",
                "// Line 165:     return serial_number;",
                "// Line 166:   }",
                "// Line 167:   return \"\";",
                "// Line 168: }",
                "// Line 169: ",
                "// vulnerable line: 170: std::vector<std::string> Utility::getSubjectAltNames(X509& cert, int type) {",
                "// Line 171:   std::vector<std::string> subject_alt_names;",
                "// Line 172:   bssl::UniquePtr<GENERAL_NAMES> san_names(",
                "// Line 173:       static_cast<GENERAL_NAMES*>(X509_get_ext_d2i(&cert, NID_subject_alt_name, nullptr, nullptr)));",
                "// Line 174:   if (san_names == nullptr) {",
                "// Line 175:     return subject_alt_names;",
                "// Line 176:   }",
                "// Line 177:   for (const GENERAL_NAME* san : san_names.get()) {",
                "// Line 178:     if (san->type == type) {",
                "// vulnerable line: 179: subject_alt_names.push_back(generalNameAsString(san));",
                "// Line 180:     }",
                "// Line 181:   }",
                "// Line 182:   return subject_alt_names;",
                "// Line 183: }",
                "// Line 184: ",
                "// Line 185: std::string Utility::generalNameAsString(const GENERAL_NAME* general_name) {",
                "// Line 186:   std::string san;",
                "// Line 187:   switch (general_name->type) {",
                "// Line 188:   case GEN_DNS: {",
                "// Line 189:     ASN1_STRING* str = general_name->d.dNSName;"
            ]
        },
        {
            "filename_of_changes": "utility.h",
            "code_language": "C++",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 47:  *         there is no serial number.",
                "// Line 48:  */",
                "// Line 49: std::string getSerialNumberFromCertificate(X509& cert);",
                "// Line 50: ",
                "// Line 51: /**",
                "// Line 52:  * Retrieves the subject alternate names of a certificate.",
                "// Line 53:  * @param cert the certificate",
                "// Line 54:  * @param type type of subject alternate name",
                "// Line 55:  * @return std::vector returns the list of subject alternate names.",
                "// Line 56:  */",
                "// vulnerable line: 57: std::vector<std::string> getSubjectAltNames(X509& cert, int type);",
                "// Line 58: ",
                "// Line 59: /**",
                "// Line 60:  * Converts the Subject Alternate Name to string.",
                "// Line 61:  * @param general_name the subject alternate name",
                "// Line 62:  * @return std::string returns the string representation of subject alt names.",
                "// Line 63:  */",
                "// Line 64: std::string generalNameAsString(const GENERAL_NAME* general_name);",
                "// Line 65: ",
                "// Line 66: /**",
                "// Line 67:  * Retrieves the issuer from certificate."
            ]
        }
    ]
}