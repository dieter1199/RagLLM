{
    "cve_id": "CVE-2024-40631",
    "cve_description": "Plate media is an open source, rich-text editor for React. Editors that use `MediaEmbedElement` and pass custom `urlParsers` to the `useMediaState` hook may be vulnerable to XSS if a custom parser allows `javascript:`, `data:` or `vbscript:` URLs to be embedded. Editors that do not use `urlParsers` and consume the `url` property directly may also be vulnerable if the URL is not sanitised. The default parsers `parseTwitterUrl` and `parseVideoUrl` are not affected. `@udecode/plate-media` 36.0.10 resolves this issue by only allowing HTTP and HTTPS URLs during parsing. This affects only the `embed` property returned from `useMediaState`. In addition, the `url` property returned from `useMediaState` has been renamed to `unsafeUrl` to indicate that it has not been sanitised. The `url` property on `element` is also unsafe, but has not been renamed. If you're using either of these properties directly, you will still need to validate the URL yourself. Users are advised to upgrade. Users unable to upgrade should ensure that any custom `urlParsers` do not allow `javascript:`, `data:` or `vbscript:` URLs to be returned in the `url` property of their return values. If `url` is consumed directly, validate the URL protocol before passing it to the `iframe` element.\n\n",
    "cve_publish_date": "2024-07-15T19:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Harden media embed element against XSS",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "useMediaState.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "30",
            "number_of_lines_deleted_vulnerable_to_cve": "10",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: import React from 'react';",
                "// Line 2: ",
                "// Line 3: import { useElement } from '@udecode/plate-common';",
                "// Line 4: import { useFocused, useReadOnly, useSelected } from 'slate-react';",
                "// Line 5: ",
                "// Line 6: import type { TMediaElement } from './types';",
                "// Line 7: import { ELEMENT_VIDEO } from '../video';",
                "// vulnerable line: 8: import { VIDEO_PROVIDERS, ELEMENT_MEDIA_EMBED} from '../media-embed';",
                "// Line 9: ",
                "// Line 10: export type EmbedUrlData = {",
                "// Line 11:   id?: string;",
                "// Line 12:   provider?: string;",
                "// Line 13:   url?: string;",
                "// Line 14: };",
                "// Line 15: ",
                "// Line 16: export type EmbedUrlParser = (url: string) => EmbedUrlData | undefined;",
                "// Line 17: ",
                "// Line 18: export const useMediaState = ({",
                "// Line 21:   urlParsers?: EmbedUrlParser[];",
                "// Line 22: } = {}) => {",
                "// Line 23:   const element = useElement<TMediaElement>();",
                "// Line 24:   const focused = useFocused();",
                "// Line 25:   const selected = useSelected();",
                "// Line 26:   const readOnly = useReadOnly();",
                "// Line 27: ",
                "// Line 28:   const { align = 'left', id, isUpload, name, type, url } = element;",
                "// Line 29: ",
                "// Line 30:   const embed = React.useMemo(() => {",
                "// vulnerable line: 31: if (!urlParsers || (type !== ELEMENT_VIDEO && type !== ELEMENT_MEDIA_EMBED)) return;",
                "// Line 32: ",
                "// vulnerable line: 33: for (const parser of urlParsers) {",
                "// vulnerable line: 34: const data = parser(url);",
                "// Line 35: ",
                "// vulnerable line: 36: if (data) {",
                "// vulnerable line: 37: return data;",
                "// vulnerable line: 38: }",
                "// vulnerable line: 39: }",
                "// Line 40:     // eslint-disable-next-line react-hooks/exhaustive-deps",
                "// Line 41:   }, [urlParsers, url]);",
                "// Line 42: ",
                "// Line 43:   const isTweet = embed?.provider === 'twitter';",
                "// Line 44:   const isVideo = !!embed?.provider && VIDEO_PROVIDERS.includes(embed.provider);",
                "// Line 45:   const isYoutube = embed?.provider === 'youtube';",
                "// Line 46: ",
                "// Line 47:   return {",
                "// Line 48:     align,",
                "// Line 49:     embed,",
                "// Line 50:     focused,",
                "// Line 51:     id,",
                "// Line 52:     isTweet,",
                "// Line 53:     isUpload,",
                "// Line 54:     isVideo,",
                "// Line 55:     isYoutube,",
                "// Line 56:     name,",
                "// Line 57:     readOnly,",
                "// Line 58:     selected,",
                "// vulnerable line: 59: url,",
                "// Line 60:   };",
                "// Line 61: };"
            ]
        }
    ]
}