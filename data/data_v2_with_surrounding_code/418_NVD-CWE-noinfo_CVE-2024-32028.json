{
    "cve_id": "CVE-2024-32028",
    "cve_description": "OpenTelemetry dotnet is a dotnet telemetry framework. In affected versions of `OpenTelemetry.Instrumentation.Http` and `OpenTelemetry.Instrumentation.AspNetCore` the `url.full` writes attribute/tag on spans (`Activity`) when tracing is enabled for outgoing http requests and `OpenTelemetry.Instrumentation.AspNetCore` writes the `url.query` attribute/tag on spans (`Activity`) when tracing is enabled for incoming http requests. These attributes are defined by the Semantic Conventions for HTTP Spans. Up until version `1.8.1` the values written by `OpenTelemetry.Instrumentation.Http` & `OpenTelemetry.Instrumentation.AspNetCore` will pass-through the raw query string as was sent or received (respectively). This may lead to sensitive information (e.g. EUII - End User Identifiable Information, credentials, etc.) being leaked into telemetry backends (depending on the application(s) being instrumented) which could cause privacy and/or security incidents. Note: Older versions of `OpenTelemetry.Instrumentation.Http` & `OpenTelemetry.Instrumentation.AspNetCore` may use different tag names but have the same vulnerability. The `1.8.1` versions of `OpenTelemetry.Instrumentation.Http` & `OpenTelemetry.Instrumentation.AspNetCore` will now redact by default all values detected on transmitted or received query strings. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "cve_publish_date": "2024-04-12T23:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "[Instrumentation.Http][Instrumentation.AspNetCore] Fix `url.full` and `url.query` attribute values (#5532)",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "AspNetCoreTraceInstrumentationOptions.cs",
            "code_language": "C#",
            "number_of_lines_added_for_mitigation": "18",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "HttpClientInstrumentationTracerProviderBuilderExtensions.cs",
            "code_language": "C#",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "HttpHandlerDiagnosticListener.cs",
            "code_language": "C#",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 142:                 ActivityInstrumentationHelper.SetActivitySourceProperty(activity, ActivitySource);",
                "// Line 143:                 ActivityInstrumentationHelper.SetKindProperty(activity, ActivityKind.Client);",
                "// Line 144:             }",
                "// Line 145: ",
                "// Line 146:             // see the spec https://github.com/open-telemetry/semantic-conventions/blob/v1.23.0/docs/http/http-spans.md",
                "// Line 147:             RequestMethodHelper.SetHttpMethodTag(activity, request.Method.Method);",
                "// Line 148: ",
                "// Line 149:             activity.SetTag(SemanticConventions.AttributeServerAddress, request.RequestUri.Host);",
                "// Line 150:             activity.SetTag(SemanticConventions.AttributeServerPort, request.RequestUri.Port);",
                "// Line 151: ",
                "// vulnerable line: 152: activity.SetTag(SemanticConventions.AttributeUrlFull, HttpTagHelper.GetUriTagValueFromRequestUri(request.RequestUri));",
                "// Line 153: ",
                "// Line 154:             try",
                "// Line 155:             {",
                "// Line 156:                 this.options.EnrichWithHttpRequestMessage?.Invoke(activity, request);",
                "// Line 157:             }",
                "// Line 158:             catch (Exception ex)",
                "// Line 159:             {",
                "// Line 160:                 HttpInstrumentationEventSource.Log.EnrichmentException(ex);",
                "// Line 161:             }",
                "// Line 162:         }"
            ]
        },
        {
            "filename_of_changes": "HttpInListener.cs",
            "code_language": "C#",
            "number_of_lines_added_for_mitigation": "8",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 186:                 activity.SetTag(SemanticConventions.AttributeServerAddress, request.Host.Host);",
                "// Line 187: ",
                "// Line 188:                 if (request.Host.Port.HasValue)",
                "// Line 189:                 {",
                "// Line 190:                     activity.SetTag(SemanticConventions.AttributeServerPort, request.Host.Port.Value);",
                "// Line 191:                 }",
                "// Line 192:             }",
                "// Line 193: ",
                "// Line 194:             if (request.QueryString.HasValue)",
                "// Line 195:             {",
                "// vulnerable line: 196: // QueryString should be sanitized. see: https://github.com/open-telemetry/opentelemetry-dotnet/issues/4571",
                "// vulnerable line: 197: activity.SetTag(SemanticConventions.AttributeUrlQuery, request.QueryString.Value);",
                "// Line 198:             }",
                "// Line 199: ",
                "// Line 200:             RequestMethodHelper.SetHttpMethodTag(activity, request.Method);",
                "// Line 201: ",
                "// Line 202:             activity.SetTag(SemanticConventions.AttributeUrlScheme, request.Scheme);",
                "// Line 203:             activity.SetTag(SemanticConventions.AttributeUrlPath, path);",
                "// Line 204:             activity.SetTag(SemanticConventions.AttributeNetworkProtocolVersion, HttpTagHelper.GetFlavorTagValueFromProtocol(request.Protocol));",
                "// Line 205: ",
                "// Line 206:             if (request.Headers.TryGetValue(\"User-Agent\", out var values))",
                "// Line 207:             {"
            ]
        },
        {
            "filename_of_changes": "HttpInstrumentationEventSource.cs",
            "code_language": "C#",
            "number_of_lines_added_for_mitigation": "13",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 3: ",
                "// Line 4: using System.Diagnostics.Tracing;",
                "// Line 5: using OpenTelemetry.Internal;",
                "// Line 6: ",
                "// Line 7: namespace OpenTelemetry.Instrumentation.Http.Implementation;",
                "// Line 8: ",
                "// Line 9: /// <summary>",
                "// Line 10: /// EventSource events emitted from the project.",
                "// Line 11: /// </summary>",
                "// Line 12: [EventSource(Name = \"OpenTelemetry-Instrumentation-Http\")]",
                "// vulnerable line: 13: internal sealed class HttpInstrumentationEventSource : EventSource",
                "// Line 14: {",
                "// Line 15:     public static HttpInstrumentationEventSource Log = new();",
                "// Line 16: ",
                "// Line 17:     [NonEvent]",
                "// Line 18:     public void FailedProcessResult(Exception ex)",
                "// Line 19:     {",
                "// Line 20:         if (this.IsEnabled(EventLevel.Error, EventKeywords.All))",
                "// Line 21:         {",
                "// Line 22:             this.FailedProcessResult(ex.ToInvariantString());",
                "// Line 23:         }"
            ]
        },
        {
            "filename_of_changes": "HttpTagHelper.cs",
            "code_language": "C#",
            "number_of_lines_added_for_mitigation": "8",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 6: /// <summary>",
                "// Line 7: /// A collection of helper methods to be used when building Http activities.",
                "// Line 8: /// </summary>",
                "// Line 9: internal static class HttpTagHelper",
                "// Line 10: {",
                "// Line 11:     /// <summary>",
                "// Line 12:     /// Gets the OpenTelemetry standard uri tag value for a span based on its request <see cref=\"Uri\"/>.",
                "// Line 13:     /// </summary>",
                "// Line 14:     /// <param name=\"uri\"><see cref=\"Uri\"/>.</param>",
                "// Line 15:     /// <returns>Span uri value.</returns>",
                "// vulnerable line: 16: public static string GetUriTagValueFromRequestUri(Uri uri)",
                "// Line 17:     {",
                "// vulnerable line: 18: if (string.IsNullOrEmpty(uri.UserInfo))",
                "// Line 19:         {",
                "// Line 20:             return uri.OriginalString;",
                "// Line 21:         }",
                "// Line 22: ",
                "// vulnerable line: 23: return string.Concat(uri.Scheme, Uri.SchemeDelimiter, uri.Authority, uri.PathAndQuery, uri.Fragment);",
                "// Line 24:     }",
                "// Line 25: ",
                "// Line 26:     public static string GetProtocolVersionString(Version httpVersion) => (httpVersion.Major, httpVersion.Minor) switch",
                "// Line 27:     {",
                "// Line 28:         (1, 0) => \"1.0\",",
                "// Line 29:         (1, 1) => \"1.1\",",
                "// Line 30:         (2, 0) => \"2\",",
                "// Line 31:         (3, 0) => \"3\",",
                "// Line 32:         _ => httpVersion.ToString(),",
                "// Line 33:     };"
            ]
        },
        {
            "filename_of_changes": "HttpWebRequestActivitySource.netfx.cs",
            "code_language": "C#",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 98:         RequestMethodHelper.SetActivityDisplayName(activity, request.Method);",
                "// Line 99: ",
                "// Line 100:         if (activity.IsAllDataRequested)",
                "// Line 101:         {",
                "// Line 102:             // see the spec https://github.com/open-telemetry/semantic-conventions/blob/v1.23.0/docs/http/http-spans.md",
                "// Line 103:             RequestMethodHelper.SetHttpMethodTag(activity, request.Method);",
                "// Line 104: ",
                "// Line 105:             activity.SetTag(SemanticConventions.AttributeServerAddress, request.RequestUri.Host);",
                "// Line 106:             activity.SetTag(SemanticConventions.AttributeServerPort, request.RequestUri.Port);",
                "// Line 107: ",
                "// vulnerable line: 108: activity.SetTag(SemanticConventions.AttributeUrlFull, HttpTagHelper.GetUriTagValueFromRequestUri(request.RequestUri));",
                "// Line 109: ",
                "// Line 110:             try",
                "// Line 111:             {",
                "// Line 112:                 TracingOptions.EnrichWithHttpWebRequest?.Invoke(activity, request);",
                "// Line 113:             }",
                "// Line 114:             catch (Exception ex)",
                "// Line 115:             {",
                "// Line 116:                 HttpInstrumentationEventSource.Log.EnrichmentException(ex);",
                "// Line 117:             }",
                "// Line 118:         }"
            ]
        },
        {
            "filename_of_changes": "HttpWebRequestActivitySourceTests.netfx.cs",
            "code_language": "C#",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "IncomingRequestsCollectionsIsAccordingToTheSpecTests.cs",
            "code_language": "C#",
            "number_of_lines_added_for_mitigation": "5",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 20: {",
                "// Line 21:     private readonly WebApplicationFactory<Program> factory;",
                "// Line 22: ",
                "// Line 23:     public IncomingRequestsCollectionsIsAccordingToTheSpecTests(WebApplicationFactory<Program> factory)",
                "// Line 24:     {",
                "// Line 25:         this.factory = factory;",
                "// Line 26:     }",
                "// Line 27: ",
                "// Line 28:     [Theory]",
                "// Line 29:     [InlineData(\"/api/values\", null, \"user-agent\", 200, null)]",
                "// vulnerable line: 30: [InlineData(\"/api/values\", \"?query=1\", null, 200, null)]",
                "// Line 31:     [InlineData(\"/api/exception\", null, null, 503, null)]",
                "// Line 32:     [InlineData(\"/api/exception\", null, null, 503, null, true)]",
                "// Line 33:     public async Task SuccessfulTemplateControllerCallGeneratesASpan_New(",
                "// Line 34:         string urlPath,",
                "// Line 35:         string query,",
                "// Line 36:         string userAgent,",
                "// Line 37:         int statusCode,",
                "// Line 38:         string reasonPhrase,",
                "// Line 39:         bool recordException = false)",
                "// Line 40:     {",
                "// Line 42: ",
                "// Line 43:         // Arrange",
                "// Line 44:         using (var client = this.factory",
                "// Line 45:             .WithWebHostBuilder(builder =>",
                "// Line 46:             {",
                "// Line 47:                 builder.ConfigureTestServices((IServiceCollection services) =>",
                "// Line 48:                 {",
                "// Line 49:                     services.AddSingleton<CallbackMiddleware.CallbackMiddlewareImpl>(new TestCallbackMiddlewareImpl(statusCode, reasonPhrase));",
                "// Line 50:                     services.AddOpenTelemetry()",
                "// Line 51:                         .WithTracing(builder => builder",
                "// vulnerable line: 52: .AddAspNetCoreInstrumentation(options => options.RecordException = recordException)",
                "// Line 53:                             .AddInMemoryExporter(exportedItems));",
                "// Line 54:                 });",
                "// Line 55:                 builder.ConfigureLogging(loggingBuilder => loggingBuilder.ClearProviders());",
                "// Line 56:             })",
                "// Line 57:             .CreateClient())",
                "// Line 58:         {",
                "// Line 59:             try",
                "// Line 60:             {",
                "// Line 61:                 if (!string.IsNullOrEmpty(userAgent))",
                "// Line 62:                 {"
            ]
        }
    ]
}