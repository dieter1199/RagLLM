{
    "cve_id": "CVE-2024-26145",
    "cve_description": "Discourse Calendar adds the ability to create a dynamic calendar in the first post of a topic on Discourse. Uninvited users are able to gain access to private events by crafting a request to update their attendance. This problem is resolved in commit dfc4fa15f340189f177a1d1ab2cc94ffed3c1190. As a workaround, one may use post visibility to limit access.",
    "cve_publish_date": "2024-02-21T18:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "SECURITY: Disallow self invite to private events (#543)",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "invitees_controller.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "invitees_controller_spec.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "18",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 166:         end",
                "// Line 167:       end",
                "// Line 168: ",
                "// Line 169:       context \"when an invitee doesnâ€™t exist\" do",
                "// Line 170:         let(:post_event_2) { Fabricate(:event, post: post_1) }",
                "// Line 171: ",
                "// Line 172:         it \"creates an invitee\" do",
                "// Line 173:           post \"/discourse-post-event/events/#{post_event_2.id}/invitees.json\",",
                "// Line 174:                params: {",
                "// Line 175:                  invitee: {",
                "// vulnerable line: 176: user_id: user.id,",
                "// Line 177:                    status: \"not_going\",",
                "// Line 178:                  },",
                "// Line 179:                }",
                "// Line 180: ",
                "// Line 181:           expect(Invitee).to exist(user_id: user.id, status: 2)",
                "// Line 182:         end",
                "// Line 183: ",
                "// Line 184:         it \"sets tracking of the topic\" do",
                "// Line 185:           post \"/discourse-post-event/events/#{post_event_2.id}/invitees.json\",",
                "// Line 186:                params: {",
                "// Line 187:                  invitee: {",
                "// vulnerable line: 188: user_id: user.id,",
                "// Line 189:                    status: \"going\",",
                "// Line 190:                  },",
                "// Line 191:                }",
                "// Line 192: ",
                "// Line 193:           invitee = Invitee.find_by(user_id: user.id)",
                "// Line 194: ",
                "// Line 195:           tu = TopicUser.get(invitee.event.post.topic, user)",
                "// Line 196:           expect(tu.notification_level).to eq(TopicUser.notification_levels[:watching])",
                "// Line 197:         end",
                "// Line 198: "
            ]
        }
    ]
}