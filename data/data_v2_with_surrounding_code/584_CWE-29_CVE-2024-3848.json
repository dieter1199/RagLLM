{
    "cve_id": "CVE-2024-3848",
    "cve_description": "A path traversal vulnerability exists in mlflow/mlflow version 2.11.0, identified as a bypass for the previously addressed CVE-2023-6909. The vulnerability arises from the application's handling of artifact URLs, where a '#' character can be used to insert a path into the fragment, effectively skipping validation. This allows an attacker to construct a URL that, when processed, ignores the protocol scheme and uses the provided path for filesystem access. As a result, an attacker can read arbitrary files, including sensitive information such as SSH and cloud keys, by exploiting the way the application converts the URL into a filesystem path. The issue stems from insufficient validation of the fragment portion of the URL, leading to arbitrary file read through path traversal.",
    "cve_publish_date": "2024-05-16T09:15Z",
    "cwe_id": "CWE-29",
    "cwe_name": "Path Traversal: '\\..\\filename'",
    "cwe_description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '\\..\\filename' (leading backslash dot dot) sequences that can resolve to a location that is outside of that directory.",
    "commit_message": "Fix Local File Read/Path Traversal bypass (#11376)\n\nSigned-off-by: Weichen Xu <weichen.xu@databricks.com>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "handlers.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "11",
            "number_of_lines_deleted_vulnerable_to_cve": "4",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1721:     if resolved_path != source_path:",
                "// Line 1722:         raise MlflowException(invalid_source_error_message, INVALID_PARAMETER_VALUE)",
                "// Line 1723: ",
                "// Line 1724: ",
                "// Line 1725: def _validate_source(source: str, run_id: str) -> None:",
                "// Line 1726:     if is_local_uri(source):",
                "// Line 1727:         if run_id:",
                "// Line 1728:             store = _get_tracking_store()",
                "// Line 1729:             run = store.get_run(run_id)",
                "// Line 1730:             source = pathlib.Path(local_file_uri_to_path(source)).resolve()",
                "// vulnerable line: 1731: run_artifact_dir = pathlib.Path(local_file_uri_to_path(run.info.artifact_uri)).resolve()",
                "// vulnerable line: 1732: if run_artifact_dir in [source, *source.parents]:",
                "// vulnerable line: 1733: return",
                "// Line 1734: ",
                "// Line 1735:         raise MlflowException(",
                "// Line 1736:             f\"Invalid model version source: '{source}'. To use a local path as a model version \"",
                "// Line 1737:             \"source, the run_id request parameter has to be specified and the local path has to be \"",
                "// Line 1738:             \"contained within the artifact directory of the run specified by the run_id.\",",
                "// Line 1739:             INVALID_PARAMETER_VALUE,",
                "// Line 1740:         )",
                "// Line 1741: ",
                "// Line 1742:     # Checks if relative paths are present in the source (a security threat). If any are present,",
                "// Line 1743:     # raises an Exception."
            ]
        }
    ]
}