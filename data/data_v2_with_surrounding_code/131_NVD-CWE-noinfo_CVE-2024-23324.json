{
    "cve_id": "CVE-2024-23324",
    "cve_description": "Envoy is a high-performance edge/middle/service proxy. External authentication can be bypassed by downstream connections. Downstream clients can force invalid gRPC requests to be sent to ext_authz, circumventing ext_authz checks when failure_mode_allow is set to true. This issue has been addressed in released 1.29.1, 1.28.1, 1.27.3, and 1.26.7. Users are advised to upgrade. There are no known workarounds for this vulnerability.\n",
    "cve_publish_date": "2024-02-09T23:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Proxy protocol: sanitise non utf8 chars in TLVs\n\nFix [CVE-2024-23324](https://github.com/envoyproxy/envoy/security/advisories/GHSA-gq3v-vvhj-96j6)\n\nSigned-off-by: Kateryna Nezdolii <nezdolik@spotify.com>\nSigned-off-by: Ryan Northey <ryan@synca.io>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "proxy_protocol.cc",
            "code_language": "C++",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 433:                       \"value length is {}.\",",
                "// Line 434:                       len, idx, tlv_type, tlv_length_upper));",
                "// Line 435:       return false;",
                "// Line 436:     }",
                "// Line 437: ",
                "// Line 438:     // Only save to dynamic metadata if this type of TLV is needed.",
                "// Line 439:     absl::string_view tlv_value(reinterpret_cast<char const*>(buf + idx), tlv_value_length);",
                "// Line 440:     auto key_value_pair = config_->isTlvTypeNeeded(tlv_type);",
                "// Line 441:     if (nullptr != key_value_pair) {",
                "// Line 442:       ProtobufWkt::Value metadata_value;",
                "// vulnerable line: 443: metadata_value.set_string_value(tlv_value.data(), tlv_value.size());",
                "// Line 444: ",
                "// Line 445:       std::string metadata_key = key_value_pair->metadata_namespace().empty()",
                "// Line 446:                                      ? \"envoy.filters.listener.proxy_protocol\"",
                "// Line 447:                                      : key_value_pair->metadata_namespace();",
                "// Line 448: ",
                "// Line 449:       ProtobufWkt::Struct metadata(",
                "// Line 450:           (*cb_->dynamicMetadata().mutable_filter_metadata())[metadata_key]);",
                "// Line 451:       metadata.mutable_fields()->insert({key_value_pair->key(), metadata_value});",
                "// Line 452:       cb_->setDynamicMetadata(metadata_key, metadata);",
                "// Line 453:     } else {"
            ]
        }
    ]
}