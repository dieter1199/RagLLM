{
    "cve_id": "CVE-2024-31983",
    "cve_description": "XWiki Platform is a generic wiki platform. In multilingual wikis, translations can be edited by any user who has edit right, circumventing the rights that are normally required for authoring translations (script right for user-scope translations, wiki admin for translations on the wiki). Starting in version 4.3-milestone-2 and prior to versions 4.10.20, 15.5.4, and 15.10-rc-1, this can be exploited for remote code execution if the translation value is not properly escaped where it is used. This has been patched in XWiki 14.10.20, 15.5.4 and 15.10RC1. As a workaround, one may restrict edit rights on documents that contain translations.",
    "cve_publish_date": "2024-04-10T20:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "XWIKI-21411: Improve check of translation document author rights\n\n* Check both author and content author and improve JavaDoc",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "AbstractDocumentTranslationBundle.java",
            "code_language": "Java",
            "number_of_lines_added_for_mitigation": "26",
            "number_of_lines_deleted_vulnerable_to_cve": "8",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 112: ",
                "// Line 113:         this.translationMessageParser = translationMessageParser;",
                "// Line 114: ",
                "// Line 115:         this.logger = LoggerFactory.getLogger(getClass());",
                "// Line 116: ",
                "// Line 117:         setPriority(DEFAULTPRIORITY_WIKI);",
                "// Line 118: ",
                "// Line 119:         setReference(reference);",
                "// Line 120: ",
                "// Line 121:         initialize();",
                "// vulnerable line: 122: }",
                "// Line 123: ",
                "// Line 124:     private void initialize()",
                "// Line 125:     {",
                "// Line 126:         this.events =",
                "// Line 127:             Arrays.<Event>asList(new DocumentUpdatedEvent(this.documentReference), new DocumentCreatedEvent(",
                "// Line 128:                 this.documentReference), new DocumentDeletedEvent(this.documentReference), new WikiDeletedEvent(",
                "// Line 129:                 this.documentReference.getWikiReference().getName()));",
                "// Line 130: ",
                "// Line 131:         this.observation.addListener(this, EventListener.CACHE_INVALIDATION_DEFAULT_PRIORITY);",
                "// vulnerable line: 132: }",
                "// Line 133: ",
                "// Line 134:     protected void setReference(DocumentReference reference)",
                "// Line 135:     {",
                "// Line 136:         this.documentReference = reference;",
                "// Line 137: ",
                "// Line 138:         setId(this.idPrefix + this.serializer.serialize(reference));",
                "// vulnerable line: 139: }",
                "// Line 140: ",
                "// vulnerable line: 141: protected LocalizedTranslationBundle loadDocumentLocaleBundle(Locale locale) throws Exception",
                "// Line 142:     {",
                "// Line 143:         XWikiContext context = this.contextProvider.get();",
                "// Line 144: ",
                "// Line 145:         if (context == null) {",
                "// vulnerable line: 146: // No context for some reason, lets try later",
                "// Line 147:             return null;",
                "// vulnerable line: 148: }",
                "// Line 149: ",
                "// Line 150:         XWiki xwiki = context.getWiki();",
                "// Line 151: ",
                "// Line 152:         if (xwiki == null) {",
                "// vulnerable line: 153: // No XWiki instance ready, lets try later",
                "// Line 154:             return null;",
                "// vulnerable line: 155: }",
                "// Line 156: ",
                "// Line 157:         XWikiDocument document = xwiki.getDocument(this.documentReference, context);",
                "// Line 158: ",
                "// Line 159:         if (locale != null && !locale.equals(Locale.ROOT) && !locale.equals(document.getDefaultLocale())) {",
                "// Line 160:             document = xwiki.getDocument(new DocumentReference(document.getDocumentReference(), locale), context);",
                "// Line 161: ",
                "// vulnerable line: 162: if (document.isNew()) {",
                "// vulnerable line: 163: // No document found for this locale",
                "// vulnerable line: 164: return LocalizedTranslationBundle.EMPTY;",
                "// vulnerable line: 165: }",
                "// vulnerable line: 166: }",
                "// Line 167: ",
                "// Line 168:         String content = document.getContent();",
                "// Line 169: ",
                "// Line 170:         Properties properties = new Properties();",
                "// Line 171:         properties.load(new StringReader(content));",
                "// Line 172: ",
                "// vulnerable line: 173: // Convert to LocalBundle",
                "// Line 174:         DefaultLocalizedTranslationBundle localeBundle = new DefaultLocalizedTranslationBundle(this, locale);",
                "// Line 175: ",
                "// Line 176:         TranslationMessageParser parser = getTranslationMessageParser();",
                "// Line 177: ",
                "// Line 178:         for (Map.Entry<Object, Object> entry : properties.entrySet()) {",
                "// Line 179:             if (entry.getKey() instanceof String && entry.getValue() instanceof String) {",
                "// Line 180:                 String key = (String) entry.getKey();",
                "// Line 181:                 String message = (String) entry.getValue();",
                "// Line 182: ",
                "// Line 183:                 TranslationMessage translationMessage = parser.parse(message);",
                "// Line 184: ",
                "// Line 185:                 localeBundle.addTranslation(new DefaultTranslation(this.bundleContext, localeBundle, key,",
                "// Line 186:                     translationMessage));",
                "// vulnerable line: 187: }",
                "// vulnerable line: 188: }",
                "// Line 189: ",
                "// Line 190:         return localeBundle;",
                "// vulnerable line: 191: }",
                "// Line 192: ",
                "// Line 193:     protected TranslationMessageParser getTranslationMessageParser()",
                "// Line 194:     {",
                "// Line 195:         return this.translationMessageParser;",
                "// vulnerable line: 196: }",
                "// Line 197: ",
                "// Line 198:     @Override",
                "// Line 199:     protected LocalizedTranslationBundle createBundle(Locale locale) throws Exception",
                "// Line 200:     {",
                "// Line 201:         return loadDocumentLocaleBundle(locale);",
                "// vulnerable line: 202: }",
                "// Line 203: ",
                "// Line 204:     @Override",
                "// Line 205:     public Translation getTranslation(String key, Locale locale)",
                "// Line 206:     {",
                "// Line 207:         if (this.disposed) {",
                "// Line 208:             return null;",
                "// vulnerable line: 209: }",
                "// Line 210: ",
                "// Line 211:         return super.getTranslation(key, locale);",
                "// vulnerable line: 212: }",
                "// Line 213: ",
                "// Line 214:     // DisposableCacheValue Disposable",
                "// Line 215: ",
                "// Line 216:     @Override",
                "// Line 217:     public void dispose()",
                "// Line 218:     {",
                "// Line 219:         this.disposed = true;",
                "// Line 220:         this.bundleCache.clear();",
                "// Line 221:         this.observation.removeListener(getName());",
                "// vulnerable line: 222: }",
                "// Line 223: ",
                "// Line 224:     // EventListener",
                "// Line 225: ",
                "// Line 226:     @Override",
                "// Line 227:     public void onEvent(Event event, Object source, Object data)",
                "// Line 228:     {",
                "// Line 229:         if (event instanceof WikiDeletedEvent) {",
                "// Line 230:             this.bundleCache.clear();",
                "// Line 231: ",
                "// Line 232:             this.disposed = true;",
                "// Line 233:         } else {",
                "// Line 234:             XWikiDocument document = (XWikiDocument) source;",
                "// Line 235: ",
                "// Line 236:             this.bundleCache.remove(document.getLocale());",
                "// Line 237: ",
                "// Line 238:             if (document.getLocale().equals(Locale.ROOT)) {",
                "// Line 239:                 this.bundleCache.remove(document.getDefaultLocale());",
                "// vulnerable line: 240: }",
                "// vulnerable line: 241: }",
                "// vulnerable line: 242: }",
                "// Line 243: ",
                "// Line 244:     @Override",
                "// Line 245:     public String getName()",
                "// Line 246:     {",
                "// Line 247:         return \"localization.bundle.\" + getId();",
                "// vulnerable line: 248: }",
                "// Line 249: ",
                "// Line 250:     @Override",
                "// Line 251:     public List<Event> getEvents()",
                "// Line 252:     {",
                "// Line 253:         return events;",
                "// vulnerable line: 254: }",
                "// vulnerable line: 255: }"
            ]
        },
        {
            "filename_of_changes": "DocumentTranslationBundleFactory.java",
            "code_language": "Java",
            "number_of_lines_added_for_mitigation": "29",
            "number_of_lines_deleted_vulnerable_to_cve": "5",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 317:         return documentBundle;",
                "// Line 318:     }",
                "// Line 319: ",
                "// Line 320:     private ComponentDocumentTranslationBundle createComponentDocumentBundle(XWikiDocument document,",
                "// Line 321:         ComponentDescriptor<TranslationBundle> descriptor) throws TranslationBundleDoesNotExistsException",
                "// Line 322:     {",
                "// Line 323:         ComponentDocumentTranslationBundle documentBundle;",
                "// Line 324:         try {",
                "// Line 325:             documentBundle =",
                "// Line 326:                 new ComponentDocumentTranslationBundle(ID_PREFIX, document.getDocumentReference(),",
                "// vulnerable line: 327: this.componentManagerProvider.get(), this.translationParser, descriptor);",
                "// Line 328:         } catch (ComponentLookupException e) {",
                "// Line 329:             throw new TranslationBundleDoesNotExistsException(\"Failed to create document bundle\", e);",
                "// Line 330:         }",
                "// Line 331: ",
                "// Line 332:         return documentBundle;",
                "// Line 333:     }",
                "// Line 334: ",
                "// Line 335:     /**",
                "// Line 336:      * @param uid remove the bundle from the cache",
                "// Line 337:      */",
                "// Line 440:      * @throws AccessDeniedException thrown when the document author does not have enough right for the provided",
                "// Line 441:      *             {@link Scope}",
                "// Line 442:      */",
                "// Line 443:     private void checkRegistrationAuthorization(XWikiDocument document, Scope scope) throws AccessDeniedException",
                "// Line 444:     {",
                "// Line 445:         switch (scope) {",
                "// Line 446:             case GLOBAL:",
                "// Line 447:                 this.authorizationManager.checkAccess(Right.PROGRAM, document.getAuthorReference(), null);",
                "// Line 448:                 break;",
                "// Line 449:             case WIKI:",
                "// vulnerable line: 450: this.authorizationManager.checkAccess(Right.ADMIN, document.getAuthorReference(), document",
                "// vulnerable line: 451: .getDocumentReference().getWikiReference());",
                "// Line 452:                 break;",
                "// Line 453:             case USER:",
                "// Line 454:                 if (this.configuration.isRestrictUserTranslations()) {",
                "// vulnerable line: 455: this.authorizationManager.checkAccess(Right.SCRIPT, document.getAuthorReference(),",
                "// vulnerable line: 456: document.getDocumentReference());",
                "// Line 457:                 }",
                "// Line 458:                 break;",
                "// Line 459:             default:",
                "// Line 460:                 break;",
                "// Line 461:         }",
                "// Line 462:     }",
                "// Line 463: ",
                "// Line 464:     /**",
                "// Line 465:      * @param documentReference the translation document reference",
                "// Line 466:      * @return the component descriptor to use to register/unregister the translation bundle"
            ]
        }
    ]
}