{
    "cve_id": "CVE-2024-1741",
    "cve_description": "lunary-ai/lunary version 1.0.1 is vulnerable to improper authorization, allowing removed members to read, create, modify, and delete prompt templates using an old authorization token. Despite being removed from an organization, these members can still perform operations on prompt templates by sending HTTP requests with their previously captured authorization token. This issue exposes organizations to unauthorized access and manipulation of sensitive template data.",
    "cve_publish_date": "2024-04-10T17:15Z",
    "cwe_id": "CWE-285",
    "cwe_name": "Improper Authorization",
    "cwe_description": "The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.",
    "commit_message": "feat: jwt invalidation (#197)",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "utils.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "8",
            "number_of_lines_deleted_vulnerable_to_cve": "5",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 119:   const key = bearer || apiKey",
                "// Line 120: ",
                "// Line 121:   // For routes like signup, login, etc",
                "// Line 122:   if (isPublicRoute && !key) {",
                "// Line 123:     await next()",
                "// Line 124:     return",
                "// Line 125:   }",
                "// Line 126:   // Check if API key is valid",
                "// Line 127:   // Support passing as bearer because legacy SDKs did that",
                "// Line 128:   else if (validateUUID(key)) {",
                "// vulnerable line: 129: console.log(\"key\", key)",
                "// Line 130: ",
                "// Line 131:     const { type, projectId, orgId } = await checkApiKey(ctx, key as string)",
                "// vulnerable line: 132: console.log({ type, projectId, orgId })",
                "// Line 133: ",
                "// Line 134:     ctx.state.projectId = projectId",
                "// Line 135:     ctx.state.orgId = orgId",
                "// Line 136: ",
                "// Line 137:     if (type === \"public\" && !isPublicRoute) {",
                "// Line 138:       ctx.throw(401, \"This route requires a private API key\")",
                "// Line 139:     }",
                "// Line 140: ",
                "// Line 141:     if (type == \"private\") {",
                "// Line 142:       ctx.state.privateKey = true",
                "// Line 149:       }",
                "// Line 150:       const { payload } = await verifyJwt<SessionData>(key)",
                "// Line 151: ",
                "// Line 152:       ctx.state.userId = payload.userId",
                "// Line 153:       ctx.state.orgId = payload.orgId",
                "// Line 154: ",
                "// Line 155:       if (ctx.state.projectId) {",
                "// Line 156:         // Check if user has access to project",
                "// Line 157: ",
                "// Line 158:         const [project] = await sql`",
                "// vulnerable line: 159: select * from account_project where account_id = ${ctx.state.userId} and project_id = ${ctx.state.projectId}",
                "// vulnerable line: 160: `",
                "// Line 161: ",
                "// Line 162:         if (!project) {",
                "// Line 163:           throw new Error(\"Project not found\")",
                "// Line 164:         }",
                "// Line 165:       }",
                "// Line 166:     } catch (error) {",
                "// Line 167:       console.error(error)",
                "// Line 168:       ctx.throw(401, \"Invalid access token\")",
                "// Line 169:     }",
                "// Line 170:   }"
            ]
        }
    ]
}