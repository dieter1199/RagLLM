{
    "cve_id": "CVE-2024-30253",
    "cve_description": "@solana/web3.js is the Solana JavaScript SDK. Using particular inputs with `@solana/web3.js` will result in memory exhaustion (OOM). If you have a server, client, mobile, or desktop product that accepts untrusted input for use with `@solana/web3.js`, your application/service may crash, resulting in a loss of availability. This vulnerability is fixed in 1.0.1, 1.10.2, 1.11.1, 1.12.1, 1.1.2, 1.13.1, 1.14.1, 1.15.1, 1.16.2, 1.17.1, 1.18.1, 1.19.1, 1.20.3, 1.21.1, 1.22.1, 1.23.1, 1.24.3, 1.25.1, 1.26.1, 1.27.1, 1.28.1, 1.2.8, 1.29.4, 1.30.3, 1.31.1, 1.3.1, 1.32.3, 1.33.1, 1.34.1, 1.35.2, 1.36.1, 1.37.3, 1.38.1, 1.39.2, 1.40.2, 1.41.11, 1.4.1, 1.42.1, 1.43.7, 1.44.4, 1.45.1, 1.46.1, 1.47.5, 1.48.1, 1.49.1, 1.50.2, 1.51.1, 1.5.1, 1.52.1, 1.53.1, 1.54.2, 1.55.1, 1.56.3, 1.57.1, 1.58.1, 1.59.2, 1.60.1, 1.61.2, 1.6.1, 1.62.2, 1.63.2, 1.64.1, 1.65.1, 1.66.6, 1.67.3, 1.68.2, 1.69.1, 1.70.4, 1.71.1, 1.72.1, 1.7.2, 1.73.5, 1.74.1, 1.75.1, 1.76.1, 1.77.4, 1.78.8, 1.79.1, 1.80.1, 1.81.1, 1.8.1, 1.82.1, 1.83.1, 1.84.1, 1.85.1, 1.86.1, 1.87.7, 1.88.1, 1.89.2, 1.90.2, 1.9.2, and 1.91.3.",
    "cve_publish_date": "2024-04-17T15:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fix: bounds check",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "legacy.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "9",
            "number_of_lines_deleted_vulnerable_to_cve": "8",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 261:     return signData.slice(0, length + instructionBuffer.length);",
                "// Line 262:   }",
                "// Line 263: ",
                "// Line 264:   /**",
                "// Line 265:    * Decode a compiled message into a Message object.",
                "// Line 266:    */",
                "// Line 267:   static from(buffer: Buffer | Uint8Array | Array<number>): Message {",
                "// Line 268:     // Slice up wire data",
                "// Line 269:     let byteArray = [...buffer];",
                "// Line 270: ",
                "// vulnerable line: 271: const numRequiredSignatures = byteArray.shift()!;",
                "// Line 272:     if (",
                "// Line 273:       numRequiredSignatures !==",
                "// Line 274:       (numRequiredSignatures & VERSION_PREFIX_MASK)",
                "// Line 275:     ) {",
                "// Line 276:       throw new Error(",
                "// Line 277:         'Versioned messages must be deserialized with VersionedMessage.deserialize()',",
                "// Line 278:       );",
                "// Line 279:     }",
                "// Line 280: ",
                "// vulnerable line: 281: const numReadonlySignedAccounts = byteArray.shift()!;",
                "// vulnerable line: 282: const numReadonlyUnsignedAccounts = byteArray.shift()!;",
                "// Line 283: ",
                "// Line 284:     const accountCount = shortvec.decodeLength(byteArray);",
                "// Line 285:     let accountKeys = [];",
                "// Line 286:     for (let i = 0; i < accountCount; i++) {",
                "// vulnerable line: 287: const account = byteArray.splice(0, PUBLIC_KEY_LENGTH);",
                "// Line 288:       accountKeys.push(new PublicKey(Buffer.from(account)));",
                "// Line 289:     }",
                "// Line 290: ",
                "// vulnerable line: 291: const recentBlockhash = byteArray.splice(0, PUBLIC_KEY_LENGTH);",
                "// Line 292: ",
                "// Line 293:     const instructionCount = shortvec.decodeLength(byteArray);",
                "// Line 294:     let instructions: CompiledInstruction[] = [];",
                "// Line 295:     for (let i = 0; i < instructionCount; i++) {",
                "// vulnerable line: 296: const programIdIndex = byteArray.shift()!;",
                "// Line 297:       const accountCount = shortvec.decodeLength(byteArray);",
                "// vulnerable line: 298: const accounts = byteArray.splice(0, accountCount);",
                "// Line 299:       const dataLength = shortvec.decodeLength(byteArray);",
                "// vulnerable line: 300: const dataSlice = byteArray.splice(0, dataLength);",
                "// Line 301:       const data = bs58.encode(Buffer.from(dataSlice));",
                "// Line 302:       instructions.push({",
                "// Line 303:         programIdIndex,",
                "// Line 304:         accounts,",
                "// Line 305:         data,",
                "// Line 306:       });",
                "// Line 307:     }",
                "// Line 308: ",
                "// Line 309:     const messageArgs = {",
                "// Line 310:       header: {"
            ]
        },
        {
            "filename_of_changes": "legacy.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 899:    *",
                "// Line 900:    * @returns {Transaction} Transaction associated with the signature",
                "// Line 901:    */",
                "// Line 902:   static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {",
                "// Line 903:     // Slice up wire data",
                "// Line 904:     let byteArray = [...buffer];",
                "// Line 905: ",
                "// Line 906:     const signatureCount = shortvec.decodeLength(byteArray);",
                "// Line 907:     let signatures = [];",
                "// Line 908:     for (let i = 0; i < signatureCount; i++) {",
                "// vulnerable line: 909: const signature = byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES);",
                "// Line 910:       signatures.push(bs58.encode(Buffer.from(signature)));",
                "// Line 911:     }",
                "// Line 912: ",
                "// Line 913:     return Transaction.populate(Message.from(byteArray), signatures);",
                "// Line 914:   }",
                "// Line 915: ",
                "// Line 916:   /**",
                "// Line 917:    * Populate Transaction object from message and signatures",
                "// Line 918:    *",
                "// Line 919:    * @param {Message} message Message of transaction"
            ]
        },
        {
            "filename_of_changes": "v0.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "29",
            "number_of_lines_deleted_vulnerable_to_cve": "12",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 419:         serializedLength,",
                "// Line 420:       );",
                "// Line 421:     }",
                "// Line 422: ",
                "// Line 423:     return serializedAddressTableLookups.slice(0, serializedLength);",
                "// Line 424:   }",
                "// Line 425: ",
                "// Line 426:   static deserialize(serializedMessage: Uint8Array): MessageV0 {",
                "// Line 427:     let byteArray = [...serializedMessage];",
                "// Line 428: ",
                "// vulnerable line: 429: const prefix = byteArray.shift() as number;",
                "// Line 430:     const maskedPrefix = prefix & VERSION_PREFIX_MASK;",
                "// Line 431:     assert(",
                "// Line 432:       prefix !== maskedPrefix,",
                "// Line 433:       `Expected versioned message but received legacy message`,",
                "// Line 434:     );",
                "// Line 435: ",
                "// Line 436:     const version = maskedPrefix;",
                "// Line 437:     assert(",
                "// Line 438:       version === 0,",
                "// Line 439:       `Expected versioned message with version 0 but found version ${version}`,",
                "// Line 440:     );",
                "// Line 441: ",
                "// Line 442:     const header: MessageHeader = {",
                "// vulnerable line: 443: numRequiredSignatures: byteArray.shift() as number,",
                "// vulnerable line: 444: numReadonlySignedAccounts: byteArray.shift() as number,",
                "// vulnerable line: 445: numReadonlyUnsignedAccounts: byteArray.shift() as number,",
                "// Line 446:     };",
                "// Line 447: ",
                "// Line 448:     const staticAccountKeys = [];",
                "// Line 449:     const staticAccountKeysLength = shortvec.decodeLength(byteArray);",
                "// Line 450:     for (let i = 0; i < staticAccountKeysLength; i++) {",
                "// Line 451:       staticAccountKeys.push(",
                "// vulnerable line: 452: new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),",
                "// Line 453:       );",
                "// Line 454:     }",
                "// Line 455: ",
                "// vulnerable line: 456: const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));",
                "// Line 457: ",
                "// Line 458:     const instructionCount = shortvec.decodeLength(byteArray);",
                "// Line 459:     const compiledInstructions: MessageCompiledInstruction[] = [];",
                "// Line 460:     for (let i = 0; i < instructionCount; i++) {",
                "// vulnerable line: 461: const programIdIndex = byteArray.shift() as number;",
                "// Line 462:       const accountKeyIndexesLength = shortvec.decodeLength(byteArray);",
                "// vulnerable line: 463: const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);",
                "// Line 464:       const dataLength = shortvec.decodeLength(byteArray);",
                "// vulnerable line: 465: const data = new Uint8Array(byteArray.splice(0, dataLength));",
                "// Line 466:       compiledInstructions.push({",
                "// Line 467:         programIdIndex,",
                "// Line 468:         accountKeyIndexes,",
                "// Line 469:         data,",
                "// Line 470:       });",
                "// Line 471:     }",
                "// Line 472: ",
                "// Line 473:     const addressTableLookupsCount = shortvec.decodeLength(byteArray);",
                "// Line 474:     const addressTableLookups: MessageAddressTableLookup[] = [];",
                "// Line 475:     for (let i = 0; i < addressTableLookupsCount; i++) {",
                "// vulnerable line: 476: const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));",
                "// Line 477:       const writableIndexesLength = shortvec.decodeLength(byteArray);",
                "// vulnerable line: 478: const writableIndexes = byteArray.splice(0, writableIndexesLength);",
                "// Line 479:       const readonlyIndexesLength = shortvec.decodeLength(byteArray);",
                "// vulnerable line: 480: const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);",
                "// Line 481:       addressTableLookups.push({",
                "// Line 482:         accountKey,",
                "// Line 483:         writableIndexes,",
                "// Line 484:         readonlyIndexes,",
                "// Line 485:       });",
                "// Line 486:     }",
                "// Line 487: ",
                "// Line 488:     return new MessageV0({",
                "// Line 489:       header,",
                "// Line 490:       staticAccountKeys,"
            ]
        },
        {
            "filename_of_changes": "validator-info.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "5",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 76:    */",
                "// Line 77:   static fromConfigData(",
                "// Line 78:     buffer: Buffer | Uint8Array | Array<number>,",
                "// Line 79:   ): ValidatorInfo | null {",
                "// Line 80:     let byteArray = [...buffer];",
                "// Line 81:     const configKeyCount = shortvec.decodeLength(byteArray);",
                "// Line 82:     if (configKeyCount !== 2) return null;",
                "// Line 83: ",
                "// Line 84:     const configKeys: Array<ConfigKey> = [];",
                "// Line 85:     for (let i = 0; i < 2; i++) {",
                "// vulnerable line: 86: const publicKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));",
                "// vulnerable line: 87: const isSigner = byteArray.splice(0, 1)[0] === 1;",
                "// Line 88:       configKeys.push({publicKey, isSigner});",
                "// Line 89:     }",
                "// Line 90: ",
                "// Line 91:     if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {",
                "// Line 92:       if (configKeys[1].isSigner) {",
                "// Line 93:         const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));",
                "// Line 94:         const info = JSON.parse(rawInfo as string);",
                "// Line 95:         assertType(info, InfoString);",
                "// Line 96:         return new ValidatorInfo(configKeys[1].publicKey, info);",
                "// Line 97:       }"
            ]
        },
        {
            "filename_of_changes": "versioned.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 75:     return serializedTransaction.slice(0, serializedTransactionLength);",
                "// Line 76:   }",
                "// Line 77: ",
                "// Line 78:   static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {",
                "// Line 79:     let byteArray = [...serializedTransaction];",
                "// Line 80: ",
                "// Line 81:     const signatures = [];",
                "// Line 82:     const signaturesLength = shortvec.decodeLength(byteArray);",
                "// Line 83:     for (let i = 0; i < signaturesLength; i++) {",
                "// Line 84:       signatures.push(",
                "// vulnerable line: 85: new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)),",
                "// Line 86:       );",
                "// Line 87:     }",
                "// Line 88: ",
                "// Line 89:     const message = VersionedMessage.deserialize(new Uint8Array(byteArray));",
                "// Line 90:     return new VersionedTransaction(message, signatures);",
                "// Line 91:   }",
                "// Line 92: ",
                "// Line 93:   sign(signers: Array<Signer>) {",
                "// Line 94:     const messageData = this.message.serialize();",
                "// Line 95:     const signerPubkeys = this.message.staticAccountKeys.slice("
            ]
        }
    ]
}