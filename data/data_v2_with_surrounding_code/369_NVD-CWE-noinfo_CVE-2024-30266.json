{
    "cve_id": "CVE-2024-30266",
    "cve_description": "wasmtime is a runtime for WebAssembly. The 19.0.0 release of Wasmtime contains a regression introduced during its development which can lead to a guest WebAssembly module causing a panic in the host runtime. A valid WebAssembly module, when executed at runtime, may cause this panic. This vulnerability has been patched in version 19.0.1.",
    "cve_publish_date": "2024-04-04T16:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Fix a panic using tables with the wrong type (#8283)\n\nThis commit fixes an accidental issue introduced in #8018 where using an\nelement segment which had been dropped with an `externref` table would\ncause a panic. The panic happened due to an assertion that tables are\nbeing used with the right type of item and that was being mismatched.\nThe underlying issue was that dropped element segments are modeled as an\nempty element segment but the empty element segment was using the\n\"functions\" encoding as opposed to the \"expressions\" encoding. This\nmeant that code later assumed that due to the use of functions the table\nmust be a table-of-functions, but this was not correct for\nexternref-based tables.\n\nThe fix in this commit is to instead model the encoding as an\n\"expressions\" list which means that the table type is dispatched on to\ncall the appropriate initializer.\n\nThere is no memory safety issue with this mistake as the assertion was\nspecifically targetted at preventing memory safety. This does, however,\nenable any WebAssembly module to panic a host.\n\nCloses #8281",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "instance.rs",
            "code_language": "Rust",
            "number_of_lines_added_for_mitigation": "6",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 794:         elem_index: ElemIndex,",
                "// Line 795:         dst: u32,",
                "// Line 796:         src: u32,",
                "// Line 797:         len: u32,",
                "// Line 798:     ) -> Result<(), Trap> {",
                "// Line 799:         // TODO: this `clone()` shouldn't be necessary but is used for now to",
                "// Line 800:         // inform `rustc` that the lifetime of the elements here are",
                "// Line 801:         // disconnected from the lifetime of `self`.",
                "// Line 802:         let module = self.module().clone();",
                "// Line 803: ",
                "// vulnerable line: 804: let empty = TableSegmentElements::Functions(Box::new([]));",
                "// Line 805:         let elements = match module.passive_elements_map.get(&elem_index) {",
                "// Line 806:             Some(index) if !self.dropped_elements.contains(elem_index) => {",
                "// Line 807:                 &module.passive_elements[*index]",
                "// Line 808:             }",
                "// Line 809:             _ => &empty,",
                "// Line 810:         };",
                "// Line 811:         self.table_init_segment(table_index, elements, dst, src, len)",
                "// Line 812:     }",
                "// Line 813: ",
                "// Line 814:     pub(crate) fn table_init_segment("
            ]
        }
    ]
}