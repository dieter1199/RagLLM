{
    "cve_id": "CVE-2024-31205",
    "cve_description": "Saleor is an e-commerce platform. Starting in version 3.10.0 and prior to versions 3.14.64, 3.15.39, 3.16.39, 3.17.35, 3.18.31, and 3.19.19, an attacker may bypass cross-set request forgery (CSRF) validation when calling refresh token mutation with empty string. When a user provides an empty string in `refreshToken` mutation, while the token persists in `JWT_REFRESH_TOKEN_COOKIE_NAME` cookie, application omits validation against CSRF token and returns valid access token. Versions 3.14.64, 3.15.39, 3.16.39, 3.17.35, 3.18.31, and 3.19.19 contain a patch for the issue. As a workaround, one may replace `saleor.graphql.account.mutations.authentication.refresh_token.py.get_refresh_token`. This will fix the issue, but be aware, that it returns `JWT_MISSING_TOKEN` instead of `JWT_INVALID_TOKEN`.\n",
    "cve_publish_date": "2024-04-08T15:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Advisory fix merx-280.",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "refresh_token.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "4",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 2: ",
                "// Line 3: import graphene",
                "// Line 4: from django.core.exceptions import ValidationError",
                "// Line 5: from django.utils import timezone",
                "// Line 6: ",
                "// Line 7: from .....account.error_codes import AccountErrorCode",
                "// Line 8: from .....core.jwt import (",
                "// Line 9:     JWT_REFRESH_TOKEN_COOKIE_NAME,",
                "// Line 10:     JWT_REFRESH_TYPE,",
                "// Line 11:     create_access_token,",
                "// vulnerable line: 12: )",
                "// Line 13: from ....core import ResolveInfo",
                "// Line 14: from ....core.doc_category import DOC_CATEGORY_AUTH",
                "// Line 15: from ....core.mutations import BaseMutation",
                "// Line 16: from ....core.types import AccountError",
                "// Line 17: from ...types import User",
                "// Line 18: from .utils import _does_token_match, get_payload, get_user",
                "// Line 19: ",
                "// Line 20: ",
                "// Line 21: class RefreshToken(BaseMutation):",
                "// Line 22:     \"\"\"Mutation that refresh user token and returns token and user data.\"\"\"",
                "// Line 25:     user = graphene.Field(User, description=\"A user instance.\")",
                "// Line 26: ",
                "// Line 27:     class Arguments:",
                "// Line 28:         refresh_token = graphene.String(required=False, description=\"Refresh token.\")",
                "// Line 29:         csrf_token = graphene.String(",
                "// Line 30:             required=False,",
                "// Line 31:             description=(",
                "// Line 32:                 \"CSRF token required to refresh token. This argument is \"",
                "// Line 33:                 \"required when `refreshToken` is provided as a cookie.\"",
                "// Line 34:             ),",
                "// vulnerable line: 35: )",
                "// Line 36: ",
                "// Line 37:     class Meta:",
                "// Line 38:         description = (",
                "// Line 39:             \"Refresh JWT token. Mutation tries to take refreshToken from the input. \"",
                "// Line 40:             \"If it fails it will try to take `refreshToken` from the http-only cookie \"",
                "// Line 41:             f\"`{JWT_REFRESH_TOKEN_COOKIE_NAME}`. \"",
                "// Line 42:             \"`csrfToken` is required when `refreshToken` is provided as a cookie.\"",
                "// vulnerable line: 43: )",
                "// Line 44:         doc_category = DOC_CATEGORY_AUTH",
                "// Line 45:         error_type_class = AccountError",
                "// Line 46:         error_type_field = \"account_errors\"",
                "// Line 47: ",
                "// Line 48:     @classmethod",
                "// Line 49:     def get_refresh_token_payload(cls, refresh_token):",
                "// Line 50:         try:",
                "// Line 51:             payload = get_payload(refresh_token)",
                "// Line 52:         except ValidationError as e:",
                "// Line 53:             raise ValidationError({\"refreshToken\": e})",
                "// Line 54:         return payload",
                "// Line 55: ",
                "// Line 56:     @classmethod",
                "// Line 57:     def get_refresh_token(",
                "// Line 58:         cls, info: ResolveInfo, refresh_token: Optional[str] = None",
                "// Line 59:     ) -> Optional[str]:",
                "// Line 60:         request = info.context",
                "// vulnerable line: 61: refresh_token = refresh_token or request.COOKIES.get(",
                "// vulnerable line: 62: JWT_REFRESH_TOKEN_COOKIE_NAME, None",
                "// vulnerable line: 63: )",
                "// Line 64:         return refresh_token",
                "// Line 65: ",
                "// Line 66:     @classmethod",
                "// Line 67:     def clean_refresh_token(cls, refresh_token):",
                "// vulnerable line: 68: if not refresh_token:",
                "// Line 69:             raise ValidationError(",
                "// Line 70:                 {",
                "// Line 71:                     \"refresh_token\": ValidationError(",
                "// Line 72:                         \"Missing refreshToken\",",
                "// Line 73:                         code=AccountErrorCode.JWT_MISSING_TOKEN.value,",
                "// vulnerable line: 74: )",
                "// Line 75:                 }",
                "// vulnerable line: 76: )",
                "// Line 77:         payload = cls.get_refresh_token_payload(refresh_token)",
                "// Line 78:         if payload[\"type\"] != JWT_REFRESH_TYPE:",
                "// Line 79:             raise ValidationError(",
                "// Line 80:                 {",
                "// Line 81:                     \"refresh_token\": ValidationError(",
                "// Line 82:                         \"Incorrect refreshToken\",",
                "// Line 83:                         code=AccountErrorCode.JWT_INVALID_TOKEN.value,",
                "// vulnerable line: 84: )",
                "// Line 85:                 }",
                "// vulnerable line: 86: )",
                "// Line 87:         return payload",
                "// Line 88: ",
                "// Line 89:     @classmethod",
                "// Line 90:     def clean_csrf_token(cls, csrf_token, payload):",
                "// Line 91:         if not csrf_token:",
                "// Line 92:             msg = \"CSRF token is required when refreshToken is provided by the cookie\"",
                "// Line 93:             raise ValidationError(",
                "// Line 94:                 {",
                "// Line 95:                     \"csrf_token\": ValidationError(",
                "// Line 96:                         msg,",
                "// Line 97:                         code=AccountErrorCode.REQUIRED.value,",
                "// vulnerable line: 98: )",
                "// Line 99:                 }",
                "// vulnerable line: 100: )",
                "// Line 101:         is_valid = _does_token_match(csrf_token, payload[\"csrfToken\"])",
                "// Line 102:         if not is_valid:",
                "// Line 103:             raise ValidationError(",
                "// Line 104:                 {",
                "// Line 105:                     \"csrf_token\": ValidationError(",
                "// Line 106:                         \"Invalid csrf token\",",
                "// Line 107:                         code=AccountErrorCode.JWT_INVALID_CSRF_TOKEN.value,",
                "// vulnerable line: 108: )",
                "// Line 109:                 }",
                "// vulnerable line: 110: )",
                "// Line 111: ",
                "// Line 112:     @classmethod",
                "// Line 113:     def get_user(cls, payload):",
                "// Line 114:         try:",
                "// Line 115:             user = get_user(payload)",
                "// Line 116:         except ValidationError as e:",
                "// Line 117:             raise ValidationError({\"refresh_token\": e})",
                "// Line 118:         return user",
                "// Line 119: ",
                "// Line 120:     @classmethod"
            ]
        },
        {
            "filename_of_changes": "test_token_refresh.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "23",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        }
    ]
}