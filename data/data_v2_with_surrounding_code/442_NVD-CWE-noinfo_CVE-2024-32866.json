{
    "cve_id": "CVE-2024-32866",
    "cve_description": "Conform, a type-safe form validation library, allows the parsing of nested objects in the form of `object.property`. Due to an improper implementation of this feature in versions prior to 1.1.1, an attacker can exploit the feature to trigger prototype pollution by passing a crafted input to `parseWith...` functions. Applications that use conform for server-side validation of form data or URL parameters are affected by this vulnerability. Version 1.1.1 contains a patch for the issue.\n",
    "cve_publish_date": "2024-04-23T21:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Merge pull request from GHSA-624g-8qjg-8qxf",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "formdata.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "16",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 31:  * ```",
                "// Line 32:  */",
                "// Line 33: export function getPaths(name: string | undefined): Array<string | number> {",
                "// Line 34:     if (!name) {",
                "// Line 35:         return [];",
                "// Line 36:     }",
                "// Line 37: ",
                "// Line 38:     return name",
                "// Line 39:         .split(/\\.|(\\[\\d*\\])/)",
                "// Line 40:         .reduce<Array<string | number>>((result, segment) => {",
                "// vulnerable line: 41: if (typeof segment !== 'undefined' && segment !== '') {",
                "// Line 42:                 if (segment.startsWith('[') && segment.endsWith(']')) {",
                "// Line 43:                     const index = segment.slice(1, -1);",
                "// Line 44: ",
                "// Line 45:                     result.push(Number(index));",
                "// Line 46:                 } else {",
                "// Line 47:                     result.push(segment);",
                "// Line 48:                 }",
                "// Line 49:             }",
                "// Line 50:             return result;",
                "// Line 51:         }, []);",
                "// Line 107:     const lastIndex = length - 1;",
                "// Line 108: ",
                "// Line 109:     let index = -1;",
                "// Line 110:     let pointer = target;",
                "// Line 111: ",
                "// Line 112:     while (pointer != null && ++index < length) {",
                "// Line 113:         const key = paths[index] as string | number;",
                "// Line 114:         const nextKey = paths[index + 1];",
                "// Line 115:         const newValue =",
                "// Line 116:             index != lastIndex",
                "// vulnerable line: 117: ? pointer[key] ?? (typeof nextKey === 'number' ? [] : {})",
                "// Line 118:                 : valueFn(pointer[key]);",
                "// Line 119: ",
                "// Line 120:         pointer[key] = newValue;",
                "// Line 121:         pointer = pointer[key];",
                "// Line 122:     }",
                "// Line 123: }",
                "// Line 124: ",
                "// Line 125: /**",
                "// Line 126:  * Retrive the value from a target object by following the paths",
                "// Line 127:  */"
            ]
        }
    ]
}