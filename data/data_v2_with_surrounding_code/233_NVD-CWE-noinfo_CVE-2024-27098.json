{
    "cve_id": "CVE-2024-27098",
    "cve_description": "GLPI is a Free Asset and IT Management Software package, Data center management, ITIL Service Desk, licenses tracking and software auditing. An authenticated user can execute a SSRF based attack using Arbitrary Object Instantiation. This issue has been patched in version 10.0.13.",
    "cve_publish_date": "2024-03-18T17:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Merge pull request from GHSA-92x4-q9w5-837w\n\n* Check for valid itemtype before creating objects\n\n* Restrict HTTP methods allowed by Guzzle client\n\n---------\n\nCo-authored-by: CÃ©dric Anne <cedric.anne@gmail.com>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "APIRest.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "5",
            "number_of_lines_deleted_vulnerable_to_cve": "11",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 46: /* Test for inc/api/api.class.php */",
                "// Line 47: ",
                "// Line 48: /**",
                "// Line 49:  * @engine isolate",
                "// Line 50:  */",
                "// Line 51: class APIRest extends APIBaseClass",
                "// Line 52: {",
                "// Line 53:     protected function getLogFilePath(): string",
                "// Line 54:     {",
                "// Line 55:         return GLPI_LOG_DIR . \"/php-errors.log\";",
                "// vulnerable line: 56: }",
                "// Line 57: ",
                "// Line 58:     public function beforeTestMethod($method)",
                "// Line 59:     {",
                "// Line 60:         global $CFG_GLPI;",
                "// Line 61: ",
                "// Line 62:         // Empty log file",
                "// Line 63:         $file_updated = file_put_contents($this->getLogFilePath(), \"\");",
                "// Line 64:         $this->variable($file_updated)->isNotIdenticalTo(false);",
                "// Line 65: ",
                "// Line 66:         $this->http_client = new GuzzleHttp\\Client();",
                "// Line 67:         $this->base_uri    = trim($CFG_GLPI['url_base_api'], \"/\") . \"/\";",
                "// Line 68: ",
                "// Line 69:         parent::beforeTestMethod($method);",
                "// vulnerable line: 70: }",
                "// Line 71: ",
                "// Line 72:     public function afterTestMethod($method)",
                "// Line 73:     {",
                "// Line 74:         // Check that no errors occurred on the test server",
                "// Line 75:         $this->string(file_get_contents($this->getLogFilePath()))->isEmpty();",
                "// vulnerable line: 76: }",
                "// Line 77: ",
                "// Line 78:     /**",
                "// Line 79:      * Check errors that are expected to happen on the API server side and thus",
                "// Line 80:      * can't be caught directly from the unit tests",
                "// Line 81:      *",
                "// Line 82:      * @param array $expected_errors",
                "// Line 83:      *",
                "// Line 84:      * @return void",
                "// Line 85:      */",
                "// Line 86:     protected function checkServerSideError(array $expected_errors): void",
                "// Line 87:     {",
                "// Line 88:         $logfile = $this->getLogFilePath();",
                "// Line 89:         $errors = file_get_contents($logfile);",
                "// Line 90: ",
                "// Line 91:         foreach ($expected_errors as $error) {",
                "// Line 92:             $this->string($errors)->contains($error);",
                "// vulnerable line: 93: }",
                "// Line 94: ",
                "// Line 95:         // Clear error file",
                "// Line 96:         file_put_contents($logfile, \"\");",
                "// vulnerable line: 97: }",
                "// Line 98: ",
                "// Line 99:     protected function doHttpRequest($verb = \"get\", $relative_uri = \"\", $params = [])",
                "// Line 100:     {",
                "// Line 101:         if (!empty($relative_uri)) {",
                "// Line 102:             $params['headers']['Content-Type'] = \"application/json\";",
                "// vulnerable line: 103: }",
                "// Line 104:         if (isset($params['multipart'])) {",
                "// Line 105:            // Guzzle lib will automatically push the correct Content-type",
                "// Line 106:             unset($params['headers']['Content-Type']);",
                "// vulnerable line: 107: }",
                "// vulnerable line: 108: $verb = strtolower($verb);",
                "// vulnerable line: 109: if (in_array($verb, ['get', 'post', 'delete', 'put', 'options', 'patch'])) {",
                "// vulnerable line: 110: try {",
                "// vulnerable line: 111: return $this->http_client->{$verb}(",
                "// vulnerable line: 112: $this->base_uri . $relative_uri,",
                "// vulnerable line: 113: $params",
                "// vulnerable line: 114: );",
                "// vulnerable line: 115: } catch (\\Throwable $e) {",
                "// vulnerable line: 116: throw $e;",
                "// vulnerable line: 117: }",
                "// vulnerable line: 118: }",
                "// vulnerable line: 119: }",
                "// Line 120: ",
                "// Line 121:     protected function query(",
                "// Line 122:         $resource = \"\",",
                "// Line 123:         $params = [],",
                "// Line 124:         $expected_codes = [200],",
                "// Line 125:         $expected_symbol = '',",
                "// Line 126:         bool $no_decode = false",
                "// Line 127:     ) {",
                "// Line 128:         if (!is_array($expected_codes)) {",
                "// Line 129:             $expected_codes = [$expected_codes];",
                "// vulnerable line: 130: }",
                "// Line 131: ",
                "// Line 132:         $verb         = isset($params['verb'])",
                "// Line 133:                         ? $params['verb']",
                "// Line 134:                         : 'GET';",
                "// Line 135: ",
                "// Line 136:         $resource_path  = parse_url($resource, PHP_URL_PATH);",
                "// Line 137:         $resource_query = parse_url($resource, PHP_URL_QUERY);",
                "// Line 138: ",
                "// Line 139:         $relative_uri = (!in_array($resource_path, ['getItem', 'getItems', 'createItems',",
                "// Line 140:             'updateItems', 'deleteItems'",
                "// Line 159: ",
                "// Line 160:         $expected_errors = $params['server_errors'] ?? [];",
                "// Line 161: ",
                "// Line 162:         unset(",
                "// Line 163:             $params['itemtype'],",
                "// Line 164:             $params['id'],",
                "// Line 165:             $params['parent_itemtype'],",
                "// Line 166:             $params['parent_id'],",
                "// Line 167:             $params['verb'],",
                "// Line 168:             $params['server_errors']",
                "// vulnerable line: 169: );",
                "// Line 170:        // launch query",
                "// vulnerable line: 171: try {",
                "// Line 172:             $res = $this->doHttpRequest($verb, $relative_uri, $params);",
                "// Line 173:         } catch (\\GuzzleHttp\\Exception\\ClientException $e) {",
                "// Line 174:             $response = $e->getResponse();",
                "// Line 175:             if (!in_array($response->getStatusCode(), $expected_codes)) {",
                "// Line 176:                //throw exceptions not expected",
                "// vulnerable line: 177: throw $e;",
                "// vulnerable line: 178: }",
                "// Line 179:             $this->array($expected_codes)->contains($response->getStatusCode());",
                "// Line 180:             $body = json_decode($e->getResponse()->getBody());",
                "// Line 181:             $this->array($body)",
                "// Line 182:             ->hasKey('0')",
                "// Line 183:             ->string[0]->isIdenticalTo($expected_symbol);",
                "// Line 184:             return $body;",
                "// vulnerable line: 185: }",
                "// Line 186: ",
                "// Line 187:        // retrieve data",
                "// Line 188:         $body = $res->getBody();",
                "// Line 189: ",
                "// Line 190:         if ($no_decode) {",
                "// Line 191:             $data = $body;",
                "// Line 192:         } else {",
                "// Line 193:             $data = json_decode($body, true);",
                "// Line 194:             if (is_array($data)) {",
                "// Line 195:                 $data['headers'] = $res->getHeaders();",
                "// vulnerable line: 196: }",
                "// vulnerable line: 197: }",
                "// Line 198: ",
                "// Line 199:        // common tests",
                "// Line 200:         $this->variable($res)->isNotNull();",
                "// Line 201:         $this->array($expected_codes)->contains($res->getStatusCode());",
                "// Line 202:         $this->checkServerSideError($expected_errors);",
                "// Line 203:         return $data;",
                "// vulnerable line: 204: }",
                "// Line 205: ",
                "// Line 206:     /**",
                "// Line 207:      * @tags   api",
                "// Line 208:      * @covers API::cors",
                "// Line 209:      **/",
                "// Line 210:     public function testCORS()",
                "// Line 211:     {",
                "// Line 212:         $res = $this->doHttpRequest(",
                "// Line 213:             'OPTIONS',",
                "// Line 214:             '',",
                "// Line 215:             ['headers' => [",
                "// Line 216:                 'Origin' => \"http://localhost\",",
                "// Line 217:                 'Access-Control-Request-Method'  => 'GET',",
                "// Line 218:                 'Access-Control-Request-Headers' => 'X-Requested-With'",
                "// Line 219:             ]",
                "// Line 220:             ]",
                "// vulnerable line: 221: );",
                "// Line 222: ",
                "// Line 223:         $this->variable($res)->isNotNull();",
                "// Line 224:         $this->variable($res->getStatusCode())->isEqualTo(200);",
                "// Line 225:         $headers = $res->getHeaders();",
                "// Line 226:         $this->array($headers)",
                "// Line 227:          ->hasKey('Access-Control-Allow-Methods')",
                "// Line 228:          ->hasKey('Access-Control-Allow-Headers');",
                "// Line 229: ",
                "// Line 230:         $this->string($headers['Access-Control-Allow-Methods'][0])",
                "// Line 231:          ->contains('GET')",
                "// Line 234:          ->contains('DELETE')",
                "// Line 235:          ->contains('OPTIONS');",
                "// Line 236: ",
                "// Line 237:         $this->string($headers['Access-Control-Allow-Headers'][0])",
                "// Line 238:          ->contains('origin')",
                "// Line 239:          ->contains('content-type')",
                "// Line 240:          ->contains('accept')",
                "// Line 241:          ->contains('session-token')",
                "// Line 242:          ->contains('authorization')",
                "// Line 243:          ->contains('app-token');",
                "// vulnerable line: 244: }",
                "// Line 245: ",
                "// Line 246:     /**",
                "// Line 247:      * @tags   api",
                "// Line 248:      * @covers API::inlineDocumentation",
                "// Line 249:      **/",
                "// Line 250:     public function testInlineDocumentation()",
                "// Line 251:     {",
                "// Line 252:         $res = $this->doHttpRequest('GET');",
                "// Line 253:         $this->variable($res)->isNotNull();",
                "// Line 254:         $this->variable($res->getStatusCode())->isEqualTo(200);",
                "// Line 255:         $headers = $res->getHeaders();",
                "// Line 256:         $this->array($headers)->hasKey('Content-Type');",
                "// Line 257:         $this->string($headers['Content-Type'][0])->isIdenticalTo('text/html; charset=UTF-8');",
                "// Line 258: ",
                "// Line 259:         // FIXME Remove this when deprecation notices will be fixed on michelf/php-markdown side",
                "// Line 260:         $file_updated = file_put_contents($this->getLogFilePath(), \"\");",
                "// vulnerable line: 261: }",
                "// Line 262: ",
                "// Line 263:     /**",
                "// Line 264:      * @tags   api",
                "// Line 265:      * @covers API::initSession",
                "// Line 266:      **/",
                "// Line 267:     public function initSessionCredentials()",
                "// Line 268:     {",
                "// Line 269:         $res = $this->doHttpRequest('GET', 'initSession/', ['auth' => [TU_USER, TU_PASS]]);",
                "// Line 270: ",
                "// Line 271:         $this->variable($res)->isNotNull();",
                "// Line 272:         $this->variable($res->getStatusCode())->isEqualTo(200);",
                "// Line 273:         $this->array($res->getHeader('content-type'))->contains('application/json; charset=UTF-8');",
                "// Line 274: ",
                "// Line 275:         $body = $res->getBody();",
                "// Line 276:         $data = json_decode($body, true);",
                "// Line 277:         $this->variable($data)->isNotFalse();",
                "// Line 278:         $this->array($data)->hasKey('session_token');",
                "// Line 279:         $this->session_token = $data['session_token'];",
                "// vulnerable line: 280: }",
                "// Line 281: ",
                "// Line 282:     /**",
                "// Line 283:      * @tags   api",
                "// Line 284:      * @covers API::initSession",
                "// Line 285:      **/",
                "// Line 286:     public function testInitSessionUserToken()",
                "// Line 287:     {",
                "// Line 288:         $uid = getItemByTypeName('User', TU_USER, true);",
                "// Line 289: ",
                "// Line 290:         // generate a new api token TU_USER user",
                "// Line 291:         global $DB;",
                "// Line 292:         $token = ser::getUniqueToken('api_token');",
                "// Line 293:         $updated = $DB->update(",
                "// Line 294:             'glpi_users',",
                "// Line 295:             [",
                "// Line 296:                 'api_token' => $token,",
                "// Line 297:             ],",
                "// Line 298:             ['id' => $uid]",
                "// vulnerable line: 299: );",
                "// Line 300:         $this->boolean($updated)->isTrue();",
                "// Line 301: ",
                "// Line 302:         $res = $this->doHttpRequest(",
                "// Line 303:             'GET',",
                "// Line 304:             'initSession?get_full_session=true',",
                "// Line 305:             ['headers' => [",
                "// Line 306:                 'Authorization' => \"user_token $token\"",
                "// Line 307:             ]",
                "// Line 308:             ]",
                "// vulnerable line: 309: );",
                "// Line 310: ",
                "// Line 311:         $this->variable($res)->isNotNull();",
                "// Line 312:         $this->variable($res->getStatusCode())->isEqualTo(200);",
                "// Line 313: ",
                "// Line 314:         $body = $res->getBody();",
                "// Line 315:         $data = json_decode($body, true);",
                "// Line 316:         $this->variable($data)->isNotFalse();",
                "// Line 317:         $this->array($data)->hasKey('session_token');",
                "// Line 318:         $this->array($data)->hasKey('session');",
                "// Line 319:         $this->integer((int) $data['session']['glpiID'])->isEqualTo($uid);",
                "// vulnerable line: 320: }",
                "// Line 321: ",
                "// Line 322:     /**",
                "// Line 323:      * @tags    api",
                "// Line 324:      */",
                "// Line 325:     public function testBadEndpoint()",
                "// Line 326:     {",
                "// Line 327:         parent::badEndpoint(400, 'ERROR_RESOURCE_NOT_FOUND_NOR_COMMONDBTM');",
                "// Line 328: ",
                "// Line 329:         $data = $this->query(",
                "// Line 330:             'getItems',",
                "// Line 331:             ['itemtype'        => 'badEndpoint',",
                "// Line 332:                 'parent_id'       => 0,",
                "// Line 333:                 'parent_itemtype' => 'Entity',",
                "// Line 334:                 'headers'         => [",
                "// Line 335:                     'Session-Token' => $this->session_token",
                "// Line 336:                 ]",
                "// Line 337:             ],",
                "// Line 338:             400,",
                "// Line 339:             'ERROR_RESOURCE_NOT_FOUND_NOR_COMMONDBTM'",
                "// vulnerable line: 340: );",
                "// vulnerable line: 341: }",
                "// Line 342: ",
                "// Line 343:     /**",
                "// Line 344:      * @tags    api",
                "// Line 345:      */",
                "// Line 346:     public function testUpdateItemWithIdInQueryString()",
                "// Line 347:     {",
                "// Line 348:         $computer = $this->createComputer();",
                "// Line 349:         $computers_id = $computer->getID();",
                "// Line 350: ",
                "// Line 351:         $data = $this->query(",
                "// Line 355:                 'verb'     => 'PUT',",
                "// Line 356:                 'headers'  => [",
                "// Line 357:                     'Session-Token' => $this->session_token",
                "// Line 358:                 ],",
                "// Line 359:                 'json'     => [",
                "// Line 360:                     'input' => [",
                "// Line 361:                         'serial' => \"abcdefg\"",
                "// Line 362:                     ]",
                "// Line 363:                 ]",
                "// Line 364:             ]",
                "// vulnerable line: 365: );",
                "// Line 366: ",
                "// Line 367:         $this->variable($data)->isNotFalse();",
                "// Line 368: ",
                "// Line 369:         $this->array($data)->hasKey('headers');",
                "// Line 370:         unset($data['headers']);",
                "// Line 371: ",
                "// Line 372:         $computer = array_shift($data);",
                "// Line 373:         $this->array($computer)",
                "// Line 374:          ->hasKey($computers_id)",
                "// Line 375:          ->hasKey('message');",
                "// Line 376:         $this->boolean((bool)$computer[$computers_id])->isTrue();",
                "// Line 377: ",
                "// Line 378:         $computer = new \\Computer();",
                "// Line 379:         $this->boolean((bool)$computer->getFromDB($computers_id))->isTrue();",
                "// Line 380:         $this->string($computer->fields['serial'])->isIdenticalTo('abcdefg');",
                "// vulnerable line: 381: }",
                "// Line 382: ",
                "// Line 383: ",
                "// Line 384:     /**",
                "// Line 385:      * @tags    api",
                "// Line 386:      */",
                "// Line 387:     public function testUploadDocument()",
                "// Line 388:     {",
                "// Line 389:        // we will try to upload the README.md file",
                "// Line 390:         $document_name = \"My document uploaded by api\";",
                "// Line 391:         $filename      = \"README.md\";",
                "// Line 411:                     ],",
                "// Line 412:                               // the FILE part",
                "// Line 413:                     [",
                "// Line 414:                         'name'     => 'filename[]',",
                "// Line 415:                         'contents' => $filecontent,",
                "// Line 416:                         'filename' => $filename",
                "// Line 417:                     ]",
                "// Line 418:                 ]",
                "// Line 419:             ],",
                "// Line 420:             201",
                "// vulnerable line: 421: );",
                "// Line 422: ",
                "// Line 423:         $this->array($data)",
                "// Line 424:          ->hasKey('id')",
                "// Line 425:          ->hasKey('message');",
                "// Line 426:         $documents_id = $data['id'];",
                "// Line 427:         $this->boolean(is_numeric($documents_id))->isTrue();",
                "// Line 428:         $this->integer((int)$documents_id)->isGreaterThan(0);",
                "// Line 429: ",
                "// Line 430:         $document        = new \\Document();",
                "// Line 431:         $this->boolean((bool)$document->getFromDB($documents_id));",
                "// Line 432: ",
                "// Line 433:         $this->array($document->fields)",
                "// Line 434:          ->string['mime']->isIdenticalTo('text/plain')",
                "// Line 435:          ->string['name']->isIdenticalTo($document_name)",
                "// Line 436:          ->string['filename']->isIdenticalTo($filename);",
                "// Line 437: ",
                "// Line 438:         $this->string($document->fields['filepath'])->contains('MD/');",
                "// vulnerable line: 439: }",
                "// Line 440: ",
                "// Line 441:     /**",
                "// Line 442:      * @tags    api",
                "// Line 443:      * @covers  API::updateItems",
                "// Line 444:      */",
                "// Line 445:     public function testUpdateItem()",
                "// Line 446:     {",
                "// Line 447:        //parent::testUpdateItem($session_token, $computers_id);",
                "// Line 448: ",
                "// Line 449:        //try to update an item without input",
                "// Line 450:         $data = $this->query(",
                "// Line 451:             'updateItems',",
                "// Line 452:             ['itemtype' => 'Computer',",
                "// Line 453:                 'verb'     => 'PUT',",
                "// Line 454:                 'headers'  => ['Session-Token' => $this->session_token],",
                "// Line 455:                 'json'     => []",
                "// Line 456:             ],",
                "// Line 457:             400,",
                "// Line 458:             'ERROR_JSON_PAYLOAD_INVALID'",
                "// vulnerable line: 459: );",
                "// vulnerable line: 460: }",
                "// Line 461: ",
                "// Line 462:     /**",
                "// Line 463:      * @tags    api",
                "// Line 464:      * @covers  API::getItems",
                "// Line 465:      */",
                "// Line 466:     public function testGetItemsCommonDBChild()",
                "// Line 467:     {",
                "// Line 468:        // test the case have DBChild not have entities_id",
                "// Line 469:         $ticketTemplate = new \\TicketTemplate();",
                "// Line 470:         $ticketTMF = new \\TicketTemplateMandatoryField();",
                "// Line 483: ",
                "// Line 484:         $data = $this->query(",
                "// Line 485:             'getItems',",
                "// Line 486:             ['query'     => [",
                "// Line 487:                 'searchText' => ['tickettemplates_id' => \"^\" . $tt_id . \"$\"]",
                "// Line 488:             ],",
                "// Line 489:                 'itemtype'   => 'TicketTemplateMandatoryField',",
                "// Line 490:                 'headers'    => ['Session-Token' => $this->session_token]",
                "// Line 491:             ],",
                "// Line 492:             200",
                "// vulnerable line: 493: );",
                "// Line 494:         if (isset($data['headers'])) {",
                "// Line 495:             unset($data['headers']);",
                "// vulnerable line: 496: }",
                "// Line 497:         $this->integer(count($data))->isEqualTo(1);",
                "// vulnerable line: 498: }",
                "// Line 499: ",
                "// Line 500:     /**",
                "// Line 501:      * @tags   api",
                "// Line 502:      * @covers API::userPicture",
                "// Line 503:      */",
                "// Line 504:     public function testUserPicture()",
                "// Line 505:     {",
                "// Line 506:         $pic = \"test_picture.png\";",
                "// Line 507:         $params = ['headers' => ['Session-Token' => $this->session_token]];",
                "// Line 508:         $id = getItemByTypeName('User', 'glpi', true);",
                "// Line 554:        // Remove pic URL",
                "// Line 555:         $success = $user->update([",
                "// Line 556:             'id'             => $id,",
                "// Line 557:             '_blank_picture' => true,",
                "// Line 558:         ]);",
                "// Line 559:         $this->boolean($success)->isTrue();",
                "// Line 560: ",
                "// Line 561:        // Request",
                "// Line 562:         $response = $this->query(\"User/$id/Picture\", $params, 204);",
                "// Line 563:         $this->variable($response)->isNull();",
                "// vulnerable line: 564: }",
                "// Line 565: ",
                "// Line 566:     protected function deprecatedProvider()",
                "// Line 567:     {",
                "// Line 568:         return [",
                "// Line 569:             ['provider' => TicketFollowup::class],",
                "// Line 570:             ['provider' => Computer_SoftwareVersion::class],",
                "// Line 571:             ['provider' => Computer_SoftwareLicense::class],",
                "// Line 572:         ];",
                "// vulnerable line: 573: }",
                "// Line 574: ",
                "// Line 575:     /**",
                "// Line 576:      * @dataProvider deprecatedProvider",
                "// Line 577:      */",
                "// Line 578:     public function testDeprecatedGetItem(string $provider)",
                "// Line 579:     {",
                "// Line 580:        // Get params from provider",
                "// Line 581:         $deprecated_itemtype = $provider::getDeprecatedType();",
                "// Line 582:         $itemtype            = $provider::getCurrentType();",
                "// Line 583:         $deprecated_fields   = $provider::getDeprecatedFields();",
                "// Line 593:        // Call API",
                "// Line 594:         $data = $this->query(\"$deprecated_itemtype/$item_id\", [",
                "// Line 595:             'headers' => $headers,",
                "// Line 596:         ], 200);",
                "// Line 597:         $this->array($data)",
                "// Line 598:          ->hasSize(count($deprecated_fields) + 1) // + 1 for headers",
                "// Line 599:          ->hasKeys($deprecated_fields);",
                "// Line 600: ",
                "// Line 601:        // Clean db to prevent unicity failure on next run",
                "// Line 602:         $item->delete(['id' => $item_id], true);",
                "// vulnerable line: 603: }",
                "// Line 604: ",
                "// Line 605:     /**",
                "// Line 606:      * @dataProvider deprecatedProvider",
                "// Line 607:      */",
                "// Line 608:     public function testDeprecatedGetItems(string $provider)",
                "// Line 609:     {",
                "// Line 610:        // Get params from provider",
                "// Line 611:         $deprecated_itemtype = $provider::getDeprecatedType();",
                "// Line 612:         $itemtype            = $provider::getCurrentType();",
                "// Line 613:         $deprecated_fields   = $provider::getDeprecatedFields();",
                "// Line 624:         $data = $this->query(\"$deprecated_itemtype\", [",
                "// Line 625:             'headers' => $headers,",
                "// Line 626:         ], [200, 206]);",
                "// Line 627:         $this->array($data);",
                "// Line 628:         unset($data[\"headers\"]);",
                "// Line 629: ",
                "// Line 630:         foreach ($data as $row) {",
                "// Line 631:             $this->array($row)",
                "// Line 632:             ->hasSize(count($deprecated_fields))",
                "// Line 633:             ->hasKeys($deprecated_fields);",
                "// vulnerable line: 634: }",
                "// Line 635: ",
                "// Line 636:        // Clean db to prevent unicity failure on next run",
                "// Line 637:         $item->delete(['id' => $item_id], true);",
                "// vulnerable line: 638: }",
                "// Line 639: ",
                "// Line 640:     /**",
                "// Line 641:      * @dataProvider deprecatedProvider",
                "// Line 642:      */",
                "// Line 643:     public function testDeprecatedCreateItems(string $provider)",
                "// Line 644:     {",
                "// Line 645:        // Get params from provider",
                "// Line 646:         $deprecated_itemtype   = $provider::getDeprecatedType();",
                "// Line 647:         $itemtype              = $provider::getCurrentType();",
                "// Line 648:         $input                 = $provider::getDeprecatedAddInput();",
                "// Line 657:             'headers' => $headers,",
                "// Line 658:             'verb'    => \"POST\",",
                "// Line 659:             'json'    => ['input' => $input]",
                "// Line 660:         ], 201);",
                "// Line 661: ",
                "// Line 662:         $this->integer($data['id']);",
                "// Line 663:         $this->boolean($item->getFromDB($data['id']))->isTrue();",
                "// Line 664: ",
                "// Line 665:         foreach ($expected_after_insert as $field => $value) {",
                "// Line 666:             $this->variable($item->fields[$field])->isEqualTo($value);",
                "// vulnerable line: 667: }",
                "// Line 668: ",
                "// Line 669:        // Clean db to prevent unicity failure on next run",
                "// Line 670:         $item->delete(['id' => $data['id']], true);",
                "// vulnerable line: 671: }",
                "// Line 672: ",
                "// Line 673:     /**",
                "// Line 674:      * @dataProvider deprecatedProvider",
                "// Line 675:      */",
                "// Line 676:     public function testDeprecatedUpdateItems(string $provider)",
                "// Line 677:     {",
                "// Line 678:        // Get params from provider",
                "// Line 679:         $deprecated_itemtype   = $provider::getDeprecatedType();",
                "// Line 680:         $itemtype              = $provider::getCurrentType();",
                "// Line 681:         $add_input             = $provider::getCurrentAddInput();",
                "// Line 694:             'headers' => $headers,",
                "// Line 695:             'verb'    => \"PUT\",",
                "// Line 696:             'json'    => ['input' => $update_input]",
                "// Line 697:         ], 200);",
                "// Line 698: ",
                "// Line 699:        // Check expected values",
                "// Line 700:         $this->boolean($item->getFromDB($item_id))->isTrue();",
                "// Line 701: ",
                "// Line 702:         foreach ($expected_after_update as $field => $value) {",
                "// Line 703:             $this->variable($item->fields[$field])->isEqualTo($value);",
                "// vulnerable line: 704: }",
                "// Line 705: ",
                "// Line 706:        // Clean db to prevent unicity failure on next run",
                "// Line 707:         $item->delete(['id' => $item_id], true);",
                "// vulnerable line: 708: }",
                "// Line 709: ",
                "// Line 710:     /**",
                "// Line 711:      * @dataProvider deprecatedProvider",
                "// Line 712:      */",
                "// Line 713:     public function testDeprecatedDeleteItems(string $provider)",
                "// Line 714:     {",
                "// Line 715:        // Get params from provider",
                "// Line 716:         $deprecated_itemtype   = $provider::getDeprecatedType();",
                "// Line 717:         $itemtype              = $provider::getCurrentType();",
                "// Line 718:         $add_input             = $provider::getCurrentAddInput();",
                "// Line 724:         $item_id = $item->add($add_input);",
                "// Line 725:         $this->integer($item_id);",
                "// Line 726: ",
                "// Line 727:        // Call API",
                "// Line 728:         $this->query(\"$deprecated_itemtype/$item_id?force_purge=1\", [",
                "// Line 729:             'headers' => $headers,",
                "// Line 730:             'verb'    => \"DELETE\",",
                "// Line 731:         ], 200, \"\", true);",
                "// Line 732: ",
                "// Line 733:         $this->boolean($item->getFromDB($item_id))->isFalse();",
                "// vulnerable line: 734: }",
                "// Line 735: ",
                "// Line 736:     /**",
                "// Line 737:      * @dataProvider deprecatedProvider",
                "// Line 738:      */",
                "// Line 739:     public function testDeprecatedListSearchOptions(string $provider)",
                "// Line 740:     {",
                "// Line 741:        // Get params from provider",
                "// Line 742:         $deprecated_itemtype   = $provider::getDeprecatedType();",
                "// Line 743: ",
                "// Line 744:         $headers = ['Session-Token' => $this->session_token];",
                "// Line 745: ",
                "// Line 746:         $data = $this->query(\"listSearchOptions/$deprecated_itemtype/\", [",
                "// Line 747:             'headers' => $headers,",
                "// Line 748:         ]);",
                "// Line 749: ",
                "// Line 750:         $expected = file_get_contents(",
                "// Line 751:             __DIR__ . \"/../deprecated-searchoptions/$deprecated_itemtype.json\"",
                "// vulnerable line: 752: );",
                "// Line 753:         $this->string($expected)->isNotEmpty();",
                "// Line 754: ",
                "// Line 755:         unset($data['headers']);",
                "// Line 756:         $json_data = json_encode($data, JSON_PRETTY_PRINT);",
                "// Line 757:         $this->string($json_data)->isEqualTo($expected);",
                "// vulnerable line: 758: }",
                "// Line 759: ",
                "// Line 760:     /**",
                "// Line 761:      * @dataProvider deprecatedProvider",
                "// Line 762:      */",
                "// Line 763:     public function testDeprecatedSearch(string $provider)",
                "// Line 764:     {",
                "// Line 765:        // Get params from provider",
                "// Line 766:         $deprecated_itemtype       = $provider::getDeprecatedType();",
                "// Line 767:         $deprecated_itemtype_query = $provider::getDeprecatedSearchQuery();",
                "// Line 768:         $itemtype                  = $provider::getCurrentType();",
                "// Line 769:         $itemtype_query            = $provider::getCurrentSearchQuery();",
                "// Line 770: ",
                "// Line 771:         $headers = ['Session-Token' => $this->session_token];",
                "// Line 772: ",
                "// Line 773:         $deprecated_data = $this->query(",
                "// Line 774:             \"search/$deprecated_itemtype?$deprecated_itemtype_query\",",
                "// Line 775:             ['headers' => $headers],",
                "// Line 776:             [200, 206]",
                "// vulnerable line: 777: );",
                "// Line 778: ",
                "// Line 779:         $data = $this->query(",
                "// Line 780:             \"search/$itemtype?$itemtype_query\",",
                "// Line 781:             ['headers' => $headers],",
                "// Line 782:             [200, 206]",
                "// vulnerable line: 783: );",
                "// Line 784:         $this->string($deprecated_data['rawdata']['sql']['search'])",
                "// Line 785:          ->isEqualTo($data['rawdata']['sql']['search']);",
                "// vulnerable line: 786: }",
                "// Line 787: ",
                "// Line 788: ",
                "// Line 789:     protected function testGetMassiveActionsProvider(): array",
                "// Line 790:     {",
                "// Line 791:        // Create a computer with \"is_deleted = 1\" for our tests",
                "// Line 792:         $computer = new Computer();",
                "// Line 793:         $deleted_computers_id = $computer->add([",
                "// Line 794:             'name' => 'test deleted PC',",
                "// Line 795:             'entities_id' => getItemByTypeName(\"Entity\", '_test_root_entity', true)",
                "// Line 796:         ]);",
                "// Line 882:                 'status' => 200,",
                "// Line 883:                 'response' => [",
                "// Line 884:                     [\"key\" => \"MassiveAction:purge_item_but_devices\",  \"label\" => \"Delete permanently but keep devices\"],",
                "// Line 885:                     [\"key\" => \"MassiveAction:purge\",                   \"label\" => \"Delete permanently and remove devices\"],",
                "// Line 886:                     [\"key\" => \"MassiveAction:restore\",                 \"label\" => \"Restore\"],",
                "// Line 887:                     [\"key\" => \"Lock:unlock_component\",                 \"label\" => \"Unlock components\"],",
                "// Line 888:                     [\"key\" => \"Lock:unlock_fields\",                    \"label\" => \"Unlock fields\"],",
                "// Line 889:                 ],",
                "// Line 890:             ],",
                "// Line 891:         ];",
                "// vulnerable line: 892: }",
                "// Line 893: ",
                "// Line 894:     /**",
                "// Line 895:      * Tests for the \"getMassiveActions\" endpoint",
                "// Line 896:      *",
                "// Line 897:      * @dataProvider testGetMassiveActionsProvider",
                "// Line 898:      */",
                "// Line 899:     public function testGetMassiveActions(",
                "// Line 900:         string $url,",
                "// Line 901:         int $status,",
                "// Line 902:         ?array $response,",
                "// Line 904:     ): void {",
                "// Line 905:         $headers = ['Session-Token' => $this->session_token];",
                "// Line 906:         $data    = $this->query($url, [",
                "// Line 907:             'headers' => $headers,",
                "// Line 908:         ], $status, $error);",
                "// Line 909: ",
                "// Line 910:        // If no errors are expected, check results",
                "// Line 911:         if (empty($error)) {",
                "// Line 912:             unset($data['headers']);",
                "// Line 913:             $this->array($data)->isEqualTo($response);",
                "// vulnerable line: 914: }",
                "// vulnerable line: 915: }",
                "// Line 916: ",
                "// Line 917:     protected function testGetMassiveActionParametersProvider(): array",
                "// Line 918:     {",
                "// Line 919:         return [",
                "// Line 920:             [",
                "// Line 921:                 'url' => 'getMassiveActionParameters/Computer',",
                "// Line 922:                 'status' => 400,",
                "// Line 923:                 'response' => [],",
                "// Line 924:                 'error' => \"ERROR_MASSIVEACTION_KEY\"",
                "// Line 925:             ],",
                "// Line 1044:                 ],",
                "// Line 1045:             ],",
                "// Line 1046:             [",
                "// Line 1047:                 'url' => 'getMassiveActionParameters/Computer/Lock:unlock_fields',",
                "// Line 1048:                 'status' => 200,",
                "// Line 1049:                 'response' => [",
                "// Line 1050:                     [\"name\" => \"attached_fields[]\", \"type\" => \"dropdown\"],",
                "// Line 1051:                 ],",
                "// Line 1052:             ],",
                "// Line 1053:         ];",
                "// vulnerable line: 1054: }",
                "// Line 1055: ",
                "// Line 1056:     /**",
                "// Line 1057:      * Tests for the \"getMassiveActionParameters\" endpoint",
                "// Line 1058:      *",
                "// Line 1059:      * @dataProvider testGetMassiveActionParametersProvider",
                "// Line 1060:      */",
                "// Line 1061:     public function testGetMassiveActionParameters(",
                "// Line 1062:         string $url,",
                "// Line 1063:         int $status,",
                "// Line 1064:         ?array $response,",
                "// Line 1066:     ): void {",
                "// Line 1067:         $headers = ['Session-Token' => $this->session_token];",
                "// Line 1068:         $data    = $this->query($url, [",
                "// Line 1069:             'headers' => $headers,",
                "// Line 1070:         ], $status, $error);",
                "// Line 1071: ",
                "// Line 1072:        // If no errors are expected, check results",
                "// Line 1073:         if (empty($error)) {",
                "// Line 1074:             unset($data['headers']);",
                "// Line 1075:             $this->array($data)->isEqualTo($response);",
                "// vulnerable line: 1076: }",
                "// vulnerable line: 1077: }",
                "// Line 1078: ",
                "// Line 1079:     protected function testApplyMassiveActionProvider(): array",
                "// Line 1080:     {",
                "// Line 1081:         return [",
                "// Line 1082:             [",
                "// Line 1083:                 'url' => 'applyMassiveAction/Computer',",
                "// Line 1084:                 'payload' => [",
                "// Line 1085:                     'ids' => [getItemByTypeName('Computer', '_test_pc01', true)],",
                "// Line 1086:                 ],",
                "// Line 1087:                 'status' => 400,",
                "// Line 1130:                     $computers = ['_test_pc01', '_test_pc02'];",
                "// Line 1131:                     foreach ($computers as $computer) {",
                "// Line 1132:                        // Init \"comment\" field for all targets",
                "// Line 1133:                         $computer = getItemByTypeName('Computer', $computer);",
                "// Line 1134:                         $update = $computer->update([",
                "// Line 1135:                             'id'      => $computer->getId(),",
                "// Line 1136:                             'comment' => \"test comment\",",
                "// Line 1137:                         ]);",
                "// Line 1138:                         $this->boolean($update)->isTrue();",
                "// Line 1139:                         $this->string($computer->fields['comment'])->isEqualTo(\"test comment\");",
                "// vulnerable line: 1140: }",
                "// Line 1141:                 },",
                "// Line 1142:                 'after_test' => function () {",
                "// Line 1143:                     $computers = ['_test_pc01', '_test_pc02'];",
                "// Line 1144:                     foreach ($computers as $computer) {",
                "// Line 1145:                        // Check that \"comment\" field was modified as expected",
                "// Line 1146:                         $computer = getItemByTypeName('Computer', $computer);",
                "// Line 1147:                         $this->string($computer->fields['comment'])->isEqualTo(\"test comment",
                "// Line 1148: ",
                "// Line 1149: newtexttoadd\");",
                "// vulnerable line: 1150: }",
                "// vulnerable line: 1151: }",
                "// Line 1152:             ],",
                "// Line 1153:             [",
                "// Line 1154:                 'url' => 'applyMassiveAction/Computer/MassiveAction:add_note',",
                "// Line 1155:                 'payload' => [",
                "// Line 1156:                     'ids' => [",
                "// Line 1157:                         getItemByTypeName('Computer', '_test_pc01', true),",
                "// Line 1158:                         getItemByTypeName('Computer', '_test_pc02', true)",
                "// Line 1159:                     ],",
                "// Line 1160:                     'input' => [",
                "// Line 1161:                         'add_note' => \"new note\",",
                "// Line 1176:                         $note = new Notepad();",
                "// Line 1177:                         $existing_notes = $note->find([",
                "// Line 1178:                             'itemtype' => 'Computer',",
                "// Line 1179:                             'items_id' => getItemByTypeName('Computer', $computer, true),",
                "// Line 1180:                         ]);",
                "// Line 1181: ",
                "// Line 1182:                        // Delete all existing note for this item",
                "// Line 1183:                         foreach ($existing_notes as $existing_note) {",
                "// Line 1184:                             $deletion = $note->delete(['id' => $existing_note['id']]);",
                "// Line 1185:                             $this->boolean($deletion)->isTrue();",
                "// vulnerable line: 1186: }",
                "// Line 1187: ",
                "// Line 1188:                        // Check that the items have no notes remaining",
                "// Line 1189:                         $this->array($note->find([",
                "// Line 1190:                             'itemtype' => 'Computer',",
                "// Line 1191:                             'items_id' => getItemByTypeName('Computer', $computer, true),",
                "// Line 1192:                         ]))->hasSize(0);",
                "// vulnerable line: 1193: }",
                "// Line 1194:                 },",
                "// Line 1195:                 'after_test' => function () {",
                "// Line 1196:                     $computers = ['_test_pc01', '_test_pc02'];",
                "// Line 1197:                     foreach ($computers as $computer) {",
                "// Line 1198:                         $note = new Notepad();",
                "// Line 1199:                         $existing_notes = $note->find([",
                "// Line 1200:                             'itemtype' => 'Computer',",
                "// Line 1201:                             'items_id' => getItemByTypeName('Computer', $computer, true),",
                "// Line 1202:                         ]);",
                "// Line 1203: ",
                "// Line 1204:                        // Check that the items have one note",
                "// Line 1205:                         $this->array($existing_notes)->hasSize(1);",
                "// Line 1206: ",
                "// Line 1207:                         foreach ($existing_notes as $existing_note) {",
                "// Line 1208:                             $this->string($existing_note['content'])->isEqualTo(\"new note\");",
                "// vulnerable line: 1209: }",
                "// vulnerable line: 1210: }",
                "// vulnerable line: 1211: }",
                "// Line 1212:             ]",
                "// Line 1213:         ];",
                "// vulnerable line: 1214: }",
                "// Line 1215: ",
                "// Line 1216:     /**",
                "// Line 1217:      * Tests for the \"applyMassiveAction\" endpoint",
                "// Line 1218:      *",
                "// Line 1219:      * @dataProvider testApplyMassiveActionProvider",
                "// Line 1220:      */",
                "// Line 1221:     public function testApplyMassiveAction(",
                "// Line 1222:         string $url,",
                "// Line 1223:         array $payload,",
                "// Line 1224:         int $status,",
                "// Line 1225:         ?array $response,",
                "// Line 1226:         string $error = \"\",",
                "// Line 1227:         ?callable $before_test = null,",
                "// Line 1228:         ?callable $after_test = null",
                "// Line 1229:     ): void {",
                "// Line 1230:         if (!is_null($before_test)) {",
                "// Line 1231:             $before_test();",
                "// vulnerable line: 1232: }",
                "// Line 1233: ",
                "// Line 1234:         $headers = ['Session-Token' => $this->session_token];",
                "// Line 1235:         $data    = $this->query($url, [",
                "// Line 1236:             'headers' => $headers,",
                "// Line 1237:             'verb'    => 'POST',",
                "// Line 1238:             'json'    => $payload,",
                "// Line 1239:         ], $status, $error);",
                "// Line 1240: ",
                "// Line 1241:        // If no errors are expected, check results",
                "// Line 1242:         if (empty($error)) {",
                "// Line 1243:             unset($data['headers']);",
                "// Line 1244:             $this->array($data)->isEqualTo($response);",
                "// vulnerable line: 1245: }",
                "// Line 1246: ",
                "// Line 1247:         if (!is_null($after_test)) {",
                "// Line 1248:             $after_test();",
                "// vulnerable line: 1249: }",
                "// vulnerable line: 1250: }",
                "// Line 1251: ",
                "// Line 1252:     /**",
                "// Line 1253:      * Data provider for testReturnSanitizedContentUnit",
                "// Line 1254:      *",
                "// Line 1255:      * @return array",
                "// Line 1256:      */",
                "// Line 1257:     protected function testReturnSanitizedContentUnitProvider(): array",
                "// Line 1258:     {",
                "// Line 1259:         return [",
                "// Line 1260:             [null, true],",
                "// Line 1262:             [\"true\", true],",
                "// Line 1263:             [\"false\", false],",
                "// Line 1264:             [\"on\", true],",
                "// Line 1265:             [\"off\", false],",
                "// Line 1266:             [\"1\", true],",
                "// Line 1267:             [\"0\", false],",
                "// Line 1268:             [\"yes\", true],",
                "// Line 1269:             [\"no\", false],",
                "// Line 1270:             [\"asfbhueshf\", false],",
                "// Line 1271:         ];",
                "// vulnerable line: 1272: }",
                "// Line 1273: ",
                "// Line 1274:     /**",
                "// Line 1275:      * Unit test for the \"returnSanitizedContent\" method",
                "// Line 1276:      *",
                "// Line 1277:      * @dataProvider testReturnSanitizedContentUnitProvider",
                "// Line 1278:      *",
                "// Line 1279:      * @param string $header_value    Header value to be tested",
                "// Line 1280:      * @param bool   $expected_output Expected output for this header",
                "// Line 1281:      *",
                "// Line 1282:      * @return void",
                "// Line 1285:         ?string $header_value,",
                "// Line 1286:         bool $expected_output",
                "// Line 1287:     ): void {",
                "// Line 1288:         $api = new \\Glpi\\Api\\APIRest();",
                "// Line 1289: ",
                "// Line 1290:         if ($header_value === null) {",
                "// Line 1291:             // Simulate missing header",
                "// Line 1292:             unset($_SERVER['HTTP_X_GLPI_SANITIZED_CONTENT']);",
                "// Line 1293:         } else {",
                "// Line 1294:             $_SERVER['HTTP_X_GLPI_SANITIZED_CONTENT'] = $header_value;",
                "// vulnerable line: 1295: }",
                "// Line 1296: ",
                "// Line 1297:         // Run test",
                "// Line 1298:         $this->boolean(",
                "// Line 1299:             $api->returnSanitizedContent()",
                "// Line 1300:         )->isEqualTo($expected_output);",
                "// Line 1301: ",
                "// Line 1302:         // Clean header",
                "// Line 1303:         unset($_SERVER['HTTP_X_GLPI_SANITIZED_CONTENT']);",
                "// vulnerable line: 1304: }",
                "// Line 1305: ",
                "// Line 1306:     /**",
                "// Line 1307:      * Functional test for the \"returnSanitizedContent\" method",
                "// Line 1308:      *",
                "// Line 1309:      * @return void",
                "// Line 1310:      */",
                "// Line 1311:     public function testReturnSanitizedContentFunctional(): void",
                "// Line 1312:     {",
                "// Line 1313:         // Get computer with encoded comment",
                "// Line 1314:         $computers_id = getItemByTypeName(",
                "// Line 1315:             \"Computer\",",
                "// Line 1316:             \"_test_pc_with_encoded_comment\",",
                "// Line 1317:             true",
                "// vulnerable line: 1318: );",
                "// Line 1319: ",
                "// Line 1320:         // Request params",
                "// Line 1321:         $url = \"/Computer/$computers_id\";",
                "// Line 1322:         $method = \"GET\";",
                "// Line 1323:         $headers = ['Session-Token' => $this->session_token];",
                "// Line 1324: ",
                "// Line 1325:         // Execute first test (keep encoded content)",
                "// Line 1326:         $data = $this->query($url, [",
                "// Line 1327:             'headers' => $headers,",
                "// Line 1328:             'verb'    => $method,",
                "// Line 1331: ",
                "// Line 1332:         // Add additional header",
                "// Line 1333:         $headers['X-GLPI-Sanitized-Content'] = \"false\";",
                "// Line 1334: ",
                "// Line 1335:         // Execute second test (expect decoded content)",
                "// Line 1336:         $data = $this->query($url, [",
                "// Line 1337:             'headers' => $headers,",
                "// Line 1338:             'verb'    => $method,",
                "// Line 1339:         ], 200);",
                "// Line 1340:         $this->string($data['comment'])->isEqualTo(\"<>\");",
                "// vulnerable line: 1341: }",
                "// Line 1342: ",
                "// Line 1343:     public function test_ActorUpdate()",
                "// Line 1344:     {",
                "// Line 1345:         $headers = ['Session-Token' => $this->session_token];",
                "// Line 1346:         $rand = mt_rand();",
                "// Line 1347: ",
                "// Line 1348:         // Group used for our tests",
                "// Line 1349:         $groups_id = getItemByTypeName(\"Group\", \"_test_group_1\", true);",
                "// Line 1350: ",
                "// Line 1351:         // Create ticket",
                "// Line 1384:         ], 200);",
                "// Line 1385: ",
                "// Line 1386:         // Check assigned groups",
                "// Line 1387:         $data = $this->query(\"/Ticket/$tickets_id/Group_Ticket\", [",
                "// Line 1388:             'headers' => $headers,",
                "// Line 1389:             'verb'    => \"GET\",",
                "// Line 1390:         ], 200);",
                "// Line 1391: ",
                "// Line 1392:         $this->integer($data[0]['tickets_id'])->isEqualTo($tickets_id);",
                "// Line 1393:         $this->integer($data[0]['groups_id'])->isEqualTo($groups_id);",
                "// vulnerable line: 1394: }",
                "// Line 1395: ",
                "// Line 1396:     /**",
                "// Line 1397:      * test update items endpoint",
                "// Line 1398:      * using application/x-www-form-urlencoded",
                "// Line 1399:      *",
                "// Line 1400:      * @return void",
                "// Line 1401:      */",
                "// Line 1402:     public function testUpdateItemFormEncodedBody()",
                "// Line 1403:     {",
                "// Line 1404:         $computer = $this->createComputer();",
                "// Line 1405:         $computers_id = $computer->getID();",
                "// Line 1406: ",
                "// vulnerable line: 1407: try {",
                "// Line 1408:             $response = $this->http_client->put(",
                "// Line 1409:                 $this->base_uri . 'Computer/' . $computers_id,",
                "// Line 1410:                 [",
                "// Line 1411:                     'headers' => [",
                "// Line 1412:                         'Session-Token' => $this->session_token,",
                "// Line 1413:                         'Content-Type'  => 'application/x-www-form-urlencoded',",
                "// Line 1414:                     ],",
                "// Line 1415:                     'body' => http_build_query(",
                "// Line 1416:                         [",
                "// Line 1417:                             'input' => [",
                "// Line 1418:                                 'serial' => 'abcdefg',",
                "// Line 1419:                                 'comment' => 'This computer has been updated.',",
                "// Line 1420:                             ]",
                "// Line 1421:                         ],",
                "// Line 1422:                         '',",
                "// Line 1423:                         '&'",
                "// Line 1424:                     )",
                "// Line 1425:                 ]",
                "// vulnerable line: 1426: );",
                "// Line 1427:         } catch (\\GuzzleHttp\\Exception\\RequestException $e) {",
                "// Line 1428:             $response = $e->getResponse();",
                "// vulnerable line: 1429: }",
                "// Line 1430: ",
                "// Line 1431:         // Check response",
                "// Line 1432:         $this->object($response)->isInstanceOf(\\Psr\\Http\\Message\\ResponseInterface::class);",
                "// Line 1433:         $this->integer($response->getStatusCode())->isEqualTo(200);",
                "// Line 1434:         $this->object($response)->isInstanceOf(\\Psr\\Http\\Message\\ResponseInterface::class);",
                "// Line 1435:         $body = $response->getBody()->getContents();",
                "// Line 1436:         $this->array(json_decode($body, true))->isEqualTo([",
                "// Line 1437:             [",
                "// Line 1438:                 (string)$computers_id => true,",
                "// Line 1439:                 'message'             => '',",
                "// Line 1440:             ]",
                "// Line 1441:         ]);",
                "// Line 1442: ",
                "// Line 1443:         // Check computer is updated",
                "// Line 1444:         $computer = new \\Computer();",
                "// Line 1445:         $this->boolean((bool)$computer->getFromDB($computers_id))->isTrue();",
                "// Line 1446:         $this->string($computer->fields['serial'])->isIdenticalTo('abcdefg');",
                "// Line 1447:         $this->string($computer->fields['comment'])->isIdenticalTo('This computer has been updated.');",
                "// vulnerable line: 1448: }",
                "// Line 1449: ",
                "// Line 1450:     /**",
                "// Line 1451:      * test delete items endpoint",
                "// Line 1452:      * using application/x-www-form-urlencoded",
                "// Line 1453:      *",
                "// Line 1454:      * @return void",
                "// Line 1455:      */",
                "// Line 1456:     public function testDeleteItemFormEncodedBody()",
                "// Line 1457:     {",
                "// Line 1458:         $computer = $this->createComputer();",
                "// Line 1459:         $computers_id = $computer->getID();",
                "// Line 1460: ",
                "// vulnerable line: 1461: try {",
                "// Line 1462:             $response = $this->http_client->delete(",
                "// Line 1463:                 $this->base_uri . 'Computer',",
                "// Line 1464:                 [",
                "// Line 1465:                     'headers' => [",
                "// Line 1466:                         'Session-Token' => $this->session_token,",
                "// Line 1467:                         'Content-Type'  => 'application/x-www-form-urlencoded',",
                "// Line 1468:                     ],",
                "// Line 1469:                     'body' => http_build_query(",
                "// Line 1470:                         [",
                "// Line 1471:                             'input' => [",
                "// Line 1472:                                 'id' => $computers_id",
                "// Line 1473:                             ]",
                "// Line 1474:                         ]",
                "// Line 1475:                     )",
                "// Line 1476:                 ]",
                "// vulnerable line: 1477: );",
                "// Line 1478:         } catch (\\GuzzleHttp\\Exception\\RequestException $e) {",
                "// Line 1479:             $response = $e->getResponse();",
                "// vulnerable line: 1480: }",
                "// Line 1481: ",
                "// Line 1482:         // Check response",
                "// Line 1483:         $this->object($response)->isInstanceOf(\\Psr\\Http\\Message\\ResponseInterface::class);",
                "// Line 1484:         $this->integer($response->getStatusCode())->isEqualTo(200);",
                "// Line 1485:         $this->object($response)->isInstanceOf(\\Psr\\Http\\Message\\ResponseInterface::class);",
                "// Line 1486:         $body = $response->getBody()->getContents();",
                "// Line 1487:         $this->array(json_decode($body, true))->isEqualTo([",
                "// Line 1488:             [",
                "// Line 1489:                 (string)$computers_id => true,",
                "// Line 1490:                 'message'             => '',",
                "// Line 1491:             ]",
                "// Line 1492:         ]);",
                "// Line 1493: ",
                "// Line 1494:         // Check computer is updated",
                "// Line 1495:         $computer = new \\Computer();",
                "// Line 1496:         $this->boolean((bool)$computer->getFromDB($computers_id))->isTrue();",
                "// Line 1497:         $this->boolean((bool)$computer->getField('is_deleted'))->isTrue();",
                "// vulnerable line: 1498: }",
                "// vulnerable line: 1499: }"
            ]
        },
        {
            "filename_of_changes": "RuleAction.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 44:     /**",
                "// Line 45:      * @since 0.84",
                "// Line 46:      **/",
                "// Line 47:     public function getForbiddenStandardMassiveAction()",
                "// Line 48:     {",
                "// Line 49: ",
                "// Line 50:         $forbidden   = parent::getForbiddenStandardMassiveAction();",
                "// Line 51:         $forbidden[] = 'update';",
                "// Line 52: ",
                "// Line 53:         if (isset($_POST['rule_class_name']) && is_subclass_of(\\Rule::class, $_POST['rule_class_name'])) {",
                "// vulnerable line: 54: $rule = new $_POST['rule_class_name']();",
                "// Line 55:             if ($rule->maxActionsCount() == 1) {",
                "// Line 56:                 $forbidden[] = 'clone';",
                "// Line 57:             }",
                "// Line 58:         }",
                "// Line 59:         //maxActionsCount on Rule",
                "// Line 60:         return $forbidden;",
                "// Line 61:     }",
                "// Line 62: ",
                "// Line 63: ",
                "// Line 64:     /**"
            ]
        },
        {
            "filename_of_changes": "comments.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 117:                 if (isset($_POST['withlink'])) {",
                "// Line 118:                     echo \"<script type='text/javascript' >",
                "// Line 119: \";",
                "// Line 120:                     echo Html::jsGetElementbyID($_POST['withlink']) . \".",
                "// Line 121:                     attr('href', '\" . $_POST['itemtype']::getFormURLWithID($_POST[\"value\"]) . \"');\";",
                "// Line 122:                     echo \"</script>",
                "// Line 123: \";",
                "// Line 124:                 }",
                "// Line 125: ",
                "// Line 126:                 if (isset($_POST['with_dc_position'])) {",
                "// vulnerable line: 127: $item = new $_POST['itemtype']();",
                "// Line 128:                     echo \"<script type='text/javascript' >",
                "// Line 129: \";",
                "// Line 130: ",
                "// Line 131:                    //if item have a DC position (reload url to it's rack)",
                "// Line 132:                     if ($rack = $item->isRackPart($_POST['itemtype'], $_POST[\"value\"], true)) {",
                "// Line 133:                         echo Html::jsGetElementbyID($_POST['with_dc_position']) . \".",
                "// Line 134:                   html(\"&nbsp;<a class='fas fa-crosshairs' href='\" . $rack->getLinkURL() . \"'></a>\");\";",
                "// Line 135:                     } else {",
                "// Line 136:                        //remove old dc position",
                "// Line 137:                         echo Html::jsGetElementbyID($_POST['with_dc_position']) . \".empty();\";"
            ]
        },
        {
            "filename_of_changes": "device.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 34:  */",
                "// Line 35: ",
                "// Line 36: include('../inc/includes.php');",
                "// Line 37: ",
                "// Line 38: if (!isset($_GET['itemtype']) || !class_exists($_GET['itemtype'])) {",
                "// Line 39:     throw new \\RuntimeException(",
                "// Line 40:         'Missing or incorrect device type called!'",
                "// Line 41:     );",
                "// Line 42: }",
                "// Line 43: ",
                "// vulnerable line: 44: $dropdown = new $_GET['itemtype']();",
                "// Line 45: include(GLPI_ROOT . \"/front/dropdown.common.php\");"
            ]
        },
        {
            "filename_of_changes": "devicemodel.form.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 34:  */",
                "// Line 35: ",
                "// Line 36: include('../inc/includes.php');",
                "// Line 37: ",
                "// Line 38: if (!isset($_GET['itemtype']) || !class_exists($_GET['itemtype'])) {",
                "// Line 39:     throw new \\RuntimeException(",
                "// Line 40:         'Missing or incorrect device type called!'",
                "// Line 41:     );",
                "// Line 42: }",
                "// Line 43: ",
                "// vulnerable line: 44: $dropdown = new $_GET['itemtype']();",
                "// Line 45: include(GLPI_ROOT . \"/front/dropdown.common.form.php\");"
            ]
        },
        {
            "filename_of_changes": "devicemodel.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 34:  */",
                "// Line 35: ",
                "// Line 36: include('../inc/includes.php');",
                "// Line 37: ",
                "// Line 38: if (!isset($_GET['itemtype']) || !class_exists($_GET['itemtype'])) {",
                "// Line 39:     throw new \\RuntimeException(",
                "// Line 40:         'Missing or incorrect device type called!'",
                "// Line 41:     );",
                "// Line 42: }",
                "// Line 43: ",
                "// vulnerable line: 44: $dropdown = new $_GET['itemtype']();",
                "// Line 45: include(GLPI_ROOT . \"/front/dropdown.common.php\");"
            ]
        },
        {
            "filename_of_changes": "devicetype.form.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 34:  */",
                "// Line 35: ",
                "// Line 36: include('../inc/includes.php');",
                "// Line 37: ",
                "// Line 38: if (!isset($_GET['itemtype']) || !class_exists($_GET['itemtype'])) {",
                "// Line 39:     throw new \\RuntimeException(",
                "// Line 40:         'Missing or incorrect device type called!'",
                "// Line 41:     );",
                "// Line 42: }",
                "// Line 43: ",
                "// vulnerable line: 44: $dropdown = new $_GET['itemtype']();",
                "// Line 45: include(GLPI_ROOT . \"/front/dropdown.common.form.php\");"
            ]
        },
        {
            "filename_of_changes": "devicetype.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 34:  */",
                "// Line 35: ",
                "// Line 36: include('../inc/includes.php');",
                "// Line 37: ",
                "// Line 38: if (!isset($_GET['itemtype']) || !class_exists($_GET['itemtype'])) {",
                "// Line 39:     throw new \\RuntimeException(",
                "// Line 40:         'Missing or incorrect device type called!'",
                "// Line 41:     );",
                "// Line 42: }",
                "// Line 43: ",
                "// vulnerable line: 44: $dropdown = new $_GET['itemtype']();",
                "// Line 45: include(GLPI_ROOT . \"/front/dropdown.common.php\");"
            ]
        },
        {
            "filename_of_changes": "dropdownLocation.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 38: ",
                "// Line 39: Session::checkLoginUser();",
                "// Line 40: ",
                "// Line 41: if (",
                "// Line 42:     !isset($_REQUEST['itemtype'])",
                "// Line 43:     && !is_subclass_of($_REQUEST['itemtype'], 'CommonDBTM')",
                "// Line 44: ) {",
                "// Line 45:     throw new \\RuntimeException('Required argument missing or incorrect!');",
                "// Line 46: }",
                "// Line 47: ",
                "// vulnerable line: 48: $item = new $_REQUEST['itemtype']();",
                "// Line 49: $item->getFromDB((int) $_REQUEST['items_id']);",
                "// Line 50: ",
                "// Line 51: $locations_id = $item->fields['locations_id'] ?? 0;",
                "// Line 52: ",
                "// Line 53: $entities_id = $item->fields['entities_id'] ?? $_SESSION['glpiactive_entity'];",
                "// Line 54: ",
                "// Line 55: $is_recursive = $_SESSION['glpiactive_entity_recursive'];",
                "// Line 56: if (isset($_REQUEST['is_recursive'])) {",
                "// Line 57:     $is_recursive = (bool) $_REQUEST['is_recursive'];",
                "// Line 58: }"
            ]
        },
        {
            "filename_of_changes": "item_device.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 37: global $CFG_GLPI;",
                "// Line 38: ",
                "// Line 39: include('../inc/includes.php');",
                "// Line 40: ",
                "// Line 41: if (!isset($_GET['itemtype']) || !class_exists($_GET['itemtype'])) {",
                "// Line 42:     throw new \\RuntimeException(",
                "// Line 43:         'Missing or incorrect item device type called!'",
                "// Line 44:     );",
                "// Line 45: }",
                "// Line 46: ",
                "// vulnerable line: 47: $itemDevice = new $_GET['itemtype']();",
                "// Line 48: if (!$itemDevice->canView()) {",
                "// Line 49:     Session::redirectIfNotLoggedIn();",
                "// Line 50:     Html::displayRightError();",
                "// Line 51: }",
                "// Line 52: ",
                "// Line 53: if (in_array($itemDevice->getType(), $CFG_GLPI['devices_in_menu'])) {",
                "// Line 54:     Html::header($itemDevice->getTypeName(Session::getPluralNumber()), $_SERVER['PHP_SELF'], \"assets\", strtolower($itemDevice->getType()));",
                "// Line 55: } else {",
                "// Line 56:     Html::header($itemDevice->getTypeName(Session::getPluralNumber()), '', \"config\", \"commondevice\", $itemDevice->getType());",
                "// Line 57: }"
            ]
        },
        {
            "filename_of_changes": "itilfollowup.form.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 43: Session::checkLoginUser();",
                "// Line 44: ",
                "// Line 45: $fup = new ITILFollowup();",
                "// Line 46: ",
                "// Line 47: $redirect = null;",
                "// Line 48: $handled = false;",
                "// Line 49: ",
                "// Line 50: if (!isset($_POST['itemtype']) || !class_exists($_POST['itemtype'])) {",
                "// Line 51:     Html::displayErrorAndDie('Lost');",
                "// Line 52: }",
                "// vulnerable line: 53: $track = new $_POST['itemtype']();",
                "// Line 54: ",
                "// Line 55: ",
                "// Line 56: if (isset($_POST[\"add\"])) {",
                "// Line 57:     $fup->check(-1, CREATE, $_POST);",
                "// Line 58:     $fup->add($_POST);",
                "// Line 59: ",
                "// Line 60:     Event::log(",
                "// Line 61:         $fup->getField('items_id'),",
                "// Line 62:         strtolower($_POST['itemtype']),",
                "// Line 63:         4,"
            ]
        },
        {
            "filename_of_changes": "itilsolution.form.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 36: use Glpi\\Event;",
                "// Line 37: ",
                "// Line 38: /** @var \\DBmysql $DB */",
                "// Line 39: global $DB;",
                "// Line 40: ",
                "// Line 41: include('../inc/includes.php');",
                "// Line 42: ",
                "// Line 43: Session::checkLoginUser();",
                "// Line 44: ",
                "// Line 45: $solution = new ITILSolution();",
                "// vulnerable line: 46: $track = new $_POST['itemtype']();",
                "// Line 47: $track->getFromDB($_POST['items_id']);",
                "// Line 48: ",
                "// Line 49: $redirect = null;",
                "// Line 50: $handled = false;",
                "// Line 51: ",
                "// Line 52: if (isset($_POST[\"add\"])) {",
                "// Line 53:     $solution->check(-1, CREATE, $_POST);",
                "// Line 54:     if (!$track->canSolve()) {",
                "// Line 55:         Session::addMessageAfterRedirect(",
                "// Line 56:             __('You cannot solve this item!'),"
            ]
        },
        {
            "filename_of_changes": "kanban.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 165:         foreach ($bulk_item_list as $item_entry) {",
                "// Line 166:             $item_entry = trim($item_entry);",
                "// Line 167:             if (!empty($item_entry)) {",
                "// Line 168:                 $item->add(Sanitizer::sanitize($inputs + ['name' => $item_entry, 'content' => '']));",
                "// Line 169:             }",
                "// Line 170:         }",
                "// Line 171:     }",
                "// Line 172: } else if (($_POST['action'] ?? null) === 'move_item') {",
                "// Line 173:     $checkParams(['card', 'column', 'position', 'kanban']);",
                "// Line 174:     /** @var Kanban|CommonDBTM $kanban */",
                "// vulnerable line: 175: $kanban = new $_POST['kanban']['itemtype']();",
                "// Line 176:     $can_move = $kanban->canOrderKanbanCard($_POST['kanban']['items_id']);",
                "// Line 177:     if ($can_move) {",
                "// Line 178:         Item_Kanban::moveCard(",
                "// Line 179:             $_POST['kanban']['itemtype'],",
                "// Line 180:             $_POST['kanban']['items_id'],",
                "// Line 181:             $_POST['card'],",
                "// Line 182:             $_POST['column'],",
                "// Line 183:             $_POST['position']",
                "// Line 184:         );",
                "// Line 185:     }"
            ]
        },
        {
            "filename_of_changes": "rule.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 34:  */",
                "// Line 35: ",
                "// Line 36: $AJAX_INCLUDE = 1;",
                "// Line 37: include('../inc/includes.php');",
                "// Line 38: ",
                "// Line 39: Session::checkLoginUser();",
                "// Line 40: ",
                "// Line 41: switch ($_REQUEST['action']) {",
                "// Line 42:     case \"move_rule\":",
                "// Line 43:         if (is_subclass_of($_POST['collection_classname'], RuleCollection::getType())) {",
                "// vulnerable line: 44: $rule_collection = new $_POST['collection_classname']();",
                "// Line 45:             $rule_collection->moveRule((int) $_POST['rule_id'], (int) $_POST['ref_id'], $_POST['sort_action']);",
                "// Line 46:         }",
                "// Line 47:         break;",
                "// Line 48: }"
            ]
        },
        {
            "filename_of_changes": "updateTranslationFields.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 37:  * @since 0.85",
                "// Line 38:  */",
                "// Line 39: ",
                "// Line 40: include('../inc/includes.php');",
                "// Line 41: ",
                "// Line 42: header(\"Content-Type: text/html; charset=UTF-8\");",
                "// Line 43: Html::header_nocache();",
                "// Line 44: ",
                "// Line 45: Session::checkRight(\"dropdown\", UPDATE);",
                "// Line 46: if (isset($_POST['itemtype']) && isset($_POST['language'])) {",
                "// vulnerable line: 47: $item = new $_POST['itemtype']();",
                "// Line 48:     $item->getFromDB($_POST['items_id']);",
                "// Line 49:     DropdownTranslation::dropdownFields($item, $_POST['language']);",
                "// Line 50: }"
            ]
        },
        {
            "filename_of_changes": "updateTranslationValue.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 36: include('../inc/includes.php');",
                "// Line 37: ",
                "// Line 38: header(\"Content-Type: text/html; charset=UTF-8\");",
                "// Line 39: Html::header_nocache();",
                "// Line 40: ",
                "// Line 41: Session::checkRight(\"dropdown\", UPDATE);",
                "// Line 42: ",
                "// Line 43: $matching_field = null;",
                "// Line 44: ",
                "// Line 45: if (isset($_POST['itemtype'], $_POST['field']) && is_a($_POST['itemtype'], CommonDropdown::class, true)) {",
                "// vulnerable line: 46: $itemtype = new $_POST['itemtype']();",
                "// Line 47:     $matching_field = $itemtype->getAdditionalField($_POST['field']);",
                "// Line 48: }",
                "// Line 49: ",
                "// Line 50: if (($matching_field['type'] ?? null) === 'tinymce') {",
                "// Line 51:     Html::textarea([",
                "// Line 52:         'name'              => 'value',",
                "// Line 53:         'enable_richtext'   => true,",
                "// Line 54:         'enable_images'     => false,",
                "// Line 55:         'enable_fileupload' => false,",
                "// Line 56:     ]);"
            ]
        }
    ]
}