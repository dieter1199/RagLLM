{
    "cve_id": "CVE-2024-27100",
    "cve_description": "Discourse is an open source platform for community discussion. In affected versions the endpoints for suspending users, silencing users and exporting CSV files weren't enforcing limits on the sizes of the parameters that they accept. This could lead to excessive resource consumption which could render an instance inoperable. A site could be disrupted by either a malicious moderator on the same site or a malicious staff member on another site in the same multisite cluster. This issue is patched in the latest stable, beta and tests-passed versions of Discourse. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "cve_publish_date": "2024-03-15T20:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "SECURITY: Prevent large staff actions causing DoS\n\nThis commit operates at three levels of abstraction:\n\n 1. We want to prevent user history rows from being unbounded in size.\n    This commit adds rails validations to limit the sizes of columns on\n    user_histories,\n\n 2. However, we don't want to prevent certain actions from being\n    completed if these columns are too long. In those cases, we truncate\n    the values that are given and store the truncated versions,\n\n 3. For endpoints that perform staff actions, we can further control\n    what is permitted by explicitly validating the params that are given\n    before attempting the action,",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "export_csv_controller.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "11",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: # frozen_string_literal: true",
                "// Line 2: ",
                "// Line 3: class ExportCsvController < ApplicationController",
                "// Line 4:   skip_before_action :preload_json, :check_xhr, only: [:show]",
                "// Line 5: ",
                "// Line 6:   def export_entity",
                "// Line 7:     guardian.ensure_can_export_entity!(export_params[:entity])",
                "// Line 8: ",
                "// vulnerable line: 9: if export_params[:entity] == \"user_archive\"",
                "// Line 10:       Jobs.enqueue(:export_user_archive, user_id: current_user.id, args: export_params[:args])",
                "// Line 11:     else",
                "// Line 12:       Jobs.enqueue(",
                "// Line 13:         :export_csv_file,",
                "// vulnerable line: 14: entity: export_params[:entity],",
                "// Line 15:         user_id: current_user.id,",
                "// Line 16:         args: export_params[:args],",
                "// Line 17:       )",
                "// Line 18:     end",
                "// vulnerable line: 19: StaffActionLogger.new(current_user).log_entity_export(export_params[:entity])",
                "// Line 20:     render json: success_json",
                "// Line 21:   rescue Discourse::InvalidAccess",
                "// Line 22:     render_json_error I18n.t(\"csv_export.rate_limit_error\")",
                "// Line 23:   end",
                "// Line 24: ",
                "// Line 25:   private",
                "// Line 26: ",
                "// Line 27:   def export_params",
                "// Line 28:     @_export_params ||=",
                "// Line 29:       begin"
            ]
        },
        {
            "filename_of_changes": "export_csv_controller_spec.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "10",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "staff_action_logger.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "24",
            "number_of_lines_deleted_vulnerable_to_cve": "11",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 15: ",
                "// Line 16:   def log_user_deletion(deleted_user, opts = {})",
                "// Line 17:     unless deleted_user && deleted_user.is_a?(User)",
                "// Line 18:       raise Discourse::InvalidParameters.new(:deleted_user)",
                "// Line 19:     end",
                "// Line 20: ",
                "// Line 21:     details = USER_FIELDS.map { |x| \"#{x}: #{deleted_user.public_send(x)}\" }.join(\"",
                "// Line 22: \")",
                "// Line 23: ",
                "// Line 24:     UserHistory.create!(",
                "// vulnerable line: 25: params(opts).merge(",
                "// Line 26:         action: UserHistory.actions[:delete_user],",
                "// Line 27:         ip_address: deleted_user.ip_address.to_s,",
                "// Line 28:         details: details,",
                "// Line 29:       ),",
                "// Line 30:     )",
                "// Line 31:   end",
                "// Line 32: ",
                "// Line 33:   def log_custom(custom_type, details = nil)",
                "// Line 34:     raise Discourse::InvalidParameters.new(:custom_type) unless custom_type",
                "// Line 35: ",
                "// Line 75:     username = deleted_post.user.try(:username) || I18n.t(\"staff_action_logs.unknown\")",
                "// Line 76:     name = deleted_post.user.try(:name) || I18n.t(\"staff_action_logs.unknown\")",
                "// Line 77:     topic_title = topic.try(:title) || I18n.t(\"staff_action_logs.not_found\")",
                "// Line 78: ",
                "// Line 79:     details = [",
                "// Line 80:       \"id: #{deleted_post.id}\",",
                "// Line 81:       \"created_at: #{deleted_post.created_at}\",",
                "// Line 82:       \"user: #{username} (#{name})\",",
                "// Line 83:       \"topic: #{topic_title}\",",
                "// Line 84:       \"post_number: #{deleted_post.post_number}\",",
                "// vulnerable line: 85: \"raw: #{deleted_post.raw}\",",
                "// Line 86:     ]",
                "// Line 87: ",
                "// Line 88:     UserHistory.create!(",
                "// vulnerable line: 89: params(opts).merge(",
                "// Line 90:         action: UserHistory.actions[:delete_post],",
                "// Line 91:         post_id: deleted_post.id,",
                "// Line 92:         details: details.join(\"",
                "// Line 93: \"),",
                "// Line 94:       ),",
                "// Line 95:     )",
                "// Line 96:   end",
                "// Line 97: ",
                "// Line 98:   def log_topic_delete_recover(topic, action = \"delete_topic\", opts = {})",
                "// Line 99:     raise Discourse::InvalidParameters.new(:topic) unless topic && topic.is_a?(Topic)",
                "// Line 101:     user = topic.user ? \"#{topic.user.username} (#{topic.user.name})\" : \"(deleted user)\"",
                "// Line 102: ",
                "// Line 103:     details = [",
                "// Line 104:       \"id: #{topic.id}\",",
                "// Line 105:       \"created_at: #{topic.created_at}\",",
                "// Line 106:       \"user: #{user}\",",
                "// Line 107:       \"title: #{topic.title}\",",
                "// Line 108:     ]",
                "// Line 109: ",
                "// Line 110:     if first_post = topic.ordered_posts.with_deleted.first",
                "// vulnerable line: 111: details << \"raw: #{first_post.raw}\"",
                "// Line 112:     end",
                "// Line 113: ",
                "// Line 114:     UserHistory.create!(",
                "// vulnerable line: 115: params(opts).merge(",
                "// Line 116:         action: UserHistory.actions[action.to_sym],",
                "// Line 117:         topic_id: topic.id,",
                "// Line 118:         details: details.join(\"",
                "// Line 119: \"),",
                "// Line 120:       ),",
                "// Line 121:     )",
                "// Line 122:   end",
                "// Line 123: ",
                "// Line 124:   def log_trust_level_change(user, old_trust_level, new_trust_level, opts = {})",
                "// Line 125:     raise Discourse::InvalidParameters.new(:user) unless user && user.is_a?(User)",
                "// Line 126:     unless TrustLevel.valid? old_trust_level",
                "// Line 127:       raise Discourse::InvalidParameters.new(:old_trust_level)",
                "// Line 128:     end",
                "// Line 129:     unless TrustLevel.valid? new_trust_level",
                "// Line 130:       raise Discourse::InvalidParameters.new(:new_trust_level)",
                "// Line 131:     end",
                "// Line 132:     UserHistory.create!(",
                "// vulnerable line: 133: params(opts).merge(",
                "// Line 134:         action: UserHistory.actions[:change_trust_level],",
                "// Line 135:         target_user_id: user.id,",
                "// Line 136:         previous_value: old_trust_level,",
                "// Line 137:         new_value: new_trust_level,",
                "// Line 138:       ),",
                "// Line 139:     )",
                "// Line 140:   end",
                "// Line 141: ",
                "// Line 142:   def log_lock_trust_level(user, opts = {})",
                "// Line 143:     raise Discourse::InvalidParameters.new(:user) unless user && user.is_a?(User)",
                "// Line 151:   def log_topic_published(topic, opts = {})",
                "// Line 152:     raise Discourse::InvalidParameters.new(:topic) unless topic && topic.is_a?(Topic)",
                "// Line 153:     UserHistory.create!(",
                "// Line 154:       params(opts).merge(action: UserHistory.actions[:topic_published], topic_id: topic.id),",
                "// Line 155:     )",
                "// Line 156:   end",
                "// Line 157: ",
                "// Line 158:   def log_topic_timestamps_changed(topic, new_timestamp, previous_timestamp, opts = {})",
                "// Line 159:     raise Discourse::InvalidParameters.new(:topic) unless topic && topic.is_a?(Topic)",
                "// Line 160:     UserHistory.create!(",
                "// vulnerable line: 161: params(opts).merge(",
                "// Line 162:         action: UserHistory.actions[:topic_timestamps_changed],",
                "// Line 163:         topic_id: topic.id,",
                "// Line 164:         new_value: new_timestamp,",
                "// Line 165:         previous_value: previous_timestamp,",
                "// Line 166:       ),",
                "// Line 167:     )",
                "// Line 168:   end",
                "// Line 169: ",
                "// Line 170:   def log_post_lock(post, opts = {})",
                "// Line 171:     raise Discourse::InvalidParameters.new(:post) unless post && post.is_a?(Post)",
                "// Line 172:     UserHistory.create!(",
                "// vulnerable line: 173: params(opts).merge(",
                "// Line 174:         action: UserHistory.actions[opts[:locked] ? :post_locked : :post_unlocked],",
                "// Line 175:         post_id: post.id,",
                "// Line 176:       ),",
                "// Line 177:     )",
                "// Line 178:   end",
                "// Line 179: ",
                "// Line 180:   def log_post_edit(post, opts = {})",
                "// Line 181:     raise Discourse::InvalidParameters.new(:post) unless post && post.is_a?(Post)",
                "// Line 182:     UserHistory.create!(",
                "// vulnerable line: 183: params(opts).merge(",
                "// Line 184:         action: UserHistory.actions[:post_edit],",
                "// Line 185:         post_id: post.id,",
                "// Line 186:         details: \"#{opts[:old_raw]}",
                "// Line 187: ",
                "// Line 188: ---",
                "// Line 189: ",
                "// Line 190: #{post.raw}\",",
                "// Line 191:       ),",
                "// Line 192:     )",
                "// Line 193:   end",
                "// Line 194: ",
                "// Line 195:   def log_topic_closed(topic, opts = {})",
                "// Line 196:     raise Discourse::InvalidParameters.new(:topic) unless topic && topic.is_a?(Topic)",
                "// Line 197:     UserHistory.create!(",
                "// vulnerable line: 198: params(opts).merge(",
                "// Line 199:         action: UserHistory.actions[opts[:closed] ? :topic_closed : :topic_opened],",
                "// Line 200:         topic_id: topic.id,",
                "// Line 201:       ),",
                "// Line 202:     )",
                "// Line 203:   end",
                "// Line 204: ",
                "// Line 205:   def log_topic_archived(topic, opts = {})",
                "// Line 206:     raise Discourse::InvalidParameters.new(:topic) unless topic && topic.is_a?(Topic)",
                "// Line 207:     UserHistory.create!(",
                "// vulnerable line: 208: params(opts).merge(",
                "// Line 209:         action: UserHistory.actions[opts[:archived] ? :topic_archived : :topic_unarchived],",
                "// Line 210:         topic_id: topic.id,",
                "// Line 211:       ),",
                "// Line 212:     )",
                "// Line 213:   end",
                "// Line 214: ",
                "// Line 215:   def log_post_staff_note(post, opts = {})",
                "// Line 216:     raise Discourse::InvalidParameters.new(:post) unless post && post.is_a?(Post)",
                "// Line 217: ",
                "// Line 218:     args =",
                "// vulnerable line: 219: params(opts).merge(",
                "// Line 220:         action:",
                "// Line 221:           UserHistory.actions[",
                "// Line 222:             opts[:new_value].present? ? :post_staff_note_create : :post_staff_note_destroy",
                "// Line 223:           ],",
                "// Line 224:         post_id: post.id,",
                "// Line 225:       )",
                "// Line 226:     args[:new_value] = opts[:new_value] if opts[:new_value].present?",
                "// Line 227:     args[:previous_value] = opts[:old_value] if opts[:old_value].present?",
                "// Line 228: ",
                "// Line 229:     UserHistory.create!(params(opts).merge(args))",
                "// Line 230:   end",
                "// Line 231: ",
                "// Line 232:   def log_site_setting_change(setting_name, previous_value, new_value, opts = {})",
                "// Line 233:     unless setting_name.present? && SiteSetting.respond_to?(setting_name)",
                "// Line 234:       raise Discourse::InvalidParameters.new(:setting_name)",
                "// Line 235:     end",
                "// Line 236:     UserHistory.create!(",
                "// vulnerable line: 237: params(opts).merge(",
                "// Line 238:         action: UserHistory.actions[:change_site_setting],",
                "// Line 239:         subject: setting_name,",
                "// Line 240:         previous_value: previous_value&.to_s,",
                "// Line 241:         new_value: new_value&.to_s,",
                "// Line 242:       ),",
                "// Line 243:     )",
                "// Line 244:   end",
                "// Line 245: ",
                "// Line 246:   def theme_json(theme)",
                "// Line 247:     ThemeSerializer.new(theme, root: false, include_theme_field_values: true).to_json",
                "// Line 266:   end",
                "// Line 267: ",
                "// Line 268:   def log_theme_change(old_json, new_theme, opts = {})",
                "// Line 269:     raise Discourse::InvalidParameters.new(:new_theme) unless new_theme",
                "// Line 270: ",
                "// Line 271:     new_json = theme_json(new_theme)",
                "// Line 272: ",
                "// Line 273:     old_json, new_json = strip_duplicates(old_json, new_json)",
                "// Line 274: ",
                "// Line 275:     UserHistory.create!(",
                "// vulnerable line: 276: params(opts).merge(",
                "// Line 277:         action: UserHistory.actions[:change_theme],",
                "// Line 278:         subject: new_theme.name,",
                "// vulnerable line: 279: previous_value: old_json,",
                "// vulnerable line: 280: new_value: new_json,",
                "// Line 281:       ),",
                "// Line 282:     )",
                "// Line 283:   end",
                "// Line 284: ",
                "// Line 285:   def log_theme_destroy(theme, opts = {})",
                "// Line 286:     raise Discourse::InvalidParameters.new(:theme) unless theme",
                "// Line 287:     UserHistory.create!(",
                "// vulnerable line: 288: params(opts).merge(",
                "// Line 289:         action: UserHistory.actions[:delete_theme],",
                "// Line 290:         subject: theme.name,",
                "// vulnerable line: 291: previous_value: theme_json(theme),",
                "// Line 292:       ),",
                "// Line 293:     )",
                "// Line 294:   end",
                "// Line 295: ",
                "// Line 296:   def log_theme_component_disabled(component)",
                "// Line 297:     UserHistory.create!(",
                "// Line 298:       params.merge(",
                "// Line 299:         action: UserHistory.actions[:disable_theme_component],",
                "// Line 300:         subject: component.name,",
                "// Line 301:         context: component.id,",
                "// Line 313:     )",
                "// Line 314:   end",
                "// Line 315: ",
                "// Line 316:   def log_theme_setting_change(setting_name, previous_value, new_value, theme, opts = {})",
                "// Line 317:     raise Discourse::InvalidParameters.new(:theme) unless theme",
                "// Line 318:     unless theme.cached_settings.has_key?(setting_name)",
                "// Line 319:       raise Discourse::InvalidParameters.new(:setting_name)",
                "// Line 320:     end",
                "// Line 321: ",
                "// Line 322:     UserHistory.create!(",
                "// vulnerable line: 323: params(opts).merge(",
                "// Line 324:         action: UserHistory.actions[:change_theme_setting],",
                "// Line 325:         subject: \"#{theme.name}: #{setting_name}\",",
                "// Line 326:         previous_value: previous_value,",
                "// Line 327:         new_value: new_value,",
                "// Line 328:       ),",
                "// Line 329:     )",
                "// Line 330:   end",
                "// Line 331: ",
                "// Line 332:   def log_site_text_change(subject, new_text = nil, old_text = nil, opts = {})",
                "// Line 333:     raise Discourse::InvalidParameters.new(:subject) unless subject.present?",
                "// Line 334:     UserHistory.create!(",
                "// vulnerable line: 335: params(opts).merge(",
                "// Line 336:         action: UserHistory.actions[:change_site_text],",
                "// Line 337:         subject: subject,",
                "// Line 338:         previous_value: old_text,",
                "// Line 339:         new_value: new_text,",
                "// Line 340:       ),",
                "// Line 341:     )",
                "// Line 342:   end",
                "// Line 343: ",
                "// Line 344:   def log_username_change(user, old_username, new_username, opts = {})",
                "// Line 345:     raise Discourse::InvalidParameters.new(:user) unless user",
                "// Line 346:     UserHistory.create!(",
                "// vulnerable line: 347: params(opts).merge(",
                "// Line 348:         action: UserHistory.actions[:change_username],",
                "// Line 349:         target_user_id: user.id,",
                "// Line 350:         previous_value: old_username,",
                "// Line 351:         new_value: new_username,",
                "// Line 352:       ),",
                "// Line 353:     )",
                "// Line 354:   end",
                "// Line 355: ",
                "// Line 356:   def log_name_change(user_id, old_name, new_name, opts = {})",
                "// Line 357:     raise Discourse::InvalidParameters.new(:user) unless user_id",
                "// Line 358:     UserHistory.create!(",
                "// vulnerable line: 359: params(opts).merge(",
                "// Line 360:         action: UserHistory.actions[:change_name],",
                "// Line 361:         target_user_id: user_id,",
                "// Line 362:         previous_value: old_name,",
                "// Line 363:         new_value: new_name,",
                "// Line 364:       ),",
                "// Line 365:     )",
                "// Line 366:   end",
                "// Line 367: ",
                "// Line 368:   def log_user_suspend(user, reason, opts = {})",
                "// Line 369:     raise Discourse::InvalidParameters.new(:user) unless user",
                "// Line 370: ",
                "// Line 371:     details = StaffMessageFormat.new(:suspend, reason, opts[:message]).format",
                "// Line 372: ",
                "// Line 373:     args =",
                "// vulnerable line: 374: params(opts).merge(",
                "// Line 375:         action: UserHistory.actions[:suspend_user],",
                "// Line 376:         target_user_id: user.id,",
                "// Line 377:         details: details,",
                "// Line 378:       )",
                "// Line 379:     args[:post_id] = opts[:post_id] if opts[:post_id]",
                "// Line 380:     UserHistory.create!(args)",
                "// Line 381:   end",
                "// Line 382: ",
                "// Line 383:   def log_user_unsuspend(user, opts = {})",
                "// Line 384:     raise Discourse::InvalidParameters.new(:user) unless user",
                "// Line 385:     UserHistory.create!(",
                "// Line 386:       params(opts).merge(action: UserHistory.actions[:unsuspend_user], target_user_id: user.id),",
                "// Line 387:     )",
                "// Line 388:   end",
                "// Line 389: ",
                "// Line 390:   def log_user_merge(user, source_username, source_email, opts = {})",
                "// Line 391:     raise Discourse::InvalidParameters.new(:user) unless user",
                "// Line 392:     UserHistory.create!(",
                "// vulnerable line: 393: params(opts).merge(",
                "// Line 394:         action: UserHistory.actions[:merge_user],",
                "// Line 395:         target_user_id: user.id,",
                "// Line 396:         context: I18n.t(\"staff_action_logs.user_merged\", username: source_username),",
                "// Line 397:         email: source_email,",
                "// Line 398:       ),",
                "// Line 399:     )",
                "// Line 400:   end",
                "// Line 401: ",
                "// Line 402:   BADGE_FIELDS ||= %i[",
                "// Line 403:     id",
                "// Line 457: ",
                "// Line 458:     UserHistory.create!(",
                "// Line 459:       params.merge(action: UserHistory.actions[:delete_badge], details: details.join(\"",
                "// Line 460: \")),",
                "// Line 461:     )",
                "// Line 462:   end",
                "// Line 463: ",
                "// Line 464:   def log_badge_grant(user_badge, opts = {})",
                "// Line 465:     raise Discourse::InvalidParameters.new(:user_badge) unless user_badge",
                "// Line 466:     UserHistory.create!(",
                "// vulnerable line: 467: params(opts).merge(",
                "// Line 468:         action: UserHistory.actions[:grant_badge],",
                "// Line 469:         target_user_id: user_badge.user_id,",
                "// Line 470:         details: user_badge.badge.name,",
                "// Line 471:       ),",
                "// Line 472:     )",
                "// Line 473:   end",
                "// Line 474: ",
                "// Line 475:   def log_badge_revoke(user_badge, opts = {})",
                "// Line 476:     raise Discourse::InvalidParameters.new(:user_badge) unless user_badge",
                "// Line 477:     UserHistory.create!(",
                "// vulnerable line: 478: params(opts).merge(",
                "// Line 479:         action: UserHistory.actions[:revoke_badge],",
                "// Line 480:         target_user_id: user_badge.user_id,",
                "// Line 481:         details: user_badge.badge.name,",
                "// Line 482:       ),",
                "// Line 483:     )",
                "// Line 484:   end",
                "// Line 485: ",
                "// Line 486:   def log_title_revoke(user, opts = {})",
                "// Line 487:     raise Discourse::InvalidParameters.new(:user) unless user",
                "// Line 488:     UserHistory.create!(",
                "// vulnerable line: 489: params(opts).merge(",
                "// Line 490:         action: UserHistory.actions[:revoke_title],",
                "// Line 491:         target_user_id: user.id,",
                "// Line 492:         details: opts[:revoke_reason],",
                "// Line 493:         previous_value: opts[:previous_value],",
                "// Line 494:       ),",
                "// Line 495:     )",
                "// Line 496:   end",
                "// Line 497: ",
                "// Line 498:   def log_title_change(user, opts = {})",
                "// Line 499:     raise Discourse::InvalidParameters.new(:user) unless user",
                "// Line 500:     UserHistory.create!(",
                "// vulnerable line: 501: params(opts).merge(",
                "// Line 502:         action: UserHistory.actions[:change_title],",
                "// Line 503:         target_user_id: user.id,",
                "// Line 504:         details: opts[:details],",
                "// Line 505:         new_value: opts[:new_value],",
                "// Line 506:         previous_value: opts[:previous_value],",
                "// Line 507:       ),",
                "// Line 508:     )",
                "// Line 509:   end",
                "// Line 510: ",
                "// Line 511:   def log_change_upload_secure_status(opts = {})",
                "// Line 512:     UserHistory.create!(",
                "// vulnerable line: 513: params(opts).merge(",
                "// Line 514:         action: UserHistory.actions[:override_upload_secure_status],",
                "// Line 515:         details: [",
                "// Line 516:           \"upload_id: #{opts[:upload_id]}\",",
                "// Line 517:           \"reason: #{I18n.t(\"uploads.marked_insecure_from_theme_component_reason\")}\",",
                "// Line 518:         ].join(\"",
                "// Line 519: \"),",
                "// Line 520:         new_value: opts[:new_value],",
                "// Line 521:       ),",
                "// Line 522:     )",
                "// Line 523:   end",
                "// Line 525:   def log_check_email(user, opts = {})",
                "// Line 526:     raise Discourse::InvalidParameters.new(:user) unless user",
                "// Line 527:     UserHistory.create!(",
                "// Line 528:       params(opts).merge(action: UserHistory.actions[:check_email], target_user_id: user.id),",
                "// Line 529:     )",
                "// Line 530:   end",
                "// Line 531: ",
                "// Line 532:   def log_show_emails(users, opts = {})",
                "// Line 533:     return if users.blank?",
                "// Line 534:     UserHistory.create!(",
                "// vulnerable line: 535: params(opts).merge(",
                "// Line 536:         action: UserHistory.actions[:check_email],",
                "// Line 537:         details: users.map { |u| \"[#{u.id}] #{u.username}\" }.join(\"",
                "// Line 538: \"),",
                "// Line 539:       ),",
                "// Line 540:     )",
                "// Line 541:   end",
                "// Line 542: ",
                "// Line 543:   def log_impersonate(user, opts = {})",
                "// Line 544:     raise Discourse::InvalidParameters.new(:user) unless user",
                "// Line 545:     UserHistory.create!(",
                "// Line 546:       params(opts).merge(action: UserHistory.actions[:impersonate], target_user_id: user.id),",
                "// Line 547:     )",
                "// Line 548:   end",
                "// Line 549: ",
                "// Line 550:   def log_roll_up(subnet, ips, opts = {})",
                "// Line 551:     UserHistory.create!(",
                "// vulnerable line: 552: params(opts).merge(",
                "// Line 553:         action: UserHistory.actions[:roll_up],",
                "// Line 554:         details: \"#{subnet} from #{ips.join(\", \")}\",",
                "// Line 555:       ),",
                "// Line 556:     )",
                "// Line 557:   end",
                "// Line 558: ",
                "// Line 559:   def log_category_settings_change(",
                "// Line 560:     category,",
                "// Line 561:     category_params,",
                "// Line 562:     old_permissions: nil,",
                "// Line 630:         category_id: category.id,",
                "// Line 631:         context: category.url,",
                "// Line 632:       ),",
                "// Line 633:     )",
                "// Line 634:   end",
                "// Line 635: ",
                "// Line 636:   def log_silence_user(user, opts = {})",
                "// Line 637:     raise Discourse::InvalidParameters.new(:user) unless user",
                "// Line 638: ",
                "// Line 639:     create_args =",
                "// vulnerable line: 640: params(opts).merge(",
                "// Line 641:         action: UserHistory.actions[:silence_user],",
                "// Line 642:         target_user_id: user.id,",
                "// Line 643:         details: opts[:details],",
                "// Line 644:       )",
                "// Line 645:     create_args[:post_id] = opts[:post_id] if opts[:post_id]",
                "// Line 646: ",
                "// Line 647:     UserHistory.create!(create_args)",
                "// Line 648:   end",
                "// Line 649: ",
                "// Line 650:   def log_unsilence_user(user, opts = {})",
                "// Line 651:     raise Discourse::InvalidParameters.new(:user) unless user",
                "// Line 652:     UserHistory.create!(",
                "// Line 653:       params(opts).merge(action: UserHistory.actions[:unsilence_user], target_user_id: user.id),",
                "// Line 654:     )",
                "// Line 655:   end",
                "// Line 656: ",
                "// Line 657:   def log_disable_second_factor_auth(user, opts = {})",
                "// Line 658:     raise Discourse::InvalidParameters.new(:user) unless user",
                "// Line 659:     UserHistory.create!(",
                "// vulnerable line: 660: params(opts).merge(",
                "// Line 661:         action: UserHistory.actions[:disabled_second_factor],",
                "// Line 662:         target_user_id: user.id,",
                "// Line 663:       ),",
                "// Line 664:     )",
                "// Line 665:   end",
                "// Line 666: ",
                "// Line 667:   def log_grant_admin(user, opts = {})",
                "// Line 668:     raise Discourse::InvalidParameters.new(:user) unless user",
                "// Line 669:     UserHistory.create!(",
                "// Line 670:       params(opts).merge(action: UserHistory.actions[:grant_admin], target_user_id: user.id),",
                "// Line 687: ",
                "// Line 688:   def log_revoke_moderation(user, opts = {})",
                "// Line 689:     raise Discourse::InvalidParameters.new(:user) unless user",
                "// Line 690:     UserHistory.create!(",
                "// Line 691:       params(opts).merge(action: UserHistory.actions[:revoke_moderation], target_user_id: user.id),",
                "// Line 692:     )",
                "// Line 693:   end",
                "// Line 694: ",
                "// Line 695:   def log_backup_create(opts = {})",
                "// Line 696:     UserHistory.create!(",
                "// vulnerable line: 697: params(opts).merge(",
                "// Line 698:         action: UserHistory.actions[:backup_create],",
                "// Line 699:         ip_address: @admin.ip_address.to_s,",
                "// Line 700:       ),",
                "// Line 701:     )",
                "// Line 702:   end",
                "// Line 703: ",
                "// Line 704:   def log_entity_export(entity, opts = {})",
                "// Line 705:     UserHistory.create!(",
                "// vulnerable line: 706: params(opts).merge(",
                "// Line 707:         action: UserHistory.actions[:entity_export],",
                "// Line 708:         ip_address: @admin.ip_address.to_s,",
                "// Line 709:         subject: entity,",
                "// Line 710:       ),",
                "// Line 711:     )",
                "// Line 712:   end",
                "// Line 713: ",
                "// Line 714:   def log_backup_download(backup, opts = {})",
                "// Line 715:     raise Discourse::InvalidParameters.new(:backup) unless backup",
                "// Line 716:     UserHistory.create!(",
                "// vulnerable line: 717: params(opts).merge(",
                "// Line 718:         action: UserHistory.actions[:backup_download],",
                "// Line 719:         ip_address: @admin.ip_address.to_s,",
                "// Line 720:         details: backup.filename,",
                "// Line 721:       ),",
                "// Line 722:     )",
                "// Line 723:   end",
                "// Line 724: ",
                "// Line 725:   def log_backup_destroy(backup, opts = {})",
                "// Line 726:     raise Discourse::InvalidParameters.new(:backup) unless backup",
                "// Line 727:     UserHistory.create!(",
                "// vulnerable line: 728: params(opts).merge(",
                "// Line 729:         action: UserHistory.actions[:backup_destroy],",
                "// Line 730:         ip_address: @admin.ip_address.to_s,",
                "// Line 731:         details: backup.filename,",
                "// Line 732:       ),",
                "// Line 733:     )",
                "// Line 734:   end",
                "// Line 735: ",
                "// Line 736:   def log_revoke_email(user, reason, opts = {})",
                "// Line 737:     UserHistory.create!(",
                "// vulnerable line: 738: params(opts).merge(",
                "// Line 739:         action: UserHistory.actions[:revoke_email],",
                "// Line 740:         target_user_id: user.id,",
                "// Line 741:         details: reason,",
                "// Line 742:       ),",
                "// Line 743:     )",
                "// Line 744:   end",
                "// Line 745: ",
                "// Line 746:   def log_user_approve(user, opts = {})",
                "// Line 747:     UserHistory.create!(",
                "// Line 748:       params(opts).merge(action: UserHistory.actions[:approve_user], target_user_id: user.id),",
                "// Line 749:     )",
                "// Line 750:   end",
                "// Line 751: ",
                "// Line 752:   def log_user_deactivate(user, reason, opts = {})",
                "// Line 753:     raise Discourse::InvalidParameters.new(:user) unless user",
                "// Line 754:     UserHistory.create!(",
                "// vulnerable line: 755: params(opts).merge(",
                "// Line 756:         action: UserHistory.actions[:deactivate_user],",
                "// Line 757:         target_user_id: user.id,",
                "// Line 758:         details: reason,",
                "// Line 759:       ),",
                "// Line 760:     )",
                "// Line 761:   end",
                "// Line 762: ",
                "// Line 763:   def log_user_activate(user, reason, opts = {})",
                "// Line 764:     raise Discourse::InvalidParameters.new(:user) unless user",
                "// Line 765:     UserHistory.create!(",
                "// vulnerable line: 766: params(opts).merge(",
                "// Line 767:         action: UserHistory.actions[:activate_user],",
                "// Line 768:         target_user_id: user.id,",
                "// Line 769:         details: reason,",
                "// Line 770:       ),",
                "// Line 771:     )",
                "// Line 772:   end",
                "// Line 773: ",
                "// Line 774:   def log_wizard_step(step, opts = {})",
                "// Line 775:     raise Discourse::InvalidParameters.new(:step) unless step",
                "// Line 776:     UserHistory.create!(",
                "// Line 784:         action: UserHistory.actions[:change_readonly_mode],",
                "// Line 785:         previous_value: !state,",
                "// Line 786:         new_value: state,",
                "// Line 787:       ),",
                "// Line 788:     )",
                "// Line 789:   end",
                "// Line 790: ",
                "// Line 791:   def log_check_personal_message(topic, opts = {})",
                "// Line 792:     raise Discourse::InvalidParameters.new(:topic) unless topic && topic.is_a?(Topic)",
                "// Line 793:     UserHistory.create!(",
                "// vulnerable line: 794: params(opts).merge(",
                "// Line 795:         action: UserHistory.actions[:check_personal_message],",
                "// Line 796:         topic_id: topic.id,",
                "// Line 797:         context: topic.relative_url,",
                "// Line 798:       ),",
                "// Line 799:     )",
                "// Line 800:   end",
                "// Line 801: ",
                "// Line 802:   def log_post_approved(post, opts = {})",
                "// Line 803:     raise Discourse::InvalidParameters.new(:post) unless post.is_a?(Post)",
                "// Line 804:     UserHistory.create!(",
                "// Line 812:     topic = reviewable.topic || Topic.with_deleted.find_by(id: reviewable.topic_id)",
                "// Line 813:     topic_title = topic&.title || I18n.t(\"staff_action_logs.not_found\")",
                "// Line 814:     username = reviewable.target_created_by&.username || I18n.t(\"staff_action_logs.unknown\")",
                "// Line 815:     name = reviewable.target_created_by&.name || I18n.t(\"staff_action_logs.unknown\")",
                "// Line 816: ",
                "// Line 817:     details = [",
                "// Line 818:       \"created_at: #{reviewable.created_at}\",",
                "// Line 819:       \"rejected_at: #{rejected_at}\",",
                "// Line 820:       \"user: #{username} (#{name})\",",
                "// Line 821:       \"topic: #{topic_title}\",",
                "// vulnerable line: 822: \"raw: #{reviewable.payload[\"raw\"]}\",",
                "// Line 823:     ]",
                "// Line 824: ",
                "// Line 825:     UserHistory.create!(",
                "// Line 826:       params(opts).merge(action: UserHistory.actions[:post_rejected], details: details.join(\"",
                "// Line 827: \")),",
                "// Line 828:     )",
                "// Line 829:   end",
                "// Line 830: ",
                "// Line 831:   def log_web_hook(web_hook, action, opts = {})",
                "// Line 832:     details = [\"webhook_id: #{web_hook.id}\", \"payload_url: #{web_hook.payload_url}\"]",
                "// Line 833: ",
                "// Line 834:     old_values, new_values = get_changes(opts[:changes])",
                "// Line 835: ",
                "// Line 836:     UserHistory.create!(",
                "// vulnerable line: 837: params(opts).merge(",
                "// Line 838:         action: action,",
                "// Line 839:         context: details.join(\", \"),",
                "// Line 840:         previous_value: old_values&.join(\", \"),",
                "// Line 841:         new_value: new_values&.join(\", \"),",
                "// Line 842:       ),",
                "// Line 843:     )",
                "// Line 844:   end",
                "// Line 845: ",
                "// Line 846:   def log_web_hook_deactivate(web_hook, response_http_status, opts = {})",
                "// Line 847:     context = [\"webhook_id: #{web_hook.id}\", \"webhook_response_status: #{response_http_status}\"]",
                "// Line 853:         details:",
                "// Line 854:           I18n.t(\"staff_action_logs.webhook_deactivation_reason\", status: response_http_status),",
                "// Line 855:       ),",
                "// Line 856:     )",
                "// Line 857:   end",
                "// Line 858: ",
                "// Line 859:   def log_embeddable_host(embeddable_host, action, opts = {})",
                "// Line 860:     old_values, new_values = get_changes(opts[:changes])",
                "// Line 861: ",
                "// Line 862:     UserHistory.create!(",
                "// vulnerable line: 863: params(opts).merge(",
                "// Line 864:         action: action,",
                "// Line 865:         context: \"host: #{embeddable_host.host}\",",
                "// Line 866:         previous_value: old_values&.join(\", \"),",
                "// Line 867:         new_value: new_values&.join(\", \"),",
                "// Line 868:       ),",
                "// Line 869:     )",
                "// Line 870:   end",
                "// Line 871: ",
                "// Line 872:   def log_api_key(api_key, action, opts = {})",
                "// Line 873:     opts[:changes]&.delete(\"key\") # Do not log the full key"
            ]
        },
        {
            "filename_of_changes": "user_history.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "17",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "users_controller.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "18",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "users_controller_spec.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "24",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        }
    ]
}