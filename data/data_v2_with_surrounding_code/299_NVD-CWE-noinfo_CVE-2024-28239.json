{
    "cve_id": "CVE-2024-28239",
    "cve_description": "Directus is a real-time API and App dashboard for managing SQL database content. The authentication API has a `redirect` parameter that can be exploited as an open redirect vulnerability as the user tries to log in via the API URL. There's a redirect that is done after successful login via the Auth API GET request to `directus/auth/login/google?redirect=http://malicious-fishing-site.com`. While credentials don't seem to be passed to the attacker site, the user can be phished into clicking a legitimate directus site and be taken to a malicious site made to look like a an error message \"Your password needs to be updated\" to phish out the current password. Users who login via OAuth2 into Directus may be at risk. This issue has been addressed in version 10.10.0. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "cve_publish_date": "2024-03-12T21:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Fix URL Redirection in OAuth2/OpenID/SAML (#21238)\n\nCo-authored-by: Pascal Jufer <pascal-jufer@bluewin.ch>\r\nCo-authored-by: Azri Kahar <42867097+azrikahar@users.noreply.github.com>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "is-url-allowed.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "5",
            "number_of_lines_deleted_vulnerable_to_cve": "5",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: import { toArray } from '@directus/utils';",
                "// Line 2: import { URL } from 'url';",
                "// Line 3: import { useLogger } from '../logger.js';",
                "// Line 4: ",
                "// Line 5: /**",
                "// vulnerable line: 6: * Check if url matches allow list either exactly or by domain+path",
                "// Line 7:  */",
                "// Line 8: export default function isUrlAllowed(url: string, allowList: string | string[]): boolean {",
                "// Line 9:     const logger = useLogger();",
                "// Line 10: ",
                "// Line 11:     const urlAllowList = toArray(allowList);",
                "// Line 12: ",
                "// Line 13:     if (urlAllowList.includes(url)) return true;",
                "// Line 14: ",
                "// Line 15:     const parsedWhitelist = urlAllowList",
                "// Line 16:         .map((allowedURL) => {",
                "// Line 17:             try {",
                "// vulnerable line: 18: const { hostname, pathname } = new URL(allowedURL);",
                "// vulnerable line: 19: return hostname + pathname;",
                "// Line 20:             } catch {",
                "// Line 21:                 logger.warn(`Invalid URL used \"${url}\"`);",
                "// Line 22:             }",
                "// Line 23: ",
                "// Line 24:             return null;",
                "// Line 25:         })",
                "// Line 26:         .filter((f) => f) as string[];",
                "// Line 27: ",
                "// Line 28:     try {",
                "// vulnerable line: 29: const { hostname, pathname } = new URL(url);",
                "// vulnerable line: 30: return parsedWhitelist.includes(hostname + pathname);",
                "// Line 31:     } catch {",
                "// Line 32:         return false;",
                "// Line 33:     }",
                "// Line 34: }"
            ]
        },
        {
            "filename_of_changes": "oauth2.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "12",
            "number_of_lines_deleted_vulnerable_to_cve": "9",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 21: import { useLogger } from '../../logger.js';",
                "// Line 22: import { respond } from '../../middleware/respond.js';",
                "// Line 23: import { AuthenticationService } from '../../services/authentication.js';",
                "// Line 24: import { UsersService } from '../../services/users.js';",
                "// Line 25: import type { AuthData, AuthDriverOptions, User } from '../../types/index.js';",
                "// Line 26: import asyncHandler from '../../utils/async-handler.js';",
                "// Line 27: import { getConfigFromEnv } from '../../utils/get-config-from-env.js';",
                "// Line 28: import { getIPFromReq } from '../../utils/get-ip-from-req.js';",
                "// Line 29: import { Url } from '../../utils/url.js';",
                "// Line 30: import { LocalAuthDriver } from './local.js';",
                "// vulnerable line: 31: import { REFRESH_COOKIE_OPTIONS, SESSION_COOKIE_OPTIONS } from '../../constants.js';",
                "// Line 32: ",
                "// Line 33: export class OAuth2AuthDriver extends LocalAuthDriver {",
                "// Line 34:     client: Client;",
                "// Line 35:     redirectUrl: string;",
                "// Line 36:     usersService: UsersService;",
                "// Line 37:     config: Record<string, any>;",
                "// Line 38: ",
                "// Line 39:     constructor(options: AuthDriverOptions, config: Record<string, any>) {",
                "// Line 40:         super(options, config);",
                "// Line 41: ",
                "// Line 47:         if (!authorizeUrl || !accessUrl || !profileUrl || !clientId || !clientSecret || !additionalConfig['provider']) {",
                "// Line 48:             logger.error('Invalid provider config');",
                "// Line 49:             throw new InvalidProviderConfigError({ provider: additionalConfig['provider'] });",
                "// Line 50:         }",
                "// Line 51: ",
                "// Line 52:         const redirectUrl = new Url(env['PUBLIC_URL'] as string).addPath(",
                "// Line 53:             'auth',",
                "// Line 54:             'login',",
                "// Line 55:             additionalConfig['provider'],",
                "// Line 56:             'callback',",
                "// vulnerable line: 57: );",
                "// Line 58: ",
                "// Line 59:         this.redirectUrl = redirectUrl.toString();",
                "// Line 60:         this.usersService = new UsersService({ knex: this.knex, schema: this.schema });",
                "// Line 61:         this.config = additionalConfig;",
                "// Line 62: ",
                "// Line 63:         const issuer = new Issuer({",
                "// Line 64:             authorization_endpoint: authorizeUrl,",
                "// Line 65:             token_endpoint: accessUrl,",
                "// Line 66:             userinfo_endpoint: profileUrl,",
                "// Line 67:             issuer: additionalConfig['provider'],",
                "// Line 68:         });",
                "// Line 69: ",
                "// Line 70:         const clientOptionsOverrides = getConfigFromEnv(",
                "// Line 71:             `AUTH_${config['provider'].toUpperCase()}_CLIENT_`,",
                "// Line 72:             [`AUTH_${config['provider'].toUpperCase()}_CLIENT_ID`, `AUTH_${config['provider'].toUpperCase()}_CLIENT_SECRET`],",
                "// Line 73:             'underscore',",
                "// vulnerable line: 74: );",
                "// Line 75: ",
                "// Line 76:         this.client = new issuer.Client({",
                "// Line 77:             client_id: clientId,",
                "// Line 78:             client_secret: clientSecret,",
                "// Line 79:             redirect_uris: [this.redirectUrl],",
                "// Line 80:             response_types: ['code'],",
                "// Line 81:             ...clientOptionsOverrides,",
                "// Line 82:         });",
                "// Line 83:     }",
                "// Line 84: ",
                "// Line 133: ",
                "// Line 134:         try {",
                "// Line 135:             const codeChallenge = plainCodeChallenge",
                "// Line 136:                 ? payload['codeVerifier']",
                "// Line 137:                 : generators.codeChallenge(payload['codeVerifier']);",
                "// Line 138: ",
                "// Line 139:             tokenSet = await this.client.oauthCallback(",
                "// Line 140:                 this.redirectUrl,",
                "// Line 141:                 { code: payload['code'], state: payload['state'] },",
                "// Line 142:                 { code_verifier: payload['codeVerifier'], state: codeChallenge },",
                "// vulnerable line: 143: );",
                "// Line 144: ",
                "// Line 145:             userInfo = await this.client.userinfo(tokenSet.access_token!);",
                "// Line 146:         } catch (e) {",
                "// Line 147:             throw handleError(e);",
                "// Line 148:         }",
                "// Line 149: ",
                "// Line 150:         // Flatten response to support dot indexes",
                "// Line 151:         userInfo = flatten(userInfo) as Record<string, unknown>;",
                "// Line 152: ",
                "// Line 153:         const { provider, emailKey, identifierKey, allowPublicRegistration } = this.config;",
                "// Line 172:         };",
                "// Line 173: ",
                "// Line 174:         const userId = await this.fetchUserId(identifier);",
                "// Line 175: ",
                "// Line 176:         if (userId) {",
                "// Line 177:             // Run hook so the end user has the chance to augment the",
                "// Line 178:             // user that is about to be updated",
                "// Line 179:             const updatedUserPayload = await emitter.emitFilter(",
                "// Line 180:                 `auth.update`,",
                "// Line 181:                 { auth_data: userPayload.auth_data },",
                "// vulnerable line: 182: {",
                "// Line 183:                     identifier,",
                "// Line 184:                     provider: this.config['provider'],",
                "// Line 185:                     providerPayload: { accessToken: tokenSet.access_token, userInfo },",
                "// vulnerable line: 186: },",
                "// Line 187:                 { database: getDatabase(), schema: this.schema, accountability: null },",
                "// vulnerable line: 188: );",
                "// Line 189: ",
                "// Line 190:             // Update user to update refresh_token and other properties that might have changed",
                "// Line 191:             if (Object.values(updatedUserPayload).some((value) => value !== undefined)) {",
                "// Line 192:                 await this.usersService.updateOne(userId, updatedUserPayload);",
                "// Line 193:             }",
                "// Line 194: ",
                "// Line 195:             return userId;",
                "// Line 196:         }",
                "// Line 197: ",
                "// Line 198:         // Is public registration allowed?",
                "// Line 199:         if (!allowPublicRegistration) {",
                "// Line 200:             logger.warn(`[OAuth2] User doesn't exist, and public registration not allowed for provider \"${provider}\"`);",
                "// Line 201:             throw new InvalidCredentialsError();",
                "// Line 202:         }",
                "// Line 203: ",
                "// Line 204:         // Run hook so the end user has the chance to augment the",
                "// Line 205:         // user that is about to be created",
                "// Line 206:         const updatedUserPayload = await emitter.emitFilter(",
                "// Line 207:             `auth.create`,",
                "// Line 208:             userPayload,",
                "// vulnerable line: 209: {",
                "// Line 210:                 identifier,",
                "// Line 211:                 provider: this.config['provider'],",
                "// Line 212:                 providerPayload: { accessToken: tokenSet.access_token, userInfo },",
                "// vulnerable line: 213: },",
                "// Line 214:             { database: getDatabase(), schema: this.schema, accountability: null },",
                "// vulnerable line: 215: );",
                "// Line 216: ",
                "// Line 217:         try {",
                "// Line 218:             await this.usersService.createOne(updatedUserPayload);",
                "// Line 219:         } catch (e) {",
                "// Line 220:             if (isDirectusError(e, ErrorCode.RecordNotUnique)) {",
                "// Line 221:                 logger.warn(e, '[OAuth2] Failed to register user. User not unique');",
                "// Line 222:                 throw new InvalidProviderError();",
                "// Line 223:             }",
                "// Line 224: ",
                "// Line 225:             throw e;",
                "// Line 292:     const router = Router();",
                "// Line 293:     const env = useEnv();",
                "// Line 294: ",
                "// Line 295:     router.get(",
                "// Line 296:         '/',",
                "// Line 297:         (req, res) => {",
                "// Line 298:             const provider = getAuthProvider(providerName) as OAuth2AuthDriver;",
                "// Line 299:             const codeVerifier = provider.generateCodeVerifier();",
                "// Line 300:             const prompt = !!req.query['prompt'];",
                "// Line 301: ",
                "// vulnerable line: 302: const token = jwt.sign(",
                "// vulnerable line: 303: { verifier: codeVerifier, redirect: req.query['redirect'], prompt },",
                "// vulnerable line: 304: env['SECRET'] as string,",
                "// vulnerable line: 305: {",
                "// vulnerable line: 306: expiresIn: '5m',",
                "// vulnerable line: 307: issuer: 'directus',",
                "// vulnerable line: 308: },",
                "// vulnerable line: 309: );",
                "// Line 310: ",
                "// Line 311:             res.cookie(`oauth2.${providerName}`, token, {",
                "// Line 312:                 httpOnly: true,",
                "// Line 313:                 sameSite: 'lax',",
                "// Line 314:             });",
                "// Line 315: ",
                "// Line 316:             return res.redirect(provider.generateAuthUrl(codeVerifier, prompt));",
                "// vulnerable line: 317: },",
                "// Line 318:         respond,",
                "// vulnerable line: 319: );",
                "// Line 320: ",
                "// Line 321:     router.post(",
                "// Line 322:         '/callback',",
                "// Line 323:         express.urlencoded({ extended: false }),",
                "// Line 324:         (req, res) => {",
                "// Line 325:             res.redirect(303, `./callback?${new URLSearchParams(req.body)}`);",
                "// vulnerable line: 326: },",
                "// Line 327:         respond,",
                "// vulnerable line: 328: );",
                "// Line 329: ",
                "// Line 330:     router.get(",
                "// Line 331:         '/callback',",
                "// Line 332:         asyncHandler(async (req, res, next) => {",
                "// Line 333:             const logger = useLogger();",
                "// Line 334: ",
                "// Line 335:             let tokenData;",
                "// Line 336: ",
                "// Line 337:             try {",
                "// Line 338:                 tokenData = jwt.verify(req.cookies[`oauth2.${providerName}`], env['SECRET'] as string, {",
                "// vulnerable line: 339: issuer: 'directus',",
                "// Line 340:                 }) as {",
                "// Line 341:                     verifier: string;",
                "// Line 342:                     redirect?: string;",
                "// Line 343:                     prompt: boolean;",
                "// Line 344:                 };",
                "// Line 345:             } catch (e: any) {",
                "// Line 346:                 logger.warn(e, `[OAuth2] Couldn't verify OAuth2 cookie`);",
                "// Line 347:                 throw new InvalidCredentialsError();",
                "// Line 348:             }",
                "// Line 349: ",
                "// Line 367: ",
                "// Line 368:             const authMode = (env[`AUTH_${providerName.toUpperCase()}_MODE`] ?? 'session') as string;",
                "// Line 369: ",
                "// Line 370:             let authResponse;",
                "// Line 371: ",
                "// Line 372:             try {",
                "// Line 373:                 res.clearCookie(`oauth2.${providerName}`);",
                "// Line 374: ",
                "// Line 375:                 authResponse = await authenticationService.login(",
                "// Line 376:                     providerName,",
                "// vulnerable line: 377: {",
                "// Line 378:                         code: req.query['code'],",
                "// Line 379:                         codeVerifier: verifier,",
                "// Line 380:                         state: req.query['state'],",
                "// vulnerable line: 381: },",
                "// Line 382:                     { session: authMode === 'session' },",
                "// vulnerable line: 383: );",
                "// Line 384:             } catch (error: any) {",
                "// Line 385:                 // Prompt user for a new refresh_token if invalidated",
                "// Line 386:                 if (isDirectusError(error, ErrorCode.InvalidToken) && !prompt) {",
                "// Line 387:                     return res.redirect(`./?${redirect ? `redirect=${redirect}&` : ''}prompt=true`);",
                "// Line 388:                 }",
                "// Line 389: ",
                "// Line 390:                 if (redirect) {",
                "// Line 391:                     let reason = 'UNKNOWN_EXCEPTION';",
                "// Line 392: ",
                "// Line 393:                     if (isDirectusError(error)) {",
                "// Line 415:                 return res.redirect(redirect);",
                "// Line 416:             }",
                "// Line 417: ",
                "// Line 418:             res.locals['payload'] = {",
                "// Line 419:                 data: { access_token: accessToken, refresh_token: refreshToken, expires },",
                "// Line 420:             };",
                "// Line 421: ",
                "// Line 422:             next();",
                "// Line 423:         }),",
                "// Line 424:         respond,",
                "// vulnerable line: 425: );",
                "// Line 426: ",
                "// Line 427:     return router;",
                "// Line 428: }"
            ]
        },
        {
            "filename_of_changes": "openid.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "12",
            "number_of_lines_deleted_vulnerable_to_cve": "10",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 21: import { useLogger } from '../../logger.js';",
                "// Line 22: import { respond } from '../../middleware/respond.js';",
                "// Line 23: import { AuthenticationService } from '../../services/authentication.js';",
                "// Line 24: import { UsersService } from '../../services/users.js';",
                "// Line 25: import type { AuthData, AuthDriverOptions, User } from '../../types/index.js';",
                "// Line 26: import asyncHandler from '../../utils/async-handler.js';",
                "// Line 27: import { getConfigFromEnv } from '../../utils/get-config-from-env.js';",
                "// Line 28: import { getIPFromReq } from '../../utils/get-ip-from-req.js';",
                "// Line 29: import { Url } from '../../utils/url.js';",
                "// Line 30: import { LocalAuthDriver } from './local.js';",
                "// vulnerable line: 31: import { REFRESH_COOKIE_OPTIONS, SESSION_COOKIE_OPTIONS } from '../../constants.js';",
                "// Line 32: ",
                "// Line 33: export class OpenIDAuthDriver extends LocalAuthDriver {",
                "// Line 34:     client: Promise<Client>;",
                "// Line 35:     redirectUrl: string;",
                "// Line 36:     usersService: UsersService;",
                "// Line 37:     config: Record<string, any>;",
                "// Line 38: ",
                "// Line 39:     constructor(options: AuthDriverOptions, config: Record<string, any>) {",
                "// Line 40:         super(options, config);",
                "// Line 41: ",
                "// Line 47:         if (!issuerUrl || !clientId || !clientSecret || !additionalConfig['provider']) {",
                "// Line 48:             logger.error('Invalid provider config');",
                "// Line 49:             throw new InvalidProviderConfigError({ provider: additionalConfig['provider'] });",
                "// Line 50:         }",
                "// Line 51: ",
                "// Line 52:         const redirectUrl = new Url(env['PUBLIC_URL'] as string).addPath(",
                "// Line 53:             'auth',",
                "// Line 54:             'login',",
                "// Line 55:             additionalConfig['provider'],",
                "// Line 56:             'callback',",
                "// vulnerable line: 57: );",
                "// Line 58: ",
                "// Line 59:         const clientOptionsOverrides = getConfigFromEnv(",
                "// Line 60:             `AUTH_${config['provider'].toUpperCase()}_CLIENT_`,",
                "// Line 61:             [`AUTH_${config['provider'].toUpperCase()}_CLIENT_ID`, `AUTH_${config['provider'].toUpperCase()}_CLIENT_SECRET`],",
                "// Line 62:             'underscore',",
                "// vulnerable line: 63: );",
                "// Line 64: ",
                "// Line 65:         this.redirectUrl = redirectUrl.toString();",
                "// Line 66:         this.usersService = new UsersService({ knex: this.knex, schema: this.schema });",
                "// Line 67:         this.config = additionalConfig;",
                "// Line 68: ",
                "// Line 69:         this.client = new Promise((resolve, reject) => {",
                "// Line 70:             Issuer.discover(issuerUrl)",
                "// Line 71:                 .then((issuer) => {",
                "// Line 72:                     const supportedTypes = issuer.metadata['response_types_supported'] as string[] | undefined;",
                "// Line 73: ",
                "// Line 74:                     if (!supportedTypes?.includes('code')) {",
                "// Line 75:                         logger.error('OpenID provider does not support required code flow');",
                "// Line 76: ",
                "// Line 77:                         reject(",
                "// Line 78:                             new InvalidProviderConfigError({",
                "// Line 79:                                 provider: additionalConfig['provider'],",
                "// Line 80:                             }),",
                "// vulnerable line: 81: );",
                "// Line 82:                     }",
                "// Line 83: ",
                "// Line 84:                     resolve(",
                "// Line 85:                         new issuer.Client({",
                "// Line 86:                             client_id: clientId,",
                "// Line 87:                             client_secret: clientSecret,",
                "// Line 88:                             redirect_uris: [this.redirectUrl],",
                "// Line 89:                             response_types: ['code'],",
                "// Line 90:                             ...clientOptionsOverrides,",
                "// Line 91:                         }),",
                "// vulnerable line: 92: );",
                "// Line 93:                 })",
                "// Line 94:                 .catch((e) => {",
                "// Line 95:                     logger.error(e, '[OpenID] Failed to fetch provider config');",
                "// Line 96:                     process.exit(1);",
                "// Line 97:                 });",
                "// Line 98:         });",
                "// Line 99:     }",
                "// Line 100: ",
                "// Line 101:     generateCodeVerifier(): string {",
                "// Line 102:         return generators.codeVerifier();",
                "// Line 153:             const client = await this.client;",
                "// Line 154: ",
                "// Line 155:             const codeChallenge = plainCodeChallenge",
                "// Line 156:                 ? payload['codeVerifier']",
                "// Line 157:                 : generators.codeChallenge(payload['codeVerifier']);",
                "// Line 158: ",
                "// Line 159:             tokenSet = await client.callback(",
                "// Line 160:                 this.redirectUrl,",
                "// Line 161:                 { code: payload['code'], state: payload['state'], iss: payload['iss'] },",
                "// Line 162:                 { code_verifier: payload['codeVerifier'], state: codeChallenge, nonce: codeChallenge },",
                "// vulnerable line: 163: );",
                "// Line 164: ",
                "// Line 165:             userInfo = tokenSet.claims();",
                "// Line 166: ",
                "// Line 167:             if (client.issuer.metadata['userinfo_endpoint']) {",
                "// Line 168:                 userInfo = {",
                "// Line 169:                     ...userInfo,",
                "// Line 170:                     ...(await client.userinfo(tokenSet.access_token!)),",
                "// Line 171:                 };",
                "// Line 172:             }",
                "// Line 173:         } catch (e) {",
                "// Line 199:         };",
                "// Line 200: ",
                "// Line 201:         const userId = await this.fetchUserId(identifier);",
                "// Line 202: ",
                "// Line 203:         if (userId) {",
                "// Line 204:             // Run hook so the end user has the chance to augment the",
                "// Line 205:             // user that is about to be updated",
                "// Line 206:             const updatedUserPayload = await emitter.emitFilter(",
                "// Line 207:                 `auth.update`,",
                "// Line 208:                 { auth_data: userPayload.auth_data },",
                "// vulnerable line: 209: {",
                "// Line 210:                     identifier,",
                "// Line 211:                     provider: this.config['provider'],",
                "// Line 212:                     providerPayload: { accessToken: tokenSet.access_token, userInfo },",
                "// vulnerable line: 213: },",
                "// Line 214:                 { database: getDatabase(), schema: this.schema, accountability: null },",
                "// vulnerable line: 215: );",
                "// Line 216: ",
                "// Line 217:             // Update user to update refresh_token and other properties that might have changed",
                "// Line 218:             if (Object.values(updatedUserPayload).some((value) => value !== undefined)) {",
                "// Line 219:                 await this.usersService.updateOne(userId, updatedUserPayload);",
                "// Line 220:             }",
                "// Line 221: ",
                "// Line 222:             return userId;",
                "// Line 223:         }",
                "// Line 224: ",
                "// Line 225:         const isEmailVerified = !requireVerifiedEmail || userInfo['email_verified'];",
                "// Line 228:         if (!allowPublicRegistration || !isEmailVerified) {",
                "// Line 229:             logger.warn(`[OpenID] User doesn't exist, and public registration not allowed for provider \"${provider}\"`);",
                "// Line 230:             throw new InvalidCredentialsError();",
                "// Line 231:         }",
                "// Line 232: ",
                "// Line 233:         // Run hook so the end user has the chance to augment the",
                "// Line 234:         // user that is about to be created",
                "// Line 235:         const updatedUserPayload = await emitter.emitFilter(",
                "// Line 236:             `auth.create`,",
                "// Line 237:             userPayload,",
                "// vulnerable line: 238: {",
                "// Line 239:                 identifier,",
                "// Line 240:                 provider: this.config['provider'],",
                "// Line 241:                 providerPayload: { accessToken: tokenSet.access_token, userInfo },",
                "// vulnerable line: 242: },",
                "// Line 243:             { database: getDatabase(), schema: this.schema, accountability: null },",
                "// vulnerable line: 244: );",
                "// Line 245: ",
                "// Line 246:         try {",
                "// Line 247:             await this.usersService.createOne(updatedUserPayload);",
                "// Line 248:         } catch (e) {",
                "// Line 249:             if (isDirectusError(e, ErrorCode.RecordNotUnique)) {",
                "// Line 250:                 logger.warn(e, '[OpenID] Failed to register user. User not unique');",
                "// Line 251:                 throw new InvalidProviderError();",
                "// Line 252:             }",
                "// Line 253: ",
                "// Line 254:             throw e;",
                "// Line 323: ",
                "// Line 324:     const router = Router();",
                "// Line 325: ",
                "// Line 326:     router.get(",
                "// Line 327:         '/',",
                "// Line 328:         asyncHandler(async (req, res) => {",
                "// Line 329:             const provider = getAuthProvider(providerName) as OpenIDAuthDriver;",
                "// Line 330:             const codeVerifier = provider.generateCodeVerifier();",
                "// Line 331:             const prompt = !!req.query['prompt'];",
                "// Line 332: ",
                "// vulnerable line: 333: const token = jwt.sign(",
                "// vulnerable line: 334: { verifier: codeVerifier, redirect: req.query['redirect'], prompt },",
                "// vulnerable line: 335: env['SECRET'] as string,",
                "// vulnerable line: 336: {",
                "// vulnerable line: 337: expiresIn: '5m',",
                "// vulnerable line: 338: issuer: 'directus',",
                "// vulnerable line: 339: },",
                "// vulnerable line: 340: );",
                "// Line 341: ",
                "// Line 342:             res.cookie(`openid.${providerName}`, token, {",
                "// Line 343:                 httpOnly: true,",
                "// Line 344:                 sameSite: 'lax',",
                "// Line 345:             });",
                "// Line 346: ",
                "// Line 347:             return res.redirect(await provider.generateAuthUrl(codeVerifier, prompt));",
                "// Line 348:         }),",
                "// Line 349:         respond,",
                "// vulnerable line: 350: );",
                "// Line 351: ",
                "// Line 352:     router.post(",
                "// Line 353:         '/callback',",
                "// Line 354:         express.urlencoded({ extended: false }),",
                "// Line 355:         (req, res) => {",
                "// Line 356:             res.redirect(303, `./callback?${new URLSearchParams(req.body)}`);",
                "// vulnerable line: 357: },",
                "// Line 358:         respond,",
                "// vulnerable line: 359: );",
                "// Line 360: ",
                "// Line 361:     router.get(",
                "// Line 362:         '/callback',",
                "// Line 363:         asyncHandler(async (req, res, next) => {",
                "// Line 364:             const logger = useLogger();",
                "// Line 365: ",
                "// Line 366:             let tokenData;",
                "// Line 367: ",
                "// Line 368:             try {",
                "// Line 369:                 tokenData = jwt.verify(req.cookies[`openid.${providerName}`], env['SECRET'] as string, {",
                "// vulnerable line: 370: issuer: 'directus',",
                "// Line 371:                 }) as {",
                "// Line 372:                     verifier: string;",
                "// Line 373:                     redirect?: string;",
                "// Line 374:                     prompt: boolean;",
                "// Line 375:                 };",
                "// Line 376:             } catch (e: any) {",
                "// Line 377:                 logger.warn(e, `[OpenID] Couldn't verify OpenID cookie`);",
                "// Line 378:                 throw new InvalidCredentialsError();",
                "// Line 379:             }",
                "// Line 380: ",
                "// Line 398: ",
                "// Line 399:             const authMode = (env[`AUTH_${providerName.toUpperCase()}_MODE`] ?? 'session') as string;",
                "// Line 400: ",
                "// Line 401:             let authResponse;",
                "// Line 402: ",
                "// Line 403:             try {",
                "// Line 404:                 res.clearCookie(`openid.${providerName}`);",
                "// Line 405: ",
                "// Line 406:                 authResponse = await authenticationService.login(",
                "// Line 407:                     providerName,",
                "// vulnerable line: 408: {",
                "// Line 409:                         code: req.query['code'],",
                "// Line 410:                         codeVerifier: verifier,",
                "// Line 411:                         state: req.query['state'],",
                "// Line 412:                         iss: req.query['iss'],",
                "// vulnerable line: 413: },",
                "// Line 414:                     { session: authMode === 'session' },",
                "// vulnerable line: 415: );",
                "// Line 416:             } catch (error: any) {",
                "// Line 417:                 // Prompt user for a new refresh_token if invalidated",
                "// Line 418:                 if (isDirectusError(error, ErrorCode.InvalidToken) && !prompt) {",
                "// Line 419:                     return res.redirect(`./?${redirect ? `redirect=${redirect}&` : ''}prompt=true`);",
                "// Line 420:                 }",
                "// Line 421: ",
                "// Line 422:                 logger.warn(error);",
                "// Line 423: ",
                "// Line 424:                 if (redirect) {",
                "// Line 425:                     let reason = 'UNKNOWN_EXCEPTION';",
                "// Line 449:                 return res.redirect(redirect);",
                "// Line 450:             }",
                "// Line 451: ",
                "// Line 452:             res.locals['payload'] = {",
                "// Line 453:                 data: { access_token: accessToken, refresh_token: refreshToken, expires },",
                "// Line 454:             };",
                "// Line 455: ",
                "// Line 456:             next();",
                "// Line 457:         }),",
                "// Line 458:         respond,",
                "// vulnerable line: 459: );",
                "// Line 460: ",
                "// Line 461:     return router;",
                "// Line 462: }"
            ]
        },
        {
            "filename_of_changes": "saml.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "15",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: import * as validator from '@authenio/samlify-node-xmllint';",
                "// Line 2: import { useEnv } from '@directus/env';",
                "// vulnerable line: 3: import { ErrorCode, InvalidCredentialsError, InvalidProviderError, isDirectusError } from '@directus/errors';",
                "// Line 4: import express, { Router } from 'express';",
                "// Line 5: import * as samlify from 'samlify';",
                "// Line 6: import { getAuthProvider } from '../../auth.js';",
                "// Line 7: import { REFRESH_COOKIE_OPTIONS, SESSION_COOKIE_OPTIONS } from '../../constants.js';",
                "// Line 8: import getDatabase from '../../database/index.js';",
                "// Line 9: import emitter from '../../emitter.js';",
                "// Line 10: import { useLogger } from '../../logger.js';",
                "// Line 11: import { respond } from '../../middleware/respond.js';",
                "// Line 12: import { AuthenticationService } from '../../services/authentication.js';",
                "// Line 13: import { UsersService } from '../../services/users.js';",
                "// Line 119:     );",
                "// Line 120: ",
                "// Line 121:     router.get(",
                "// Line 122:         '/',",
                "// Line 123:         asyncHandler(async (req, res) => {",
                "// Line 124:             const { sp, idp } = getAuthProvider(providerName) as SAMLAuthDriver;",
                "// Line 125:             const { context: url } = sp.createLoginRequest(idp, 'redirect');",
                "// Line 126:             const parsedUrl = new URL(url);",
                "// Line 127: ",
                "// Line 128:             if (req.query['redirect']) {",
                "// vulnerable line: 129: parsedUrl.searchParams.append('RelayState', req.query['redirect'] as string);",
                "// Line 130:             }",
                "// Line 131: ",
                "// Line 132:             return res.redirect(parsedUrl.toString());",
                "// Line 133:         }),",
                "// Line 134:     );",
                "// Line 135: ",
                "// Line 136:     router.post(",
                "// Line 137:         '/logout',",
                "// Line 138:         asyncHandler(async (req, res) => {",
                "// Line 139:             const { sp, idp } = getAuthProvider(providerName) as SAMLAuthDriver;"
            ]
        }
    ]
}