{
    "cve_id": "CVE-2024-24762",
    "cve_description": "`python-multipart` is a streaming multipart parser for Python. When using form data, `python-multipart` uses a Regular Expression to parse the HTTP `Content-Type` header, including options. An attacker could send a custom-made `Content-Type` option that is very difficult for the RegEx to process, consuming CPU resources and stalling indefinitely (minutes or more) while holding the main event loop. This means that process can't handle any more requests, leading to regular expression denial of service. This vulnerability has been patched in version 0.0.7.",
    "cve_publish_date": "2024-02-05T15:15Z",
    "cwe_id": "CWE-1333",
    "cwe_name": "Inefficient Regular Expression Complexity",
    "cwe_description": "The product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles.",
    "commit_message": "♻️ Refactor header option parser to use the standard library instead of a custom RegEx (#75)",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "multipart.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "26",
            "number_of_lines_deleted_vulnerable_to_cve": "24",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 71: SPECIAL_CHARS = re.escape(b'()<>@,;:\"/[]?={}     ')",
                "// Line 72: QUOTED_STR = br'\"(?:\\.|[^\"])*\"'",
                "// Line 73: VALUE_STR = br'(?:[^' + SPECIAL_CHARS + br']+|' + QUOTED_STR + br')'",
                "// Line 74: OPTION_RE_STR = (",
                "// Line 75:     br'(?:;|^)\\s*([^' + SPECIAL_CHARS + br']+)\\s*=\\s*(' + VALUE_STR + br')'",
                "// Line 76: )",
                "// Line 77: OPTION_RE = re.compile(OPTION_RE_STR)",
                "// Line 78: QUOTE = b'\"'[0]",
                "// Line 79: ",
                "// Line 80: ",
                "// vulnerable line: 81: def parse_options_header(value):",
                "// Line 82:     \"\"\"",
                "// Line 83:     Parses a Content-Type header into a value in the following format:",
                "// Line 84:         (content_type, {parameters})",
                "// Line 85:     \"\"\"",
                "// Line 86:     if not value:",
                "// Line 87:         return (b'', {})",
                "// Line 88: ",
                "// vulnerable line: 89: # If we are passed a string, we assume that it conforms to WSGI and does",
                "// vulnerable line: 90: # not contain any code point that's not in latin-1.",
                "// vulnerable line: 91: if isinstance(value, str):            # pragma: no cover",
                "// vulnerable line: 92: value = value.encode('latin-1')",
                "// Line 93: ",
                "// Line 94:     # If we have no options, return the string as-is.",
                "// vulnerable line: 95: if b';' not in value:",
                "// vulnerable line: 96: return (value.lower().strip(), {})",
                "// Line 97: ",
                "// Line 98:     # Split at the first semicolon, to get our value and then options.",
                "// vulnerable line: 99: ctype, rest = value.split(b';', 1)",
                "// Line 100:     options = {}",
                "// Line 101: ",
                "// vulnerable line: 102: # Parse the options.",
                "// vulnerable line: 103: for match in OPTION_RE.finditer(rest):",
                "// vulnerable line: 104: key = match.group(1).lower()",
                "// vulnerable line: 105: value = match.group(2)",
                "// vulnerable line: 106: if value[0] == QUOTE and value[-1] == QUOTE:",
                "// vulnerable line: 107: # Unquote the value.",
                "// vulnerable line: 108: value = value[1:-1]",
                "// Line 109:             value = value.replace(b'\\', b'').replace(b'\"', b'\"')",
                "// Line 110: ",
                "// Line 111:         # If the value is a filename, we need to fix a bug on IE6 that sends",
                "// Line 112:         # the full file path instead of the filename.",
                "// vulnerable line: 113: if key == b'filename':",
                "// Line 114:             if value[1:3] == b':' or value[:2] == b'\\':",
                "// Line 115:                 value = value.split(b'')[-1]",
                "// Line 116: ",
                "// vulnerable line: 117: options[key] = value",
                "// Line 118: ",
                "// Line 119:     return ctype, options",
                "// Line 120: ",
                "// Line 121: ",
                "// Line 122: class Field:",
                "// Line 123:     \"\"\"A Field object represents a (parsed) form field.  It represents a single",
                "// Line 124:     field with a corresponding name and value.",
                "// Line 125: ",
                "// Line 126:     The name that a :class:`Field` will be instantiated with is the same name",
                "// Line 127:     that would be found in the following HTML::"
            ]
        }
    ]
}