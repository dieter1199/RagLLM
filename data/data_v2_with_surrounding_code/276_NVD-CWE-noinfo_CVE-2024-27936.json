{
    "cve_id": "CVE-2024-27936",
    "cve_description": "Deno is a JavaScript, TypeScript, and WebAssembly runtime with secure defaults. Starting in version 1.32.1 and prior to version 1.41.0 of the deno library, maliciously crafted permission request can show the spoofed permission prompt by inserting a broken ANSI escape sequence into the request contents. Deno is stripping any ANSI escape sequences from the permission prompt, but permissions given to the program are based on the contents that contain the ANSI escape sequences. Any Deno program can spoof the content of the interactive permission prompt by inserting a broken ANSI code, which allows a malicious Deno program to display the wrong file path or program name to the user. Version 1.41.0 of the deno library contains a patch for the issue.",
    "cve_publish_date": "2024-03-21T02:52Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "feat(core): highlight unprintable chars in permission prompts (#22468)\n\nIf we strip out unprintable chars, we don't see the full filename being\r\nrequested by permission prompts. Instead, we highlight and escape them\r\nto make them visible.",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "prompter.rs",
            "code_language": "Rust",
            "number_of_lines_added_for_mitigation": "21",
            "number_of_lines_deleted_vulnerable_to_cve": "9",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 4: use deno_core::parking_lot::Mutex;",
                "// Line 5: use deno_terminal::colors;",
                "// Line 6: use once_cell::sync::Lazy;",
                "// Line 7: use std::fmt::Write;",
                "// Line 8: use std::io::BufRead;",
                "// Line 9: use std::io::IsTerminal;",
                "// Line 10: use std::io::StderrLock;",
                "// Line 11: use std::io::StdinLock;",
                "// Line 12: use std::io::Write as IoWrite;",
                "// Line 13: ",
                "// vulnerable line: 14: /// Helper function to strip ansi codes and ASCII control characters.",
                "// vulnerable line: 15: fn strip_ansi_codes_and_ascii_control(s: &str) -> std::borrow::Cow<str> {",
                "// vulnerable line: 16: console_static_text::ansi::strip_ansi_codes(s)",
                "// vulnerable line: 17: .chars()",
                "// vulnerable line: 18: .filter(|c| !c.is_ascii_control())",
                "// vulnerable line: 19: .collect()",
                "// Line 20: }",
                "// Line 21: ",
                "// Line 22: pub const PERMISSION_EMOJI: &str = \"⚠️\";",
                "// Line 23: ",
                "// Line 24: // 10kB of permission prompting should be enough for anyone",
                "// Line 25: const MAX_PERMISSION_PROMPT_LENGTH: usize = 10 * 1024;",
                "// Line 26: ",
                "// Line 27: #[derive(Debug, Eq, PartialEq)]",
                "// Line 28: pub enum PromptResponse {",
                "// Line 29:   Allow,",
                "// Line 243:     let mut stderr_lock = std::io::stderr().lock();",
                "// Line 244:     let mut stdin_lock = std::io::stdin().lock();",
                "// Line 245: ",
                "// Line 246:     // For security reasons we must consume everything in stdin so that previously",
                "// Line 247:     // buffered data cannot affect the prompt.",
                "// Line 248:     if let Err(err) = clear_stdin(&mut stdin_lock, &mut stderr_lock) {",
                "// Line 249:       eprintln!(\"Error clearing stdin for permission prompt. {err:#}\");",
                "// Line 250:       return PromptResponse::Deny; // don't grant permission if this fails",
                "// Line 251:     }",
                "// Line 252: ",
                "// vulnerable line: 253: let message = strip_ansi_codes_and_ascii_control(message);",
                "// vulnerable line: 254: let name = strip_ansi_codes_and_ascii_control(name);",
                "// vulnerable line: 255: let api_name = api_name.map(strip_ansi_codes_and_ascii_control);",
                "// Line 256: ",
                "// Line 257:     // print to stderr so that if stdout is piped this is still displayed.",
                "// Line 258:     let opts: String = if is_unary {",
                "// Line 259:       format!(\"[y/n/A] (y = yes, allow; n = no, deny; A = allow all {name} permissions)\")",
                "// Line 260:     } else {",
                "// Line 261:       \"[y/n] (y = yes, allow; n = no, deny)\".to_string()",
                "// Line 262:     };",
                "// Line 263: ",
                "// Line 264:     // output everything in one shot to make the tests more reliable",
                "// Line 265:     {"
            ]
        }
    ]
}