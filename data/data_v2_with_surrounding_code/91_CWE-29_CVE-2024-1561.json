{
    "cve_id": "CVE-2024-1561",
    "cve_description": "An issue was discovered in gradio-app/gradio, where the `/component_server` endpoint improperly allows the invocation of any method on a `Component` class with attacker-controlled arguments. Specifically, by exploiting the `move_resource_to_block_cache()` method of the `Block` class, an attacker can copy any file on the filesystem to a temporary directory and subsequently retrieve it. This vulnerability enables unauthorized local file read access, posing a significant risk especially when the application is exposed to the internet via `launch(share=True)`, thereby allowing remote attackers to read files on the host machine. Furthermore, gradio apps hosted on `huggingface.co` are also affected, potentially leading to the exposure of sensitive information such as API keys and credentials stored in environment variables.",
    "cve_publish_date": "2024-04-16T00:15Z",
    "cwe_id": "CWE-29",
    "cwe_name": "Path Traversal: '\\..\\filename'",
    "cwe_description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '\\..\\filename' (leading backslash dot dot) sequences that can resolve to a location that is outside of that directory.",
    "commit_message": "Component Server fix (#6884)\n\n* changes\r\n\r\n* add changeset\r\n\r\n* Update gradio/routes.py\r\n\r\nCo-authored-by: Aarni Koskela <akx@iki.fi>\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n---------\r\n\r\nCo-authored-by: Ali Abid <ubuntu@ip-172-31-25-241.us-west-2.compute.internal>\r\nCo-authored-by: gradio-pr-bot <gradio-pr-bot@users.noreply.github.com>\r\nCo-authored-by: Aarni Koskela <akx@iki.fi>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "file_explorer.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 48:         scale: int | None = None,",
                "// Line 49:         min_width: int = 160,",
                "// Line 50:         height: int | float | None = None,",
                "// Line 51:         interactive: bool | None = None,",
                "// Line 52:         visible: bool = True,",
                "// Line 53:         elem_id: str | None = None,",
                "// Line 54:         elem_classes: list[str] | str | None = None,",
                "// Line 55:         render: bool = True,",
                "// Line 56:     ):",
                "// Line 57:         \"\"\"",
                "// vulnerable line: 58: Parameters:",
                "// Line 59:             glob: The glob-style pattern used to select which files to display, e.g. \"*\" to match all files, \"*.png\" to match all .png files, \"**/*.txt\" to match any .txt file in any subdirectory, etc. The default value matches all files and folders recursively. See the Python glob documentation at https://docs.python.org/3/library/glob.html for more information.",
                "// Line 60:             value: The file (or list of files, depending on the `file_count` parameter) to show as \"selected\" when the component is first loaded. If a callable is provided, it will be called when the app loads to set the initial value of the component. If not provided, no files are shown as selected.",
                "// Line 61:             file_count: Whether to allow single or multiple files to be selected. If \"single\", the component will return a single absolute file path as a string. If \"multiple\", the component will return a list of absolute file paths as a list of strings.",
                "// Line 62:             root: Path to root directory to select files from. If not provided, defaults to current working directory.",
                "// Line 63:             ignore_glob: The glob-tyle pattern that will be used to exclude files from the list. For example, \"*.py\" will exclude all .py files from the list. See the Python glob documentation at https://docs.python.org/3/library/glob.html for more information.",
                "// Line 64:             label: The label for this component. Appears above the component and is also used as the header if there are a table of examples for this component. If None and used in a `gr.Interface`, the label will be the name of the parameter this component is assigned to.",
                "// Line 65:             every: If `value` is a callable, run the function 'every' number of seconds while the client connection is open. Has no effect otherwise. Queue must be enabled. The event can be accessed (e.g. to cancel it) via this component's .load_event attribute.",
                "// Line 66:             show_label: if True, will display label.",
                "// Line 67:             container: If True, will place the component in a container - providing some extra padding around the border.",
                "// Line 68:             scale: relative width compared to adjacent Components in a Row. For example, if Component A has scale=2, and Component B has scale=1, A will be twice as wide as B. Should be an integer.",
                "// Line 132:             return None",
                "// Line 133: ",
                "// Line 134:         files = [value] if isinstance(value, str) else value",
                "// Line 135:         root = []",
                "// Line 136:         for file in files:",
                "// Line 137:             root.append(self._strip_root(file).split(os.path.sep))",
                "// Line 138: ",
                "// Line 139:         return FileExplorerData(root=root)",
                "// Line 140: ",
                "// Line 141:     @server",
                "// vulnerable line: 142: def ls(self, value=None) -> list[dict[str, str]] | None:",
                "// Line 143:         \"\"\"",
                "// vulnerable line: 144: Parameters:",
                "// vulnerable line: 145: value: file path as a list of strings for each directory level relative to the root.",
                "// Line 146:         Returns:",
                "// Line 147:             tuple of list of files in directory, then list of folders in directory",
                "// Line 148:         \"\"\"",
                "// Line 149: ",
                "// Line 150:         def expand_braces(text, seen=None):",
                "// Line 151:             if seen is None:",
                "// Line 152:                 seen = set()",
                "// Line 153: ",
                "// Line 154:             spans = [m.span() for m in re.finditer(\"{[^{}]*}\", text)][::-1]",
                "// Line 155:             alts = [text[start + 1 : stop - 1].split(\",\") for start, stop in spans]"
            ]
        },
        {
            "filename_of_changes": "routes.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "6",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 700:         @app.post(\"/component_server\", dependencies=[Depends(login_check)])",
                "// Line 701:         @app.post(\"/component_server/\", dependencies=[Depends(login_check)])",
                "// Line 702:         def component_server(body: ComponentServerBody):",
                "// Line 703:             state = app.state_holder[body.session_hash]",
                "// Line 704:             component_id = body.component_id",
                "// Line 705:             block: Block",
                "// Line 706:             if component_id in state:",
                "// Line 707:                 block = state[component_id]",
                "// Line 708:             else:",
                "// Line 709:                 block = app.get_blocks().blocks[component_id]",
                "// vulnerable line: 710: fn = getattr(block, body.fn_name)",
                "// Line 711:             return fn(body.data)",
                "// Line 712: ",
                "// Line 713:         @app.get(",
                "// Line 714:             \"/queue/status\",",
                "// Line 715:             dependencies=[Depends(login_check)],",
                "// Line 716:             response_model=Estimation,",
                "// Line 717:         )",
                "// Line 718:         async def get_queue_status():",
                "// Line 719:             return app.get_blocks()._queue.get_status()",
                "// Line 720: "
            ]
        }
    ]
}