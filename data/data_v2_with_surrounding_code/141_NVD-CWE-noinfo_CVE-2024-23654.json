{
    "cve_id": "CVE-2024-23654",
    "cve_description": "discourse-ai is the AI plugin for the open-source discussion platform Discourse. Prior to commit 94ba0dadc2cf38e8f81c3936974c167219878edd, interactions with different AI services are vulnerable to admin-initiated SSRF attacks. Versions of the plugin that include commit 94ba0dadc2cf38e8f81c3936974c167219878edd contain a patch. As a workaround, one may disable the discourse-ai plugin.\n",
    "cve_publish_date": "2024-02-21T21:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "SECURITY: Place a SSRF protection when calling services from the plugin. (#485)\n\nThe Faraday adapter and `FinalDestionation::HTTP` will protect us from admin-initiated SSRF attacks when interacting with the external services powering this plugin features.:",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "base.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 62:           @tokenizer = tokenizer",
                "// Line 63:         end",
                "// Line 64: ",
                "// Line 65:         def perform_completion!(dialect, user, model_params = {})",
                "// Line 66:           model_params = normalize_model_params(model_params)",
                "// Line 67: ",
                "// Line 68:           @streaming_mode = block_given?",
                "// Line 69: ",
                "// Line 70:           prompt = dialect.translate",
                "// Line 71: ",
                "// vulnerable line: 72: Net::HTTP.start(",
                "// Line 73:             model_uri.host,",
                "// Line 74:             model_uri.port,",
                "// Line 75:             use_ssl: true,",
                "// Line 76:             read_timeout: TIMEOUT,",
                "// Line 77:             open_timeout: TIMEOUT,",
                "// Line 78:             write_timeout: TIMEOUT,",
                "// Line 79:           ) do |http|",
                "// Line 80:             response_data = +\"\"",
                "// Line 81:             response_raw = +\"\"",
                "// Line 82: "
            ]
        },
        {
            "filename_of_changes": "cloudflare_workers_ai.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 7:         headers = { \"Referer\" => Discourse.base_url, \"Content-Type\" => \"application/json\" }",
                "// Line 8: ",
                "// Line 9:         account_id = SiteSetting.ai_cloudflare_workers_account_id",
                "// Line 10:         token = SiteSetting.ai_cloudflare_workers_api_token",
                "// Line 11: ",
                "// Line 12:         base_url = \"https://api.cloudflare.com/client/v4/accounts/#{account_id}/ai/run/@cf/\"",
                "// Line 13:         headers[\"Authorization\"] = \"Bearer #{token}\"",
                "// Line 14: ",
                "// Line 15:         endpoint = \"#{base_url}#{model}\"",
                "// Line 16: ",
                "// vulnerable line: 17: response = Faraday.post(endpoint, content.to_json, headers)",
                "// Line 18: ",
                "// Line 19:         raise Net::HTTPBadResponse if ![200].include?(response.status)",
                "// Line 20: ",
                "// Line 21:         JSON.parse(response.body, symbolize_names: true)",
                "// Line 22:       end",
                "// Line 23:     end",
                "// Line 24:   end",
                "// Line 25: end"
            ]
        },
        {
            "filename_of_changes": "discourse_classifier.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: # frozen_string_literal: true",
                "// Line 2: ",
                "// Line 3: module ::DiscourseAi",
                "// Line 4:   module Inference",
                "// Line 5:     class DiscourseClassifier",
                "// Line 6:       def self.perform!(endpoint, model, content, api_key)",
                "// Line 7:         headers = { \"Referer\" => Discourse.base_url, \"Content-Type\" => \"application/json\" }",
                "// Line 8: ",
                "// Line 9:         headers[\"X-API-KEY\"] = api_key if api_key.present?",
                "// Line 10: ",
                "// vulnerable line: 11: response = Faraday.post(endpoint, { model: model, content: content }.to_json, headers)",
                "// Line 12: ",
                "// Line 13:         raise Net::HTTPBadResponse if ![200, 415].include?(response.status)",
                "// Line 14: ",
                "// Line 15:         JSON.parse(response.body, symbolize_names: true)",
                "// Line 16:       end",
                "// Line 17:     end",
                "// Line 18:   end",
                "// Line 19: end"
            ]
        },
        {
            "filename_of_changes": "discourse_reranker.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 2: ",
                "// Line 3: module ::DiscourseAi",
                "// Line 4:   module Inference",
                "// Line 5:     class DiscourseReranker",
                "// Line 6:       def self.perform!(endpoint, model, content, candidates, api_key)",
                "// Line 7:         headers = { \"Referer\" => Discourse.base_url, \"Content-Type\" => \"application/json\" }",
                "// Line 8: ",
                "// Line 9:         headers[\"X-API-KEY\"] = api_key if api_key.present?",
                "// Line 10: ",
                "// Line 11:         response =",
                "// vulnerable line: 12: Faraday.post(",
                "// Line 13:             endpoint,",
                "// Line 14:             { model: model, content: content, candidates: candidates }.to_json,",
                "// Line 15:             headers,",
                "// Line 16:           )",
                "// Line 17: ",
                "// Line 18:         raise Net::HTTPBadResponse unless response.status == 200",
                "// Line 19: ",
                "// Line 20:         JSON.parse(response.body, symbolize_names: true)",
                "// Line 21:       end",
                "// Line 22:     end"
            ]
        },
        {
            "filename_of_changes": "endpoint_compliance.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "5",
            "number_of_lines_deleted_vulnerable_to_cve": "5",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 94:           description: \"the unit of measurement celcius c or fahrenheit f\",",
                "// Line 95:           enum: %w[c f],",
                "// Line 96:           required: true,",
                "// Line 97:         },",
                "// Line 98:       ],",
                "// Line 99:     }",
                "// Line 100:   end",
                "// Line 101: ",
                "// Line 102:   def with_chunk_array_support",
                "// Line 103:     mock = mocked_http",
                "// vulnerable line: 104: @original_net_http = ::Net.send(:remove_const, :HTTP)",
                "// vulnerable line: 105: ::Net.send(:const_set, :HTTP, mock)",
                "// Line 106: ",
                "// Line 107:     yield",
                "// Line 108:   ensure",
                "// vulnerable line: 109: ::Net.send(:remove_const, :HTTP)",
                "// vulnerable line: 110: ::Net.send(:const_set, :HTTP, @original_net_http)",
                "// Line 111:   end",
                "// Line 112: ",
                "// Line 113:   protected",
                "// Line 114: ",
                "// Line 115:   # Copied from https://github.com/bblimke/webmock/issues/629",
                "// Line 116:   # Workaround for stubbing a streamed response",
                "// Line 117:   def mocked_http",
                "// vulnerable line: 118: Class.new(::Net::HTTP) do",
                "// Line 119:       def request(*)",
                "// Line 120:         super do |response|",
                "// Line 121:           response.instance_eval do",
                "// Line 122:             def read_body(*, &block)",
                "// Line 123:               if block_given?",
                "// Line 124:                 @body.each(&block)",
                "// Line 125:               else",
                "// Line 126:                 super",
                "// Line 127:               end",
                "// Line 128:             end"
            ]
        },
        {
            "filename_of_changes": "gemini_embeddings.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 4:   module Inference",
                "// Line 5:     class GeminiEmbeddings",
                "// Line 6:       def self.perform!(content)",
                "// Line 7:         headers = { \"Referer\" => Discourse.base_url, \"Content-Type\" => \"application/json\" }",
                "// Line 8: ",
                "// Line 9:         url =",
                "// Line 10:           \"https://generativelanguage.googleapis.com/v1beta/models/embedding-001:embedContent\\?key\\=#{SiteSetting.ai_gemini_api_key}\"",
                "// Line 11: ",
                "// Line 12:         body = { content: { parts: [{ text: content }] } }",
                "// Line 13: ",
                "// vulnerable line: 14: response = Faraday.post(url, body.to_json, headers)",
                "// Line 15: ",
                "// Line 16:         raise Net::HTTPBadResponse if ![200].include?(response.status)",
                "// Line 17: ",
                "// Line 18:         JSON.parse(response.body, symbolize_names: true)",
                "// Line 19:       end",
                "// Line 20:     end",
                "// Line 21:   end",
                "// Line 22: end"
            ]
        },
        {
            "filename_of_changes": "hugging_face_text_embeddings.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 11:           service = DiscourseAi::Utils::DnsSrv.lookup(SiteSetting.ai_hugging_face_tei_endpoint_srv)",
                "// Line 12:           api_endpoint = \"https://#{service.target}:#{service.port}\"",
                "// Line 13:         else",
                "// Line 14:           api_endpoint = SiteSetting.ai_hugging_face_tei_endpoint",
                "// Line 15:         end",
                "// Line 16: ",
                "// Line 17:         if SiteSetting.ai_hugging_face_tei_api_key.present?",
                "// Line 18:           headers[\"X-API-KEY\"] = SiteSetting.ai_hugging_face_tei_api_key",
                "// Line 19:         end",
                "// Line 20: ",
                "// vulnerable line: 21: response = Faraday.post(api_endpoint, body, headers)",
                "// Line 22: ",
                "// Line 23:         raise Net::HTTPBadResponse if ![200].include?(response.status)",
                "// Line 24: ",
                "// Line 25:         JSON.parse(response.body, symbolize_names: true)",
                "// Line 26:       end",
                "// Line 27: ",
                "// Line 28:       def self.configured?",
                "// Line 29:         SiteSetting.ai_hugging_face_tei_endpoint.present? ||",
                "// Line 30:           SiteSetting.ai_hugging_face_tei_endpoint_srv.present?",
                "// Line 31:       end"
            ]
        },
        {
            "filename_of_changes": "open_ai_embeddings.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 8: ",
                "// Line 9:         if SiteSetting.ai_openai_embeddings_url.include?(\"azure\")",
                "// Line 10:           headers[\"api-key\"] = SiteSetting.ai_openai_api_key",
                "// Line 11:         else",
                "// Line 12:           headers[\"Authorization\"] = \"Bearer #{SiteSetting.ai_openai_api_key}\"",
                "// Line 13:         end",
                "// Line 14: ",
                "// Line 15:         payload = { model: model, input: content }",
                "// Line 16:         payload[:dimensions] = dimensions if dimensions.present?",
                "// Line 17: ",
                "// vulnerable line: 18: response = Faraday.post(SiteSetting.ai_openai_embeddings_url, payload.to_json, headers)",
                "// Line 19: ",
                "// Line 20:         case response.status",
                "// Line 21:         when 200",
                "// Line 22:           JSON.parse(response.body, symbolize_names: true)",
                "// Line 23:         when 429",
                "// Line 24:           # TODO add a AdminDashboard Problem?",
                "// Line 25:         else",
                "// Line 26:           Rails.logger.warn(",
                "// Line 27:             \"OpenAI Embeddings failed with status: #{response.status} body: #{response.body}\",",
                "// Line 28:           )"
            ]
        },
        {
            "filename_of_changes": "open_ai_image_generator.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 21: ",
                "// Line 22:         payload = {",
                "// Line 23:           quality: \"hd\",",
                "// Line 24:           model: model,",
                "// Line 25:           prompt: prompt,",
                "// Line 26:           n: 1,",
                "// Line 27:           size: size,",
                "// Line 28:           response_format: \"b64_json\",",
                "// Line 29:         }",
                "// Line 30: ",
                "// vulnerable line: 31: Net::HTTP.start(",
                "// Line 32:           uri.host,",
                "// Line 33:           uri.port,",
                "// Line 34:           use_ssl: uri.scheme == \"https\",",
                "// Line 35:           read_timeout: TIMEOUT,",
                "// Line 36:           open_timeout: TIMEOUT,",
                "// Line 37:           write_timeout: TIMEOUT,",
                "// Line 38:         ) do |http|",
                "// Line 39:           request = Net::HTTP::Post.new(uri, headers)",
                "// Line 40:           request.body = payload.to_json",
                "// Line 41: "
            ]
        },
        {
            "filename_of_changes": "stability_generator.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 50:           height: width,",
                "// Line 51:           width: height,",
                "// Line 52:           samples: image_count,",
                "// Line 53:           steps: 30,",
                "// Line 54:         }",
                "// Line 55: ",
                "// Line 56:         payload[:seed] = seed if seed",
                "// Line 57: ",
                "// Line 58:         endpoint = \"v1/generation/#{engine}/text-to-image\"",
                "// Line 59: ",
                "// vulnerable line: 60: response = Faraday.post(\"#{api_url}/#{endpoint}\", payload.to_json, headers)",
                "// Line 61: ",
                "// Line 62:         if response.status != 200",
                "// Line 63:           Rails.logger.error(",
                "// Line 64:             \"AI stability generator failed with status #{response.status}: #{response.body}}\",",
                "// Line 65:           )",
                "// Line 66:           raise Net::HTTPBadResponse",
                "// Line 67:         end",
                "// Line 68: ",
                "// Line 69:         JSON.parse(response.body, symbolize_names: true)",
                "// Line 70:       end"
            ]
        }
    ]
}