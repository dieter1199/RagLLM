{
    "cve_id": "CVE-2024-38375",
    "cve_description": "@fastly/js-compute is a JavaScript SDK and runtime for building Fastly Compute applications. The implementation of several functions were determined to include a use-after-free bug. This bug could allow for unintended data loss if the result of the preceding functions were sent anywhere else, and often results in a guest trap causing services to return a 500. This bug has been fixed in version 3.16.0 of the `@fastly/js-compute` package.",
    "cve_publish_date": "2024-06-26T19:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fix: Fix uses of cabi_realloc that were discarding their results (#811)\n\nFix issues in some host calls where a buffer length error was being handled by reallocating to the new buffer size, but was discarding the new buffer's pointer. This should also fix flaky tests in CI.",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "fastly_world_adapter.cpp",
            "code_language": "C++",
            "number_of_lines_added_for_mitigation": "8",
            "number_of_lines_deleted_vulnerable_to_cve": "8",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 62:     *err = FASTLY_COMPUTE_AT_EDGE_TYPES_ERROR_HTTP_INVALID_STATUS;",
                "// Line 63:     break;",
                "// Line 64:   case 13:",
                "// Line 65:     *err = FASTLY_COMPUTE_AT_EDGE_TYPES_ERROR_LIMIT_EXCEEDED;",
                "// Line 66:     break;",
                "// Line 67:   case 100:",
                "// Line 68:     *err = FASTLY_COMPUTE_AT_EDGE_TYPES_ERROR_UNKNOWN_ERROR;",
                "// Line 69:     break;",
                "// Line 70:   default:",
                "// Line 71:     *err = FASTLY_COMPUTE_AT_EDGE_TYPES_ERROR_UNKNOWN_ERROR;",
                "// vulnerable line: 72: }",
                "// Line 73:   return false;",
                "// vulnerable line: 74: }",
                "// Line 75: ",
                "// Line 76: fastly_compute_at_edge_http_types_http_version_t convert_http_version(uint32_t version) {",
                "// Line 77:   switch (version) {",
                "// Line 78:   case 0:",
                "// Line 79:     return FASTLY_COMPUTE_AT_EDGE_HTTP_TYPES_HTTP_VERSION_HTTP09;",
                "// Line 80:   case 1:",
                "// Line 81:     return FASTLY_COMPUTE_AT_EDGE_HTTP_TYPES_HTTP_VERSION_HTTP10;",
                "// Line 82:   case 2:",
                "// Line 83:     return FASTLY_COMPUTE_AT_EDGE_HTTP_TYPES_HTTP_VERSION_HTTP11;",
                "// Line 84:   case 3:",
                "// Line 85:     return FASTLY_COMPUTE_AT_EDGE_HTTP_TYPES_HTTP_VERSION_H2;",
                "// Line 86:   case 4:",
                "// Line 87:   default:",
                "// Line 88:     return FASTLY_COMPUTE_AT_EDGE_HTTP_TYPES_HTTP_VERSION_H3;",
                "// vulnerable line: 89: }",
                "// vulnerable line: 90: }",
                "// Line 91: ",
                "// Line 92: bool fastly_compute_at_edge_http_body_new(fastly_compute_at_edge_http_types_body_handle_t *ret,",
                "// Line 93:                                           fastly_compute_at_edge_types_error_t *err) {",
                "// Line 94:   return convert_result(fastly::body_new(ret), err);",
                "// vulnerable line: 95: }",
                "// Line 96: ",
                "// Line 97: bool fastly_compute_at_edge_http_body_append(fastly_compute_at_edge_http_types_body_handle_t src,",
                "// Line 98:                                              fastly_compute_at_edge_http_types_body_handle_t dest,",
                "// Line 99:                                              fastly_compute_at_edge_types_error_t *err) {",
                "// Line 100:   return convert_result(fastly::body_append(src, dest), err);",
                "// vulnerable line: 101: }",
                "// Line 102: ",
                "// Line 103: bool fastly_compute_at_edge_http_body_read(fastly_compute_at_edge_http_types_body_handle_t h,",
                "// Line 104:                                            uint32_t chunk_size, fastly_world_list_u8_t *ret,",
                "// Line 105:                                            fastly_compute_at_edge_types_error_t *err) {",
                "// Line 106:   ret->ptr = static_cast<uint8_t *>(cabi_malloc(chunk_size, 1));",
                "// Line 107:   return convert_result(fastly::body_read(h, ret->ptr, static_cast<size_t>(chunk_size), &ret->len),",
                "// Line 108:                         err);",
                "// vulnerable line: 109: }",
                "// Line 110: ",
                "// Line 111: bool fastly_compute_at_edge_http_body_write(fastly_compute_at_edge_http_types_body_handle_t h,",
                "// Line 112:                                             fastly_world_list_u8_t *buf,",
                "// Line 113:                                             fastly_compute_at_edge_http_body_write_end_t end,",
                "// Line 114:                                             uint32_t *ret,",
                "// Line 115:                                             fastly_compute_at_edge_types_error_t *err) {",
                "// Line 116:   return convert_result(fastly::body_write(h, buf->ptr, buf->len,",
                "// Line 117:                                            end == FASTLY_COMPUTE_AT_EDGE_HTTP_BODY_WRITE_END_BACK",
                "// Line 118:                                                ? fastly::BodyWriteEnd::BodyWriteEndBack",
                "// Line 119:                                                : fastly::BodyWriteEnd::BodyWriteEndFront,",
                "// Line 120:                                            reinterpret_cast<size_t *>(ret)),",
                "// Line 121:                         err);",
                "// vulnerable line: 122: }",
                "// Line 123: ",
                "// Line 124: bool fastly_compute_at_edge_http_body_close(fastly_compute_at_edge_http_types_body_handle_t h,",
                "// Line 125:                                             fastly_compute_at_edge_types_error_t *err) {",
                "// Line 126:   return convert_result(fastly::body_close(h), err);",
                "// vulnerable line: 127: }",
                "// Line 128: ",
                "// Line 129: bool fastly_compute_at_edge_log_endpoint_get(fastly_world_string_t *name,",
                "// Line 130:                                              fastly_compute_at_edge_log_handle_t *ret,",
                "// Line 131:                                              fastly_compute_at_edge_types_error_t *err) {",
                "// Line 132:   return convert_result(",
                "// Line 133:       fastly::log_endpoint_get(reinterpret_cast<char *>(name->ptr), name->len, ret), err);",
                "// vulnerable line: 134: }",
                "// Line 135: ",
                "// Line 136: bool fastly_compute_at_edge_log_write(fastly_compute_at_edge_log_handle_t h,",
                "// Line 137:                                       fastly_world_string_t *msg,",
                "// Line 138:                                       fastly_compute_at_edge_types_error_t *err) {",
                "// Line 139:   size_t nwritten = 0;",
                "// Line 140:   return convert_result(",
                "// Line 141:       fastly::log_write(h, reinterpret_cast<char *>(msg->ptr), msg->len, &nwritten), err);",
                "// vulnerable line: 142: }",
                "// Line 143: ",
                "// Line 144: bool fastly_http_req_body_downstream_get(fastly_compute_at_edge_http_types_request_t *ret,",
                "// Line 145:                                          fastly_compute_at_edge_types_error_t *err) {",
                "// Line 146:   return convert_result(fastly::req_body_downstream_get(&ret->f0, &ret->f1), err);",
                "// vulnerable line: 147: }",
                "// Line 148: ",
                "// Line 149: bool fastly_compute_at_edge_http_req_redirect_to_grip_proxy(",
                "// Line 150:     fastly_world_string_t *backend, fastly_compute_at_edge_types_error_t *err) {",
                "// Line 151:   return convert_result(",
                "// Line 152:       fastly::req_redirect_to_grip_proxy(reinterpret_cast<char *>(backend->ptr), backend->len),",
                "// Line 153:       err);",
                "// vulnerable line: 154: }",
                "// Line 155: ",
                "// Line 156: int convert_tag(fastly_compute_at_edge_http_req_cache_override_tag_t tag) {",
                "// Line 157:   int out_tag = 0;",
                "// Line 158:   if ((tag & FASTLY_COMPUTE_AT_EDGE_HTTP_REQ_CACHE_OVERRIDE_TAG_PASS) > 0) {",
                "// Line 159:     out_tag |= CACHE_OVERRIDE_PASS;",
                "// vulnerable line: 160: }",
                "// Line 161:   if ((tag & FASTLY_COMPUTE_AT_EDGE_HTTP_REQ_CACHE_OVERRIDE_TAG_TTL) > 0) {",
                "// Line 162:     out_tag |= CACHE_OVERRIDE_TTL;",
                "// vulnerable line: 163: }",
                "// Line 164:   if ((tag & FASTLY_COMPUTE_AT_EDGE_HTTP_REQ_CACHE_OVERRIDE_TAG_STALE_WHILE_REVALIDATE) > 0) {",
                "// Line 165:     out_tag |= CACHE_OVERRIDE_STALE_WHILE_REVALIDATE;",
                "// vulnerable line: 166: }",
                "// Line 167:   if ((tag & FASTLY_COMPUTE_AT_EDGE_HTTP_REQ_CACHE_OVERRIDE_TAG_PCI) > 0) {",
                "// Line 168:     out_tag |= CACHE_OVERRIDE_PCI;",
                "// vulnerable line: 169: }",
                "// Line 170:   return out_tag;",
                "// vulnerable line: 171: }",
                "// Line 172: ",
                "// Line 173: bool fastly_compute_at_edge_http_req_cache_override_set(",
                "// Line 174:     fastly_compute_at_edge_http_types_request_handle_t h,",
                "// Line 175:     fastly_compute_at_edge_http_req_cache_override_tag_t tag, uint32_t *maybe_ttl,",
                "// Line 176:     uint32_t *maybe_stale_while_revalidate, fastly_world_string_t *maybe_sk,",
                "// Line 177:     fastly_compute_at_edge_types_error_t *err) {",
                "// Line 178:   fastly_world_string_t sk_str;",
                "// Line 179:   if (maybe_sk) {",
                "// Line 180:     sk_str = *maybe_sk;",
                "// Line 181:   } else {",
                "// Line 182:     sk_str.len = 0;",
                "// Line 183:     sk_str.ptr = NULL;",
                "// vulnerable line: 184: }",
                "// Line 185:   return convert_result(",
                "// Line 186:       fastly::req_cache_override_v2_set(",
                "// Line 187:           h, convert_tag(tag), maybe_ttl == NULL ? 0 : *maybe_ttl,",
                "// Line 188:           maybe_stale_while_revalidate == NULL ? 0 : *maybe_stale_while_revalidate,",
                "// Line 189:           reinterpret_cast<char *>(sk_str.ptr), sk_str.len),",
                "// Line 190:       err);",
                "// vulnerable line: 191: }",
                "// Line 192: ",
                "// Line 193: bool fastly_compute_at_edge_http_req_auto_decompress_response_set(",
                "// Line 194:     fastly_compute_at_edge_http_types_request_handle_t h,",
                "// Line 195:     fastly_compute_at_edge_http_types_content_encodings_t encodings,",
                "// Line 196:     fastly_compute_at_edge_types_error_t *err) {",
                "// Line 197:   return convert_result(fastly::req_auto_decompress_response_set(h, encodings), err);",
                "// vulnerable line: 198: }",
                "// Line 199: ",
                "// Line 200: bool fastly_compute_at_edge_http_req_downstream_client_ip_addr(",
                "// Line 201:     fastly_world_list_u8_t *ret, fastly_compute_at_edge_types_error_t *err) {",
                "// Line 202:   ret->ptr = static_cast<uint8_t *>(cabi_malloc(16, 1));",
                "// Line 203:   return convert_result(fastly::req_downstream_client_ip_addr_get(ret->ptr, &ret->len), err);",
                "// vulnerable line: 204: }",
                "// Line 205: ",
                "// Line 206: bool fastly_compute_at_edge_http_req_downstream_tls_cipher_openssl_name(",
                "// Line 207:     fastly_world_string_t *ret, fastly_compute_at_edge_types_error_t *err) {",
                "// Line 208:   auto default_size = 128;",
                "// Line 209:   ret->ptr = static_cast<uint8_t *>(cabi_malloc(default_size, 4));",
                "// Line 210:   auto status = fastly::req_downstream_tls_cipher_openssl_name(reinterpret_cast<char *>(ret->ptr),",
                "// Line 211:                                                                default_size, &ret->len);",
                "// Line 212:   if (status == FASTLY_COMPUTE_AT_EDGE_TYPES_ERROR_BUFFER_LEN) {",
                "// vulnerable line: 213: cabi_realloc(ret->ptr, default_size, 4, ret->len);",
                "// Line 214:     status = fastly::req_downstream_tls_cipher_openssl_name(reinterpret_cast<char *>(ret->ptr),",
                "// Line 215:                                                             ret->len, &ret->len);",
                "// vulnerable line: 216: }",
                "// Line 217:   return convert_result(status, err);",
                "// vulnerable line: 218: }",
                "// Line 219: ",
                "// Line 220: bool fastly_compute_at_edge_http_req_downstream_tls_protocol(",
                "// Line 221:     fastly_world_string_t *ret, fastly_compute_at_edge_types_error_t *err) {",
                "// Line 222:   auto default_size = 32;",
                "// Line 223:   ret->ptr = static_cast<uint8_t *>(cabi_malloc(default_size, 4));",
                "// Line 224:   auto status = fastly::req_downstream_tls_protocol(reinterpret_cast<char *>(ret->ptr),",
                "// Line 225:                                                     default_size, &ret->len);",
                "// Line 226:   if (status == FASTLY_COMPUTE_AT_EDGE_TYPES_ERROR_BUFFER_LEN) {",
                "// vulnerable line: 227: cabi_realloc(ret->ptr, default_size, 4, ret->len);",
                "// Line 228:     status = fastly::req_downstream_tls_protocol(reinterpret_cast<char *>(ret->ptr), ret->len,",
                "// Line 229:                                                  &ret->len);",
                "// vulnerable line: 230: }",
                "// Line 231:   return convert_result(status, err);",
                "// vulnerable line: 232: }",
                "// Line 233: ",
                "// Line 234: bool fastly_compute_at_edge_http_req_downstream_tls_raw_client_certificate(",
                "// Line 235:     fastly_world_list_u8_t *ret, fastly_compute_at_edge_types_error_t *err) {",
                "// Line 236:   auto default_size = 4096;",
                "// Line 237:   ret->ptr = static_cast<uint8_t *>(cabi_malloc(default_size, 4));",
                "// Line 238:   auto status =",
                "// Line 239:       fastly::req_downstream_tls_raw_client_certificate(ret->ptr, default_size, &ret->len);",
                "// Line 240:   if (status == FASTLY_COMPUTE_AT_EDGE_TYPES_ERROR_BUFFER_LEN) {",
                "// vulnerable line: 241: cabi_realloc(ret->ptr, default_size, 4, ret->len);",
                "// Line 242:     status = fastly::req_downstream_tls_raw_client_certificate(ret->ptr, ret->len, &ret->len);",
                "// vulnerable line: 243: }",
                "// Line 244:   return convert_result(status, err);",
                "// vulnerable line: 245: }",
                "// Line 246: ",
                "// Line 247: bool fastly_compute_at_edge_http_req_downstream_tls_ja3_md5(",
                "// Line 248:     fastly_world_list_u8_t *ret, fastly_compute_at_edge_types_error_t *err) {",
                "// Line 249:   auto default_size = 16;",
                "// Line 250:   ret->ptr = static_cast<uint8_t *>(cabi_malloc(default_size, 4));",
                "// Line 251:   auto status = fastly::req_downstream_tls_ja3_md5(ret->ptr, &ret->len);",
                "// Line 252:   if (status == FASTLY_COMPUTE_AT_EDGE_TYPES_ERROR_BUFFER_LEN) {",
                "// vulnerable line: 253: cabi_realloc(ret->ptr, default_size, 4, ret->len);",
                "// Line 254:     status = fastly::req_downstream_tls_ja3_md5(ret->ptr, &ret->len);",
                "// vulnerable line: 255: }",
                "// Line 256:   return convert_result(status, err);",
                "// vulnerable line: 257: }",
                "// Line 258: bool fastly_compute_at_edge_http_req_downstream_tls_client_hello(",
                "// Line 259:     fastly_world_list_u8_t *ret, fastly_compute_at_edge_types_error_t *err) {",
                "// Line 260:   auto default_size = 512;",
                "// Line 261:   ret->ptr = static_cast<uint8_t *>(cabi_malloc(default_size, 4));",
                "// Line 262:   auto status = fastly::req_downstream_tls_client_hello(ret->ptr, default_size, &ret->len);",
                "// Line 263:   if (status == FASTLY_COMPUTE_AT_EDGE_TYPES_ERROR_BUFFER_LEN) {",
                "// vulnerable line: 264: cabi_realloc(ret->ptr, default_size, 4, ret->len);",
                "// Line 265:     status = fastly::req_downstream_tls_client_hello(ret->ptr, ret->len, &ret->len);",
                "// vulnerable line: 266: }",
                "// Line 267:   return convert_result(status, err);",
                "// vulnerable line: 268: }",
                "// Line 269: ",
                "// Line 270: bool fastly_compute_at_edge_http_req_new(fastly_compute_at_edge_http_types_request_handle_t *ret,",
                "// Line 271:                                          fastly_compute_at_edge_types_error_t *err) {",
                "// Line 272:   return convert_result(fastly::req_new(ret), err);",
                "// vulnerable line: 273: }",
                "// Line 274: ",
                "// Line 275: struct Chunk {",
                "// Line 276:   JS::UniqueChars buffer;",
                "// Line 277:   size_t length;",
                "// Line 278: ",
                "// Line 279:   static Chunk make(std::string_view data) {",
                "// Line 280:     Chunk res{JS::UniqueChars{static_cast<char *>(cabi_malloc(data.size(), 1))}, data.size()};",
                "// Line 281:     std::copy(data.begin(), data.end(), res.buffer.get());",
                "// Line 282:     return res;",
                "// vulnerable line: 283: }",
                "// Line 284: };",
                "// Line 285: ",
                "// Line 286: bool fastly_compute_at_edge_http_req_header_names_get(",
                "// Line 287:     fastly_compute_at_edge_http_types_request_handle_t h, fastly_world_list_string_t *ret,",
                "// Line 288:     fastly_compute_at_edge_types_error_t *err) {",
                "// Line 289:   std::vector<Chunk> header_names;",
                "// Line 290:   {",
                "// Line 291:     JS::UniqueChars buf{static_cast<char *>(cabi_malloc(HOSTCALL_BUFFER_LEN, 1))};",
                "// Line 292:     uint32_t cursor = 0;",
                "// Line 293:     while (true) {",
                "// Line 294:       size_t length = 0;",
                "// Line 295:       int64_t ending_cursor = 0;",
                "// Line 296:       auto res = fastly::req_header_names_get(h, reinterpret_cast<uint8_t *>(buf.get()),",
                "// Line 297:                                               HEADER_MAX_LEN, cursor, &ending_cursor, &length);",
                "// Line 298:       if (!convert_result(res, err)) {",
                "// Line 299:         return false;",
                "// vulnerable line: 300: }",
                "// Line 301: ",
                "// Line 302:       if (length == 0) {",
                "// Line 303:         break;",
                "// vulnerable line: 304: }",
                "// Line 305: ",
                "// Line 306:       std::string_view result{buf.get(), length};",
                "// Line 307:       while (!result.empty()) {",
                "// Line 308:         auto end = result.find('\u0000');",
                "// Line 309:         header_names.emplace_back(Chunk::make(result.substr(0, end)));",
                "// Line 310:         if (end == result.npos) {",
                "// Line 311:           break;",
                "// vulnerable line: 312: }",
                "// Line 313: ",
                "// Line 314:         result = result.substr(end + 1);",
                "// vulnerable line: 315: }",
                "// Line 316: ",
                "// Line 317:       if (ending_cursor < 0) {",
                "// Line 318:         break;",
                "// vulnerable line: 319: }",
                "// Line 320: ",
                "// Line 321:       cursor = ending_cursor;",
                "// vulnerable line: 322: }",
                "// vulnerable line: 323: }",
                "// Line 324: ",
                "// Line 325:   ret->len = header_names.size();",
                "// Line 326:   ret->ptr = static_cast<fastly_world_string_t *>(cabi_malloc(",
                "// Line 327:       header_names.size() * sizeof(fastly_world_string_t), alignof(fastly_world_string_t)));",
                "// Line 328:   auto *next = ret->ptr;",
                "// Line 329:   for (auto &chunk : header_names) {",
                "// Line 330:     next->len = chunk.length;",
                "// Line 331:     next->ptr = reinterpret_cast<uint8_t *>(chunk.buffer.release());",
                "// Line 332:     ++next;",
                "// vulnerable line: 333: }",
                "// Line 334: ",
                "// Line 335:   return true;",
                "// vulnerable line: 336: }",
                "// Line 337: ",
                "// Line 338: bool fastly_compute_at_edge_http_req_header_values_get(",
                "// Line 339:     fastly_compute_at_edge_http_types_request_handle_t h, fastly_world_string_t *name,",
                "// Line 340:     fastly_world_option_list_list_u8_t *ret, fastly_compute_at_edge_types_error_t *err) {",
                "// Line 341: ",
                "// Line 342:   std::vector<Chunk> header_values;",
                "// Line 343: ",
                "// Line 344:   {",
                "// Line 345:     JS::UniqueLatin1Chars buffer(static_cast<unsigned char *>(cabi_malloc(HEADER_MAX_LEN, 1)));",
                "// Line 346:     uint32_t cursor = 0;",
                "// Line 347:     while (true) {",
                "// Line 348:       int64_t ending_cursor = 0;",
                "// Line 349:       size_t length = 0;",
                "// Line 350:       auto res = fastly::req_header_values_get(h, reinterpret_cast<char *>(name->ptr), name->len,",
                "// Line 351:                                                buffer.get(), HEADER_MAX_LEN, cursor, &ending_cursor,",
                "// Line 352:                                                &length);",
                "// Line 353:       if (!convert_result(res, err)) {",
                "// Line 354:         return false;",
                "// vulnerable line: 355: }",
                "// Line 356: ",
                "// Line 357:       if (length == 0) {",
                "// Line 358:         break;",
                "// vulnerable line: 359: }",
                "// Line 360: ",
                "// Line 361:       std::string_view result{reinterpret_cast<char *>(buffer.get()), length};",
                "// Line 362:       while (!result.empty()) {",
                "// Line 363:         auto end = result.find('\u0000');",
                "// Line 364:         header_values.emplace_back(Chunk::make(result.substr(0, end)));",
                "// Line 365:         if (end == result.npos) {",
                "// Line 366:           break;",
                "// vulnerable line: 367: }",
                "// Line 368: ",
                "// Line 369:         result = result.substr(end + 1);",
                "// vulnerable line: 370: }",
                "// Line 371: ",
                "// Line 372:       if (ending_cursor < 0) {",
                "// Line 373:         break;",
                "// vulnerable line: 374: }",
                "// vulnerable line: 375: }",
                "// vulnerable line: 376: }",
                "// Line 377: ",
                "// Line 378:   if (header_values.empty()) {",
                "// Line 379:     ret->is_some = false;",
                "// Line 380:   } else {",
                "// Line 381:     ret->is_some = true;",
                "// Line 382:     ret->val.len = header_values.size();",
                "// Line 383:     ret->val.ptr = static_cast<fastly_world_list_u8_t *>(cabi_malloc(",
                "// Line 384:         header_values.size() * sizeof(fastly_world_list_u8_t), alignof(fastly_world_list_u8_t)));",
                "// Line 385:     auto *next = ret->val.ptr;",
                "// Line 386:     for (auto &chunk : header_values) {",
                "// Line 387:       next->len = chunk.length;",
                "// Line 388:       next->ptr = reinterpret_cast<uint8_t *>(chunk.buffer.release());",
                "// Line 389:       ++next;",
                "// vulnerable line: 390: }",
                "// vulnerable line: 391: }",
                "// Line 392: ",
                "// Line 393:   return true;",
                "// vulnerable line: 394: }",
                "// Line 395: ",
                "// Line 396: bool fastly_compute_at_edge_http_req_framing_headers_mode_set(",
                "// Line 397:     fastly_compute_at_edge_http_req_request_handle_t h,",
                "// Line 398:     fastly_compute_at_edge_http_req_framing_headers_mode_t mode,",
                "// Line 399:     fastly_compute_at_edge_http_req_error_t *err) {",
                "// Line 400:   return convert_result(fastly::req_framing_headers_mode_set(h, mode), err);",
                "// vulnerable line: 401: }",
                "// Line 402: ",
                "// Line 403: bool fastly_compute_at_edge_http_req_header_insert(",
                "// Line 404:     fastly_compute_at_edge_http_types_request_handle_t h, fastly_world_string_t *name,",
                "// Line 405:     fastly_world_list_u8_t *value, fastly_compute_at_edge_types_error_t *err) {",
                "// Line 406:   return convert_result(fastly::req_header_insert(h, reinterpret_cast<char *>(name->ptr), name->len,",
                "// Line 407:                                                   value->ptr, value->len),",
                "// Line 408:                         err);",
                "// vulnerable line: 409: }",
                "// Line 410: ",
                "// Line 411: bool fastly_compute_at_edge_http_req_header_append(",
                "// Line 412:     fastly_compute_at_edge_http_types_request_handle_t h, fastly_world_string_t *name,",
                "// Line 413:     fastly_world_list_u8_t *value, fastly_compute_at_edge_types_error_t *err) {",
                "// Line 414:   return convert_result(fastly::req_header_append(h, reinterpret_cast<char *>(name->ptr), name->len,",
                "// Line 415:                                                   value->ptr, value->len),",
                "// Line 416:                         err);",
                "// vulnerable line: 417: }",
                "// Line 418: ",
                "// Line 419: bool fastly_compute_at_edge_http_req_header_remove(",
                "// Line 420:     fastly_compute_at_edge_http_types_request_handle_t h, fastly_world_string_t *name,",
                "// Line 421:     fastly_compute_at_edge_types_error_t *err) {",
                "// Line 422:   return convert_result(",
                "// Line 423:       fastly::req_header_remove(h, reinterpret_cast<char *>(name->ptr), name->len), err);",
                "// vulnerable line: 424: }",
                "// Line 425: ",
                "// Line 426: bool fastly_compute_at_edge_http_req_method_get(",
                "// Line 427:     fastly_compute_at_edge_http_types_request_handle_t h, fastly_world_string_t *ret,",
                "// Line 428:     fastly_compute_at_edge_types_error_t *err) {",
                "// Line 429:   ret->ptr = static_cast<uint8_t *>(cabi_malloc(METHOD_MAX_LEN, 1));",
                "// Line 430:   return convert_result(",
                "// Line 431:       fastly::req_method_get(h, reinterpret_cast<char *>(ret->ptr), METHOD_MAX_LEN, &ret->len),",
                "// Line 432:       err);",
                "// vulnerable line: 433: }",
                "// Line 434: ",
                "// Line 435: bool fastly_compute_at_edge_http_req_method_set(",
                "// Line 436:     fastly_compute_at_edge_http_types_request_handle_t h, fastly_world_string_t *method,",
                "// Line 437:     fastly_compute_at_edge_types_error_t *err) {",
                "// Line 438:   return convert_result(",
                "// Line 439:       fastly::req_method_set(h, reinterpret_cast<char *>(method->ptr), method->len), err);",
                "// vulnerable line: 440: }",
                "// Line 441: ",
                "// Line 442: bool fastly_compute_at_edge_http_req_uri_get(fastly_compute_at_edge_http_types_request_handle_t h,",
                "// Line 443:                                              fastly_world_string_t *ret,",
                "// Line 444:                                              fastly_compute_at_edge_types_error_t *err) {",
                "// Line 445:   ret->ptr = static_cast<uint8_t *>(cabi_malloc(URI_MAX_LEN, 1));",
                "// Line 446:   if (!convert_result(",
                "// Line 447:           fastly::req_uri_get(h, reinterpret_cast<char *>(ret->ptr), URI_MAX_LEN, &ret->len),",
                "// Line 448:           err)) {",
                "// Line 449:     cabi_free(ret->ptr);",
                "// Line 450:     return false;",
                "// vulnerable line: 451: }",
                "// Line 452:   ret->ptr = static_cast<uint8_t *>(cabi_realloc(ret->ptr, URI_MAX_LEN, 1, ret->len));",
                "// Line 453:   return true;",
                "// vulnerable line: 454: }",
                "// Line 455: ",
                "// Line 456: bool fastly_compute_at_edge_http_req_uri_set(fastly_compute_at_edge_http_types_request_handle_t h,",
                "// Line 457:                                              fastly_world_string_t *uri,",
                "// Line 458:                                              fastly_compute_at_edge_types_error_t *err) {",
                "// Line 459:   return convert_result(fastly::req_uri_set(h, reinterpret_cast<char *>(uri->ptr), uri->len), err);",
                "// vulnerable line: 460: }",
                "// Line 461: ",
                "// Line 462: bool fastly_compute_at_edge_http_req_version_get(",
                "// Line 463:     fastly_compute_at_edge_http_types_request_handle_t h,",
                "// Line 464:     fastly_compute_at_edge_http_types_http_version_t *ret,",
                "// Line 465:     fastly_compute_at_edge_types_error_t *err) {",
                "// Line 466:   uint32_t fastly_http_version;",
                "// Line 467:   if (!convert_result(fastly::req_version_get(h, &fastly_http_version), err)) {",
                "// Line 468:     return false;",
                "// vulnerable line: 469: }",
                "// Line 470:   *ret = convert_http_version(fastly_http_version);",
                "// Line 471:   return true;",
                "// vulnerable line: 472: }",
                "// Line 473: ",
                "// Line 474: bool fastly_compute_at_edge_http_req_send_async(",
                "// Line 475:     fastly_compute_at_edge_http_types_request_handle_t h,",
                "// Line 476:     fastly_compute_at_edge_http_types_body_handle_t b, fastly_world_string_t *backend,",
                "// Line 477:     fastly_compute_at_edge_http_types_pending_request_handle_t *ret,",
                "// Line 478:     fastly_compute_at_edge_types_error_t *err) {",
                "// Line 479:   return convert_result(",
                "// Line 480:       fastly::req_send_async(h, b, reinterpret_cast<char *>(backend->ptr), backend->len, ret), err);",
                "// vulnerable line: 481: }",
                "// Line 482: ",
                "// Line 483: bool fastly_compute_at_edge_http_req_send_async_streaming(",
                "// Line 484:     fastly_compute_at_edge_http_types_request_handle_t h,",
                "// Line 485:     fastly_compute_at_edge_http_types_body_handle_t b, fastly_world_string_t *backend,",
                "// Line 486:     fastly_compute_at_edge_http_types_pending_request_handle_t *ret,",
                "// Line 487:     fastly_compute_at_edge_types_error_t *err) {",
                "// Line 488:   return convert_result(fastly::req_send_async_streaming(",
                "// Line 489:                             h, b, reinterpret_cast<char *>(backend->ptr), backend->len, ret),",
                "// Line 490:                         err);",
                "// vulnerable line: 491: }",
                "// Line 492: ",
                "// Line 493: bool fastly_compute_at_edge_http_req_pending_req_wait(",
                "// Line 494:     fastly_compute_at_edge_http_types_pending_request_handle_t h,",
                "// Line 495:     fastly_compute_at_edge_http_types_response_t *ret, fastly_compute_at_edge_types_error_t *err) {",
                "// Line 496:   return convert_result(fastly::req_pending_req_wait(h, &ret->f0, &ret->f1), err);",
                "// vulnerable line: 497: }",
                "// Line 498: ",
                "// Line 499: bool fastly_compute_at_edge_http_req_pending_req_wait_v2(",
                "// Line 500:     fastly_compute_at_edge_http_req_pending_request_handle_t h,",
                "// Line 501:     fastly_compute_at_edge_http_req_send_error_detail_t *s,",
                "// Line 502:     fastly_compute_at_edge_http_req_response_t *ret, fastly_compute_at_edge_http_req_error_t *err) {",
                "// Line 503:   fastly_compute_at_edge_types_error_t host_err;",
                "// Line 504: ",
                "// Line 505:   s->mask |= FASTLY_COMPUTE_AT_EDGE_HTTP_TYPES_SEND_ERROR_DETAIL_MASK_DNS_ERROR_RCODE;",
                "// Line 506:   s->mask |= FASTLY_COMPUTE_AT_EDGE_HTTP_TYPES_SEND_ERROR_DETAIL_MASK_DNS_ERROR_INFO_CODE;",
                "// Line 507:   s->mask |= FASTLY_COMPUTE_AT_EDGE_HTTP_TYPES_SEND_ERROR_DETAIL_MASK_TLS_ALERT_ID;",
                "// Line 508: ",
                "// Line 509:   return convert_result(fastly::req_pending_req_wait_v2(h, s, &ret->f0, &ret->f1), &host_err);",
                "// vulnerable line: 510: }",
                "// Line 511: ",
                "// Line 512: bool fastly_compute_at_edge_http_req_register_dynamic_backend(",
                "// Line 513:     fastly_world_string_t *prefix, fastly_world_string_t *target,",
                "// Line 514:     fastly_compute_at_edge_http_types_dynamic_backend_config_t *config,",
                "// Line 515:     fastly_compute_at_edge_types_error_t *err) {",
                "// Line 516:   uint32_t backend_config_mask = 0;",
                "// Line 517: ",
                "// Line 518:   if (config->use_ssl.is_some && config->use_ssl.val) {",
                "// Line 519:     backend_config_mask |= BACKEND_CONFIG_USE_SSL;",
                "// vulnerable line: 520: }",
                "// Line 521:   if (config->dont_pool.is_some && config->dont_pool.val) {",
                "// Line 522:     backend_config_mask |= BACKEND_CONFIG_DONT_POOL;",
                "// vulnerable line: 523: }",
                "// Line 524:   if (config->host_override.is_some) {",
                "// Line 525:     backend_config_mask |= BACKEND_CONFIG_HOST_OVERRIDE;",
                "// vulnerable line: 526: }",
                "// Line 527:   if (config->connect_timeout.is_some) {",
                "// Line 528:     backend_config_mask |= BACKEND_CONFIG_CONNECT_TIMEOUT;",
                "// vulnerable line: 529: }",
                "// Line 530:   if (config->first_byte_timeout.is_some) {",
                "// Line 531:     backend_config_mask |= BACKEND_CONFIG_FIRST_BYTE_TIMEOUT;",
                "// vulnerable line: 532: }",
                "// Line 533:   if (config->between_bytes_timeout.is_some) {",
                "// Line 534:     backend_config_mask |= BACKEND_CONFIG_BETWEEN_BYTES_TIMEOUT;",
                "// vulnerable line: 535: }",
                "// Line 536:   if (config->ssl_min_version.is_some) {",
                "// Line 537:     backend_config_mask |= BACKEND_CONFIG_SSL_MIN_VERSION;",
                "// vulnerable line: 538: }",
                "// Line 539:   if (config->ssl_max_version.is_some) {",
                "// Line 540:     backend_config_mask |= BACKEND_CONFIG_SSL_MAX_VERSION;",
                "// vulnerable line: 541: }",
                "// Line 542:   if (config->cert_hostname.is_some) {",
                "// Line 543:     backend_config_mask |= BACKEND_CONFIG_CERT_HOSTNAME;",
                "// vulnerable line: 544: }",
                "// Line 545:   if (config->ca_cert.is_some) {",
                "// Line 546:     backend_config_mask |= BACKEND_CONFIG_CA_CERT;",
                "// vulnerable line: 547: }",
                "// Line 548:   if (config->ciphers.is_some) {",
                "// Line 549:     backend_config_mask |= BACKEND_CONFIG_CIPHERS;",
                "// vulnerable line: 550: }",
                "// Line 551:   if (config->sni_hostname.is_some) {",
                "// Line 552:     backend_config_mask |= BACKEND_CONFIG_SNI_HOSTNAME;",
                "// vulnerable line: 553: }",
                "// Line 554:   if (config->client_cert.is_some) {",
                "// Line 555:     backend_config_mask |= BACKEND_CONFIG_CLIENT_CERT;",
                "// vulnerable line: 556: }",
                "// Line 557:   fastly::DynamicBackendConfig backend_configuration{",
                "// Line 558:       .host_override = reinterpret_cast<char *>(config->host_override.val.ptr),",
                "// Line 559:       .host_override_len = config->host_override.val.len,",
                "// Line 560:       .connect_timeout_ms = config->connect_timeout.val,",
                "// Line 561:       .first_byte_timeout_ms = config->first_byte_timeout.val,",
                "// Line 562:       .between_bytes_timeout_ms = config->between_bytes_timeout.val,",
                "// Line 563:       .ssl_min_version = config->ssl_min_version.val,",
                "// Line 564:       .ssl_max_version = config->ssl_max_version.val,",
                "// Line 565:       .cert_hostname = reinterpret_cast<char *>(config->cert_hostname.val.ptr),",
                "// Line 566:       .cert_hostname_len = config->cert_hostname.val.len,",
                "// Line 571:       .sni_hostname = reinterpret_cast<char *>(config->sni_hostname.val.ptr),",
                "// Line 572:       .sni_hostname_len = config->sni_hostname.val.len,",
                "// Line 573:       .client_certificate = reinterpret_cast<char *>(config->client_cert.val.client_cert.ptr),",
                "// Line 574:       .client_certificate_len = config->client_cert.val.client_cert.len,",
                "// Line 575:       .client_key = config->client_cert.val.client_key};",
                "// Line 576:   return convert_result(",
                "// Line 577:       fastly::req_register_dynamic_backend(reinterpret_cast<char *>(prefix->ptr), prefix->len,",
                "// Line 578:                                            reinterpret_cast<char *>(target->ptr), target->len,",
                "// Line 579:                                            backend_config_mask, &backend_configuration),",
                "// Line 580:       err);",
                "// vulnerable line: 581: }",
                "// Line 582: ",
                "// Line 583: bool fastly_compute_at_edge_http_resp_new(fastly_compute_at_edge_http_types_response_handle_t *ret,",
                "// Line 584:                                           fastly_compute_at_edge_types_error_t *err) {",
                "// Line 585:   return convert_result(fastly::resp_new(ret), err);",
                "// vulnerable line: 586: }",
                "// Line 587: ",
                "// Line 588: bool fastly_compute_at_edge_http_resp_header_names_get(",
                "// Line 589:     fastly_compute_at_edge_http_types_response_handle_t h, fastly_world_list_string_t *ret,",
                "// Line 590:     fastly_compute_at_edge_types_error_t *err) {",
                "// Line 591:   fastly_world_string_t *strs = static_cast<fastly_world_string_t *>(",
                "// Line 592:       cabi_malloc(LIST_ALLOC_SIZE * sizeof(fastly_world_string_t), 1));",
                "// Line 593:   size_t str_max = LIST_ALLOC_SIZE;",
                "// Line 594:   size_t str_cnt = 0;",
                "// Line 595:   size_t nwritten;",
                "// Line 596:   uint8_t *buf = static_cast<uint8_t *>(cabi_malloc(HOSTCALL_BUFFER_LEN, 1));",
                "// Line 597:   uint32_t cursor = 0;",
                "// Line 598:   int64_t next_cursor = 0;",
                "// Line 599:   while (true) {",
                "// Line 600:     if (!convert_result(",
                "// Line 601:             fastly::resp_header_names_get(h, buf, HEADER_MAX_LEN, cursor, &next_cursor, &nwritten),",
                "// Line 602:             err)) {",
                "// Line 603:       cabi_free(buf);",
                "// Line 604:       return false;",
                "// vulnerable line: 605: }",
                "// Line 606:     if (nwritten == 0) {",
                "// Line 607:       break;",
                "// vulnerable line: 608: }",
                "// Line 609:     uint32_t offset = 0;",
                "// Line 610:     for (size_t i = 0; i < nwritten; i++) {",
                "// Line 611:       if (buf[i] != '\u0000')",
                "// Line 612:         continue;",
                "// Line 613:       if (str_cnt == str_max) {",
                "// Line 614:         strs = static_cast<fastly_world_string_t *>(",
                "// Line 615:             cabi_realloc(strs, str_max * sizeof(fastly_world_string_t), 1,",
                "// Line 616:                          (str_max + LIST_ALLOC_SIZE) * sizeof(fastly_world_string_t)));",
                "// Line 617:         str_max += LIST_ALLOC_SIZE;",
                "// vulnerable line: 618: }",
                "// Line 619:       strs[str_cnt].ptr = static_cast<uint8_t *>(cabi_malloc(i - offset + 1, 1));",
                "// Line 620:       strs[str_cnt].len = i - offset;",
                "// Line 621:       memcpy(strs[str_cnt].ptr, buf + offset, i - offset + 1);",
                "// Line 622:       offset = i + 1;",
                "// Line 623:       str_cnt++;",
                "// vulnerable line: 624: }",
                "// Line 625:     if (next_cursor < 0)",
                "// Line 626:       break;",
                "// Line 627:     cursor = (uint32_t)next_cursor;",
                "// vulnerable line: 628: }",
                "// Line 629:   cabi_free(buf);",
                "// Line 630:   if (str_cnt != 0) {",
                "// Line 631:     strs = static_cast<fastly_world_string_t *>(cabi_realloc(",
                "// Line 632:         strs, str_max * sizeof(fastly_world_string_t), 1, str_cnt * sizeof(fastly_world_string_t)));",
                "// vulnerable line: 633: }",
                "// Line 634:   ret->ptr = strs;",
                "// Line 635:   ret->len = str_cnt;",
                "// Line 636:   return true;",
                "// vulnerable line: 637: }",
                "// Line 638: ",
                "// Line 639: bool fastly_compute_at_edge_http_resp_header_values_get(",
                "// Line 640:     fastly_compute_at_edge_http_types_response_handle_t h, fastly_world_string_t *name,",
                "// Line 641:     fastly_world_option_list_list_u8_t *ret, fastly_compute_at_edge_types_error_t *err) {",
                "// Line 642:   size_t str_max = LIST_ALLOC_SIZE;",
                "// Line 643:   fastly_world_list_u8_t *strs = static_cast<fastly_world_list_u8_t *>(",
                "// Line 644:       cabi_malloc(str_max * sizeof(fastly_world_list_u8_t), 1));",
                "// Line 645:   size_t str_cnt = 0;",
                "// Line 646:   size_t nwritten;",
                "// Line 647:   uint8_t *buf = static_cast<uint8_t *>(cabi_malloc(HOSTCALL_BUFFER_LEN, 1));",
                "// Line 648:   uint32_t cursor = 0;",
                "// Line 649:   int64_t next_cursor = 0;",
                "// Line 650:   while (true) {",
                "// Line 651:     if (!convert_result(fastly::resp_header_values_get(h, reinterpret_cast<char *>(name->ptr),",
                "// Line 652:                                                        name->len, buf, HEADER_MAX_LEN, cursor,",
                "// Line 653:                                                        &next_cursor, &nwritten),",
                "// Line 654:                         err)) {",
                "// Line 655:       cabi_free(buf);",
                "// Line 656:       return false;",
                "// vulnerable line: 657: }",
                "// Line 658:     if (nwritten == 0)",
                "// Line 659:       break;",
                "// Line 660:     uint32_t offset = 0;",
                "// Line 661:     for (size_t i = 0; i < nwritten; i++) {",
                "// Line 662:       if (buf[i] != '\u0000')",
                "// Line 663:         continue;",
                "// Line 664:       if (str_cnt == str_max) {",
                "// Line 665:         strs = static_cast<fastly_world_list_u8_t *>(",
                "// Line 666:             cabi_realloc(strs, str_max * sizeof(fastly_world_list_u8_t), 1,",
                "// Line 667:                          (str_max + LIST_ALLOC_SIZE) * sizeof(fastly_world_list_u8_t)));",
                "// Line 668:         str_max += LIST_ALLOC_SIZE;",
                "// vulnerable line: 669: }",
                "// Line 670:       strs[str_cnt].ptr = static_cast<uint8_t *>(cabi_malloc(i - offset + 1, 1));",
                "// Line 671:       strs[str_cnt].len = i - offset;",
                "// Line 672:       memcpy(strs[str_cnt].ptr, buf + offset, i - offset + 1);",
                "// Line 673:       offset = i + 1;",
                "// Line 674:       str_cnt++;",
                "// vulnerable line: 675: }",
                "// Line 676:     if (next_cursor < 0)",
                "// Line 677:       break;",
                "// Line 678:     cursor = static_cast<uint32_t>(next_cursor);",
                "// vulnerable line: 679: }",
                "// Line 680:   cabi_free(buf);",
                "// Line 681:   if (str_cnt > 0) {",
                "// Line 682:     ret->is_some = true;",
                "// Line 683:     ret->val.ptr = strs;",
                "// Line 684:     ret->val.len = str_cnt;",
                "// Line 685:     strs = static_cast<fastly_world_list_u8_t *>(",
                "// Line 686:         cabi_realloc(strs, str_max * sizeof(fastly_world_list_u8_t), 1,",
                "// Line 687:                      str_cnt * sizeof(fastly_world_list_u8_t)));",
                "// Line 688:   } else {",
                "// Line 689:     ret->is_some = false;",
                "// Line 690:     cabi_free(strs);",
                "// vulnerable line: 691: }",
                "// Line 692:   return true;",
                "// vulnerable line: 693: }",
                "// Line 694: ",
                "// Line 695: bool fastly_compute_at_edge_http_resp_header_insert(",
                "// Line 696:     fastly_compute_at_edge_http_types_response_handle_t h, fastly_world_string_t *name,",
                "// Line 697:     fastly_world_list_u8_t *value, fastly_compute_at_edge_types_error_t *err) {",
                "// Line 698:   return convert_result(fastly::resp_header_insert(h, reinterpret_cast<char *>(name->ptr),",
                "// Line 699:                                                    name->len, value->ptr, value->len),",
                "// Line 700:                         err);",
                "// vulnerable line: 701: }",
                "// Line 702: ",
                "// Line 703: bool fastly_compute_at_edge_http_resp_header_append(",
                "// Line 704:     fastly_compute_at_edge_http_types_response_handle_t h, fastly_world_string_t *name,",
                "// Line 705:     fastly_world_list_u8_t *value, fastly_compute_at_edge_types_error_t *err) {",
                "// Line 706:   return convert_result(fastly::resp_header_append(h, reinterpret_cast<char *>(name->ptr),",
                "// Line 707:                                                    name->len, value->ptr, value->len),",
                "// Line 708:                         err);",
                "// vulnerable line: 709: }",
                "// Line 710: ",
                "// Line 711: bool fastly_compute_at_edge_http_resp_header_remove(",
                "// Line 712:     fastly_compute_at_edge_http_types_response_handle_t h, fastly_world_string_t *name,",
                "// Line 713:     fastly_compute_at_edge_types_error_t *err) {",
                "// Line 714:   return convert_result(",
                "// Line 715:       fastly::resp_header_remove(h, reinterpret_cast<char *>(name->ptr), name->len), err);",
                "// vulnerable line: 716: }",
                "// Line 717: ",
                "// Line 718: bool fastly_compute_at_edge_http_resp_version_get(",
                "// Line 719:     fastly_compute_at_edge_http_types_response_handle_t h,",
                "// Line 720:     fastly_compute_at_edge_http_types_http_version_t *ret,",
                "// Line 721:     fastly_compute_at_edge_types_error_t *err) {",
                "// Line 722:   uint32_t fastly_http_version;",
                "// Line 723:   if (!convert_result(fastly::resp_version_get(h, &fastly_http_version), err)) {",
                "// Line 724:     return false;",
                "// vulnerable line: 725: }",
                "// Line 726:   *ret = convert_http_version(fastly_http_version);",
                "// Line 727:   return true;",
                "// vulnerable line: 728: }",
                "// Line 729: ",
                "// Line 730: bool fastly_compute_at_edge_http_resp_framing_headers_mode_set(",
                "// Line 731:     fastly_compute_at_edge_http_resp_response_handle_t h,",
                "// Line 732:     fastly_compute_at_edge_http_resp_framing_headers_mode_t mode,",
                "// Line 733:     fastly_compute_at_edge_http_resp_error_t *err) {",
                "// Line 734:   return convert_result(fastly::resp_framing_headers_mode_set(h, mode), err);",
                "// vulnerable line: 735: }",
                "// Line 736: ",
                "// Line 737: bool fastly_compute_at_edge_http_resp_send_downstream(",
                "// Line 738:     fastly_compute_at_edge_http_types_response_handle_t h,",
                "// Line 739:     fastly_compute_at_edge_http_types_body_handle_t b, bool streaming,",
                "// Line 740:     fastly_compute_at_edge_types_error_t *err) {",
                "// Line 741:   return convert_result(fastly::resp_send_downstream(h, b, streaming), err);",
                "// vulnerable line: 742: }",
                "// Line 743: ",
                "// Line 744: bool fastly_compute_at_edge_http_resp_status_get(",
                "// Line 745:     fastly_compute_at_edge_http_types_response_handle_t h,",
                "// Line 746:     fastly_compute_at_edge_http_types_http_status_t *ret,",
                "// Line 747:     fastly_compute_at_edge_types_error_t *err) {",
                "// Line 748:   return convert_result(fastly::resp_status_get(h, ret), err);",
                "// vulnerable line: 749: }",
                "// Line 750: ",
                "// Line 751: bool fastly_compute_at_edge_http_resp_status_set(",
                "// Line 752:     fastly_compute_at_edge_http_types_response_handle_t h,",
                "// Line 753:     fastly_compute_at_edge_http_types_http_status_t status,",
                "// Line 754:     fastly_compute_at_edge_types_error_t *err) {",
                "// Line 755:   return convert_result(fastly::resp_status_set(h, status), err);",
                "// vulnerable line: 756: }",
                "// Line 757: ",
                "// Line 758: bool fastly_compute_at_edge_dictionary_open(fastly_world_string_t *name,",
                "// Line 759:                                             fastly_compute_at_edge_dictionary_handle_t *ret,",
                "// Line 760:                                             fastly_compute_at_edge_types_error_t *err) {",
                "// Line 761:   return convert_result(",
                "// Line 762:       fastly::dictionary_open(reinterpret_cast<char *>(name->ptr), name->len, ret), err);",
                "// vulnerable line: 763: }",
                "// Line 764: ",
                "// Line 765: bool fastly_compute_at_edge_dictionary_get(fastly_compute_at_edge_dictionary_handle_t h,",
                "// Line 766:                                            fastly_world_string_t *key,",
                "// Line 767:                                            fastly_world_option_string_t *ret,",
                "// Line 768:                                            fastly_compute_at_edge_types_error_t *err) {",
                "// Line 769:   ret->val.ptr = static_cast<uint8_t *>(cabi_malloc(DICTIONARY_ENTRY_MAX_LEN, 1));",
                "// Line 770:   if (!convert_result(fastly::dictionary_get(h, reinterpret_cast<char *>(key->ptr), key->len,",
                "// Line 771:                                              reinterpret_cast<char *>(ret->val.ptr),",
                "// Line 772:                                              DICTIONARY_ENTRY_MAX_LEN, &ret->val.len),",
                "// Line 773:                       err)) {",
                "// Line 774:     if (*err == FASTLY_COMPUTE_AT_EDGE_TYPES_ERROR_OPTIONAL_NONE) {",
                "// Line 775:       ret->is_some = false;",
                "// Line 776:       return true;",
                "// Line 777:     } else {",
                "// Line 778:       cabi_free(ret->val.ptr);",
                "// Line 779:       return false;",
                "// vulnerable line: 780: }",
                "// vulnerable line: 781: }",
                "// Line 782:   ret->is_some = true;",
                "// Line 783:   ret->val.ptr =",
                "// Line 784:       static_cast<uint8_t *>(cabi_realloc(ret->val.ptr, DICTIONARY_ENTRY_MAX_LEN, 1, ret->val.len));",
                "// Line 785:   return true;",
                "// vulnerable line: 786: }",
                "// Line 787: ",
                "// Line 788: bool fastly_compute_at_edge_secret_store_open(",
                "// Line 789:     fastly_world_string_t *name, fastly_compute_at_edge_secret_store_store_handle_t *ret,",
                "// Line 790:     fastly_compute_at_edge_types_error_t *err) {",
                "// Line 791:   return convert_result(",
                "// Line 792:       fastly::secret_store_open(reinterpret_cast<char *>(name->ptr), name->len, ret), err);",
                "// vulnerable line: 793: }",
                "// Line 794: ",
                "// Line 795: bool fastly_compute_at_edge_secret_store_get(",
                "// Line 796:     fastly_compute_at_edge_secret_store_store_handle_t store, fastly_world_string_t *key,",
                "// Line 797:     fastly_world_option_secret_handle_t *ret, fastly_compute_at_edge_types_error_t *err) {",
                "// Line 798:   ret->val = INVALID_HANDLE;",
                "// Line 799:   bool ok = convert_result(",
                "// Line 800:       fastly::secret_store_get(store, reinterpret_cast<char *>(key->ptr), key->len, &ret->val),",
                "// Line 801:       err);",
                "// Line 802:   if ((!ok && *err == FASTLY_COMPUTE_AT_EDGE_TYPES_ERROR_OPTIONAL_NONE) ||",
                "// Line 803:       ret->val == INVALID_HANDLE) {",
                "// Line 804:     ret->is_some = false;",
                "// Line 805:     return true;",
                "// vulnerable line: 806: }",
                "// Line 807:   ret->is_some = true;",
                "// Line 808:   return ok;",
                "// vulnerable line: 809: }",
                "// Line 810: ",
                "// Line 811: bool fastly_compute_at_edge_secret_store_plaintext(",
                "// Line 812:     fastly_compute_at_edge_secret_store_secret_handle_t h, fastly_world_option_list_u8_t *ret,",
                "// Line 813:     fastly_compute_at_edge_secret_store_error_t *err) {",
                "// Line 814:   ret->val.ptr = static_cast<uint8_t *>(JS_malloc(CONTEXT, DICTIONARY_ENTRY_MAX_LEN));",
                "// Line 815:   if (!convert_result(fastly::secret_store_plaintext(h, reinterpret_cast<char *>(ret->val.ptr),",
                "// Line 816:                                                      DICTIONARY_ENTRY_MAX_LEN, &ret->val.len),",
                "// Line 817:                       err)) {",
                "// Line 818:     if (*err == FASTLY_COMPUTE_AT_EDGE_TYPES_ERROR_OPTIONAL_NONE) {",
                "// Line 819:       ret->is_some = false;",
                "// Line 820:       return true;",
                "// Line 821:     } else {",
                "// Line 822:       JS_free(CONTEXT, ret->val.ptr);",
                "// Line 823:       return false;",
                "// vulnerable line: 824: }",
                "// vulnerable line: 825: }",
                "// Line 826:   ret->is_some = true;",
                "// Line 827:   ret->val.ptr = static_cast<uint8_t *>(",
                "// Line 828:       JS_realloc(CONTEXT, ret->val.ptr, DICTIONARY_ENTRY_MAX_LEN, ret->val.len));",
                "// Line 829:   return true;",
                "// vulnerable line: 830: }",
                "// Line 831: ",
                "// Line 832: bool fastly_compute_at_edge_secret_store_from_bytes(",
                "// Line 833:     fastly_world_list_u8_t *bytes, fastly_compute_at_edge_secret_store_secret_handle_t *ret,",
                "// Line 834:     fastly_compute_at_edge_secret_store_error_t *err) {",
                "// Line 835:   *ret = INVALID_HANDLE;",
                "// Line 836:   bool ok = convert_result(",
                "// Line 837:       fastly::secret_store_from_bytes(reinterpret_cast<char *>(bytes->ptr), bytes->len, ret), err);",
                "// Line 838:   if (!ok || *ret == INVALID_HANDLE) {",
                "// Line 839:     return false;",
                "// vulnerable line: 840: }",
                "// Line 841:   return true;",
                "// vulnerable line: 842: }",
                "// Line 843: ",
                "// Line 844: bool fastly_compute_at_edge_geo_lookup(fastly_world_list_u8_t *addr_octets,",
                "// Line 845:                                        fastly_world_string_t *ret,",
                "// Line 846:                                        fastly_compute_at_edge_types_error_t *err) {",
                "// Line 847:   ret->ptr = static_cast<uint8_t *>(cabi_malloc(HOSTCALL_BUFFER_LEN, 1));",
                "// Line 848:   if (!convert_result(fastly::geo_lookup(addr_octets->ptr, addr_octets->len,",
                "// Line 849:                                          reinterpret_cast<char *>(ret->ptr), HOSTCALL_BUFFER_LEN,",
                "// Line 850:                                          &ret->len),",
                "// Line 851:                       err)) {",
                "// Line 852:     cabi_free(ret->ptr);",
                "// Line 853:     return false;",
                "// vulnerable line: 854: }",
                "// Line 855:   ret->ptr = static_cast<uint8_t *>(cabi_realloc(ret->ptr, HOSTCALL_BUFFER_LEN, 1, ret->len));",
                "// Line 856:   return true;",
                "// vulnerable line: 857: }",
                "// Line 858: ",
                "// Line 859: bool fastly_compute_at_edge_object_store_open(fastly_world_string_t *name,",
                "// Line 860:                                               fastly_compute_at_edge_object_store_handle_t *ret,",
                "// Line 861:                                               fastly_compute_at_edge_types_error_t *err) {",
                "// Line 862:   return convert_result(",
                "// Line 863:       fastly::object_store_open(reinterpret_cast<char *>(name->ptr), name->len, ret), err);",
                "// vulnerable line: 864: }",
                "// Line 865: ",
                "// Line 866: bool fastly_compute_at_edge_object_store_lookup(fastly_compute_at_edge_object_store_handle_t store,",
                "// Line 867:                                                 fastly_world_string_t *key,",
                "// Line 868:                                                 fastly_world_option_body_handle_t *ret,",
                "// Line 869:                                                 fastly_compute_at_edge_types_error_t *err) {",
                "// Line 870:   ret->val = INVALID_HANDLE;",
                "// Line 871:   bool ok = convert_result(",
                "// Line 872:       fastly::object_store_get(store, reinterpret_cast<char *>(key->ptr), key->len, &ret->val),",
                "// Line 873:       err);",
                "// Line 874:   if ((!ok && *err == FASTLY_COMPUTE_AT_EDGE_TYPES_ERROR_OPTIONAL_NONE) ||",
                "// Line 875:       ret->val == INVALID_HANDLE) {",
                "// Line 876:     ret->is_some = false;",
                "// Line 877:     return true;",
                "// vulnerable line: 878: }",
                "// Line 879:   ret->is_some = true;",
                "// Line 880:   return ok;",
                "// vulnerable line: 881: }",
                "// Line 882: ",
                "// Line 883: bool fastly_compute_at_edge_object_store_lookup_async(",
                "// Line 884:     fastly_compute_at_edge_object_store_handle_t store, fastly_world_string_t *key,",
                "// Line 885:     fastly_compute_at_edge_object_store_pending_handle_t *ret,",
                "// Line 886:     fastly_compute_at_edge_object_store_error_t *err) {",
                "// Line 887:   return convert_result(",
                "// Line 888:       fastly::object_store_get_async(store, reinterpret_cast<char *>(key->ptr), key->len, ret),",
                "// Line 889:       err);",
                "// vulnerable line: 890: }",
                "// Line 891: ",
                "// Line 892: bool fastly_compute_at_edge_object_store_pending_lookup_wait(",
                "// Line 893:     fastly_compute_at_edge_object_store_pending_handle_t h, fastly_world_option_body_handle_t *ret,",
                "// Line 894:     fastly_compute_at_edge_object_store_error_t *err) {",
                "// Line 895:   ret->val = INVALID_HANDLE;",
                "// Line 896:   bool ok = convert_result(fastly::object_store_pending_lookup_wait(h, &ret->val), err);",
                "// Line 897:   if ((!ok && *err == FASTLY_COMPUTE_AT_EDGE_TYPES_ERROR_OPTIONAL_NONE) ||",
                "// Line 898:       ret->val == INVALID_HANDLE) {",
                "// Line 899:     ret->is_some = false;",
                "// Line 900:     return true;",
                "// vulnerable line: 901: }",
                "// Line 902:   ret->is_some = true;",
                "// Line 903:   return ok;",
                "// vulnerable line: 904: }",
                "// Line 905: ",
                "// Line 906: bool fastly_compute_at_edge_object_store_delete_async(",
                "// Line 907:     fastly_compute_at_edge_object_store_handle_t store, fastly_world_string_t *key,",
                "// Line 908:     fastly_compute_at_edge_object_store_pending_handle_t *ret,",
                "// Line 909:     fastly_compute_at_edge_object_store_error_t *err) {",
                "// Line 910:   return convert_result(",
                "// Line 911:       fastly::object_store_delete_async(store, reinterpret_cast<char *>(key->ptr), key->len, ret),",
                "// Line 912:       err);",
                "// vulnerable line: 913: }",
                "// Line 914: ",
                "// Line 915: bool fastly_compute_at_edge_object_store_pending_delete_wait(",
                "// Line 916:     fastly_compute_at_edge_object_store_pending_handle_t h,",
                "// Line 917:     fastly_compute_at_edge_object_store_error_t *err) {",
                "// Line 918:   return convert_result(fastly::object_store_pending_delete_wait(h), err);",
                "// vulnerable line: 919: }",
                "// Line 920: ",
                "// Line 921: bool fastly_compute_at_edge_object_store_insert(",
                "// Line 922:     fastly_compute_at_edge_object_store_handle_t store, fastly_world_string_t *key,",
                "// Line 923:     fastly_compute_at_edge_http_types_body_handle_t body_handle,",
                "// Line 924:     fastly_compute_at_edge_types_error_t *err) {",
                "// Line 925:   return convert_result(",
                "// Line 926:       fastly::object_store_insert(store, reinterpret_cast<char *>(key->ptr), key->len, body_handle),",
                "// Line 927:       err);",
                "// vulnerable line: 928: }",
                "// Line 929: ",
                "// Line 930: bool fastly_compute_at_edge_async_io_select(fastly_world_list_handle_t *hs, uint32_t timeout_ms,",
                "// Line 931:                                             fastly_world_option_u32_t *ret,",
                "// Line 932:                                             fastly_compute_at_edge_types_error_t *err) {",
                "// Line 933:   if (!convert_result(fastly::async_select(hs->ptr, hs->len, timeout_ms, &ret->val), err)) {",
                "// Line 934:     if (*err == FASTLY_COMPUTE_AT_EDGE_TYPES_ERROR_OPTIONAL_NONE) {",
                "// Line 935:       ret->is_some = false;",
                "// Line 936:       return true;",
                "// vulnerable line: 937: }",
                "// Line 938:     return false;",
                "// vulnerable line: 939: }",
                "// Line 940: ",
                "// Line 941:   // The result is only valid if the timeout didn't expire.",
                "// Line 942:   ret->is_some = ret->val != UINT32_MAX;",
                "// Line 943: ",
                "// Line 944:   return true;",
                "// vulnerable line: 945: }",
                "// Line 946: bool fastly_compute_at_edge_async_io_is_ready(fastly_compute_at_edge_async_io_handle_t handle,",
                "// Line 947:                                               bool *ret,",
                "// Line 948:                                               fastly_compute_at_edge_types_error_t *err) {",
                "// Line 949:   uint32_t ret_int;",
                "// Line 950:   if (!convert_result(fastly::async_is_ready(handle, &ret_int), err)) {",
                "// Line 951:     return false;",
                "// vulnerable line: 952: }",
                "// Line 953:   *ret = (bool)ret_int;",
                "// Line 954:   return true;",
                "// vulnerable line: 955: }",
                "// Line 956: ",
                "// Line 957: bool fastly_compute_at_edge_purge_surrogate_key(",
                "// Line 958:     fastly_world_string_t *surrogate_key, fastly_compute_at_edge_purge_options_mask_t options_mask,",
                "// Line 959:     fastly_world_option_string_t *ret, fastly_compute_at_edge_types_error_t *err) {",
                "// Line 960:   fastly::PurgeOptions options{nullptr, 0, nullptr};",
                "// Line 961: ",
                "// Line 962:   // Currently this host-call has been implemented to support the `SimpleCache.delete(key)` method,",
                "// Line 963:   // which uses hard-purging and not soft-purging.",
                "// Line 964:   // TODO: Create a JS API for this hostcall which supports hard-purging and another which supports",
                "// Line 965:   // soft-purging. E.G. `fastly.purgeSurrogateKey(key)` and `fastly.softPurgeSurrogateKey(key)`",
                "// Line 966:   MOZ_ASSERT(!(options_mask & FASTLY_COMPUTE_AT_EDGE_PURGE_OPTIONS_MASK_SOFT_PURGE));",
                "// Line 967:   MOZ_ASSERT(!(options_mask & FASTLY_COMPUTE_AT_EDGE_PURGE_OPTIONS_MASK_RET_BUF));",
                "// Line 968: ",
                "// Line 969:   ret->is_some = false;",
                "// Line 970: ",
                "// Line 971:   return convert_result(fastly::purge_surrogate_key(reinterpret_cast<char *>(surrogate_key->ptr),",
                "// Line 972:                                                     surrogate_key->len, options_mask, &options),",
                "// Line 973:                         err);",
                "// vulnerable line: 974: }",
                "// Line 975: ",
                "// Line 976: #define FASTLY_CACHE_LOOKUP_OPTIONS_MASK_RESERVED (1 << 0)",
                "// Line 977: #define FASTLY_CACHE_LOOKUP_OPTIONS_MASK_REQUEST_HEADERS (1 << 1)",
                "// Line 978: ",
                "// Line 979: bool fastly_compute_at_edge_cache_lookup(fastly_world_string_t *cache_key,",
                "// Line 980:                                          fastly_compute_at_edge_cache_lookup_options_t *options,",
                "// Line 981:                                          fastly_compute_at_edge_cache_handle_t *ret,",
                "// Line 982:                                          fastly_compute_at_edge_types_error_t *err) {",
                "// Line 983:   uint8_t options_mask = 0;",
                "// Line 984:   if (options->request_headers.is_some) {",
                "// Line 985:     options_mask |= FASTLY_CACHE_LOOKUP_OPTIONS_MASK_REQUEST_HEADERS;",
                "// vulnerable line: 986: }",
                "// Line 987:   return convert_result(fastly::cache_lookup(reinterpret_cast<char *>(cache_key->ptr),",
                "// Line 988:                                              cache_key->len, options_mask, options, ret),",
                "// Line 989:                         err);",
                "// vulnerable line: 990: }",
                "// Line 991: ",
                "// Line 992: #define FASTLY_CACHE_WRITE_OPTIONS_MASK_RESERVED (1 << 0)",
                "// Line 993: #define FASTLY_CACHE_WRITE_OPTIONS_MASK_REQUEST_HEADERS (1 << 1)",
                "// Line 994: #define FASTLY_CACHE_WRITE_OPTIONS_MASK_VARY_RULE (1 << 2)",
                "// Line 995: #define FASTLY_CACHE_WRITE_OPTIONS_MASK_INITIAL_AGE_NS (1 << 3)",
                "// Line 996: #define FASTLY_CACHE_WRITE_OPTIONS_MASK_STALE_WHILE_REVALIDATE_NS (1 << 4)",
                "// Line 997: #define FASTLY_CACHE_WRITE_OPTIONS_MASK_SURROGATE_KEYS (1 << 5)",
                "// Line 998: #define FASTLY_CACHE_WRITE_OPTIONS_MASK_LENGTH (1 << 6)",
                "// Line 999: #define FASTLY_CACHE_WRITE_OPTIONS_MASK_USER_METADATA (1 << 7)",
                "// Line 1000: #define FASTLY_CACHE_WRITE_OPTIONS_MASK_SENSITIVE_DATA (1 << 8)",
                "// Line 1004:                                          fastly_compute_at_edge_http_types_body_handle_t *ret,",
                "// Line 1005:                                          fastly_compute_at_edge_types_error_t *err) {",
                "// Line 1006:   uint16_t options_mask = 0;",
                "// Line 1007:   fastly::CacheWriteOptions opts;",
                "// Line 1008:   std::memset(&opts, 0, sizeof(opts));",
                "// Line 1009:   opts.max_age_ns = options->max_age_ns;",
                "// Line 1010: ",
                "// Line 1011:   if (options->request_headers != INVALID_HANDLE && options->request_headers != 0) {",
                "// Line 1012:     options_mask |= FASTLY_CACHE_WRITE_OPTIONS_MASK_REQUEST_HEADERS;",
                "// Line 1013:     opts.request_headers = options->request_headers;",
                "// vulnerable line: 1014: }",
                "// Line 1015:   if (options->vary_rule.ptr != nullptr) {",
                "// Line 1016:     options_mask |= FASTLY_CACHE_WRITE_OPTIONS_MASK_VARY_RULE;",
                "// Line 1017:     opts.vary_rule_len = options->vary_rule.len;",
                "// Line 1018:     opts.vary_rule_ptr = reinterpret_cast<uint8_t *>(options->vary_rule.ptr);",
                "// vulnerable line: 1019: }",
                "// Line 1020:   if (options->initial_age_ns != 0) {",
                "// Line 1021:     options_mask |= FASTLY_CACHE_WRITE_OPTIONS_MASK_INITIAL_AGE_NS;",
                "// Line 1022:     opts.initial_age_ns = options->initial_age_ns;",
                "// vulnerable line: 1023: }",
                "// Line 1024:   if (options->stale_while_revalidate_ns != 0) {",
                "// Line 1025:     options_mask |= FASTLY_CACHE_WRITE_OPTIONS_MASK_STALE_WHILE_REVALIDATE_NS;",
                "// Line 1026:     opts.stale_while_revalidate_ns = options->stale_while_revalidate_ns;",
                "// vulnerable line: 1027: }",
                "// Line 1028:   if (options->surrogate_keys.ptr != nullptr) {",
                "// Line 1029:     options_mask |= FASTLY_CACHE_WRITE_OPTIONS_MASK_SURROGATE_KEYS;",
                "// Line 1030:     opts.surrogate_keys_len = options->surrogate_keys.len;",
                "// Line 1031:     opts.surrogate_keys_ptr = reinterpret_cast<uint8_t *>(options->surrogate_keys.ptr);",
                "// vulnerable line: 1032: }",
                "// Line 1033:   if (options->length != 0) {",
                "// Line 1034:     options_mask |= FASTLY_CACHE_WRITE_OPTIONS_MASK_LENGTH;",
                "// Line 1035:     opts.length = options->length;",
                "// vulnerable line: 1036: }",
                "// Line 1037:   if (options->user_metadata.ptr != nullptr) {",
                "// Line 1038:     options_mask |= FASTLY_CACHE_WRITE_OPTIONS_MASK_USER_METADATA;",
                "// Line 1039:     opts.user_metadata_len = options->user_metadata.len;",
                "// Line 1040:     opts.user_metadata_ptr = options->user_metadata.ptr;",
                "// vulnerable line: 1041: }",
                "// Line 1042:   if (options->sensitive_data) {",
                "// Line 1043:     options_mask |= FASTLY_CACHE_WRITE_OPTIONS_MASK_SENSITIVE_DATA;",
                "// vulnerable line: 1044: }",
                "// Line 1045:   return convert_result(fastly::cache_insert(reinterpret_cast<char *>(cache_key->ptr),",
                "// Line 1046:                                              cache_key->len, options_mask, &opts, ret),",
                "// Line 1047:                         err);",
                "// vulnerable line: 1048: }",
                "// Line 1049: ",
                "// Line 1050: bool fastly_compute_at_edge_cache_transaction_insert(",
                "// Line 1051:     fastly_compute_at_edge_cache_handle_t handle,",
                "// Line 1052:     fastly_compute_at_edge_cache_write_options_t *options,",
                "// Line 1053:     fastly_compute_at_edge_cache_body_handle_t *ret, fastly_compute_at_edge_cache_error_t *err) {",
                "// Line 1054:   uint16_t options_mask = 0;",
                "// Line 1055:   fastly::CacheWriteOptions opts;",
                "// Line 1056:   std::memset(&opts, 0, sizeof(opts));",
                "// Line 1057:   opts.max_age_ns = options->max_age_ns;",
                "// Line 1058: ",
                "// Line 1059:   if (options->request_headers != INVALID_HANDLE && options->request_headers != 0) {",
                "// Line 1060:     options_mask |= FASTLY_CACHE_WRITE_OPTIONS_MASK_REQUEST_HEADERS;",
                "// Line 1061:     opts.request_headers = options->request_headers;",
                "// vulnerable line: 1062: }",
                "// Line 1063:   if (options->vary_rule.len > 0) {",
                "// Line 1064:     options_mask |= FASTLY_CACHE_WRITE_OPTIONS_MASK_VARY_RULE;",
                "// Line 1065:     opts.vary_rule_len = options->vary_rule.len;",
                "// Line 1066:     opts.vary_rule_ptr = reinterpret_cast<uint8_t *>(options->vary_rule.ptr);",
                "// vulnerable line: 1067: }",
                "// Line 1068:   if (options->initial_age_ns != 0) {",
                "// Line 1069:     options_mask |= FASTLY_CACHE_WRITE_OPTIONS_MASK_INITIAL_AGE_NS;",
                "// Line 1070:     opts.initial_age_ns = options->initial_age_ns;",
                "// vulnerable line: 1071: }",
                "// Line 1072:   if (options->stale_while_revalidate_ns != 0) {",
                "// Line 1073:     options_mask |= FASTLY_CACHE_WRITE_OPTIONS_MASK_STALE_WHILE_REVALIDATE_NS;",
                "// Line 1074:     opts.stale_while_revalidate_ns = options->stale_while_revalidate_ns;",
                "// vulnerable line: 1075: }",
                "// Line 1076:   if (options->surrogate_keys.ptr != nullptr) {",
                "// Line 1077:     options_mask |= FASTLY_CACHE_WRITE_OPTIONS_MASK_SURROGATE_KEYS;",
                "// Line 1078:     opts.surrogate_keys_len = options->surrogate_keys.len;",
                "// Line 1079:     opts.surrogate_keys_ptr = reinterpret_cast<uint8_t *>(options->surrogate_keys.ptr);",
                "// vulnerable line: 1080: }",
                "// Line 1081:   if (options->length != 0) {",
                "// Line 1082:     options_mask |= FASTLY_CACHE_WRITE_OPTIONS_MASK_LENGTH;",
                "// Line 1083:     opts.length = options->length;",
                "// vulnerable line: 1084: }",
                "// Line 1085:   if (options->user_metadata.ptr != nullptr) {",
                "// Line 1086:     options_mask |= FASTLY_CACHE_WRITE_OPTIONS_MASK_USER_METADATA;",
                "// Line 1087:     opts.user_metadata_len = options->user_metadata.len;",
                "// Line 1088:     opts.user_metadata_ptr = options->user_metadata.ptr;",
                "// vulnerable line: 1089: }",
                "// Line 1090:   if (options->sensitive_data) {",
                "// Line 1091:     options_mask |= FASTLY_CACHE_WRITE_OPTIONS_MASK_SENSITIVE_DATA;",
                "// vulnerable line: 1092: }",
                "// Line 1093:   return convert_result(fastly::cache_transaction_insert(handle, options_mask, &opts, ret), err);",
                "// vulnerable line: 1094: }",
                "// Line 1095: ",
                "// Line 1096: bool fastly_compute_at_edge_cache_transaction_update(",
                "// Line 1097:     fastly_compute_at_edge_cache_handle_t handle,",
                "// Line 1098:     fastly_compute_at_edge_cache_write_options_t *options,",
                "// Line 1099:     fastly_compute_at_edge_cache_error_t *err) {",
                "// Line 1100:   uint16_t options_mask = 0;",
                "// Line 1101:   fastly::CacheWriteOptions opts;",
                "// Line 1102:   std::memset(&opts, 0, sizeof(opts));",
                "// Line 1103:   opts.max_age_ns = options->max_age_ns;",
                "// Line 1104: ",
                "// Line 1105:   if (options->request_headers != INVALID_HANDLE && options->request_headers != 0) {",
                "// Line 1106:     options_mask |= FASTLY_CACHE_WRITE_OPTIONS_MASK_REQUEST_HEADERS;",
                "// Line 1107:     opts.request_headers = options->request_headers;",
                "// vulnerable line: 1108: }",
                "// Line 1109:   if (options->vary_rule.ptr != nullptr) {",
                "// Line 1110:     options_mask |= FASTLY_CACHE_WRITE_OPTIONS_MASK_VARY_RULE;",
                "// Line 1111:     opts.vary_rule_len = options->vary_rule.len;",
                "// Line 1112:     opts.vary_rule_ptr = reinterpret_cast<uint8_t *>(options->vary_rule.ptr);",
                "// vulnerable line: 1113: }",
                "// Line 1114:   if (options->initial_age_ns != 0) {",
                "// Line 1115:     options_mask |= FASTLY_CACHE_WRITE_OPTIONS_MASK_INITIAL_AGE_NS;",
                "// Line 1116:     opts.initial_age_ns = options->initial_age_ns;",
                "// vulnerable line: 1117: }",
                "// Line 1118:   if (options->stale_while_revalidate_ns != 0) {",
                "// Line 1119:     options_mask |= FASTLY_CACHE_WRITE_OPTIONS_MASK_STALE_WHILE_REVALIDATE_NS;",
                "// Line 1120:     opts.stale_while_revalidate_ns = options->stale_while_revalidate_ns;",
                "// vulnerable line: 1121: }",
                "// Line 1122:   if (options->surrogate_keys.ptr != nullptr) {",
                "// Line 1123:     options_mask |= FASTLY_CACHE_WRITE_OPTIONS_MASK_SURROGATE_KEYS;",
                "// Line 1124:     opts.surrogate_keys_len = options->surrogate_keys.len;",
                "// Line 1125:     opts.surrogate_keys_ptr = reinterpret_cast<uint8_t *>(options->surrogate_keys.ptr);",
                "// vulnerable line: 1126: }",
                "// Line 1127:   if (options->length != 0) {",
                "// Line 1128:     options_mask |= FASTLY_CACHE_WRITE_OPTIONS_MASK_LENGTH;",
                "// Line 1129:     opts.length = options->length;",
                "// vulnerable line: 1130: }",
                "// Line 1131:   if (options->user_metadata.ptr != nullptr) {",
                "// Line 1132:     options_mask |= FASTLY_CACHE_WRITE_OPTIONS_MASK_USER_METADATA;",
                "// Line 1133:     opts.user_metadata_len = options->user_metadata.len;",
                "// Line 1134:     opts.user_metadata_ptr = options->user_metadata.ptr;",
                "// vulnerable line: 1135: }",
                "// Line 1136:   if (options->sensitive_data) {",
                "// Line 1137:     options_mask |= FASTLY_CACHE_WRITE_OPTIONS_MASK_SENSITIVE_DATA;",
                "// vulnerable line: 1138: }",
                "// Line 1139:   return convert_result(fastly::cache_transaction_update(handle, options_mask, &opts), err);",
                "// vulnerable line: 1140: }",
                "// Line 1141: ",
                "// Line 1142: bool fastly_compute_at_edge_cache_get_body(",
                "// Line 1143:     fastly_compute_at_edge_cache_handle_t handle,",
                "// Line 1144:     fastly_compute_at_edge_cache_get_body_options_t *options,",
                "// Line 1145:     fastly_compute_at_edge_cache_get_body_options_mask_t options_mask,",
                "// Line 1146:     fastly_compute_at_edge_cache_body_handle_t *ret, fastly_compute_at_edge_cache_error_t *err) {",
                "// Line 1147:   bool ok = convert_result(fastly::cache_get_body(handle, options_mask, options, ret), err);",
                "// Line 1148:   if (!ok && *err == FASTLY_COMPUTE_AT_EDGE_TYPES_ERROR_OPTIONAL_NONE) {",
                "// Line 1149:     *ret = INVALID_HANDLE;",
                "// Line 1150:     return true;",
                "// vulnerable line: 1151: }",
                "// Line 1152:   return ok;",
                "// vulnerable line: 1153: }",
                "// Line 1154: bool fastly_compute_at_edge_cache_transaction_lookup(",
                "// Line 1155:     fastly_world_string_t *cache_key, fastly_compute_at_edge_cache_lookup_options_t *options,",
                "// Line 1156:     fastly_compute_at_edge_cache_handle_t *ret, fastly_compute_at_edge_types_error_t *err) {",
                "// Line 1157:   uint32_t options_mask = 0;",
                "// Line 1158:   if (options->request_headers.is_some) {",
                "// Line 1159:     options_mask |= FASTLY_CACHE_LOOKUP_OPTIONS_MASK_REQUEST_HEADERS;",
                "// vulnerable line: 1160: }",
                "// Line 1161:   return convert_result(fastly::cache_transaction_lookup(reinterpret_cast<char *>(cache_key->ptr),",
                "// Line 1162:                                                          cache_key->len, options_mask, options,",
                "// Line 1163:                                                          ret),",
                "// Line 1164:                         err);",
                "// vulnerable line: 1165: }",
                "// Line 1166: bool fastly_compute_at_edge_cache_transaction_insert_and_stream_back(",
                "// Line 1167:     fastly_compute_at_edge_cache_handle_t handle,",
                "// Line 1168:     fastly_compute_at_edge_cache_write_options_t *options,",
                "// Line 1169:     fastly_world_tuple2_body_handle_handle_t *ret, fastly_compute_at_edge_types_error_t *err) {",
                "// Line 1170:   uint16_t options_mask = 0;",
                "// Line 1171:   fastly::CacheWriteOptions opts;",
                "// Line 1172:   std::memset(&opts, 0, sizeof(opts));",
                "// Line 1173:   opts.max_age_ns = options->max_age_ns;",
                "// Line 1174: ",
                "// Line 1175:   MOZ_ASSERT(options->request_headers == INVALID_HANDLE || options->request_headers == 0);",
                "// Line 1176: ",
                "// Line 1177:   if (options->vary_rule.ptr != nullptr) {",
                "// Line 1178:     options_mask |= FASTLY_CACHE_WRITE_OPTIONS_MASK_VARY_RULE;",
                "// Line 1179:     opts.vary_rule_len = options->vary_rule.len;",
                "// Line 1180:     opts.vary_rule_ptr = reinterpret_cast<uint8_t *>(options->vary_rule.ptr);",
                "// vulnerable line: 1181: }",
                "// Line 1182:   if (options->initial_age_ns != 0) {",
                "// Line 1183:     options_mask |= FASTLY_CACHE_WRITE_OPTIONS_MASK_INITIAL_AGE_NS;",
                "// Line 1184:     opts.initial_age_ns = options->initial_age_ns;",
                "// vulnerable line: 1185: }",
                "// Line 1186:   if (options->stale_while_revalidate_ns != 0) {",
                "// Line 1187:     options_mask |= FASTLY_CACHE_WRITE_OPTIONS_MASK_STALE_WHILE_REVALIDATE_NS;",
                "// Line 1188:     opts.stale_while_revalidate_ns = options->stale_while_revalidate_ns;",
                "// vulnerable line: 1189: }",
                "// Line 1190:   if (options->surrogate_keys.ptr != nullptr) {",
                "// Line 1191:     options_mask |= FASTLY_CACHE_WRITE_OPTIONS_MASK_SURROGATE_KEYS;",
                "// Line 1192:     opts.surrogate_keys_len = options->surrogate_keys.len;",
                "// Line 1193:     opts.surrogate_keys_ptr = reinterpret_cast<uint8_t *>(options->surrogate_keys.ptr);",
                "// vulnerable line: 1194: }",
                "// Line 1195:   if (options->length != 0) {",
                "// Line 1196:     options_mask |= FASTLY_CACHE_WRITE_OPTIONS_MASK_LENGTH;",
                "// Line 1197:     opts.length = options->length;",
                "// vulnerable line: 1198: }",
                "// Line 1199:   if (options->user_metadata.ptr != nullptr) {",
                "// Line 1200:     options_mask |= FASTLY_CACHE_WRITE_OPTIONS_MASK_USER_METADATA;",
                "// Line 1201:     opts.user_metadata_len = options->user_metadata.len;",
                "// Line 1202:     opts.user_metadata_ptr = options->user_metadata.ptr;",
                "// vulnerable line: 1203: }",
                "// Line 1204:   if (options->sensitive_data) {",
                "// Line 1205:     options_mask |= FASTLY_CACHE_WRITE_OPTIONS_MASK_SENSITIVE_DATA;",
                "// vulnerable line: 1206: }",
                "// Line 1207:   return convert_result(fastly::cache_transaction_insert_and_stream_back(handle, options_mask,",
                "// Line 1208:                                                                          &opts, &ret->f0, &ret->f1),",
                "// Line 1209:                         err);",
                "// vulnerable line: 1210: }",
                "// Line 1211: ",
                "// Line 1212: /// Cancel an obligation to provide an object to the cache.",
                "// Line 1213: ///",
                "// Line 1214: /// Useful if there is an error before streaming is possible, e.g. if a backend is unreachable.",
                "// Line 1215: bool fastly_compute_at_edge_cache_transaction_cancel(fastly_compute_at_edge_cache_handle_t handle,",
                "// Line 1216:                                                      fastly_compute_at_edge_types_error_t *err) {",
                "// Line 1217:   return convert_result(fastly::cache_transaction_cancel(handle), err);",
                "// vulnerable line: 1218: }",
                "// Line 1219: ",
                "// Line 1220: bool fastly_compute_at_edge_cache_get_state(fastly_compute_at_edge_cache_handle_t handle,",
                "// Line 1221:                                             fastly_compute_at_edge_cache_lookup_state_t *ret,",
                "// Line 1222:                                             fastly_compute_at_edge_types_error_t *err) {",
                "// Line 1223:   return convert_result(fastly::cache_get_state(handle, ret), err);",
                "// vulnerable line: 1224: }",
                "// Line 1225: ",
                "// Line 1226: /// Cancel an obligation to provide an object to the cache.",
                "// Line 1227: ///",
                "// Line 1228: /// Useful if there is an error before streaming is possible, e.g. if a backend is unreachable.",
                "// Line 1229: bool fastly_compute_at_edge_transaction_cancel(fastly_compute_at_edge_cache_handle_t handle,",
                "// Line 1230:                                                fastly_compute_at_edge_types_error_t *err) {",
                "// Line 1231:   return convert_result(fastly::cache_transaction_cancel(handle), err);",
                "// vulnerable line: 1232: }",
                "// Line 1233: ",
                "// Line 1234: bool fastly_compute_at_edge_cache_close(fastly_compute_at_edge_cache_handle_t handle,",
                "// Line 1235:                                         fastly_compute_at_edge_types_error_t *err) {",
                "// Line 1236:   return true;",
                "// vulnerable line: 1237: }",
                "// Line 1238: bool fastly_compute_at_edge_cache_get_user_metadata(fastly_compute_at_edge_cache_handle_t handle,",
                "// Line 1239:                                                     fastly_world_list_u8_t *ret,",
                "// Line 1240:                                                     fastly_compute_at_edge_cache_error_t *err) {",
                "// Line 1241:   size_t default_size = 16 * 1024;",
                "// Line 1242:   ret->ptr = static_cast<uint8_t *>(cabi_malloc(default_size, 4));",
                "// Line 1243:   auto status = fastly::cache_get_user_metadata(handle, reinterpret_cast<char *>(ret->ptr),",
                "// Line 1244:                                                 default_size, &ret->len);",
                "// Line 1245:   if (status == FASTLY_COMPUTE_AT_EDGE_TYPES_ERROR_BUFFER_LEN) {",
                "// vulnerable line: 1246: cabi_realloc(ret->ptr, default_size, 4, ret->len);",
                "// Line 1247:     status = fastly::cache_get_user_metadata(handle, reinterpret_cast<char *>(ret->ptr), ret->len,",
                "// Line 1248:                                              &ret->len);",
                "// vulnerable line: 1249: }",
                "// Line 1250:   return convert_result(status, err);",
                "// vulnerable line: 1251: }",
                "// Line 1252: bool fastly_compute_at_edge_cache_get_length(fastly_compute_at_edge_cache_handle_t handle,",
                "// Line 1253:                                              uint64_t *ret,",
                "// Line 1254:                                              fastly_compute_at_edge_types_error_t *err) {",
                "// Line 1255:   return convert_result(fastly::cache_get_length(handle, ret), err);",
                "// vulnerable line: 1256: }",
                "// Line 1257: bool fastly_compute_at_edge_cache_get_max_age_ns(fastly_compute_at_edge_cache_handle_t handle,",
                "// Line 1258:                                                  uint64_t *ret,",
                "// Line 1259:                                                  fastly_compute_at_edge_types_error_t *err) {",
                "// Line 1260:   return convert_result(fastly::cache_get_max_age_ns(handle, ret), err);",
                "// vulnerable line: 1261: }",
                "// Line 1262: bool fastly_compute_at_edge_cache_get_stale_while_revalidate_ns(",
                "// Line 1263:     fastly_compute_at_edge_cache_handle_t handle, uint64_t *ret,",
                "// Line 1264:     fastly_compute_at_edge_types_error_t *err) {",
                "// Line 1265:   return convert_result(fastly::cache_get_stale_while_revalidate_ns(handle, ret), err);",
                "// vulnerable line: 1266: }",
                "// Line 1267: bool fastly_compute_at_edge_cache_get_age_ns(fastly_compute_at_edge_cache_handle_t handle,",
                "// Line 1268:                                              uint64_t *ret,",
                "// Line 1269:                                              fastly_compute_at_edge_types_error_t *err) {",
                "// Line 1270:   return convert_result(fastly::cache_get_age_ns(handle, ret), err);",
                "// vulnerable line: 1271: }",
                "// Line 1272: bool fastly_compute_at_edge_cache_get_hits(fastly_compute_at_edge_cache_handle_t handle,",
                "// Line 1273:                                            uint64_t *ret,",
                "// Line 1274:                                            fastly_compute_at_edge_types_error_t *err) {",
                "// Line 1275:   return convert_result(fastly::cache_get_hits(handle, ret), err);",
                "// vulnerable line: 1276: }",
                "// Line 1277: ",
                "// Line 1278: /*",
                "// Line 1279:  * Fastly Backend",
                "// Line 1280:  */",
                "// Line 1281: bool fastly_compute_at_edge_backend_exists(fastly_world_string_t *backend, bool *ret,",
                "// Line 1282:                                            fastly_compute_at_edge_types_error_t *err) {",
                "// Line 1283:   uint32_t ret_int;",
                "// Line 1284:   if (!convert_result(",
                "// Line 1285:           fastly::backend_exists(reinterpret_cast<char *>(backend->ptr), backend->len, &ret_int),",
                "// Line 1286:           err)) {",
                "// Line 1287:     return false;",
                "// vulnerable line: 1288: }",
                "// Line 1289:   *ret = (bool)ret_int;",
                "// Line 1290:   return true;",
                "// vulnerable line: 1291: }",
                "// Line 1292: ",
                "// Line 1293: fastly_compute_at_edge_backend_backend_health_t",
                "// Line 1294: convert_fastly_backend_health(fastly::BACKEND_HEALTH version) {",
                "// Line 1295:   switch (version) {",
                "// Line 1296:   case fastly::BACKEND_HEALTH::UNKNOWN:",
                "// Line 1297:     return FASTLY_COMPUTE_AT_EDGE_BACKEND_BACKEND_HEALTH_UNKNOWN;",
                "// Line 1298:   case fastly::BACKEND_HEALTH::HEALTHY:",
                "// Line 1299:     return FASTLY_COMPUTE_AT_EDGE_BACKEND_BACKEND_HEALTH_HEALTHY;",
                "// Line 1300:   case fastly::BACKEND_HEALTH::UNHEALTHY:",
                "// Line 1301:     return FASTLY_COMPUTE_AT_EDGE_BACKEND_BACKEND_HEALTH_UNHEALTHY;",
                "// Line 1302:   default:",
                "// Line 1303:     return FASTLY_COMPUTE_AT_EDGE_BACKEND_BACKEND_HEALTH_UNKNOWN;",
                "// vulnerable line: 1304: }",
                "// vulnerable line: 1305: }",
                "// Line 1306: ",
                "// Line 1307: bool fastly_compute_at_edge_backend_is_healthy(fastly_world_string_t *backend,",
                "// Line 1308:                                                fastly_compute_at_edge_backend_backend_health_t *ret,",
                "// Line 1309:                                                fastly_compute_at_edge_types_error_t *err) {",
                "// Line 1310:   fastly::BACKEND_HEALTH fastly_backend_health;",
                "// Line 1311:   if (!convert_result(",
                "// Line 1312:           fastly::backend_is_healthy(reinterpret_cast<char *>(backend->ptr), backend->len,",
                "// Line 1313:                                      reinterpret_cast<uint32_t *>(&fastly_backend_health)),",
                "// Line 1314:           err)) {",
                "// Line 1315:     return false;",
                "// vulnerable line: 1316: }",
                "// Line 1317:   *ret = convert_fastly_backend_health(fastly_backend_health);",
                "// Line 1318:   return true;",
                "// vulnerable line: 1319: }",
                "// Line 1320: ",
                "// Line 1321: bool fastly_compute_at_edge_edge_rate_limiter_check_rate(",
                "// Line 1322:     fastly_world_string_t *rate_counter_name, fastly_world_string_t *entry, uint32_t delta,",
                "// Line 1323:     uint32_t window, uint32_t limit, fastly_world_string_t *penalty_box_name, uint32_t time_to_live,",
                "// Line 1324:     bool *ret, fastly_compute_at_edge_edge_rate_limiter_error_t *err) {",
                "// Line 1325:   return convert_result(",
                "// Line 1326:       fastly::check_rate(reinterpret_cast<char *>(rate_counter_name->ptr), rate_counter_name->len,",
                "// Line 1327:                          reinterpret_cast<char *>(entry->ptr), entry->len, delta, window, limit,",
                "// Line 1328:                          reinterpret_cast<char *>(penalty_box_name->ptr), penalty_box_name->len,",
                "// Line 1329:                          time_to_live, ret),",
                "// Line 1330:       err);",
                "// vulnerable line: 1331: }",
                "// Line 1332: ",
                "// Line 1333: bool fastly_compute_at_edge_edge_rate_limiter_ratecounter_increment(",
                "// Line 1334:     fastly_world_string_t *rate_counter_name, fastly_world_string_t *entry, uint32_t delta,",
                "// Line 1335:     fastly_compute_at_edge_edge_rate_limiter_error_t *err) {",
                "// Line 1336:   return convert_result(",
                "// Line 1337:       fastly::ratecounter_increment(reinterpret_cast<char *>(rate_counter_name->ptr),",
                "// Line 1338:                                     rate_counter_name->len, reinterpret_cast<char *>(entry->ptr),",
                "// Line 1339:                                     entry->len, delta),",
                "// Line 1340:       err);",
                "// vulnerable line: 1341: }",
                "// Line 1342: ",
                "// Line 1343: bool fastly_compute_at_edge_edge_rate_limiter_ratecounter_lookup_rate(",
                "// Line 1344:     fastly_world_string_t *rate_counter_name, fastly_world_string_t *entry, uint32_t window,",
                "// Line 1345:     uint32_t *ret, fastly_compute_at_edge_edge_rate_limiter_error_t *err) {",
                "// Line 1346:   return convert_result(",
                "// Line 1347:       fastly::ratecounter_lookup_rate(reinterpret_cast<char *>(rate_counter_name->ptr),",
                "// Line 1348:                                       rate_counter_name->len, reinterpret_cast<char *>(entry->ptr),",
                "// Line 1349:                                       entry->len, window, ret),",
                "// Line 1350:       err);",
                "// vulnerable line: 1351: }",
                "// Line 1352: ",
                "// Line 1353: bool fastly_compute_at_edge_edge_rate_limiter_ratecounter_lookup_count(",
                "// Line 1354:     fastly_world_string_t *rate_counter_name, fastly_world_string_t *entry, uint32_t duration,",
                "// Line 1355:     uint32_t *ret, fastly_compute_at_edge_edge_rate_limiter_error_t *err) {",
                "// Line 1356:   return convert_result(",
                "// Line 1357:       fastly::ratecounter_lookup_count(reinterpret_cast<char *>(rate_counter_name->ptr),",
                "// Line 1358:                                        rate_counter_name->len, reinterpret_cast<char *>(entry->ptr),",
                "// Line 1359:                                        entry->len, duration, ret),",
                "// Line 1360:       err);",
                "// vulnerable line: 1361: }",
                "// Line 1362: ",
                "// Line 1363: bool fastly_compute_at_edge_edge_rate_limiter_penaltybox_add(",
                "// Line 1364:     fastly_world_string_t *penalty_box_name, fastly_world_string_t *entry, uint32_t time_to_live,",
                "// Line 1365:     fastly_compute_at_edge_edge_rate_limiter_error_t *err) {",
                "// Line 1366:   return convert_result(",
                "// Line 1367:       fastly::penaltybox_add(reinterpret_cast<char *>(penalty_box_name->ptr), penalty_box_name->len,",
                "// Line 1368:                              reinterpret_cast<char *>(entry->ptr), entry->len, time_to_live),",
                "// Line 1369:       err);",
                "// vulnerable line: 1370: }",
                "// Line 1371: ",
                "// Line 1372: bool fastly_compute_at_edge_edge_rate_limiter_penaltybox_has(",
                "// Line 1373:     fastly_world_string_t *penalty_box_name, fastly_world_string_t *entry, bool *ret,",
                "// Line 1374:     fastly_compute_at_edge_edge_rate_limiter_error_t *err) {",
                "// Line 1375:   return convert_result(",
                "// Line 1376:       fastly::penaltybox_has(reinterpret_cast<char *>(penalty_box_name->ptr), penalty_box_name->len,",
                "// Line 1377:                              reinterpret_cast<char *>(entry->ptr), entry->len, ret),",
                "// Line 1378:       err);",
                "// vulnerable line: 1379: }",
                "// Line 1380: ",
                "// Line 1381: bool fastly_compute_at_edge_device_detection_lookup(",
                "// Line 1382:     fastly_world_string_t *user_agent, fastly_world_string_t *ret,",
                "// Line 1383:     fastly_compute_at_edge_device_detection_error_t *err) {",
                "// Line 1384:   auto default_size = 1024;",
                "// Line 1385:   ret->ptr = static_cast<uint8_t *>(cabi_malloc(default_size, 4));",
                "// Line 1386:   auto status =",
                "// Line 1387:       fastly::device_detection_lookup(reinterpret_cast<char *>(user_agent->ptr), user_agent->len,",
                "// Line 1388:                                       reinterpret_cast<char *>(ret->ptr), default_size, &ret->len);",
                "// Line 1389:   if (status == FASTLY_COMPUTE_AT_EDGE_TYPES_ERROR_BUFFER_LEN) {",
                "// vulnerable line: 1390: cabi_realloc(ret->ptr, default_size, 4, ret->len);",
                "// Line 1391:     status =",
                "// Line 1392:         fastly::device_detection_lookup(reinterpret_cast<char *>(user_agent->ptr), user_agent->len,",
                "// Line 1393:                                         reinterpret_cast<char *>(ret->ptr), ret->len, &ret->len);",
                "// vulnerable line: 1394: }",
                "// Line 1395:   return convert_result(status, err);",
                "// vulnerable line: 1396: }"
            ]
        }
    ]
}