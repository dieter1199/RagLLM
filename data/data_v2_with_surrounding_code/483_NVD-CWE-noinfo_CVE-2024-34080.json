{
    "cve_id": "CVE-2024-34080",
    "cve_description": "MantisBT (Mantis Bug Tracker) is an open source issue tracker. If an issue references a note that belongs to another issue that the user doesn't have access to, then it gets hyperlinked. Clicking on the link gives an access denied error as expected, yet some information remains available via the link, link label, and tooltip. This can result in disclosure of the existence of the note, the note author name, the note creation timestamp, and the issue id the note belongs to. Version 2.26.2 contains a patch for the issue. No known workarounds are available.",
    "cve_publish_date": "2024-05-14T15:38Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Fix access level check for note links\n\nFixes #34434",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "string_api.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "25",
            "number_of_lines_deleted_vulnerable_to_cve": "17",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 254:     $t_short_path = rtrim( config_get_global( 'short_path' ), '/' );",
                "// Line 255: ",
                "// Line 256:     $t_pattern = '(?:/*(?P<script>[^\\?#]*))(?:\\?(?P<query>[^#]*))?(?:#(?P<anchor>[^#]*))?';",
                "// Line 257: ",
                "// Line 258:     # Break the given URL into pieces for path, script, query, and anchor",
                "// Line 259:     $t_type = 0;",
                "// Line 260:     if( preg_match( '@^(?P<path>' . preg_quote( $t_path, '@' ) . ')' . $t_pattern . '$@', $t_url, $t_matches ) ) {",
                "// Line 261:         $t_type = 1;",
                "// Line 262:     } else if( !empty( $t_short_path )",
                "// Line 263:             && preg_match( '@^(?P<path>' . preg_quote( $t_short_path, '@' ) . ')' . $t_pattern . '$@', $t_url, $t_matches )",
                "// vulnerable line: 264: ) {",
                "// Line 265:         $t_type = 2;",
                "// Line 266:     } else if( preg_match( '@^(?P<path>)' . $t_pattern . '$@', $t_url, $t_matches ) ) {",
                "// Line 267:         $t_type = 3;",
                "// Line 268:     }",
                "// Line 269: ",
                "// Line 270:     # Check for URL's pointing to other domains",
                "// Line 271:     if( 0 == $t_type || empty( $t_matches['script'] ) ||",
                "// Line 272:         3 == $t_type && preg_match( '@(?:[^:]*)?:/*@', $t_url ) > 0 ) {",
                "// Line 273: ",
                "// Line 274:         return ( $p_return_absolute ? $t_path . '/' : '' ) . 'index.php';",
                "// Line 347: ",
                "// Line 348:     if( !isset( $s_bug_link_callback[$p_include_anchor][$p_detail_info][$p_fqdn] ) ) {",
                "// Line 349:         if( $p_include_anchor ) {",
                "// Line 350:             $s_bug_link_callback[$p_include_anchor][$p_detail_info][$p_fqdn] =",
                "// Line 351:                 function( $p_array ) use( $p_detail_info, $p_fqdn ) {",
                "// Line 352:                     $c_bug_id = (int)$p_array[2];",
                "// Line 353:                     if( bug_exists( $c_bug_id ) ) {",
                "// Line 354:                         $t_project_id = bug_get_field( $c_bug_id, 'project_id' );",
                "// Line 355:                         $t_view_bug_threshold = config_get( 'view_bug_threshold', null, null, $t_project_id );",
                "// Line 356:                         if( access_has_bug_level( $t_view_bug_threshold, $c_bug_id ) ) {",
                "// vulnerable line: 357: return $p_array[1] .",
                "// Line 358:                                 string_get_bug_view_link(",
                "// Line 359:                                     $c_bug_id,",
                "// vulnerable line: 360: (boolean)$p_detail_info,",
                "// vulnerable line: 361: (boolean)$p_fqdn",
                "// vulnerable line: 362: );",
                "// Line 363:                         }",
                "// Line 364:                     }",
                "// Line 365:                     return $p_array[0];",
                "// Line 366:                 }; # end of bug link callback closure",
                "// Line 367:         } else {",
                "// Line 368:             $s_bug_link_callback[$p_include_anchor][$p_detail_info][$p_fqdn] =",
                "// Line 369:                 function( $p_array ) {",
                "// Line 370:                     $c_bug_id = (int)$p_array[2];",
                "// Line 371:                     if( bug_exists( $c_bug_id ) ) {",
                "// Line 372:                         # Create link regardless of user's access to the bug",
                "// vulnerable line: 373: return $p_array[1] .",
                "// Line 374:                             string_get_bug_view_url_with_fqdn( $c_bug_id );",
                "// Line 375:                     }",
                "// Line 376:                     return $p_array[0];",
                "// Line 377:                 }; # end of bug link callback closure",
                "// Line 378:         }",
                "// Line 379:     }",
                "// Line 380: ",
                "// Line 381:     $p_string = preg_replace_callback(",
                "// Line 382:         '/(^|[^\\w&])' . preg_quote( $t_tag, '/' ) . '(\\d+)\b/',",
                "// Line 383:         $s_bug_link_callback[$p_include_anchor][$p_detail_info][$p_fqdn],",
                "// Line 384:         $p_string",
                "// vulnerable line: 385: );",
                "// Line 386:     return $p_string;",
                "// Line 387: }",
                "// Line 388: ",
                "// Line 389: /**",
                "// Line 390:  * Process $p_string, looking for bugnote ID references and creating bug view",
                "// Line 391:  * links for them.",
                "// Line 392:  *",
                "// Line 393:  * Returns the processed string.",
                "// Line 394:  *",
                "// Line 395:  * If $p_include_anchor is true, include the href tag, otherwise just insert",
                "// Line 417: ",
                "// Line 418:     if( !isset( $s_bugnote_link_callback[$p_include_anchor][$p_detail_info][$p_fqdn] ) ) {",
                "// Line 419:         if( $p_include_anchor ) {",
                "// Line 420:             $s_bugnote_link_callback[$p_include_anchor][$p_detail_info][$p_fqdn] =",
                "// Line 421:                 function( $p_array ) use( $p_detail_info, $p_fqdn ) {",
                "// Line 422:                     global $g_project_override;",
                "// Line 423:                     $c_bugnote_id = (int)$p_array[2];",
                "// Line 424:                     if( bugnote_exists( $c_bugnote_id ) ) {",
                "// Line 425:                         $t_bug_id = bugnote_get_field( $c_bugnote_id, 'bug_id' );",
                "// Line 426:                         if( bug_exists( $t_bug_id ) ) {",
                "// vulnerable line: 427: $g_project_override = bug_get_field( $t_bug_id, 'project_id' );",
                "// vulnerable line: 428: if(   access_compare_level(",
                "// vulnerable line: 429: user_get_access_level( auth_get_current_user_id(),",
                "// vulnerable line: 430: bug_get_field( $t_bug_id, 'project_id' ) ),",
                "// vulnerable line: 431: config_get( 'private_bugnote_threshold' )",
                "// vulnerable line: 432: )",
                "// vulnerable line: 433: || bugnote_get_field( $c_bugnote_id, 'reporter_id' ) == auth_get_current_user_id()",
                "// vulnerable line: 434: || bugnote_get_field( $c_bugnote_id, 'view_state' ) == VS_PUBLIC",
                "// vulnerable line: 435: ) {",
                "// vulnerable line: 436: $g_project_override = null;",
                "// vulnerable line: 437: return $p_array[1] .",
                "// vulnerable line: 438: string_get_bugnote_view_link(",
                "// vulnerable line: 439: $t_bug_id,",
                "// vulnerable line: 440: $c_bugnote_id,",
                "// vulnerable line: 441: (boolean)$p_detail_info,",
                "// vulnerable line: 442: (boolean)$p_fqdn",
                "// vulnerable line: 443: );",
                "// Line 444:                             }",
                "// vulnerable line: 445: $g_project_override = null;",
                "// Line 446:                         }",
                "// Line 447:                     }",
                "// Line 448:                     return $p_array[0];",
                "// Line 449:                 }; # end of bugnote link callback closure",
                "// Line 450:         } else {",
                "// Line 451:             $s_bugnote_link_callback[$p_include_anchor][$p_detail_info][$p_fqdn] =",
                "// Line 452:                 function( $p_array ) {",
                "// Line 453:                     $c_bugnote_id = (int)$p_array[2];",
                "// Line 454:                     if( bugnote_exists( $c_bugnote_id ) ) {",
                "// Line 455:                         $t_bug_id = bugnote_get_field( $c_bugnote_id, 'bug_id' );",
                "// Line 456:                         if( $t_bug_id && bug_exists( $t_bug_id ) ) {",
                "// vulnerable line: 457: return $p_array[1] .",
                "// Line 458:                                 string_get_bugnote_view_url_with_fqdn( $t_bug_id, $c_bugnote_id );",
                "// Line 459:                         }",
                "// Line 460:                     }",
                "// Line 461:                     return $p_array[0];",
                "// Line 462:                 }; # end of bugnote link callback closure",
                "// Line 463:         }",
                "// Line 464:     }",
                "// Line 465:     $p_string = preg_replace_callback(",
                "// Line 466:         '/(^|[^\\w])' . preg_quote( $t_tag, '/' ) . '(\\d+)\b/',",
                "// Line 467:         $s_bugnote_link_callback[$p_include_anchor][$p_detail_info][$p_fqdn],",
                "// Line 468:         $p_string",
                "// vulnerable line: 469: );",
                "// Line 470:     return $p_string;",
                "// Line 471: }",
                "// Line 472: ",
                "// Line 473: /**",
                "// Line 474:  * Search email addresses and URLs for a few common protocols in the given",
                "// Line 475:  * string, and replace occurrences with href anchors.",
                "// Line 476:  * @param string $p_string String to be processed.",
                "// Line 477:  * @return string",
                "// Line 478:  */",
                "// Line 479: function string_insert_hrefs( $p_string ) {",
                "// Line 515:     $t_link_attributes = helper_get_link_attributes( false );",
                "// Line 516: ",
                "// Line 517:     # Find any URL in a string and replace it with a clickable link",
                "// Line 518:     $p_string = preg_replace_callback(",
                "// Line 519:         $s_url_regex,",
                "// Line 520:         function ( $p_match ) use ( $t_link_attributes ) {",
                "// Line 521:             $t_url_href = 'href=\"' . rtrim( $p_match[1], '.' ) . '\"';",
                "// Line 522:             return \"<a {$t_url_href}{$t_link_attributes}>{$p_match[1]}</a>\";",
                "// Line 523:         },",
                "// Line 524:         $p_string",
                "// vulnerable line: 525: );",
                "// Line 526: ",
                "// Line 527:     # Find any email addresses in the string and replace them with a clickable",
                "// Line 528:     # mailto: link, making sure that we skip processing of any existing anchor",
                "// Line 529:     # tags, to avoid parts of URLs such as https://user@example.com/ or",
                "// Line 530:     # http://user:password@example.com/ to be not treated as an email.",
                "// Line 531:     $p_string = string_process_exclude_anchors(",
                "// Line 532:         $p_string,",
                "// Line 533:         function( $p_string ) use ( $s_email_regex ) {",
                "// Line 534:             return preg_replace( $s_email_regex, '<a href=\"mailto:\u0000\">\u0000</a>', $p_string );",
                "// Line 535:         }",
                "// vulnerable line: 536: );",
                "// Line 537: ",
                "// Line 538:     return $p_string;",
                "// Line 539: }",
                "// Line 540: ",
                "// Line 541: /**",
                "// Line 542:  * Processes a string, ignoring anchor tags.",
                "// Line 543:  * Applies the specified callback function to the text between anchor tags;",
                "// Line 544:  * the anchors themselves will be left as-is.",
                "// Line 545:  * @param string   $p_string   String to process",
                "// Line 546:  * @param callable $p_callback Function to apply",
                "// Line 874: function string_get_field_name( $p_string ) {",
                "// Line 875:     $t_map = array(",
                "// Line 876:         'attachment_count' => 'attachments',",
                "// Line 877:         'category_id' => 'category',",
                "// Line 878:         'handler_id' => 'assigned_to',",
                "// Line 879:         'id' => 'email_bug',",
                "// Line 880:         'last_updated' => 'updated',",
                "// Line 881:         'project_id' => 'email_project',",
                "// Line 882:         'reporter_id' => 'reporter',",
                "// Line 883:         'view_state' => 'view_status',",
                "// vulnerable line: 884: );",
                "// Line 885: ",
                "// Line 886:     $t_string = $p_string;",
                "// Line 887:     if( isset( $t_map[$p_string] ) ) {",
                "// Line 888:         $t_string = $t_map[$p_string];",
                "// Line 889:     }",
                "// Line 890:     return lang_get_defaulted( $t_string );",
                "// Line 891: }",
                "// Line 892: ",
                "// Line 893: /**",
                "// Line 894:  * Calls htmlentities on the specified string, passing along"
            ]
        }
    ]
}