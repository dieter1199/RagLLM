{
    "cve_id": "CVE-2024-25722",
    "cve_description": "qanything_kernel/connector/database/mysql/mysql_client.py in qanything.ai QAnything before 1.2.0 allows SQL Injection.",
    "cve_publish_date": "2024-02-11T05:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fix: Prevent SQL injection attacks.",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "mysql_client.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "28",
            "number_of_lines_deleted_vulnerable_to_cve": "21",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 119:             res = self.execute_query_(query, (), commit=True)",
                "// Line 120:             debug_logger.info(res)",
                "// Line 121:         except Exception as e:",
                "// Line 122:             if 'Duplicate column name' in str(e):",
                "// Line 123:                 debug_logger.info(e)",
                "// Line 124:             else:",
                "// Line 125:                 raise e",
                "// Line 126: ",
                "// Line 127:     def check_user_exist_(self, user_id):",
                "// Line 128:         query = \"SELECT user_id FROM User WHERE user_id = %s\"",
                "// vulnerable line: 129: result = self.execute_query_(query, (user_id,), fetch=True)",
                "// Line 130:         debug_logger.info(\"check_user_exist {}\".format(result))",
                "// Line 131:         return result is not None and len(result) > 0",
                "// Line 132: ",
                "// Line 133:     def check_kb_exist(self, user_id, kb_ids):",
                "// vulnerable line: 134: kb_ids_str = ','.join(\"'{}'\".format(str(x)) for x in kb_ids)",
                "// vulnerable line: 135: query = \"SELECT kb_id FROM KnowledgeBase WHERE kb_id IN ({}) AND deleted = 0 AND user_id = %s\".format(kb_ids_str)",
                "// vulnerable line: 136: result = self.execute_query_(query, (user_id,), fetch=True)",
                "// Line 137:         debug_logger.info(\"check_kb_exist {}\".format(result))",
                "// Line 138:         valid_kb_ids = [kb_info[0] for kb_info in result]",
                "// Line 139:         unvalid_kb_ids = list(set(kb_ids) - set(valid_kb_ids))",
                "// Line 140:         return unvalid_kb_ids",
                "// Line 141: ",
                "// Line 142:     def get_file_by_status(self, kb_ids, status):",
                "// Line 143:         # query = \"SELECT file_name FROM File WHERE kb_id = %s AND deleted = 0 AND status = %s\"",
                "// vulnerable line: 144: kb_ids_str = ','.join(\"'{}'\".format(str(x)) for x in kb_ids)",
                "// Line 145:         query = \"SELECT file_id, file_name FROM File WHERE kb_id IN ({}) AND deleted = 0 AND status = %s\".format(kb_ids_str)",
                "// Line 146:         result = self.execute_query_(query, (status,), fetch=True)",
                "// Line 147:         # result = self.execute_query_(query, (kb_id, \"gray\"), fetch=True)",
                "// Line 148:         return result",
                "// Line 149: ",
                "// Line 150:     def check_file_exist(self, user_id, kb_id, file_ids):",
                "// Line 151:         # 筛选出有效的文件",
                "// Line 152:         if not file_ids:",
                "// Line 153:             debug_logger.info(\"check_file_exist []\")",
                "// Line 154:             return []",
                "// Line 163:         result = self.execute_query_(query, (kb_id, user_id), fetch=True)",
                "// Line 164:         debug_logger.info(\"check_file_exist {}\".format(result))",
                "// Line 165:         return result",
                "// Line 166: ",
                "// Line 167:     def check_file_exist_by_name(self, user_id, kb_id, file_names):",
                "// Line 168:         results = []",
                "// Line 169:         batch_size = 100  # 根据实际情况调整批次大小",
                "// Line 170: ",
                "// Line 171:         # 分批处理file_names",
                "// Line 172:         for i in range(0, len(file_names), batch_size):",
                "// vulnerable line: 173: batch_file_names = file_names[i:i+batch_size]",
                "// Line 174:             file_names_str = ','.join(\"'{}'\".format(str(x).replace(\"'\", \"'\")) for x in batch_file_names)",
                "// Line 175:             query = \"\"\"",
                "// Line 176:                 SELECT file_id, file_name, file_size, status FROM File ",
                "// Line 177:                 WHERE deleted = 0",
                "// Line 178:                 AND file_name IN ({})",
                "// Line 179:                 AND kb_id = %s ",
                "// Line 180:                 AND kb_id IN (SELECT kb_id FROM KnowledgeBase WHERE user_id = %s)",
                "// vulnerable line: 181: \"\"\".format(file_names_str)",
                "// Line 182: ",
                "// vulnerable line: 183: # 这里假设 execute_query_ 是一个可以执行SQL查询并提交或获取结果的方法",
                "// vulnerable line: 184: batch_result = self.execute_query_(query, (kb_id, user_id), fetch=True)",
                "// vulnerable line: 185: debug_logger.info(\"check_file_exist_by_name batch {}: {}\".format(i//batch_size, batch_result))",
                "// Line 186:             results.extend(batch_result)",
                "// Line 187: ",
                "// Line 188:         return results",
                "// Line 189: ",
                "// Line 190:     # 对外接口不需要增加用户，新建知识库的时候增加用户就可以了",
                "// Line 191:     def add_user_(self, user_id, user_name=None):",
                "// Line 192:         query = \"INSERT INTO User (user_id, user_name) VALUES (%s, %s)\"",
                "// Line 193:         self.execute_query_(query, (user_id, user_name), commit=True)",
                "// Line 194:         return user_id",
                "// Line 195: ",
                "// Line 200:         self.execute_query_(query, (kb_id, user_id, kb_name), commit=True)",
                "// Line 201:         return kb_id, \"success\"",
                "// Line 202: ",
                "// Line 203:     # [知识库] 获取指定用户的所有知识库 ",
                "// Line 204:     def get_knowledge_bases(self, user_id):",
                "// Line 205:         query = \"SELECT kb_id, kb_name FROM KnowledgeBase WHERE user_id = %s AND deleted = 0\"",
                "// Line 206:         return self.execute_query_(query, (user_id,), fetch=True)",
                "// Line 207: ",
                "// Line 208:     def get_users(self):",
                "// Line 209:         query = \"SELECT user_id FROM User\"",
                "// vulnerable line: 210: return self.execute_query_(query, (), fetch=True)",
                "// Line 211: ",
                "// Line 212:     # [知识库] 获取指定kb_ids的知识库",
                "// Line 213:     def get_knowledge_base_name(self, kb_ids):",
                "// vulnerable line: 214: kb_ids_str = ','.join(\"'{}'\".format(str(x)) for x in kb_ids)",
                "// vulnerable line: 215: query = \"SELECT user_id, kb_id, kb_name FROM KnowledgeBase WHERE kb_id IN ({}) AND deleted = 0\".format(kb_ids_str)",
                "// vulnerable line: 216: return self.execute_query_(query, (), fetch=True)",
                "// Line 217: ",
                "// Line 218:     # [知识库] 删除指定知识库",
                "// Line 219:     def delete_knowledge_base(self, user_id, kb_ids):",
                "// vulnerable line: 220: # 删除知识库",
                "// vulnerable line: 221: kb_ids_str = ','.join(\"'{}'\".format(str(x)) for x in kb_ids)",
                "// vulnerable line: 222: query = \"UPDATE KnowledgeBase SET deleted = 1 WHERE user_id = %s AND kb_id IN ({})\".format(kb_ids_str)",
                "// vulnerable line: 223: self.execute_query_(query, (user_id,), commit=True)",
                "// vulnerable line: 224: # 删除知识库下面的文件",
                "// vulnerable line: 225: query = \"\"\"UPDATE File SET deleted = 1 WHERE kb_id IN ({}) AND kb_id IN (SELECT kb_id FROM KnowledgeBase WHERE user_id = %s)\"\"\".format(kb_ids_str)",
                "// vulnerable line: 226: self.execute_query_(query, (user_id,), commit=True)",
                "// Line 227: ",
                "// Line 228:     # [知识库] 重命名知识库",
                "// Line 229:     def rename_knowledge_base(self, user_id, kb_id, kb_name):",
                "// Line 230:         query = \"UPDATE KnowledgeBase SET kb_name = %s WHERE kb_id = %s AND user_id = %s\"",
                "// Line 231:         self.execute_query_(query, (kb_name, kb_id, user_id), commit=True)",
                "// Line 232: ",
                "// Line 233:     # [文件] 向指定知识库下面增加文件",
                "// Line 234:     def add_file(self, user_id, kb_id, file_name, timestamp, status=\"gray\"):",
                "// Line 235:         # 如果他传回来了一个id, 那就说明这个表里肯定有",
                "// Line 236:         if not self.check_user_exist_(user_id):"
            ]
        }
    ]
}