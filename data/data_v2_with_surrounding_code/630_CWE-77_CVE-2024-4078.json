{
    "cve_id": "CVE-2024-4078",
    "cve_description": "A vulnerability in the parisneo/lollms, specifically in the `/unInstall_binding` endpoint, allows for arbitrary code execution due to insufficient sanitization of user input. The issue arises from the lack of path sanitization when handling the `name` parameter in the `unInstall_binding` function, allowing an attacker to traverse directories and execute arbitrary code by loading a malicious `__init__.py` file. This vulnerability affects the latest version of the software. The exploitation of this vulnerability could lead to remote code execution on the system where parisneo/lollms is deployed.",
    "cve_publish_date": "2024-05-16T09:15Z",
    "cwe_id": "CWE-77",
    "cwe_name": "Improper Neutralization of Special Elements used in a Command ('Command Injection')",
    "cwe_description": "The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.",
    "commit_message": "Fixed some vulenerabilities",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "lollms_binding_infos.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "5",
            "number_of_lines_deleted_vulnerable_to_cve": "5",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 7:     application. These routes are specific to bindings",
                "// Line 8: ",
                "// Line 9: \"\"\"",
                "// Line 10: from fastapi import APIRouter, Request, HTTPException",
                "// Line 11: from pydantic import BaseModel, Field",
                "// Line 12: import pkg_resources",
                "// Line 13: from lollms.server.elf_server import LOLLMSElfServer",
                "// Line 14: from lollms.binding import BindingBuilder, InstallOption",
                "// Line 15: from ascii_colors import ASCIIColors",
                "// Line 16: from lollms.utilities import load_config, trace_exception, gc",
                "// vulnerable line: 17: from lollms.security import sanitize_path_from_endpoint",
                "// Line 18: from pathlib import Path",
                "// Line 19: from typing import List, Any",
                "// Line 20: import json",
                "// Line 21: import os",
                "// Line 22: # ----------------------------------- Personal files -----------------------------------------",
                "// Line 23: class ReloadBindingParams(BaseModel):",
                "// Line 24:     binding_name: str = Field(..., min_length=1, max_length=50)",
                "// Line 25: ",
                "// Line 26: class BindingInstallParams(BaseModel):",
                "// Line 27:     name: str = Field(..., min_length=1, max_length=50)",
                "// Line 85: async def reload_binding(request: BindingReloadRequest):",
                "// Line 86:     \"\"\"",
                "// Line 87:     Reloads a binding.",
                "// Line 88: ",
                "// Line 89:     :param request: The BindingReloadRequest object.",
                "// Line 90:     :return: A JSON response with the status of the operation.",
                "// Line 91:     \"\"\"",
                "// Line 92: ",
                "// Line 93:     try:",
                "// Line 94:         print(f\"Reloading binding selected : {request.name}\")",
                "// vulnerable line: 95: safe_name = os.path.basename(request.name) # sanitize the file path to prevent path traversal",
                "// Line 96:         lollmsElfServer.config[\"binding_name\"]=safe_name",
                "// Line 97:         if lollmsElfServer.binding:",
                "// Line 98:             lollmsElfServer.binding.destroy_model()",
                "// Line 99:         lollmsElfServer.binding = None",
                "// Line 100:         lollmsElfServer.model = None",
                "// Line 101:         for per in lollmsElfServer.mounted_personalities:",
                "// Line 102:             if per is not None:",
                "// Line 103:                 per.model = None",
                "// Line 104:         gc.collect()",
                "// Line 105:         lollmsElfServer.binding = BindingBuilder().build_binding(lollmsElfServer.config, lollmsElfServer.lollms_paths, InstallOption.INSTALL_IF_NECESSARY, lollmsCom=lollmsElfServer)",
                "// Line 127:     Returns:",
                "// Line 128:         dict: Status of operation.",
                "// Line 129:     \"\"\"",
                "// Line 130:     sanitize_path_from_endpoint(data.name)    ",
                "// Line 131:     ",
                "// Line 132:     ASCIIColors.info(f\"- Reinstalling binding {data.name}...\")",
                "// Line 133:     try:",
                "// Line 134:         lollmsElfServer.info(\"Unmounting binding and model\")",
                "// Line 135:         lollmsElfServer.info(\"Reinstalling binding\")",
                "// Line 136:         old_bn = lollmsElfServer.config.binding_name",
                "// vulnerable line: 137: lollmsElfServer.config.binding_name = data.name",
                "// Line 138:         lollmsElfServer.binding =  BindingBuilder().build_binding(lollmsElfServer.config, lollmsElfServer.lollms_paths, InstallOption.FORCE_INSTALL, lollmsCom=lollmsElfServer)",
                "// Line 139:         lollmsElfServer.success(\"Binding installed successfully\")",
                "// Line 140:         del lollmsElfServer.binding",
                "// Line 141:         lollmsElfServer.binding = None",
                "// Line 142:         lollmsElfServer.config.binding_name = old_bn",
                "// Line 143:         if old_bn is not None:",
                "// Line 144:             lollmsElfServer.binding =  BindingBuilder().build_binding(lollmsElfServer.config, lollmsElfServer.lollms_paths, lollmsCom=lollmsElfServer)",
                "// Line 145:             lollmsElfServer.model = lollmsElfServer.binding.build_model()",
                "// Line 146:             for per in lollmsElfServer.mounted_personalities:",
                "// Line 147:                 if per is not None:",
                "// Line 165:         dict: Status of operation.",
                "// Line 166:     \"\"\"    ",
                "// Line 167:     ASCIIColors.info(f\"- Reinstalling binding {data.name}...\")",
                "// Line 168:     try:",
                "// Line 169:         ASCIIColors.info(\"Unmounting binding and model\")",
                "// Line 170:         del lollmsElfServer.binding",
                "// Line 171:         lollmsElfServer.binding = None",
                "// Line 172:         gc.collect()",
                "// Line 173:         ASCIIColors.info(\"Reinstalling binding\")",
                "// Line 174:         old_bn = lollmsElfServer.config.binding_name",
                "// vulnerable line: 175: lollmsElfServer.config.binding_name = data.name",
                "// Line 176:         lollmsElfServer.binding =  BindingBuilder().build_binding(lollmsElfServer.config, lollmsElfServer.lollms_paths, InstallOption.FORCE_INSTALL, lollmsCom=lollmsElfServer)",
                "// Line 177:         lollmsElfServer.success(\"Binding reinstalled successfully\")",
                "// Line 178:         lollmsElfServer.config.binding_name = old_bn",
                "// Line 179:         lollmsElfServer.binding =  BindingBuilder().build_binding(lollmsElfServer.config, lollmsElfServer.lollms_paths, lollmsCom=lollmsElfServer)",
                "// Line 180:         lollmsElfServer.model = lollmsElfServer.binding.build_model()",
                "// Line 181:         for per in lollmsElfServer.mounted_personalities:",
                "// Line 182:             if per is not None:",
                "// Line 183:                 per.model = lollmsElfServer.model",
                "// Line 184:         ",
                "// Line 185:         return {\"status\": True}",
                "// Line 201:     \"\"\"    ",
                "// Line 202:     ASCIIColors.info(f\"- Reinstalling binding {data.name}...\")",
                "// Line 203:     try:",
                "// Line 204:         ASCIIColors.info(\"Unmounting binding and model\")",
                "// Line 205:         if lollmsElfServer.binding is not None:",
                "// Line 206:             del lollmsElfServer.binding",
                "// Line 207:             lollmsElfServer.binding = None",
                "// Line 208:             gc.collect()",
                "// Line 209:         ASCIIColors.info(\"Uninstalling binding\")",
                "// Line 210:         old_bn = lollmsElfServer.config.binding_name",
                "// vulnerable line: 211: lollmsElfServer.config.binding_name = data.name",
                "// Line 212:         lollmsElfServer.binding =  BindingBuilder().build_binding(lollmsElfServer.config, lollmsElfServer.lollms_paths, InstallOption.NEVER_INSTALL, lollmsCom=lollmsElfServer)",
                "// Line 213:         lollmsElfServer.binding.uninstall()",
                "// Line 214:         ASCIIColors.green(\"Uninstalled successful\")",
                "// Line 215:         if old_bn!=lollmsElfServer.config.binding_name:",
                "// Line 216:             lollmsElfServer.config.binding_name = old_bn",
                "// Line 217:             lollmsElfServer.binding =  BindingBuilder().build_binding(lollmsElfServer.config, lollmsElfServer.lollms_paths, lollmsCom=lollmsElfServer)",
                "// Line 218:             lollmsElfServer.model = lollmsElfServer.binding.build_model()",
                "// Line 219:             for per in lollmsElfServer.mounted_personalities:",
                "// Line 220:                 if per is not None:",
                "// Line 221:                     per.model = lollmsElfServer.model"
            ]
        },
        {
            "filename_of_changes": "lollms_extensions_infos.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 118:                         trace_exception(ex)",
                "// Line 119:     return extensions",
                "// Line 120: ",
                "// Line 121: ",
                "// Line 122: ",
                "// Line 123: # --------------------- Installing -------------------------------",
                "// Line 124: @router.post(\"/install_extension\")",
                "// Line 125: def install_extension(data: ExtensionInstallInfos):",
                "// Line 126:     if not data.name:",
                "// Line 127:         try:",
                "// vulnerable line: 128: data.name=lollmsElfServer.config.extensions[-1]",
                "// Line 129:         except Exception as ex:",
                "// Line 130:             lollmsElfServer.error(ex)",
                "// Line 131:             return",
                "// Line 132:     else:",
                "// Line 133:         data.name = sanitize_path(data.name)",
                "// Line 134:     try:",
                "// Line 135:         extension_path = lollmsElfServer.lollms_paths.extensions_zoo_path / data.name",
                "// Line 136:         ASCIIColors.info(f\"- Reinstalling extension {data.name}...\")",
                "// Line 137:         try:",
                "// Line 138:             lollmsElfServer.mounted_extensions.append(ExtensionBuilder().build_extension(extension_path,lollmsElfServer.lollms_paths, lollmsElfServer, InstallOption.FORCE_INSTALL))",
                "// Line 145:             ASCIIColors.info(\"Trying to force reinstall\")",
                "// Line 146:             return {\"status\":False, 'error':str(e)}",
                "// Line 147: ",
                "// Line 148:     except Exception as e:",
                "// Line 149:         return {\"status\":False, 'error':str(e)}",
                "// Line 150: ",
                "// Line 151: @router.post(\"/reinstall_extension\")",
                "// Line 152: def reinstall_extension(data: ExtensionInstallInfos):",
                "// Line 153:     if not data.name:",
                "// Line 154:         try:",
                "// vulnerable line: 155: data.name=lollmsElfServer.config.extensions[-1]",
                "// Line 156:         except Exception as ex:",
                "// Line 157:             lollmsElfServer.error(ex)",
                "// Line 158:             return",
                "// Line 159:     else:",
                "// Line 160:         data.name = sanitize_path(data.name)",
                "// Line 161:     try:",
                "// Line 162:         extension_path = lollmsElfServer.lollms_paths.extensions_zoo_path / data.name",
                "// Line 163:         ASCIIColors.info(f\"- Reinstalling extension {data.name}...\")",
                "// Line 164:         ASCIIColors.info(\"Unmounting extension\")",
                "// Line 165:         if data.name in lollmsElfServer.config.extensions:"
            ]
        }
    ]
}