{
    "cve_id": "CVE-2024-37169",
    "cve_description": "@jmondi/url-to-png is a self-hosted URL to PNG utility. Versions prior to 2.0.3 are vulnerable to arbitrary file read if a threat actor uses the Playright's screenshot feature to exploit the file wrapper. Version 2.0.3 mitigates this issue by requiring input URLs to be of protocol `http` or `https`. No known workarounds are available aside from upgrading.",
    "cve_publish_date": "2024-06-10T22:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fix(security): require screenshot protocol to be http/https\n\nprevent file:// URI scheme in Playwright screenshots\n\nA critical vulnerability was discovered in a web application feature that utilizes\nPlaywright's screenshot capability. Attackers could exploit this vulnerability by\nusing the file:// URI scheme to read arbitrary files on the server's filesystem,\npotentially exposing sensitive information, such as AWS credentials.\n\nThis commit addresses the vulnerability by implementing proper input validation\nand sanitization to prevent the use of the file:// URI scheme in Playwright\nscreenshot requests, mitigating the risk of unauthorized file access.\n\nresolves #47",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "app.spec.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "12",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "extract_query_params.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "9",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 26:     } else {",
                "// Line 27:       if (encryptionService) {",
                "// Line 28:         throw new HTTPException(400, { message: \"This server must use encryption\" });",
                "// Line 29:       }",
                "// Line 30:       input = params;",
                "// Line 31:     }",
                "// Line 32: ",
                "// Line 33:     const { validData, errors } = parseForm({ data: input, schema: PlainConfigSchema });",
                "// Line 34: ",
                "// Line 35:     if (errors) {",
                "// vulnerable line: 36: throw new HTTPException(400, { message: \"Invalid query parameters\", cause: errors });",
                "// Line 37:     }",
                "// Line 38: ",
                "// Line 39:     if (validData.width && validData.width > 1920) {",
                "// Line 40:       validData.width = 1920;",
                "// Line 41:     }",
                "// Line 42: ",
                "// Line 43:     if (validData.height && validData.height > 1920) {",
                "// Line 44:       validData.height = 1920;",
                "// Line 45:     }",
                "// Line 46: "
            ]
        },
        {
            "filename_of_changes": "schema.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "17",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: import { z } from \"zod\";",
                "// Line 2: ",
                "// Line 3: // https://github.com/colinhacks/zod/issues/2985#issuecomment-1905652037",
                "// Line 4: const zodStringBool = z",
                "// Line 5:   .string()",
                "// Line 6:   .toLowerCase()",
                "// Line 7:   .transform(x => x === \"true\")",
                "// Line 8:   .pipe(z.boolean());",
                "// Line 9: ",
                "// vulnerable line: 10: const zodStringUrl = z.string().url();",
                "// Line 11: ",
                "// Line 12: export const PlainConfigSchema = z.object({",
                "// vulnerable line: 13: url: zodStringUrl,",
                "// Line 14:   width: z.coerce.number().nullish(),",
                "// Line 15:   height: z.coerce.number().nullish(),",
                "// Line 16:   viewPortWidth: z.coerce.number().nullish(),",
                "// Line 17:   viewPortHeight: z.coerce.number().nullish(),",
                "// Line 18:   forceReload: zodStringBool.nullish(),",
                "// Line 19:   isMobile: zodStringBool.nullish(),",
                "// Line 20:   isFullPage: zodStringBool.nullish(),",
                "// Line 21:   isDarkMode: zodStringBool.nullish(),",
                "// Line 22:   deviceScaleFactor: z.coerce.number().nullish(),",
                "// Line 23: });"
            ]
        }
    ]
}