{
    "cve_id": "CVE-2024-29041",
    "cve_description": "Express.js minimalist web framework for node. Versions of Express.js prior to 4.19.0 and all pre-release alpha and beta versions of 5.0 are affected by an open redirect vulnerability using malformed URLs. When a user of Express performs a redirect using a user-provided URL Express performs an encode [using `encodeurl`](https://github.com/pillarjs/encodeurl) on the contents before passing it to the `location` header. This can cause malformed URLs to be evaluated in unexpected ways by common redirect allow list implementations in Express applications, leading to an Open Redirect via bypass of a properly implemented allow list. The main method impacted is `res.location()` but this is also called from within `res.redirect()`. The vulnerability is fixed in 4.19.2 and 5.0.0-beta.3.",
    "cve_publish_date": "2024-03-25T21:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Improved fix for open redirect allow list bypass\n\nCo-authored-by: Jon Church <me@jonchurch.com>\nCo-authored-by: Blake Embrey <hello@blakeembrey.com>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "response.js",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "11",
            "number_of_lines_deleted_vulnerable_to_cve": "20",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 27: var sign = require('cookie-signature').sign;",
                "// Line 28: var normalizeType = require('./utils').normalizeType;",
                "// Line 29: var normalizeTypes = require('./utils').normalizeTypes;",
                "// Line 30: var setCharset = require('./utils').setCharset;",
                "// Line 31: var cookie = require('cookie');",
                "// Line 32: var send = require('send');",
                "// Line 33: var extname = path.extname;",
                "// Line 34: var mime = send.mime;",
                "// Line 35: var resolve = path.resolve;",
                "// Line 36: var vary = require('vary');",
                "// vulnerable line: 37: var urlParse = require('url').parse;",
                "// Line 38: ",
                "// Line 39: /**",
                "// Line 40:  * Response prototype.",
                "// Line 41:  * @public",
                "// Line 42:  */",
                "// Line 43: ",
                "// Line 44: var res = Object.create(http.ServerResponse.prototype)",
                "// Line 45: ",
                "// Line 46: /**",
                "// Line 47:  * Module exports.",
                "// Line 61:  * Set status `code`.",
                "// Line 62:  *",
                "// Line 63:  * @param {Number} code",
                "// Line 64:  * @return {ServerResponse}",
                "// Line 65:  * @public",
                "// Line 66:  */",
                "// Line 67: ",
                "// Line 68: res.status = function status(code) {",
                "// Line 69:   if ((typeof code === 'string' || Math.floor(code) !== code) && code > 99 && code < 1000) {",
                "// Line 70:     deprecate('res.status(' + JSON.stringify(code) + '): use res.status(' + Math.floor(code) + ') instead')",
                "// vulnerable line: 71: }",
                "// Line 72:   this.statusCode = code;",
                "// Line 73:   return this;",
                "// Line 74: };",
                "// Line 75: ",
                "// Line 76: /**",
                "// Line 77:  * Set Link header field with the given `links`.",
                "// Line 78:  *",
                "// Line 79:  * Examples:",
                "// Line 80:  *",
                "// Line 81:  *    res.links({",
                "// Line 121:   // allow status / body",
                "// Line 122:   if (arguments.length === 2) {",
                "// Line 123:     // res.send(body, status) backwards compat",
                "// Line 124:     if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {",
                "// Line 125:       deprecate('res.send(body, status): Use res.status(status).send(body) instead');",
                "// Line 126:       this.statusCode = arguments[1];",
                "// Line 127:     } else {",
                "// Line 128:       deprecate('res.send(status, body): Use res.status(status).send(body) instead');",
                "// Line 129:       this.statusCode = arguments[0];",
                "// Line 130:       chunk = arguments[1];",
                "// vulnerable line: 131: }",
                "// vulnerable line: 132: }",
                "// Line 133: ",
                "// Line 134:   // disambiguate res.send(status) and res.send(status, num)",
                "// Line 135:   if (typeof chunk === 'number' && arguments.length === 1) {",
                "// Line 136:     // res.send(status) will set status message as text string",
                "// Line 137:     if (!this.get('Content-Type')) {",
                "// Line 138:       this.type('txt');",
                "// vulnerable line: 139: }",
                "// Line 140: ",
                "// Line 141:     deprecate('res.send(status): Use res.sendStatus(status) instead');",
                "// Line 142:     this.statusCode = chunk;",
                "// Line 143:     chunk = statuses.message[chunk]",
                "// vulnerable line: 144: }",
                "// Line 145: ",
                "// Line 146:   switch (typeof chunk) {",
                "// Line 147:     // string defaulting to html",
                "// Line 148:     case 'string':",
                "// Line 149:       if (!this.get('Content-Type')) {",
                "// Line 150:         this.type('html');",
                "// vulnerable line: 151: }",
                "// Line 152:       break;",
                "// Line 153:     case 'boolean':",
                "// Line 154:     case 'number':",
                "// Line 155:     case 'object':",
                "// Line 156:       if (chunk === null) {",
                "// Line 157:         chunk = '';",
                "// Line 158:       } else if (Buffer.isBuffer(chunk)) {",
                "// Line 159:         if (!this.get('Content-Type')) {",
                "// Line 160:           this.type('bin');",
                "// vulnerable line: 161: }",
                "// Line 162:       } else {",
                "// Line 163:         return this.json(chunk);",
                "// vulnerable line: 164: }",
                "// Line 165:       break;",
                "// vulnerable line: 166: }",
                "// Line 167: ",
                "// Line 168:   // write strings in utf-8",
                "// Line 169:   if (typeof chunk === 'string') {",
                "// Line 170:     encoding = 'utf8';",
                "// Line 171:     type = this.get('Content-Type');",
                "// Line 172: ",
                "// Line 173:     // reflect this in content-type",
                "// Line 174:     if (typeof type === 'string') {",
                "// Line 175:       this.set('Content-Type', setCharset(type, 'utf-8'));",
                "// vulnerable line: 176: }",
                "// vulnerable line: 177: }",
                "// Line 178: ",
                "// Line 179:   // determine if ETag should be generated",
                "// Line 180:   var etagFn = app.get('etag fn')",
                "// Line 181:   var generateETag = !this.get('ETag') && typeof etagFn === 'function'",
                "// Line 182: ",
                "// Line 183:   // populate Content-Length",
                "// Line 184:   var len",
                "// Line 185:   if (chunk !== undefined) {",
                "// Line 186:     if (Buffer.isBuffer(chunk)) {",
                "// Line 187:       // get length of Buffer",
                "// Line 188:       len = chunk.length",
                "// Line 189:     } else if (!generateETag && chunk.length < 1000) {",
                "// Line 190:       // just calculate length when no ETag + small chunk",
                "// Line 191:       len = Buffer.byteLength(chunk, encoding)",
                "// Line 192:     } else {",
                "// Line 193:       // convert chunk to Buffer and calculate",
                "// Line 194:       chunk = Buffer.from(chunk, encoding)",
                "// Line 195:       encoding = undefined;",
                "// Line 196:       len = chunk.length",
                "// vulnerable line: 197: }",
                "// Line 198: ",
                "// Line 199:     this.set('Content-Length', len);",
                "// vulnerable line: 200: }",
                "// Line 201: ",
                "// Line 202:   // populate ETag",
                "// Line 203:   var etag;",
                "// Line 204:   if (generateETag && len !== undefined) {",
                "// Line 205:     if ((etag = etagFn(chunk, encoding))) {",
                "// Line 206:       this.set('ETag', etag);",
                "// vulnerable line: 207: }",
                "// vulnerable line: 208: }",
                "// Line 209: ",
                "// Line 210:   // freshness",
                "// Line 211:   if (req.fresh) this.statusCode = 304;",
                "// Line 212: ",
                "// Line 213:   // strip irrelevant headers",
                "// Line 214:   if (204 === this.statusCode || 304 === this.statusCode) {",
                "// Line 215:     this.removeHeader('Content-Type');",
                "// Line 216:     this.removeHeader('Content-Length');",
                "// Line 217:     this.removeHeader('Transfer-Encoding');",
                "// Line 218:     chunk = '';",
                "// vulnerable line: 219: }",
                "// Line 220: ",
                "// Line 221:   // alter headers for 205",
                "// Line 222:   if (this.statusCode === 205) {",
                "// Line 223:     this.set('Content-Length', '0')",
                "// Line 224:     this.removeHeader('Transfer-Encoding')",
                "// Line 225:     chunk = ''",
                "// vulnerable line: 226: }",
                "// Line 227: ",
                "// Line 228:   if (req.method === 'HEAD') {",
                "// Line 229:     // skip body for HEAD",
                "// Line 230:     this.end();",
                "// Line 231:   } else {",
                "// Line 232:     // respond",
                "// Line 233:     this.end(chunk, encoding);",
                "// vulnerable line: 234: }",
                "// Line 235: ",
                "// Line 236:   return this;",
                "// Line 237: };",
                "// Line 238: ",
                "// Line 239: /**",
                "// Line 240:  * Send JSON response.",
                "// Line 241:  *",
                "// Line 242:  * Examples:",
                "// Line 243:  *",
                "// Line 244:  *     res.json(null);",
                "// Line 254:   // allow status / body",
                "// Line 255:   if (arguments.length === 2) {",
                "// Line 256:     // res.json(body, status) backwards compat",
                "// Line 257:     if (typeof arguments[1] === 'number') {",
                "// Line 258:       deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');",
                "// Line 259:       this.statusCode = arguments[1];",
                "// Line 260:     } else {",
                "// Line 261:       deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');",
                "// Line 262:       this.statusCode = arguments[0];",
                "// Line 263:       val = arguments[1];",
                "// vulnerable line: 264: }",
                "// vulnerable line: 265: }",
                "// Line 266: ",
                "// Line 267:   // settings",
                "// Line 268:   var app = this.app;",
                "// Line 269:   var escape = app.get('json escape')",
                "// Line 270:   var replacer = app.get('json replacer');",
                "// Line 271:   var spaces = app.get('json spaces');",
                "// Line 272:   var body = stringify(val, replacer, spaces, escape)",
                "// Line 273: ",
                "// Line 274:   // content-type",
                "// Line 275:   if (!this.get('Content-Type')) {",
                "// Line 276:     this.set('Content-Type', 'application/json');",
                "// vulnerable line: 277: }",
                "// Line 278: ",
                "// Line 279:   return this.send(body);",
                "// Line 280: };",
                "// Line 281: ",
                "// Line 282: /**",
                "// Line 283:  * Send JSON response with JSONP callback support.",
                "// Line 284:  *",
                "// Line 285:  * Examples:",
                "// Line 286:  *",
                "// Line 287:  *     res.jsonp(null);",
                "// Line 297:   // allow status / body",
                "// Line 298:   if (arguments.length === 2) {",
                "// Line 299:     // res.jsonp(body, status) backwards compat",
                "// Line 300:     if (typeof arguments[1] === 'number') {",
                "// Line 301:       deprecate('res.jsonp(obj, status): Use res.status(status).jsonp(obj) instead');",
                "// Line 302:       this.statusCode = arguments[1];",
                "// Line 303:     } else {",
                "// Line 304:       deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');",
                "// Line 305:       this.statusCode = arguments[0];",
                "// Line 306:       val = arguments[1];",
                "// vulnerable line: 307: }",
                "// vulnerable line: 308: }",
                "// Line 309: ",
                "// Line 310:   // settings",
                "// Line 311:   var app = this.app;",
                "// Line 312:   var escape = app.get('json escape')",
                "// Line 313:   var replacer = app.get('json replacer');",
                "// Line 314:   var spaces = app.get('json spaces');",
                "// Line 315:   var body = stringify(val, replacer, spaces, escape)",
                "// Line 316:   var callback = this.req.query[app.get('jsonp callback name')];",
                "// Line 317: ",
                "// Line 318:   // content-type",
                "// Line 319:   if (!this.get('Content-Type')) {",
                "// Line 320:     this.set('X-Content-Type-Options', 'nosniff');",
                "// Line 321:     this.set('Content-Type', 'application/json');",
                "// vulnerable line: 322: }",
                "// Line 323: ",
                "// Line 324:   // fixup callback",
                "// Line 325:   if (Array.isArray(callback)) {",
                "// Line 326:     callback = callback[0];",
                "// vulnerable line: 327: }",
                "// Line 328: ",
                "// Line 329:   // jsonp",
                "// Line 330:   if (typeof callback === 'string' && callback.length !== 0) {",
                "// Line 331:     this.set('X-Content-Type-Options', 'nosniff');",
                "// Line 332:     this.set('Content-Type', 'text/javascript');",
                "// Line 333: ",
                "// Line 334:     // restrict callback charset",
                "// Line 335:     callback = callback.replace(/[^\\[\\]\\w$.]/g, '');",
                "// Line 336: ",
                "// Line 337:     if (body === undefined) {",
                "// Line 339:       body = ''",
                "// Line 340:     } else if (typeof body === 'string') {",
                "// Line 341:       // replace chars not allowed in JavaScript that are in JSON",
                "// Line 342:       body = body",
                "// Line 343:         .replace(/",
                "// Line 344: /g, '",
                "// Line 345: ')",
                "// Line 346:         .replace(/",
                "// Line 347: /g, '",
                "// Line 348: ')",
                "// vulnerable line: 349: }",
                "// Line 350: ",
                "// Line 351:     // the /**/ is a specific security mitigation for \"Rosetta Flash JSONP abuse\"",
                "// Line 352:     // the typeof check is just to reduce client error noise",
                "// Line 353:     body = '/**/ typeof ' + callback + ' === 'function' && ' + callback + '(' + body + ');';",
                "// vulnerable line: 354: }",
                "// Line 355: ",
                "// Line 356:   return this.send(body);",
                "// Line 357: };",
                "// Line 358: ",
                "// Line 359: /**",
                "// Line 360:  * Send given HTTP status code.",
                "// Line 361:  *",
                "// Line 362:  * Sets the response status to `statusCode` and the body of the",
                "// Line 363:  * response to the standard description from node's http.STATUS_CODES",
                "// Line 364:  * or the statusCode number if no description.",
                "// Line 423: ",
                "// Line 424: res.sendFile = function sendFile(path, options, callback) {",
                "// Line 425:   var done = callback;",
                "// Line 426:   var req = this.req;",
                "// Line 427:   var res = this;",
                "// Line 428:   var next = req.next;",
                "// Line 429:   var opts = options || {};",
                "// Line 430: ",
                "// Line 431:   if (!path) {",
                "// Line 432:     throw new TypeError('path argument is required to res.sendFile');",
                "// vulnerable line: 433: }",
                "// Line 434: ",
                "// Line 435:   if (typeof path !== 'string') {",
                "// Line 436:     throw new TypeError('path must be a string to res.sendFile')",
                "// vulnerable line: 437: }",
                "// Line 438: ",
                "// Line 439:   // support function as second arg",
                "// Line 440:   if (typeof options === 'function') {",
                "// Line 441:     done = options;",
                "// Line 442:     opts = {};",
                "// vulnerable line: 443: }",
                "// Line 444: ",
                "// Line 445:   if (!opts.root && !isAbsolute(path)) {",
                "// Line 446:     throw new TypeError('path must be absolute or specify root to res.sendFile');",
                "// vulnerable line: 447: }",
                "// Line 448: ",
                "// Line 449:   // create file stream",
                "// Line 450:   var pathname = encodeURI(path);",
                "// Line 451:   var file = send(req, pathname, opts);",
                "// Line 452: ",
                "// Line 453:   // transfer",
                "// Line 454:   sendfile(res, file, opts, function (err) {",
                "// Line 455:     if (done) return done(err);",
                "// Line 456:     if (err && err.code === 'EISDIR') return next();",
                "// Line 457: ",
                "// Line 458:     // next() all but write errors",
                "// Line 459:     if (err && err.code !== 'ECONNABORTED' && err.syscall !== 'write') {",
                "// Line 460:       next(err);",
                "// vulnerable line: 461: }",
                "// Line 462:   });",
                "// Line 463: };",
                "// Line 464: ",
                "// Line 465: /**",
                "// Line 466:  * Transfer the file at the given `path`.",
                "// Line 467:  *",
                "// Line 468:  * Automatically sets the _Content-Type_ response header field.",
                "// Line 469:  * The callback `callback(err)` is invoked when the transfer is complete",
                "// Line 470:  * or when an error occurs. Be sure to check `res.headersSent`",
                "// Line 471:  * if you wish to attempt responding, as the header and some data",
                "// Line 507:   var done = callback;",
                "// Line 508:   var req = this.req;",
                "// Line 509:   var res = this;",
                "// Line 510:   var next = req.next;",
                "// Line 511:   var opts = options || {};",
                "// Line 512: ",
                "// Line 513:   // support function as second arg",
                "// Line 514:   if (typeof options === 'function') {",
                "// Line 515:     done = options;",
                "// Line 516:     opts = {};",
                "// vulnerable line: 517: }",
                "// Line 518: ",
                "// Line 519:   // create file stream",
                "// Line 520:   var file = send(req, path, opts);",
                "// Line 521: ",
                "// Line 522:   // transfer",
                "// Line 523:   sendfile(res, file, opts, function (err) {",
                "// Line 524:     if (done) return done(err);",
                "// Line 525:     if (err && err.code === 'EISDIR') return next();",
                "// Line 526: ",
                "// Line 527:     // next() all but write errors",
                "// Line 528:     if (err && err.code !== 'ECONNABORTED' && err.syscall !== 'write') {",
                "// Line 529:       next(err);",
                "// vulnerable line: 530: }",
                "// Line 531:   });",
                "// Line 532: };",
                "// Line 533: ",
                "// Line 534: res.sendfile = deprecate.function(res.sendfile,",
                "// Line 535:   'res.sendfile: Use res.sendFile instead');",
                "// Line 536: ",
                "// Line 537: /**",
                "// Line 538:  * Transfer the file at the given `path` as an attachment.",
                "// Line 539:  *",
                "// Line 540:  * Optionally providing an alternate attachment `filename`,",
                "// Line 558:   var opts = options || null",
                "// Line 559: ",
                "// Line 560:   // support function as second or third arg",
                "// Line 561:   if (typeof filename === 'function') {",
                "// Line 562:     done = filename;",
                "// Line 563:     name = null;",
                "// Line 564:     opts = null",
                "// Line 565:   } else if (typeof options === 'function') {",
                "// Line 566:     done = options",
                "// Line 567:     opts = null",
                "// vulnerable line: 568: }",
                "// Line 569: ",
                "// Line 570:   // support optional filename, where options may be in it's place",
                "// Line 571:   if (typeof filename === 'object' &&",
                "// Line 572:     (typeof options === 'function' || options === undefined)) {",
                "// Line 573:     name = null",
                "// Line 574:     opts = filename",
                "// vulnerable line: 575: }",
                "// Line 576: ",
                "// Line 577:   // set Content-Disposition when file is sent",
                "// Line 578:   var headers = {",
                "// Line 579:     'Content-Disposition': contentDisposition(name || path)",
                "// Line 580:   };",
                "// Line 581: ",
                "// Line 582:   // merge user-provided headers",
                "// Line 583:   if (opts && opts.headers) {",
                "// Line 584:     var keys = Object.keys(opts.headers)",
                "// Line 585:     for (var i = 0; i < keys.length; i++) {",
                "// Line 586:       var key = keys[i]",
                "// Line 587:       if (key.toLowerCase() !== 'content-disposition') {",
                "// Line 588:         headers[key] = opts.headers[key]",
                "// vulnerable line: 589: }",
                "// vulnerable line: 590: }",
                "// vulnerable line: 591: }",
                "// Line 592: ",
                "// Line 593:   // merge user-provided options",
                "// Line 594:   opts = Object.create(opts)",
                "// Line 595:   opts.headers = headers",
                "// Line 596: ",
                "// Line 597:   // Resolve the full path for sendFile",
                "// Line 598:   var fullPath = !opts.root",
                "// Line 599:     ? resolve(path)",
                "// Line 600:     : path",
                "// Line 601: ",
                "// Line 701: ",
                "// Line 702:   if (key) {",
                "// Line 703:     this.set('Content-Type', normalizeType(key).value);",
                "// Line 704:     obj[key](req, this, next);",
                "// Line 705:   } else if (obj.default) {",
                "// Line 706:     obj.default(req, this, next)",
                "// Line 707:   } else {",
                "// Line 708:     next(createError(406, {",
                "// Line 709:       types: normalizeTypes(keys).map(function (o) { return o.value })",
                "// Line 710:     }))",
                "// vulnerable line: 711: }",
                "// Line 712: ",
                "// Line 713:   return this;",
                "// Line 714: };",
                "// Line 715: ",
                "// Line 716: /**",
                "// Line 717:  * Set _Content-Disposition_ header to _attachment_ with optional `filename`.",
                "// Line 718:  *",
                "// Line 719:  * @param {String} filename",
                "// Line 720:  * @return {ServerResponse}",
                "// Line 721:  * @public",
                "// Line 722:  */",
                "// Line 723: ",
                "// Line 724: res.attachment = function attachment(filename) {",
                "// Line 725:   if (filename) {",
                "// Line 726:     this.type(extname(filename));",
                "// vulnerable line: 727: }",
                "// Line 728: ",
                "// Line 729:   this.set('Content-Disposition', contentDisposition(filename));",
                "// Line 730: ",
                "// Line 731:   return this;",
                "// Line 732: };",
                "// Line 733: ",
                "// Line 734: /**",
                "// Line 735:  * Append additional header `field` with value `val`.",
                "// Line 736:  *",
                "// Line 737:  * Example:",
                "// Line 748: ",
                "// Line 749: res.append = function append(field, val) {",
                "// Line 750:   var prev = this.get(field);",
                "// Line 751:   var value = val;",
                "// Line 752: ",
                "// Line 753:   if (prev) {",
                "// Line 754:     // concat the new and prev vals",
                "// Line 755:     value = Array.isArray(prev) ? prev.concat(val)",
                "// Line 756:       : Array.isArray(val) ? [prev].concat(val)",
                "// Line 757:         : [prev, val]",
                "// vulnerable line: 758: }",
                "// Line 759: ",
                "// Line 760:   return this.set(field, value);",
                "// Line 761: };",
                "// Line 762: ",
                "// Line 763: /**",
                "// Line 764:  * Set header `field` to `val`, or pass",
                "// Line 765:  * an object of header fields.",
                "// Line 766:  *",
                "// Line 767:  * Examples:",
                "// Line 768:  *",
                "// Line 782: res.header = function header(field, val) {",
                "// Line 783:   if (arguments.length === 2) {",
                "// Line 784:     var value = Array.isArray(val)",
                "// Line 785:       ? val.map(String)",
                "// Line 786:       : String(val);",
                "// Line 787: ",
                "// Line 788:     // add charset to content-type",
                "// Line 789:     if (field.toLowerCase() === 'content-type') {",
                "// Line 790:       if (Array.isArray(value)) {",
                "// Line 791:         throw new TypeError('Content-Type cannot be set to an Array');",
                "// vulnerable line: 792: }",
                "// Line 793:       if (!charsetRegExp.test(value)) {",
                "// Line 794:         var charset = mime.charsets.lookup(value.split(';')[0]);",
                "// Line 795:         if (charset) value += '; charset=' + charset.toLowerCase();",
                "// vulnerable line: 796: }",
                "// vulnerable line: 797: }",
                "// Line 798: ",
                "// Line 799:     this.setHeader(field, value);",
                "// Line 800:   } else {",
                "// Line 801:     for (var key in field) {",
                "// Line 802:       this.set(key, field[key]);",
                "// vulnerable line: 803: }",
                "// vulnerable line: 804: }",
                "// Line 805:   return this;",
                "// Line 806: };",
                "// Line 807: ",
                "// Line 808: /**",
                "// Line 809:  * Get value for header `field`.",
                "// Line 810:  *",
                "// Line 811:  * @param {String} field",
                "// Line 812:  * @return {String}",
                "// Line 813:  * @public",
                "// Line 814:  */",
                "// Line 856:  * @public",
                "// Line 857:  */",
                "// Line 858: ",
                "// Line 859: res.cookie = function (name, value, options) {",
                "// Line 860:   var opts = merge({}, options);",
                "// Line 861:   var secret = this.req.secret;",
                "// Line 862:   var signed = opts.signed;",
                "// Line 863: ",
                "// Line 864:   if (signed && !secret) {",
                "// Line 865:     throw new Error('cookieParser(\"secret\") required for signed cookies');",
                "// vulnerable line: 866: }",
                "// Line 867: ",
                "// Line 868:   var val = typeof value === 'object'",
                "// Line 869:     ? 'j:' + JSON.stringify(value)",
                "// Line 870:     : String(value);",
                "// Line 871: ",
                "// Line 872:   if (signed) {",
                "// Line 873:     val = 's:' + sign(val, secret);",
                "// vulnerable line: 874: }",
                "// Line 875: ",
                "// Line 876:   if (opts.maxAge != null) {",
                "// Line 877:     var maxAge = opts.maxAge - 0",
                "// Line 878: ",
                "// Line 879:     if (!isNaN(maxAge)) {",
                "// Line 880:       opts.expires = new Date(Date.now() + maxAge)",
                "// Line 881:       opts.maxAge = Math.floor(maxAge / 1000)",
                "// vulnerable line: 882: }",
                "// vulnerable line: 883: }",
                "// Line 884: ",
                "// Line 885:   if (opts.path == null) {",
                "// Line 886:     opts.path = '/';",
                "// vulnerable line: 887: }",
                "// Line 888: ",
                "// Line 889:   this.append('Set-Cookie', cookie.serialize(name, String(val), opts));",
                "// Line 890: ",
                "// Line 891:   return this;",
                "// Line 892: };",
                "// Line 893: ",
                "// Line 894: /**",
                "// Line 895:  * Set the location header to `url`.",
                "// Line 896:  *",
                "// Line 897:  * The given `url` can also be \"back\", which redirects",
                "// Line 902:  *    res.location('/foo/bar').;",
                "// Line 903:  *    res.location('http://example.com');",
                "// Line 904:  *    res.location('../login');",
                "// Line 905:  *",
                "// Line 906:  * @param {String} url",
                "// Line 907:  * @return {ServerResponse} for chaining",
                "// Line 908:  * @public",
                "// Line 909:  */",
                "// Line 910: ",
                "// Line 911: res.location = function location(url) {",
                "// vulnerable line: 912: var loc = String(url);",
                "// Line 913: ",
                "// Line 914:   // \"back\" is an alias for the referrer",
                "// Line 915:   if (url === 'back') {",
                "// Line 916:     loc = this.req.get('Referrer') || '/';",
                "// vulnerable line: 917: }",
                "// Line 918: ",
                "// vulnerable line: 919: var lowerLoc = loc.toLowerCase();",
                "// vulnerable line: 920: var encodedUrl = encodeUrl(loc);",
                "// vulnerable line: 921: if (lowerLoc.indexOf('https://') === 0 || lowerLoc.indexOf('http://') === 0) {",
                "// vulnerable line: 922: try {",
                "// vulnerable line: 923: var parsedUrl = urlParse(loc);",
                "// vulnerable line: 924: var parsedEncodedUrl = urlParse(encodedUrl);",
                "// vulnerable line: 925: // Because this can encode the host, check that we did not change the host",
                "// vulnerable line: 926: if (parsedUrl.host !== parsedEncodedUrl.host) {",
                "// vulnerable line: 927: // If the host changes after encodeUrl, return the original url",
                "// vulnerable line: 928: return this.set('Location', loc);",
                "// vulnerable line: 929: }",
                "// vulnerable line: 930: } catch (e) {",
                "// vulnerable line: 931: // If parse fails, return the original url",
                "// vulnerable line: 932: return this.set('Location', loc);",
                "// vulnerable line: 933: }",
                "// vulnerable line: 934: }",
                "// Line 935: ",
                "// vulnerable line: 936: // set location",
                "// vulnerable line: 937: return this.set('Location', encodedUrl);",
                "// Line 938: };",
                "// Line 939: ",
                "// Line 940: /**",
                "// Line 941:  * Redirect to the given `url` with optional response `status`",
                "// Line 942:  * defaulting to 302.",
                "// Line 943:  *",
                "// Line 944:  * The resulting `url` is determined by `res.location()`, so",
                "// Line 945:  * it will play nicely with mounted apps, relative paths,",
                "// Line 946:  * `\"back\"` etc.",
                "// Line 947:  *",
                "// Line 961:   var status = 302;",
                "// Line 962: ",
                "// Line 963:   // allow status / url",
                "// Line 964:   if (arguments.length === 2) {",
                "// Line 965:     if (typeof arguments[0] === 'number') {",
                "// Line 966:       status = arguments[0];",
                "// Line 967:       address = arguments[1];",
                "// Line 968:     } else {",
                "// Line 969:       deprecate('res.redirect(url, status): Use res.redirect(status, url) instead');",
                "// Line 970:       status = arguments[1];",
                "// vulnerable line: 971: }",
                "// vulnerable line: 972: }",
                "// Line 973: ",
                "// Line 974:   // Set location header",
                "// Line 975:   address = this.location(address).get('Location');",
                "// Line 976: ",
                "// Line 977:   // Support text/{plain,html} by default",
                "// Line 978:   this.format({",
                "// Line 979:     text: function(){",
                "// Line 980:       body = statuses.message[status] + '. Redirecting to ' + address",
                "// Line 981:     },",
                "// Line 982: ",
                "// Line 983:     html: function(){",
                "// Line 984:       var u = escapeHtml(address);",
                "// Line 985:       body = '<p>' + statuses.message[status] + '. Redirecting to <a href=\"' + u + '\">' + u + '</a></p>'",
                "// Line 986:     },",
                "// Line 987: ",
                "// Line 988:     default: function(){",
                "// Line 989:       body = '';",
                "// vulnerable line: 990: }",
                "// Line 991:   });",
                "// Line 992: ",
                "// Line 993:   // Respond",
                "// Line 994:   this.statusCode = status;",
                "// Line 995:   this.set('Content-Length', Buffer.byteLength(body));",
                "// Line 996: ",
                "// Line 997:   if (this.req.method === 'HEAD') {",
                "// Line 998:     this.end();",
                "// Line 999:   } else {",
                "// Line 1000:     this.end(body);",
                "// vulnerable line: 1001: }",
                "// Line 1002: };",
                "// Line 1003: ",
                "// Line 1004: /**",
                "// Line 1005:  * Add `field` to Vary. If already present in the Vary set, then",
                "// Line 1006:  * this call is simply ignored.",
                "// Line 1007:  *",
                "// Line 1008:  * @param {Array|String} field",
                "// Line 1009:  * @return {ServerResponse} for chaining",
                "// Line 1010:  * @public",
                "// Line 1011:  */",
                "// Line 1012: ",
                "// Line 1013: res.vary = function(field){",
                "// Line 1014:   // checks for back-compat",
                "// Line 1015:   if (!field || (Array.isArray(field) && !field.length)) {",
                "// Line 1016:     deprecate('res.vary(): Provide a field name');",
                "// Line 1017:     return this;",
                "// vulnerable line: 1018: }",
                "// Line 1019: ",
                "// Line 1020:   vary(this, field);",
                "// Line 1021: ",
                "// Line 1022:   return this;",
                "// Line 1023: };",
                "// Line 1024: ",
                "// Line 1025: /**",
                "// Line 1026:  * Render `view` with the given `options` and optional callback `fn`.",
                "// Line 1027:  * When a callback function is given a response will _not_ be made",
                "// Line 1028:  * automatically, otherwise a response of _200_ and _text/html_ is given.",
                "// Line 1039:   var app = this.req.app;",
                "// Line 1040:   var done = callback;",
                "// Line 1041:   var opts = options || {};",
                "// Line 1042:   var req = this.req;",
                "// Line 1043:   var self = this;",
                "// Line 1044: ",
                "// Line 1045:   // support callback function as second arg",
                "// Line 1046:   if (typeof options === 'function') {",
                "// Line 1047:     done = options;",
                "// Line 1048:     opts = {};",
                "// vulnerable line: 1049: }",
                "// Line 1050: ",
                "// Line 1051:   // merge res.locals",
                "// Line 1052:   opts._locals = self.locals;",
                "// Line 1053: ",
                "// Line 1054:   // default callback to respond",
                "// Line 1055:   done = done || function (err, str) {",
                "// Line 1056:     if (err) return req.next(err);",
                "// Line 1057:     self.send(str);",
                "// Line 1058:   };",
                "// Line 1059: ",
                "// Line 1067:   var streaming;",
                "// Line 1068: ",
                "// Line 1069:   // request aborted",
                "// Line 1070:   function onaborted() {",
                "// Line 1071:     if (done) return;",
                "// Line 1072:     done = true;",
                "// Line 1073: ",
                "// Line 1074:     var err = new Error('Request aborted');",
                "// Line 1075:     err.code = 'ECONNABORTED';",
                "// Line 1076:     callback(err);",
                "// vulnerable line: 1077: }",
                "// Line 1078: ",
                "// Line 1079:   // directory",
                "// Line 1080:   function ondirectory() {",
                "// Line 1081:     if (done) return;",
                "// Line 1082:     done = true;",
                "// Line 1083: ",
                "// Line 1084:     var err = new Error('EISDIR, read');",
                "// Line 1085:     err.code = 'EISDIR';",
                "// Line 1086:     callback(err);",
                "// vulnerable line: 1087: }",
                "// Line 1088: ",
                "// Line 1089:   // errors",
                "// Line 1090:   function onerror(err) {",
                "// Line 1091:     if (done) return;",
                "// Line 1092:     done = true;",
                "// Line 1093:     callback(err);",
                "// vulnerable line: 1094: }",
                "// Line 1095: ",
                "// Line 1096:   // ended",
                "// Line 1097:   function onend() {",
                "// Line 1098:     if (done) return;",
                "// Line 1099:     done = true;",
                "// Line 1100:     callback();",
                "// vulnerable line: 1101: }",
                "// Line 1102: ",
                "// Line 1103:   // file",
                "// Line 1104:   function onfile() {",
                "// Line 1105:     streaming = false;",
                "// vulnerable line: 1106: }",
                "// Line 1107: ",
                "// Line 1108:   // finished",
                "// Line 1109:   function onfinish(err) {",
                "// Line 1110:     if (err && err.code === 'ECONNRESET') return onaborted();",
                "// Line 1111:     if (err) return onerror(err);",
                "// Line 1112:     if (done) return;",
                "// Line 1113: ",
                "// Line 1114:     setImmediate(function () {",
                "// Line 1115:       if (streaming !== false && !done) {",
                "// Line 1116:         onaborted();",
                "// Line 1117:         return;",
                "// vulnerable line: 1118: }",
                "// Line 1119: ",
                "// Line 1120:       if (done) return;",
                "// Line 1121:       done = true;",
                "// Line 1122:       callback();",
                "// Line 1123:     });",
                "// vulnerable line: 1124: }",
                "// Line 1125: ",
                "// Line 1126:   // streaming",
                "// Line 1127:   function onstream() {",
                "// Line 1128:     streaming = true;",
                "// vulnerable line: 1129: }",
                "// Line 1130: ",
                "// Line 1131:   file.on('directory', ondirectory);",
                "// Line 1132:   file.on('end', onend);",
                "// Line 1133:   file.on('error', onerror);",
                "// Line 1134:   file.on('file', onfile);",
                "// Line 1135:   file.on('stream', onstream);",
                "// Line 1136:   onFinished(res, onfinish);",
                "// Line 1137: ",
                "// Line 1138:   if (options.headers) {",
                "// Line 1139:     // set headers on successful transfer",
                "// Line 1140:     file.on('headers', function headers(res) {",
                "// Line 1141:       var obj = options.headers;",
                "// Line 1142:       var keys = Object.keys(obj);",
                "// Line 1143: ",
                "// Line 1144:       for (var i = 0; i < keys.length; i++) {",
                "// Line 1145:         var k = keys[i];",
                "// Line 1146:         res.setHeader(k, obj[k]);",
                "// vulnerable line: 1147: }",
                "// Line 1148:     });",
                "// vulnerable line: 1149: }",
                "// Line 1150: ",
                "// Line 1151:   // pipe",
                "// Line 1152:   file.pipe(res);",
                "// vulnerable line: 1153: }",
                "// Line 1154: ",
                "// Line 1155: /**",
                "// Line 1156:  * Stringify JSON, like JSON.stringify, but v8 optimized, with the",
                "// Line 1157:  * ability to escape characters that can trigger HTML sniffing.",
                "// Line 1158:  *",
                "// Line 1159:  * @param {*} value",
                "// Line 1160:  * @param {function} replacer",
                "// Line 1161:  * @param {number} spaces",
                "// Line 1162:  * @param {boolean} escape",
                "// Line 1163:  * @returns {string}",
                "// Line 1176:       switch (c.charCodeAt(0)) {",
                "// Line 1177:         case 0x3c:",
                "// Line 1178:           return '<'",
                "// Line 1179:         case 0x3e:",
                "// Line 1180:           return '>'",
                "// Line 1181:         case 0x26:",
                "// Line 1182:           return '&'",
                "// Line 1183:         /* istanbul ignore next: unreachable default */",
                "// Line 1184:         default:",
                "// Line 1185:           return c",
                "// vulnerable line: 1186: }",
                "// Line 1187:     })",
                "// vulnerable line: 1188: }",
                "// Line 1189: ",
                "// Line 1190:   return json",
                "// vulnerable line: 1191: }"
            ]
        }
    ]
}