{
    "cve_id": "CVE-2024-3573",
    "cve_description": "mlflow/mlflow is vulnerable to Local File Inclusion (LFI) due to improper parsing of URIs, allowing attackers to bypass checks and read arbitrary files on the system. The issue arises from the 'is_local_uri' function's failure to properly handle URIs with empty or 'file' schemes, leading to the misclassification of URIs as non-local. Attackers can exploit this by crafting malicious model versions with specially crafted 'source' parameters, enabling the reading of sensitive files within at least two directory levels from the server's root.",
    "cve_publish_date": "2024-04-16T00:15Z",
    "cwe_id": "CWE-29",
    "cwe_name": "Path Traversal: '\\..\\filename'",
    "cwe_description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '\\..\\filename' (leading backslash dot dot) sequences that can resolve to a location that is outside of that directory.",
    "commit_message": "Fix local uri (#10651)\n\nSigned-off-by: Serena Ruan <serena.rxy@gmail.com>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "environment_variables.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "0",
            "number_of_lines_deleted_vulnerable_to_cve": "9",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 65:     def get(self):",
                "// Line 66:         if not self.defined:",
                "// Line 67:             return self.default",
                "// Line 68: ",
                "// Line 69:         val = os.getenv(self.name)",
                "// Line 70:         lowercased = val.lower()",
                "// Line 71:         if lowercased not in [\"true\", \"false\", \"1\", \"0\"]:",
                "// Line 72:             raise ValueError(",
                "// Line 73:                 f\"{self.name} value must be one of ['true', 'false', '1', '0'] (case-insensitive), \"",
                "// Line 74:                 f\"but got {val}\"",
                "// vulnerable line: 75: )",
                "// Line 76:         return lowercased in [\"true\", \"1\"]",
                "// Line 77: ",
                "// Line 78: ",
                "// Line 79: #: Specifies the tracking URI.",
                "// Line 80: #: (default: ``None``)",
                "// Line 81: MLFLOW_TRACKING_URI = _EnvironmentVariable(\"MLFLOW_TRACKING_URI\", str, None)",
                "// Line 82: ",
                "// Line 83: #: Specifies the registry URI.",
                "// Line 84: #: (default: ``None``)",
                "// Line 85: MLFLOW_REGISTRY_URI = _EnvironmentVariable(\"MLFLOW_REGISTRY_URI\", str, None)",
                "// Line 92: MLFLOW_DFS_TMP = _EnvironmentVariable(\"MLFLOW_DFS_TMP\", str, \"/tmp/mlflow\")",
                "// Line 93: ",
                "// Line 94: #: Specifies the maximum number of retries for MLflow HTTP requests",
                "// Line 95: #: (default: ``5``)",
                "// Line 96: MLFLOW_HTTP_REQUEST_MAX_RETRIES = _EnvironmentVariable(\"MLFLOW_HTTP_REQUEST_MAX_RETRIES\", int, 5)",
                "// Line 97: ",
                "// Line 98: #: Specifies the backoff increase factor between MLflow HTTP request failures",
                "// Line 99: #: (default: ``2``)",
                "// Line 100: MLFLOW_HTTP_REQUEST_BACKOFF_FACTOR = _EnvironmentVariable(",
                "// Line 101:     \"MLFLOW_HTTP_REQUEST_BACKOFF_FACTOR\", int, 2",
                "// vulnerable line: 102: )",
                "// Line 103: ",
                "// Line 104: #: Specifies the backoff jitter between MLflow HTTP request failures",
                "// Line 105: #: (default: ``1.0``)",
                "// Line 106: MLFLOW_HTTP_REQUEST_BACKOFF_JITTER = _EnvironmentVariable(",
                "// Line 107:     \"MLFLOW_HTTP_REQUEST_BACKOFF_JITTER\", float, 1.0",
                "// vulnerable line: 108: )",
                "// Line 109: ",
                "// Line 110: #: Specifies the timeout in seconds for MLflow HTTP requests",
                "// Line 111: #: (default: ``120``)",
                "// Line 112: MLFLOW_HTTP_REQUEST_TIMEOUT = _EnvironmentVariable(\"MLFLOW_HTTP_REQUEST_TIMEOUT\", int, 120)",
                "// Line 113: ",
                "// Line 114: #: Specifies whether MLflow HTTP requests should be signed using AWS signature V4. It will overwrite",
                "// Line 115: #: (default: ``False``). When set, it will overwrite the \"Authorization\" HTTP header.",
                "// Line 116: #: See https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html for more information.",
                "// Line 117: MLFLOW_TRACKING_AWS_SIGV4 = _BooleanEnvironmentVariable(\"MLFLOW_TRACKING_AWS_SIGV4\", False)",
                "// Line 118: ",
                "// Line 162: #: Specifies extra pyarrow configurations for HDFS artifact operations.",
                "// Line 163: #: (default: ``None``)",
                "// Line 164: MLFLOW_PYARROW_EXTRA_CONF = _EnvironmentVariable(\"MLFLOW_PYARROW_EXTRA_CONF\", str, None)",
                "// Line 165: ",
                "// Line 166: #: Specifies the ``pool_size`` parameter to use for ``sqlalchemy.create_engine`` in the SQLAlchemy",
                "// Line 167: #: tracking store. See https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine.params.pool_size",
                "// Line 168: #: for more information.",
                "// Line 169: #: (default: ``None``)",
                "// Line 170: MLFLOW_SQLALCHEMYSTORE_POOL_SIZE = _EnvironmentVariable(",
                "// Line 171:     \"MLFLOW_SQLALCHEMYSTORE_POOL_SIZE\", int, None",
                "// vulnerable line: 172: )",
                "// Line 173: ",
                "// Line 174: #: Specifies the ``pool_recycle`` parameter to use for ``sqlalchemy.create_engine`` in the",
                "// Line 175: #: SQLAlchemy tracking store. See https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine.params.pool_recycle",
                "// Line 176: #: for more information.",
                "// Line 177: #: (default: ``None``)",
                "// Line 178: MLFLOW_SQLALCHEMYSTORE_POOL_RECYCLE = _EnvironmentVariable(",
                "// Line 179:     \"MLFLOW_SQLALCHEMYSTORE_POOL_RECYCLE\", int, None",
                "// vulnerable line: 180: )",
                "// Line 181: ",
                "// Line 182: #: Specifies the ``max_overflow`` parameter to use for ``sqlalchemy.create_engine`` in the",
                "// Line 183: #: SQLAlchemy tracking store. See https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine.params.max_overflow",
                "// Line 184: #: for more information.",
                "// Line 185: #: (default: ``None``)",
                "// Line 186: MLFLOW_SQLALCHEMYSTORE_MAX_OVERFLOW = _EnvironmentVariable(",
                "// Line 187:     \"MLFLOW_SQLALCHEMYSTORE_MAX_OVERFLOW\", int, None",
                "// vulnerable line: 188: )",
                "// Line 189: ",
                "// Line 190: #: Specifies the ``echo`` parameter to use for ``sqlalchemy.create_engine`` in the",
                "// Line 191: #: SQLAlchemy tracking store. See https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine.params.echo",
                "// Line 192: #: for more information.",
                "// Line 193: #: (default: ``False``)",
                "// Line 194: MLFLOW_SQLALCHEMYSTORE_ECHO = _BooleanEnvironmentVariable(\"MLFLOW_SQLALCHEMYSTORE_ECHO\", False)",
                "// Line 195: ",
                "// Line 196: #: Specifies whether or not to print a warning when `--env-manager=conda` is specified.",
                "// Line 197: #: (default: ``False``)",
                "// Line 198: MLFLOW_DISABLE_ENV_MANAGER_CONDA_WARNING = _BooleanEnvironmentVariable(",
                "// Line 199:     \"MLFLOW_DISABLE_ENV_MANAGER_CONDA_WARNING\", False",
                "// vulnerable line: 200: )",
                "// Line 201: #: Specifies the ``poolclass`` parameter to use for ``sqlalchemy.create_engine`` in the",
                "// Line 202: #: SQLAlchemy tracking store. See https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine.params.poolclass",
                "// Line 203: #: for more information.",
                "// Line 204: #: (default: ``None``)",
                "// Line 205: MLFLOW_SQLALCHEMYSTORE_POOLCLASS = _EnvironmentVariable(",
                "// Line 206:     \"MLFLOW_SQLALCHEMYSTORE_POOLCLASS\", str, None",
                "// vulnerable line: 207: )",
                "// Line 208: ",
                "// Line 209: #: Specifies the ``timeout_seconds`` for MLflow Model dependency inference operations.",
                "// Line 210: #: (default: ``120``)",
                "// Line 211: MLFLOW_REQUIREMENTS_INFERENCE_TIMEOUT = _EnvironmentVariable(",
                "// Line 212:     \"MLFLOW_REQUIREMENTS_INFERENCE_TIMEOUT\", int, 120",
                "// vulnerable line: 213: )",
                "// Line 214: ",
                "// Line 215: #: Specifies the MLflow Model Scoring server request timeout in seconds",
                "// Line 216: #: (default: ``60``)",
                "// Line 217: MLFLOW_SCORING_SERVER_REQUEST_TIMEOUT = _EnvironmentVariable(",
                "// Line 218:     \"MLFLOW_SCORING_SERVER_REQUEST_TIMEOUT\", int, 60",
                "// vulnerable line: 219: )",
                "// Line 220: ",
                "// Line 221: #: (Experimental, may be changed or removed)",
                "// Line 222: #: Specifies the timeout to use when uploading or downloading a file",
                "// Line 223: #: (default: ``None``). If None, individual artifact stores will choose defaults.",
                "// Line 224: MLFLOW_ARTIFACT_UPLOAD_DOWNLOAD_TIMEOUT = _EnvironmentVariable(",
                "// Line 225:     \"MLFLOW_ARTIFACT_UPLOAD_DOWNLOAD_TIMEOUT\", int, None",
                "// vulnerable line: 226: )",
                "// Line 227: ",
                "// Line 228: #: Specifies the device intended for use in the predict function - can be used",
                "// Line 229: #: to override behavior where the GPU is used by default when available by",
                "// Line 230: #: setting this environment variable to be ``cpu``. Currently, this",
                "// Line 231: #: variable is only supported for the MLflow PyTorch and HuggingFace flavors.",
                "// Line 232: #: For the HuggingFace flavor, note that device must be parseable as an integer.",
                "// Line 233: MLFLOW_DEFAULT_PREDICTION_DEVICE = _EnvironmentVariable(",
                "// Line 234:     \"MLFLOW_DEFAULT_PREDICTION_DEVICE\", str, None",
                "// vulnerable line: 235: )",
                "// Line 236: ",
                "// Line 237: #: Specifies to Huggingface whether to use the automatic device placement logic of",
                "// Line 238: # HuggingFace accelerate. If it's set to false, the low_cpu_mem_usage flag will not be",
                "// Line 239: # set to True and device_map will not be set to \"auto\".",
                "// Line 240: MLFLOW_HUGGINGFACE_DISABLE_ACCELERATE_FEATURES = _BooleanEnvironmentVariable(",
                "// Line 241:     \"MLFLOW_DISABLE_HUGGINGFACE_ACCELERATE_FEATURES\", False",
                "// vulnerable line: 242: )",
                "// Line 243: ",
                "// Line 244: #: Specifies to Huggingface whether to use the automatic device placement logic of",
                "// Line 245: # HuggingFace accelerate. If it's set to false, the low_cpu_mem_usage flag will not be",
                "// Line 246: # set to True and device_map will not be set to \"auto\".",
                "// Line 247: MLFLOW_HUGGINGFACE_USE_DEVICE_MAP = _BooleanEnvironmentVariable(",
                "// Line 248:     \"MLFLOW_HUGGINGFACE_USE_DEVICE_MAP\", True",
                "// vulnerable line: 249: )",
                "// Line 250: ",
                "// Line 251: #: Specifies to Huggingface to use the automatic device placement logic of HuggingFace accelerate.",
                "// Line 252: #: This can be set to values supported by the version of HuggingFace Accelerate being installed.",
                "// Line 253: MLFLOW_HUGGINGFACE_DEVICE_MAP_STRATEGY = _EnvironmentVariable(",
                "// Line 254:     \"MLFLOW_HUGGINGFACE_DEVICE_MAP_STRATEGY\", str, \"auto\"",
                "// vulnerable line: 255: )",
                "// Line 256: ",
                "// Line 257: #: Specifies to Huggingface to use the low_cpu_mem_usage flag powered by HuggingFace accelerate.",
                "// Line 258: #: If it's set to false, the low_cpu_mem_usage flag will be set to False.",
                "// Line 259: MLFLOW_HUGGINGFACE_USE_LOW_CPU_MEM_USAGE = _BooleanEnvironmentVariable(",
                "// Line 260:     \"MLFLOW_HUGGINGFACE_USE_LOW_CPU_MEM_USAGE\", True",
                "// vulnerable line: 261: )",
                "// Line 262: ",
                "// Line 263: #: Specifies the max_shard_size to use when mlflow transformers flavor saves the model checkpoint.",
                "// Line 264: #: This can be set to override the 500MB default.",
                "// Line 265: MLFLOW_HUGGINGFACE_MODEL_MAX_SHARD_SIZE = _EnvironmentVariable(",
                "// Line 266:     \"MLFLOW_HUGGINGFACE_MODEL_MAX_SHARD_SIZE\", str, \"500MB\"",
                "// vulnerable line: 267: )",
                "// Line 268: ",
                "// vulnerable line: 269: #: Specifies whether or not to allow using a file URI as a model version source.",
                "// vulnerable line: 270: #: Please be aware that setting this environment variable to True is potentially risky",
                "// vulnerable line: 271: #: because it can allow access to arbitrary files on the specified filesystem",
                "// vulnerable line: 272: #: (default: ``False``).",
                "// vulnerable line: 273: MLFLOW_ALLOW_FILE_URI_AS_MODEL_VERSION_SOURCE = _BooleanEnvironmentVariable(",
                "// vulnerable line: 274: \"MLFLOW_ALLOW_FILE_URI_AS_MODEL_VERSION_SOURCE\", False",
                "// vulnerable line: 275: )",
                "// Line 276: ",
                "// Line 277: ",
                "// Line 278: #: Specifies the name of the Databricks secret scope to use for storing OpenAI API keys.",
                "// Line 279: MLFLOW_OPENAI_SECRET_SCOPE = _EnvironmentVariable(\"MLFLOW_OPENAI_SECRET_SCOPE\", str, None)",
                "// Line 280: ",
                "// Line 281: #: Specifier whether or not to retry OpenAI API calls.",
                "// Line 282: MLFLOW_OPENAI_RETRIES_ENABLED = _BooleanEnvironmentVariable(\"MLFLOW_OPENAI_RETRIES_ENABLED\", True)",
                "// Line 283: ",
                "// Line 284: #: (Experimental, may be changed or removed)",
                "// Line 285: #: Specifies the download options to be used by pip wheel when `add_libraries_to_model` is used to",
                "// Line 286: #: create and log model dependencies as model artifacts. The default behavior only uses dependency",
                "// Line 287: #: binaries and no source packages.",
                "// Line 288: #: (default: ``--only-binary=:all:``).",
                "// Line 289: MLFLOW_WHEELED_MODEL_PIP_DOWNLOAD_OPTIONS = _EnvironmentVariable(",
                "// Line 290:     \"MLFLOW_WHEELED_MODEL_PIP_DOWNLOAD_OPTIONS\", str, \"--only-binary=:all:\"",
                "// vulnerable line: 291: )",
                "// Line 292: ",
                "// Line 293: # Specifies whether or not to use multipart download when downloading a large file on Databricks.",
                "// Line 294: MLFLOW_ENABLE_MULTIPART_DOWNLOAD = _BooleanEnvironmentVariable(",
                "// Line 295:     \"MLFLOW_ENABLE_MULTIPART_DOWNLOAD\", True",
                "// vulnerable line: 296: )",
                "// Line 297: ",
                "// Line 298: # Specifies whether or not to use multipart upload when uploading large artifacts.",
                "// Line 299: MLFLOW_ENABLE_MULTIPART_UPLOAD = _BooleanEnvironmentVariable(\"MLFLOW_ENABLE_MULTIPART_UPLOAD\", True)",
                "// Line 300: ",
                "// Line 301: #: Specifies whether or not to use multipart upload for proxied artifact access.",
                "// Line 302: #: (default: ``False``)",
                "// Line 303: MLFLOW_ENABLE_PROXY_MULTIPART_UPLOAD = _BooleanEnvironmentVariable(",
                "// Line 304:     \"MLFLOW_ENABLE_PROXY_MULTIPART_UPLOAD\", False",
                "// vulnerable line: 305: )",
                "// Line 306: ",
                "// Line 307: #: Private environment variable that's set to ``True`` while running tests.",
                "// Line 308: _MLFLOW_TESTING = _BooleanEnvironmentVariable(\"MLFLOW_TESTING\", False)",
                "// Line 309: ",
                "// Line 310: #: Specifies the username used to authenticate with a tracking server.",
                "// Line 311: #: (default: ``None``)",
                "// Line 312: MLFLOW_TRACKING_USERNAME = _EnvironmentVariable(\"MLFLOW_TRACKING_USERNAME\", str, None)",
                "// Line 313: ",
                "// Line 314: #: Specifies the password used to authenticate with a tracking server.",
                "// Line 315: #: (default: ``None``)",
                "// Line 316: MLFLOW_TRACKING_PASSWORD = _EnvironmentVariable(\"MLFLOW_TRACKING_PASSWORD\", str, None)",
                "// Line 317: ",
                "// Line 318: #: Specifies and takes precedence for setting the basic/bearer auth on http requests.",
                "// Line 319: #: (default: ``None``)",
                "// Line 320: MLFLOW_TRACKING_TOKEN = _EnvironmentVariable(\"MLFLOW_TRACKING_TOKEN\", str, None)",
                "// Line 321: ",
                "// Line 322: #: Specifies whether to verify TLS connection in ``requests.request`` function,",
                "// Line 323: #: see https://requests.readthedocs.io/en/master/api/",
                "// vulnerable line: 324: #: (default: ``False``).",
                "// Line 325: MLFLOW_TRACKING_INSECURE_TLS = _BooleanEnvironmentVariable(\"MLFLOW_TRACKING_INSECURE_TLS\", False)",
                "// Line 326: ",
                "// Line 327: #: Sets the ``verify`` param in ``requests.request`` function,",
                "// Line 328: #: see https://requests.readthedocs.io/en/master/api/",
                "// Line 329: #: (default: ``None``)",
                "// Line 330: MLFLOW_TRACKING_SERVER_CERT_PATH = _EnvironmentVariable(",
                "// Line 331:     \"MLFLOW_TRACKING_SERVER_CERT_PATH\", str, None",
                "// vulnerable line: 332: )",
                "// Line 333: ",
                "// Line 334: #: Sets the ``cert`` param in ``requests.request`` function,",
                "// Line 335: #: see https://requests.readthedocs.io/en/master/api/",
                "// Line 336: #: (default: ``None``)",
                "// Line 337: MLFLOW_TRACKING_CLIENT_CERT_PATH = _EnvironmentVariable(",
                "// Line 338:     \"MLFLOW_TRACKING_CLIENT_CERT_PATH\", str, None",
                "// vulnerable line: 339: )",
                "// Line 340: ",
                "// Line 341: #: Specified the ID of the run to log data to.",
                "// Line 342: #: (default: ``None``)",
                "// Line 343: MLFLOW_RUN_ID = _EnvironmentVariable(\"MLFLOW_RUN_ID\", str, None)",
                "// Line 344: ",
                "// Line 345: #: Specifies the default root directory for tracking `FileStore`.",
                "// Line 346: #: (default: ``None``)",
                "// Line 347: MLFLOW_TRACKING_DIR = _EnvironmentVariable(\"MLFLOW_TRACKING_DIR\", str, None)",
                "// Line 348: ",
                "// Line 349: #: Specifies the default root directory for registry `FileStore`.",
                "// Line 359: MLFLOW_EXPERIMENT_NAME = _EnvironmentVariable(\"MLFLOW_EXPERIMENT_NAME\", str, None)",
                "// Line 360: ",
                "// Line 361: #: Specified the path to the configuration file for MLflow Authentication.",
                "// Line 362: #: (default: ``None``)",
                "// Line 363: MLFLOW_AUTH_CONFIG_PATH = _EnvironmentVariable(\"MLFLOW_AUTH_CONFIG_PATH\", str, None)",
                "// Line 364: ",
                "// Line 365: #: Specifies the root directory to create Python virtual environments in.",
                "// Line 366: #: (default: ``~/.mlflow/envs``)",
                "// Line 367: MLFLOW_ENV_ROOT = _EnvironmentVariable(",
                "// Line 368:     \"MLFLOW_ENV_ROOT\", str, str(Path.home().joinpath(\".mlflow\", \"envs\"))",
                "// vulnerable line: 369: )",
                "// Line 370: ",
                "// Line 371: #: Specifies whether or not to use DBFS FUSE mount to store artifacts on Databricks",
                "// Line 372: #: (default: ``False``)",
                "// Line 373: MLFLOW_ENABLE_DBFS_FUSE_ARTIFACT_REPO = _BooleanEnvironmentVariable(",
                "// Line 374:     \"MLFLOW_ENABLE_DBFS_FUSE_ARTIFACT_REPO\", True",
                "// vulnerable line: 375: )",
                "// Line 376: ",
                "// Line 377: #: Private environment variable that should be set to ``True`` when running autologging tests.",
                "// Line 378: #: (default: ``False``)",
                "// Line 379: _MLFLOW_AUTOLOGGING_TESTING = _BooleanEnvironmentVariable(\"MLFLOW_AUTOLOGGING_TESTING\", False)",
                "// Line 380: ",
                "// Line 381: #: (Experimental, may be changed or removed)",
                "// Line 382: #: Specifies the uri of a MLflow Gateway Server instance to be used with the Gateway Client APIs",
                "// Line 383: #: (default: ``None``)",
                "// Line 384: MLFLOW_GATEWAY_URI = _EnvironmentVariable(\"MLFLOW_GATEWAY_URI\", str, None)",
                "// Line 385: ",
                "// Line 394: MLFLOW_GATEWAY_CONFIG = _EnvironmentVariable(\"MLFLOW_GATEWAY_CONFIG\", str, None)",
                "// Line 395: ",
                "// Line 396: #: Specifies the path of the config file for the MLflow Deployments server.",
                "// Line 397: #: (default: ``None``)",
                "// Line 398: MLFLOW_DEPLOYMENTS_CONFIG = _EnvironmentVariable(\"MLFLOW_DEPLOYMENTS_CONFIG\", str, None)",
                "// Line 399: ",
                "// Line 400: #: Specifies whether to display the progress bar when uploading/downloading artifacts.",
                "// Line 401: #: (default: ``True``)",
                "// Line 402: MLFLOW_ENABLE_ARTIFACTS_PROGRESS_BAR = _BooleanEnvironmentVariable(",
                "// Line 403:     \"MLFLOW_ENABLE_ARTIFACTS_PROGRESS_BAR\", True",
                "// vulnerable line: 404: )",
                "// Line 405: ",
                "// Line 406: #: Specifies the conda home directory to use.",
                "// Line 407: #: (default: ``conda``)",
                "// Line 408: MLFLOW_CONDA_HOME = _EnvironmentVariable(\"MLFLOW_CONDA_HOME\", str, None)",
                "// Line 409: ",
                "// Line 410: #: Specifies the name of the command to use when creating the environments.",
                "// Line 411: #: For example, let's say we want to use mamba (https://github.com/mamba-org/mamba)",
                "// Line 412: #: instead of conda to create environments.",
                "// Line 413: #: Then: > conda install mamba -n base -c conda-forge",
                "// Line 414: #: If not set, use the same as conda_path",
                "// Line 415: #: (default: ``conda``)",
                "// Line 416: MLFLOW_CONDA_CREATE_ENV_CMD = _EnvironmentVariable(\"MLFLOW_CONDA_CREATE_ENV_CMD\", str, \"conda\")",
                "// Line 417: ",
                "// Line 418: #: Specifies the execution directory for recipes.",
                "// Line 419: #: (default: ``None``)",
                "// Line 420: MLFLOW_RECIPES_EXECUTION_DIRECTORY = _EnvironmentVariable(",
                "// Line 421:     \"MLFLOW_RECIPES_EXECUTION_DIRECTORY\", str, None",
                "// vulnerable line: 422: )",
                "// Line 423: ",
                "// Line 424: #: Specifies the target step to execute for recipes.",
                "// Line 425: #: (default: ``None``)",
                "// Line 426: MLFLOW_RECIPES_EXECUTION_TARGET_STEP_NAME = _EnvironmentVariable(",
                "// Line 427:     \"MLFLOW_RECIPES_EXECUTION_TARGET_STEP_NAME\", str, None",
                "// vulnerable line: 428: )",
                "// Line 429: ",
                "// Line 430: #: Specifies the flavor to serve in the scoring server.",
                "// Line 431: #: (default ``None``)",
                "// Line 432: MLFLOW_DEPLOYMENT_FLAVOR_NAME = _EnvironmentVariable(\"MLFLOW_DEPLOYMENT_FLAVOR_NAME\", str, None)",
                "// Line 433: ",
                "// Line 434: #: Specifies the profile to use for recipes.",
                "// Line 435: #: (default: ``None``)",
                "// Line 436: MLFLOW_RECIPES_PROFILE = _EnvironmentVariable(\"MLFLOW_RECIPES_PROFILE\", str, None)",
                "// Line 437: ",
                "// Line 438: #: Specifies the MLflow Run context",
                "// Line 447: #: (default: ``False``)",
                "// Line 448: MLFLOW_DISABLE_ENV_CREATION = _BooleanEnvironmentVariable(\"MLFLOW_DISABLE_ENV_CREATION\", False)",
                "// Line 449: ",
                "// Line 450: #: Specifies the timeout value for downloading chunks of mlflow artifacts.",
                "// Line 451: #: (default: ``300``)",
                "// Line 452: MLFLOW_DOWNLOAD_CHUNK_TIMEOUT = _EnvironmentVariable(\"MLFLOW_DOWNLOAD_CHUNK_TIMEOUT\", int, 300)",
                "// Line 453: ",
                "// Line 454: #: Specifies if system metrics logging should be enabled.",
                "// Line 455: MLFLOW_ENABLE_SYSTEM_METRICS_LOGGING = _BooleanEnvironmentVariable(",
                "// Line 456:     \"MLFLOW_ENABLE_SYSTEM_METRICS_LOGGING\", False",
                "// vulnerable line: 457: )",
                "// Line 458: ",
                "// Line 459: #: Specifies the sampling interval for system metrics logging.",
                "// Line 460: MLFLOW_SYSTEM_METRICS_SAMPLING_INTERVAL = _EnvironmentVariable(",
                "// Line 461:     \"MLFLOW_SYSTEM_METRICS_SAMPLING_INTERVAL\", float, None",
                "// vulnerable line: 462: )",
                "// Line 463: ",
                "// Line 464: #: Specifies the number of samples before logging system metrics.",
                "// Line 465: MLFLOW_SYSTEM_METRICS_SAMPLES_BEFORE_LOGGING = _EnvironmentVariable(",
                "// Line 466:     \"MLFLOW_SYSTEM_METRICS_SAMPLES_BEFORE_LOGGING\", int, None",
                "// vulnerable line: 467: )",
                "// Line 468: ",
                "// Line 469: # Private environment variable to specify the number of chunk download retries for multipart",
                "// Line 470: # download.",
                "// Line 471: _MLFLOW_MPD_NUM_RETRIES = _EnvironmentVariable(\"_MLFLOW_MPD_NUM_RETRIES\", int, 3)",
                "// Line 472: ",
                "// Line 473: # Private environment variable to specify the interval between chunk download retries for multipart",
                "// Line 474: # download.",
                "// Line 475: _MLFLOW_MPD_RETRY_INTERVAL_SECONDS = _EnvironmentVariable(",
                "// Line 476:     \"_MLFLOW_MPD_RETRY_INTERVAL_SECONDS\", int, 1",
                "// vulnerable line: 477: )",
                "// Line 478: ",
                "// Line 479: #: Specifies the minimum file size in bytes to use multipart upload when logging artifacts",
                "// Line 480: #: (default: ``524_288_000`` (500 MB))",
                "// Line 481: MLFLOW_MULTIPART_UPLOAD_MINIMUM_FILE_SIZE = _EnvironmentVariable(",
                "// Line 482:     \"MLFLOW_MULTIPART_UPLOAD_MINIMUM_FILE_SIZE\", int, 500 * 1024**2",
                "// vulnerable line: 483: )",
                "// Line 484: ",
                "// Line 485: #: Specifies the chunk size in bytes to use when performing multipart upload",
                "// Line 486: #: (default: ``104_857_60`` (10 MB))",
                "// Line 487: MLFLOW_MULTIPART_UPLOAD_CHUNK_SIZE = _EnvironmentVariable(",
                "// Line 488:     \"MLFLOW_MULTIPART_UPLOAD_CHUNK_SIZE\", int, 10 * 1024**2",
                "// vulnerable line: 489: )",
                "// Line 490: ",
                "// Line 491: #: Specifies the chunk size in bytes to use when performing multipart download",
                "// Line 492: #: (default: ``104_857_600`` (100 MB))",
                "// Line 493: MLFLOW_MULTIPART_DOWNLOAD_CHUNK_SIZE = _EnvironmentVariable(",
                "// Line 494:     \"MLFLOW_MULTIPART_DOWNLOAD_CHUNK_SIZE\", int, 100 * 1024**2",
                "// vulnerable line: 495: )",
                "// Line 496: ",
                "// Line 497: #: Specifies whether or not to allow the MLflow server to follow redirects when",
                "// Line 498: #: making HTTP requests. If set to False, the server will throw an exception if it",
                "// Line 499: #: encounters a redirect response.",
                "// Line 500: #: (default: ``True``)",
                "// Line 501: MLFLOW_ALLOW_HTTP_REDIRECTS = _BooleanEnvironmentVariable(\"MLFLOW_ALLOW_HTTP_REDIRECTS\", True)"
            ]
        },
        {
            "filename_of_changes": "handlers.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "17",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 11: from functools import wraps",
                "// Line 12: ",
                "// Line 13: import requests",
                "// Line 14: from flask import Response, current_app, request, send_file",
                "// Line 15: from google.protobuf import descriptor",
                "// Line 16: from google.protobuf.json_format import ParseError",
                "// Line 17: ",
                "// Line 18: from mlflow.entities import DatasetInput, ExperimentTag, FileInfo, Metric, Param, RunTag, ViewType",
                "// Line 19: from mlflow.entities.model_registry import ModelVersionTag, RegisteredModelTag",
                "// Line 20: from mlflow.entities.multipart_upload import MultipartUploadPart",
                "// vulnerable line: 21: from mlflow.environment_variables import (",
                "// vulnerable line: 22: MLFLOW_ALLOW_FILE_URI_AS_MODEL_VERSION_SOURCE,",
                "// vulnerable line: 23: MLFLOW_DEPLOYMENTS_TARGET,",
                "// vulnerable line: 24: )",
                "// Line 25: from mlflow.exceptions import MlflowException, _UnsupportedMultipartUploadException",
                "// Line 26: from mlflow.models import Model",
                "// Line 27: from mlflow.protos import databricks_pb2",
                "// Line 28: from mlflow.protos.databricks_pb2 import (",
                "// vulnerable line: 29: INVALID_PARAMETER_VALUE,",
                "// Line 30:     RESOURCE_DOES_NOT_EXIST,",
                "// vulnerable line: 31: )",
                "// Line 32: from mlflow.protos.mlflow_artifacts_pb2 import (",
                "// Line 33:     AbortMultipartUpload,",
                "// Line 34:     CompleteMultipartUpload,",
                "// Line 35:     CreateMultipartUpload,",
                "// Line 36:     DeleteArtifact,",
                "// Line 37:     DownloadArtifact,",
                "// Line 38:     MlflowArtifactsService,",
                "// Line 39:     UploadArtifact,",
                "// vulnerable line: 40: )",
                "// Line 41: from mlflow.protos.mlflow_artifacts_pb2 import (",
                "// Line 42:     ListArtifacts as ListArtifactsMlflowArtifacts,",
                "// vulnerable line: 43: )",
                "// Line 44: from mlflow.protos.model_registry_pb2 import (",
                "// Line 45:     CreateModelVersion,",
                "// Line 46:     CreateRegisteredModel,",
                "// Line 47:     DeleteModelVersion,",
                "// Line 48:     DeleteModelVersionTag,",
                "// Line 49:     DeleteRegisteredModel,",
                "// Line 50:     DeleteRegisteredModelAlias,",
                "// Line 51:     DeleteRegisteredModelTag,",
                "// Line 52:     GetLatestVersions,",
                "// Line 53:     GetModelVersion,",
                "// Line 57:     ModelRegistryService,",
                "// Line 58:     RenameRegisteredModel,",
                "// Line 59:     SearchModelVersions,",
                "// Line 60:     SearchRegisteredModels,",
                "// Line 61:     SetModelVersionTag,",
                "// Line 62:     SetRegisteredModelAlias,",
                "// Line 63:     SetRegisteredModelTag,",
                "// Line 64:     TransitionModelVersionStage,",
                "// Line 65:     UpdateModelVersion,",
                "// Line 66:     UpdateRegisteredModel,",
                "// vulnerable line: 67: )",
                "// Line 68: from mlflow.protos.service_pb2 import (",
                "// Line 69:     CreateExperiment,",
                "// Line 70:     CreateRun,",
                "// Line 71:     DeleteExperiment,",
                "// Line 72:     DeleteRun,",
                "// Line 73:     DeleteTag,",
                "// Line 74:     GetExperiment,",
                "// Line 75:     GetExperimentByName,",
                "// Line 76:     GetMetricHistory,",
                "// Line 77:     GetRun,",
                "// Line 83:     LogParam,",
                "// Line 84:     MlflowService,",
                "// Line 85:     RestoreExperiment,",
                "// Line 86:     RestoreRun,",
                "// Line 87:     SearchExperiments,",
                "// Line 88:     SearchRuns,",
                "// Line 89:     SetExperimentTag,",
                "// Line 90:     SetTag,",
                "// Line 91:     UpdateExperiment,",
                "// Line 92:     UpdateRun,",
                "// vulnerable line: 93: )",
                "// Line 94: from mlflow.server.validation import _validate_content_type",
                "// Line 95: from mlflow.store.artifact.artifact_repo import MultipartUploadMixin",
                "// Line 96: from mlflow.store.artifact.artifact_repository_registry import get_artifact_repository",
                "// Line 97: from mlflow.store.db.db_types import DATABASE_ENGINES",
                "// Line 98: from mlflow.tracking._model_registry import utils as registry_utils",
                "// Line 99: from mlflow.tracking._model_registry.registry import ModelRegistryStoreRegistry",
                "// Line 100: from mlflow.tracking._tracking_service import utils",
                "// Line 101: from mlflow.tracking._tracking_service.registry import TrackingStoreRegistry",
                "// Line 102: from mlflow.tracking.registry import UnsupportedModelRegistryStoreURIException",
                "// Line 103: from mlflow.utils.file_utils import local_file_uri_to_path",
                "// Line 104: from mlflow.utils.mime_type_utils import _guess_mime_type",
                "// Line 105: from mlflow.utils.promptlab_utils import _create_promptlab_run_impl",
                "// Line 106: from mlflow.utils.proto_json_utils import message_to_json, parse_dict",
                "// Line 107: from mlflow.utils.string_utils import is_string_type",
                "// vulnerable line: 108: from mlflow.utils.uri import is_file_uri, is_local_uri, validate_path_is_safe, validate_query_string",
                "// Line 109: from mlflow.utils.validation import _validate_batch_log_api_req",
                "// Line 110: ",
                "// Line 111: _logger = logging.getLogger(__name__)",
                "// Line 112: _tracking_store = None",
                "// Line 113: _model_registry_store = None",
                "// Line 114: _artifact_repo = None",
                "// Line 115: STATIC_PREFIX_ENV_VAR = \"_MLFLOW_STATIC_PREFIX\"",
                "// Line 116: ",
                "// Line 117: ",
                "// Line 118: class TrackingStoreRegistryWrapper(TrackingStoreRegistry):",
                "// Line 216:     # access to artifacts stored in Location B.",
                "// Line 217:     #",
                "// Line 218:     # In this scenario, requests for artifacts stored in Location B that are sent to the original",
                "// Line 219:     # MLflow server will fail if the original MLflow server does not have access to Location B",
                "// Line 220:     # because it will assume that it can serve all proxied artifacts regardless of the underlying",
                "// Line 221:     # location. Such failures can be remediated by granting the original MLflow server access to",
                "// Line 222:     # Location B.",
                "// Line 223:     return (",
                "// Line 224:         parsed_run_artifact_root.scheme in [\"http\", \"https\", \"mlflow-artifacts\"]",
                "// Line 225:         and _is_serving_proxied_artifacts()",
                "// vulnerable line: 226: )",
                "// Line 227: ",
                "// Line 228: ",
                "// Line 229: def _get_proxied_run_artifact_destination_path(proxied_artifact_root, relative_path=None):",
                "// Line 230:     \"\"\"",
                "// Line 231:     Resolves the specified proxied artifact location within a Run to a concrete storage location.",
                "// Line 232: ",
                "// Line 233:     :param proxied_artifact_root: The Run artifact root location (URI) with scheme ``http``,",
                "// Line 234:                                   ``https``, or `mlflow-artifacts` that can be resolved by the",
                "// Line 235:                                   MLflow server to a concrete storage location.",
                "// Line 236:     :param relative_path: The relative path of the destination within the specified",
                "// Line 256:         assert mlflow_artifacts_http_route_anchor in parsed_proxied_artifact_root.path",
                "// Line 257: ",
                "// Line 258:         proxied_run_artifact_root_path = parsed_proxied_artifact_root.path.split(",
                "// Line 259:             mlflow_artifacts_http_route_anchor",
                "// Line 260:         )[1].lstrip(\"/\")",
                "// Line 261: ",
                "// Line 262:     return (",
                "// Line 263:         posixpath.join(proxied_run_artifact_root_path, relative_path)",
                "// Line 264:         if relative_path is not None",
                "// Line 265:         else proxied_run_artifact_root_path",
                "// vulnerable line: 266: )",
                "// Line 267: ",
                "// Line 268: ",
                "// Line 269: def _get_tracking_store(backend_store_uri=None, default_artifact_root=None):",
                "// Line 270:     from mlflow.server import ARTIFACT_ROOT_ENV_VAR, BACKEND_STORE_URI_ENV_VAR",
                "// Line 271: ",
                "// Line 272:     global _tracking_store",
                "// Line 273:     if _tracking_store is None:",
                "// Line 274:         store_uri = backend_store_uri or os.environ.get(BACKEND_STORE_URI_ENV_VAR, None)",
                "// Line 275:         artifact_root = default_artifact_root or os.environ.get(ARTIFACT_ROOT_ENV_VAR, None)",
                "// Line 276:         _tracking_store = _tracking_store_registry.get_store(store_uri, artifact_root)",
                "// Line 280: ",
                "// Line 281: def _get_model_registry_store(registry_store_uri=None):",
                "// Line 282:     from mlflow.server import BACKEND_STORE_URI_ENV_VAR, REGISTRY_STORE_URI_ENV_VAR",
                "// Line 283: ",
                "// Line 284:     global _model_registry_store",
                "// Line 285:     if _model_registry_store is None:",
                "// Line 286:         store_uri = (",
                "// Line 287:             registry_store_uri",
                "// Line 288:             or os.environ.get(REGISTRY_STORE_URI_ENV_VAR, None)",
                "// Line 289:             or os.environ.get(BACKEND_STORE_URI_ENV_VAR, None)",
                "// vulnerable line: 290: )",
                "// Line 291:         _model_registry_store = _model_registry_store_registry.get_store(store_uri)",
                "// Line 292:         registry_utils.set_registry_uri(store_uri)",
                "// Line 293:     return _model_registry_store",
                "// Line 294: ",
                "// Line 295: ",
                "// Line 296: def initialize_backend_stores(",
                "// Line 297:     backend_store_uri=None, registry_store_uri=None, default_artifact_root=None",
                "// Line 298: ):",
                "// Line 299:     _get_tracking_store(backend_store_uri, default_artifact_root)",
                "// Line 300:     try:",
                "// Line 384: ",
                "// Line 385:         try:",
                "// Line 386:             f(value)",
                "// Line 387:         except AssertionError:",
                "// Line 388:             if f == _assert_required:",
                "// Line 389:                 message = f\"Missing value for required parameter '{param}'.\"",
                "// Line 390:             else:",
                "// Line 391:                 message = (",
                "// Line 392:                     f\"Invalid value {value} for parameter '{param}' supplied.\"",
                "// Line 393:                     f\" Hint: Value was of type '{type(value).__name__}'.\"",
                "// vulnerable line: 394: )",
                "// vulnerable line: 395: raise MlflowException(",
                "// Line 396:                 message=(",
                "// Line 397:                     message + \" See the API docs for more information about request parameters.\"",
                "// Line 398:                 ),",
                "// Line 399:                 error_code=INVALID_PARAMETER_VALUE,",
                "// vulnerable line: 400: )",
                "// Line 401: ",
                "// Line 402:     return None",
                "// Line 403: ",
                "// Line 404: ",
                "// Line 405: def _get_request_json(flask_request=request):",
                "// Line 406:     _validate_content_type(flask_request, [\"application/json\"])",
                "// Line 407:     return flask_request.get_json(force=True, silent=True)",
                "// Line 408: ",
                "// Line 409: ",
                "// Line 410: def _get_request_message(request_message, flask_request=request, schema=None):",
                "// Line 457:     for schema_key, schema_validation_fns in schema.items():",
                "// Line 458:         if schema_key in request_json or _assert_required in schema_validation_fns:",
                "// Line 459:             value = request_json.get(schema_key)",
                "// Line 460:             if schema_key == \"run_id\" and value is None and \"run_uuid\" in request_json:",
                "// Line 461:                 value = request_json.get(\"run_uuid\")",
                "// Line 462:             _validate_param_against_schema(",
                "// Line 463:                 schema=schema_validation_fns,",
                "// Line 464:                 param=schema_key,",
                "// Line 465:                 value=value,",
                "// Line 466:                 proto_parsing_succeeded=proto_parsing_succeeded,",
                "// vulnerable line: 467: )",
                "// Line 468: ",
                "// Line 469:     return request_message",
                "// Line 470: ",
                "// Line 471: ",
                "// Line 472: def _response_with_file_attachment_headers(file_path, response):",
                "// Line 473:     mime_type = _guess_mime_type(file_path)",
                "// Line 474:     filename = pathlib.Path(file_path).name",
                "// Line 475:     response.mimetype = mime_type",
                "// Line 476:     content_disposition_header_name = \"Content-Disposition\"",
                "// Line 477:     if content_disposition_header_name not in response.headers:",
                "// Line 508:     @wraps(func)",
                "// Line 509:     def wrapper(*args, **kwargs):",
                "// Line 510:         if not _is_serving_proxied_artifacts():",
                "// Line 511:             return Response(",
                "// Line 512:                 (",
                "// Line 513:                     f\"Endpoint: {request.url_rule} disabled due to the mlflow server running \"",
                "// Line 514:                     \"with `--no-serve-artifacts`. To enable artifacts server functionality, \"",
                "// Line 515:                     \"run `mlflow server` with `--serve-artifacts`\"",
                "// Line 516:                 ),",
                "// Line 517:                 503,",
                "// vulnerable line: 518: )",
                "// Line 519:         return func(*args, **kwargs)",
                "// Line 520: ",
                "// Line 521:     return wrapper",
                "// Line 522: ",
                "// Line 523: ",
                "// Line 524: def _disable_if_artifacts_only(func):",
                "// Line 525:     @wraps(func)",
                "// Line 526:     def wrapper(*args, **kwargs):",
                "// Line 527:         from mlflow.server import ARTIFACTS_ONLY_ENV_VAR",
                "// Line 528: ",
                "// Line 529:         if os.environ.get(ARTIFACTS_ONLY_ENV_VAR):",
                "// Line 530:             return Response(",
                "// Line 531:                 (",
                "// Line 532:                     f\"Endpoint: {request.url_rule} disabled due to the mlflow server running \"",
                "// Line 533:                     \"in `--artifacts-only` mode. To enable tracking server functionality, run \"",
                "// Line 534:                     \"`mlflow server` without `--artifacts-only`\"",
                "// Line 535:                 ),",
                "// Line 536:                 503,",
                "// vulnerable line: 537: )",
                "// Line 538:         return func(*args, **kwargs)",
                "// Line 539: ",
                "// Line 540:     return wrapper",
                "// Line 541: ",
                "// Line 542: ",
                "// Line 543: @catch_mlflow_exception",
                "// Line 544: def get_artifact_handler():",
                "// Line 545:     from querystring_parser import parser",
                "// Line 546: ",
                "// Line 547:     query_string = request.query_string.decode(\"utf-8\")",
                "// Line 549:     run_id = request_dict.get(\"run_id\") or request_dict.get(\"run_uuid\")",
                "// Line 550:     path = request_dict[\"path\"]",
                "// Line 551:     path = validate_path_is_safe(path)",
                "// Line 552:     run = _get_tracking_store().get_run(run_id)",
                "// Line 553: ",
                "// Line 554:     if _is_servable_proxied_run_artifact_root(run.info.artifact_uri):",
                "// Line 555:         artifact_repo = _get_artifact_repo_mlflow_artifacts()",
                "// Line 556:         artifact_path = _get_proxied_run_artifact_destination_path(",
                "// Line 557:             proxied_artifact_root=run.info.artifact_uri,",
                "// Line 558:             relative_path=path,",
                "// vulnerable line: 559: )",
                "// Line 560:     else:",
                "// Line 561:         artifact_repo = _get_artifact_repo(run)",
                "// Line 562:         artifact_path = path",
                "// Line 563: ",
                "// Line 564:     return _send_artifact(artifact_repo, artifact_path)",
                "// Line 565: ",
                "// Line 566: ",
                "// Line 567: def _not_implemented():",
                "// Line 568:     response = Response()",
                "// Line 569:     response.status_code = 404",
                "// Line 576: @catch_mlflow_exception",
                "// Line 577: @_disable_if_artifacts_only",
                "// Line 578: def _create_experiment():",
                "// Line 579:     request_message = _get_request_message(",
                "// Line 580:         CreateExperiment(),",
                "// Line 581:         schema={",
                "// Line 582:             \"name\": [_assert_required, _assert_string],",
                "// Line 583:             \"artifact_location\": [_assert_string],",
                "// Line 584:             \"tags\": [_assert_array],",
                "// Line 585:         },",
                "// vulnerable line: 586: )",
                "// Line 587: ",
                "// Line 588:     tags = [ExperimentTag(tag.key, tag.value) for tag in request_message.tags]",
                "// Line 589: ",
                "// Line 590:     # Validate query string in artifact location to prevent attacks",
                "// Line 591:     parsed_artifact_locaion = urllib.parse.urlparse(request_message.artifact_location)",
                "// Line 592:     validate_query_string(parsed_artifact_locaion.query)",
                "// Line 593: ",
                "// Line 594:     experiment_id = _get_tracking_store().create_experiment(",
                "// Line 595:         request_message.name, request_message.artifact_location, tags",
                "// vulnerable line: 596: )",
                "// Line 597:     response_message = CreateExperiment.Response()",
                "// Line 598:     response_message.experiment_id = experiment_id",
                "// Line 599:     response = Response(mimetype=\"application/json\")",
                "// Line 600:     response.set_data(message_to_json(response_message))",
                "// Line 601:     return response",
                "// Line 602: ",
                "// Line 603: ",
                "// Line 604: @catch_mlflow_exception",
                "// Line 605: @_disable_if_artifacts_only",
                "// Line 606: def _get_experiment():",
                "// Line 607:     request_message = _get_request_message(",
                "// Line 608:         GetExperiment(), schema={\"experiment_id\": [_assert_required, _assert_string]}",
                "// vulnerable line: 609: )",
                "// Line 610:     response_message = GetExperiment.Response()",
                "// Line 611:     experiment = _get_tracking_store().get_experiment(request_message.experiment_id).to_proto()",
                "// Line 612:     response_message.experiment.MergeFrom(experiment)",
                "// Line 613:     response = Response(mimetype=\"application/json\")",
                "// Line 614:     response.set_data(message_to_json(response_message))",
                "// Line 615:     return response",
                "// Line 616: ",
                "// Line 617: ",
                "// Line 618: @catch_mlflow_exception",
                "// Line 619: @_disable_if_artifacts_only",
                "// Line 620: def _get_experiment_by_name():",
                "// Line 621:     request_message = _get_request_message(",
                "// Line 622:         GetExperimentByName(), schema={\"experiment_name\": [_assert_required, _assert_string]}",
                "// vulnerable line: 623: )",
                "// Line 624:     response_message = GetExperimentByName.Response()",
                "// Line 625:     store_exp = _get_tracking_store().get_experiment_by_name(request_message.experiment_name)",
                "// Line 626:     if store_exp is None:",
                "// vulnerable line: 627: raise MlflowException(",
                "// Line 628:             f\"Could not find experiment with name '{request_message.experiment_name}'\",",
                "// Line 629:             error_code=RESOURCE_DOES_NOT_EXIST,",
                "// vulnerable line: 630: )",
                "// Line 631:     experiment = store_exp.to_proto()",
                "// Line 632:     response_message.experiment.MergeFrom(experiment)",
                "// Line 633:     response = Response(mimetype=\"application/json\")",
                "// Line 634:     response.set_data(message_to_json(response_message))",
                "// Line 635:     return response",
                "// Line 636: ",
                "// Line 637: ",
                "// Line 638: @catch_mlflow_exception",
                "// Line 639: @_disable_if_artifacts_only",
                "// Line 640: def _delete_experiment():",
                "// Line 641:     request_message = _get_request_message(",
                "// Line 642:         DeleteExperiment(), schema={\"experiment_id\": [_assert_required, _assert_string]}",
                "// vulnerable line: 643: )",
                "// Line 644:     _get_tracking_store().delete_experiment(request_message.experiment_id)",
                "// Line 645:     response_message = DeleteExperiment.Response()",
                "// Line 646:     response = Response(mimetype=\"application/json\")",
                "// Line 647:     response.set_data(message_to_json(response_message))",
                "// Line 648:     return response",
                "// Line 649: ",
                "// Line 650: ",
                "// Line 651: @catch_mlflow_exception",
                "// Line 652: @_disable_if_artifacts_only",
                "// Line 653: def _restore_experiment():",
                "// Line 654:     request_message = _get_request_message(",
                "// Line 655:         RestoreExperiment(), schema={\"experiment_id\": [_assert_required, _assert_string]}",
                "// vulnerable line: 656: )",
                "// Line 657:     _get_tracking_store().restore_experiment(request_message.experiment_id)",
                "// Line 658:     response_message = RestoreExperiment.Response()",
                "// Line 659:     response = Response(mimetype=\"application/json\")",
                "// Line 660:     response.set_data(message_to_json(response_message))",
                "// Line 661:     return response",
                "// Line 662: ",
                "// Line 663: ",
                "// Line 664: @catch_mlflow_exception",
                "// Line 665: @_disable_if_artifacts_only",
                "// Line 666: def _update_experiment():",
                "// Line 667:     request_message = _get_request_message(",
                "// Line 668:         UpdateExperiment(),",
                "// Line 669:         schema={",
                "// Line 670:             \"experiment_id\": [_assert_required, _assert_string],",
                "// Line 671:             \"new_name\": [_assert_string, _assert_required],",
                "// Line 672:         },",
                "// vulnerable line: 673: )",
                "// Line 674:     if request_message.new_name:",
                "// Line 675:         _get_tracking_store().rename_experiment(",
                "// Line 676:             request_message.experiment_id, request_message.new_name",
                "// vulnerable line: 677: )",
                "// Line 678:     response_message = UpdateExperiment.Response()",
                "// Line 679:     response = Response(mimetype=\"application/json\")",
                "// Line 680:     response.set_data(message_to_json(response_message))",
                "// Line 681:     return response",
                "// Line 682: ",
                "// Line 683: ",
                "// Line 684: @catch_mlflow_exception",
                "// Line 685: @_disable_if_artifacts_only",
                "// Line 686: def _create_run():",
                "// Line 687:     request_message = _get_request_message(",
                "// Line 688:         CreateRun(),",
                "// Line 689:         schema={",
                "// Line 690:             \"experiment_id\": [_assert_string],",
                "// Line 691:             \"start_time\": [_assert_intlike],",
                "// Line 692:             \"run_name\": [_assert_string],",
                "// Line 693:         },",
                "// vulnerable line: 694: )",
                "// Line 695: ",
                "// Line 696:     tags = [RunTag(tag.key, tag.value) for tag in request_message.tags]",
                "// Line 697:     run = _get_tracking_store().create_run(",
                "// Line 698:         experiment_id=request_message.experiment_id,",
                "// Line 699:         user_id=request_message.user_id,",
                "// Line 700:         start_time=request_message.start_time,",
                "// Line 701:         tags=tags,",
                "// Line 702:         run_name=request_message.run_name,",
                "// vulnerable line: 703: )",
                "// Line 704: ",
                "// Line 705:     response_message = CreateRun.Response()",
                "// Line 706:     response_message.run.MergeFrom(run.to_proto())",
                "// Line 707:     response = Response(mimetype=\"application/json\")",
                "// Line 708:     response.set_data(message_to_json(response_message))",
                "// Line 709:     return response",
                "// Line 710: ",
                "// Line 711: ",
                "// Line 712: @catch_mlflow_exception",
                "// Line 713: @_disable_if_artifacts_only",
                "// Line 714: def _update_run():",
                "// Line 715:     request_message = _get_request_message(",
                "// Line 716:         UpdateRun(),",
                "// Line 717:         schema={",
                "// Line 718:             \"run_id\": [_assert_required, _assert_string],",
                "// Line 719:             \"end_time\": [_assert_intlike],",
                "// Line 720:             \"status\": [_assert_string],",
                "// Line 721:             \"run_name\": [_assert_string],",
                "// Line 722:         },",
                "// vulnerable line: 723: )",
                "// Line 724:     run_id = request_message.run_id or request_message.run_uuid",
                "// Line 725:     run_name = request_message.run_name if request_message.HasField(\"run_name\") else None",
                "// Line 726:     end_time = request_message.end_time if request_message.HasField(\"end_time\") else None",
                "// Line 727:     status = request_message.status if request_message.HasField(\"status\") else None",
                "// Line 728:     updated_info = _get_tracking_store().update_run_info(run_id, status, end_time, run_name)",
                "// Line 729:     response_message = UpdateRun.Response(run_info=updated_info.to_proto())",
                "// Line 730:     response = Response(mimetype=\"application/json\")",
                "// Line 731:     response.set_data(message_to_json(response_message))",
                "// Line 732:     return response",
                "// Line 733: ",
                "// Line 734: ",
                "// Line 735: @catch_mlflow_exception",
                "// Line 736: @_disable_if_artifacts_only",
                "// Line 737: def _delete_run():",
                "// Line 738:     request_message = _get_request_message(",
                "// Line 739:         DeleteRun(), schema={\"run_id\": [_assert_required, _assert_string]}",
                "// vulnerable line: 740: )",
                "// Line 741:     _get_tracking_store().delete_run(request_message.run_id)",
                "// Line 742:     response_message = DeleteRun.Response()",
                "// Line 743:     response = Response(mimetype=\"application/json\")",
                "// Line 744:     response.set_data(message_to_json(response_message))",
                "// Line 745:     return response",
                "// Line 746: ",
                "// Line 747: ",
                "// Line 748: @catch_mlflow_exception",
                "// Line 749: @_disable_if_artifacts_only",
                "// Line 750: def _restore_run():",
                "// Line 751:     request_message = _get_request_message(",
                "// Line 752:         RestoreRun(), schema={\"run_id\": [_assert_required, _assert_string]}",
                "// vulnerable line: 753: )",
                "// Line 754:     _get_tracking_store().restore_run(request_message.run_id)",
                "// Line 755:     response_message = RestoreRun.Response()",
                "// Line 756:     response = Response(mimetype=\"application/json\")",
                "// Line 757:     response.set_data(message_to_json(response_message))",
                "// Line 758:     return response",
                "// Line 759: ",
                "// Line 760: ",
                "// Line 761: @catch_mlflow_exception",
                "// Line 762: @_disable_if_artifacts_only",
                "// Line 763: def _log_metric():",
                "// Line 764:     request_message = _get_request_message(",
                "// Line 765:         LogMetric(),",
                "// Line 766:         schema={",
                "// Line 767:             \"run_id\": [_assert_required, _assert_string],",
                "// Line 768:             \"key\": [_assert_required, _assert_string],",
                "// Line 769:             \"value\": [_assert_required, _assert_floatlike],",
                "// Line 770:             \"timestamp\": [_assert_intlike, _assert_required],",
                "// Line 771:             \"step\": [_assert_intlike],",
                "// Line 772:         },",
                "// vulnerable line: 773: )",
                "// Line 774:     metric = Metric(",
                "// Line 775:         request_message.key, request_message.value, request_message.timestamp, request_message.step",
                "// vulnerable line: 776: )",
                "// Line 777:     run_id = request_message.run_id or request_message.run_uuid",
                "// Line 778:     _get_tracking_store().log_metric(run_id, metric)",
                "// Line 779:     response_message = LogMetric.Response()",
                "// Line 780:     response = Response(mimetype=\"application/json\")",
                "// Line 781:     response.set_data(message_to_json(response_message))",
                "// Line 782:     return response",
                "// Line 783: ",
                "// Line 784: ",
                "// Line 785: @catch_mlflow_exception",
                "// Line 786: @_disable_if_artifacts_only",
                "// Line 787: def _log_param():",
                "// Line 788:     request_message = _get_request_message(",
                "// Line 789:         LogParam(),",
                "// Line 790:         schema={",
                "// Line 791:             \"run_id\": [_assert_required, _assert_string],",
                "// Line 792:             \"key\": [_assert_required, _assert_string],",
                "// Line 793:             \"value\": [_assert_string],",
                "// Line 794:         },",
                "// vulnerable line: 795: )",
                "// Line 796:     param = Param(request_message.key, request_message.value)",
                "// Line 797:     run_id = request_message.run_id or request_message.run_uuid",
                "// Line 798:     _get_tracking_store().log_param(run_id, param)",
                "// Line 799:     response_message = LogParam.Response()",
                "// Line 800:     response = Response(mimetype=\"application/json\")",
                "// Line 801:     response.set_data(message_to_json(response_message))",
                "// Line 802:     return response",
                "// Line 803: ",
                "// Line 804: ",
                "// Line 805: @catch_mlflow_exception",
                "// Line 806: @_disable_if_artifacts_only",
                "// Line 807: def _log_inputs():",
                "// Line 808:     request_message = _get_request_message(",
                "// Line 809:         LogInputs(),",
                "// Line 810:         schema={",
                "// Line 811:             \"run_id\": [_assert_required, _assert_string],",
                "// Line 812:             \"datasets\": [_assert_required, _assert_array],",
                "// Line 813:         },",
                "// vulnerable line: 814: )",
                "// Line 815:     run_id = request_message.run_id",
                "// Line 816:     datasets = [",
                "// Line 817:         DatasetInput.from_proto(proto_dataset_input)",
                "// Line 818:         for proto_dataset_input in request_message.datasets",
                "// Line 819:     ]",
                "// Line 820: ",
                "// Line 821:     _get_tracking_store().log_inputs(run_id, datasets=datasets)",
                "// Line 822:     response_message = LogInputs.Response()",
                "// Line 823:     response = Response(mimetype=\"application/json\")",
                "// Line 824:     response.set_data(message_to_json(response_message))",
                "// Line 828: @catch_mlflow_exception",
                "// Line 829: @_disable_if_artifacts_only",
                "// Line 830: def _set_experiment_tag():",
                "// Line 831:     request_message = _get_request_message(",
                "// Line 832:         SetExperimentTag(),",
                "// Line 833:         schema={",
                "// Line 834:             \"experiment_id\": [_assert_required, _assert_string],",
                "// Line 835:             \"key\": [_assert_required, _assert_string],",
                "// Line 836:             \"value\": [_assert_string],",
                "// Line 837:         },",
                "// vulnerable line: 838: )",
                "// Line 839:     tag = ExperimentTag(request_message.key, request_message.value)",
                "// Line 840:     _get_tracking_store().set_experiment_tag(request_message.experiment_id, tag)",
                "// Line 841:     response_message = SetExperimentTag.Response()",
                "// Line 842:     response = Response(mimetype=\"application/json\")",
                "// Line 843:     response.set_data(message_to_json(response_message))",
                "// Line 844:     return response",
                "// Line 845: ",
                "// Line 846: ",
                "// Line 847: @catch_mlflow_exception",
                "// Line 848: @_disable_if_artifacts_only",
                "// Line 849: def _set_tag():",
                "// Line 850:     request_message = _get_request_message(",
                "// Line 851:         SetTag(),",
                "// Line 852:         schema={",
                "// Line 853:             \"run_id\": [_assert_required, _assert_string],",
                "// Line 854:             \"key\": [_assert_required, _assert_string],",
                "// Line 855:             \"value\": [_assert_string],",
                "// Line 856:         },",
                "// vulnerable line: 857: )",
                "// Line 858:     tag = RunTag(request_message.key, request_message.value)",
                "// Line 859:     run_id = request_message.run_id or request_message.run_uuid",
                "// Line 860:     _get_tracking_store().set_tag(run_id, tag)",
                "// Line 861:     response_message = SetTag.Response()",
                "// Line 862:     response = Response(mimetype=\"application/json\")",
                "// Line 863:     response.set_data(message_to_json(response_message))",
                "// Line 864:     return response",
                "// Line 865: ",
                "// Line 866: ",
                "// Line 867: @catch_mlflow_exception",
                "// Line 868: @_disable_if_artifacts_only",
                "// Line 869: def _delete_tag():",
                "// Line 870:     request_message = _get_request_message(",
                "// Line 871:         DeleteTag(),",
                "// Line 872:         schema={",
                "// Line 873:             \"run_id\": [_assert_required, _assert_string],",
                "// Line 874:             \"key\": [_assert_required, _assert_string],",
                "// Line 875:         },",
                "// vulnerable line: 876: )",
                "// Line 877:     _get_tracking_store().delete_tag(request_message.run_id, request_message.key)",
                "// Line 878:     response_message = DeleteTag.Response()",
                "// Line 879:     response = Response(mimetype=\"application/json\")",
                "// Line 880:     response.set_data(message_to_json(response_message))",
                "// Line 881:     return response",
                "// Line 882: ",
                "// Line 883: ",
                "// Line 884: @catch_mlflow_exception",
                "// Line 885: @_disable_if_artifacts_only",
                "// Line 886: def _get_run():",
                "// Line 887:     request_message = _get_request_message(",
                "// Line 888:         GetRun(), schema={\"run_id\": [_assert_required, _assert_string]}",
                "// vulnerable line: 889: )",
                "// Line 890:     response_message = GetRun.Response()",
                "// Line 891:     run_id = request_message.run_id or request_message.run_uuid",
                "// Line 892:     response_message.run.MergeFrom(_get_tracking_store().get_run(run_id).to_proto())",
                "// Line 893:     response = Response(mimetype=\"application/json\")",
                "// Line 894:     response.set_data(message_to_json(response_message))",
                "// Line 895:     return response",
                "// Line 896: ",
                "// Line 897: ",
                "// Line 898: @catch_mlflow_exception",
                "// Line 899: @_disable_if_artifacts_only",
                "// Line 900: def _search_runs():",
                "// Line 901:     request_message = _get_request_message(",
                "// Line 902:         SearchRuns(),",
                "// Line 903:         schema={",
                "// Line 904:             \"experiment_ids\": [_assert_array],",
                "// Line 905:             \"filter\": [_assert_string],",
                "// Line 906:             \"max_results\": [_assert_intlike, lambda x: _assert_less_than_or_equal(x, 50000)],",
                "// Line 907:             \"order_by\": [_assert_array, _assert_item_type_string],",
                "// Line 908:         },",
                "// vulnerable line: 909: )",
                "// Line 910:     response_message = SearchRuns.Response()",
                "// Line 911:     run_view_type = ViewType.ACTIVE_ONLY",
                "// Line 912:     if request_message.HasField(\"run_view_type\"):",
                "// Line 913:         run_view_type = ViewType.from_proto(request_message.run_view_type)",
                "// Line 914:     filter_string = request_message.filter",
                "// Line 915:     max_results = request_message.max_results",
                "// Line 916:     experiment_ids = request_message.experiment_ids",
                "// Line 917:     order_by = request_message.order_by",
                "// Line 918:     page_token = request_message.page_token",
                "// Line 919:     run_entities = _get_tracking_store().search_runs(",
                "// Line 920:         experiment_ids, filter_string, run_view_type, max_results, order_by, page_token",
                "// vulnerable line: 921: )",
                "// Line 922:     response_message.runs.extend([r.to_proto() for r in run_entities])",
                "// Line 923:     if run_entities.token:",
                "// Line 924:         response_message.next_page_token = run_entities.token",
                "// Line 925:     response = Response(mimetype=\"application/json\")",
                "// Line 926:     response.set_data(message_to_json(response_message))",
                "// Line 927:     return response",
                "// Line 928: ",
                "// Line 929: ",
                "// Line 930: @catch_mlflow_exception",
                "// Line 931: @_disable_if_artifacts_only",
                "// Line 932: def _list_artifacts():",
                "// Line 933:     request_message = _get_request_message(",
                "// Line 934:         ListArtifacts(),",
                "// Line 935:         schema={",
                "// Line 936:             \"run_id\": [_assert_string, _assert_required],",
                "// Line 937:             \"path\": [_assert_string],",
                "// Line 938:             \"page_token\": [_assert_string],",
                "// Line 939:         },",
                "// vulnerable line: 940: )",
                "// Line 941:     response_message = ListArtifacts.Response()",
                "// Line 942:     if request_message.HasField(\"path\"):",
                "// Line 943:         path = request_message.path",
                "// Line 944:         path = validate_path_is_safe(path)",
                "// Line 945:     else:",
                "// Line 946:         path = None",
                "// Line 947:     run_id = request_message.run_id or request_message.run_uuid",
                "// Line 948:     run = _get_tracking_store().get_run(run_id)",
                "// Line 949: ",
                "// Line 950:     if _is_servable_proxied_run_artifact_root(run.info.artifact_uri):",
                "// Line 951:         artifact_entities = _list_artifacts_for_proxied_run_artifact_root(",
                "// Line 952:             proxied_artifact_root=run.info.artifact_uri,",
                "// Line 953:             relative_path=path,",
                "// vulnerable line: 954: )",
                "// Line 955:     else:",
                "// Line 956:         artifact_entities = _get_artifact_repo(run).list_artifacts(path)",
                "// Line 957: ",
                "// Line 958:     response_message.files.extend([a.to_proto() for a in artifact_entities])",
                "// Line 959:     response_message.root_uri = run.info.artifact_uri",
                "// Line 960:     response = Response(mimetype=\"application/json\")",
                "// Line 961:     response.set_data(message_to_json(response_message))",
                "// Line 962:     return response",
                "// Line 963: ",
                "// Line 964: ",
                "// Line 975:                           which to list artifact contents. If ``None``, artifacts are listed from",
                "// Line 976:                           the ``proxied_artifact_root`` directory.",
                "// Line 977:     \"\"\"",
                "// Line 978:     parsed_proxied_artifact_root = urllib.parse.urlparse(proxied_artifact_root)",
                "// Line 979:     assert parsed_proxied_artifact_root.scheme in [\"http\", \"https\", \"mlflow-artifacts\"]",
                "// Line 980: ",
                "// Line 981:     artifact_destination_repo = _get_artifact_repo_mlflow_artifacts()",
                "// Line 982:     artifact_destination_path = _get_proxied_run_artifact_destination_path(",
                "// Line 983:         proxied_artifact_root=proxied_artifact_root,",
                "// Line 984:         relative_path=relative_path,",
                "// vulnerable line: 985: )",
                "// Line 986: ",
                "// Line 987:     artifact_entities = []",
                "// Line 988:     for file_info in artifact_destination_repo.list_artifacts(artifact_destination_path):",
                "// Line 989:         basename = posixpath.basename(file_info.path)",
                "// Line 990:         run_relative_artifact_path = (",
                "// Line 991:             posixpath.join(relative_path, basename) if relative_path else basename",
                "// vulnerable line: 992: )",
                "// Line 993:         artifact_entities.append(",
                "// Line 994:             FileInfo(run_relative_artifact_path, file_info.is_dir, file_info.file_size)",
                "// vulnerable line: 995: )",
                "// Line 996: ",
                "// Line 997:     return artifact_entities",
                "// Line 998: ",
                "// Line 999: ",
                "// Line 1000: @catch_mlflow_exception",
                "// Line 1001: @_disable_if_artifacts_only",
                "// Line 1002: def _get_metric_history():",
                "// Line 1003:     request_message = _get_request_message(",
                "// Line 1004:         GetMetricHistory(),",
                "// Line 1005:         schema={",
                "// Line 1006:             \"run_id\": [_assert_string, _assert_required],",
                "// Line 1007:             \"metric_key\": [_assert_string, _assert_required],",
                "// Line 1008:         },",
                "// vulnerable line: 1009: )",
                "// Line 1010:     response_message = GetMetricHistory.Response()",
                "// Line 1011:     run_id = request_message.run_id or request_message.run_uuid",
                "// Line 1012:     metric_entities = _get_tracking_store().get_metric_history(run_id, request_message.metric_key)",
                "// Line 1013:     response_message.metrics.extend([m.to_proto() for m in metric_entities])",
                "// Line 1014:     response = Response(mimetype=\"application/json\")",
                "// Line 1015:     response.set_data(message_to_json(response_message))",
                "// Line 1016:     return response",
                "// Line 1017: ",
                "// Line 1018: ",
                "// Line 1019: @catch_mlflow_exception",
                "// Line 1020: @_disable_if_artifacts_only",
                "// Line 1021: def get_metric_history_bulk_handler():",
                "// Line 1022:     MAX_HISTORY_RESULTS = 25000",
                "// Line 1023:     MAX_RUN_IDS_PER_REQUEST = 20",
                "// Line 1024:     run_ids = request.args.to_dict(flat=False).get(\"run_id\", [])",
                "// Line 1025:     if not run_ids:",
                "// vulnerable line: 1026: raise MlflowException(",
                "// Line 1027:             message=\"GetMetricHistoryBulk request must specify at least one run_id.\",",
                "// Line 1028:             error_code=INVALID_PARAMETER_VALUE,",
                "// vulnerable line: 1029: )",
                "// Line 1030:     if len(run_ids) > MAX_RUN_IDS_PER_REQUEST:",
                "// vulnerable line: 1031: raise MlflowException(",
                "// Line 1032:             message=(",
                "// Line 1033:                 f\"GetMetricHistoryBulk request cannot specify more than {MAX_RUN_IDS_PER_REQUEST}\"",
                "// Line 1034:                 f\" run_ids. Received {len(run_ids)} run_ids.\"",
                "// Line 1035:             ),",
                "// Line 1036:             error_code=INVALID_PARAMETER_VALUE,",
                "// vulnerable line: 1037: )",
                "// Line 1038: ",
                "// Line 1039:     metric_key = request.args.get(\"metric_key\")",
                "// Line 1040:     if metric_key is None:",
                "// vulnerable line: 1041: raise MlflowException(",
                "// Line 1042:             message=\"GetMetricHistoryBulk request must specify a metric_key.\",",
                "// Line 1043:             error_code=INVALID_PARAMETER_VALUE,",
                "// vulnerable line: 1044: )",
                "// Line 1045: ",
                "// Line 1046:     max_results = int(request.args.get(\"max_results\", MAX_HISTORY_RESULTS))",
                "// Line 1047:     max_results = min(max_results, MAX_HISTORY_RESULTS)",
                "// Line 1048: ",
                "// Line 1049:     store = _get_tracking_store()",
                "// Line 1050: ",
                "// Line 1051:     def _default_history_bulk_impl():",
                "// Line 1052:         metrics_with_run_ids = []",
                "// Line 1053:         for run_id in sorted(run_ids):",
                "// Line 1054:             metrics_for_run = sorted(",
                "// Line 1055:                 store.get_metric_history(",
                "// Line 1056:                     run_id=run_id,",
                "// Line 1057:                     metric_key=metric_key,",
                "// Line 1058:                     max_results=max_results,",
                "// Line 1059:                 ),",
                "// Line 1060:                 key=lambda metric: (metric.timestamp, metric.step, metric.value),",
                "// vulnerable line: 1061: )",
                "// Line 1062:             metrics_with_run_ids.extend(",
                "// Line 1063:                 [",
                "// Line 1064:                     {",
                "// Line 1065:                         \"key\": metric.key,",
                "// Line 1066:                         \"value\": metric.value,",
                "// Line 1067:                         \"timestamp\": metric.timestamp,",
                "// Line 1068:                         \"step\": metric.step,",
                "// Line 1069:                         \"run_id\": run_id,",
                "// Line 1070:                     }",
                "// Line 1071:                     for metric in metrics_for_run",
                "// Line 1072:                 ]",
                "// vulnerable line: 1073: )",
                "// Line 1074:         return metrics_with_run_ids",
                "// Line 1075: ",
                "// Line 1076:     if hasattr(store, \"get_metric_history_bulk\"):",
                "// Line 1077:         metrics_with_run_ids = [",
                "// Line 1078:             metric.to_dict()",
                "// Line 1079:             for metric in store.get_metric_history_bulk(",
                "// Line 1080:                 run_ids=run_ids,",
                "// Line 1081:                 metric_key=metric_key,",
                "// Line 1082:                 max_results=max_results,",
                "// vulnerable line: 1083: )",
                "// Line 1084:         ]",
                "// Line 1085:     else:",
                "// Line 1086:         metrics_with_run_ids = _default_history_bulk_impl()",
                "// Line 1087: ",
                "// Line 1088:     return {",
                "// Line 1089:         \"metrics\": metrics_with_run_ids[:max_results],",
                "// Line 1090:     }",
                "// Line 1091: ",
                "// Line 1092: ",
                "// Line 1093: @catch_mlflow_exception",
                "// Line 1094: @_disable_if_artifacts_only",
                "// Line 1095: def search_datasets_handler():",
                "// Line 1096:     MAX_EXPERIMENT_IDS_PER_REQUEST = 20",
                "// Line 1097:     _validate_content_type(request, [\"application/json\"])",
                "// Line 1098:     experiment_ids = request.json.get(\"experiment_ids\", [])",
                "// Line 1099:     if not experiment_ids:",
                "// vulnerable line: 1100: raise MlflowException(",
                "// Line 1101:             message=\"SearchDatasets request must specify at least one experiment_id.\",",
                "// Line 1102:             error_code=INVALID_PARAMETER_VALUE,",
                "// vulnerable line: 1103: )",
                "// Line 1104:     if len(experiment_ids) > MAX_EXPERIMENT_IDS_PER_REQUEST:",
                "// vulnerable line: 1105: raise MlflowException(",
                "// Line 1106:             message=(",
                "// Line 1107:                 f\"SearchDatasets request cannot specify more than {MAX_EXPERIMENT_IDS_PER_REQUEST}\"",
                "// Line 1108:                 f\" experiment_ids. Received {len(experiment_ids)} experiment_ids.\"",
                "// Line 1109:             ),",
                "// Line 1110:             error_code=INVALID_PARAMETER_VALUE,",
                "// vulnerable line: 1111: )",
                "// Line 1112: ",
                "// Line 1113:     store = _get_tracking_store()",
                "// Line 1114: ",
                "// Line 1115:     if hasattr(store, \"_search_datasets\"):",
                "// Line 1116:         return {",
                "// Line 1117:             \"dataset_summaries\": [",
                "// Line 1118:                 summary.to_dict() for summary in store._search_datasets(experiment_ids)",
                "// Line 1119:             ]",
                "// Line 1120:         }",
                "// Line 1121:     else:",
                "// Line 1126: def gateway_proxy_handler():",
                "// Line 1127:     target_uri = MLFLOW_DEPLOYMENTS_TARGET.get()",
                "// Line 1128:     if not target_uri:",
                "// Line 1129:         # Pretend an empty gateway service is running",
                "// Line 1130:         return {\"endpoints\": []}",
                "// Line 1131: ",
                "// Line 1132:     args = request.args if request.method == \"GET\" else request.json",
                "// Line 1133: ",
                "// Line 1134:     gateway_path = args.get(\"gateway_path\")",
                "// Line 1135:     if not gateway_path:",
                "// vulnerable line: 1136: raise MlflowException(",
                "// Line 1137:             message=\"Deployments proxy request must specify a gateway_path.\",",
                "// Line 1138:             error_code=INVALID_PARAMETER_VALUE,",
                "// vulnerable line: 1139: )",
                "// Line 1140:     request_type = request.method",
                "// Line 1141:     json_data = args.get(\"json_data\", None)",
                "// Line 1142: ",
                "// Line 1143:     response = requests.request(request_type, f\"{target_uri}/{gateway_path}\", json=json_data)",
                "// Line 1144: ",
                "// Line 1145:     if response.status_code == 200:",
                "// Line 1146:         return response.json()",
                "// Line 1147:     else:",
                "// vulnerable line: 1148: raise MlflowException(",
                "// Line 1149:             message=f\"Deployments proxy request failed with error code {response.status_code}. \"",
                "// Line 1150:             f\"Error message: {response.text}\",",
                "// Line 1151:             error_code=response.status_code,",
                "// vulnerable line: 1152: )",
                "// Line 1153: ",
                "// Line 1154: ",
                "// Line 1155: @catch_mlflow_exception",
                "// Line 1156: @_disable_if_artifacts_only",
                "// Line 1157: def create_promptlab_run_handler():",
                "// Line 1158:     def assert_arg_exists(arg_name, arg):",
                "// Line 1159:         if not arg:",
                "// vulnerable line: 1160: raise MlflowException(",
                "// Line 1161:                 message=f\"CreatePromptlabRun request must specify {arg_name}.\",",
                "// Line 1162:                 error_code=INVALID_PARAMETER_VALUE,",
                "// vulnerable line: 1163: )",
                "// Line 1164: ",
                "// Line 1165:     _validate_content_type(request, [\"application/json\"])",
                "// Line 1166: ",
                "// Line 1167:     args = request.json",
                "// Line 1168:     experiment_id = args.get(\"experiment_id\")",
                "// Line 1169:     assert_arg_exists(\"experiment_id\", experiment_id)",
                "// Line 1170:     run_name = args.get(\"run_name\", None)",
                "// Line 1171:     tags = args.get(\"tags\", [])",
                "// Line 1172:     prompt_template = args.get(\"prompt_template\")",
                "// Line 1173:     assert_arg_exists(\"prompt_template\", prompt_template)",
                "// Line 1206:         prompt_template=prompt_template,",
                "// Line 1207:         prompt_parameters=prompt_parameters,",
                "// Line 1208:         model_route=model_route,",
                "// Line 1209:         model_parameters=model_parameters,",
                "// Line 1210:         model_input=model_input,",
                "// Line 1211:         model_output=model_output,",
                "// Line 1212:         model_output_parameters=model_output_parameters,",
                "// Line 1213:         mlflow_version=mlflow_version,",
                "// Line 1214:         user_id=user_id,",
                "// Line 1215:         start_time=start_time,",
                "// vulnerable line: 1216: )",
                "// Line 1217:     response_message = CreateRun.Response()",
                "// Line 1218:     response_message.run.MergeFrom(run.to_proto())",
                "// Line 1219:     response = Response(mimetype=\"application/json\")",
                "// Line 1220:     response.set_data(message_to_json(response_message))",
                "// Line 1221:     return response",
                "// Line 1222: ",
                "// Line 1223: ",
                "// Line 1224: @catch_mlflow_exception",
                "// Line 1225: def upload_artifact_handler():",
                "// Line 1226:     args = request.args",
                "// Line 1227:     run_uuid = args.get(\"run_uuid\")",
                "// Line 1228:     if not run_uuid:",
                "// vulnerable line: 1229: raise MlflowException(",
                "// Line 1230:             message=\"Request must specify run_uuid.\",",
                "// Line 1231:             error_code=INVALID_PARAMETER_VALUE,",
                "// vulnerable line: 1232: )",
                "// Line 1233:     path = args.get(\"path\")",
                "// Line 1234:     if not path:",
                "// vulnerable line: 1235: raise MlflowException(",
                "// Line 1236:             message=\"Request must specify path.\",",
                "// Line 1237:             error_code=INVALID_PARAMETER_VALUE,",
                "// vulnerable line: 1238: )",
                "// Line 1239:     path = validate_path_is_safe(path)",
                "// Line 1240: ",
                "// Line 1241:     if request.content_length and request.content_length > 10 * 1024 * 1024:",
                "// vulnerable line: 1242: raise MlflowException(",
                "// Line 1243:             message=\"Artifact size is too large. Max size is 10MB.\",",
                "// Line 1244:             error_code=INVALID_PARAMETER_VALUE,",
                "// vulnerable line: 1245: )",
                "// Line 1246: ",
                "// Line 1247:     data = request.data",
                "// Line 1248:     if not data:",
                "// vulnerable line: 1249: raise MlflowException(",
                "// Line 1250:             message=\"Request must specify data.\",",
                "// Line 1251:             error_code=INVALID_PARAMETER_VALUE,",
                "// vulnerable line: 1252: )",
                "// Line 1253: ",
                "// Line 1254:     run = _get_tracking_store().get_run(run_uuid)",
                "// Line 1255:     artifact_dir = run.info.artifact_uri",
                "// Line 1256: ",
                "// Line 1257:     basename = posixpath.basename(path)",
                "// Line 1258:     dirname = posixpath.dirname(path)",
                "// Line 1259: ",
                "// Line 1260:     def _log_artifact_to_repo(file, run, dirname, artifact_dir):",
                "// Line 1261:         if _is_servable_proxied_run_artifact_root(run.info.artifact_uri):",
                "// Line 1262:             artifact_repo = _get_artifact_repo_mlflow_artifacts()",
                "// Line 1263:             path_to_log = (",
                "// Line 1264:                 os.path.join(run.info.experiment_id, run.info.run_id, \"artifacts\", dirname)",
                "// Line 1265:                 if dirname",
                "// Line 1266:                 else os.path.join(run.info.experiment_id, run.info.run_id, \"artifacts\")",
                "// vulnerable line: 1267: )",
                "// Line 1268:         else:",
                "// Line 1269:             artifact_repo = get_artifact_repository(artifact_dir)",
                "// Line 1270:             path_to_log = dirname",
                "// Line 1271: ",
                "// Line 1272:         artifact_repo.log_artifact(file, path_to_log)",
                "// Line 1273: ",
                "// Line 1274:     with tempfile.TemporaryDirectory() as tmpdir:",
                "// Line 1275:         dir_path = os.path.join(tmpdir, dirname) if dirname else tmpdir",
                "// Line 1276:         file_path = os.path.join(dir_path, basename)",
                "// Line 1277: ",
                "// Line 1290: def _search_experiments():",
                "// Line 1291:     request_message = _get_request_message(",
                "// Line 1292:         SearchExperiments(),",
                "// Line 1293:         schema={",
                "// Line 1294:             \"view_type\": [_assert_intlike],",
                "// Line 1295:             \"max_results\": [_assert_intlike],",
                "// Line 1296:             \"order_by\": [_assert_array],",
                "// Line 1297:             \"filter\": [_assert_string],",
                "// Line 1298:             \"page_token\": [_assert_string],",
                "// Line 1299:         },",
                "// vulnerable line: 1300: )",
                "// Line 1301:     experiment_entities = _get_tracking_store().search_experiments(",
                "// Line 1302:         view_type=request_message.view_type,",
                "// Line 1303:         max_results=request_message.max_results,",
                "// Line 1304:         order_by=request_message.order_by,",
                "// Line 1305:         filter_string=request_message.filter,",
                "// Line 1306:         page_token=request_message.page_token,",
                "// vulnerable line: 1307: )",
                "// Line 1308:     response_message = SearchExperiments.Response()",
                "// Line 1309:     response_message.experiments.extend([e.to_proto() for e in experiment_entities])",
                "// Line 1310:     if experiment_entities.token:",
                "// Line 1311:         response_message.next_page_token = experiment_entities.token",
                "// Line 1312:     response = Response(mimetype=\"application/json\")",
                "// Line 1313:     response.set_data(message_to_json(response_message))",
                "// Line 1314:     return response",
                "// Line 1315: ",
                "// Line 1316: ",
                "// Line 1317: @catch_mlflow_exception",
                "// Line 1334: ",
                "// Line 1335:     _validate_batch_log_api_req(_get_request_json())",
                "// Line 1336:     request_message = _get_request_message(",
                "// Line 1337:         LogBatch(),",
                "// Line 1338:         schema={",
                "// Line 1339:             \"run_id\": [_assert_string, _assert_required],",
                "// Line 1340:             \"metrics\": [_assert_array, _assert_metrics_fields_present],",
                "// Line 1341:             \"params\": [_assert_array, _assert_params_tags_fields_present],",
                "// Line 1342:             \"tags\": [_assert_array, _assert_params_tags_fields_present],",
                "// Line 1343:         },",
                "// vulnerable line: 1344: )",
                "// Line 1345:     metrics = [Metric.from_proto(proto_metric) for proto_metric in request_message.metrics]",
                "// Line 1346:     params = [Param.from_proto(proto_param) for proto_param in request_message.params]",
                "// Line 1347:     tags = [RunTag.from_proto(proto_tag) for proto_tag in request_message.tags]",
                "// Line 1348:     _get_tracking_store().log_batch(",
                "// Line 1349:         run_id=request_message.run_id, metrics=metrics, params=params, tags=tags",
                "// vulnerable line: 1350: )",
                "// Line 1351:     response_message = LogBatch.Response()",
                "// Line 1352:     response = Response(mimetype=\"application/json\")",
                "// Line 1353:     response.set_data(message_to_json(response_message))",
                "// Line 1354:     return response",
                "// Line 1355: ",
                "// Line 1356: ",
                "// Line 1357: @catch_mlflow_exception",
                "// Line 1358: @_disable_if_artifacts_only",
                "// Line 1359: def _log_model():",
                "// Line 1360:     request_message = _get_request_message(",
                "// Line 1361:         LogModel(),",
                "// Line 1362:         schema={",
                "// Line 1363:             \"run_id\": [_assert_string, _assert_required],",
                "// Line 1364:             \"model_json\": [_assert_string, _assert_required],",
                "// Line 1365:         },",
                "// vulnerable line: 1366: )",
                "// Line 1367:     try:",
                "// Line 1368:         model = json.loads(request_message.model_json)",
                "// Line 1369:     except Exception:",
                "// vulnerable line: 1370: raise MlflowException(",
                "// Line 1371:             f\"Malformed model info. ",
                "// Line 1372:  {request_message.model_json} ",
                "// Line 1373:  is not a valid JSON.\",",
                "// Line 1374:             error_code=INVALID_PARAMETER_VALUE,",
                "// vulnerable line: 1375: )",
                "// Line 1376: ",
                "// Line 1377:     missing_fields = {\"artifact_path\", \"flavors\", \"utc_time_created\", \"run_id\"} - set(model.keys())",
                "// Line 1378: ",
                "// Line 1379:     if missing_fields:",
                "// vulnerable line: 1380: raise MlflowException(",
                "// Line 1381:             f\"Model json is missing mandatory fields: {missing_fields}\",",
                "// Line 1382:             error_code=INVALID_PARAMETER_VALUE,",
                "// vulnerable line: 1383: )",
                "// Line 1384:     _get_tracking_store().record_logged_model(",
                "// Line 1385:         run_id=request_message.run_id, mlflow_model=Model.from_dict(model)",
                "// vulnerable line: 1386: )",
                "// Line 1387:     response_message = LogModel.Response()",
                "// Line 1388:     response = Response(mimetype=\"application/json\")",
                "// Line 1389:     response.set_data(message_to_json(response_message))",
                "// Line 1390:     return response",
                "// Line 1391: ",
                "// Line 1392: ",
                "// Line 1393: def _wrap_response(response_message):",
                "// Line 1394:     response = Response(mimetype=\"application/json\")",
                "// Line 1395:     response.set_data(message_to_json(response_message))",
                "// Line 1396:     return response",
                "// Line 1402: @catch_mlflow_exception",
                "// Line 1403: @_disable_if_artifacts_only",
                "// Line 1404: def _create_registered_model():",
                "// Line 1405:     request_message = _get_request_message(",
                "// Line 1406:         CreateRegisteredModel(),",
                "// Line 1407:         schema={",
                "// Line 1408:             \"name\": [_assert_string, _assert_required],",
                "// Line 1409:             \"tags\": [_assert_array],",
                "// Line 1410:             \"description\": [_assert_string],",
                "// Line 1411:         },",
                "// vulnerable line: 1412: )",
                "// Line 1413:     registered_model = _get_model_registry_store().create_registered_model(",
                "// Line 1414:         name=request_message.name,",
                "// Line 1415:         tags=request_message.tags,",
                "// Line 1416:         description=request_message.description,",
                "// vulnerable line: 1417: )",
                "// Line 1418:     response_message = CreateRegisteredModel.Response(registered_model=registered_model.to_proto())",
                "// Line 1419:     return _wrap_response(response_message)",
                "// Line 1420: ",
                "// Line 1421: ",
                "// Line 1422: @catch_mlflow_exception",
                "// Line 1423: @_disable_if_artifacts_only",
                "// Line 1424: def _get_registered_model():",
                "// Line 1425:     request_message = _get_request_message(",
                "// Line 1426:         GetRegisteredModel(), schema={\"name\": [_assert_string, _assert_required]}",
                "// vulnerable line: 1427: )",
                "// Line 1428:     registered_model = _get_model_registry_store().get_registered_model(name=request_message.name)",
                "// Line 1429:     response_message = GetRegisteredModel.Response(registered_model=registered_model.to_proto())",
                "// Line 1430:     return _wrap_response(response_message)",
                "// Line 1431: ",
                "// Line 1432: ",
                "// Line 1433: @catch_mlflow_exception",
                "// Line 1434: @_disable_if_artifacts_only",
                "// Line 1435: def _update_registered_model():",
                "// Line 1436:     request_message = _get_request_message(",
                "// Line 1437:         UpdateRegisteredModel(),",
                "// Line 1438:         schema={\"name\": [_assert_string, _assert_required], \"description\": [_assert_string]},",
                "// vulnerable line: 1439: )",
                "// Line 1440:     name = request_message.name",
                "// Line 1441:     new_description = request_message.description",
                "// Line 1442:     registered_model = _get_model_registry_store().update_registered_model(",
                "// Line 1443:         name=name, description=new_description",
                "// vulnerable line: 1444: )",
                "// Line 1445:     response_message = UpdateRegisteredModel.Response(registered_model=registered_model.to_proto())",
                "// Line 1446:     return _wrap_response(response_message)",
                "// Line 1447: ",
                "// Line 1448: ",
                "// Line 1449: @catch_mlflow_exception",
                "// Line 1450: @_disable_if_artifacts_only",
                "// Line 1451: def _rename_registered_model():",
                "// Line 1452:     request_message = _get_request_message(",
                "// Line 1453:         RenameRegisteredModel(),",
                "// Line 1454:         schema={",
                "// Line 1455:             \"name\": [_assert_string, _assert_required],",
                "// Line 1456:             \"new_name\": [_assert_string, _assert_required],",
                "// Line 1457:         },",
                "// vulnerable line: 1458: )",
                "// Line 1459:     name = request_message.name",
                "// Line 1460:     new_name = request_message.new_name",
                "// Line 1461:     registered_model = _get_model_registry_store().rename_registered_model(",
                "// Line 1462:         name=name, new_name=new_name",
                "// vulnerable line: 1463: )",
                "// Line 1464:     response_message = RenameRegisteredModel.Response(registered_model=registered_model.to_proto())",
                "// Line 1465:     return _wrap_response(response_message)",
                "// Line 1466: ",
                "// Line 1467: ",
                "// Line 1468: @catch_mlflow_exception",
                "// Line 1469: @_disable_if_artifacts_only",
                "// Line 1470: def _delete_registered_model():",
                "// Line 1471:     request_message = _get_request_message(",
                "// Line 1472:         DeleteRegisteredModel(), schema={\"name\": [_assert_string, _assert_required]}",
                "// vulnerable line: 1473: )",
                "// Line 1474:     _get_model_registry_store().delete_registered_model(name=request_message.name)",
                "// Line 1475:     return _wrap_response(DeleteRegisteredModel.Response())",
                "// Line 1476: ",
                "// Line 1477: ",
                "// Line 1478: @catch_mlflow_exception",
                "// Line 1479: @_disable_if_artifacts_only",
                "// Line 1480: def _search_registered_models():",
                "// Line 1481:     request_message = _get_request_message(",
                "// Line 1482:         SearchRegisteredModels(),",
                "// Line 1483:         schema={",
                "// Line 1484:             \"filter\": [_assert_string],",
                "// Line 1485:             \"max_results\": [_assert_intlike, lambda x: _assert_less_than_or_equal(x, 1000)],",
                "// Line 1486:             \"order_by\": [_assert_array, _assert_item_type_string],",
                "// Line 1487:             \"page_token\": [_assert_string],",
                "// Line 1488:         },",
                "// vulnerable line: 1489: )",
                "// Line 1490:     store = _get_model_registry_store()",
                "// Line 1491:     registered_models = store.search_registered_models(",
                "// Line 1492:         filter_string=request_message.filter,",
                "// Line 1493:         max_results=request_message.max_results,",
                "// Line 1494:         order_by=request_message.order_by,",
                "// Line 1495:         page_token=request_message.page_token,",
                "// vulnerable line: 1496: )",
                "// Line 1497:     response_message = SearchRegisteredModels.Response()",
                "// Line 1498:     response_message.registered_models.extend([e.to_proto() for e in registered_models])",
                "// Line 1499:     if registered_models.token:",
                "// Line 1500:         response_message.next_page_token = registered_models.token",
                "// Line 1501:     return _wrap_response(response_message)",
                "// Line 1502: ",
                "// Line 1503: ",
                "// Line 1504: @catch_mlflow_exception",
                "// Line 1505: @_disable_if_artifacts_only",
                "// Line 1506: def _get_latest_versions():",
                "// Line 1507:     request_message = _get_request_message(",
                "// Line 1508:         GetLatestVersions(),",
                "// Line 1509:         schema={",
                "// Line 1510:             \"name\": [_assert_string, _assert_required],",
                "// Line 1511:             \"stages\": [_assert_array, _assert_item_type_string],",
                "// Line 1512:         },",
                "// vulnerable line: 1513: )",
                "// Line 1514:     latest_versions = _get_model_registry_store().get_latest_versions(",
                "// Line 1515:         name=request_message.name, stages=request_message.stages",
                "// vulnerable line: 1516: )",
                "// Line 1517:     response_message = GetLatestVersions.Response()",
                "// Line 1518:     response_message.model_versions.extend([e.to_proto() for e in latest_versions])",
                "// Line 1519:     return _wrap_response(response_message)",
                "// Line 1520: ",
                "// Line 1521: ",
                "// Line 1522: @catch_mlflow_exception",
                "// Line 1523: @_disable_if_artifacts_only",
                "// Line 1524: def _set_registered_model_tag():",
                "// Line 1525:     request_message = _get_request_message(",
                "// Line 1526:         SetRegisteredModelTag(),",
                "// Line 1527:         schema={",
                "// Line 1528:             \"name\": [_assert_string, _assert_required],",
                "// Line 1529:             \"key\": [_assert_string, _assert_required],",
                "// Line 1530:             \"value\": [_assert_string],",
                "// Line 1531:         },",
                "// vulnerable line: 1532: )",
                "// Line 1533:     tag = RegisteredModelTag(key=request_message.key, value=request_message.value)",
                "// Line 1534:     _get_model_registry_store().set_registered_model_tag(name=request_message.name, tag=tag)",
                "// Line 1535:     return _wrap_response(SetRegisteredModelTag.Response())",
                "// Line 1536: ",
                "// Line 1537: ",
                "// Line 1538: @catch_mlflow_exception",
                "// Line 1539: @_disable_if_artifacts_only",
                "// Line 1540: def _delete_registered_model_tag():",
                "// Line 1541:     request_message = _get_request_message(",
                "// Line 1542:         DeleteRegisteredModelTag(),",
                "// Line 1543:         schema={",
                "// Line 1544:             \"name\": [_assert_string, _assert_required],",
                "// Line 1545:             \"key\": [_assert_string, _assert_required],",
                "// Line 1546:         },",
                "// vulnerable line: 1547: )",
                "// Line 1548:     _get_model_registry_store().delete_registered_model_tag(",
                "// Line 1549:         name=request_message.name, key=request_message.key",
                "// vulnerable line: 1550: )",
                "// Line 1551:     return _wrap_response(DeleteRegisteredModelTag.Response())",
                "// Line 1552: ",
                "// Line 1553: ",
                "// Line 1554: def _validate_non_local_source_contains_relative_paths(source: str):",
                "// Line 1555:     \"\"\"",
                "// Line 1556:     Validation check to ensure that sources that are provided that conform to the schemes:",
                "// Line 1557:     http, https, or mlflow-artifacts do not contain relative path designations that are intended",
                "// Line 1558:     to access local file system paths on the tracking server.",
                "// Line 1559: ",
                "// Line 1560:     Example paths that this validation function is intended to find and raise an Exception if",
                "// Line 1566:     \"s3:/my_bucket/models/path/../../other/path\"",
                "// Line 1567:     \"file://path/to/../../../../some/where/you/should/not/be\"",
                "// Line 1568:     \"mlflow-artifacts://host:port/..%2f..%2f..%2f..%2f\"",
                "// Line 1569:     \"http://host:port/api/2.0/mlflow-artifacts/artifacts%00\"",
                "// Line 1570:     \"\"\"",
                "// Line 1571:     invalid_source_error_message = (",
                "// Line 1572:         f\"Invalid model version source: '{source}'. If supplying a source as an http, https, \"",
                "// Line 1573:         \"local file path, ftp, objectstore, or mlflow-artifacts uri, an absolute path must be \"",
                "// Line 1574:         \"provided without relative path references present. \"",
                "// Line 1575:         \"Please provide an absolute path.\"",
                "// vulnerable line: 1576: )",
                "// Line 1577: ",
                "// Line 1578:     while (unquoted := urllib.parse.unquote_plus(source)) != source:",
                "// Line 1579:         source = unquoted",
                "// Line 1580:     source_path = re.sub(r\"/+\", \"/\", urllib.parse.urlparse(source).path.rstrip(\"/\"))",
                "// Line 1581:     if \"\u0000\" in source_path:",
                "// Line 1582:         raise MlflowException(invalid_source_error_message, INVALID_PARAMETER_VALUE)",
                "// Line 1583:     resolved_source = pathlib.Path(source_path).resolve().as_posix()",
                "// Line 1584:     # NB: drive split is specifically for Windows since WindowsPath.resolve() will append the",
                "// Line 1585:     # drive path of the pwd to a given path. We don't care about the drive here, though.",
                "// Line 1586:     _, resolved_path = os.path.splitdrive(resolved_source)",
                "// Line 1592: def _validate_source(source: str, run_id: str) -> None:",
                "// Line 1593:     if is_local_uri(source):",
                "// Line 1594:         if run_id:",
                "// Line 1595:             store = _get_tracking_store()",
                "// Line 1596:             run = store.get_run(run_id)",
                "// Line 1597:             source = pathlib.Path(local_file_uri_to_path(source)).resolve()",
                "// Line 1598:             run_artifact_dir = pathlib.Path(local_file_uri_to_path(run.info.artifact_uri)).resolve()",
                "// Line 1599:             if run_artifact_dir in [source, *source.parents]:",
                "// Line 1600:                 return",
                "// Line 1601: ",
                "// vulnerable line: 1602: raise MlflowException(",
                "// Line 1603:             f\"Invalid model version source: '{source}'. To use a local path as a model version \"",
                "// Line 1604:             \"source, the run_id request parameter has to be specified and the local path has to be \"",
                "// Line 1605:             \"contained within the artifact directory of the run specified by the run_id.\",",
                "// vulnerable line: 1606: INVALID_PARAMETER_VALUE,",
                "// vulnerable line: 1607: )",
                "// Line 1608: ",
                "// vulnerable line: 1609: # There might be file URIs that are local but can bypass the above check. To prevent this, we",
                "// vulnerable line: 1610: # disallow using file URIs as model version sources by default unless it's explicitly allowed",
                "// vulnerable line: 1611: # by setting the MLFLOW_ALLOW_FILE_URI_AS_MODEL_VERSION_SOURCE environment variable to True.",
                "// vulnerable line: 1612: if not MLFLOW_ALLOW_FILE_URI_AS_MODEL_VERSION_SOURCE.get() and is_file_uri(source):",
                "// vulnerable line: 1613: raise MlflowException(",
                "// vulnerable line: 1614: f\"Invalid model version source: '{source}'. MLflow tracking server doesn't allow using \"",
                "// vulnerable line: 1615: \"a file URI as a model version source for security reasons. To disable this check, set \"",
                "// vulnerable line: 1616: f\"the {MLFLOW_ALLOW_FILE_URI_AS_MODEL_VERSION_SOURCE} environment variable to \"",
                "// vulnerable line: 1617: \"True.\",",
                "// vulnerable line: 1618: INVALID_PARAMETER_VALUE,",
                "// vulnerable line: 1619: )",
                "// Line 1620: ",
                "// Line 1621:     # Checks if relative paths are present in the source (a security threat). If any are present,",
                "// Line 1622:     # raises an Exception.",
                "// Line 1623:     _validate_non_local_source_contains_relative_paths(source)",
                "// Line 1624: ",
                "// Line 1625: ",
                "// Line 1626: @catch_mlflow_exception",
                "// Line 1627: @_disable_if_artifacts_only",
                "// Line 1628: def _create_model_version():",
                "// Line 1629:     request_message = _get_request_message(",
                "// Line 1630:         CreateModelVersion(),",
                "// Line 1631:         schema={",
                "// Line 1632:             \"name\": [_assert_string, _assert_required],",
                "// Line 1633:             \"source\": [_assert_string, _assert_required],",
                "// Line 1634:             \"run_id\": [_assert_string],",
                "// Line 1635:             \"tags\": [_assert_array],",
                "// Line 1636:             \"run_link\": [_assert_string],",
                "// Line 1637:             \"description\": [_assert_string],",
                "// Line 1638:         },",
                "// vulnerable line: 1639: )",
                "// Line 1640: ",
                "// Line 1641:     _validate_source(request_message.source, request_message.run_id)",
                "// Line 1642: ",
                "// Line 1643:     model_version = _get_model_registry_store().create_model_version(",
                "// Line 1644:         name=request_message.name,",
                "// Line 1645:         source=request_message.source,",
                "// Line 1646:         run_id=request_message.run_id,",
                "// Line 1647:         run_link=request_message.run_link,",
                "// Line 1648:         tags=request_message.tags,",
                "// Line 1649:         description=request_message.description,",
                "// vulnerable line: 1650: )",
                "// Line 1651:     response_message = CreateModelVersion.Response(model_version=model_version.to_proto())",
                "// Line 1652:     return _wrap_response(response_message)",
                "// Line 1653: ",
                "// Line 1654: ",
                "// Line 1655: @catch_mlflow_exception",
                "// Line 1656: @_disable_if_artifacts_only",
                "// Line 1657: def get_model_version_artifact_handler():",
                "// Line 1658:     from querystring_parser import parser",
                "// Line 1659: ",
                "// Line 1660:     query_string = request.query_string.decode(\"utf-8\")",
                "// Line 1662:     name = request_dict.get(\"name\")",
                "// Line 1663:     version = request_dict.get(\"version\")",
                "// Line 1664:     path = request_dict[\"path\"]",
                "// Line 1665:     path = validate_path_is_safe(path)",
                "// Line 1666:     artifact_uri = _get_model_registry_store().get_model_version_download_uri(name, version)",
                "// Line 1667:     if _is_servable_proxied_run_artifact_root(artifact_uri):",
                "// Line 1668:         artifact_repo = _get_artifact_repo_mlflow_artifacts()",
                "// Line 1669:         artifact_path = _get_proxied_run_artifact_destination_path(",
                "// Line 1670:             proxied_artifact_root=artifact_uri,",
                "// Line 1671:             relative_path=path,",
                "// vulnerable line: 1672: )",
                "// Line 1673:     else:",
                "// Line 1674:         artifact_repo = get_artifact_repository(artifact_uri)",
                "// Line 1675:         artifact_path = path",
                "// Line 1676: ",
                "// Line 1677:     return _send_artifact(artifact_repo, artifact_path)",
                "// Line 1678: ",
                "// Line 1679: ",
                "// Line 1680: @catch_mlflow_exception",
                "// Line 1681: @_disable_if_artifacts_only",
                "// Line 1682: def _get_model_version():",
                "// Line 1683:     request_message = _get_request_message(",
                "// Line 1684:         GetModelVersion(),",
                "// Line 1685:         schema={",
                "// Line 1686:             \"name\": [_assert_string, _assert_required],",
                "// Line 1687:             \"version\": [_assert_string, _assert_required],",
                "// Line 1688:         },",
                "// vulnerable line: 1689: )",
                "// Line 1690:     model_version = _get_model_registry_store().get_model_version(",
                "// Line 1691:         name=request_message.name, version=request_message.version",
                "// vulnerable line: 1692: )",
                "// Line 1693:     response_proto = model_version.to_proto()",
                "// Line 1694:     response_message = GetModelVersion.Response(model_version=response_proto)",
                "// Line 1695:     return _wrap_response(response_message)",
                "// Line 1696: ",
                "// Line 1697: ",
                "// Line 1698: @catch_mlflow_exception",
                "// Line 1699: @_disable_if_artifacts_only",
                "// Line 1700: def _update_model_version():",
                "// Line 1701:     request_message = _get_request_message(",
                "// Line 1702:         UpdateModelVersion(),",
                "// Line 1703:         schema={",
                "// Line 1704:             \"name\": [_assert_string, _assert_required],",
                "// Line 1705:             \"version\": [_assert_string, _assert_required],",
                "// Line 1706:             \"description\": [_assert_string],",
                "// Line 1707:         },",
                "// vulnerable line: 1708: )",
                "// Line 1709:     new_description = None",
                "// Line 1710:     if request_message.HasField(\"description\"):",
                "// Line 1711:         new_description = request_message.description",
                "// Line 1712:     model_version = _get_model_registry_store().update_model_version(",
                "// Line 1713:         name=request_message.name, version=request_message.version, description=new_description",
                "// vulnerable line: 1714: )",
                "// Line 1715:     return _wrap_response(UpdateModelVersion.Response(model_version=model_version.to_proto()))",
                "// Line 1716: ",
                "// Line 1717: ",
                "// Line 1718: @catch_mlflow_exception",
                "// Line 1719: @_disable_if_artifacts_only",
                "// Line 1720: def _transition_stage():",
                "// Line 1721:     request_message = _get_request_message(",
                "// Line 1722:         TransitionModelVersionStage(),",
                "// Line 1723:         schema={",
                "// Line 1724:             \"name\": [_assert_string, _assert_required],",
                "// Line 1725:             \"version\": [_assert_string, _assert_required],",
                "// Line 1726:             \"stage\": [_assert_string, _assert_required],",
                "// Line 1727:             \"archive_existing_versions\": [_assert_bool],",
                "// Line 1728:         },",
                "// vulnerable line: 1729: )",
                "// Line 1730:     model_version = _get_model_registry_store().transition_model_version_stage(",
                "// Line 1731:         name=request_message.name,",
                "// Line 1732:         version=request_message.version,",
                "// Line 1733:         stage=request_message.stage,",
                "// Line 1734:         archive_existing_versions=request_message.archive_existing_versions,",
                "// vulnerable line: 1735: )",
                "// Line 1736:     return _wrap_response(",
                "// Line 1737:         TransitionModelVersionStage.Response(model_version=model_version.to_proto())",
                "// vulnerable line: 1738: )",
                "// Line 1739: ",
                "// Line 1740: ",
                "// Line 1741: @catch_mlflow_exception",
                "// Line 1742: @_disable_if_artifacts_only",
                "// Line 1743: def _delete_model_version():",
                "// Line 1744:     request_message = _get_request_message(",
                "// Line 1745:         DeleteModelVersion(),",
                "// Line 1746:         schema={",
                "// Line 1747:             \"name\": [_assert_string, _assert_required],",
                "// Line 1748:             \"version\": [_assert_string, _assert_required],",
                "// Line 1749:         },",
                "// vulnerable line: 1750: )",
                "// Line 1751:     _get_model_registry_store().delete_model_version(",
                "// Line 1752:         name=request_message.name, version=request_message.version",
                "// vulnerable line: 1753: )",
                "// Line 1754:     return _wrap_response(DeleteModelVersion.Response())",
                "// Line 1755: ",
                "// Line 1756: ",
                "// Line 1757: @catch_mlflow_exception",
                "// Line 1758: @_disable_if_artifacts_only",
                "// Line 1759: def _get_model_version_download_uri():",
                "// Line 1760:     request_message = _get_request_message(GetModelVersionDownloadUri())",
                "// Line 1761:     download_uri = _get_model_registry_store().get_model_version_download_uri(",
                "// Line 1762:         name=request_message.name, version=request_message.version",
                "// vulnerable line: 1763: )",
                "// Line 1764:     response_message = GetModelVersionDownloadUri.Response(artifact_uri=download_uri)",
                "// Line 1765:     return _wrap_response(response_message)",
                "// Line 1766: ",
                "// Line 1767: ",
                "// Line 1768: @catch_mlflow_exception",
                "// Line 1769: @_disable_if_artifacts_only",
                "// Line 1770: def _search_model_versions():",
                "// Line 1771:     request_message = _get_request_message(",
                "// Line 1772:         SearchModelVersions(),",
                "// Line 1773:         schema={",
                "// Line 1774:             \"filter\": [_assert_string],",
                "// Line 1775:             \"max_results\": [_assert_intlike, lambda x: _assert_less_than_or_equal(x, 200_000)],",
                "// Line 1776:             \"order_by\": [_assert_array, _assert_item_type_string],",
                "// Line 1777:             \"page_token\": [_assert_string],",
                "// Line 1778:         },",
                "// vulnerable line: 1779: )",
                "// Line 1780:     store = _get_model_registry_store()",
                "// Line 1781:     model_versions = store.search_model_versions(",
                "// Line 1782:         filter_string=request_message.filter,",
                "// Line 1783:         max_results=request_message.max_results,",
                "// Line 1784:         order_by=request_message.order_by,",
                "// Line 1785:         page_token=request_message.page_token,",
                "// vulnerable line: 1786: )",
                "// Line 1787:     response_message = SearchModelVersions.Response()",
                "// Line 1788:     response_message.model_versions.extend([e.to_proto() for e in model_versions])",
                "// Line 1789:     if model_versions.token:",
                "// Line 1790:         response_message.next_page_token = model_versions.token",
                "// Line 1791:     return _wrap_response(response_message)",
                "// Line 1792: ",
                "// Line 1793: ",
                "// Line 1794: @catch_mlflow_exception",
                "// Line 1795: @_disable_if_artifacts_only",
                "// Line 1796: def _set_model_version_tag():",
                "// Line 1797:     request_message = _get_request_message(",
                "// Line 1798:         SetModelVersionTag(),",
                "// Line 1799:         schema={",
                "// Line 1800:             \"name\": [_assert_string, _assert_required],",
                "// Line 1801:             \"version\": [_assert_string, _assert_required],",
                "// Line 1802:             \"key\": [_assert_string, _assert_required],",
                "// Line 1803:             \"value\": [_assert_string],",
                "// Line 1804:         },",
                "// vulnerable line: 1805: )",
                "// Line 1806:     tag = ModelVersionTag(key=request_message.key, value=request_message.value)",
                "// Line 1807:     _get_model_registry_store().set_model_version_tag(",
                "// Line 1808:         name=request_message.name, version=request_message.version, tag=tag",
                "// vulnerable line: 1809: )",
                "// Line 1810:     return _wrap_response(SetModelVersionTag.Response())",
                "// Line 1811: ",
                "// Line 1812: ",
                "// Line 1813: @catch_mlflow_exception",
                "// Line 1814: @_disable_if_artifacts_only",
                "// Line 1815: def _delete_model_version_tag():",
                "// Line 1816:     request_message = _get_request_message(",
                "// Line 1817:         DeleteModelVersionTag(),",
                "// Line 1818:         schema={",
                "// Line 1819:             \"name\": [_assert_string, _assert_required],",
                "// Line 1820:             \"version\": [_assert_string, _assert_required],",
                "// Line 1821:             \"key\": [_assert_string, _assert_required],",
                "// Line 1822:         },",
                "// vulnerable line: 1823: )",
                "// Line 1824:     _get_model_registry_store().delete_model_version_tag(",
                "// Line 1825:         name=request_message.name, version=request_message.version, key=request_message.key",
                "// vulnerable line: 1826: )",
                "// Line 1827:     return _wrap_response(DeleteModelVersionTag.Response())",
                "// Line 1828: ",
                "// Line 1829: ",
                "// Line 1830: @catch_mlflow_exception",
                "// Line 1831: @_disable_if_artifacts_only",
                "// Line 1832: def _set_registered_model_alias():",
                "// Line 1833:     request_message = _get_request_message(",
                "// Line 1834:         SetRegisteredModelAlias(),",
                "// Line 1835:         schema={",
                "// Line 1836:             \"name\": [_assert_string, _assert_required],",
                "// Line 1837:             \"alias\": [_assert_string, _assert_required],",
                "// Line 1838:             \"version\": [_assert_string, _assert_required],",
                "// Line 1839:         },",
                "// vulnerable line: 1840: )",
                "// Line 1841:     _get_model_registry_store().set_registered_model_alias(",
                "// Line 1842:         name=request_message.name, alias=request_message.alias, version=request_message.version",
                "// vulnerable line: 1843: )",
                "// Line 1844:     return _wrap_response(SetRegisteredModelAlias.Response())",
                "// Line 1845: ",
                "// Line 1846: ",
                "// Line 1847: @catch_mlflow_exception",
                "// Line 1848: @_disable_if_artifacts_only",
                "// Line 1849: def _delete_registered_model_alias():",
                "// Line 1850:     request_message = _get_request_message(",
                "// Line 1851:         DeleteRegisteredModelAlias(),",
                "// Line 1852:         schema={",
                "// Line 1853:             \"name\": [_assert_string, _assert_required],",
                "// Line 1854:             \"alias\": [_assert_string, _assert_required],",
                "// Line 1855:         },",
                "// vulnerable line: 1856: )",
                "// Line 1857:     _get_model_registry_store().delete_registered_model_alias(",
                "// Line 1858:         name=request_message.name, alias=request_message.alias",
                "// vulnerable line: 1859: )",
                "// Line 1860:     return _wrap_response(DeleteRegisteredModelAlias.Response())",
                "// Line 1861: ",
                "// Line 1862: ",
                "// Line 1863: @catch_mlflow_exception",
                "// Line 1864: @_disable_if_artifacts_only",
                "// Line 1865: def _get_model_version_by_alias():",
                "// Line 1866:     request_message = _get_request_message(",
                "// Line 1867:         GetModelVersionByAlias(),",
                "// Line 1868:         schema={",
                "// Line 1869:             \"name\": [_assert_string, _assert_required],",
                "// Line 1870:             \"alias\": [_assert_string, _assert_required],",
                "// Line 1871:         },",
                "// vulnerable line: 1872: )",
                "// Line 1873:     model_version = _get_model_registry_store().get_model_version_by_alias(",
                "// Line 1874:         name=request_message.name, alias=request_message.alias",
                "// vulnerable line: 1875: )",
                "// Line 1876:     response_proto = model_version.to_proto()",
                "// Line 1877:     response_message = GetModelVersionByAlias.Response(model_version=response_proto)",
                "// Line 1878:     return _wrap_response(response_message)",
                "// Line 1879: ",
                "// Line 1880: ",
                "// Line 1881: # MLflow Artifacts APIs",
                "// Line 1882: ",
                "// Line 1883: ",
                "// Line 1884: @catch_mlflow_exception",
                "// Line 1885: @_disable_unless_serve_artifacts",
                "// Line 1983:     to `artifact_path` (a relative path from the root artifact directory).",
                "// Line 1984:     \"\"\"",
                "// Line 1985:     artifact_path = validate_path_is_safe(artifact_path)",
                "// Line 1986: ",
                "// Line 1987:     request_message = _get_request_message(",
                "// Line 1988:         CreateMultipartUpload(),",
                "// Line 1989:         schema={",
                "// Line 1990:             \"path\": [_assert_required, _assert_string],",
                "// Line 1991:             \"num_parts\": [_assert_intlike],",
                "// Line 1992:         },",
                "// vulnerable line: 1993: )",
                "// Line 1994:     path = request_message.path",
                "// Line 1995:     num_parts = request_message.num_parts",
                "// Line 1996: ",
                "// Line 1997:     artifact_repo = _get_artifact_repo_mlflow_artifacts()",
                "// Line 1998:     _validate_support_multipart_upload(artifact_repo)",
                "// Line 1999: ",
                "// Line 2000:     create_response = artifact_repo.create_multipart_upload(",
                "// Line 2001:         path,",
                "// Line 2002:         num_parts,",
                "// Line 2003:         artifact_path,",
                "// vulnerable line: 2004: )",
                "// Line 2005:     response_message = create_response.to_proto()",
                "// Line 2006:     response = Response(mimetype=\"application/json\")",
                "// Line 2007:     response.set_data(message_to_json(response_message))",
                "// Line 2008:     return response",
                "// Line 2009: ",
                "// Line 2010: ",
                "// Line 2011: @catch_mlflow_exception",
                "// Line 2012: @_disable_unless_serve_artifacts",
                "// Line 2013: def _complete_multipart_upload_artifact(artifact_path):",
                "// Line 2014:     \"\"\"",
                "// Line 2017:     \"\"\"",
                "// Line 2018:     artifact_path = validate_path_is_safe(artifact_path)",
                "// Line 2019: ",
                "// Line 2020:     request_message = _get_request_message(",
                "// Line 2021:         CompleteMultipartUpload(),",
                "// Line 2022:         schema={",
                "// Line 2023:             \"path\": [_assert_required, _assert_string],",
                "// Line 2024:             \"upload_id\": [_assert_string],",
                "// Line 2025:             \"parts\": [_assert_required],",
                "// Line 2026:         },",
                "// vulnerable line: 2027: )",
                "// Line 2028:     path = request_message.path",
                "// Line 2029:     upload_id = request_message.upload_id",
                "// Line 2030:     parts = [MultipartUploadPart.from_proto(part) for part in request_message.parts]",
                "// Line 2031: ",
                "// Line 2032:     artifact_repo = _get_artifact_repo_mlflow_artifacts()",
                "// Line 2033:     _validate_support_multipart_upload(artifact_repo)",
                "// Line 2034: ",
                "// Line 2035:     artifact_repo.complete_multipart_upload(",
                "// Line 2036:         path,",
                "// Line 2037:         upload_id,",
                "// Line 2038:         parts,",
                "// Line 2039:         artifact_path,",
                "// vulnerable line: 2040: )",
                "// Line 2041:     return _wrap_response(CompleteMultipartUpload.Response())",
                "// Line 2042: ",
                "// Line 2043: ",
                "// Line 2044: @catch_mlflow_exception",
                "// Line 2045: @_disable_unless_serve_artifacts",
                "// Line 2046: def _abort_multipart_upload_artifact(artifact_path):",
                "// Line 2047:     \"\"\"",
                "// Line 2048:     A request handler for `POST /mlflow-artifacts/mpu/abort` to abort a multipart upload",
                "// Line 2049:     to `artifact_path` (a relative path from the root artifact directory).",
                "// Line 2050:     \"\"\"",
                "// Line 2051:     artifact_path = validate_path_is_safe(artifact_path)",
                "// Line 2052: ",
                "// Line 2053:     request_message = _get_request_message(",
                "// Line 2054:         AbortMultipartUpload(),",
                "// Line 2055:         schema={",
                "// Line 2056:             \"path\": [_assert_required, _assert_string],",
                "// Line 2057:             \"upload_id\": [_assert_string],",
                "// Line 2058:         },",
                "// vulnerable line: 2059: )",
                "// Line 2060:     path = request_message.path",
                "// Line 2061:     upload_id = request_message.upload_id",
                "// Line 2062: ",
                "// Line 2063:     artifact_repo = _get_artifact_repo_mlflow_artifacts()",
                "// Line 2064:     _validate_support_multipart_upload(artifact_repo)",
                "// Line 2065: ",
                "// Line 2066:     artifact_repo.abort_multipart_upload(",
                "// Line 2067:         path,",
                "// Line 2068:         upload_id,",
                "// Line 2069:         artifact_path,",
                "// vulnerable line: 2070: )",
                "// Line 2071:     return _wrap_response(AbortMultipartUpload.Response())",
                "// Line 2072: ",
                "// Line 2073: ",
                "// Line 2074: def _get_rest_path(base_path):",
                "// Line 2075:     return f\"/api/2.0{base_path}\"",
                "// Line 2076: ",
                "// Line 2077: ",
                "// Line 2078: def _get_ajax_path(base_path):",
                "// Line 2079:     return _add_static_prefix(f\"/ajax-api/2.0{base_path}\")",
                "// Line 2080: ",
                "// Line 2115: ",
                "// Line 2116: ",
                "// Line 2117: def get_endpoints(get_handler=get_handler):",
                "// Line 2118:     \"\"\"",
                "// Line 2119:     :return: List of tuples (path, handler, methods)",
                "// Line 2120:     \"\"\"",
                "// Line 2121:     return (",
                "// Line 2122:         get_service_endpoints(MlflowService, get_handler)",
                "// Line 2123:         + get_service_endpoints(ModelRegistryService, get_handler)",
                "// Line 2124:         + get_service_endpoints(MlflowArtifactsService, get_handler)",
                "// vulnerable line: 2125: )",
                "// Line 2126: ",
                "// Line 2127: ",
                "// Line 2128: HANDLERS = {",
                "// Line 2129:     # Tracking Server APIs",
                "// Line 2130:     CreateExperiment: _create_experiment,",
                "// Line 2131:     GetExperiment: _get_experiment,",
                "// Line 2132:     GetExperimentByName: _get_experiment_by_name,",
                "// Line 2133:     DeleteExperiment: _delete_experiment,",
                "// Line 2134:     RestoreExperiment: _restore_experiment,",
                "// Line 2135:     UpdateExperiment: _update_experiment,"
            ]
        },
        {
            "filename_of_changes": "test_artifacts.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "21",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: import pathlib",
                "// Line 2: import uuid",
                "// Line 3: from collections import namedtuple",
                "// Line 4: from typing import NamedTuple",
                "// Line 5: from unittest import mock",
                "// Line 6: ",
                "// Line 7: import pytest",
                "// Line 8: ",
                "// Line 9: import mlflow",
                "// Line 10: from mlflow.exceptions import MlflowException",
                "// vulnerable line: 11: from mlflow.utils.file_utils import local_file_uri_to_path, mkdir, path_to_local_file_uri",
                "// Line 12: from mlflow.utils.os import is_windows",
                "// Line 13: ",
                "// Line 14: Artifact = namedtuple(\"Artifact\", [\"uri\", \"content\"])",
                "// Line 15: ",
                "// Line 16: ",
                "// Line 17: @pytest.fixture",
                "// Line 18: def run_with_artifact(tmp_path):",
                "// Line 19:     artifact_path = \"test\"",
                "// Line 20:     artifact_content = \"content\"",
                "// Line 21:     local_path = tmp_path.joinpath(\"file.txt\")",
                "// Line 33:     for uri in (run_uri, actual_uri):",
                "// Line 34:         download_output_path = mlflow.artifacts.download_artifacts(artifact_uri=uri)",
                "// Line 35:         downloaded_artifact_path = next(pathlib.Path(download_output_path).iterdir())",
                "// Line 36:         assert downloaded_artifact_path.read_text() == artifact_content",
                "// Line 37: ",
                "// Line 38: ",
                "// Line 39: def test_download_artifacts_with_run_id_and_path(run_with_artifact):",
                "// Line 40:     run, artifact_path, artifact_content = run_with_artifact",
                "// Line 41:     download_output_path = mlflow.artifacts.download_artifacts(",
                "// Line 42:         run_id=run.info.run_id, artifact_path=artifact_path",
                "// vulnerable line: 43: )",
                "// Line 44:     downloaded_artifact_path = next(pathlib.Path(download_output_path).iterdir())",
                "// Line 45:     assert downloaded_artifact_path.read_text() == artifact_content",
                "// Line 46: ",
                "// Line 47: ",
                "// Line 48: def test_download_artifacts_with_run_id_no_path(run_with_artifact):",
                "// Line 49:     run, artifact_path, _ = run_with_artifact",
                "// Line 50:     artifact_relative_path_top_level_dir = pathlib.PurePosixPath(artifact_path).parts[0]",
                "// Line 51:     downloaded_output_path = mlflow.artifacts.download_artifacts(run_id=run.info.run_id)",
                "// Line 52:     downloaded_artifact_directory_name = next(pathlib.Path(downloaded_output_path).iterdir()).name",
                "// Line 53:     assert downloaded_artifact_directory_name == artifact_relative_path_top_level_dir",
                "// Line 54: ",
                "// Line 55: ",
                "// Line 56: @pytest.mark.parametrize(\"dst_subdir_path\", [None, \"doesnt_exist_yet/subdiir\"])",
                "// Line 57: def test_download_artifacts_with_dst_path(run_with_artifact, tmp_path, dst_subdir_path):",
                "// Line 58:     run, artifact_path, _ = run_with_artifact",
                "// Line 59:     dst_path = tmp_path / dst_subdir_path if dst_subdir_path else tmp_path",
                "// Line 60: ",
                "// Line 61:     download_output_path = mlflow.artifacts.download_artifacts(",
                "// Line 62:         run_id=run.info.run_id, artifact_path=artifact_path, dst_path=dst_path",
                "// vulnerable line: 63: )",
                "// Line 64:     assert pathlib.Path(download_output_path).samefile(dst_path / artifact_path)",
                "// Line 65: ",
                "// Line 66: ",
                "// Line 67: def test_download_artifacts_throws_for_invalid_arguments():",
                "// Line 68:     with pytest.raises(MlflowException, match=\"Exactly one of\"):",
                "// Line 69:         mlflow.artifacts.download_artifacts(",
                "// Line 70:             run_id=\"run_id\", artifact_path=\"path\", artifact_uri=\"uri\"",
                "// vulnerable line: 71: )",
                "// Line 72: ",
                "// Line 73:     with pytest.raises(MlflowException, match=\"Exactly one of\"):",
                "// Line 74:         mlflow.artifacts.download_artifacts()",
                "// Line 75: ",
                "// Line 76:     with pytest.raises(MlflowException, match=\"`artifact_path` cannot be specified\"):",
                "// Line 77:         mlflow.artifacts.download_artifacts(artifact_path=\"path\", artifact_uri=\"uri\")",
                "// Line 78: ",
                "// Line 79: ",
                "// Line 80: @pytest.fixture",
                "// Line 81: def run_with_text_artifact():",
                "// Line 155:     artifacts_root_tmp = mkdir(tmp_path.joinpath(str(uuid.uuid4())))",
                "// Line 156:     test_artifact_path = artifacts_root_tmp.joinpath(artifact_name)",
                "// Line 157:     test_artifact_path.write_text(\"test\")",
                "// Line 158:     return ArtifactReturnType(artifacts_root_tmp, test_artifact_path, artifact_name)",
                "// Line 159: ",
                "// Line 160: ",
                "// Line 161: def _assert_artifact_uri(tracking_uri, expected_artifact_uri, test_artifact, run_id):",
                "// Line 162:     mlflow.log_artifact(test_artifact.artifact_path)",
                "// Line 163:     artifact_uri = mlflow.artifacts.download_artifacts(",
                "// Line 164:         run_id=run_id, artifact_path=test_artifact.artifact_name, tracking_uri=tracking_uri",
                "// vulnerable line: 165: )",
                "// Line 166:     assert artifact_uri == expected_artifact_uri",
                "// Line 167: ",
                "// Line 168: ",
                "// Line 169: def test_default_relative_artifact_uri_resolves(text_artifact, tmp_path, monkeypatch):",
                "// Line 170:     tracking_uri = path_to_local_file_uri(text_artifact.tmp_path.joinpath(\"mlruns\"))",
                "// Line 171:     mlflow.set_tracking_uri(tracking_uri)",
                "// Line 172:     monkeypatch.chdir(tmp_path)",
                "// Line 173:     experiment_id = mlflow.create_experiment(\"test_exp_a\", \"test_artifacts_root\")",
                "// Line 174:     with mlflow.start_run(experiment_id=experiment_id) as run:",
                "// Line 175:         _assert_artifact_uri(",
                "// Line 176:             tracking_uri,",
                "// Line 177:             str(",
                "// Line 178:                 tmp_path.joinpath(",
                "// Line 179:                     \"test_artifacts_root\",",
                "// Line 180:                     run.info.run_id,",
                "// Line 181:                     \"artifacts\",",
                "// Line 182:                     text_artifact.artifact_name,",
                "// vulnerable line: 183: )",
                "// Line 184:             ),",
                "// Line 185:             text_artifact,",
                "// Line 186:             run.info.run_id,",
                "// vulnerable line: 187: )",
                "// Line 188: ",
                "// Line 189: ",
                "// Line 190: def test_custom_relative_artifact_uri_resolves(text_artifact):",
                "// Line 191:     tracking_uri = path_to_local_file_uri(text_artifact.tmp_path.joinpath(\"tracking\"))",
                "// Line 192:     artifacts_root_path = text_artifact.tmp_path.joinpath(\"test_artifacts\")",
                "// Line 193:     artifacts_root_uri = path_to_local_file_uri(artifacts_root_path)",
                "// Line 194:     mlflow.set_tracking_uri(tracking_uri)",
                "// Line 195:     experiment_id = mlflow.create_experiment(\"test_exp_b\", artifacts_root_uri)",
                "// Line 196:     with mlflow.start_run(experiment_id=experiment_id) as run:",
                "// Line 197:         _assert_artifact_uri(",
                "// Line 198:             tracking_uri,",
                "// Line 199:             str(",
                "// Line 200:                 artifacts_root_path.joinpath(",
                "// Line 201:                     run.info.run_id, \"artifacts\", text_artifact.artifact_name",
                "// vulnerable line: 202: )",
                "// Line 203:             ),",
                "// Line 204:             text_artifact,",
                "// Line 205:             run.info.run_id,",
                "// vulnerable line: 206: )",
                "// Line 207: ",
                "// Line 208: ",
                "// Line 209: def test_artifact_logging_resolution_works_with_non_root_working_directory(tmp_path, monkeypatch):",
                "// Line 210:     text_file = tmp_path.joinpath(\"test.txt\")",
                "// Line 211:     text_file.write_text(\"test\")",
                "// Line 212:     cwd = tmp_path.joinpath(\"cwd\")",
                "// Line 213:     cwd.mkdir()",
                "// Line 214:     monkeypatch.chdir(cwd)",
                "// Line 215:     experiment_id = mlflow.create_experiment(\"test_exp_c\", \"some_path\")",
                "// Line 216:     not_cwd = tmp_path.joinpath(\"not_cwd\")",
                "// Line 217:     not_cwd.mkdir()",
                "// Line 218:     monkeypatch.chdir(not_cwd)",
                "// Line 219: ",
                "// Line 220:     tracking_uri = mlflow.get_tracking_uri()",
                "// Line 221:     with mlflow.start_run(experiment_id=experiment_id) as run:",
                "// Line 222:         _assert_artifact_uri(",
                "// Line 223:             tracking_uri,",
                "// Line 224:             str(cwd.joinpath(\"some_path\", run.info.run_id, \"artifacts\", text_file.name)),",
                "// Line 225:             ArtifactReturnType(tmp_path, text_file, text_file.name),",
                "// Line 226:             run.info.run_id,",
                "// vulnerable line: 227: )",
                "// Line 228: ",
                "// Line 229: ",
                "// Line 230: @pytest.mark.skipif(not is_windows(), reason=\"This test only passes on Windows\")",
                "// Line 231: def test_log_artifact_windows_path_with_hostname(text_artifact):",
                "// Line 232:     experiment_test_1_artifact_location = r\"\\my_server\\my_path\\my_sub_path\u0001\"",
                "// Line 233:     experiment_test_1_id = mlflow.create_experiment(",
                "// Line 234:         \"test_exp_d\", experiment_test_1_artifact_location",
                "// vulnerable line: 235: )",
                "// Line 236:     with mlflow.start_run(experiment_id=experiment_test_1_id) as run:",
                "// vulnerable line: 237: with mock.patch(\"shutil.copy2\") as copyfile_mock, mock.patch(",
                "// vulnerable line: 238: \"os.path.exists\", return_value=True",
                "// vulnerable line: 239: ) as exists_mock:",
                "// vulnerable line: 240: mlflow.log_artifact(text_artifact.artifact_path)",
                "// vulnerable line: 241: copyfile_mock.assert_called_once()",
                "// vulnerable line: 242: exists_mock.assert_called_once()",
                "// vulnerable line: 243: local_path = mlflow.artifacts.download_artifacts(",
                "// vulnerable line: 244: run_id=run.info.run_id, artifact_path=text_artifact.artifact_name",
                "// vulnerable line: 245: )",
                "// vulnerable line: 246: assert (",
                "// Line 247:                 rf\"{experiment_test_1_artifact_location}\\{run.info.run_id}\"",
                "// Line 248:                 rf\"\u0007rtifacts\\{text_artifact.artifact_name}\" == local_path",
                "// vulnerable line: 249: )",
                "// Line 250: ",
                "// vulnerable line: 251: experiment_test_2_artifact_location = \"file://my_server/my_path/my_sub_path\"",
                "// vulnerable line: 252: experiment_test_2_id = mlflow.create_experiment(",
                "// vulnerable line: 253: \"test_exp_e\", experiment_test_2_artifact_location",
                "// vulnerable line: 254: )",
                "// vulnerable line: 255: with mlflow.start_run(experiment_id=experiment_test_2_id) as run:",
                "// vulnerable line: 256: with mock.patch(\"shutil.copy2\") as copyfile_mock, mock.patch(",
                "// vulnerable line: 257: \"os.path.exists\", return_value=True",
                "// vulnerable line: 258: ) as exists_mock:",
                "// vulnerable line: 259: mlflow.log_artifact(text_artifact.artifact_path)",
                "// vulnerable line: 260: copyfile_mock.assert_called_once()",
                "// vulnerable line: 261: exists_mock.assert_called_once()",
                "// vulnerable line: 262: local_path = mlflow.artifacts.download_artifacts(",
                "// vulnerable line: 263: run_id=run.info.run_id, artifact_path=text_artifact.artifact_name",
                "// vulnerable line: 264: )",
                "// vulnerable line: 265: assert (",
                "// vulnerable line: 266: local_file_uri_to_path(experiment_test_2_artifact_location)",
                "// Line 267:                 + rf\"\\{run.info.run_id}\u0007rtifacts\\{text_artifact.artifact_name}\"",
                "// vulnerable line: 268: == local_path",
                "// vulnerable line: 269: )"
            ]
        },
        {
            "filename_of_changes": "test_file_store.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 2081:         assert run.info.artifact_uri == expected_artifact_uri_format.format(",
                "// Line 2082:             e=exp_id, r=run.info.run_id, cwd=cwd, drive=drive",
                "// Line 2083:         )",
                "// Line 2084: ",
                "// Line 2085: ",
                "// Line 2086: @pytest.mark.skipif(not is_windows(), reason=\"This test only passes on Windows\")",
                "// Line 2087: @pytest.mark.parametrize(",
                "// Line 2088:     (\"input_uri\", \"expected_uri\"),",
                "// Line 2089:     [",
                "// Line 2090:         (",
                "// vulnerable line: 2091: \"file://my_server/my_path/my_sub_path\",",
                "// vulnerable line: 2092: \"file://my_server/my_path/my_sub_path/{e}/{r}/artifacts\",",
                "// Line 2093:         ),",
                "// Line 2094:         (\"path/to/local/folder\", \"file://{cwd}/path/to/local/folder/{e}/{r}/artifacts\"),",
                "// Line 2095:         (\"/path/to/local/folder\", \"file:///{drive}path/to/local/folder/{e}/{r}/artifacts\"),",
                "// Line 2096:         (\"#path/to/local/folder?\", \"file://{cwd}/{e}/{r}/artifacts#path/to/local/folder?\"),",
                "// Line 2097:         (",
                "// Line 2098:             \"file:///path/to/local/folder\",",
                "// Line 2099:             \"file:///{drive}path/to/local/folder/{e}/{r}/artifacts\",",
                "// Line 2100:         ),",
                "// Line 2101:         (",
                "// Line 2102:             \"file:///path/to/local/folder?param=value#fragment\",",
                "// Line 2184: ",
                "// Line 2185:         assert exp.artifact_location == expected_artifact_uri_format.format(",
                "// Line 2186:             e=exp_id, cwd=cwd, drive=drive",
                "// Line 2187:         )",
                "// Line 2188: ",
                "// Line 2189: ",
                "// Line 2190: @pytest.mark.skipif(not is_windows(), reason=\"This test only passes on Windows\")",
                "// Line 2191: @pytest.mark.parametrize(",
                "// Line 2192:     (\"input_uri\", \"expected_uri\"),",
                "// Line 2193:     [",
                "// vulnerable line: 2194: (\"file://my_server/my_path/my_sub_path\", \"file://my_server/my_path/my_sub_path/{e}\"),",
                "// Line 2195:         (\"path/to/local/folder\", \"file://{cwd}/path/to/local/folder/{e}\"),",
                "// Line 2196:         (\"/path/to/local/folder\", \"file:///{drive}path/to/local/folder/{e}\"),",
                "// Line 2197:         (\"#path/to/local/folder?\", \"file://{cwd}/{e}#path/to/local/folder?\"),",
                "// Line 2198:         (\"file:path/to/local/folder\", \"file://{cwd}/path/to/local/folder/{e}\"),",
                "// Line 2199:         (\"file:///path/to/local/folder\", \"file:///{drive}path/to/local/folder/{e}\"),",
                "// Line 2200:         (",
                "// Line 2201:             \"file:path/to/local/folder?param=value\",",
                "// Line 2202:             \"file://{cwd}/path/to/local/folder/{e}?param=value\",",
                "// Line 2203:         ),",
                "// Line 2204:         ("
            ]
        },
        {
            "filename_of_changes": "test_file_utils.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "0",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "test_rest_tracking.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "26",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 25: from mlflow.data.pandas_dataset import from_pandas",
                "// Line 26: from mlflow.entities import (",
                "// Line 27:     Dataset,",
                "// Line 28:     DatasetInput,",
                "// Line 29:     InputTag,",
                "// Line 30:     Metric,",
                "// Line 31:     Param,",
                "// Line 32:     RunInputs,",
                "// Line 33:     RunTag,",
                "// Line 34:     ViewType,",
                "// vulnerable line: 35: )",
                "// Line 36: from mlflow.exceptions import MlflowException",
                "// Line 37: from mlflow.models import Model",
                "// Line 38: from mlflow.store.tracking.sqlalchemy_store import SqlAlchemyStore",
                "// Line 39: from mlflow.utils import mlflow_tags",
                "// Line 40: from mlflow.utils.file_utils import TempDir, path_to_local_file_uri",
                "// Line 41: from mlflow.utils.mlflow_tags import (",
                "// Line 42:     MLFLOW_DATASET_CONTEXT,",
                "// Line 43:     MLFLOW_GIT_COMMIT,",
                "// Line 44:     MLFLOW_PARENT_RUN_ID,",
                "// Line 45:     MLFLOW_PROJECT_ENTRY_POINT,",
                "// Line 46:     MLFLOW_SOURCE_NAME,",
                "// Line 47:     MLFLOW_SOURCE_TYPE,",
                "// Line 48:     MLFLOW_USER,",
                "// vulnerable line: 49: )",
                "// Line 50: from mlflow.utils.os import is_windows",
                "// Line 51: from mlflow.utils.proto_json_utils import message_to_json",
                "// Line 52: from mlflow.utils.time import get_current_time_millis",
                "// Line 53: ",
                "// Line 54: from tests.integration.utils import invoke_cli_runner",
                "// Line 55: from tests.tracking.integration_test_utils import (",
                "// Line 56:     _init_server,",
                "// Line 57:     _send_rest_tracking_post_request,",
                "// vulnerable line: 58: )",
                "// Line 59: ",
                "// Line 60: _logger = logging.getLogger(__name__)",
                "// Line 61: ",
                "// Line 62: ",
                "// Line 63: @pytest.fixture(params=[\"file\", \"sqlalchemy\"])",
                "// Line 64: def mlflow_client(request, tmp_path):",
                "// Line 65:     \"\"\"Provides an MLflow Tracking API client pointed at the local tracking server.\"\"\"",
                "// Line 66:     if request.param == \"file\":",
                "// vulnerable line: 67: backend_uri = tmp_path.joinpath(\"file\").as_uri()",
                "// Line 68:     elif request.param == \"sqlalchemy\":",
                "// Line 69:         path = tmp_path.joinpath(\"sqlalchemy.db\").as_uri()",
                "// Line 70:         backend_uri = (\"sqlite://\" if sys.platform == \"win32\" else \"sqlite:////\") + path[",
                "// Line 71:             len(\"file://\") :",
                "// Line 72:         ]",
                "// Line 73: ",
                "// Line 74:     with _init_server(backend_uri, root_artifact_uri=tmp_path.as_uri()) as url:",
                "// Line 75:         yield MlflowClient(url)",
                "// Line 76: ",
                "// Line 77: ",
                "// Line 85:     }",
                "// Line 86: ",
                "// Line 87: ",
                "// Line 88: def create_experiments(client, names):",
                "// Line 89:     return [client.create_experiment(n) for n in names]",
                "// Line 90: ",
                "// Line 91: ",
                "// Line 92: def test_create_get_search_experiment(mlflow_client):",
                "// Line 93:     experiment_id = mlflow_client.create_experiment(",
                "// Line 94:         \"My Experiment\", artifact_location=\"my_location\", tags={\"key1\": \"val1\", \"key2\": \"val2\"}",
                "// vulnerable line: 95: )",
                "// Line 96:     exp = mlflow_client.get_experiment(experiment_id)",
                "// Line 97:     assert exp.name == \"My Experiment\"",
                "// Line 98:     if is_windows():",
                "// Line 99:         assert exp.artifact_location == pathlib.Path.cwd().joinpath(\"my_location\").as_uri()",
                "// Line 100:     else:",
                "// Line 101:         assert exp.artifact_location == str(pathlib.Path.cwd().joinpath(\"my_location\"))",
                "// Line 102:     assert len(exp.tags) == 2",
                "// Line 103:     assert exp.tags[\"key1\"] == \"val1\"",
                "// Line 104:     assert exp.tags[\"key2\"] == \"val2\"",
                "// Line 105: ",
                "// Line 118:         \"Default\",",
                "// Line 119:     }",
                "// Line 120:     active_exps_paginated = mlflow_client.search_experiments(max_results=1)",
                "// Line 121:     assert {e.name for e in active_exps_paginated} == {\"Default\"}",
                "// Line 122:     assert active_exps_paginated.token is None",
                "// Line 123: ",
                "// Line 124:     all_exps_paginated = mlflow_client.search_experiments(max_results=1, view_type=ViewType.ALL)",
                "// Line 125:     first_page_names = {e.name for e in all_exps_paginated}",
                "// Line 126:     all_exps_second_page = mlflow_client.search_experiments(",
                "// Line 127:         max_results=1, view_type=ViewType.ALL, page_token=all_exps_paginated.token",
                "// vulnerable line: 128: )",
                "// Line 129:     second_page_names = {e.name for e in all_exps_second_page}",
                "// Line 130:     assert len(first_page_names) == 1",
                "// Line 131:     assert len(second_page_names) == 1",
                "// Line 132:     assert first_page_names.union(second_page_names) == {\"Default\", \"My Experiment\"}",
                "// Line 133: ",
                "// Line 134: ",
                "// Line 135: def test_create_experiment_validation(mlflow_client):",
                "// Line 136:     def assert_bad_request(payload, expected_error_message):",
                "// Line 137:         response = _send_rest_tracking_post_request(",
                "// Line 138:             mlflow_client.tracking_uri,",
                "// Line 139:             \"/api/2.0/mlflow/experiments/create\",",
                "// Line 140:             payload,",
                "// vulnerable line: 141: )",
                "// vulnerable line: 142: assert response.status_code == 400",
                "// Line 143:         assert expected_error_message in response.text",
                "// Line 144: ",
                "// Line 145:     assert_bad_request(",
                "// Line 146:         {",
                "// Line 147:             \"name\": 123,",
                "// vulnerable line: 148: },",
                "// Line 149:         \"Invalid value 123 for parameter 'name'\",",
                "// vulnerable line: 150: )",
                "// Line 151:     assert_bad_request({}, \"Missing value for required parameter 'name'\")",
                "// Line 152:     assert_bad_request(",
                "// Line 153:         {",
                "// Line 154:             \"name\": \"experiment name\",",
                "// Line 155:             \"artifact_location\": 9.0,",
                "// Line 156:             \"tags\": [{\"key\": \"key\", \"value\": \"value\"}],",
                "// vulnerable line: 157: },",
                "// Line 158:         \"Invalid value 9.0 for parameter 'artifact_location'\",",
                "// vulnerable line: 159: )",
                "// Line 160:     assert_bad_request(",
                "// Line 161:         {",
                "// Line 162:             \"name\": \"experiment name\",",
                "// Line 163:             \"artifact_location\": \"my_location\",",
                "// Line 164:             \"tags\": \"5\",",
                "// vulnerable line: 165: },",
                "// Line 166:         \"Invalid value 5 for parameter 'tags'\",",
                "// vulnerable line: 167: )",
                "// Line 168: ",
                "// Line 169: ",
                "// Line 170: def test_delete_restore_experiment(mlflow_client):",
                "// Line 171:     experiment_id = mlflow_client.create_experiment(\"Deleterious\")",
                "// Line 172:     assert mlflow_client.get_experiment(experiment_id).lifecycle_stage == \"active\"",
                "// Line 173:     mlflow_client.delete_experiment(experiment_id)",
                "// Line 174:     assert mlflow_client.get_experiment(experiment_id).lifecycle_stage == \"deleted\"",
                "// Line 175:     mlflow_client.restore_experiment(experiment_id)",
                "// Line 176:     assert mlflow_client.get_experiment(experiment_id).lifecycle_stage == \"active\"",
                "// Line 177: ",
                "// Line 178: ",
                "// Line 179: def test_delete_restore_experiment_cli(mlflow_client, cli_env):",
                "// Line 180:     experiment_name = \"DeleteriousCLI\"",
                "// Line 181:     invoke_cli_runner(",
                "// Line 182:         mlflow.experiments.commands, [\"create\", \"--experiment-name\", experiment_name], env=cli_env",
                "// vulnerable line: 183: )",
                "// Line 184:     experiment_id = mlflow_client.get_experiment_by_name(experiment_name).experiment_id",
                "// Line 185:     assert mlflow_client.get_experiment(experiment_id).lifecycle_stage == \"active\"",
                "// Line 186:     invoke_cli_runner(",
                "// Line 187:         mlflow.experiments.commands, [\"delete\", \"-x\", str(experiment_id)], env=cli_env",
                "// vulnerable line: 188: )",
                "// Line 189:     assert mlflow_client.get_experiment(experiment_id).lifecycle_stage == \"deleted\"",
                "// Line 190:     invoke_cli_runner(",
                "// Line 191:         mlflow.experiments.commands, [\"restore\", \"-x\", str(experiment_id)], env=cli_env",
                "// vulnerable line: 192: )",
                "// Line 193:     assert mlflow_client.get_experiment(experiment_id).lifecycle_stage == \"active\"",
                "// Line 194: ",
                "// Line 195: ",
                "// Line 196: def test_rename_experiment(mlflow_client):",
                "// Line 197:     experiment_id = mlflow_client.create_experiment(\"BadName\")",
                "// Line 198:     assert mlflow_client.get_experiment(experiment_id).name == \"BadName\"",
                "// Line 199:     mlflow_client.rename_experiment(experiment_id, \"GoodName\")",
                "// Line 200:     assert mlflow_client.get_experiment(experiment_id).name == \"GoodName\"",
                "// Line 201: ",
                "// Line 202: ",
                "// Line 203: def test_rename_experiment_cli(mlflow_client, cli_env):",
                "// Line 204:     bad_experiment_name = \"CLIBadName\"",
                "// Line 205:     good_experiment_name = \"CLIGoodName\"",
                "// Line 206: ",
                "// Line 207:     invoke_cli_runner(",
                "// Line 208:         mlflow.experiments.commands, [\"create\", \"-n\", bad_experiment_name], env=cli_env",
                "// vulnerable line: 209: )",
                "// Line 210:     experiment_id = mlflow_client.get_experiment_by_name(bad_experiment_name).experiment_id",
                "// Line 211:     assert mlflow_client.get_experiment(experiment_id).name == bad_experiment_name",
                "// Line 212:     invoke_cli_runner(",
                "// Line 213:         mlflow.experiments.commands,",
                "// Line 214:         [\"rename\", \"--experiment-id\", str(experiment_id), \"--new-name\", good_experiment_name],",
                "// Line 215:         env=cli_env,",
                "// vulnerable line: 216: )",
                "// Line 217:     assert mlflow_client.get_experiment(experiment_id).name == good_experiment_name",
                "// Line 218: ",
                "// Line 219: ",
                "// Line 220: @pytest.mark.parametrize(\"parent_run_id_kwarg\", [None, \"my-parent-id\"])",
                "// Line 221: def test_create_run_all_args(mlflow_client, parent_run_id_kwarg):",
                "// Line 222:     user = \"username\"",
                "// Line 223:     source_name = \"Hello\"",
                "// Line 224:     entry_point = \"entry\"",
                "// Line 225:     source_version = \"abc\"",
                "// Line 226:     create_run_kwargs = {",
                "// Line 228:         \"run_name\": \"my name\",",
                "// Line 229:         \"tags\": {",
                "// Line 230:             MLFLOW_USER: user,",
                "// Line 231:             MLFLOW_SOURCE_TYPE: \"LOCAL\",",
                "// Line 232:             MLFLOW_SOURCE_NAME: source_name,",
                "// Line 233:             MLFLOW_PROJECT_ENTRY_POINT: entry_point,",
                "// Line 234:             MLFLOW_GIT_COMMIT: source_version,",
                "// Line 235:             MLFLOW_PARENT_RUN_ID: \"7\",",
                "// Line 236:             \"my\": \"tag\",",
                "// Line 237:             \"other\": \"tag\",",
                "// vulnerable line: 238: },",
                "// Line 239:     }",
                "// Line 240:     experiment_id = mlflow_client.create_experiment(",
                "// Line 241:         f\"Run A Lot (parent_run_id={parent_run_id_kwarg})\"",
                "// vulnerable line: 242: )",
                "// Line 243:     created_run = mlflow_client.create_run(experiment_id, **create_run_kwargs)",
                "// Line 244:     run_id = created_run.info.run_id",
                "// Line 245:     _logger.info(f\"Run id={run_id}\")",
                "// Line 246:     fetched_run = mlflow_client.get_run(run_id)",
                "// Line 247:     for run in [created_run, fetched_run]:",
                "// Line 248:         assert run.info.run_id == run_id",
                "// Line 249:         assert run.info.run_uuid == run_id",
                "// Line 250:         assert run.info.experiment_id == experiment_id",
                "// Line 251:         assert run.info.user_id == user",
                "// Line 252:         assert run.info.start_time == create_run_kwargs[\"start_time\"]",
                "// Line 309: def test_log_metric_validation(mlflow_client):",
                "// Line 310:     experiment_id = mlflow_client.create_experiment(\"metrics validation\")",
                "// Line 311:     created_run = mlflow_client.create_run(experiment_id)",
                "// Line 312:     run_id = created_run.info.run_id",
                "// Line 313: ",
                "// Line 314:     def assert_bad_request(payload, expected_error_message):",
                "// Line 315:         response = _send_rest_tracking_post_request(",
                "// Line 316:             mlflow_client.tracking_uri,",
                "// Line 317:             \"/api/2.0/mlflow/runs/log-metric\",",
                "// Line 318:             payload,",
                "// vulnerable line: 319: )",
                "// vulnerable line: 320: assert response.status_code == 400",
                "// Line 321:         assert expected_error_message in response.text",
                "// Line 322: ",
                "// Line 323:     assert_bad_request(",
                "// Line 324:         {",
                "// Line 325:             \"run_id\": 31,",
                "// Line 326:             \"key\": \"metric\",",
                "// Line 327:             \"value\": 41,",
                "// Line 328:             \"timestamp\": 59,",
                "// Line 329:             \"step\": 26,",
                "// vulnerable line: 330: },",
                "// Line 331:         \"Invalid value 31 for parameter 'run_id' supplied\",",
                "// vulnerable line: 332: )",
                "// Line 333:     assert_bad_request(",
                "// Line 334:         {",
                "// Line 335:             \"run_id\": run_id,",
                "// Line 336:             \"key\": 31,",
                "// Line 337:             \"value\": 41,",
                "// Line 338:             \"timestamp\": 59,",
                "// Line 339:             \"step\": 26,",
                "// vulnerable line: 340: },",
                "// Line 341:         \"Invalid value 31 for parameter 'key' supplied\",",
                "// vulnerable line: 342: )",
                "// Line 343:     assert_bad_request(",
                "// Line 344:         {",
                "// Line 345:             \"run_id\": run_id,",
                "// Line 346:             \"key\": \"foo\",",
                "// Line 347:             \"value\": 31,",
                "// Line 348:             \"timestamp\": 59,",
                "// Line 349:             \"step\": \"foo\",",
                "// vulnerable line: 350: },",
                "// Line 351:         \"Invalid value foo for parameter 'step' supplied\",",
                "// vulnerable line: 352: )",
                "// Line 353:     assert_bad_request(",
                "// Line 354:         {",
                "// Line 355:             \"run_id\": run_id,",
                "// Line 356:             \"key\": \"foo\",",
                "// Line 357:             \"value\": 31,",
                "// Line 358:             \"timestamp\": \"foo\",",
                "// Line 359:             \"step\": 41,",
                "// vulnerable line: 360: },",
                "// Line 361:         \"Invalid value foo for parameter 'timestamp' supplied\",",
                "// vulnerable line: 362: )",
                "// Line 363:     assert_bad_request(",
                "// Line 364:         {",
                "// Line 365:             \"run_id\": None,",
                "// Line 366:             \"key\": \"foo\",",
                "// Line 367:             \"value\": 31,",
                "// Line 368:             \"timestamp\": 59,",
                "// Line 369:             \"step\": 41,",
                "// vulnerable line: 370: },",
                "// Line 371:         \"Missing value for required parameter 'run_id'\",",
                "// vulnerable line: 372: )",
                "// Line 373:     assert_bad_request(",
                "// Line 374:         {",
                "// Line 375:             \"run_id\": run_id,",
                "// Line 376:             # Missing key",
                "// Line 377:             \"value\": 31,",
                "// Line 378:             \"timestamp\": 59,",
                "// Line 379:             \"step\": 41,",
                "// vulnerable line: 380: },",
                "// Line 381:         \"Missing value for required parameter 'key'\",",
                "// vulnerable line: 382: )",
                "// Line 383:     assert_bad_request(",
                "// Line 384:         {",
                "// Line 385:             \"run_id\": run_id,",
                "// Line 386:             \"key\": None,",
                "// Line 387:             \"value\": 31,",
                "// Line 388:             \"timestamp\": 59,",
                "// Line 389:             \"step\": 41,",
                "// vulnerable line: 390: },",
                "// Line 391:         \"Missing value for required parameter 'key'\",",
                "// vulnerable line: 392: )",
                "// Line 393: ",
                "// Line 394: ",
                "// Line 395: def test_log_param_validation(mlflow_client):",
                "// Line 396:     experiment_id = mlflow_client.create_experiment(\"params validation\")",
                "// Line 397:     created_run = mlflow_client.create_run(experiment_id)",
                "// Line 398:     run_id = created_run.info.run_id",
                "// Line 399: ",
                "// Line 400:     def assert_bad_request(payload, expected_error_message):",
                "// Line 401:         response = _send_rest_tracking_post_request(",
                "// Line 402:             mlflow_client.tracking_uri,",
                "// Line 403:             \"/api/2.0/mlflow/runs/log-parameter\",",
                "// Line 404:             payload,",
                "// vulnerable line: 405: )",
                "// vulnerable line: 406: assert response.status_code == 400",
                "// Line 407:         assert expected_error_message in response.text",
                "// Line 408: ",
                "// Line 409:     assert_bad_request(",
                "// Line 410:         {",
                "// Line 411:             \"run_id\": 31,",
                "// Line 412:             \"key\": \"param\",",
                "// Line 413:             \"value\": 41,",
                "// vulnerable line: 414: },",
                "// Line 415:         \"Invalid value 31 for parameter 'run_id' supplied\",",
                "// vulnerable line: 416: )",
                "// Line 417:     assert_bad_request(",
                "// Line 418:         {",
                "// Line 419:             \"run_id\": run_id,",
                "// Line 420:             \"key\": 31,",
                "// Line 421:             \"value\": 41,",
                "// vulnerable line: 422: },",
                "// Line 423:         \"Invalid value 31 for parameter 'key' supplied\",",
                "// vulnerable line: 424: )",
                "// Line 425: ",
                "// Line 426: ",
                "// Line 427: def test_log_param_with_empty_string_as_value(mlflow_client):",
                "// Line 428:     experiment_id = mlflow_client.create_experiment(",
                "// Line 429:         test_log_param_with_empty_string_as_value.__name__",
                "// vulnerable line: 430: )",
                "// Line 431:     created_run = mlflow_client.create_run(experiment_id)",
                "// Line 432:     run_id = created_run.info.run_id",
                "// Line 433: ",
                "// Line 434:     mlflow_client.log_param(run_id, \"param_key\", \"\")",
                "// Line 435:     assert {\"param_key\": \"\"}.items() <= mlflow_client.get_run(run_id).data.params.items()",
                "// Line 436: ",
                "// Line 437: ",
                "// Line 438: def test_set_tag_with_empty_string_as_value(mlflow_client):",
                "// Line 439:     experiment_id = mlflow_client.create_experiment(",
                "// Line 440:         test_set_tag_with_empty_string_as_value.__name__",
                "// vulnerable line: 441: )",
                "// Line 442:     created_run = mlflow_client.create_run(experiment_id)",
                "// Line 443:     run_id = created_run.info.run_id",
                "// Line 444: ",
                "// Line 445:     mlflow_client.set_tag(run_id, \"tag_key\", \"\")",
                "// Line 446:     assert {\"tag_key\": \"\"}.items() <= mlflow_client.get_run(run_id).data.tags.items()",
                "// Line 447: ",
                "// Line 448: ",
                "// Line 449: def test_log_batch_containing_params_and_tags_with_empty_string_values(mlflow_client):",
                "// Line 450:     experiment_id = mlflow_client.create_experiment(",
                "// Line 451:         test_log_batch_containing_params_and_tags_with_empty_string_values.__name__",
                "// vulnerable line: 452: )",
                "// Line 453:     created_run = mlflow_client.create_run(experiment_id)",
                "// Line 454:     run_id = created_run.info.run_id",
                "// Line 455: ",
                "// Line 456:     mlflow_client.log_batch(",
                "// Line 457:         run_id=run_id,",
                "// Line 458:         params=[Param(\"param_key\", \"\")],",
                "// Line 459:         tags=[RunTag(\"tag_key\", \"\")],",
                "// vulnerable line: 460: )",
                "// Line 461:     assert {\"param_key\": \"\"}.items() <= mlflow_client.get_run(run_id).data.params.items()",
                "// Line 462:     assert {\"tag_key\": \"\"}.items() <= mlflow_client.get_run(run_id).data.tags.items()",
                "// Line 463: ",
                "// Line 464: ",
                "// Line 465: def test_set_tag_validation(mlflow_client):",
                "// Line 466:     experiment_id = mlflow_client.create_experiment(\"tags validation\")",
                "// Line 467:     created_run = mlflow_client.create_run(experiment_id)",
                "// Line 468:     run_id = created_run.info.run_id",
                "// Line 469: ",
                "// Line 470:     def assert_bad_request(payload, expected_error_message):",
                "// Line 471:         response = _send_rest_tracking_post_request(",
                "// Line 472:             mlflow_client.tracking_uri,",
                "// Line 473:             \"/api/2.0/mlflow/runs/set-tag\",",
                "// Line 474:             payload,",
                "// vulnerable line: 475: )",
                "// vulnerable line: 476: assert response.status_code == 400",
                "// Line 477:         assert expected_error_message in response.text",
                "// Line 478: ",
                "// Line 479:     assert_bad_request(",
                "// Line 480:         {",
                "// Line 481:             \"run_id\": 31,",
                "// Line 482:             \"key\": \"tag\",",
                "// Line 483:             \"value\": 41,",
                "// vulnerable line: 484: },",
                "// Line 485:         \"Invalid value 31 for parameter 'run_id' supplied\",",
                "// vulnerable line: 486: )",
                "// Line 487:     assert_bad_request(",
                "// Line 488:         {",
                "// Line 489:             \"run_id\": run_id,",
                "// Line 490:             \"key\": \"param\",",
                "// Line 491:             \"value\": 41,",
                "// vulnerable line: 492: },",
                "// Line 493:         \"Invalid value 41 for parameter 'value' supplied\",",
                "// vulnerable line: 494: )",
                "// Line 495:     assert_bad_request(",
                "// Line 496:         {",
                "// Line 497:             \"run_id\": run_id,",
                "// Line 498:             # Missing key",
                "// Line 499:             \"value\": \"value\",",
                "// vulnerable line: 500: },",
                "// Line 501:         \"Missing value for required parameter 'key'\",",
                "// vulnerable line: 502: )",
                "// Line 503: ",
                "// Line 504:     response = _send_rest_tracking_post_request(",
                "// Line 505:         mlflow_client.tracking_uri,",
                "// Line 506:         \"/api/2.0/mlflow/runs/set-tag\",",
                "// Line 507:         {",
                "// Line 508:             \"run_uuid\": run_id,",
                "// Line 509:             \"key\": \"key\",",
                "// Line 510:             \"value\": \"value\",",
                "// vulnerable line: 511: },",
                "// vulnerable line: 512: )",
                "// vulnerable line: 513: assert response.status_code == 200",
                "// Line 514: ",
                "// Line 515: ",
                "// Line 516: def test_path_validation(mlflow_client):",
                "// Line 517:     experiment_id = mlflow_client.create_experiment(\"tags validation\")",
                "// Line 518:     created_run = mlflow_client.create_run(experiment_id)",
                "// Line 519:     run_id = created_run.info.run_id",
                "// Line 520:     invalid_path = \"../path\"",
                "// Line 521: ",
                "// Line 522:     def assert_response(resp):",
                "// Line 523:         assert resp.status_code == 400",
                "// Line 524:         assert response.json() == {",
                "// Line 525:             \"error_code\": \"INVALID_PARAMETER_VALUE\",",
                "// Line 526:             \"message\": \"Invalid path\",",
                "// Line 527:         }",
                "// Line 528: ",
                "// Line 529:     response = requests.get(",
                "// Line 530:         f\"{mlflow_client.tracking_uri}/api/2.0/mlflow/artifacts/list\",",
                "// Line 531:         params={\"run_id\": run_id, \"path\": invalid_path},",
                "// vulnerable line: 532: )",
                "// Line 533:     assert_response(response)",
                "// Line 534: ",
                "// Line 535:     response = requests.get(",
                "// Line 536:         f\"{mlflow_client.tracking_uri}/get-artifact\",",
                "// Line 537:         params={\"run_id\": run_id, \"path\": invalid_path},",
                "// vulnerable line: 538: )",
                "// Line 539:     assert_response(response)",
                "// Line 540: ",
                "// Line 541:     response = requests.get(",
                "// Line 542:         f\"{mlflow_client.tracking_uri}//model-versions/get-artifact\",",
                "// Line 543:         params={\"name\": \"model\", \"version\": 1, \"path\": invalid_path},",
                "// vulnerable line: 544: )",
                "// Line 545:     assert_response(response)",
                "// Line 546: ",
                "// Line 547: ",
                "// Line 548: def test_set_experiment_tag(mlflow_client):",
                "// Line 549:     experiment_id = mlflow_client.create_experiment(\"SetExperimentTagTest\")",
                "// Line 550:     mlflow_client.set_experiment_tag(experiment_id, \"dataset\", \"imagenet1K\")",
                "// Line 551:     experiment = mlflow_client.get_experiment(experiment_id)",
                "// Line 552:     assert \"dataset\" in experiment.tags",
                "// Line 553:     assert experiment.tags[\"dataset\"] == \"imagenet1K\"",
                "// Line 554:     # test that updating a tag works",
                "// Line 575:     experiment = mlflow_client.get_experiment(experiment_id)",
                "// Line 576:     assert \"multiline tag\" in experiment.tags",
                "// Line 577:     assert experiment.tags[\"multiline tag\"] == \"value2",
                "// Line 578: value2",
                "// Line 579: value2\"",
                "// Line 580: ",
                "// Line 581: ",
                "// Line 582: def test_set_experiment_tag_with_empty_string_as_value(mlflow_client):",
                "// Line 583:     experiment_id = mlflow_client.create_experiment(",
                "// Line 584:         test_set_experiment_tag_with_empty_string_as_value.__name__",
                "// vulnerable line: 585: )",
                "// Line 586:     mlflow_client.set_experiment_tag(experiment_id, \"tag_key\", \"\")",
                "// Line 587:     assert {\"tag_key\": \"\"}.items() <= mlflow_client.get_experiment(experiment_id).tags.items()",
                "// Line 588: ",
                "// Line 589: ",
                "// Line 590: def test_delete_tag(mlflow_client):",
                "// Line 591:     experiment_id = mlflow_client.create_experiment(\"DeleteTagExperiment\")",
                "// Line 592:     created_run = mlflow_client.create_run(experiment_id)",
                "// Line 593:     run_id = created_run.info.run_id",
                "// Line 594:     mlflow_client.log_metric(run_id, key=\"metric\", value=123.456, timestamp=789, step=2)",
                "// Line 595:     mlflow_client.log_metric(run_id, key=\"stepless-metric\", value=987.654, timestamp=321)",
                "// Line 612: ",
                "// Line 613: def test_log_batch(mlflow_client):",
                "// Line 614:     experiment_id = mlflow_client.create_experiment(\"Batch em up\")",
                "// Line 615:     created_run = mlflow_client.create_run(experiment_id)",
                "// Line 616:     run_id = created_run.info.run_id",
                "// Line 617:     mlflow_client.log_batch(",
                "// Line 618:         run_id=run_id,",
                "// Line 619:         metrics=[Metric(\"metric\", 123.456, 789, 3)],",
                "// Line 620:         params=[Param(\"param\", \"value\")],",
                "// Line 621:         tags=[RunTag(\"taggity\", \"do-dah\")],",
                "// vulnerable line: 622: )",
                "// Line 623:     run = mlflow_client.get_run(run_id)",
                "// Line 624:     assert run.data.metrics.get(\"metric\") == 123.456",
                "// Line 625:     assert run.data.params.get(\"param\") == \"value\"",
                "// Line 626:     assert run.data.tags.get(\"taggity\") == \"do-dah\"",
                "// Line 627:     metric_history = mlflow_client.get_metric_history(run_id, \"metric\")",
                "// Line 628:     assert len(metric_history) == 1",
                "// Line 629:     metric = metric_history[0]",
                "// Line 630:     assert metric.key == \"metric\"",
                "// Line 631:     assert metric.value == 123.456",
                "// Line 632:     assert metric.timestamp == 789",
                "// Line 636: def test_log_batch_validation(mlflow_client):",
                "// Line 637:     experiment_id = mlflow_client.create_experiment(\"log_batch validation\")",
                "// Line 638:     created_run = mlflow_client.create_run(experiment_id)",
                "// Line 639:     run_id = created_run.info.run_id",
                "// Line 640: ",
                "// Line 641:     def assert_bad_request(payload, expected_error_message):",
                "// Line 642:         response = _send_rest_tracking_post_request(",
                "// Line 643:             mlflow_client.tracking_uri,",
                "// Line 644:             \"/api/2.0/mlflow/runs/log-batch\",",
                "// Line 645:             payload,",
                "// vulnerable line: 646: )",
                "// vulnerable line: 647: assert response.status_code == 400",
                "// Line 648:         assert expected_error_message in response.text",
                "// Line 649: ",
                "// Line 650:     for request_parameter in [\"metrics\", \"params\", \"tags\"]:",
                "// Line 651:         assert_bad_request(",
                "// Line 652:             {",
                "// Line 653:                 \"run_id\": run_id,",
                "// Line 654:                 request_parameter: \"foo\",",
                "// vulnerable line: 655: },",
                "// Line 656:             f\"Invalid value foo for parameter '{request_parameter}' supplied\",",
                "// vulnerable line: 657: )",
                "// Line 658: ",
                "// Line 659:     ## Should 400 if missing timestamp",
                "// Line 660:     assert_bad_request(",
                "// Line 661:         {\"run_id\": run_id, \"metrics\": [{\"key\": \"mae\", \"value\": 2.5}]},",
                "// Line 662:         \"Invalid value [{'key': 'mae', 'value': 2.5}] for parameter 'metrics' supplied\",",
                "// vulnerable line: 663: )",
                "// Line 664: ",
                "// Line 665:     ## Should 200 if timestamp provided but step is not",
                "// Line 666:     response = _send_rest_tracking_post_request(",
                "// Line 667:         mlflow_client.tracking_uri,",
                "// Line 668:         \"/api/2.0/mlflow/runs/log-batch\",",
                "// Line 669:         {\"run_id\": run_id, \"metrics\": [{\"key\": \"mae\", \"value\": 2.5, \"timestamp\": 123456789}]},",
                "// vulnerable line: 670: )",
                "// Line 671: ",
                "// vulnerable line: 672: assert response.status_code == 200",
                "// Line 673: ",
                "// Line 674: ",
                "// Line 675: @pytest.mark.allow_infer_pip_requirements_fallback",
                "// Line 676: def test_log_model(mlflow_client):",
                "// Line 677:     experiment_id = mlflow_client.create_experiment(\"Log models\")",
                "// Line 678:     with TempDir(chdr=True):",
                "// Line 679:         model_paths = [f\"model/path/{i}\" for i in range(3)]",
                "// Line 680:         mlflow.set_tracking_uri(mlflow_client.tracking_uri)",
                "// Line 681:         with mlflow.start_run(experiment_id=experiment_id) as run:",
                "// Line 682:             for i, m in enumerate(model_paths):",
                "// Line 683:                 mlflow.pyfunc.log_model(m, loader_module=\"mlflow.pyfunc\")",
                "// Line 684:                 mlflow.pyfunc.save_model(",
                "// Line 685:                     m,",
                "// Line 686:                     mlflow_model=Model(artifact_path=m, run_id=run.info.run_id),",
                "// Line 687:                     loader_module=\"mlflow.pyfunc\",",
                "// vulnerable line: 688: )",
                "// Line 689:                 model = Model.load(os.path.join(m, \"MLmodel\"))",
                "// Line 690:                 run = mlflow.get_run(run.info.run_id)",
                "// Line 691:                 tag = run.data.tags[\"mlflow.log-model.history\"]",
                "// Line 692:                 models = json.loads(tag)",
                "// Line 693:                 model.utc_time_created = models[i][\"utc_time_created\"]",
                "// Line 694: ",
                "// Line 695:                 history_model_meta = models[i].copy()",
                "// Line 696:                 original_model_uuid = history_model_meta.pop(\"model_uuid\")",
                "// Line 697:                 model_meta = model.to_dict().copy()",
                "// Line 698:                 new_model_uuid = model_meta.pop(\"model_uuid\")",
                "// Line 744:     mlflow_client.log_artifacts(run_id, src_dir, \"dir\")",
                "// Line 745: ",
                "// Line 746:     root_artifacts_list = mlflow_client.list_artifacts(run_id)",
                "// Line 747:     assert {a.path for a in root_artifacts_list} == {\"my.file\", \"dir\"}",
                "// Line 748: ",
                "// Line 749:     dir_artifacts_list = mlflow_client.list_artifacts(run_id, \"dir\")",
                "// Line 750:     assert {a.path for a in dir_artifacts_list} == {\"dir/my.file\"}",
                "// Line 751: ",
                "// Line 752:     all_artifacts = download_artifacts(",
                "// Line 753:         run_id=run_id, artifact_path=\".\", tracking_uri=mlflow_client.tracking_uri",
                "// vulnerable line: 754: )",
                "// Line 755:     with open(f\"{all_artifacts}/my.file\") as f:",
                "// Line 756:         assert f.read() == \"Hello, World!\"",
                "// Line 757:     with open(f\"{all_artifacts}/dir/my.file\") as f:",
                "// Line 758:         assert f.read() == \"Hello, World!\"",
                "// Line 759: ",
                "// Line 760:     dir_artifacts = download_artifacts(",
                "// Line 761:         run_id=run_id, artifact_path=\"dir\", tracking_uri=mlflow_client.tracking_uri",
                "// vulnerable line: 762: )",
                "// Line 763:     with open(f\"{dir_artifacts}/my.file\") as f:",
                "// Line 764:         assert f.read() == \"Hello, World!\"",
                "// Line 765: ",
                "// Line 766: ",
                "// Line 767: def test_search_pagination(mlflow_client):",
                "// Line 768:     experiment_id = mlflow_client.create_experiment(\"search_pagination\")",
                "// Line 769:     runs = [mlflow_client.create_run(experiment_id, start_time=1).info.run_id for _ in range(0, 10)]",
                "// Line 770:     runs = sorted(runs)",
                "// Line 771:     result = mlflow_client.search_runs([experiment_id], max_results=4, page_token=None)",
                "// Line 772:     assert [r.info.run_id for r in result] == runs[0:4]",
                "// Line 862: def test_get_metric_history_bulk_rejects_invalid_requests(mlflow_client):",
                "// Line 863:     def assert_response(resp, message_part):",
                "// Line 864:         assert resp.status_code == 400",
                "// Line 865:         response_json = resp.json()",
                "// Line 866:         assert response_json.get(\"error_code\") == \"INVALID_PARAMETER_VALUE\"",
                "// Line 867:         assert message_part in response_json.get(\"message\", \"\")",
                "// Line 868: ",
                "// Line 869:     response_no_run_ids_field = requests.get(",
                "// Line 870:         f\"{mlflow_client.tracking_uri}/ajax-api/2.0/mlflow/metrics/get-history-bulk\",",
                "// Line 871:         params={\"metric_key\": \"key\"},",
                "// vulnerable line: 872: )",
                "// Line 873:     assert_response(",
                "// Line 874:         response_no_run_ids_field,",
                "// Line 875:         \"GetMetricHistoryBulk request must specify at least one run_id\",",
                "// vulnerable line: 876: )",
                "// Line 877: ",
                "// Line 878:     response_empty_run_ids = requests.get(",
                "// Line 879:         f\"{mlflow_client.tracking_uri}/ajax-api/2.0/mlflow/metrics/get-history-bulk\",",
                "// Line 880:         params={\"run_id\": [], \"metric_key\": \"key\"},",
                "// vulnerable line: 881: )",
                "// Line 882:     assert_response(",
                "// Line 883:         response_empty_run_ids,",
                "// Line 884:         \"GetMetricHistoryBulk request must specify at least one run_id\",",
                "// vulnerable line: 885: )",
                "// Line 886: ",
                "// Line 887:     response_too_many_run_ids = requests.get(",
                "// Line 888:         f\"{mlflow_client.tracking_uri}/ajax-api/2.0/mlflow/metrics/get-history-bulk\",",
                "// Line 889:         params={\"run_id\": [f\"id_{i}\" for i in range(1000)], \"metric_key\": \"key\"},",
                "// vulnerable line: 890: )",
                "// Line 891:     assert_response(",
                "// Line 892:         response_too_many_run_ids,",
                "// Line 893:         \"GetMetricHistoryBulk request cannot specify more than\",",
                "// vulnerable line: 894: )",
                "// Line 895: ",
                "// Line 896:     response_no_metric_key_field = requests.get(",
                "// Line 897:         f\"{mlflow_client.tracking_uri}/ajax-api/2.0/mlflow/metrics/get-history-bulk\",",
                "// Line 898:         params={\"run_id\": [\"123\"]},",
                "// vulnerable line: 899: )",
                "// Line 900:     assert_response(",
                "// Line 901:         response_no_metric_key_field,",
                "// Line 902:         \"GetMetricHistoryBulk request must specify a metric_key\",",
                "// vulnerable line: 903: )",
                "// Line 904: ",
                "// Line 905: ",
                "// Line 906: def test_get_metric_history_bulk_returns_expected_metrics_in_expected_order(mlflow_client):",
                "// Line 907:     experiment_id = mlflow_client.create_experiment(\"get metric history bulk\")",
                "// Line 908:     created_run1 = mlflow_client.create_run(experiment_id)",
                "// Line 909:     run_id1 = created_run1.info.run_id",
                "// Line 910:     created_run2 = mlflow_client.create_run(experiment_id)",
                "// Line 911:     run_id2 = created_run2.info.run_id",
                "// Line 912:     created_run3 = mlflow_client.create_run(experiment_id)",
                "// Line 913:     run_id3 = created_run3.info.run_id",
                "// Line 932:     ]",
                "// Line 933:     for metric in metricB_history:",
                "// Line 934:         mlflow_client.log_metric(run_id1, **metric)",
                "// Line 935:         metric_for_run2 = dict(metric)",
                "// Line 936:         metric_for_run2[\"value\"] += 1.0",
                "// Line 937:         mlflow_client.log_metric(run_id2, **metric_for_run2)",
                "// Line 938: ",
                "// Line 939:     response_run1_metricA = requests.get(",
                "// Line 940:         f\"{mlflow_client.tracking_uri}/ajax-api/2.0/mlflow/metrics/get-history-bulk\",",
                "// Line 941:         params={\"run_id\": [run_id1], \"metric_key\": \"metricA\"},",
                "// vulnerable line: 942: )",
                "// Line 943:     assert response_run1_metricA.status_code == 200",
                "// Line 944:     assert response_run1_metricA.json().get(\"metrics\") == [",
                "// Line 945:         {**metric, \"run_id\": run_id1} for metric in metricA_history",
                "// Line 946:     ]",
                "// Line 947: ",
                "// Line 948:     response_run2_metricB = requests.get(",
                "// Line 949:         f\"{mlflow_client.tracking_uri}/ajax-api/2.0/mlflow/metrics/get-history-bulk\",",
                "// Line 950:         params={\"run_id\": [run_id2], \"metric_key\": \"metricB\"},",
                "// vulnerable line: 951: )",
                "// Line 952:     assert response_run2_metricB.status_code == 200",
                "// Line 953:     assert response_run2_metricB.json().get(\"metrics\") == [",
                "// Line 954:         {**metric, \"run_id\": run_id2, \"value\": metric[\"value\"] + 1.0} for metric in metricB_history",
                "// Line 955:     ]",
                "// Line 956: ",
                "// Line 957:     response_run1_run2_metricA = requests.get(",
                "// Line 958:         f\"{mlflow_client.tracking_uri}/ajax-api/2.0/mlflow/metrics/get-history-bulk\",",
                "// Line 959:         params={\"run_id\": [run_id1, run_id2], \"metric_key\": \"metricA\"},",
                "// vulnerable line: 960: )",
                "// Line 961:     assert response_run1_run2_metricA.status_code == 200",
                "// Line 962:     assert response_run1_run2_metricA.json().get(\"metrics\") == sorted(",
                "// Line 963:         [{**metric, \"run_id\": run_id1} for metric in metricA_history]",
                "// Line 964:         + [",
                "// Line 965:             {**metric, \"run_id\": run_id2, \"value\": metric[\"value\"] + 1.0}",
                "// Line 966:             for metric in metricA_history",
                "// Line 967:         ],",
                "// Line 968:         key=lambda metric: metric[\"run_id\"],",
                "// vulnerable line: 969: )",
                "// Line 970: ",
                "// Line 971:     response_run1_run2_run_3_metricB = requests.get(",
                "// Line 972:         f\"{mlflow_client.tracking_uri}/ajax-api/2.0/mlflow/metrics/get-history-bulk\",",
                "// Line 973:         params={\"run_id\": [run_id1, run_id2, run_id3], \"metric_key\": \"metricB\"},",
                "// vulnerable line: 974: )",
                "// Line 975:     assert response_run1_run2_run_3_metricB.status_code == 200",
                "// Line 976:     assert response_run1_run2_run_3_metricB.json().get(\"metrics\") == sorted(",
                "// Line 977:         [{**metric, \"run_id\": run_id1} for metric in metricB_history]",
                "// Line 978:         + [",
                "// Line 979:             {**metric, \"run_id\": run_id2, \"value\": metric[\"value\"] + 1.0}",
                "// Line 980:             for metric in metricB_history",
                "// Line 981:         ],",
                "// Line 982:         key=lambda metric: metric[\"run_id\"],",
                "// vulnerable line: 983: )",
                "// Line 984: ",
                "// Line 985: ",
                "// Line 986: def test_get_metric_history_bulk_respects_max_results(mlflow_client):",
                "// Line 987:     experiment_id = mlflow_client.create_experiment(\"get metric history bulk\")",
                "// Line 988:     run_id = mlflow_client.create_run(experiment_id).info.run_id",
                "// Line 989:     max_results = 2",
                "// Line 990: ",
                "// Line 991:     metricA_history = [",
                "// Line 992:         {\"key\": \"metricA\", \"timestamp\": 1, \"step\": 2, \"value\": 10.0},",
                "// Line 993:         {\"key\": \"metricA\", \"timestamp\": 1, \"step\": 3, \"value\": 11.0},",
                "// Line 994:         {\"key\": \"metricA\", \"timestamp\": 1, \"step\": 3, \"value\": 12.0},",
                "// Line 995:         {\"key\": \"metricA\", \"timestamp\": 2, \"step\": 3, \"value\": 12.0},",
                "// Line 996:     ]",
                "// Line 997:     for metric in metricA_history:",
                "// Line 998:         mlflow_client.log_metric(run_id, **metric)",
                "// Line 999: ",
                "// Line 1000:     response_limited = requests.get(",
                "// Line 1001:         f\"{mlflow_client.tracking_uri}/ajax-api/2.0/mlflow/metrics/get-history-bulk\",",
                "// Line 1002:         params={\"run_id\": [run_id], \"metric_key\": \"metricA\", \"max_results\": max_results},",
                "// vulnerable line: 1003: )",
                "// Line 1004:     assert response_limited.status_code == 200",
                "// Line 1005:     assert response_limited.json().get(\"metrics\") == [",
                "// Line 1006:         {**metric, \"run_id\": run_id} for metric in metricA_history[:max_results]",
                "// Line 1007:     ]",
                "// Line 1008: ",
                "// Line 1009: ",
                "// Line 1010: def test_get_metric_history_bulk_calls_optimized_impl_when_expected(tmp_path):",
                "// Line 1011:     from mlflow.server.handlers import get_metric_history_bulk_handler",
                "// Line 1012: ",
                "// Line 1013:     path = path_to_local_file_uri(str(tmp_path.joinpath(\"sqlalchemy.db\")))",
                "// Line 1031: ",
                "// Line 1032:     with mock.patch(",
                "// Line 1033:         \"mlflow.server.handlers._get_tracking_store\", return_value=mock_store",
                "// Line 1034:     ), flask_app.test_request_context() as mock_context:",
                "// Line 1035:         run_ids = [str(i) for i in range(10)]",
                "// Line 1036:         mock_context.request.args = MockRequestArgs(",
                "// Line 1037:             {",
                "// Line 1038:                 \"run_id\": run_ids,",
                "// Line 1039:                 \"metric_key\": \"mock_key\",",
                "// Line 1040:             }",
                "// vulnerable line: 1041: )",
                "// Line 1042: ",
                "// Line 1043:         get_metric_history_bulk_handler()",
                "// Line 1044: ",
                "// Line 1045:         mock_store.get_metric_history_bulk.assert_called_once_with(",
                "// Line 1046:             run_ids=run_ids,",
                "// Line 1047:             metric_key=\"mock_key\",",
                "// Line 1048:             max_results=25000,",
                "// vulnerable line: 1049: )",
                "// Line 1050: ",
                "// Line 1051: ",
                "// Line 1052: def test_search_dataset_handler_rejects_invalid_requests(mlflow_client):",
                "// Line 1053:     def assert_response(resp, message_part):",
                "// Line 1054:         assert resp.status_code == 400",
                "// Line 1055:         response_json = resp.json()",
                "// Line 1056:         assert response_json.get(\"error_code\") == \"INVALID_PARAMETER_VALUE\"",
                "// Line 1057:         assert message_part in response_json.get(\"message\", \"\")",
                "// Line 1058: ",
                "// Line 1059:     response_no_experiment_id_field = requests.post(",
                "// Line 1060:         f\"{mlflow_client.tracking_uri}/ajax-api/2.0/mlflow/experiments/search-datasets\",",
                "// Line 1061:         json={},",
                "// vulnerable line: 1062: )",
                "// Line 1063:     assert_response(",
                "// Line 1064:         response_no_experiment_id_field,",
                "// Line 1065:         \"SearchDatasets request must specify at least one experiment_id.\",",
                "// vulnerable line: 1066: )",
                "// Line 1067: ",
                "// Line 1068:     response_empty_experiment_id_field = requests.post(",
                "// Line 1069:         f\"{mlflow_client.tracking_uri}/ajax-api/2.0/mlflow/experiments/search-datasets\",",
                "// Line 1070:         json={\"experiment_ids\": []},",
                "// vulnerable line: 1071: )",
                "// Line 1072:     assert_response(",
                "// Line 1073:         response_empty_experiment_id_field,",
                "// Line 1074:         \"SearchDatasets request must specify at least one experiment_id.\",",
                "// vulnerable line: 1075: )",
                "// Line 1076: ",
                "// Line 1077:     response_too_many_experiment_ids = requests.post(",
                "// Line 1078:         f\"{mlflow_client.tracking_uri}/ajax-api/2.0/mlflow/experiments/search-datasets\",",
                "// Line 1079:         json={\"experiment_ids\": [f\"id_{i}\" for i in range(1000)]},",
                "// vulnerable line: 1080: )",
                "// Line 1081:     assert_response(",
                "// Line 1082:         response_too_many_experiment_ids,",
                "// Line 1083:         \"SearchDatasets request cannot specify more than\",",
                "// vulnerable line: 1084: )",
                "// Line 1085: ",
                "// Line 1086: ",
                "// Line 1087: def test_search_dataset_handler_returns_expected_results(mlflow_client):",
                "// Line 1088:     experiment_id = mlflow_client.create_experiment(\"log inputs test\")",
                "// Line 1089:     created_run = mlflow_client.create_run(experiment_id)",
                "// Line 1090:     run_id = created_run.info.run_id",
                "// Line 1091: ",
                "// Line 1092:     dataset1 = Dataset(",
                "// Line 1093:         name=\"name1\",",
                "// Line 1094:         digest=\"digest1\",",
                "// Line 1095:         source_type=\"source_type1\",",
                "// Line 1096:         source=\"source1\",",
                "// vulnerable line: 1097: )",
                "// Line 1098:     dataset_inputs1 = [",
                "// Line 1099:         DatasetInput(",
                "// Line 1100:             dataset=dataset1, tags=[InputTag(key=MLFLOW_DATASET_CONTEXT, value=\"training\")]",
                "// vulnerable line: 1101: )",
                "// Line 1102:     ]",
                "// Line 1103:     mlflow_client.log_inputs(run_id, dataset_inputs1)",
                "// Line 1104: ",
                "// vulnerable line: 1105: response = requests.post(",
                "// Line 1106:         f\"{mlflow_client.tracking_uri}/ajax-api/2.0/mlflow/experiments/search-datasets\",",
                "// Line 1107:         json={\"experiment_ids\": [experiment_id]},",
                "// vulnerable line: 1108: )",
                "// Line 1109:     expected = {",
                "// Line 1110:         \"experiment_id\": experiment_id,",
                "// Line 1111:         \"name\": \"name1\",",
                "// Line 1112:         \"digest\": \"digest1\",",
                "// Line 1113:         \"context\": \"training\",",
                "// Line 1114:     }",
                "// Line 1115: ",
                "// vulnerable line: 1116: assert response.status_code == 200",
                "// Line 1117:     assert response.json().get(\"dataset_summaries\") == [expected]",
                "// Line 1118: ",
                "// Line 1119: ",
                "// Line 1120: def test_create_model_version_with_path_source(mlflow_client):",
                "// Line 1121:     name = \"model\"",
                "// vulnerable line: 1122: mlflow_client.create_registered_model(name)",
                "// vulnerable line: 1123: exp_id = mlflow_client.create_experiment(\"test\")",
                "// vulnerable line: 1124: run = mlflow_client.create_run(experiment_id=exp_id)",
                "// Line 1125: ",
                "// vulnerable line: 1126: response = requests.post(",
                "// vulnerable line: 1127: f\"{mlflow_client.tracking_uri}/api/2.0/mlflow/model-versions/create\",",
                "// vulnerable line: 1128: json={",
                "// vulnerable line: 1129: \"name\": name,",
                "// Line 1130:             \"source\": run.info.artifact_uri[len(\"file://\") :],",
                "// vulnerable line: 1131: \"run_id\": run.info.run_id,",
                "// vulnerable line: 1132: },",
                "// vulnerable line: 1133: )",
                "// vulnerable line: 1134: assert response.status_code == 200",
                "// Line 1135: ",
                "// Line 1136:     # run_id is not specified",
                "// vulnerable line: 1137: response = requests.post(",
                "// vulnerable line: 1138: f\"{mlflow_client.tracking_uri}/api/2.0/mlflow/model-versions/create\",",
                "// vulnerable line: 1139: json={",
                "// vulnerable line: 1140: \"name\": name,",
                "// Line 1141:             \"source\": run.info.artifact_uri[len(\"file://\") :],",
                "// vulnerable line: 1142: },",
                "// vulnerable line: 1143: )",
                "// vulnerable line: 1144: assert response.status_code == 400",
                "// Line 1145:     assert \"To use a local path as a model version\" in response.json()[\"message\"]",
                "// Line 1146: ",
                "// Line 1147:     # run_id is specified but source is not in the run's artifact directory",
                "// vulnerable line: 1148: response = requests.post(",
                "// vulnerable line: 1149: f\"{mlflow_client.tracking_uri}/api/2.0/mlflow/model-versions/create\",",
                "// vulnerable line: 1150: json={",
                "// vulnerable line: 1151: \"name\": name,",
                "// Line 1152:             \"source\": \"/tmp\",",
                "// vulnerable line: 1153: \"run_id\": run.info.run_id,",
                "// vulnerable line: 1154: },",
                "// vulnerable line: 1155: )",
                "// vulnerable line: 1156: assert response.status_code == 400",
                "// Line 1157:     assert \"To use a local path as a model version\" in response.json()[\"message\"]",
                "// Line 1158: ",
                "// Line 1159: ",
                "// Line 1160: def test_create_model_version_with_non_local_source(mlflow_client):",
                "// Line 1161:     name = \"model\"",
                "// vulnerable line: 1162: mlflow_client.create_registered_model(name)",
                "// vulnerable line: 1163: exp_id = mlflow_client.create_experiment(\"test\")",
                "// vulnerable line: 1164: run = mlflow_client.create_run(experiment_id=exp_id)",
                "// Line 1165: ",
                "// vulnerable line: 1166: response = requests.post(",
                "// vulnerable line: 1167: f\"{mlflow_client.tracking_uri}/api/2.0/mlflow/model-versions/create\",",
                "// vulnerable line: 1168: json={",
                "// vulnerable line: 1169: \"name\": name,",
                "// Line 1170:             \"source\": run.info.artifact_uri[len(\"file://\") :],",
                "// vulnerable line: 1171: \"run_id\": run.info.run_id,",
                "// vulnerable line: 1172: },",
                "// vulnerable line: 1173: )",
                "// vulnerable line: 1174: assert response.status_code == 200",
                "// Line 1175: ",
                "// Line 1176:     # Test that remote uri's supplied as a source with absolute paths work fine",
                "// vulnerable line: 1177: response = requests.post(",
                "// vulnerable line: 1178: f\"{mlflow_client.tracking_uri}/api/2.0/mlflow/model-versions/create\",",
                "// vulnerable line: 1179: json={",
                "// vulnerable line: 1180: \"name\": name,",
                "// Line 1181:             \"source\": \"mlflow-artifacts:/models\",",
                "// vulnerable line: 1182: \"run_id\": run.info.run_id,",
                "// vulnerable line: 1183: },",
                "// vulnerable line: 1184: )",
                "// vulnerable line: 1185: assert response.status_code == 200",
                "// Line 1186: ",
                "// Line 1187:     # A single trailing slash",
                "// vulnerable line: 1188: response = requests.post(",
                "// vulnerable line: 1189: f\"{mlflow_client.tracking_uri}/api/2.0/mlflow/model-versions/create\",",
                "// vulnerable line: 1190: json={",
                "// vulnerable line: 1191: \"name\": name,",
                "// Line 1192:             \"source\": \"mlflow-artifacts:/models/\",",
                "// vulnerable line: 1193: \"run_id\": run.info.run_id,",
                "// vulnerable line: 1194: },",
                "// vulnerable line: 1195: )",
                "// vulnerable line: 1196: assert response.status_code == 200",
                "// Line 1197: ",
                "// Line 1198:     # Multiple trailing slashes",
                "// vulnerable line: 1199: response = requests.post(",
                "// vulnerable line: 1200: f\"{mlflow_client.tracking_uri}/api/2.0/mlflow/model-versions/create\",",
                "// vulnerable line: 1201: json={",
                "// vulnerable line: 1202: \"name\": name,",
                "// Line 1203:             \"source\": \"mlflow-artifacts:/models///\",",
                "// vulnerable line: 1204: \"run_id\": run.info.run_id,",
                "// vulnerable line: 1205: },",
                "// vulnerable line: 1206: )",
                "// vulnerable line: 1207: assert response.status_code == 200",
                "// Line 1208: ",
                "// Line 1209:     # Multiple slashes",
                "// vulnerable line: 1210: response = requests.post(",
                "// vulnerable line: 1211: f\"{mlflow_client.tracking_uri}/api/2.0/mlflow/model-versions/create\",",
                "// vulnerable line: 1212: json={",
                "// vulnerable line: 1213: \"name\": name,",
                "// Line 1214:             \"source\": \"mlflow-artifacts:/models/foo///bar\",",
                "// vulnerable line: 1215: \"run_id\": run.info.run_id,",
                "// vulnerable line: 1216: },",
                "// vulnerable line: 1217: )",
                "// vulnerable line: 1218: assert response.status_code == 200",
                "// Line 1219: ",
                "// vulnerable line: 1220: response = requests.post(",
                "// vulnerable line: 1221: f\"{mlflow_client.tracking_uri}/api/2.0/mlflow/model-versions/create\",",
                "// vulnerable line: 1222: json={",
                "// vulnerable line: 1223: \"name\": name,",
                "// Line 1224:             \"source\": \"mlflow-artifacts://host:9000/models\",",
                "// vulnerable line: 1225: \"run_id\": run.info.run_id,",
                "// vulnerable line: 1226: },",
                "// vulnerable line: 1227: )",
                "// vulnerable line: 1228: assert response.status_code == 200",
                "// Line 1229: ",
                "// Line 1230:     # Multiple dots",
                "// vulnerable line: 1231: response = requests.post(",
                "// vulnerable line: 1232: f\"{mlflow_client.tracking_uri}/api/2.0/mlflow/model-versions/create\",",
                "// vulnerable line: 1233: json={",
                "// vulnerable line: 1234: \"name\": name,",
                "// Line 1235:             \"source\": \"mlflow-artifacts://host:9000/models/artifact/..../\",",
                "// vulnerable line: 1236: \"run_id\": run.info.run_id,",
                "// vulnerable line: 1237: },",
                "// vulnerable line: 1238: )",
                "// vulnerable line: 1239: assert response.status_code == 200",
                "// Line 1240: ",
                "// Line 1241:     # Test that invalid remote uri's cannot be created",
                "// vulnerable line: 1242: response = requests.post(",
                "// vulnerable line: 1243: f\"{mlflow_client.tracking_uri}/api/2.0/mlflow/model-versions/create\",",
                "// vulnerable line: 1244: json={",
                "// vulnerable line: 1245: \"name\": name,",
                "// Line 1246:             \"source\": \"mlflow-artifacts://host:9000/models/../../../\",",
                "// vulnerable line: 1247: \"run_id\": run.info.run_id,",
                "// vulnerable line: 1248: },",
                "// vulnerable line: 1249: )",
                "// vulnerable line: 1250: assert response.status_code == 400",
                "// Line 1251:     assert \"If supplying a source as an http, https,\" in response.json()[\"message\"]",
                "// Line 1252: ",
                "// vulnerable line: 1253: response = requests.post(",
                "// vulnerable line: 1254: f\"{mlflow_client.tracking_uri}/api/2.0/mlflow/model-versions/create\",",
                "// vulnerable line: 1255: json={",
                "// vulnerable line: 1256: \"name\": name,",
                "// Line 1257:             \"source\": \"http://host:9000/models/../../../\",",
                "// vulnerable line: 1258: \"run_id\": run.info.run_id,",
                "// vulnerable line: 1259: },",
                "// vulnerable line: 1260: )",
                "// vulnerable line: 1261: assert response.status_code == 400",
                "// Line 1262:     assert \"If supplying a source as an http, https,\" in response.json()[\"message\"]",
                "// Line 1263: ",
                "// vulnerable line: 1264: response = requests.post(",
                "// vulnerable line: 1265: f\"{mlflow_client.tracking_uri}/api/2.0/mlflow/model-versions/create\",",
                "// vulnerable line: 1266: json={",
                "// vulnerable line: 1267: \"name\": name,",
                "// Line 1268:             \"source\": \"https://host/api/2.0/mlflow-artifacts/artifacts/../../../\",",
                "// vulnerable line: 1269: \"run_id\": run.info.run_id,",
                "// vulnerable line: 1270: },",
                "// vulnerable line: 1271: )",
                "// vulnerable line: 1272: assert response.status_code == 400",
                "// Line 1273:     assert \"If supplying a source as an http, https,\" in response.json()[\"message\"]",
                "// Line 1274: ",
                "// vulnerable line: 1275: response = requests.post(",
                "// vulnerable line: 1276: f\"{mlflow_client.tracking_uri}/api/2.0/mlflow/model-versions/create\",",
                "// vulnerable line: 1277: json={",
                "// vulnerable line: 1278: \"name\": name,",
                "// Line 1279:             \"source\": \"s3a://my_bucket/api/2.0/mlflow-artifacts/artifacts/../../../\",",
                "// vulnerable line: 1280: \"run_id\": run.info.run_id,",
                "// vulnerable line: 1281: },",
                "// vulnerable line: 1282: )",
                "// vulnerable line: 1283: assert response.status_code == 400",
                "// Line 1284:     assert \"If supplying a source as an http, https,\" in response.json()[\"message\"]",
                "// Line 1285: ",
                "// vulnerable line: 1286: response = requests.post(",
                "// vulnerable line: 1287: f\"{mlflow_client.tracking_uri}/api/2.0/mlflow/model-versions/create\",",
                "// vulnerable line: 1288: json={",
                "// vulnerable line: 1289: \"name\": name,",
                "// Line 1290:             \"source\": \"ftp://host:8888/api/2.0/mlflow-artifacts/artifacts/../../../\",",
                "// vulnerable line: 1291: \"run_id\": run.info.run_id,",
                "// vulnerable line: 1292: },",
                "// vulnerable line: 1293: )",
                "// vulnerable line: 1294: assert response.status_code == 400",
                "// Line 1295:     assert \"If supplying a source as an http, https,\" in response.json()[\"message\"]",
                "// Line 1296: ",
                "// vulnerable line: 1297: response = requests.post(",
                "// vulnerable line: 1298: f\"{mlflow_client.tracking_uri}/api/2.0/mlflow/model-versions/create\",",
                "// vulnerable line: 1299: json={",
                "// vulnerable line: 1300: \"name\": name,",
                "// Line 1301:             \"source\": \"mlflow-artifacts://host:9000/models/..%2f..%2fartifacts\",",
                "// vulnerable line: 1302: \"run_id\": run.info.run_id,",
                "// vulnerable line: 1303: },",
                "// vulnerable line: 1304: )",
                "// vulnerable line: 1305: assert response.status_code == 400",
                "// Line 1306:     assert \"If supplying a source as an http, https,\" in response.json()[\"message\"]",
                "// Line 1307: ",
                "// vulnerable line: 1308: response = requests.post(",
                "// vulnerable line: 1309: f\"{mlflow_client.tracking_uri}/api/2.0/mlflow/model-versions/create\",",
                "// vulnerable line: 1310: json={",
                "// vulnerable line: 1311: \"name\": name,",
                "// Line 1312:             \"source\": \"mlflow-artifacts://host:9000/models/artifact%00\",",
                "// vulnerable line: 1313: \"run_id\": run.info.run_id,",
                "// vulnerable line: 1314: },",
                "// vulnerable line: 1315: )",
                "// vulnerable line: 1316: assert response.status_code == 400",
                "// Line 1317:     assert \"If supplying a source as an http, https,\" in response.json()[\"message\"]",
                "// Line 1318: ",
                "// Line 1319: ",
                "// Line 1320: def test_create_model_version_with_file_uri(mlflow_client):",
                "// vulnerable line: 1321: name = \"test\"",
                "// vulnerable line: 1322: mlflow_client.create_registered_model(name)",
                "// vulnerable line: 1323: exp_id = mlflow_client.create_experiment(\"test\")",
                "// vulnerable line: 1324: run = mlflow_client.create_run(experiment_id=exp_id)",
                "// Line 1325:     assert run.info.artifact_uri.startswith(\"file://\")",
                "// vulnerable line: 1326: response = requests.post(",
                "// vulnerable line: 1327: f\"{mlflow_client.tracking_uri}/api/2.0/mlflow/model-versions/create\",",
                "// vulnerable line: 1328: json={",
                "// vulnerable line: 1329: \"name\": name,",
                "// Line 1330:             \"source\": run.info.artifact_uri,",
                "// vulnerable line: 1331: \"run_id\": run.info.run_id,",
                "// vulnerable line: 1332: },",
                "// vulnerable line: 1333: )",
                "// vulnerable line: 1334: assert response.status_code == 200",
                "// Line 1335: ",
                "// vulnerable line: 1336: response = requests.post(",
                "// vulnerable line: 1337: f\"{mlflow_client.tracking_uri}/api/2.0/mlflow/model-versions/create\",",
                "// vulnerable line: 1338: json={",
                "// vulnerable line: 1339: \"name\": name,",
                "// Line 1340:             \"source\": f\"{run.info.artifact_uri}/model\",",
                "// vulnerable line: 1341: \"run_id\": run.info.run_id,",
                "// vulnerable line: 1342: },",
                "// vulnerable line: 1343: )",
                "// vulnerable line: 1344: assert response.status_code == 200",
                "// Line 1345: ",
                "// vulnerable line: 1346: response = requests.post(",
                "// vulnerable line: 1347: f\"{mlflow_client.tracking_uri}/api/2.0/mlflow/model-versions/create\",",
                "// vulnerable line: 1348: json={",
                "// vulnerable line: 1349: \"name\": name,",
                "// Line 1350:             \"source\": f\"{run.info.artifact_uri}/.\",",
                "// vulnerable line: 1351: \"run_id\": run.info.run_id,",
                "// vulnerable line: 1352: },",
                "// vulnerable line: 1353: )",
                "// vulnerable line: 1354: assert response.status_code == 200",
                "// Line 1355: ",
                "// vulnerable line: 1356: response = requests.post(",
                "// vulnerable line: 1357: f\"{mlflow_client.tracking_uri}/api/2.0/mlflow/model-versions/create\",",
                "// vulnerable line: 1358: json={",
                "// vulnerable line: 1359: \"name\": name,",
                "// Line 1360:             \"source\": f\"{run.info.artifact_uri}/model/..\",",
                "// vulnerable line: 1361: \"run_id\": run.info.run_id,",
                "// vulnerable line: 1362: },",
                "// vulnerable line: 1363: )",
                "// vulnerable line: 1364: assert response.status_code == 200",
                "// Line 1365: ",
                "// Line 1366:     # run_id is not specified",
                "// vulnerable line: 1367: response = requests.post(",
                "// vulnerable line: 1368: f\"{mlflow_client.tracking_uri}/api/2.0/mlflow/model-versions/create\",",
                "// vulnerable line: 1369: json={",
                "// vulnerable line: 1370: \"name\": name,",
                "// Line 1371:             \"source\": run.info.artifact_uri,",
                "// vulnerable line: 1372: },",
                "// vulnerable line: 1373: )",
                "// vulnerable line: 1374: assert response.status_code == 400",
                "// Line 1375:     assert \"To use a local path as a model version\" in response.json()[\"message\"]",
                "// Line 1376: ",
                "// Line 1377:     # run_id is specified but source is not in the run's artifact directory",
                "// vulnerable line: 1378: response = requests.post(",
                "// vulnerable line: 1379: f\"{mlflow_client.tracking_uri}/api/2.0/mlflow/model-versions/create\",",
                "// vulnerable line: 1380: json={",
                "// vulnerable line: 1381: \"name\": name,",
                "// Line 1382:             \"source\": \"file:///tmp\",",
                "// vulnerable line: 1383: },",
                "// vulnerable line: 1384: )",
                "// vulnerable line: 1385: assert response.status_code == 400",
                "// Line 1386:     assert \"To use a local path as a model version\" in response.json()[\"message\"]",
                "// Line 1387: ",
                "// vulnerable line: 1388: response = requests.post(",
                "// vulnerable line: 1389: f\"{mlflow_client.tracking_uri}/api/2.0/mlflow/model-versions/create\",",
                "// vulnerable line: 1390: json={",
                "// vulnerable line: 1391: \"name\": name,",
                "// vulnerable line: 1392: \"source\": \"file://123.456.789.123/path/to/source\",",
                "// vulnerable line: 1393: \"run_id\": run.info.run_id,",
                "// vulnerable line: 1394: },",
                "// vulnerable line: 1395: )",
                "// vulnerable line: 1396: assert response.status_code == 400",
                "// vulnerable line: 1397: assert \"MLflow tracking server doesn't allow\" in response.json()[\"message\"]",
                "// Line 1398: ",
                "// Line 1399: ",
                "// vulnerable line: 1400: def test_create_model_version_with_file_uri_env_var(tmp_path):",
                "// vulnerable line: 1401: backend_uri = tmp_path.joinpath(\"file\").as_uri()",
                "// vulnerable line: 1402: with _init_server(",
                "// vulnerable line: 1403: backend_uri,",
                "// vulnerable line: 1404: root_artifact_uri=tmp_path.as_uri(),",
                "// vulnerable line: 1405: extra_env={\"MLFLOW_ALLOW_FILE_URI_AS_MODEL_VERSION_SOURCE\": \"true\"},",
                "// vulnerable line: 1406: ) as url:",
                "// vulnerable line: 1407: mlflow_client = MlflowClient(url)",
                "// Line 1408: ",
                "// vulnerable line: 1409: name = \"test\"",
                "// vulnerable line: 1410: mlflow_client.create_registered_model(name)",
                "// vulnerable line: 1411: exp_id = mlflow_client.create_experiment(\"test\")",
                "// vulnerable line: 1412: run = mlflow_client.create_run(experiment_id=exp_id)",
                "// vulnerable line: 1413: response = requests.post(",
                "// vulnerable line: 1414: f\"{mlflow_client.tracking_uri}/api/2.0/mlflow/model-versions/create\",",
                "// vulnerable line: 1415: json={",
                "// vulnerable line: 1416: \"name\": name,",
                "// vulnerable line: 1417: \"source\": \"file://123.456.789.123/path/to/source\",",
                "// vulnerable line: 1418: \"run_id\": run.info.run_id,",
                "// vulnerable line: 1419: },",
                "// vulnerable line: 1420: )",
                "// vulnerable line: 1421: assert response.status_code == 200",
                "// Line 1422: ",
                "// Line 1423: ",
                "// Line 1424: def test_logging_model_with_local_artifact_uri(mlflow_client):",
                "// Line 1425:     from sklearn.linear_model import LogisticRegression",
                "// Line 1426: ",
                "// Line 1427:     mlflow.set_tracking_uri(mlflow_client.tracking_uri)",
                "// Line 1428:     with mlflow.start_run() as run:",
                "// Line 1429:         assert run.info.artifact_uri.startswith(\"file://\")",
                "// Line 1430:         mlflow.sklearn.log_model(LogisticRegression(), \"model\", registered_model_name=\"rmn\")",
                "// Line 1431:         mlflow.pyfunc.load_model(\"models:/rmn/1\")",
                "// Line 1468: def test_log_inputs(mlflow_client):",
                "// Line 1469:     experiment_id = mlflow_client.create_experiment(\"log inputs test\")",
                "// Line 1470:     created_run = mlflow_client.create_run(experiment_id)",
                "// Line 1471:     run_id = created_run.info.run_id",
                "// Line 1472: ",
                "// Line 1473:     dataset1 = Dataset(",
                "// Line 1474:         name=\"name1\",",
                "// Line 1475:         digest=\"digest1\",",
                "// Line 1476:         source_type=\"source_type1\",",
                "// Line 1477:         source=\"source1\",",
                "// vulnerable line: 1478: )",
                "// Line 1479:     dataset_inputs1 = [DatasetInput(dataset=dataset1, tags=[InputTag(key=\"tag1\", value=\"value1\")])]",
                "// Line 1480: ",
                "// Line 1481:     mlflow_client.log_inputs(run_id, dataset_inputs1)",
                "// Line 1482:     run = mlflow_client.get_run(run_id)",
                "// Line 1483:     assert len(run.inputs.dataset_inputs) == 1",
                "// Line 1484: ",
                "// Line 1485:     assert isinstance(run.inputs, RunInputs)",
                "// Line 1486:     assert isinstance(run.inputs.dataset_inputs[0], DatasetInput)",
                "// Line 1487:     assert isinstance(run.inputs.dataset_inputs[0].dataset, Dataset)",
                "// Line 1488:     assert run.inputs.dataset_inputs[0].dataset.name == \"name1\"",
                "// Line 1497: def test_log_inputs_validation(mlflow_client):",
                "// Line 1498:     experiment_id = mlflow_client.create_experiment(\"log inputs validation\")",
                "// Line 1499:     created_run = mlflow_client.create_run(experiment_id)",
                "// Line 1500:     run_id = created_run.info.run_id",
                "// Line 1501: ",
                "// Line 1502:     def assert_bad_request(payload, expected_error_message):",
                "// Line 1503:         response = _send_rest_tracking_post_request(",
                "// Line 1504:             mlflow_client.tracking_uri,",
                "// Line 1505:             \"/api/2.0/mlflow/runs/log-inputs\",",
                "// Line 1506:             payload,",
                "// vulnerable line: 1507: )",
                "// vulnerable line: 1508: assert response.status_code == 400",
                "// Line 1509:         assert expected_error_message in response.text",
                "// Line 1510: ",
                "// Line 1511:     dataset = Dataset(",
                "// Line 1512:         name=\"name1\",",
                "// Line 1513:         digest=\"digest1\",",
                "// Line 1514:         source_type=\"source_type1\",",
                "// Line 1515:         source=\"source1\",",
                "// vulnerable line: 1516: )",
                "// Line 1517:     tags = [InputTag(key=\"tag1\", value=\"value1\")]",
                "// Line 1518:     dataset_inputs = [message_to_json(DatasetInput(dataset=dataset, tags=tags).to_proto())]",
                "// Line 1519:     assert_bad_request(",
                "// Line 1520:         {",
                "// Line 1521:             \"datasets\": dataset_inputs,",
                "// vulnerable line: 1522: },",
                "// Line 1523:         \"Missing value for required parameter 'run_id'\",",
                "// vulnerable line: 1524: )",
                "// Line 1525:     assert_bad_request(",
                "// Line 1526:         {",
                "// Line 1527:             \"run_id\": run_id,",
                "// vulnerable line: 1528: },",
                "// Line 1529:         \"Missing value for required parameter 'datasets'\",",
                "// vulnerable line: 1530: )",
                "// Line 1531: ",
                "// Line 1532: ",
                "// Line 1533: def test_update_run_name_without_changing_status(mlflow_client):",
                "// Line 1534:     experiment_id = mlflow_client.create_experiment(\"update run name\")",
                "// Line 1535:     created_run = mlflow_client.create_run(experiment_id)",
                "// Line 1536:     mlflow_client.set_terminated(created_run.info.run_id, \"FINISHED\")",
                "// Line 1537: ",
                "// Line 1538:     mlflow_client.update_run(created_run.info.run_id, name=\"name_abc\")",
                "// Line 1539:     updated_run_info = mlflow_client.get_run(created_run.info.run_id).info",
                "// Line 1540:     assert updated_run_info.run_name == \"name_abc\"",
                "// Line 1541:     assert updated_run_info.status == \"FINISHED\"",
                "// Line 1542: ",
                "// Line 1543: ",
                "// Line 1544: def test_create_promptlab_run_handler_rejects_invalid_requests(mlflow_client):",
                "// Line 1545:     def assert_response(resp, message_part):",
                "// Line 1546:         assert resp.status_code == 400",
                "// Line 1547:         response_json = resp.json()",
                "// Line 1548:         assert response_json.get(\"error_code\") == \"INVALID_PARAMETER_VALUE\"",
                "// Line 1549:         assert message_part in response_json.get(\"message\", \"\")",
                "// Line 1550: ",
                "// vulnerable line: 1551: response = requests.post(",
                "// Line 1552:         f\"{mlflow_client.tracking_uri}/ajax-api/2.0/mlflow/runs/create-promptlab-run\",",
                "// Line 1553:         json={},",
                "// vulnerable line: 1554: )",
                "// Line 1555:     assert_response(",
                "// Line 1556:         response,",
                "// Line 1557:         \"CreatePromptlabRun request must specify experiment_id.\",",
                "// vulnerable line: 1558: )",
                "// Line 1559: ",
                "// vulnerable line: 1560: response = requests.post(",
                "// Line 1561:         f\"{mlflow_client.tracking_uri}/ajax-api/2.0/mlflow/runs/create-promptlab-run\",",
                "// Line 1562:         json={\"experiment_id\": \"123\"},",
                "// vulnerable line: 1563: )",
                "// Line 1564:     assert_response(",
                "// Line 1565:         response,",
                "// Line 1566:         \"CreatePromptlabRun request must specify prompt_template.\",",
                "// vulnerable line: 1567: )",
                "// Line 1568: ",
                "// vulnerable line: 1569: response = requests.post(",
                "// Line 1570:         f\"{mlflow_client.tracking_uri}/ajax-api/2.0/mlflow/runs/create-promptlab-run\",",
                "// Line 1571:         json={\"experiment_id\": \"123\", \"prompt_template\": \"my_prompt_template\"},",
                "// vulnerable line: 1572: )",
                "// Line 1573:     assert_response(",
                "// Line 1574:         response,",
                "// Line 1575:         \"CreatePromptlabRun request must specify prompt_parameters.\",",
                "// vulnerable line: 1576: )",
                "// Line 1577: ",
                "// vulnerable line: 1578: response = requests.post(",
                "// Line 1579:         f\"{mlflow_client.tracking_uri}/ajax-api/2.0/mlflow/runs/create-promptlab-run\",",
                "// vulnerable line: 1580: json={",
                "// Line 1581:             \"experiment_id\": \"123\",",
                "// Line 1582:             \"prompt_template\": \"my_prompt_template\",",
                "// Line 1583:             \"prompt_parameters\": [{\"key\": \"my_key\", \"value\": \"my_value\"}],",
                "// vulnerable line: 1584: },",
                "// vulnerable line: 1585: )",
                "// Line 1586:     assert_response(",
                "// Line 1587:         response,",
                "// Line 1588:         \"CreatePromptlabRun request must specify model_route.\",",
                "// vulnerable line: 1589: )",
                "// Line 1590: ",
                "// vulnerable line: 1591: response = requests.post(",
                "// Line 1592:         f\"{mlflow_client.tracking_uri}/ajax-api/2.0/mlflow/runs/create-promptlab-run\",",
                "// vulnerable line: 1593: json={",
                "// Line 1594:             \"experiment_id\": \"123\",",
                "// Line 1595:             \"prompt_template\": \"my_prompt_template\",",
                "// Line 1596:             \"prompt_parameters\": [{\"key\": \"my_key\", \"value\": \"my_value\"}],",
                "// Line 1597:             \"model_route\": \"my_route\",",
                "// vulnerable line: 1598: },",
                "// vulnerable line: 1599: )",
                "// Line 1600:     assert_response(",
                "// Line 1601:         response,",
                "// Line 1602:         \"CreatePromptlabRun request must specify model_input.\",",
                "// vulnerable line: 1603: )",
                "// Line 1604: ",
                "// vulnerable line: 1605: response = requests.post(",
                "// Line 1606:         f\"{mlflow_client.tracking_uri}/ajax-api/2.0/mlflow/runs/create-promptlab-run\",",
                "// vulnerable line: 1607: json={",
                "// Line 1608:             \"experiment_id\": \"123\",",
                "// Line 1609:             \"prompt_template\": \"my_prompt_template\",",
                "// Line 1610:             \"prompt_parameters\": [{\"key\": \"my_key\", \"value\": \"my_value\"}],",
                "// Line 1611:             \"model_route\": \"my_route\",",
                "// Line 1612:             \"model_input\": \"my_input\",",
                "// vulnerable line: 1613: },",
                "// vulnerable line: 1614: )",
                "// Line 1615:     assert_response(",
                "// Line 1616:         response,",
                "// Line 1617:         \"CreatePromptlabRun request must specify mlflow_version.\",",
                "// vulnerable line: 1618: )",
                "// Line 1619: ",
                "// vulnerable line: 1620: response = requests.post(",
                "// Line 1621:         f\"{mlflow_client.tracking_uri}/ajax-api/2.0/mlflow/runs/create-promptlab-run\",",
                "// vulnerable line: 1622: json={",
                "// Line 1623:             \"experiment_id\": \"123\",",
                "// Line 1624:             \"prompt_template\": \"my_prompt_template\",",
                "// Line 1625:             \"prompt_parameters\": [{\"key\": \"my_key\", \"value\": \"my_value\"}],",
                "// Line 1626:             \"model_route\": \"my_route\",",
                "// Line 1627:             \"model_input\": \"my_input\",",
                "// Line 1628:             \"mlflow_version\": \"1.0.0\",",
                "// vulnerable line: 1629: },",
                "// vulnerable line: 1630: )",
                "// Line 1631: ",
                "// Line 1632: ",
                "// Line 1633: def test_create_promptlab_run_handler_returns_expected_results(mlflow_client):",
                "// Line 1634:     experiment_id = mlflow_client.create_experiment(\"log inputs test\")",
                "// Line 1635: ",
                "// vulnerable line: 1636: response = requests.post(",
                "// Line 1637:         f\"{mlflow_client.tracking_uri}/ajax-api/2.0/mlflow/runs/create-promptlab-run\",",
                "// vulnerable line: 1638: json={",
                "// Line 1639:             \"experiment_id\": experiment_id,",
                "// Line 1640:             \"run_name\": \"my_run_name\",",
                "// Line 1641:             \"prompt_template\": \"my_prompt_template\",",
                "// Line 1642:             \"prompt_parameters\": [{\"key\": \"my_key\", \"value\": \"my_value\"}],",
                "// Line 1643:             \"model_route\": \"my_route\",",
                "// Line 1644:             \"model_parameters\": [{\"key\": \"temperature\", \"value\": \"0.1\"}],",
                "// Line 1645:             \"model_input\": \"my_input\",",
                "// Line 1646:             \"model_output\": \"my_output\",",
                "// Line 1647:             \"model_output_parameters\": [{\"key\": \"latency\", \"value\": \"100\"}],",
                "// Line 1648:             \"mlflow_version\": \"1.0.0\",",
                "// Line 1649:             \"user_id\": \"username\",",
                "// Line 1650:             \"start_time\": 456,",
                "// vulnerable line: 1651: },",
                "// vulnerable line: 1652: )",
                "// vulnerable line: 1653: assert response.status_code == 200",
                "// Line 1654:     run_json = response.json()",
                "// Line 1655:     assert run_json[\"run\"][\"info\"][\"run_name\"] == \"my_run_name\"",
                "// Line 1656:     assert run_json[\"run\"][\"info\"][\"experiment_id\"] == experiment_id",
                "// Line 1657:     assert run_json[\"run\"][\"info\"][\"user_id\"] == \"username\"",
                "// Line 1658:     assert run_json[\"run\"][\"info\"][\"status\"] == \"FINISHED\"",
                "// Line 1659:     assert run_json[\"run\"][\"info\"][\"start_time\"] == 456",
                "// Line 1660: ",
                "// Line 1661:     assert {\"key\": \"model_route\", \"value\": \"my_route\"} in run_json[\"run\"][\"data\"][\"params\"]",
                "// Line 1662:     assert {\"key\": \"prompt_template\", \"value\": \"my_prompt_template\"} in run_json[\"run\"][\"data\"][",
                "// Line 1663:         \"params\"",
                "// Line 1673:     ][\"tags\"]",
                "// Line 1674: ",
                "// Line 1675: ",
                "// Line 1676: def test_gateway_proxy_handler_rejects_invalid_requests(mlflow_client):",
                "// Line 1677:     def assert_response(resp, message_part):",
                "// Line 1678:         assert resp.status_code == 400",
                "// Line 1679:         response_json = resp.json()",
                "// Line 1680:         assert response_json.get(\"error_code\") == \"INVALID_PARAMETER_VALUE\"",
                "// Line 1681:         assert message_part in response_json.get(\"message\", \"\")",
                "// Line 1682: ",
                "// vulnerable line: 1683: with _init_server(",
                "// Line 1684:         backend_uri=mlflow_client.tracking_uri,",
                "// Line 1685:         root_artifact_uri=mlflow_client.tracking_uri,",
                "// Line 1686:         extra_env={\"MLFLOW_DEPLOYMENTS_TARGET\": \"http://localhost:5001\"},",
                "// vulnerable line: 1687: ) as url:",
                "// Line 1688:         patched_client = MlflowClient(url)",
                "// Line 1689: ",
                "// vulnerable line: 1690: response = requests.post(",
                "// Line 1691:             f\"{patched_client.tracking_uri}/ajax-api/2.0/mlflow/gateway-proxy\",",
                "// Line 1692:             json={},",
                "// vulnerable line: 1693: )",
                "// Line 1694:         assert_response(",
                "// Line 1695:             response,",
                "// Line 1696:             \"Deployments proxy request must specify a gateway_path.\",",
                "// vulnerable line: 1697: )",
                "// Line 1698: ",
                "// Line 1699: ",
                "// Line 1700: def test_upload_artifact_handler_rejects_invalid_requests(mlflow_client):",
                "// Line 1701:     def assert_response(resp, message_part):",
                "// Line 1702:         assert resp.status_code == 400",
                "// Line 1703:         response_json = resp.json()",
                "// Line 1704:         assert response_json.get(\"error_code\") == \"INVALID_PARAMETER_VALUE\"",
                "// Line 1705:         assert message_part in response_json.get(\"message\", \"\")",
                "// Line 1706: ",
                "// Line 1707:     experiment_id = mlflow_client.create_experiment(\"upload_artifacts_test\")",
                "// Line 1708:     created_run = mlflow_client.create_run(experiment_id)",
                "// Line 1709: ",
                "// vulnerable line: 1710: response = requests.post(",
                "// Line 1711:         f\"{mlflow_client.tracking_uri}/ajax-api/2.0/mlflow/upload-artifact\", params={}",
                "// vulnerable line: 1712: )",
                "// Line 1713:     assert_response(response, \"Request must specify run_uuid.\")",
                "// Line 1714: ",
                "// vulnerable line: 1715: response = requests.post(",
                "// Line 1716:         f\"{mlflow_client.tracking_uri}/ajax-api/2.0/mlflow/upload-artifact\",",
                "// Line 1717:         params={",
                "// Line 1718:             \"run_uuid\": created_run.info.run_id,",
                "// vulnerable line: 1719: },",
                "// vulnerable line: 1720: )",
                "// Line 1721:     assert_response(response, \"Request must specify path.\")",
                "// Line 1722: ",
                "// vulnerable line: 1723: response = requests.post(",
                "// Line 1724:         f\"{mlflow_client.tracking_uri}/ajax-api/2.0/mlflow/upload-artifact\",",
                "// Line 1725:         params={\"run_uuid\": created_run.info.run_id, \"path\": \"\"},",
                "// vulnerable line: 1726: )",
                "// Line 1727:     assert_response(response, \"Request must specify path.\")",
                "// Line 1728: ",
                "// vulnerable line: 1729: response = requests.post(",
                "// Line 1730:         f\"{mlflow_client.tracking_uri}/ajax-api/2.0/mlflow/upload-artifact\",",
                "// Line 1731:         params={\"run_uuid\": created_run.info.run_id, \"path\": \"../test.txt\"},",
                "// vulnerable line: 1732: )",
                "// Line 1733:     assert_response(response, \"Invalid path\")",
                "// Line 1734: ",
                "// vulnerable line: 1735: response = requests.post(",
                "// Line 1736:         f\"{mlflow_client.tracking_uri}/ajax-api/2.0/mlflow/upload-artifact\",",
                "// Line 1737:         params={",
                "// Line 1738:             \"run_uuid\": created_run.info.run_id,",
                "// Line 1739:             \"path\": \"test.txt\",",
                "// vulnerable line: 1740: },",
                "// vulnerable line: 1741: )",
                "// Line 1742:     assert_response(response, \"Request must specify data.\")",
                "// Line 1743: ",
                "// Line 1744: ",
                "// Line 1745: def test_upload_artifact_handler(mlflow_client):",
                "// Line 1746:     experiment_id = mlflow_client.create_experiment(\"upload_artifacts_test\")",
                "// Line 1747:     created_run = mlflow_client.create_run(experiment_id)",
                "// Line 1748: ",
                "// vulnerable line: 1749: response = requests.post(",
                "// Line 1750:         f\"{mlflow_client.tracking_uri}/ajax-api/2.0/mlflow/upload-artifact\",",
                "// Line 1751:         params={",
                "// Line 1752:             \"run_uuid\": created_run.info.run_id,",
                "// Line 1753:             \"path\": \"test.txt\",",
                "// vulnerable line: 1754: },",
                "// Line 1755:         data=\"hello world\",",
                "// vulnerable line: 1756: )",
                "// vulnerable line: 1757: assert response.status_code == 200",
                "// Line 1758: ",
                "// Line 1759:     response = requests.get(",
                "// Line 1760:         f\"{mlflow_client.tracking_uri}/get-artifact\",",
                "// Line 1761:         params={",
                "// Line 1762:             \"run_uuid\": created_run.info.run_id,",
                "// Line 1763:             \"path\": \"test.txt\",",
                "// vulnerable line: 1764: },",
                "// vulnerable line: 1765: )",
                "// vulnerable line: 1766: assert response.status_code == 200",
                "// Line 1767:     assert response.text == \"hello world\""
            ]
        },
        {
            "filename_of_changes": "test_sqlalchemy_store.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 3735:                 drive = f\"{drive}/\"",
                "// Line 3736:             assert exp.artifact_location == expected_artifact_uri_format.format(",
                "// Line 3737:                 e=exp_id, cwd=cwd, drive=drive",
                "// Line 3738:             )",
                "// Line 3739: ",
                "// Line 3740: ",
                "// Line 3741: @pytest.mark.skipif(not is_windows(), reason=\"This test only passes on Windows\")",
                "// Line 3742: @pytest.mark.parametrize(",
                "// Line 3743:     (\"input_uri\", \"expected_uri\"),",
                "// Line 3744:     [",
                "// vulnerable line: 3745: (\"file://my_server/my_path/my_sub_path\", \"file://my_server/my_path/my_sub_path/{e}\"),",
                "// Line 3746:         (\"path/to/local/folder\", \"file://{cwd}/path/to/local/folder/{e}\"),",
                "// Line 3747:         (\"/path/to/local/folder\", \"file:///{drive}path/to/local/folder/{e}\"),",
                "// Line 3748:         (\"#path/to/local/folder?\", \"file://{cwd}/{e}#path/to/local/folder?\"),",
                "// Line 3749:         (\"file:path/to/local/folder\", \"file://{cwd}/path/to/local/folder/{e}\"),",
                "// Line 3750:         (\"file:///path/to/local/folder\", \"file:///{drive}path/to/local/folder/{e}\"),",
                "// Line 3751:         (",
                "// Line 3752:             \"file:path/to/local/folder?param=value\",",
                "// Line 3753:             \"file://{cwd}/path/to/local/folder/{e}?param=value\",",
                "// Line 3754:         ),",
                "// Line 3755:         (",
                "// Line 3838:             assert run.info.artifact_uri == expected_artifact_uri_format.format(",
                "// Line 3839:                 e=exp_id, r=run.info.run_id, cwd=cwd, drive=drive",
                "// Line 3840:             )",
                "// Line 3841: ",
                "// Line 3842: ",
                "// Line 3843: @pytest.mark.skipif(not is_windows(), reason=\"This test only passes on Windows\")",
                "// Line 3844: @pytest.mark.parametrize(",
                "// Line 3845:     (\"input_uri\", \"expected_uri\"),",
                "// Line 3846:     [",
                "// Line 3847:         (",
                "// vulnerable line: 3848: \"file://my_server/my_path/my_sub_path\",",
                "// vulnerable line: 3849: \"file://my_server/my_path/my_sub_path/{e}/{r}/artifacts\",",
                "// Line 3850:         ),",
                "// Line 3851:         (\"path/to/local/folder\", \"file://{cwd}/path/to/local/folder/{e}/{r}/artifacts\"),",
                "// Line 3852:         (\"/path/to/local/folder\", \"file:///{drive}path/to/local/folder/{e}/{r}/artifacts\"),",
                "// Line 3853:         (\"#path/to/local/folder?\", \"file://{cwd}/{e}/{r}/artifacts#path/to/local/folder?\"),",
                "// Line 3854:         (\"file:path/to/local/folder\", \"file://{cwd}/path/to/local/folder/{e}/{r}/artifacts\"),",
                "// Line 3855:         (",
                "// Line 3856:             \"file:///path/to/local/folder\",",
                "// Line 3857:             \"file:///{drive}path/to/local/folder/{e}/{r}/artifacts\",",
                "// Line 3858:         ),",
                "// Line 3859:         ("
            ]
        },
        {
            "filename_of_changes": "test_uri.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "5",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 96:     assert is_local_uri(\"file:///foo/mlruns\")",
                "// Line 97:     assert is_local_uri(\"file:foo/mlruns\")",
                "// Line 98:     assert is_local_uri(\"file://./mlruns\")",
                "// Line 99:     assert is_local_uri(\"file://localhost/mlruns\")",
                "// Line 100:     assert is_local_uri(\"file://localhost:5000/mlruns\")",
                "// Line 101:     assert is_local_uri(\"file://127.0.0.1/mlruns\")",
                "// Line 102:     assert is_local_uri(\"file://127.0.0.1:5000/mlruns\")",
                "// Line 103:     assert is_local_uri(\"//proc/self/root\")",
                "// Line 104:     assert is_local_uri(\"/proc/self/root\")",
                "// Line 105: ",
                "// vulnerable line: 106: assert not is_local_uri(\"file://myhostname/path/to/file\")",
                "// Line 107:     assert not is_local_uri(\"https://whatever\")",
                "// Line 108:     assert not is_local_uri(\"http://whatever\")",
                "// Line 109:     assert not is_local_uri(\"databricks\")",
                "// Line 110:     assert not is_local_uri(\"databricks:whatever\")",
                "// Line 111:     assert not is_local_uri(\"databricks://whatever\")",
                "// Line 112: ",
                "// Line 113: ",
                "// Line 114: @pytest.mark.skipif(not is_windows(), reason=\"Windows-only test\")",
                "// Line 115: def test_is_local_uri_windows():",
                "// Line 116:     assert is_local_uri(\"C:",
                "// Line 677:         drive = f\"{drive}/\"",
                "// Line 678:     assert resolve_uri_if_local(input_uri) == expected_uri.format(cwd=cwd, drive=drive)",
                "// Line 679: ",
                "// Line 680: ",
                "// Line 681: @pytest.mark.skipif(is_windows(), reason=\"This test fails on Windows\")",
                "// Line 682: @pytest.mark.parametrize(",
                "// Line 683:     (\"input_uri\", \"expected_uri\"),",
                "// Line 684:     [",
                "// Line 685:         (\"my/path\", \"{cwd}/my/path\"),",
                "// Line 686:         (\"#my/path?a=b\", \"{cwd}/#my/path?a=b\"),",
                "// vulnerable line: 687: (\"file://myhostname/my/path\", \"file://myhostname/my/path\"),",
                "// Line 688:         (\"file:///my/path\", \"file:///{drive}my/path\"),",
                "// Line 689:         (\"file:my/path\", \"file://{cwd}/my/path\"),",
                "// Line 690:         (\"/home/my/path\", \"/home/my/path\"),",
                "// Line 691:         (\"dbfs://databricks/a/b\", \"dbfs://databricks/a/b\"),",
                "// Line 692:         (\"s3://host/my/path\", \"s3://host/my/path\"),",
                "// Line 693:     ],",
                "// Line 694: )",
                "// Line 695: def test_resolve_uri_if_local(input_uri, expected_uri):",
                "// Line 696:     _assert_resolve_uri_if_local(input_uri, expected_uri)",
                "// Line 697: ",
                "// Line 698: ",
                "// Line 699: @pytest.mark.skipif(not is_windows(), reason=\"This test only passes on Windows\")",
                "// Line 700: @pytest.mark.parametrize(",
                "// Line 701:     (\"input_uri\", \"expected_uri\"),",
                "// Line 702:     [",
                "// Line 703:         (\"my/path\", \"file://{cwd}/my/path\"),",
                "// Line 704:         (\"#my/path?a=b\", \"file://{cwd}/#my/path?a=b\"),",
                "// vulnerable line: 705: (\"file://myhostname/my/path\", \"file://myhostname/my/path\"),",
                "// Line 706:         (\"file:///my/path\", \"file:///{drive}my/path\"),",
                "// Line 707:         (\"file:my/path\", \"file://{cwd}/my/path\"),",
                "// Line 708:         (\"/home/my/path\", \"file:///{drive}home/my/path\"),",
                "// Line 709:         (\"dbfs://databricks/a/b\", \"dbfs://databricks/a/b\"),",
                "// Line 710:         (\"s3://host/my/path\", \"s3://host/my/path\"),",
                "// Line 711:     ],",
                "// Line 712: )",
                "// Line 713: def test_resolve_uri_if_local_on_windows(input_uri, expected_uri):",
                "// Line 714:     _assert_resolve_uri_if_local(input_uri, expected_uri)",
                "// Line 715: "
            ]
        },
        {
            "filename_of_changes": "uri.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "13",
            "number_of_lines_deleted_vulnerable_to_cve": "5",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 27: def is_local_uri(uri, is_tracking_or_registry_uri=True):",
                "// Line 28:     \"\"\"",
                "// Line 29:     Returns true if the specified URI is a local file path (/foo or file:/foo).",
                "// Line 30: ",
                "// Line 31:     :param uri: The URI.",
                "// Line 32:     :param is_tracking_uri: Whether or not the specified URI is an MLflow Tracking or MLflow",
                "// Line 33:                             Model Registry URI. Examples of other URIs are MLflow artifact URIs,",
                "// Line 34:                             filesystem paths, etc.",
                "// Line 35:     \"\"\"",
                "// Line 36:     if uri == \"databricks\" and is_tracking_or_registry_uri:",
                "// vulnerable line: 37: return False",
                "// Line 38: ",
                "// Line 39:     if is_windows() and uri.startswith(\"\\\"):",
                "// Line 40:         # windows network drive path looks like: \"\\<server name>\\path\\...\"",
                "// vulnerable line: 41: return False",
                "// Line 42: ",
                "// Line 43:     parsed_uri = urllib.parse.urlparse(uri)",
                "// Line 44:     scheme = parsed_uri.scheme",
                "// Line 45:     if scheme == \"\":",
                "// Line 46:         return True",
                "// Line 47: ",
                "// vulnerable line: 48: if parsed_uri.hostname and not (",
                "// Line 49:         parsed_uri.hostname == \".\"",
                "// Line 50:         or parsed_uri.hostname.startswith(\"localhost\")",
                "// Line 51:         or parsed_uri.hostname.startswith(\"127.0.0.1\")",
                "// vulnerable line: 52: ):",
                "// vulnerable line: 53: return False",
                "// Line 54: ",
                "// Line 55:     if scheme == \"file\":",
                "// Line 56:         return True",
                "// Line 57: ",
                "// Line 58:     if is_windows() and len(scheme) == 1 and scheme.lower() == pathlib.Path(uri).drive.lower()[0]:",
                "// Line 59:         return True",
                "// Line 60: ",
                "// vulnerable line: 61: return False",
                "// Line 62: ",
                "// Line 63: ",
                "// Line 64: def is_file_uri(uri):",
                "// vulnerable line: 65: return urllib.parse.urlparse(uri).scheme == \"file\"",
                "// Line 66: ",
                "// Line 67: ",
                "// Line 68: def is_http_uri(uri):",
                "// Line 69:     scheme = urllib.parse.urlparse(uri).scheme",
                "// Line 70:     return scheme == \"http\" or scheme == \"https\"",
                "// Line 71: ",
                "// Line 72: ",
                "// Line 73: def is_databricks_uri(uri):",
                "// Line 74:     \"\"\"",
                "// Line 75:     Databricks URIs look like 'databricks' (default profile) or 'databricks://profile'",
                "// Line 336: ",
                "// Line 337: def is_databricks_model_registry_artifacts_uri(artifact_uri):",
                "// Line 338:     _MODEL_REGISTRY_ARTIFACT_URI = \"databricks/mlflow-registry/\"",
                "// Line 339:     artifact_uri_path = extract_and_normalize_path(artifact_uri)",
                "// Line 340:     return artifact_uri_path.startswith(_MODEL_REGISTRY_ARTIFACT_URI)",
                "// Line 341: ",
                "// Line 342: ",
                "// Line 343: def is_valid_dbfs_uri(uri):",
                "// Line 344:     parsed = urllib.parse.urlparse(uri)",
                "// Line 345:     if parsed.scheme != \"dbfs\":",
                "// vulnerable line: 346: return False",
                "// Line 347:     try:",
                "// Line 348:         db_profile_uri = get_databricks_profile_uri_from_artifact_uri(uri)",
                "// Line 349:     except MlflowException:",
                "// Line 350:         db_profile_uri = None",
                "// Line 351:     return not parsed.netloc or db_profile_uri is not None",
                "// Line 352: ",
                "// Line 353: ",
                "// Line 354: def dbfs_hdfs_uri_to_fuse_path(dbfs_uri):",
                "// Line 355:     \"\"\"",
                "// Line 356:     Converts the provided DBFS URI into a DBFS FUSE path",
                "// Line 443:         raise exc",
                "// Line 444: ",
                "// Line 445:     if is_file_uri(path):",
                "// Line 446:         path = local_file_uri_to_path(path)",
                "// Line 447:     if (",
                "// Line 448:         any((s in path) for s in _OS_ALT_SEPS)",
                "// Line 449:         or \"..\" in path.split(\"/\")",
                "// Line 450:         or pathlib.PureWindowsPath(path).is_absolute()",
                "// Line 451:         or pathlib.PurePosixPath(path).is_absolute()",
                "// Line 452:         or (is_windows() and len(path) >= 2 and path[1] == \":\")",
                "// vulnerable line: 453: ):",
                "// Line 454:         raise exc",
                "// Line 455: ",
                "// Line 456:     return path",
                "// Line 457: ",
                "// Line 458: ",
                "// Line 459: def validate_query_string(query):",
                "// Line 460:     query = _decode(query)",
                "// Line 461:     # Block query strings contain any traveral path (../) because they",
                "// Line 462:     # could be resolved as part of the path and allow path traversal.",
                "// Line 463:     if \"..\" in query:"
            ]
        }
    ]
}