{
    "cve_id": "CVE-2024-4536",
    "cve_description": "In Eclipse Dataspace Components from version 0.2.1 to 0.6.2, in the EDC Connector component ( https://github.com/eclipse-edc/Connector ), an attacker might obtain OAuth2 client secrets from the vault.\n\nIn Eclipse Dataspace Components from version 0.2.1 to 0.6.2, we have identified a security vulnerability in the EDC Connector component ( https://github.com/eclipse-edc/Connector ) regarding the OAuth2-protected data sink feature. When using a custom, OAuth2-protected data sink, the OAuth2-specific data address properties are resolved by the provider data plane. Problematically, the consumer-provided clientSecretKey, which indicates the OAuth2 client secret to retrieve from a secrets vault, is resolved in the context of the provider's vault, not the consumer. This secret's value is then sent to the tokenUrl, also consumer-controlled, as part of an OAuth2 client credentials grant. The returned access token is then sent as a bearer token to the data sink URL.\n\nThis feature is now disabled entirely, because not all code paths necessary for a successful realization were fully implemented.\n\n",
    "cve_publish_date": "2024-05-07T13:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "chore: removes OAuth2 capabilities from the data sink (#4152)\n\n* chore: removes OAuth2 capabilities from the data sink\r\n\r\n* pr remarks",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "DataPlaneHttpOauth2Extension.java",
            "code_language": "Java",
            "number_of_lines_added_for_mitigation": "0",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 51:     @Override",
                "// Line 52:     public String name() {",
                "// Line 53:         return NAME;",
                "// Line 54:     }",
                "// Line 55: ",
                "// Line 56:     @Override",
                "// Line 57:     public void initialize(ServiceExtensionContext context) {",
                "// Line 58:         var requestFactory = new Oauth2CredentialsRequestFactory(privateKeyResolver, clock, vault, context.getMonitor());",
                "// Line 59:         var oauth2ParamsDecorator = new Oauth2HttpRequestParamsDecorator(requestFactory, oauth2Client);",
                "// Line 60: ",
                "// vulnerable line: 61: paramsProvider.registerSinkDecorator(oauth2ParamsDecorator);",
                "// Line 62:         paramsProvider.registerSourceDecorator(oauth2ParamsDecorator);",
                "// Line 63:     }",
                "// Line 64: ",
                "// Line 65: }"
            ]
        }
    ]
}