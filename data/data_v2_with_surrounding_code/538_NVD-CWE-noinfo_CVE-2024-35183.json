{
    "cve_id": "CVE-2024-35183",
    "cve_description": "wolfictl is a command line tool for working with Wolfi. A git authentication issue in versions prior to 0.16.10 allows a local userâ€™s GitHub token to be sent to remote servers other than `github.com`. Most git-dependent functionality in wolfictl relies on its own `git` package, which contains centralized logic for implementing interactions with git repositories. Some of this functionality requires authentication in order to access private repositories. A central function `GetGitAuth` looks for a GitHub token in the environment variable `GITHUB_TOKEN` and returns it as an HTTP basic auth object to be used with the `github.com/go-git/go-git/v5` library. Most callers (direct or indirect) of `GetGitAuth` use the token to authenticate to github.com only; however, in some cases callers were passing this authentication without checking that the remote git repository was hosted on github.com. This behavior has existed in one form or another since commit 0d06e1578300327c212dda26a5ab31d09352b9d0 - committed January 25, 2023. This impacts anyone who ran the `wolfictl check update` commands with a Melange configuration that included a `git-checkout` directive step that referenced a git repository not hosted on github.com. This also impacts anyone who ran `wolfictl update <url>` with a remote URL outside of github.com. Additionally, these subcommands must have run with the `GITHUB_TOKEN` environment variable set to a valid GitHub token. Users should upgrade to version 0.16.10 to receive a patch.",
    "cve_publish_date": "2024-05-15T22:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "wolfictl update: use git auth when cloning melange config repo\n\nSigned-off-by: James Rawlings <jrawlings@chainguard.dev>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "update.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 8:     \"github.com/go-git/go-git/v5\"",
                "// Line 9: ",
                "// Line 10:     \"github.com/go-git/go-git/config\"",
                "// Line 11:     \"github.com/pkg/errors\"",
                "// Line 12: )",
                "// Line 13: ",
                "// Line 14: // Update will modify a .gitmodules file and perform a `git submodule update --remote`",
                "// Line 15: func Update(dir, owner, repo, version string, wt *git.Worktree) error {",
                "// Line 16: ",
                "// Line 17:     // update the .gitmodule config file",
                "// vulnerable line: 18: submodules, err := updateConfigfile(dir, owner, repo, version)",
                "// Line 19:     if err != nil {",
                "// Line 20:         return errors.Wrap(err, \"failed to update gitmodules file\")",
                "// Line 21:     }",
                "// Line 22: ",
                "// Line 23:     // git submodule update --remote",
                "// Line 24:     for _, submodule := range submodules {",
                "// Line 25:         err := updateSubmodules(submodule, wt)",
                "// Line 26:         if err != nil {",
                "// Line 27:             return errors.Wrap(err, \"failed to update gitmodules\")",
                "// Line 28:         }",
                "// Line 29:     }",
                "// Line 30:     return nil",
                "// Line 31: }",
                "// Line 32: ",
                "// vulnerable line: 33: func updateConfigfile(dir, owner, repo, version string) ([]string, error) {",
                "// Line 34:     var submodules []string",
                "// Line 35:     filename := filepath.Join(dir, \".gitmodules\")",
                "// Line 36:     data, err := os.ReadFile(filename)",
                "// Line 37: ",
                "// Line 38:     if err != nil {",
                "// Line 39:         return submodules, errors.Wrapf(err, \"failed to read gitmodules file %s\", filename)",
                "// Line 40:     }",
                "// Line 41: ",
                "// Line 42:     cfg := config.NewModules()",
                "// Line 43:     err = cfg.Unmarshal(data)"
            ]
        },
        {
            "filename_of_changes": "update.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "11",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 97:     tempDir, err := os.MkdirTemp(\"\", \"wolfictl\")",
                "// Line 98:     if err != nil {",
                "// Line 99:         return fmt.Errorf(\"failed to create temporary folder to clone package configs into: %w\", err)",
                "// Line 100:     }",
                "// Line 101:     if o.DryRun {",
                "// Line 102:         o.Logger.Printf(\"using working directory %s\", tempDir)",
                "// Line 103:     } else {",
                "// Line 104:         defer os.Remove(tempDir)",
                "// Line 105:     }",
                "// Line 106: ",
                "// vulnerable line: 107: repo, err := git.PlainClone(tempDir, false, &git.CloneOptions{",
                "// Line 108:         URL:      o.RepoURI,",
                "// Line 109:         Progress: os.Stdout,",
                "// vulnerable line: 110: })",
                "// Line 111:     if err != nil {",
                "// Line 112:         return fmt.Errorf(\"failed to clone repository %s into %s: %w\", o.RepoURI, tempDir, err)",
                "// Line 113:     }",
                "// Line 114: ",
                "// Line 115:     // first, let's get the melange package(s) from the target git repo, that we want to check for updates",
                "// Line 116:     o.PackageConfigs, err = melange.ReadPackageConfigs(o.PackageNames, tempDir)",
                "// Line 117:     if err != nil {",
                "// Line 118:         return fmt.Errorf(\"failed to get package configs: %w\", err)",
                "// Line 119:     }",
                "// Line 120: ",
                "// Line 360:     if err != nil {",
                "// Line 361:         return \"\", fmt.Errorf(\"failed to get git worktree: %w\", err)",
                "// Line 362:     }",
                "// Line 363: ",
                "// Line 364:     // make sure we are on the main branch to start with",
                "// Line 365:     ref := plumbing.ReferenceName(fmt.Sprintf(\"refs/heads/\" + o.DefaultBranch))",
                "// Line 366: ",
                "// Line 367:     err = worktree.Checkout(&git.CheckoutOptions{",
                "// Line 368:         Create: false,",
                "// Line 369:         Branch: ref,",
                "// vulnerable line: 370: })",
                "// Line 371:     if err != nil {",
                "// Line 372:         return \"\", fmt.Errorf(\"failed to checkout main: %w\", err)",
                "// Line 373:     }",
                "// Line 374: ",
                "// Line 375:     // create a unique branch to work from",
                "// Line 376:     ref = plumbing.ReferenceName(fmt.Sprintf(\"refs/heads/wolfictl-%v\", name))",
                "// Line 377:     err = worktree.Checkout(&git.CheckoutOptions{",
                "// Line 378:         Create: true,",
                "// Line 379:         Branch: ref,",
                "// vulnerable line: 380: })",
                "// Line 381: ",
                "// Line 382:     if err != nil {",
                "// Line 383:         return \"\", fmt.Errorf(\"failed to checkout to temporary branch: %w\", err)",
                "// Line 384:     }",
                "// Line 385: ",
                "// Line 386:     return ref, err",
                "// Line 387: }",
                "// Line 388: ",
                "// Line 389: // commits package update changes and creates a pull request",
                "// Line 390: func (o *Options) proposeChanges(repo *git.Repository, ref plumbing.ReferenceName, packageName, newVersion string) (string, error) {"
            ]
        },
        {
            "filename_of_changes": "update_test.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 3: import (",
                "// Line 4:     \"os\"",
                "// Line 5:     \"path/filepath\"",
                "// Line 6:     \"testing\"",
                "// Line 7: ",
                "// Line 8:     \"github.com/go-git/go-git/v5/config\"",
                "// Line 9: ",
                "// Line 10:     \"github.com/stretchr/testify/assert\"",
                "// Line 11: )",
                "// Line 12: ",
                "// vulnerable line: 13: func TestSubmodules_update(t *testing.T) {",
                "// Line 14: ",
                "// Line 15:     dir := t.TempDir()",
                "// Line 16: ",
                "// vulnerable line: 17: data, err := os.ReadFile(filepath.Join(\"testdata\", \".gitmodules\"))",
                "// Line 18:     assert.NoError(t, err)",
                "// Line 19: ",
                "// Line 20:     err = os.WriteFile(filepath.Join(dir, \".gitmodules\"), data, 0666)",
                "// Line 21:     assert.NoError(t, err)",
                "// Line 22: ",
                "// vulnerable line: 23: _, err = updateConfigfile(dir, \"foo\", \"bar\", \"v1.2.4\")",
                "// Line 24:     assert.NoError(t, err)",
                "// Line 25: ",
                "// Line 26:     data, err = os.ReadFile(filepath.Join(dir, \".gitmodules\"))",
                "// Line 27:     assert.NoError(t, err)",
                "// Line 28: ",
                "// Line 29:     cfg := config.NewModules()",
                "// Line 30:     err = cfg.Unmarshal(data)",
                "// Line 31: ",
                "// Line 32:     assert.Equal(t, \"v1.2.4\", cfg.Submodules[\"images/cheese/mount/bar\"].Branch)",
                "// Line 33:     assert.Equal(t, \"v1.2.4\", cfg.Submodules[\"images/wine/mount/bar\"].Branch)"
            ]
        }
    ]
}