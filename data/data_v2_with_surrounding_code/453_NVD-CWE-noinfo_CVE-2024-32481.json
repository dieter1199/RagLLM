{
    "cve_id": "CVE-2024-32481",
    "cve_description": "Vyper is a pythonic Smart Contract Language for the Ethereum virtual machine. Starting in version 0.3.8 and prior to version 0.4.0b1, when looping over a `range` of the form `range(start, start + N)`, if `start` is negative, the execution will always revert. This issue is caused by an incorrect assertion inserted by the code generation of the range `stmt.parse_For_range()`. The issue arises when `start` is signed, instead of using `sle`, `le` is used and `start` is interpreted as an unsigned integer for the comparison. If it is a negative number, its 255th bit is set to `1` and is hence interpreted as a very large unsigned integer making the assertion always fail. Any contract having a `range(start, start + N)` where `start` is a signed integer with the possibility for `start` to be negative is affected. If a call goes through the loop while supplying a negative `start` the execution will revert. Version 0.4.0b1 fixes the issue.",
    "cve_publish_date": "2024-04-25T17:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "feat: allow `range(x, y, bound=N)` (#3679)\n\n- allow range where both start and end arguments are variables, so long\r\n  as a bound is supplied\r\n\r\n- ban range expressions of the form `range(x, x + N)` since the new form\r\n  is cleaner and supersedes it.\r\n\r\n- also do a bit of refactoring of the codegen for range\r\n\r\n---------\r\n\r\nCo-authored-by: Charles Cooper <cooper.charles.m@gmail.com>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "exceptions.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 36:     def __init__(self, message=\"Error Message not found.\", *items):",
                "// Line 37:         \"\"\"",
                "// Line 38:         Exception initializer.",
                "// Line 39: ",
                "// Line 40:         Arguments",
                "// Line 41:         ---------",
                "// Line 42:         message : str",
                "// Line 43:             Error message to display with the exception.",
                "// Line 44:         *items : VyperNode | Tuple[str, VyperNode], optional",
                "// Line 45:             Vyper ast node(s), or tuple of (description, node) indicating where",
                "// vulnerable line: 46: the exception occured. Source annotations are generated in the order",
                "// Line 47:             the nodes are given.",
                "// Line 48: ",
                "// Line 49:             A single tuple of (lineno, col_offset) is also understood to support",
                "// Line 50:             the old API, but new exceptions should not use this approach.",
                "// Line 51:         \"\"\"",
                "// Line 52:         self.message = message",
                "// Line 53:         self.lineno = None",
                "// Line 54:         self.col_offset = None",
                "// Line 55:         self.annotations = None",
                "// Line 56: "
            ]
        },
        {
            "filename_of_changes": "ir_node.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "6",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 437:         if self.value == \"deploy\":",
                "// Line 438:             children = [self.args[0], self.args[2]]",
                "// Line 439:         for arg in children:",
                "// Line 440:             s = arg.unique_symbols",
                "// Line 441:             non_uniques = ret.intersection(s)",
                "// Line 442:             assert len(non_uniques) == 0, f\"non-unique symbols {non_uniques}\"",
                "// Line 443:             ret |= s",
                "// Line 444:         return ret",
                "// Line 445: ",
                "// Line 446:     @property",
                "// vulnerable line: 447: def is_literal(self):",
                "// Line 448:         return isinstance(self.value, int) or self.value == \"multi\"",
                "// Line 449: ",
                "// Line 450:     @property",
                "// vulnerable line: 451: def is_pointer(self):",
                "// Line 452:         # not used yet but should help refactor/clarify downstream code",
                "// Line 453:         # eventually",
                "// Line 454:         return self.location is not None",
                "// Line 455: ",
                "// Line 456:     @property  # probably could be cached_property but be paranoid",
                "// Line 457:     def _optimized(self):",
                "// Line 458:         # TODO figure out how to fix this circular import",
                "// Line 459:         from vyper.ir.optimizer import optimize",
                "// Line 460: ",
                "// Line 461:         return optimize(self)"
            ]
        },
        {
            "filename_of_changes": "test_crowdfund.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 45:     return self.balance >= self.goal",
                "// Line 46: ",
                "// Line 47: @external",
                "// Line 48: def finalize():",
                "// Line 49:     assert block.timestamp >= self.deadline and self.balance >= self.goal",
                "// Line 50:     selfdestruct(self.beneficiary)",
                "// Line 51: ",
                "// Line 52: @external",
                "// Line 53: def refund():",
                "// Line 54:     ind: int128 = self.refundIndex",
                "// vulnerable line: 55: for i in range(ind, ind + 30):",
                "// Line 56:         if i >= self.nextFunderIndex:",
                "// Line 57:             self.refundIndex = self.nextFunderIndex",
                "// Line 58:             return",
                "// Line 59:         send(self.funders[i].sender, self.funders[i].value)",
                "// Line 60:         self.funders[i].sender = 0x0000000000000000000000000000000000000000",
                "// Line 61:         self.funders[i].value = 0",
                "// Line 62:     self.refundIndex = ind + 30",
                "// Line 63: ",
                "// Line 64:     \"\"\"",
                "// Line 65:     a0, a1, a2, a3, a4, a5, a6 = w3.eth.accounts[:7]",
                "// Line 140:     return self.balance >= self.goal",
                "// Line 141: ",
                "// Line 142: @external",
                "// Line 143: def finalize():",
                "// Line 144:     assert block.timestamp >= self.deadline and self.balance >= self.goal",
                "// Line 145:     selfdestruct(self.beneficiary)",
                "// Line 146: ",
                "// Line 147: @external",
                "// Line 148: def refund():",
                "// Line 149:     ind: int128 = self.refundIndex",
                "// vulnerable line: 150: for i in range(ind, ind + 30):",
                "// Line 151:         if i >= self.nextFunderIndex:",
                "// Line 152:             self.refundIndex = self.nextFunderIndex",
                "// Line 153:             return",
                "// Line 154:         send(self.funders[i].sender, self.funders[i].value)",
                "// Line 155:         self.funders[i] = empty(Funder)",
                "// Line 156:     self.refundIndex = ind + 30",
                "// Line 157: ",
                "// Line 158:     \"\"\"",
                "// Line 159:     a0, a1, a2, a3, a4, a5, a6 = w3.eth.accounts[:7]",
                "// Line 160:     c = get_contract_with_gas_estimation_for_constants(crowdfund2, *[a1, 50, 60])"
            ]
        },
        {
            "filename_of_changes": "test_for_in_list.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "13",
            "number_of_lines_deleted_vulnerable_to_cve": "6",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 9:     IteratorException,",
                "// Line 10:     NamespaceCollision,",
                "// Line 11:     StateAccessViolation,",
                "// Line 12:     StructureException,",
                "// Line 13:     TypeMismatch,",
                "// Line 14: )",
                "// Line 15: ",
                "// Line 16: BASIC_FOR_LOOP_CODE = [",
                "// Line 17:     # basic for-in-list memory",
                "// Line 18:     (",
                "// vulnerable line: 19: \"\"\"",
                "// Line 20: @external",
                "// Line 21: def data() -> int128:",
                "// Line 22:     s: int128[5] = [1, 2, 3, 4, 5]",
                "// Line 23:     for i in s:",
                "// Line 24:         if i >= 3:",
                "// Line 25:             return i",
                "// Line 26:     return -1\"\"\",",
                "// Line 27:         3,",
                "// Line 28:     ),",
                "// Line 29:     # basic for-in-dynamic array",
                "// Line 30:     (",
                "// vulnerable line: 31: \"\"\"",
                "// Line 32: @external",
                "// Line 33: def data() -> int128:",
                "// Line 34:     s: DynArray[int128, 10] = [1, 2, 3, 4, 5]",
                "// Line 35:     for i in s:",
                "// Line 36:         if i >= 3:",
                "// Line 37:             return i",
                "// Line 38:     return -1\"\"\",",
                "// Line 39:         3,",
                "// Line 40:     ),",
                "// Line 41:     # test more complicated type",
                "// Line 42:     (",
                "// vulnerable line: 43: \"\"\"",
                "// Line 44: struct S:",
                "// Line 45:     x: int128",
                "// Line 46:     y: int128",
                "// Line 47: ",
                "// Line 48: @external",
                "// Line 49: def data() -> int128:",
                "// Line 50:     sss: DynArray[DynArray[S, 10], 10] = [",
                "// Line 51:         [S({x:1, y:2})],",
                "// Line 52:         [S({x:3, y:4}), S({x:5, y:6}), S({x:7, y:8}), S({x:9, y:10})]",
                "// Line 53:         ]",
                "// Line 54:     ret: int128 = 0",
                "// Line 55:     for ss in sss:",
                "// Line 56:         for s in ss:",
                "// Line 57:             ret += s.x + s.y",
                "// Line 58:     return ret\"\"\",",
                "// Line 59:         sum(range(1, 11)),",
                "// Line 60:     ),",
                "// Line 61:     # basic for-in-list literal",
                "// Line 62:     (",
                "// vulnerable line: 63: \"\"\"",
                "// Line 64: @external",
                "// Line 65: def data() -> int128:",
                "// Line 66:     for i in [3, 5, 7, 9]:",
                "// Line 67:         if i > 5:",
                "// Line 68:             return i",
                "// Line 69:     return -1\"\"\",",
                "// Line 70:         7,",
                "// Line 71:     ),",
                "// Line 72:     (",
                "// Line 73:         # test variable string dynarray",
                "// vulnerable line: 74: \"\"\"",
                "// Line 75: @external",
                "// Line 76: def data() -> String[33]:",
                "// Line 77:     xs: DynArray[String[33], 3] = [\"hello\", \",\", \"world\"]",
                "// Line 78:     for x in xs:",
                "// Line 79:         if x == \",\":",
                "// Line 80:             return x",
                "// Line 81:     return \"\"",
                "// Line 82:     \"\"\",",
                "// Line 83:         \",\",",
                "// Line 84:     ),",
                "// Line 85:     (",
                "// Line 86:         # test literal string dynarray",
                "// vulnerable line: 87: \"\"\"",
                "// Line 88: @external",
                "// Line 89: def data() -> String[33]:",
                "// Line 90:     for x in [\"hello\", \",\", \"world\"]:",
                "// Line 91:         if x == \",\":",
                "// Line 92:             return x",
                "// Line 93:     return \"\"",
                "// Line 94:     \"\"\",",
                "// Line 95:         \",\",",
                "// Line 96:     ),",
                "// Line 97:     (",
                "// Line 98:         # test nested string dynarray",
                "// vulnerable line: 99: \"\"\"",
                "// Line 100: @external",
                "// Line 101: def data() -> DynArray[String[33], 2]:",
                "// Line 102:     for x in [[\"hello\", \"world\"], [\"goodbye\", \"world!\"]]:",
                "// Line 103:         if x[1] == \"world\":",
                "// Line 104:             return x",
                "// Line 105:     return []",
                "// Line 106:     \"\"\",",
                "// Line 107:         [\"hello\", \"world\"],",
                "// Line 108:     ),",
                "// Line 109:     # test nested array",
                "// Line 110:     (",
                "// vulnerable line: 111: \"\"\"",
                "// Line 112: @external",
                "// Line 113: def data() -> int128:",
                "// Line 114:     ret: int128 = 0",
                "// Line 115:     xss: int128[3][3] = [[1,2,3],[4,5,6],[7,8,9]]",
                "// Line 116:     for xs in xss:",
                "// Line 117:         for x in xs:",
                "// Line 118:             ret += x",
                "// Line 119:     return ret\"\"\",",
                "// Line 120:         sum(range(1, 10)),",
                "// Line 121:     ),",
                "// Line 122:     # test more complicated literal",
                "// Line 123:     (",
                "// vulnerable line: 124: \"\"\"",
                "// Line 125: struct S:",
                "// Line 126:     x: int128",
                "// Line 127:     y: int128",
                "// Line 128: ",
                "// Line 129: @external",
                "// Line 130: def data() -> int128:",
                "// Line 131:     ret: int128 = 0",
                "// Line 132:     for ss in [[S({x:1, y:2})]]:",
                "// Line 133:         for s in ss:",
                "// Line 134:             ret += s.x + s.y",
                "// Line 135:     return ret\"\"\",",
                "// Line 136:         1 + 2,",
                "// Line 137:     ),",
                "// Line 138:     # basic for-in-list addresses",
                "// Line 139:     (",
                "// vulnerable line: 140: \"\"\"",
                "// Line 141: @external",
                "// Line 142: def data() -> address:",
                "// Line 143:     addresses: address[3] = [",
                "// Line 144:         0x7d577a597B2742b498Cb5Cf0C26cDCD726d39E6e,",
                "// Line 145:         0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1,",
                "// Line 146:         0xDCEceAF3fc5C0a63d195d69b1A90011B7B19650D",
                "// Line 147:     ]",
                "// Line 148:     count: int128 = 0",
                "// Line 149:     for i in addresses:",
                "// Line 150:         count += 1",
                "// Line 170: @external",
                "// Line 171: def set():",
                "// Line 172:     self.x = [3, 5, 7, 9]",
                "// Line 173: ",
                "// Line 174: @external",
                "// Line 175: def data() -> int128:",
                "// Line 176:     for i in self.x:",
                "// Line 177:         if i > 5:",
                "// Line 178:             return i",
                "// Line 179:     return -1",
                "// vulnerable line: 180: \"\"\"",
                "// Line 181: ",
                "// Line 182:     c = get_contract_with_gas_estimation(code)",
                "// Line 183: ",
                "// Line 184:     assert c.data() == -1",
                "// Line 185:     c.set(transact={})",
                "// Line 186:     assert c.data() == 7",
                "// Line 187: ",
                "// Line 188: ",
                "// Line 189: def test_basic_for_dyn_array_storage(get_contract_with_gas_estimation):",
                "// Line 190:     code = \"\"\"",
                "// Line 193: @external",
                "// Line 194: def set(xs: DynArray[int128, 4]):",
                "// Line 195:     self.x = xs",
                "// Line 196: ",
                "// Line 197: @external",
                "// Line 198: def data() -> int128:",
                "// Line 199:     t: int128 = 0",
                "// Line 200:     for i in self.x:",
                "// Line 201:         t += i",
                "// Line 202:     return t",
                "// vulnerable line: 203: \"\"\"",
                "// Line 204: ",
                "// Line 205:     c = get_contract_with_gas_estimation(code)",
                "// Line 206: ",
                "// Line 207:     assert c.data() == 0",
                "// Line 208:     # test all sorts of lists",
                "// Line 209:     for xs in [[3, 5, 7, 9], [4, 6, 8], [1, 2], [5], []]:",
                "// Line 210:         c.set(xs, transact={})",
                "// Line 211:         assert c.data() == sum(xs)",
                "// Line 212: ",
                "// Line 213: ",
                "// Line 224:     return self.addresses[i]",
                "// Line 225: ",
                "// Line 226: @external",
                "// Line 227: def iterate_return_second() -> address:",
                "// Line 228:     count: int128 = 0",
                "// Line 229:     for i in self.addresses:",
                "// Line 230:         count += 1",
                "// Line 231:         if count == 2:",
                "// Line 232:             return i",
                "// Line 233:     return empty(address)",
                "// vulnerable line: 234: \"\"\"",
                "// Line 235: ",
                "// Line 236:     c = get_contract_with_gas_estimation(code)",
                "// Line 237: ",
                "// Line 238:     c.set(0, \"0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1\", transact={})",
                "// Line 239:     c.set(1, \"0x7d577a597B2742b498Cb5Cf0C26cDCD726d39E6e\", transact={})",
                "// Line 240:     c.set(2, \"0xDCEceAF3fc5C0a63d195d69b1A90011B7B19650D\", transact={})",
                "// Line 241: ",
                "// Line 242:     assert c.ret(1) == c.iterate_return_second() == \"0x7d577a597B2742b498Cb5Cf0C26cDCD726d39E6e\"",
                "// Line 243: ",
                "// Line 244: ",
                "// Line 255:     return self.readings[i]",
                "// Line 256: ",
                "// Line 257: @external",
                "// Line 258: def i_return(break_count: int128) -> decimal:",
                "// Line 259:     count: int128 = 0",
                "// Line 260:     for i in self.readings:",
                "// Line 261:         if count == break_count:",
                "// Line 262:             return i",
                "// Line 263:         count += 1",
                "// Line 264:     return -1.111",
                "// vulnerable line: 265: \"\"\"",
                "// Line 266: ",
                "// Line 267:     c = get_contract_with_gas_estimation(code)",
                "// Line 268: ",
                "// Line 269:     c.set(0, Decimal(\"0.0001\"), transact={})",
                "// Line 270:     c.set(1, Decimal(\"1.1\"), transact={})",
                "// Line 271:     c.set(2, Decimal(\"2.2\"), transact={})",
                "// Line 272: ",
                "// Line 273:     assert c.ret(2) == c.i_return(2) == Decimal(\"2.2\")",
                "// Line 274:     assert c.ret(1) == c.i_return(1) == Decimal(\"1.1\")",
                "// Line 275:     assert c.ret(0) == c.i_return(0) == Decimal(\"0.0001\")",
                "// Line 280: @external",
                "// Line 281: @view",
                "// Line 282: def func(amounts: uint256[3]) -> uint256:",
                "// Line 283:     total: uint256 = as_wei_value(0, \"wei\")",
                "// Line 284: ",
                "// Line 285:     # calculate total",
                "// Line 286:     for amount in amounts:",
                "// Line 287:         total += amount",
                "// Line 288: ",
                "// Line 289:     return total",
                "// vulnerable line: 290: \"\"\"",
                "// Line 291: ",
                "// Line 292:     c = get_contract_with_gas_estimation(code)",
                "// Line 293: ",
                "// Line 294:     assert c.func([100, 200, 300]) == 600",
                "// Line 295: ",
                "// Line 296: ",
                "// Line 297: def test_for_in_dyn_array(get_contract_with_gas_estimation):",
                "// Line 298:     code = \"\"\"",
                "// Line 299: @external",
                "// Line 300: @view",
                "// Line 301: def func(amounts: DynArray[uint256, 3]) -> uint256:",
                "// Line 302:     total: uint256 = 0",
                "// Line 303: ",
                "// Line 304:     # calculate total",
                "// Line 305:     for amount in amounts:",
                "// Line 306:         total += amount",
                "// Line 307: ",
                "// Line 308:     return total",
                "// vulnerable line: 309: \"\"\"",
                "// Line 310: ",
                "// Line 311:     c = get_contract_with_gas_estimation(code)",
                "// Line 312: ",
                "// Line 313:     assert c.func([100, 200, 300]) == 600",
                "// Line 314:     assert c.func([100, 200]) == 300",
                "// Line 315: ",
                "// Line 316: ",
                "// Line 317: GOOD_CODE = [",
                "// Line 318:     # multiple for loops",
                "// vulnerable line: 319: \"\"\"",
                "// Line 320: @external",
                "// Line 321: def foo(x: int128):",
                "// Line 322:     p: int128 = 0",
                "// Line 323:     for i in range(3):",
                "// Line 324:         p += i",
                "// Line 325:     for i in range(4):",
                "// Line 326:         p += i",
                "// Line 327:     \"\"\",",
                "// vulnerable line: 328: \"\"\"",
                "// Line 329: @external",
                "// Line 330: def foo(x: int128):",
                "// Line 331:     p: int128 = 0",
                "// Line 332:     for i in range(3):",
                "// Line 333:         p += i",
                "// Line 334:     for i in [1, 2, 3, 4]:",
                "// Line 335:         p += i",
                "// Line 336:     \"\"\",",
                "// vulnerable line: 337: \"\"\"",
                "// Line 338: @external",
                "// Line 339: def foo(x: int128):",
                "// Line 340:     p: int128 = 0",
                "// Line 341:     for i in [1, 2, 3, 4]:",
                "// Line 342:         p += i",
                "// Line 343:     for i in [1, 2, 3, 4]:",
                "// Line 344:         p += i",
                "// Line 345:     \"\"\",",
                "// vulnerable line: 346: \"\"\"",
                "// Line 347: @external",
                "// Line 348: def foo():",
                "// Line 349:     for i in range(10):",
                "// Line 350:         pass",
                "// Line 351:     for i in range(20):",
                "// Line 352:         pass",
                "// Line 353:     \"\"\",",
                "// Line 354:     # using index variable after loop",
                "// vulnerable line: 355: \"\"\"",
                "// Line 356: @external",
                "// Line 357: def foo():",
                "// Line 358:     for i in range(10):",
                "// Line 359:         pass",
                "// Line 360:     i: int128 = 100  # create new variable i",
                "// Line 361:     i = 200  # look up the variable i and check whether it is in forvars",
                "// Line 362:     \"\"\",",
                "// Line 363: ]",
                "// Line 364: ",
                "// Line 365: ",
                "// Line 366: @pytest.mark.parametrize(\"code\", GOOD_CODE)",
                "// Line 367: def test_good_code(code, get_contract):",
                "// Line 368:     get_contract(code)",
                "// Line 369: ",
                "// Line 370: ",
                "// Line 371: RANGE_CONSTANT_CODE = [",
                "// Line 372:     (",
                "// vulnerable line: 373: \"\"\"",
                "// Line 374: TREE_FIDDY: constant(int128)  = 350",
                "// Line 375: ",
                "// Line 376: ",
                "// Line 377: @external",
                "// Line 378: def a() -> uint256:",
                "// Line 379:     x: uint256 = 0",
                "// Line 380:     for i in range(TREE_FIDDY):",
                "// Line 381:         x += 1",
                "// Line 382:     return x\"\"\",",
                "// Line 383:         350,",
                "// Line 384:     ),",
                "// Line 385:     (",
                "// vulnerable line: 386: \"\"\"",
                "// Line 387: ONE_HUNDRED: constant(int128)  = 100",
                "// Line 388: ",
                "// Line 389: @external",
                "// Line 390: def a() -> uint256:",
                "// Line 391:     x: uint256 = 0",
                "// Line 392:     for i in range(1, 1 + ONE_HUNDRED):",
                "// Line 393:         x += 1",
                "// Line 394:     return x\"\"\",",
                "// Line 395:         100,",
                "// Line 396:     ),",
                "// Line 397:     (",
                "// vulnerable line: 398: \"\"\"",
                "// Line 399: START: constant(int128)  = 100",
                "// Line 400: END: constant(int128)  = 199",
                "// Line 401: ",
                "// Line 402: @external",
                "// Line 403: def a() -> uint256:",
                "// Line 404:     x: uint256 = 0",
                "// Line 405:     for i in range(START, END):",
                "// Line 406:         x += 1",
                "// Line 407:     return x\"\"\",",
                "// Line 408:         99,",
                "// Line 409:     ),",
                "// Line 410:     (",
                "// vulnerable line: 411: \"\"\"",
                "// Line 412: @external",
                "// Line 413: def a() -> int128:",
                "// Line 414:     x: int128 = 0",
                "// Line 415:     for i in range(-5, -1):",
                "// Line 416:         x += i",
                "// Line 417:     return x\"\"\",",
                "// Line 418:         -14,",
                "// Line 419:     ),",
                "// Line 420: ]",
                "// Line 421: ",
                "// Line 423: @pytest.mark.parametrize(\"code, result\", RANGE_CONSTANT_CODE)",
                "// Line 424: def test_range_constant(get_contract, code, result):",
                "// Line 425:     c = get_contract(code)",
                "// Line 426: ",
                "// Line 427:     assert c.a() == result",
                "// Line 428: ",
                "// Line 429: ",
                "// Line 430: BAD_CODE = [",
                "// Line 431:     # altering list within loop",
                "// Line 432:     (",
                "// vulnerable line: 433: \"\"\"",
                "// Line 434: @external",
                "// Line 435: def data() -> int128:",
                "// Line 436:     s: int128[6] = [1, 2, 3, 4, 5, 6]",
                "// Line 437:     count: int128 = 0",
                "// Line 438:     for i in s:",
                "// Line 439:         s[count] = 1  # this should not be allowed.",
                "// Line 440:         if i >= 3:",
                "// Line 441:             return i",
                "// Line 442:         count += 1",
                "// Line 443:     return -1",
                "// Line 444:     \"\"\",",
                "// Line 445:         ImmutableViolation,",
                "// Line 446:     ),",
                "// Line 447:     (",
                "// vulnerable line: 448: \"\"\"",
                "// Line 449: @external",
                "// Line 450: def foo():",
                "// Line 451:     s: int128[6] = [1, 2, 3, 4, 5, 6]",
                "// Line 452:     count: int128 = 0",
                "// Line 453:     for i in s:",
                "// Line 454:         s[count] += 1",
                "// Line 455:     \"\"\",",
                "// Line 456:         ImmutableViolation,",
                "// Line 457:     ),",
                "// Line 458:     # alter storage list within for loop",
                "// Line 459:     (",
                "// vulnerable line: 460: \"\"\"",
                "// Line 461: s: int128[6]",
                "// Line 462: ",
                "// Line 463: @external",
                "// Line 464: def set():",
                "// Line 465:     self.s = [1, 2, 3, 4, 5, 6]",
                "// Line 466: ",
                "// Line 467: @external",
                "// Line 468: def data() -> int128:",
                "// Line 469:     count: int128 = 0",
                "// Line 470:     for i in self.s:",
                "// Line 471:         self.s[count] = 1  # this should not be allowed.",
                "// Line 472:         if i >= 3:",
                "// Line 473:             return i",
                "// Line 474:         count += 1",
                "// Line 475:     return -1",
                "// Line 476:     \"\"\",",
                "// Line 477:         ImmutableViolation,",
                "// Line 478:     ),",
                "// Line 479:     # alter nested storage list in internal function call within for loop",
                "// Line 480:     (",
                "// vulnerable line: 481: \"\"\"",
                "// Line 482: struct Foo:",
                "// Line 483:     foo: uint256[4]",
                "// Line 484: ",
                "// Line 485: my_array2: Foo",
                "// Line 486: ",
                "// Line 487: @internal",
                "// Line 488: def doStuff(i: uint256) -> uint256:",
                "// Line 489:     self.my_array2.foo[i] = i",
                "// Line 490:     return i",
                "// Line 491: ",
                "// Line 493: def _helper():",
                "// Line 494:     i: uint256 = 0",
                "// Line 495:     for item in self.my_array2.foo:",
                "// Line 496:         self.doStuff(i)",
                "// Line 497:         i += 1",
                "// Line 498:     \"\"\",",
                "// Line 499:         ImmutableViolation,",
                "// Line 500:     ),",
                "// Line 501:     # alter doubly nested storage list in internal function call within for loop",
                "// Line 502:     (",
                "// vulnerable line: 503: \"\"\"",
                "// Line 504: struct Foo:",
                "// Line 505:     foo: uint256[4]",
                "// Line 506: ",
                "// Line 507: struct Bar:",
                "// Line 508:     bar: Foo",
                "// Line 509:     baz: uint256",
                "// Line 510: ",
                "// Line 511: my_array2: Bar",
                "// Line 512: ",
                "// Line 513: @internal",
                "// Line 519: def _helper():",
                "// Line 520:     i: uint256 = 0",
                "// Line 521:     for item in self.my_array2.bar.foo:",
                "// Line 522:         self.doStuff(i)",
                "// Line 523:         i += 1",
                "// Line 524:     \"\"\",",
                "// Line 525:         ImmutableViolation,",
                "// Line 526:     ),",
                "// Line 527:     # alter entire struct with nested storage list in internal function call within for loop",
                "// Line 528:     (",
                "// vulnerable line: 529: \"\"\"",
                "// Line 530: struct Foo:",
                "// Line 531:     foo: uint256[4]",
                "// Line 532: ",
                "// Line 533: my_array2: Foo",
                "// Line 534: ",
                "// Line 535: @internal",
                "// Line 536: def doStuff():",
                "// Line 537:     self.my_array2.foo = [",
                "// Line 538:         block.timestamp + 1,",
                "// Line 539:         block.timestamp + 2,",
                "// Line 545: def _helper():",
                "// Line 546:     i: uint256 = 0",
                "// Line 547:     for item in self.my_array2.foo:",
                "// Line 548:         self.doStuff()",
                "// Line 549:         i += 1",
                "// Line 550:     \"\"\",",
                "// Line 551:         ImmutableViolation,",
                "// Line 552:     ),",
                "// Line 553:     # invalid nested loop",
                "// Line 554:     (",
                "// vulnerable line: 555: \"\"\"",
                "// Line 556: @external",
                "// Line 557: def foo(x: int128):",
                "// Line 558:     for i in range(4):",
                "// Line 559:         for i in range(5):",
                "// Line 560:             pass",
                "// Line 561:     \"\"\",",
                "// Line 562:         NamespaceCollision,",
                "// Line 563:     ),",
                "// Line 564:     (",
                "// vulnerable line: 565: \"\"\"",
                "// Line 566: @external",
                "// Line 567: def foo(x: int128):",
                "// Line 568:     for i in [1,2]:",
                "// Line 569:         for i in [1,2]:",
                "// Line 570:             pass",
                "// Line 571:      \"\"\",",
                "// Line 572:         NamespaceCollision,",
                "// Line 573:     ),",
                "// Line 574:     # invalid iterator assignment",
                "// Line 575:     (",
                "// vulnerable line: 576: \"\"\"",
                "// Line 577: @external",
                "// Line 578: def foo(x: int128):",
                "// Line 579:     for i in [1,2]:",
                "// Line 580:         i = 2",
                "// Line 581:     \"\"\",",
                "// Line 582:         ImmutableViolation,",
                "// Line 583:     ),",
                "// Line 584:     # invalid modification of dynarray",
                "// Line 585:     (",
                "// vulnerable line: 586: \"\"\"",
                "// Line 587: @external",
                "// Line 588: def foo():",
                "// Line 589:     xs: DynArray[uint256, 5] = [1,2,3]",
                "// Line 590:     for x in xs:",
                "// Line 591:         xs.pop()",
                "// Line 592:     \"\"\",",
                "// Line 593:         ImmutableViolation,",
                "// Line 594:     ),",
                "// Line 595:     # invalid modification of dynarray",
                "// Line 596:     (",
                "// vulnerable line: 597: \"\"\"",
                "// Line 598: @external",
                "// Line 599: def foo():",
                "// Line 600:     xs: DynArray[uint256, 5] = [1,2,3]",
                "// Line 601:     for x in xs:",
                "// Line 602:         xs.append(x)",
                "// Line 603:     \"\"\",",
                "// Line 604:         ImmutableViolation,",
                "// Line 605:     ),",
                "// Line 606:     # invalid modification of dynarray",
                "// Line 607:     (",
                "// vulnerable line: 608: \"\"\"",
                "// Line 609: @external",
                "// Line 610: def foo():",
                "// Line 611:     xs: DynArray[DynArray[uint256, 5], 5] = [[1,2,3]]",
                "// Line 612:     for x in xs:",
                "// Line 613:         x.pop()",
                "// Line 614:     \"\"\",",
                "// Line 615:         ImmutableViolation,",
                "// Line 616:     ),",
                "// Line 617:     # invalid modification of dynarray",
                "// Line 618:     (",
                "// vulnerable line: 619: \"\"\"",
                "// Line 620: array: DynArray[uint256, 5]",
                "// Line 621: @internal",
                "// Line 622: def a():",
                "// Line 623:     self.b()",
                "// Line 624: ",
                "// Line 625: @internal",
                "// Line 626: def b():",
                "// Line 627:     self.array.pop()",
                "// Line 628: ",
                "// Line 629: @external",
                "// Line 630: def foo():",
                "// Line 631:     for x in self.array:",
                "// Line 632:         self.a()",
                "// Line 633:     \"\"\",",
                "// Line 634:         ImmutableViolation,",
                "// Line 635:     ),",
                "// Line 636:     (",
                "// vulnerable line: 637: \"\"\"",
                "// Line 638: @external",
                "// Line 639: def foo(x: int128):",
                "// Line 640:     for i in [1,2]:",
                "// Line 641:         i += 2",
                "// Line 642:     \"\"\",",
                "// Line 643:         ImmutableViolation,",
                "// Line 644:     ),",
                "// Line 645:     # range of < 1",
                "// Line 646:     (",
                "// vulnerable line: 647: \"\"\"",
                "// Line 648: @external",
                "// Line 649: def foo():",
                "// Line 650:     for i in range(-3):",
                "// Line 651:         pass",
                "// Line 652:     \"\"\",",
                "// Line 653:         StructureException,",
                "// Line 654:     ),",
                "// vulnerable line: 655: \"\"\"",
                "// Line 656: @external",
                "// Line 657: def foo():",
                "// Line 658:     for i in range(0):",
                "// Line 659:         pass",
                "// Line 660:     \"\"\",",
                "// vulnerable line: 661: \"\"\"",
                "// Line 662: @external",
                "// Line 663: def foo():",
                "// Line 664:     for i in []:",
                "// Line 665:         pass",
                "// Line 666:     \"\"\",",
                "// vulnerable line: 667: \"\"\"",
                "// Line 668: FOO: constant(DynArray[uint256, 3]) = []",
                "// Line 669: ",
                "// Line 670: @external",
                "// Line 671: def foo():",
                "// Line 672:     for i in FOO:",
                "// Line 673:         pass",
                "// Line 674:     \"\"\",",
                "// Line 675:     (",
                "// vulnerable line: 676: \"\"\"",
                "// Line 677: @external",
                "// Line 678: def foo():",
                "// Line 679:     for i in range(5,3):",
                "// Line 680:         pass",
                "// Line 681:     \"\"\",",
                "// Line 682:         StructureException,",
                "// Line 683:     ),",
                "// Line 684:     (",
                "// vulnerable line: 685: \"\"\"",
                "// Line 686: @external",
                "// Line 687: def foo():",
                "// Line 688:     for i in range(5,3,-1):",
                "// Line 689:         pass",
                "// Line 690:     \"\"\",",
                "// Line 691:         ArgumentException,",
                "// Line 692:     ),",
                "// Line 693:     (",
                "// vulnerable line: 694: \"\"\"",
                "// Line 695: @external",
                "// Line 696: def foo():",
                "// Line 697:     a: uint256 = 2",
                "// Line 698:     for i in range(a):",
                "// Line 699:         pass",
                "// Line 700:     \"\"\",",
                "// Line 701:         StateAccessViolation,",
                "// Line 702:     ),",
                "// vulnerable line: 703: \"\"\"",
                "// Line 704: @external",
                "// Line 705: def foo():",
                "// Line 706:     a: int128 = 6",
                "// Line 707:     for i in range(a,a-3):",
                "// Line 708:         pass",
                "// Line 709:     \"\"\",",
                "// Line 710:     # invalid argument length",
                "// Line 711:     (",
                "// vulnerable line: 712: \"\"\"",
                "// Line 713: @external",
                "// Line 714: def foo():",
                "// Line 715:     for i in range():",
                "// Line 716:         pass",
                "// Line 717:     \"\"\",",
                "// Line 718:         ArgumentException,",
                "// Line 719:     ),",
                "// Line 720:     (",
                "// vulnerable line: 721: \"\"\"",
                "// Line 722: @external",
                "// Line 723: def foo():",
                "// Line 724:     for i in range(0,1,2):",
                "// Line 725:         pass",
                "// Line 726:     \"\"\",",
                "// Line 727:         ArgumentException,",
                "// Line 728:     ),",
                "// Line 729:     # non-iterables",
                "// Line 730:     (",
                "// vulnerable line: 731: \"\"\"",
                "// Line 732: @external",
                "// Line 733: def foo():",
                "// Line 734:     for i in b\"asdf\":",
                "// Line 735:         pass",
                "// Line 736:     \"\"\",",
                "// Line 737:         InvalidType,",
                "// Line 738:     ),",
                "// Line 739:     (",
                "// vulnerable line: 740: \"\"\"",
                "// Line 741: @external",
                "// Line 742: def foo():",
                "// Line 743:     for i in 31337:",
                "// Line 744:         pass",
                "// Line 745:     \"\"\",",
                "// Line 746:         InvalidType,",
                "// Line 747:     ),",
                "// Line 748:     (",
                "// vulnerable line: 749: \"\"\"",
                "// Line 750: @external",
                "// Line 751: def foo():",
                "// Line 752:     for i in bar():",
                "// Line 753:         pass",
                "// Line 754:     \"\"\",",
                "// Line 755:         IteratorException,",
                "// Line 756:     ),",
                "// Line 757:     (",
                "// vulnerable line: 758: \"\"\"",
                "// Line 759: @external",
                "// Line 760: def foo():",
                "// Line 761:     for i in self.bar():",
                "// Line 762:         pass",
                "// Line 763:     \"\"\",",
                "// Line 764:         IteratorException,",
                "// Line 765:     ),",
                "// Line 766:     (",
                "// vulnerable line: 767: \"\"\"",
                "// Line 768: @external",
                "// Line 769: def test_for() -> int128:",
                "// Line 770:     a: int128 = 0",
                "// Line 771:     for i in range(max_value(int128), max_value(int128)+2):",
                "// Line 772:         a = i",
                "// Line 773:     return a",
                "// Line 774:     \"\"\",",
                "// Line 775:         TypeMismatch,",
                "// Line 776:     ),",
                "// Line 777:     (",
                "// vulnerable line: 778: \"\"\"",
                "// Line 779: @external",
                "// Line 780: def test_for() -> int128:",
                "// Line 781:     a: int128 = 0",
                "// Line 782:     b: uint256 = 0",
                "// Line 783:     for i in range(5):",
                "// Line 784:         a = i",
                "// Line 785:         b = i",
                "// Line 786:     return a",
                "// Line 787:     \"\"\",",
                "// Line 788:         TypeMismatch,",
                "// Line 789:     ),",
                "// Line 790: ]",
                "// Line 791: ",
                "// Line 792: ",
                "// vulnerable line: 793: @pytest.mark.parametrize(\"code\", BAD_CODE)",
                "// vulnerable line: 794: def test_bad_code(assert_compile_failed, get_contract, code):",
                "// vulnerable line: 795: err = StructureException",
                "// vulnerable line: 796: if not isinstance(code, str):",
                "// vulnerable line: 797: code, err = code",
                "// Line 798:     assert_compile_failed(lambda: get_contract(code), err)"
            ]
        },
        {
            "filename_of_changes": "test_invalid_literal_exception.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "0",
            "number_of_lines_deleted_vulnerable_to_cve": "7",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: import pytest",
                "// Line 2: from pytest import raises",
                "// Line 3: ",
                "// Line 4: from vyper import compiler",
                "// Line 5: from vyper.exceptions import InvalidLiteral",
                "// Line 6: ",
                "// Line 7: fail_list = [",
                "// vulnerable line: 8: \"\"\"",
                "// Line 9: b: decimal",
                "// vulnerable line: 10: @external",
                "// Line 11: def foo():",
                "// Line 12:     self.b = 7.5178246872145875217495129745982164981654986129846",
                "// vulnerable line: 13: \"\"\",",
                "// vulnerable line: 14: \"\"\"",
                "// vulnerable line: 15: @external",
                "// Line 16: def foo():",
                "// Line 17:     x: uint256 = convert(-(-(-1)), uint256)",
                "// vulnerable line: 18: \"\"\",",
                "// vulnerable line: 19: \"\"\"",
                "// vulnerable line: 20: @external",
                "// vulnerable line: 21: def foo(x: int128):",
                "// vulnerable line: 22: y: int128 = 7",
                "// vulnerable line: 23: for i in range(x, x + y):",
                "// vulnerable line: 24: pass",
                "// vulnerable line: 25: \"\"\",",
                "// vulnerable line: 26: \"\"\"",
                "// vulnerable line: 27: @external",
                "// Line 28: def foo():",
                "// Line 29:     x: String[100] = \"these bytes are nо gооd because the o's are from the Russian alphabet\"",
                "// vulnerable line: 30: \"\"\",",
                "// vulnerable line: 31: \"\"\"",
                "// vulnerable line: 32: @external",
                "// Line 33: def foo():",
                "// Line 34:     x: String[100] = \"这个傻老外不懂中文\"",
                "// vulnerable line: 35: \"\"\",",
                "// vulnerable line: 36: \"\"\"",
                "// vulnerable line: 37: @external",
                "// Line 38: def foo():",
                "// Line 39:     a: Bytes[100] = \"ѓtest\"",
                "// vulnerable line: 40: \"\"\",",
                "// vulnerable line: 41: \"\"\"",
                "// vulnerable line: 42: @external",
                "// Line 43: def foo():",
                "// Line 44:     a: bytes32 = keccak256(\"ѓtest\")",
                "// vulnerable line: 45: \"\"\",",
                "// Line 46: ]",
                "// Line 47: ",
                "// Line 48: ",
                "// Line 49: @pytest.mark.parametrize(\"bad_code\", fail_list)",
                "// Line 50: def test_invalid_literal_exception(bad_code):",
                "// Line 51:     with raises(InvalidLiteral):",
                "// Line 52:         compiler.compile_code(bad_code)"
            ]
        }
    ]
}