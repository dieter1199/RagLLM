{
    "cve_id": "CVE-2024-4030",
    "cve_description": "On Windows a directory returned by tempfile.mkdtemp() would not always have permissions set to restrict reading and writing to the temporary directory by other users, instead usually inheriting the correct permissions from the default location. Alternate configurations or users without a profile directory may not have the intended permissions.\n\nIf you’re not using Windows or haven’t changed the temporary directory location then you aren’t affected by this vulnerability. On other platforms the returned directory is consistently readable and writable only by the current user.\n\nThis issue was caused by Python not supporting Unix permissions on Windows. The fix adds support for Unix “700” for the mkdir function on Windows which is used by mkdtemp() to ensure the newly created directory has the proper permissions.\n",
    "cve_publish_date": "2024-05-07T21:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "gh-118486: Simplify test_win32_mkdir_700 to check the exact ACL (GH-119056)",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "test_os.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "8",
            "number_of_lines_deleted_vulnerable_to_cve": "15",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1820:         with open(path, 'w', encoding='utf-8') as f:",
                "// Line 1821:             f.write('abc')",
                "// Line 1822:         self.assertRaises(OSError, os.makedirs, path)",
                "// Line 1823:         self.assertRaises(OSError, os.makedirs, path, exist_ok=False)",
                "// Line 1824:         self.assertRaises(OSError, os.makedirs, path, exist_ok=True)",
                "// Line 1825:         os.remove(path)",
                "// Line 1826: ",
                "// Line 1827:     @unittest.skipUnless(os.name == 'nt', \"requires Windows\")",
                "// Line 1828:     def test_win32_mkdir_700(self):",
                "// Line 1829:         base = os_helper.TESTFN",
                "// vulnerable line: 1830: path1 = os.path.join(os_helper.TESTFN, 'dir1')",
                "// vulnerable line: 1831: path2 = os.path.join(os_helper.TESTFN, 'dir2')",
                "// vulnerable line: 1832: # mode=0o700 is special-cased to override ACLs on Windows",
                "// vulnerable line: 1833: # There's no way to know exactly how the ACLs will look, so we'll",
                "// vulnerable line: 1834: # check that they are different from a regularly created directory.",
                "// vulnerable line: 1835: os.mkdir(path1, mode=0o700)",
                "// vulnerable line: 1836: os.mkdir(path2, mode=0o777)",
                "// Line 1837: ",
                "// vulnerable line: 1838: out1 = subprocess.check_output([\"icacls.exe\", path1], encoding=\"oem\")",
                "// vulnerable line: 1839: out2 = subprocess.check_output([\"icacls.exe\", path2], encoding=\"oem\")",
                "// vulnerable line: 1840: os.rmdir(path1)",
                "// vulnerable line: 1841: os.rmdir(path2)",
                "// vulnerable line: 1842: out1 = out1.replace(path1, \"<PATH>\")",
                "// vulnerable line: 1843: out2 = out2.replace(path2, \"<PATH>\")",
                "// vulnerable line: 1844: self.assertNotEqual(out1, out2)",
                "// Line 1845: ",
                "// Line 1846:     def tearDown(self):",
                "// Line 1847:         path = os.path.join(os_helper.TESTFN, 'dir1', 'dir2', 'dir3',",
                "// Line 1848:                             'dir4', 'dir5', 'dir6')",
                "// Line 1849:         # If the tests failed, the bottom-most directory ('../dir6')",
                "// Line 1850:         # may not have been created, so we look for the outermost directory",
                "// Line 1851:         # that exists.",
                "// Line 1852:         while not os.path.exists(path) and path != os_helper.TESTFN:",
                "// Line 1853:             path = os.path.dirname(path)",
                "// Line 1854: "
            ]
        }
    ]
}