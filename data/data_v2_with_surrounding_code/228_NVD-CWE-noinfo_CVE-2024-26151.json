{
    "cve_id": "CVE-2024-26151",
    "cve_description": "The `mjml` PyPI package, found at the `FelixSchwarz/mjml-python` GitHub repo, is an unofficial Python port of MJML, a markup language created by Mailjet. All users of `FelixSchwarz/mjml-python` who insert untrusted data into mjml templates unless that data is checked in a very strict manner. User input like `&lt;script&gt;` would be rendered as `<script>` in the final HTML output. The attacker must be able to control some data which is later injected in an mjml template which is then send out as email to other users. The attacker could control contents of email messages sent through the platform. The problem has been fixed in version 0.11.0 of this library. Versions before 0.10.0 are not affected by this security issue. As a workaround, ensure that potentially untrusted user input does not contain any sequences which could be rendered as HTML.",
    "cve_publish_date": "2024-02-22T19:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "escaped HTML entities like `&gt;` were unescaped in the final mjml output",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "mj_style.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "7",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 3: ",
                "// Line 4: ",
                "// Line 5: __all__ = ['MjStyle']",
                "// Line 6: ",
                "// Line 7: class MjStyle(HeadComponent):",
                "// Line 8:     component_name = 'mj-style'",
                "// Line 9: ",
                "// Line 10:     @classmethod",
                "// Line 11:     def default_attrs(cls):",
                "// Line 12:         return {",
                "// vulnerable line: 13: 'inline'            : '',",
                "// Line 14:         }",
                "// Line 15: ",
                "// Line 16:     def handler(self):",
                "// Line 17:         add = self.context['add']",
                "// Line 18:         inline_attr = 'inlineStyle' if (self.get_attr('inline') == 'inline') else 'style'",
                "// vulnerable line: 19: add(inline_attr, self.getContent())"
            ]
        },
        {
            "filename_of_changes": "mjml2html.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 109:             is_comment = not isinstance(tagName, str)",
                "// Line 110:             if is_comment:",
                "// Line 111:                 # XML comment: <cyfunction Comment at 0xâ€¦>",
                "// Line 112:                 # (this needs to be extended when \"keepComments\" should be implemented)",
                "// Line 113:                 return None",
                "// Line 114:             attributes = _mjml.attrs",
                "// Line 115:             children = [child for child in _mjml]",
                "// Line 116:             classes = ignore_empty(attributes.get('mj-class', '').split(' '))",
                "// Line 117: ",
                "// Line 118:             # upstream parses text contents (+ comments) in mjml-parser-xml/index.js",
                "// vulnerable line: 119: content = _mjml.decode_contents(formatter=None)",
                "// Line 120: ",
                "// Line 121:             attributesClasses = {}",
                "// Line 122:             for css_class in classes:",
                "// Line 123:                 mjClassValues = globalDatas.classes.get(css_class)",
                "// Line 124:                 if mjClassValues:",
                "// Line 125:                     attributesClasses.update(mjClassValues)",
                "// Line 126: ",
                "// Line 127:             parent_mj_classes = ignore_empty(parentMjClass.split(' '))",
                "// Line 128:             def default_attr_classes(value):",
                "// Line 129:                 return globalDatas.classesDefault.get(value, {}).get(tagName, {})",
                "// Line 206:     globalDatas.headRaw = processing(mjHead, headHelpers)",
                "// Line 207:     content = processing(mjBody, bodyHelpers, applyAttributes)",
                "// Line 208: ",
                "// Line 209:     if globalDatas.htmlAttributes:",
                "// Line 210:         contentSoup = BeautifulSoup(content, 'html.parser')",
                "// Line 211:         for selector, data in globalDatas.htmlAttributes.items():",
                "// Line 212:             for attrName, value in data.items():",
                "// Line 213:                 for element in contentSoup.select(selector):",
                "// Line 214:                     element[attrName] = value or ''",
                "// Line 215: ",
                "// vulnerable line: 216: content = contentSoup.decode_contents(formatter=None)",
                "// Line 217: ",
                "// Line 218:     content = skeleton(",
                "// Line 219:         content=content,",
                "// Line 220:         # upstream just passes this extra key to skeleton() as JavaScript",
                "// Line 221:         # won't complain about additional parameters.",
                "// Line 222:         **omit(globalDatas, ('classesDefault', 'htmlAttributes')),",
                "// Line 223:     )",
                "// Line 224:     # LATER: upstream has also beautify",
                "// Line 225:     # LATER: upstream has also minify",
                "// Line 226: "
            ]
        },
        {
            "filename_of_changes": "upstream_alignment_test.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        }
    ]
}