{
    "cve_id": "CVE-2024-34060",
    "cve_description": "IrisEVTXModule is an interface module for Evtx2Splunk and Iris in order to ingest Microsoft EVTX log files. The `iris-evtx-module` is a pipeline plugin of `iris-web` that processes EVTX files through IRIS web application. During the upload of an EVTX through this pipeline, the filename is not safely handled and may cause an Arbitrary File Write. This can lead to a remote code execution (RCE) when combined with a Server Side Template Injection (SSTI). This vulnerability has been patched in version 1.0.0.",
    "cve_publish_date": "2024-05-23T12:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "[FIX] Filename secure escape",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "IrisEVTXInterface.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "7",
            "number_of_lines_deleted_vulnerable_to_cve": "4",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 13: #  but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "// Line 14: #  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU",
                "// Line 15: #  Lesser General Public License for more details.",
                "// Line 16: #",
                "// Line 17: #  You should have received a copy of the GNU Lesser General Public License",
                "// Line 18: #  along with this program; if not, write to the Free Software Foundation,",
                "// Line 19: #  Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.",
                "// Line 20: ",
                "// Line 21: import traceback",
                "// Line 22: from pathlib import Path",
                "// vulnerable line: 23: from celery import chain, current_app",
                "// Line 24: ",
                "// vulnerable line: 25: from iris_interface.IrisModuleInterface import IrisPipelineTypes, IrisModuleInterface, IrisModuleTypes",
                "// Line 26: import iris_interface.IrisInterfaceStatus as InterfaceStatus",
                "// vulnerable line: 27: from iris_evtx.EVTXImportDispatcher import ImportDispatcher",
                "// Line 28: import iris_evtx.IrisEVTXModConfig as interface_conf",
                "// Line 29: ",
                "// Line 30: ",
                "// Line 31: class IrisEVTXInterface(IrisModuleInterface):",
                "// Line 32:     \"\"\"",
                "// Line 33:     Provide the interface between Iris and Evtx2Splunk",
                "// Line 34:     \"\"\"",
                "// Line 35:     name = \"IrisEVTXInterface\"",
                "// Line 36:     _module_name = interface_conf.module_name",
                "// Line 37:     _module_description = interface_conf.module_description",
                "// Line 61:         else:",
                "// Line 62:             return InterfaceStatus.I2Error('Unrecognized pipeline type')",
                "// Line 63: ",
                "// Line 64:     def pipeline_files_upload(self, base_path, file_handle, case_customer, case_name, is_update):",
                "// Line 65:         \"\"\"",
                "// Line 66:         Handle the files for a specific",
                "// Line 67:         :return:",
                "// Line 68:         \"\"\"",
                "// Line 69: ",
                "// Line 70:         if base_path and Path(base_path).is_dir:",
                "// vulnerable line: 71: file_handle.save(Path(base_path, file_handle.filename))",
                "// Line 72:             return InterfaceStatus.I2Success(\"Successfully saved file {} to {}\".format(file_handle.filename, base_path))",
                "// Line 73: ",
                "// Line 74:         else:",
                "// Line 75:             return InterfaceStatus.I2Error(\"Directory {} not found. Can't save file\".format(base_path))",
                "// Line 76: ",
                "// Line 77:     def task_files_import(self, task_args):",
                "// Line 78: ",
                "// Line 79:         try:",
                "// Line 80:             configuration = self.get_configuration_dict()",
                "// Line 81:             if self._evidence_storage:"
            ]
        }
    ]
}