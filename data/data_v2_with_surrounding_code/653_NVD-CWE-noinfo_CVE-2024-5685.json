{
    "cve_id": "CVE-2024-5685",
    "cve_description": "Users with \"User:edit\" and \"Self:api\" permissionsÂ can promote or demote themselves or other users by performing changes to the group's memberships via API call.This issue affects snipe-it: from v4.6.17 through v6.4.1.",
    "cve_publish_date": "2024-06-14T10:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Re-order gating and refactor group syncing\n\nSigned-off-by: snipe <snipe@snipe.net>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "UsersController.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "7",
            "number_of_lines_deleted_vulnerable_to_cve": "19",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 74:             'users.vip',",
                "// Line 75:             'users.autoassign_licenses',",
                "// Line 76:             'users.website',",
                "// Line 77: ",
                "// Line 78:         ])->with('manager', 'groups', 'userloc', 'company', 'department', 'assets', 'licenses', 'accessories', 'consumables', 'createdBy')",
                "// Line 79:             ->withCount('assets as assets_count', 'licenses as licenses_count', 'accessories as accessories_count', 'consumables as consumables_count', 'managesUsers as manages_users_count', 'managedLocations as manages_locations_count');",
                "// Line 80: ",
                "// Line 81: ",
                "// Line 82:         if ($request->filled('activated')) {",
                "// Line 83:             $users = $users->where('users.activated', '=', $request->input('activated'));",
                "// vulnerable line: 84: }",
                "// Line 85: ",
                "// Line 86:         if ($request->filled('company_id')) {",
                "// Line 87:             $users = $users->where('users.company_id', '=', $request->input('company_id'));",
                "// vulnerable line: 88: }",
                "// Line 89: ",
                "// Line 90:         if ($request->filled('location_id')) {",
                "// Line 91:             $users = $users->where('users.location_id', '=', $request->input('location_id'));",
                "// vulnerable line: 92: }",
                "// Line 93: ",
                "// Line 94:         if ($request->filled('created_by')) {",
                "// Line 95:             $users = $users->where('users.created_by', '=', $request->input('created_by'));",
                "// vulnerable line: 96: }",
                "// Line 97: ",
                "// Line 98:         if ($request->filled('email')) {",
                "// Line 99:             $users = $users->where('users.email', '=', $request->input('email'));",
                "// vulnerable line: 100: }",
                "// Line 101: ",
                "// Line 102:         if ($request->filled('username')) {",
                "// Line 103:             $users = $users->where('users.username', '=', $request->input('username'));",
                "// vulnerable line: 104: }",
                "// Line 105: ",
                "// Line 106:         if ($request->filled('first_name')) {",
                "// Line 107:             $users = $users->where('users.first_name', '=', $request->input('first_name'));",
                "// vulnerable line: 108: }",
                "// Line 109: ",
                "// Line 110:         if ($request->filled('last_name')) {",
                "// Line 111:             $users = $users->where('users.last_name', '=', $request->input('last_name'));",
                "// vulnerable line: 112: }",
                "// Line 113: ",
                "// Line 114:         if ($request->filled('employee_num')) {",
                "// Line 115:             $users = $users->where('users.employee_num', '=', $request->input('employee_num'));",
                "// vulnerable line: 116: }",
                "// Line 117: ",
                "// Line 118:         if ($request->filled('state')) {",
                "// Line 119:             $users = $users->where('users.state', '=', $request->input('state'));",
                "// vulnerable line: 120: }",
                "// Line 121: ",
                "// Line 122:         if ($request->filled('country')) {",
                "// Line 123:             $users = $users->where('users.country', '=', $request->input('country'));",
                "// vulnerable line: 124: }",
                "// Line 125: ",
                "// Line 126:         if ($request->filled('website')) {",
                "// Line 127:             $users = $users->where('users.website', '=', $request->input('website'));",
                "// vulnerable line: 128: }",
                "// Line 129: ",
                "// Line 130:         if ($request->filled('zip')) {",
                "// Line 131:             $users = $users->where('users.zip', '=', $request->input('zip'));",
                "// vulnerable line: 132: }",
                "// Line 133: ",
                "// Line 134:         if ($request->filled('group_id')) {",
                "// Line 135:             $users = $users->ByGroup($request->get('group_id'));",
                "// vulnerable line: 136: }",
                "// Line 137: ",
                "// Line 138:         if ($request->filled('department_id')) {",
                "// Line 139:             $users = $users->where('users.department_id', '=', $request->input('department_id'));",
                "// vulnerable line: 140: }",
                "// Line 141: ",
                "// Line 142:         if ($request->filled('manager_id')) {",
                "// Line 143:             $users = $users->where('users.manager_id','=',$request->input('manager_id'));",
                "// vulnerable line: 144: }",
                "// Line 145: ",
                "// Line 146:         if ($request->filled('ldap_import')) {",
                "// Line 147:             $users = $users->where('ldap_import', '=', $request->input('ldap_import'));",
                "// vulnerable line: 148: }",
                "// Line 149: ",
                "// Line 150:         if ($request->filled('remote')) {",
                "// Line 151:             $users = $users->where('remote', '=', $request->input('remote'));",
                "// vulnerable line: 152: }",
                "// Line 153: ",
                "// Line 154:         if ($request->filled('vip')) {",
                "// Line 155:             $users = $users->where('vip', '=', $request->input('vip'));",
                "// vulnerable line: 156: }",
                "// Line 157: ",
                "// Line 158:         if ($request->filled('two_factor_enrolled')) {",
                "// Line 159:             $users = $users->where('two_factor_enrolled', '=', $request->input('two_factor_enrolled'));",
                "// vulnerable line: 160: }",
                "// Line 161: ",
                "// Line 162:         if ($request->filled('two_factor_optin')) {",
                "// Line 163:             $users = $users->where('two_factor_optin', '=', $request->input('two_factor_optin'));",
                "// vulnerable line: 164: }",
                "// Line 165: ",
                "// Line 166:         if ($request->filled('start_date')) {",
                "// Line 167:             $users = $users->where('users.start_date', '=', $request->input('start_date'));",
                "// vulnerable line: 168: }",
                "// Line 169: ",
                "// Line 170:         if ($request->filled('end_date')) {",
                "// Line 171:             $users = $users->where('users.end_date', '=', $request->input('end_date'));",
                "// vulnerable line: 172: }",
                "// Line 173: ",
                "// Line 174:         if ($request->filled('assets_count')) {",
                "// Line 175:            $users->has('assets', '=', $request->input('assets_count'));",
                "// vulnerable line: 176: }",
                "// Line 177: ",
                "// Line 178:         if ($request->filled('consumables_count')) {",
                "// Line 179:             $users->has('consumables', '=', $request->input('consumables_count'));",
                "// vulnerable line: 180: }",
                "// Line 181: ",
                "// Line 182:         if ($request->filled('licenses_count')) {",
                "// Line 183:             $users->has('licenses', '=', $request->input('licenses_count'));",
                "// vulnerable line: 184: }",
                "// Line 185: ",
                "// Line 186:         if ($request->filled('accessories_count')) {",
                "// Line 187:             $users->has('accessories', '=', $request->input('accessories_count'));",
                "// vulnerable line: 188: }",
                "// Line 189: ",
                "// Line 190:         if ($request->filled('manages_users_count')) {",
                "// Line 191:             $users->has('manages_users_count', '=', $request->input('manages_users_count'));",
                "// vulnerable line: 192: }",
                "// Line 193: ",
                "// Line 194:         if ($request->filled('manages_locations_count')) {",
                "// Line 195:             $users->has('manages_locations_count', '=', $request->input('manages_locations_count'));",
                "// vulnerable line: 196: }",
                "// Line 197: ",
                "// Line 198:         if ($request->filled('autoassign_licenses')) {",
                "// Line 199:             $users->where('autoassign_licenses', '=', $request->input('autoassign_licenses'));",
                "// vulnerable line: 200: }",
                "// Line 201: ",
                "// Line 202:         if ($request->filled('search')) {",
                "// Line 203:             $users = $users->TextSearch($request->input('search'));",
                "// vulnerable line: 204: }",
                "// Line 205: ",
                "// Line 206:         $order = $request->input('order') === 'asc' ? 'asc' : 'desc';",
                "// Line 207: ",
                "// Line 208:         switch ($request->input('sort')) {",
                "// Line 209:             case 'manager':",
                "// Line 210:                 $users = $users->OrderManager($order);",
                "// Line 211:                 break;",
                "// Line 212:             case 'location':",
                "// Line 213:                 $users = $users->OrderLocation($order);",
                "// Line 214:                 break;",
                "// Line 268:                         'vip',",
                "// Line 269:                         'start_date',",
                "// Line 270:                         'end_date',",
                "// Line 271:                         'autoassign_licenses',",
                "// Line 272:                         'website',",
                "// Line 273:                     ];",
                "// Line 274: ",
                "// Line 275:                 $sort = in_array($request->get('sort'), $allowed_columns) ? $request->get('sort') : 'first_name';",
                "// Line 276:                 $users = $users->orderBy($sort, $order);",
                "// Line 277:                 break;",
                "// vulnerable line: 278: }",
                "// Line 279: ",
                "// Line 280:         if (($request->filled('deleted')) && ($request->input('deleted') == 'true')) {",
                "// Line 281:             $users = $users->onlyTrashed();",
                "// Line 282:         } elseif (($request->filled('all')) && ($request->input('all') == 'true')) {",
                "// Line 283:             $users = $users->withTrashed();",
                "// vulnerable line: 284: }",
                "// Line 285: ",
                "// Line 286:         // Apply companyable scope",
                "// Line 287:         $users = Company::scopeCompanyables($users);",
                "// Line 288: ",
                "// Line 289: ",
                "// Line 290:         // Make sure the offset and limit are actually integers and do not exceed system limits",
                "// Line 291:         $offset = ($request->input('offset') > $users->count()) ? $users->count() : app('api_offset_value');",
                "// Line 292:         $limit = app('api_limit_value');",
                "// Line 293: ",
                "// Line 294:         $total = $users->count();",
                "// Line 295:         $users = $users->skip($offset)->take($limit)->get();",
                "// Line 296: ",
                "// Line 297:         return (new UsersTransformer)->transformUsers($users, $total);",
                "// vulnerable line: 298: }",
                "// Line 299: ",
                "// Line 300:     /**",
                "// Line 301:      * Gets a paginated collection for the select2 menus",
                "// Line 302:      *",
                "// Line 303:      * @author [A. Gianotto] [<snipe@snipe.net>]",
                "// Line 304:      * @since [v4.0.16]",
                "// Line 305:      * @see \\App\\Http\\Transformers\\SelectlistTransformer",
                "// Line 306:      */",
                "// Line 307:     public function selectlist(Request $request)",
                "// Line 308:     {",
                "// Line 320:             )->where('show_in_list', '=', '1');",
                "// Line 321: ",
                "// Line 322:         $users = Company::scopeCompanyables($users);",
                "// Line 323: ",
                "// Line 324:         if ($request->filled('search')) {",
                "// Line 325:             $users = $users->where(function ($query) use ($request) {",
                "// Line 326:                 $query->SimpleNameSearch($request->get('search'))",
                "// Line 327:                     ->orWhere('username', 'LIKE', '%'.$request->get('search').'%')",
                "// Line 328:                     ->orWhere('employee_num', 'LIKE', '%'.$request->get('search').'%');",
                "// Line 329:             });",
                "// vulnerable line: 330: }",
                "// Line 331: ",
                "// Line 332:         $users = $users->orderBy('last_name', 'asc')->orderBy('first_name', 'asc');",
                "// Line 333:         $users = $users->paginate(50);",
                "// Line 334: ",
                "// Line 335:         foreach ($users as $user) {",
                "// Line 336:             $name_str = '';",
                "// Line 337:             if ($user->last_name != '') {",
                "// Line 338:                 $name_str .= $user->last_name.', ';",
                "// vulnerable line: 339: }",
                "// Line 340:             $name_str .= $user->first_name;",
                "// Line 341: ",
                "// Line 342:             if ($user->username != '') {",
                "// Line 343:                 $name_str .= ' ('.$user->username.')';",
                "// vulnerable line: 344: }",
                "// Line 345: ",
                "// Line 346:             if ($user->employee_num != '') {",
                "// Line 347:                 $name_str .= ' - #'.$user->employee_num;",
                "// vulnerable line: 348: }",
                "// Line 349: ",
                "// Line 350:             $user->use_text = $name_str;",
                "// Line 351:             $user->use_image = ($user->present()->gravatar) ? $user->present()->gravatar : null;",
                "// vulnerable line: 352: }",
                "// Line 353: ",
                "// Line 354:         return (new SelectlistTransformer)->transformSelectlist($users);",
                "// vulnerable line: 355: }",
                "// Line 356: ",
                "// Line 357: ",
                "// Line 358: ",
                "// Line 359:     /**",
                "// Line 360:      * Store a newly created resource in storage.",
                "// Line 361:      *",
                "// Line 362:      * @author [A. Gianotto] [<snipe@snipe.net>]",
                "// Line 363:      * @since [v4.0]",
                "// Line 364:      * @param  \\Illuminate\\Http\\Request  $request",
                "// Line 365:      * @return \\Illuminate\\Http\\Response",
                "// Line 368:     {",
                "// Line 369:         $this->authorize('create', User::class);",
                "// Line 370: ",
                "// Line 371:         $user = new User;",
                "// Line 372:         $user->fill($request->all());",
                "// Line 373:         $user->created_by = Auth::user()->id;",
                "// Line 374: ",
                "// Line 375:         if ($request->has('permissions')) {",
                "// Line 376:             $permissions_array = $request->input('permissions');",
                "// Line 377: ",
                "// vulnerable line: 378: // Strip out the superuser permission if the API user isn't a superadmin",
                "// Line 379:             if (! Auth::user()->isSuperUser()) {",
                "// Line 380:                 unset($permissions_array['superuser']);",
                "// vulnerable line: 381: }",
                "// Line 382:             $user->permissions = $permissions_array;",
                "// vulnerable line: 383: }",
                "// Line 384: ",
                "// Line 385:         // ",
                "// Line 386:         if ($request->filled('password')) {",
                "// Line 387:             $user->password = bcrypt($request->get('password'));",
                "// Line 388:         } else {",
                "// Line 389:             $user->password = $user->noPassword();",
                "// vulnerable line: 390: }",
                "// Line 391: ",
                "// Line 392:         app('App\\Http\\Requests\\ImageUploadRequest')->handleImages($user, 600, 'image', 'avatars', 'avatar');",
                "// Line 393: ",
                "// Line 394:         if ($user->save()) {",
                "// vulnerable line: 395: if ($request->filled('groups')) {",
                "// vulnerable line: 396: $user->groups()->sync($request->input('groups'));",
                "// Line 397:             } else {",
                "// Line 398:                 $user->groups()->sync([]);",
                "// vulnerable line: 399: }",
                "// Line 400: ",
                "// Line 401:             return response()->json(Helper::formatStandardApiResponse('success', (new UsersTransformer)->transformUser($user), trans('admin/users/message.success.create')));",
                "// vulnerable line: 402: }",
                "// Line 403: ",
                "// vulnerable line: 404: return response()->json(Helper::formatStandardApiResponse('error', null, $user->getErrors()));",
                "// vulnerable line: 405: }",
                "// Line 406: ",
                "// Line 407:     /**",
                "// Line 408:      * Display the specified resource.",
                "// Line 409:      *",
                "// Line 410:      * @author [A. Gianotto] [<snipe@snipe.net>]",
                "// Line 411:      * @param  int  $id",
                "// Line 412:      * @return \\Illuminate\\Http\\Response",
                "// Line 413:      */",
                "// Line 414:     public function show($id)",
                "// Line 415:     {",
                "// Line 416:         $this->authorize('view', User::class);",
                "// Line 417: ",
                "// Line 418:         $user = User::withCount('assets as assets_count', 'licenses as licenses_count', 'accessories as accessories_count', 'consumables as consumables_count', 'managesUsers as manages_users_count', 'managedLocations as manages_locations_count');",
                "// Line 419: ",
                "// Line 420:         if ($user = Company::scopeCompanyables($user)->find($id)) {",
                "// Line 421:             $this->authorize('view', $user);",
                "// Line 422:             return (new UsersTransformer)->transformUser($user);",
                "// vulnerable line: 423: }",
                "// Line 424: ",
                "// Line 425:         return response()->json(Helper::formatStandardApiResponse('error', null, trans('admin/users/message.user_not_found', compact('id'))));",
                "// Line 426: ",
                "// vulnerable line: 427: }",
                "// Line 428: ",
                "// Line 429: ",
                "// Line 430:     /**",
                "// Line 431:      * Update the specified resource in storage.",
                "// Line 432:      *",
                "// Line 433:      * @author [A. Gianotto] [<snipe@snipe.net>]",
                "// Line 434:      * @since [v4.0]",
                "// Line 435:      * @param  \\Illuminate\\Http\\Request  $request",
                "// Line 436:      * @param  int  $id",
                "// Line 437:      * @return \\Illuminate\\Http\\Response",
                "// Line 449:          * ",
                "// Line 450:          * The $ids 1 and 2 are special since they are seeded as superadmins in the demo seeder.",
                "// Line 451:          * ",
                "// Line 452:          *  Thanks, jerks. You are why we can't have nice things. - snipe",
                "// Line 453:          * ",
                "// Line 454:          */ ",
                "// Line 455: ",
                "// Line 456: ",
                "// Line 457:         if ((($id == 1) || ($id == 2)) && (config('app.lock_passwords'))) {",
                "// Line 458:             return response()->json(Helper::formatStandardApiResponse('error', null, 'Permission denied. You cannot update user information via API on the demo.'));",
                "// vulnerable line: 459: }",
                "// Line 460: ",
                "// Line 461: ",
                "// Line 462:         $user->fill($request->all());",
                "// Line 463: ",
                "// Line 464:         if ($user->id == $request->input('manager_id')) {",
                "// Line 465:             return response()->json(Helper::formatStandardApiResponse('error', null, 'You cannot be your own manager'));",
                "// vulnerable line: 466: }",
                "// Line 467: ",
                "// Line 468:         if ($request->filled('password')) {",
                "// Line 469:             $user->password = bcrypt($request->input('password'));",
                "// vulnerable line: 470: }",
                "// Line 471: ",
                "// Line 472:         // We need to use has()  instead of filled()",
                "// Line 473:         // here because we need to overwrite permissions",
                "// Line 474:         // if someone needs to null them out",
                "// Line 475:         if ($request->has('permissions')) {",
                "// Line 476:             $permissions_array = $request->input('permissions');",
                "// Line 477: ",
                "// vulnerable line: 478: // Strip out the superuser permission if the API user isn't a superadmin",
                "// Line 479:             if (! Auth::user()->isSuperUser()) {",
                "// Line 480:                 unset($permissions_array['superuser']);",
                "// vulnerable line: 481: }",
                "// Line 482: ",
                "// Line 483:             $user->permissions = $permissions_array;",
                "// vulnerable line: 484: }",
                "// Line 485: ",
                "// Line 486: ",
                "// Line 487:         // Update the location of any assets checked out to this user",
                "// Line 488:         Asset::where('assigned_type', User::class)",
                "// Line 489:             ->where('assigned_to', $user->id)->update(['location_id' => $request->input('location_id', null)]);",
                "// Line 490: ",
                "// Line 491: ",
                "// Line 492:         app('App\\Http\\Requests\\ImageUploadRequest')->handleImages($user, 600, 'image', 'avatars', 'avatar');",
                "// Line 493: ",
                "// Line 494:         if ($user->save()) {",
                "// Line 495: ",
                "// vulnerable line: 496: // Check if the request has groups passed and has a value",
                "// vulnerable line: 497: if ($request->filled('groups')) {",
                "// Line 498: ",
                "// Line 499:                 $validator = Validator::make($request->all(), [",
                "// Line 500:                     'groups.*' => 'integer|exists:permission_groups,id',",
                "// Line 501:                 ]);",
                "// Line 502: ",
                "// vulnerable line: 503: if ($validator->fails()){",
                "// vulnerable line: 504: return response()->json(Helper::formatStandardApiResponse('error', null, $user->getErrors()));",
                "// vulnerable line: 505: }",
                "// Line 506: ",
                "// vulnerable line: 507: // Only save groups if the user is a superuser",
                "// vulnerable line: 508: if (Auth::user()->isSuperUser()) {",
                "// vulnerable line: 509: $user->groups()->sync($request->input('groups'));",
                "// vulnerable line: 510: }",
                "// Line 511: ",
                "// vulnerable line: 512: // The groups field has been passed but it is null, so we should blank it out",
                "// vulnerable line: 513: } elseif ($request->has('groups')) {",
                "// Line 514: ",
                "// vulnerable line: 515: // Only save groups if the user is a superuser",
                "// vulnerable line: 516: if (Auth::user()->isSuperUser()) {",
                "// vulnerable line: 517: $user->groups()->sync($request->input('groups'));",
                "// vulnerable line: 518: }",
                "// vulnerable line: 519: }",
                "// Line 520: ",
                "// Line 521: ",
                "// Line 522:             return response()->json(Helper::formatStandardApiResponse('success', (new UsersTransformer)->transformUser($user), trans('admin/users/message.success.update')));",
                "// vulnerable line: 523: }",
                "// Line 524: ",
                "// vulnerable line: 525: return response()->json(Helper::formatStandardApiResponse('error', null, $user->getErrors()));",
                "// vulnerable line: 526: }",
                "// Line 527: ",
                "// Line 528:     /**",
                "// Line 529:      * Remove the specified resource from storage.",
                "// Line 530:      *",
                "// Line 531:      * @author [A. Gianotto] [<snipe@snipe.net>]",
                "// Line 532:      * @since [v4.0]",
                "// Line 533:      * @param  int  $id",
                "// Line 534:      * @return \\Illuminate\\Http\\Response",
                "// Line 535:      */",
                "// Line 536:     public function destroy($id)",
                "// Line 539:         $user = User::with('assets', 'assets.model', 'consumables', 'accessories', 'licenses', 'userloc')->withTrashed();",
                "// Line 540:         $user = Company::scopeCompanyables($user)->find($id);",
                "// Line 541:         $this->authorize('delete', $user);",
                "// Line 542: ",
                "// Line 543:         if ($user) {",
                "// Line 544: ",
                "// Line 545:             $this->authorize('delete', $user);",
                "// Line 546: ",
                "// Line 547:             if (($user->assets) && ($user->assets->count() > 0)) {",
                "// Line 548:                 return response()->json(Helper::formatStandardApiResponse('error', null, trans('admin/users/message.error.delete_has_assets')));",
                "// vulnerable line: 549: }",
                "// Line 550: ",
                "// Line 551:             if (($user->licenses) && ($user->licenses->count() > 0)) {",
                "// Line 552:                 return response()->json(Helper::formatStandardApiResponse('error', null, 'This user still has ' . $user->licenses->count() . ' license(s) associated with them and cannot be deleted.'));",
                "// vulnerable line: 553: }",
                "// Line 554: ",
                "// Line 555:             if (($user->accessories) && ($user->accessories->count() > 0)) {",
                "// Line 556:                 return response()->json(Helper::formatStandardApiResponse('error', null, 'This user still has ' . $user->accessories->count() . ' accessories associated with them.'));",
                "// vulnerable line: 557: }",
                "// Line 558: ",
                "// Line 559:             if (($user->managedLocations()) && ($user->managedLocations()->count() > 0)) {",
                "// Line 560:                 return response()->json(Helper::formatStandardApiResponse('error', null, 'This user still has ' . $user->managedLocations()->count() . ' locations that they manage.'));",
                "// vulnerable line: 561: }",
                "// Line 562: ",
                "// Line 563:             if ($user->delete()) {",
                "// Line 564: ",
                "// Line 565:                 // Remove the user's avatar if they have one",
                "// Line 566:                 if (Storage::disk('public')->exists('avatars/' . $user->avatar)) {",
                "// Line 567:                     try {",
                "// Line 568:                         Storage::disk('public')->delete('avatars/' . $user->avatar);",
                "// Line 569:                     } catch (\\Exception $e) {",
                "// Line 570:                         \\Log::debug($e);",
                "// vulnerable line: 571: }",
                "// vulnerable line: 572: }",
                "// Line 573: ",
                "// Line 574:                 return response()->json(Helper::formatStandardApiResponse('success', null, trans('admin/users/message.success.delete')));",
                "// vulnerable line: 575: }",
                "// vulnerable line: 576: }",
                "// Line 577: ",
                "// Line 578:         return response()->json(Helper::formatStandardApiResponse('error', null, trans('admin/users/message.error.delete')));",
                "// vulnerable line: 579: }",
                "// Line 580: ",
                "// Line 581:     /**",
                "// Line 582:      * Return JSON containing a list of assets assigned to a user.",
                "// Line 583:      *",
                "// Line 584:      * @author [A. Gianotto] [<snipe@snipe.net>]",
                "// Line 585:      * @since [v3.0]",
                "// Line 586:      * @param $userId",
                "// Line 587:      * @return string JSON",
                "// Line 588:      */",
                "// Line 589:     public function assets(Request $request, $id)",
                "// Line 594:         $user = User::with('assets', 'assets.model', 'consumables', 'accessories', 'licenses', 'userloc')->withTrashed();",
                "// Line 595:         $user = Company::scopeCompanyables($user)->find($id);",
                "// Line 596:         $this->authorize('view', $user);",
                "// Line 597: ",
                "// Line 598:         $assets = Asset::where('assigned_to', '=', $id)->where('assigned_type', '=', User::class)->with('model');",
                "// Line 599: ",
                "// Line 600: ",
                "// Line 601:         // Filter on category ID",
                "// Line 602:         if ($request->filled('category_id')) {",
                "// Line 603:             $assets = $assets->InCategory($request->input('category_id'));",
                "// vulnerable line: 604: }",
                "// Line 605: ",
                "// Line 606: ",
                "// Line 607:         // Filter on model ID",
                "// Line 608:         if ($request->filled('model_id')) {",
                "// Line 609: ",
                "// Line 610:             $model_ids = $request->input('model_id');",
                "// Line 611:             if (!is_array($model_ids)) {",
                "// Line 612:                 $model_ids = array($model_ids);",
                "// vulnerable line: 613: }",
                "// Line 614:             $assets = $assets->InModelList($model_ids);",
                "// vulnerable line: 615: }",
                "// Line 616: ",
                "// Line 617:         $assets = $assets->get();",
                "// Line 618: ",
                "// Line 619:         return (new AssetsTransformer)->transformAssets($assets, $assets->count(), $request);",
                "// vulnerable line: 620: }",
                "// Line 621: ",
                "// Line 622:     /**",
                "// Line 623:      * Notify a specific user via email with all of their assigned assets.",
                "// Line 624:      *",
                "// Line 625:      * @author [Lukas Fehling] [<lukas.fehling@adabay.rocks>]",
                "// Line 626:      * @since [v6.0.13]",
                "// Line 627:      * @param Request $request",
                "// Line 628:      * @param $id",
                "// Line 629:      * @return string JSON",
                "// Line 630:      */",
                "// Line 631:     public function emailAssetList(Request $request, $id)",
                "// Line 632:     {",
                "// Line 633:         $this->authorize('update', User::class);",
                "// Line 634:         $user = User::findOrFail($id);",
                "// Line 635:         $user = Company::scopeCompanyables($user)->find($id);",
                "// Line 636:         $this->authorize('update', $user);",
                "// Line 637: ",
                "// Line 638:         if (empty($user->email)) {",
                "// Line 639:             return response()->json(Helper::formatStandardApiResponse('error', null, trans('admin/users/message.inventorynotification.error')));",
                "// vulnerable line: 640: }",
                "// Line 641: ",
                "// Line 642:         $user->notify((new CurrentInventory($user)));",
                "// Line 643: ",
                "// Line 644:         return response()->json(Helper::formatStandardApiResponse('success', null, trans('admin/users/message.inventorynotification.success')));",
                "// vulnerable line: 645: }",
                "// Line 646: ",
                "// Line 647:     /**",
                "// Line 648:      * Return JSON containing a list of consumables assigned to a user.",
                "// Line 649:      *",
                "// Line 650:      * @author [A. Gianotto] [<snipe@snipe.net>]",
                "// Line 651:      * @since [v3.0]",
                "// Line 652:      * @param $userId",
                "// Line 653:      * @return string JSON",
                "// Line 654:      */",
                "// Line 655:     public function consumables(Request $request, $id)",
                "// Line 656:     {",
                "// Line 657:         $this->authorize('view', User::class);",
                "// Line 658:         $this->authorize('view', Consumable::class);",
                "// Line 659:         $user = User::findOrFail($id);",
                "// Line 660:         $this->authorize('update', $user);",
                "// Line 661:         $consumables = $user->consumables;",
                "// Line 662:         return (new ConsumablesTransformer)->transformConsumables($consumables, $consumables->count(), $request);",
                "// vulnerable line: 663: }",
                "// Line 664: ",
                "// Line 665:     /**",
                "// Line 666:      * Return JSON containing a list of accessories assigned to a user.",
                "// Line 667:      *",
                "// Line 668:      * @author [A. Gianotto] [<snipe@snipe.net>]",
                "// Line 669:      * @since [v4.6.14]",
                "// Line 670:      * @param $userId",
                "// Line 671:      * @return string JSON",
                "// Line 672:      */",
                "// Line 673:     public function accessories($id)",
                "// Line 674:     {",
                "// Line 675:         $this->authorize('view', User::class);",
                "// Line 676:         $user = User::findOrFail($id);",
                "// Line 677:         $this->authorize('view', $user);",
                "// Line 678:         $this->authorize('view', Accessory::class);",
                "// Line 679:         $accessories = $user->accessories;",
                "// Line 680: ",
                "// Line 681:         return (new AccessoriesTransformer)->transformAccessories($accessories, $accessories->count());",
                "// vulnerable line: 682: }",
                "// Line 683: ",
                "// Line 684:     /**",
                "// Line 685:      * Return JSON containing a list of licenses assigned to a user.",
                "// Line 686:      *",
                "// Line 687:      * @author [N. Mathar] [<snipe@snipe.net>]",
                "// Line 688:      * @since [v5.0]",
                "// Line 689:      * @param $userId",
                "// Line 690:      * @return string JSON",
                "// Line 691:      */",
                "// Line 692:     public function licenses($id)",
                "// Line 693:     {",
                "// Line 694:         $this->authorize('view', User::class);",
                "// Line 695:         $this->authorize('view', License::class);",
                "// Line 696: ",
                "// Line 697:         if ($user = User::where('id', $id)->withTrashed()->first()) {",
                "// Line 698:             $this->authorize('update', $user);",
                "// Line 699:             $licenses = $user->licenses()->get();",
                "// Line 700:             return (new LicensesTransformer())->transformLicenses($licenses, $licenses->count());",
                "// vulnerable line: 701: }",
                "// Line 702: ",
                "// Line 703:         return response()->json(Helper::formatStandardApiResponse('error', null, trans('admin/users/message.user_not_found', compact('id'))));",
                "// Line 704: ",
                "// vulnerable line: 705: }",
                "// Line 706: ",
                "// Line 707:     /**",
                "// Line 708:      * Reset the user's two-factor status",
                "// Line 709:      *",
                "// Line 710:      * @author [A. Gianotto] [<snipe@snipe.net>]",
                "// Line 711:      * @since [v3.0]",
                "// Line 712:      * @param $userId",
                "// Line 713:      * @return string JSON",
                "// Line 714:      */",
                "// Line 715:     public function postTwoFactorReset(Request $request)",
                "// Line 730:                 $logaction->target_id = $user->id;",
                "// Line 731:                 $logaction->item_type = User::class;",
                "// Line 732:                 $logaction->item_id = $user->id;",
                "// Line 733:                 $logaction->created_at = date('Y-m-d H:i:s');",
                "// Line 734:                 $logaction->user_id = Auth::user()->id;",
                "// Line 735:                 $logaction->logaction('2FA reset');",
                "// Line 736: ",
                "// Line 737:                 return response()->json(['message' => trans('admin/settings/general.two_factor_reset_success')], 200);",
                "// Line 738:             } catch (\\Exception $e) {",
                "// Line 739:                 return response()->json(['message' => trans('admin/settings/general.two_factor_reset_error')], 500);",
                "// vulnerable line: 740: }",
                "// vulnerable line: 741: }",
                "// Line 742:         return response()->json(['message' => 'No ID provided'], 500);",
                "// Line 743: ",
                "// Line 744: ",
                "// vulnerable line: 745: }",
                "// Line 746: ",
                "// Line 747:     /**",
                "// Line 748:      * Get info on the current user.",
                "// Line 749:      *",
                "// Line 750:      * @author [Juan Font] [<juanfontalonso@gmail.com>]",
                "// Line 751:      * @since [v4.4.2]",
                "// Line 752:      * @param  \\Illuminate\\Http\\Request  $request",
                "// Line 753:      * @return \\Illuminate\\Http\\Response",
                "// Line 754:      */",
                "// Line 755:     public function getCurrentUserInfo(Request $request)",
                "// Line 756:     {",
                "// Line 757:         return (new UsersTransformer)->transformUser($request->user());",
                "// vulnerable line: 758: }",
                "// Line 759: ",
                "// Line 760:     /**",
                "// Line 761:      * Restore a soft-deleted user.",
                "// Line 762:      *",
                "// Line 763:      * @author [E. Taylor] [<dev@evantaylor.name>]",
                "// Line 764:      * @param int $userId",
                "// Line 765:      * @since [v6.0.0]",
                "// Line 766:      * @return JsonResponse",
                "// Line 767:      */",
                "// Line 768:     public function restore($userId = null)",
                "// Line 769:     {",
                "// Line 770: ",
                "// Line 771:         if ($user = User::withTrashed()->find($userId)) {",
                "// Line 772:             $this->authorize('delete', $user);",
                "// Line 773: ",
                "// Line 774:             if ($user->deleted_at == '') {",
                "// Line 775:                 return response()->json(Helper::formatStandardApiResponse('error', trans('general.not_deleted', ['item_type' => trans('general.user')])), 200);",
                "// vulnerable line: 776: }",
                "// Line 777: ",
                "// Line 778:             if ($user->restore()) {",
                "// Line 779: ",
                "// Line 780:                 $logaction = new Actionlog();",
                "// Line 781:                 $logaction->item_type = User::class;",
                "// Line 782:                 $logaction->item_id = $user->id;",
                "// Line 783:                 $logaction->created_at = date('Y-m-d H:i:s');",
                "// Line 784:                 $logaction->user_id = Auth::user()->id;",
                "// Line 785:                 $logaction->logaction('restore');",
                "// Line 786: ",
                "// Line 787:                 return response()->json(Helper::formatStandardApiResponse('success', null, trans('admin/users/message.success.restored')), 200);",
                "// vulnerable line: 788: }",
                "// Line 789: ",
                "// Line 790:             // Check validation to make sure we're not restoring a user with the same username as an existing user",
                "// vulnerable line: 791: return response()->json(Helper::formatStandardApiResponse('error', null, $user->getErrors()));",
                "// vulnerable line: 792: }",
                "// Line 793: ",
                "// Line 794:         return response()->json(Helper::formatStandardApiResponse('error', null, trans('admin/users/message.user_not_found')), 200);",
                "// Line 795: ",
                "// vulnerable line: 796: }",
                "// vulnerable line: 797: }"
            ]
        }
    ]
}