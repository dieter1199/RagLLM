{
    "cve_id": "CVE-2024-39303",
    "cve_description": "Weblate is a web based localization tool. Prior to version 5.6.2, Weblate didn't correctly validate filenames when restoring project backup. It may be possible to gain unauthorized access to files on the server using a crafted ZIP file. This issue has been addressed in Weblate 5.6.2. As a workaround, do not allow untrusted users to create projects.",
    "cve_publish_date": "2024-07-01T19:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fix(backups): skip pontentially bogus files in backups",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "backups.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "5",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 30: from weblate.screenshots.models import Screenshot",
                "// Line 31: from weblate.trans.models import (",
                "// Line 32:     Comment,",
                "// Line 33:     Component,",
                "// Line 34:     Label,",
                "// Line 35:     Project,",
                "// Line 36:     Suggestion,",
                "// Line 37:     Translation,",
                "// Line 38:     Unit,",
                "// Line 39:     Vote,",
                "// vulnerable line: 40: )",
                "// Line 41: from weblate.utils.data import data_dir",
                "// Line 42: from weblate.utils.hash import checksum_to_hash, hash_to_checksum",
                "// Line 43: from weblate.utils.validators import validate_filename",
                "// Line 44: from weblate.utils.version import VERSION",
                "// Line 45: from weblate.vcs.models import VCS_REGISTRY",
                "// Line 46: ",
                "// Line 47: if TYPE_CHECKING:",
                "// Line 48:     from collections.abc import Callable",
                "// Line 49: ",
                "// Line 50: PROJECTBACKUP_PREFIX = \"projectbackups\"",
                "// Line 90:             return extras[field](obj)",
                "// Line 91:         value = getattr(obj, field)",
                "// Line 92:         if isinstance(value, Language):",
                "// Line 93:             return value.code",
                "// Line 94:         if isinstance(value, Plural):",
                "// Line 95:             return self.backup_object(",
                "// Line 96:                 value,",
                "// Line 97:                 self.component_schema[\"properties\"][\"translations\"][\"items\"][",
                "// Line 98:                     \"properties\"",
                "// Line 99:                 ][\"plural\"][\"required\"],",
                "// vulnerable line: 100: )",
                "// Line 101:         if isinstance(value, Unit):",
                "// Line 102:             return value.checksum",
                "// Line 103:         if isinstance(value, User):",
                "// Line 104:             return value.username",
                "// Line 105:         if isinstance(value, datetime):",
                "// Line 106:             return value.isoformat()",
                "// Line 107:         if isinstance(value, FieldFile):",
                "// Line 108:             return os.path.basename(value.name)  # type: ignore[type-var]",
                "// Line 109:         return value",
                "// Line 110: ",
                "// Line 137:     def backup_dir(self, backupzip, directory: str, target: str) -> None:",
                "// Line 138:         \"\"\"Backup single directory to specified target in zip.\"\"\"",
                "// Line 139:         for folder, _subfolders, filenames in os.walk(directory):",
                "// Line 140:             for filename in filenames:",
                "// Line 141:                 path = os.path.join(folder, filename)",
                "// Line 142:                 # zipfile does not support storing symlinks, it dereferences them",
                "// Line 143:                 if os.path.islink(path):",
                "// Line 144:                     continue",
                "// Line 145:                 backupzip.write(",
                "// Line 146:                     path, os.path.join(target, os.path.relpath(path, directory))",
                "// vulnerable line: 147: )",
                "// Line 148: ",
                "// Line 149:     def backup_json(self, backupzip, data, target: str) -> None:",
                "// Line 150:         with backupzip.open(target, \"w\") as handle:",
                "// Line 151:             handle.write(json.dumps(data, ensure_ascii=False, indent=2).encode(\"utf-8\"))",
                "// Line 152: ",
                "// Line 153:     def generate_filename(self, project) -> None:",
                "// Line 154:         backup_dir = data_dir(PROJECTBACKUP_PREFIX, f\"{project.pk}\")",
                "// Line 155:         backup_info = os.path.join(backup_dir, \"README.txt\")",
                "// Line 156:         timestamp = int(self.timestamp.timestamp())",
                "// Line 157:         if not os.path.exists(backup_dir):",
                "// Line 177:         data = {",
                "// Line 178:             \"component\": self.backup_object(",
                "// Line 179:                 component, self.component_schema[\"properties\"][\"component\"][\"required\"]",
                "// Line 180:             ),",
                "// Line 181:             \"translations\": [",
                "// Line 182:                 self.backup_object(",
                "// Line 183:                     translation,",
                "// Line 184:                     self.component_schema[\"properties\"][\"translations\"][\"items\"][",
                "// Line 185:                         \"required\"",
                "// Line 186:                     ],",
                "// vulnerable line: 187: )",
                "// Line 188:                 for translation in component.translation_set.iterator()",
                "// Line 189:             ],",
                "// Line 190:             \"units\": [",
                "// Line 191:                 self.backup_object(",
                "// Line 192:                     unit,",
                "// Line 193:                     self.component_schema[\"properties\"][\"units\"][\"items\"][\"required\"],",
                "// Line 194:                     extras={",
                "// Line 195:                         \"id_hash\": lambda obj: obj.checksum,",
                "// Line 196:                         \"comments\": lambda obj: [",
                "// Line 197:                             self.backup_object(",
                "// Line 198:                                 comment,",
                "// Line 199:                                 self.component_schema[\"properties\"][\"units\"][\"items\"][",
                "// Line 200:                                     \"properties\"",
                "// Line 201:                                 ][\"comments\"][\"items\"][\"required\"],",
                "// vulnerable line: 202: )",
                "// Line 203:                             for comment in obj.comment_set.prefetch_related(\"user\")",
                "// Line 204:                         ],",
                "// Line 205:                         \"suggestions\": lambda obj: [",
                "// Line 206:                             self.backup_object(",
                "// Line 207:                                 suggestion,",
                "// Line 208:                                 self.component_schema[\"properties\"][\"units\"][\"items\"][",
                "// Line 209:                                     \"properties\"",
                "// Line 210:                                 ][\"suggestions\"][\"items\"][\"required\"],",
                "// Line 211:                                 extras={",
                "// Line 212:                                     \"votes\": lambda obj: [",
                "// Line 213:                                         self.backup_object(",
                "// Line 214:                                             vote,",
                "// Line 215:                                             self.component_schema[\"properties\"][",
                "// Line 216:                                                 \"units\"",
                "// Line 217:                                             ][\"items\"][\"properties\"][\"suggestions\"][",
                "// Line 218:                                                 \"items\"",
                "// Line 219:                                             ][\"properties\"][\"votes\"][\"items\"][",
                "// Line 220:                                                 \"required\"",
                "// Line 221:                                             ],",
                "// vulnerable line: 222: )",
                "// Line 223:                                         for vote in obj.votes.through.objects.filter(",
                "// Line 224:                                             suggestion=obj",
                "// Line 225:                                         ).select_related(\"user\")",
                "// Line 226:                                     ],",
                "// Line 227:                                 },",
                "// vulnerable line: 228: )",
                "// Line 229:                             for suggestion in obj.suggestion_set.prefetch_related(",
                "// Line 230:                                 \"user\"",
                "// vulnerable line: 231: )",
                "// Line 232:                         ],",
                "// Line 233:                         \"checks\": lambda obj: [",
                "// Line 234:                             self.backup_object(",
                "// Line 235:                                 check,",
                "// Line 236:                                 self.component_schema[\"properties\"][\"units\"][\"items\"][",
                "// Line 237:                                     \"properties\"",
                "// Line 238:                                 ][\"checks\"][\"items\"][\"required\"],",
                "// vulnerable line: 239: )",
                "// Line 240:                             for check in obj.check_set.all()",
                "// Line 241:                         ],",
                "// Line 242:                         \"labels\": lambda obj: list(",
                "// Line 243:                             obj.labels.values_list(\"name\", flat=True)",
                "// Line 244:                         ),",
                "// Line 245:                     },",
                "// vulnerable line: 246: )",
                "// Line 247:                 for unit in Unit.objects.filter(",
                "// Line 248:                     translation__component=component",
                "// Line 249:                 ).iterator()",
                "// Line 250:             ],",
                "// Line 251:         }",
                "// Line 252: ",
                "// Line 253:         data[\"screenshots\"] = screenshots = []",
                "// Line 254:         for screenshot in Screenshot.objects.filter(",
                "// Line 255:             translation__component=component",
                "// Line 256:         ).prefetch_related(\"units\"):",
                "// Line 259:                     screenshot,",
                "// Line 260:                     self.component_schema[\"properties\"][\"screenshots\"][\"items\"][",
                "// Line 261:                         \"required\"",
                "// Line 262:                     ],",
                "// Line 263:                     extras={",
                "// Line 264:                         \"units\": lambda obj: [",
                "// Line 265:                             hash_to_checksum(id_hash)",
                "// Line 266:                             for id_hash in obj.units.values_list(\"id_hash\", flat=True)",
                "// Line 267:                         ],",
                "// Line 268:                     },",
                "// vulnerable line: 269: )",
                "// vulnerable line: 270: )",
                "// Line 271:             backupzip.write(",
                "// Line 272:                 os.path.join(settings.MEDIA_ROOT, screenshot.image.path),",
                "// Line 273:                 os.path.join(\"screenshots\", os.path.basename(screenshot.image.name)),",
                "// vulnerable line: 274: )",
                "// Line 275: ",
                "// Line 276:         validate_schema(data, \"weblate-component.schema.json\")",
                "// Line 277:         self.backup_json(",
                "// Line 278:             backupzip, data, f\"{self.COMPONENTS_PREFIX}{component.slug}.json\"",
                "// vulnerable line: 279: )",
                "// Line 280: ",
                "// Line 281:         # Store VCS repo in case it is present",
                "// Line 282:         if component.is_repo_link:",
                "// Line 283:             return",
                "// Line 284:         self.backup_dir(",
                "// Line 285:             backupzip,",
                "// Line 286:             component.full_path,",
                "// Line 287:             f\"{self.VCS_PREFIX}{component.slug}\",",
                "// vulnerable line: 288: )",
                "// Line 289: ",
                "// Line 290:     @transaction.atomic",
                "// Line 291:     def backup_project(self, project) -> None:",
                "// Line 292:         \"\"\"Backup whole project.\"\"\"",
                "// Line 293:         # Generate data",
                "// Line 294:         self.backup_data(project)",
                "// Line 295: ",
                "// Line 296:         self.generate_filename(project)",
                "// Line 297:         part_name = f\"{self.filename}.part\"",
                "// Line 298: ",
                "// Line 299:         # Create the zip with the content",
                "// Line 300:         with ZipFile(part_name, \"x\") as backupzip:",
                "// Line 301:             # Project data",
                "// Line 302:             self.backup_json(",
                "// Line 303:                 backupzip,",
                "// Line 304:                 self.data,",
                "// Line 305:                 \"weblate-backup.json\",",
                "// vulnerable line: 306: )",
                "// Line 307: ",
                "// Line 308:             # Translation memory, avoid using memory_db",
                "// Line 309:             self.backup_json(",
                "// Line 310:                 backupzip,",
                "// Line 311:                 [",
                "// Line 312:                     item.as_dict()",
                "// Line 313:                     for item in project.memory_set.using(\"default\").iterator()",
                "// Line 314:                 ],",
                "// Line 315:                 \"weblate-memory.json\",",
                "// vulnerable line: 316: )",
                "// Line 317: ",
                "// Line 318:             # Components",
                "// Line 319:             for component in project.component_set.iterator():",
                "// Line 320:                 self.backup_component(backupzip, component)",
                "// Line 321: ",
                "// Line 322:         os.rename(part_name, self.filename)",
                "// Line 323: ",
                "// Line 324:     def list_components(self, zipfile):",
                "// Line 325:         return [",
                "// Line 326:             name",
                "// Line 341:         return data",
                "// Line 342: ",
                "// Line 343:     def load_components(self, zipfile, callback: Callable | None = None) -> None:",
                "// Line 344:         for component in self.list_components(zipfile):",
                "// Line 345:             with zipfile.open(component) as handle:",
                "// Line 346:                 data = json.load(handle)",
                "// Line 347:                 validate_schema(data, \"weblate-component.schema.json\")",
                "// Line 348:                 if data[\"component\"][\"vcs\"] not in VCS_REGISTRY:",
                "// Line 349:                     raise ValueError(",
                "// Line 350:                         f'Component {data[\"component\"][\"name\"]} uses unsupported VCS: {data[\"component\"][\"vcs\"]}'",
                "// vulnerable line: 351: )",
                "// Line 352:                 # Validate translations have unique languages",
                "// Line 353:                 languages = defaultdict(list)",
                "// Line 354:                 for item in data[\"translations\"]:",
                "// Line 355:                     language = self.import_language(item[\"language_code\"])",
                "// Line 356:                     languages[language.code].append(item[\"language_code\"])",
                "// Line 357: ",
                "// Line 358:                 for code, values in languages.items():",
                "// Line 359:                     if len(values) > 1:",
                "// Line 360:                         raise ValueError(",
                "// Line 361:                             f\"Several languages from backup map to single language on this server {values} -> {code}\"",
                "// vulnerable line: 362: )",
                "// Line 363: ",
                "// Line 364:                 if callback is not None:",
                "// Line 365:                     callback(zipfile, data)",
                "// Line 366: ",
                "// Line 367:     def validate(self) -> None:",
                "// Line 368:         if not self.supports_restore:",
                "// Line 369:             raise ValueError(\"Restore is not supported on this database.\")",
                "// Line 370:         input_file = self.filename or self.fileio",
                "// Line 371:         if input_file is None:",
                "// Line 372:             raise TypeError(\"Can not validate None file.\")",
                "// Line 407:         data = data.copy()",
                "// Line 408:         if remove is not None:",
                "// Line 409:             data.pop(remove)",
                "// Line 410:         data[field] = self.restore_user(data[field])",
                "// Line 411:         return data",
                "// Line 412: ",
                "// Line 413:     def restore_component(self, zipfile, data) -> None:  # noqa: C901",
                "// Line 414:         kwargs = data[\"component\"].copy()",
                "// Line 415:         source_language = kwargs[\"source_language\"] = self.import_language(",
                "// Line 416:             kwargs[\"source_language\"]",
                "// vulnerable line: 417: )",
                "// Line 418:         component = Component(project=self.project, **kwargs)",
                "// Line 419:         # Trigger pre_save to update git export URL",
                "// Line 420:         pre_save.send(",
                "// Line 421:             sender=component.__class__,",
                "// Line 422:             instance=component,",
                "// Line 423:             raw=False,",
                "// Line 424:             using=None,",
                "// Line 425:             update_fields=None,",
                "// vulnerable line: 426: )",
                "// Line 427:         # Use bulk create to avoid triggering save() and any post_save signals",
                "// Line 428:         component = Component.objects.bulk_create([component])[0]",
                "// Line 429: ",
                "// Line 430:         # Create translations",
                "// Line 431:         translations = []",
                "// Line 432:         source_translation_id = -1",
                "// Line 433:         for item in data[\"translations\"]:",
                "// Line 434:             language = self.import_language(item[\"language_code\"])",
                "// Line 435:             plurals = language.plural_set.filter(**item[\"plural\"])",
                "// Line 436:             try:",
                "// Line 447:                     plural = language.plural_set.filter(",
                "// Line 448:                         source=item[\"plural\"][\"source\"]",
                "// Line 449:                     )[0]",
                "// Line 450:             translation = Translation(",
                "// Line 451:                 component=component,",
                "// Line 452:                 filename=item[\"filename\"],",
                "// Line 453:                 language_code=item[\"language_code\"],",
                "// Line 454:                 language=self.import_language(item[\"language_code\"]),",
                "// Line 455:                 plural=plural,",
                "// Line 456:                 revision=item[\"revision\"],",
                "// vulnerable line: 457: )",
                "// Line 458:             translation.original_id = item[\"id\"]",
                "// Line 459:             if language == source_language:",
                "// Line 460:                 source_translation_id = item[\"id\"]",
                "// Line 461:             translations.append(translation)",
                "// Line 462:         translations = Translation.objects.bulk_create(translations)",
                "// Line 463:         translation_lookup = {",
                "// Line 464:             translation.original_id: translation for translation in translations",
                "// Line 465:         }",
                "// Line 466: ",
                "// Line 467:         # Create source units",
                "// Line 489:         for unit in chain(source_units, units):",
                "// Line 490:             # Labels",
                "// Line 491:             for label in unit.import_data[\"labels\"]:",
                "// Line 492:                 unit.labels.add(self.labels_map[label])",
                "// Line 493: ",
                "// Line 494:             # Comments",
                "// Line 495:             if unit.import_data[\"comments\"]:",
                "// Line 496:                 Comment.objects.bulk_create(",
                "// Line 497:                     Comment(unit=unit, **self.restore_with_user(comment))",
                "// Line 498:                     for comment in unit.import_data[\"comments\"]",
                "// vulnerable line: 499: )",
                "// Line 500: ",
                "// Line 501:             # Checks",
                "// Line 502:             if unit.import_data[\"checks\"]:",
                "// Line 503:                 Check.objects.bulk_create(",
                "// Line 504:                     Check(unit=unit, **check) for check in unit.import_data[\"checks\"]",
                "// vulnerable line: 505: )",
                "// Line 506: ",
                "// Line 507:             # Suggestions",
                "// Line 508:             if unit.import_data[\"suggestions\"]:",
                "// Line 509:                 suggestions = Suggestion.objects.bulk_create(",
                "// Line 510:                     Suggestion(",
                "// Line 511:                         unit=unit, **self.restore_with_user(suggestion, remove=\"votes\")",
                "// vulnerable line: 512: )",
                "// Line 513:                     for suggestion in unit.import_data[\"suggestions\"]",
                "// vulnerable line: 514: )",
                "// Line 515:                 suggestion_data = {",
                "// Line 516:                     item[\"target\"]: item for item in unit.import_data[\"suggestions\"]",
                "// Line 517:                 }",
                "// Line 518:                 for suggestion in suggestions:",
                "// Line 519:                     if suggestion_data[suggestion.target][\"votes\"]:",
                "// Line 520:                         Vote.objects.bulk_create(",
                "// Line 521:                             Vote(suggestion=suggestion, **self.restore_with_user(vote))",
                "// Line 522:                             for vote in suggestion_data[suggestion.target][\"votes\"]",
                "// vulnerable line: 523: )",
                "// Line 524: ",
                "// Line 525:         # Create screenshots",
                "// Line 526:         screenshots = []",
                "// Line 527:         for item in data[\"screenshots\"]:",
                "// Line 528:             handle = zipfile.open(os.path.join(\"screenshots\", item[\"image\"]))",
                "// Line 529:             screenshot = Screenshot(",
                "// Line 530:                 name=item[\"name\"],",
                "// Line 531:                 image=File(handle),",
                "// Line 532:                 translation=translation_lookup[item[\"translation_id\"]],",
                "// Line 533:                 user=self.restore_user(item[\"user\"]),",
                "// Line 534:                 timestamp=item[\"timestamp\"],",
                "// vulnerable line: 535: )",
                "// Line 536:             screenshot.import_data = item",
                "// Line 537:             screenshot.import_handle = handle",
                "// Line 538:             screenshots.append(screenshot)",
                "// Line 539: ",
                "// Line 540:         screenshots = Screenshot.objects.bulk_create(screenshots)",
                "// Line 541:         for screenshot in screenshots:",
                "// Line 542:             if screenshot.import_data[\"units\"]:",
                "// Line 543:                 screenshot.units.set(",
                "// Line 544:                     screenshot.translation.unit_set.filter(",
                "// Line 545:                         id_hash__in=[",
                "// Line 546:                             checksum_to_hash(id_hash)",
                "// Line 547:                             for id_hash in screenshot.import_data[\"units\"]",
                "// Line 548:                         ]",
                "// vulnerable line: 549: )",
                "// vulnerable line: 550: )",
                "// Line 551:             screenshot.import_handle.close()  # type: ignore[union-attr]",
                "// Line 552: ",
                "// Line 553:         # Trigger checks update, the implementation might have changed",
                "// Line 554:         component.schedule_update_checks()",
                "// Line 555: ",
                "// Line 556:     def import_language(self, code: str):",
                "// Line 557:         if not self.languages_cache:",
                "// Line 558:             self.languages_cache = {lang.code: lang for lang in Language.objects.all()}",
                "// Line 559:         try:",
                "// Line 560:             return self.languages_cache[code]",
                "// Line 561:         except KeyError:",
                "// Line 562:             self.languages_cache[code] = language = Language.objects.auto_get_or_create(",
                "// Line 563:                 code",
                "// vulnerable line: 564: )",
                "// Line 565:             return language",
                "// Line 566: ",
                "// Line 567:     @transaction.atomic",
                "// Line 568:     def restore(self, project_name: str, project_slug: str, user, billing=None):",
                "// Line 569:         if not isinstance(self.filename, str):",
                "// Line 570:             raise TypeError(\"Need a filename string.\")",
                "// Line 571:         with ZipFile(self.filename, \"r\") as zipfile:",
                "// Line 572:             self.load_data(zipfile)",
                "// Line 573: ",
                "// Line 574:             # Create project",
                "// Line 576:             kwargs[\"name\"] = project_name",
                "// Line 577:             kwargs[\"slug\"] = project_slug",
                "// Line 578:             self.project = project = Project.objects.create(**kwargs)",
                "// Line 579: ",
                "// Line 580:             # Handle billing and ACL (creating user needs access)",
                "// Line 581:             self.project.post_create(user, billing)",
                "// Line 582: ",
                "// Line 583:             # Create labels",
                "// Line 584:             labels = Label.objects.bulk_create(",
                "// Line 585:                 Label(project=project, **entry) for entry in self.data[\"labels\"]",
                "// vulnerable line: 586: )",
                "// Line 587:             self.labels_map = {label.name: label for label in labels}",
                "// Line 588: ",
                "// Line 589:             # Import translation memory",
                "// Line 590:             memory = self.load_memory(zipfile)",
                "// Line 591:             Memory.objects.bulk_create(",
                "// Line 592:                 [",
                "// Line 593:                     Memory(",
                "// Line 594:                         project=project,",
                "// Line 595:                         origin=entry[\"origin\"],",
                "// Line 596:                         source=entry[\"source\"],",
                "// Line 597:                         target=entry[\"target\"],",
                "// Line 598:                         source_language=self.import_language(entry[\"source_language\"]),",
                "// Line 599:                         target_language=self.import_language(entry[\"target_language\"]),",
                "// vulnerable line: 600: )",
                "// Line 601:                     for entry in memory",
                "// Line 602:                 ]",
                "// vulnerable line: 603: )",
                "// Line 604: ",
                "// Line 605:             # Extract VCS",
                "// Line 606:             for name in zipfile.namelist():",
                "// Line 607:                 if name.startswith(self.VCS_PREFIX):",
                "// vulnerable line: 608: targetpath = os.path.join(",
                "// vulnerable line: 609: project.full_path, name[self.VCS_PREFIX_LEN :]",
                "// vulnerable line: 610: )",
                "// Line 611:                     upperdirs = os.path.dirname(targetpath)",
                "// Line 612:                     if upperdirs and not os.path.exists(upperdirs):",
                "// Line 613:                         os.makedirs(upperdirs)",
                "// Line 614:                     with zipfile.open(name) as source, open(targetpath, \"wb\") as target:",
                "// Line 615:                         copyfileobj(source, target)",
                "// Line 616: ",
                "// Line 617:             # Create components",
                "// Line 618:             self.load_components(zipfile, self.restore_component)",
                "// Line 619: ",
                "// Line 620:         # Fixup linked components"
            ]
        }
    ]
}