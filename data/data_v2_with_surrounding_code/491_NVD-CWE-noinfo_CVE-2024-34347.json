{
    "cve_id": "CVE-2024-34347",
    "cve_description": "@hoppscotch/cli is a CLI to run Hoppscotch Test Scripts in CI environments. Prior to 0.8.0, the @hoppscotch/js-sandbox package provides a Javascript sandbox that uses the Node.js vm module. However, the vm module is not safe for sandboxing untrusted Javascript code. This is because code inside the vm context can break out if it can get a hold of any reference to an object created outside of the vm. In the case of @hoppscotch/js-sandbox, multiple references to external objects are passed into the vm context to allow pre-request scripts interactions with environment variables and more. But this also allows the pre-request script to escape the sandbox. This vulnerability is fixed in 0.8.0.",
    "cve_publish_date": "2024-05-08T15:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "chore: migrate `Node.js` implementation for `js-sandbox` to `isolated-vm` (#3973)\n\nCo-authored-by: Andrew Bastin <andrewbastin.k@gmail.com>",
    "type_of_change": "Renaming",
    "changes": [
        {
            "filename_of_changes": "base64-helper-functions.spec.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: import * as TE from \"fp-ts/TaskEither\"",
                "// Line 2: import { pipe } from \"fp-ts/function\"",
                "// Line 3: ",
                "// vulnerable line: 4: import { runPreRequestScript } from \"~/pre-request/node-vm\"",
                "// vulnerable line: 5: import { runTestScript } from \"~/test-runner/node-vm\"",
                "// Line 6: import { TestResponse, TestResult } from \"~/types\"",
                "// Line 7: ",
                "// Line 8: describe(\"Base64 helper functions\", () => {",
                "// Line 9:   const scriptExpectations = {",
                "// Line 10:     atob: {",
                "// Line 11:       script: `pw.env.set(\"atob\", atob(\"SGVsbG8gV29ybGQ=\"))`,",
                "// Line 12:       environment: {",
                "// Line 13:         selected: [{ key: \"atob\", value: \"Hello World\", secret: false }],",
                "// Line 14:       },",
                "// Line 15:     },"
            ]
        },
        {
            "filename_of_changes": "get.spec.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// vulnerable line: 1: import \"@relmify/jest-fp-ts\"",
                "// Line 2: import * as TE from \"fp-ts/TaskEither\"",
                "// Line 3: import { pipe } from \"fp-ts/function\"",
                "// Line 4: ",
                "// vulnerable line: 5: import { runTestScript } from \"~/test-runner/node-vm\"",
                "// Line 6: import { TestResponse, TestResult } from \"~/types\"",
                "// Line 7: ",
                "// Line 8: const fakeResponse: TestResponse = {",
                "// Line 9:   status: 200,",
                "// Line 10:   body: \"hoi\",",
                "// Line 11:   headers: [],",
                "// Line 12: }",
                "// Line 13: ",
                "// Line 14: const func = (script: string, envs: TestResult[\"envs\"]) =>",
                "// Line 15:   pipe("
            ]
        },
        {
            "filename_of_changes": "getResolve.spec.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// vulnerable line: 1: import \"@relmify/jest-fp-ts\"",
                "// Line 2: import * as TE from \"fp-ts/TaskEither\"",
                "// Line 3: import { pipe } from \"fp-ts/function\"",
                "// Line 4: ",
                "// vulnerable line: 5: import { runTestScript } from \"~/test-runner/node-vm\"",
                "// Line 6: import { TestResponse, TestResult } from \"~/types\"",
                "// Line 7: ",
                "// Line 8: const fakeResponse: TestResponse = {",
                "// Line 9:   status: 200,",
                "// Line 10:   body: \"hoi\",",
                "// Line 11:   headers: [],",
                "// Line 12: }",
                "// Line 13: ",
                "// Line 14: const func = (script: string, envs: TestResult[\"envs\"]) =>",
                "// Line 15:   pipe("
            ]
        },
        {
            "filename_of_changes": "hopp.js",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "26",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: #!/usr/bin/env node",
                "// Line 2: // * The entry point of the CLI",
                "// Line 3: ",
                "// Line 4: import { cli } from \"../dist/index.js\";",
                "// Line 5: ",
                "// vulnerable line: 6: cli(process.argv);"
            ]
        },
        {
            "filename_of_changes": "index.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "node.d.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// vulnerable line: 1: export { default } from \"./dist/node.d.ts\"",
                "// vulnerable line: 2: export * from \"./dist/node.d.ts\""
            ]
        },
        {
            "filename_of_changes": "pre-request.spec.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// vulnerable line: 1: import \"@relmify/jest-fp-ts\"",
                "// Line 2: ",
                "// vulnerable line: 3: import { runPreRequestScript } from \"~/pre-request/node-vm\"",
                "// Line 4: ",
                "// Line 5: describe(\"runPreRequestScript\", () => {",
                "// Line 6:   test(\"returns the updated environment properly\", () => {",
                "// Line 7:     return expect(",
                "// Line 8:       runPreRequestScript(",
                "// Line 9:         `",
                "// Line 10:           pw.env.set(\"bob\", \"newbob\")",
                "// Line 11:         `,",
                "// Line 12:         {",
                "// Line 13:           global: [],"
            ]
        },
        {
            "filename_of_changes": "resolve.spec.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: import * as TE from \"fp-ts/TaskEither\"",
                "// Line 2: import { pipe } from \"fp-ts/function\"",
                "// Line 3: ",
                "// vulnerable line: 4: import { runTestScript } from \"~/test-runner/node-vm\"",
                "// Line 5: import { TestResponse, TestResult } from \"~/types\"",
                "// Line 6: ",
                "// Line 7: const fakeResponse: TestResponse = {",
                "// Line 8:   status: 200,",
                "// Line 9:   body: \"hoi\",",
                "// Line 10:   headers: [],",
                "// Line 11: }",
                "// Line 12: ",
                "// Line 13: const func = (script: string, envs: TestResult[\"envs\"]) =>",
                "// Line 14:   pipe("
            ]
        },
        {
            "filename_of_changes": "secret-envs-persistence-coll.json",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "13",
            "number_of_lines_deleted_vulnerable_to_cve": "13",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: {",
                "// Line 2:   \"v\": 2,",
                "// vulnerable line: 3: \"name\": \"secret-envs-setters-coll\",",
                "// Line 4:   \"folders\": [],",
                "// Line 5:   \"requests\": [",
                "// Line 6:     {",
                "// Line 7:       \"v\": \"3\",",
                "// Line 8:       \"auth\": {",
                "// Line 9:         \"authType\": \"none\",",
                "// Line 10:         \"authActive\": true",
                "// Line 11:       },",
                "// Line 12:       \"body\": {",
                "// Line 13:         \"body\": null,",
                "// Line 15:       },",
                "// Line 16:       \"name\": \"test-secret-headers\",",
                "// Line 17:       \"method\": \"GET\",",
                "// Line 18:       \"params\": [],",
                "// Line 19:       \"requestVariables\": [],",
                "// Line 20:       \"headers\": [",
                "// Line 21:         {",
                "// Line 22:           \"key\": \"Secret-Header-Key\",",
                "// Line 23:           \"value\": \"<<secretHeaderValue>>\",",
                "// Line 24:           \"active\": true",
                "// vulnerable line: 25: }",
                "// Line 26:       ],",
                "// vulnerable line: 27: \"endpoint\": \"<<baseURL>>/headers\",",
                "// Line 28:       \"testScript\": \"pw.test(\"Successfully parses secret variable holding the header value\", () => {",
                "// Line 29:     const secretHeaderValue = pw.env.getResolve(\"secretHeaderValue\")",
                "// Line 30:     pw.expect(secretHeaderValue).toBe(\"secret-header-value\")",
                "// Line 31:     ",
                "// Line 32:     if (secretHeaderValue) {",
                "// Line 33:       pw.expect(pw.response.body.headers[\"Secret-Header-Key\"]).toBe(secretHeaderValue)",
                "// vulnerable line: 34: }",
                "// Line 35: ",
                "// Line 36:     pw.expect(pw.env.getResolve(\"secretHeaderValueFromPreReqScript\")).toBe(\"secret-header-value\")",
                "// Line 37: })\",",
                "// Line 38:       \"preRequestScript\": \"pw.env.set(\"secretHeaderValue\", \"secret-header-value\")",
                "// Line 39: ",
                "// Line 40: const secretHeaderValueFromPreReqScript = pw.env.getResolve(\"secretHeaderValue\")",
                "// Line 41: pw.env.set(\"secretHeaderValueFromPreReqScript\", secretHeaderValueFromPreReqScript)\"",
                "// Line 42:     },",
                "// Line 43:     {",
                "// Line 44:       \"v\": \"3\",",
                "// Line 52:       },",
                "// Line 53:       \"name\": \"test-secret-headers-overrides\",",
                "// Line 54:       \"method\": \"GET\",",
                "// Line 55:       \"params\": [],",
                "// Line 56:       \"requestVariables\": [],",
                "// Line 57:       \"headers\": [",
                "// Line 58:         {",
                "// Line 59:           \"key\": \"Secret-Header-Key\",",
                "// Line 60:           \"value\": \"<<secretHeaderValue>>\",",
                "// Line 61:           \"active\": true",
                "// vulnerable line: 62: }",
                "// Line 63:       ],",
                "// vulnerable line: 64: \"endpoint\": \"<<baseURL>>/headers\",",
                "// Line 65:       \"testScript\": \"pw.test(\"Value set at the pre-request script takes precedence\", () => {",
                "// Line 66:     const secretHeaderValue = pw.env.getResolve(\"secretHeaderValue\")",
                "// Line 67:     pw.expect(secretHeaderValue).toBe(\"secret-header-value-overriden\")",
                "// Line 68:     ",
                "// Line 69:     if (secretHeaderValue) {",
                "// Line 70:       pw.expect(pw.response.body.headers[\"Secret-Header-Key\"]).toBe(secretHeaderValue)",
                "// vulnerable line: 71: }",
                "// Line 72: ",
                "// Line 73:     pw.expect(pw.env.getResolve(\"secretHeaderValueFromPreReqScript\")).toBe(\"secret-header-value-overriden\")",
                "// Line 74: })\",",
                "// Line 75:       \"preRequestScript\": \"pw.env.set(\"secretHeaderValue\", \"secret-header-value-overriden\")",
                "// Line 76: ",
                "// Line 77: const secretHeaderValueFromPreReqScript = pw.env.getResolve(\"secretHeaderValue\")",
                "// Line 78: pw.env.set(\"secretHeaderValueFromPreReqScript\", secretHeaderValueFromPreReqScript)\"",
                "// Line 79:     },",
                "// Line 80:     {",
                "// Line 81:       \"v\": \"3\",",
                "// Line 87:         \"body\": \"{",
                "// Line 88:   \"secretBodyKey\": \"<<secretBodyValue>>\"",
                "// Line 89: }\",",
                "// Line 90:         \"contentType\": \"application/json\"",
                "// Line 91:       },",
                "// Line 92:       \"name\": \"test-secret-body\",",
                "// Line 93:       \"method\": \"POST\",",
                "// Line 94:       \"params\": [],",
                "// Line 95:       \"requestVariables\": [],",
                "// Line 96:       \"headers\": [],",
                "// vulnerable line: 97: \"endpoint\": \"<<baseURL>>/post\",",
                "// Line 98:       \"testScript\": \"pw.test(\"Successfully parses secret variable holding the request body value\", () => {",
                "// Line 99:     const secretBodyValue = pw.env.get(\"secretBodyValue\")",
                "// Line 100:     pw.expect(secretBodyValue).toBe(\"secret-body-value\")",
                "// Line 101:   ",
                "// Line 102:     if (secretBodyValue) {",
                "// Line 103:       pw.expect(pw.response.body.json.secretBodyKey).toBe(secretBodyValue)",
                "// vulnerable line: 104: }",
                "// Line 105: ",
                "// Line 106:     pw.expect(pw.env.get(\"secretBodyValueFromPreReqScript\")).toBe(\"secret-body-value\")",
                "// Line 107: })\",",
                "// Line 108:       \"preRequestScript\": \"const secretBodyValue = pw.env.get(\"secretBodyValue\")",
                "// Line 109: ",
                "// Line 110: if (!secretBodyValue) { ",
                "// Line 111:   pw.env.set(\"secretBodyValue\", \"secret-body-value\")",
                "// vulnerable line: 112: }",
                "// Line 113: ",
                "// Line 114: const secretBodyValueFromPreReqScript = pw.env.get(\"secretBodyValue\")",
                "// Line 115: pw.env.set(\"secretBodyValueFromPreReqScript\", secretBodyValueFromPreReqScript)\"",
                "// Line 116:     },",
                "// Line 117:     {",
                "// Line 118:       \"v\": \"3\",",
                "// Line 119:       \"auth\": {",
                "// Line 120:         \"authType\": \"none\",",
                "// Line 121:         \"authActive\": true",
                "// Line 122:       },",
                "// Line 124:         \"body\": null,",
                "// Line 125:         \"contentType\": null",
                "// Line 126:       },",
                "// Line 127:       \"name\": \"test-secret-query-params\",",
                "// Line 128:       \"method\": \"GET\",",
                "// Line 129:       \"params\": [",
                "// Line 130:         {",
                "// Line 131:           \"key\": \"secretQueryParamKey\",",
                "// Line 132:           \"value\": \"<<secretQueryParamValue>>\",",
                "// Line 133:           \"active\": true",
                "// vulnerable line: 134: }",
                "// Line 135:       ],",
                "// Line 136:       \"requestVariables\": [],",
                "// Line 137:       \"headers\": [],",
                "// vulnerable line: 138: \"endpoint\": \"<<baseURL>>/get\",",
                "// Line 139:       \"testScript\": \"pw.test(\"Successfully parses secret variable holding the query param value\", () => {",
                "// Line 140:     const secretQueryParamValue = pw.env.get(\"secretQueryParamValue\")",
                "// Line 141:     pw.expect(secretQueryParamValue).toBe(\"secret-query-param-value\")",
                "// Line 142:     ",
                "// Line 143:     if (secretQueryParamValue) {",
                "// Line 144:       pw.expect(pw.response.body.args.secretQueryParamKey).toBe(secretQueryParamValue)",
                "// vulnerable line: 145: }",
                "// Line 146: ",
                "// Line 147:     pw.expect(pw.env.get(\"secretQueryParamValueFromPreReqScript\")).toBe(\"secret-query-param-value\")",
                "// Line 148: })\",",
                "// Line 149:       \"preRequestScript\": \"const secretQueryParamValue = pw.env.get(\"secretQueryParamValue\")",
                "// Line 150: ",
                "// Line 151: if (!secretQueryParamValue) {",
                "// Line 152:   pw.env.set(\"secretQueryParamValue\", \"secret-query-param-value\")",
                "// vulnerable line: 153: }",
                "// Line 154: ",
                "// Line 155: const secretQueryParamValueFromPreReqScript = pw.env.get(\"secretQueryParamValue\")",
                "// Line 156: pw.env.set(\"secretQueryParamValueFromPreReqScript\", secretQueryParamValueFromPreReqScript)\"",
                "// Line 157:     },",
                "// Line 158:     {",
                "// Line 159:       \"v\": \"3\",",
                "// Line 160:       \"auth\": {",
                "// Line 161:         \"authType\": \"basic\",",
                "// Line 162:         \"password\": \"<<secretBasicAuthPassword>>\",",
                "// Line 163:         \"username\": \"<<secretBasicAuthUsername>>\",",
                "// Line 165:       },",
                "// Line 166:       \"body\": {",
                "// Line 167:         \"body\": null,",
                "// Line 168:         \"contentType\": null",
                "// Line 169:       },",
                "// Line 170:       \"name\": \"test-secret-basic-auth\",",
                "// Line 171:       \"method\": \"GET\",",
                "// Line 172:       \"params\": [],",
                "// Line 173:       \"requestVariables\": [],",
                "// Line 174:       \"headers\": [],",
                "// vulnerable line: 175: \"endpoint\": \"<<baseURL>>/basic-auth/<<secretBasicAuthUsername>>/<<secretBasicAuthPassword>>\",",
                "// Line 176:       \"testScript\": \"pw.test(\"Successfully parses secret variables holding basic auth credentials\", () => {",
                "// Line 177:     const secretBasicAuthUsername = pw.env.get(\"secretBasicAuthUsername\")",
                "// Line 178:       const secretBasicAuthPassword = pw.env.get(\"secretBasicAuthPassword\")",
                "// Line 179: ",
                "// Line 180:     pw.expect(secretBasicAuthUsername).toBe(\"test-user\")",
                "// Line 181:     pw.expect(secretBasicAuthPassword).toBe(\"test-pass\")",
                "// Line 182: ",
                "// Line 183:     if (secretBasicAuthUsername && secretBasicAuthPassword) {",
                "// Line 184:       const { authenticated, user } = pw.response.body",
                "// Line 185:       pw.expect(authenticated).toBe(true)",
                "// Line 186:       pw.expect(user).toBe(secretBasicAuthUsername)",
                "// vulnerable line: 187: }",
                "// Line 188: });\",",
                "// Line 189:       \"preRequestScript\": \"let secretBasicAuthUsername = pw.env.get(\"secretBasicAuthUsername\")",
                "// Line 190: ",
                "// Line 191: let secretBasicAuthPassword = pw.env.get(\"secretBasicAuthPassword\")",
                "// Line 192: ",
                "// Line 193: if (!secretBasicAuthUsername) {",
                "// Line 194:   pw.env.set(\"secretBasicAuthUsername\", \"test-user\")",
                "// vulnerable line: 195: }",
                "// Line 196: ",
                "// Line 197: if (!secretBasicAuthPassword) {",
                "// Line 198:   pw.env.set(\"secretBasicAuthPassword\", \"test-pass\")",
                "// Line 199: }\"",
                "// Line 200:     },",
                "// Line 201:     {",
                "// Line 202:       \"v\": \"3\",",
                "// Line 203:       \"auth\": {",
                "// Line 204:         \"token\": \"<<secretBearerToken>>\",",
                "// Line 205:         \"authType\": \"bearer\",",
                "// Line 209:       },",
                "// Line 210:       \"body\": {",
                "// Line 211:         \"body\": null,",
                "// Line 212:         \"contentType\": null",
                "// Line 213:       },",
                "// Line 214:       \"name\": \"test-secret-bearer-auth\",",
                "// Line 215:       \"method\": \"GET\",",
                "// Line 216:       \"params\": [],",
                "// Line 217:       \"requestVariables\": [],",
                "// Line 218:       \"headers\": [],",
                "// vulnerable line: 219: \"endpoint\": \"<<baseURL>>/bearer\",",
                "// Line 220:       \"testScript\": \"pw.test(\"Successfully parses secret variable holding the bearer token\", () => {",
                "// Line 221:     const secretBearerToken = pw.env.resolve(\"<<secretBearerToken>>\")",
                "// Line 222:   const preReqSecretBearerToken = pw.env.resolve(\"<<preReqSecretBearerToken>>\")",
                "// Line 223: ",
                "// Line 224:     pw.expect(secretBearerToken).toBe(\"test-token\")",
                "// Line 225: ",
                "// Line 226:     if (secretBearerToken) { ",
                "// Line 227:       pw.expect(pw.response.body.token).toBe(secretBearerToken)",
                "// Line 228:       pw.expect(preReqSecretBearerToken).toBe(\"test-token\")",
                "// vulnerable line: 229: }",
                "// Line 230: });\",",
                "// Line 231:       \"preRequestScript\": \"let secretBearerToken = pw.env.resolve(\"<<secretBearerToken>>\")",
                "// Line 232: ",
                "// Line 233: if (!secretBearerToken) {",
                "// Line 234:   pw.env.set(\"secretBearerToken\", \"test-token\")",
                "// Line 235:   secretBearerToken = pw.env.resolve(\"<<secretBearerToken>>\")",
                "// vulnerable line: 236: }",
                "// Line 237: ",
                "// Line 238: pw.env.set(\"preReqSecretBearerToken\", secretBearerToken)\"",
                "// vulnerable line: 239: }",
                "// Line 240:   ],",
                "// Line 241:   \"auth\": {",
                "// Line 242:     \"authType\": \"inherit\",",
                "// Line 243:     \"authActive\": false",
                "// Line 244:   },",
                "// Line 245:   \"headers\": []",
                "// vulnerable line: 246: }"
            ]
        },
        {
            "filename_of_changes": "secret-envs-persistence-scripting-coll.json",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: {",
                "// Line 2:   \"v\": 2,",
                "// Line 3:   \"name\": \"secret-envs-persistence-scripting-req\",",
                "// Line 4:   \"folders\": [],",
                "// Line 5:   \"requests\": [",
                "// Line 6:     {",
                "// Line 7:       \"v\": \"3\",",
                "// vulnerable line: 8: \"endpoint\": \"https://httpbin.org/post\",",
                "// Line 9:       \"name\": \"req\",",
                "// Line 10:       \"params\": [],",
                "// Line 11:       \"headers\": [",
                "// Line 12:         {",
                "// Line 13:           \"active\": true,",
                "// Line 14:           \"key\": \"Custom-Header\",",
                "// Line 15:           \"value\": \"<<customHeaderValueFromSecretVar>>\"",
                "// Line 16:         }",
                "// Line 17:       ],",
                "// Line 18:       \"method\": \"POST\","
            ]
        },
        {
            "filename_of_changes": "secret-envs.json",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "6",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 25:     },",
                "// Line 26:     {",
                "// Line 27:       \"key\": \"secretHeaderValue\",",
                "// Line 28:       \"secret\": true",
                "// Line 29:     },",
                "// Line 30:     {",
                "// Line 31:       \"key\": \"nonExistentValueInSystemEnv\",",
                "// Line 32:       \"secret\": true",
                "// Line 33:     },",
                "// Line 34:     {",
                "// vulnerable line: 35: \"key\": \"baseURL\",",
                "// Line 36:       \"value\": \"https://httpbin.org\",",
                "// Line 37:       \"secret\": false",
                "// Line 38:     }",
                "// Line 39:   ]",
                "// Line 40: }"
            ]
        },
        {
            "filename_of_changes": "secret-supplied-values-envs.json",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "6",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 31:     {",
                "// Line 32:       \"key\": \"secretHeaderValue\",",
                "// Line 33:       \"value\": \"secret-header-value\",",
                "// Line 34:       \"secret\": true",
                "// Line 35:     },",
                "// Line 36:     {",
                "// Line 37:       \"key\": \"nonExistentValueInSystemEnv\",",
                "// Line 38:       \"secret\": true",
                "// Line 39:     },",
                "// Line 40:     {",
                "// vulnerable line: 41: \"key\": \"baseURL\",",
                "// Line 42:       \"value\": \"https://httpbin.org\",",
                "// Line 43:       \"secret\": false",
                "// Line 44:     }",
                "// Line 45:   ]",
                "// Line 46: }"
            ]
        },
        {
            "filename_of_changes": "set.spec.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: import * as TE from \"fp-ts/TaskEither\"",
                "// Line 2: import { pipe } from \"fp-ts/function\"",
                "// Line 3: ",
                "// vulnerable line: 4: import { runTestScript } from \"~/test-runner/node-vm\"",
                "// Line 5: import { TestResponse, TestResult } from \"~/types\"",
                "// Line 6: ",
                "// Line 7: const fakeResponse: TestResponse = {",
                "// Line 8:   status: 200,",
                "// Line 9:   body: \"hoi\",",
                "// Line 10:   headers: [],",
                "// Line 11: }",
                "// Line 12: ",
                "// Line 13: const func = (script: string, envs: TestResult[\"envs\"]) =>",
                "// Line 14:   pipe("
            ]
        },
        {
            "filename_of_changes": "shared-utils.spec.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// vulnerable line: 1: import { preventCyclicObjects } from \"~/utils\"",
                "// Line 2: ",
                "// Line 3: describe(\"preventCyclicObjects\", () => {",
                "// Line 4:   test(\"succeeds with a simple object\", () => {",
                "// Line 5:     const testObj = {",
                "// Line 6:       a: 1,",
                "// Line 7:     }",
                "// Line 8: ",
                "// Line 9:     expect(preventCyclicObjects(testObj)).toBeRight()",
                "// Line 10:   })",
                "// Line 11: "
            ]
        },
        {
            "filename_of_changes": "test-runner.spec.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: import * as TE from \"fp-ts/TaskEither\"",
                "// Line 2: import { pipe } from \"fp-ts/function\"",
                "// Line 3: ",
                "// vulnerable line: 4: import { runTestScript } from \"~/test-runner/node-vm\"",
                "// Line 5: import { TestResponse } from \"~/types\"",
                "// Line 6: ",
                "// Line 7: const fakeResponse: TestResponse = {",
                "// Line 8:   status: 200,",
                "// Line 9:   body: \"hoi\",",
                "// Line 10:   headers: [],",
                "// Line 11: }",
                "// Line 12: ",
                "// Line 13: const func = (script: string, res: TestResponse) =>",
                "// Line 14:   pipe("
            ]
        },
        {
            "filename_of_changes": "test.spec.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 217:       \"collection\"",
                "// Line 218:     );",
                "// Line 219:     const ENV_PATH = getTestJsonFilePath(\"env-flag-envs.json\", \"environment\");",
                "// Line 220:     const args = `test ${TESTS_PATH} -e ${ENV_PATH}`;",
                "// Line 221: ",
                "// Line 222:     const { error } = await runCLI(args);",
                "// Line 223:     expect(error).toBeNull();",
                "// Line 224:   });",
                "// Line 225: ",
                "// Line 226:   describe(\"Secret environment variables\", () => {",
                "// vulnerable line: 227: jest.setTimeout(10000);",
                "// Line 228: ",
                "// Line 229:     // Reads secret environment values from system environment",
                "// Line 230:     test(\"Successfully picks the values for secret environment variables from `process.env` and persists the variables set from the pre-request script\", async () => {",
                "// Line 231:       const env = {",
                "// Line 232:         ...process.env,",
                "// Line 233:         secretBearerToken: \"test-token\",",
                "// Line 234:         secretBasicAuthUsername: \"test-user\",",
                "// Line 235:         secretBasicAuthPassword: \"test-pass\",",
                "// Line 236:         secretQueryParamValue: \"secret-query-param-value\",",
                "// Line 237:         secretBodyValue: \"secret-body-value\","
            ]
        },
        {
            "filename_of_changes": "toBe.spec.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// vulnerable line: 1: import \"@relmify/jest-fp-ts\"",
                "// Line 2: import * as TE from \"fp-ts/TaskEither\"",
                "// Line 3: import { pipe } from \"fp-ts/function\"",
                "// Line 4: ",
                "// vulnerable line: 5: import { runTestScript } from \"~/test-runner/node-vm\"",
                "// Line 6: import { TestResponse } from \"~/types\"",
                "// Line 7: ",
                "// Line 8: const fakeResponse: TestResponse = {",
                "// Line 9:   status: 200,",
                "// Line 10:   body: \"hoi\",",
                "// Line 11:   headers: [],",
                "// Line 12: }",
                "// Line 13: ",
                "// Line 14: const func = (script: string, res: TestResponse) =>",
                "// Line 15:   pipe(",
                "// Line 16:     runTestScript(script, { global: [], selected: [] }, res),",
                "// Line 17:     TE.map((x) => x.tests)",
                "// Line 18:   )",
                "// Line 19: ",
                "// Line 20: describe(\"toBe\", () => {",
                "// Line 21:   describe(\"general assertion (no negation)\", () => {",
                "// Line 22:     test(\"expect equals expected passes assertion\", () => {",
                "// Line 23:       return expect(",
                "// Line 24:         func(",
                "// Line 25:           `",
                "// vulnerable line: 26: pw.expect(2).toBe(2)",
                "// Line 27:           `,",
                "// Line 28:           fakeResponse",
                "// Line 29:         )()",
                "// Line 30:       ).resolves.toEqualRight([",
                "// Line 31:         expect.objectContaining({",
                "// Line 32:           expectResults: [",
                "// Line 33:             { status: \"pass\", message: \"Expected '2' to be '2'\" },",
                "// Line 34:           ],",
                "// Line 35:         }),",
                "// Line 36:       ])"
            ]
        },
        {
            "filename_of_changes": "toBeLevelxxx.spec.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// vulnerable line: 1: import \"@relmify/jest-fp-ts\"",
                "// Line 2: import * as TE from \"fp-ts/TaskEither\"",
                "// Line 3: import { pipe } from \"fp-ts/function\"",
                "// Line 4: ",
                "// vulnerable line: 5: import { runTestScript } from \"~/test-runner/node-vm\"",
                "// Line 6: import { TestResponse } from \"~/types\"",
                "// Line 7: ",
                "// Line 8: const fakeResponse: TestResponse = {",
                "// Line 9:   status: 200,",
                "// Line 10:   body: \"hoi\",",
                "// Line 11:   headers: [],",
                "// Line 12: }",
                "// Line 13: ",
                "// Line 14: const func = (script: string, res: TestResponse) =>",
                "// Line 15:   pipe("
            ]
        },
        {
            "filename_of_changes": "toBeType.spec.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: import * as TE from \"fp-ts/TaskEither\"",
                "// Line 2: import { pipe } from \"fp-ts/function\"",
                "// Line 3: ",
                "// vulnerable line: 4: import { runTestScript } from \"~/test-runner/node-vm\"",
                "// Line 5: import { TestResponse } from \"~/types\"",
                "// Line 6: ",
                "// Line 7: const fakeResponse: TestResponse = {",
                "// Line 8:   status: 200,",
                "// Line 9:   body: \"hoi\",",
                "// Line 10:   headers: [],",
                "// Line 11: }",
                "// Line 12: ",
                "// Line 13: const func = (script: string, res: TestResponse) =>",
                "// Line 14:   pipe("
            ]
        },
        {
            "filename_of_changes": "toHaveLength.spec.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: import * as TE from \"fp-ts/TaskEither\"",
                "// Line 2: import { pipe } from \"fp-ts/function\"",
                "// Line 3: ",
                "// vulnerable line: 4: import { runTestScript } from \"~/test-runner/node-vm\"",
                "// Line 5: import { TestResponse } from \"~/types\"",
                "// Line 6: ",
                "// Line 7: const fakeResponse: TestResponse = {",
                "// Line 8:   status: 200,",
                "// Line 9:   body: \"hoi\",",
                "// Line 10:   headers: [],",
                "// Line 11: }",
                "// Line 12: ",
                "// Line 13: const func = (script: string, res: TestResponse) =>",
                "// Line 14:   pipe("
            ]
        },
        {
            "filename_of_changes": "toInclude.spec.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: import * as TE from \"fp-ts/TaskEither\"",
                "// Line 2: import { pipe } from \"fp-ts/function\"",
                "// Line 3: ",
                "// vulnerable line: 4: import { runTestScript } from \"~/test-runner/node-vm\"",
                "// Line 5: import { TestResponse } from \"~/types\"",
                "// Line 6: ",
                "// Line 7: const fakeResponse: TestResponse = {",
                "// Line 8:   status: 200,",
                "// Line 9:   body: \"hoi\",",
                "// Line 10:   headers: [],",
                "// Line 11: }",
                "// Line 12: ",
                "// Line 13: const func = (script: string, res: TestResponse) =>",
                "// Line 14:   pipe("
            ]
        },
        {
            "filename_of_changes": "unset.spec.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: import * as TE from \"fp-ts/TaskEither\"",
                "// Line 2: import { pipe } from \"fp-ts/function\"",
                "// Line 3: ",
                "// vulnerable line: 4: import { runTestScript } from \"~/test-runner/node-vm\"",
                "// Line 5: import { TestResponse, TestResult } from \"~/types\"",
                "// Line 6: ",
                "// Line 7: const fakeResponse: TestResponse = {",
                "// Line 8:   status: 200,",
                "// Line 9:   body: \"hoi\",",
                "// Line 10:   headers: [],",
                "// Line 11: }",
                "// Line 12: ",
                "// Line 13: const func = (script: string, envs: TestResult[\"envs\"]) =>",
                "// Line 14:   pipe("
            ]
        },
        {
            "filename_of_changes": "utils.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "18",
            "number_of_lines_deleted_vulnerable_to_cve": "11",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: import { exec } from \"child_process\";",
                "// Line 2: import { resolve } from \"path\";",
                "// Line 3: ",
                "// Line 4: import { ExecResponse } from \"./types\";",
                "// Line 5: ",
                "// vulnerable line: 6: export const runCLI = (args: string, options = {}): Promise<ExecResponse> =>",
                "// vulnerable line: 7: {",
                "// vulnerable line: 8: const CLI_PATH = resolve(__dirname, \"../../bin/hopp\");",
                "// vulnerable line: 9: const command = `node ${CLI_PATH} ${args}`",
                "// Line 10: ",
                "// vulnerable line: 11: return new Promise((resolve) =>",
                "// vulnerable line: 12: exec(command, options, (error, stdout, stderr) => resolve({ error, stdout, stderr }))",
                "// vulnerable line: 13: );",
                "// vulnerable line: 14: }",
                "// Line 15: ",
                "// Line 16: export const trimAnsi = (target: string) => {",
                "// Line 17:   const ansiRegex =",
                "// Line 18:     /[\u001b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g;",
                "// Line 19: ",
                "// Line 20:   return target.replace(ansiRegex, \"\");",
                "// Line 21: };",
                "// Line 22: ",
                "// Line 23: export const getErrorCode = (out: string) => {",
                "// Line 24:   const ansiTrimmedStr = trimAnsi(out);",
                "// Line 25:   return ansiTrimmedStr.split(\" \")[0];",
                "// Line 26: };",
                "// Line 27: ",
                "// vulnerable line: 28: export const getTestJsonFilePath = (file: string, kind: \"collection\" | \"environment\") => {",
                "// Line 29:   const kindDir = {",
                "// Line 30:     collection: \"collections\",",
                "// Line 31:     environment: \"environments\",",
                "// Line 32:   }[kind];",
                "// Line 33: ",
                "// vulnerable line: 34: const filePath = resolve(__dirname, `../../src/__tests__/samples/${kindDir}/${file}`);",
                "// Line 35:   return filePath;",
                "// Line 36: };"
            ]
        },
        {
            "filename_of_changes": "vite.config.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "7",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: import { resolve } from \"path\"",
                "// Line 2: import { defineConfig } from \"vite\"",
                "// Line 3: ",
                "// Line 4: export default defineConfig({",
                "// Line 5:   build: {",
                "// Line 6:     outDir: \"./dist\",",
                "// Line 7:     emptyOutDir: true,",
                "// Line 8:     lib: {",
                "// Line 9:       entry: {",
                "// vulnerable line: 10: web: \"./src/web.ts\",",
                "// vulnerable line: 11: node: \"./src/node.ts\",",
                "// Line 12:       },",
                "// Line 13:       name: \"js-sandbox\",",
                "// Line 14:       formats: [\"es\", \"cjs\"],",
                "// Line 15:     },",
                "// Line 16:     rollupOptions: {",
                "// vulnerable line: 17: external: [\"vm\"],",
                "// Line 18:     },",
                "// Line 19:   },",
                "// Line 20:   resolve: {",
                "// Line 21:     alias: {",
                "// Line 22:       \"~\": resolve(__dirname, \"./src\"),",
                "// Line 23:     },",
                "// Line 24:   },",
                "// Line 25: })"
            ]
        },
        {
            "filename_of_changes": "web.d.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// vulnerable line: 1: export { default } from \"./dist/web.d.ts\"",
                "// vulnerable line: 2: export * from \"./dist/web.d.ts\""
            ]
        },
        {
            "filename_of_changes": "worker.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: import * as TE from \"fp-ts/TaskEither\"",
                "// Line 2: ",
                "// Line 3: import { TestResult } from \"~/types\"",
                "// vulnerable line: 4: import { getPreRequestScriptMethods } from \"~/utils\"",
                "// Line 5: ",
                "// Line 6: const executeScriptInContext = (",
                "// Line 7:   preRequestScript: string,",
                "// Line 8:   envs: TestResult[\"envs\"]",
                "// Line 9: ): TE.TaskEither<string, TestResult[\"envs\"]> => {",
                "// Line 10:   try {",
                "// Line 11:     const { pw, updatedEnvs } = getPreRequestScriptMethods(envs)",
                "// Line 12: ",
                "// Line 13:     // Create a function from the pre request script using the `Function` constructor",
                "// Line 14:     const executeScript = new Function(\"pw\", preRequestScript)"
            ]
        },
        {
            "filename_of_changes": "worker.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: import * as E from \"fp-ts/Either\"",
                "// Line 2: import * as TE from \"fp-ts/TaskEither\"",
                "// Line 3: ",
                "// Line 4: import { SandboxTestResult, TestResponse, TestResult } from \"~/types\"",
                "// vulnerable line: 5: import { getTestRunnerScriptMethods, preventCyclicObjects } from \"~/utils\"",
                "// Line 6: ",
                "// Line 7: const executeScriptInContext = (",
                "// Line 8:   testScript: string,",
                "// Line 9:   envs: TestResult[\"envs\"],",
                "// Line 10:   response: TestResponse",
                "// Line 11: ): TE.TaskEither<string, SandboxTestResult> => {",
                "// Line 12:   try {",
                "// Line 13:     const responseObjHandle = preventCyclicObjects(response)",
                "// Line 14:     if (E.isLeft(responseObjHandle)) {",
                "// Line 15:       return TE.left(`Response marshalling failed: ${responseObjHandle.left}`)"
            ]
        }
    ]
}