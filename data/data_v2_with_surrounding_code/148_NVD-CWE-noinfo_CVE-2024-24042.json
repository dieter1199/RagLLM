{
    "cve_id": "CVE-2024-24042",
    "cve_description": "Directory Traversal vulnerability in Devan-Kerman ARRP v.0.8.1 and before allows a remote attacker to execute arbitrary code via the dumpDirect in RuntimeResourcePackImpl component.",
    "cve_publish_date": "2024-03-19T07:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "oops v0.8.2",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "RRPPreTest.java",
            "code_language": "Java",
            "number_of_lines_added_for_mitigation": "8",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "RuntimeResourcePackImpl.java",
            "code_language": "Java",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 296:     }",
                "// Line 297:     ",
                "// Line 298:     @Override",
                "// Line 299:     public void dumpDirect(Path output) {",
                "// Line 300:         LOGGER.info(\"dumping \" + this.id + \"'s assets and data\");",
                "// Line 301:         // data dump time",
                "// Line 302:         try {",
                "// Line 303:             for(Map.Entry<List<String>, Supplier<byte[]>> e : this.root.entrySet()) {",
                "// Line 304:                 String pathStr = String.join(\"/\", e.getKey());",
                "// Line 305:                 Path path = output.resolve(pathStr);",
                "// vulnerable line: 306: if(path.startsWith(output)) {",
                "// Line 307:                     Files.createDirectories(path.getParent());",
                "// Line 308:                     Files.write(path, e.getValue().get());",
                "// Line 309:                 } else {",
                "// Line 310:                     LOGGER.error(\"RRP contains out-of-directory path! \"\" + pathStr + \"\"\");",
                "// Line 311:                 }",
                "// Line 312:             }",
                "// Line 313:             ",
                "// Line 314:             Path assets = output.resolve(\"assets\");",
                "// Line 315:             Files.createDirectories(assets);",
                "// Line 316:             for(Map.Entry<Identifier, Supplier<byte[]>> entry : this.assets.entrySet()) {",
                "// Line 547:                 this.waiting.lock();",
                "// Line 548:             }",
                "// Line 549:         }",
                "// Line 550:     }",
                "// Line 551:     ",
                "// Line 552:     private void write(Path dir, Identifier identifier, byte[] data) {",
                "// Line 553:         try {",
                "// Line 554:             String namespace = identifier.getNamespace();",
                "// Line 555:             String path = identifier.getPath();",
                "// Line 556:             Path file = dir.resolve(namespace).resolve(path);",
                "// vulnerable line: 557: if(file.startsWith(dir)) {",
                "// Line 558:                 Files.createDirectories(file.getParent());",
                "// Line 559:                 try(OutputStream output = Files.newOutputStream(file)) {",
                "// Line 560:                     output.write(data);",
                "// Line 561:                 }",
                "// Line 562:             } else {",
                "// Line 563:                 LOGGER.error(\"RRP contains out-of-directory location! \"\" + namespace + \"/\" + path + \"\"\");",
                "// Line 564:             }",
                "// Line 565: ",
                "// Line 566:         } catch(IOException e) {",
                "// Line 567:             throw new RuntimeException(e);"
            ]
        }
    ]
}