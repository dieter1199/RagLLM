{
    "cve_id": "CVE-2024-21509",
    "cve_description": "Versions of the package mysql2 before 3.9.4 are vulnerable to Prototype Poisoning due to insecure results object creation and improper user input sanitization passed through parserFn in text_parser.js and binary_parser.js.",
    "cve_publish_date": "2024-04-10T05:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fix(security): improve results object creation (#2574)\n\nFixes a potential Prototype Pollution attack vulnerability reported by Vsevolod Kokorin (Slonser) of Solidlab",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": ".nycrc",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: {",
                "// Line 2:   \"all\": true,",
                "// Line 3:   \"include\": [\"index.js\", \"promise.js\", \"lib/**/*.js\"],",
                "// Line 4:   \"exclude\": [\"mysqldata/**\", \"node_modules/**\", \"test/**\"],",
                "// Line 5:   \"reporter\": [\"text\", \"lcov\", \"cobertura\"],",
                "// Line 6:   \"statements\": 88,",
                "// Line 7:   \"branches\": 84,",
                "// vulnerable line: 8: \"functions\": 78,",
                "// Line 9:   \"lines\": 88,",
                "// Line 10:   \"checkCoverage\": true,",
                "// Line 11:   \"clean\": true",
                "// Line 12: }"
            ]
        },
        {
            "filename_of_changes": "binary_parser.js",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "10",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 115: ",
                "// Line 116:   parserFn('(function(){');",
                "// Line 117:   parserFn('return class BinaryRow {');",
                "// Line 118:   parserFn('constructor() {');",
                "// Line 119:   parserFn('}');",
                "// Line 120: ",
                "// Line 121:   parserFn('next(packet, fields, options) {');",
                "// Line 122:   if (options.rowsAsArray) {",
                "// Line 123:     parserFn(`const result = new Array(${fields.length});`);",
                "// Line 124:   } else {",
                "// vulnerable line: 125: parserFn('const result = {};');",
                "// Line 126:   }",
                "// Line 127: ",
                "// Line 128:   // Global typeCast",
                "// Line 129:   if (",
                "// Line 130:     typeof config.typeCast === 'function' &&",
                "// Line 131:     typeof options.typeCast !== 'function'",
                "// Line 132:   ) {",
                "// Line 133:     options.typeCast = config.typeCast;",
                "// Line 134:   }",
                "// Line 135: ",
                "// Line 147:   for (let i = 0; i < fields.length; i++) {",
                "// Line 148:     fieldName = helpers.srcEscape(fields[i].name);",
                "// Line 149:     parserFn(`// ${fieldName}: ${typeNames[fields[i].columnType]}`);",
                "// Line 150: ",
                "// Line 151:     if (typeof options.nestTables === 'string') {",
                "// Line 152:       lvalue = `result[${helpers.srcEscape(",
                "// Line 153:         fields[i].table + options.nestTables + fields[i].name,",
                "// Line 154:       )}]`;",
                "// Line 155:     } else if (options.nestTables === true) {",
                "// Line 156:       tableName = helpers.srcEscape(fields[i].table);",
                "// vulnerable line: 157: parserFn(`if (!result[${tableName}]) result[${tableName}] = {};`);",
                "// Line 158:       lvalue = `result[${tableName}][${fieldName}]`;",
                "// Line 159:     } else if (options.rowsAsArray) {",
                "// Line 160:       lvalue = `result[${i.toString(10)}]`;",
                "// Line 161:     } else {",
                "// Line 162:       lvalue = `result[${fieldName}]`;",
                "// Line 163:     }",
                "// Line 164: ",
                "// Line 165:     if (options.typeCast === false) {",
                "// Line 166:       parserFn(`${lvalue} = packet.readLengthCodedBuffer();`);",
                "// Line 167:     } else {"
            ]
        },
        {
            "filename_of_changes": "common.test.cjs",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "text_parser.js",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "10",
            "number_of_lines_deleted_vulnerable_to_cve": "9",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 104:         return _this.packet.readLengthCodedBuffer();",
                "// Line 105:       },",
                "// Line 106:       geometry: function () {",
                "// Line 107:         return _this.packet.parseGeometryValue();",
                "// Line 108:       },",
                "// Line 109:     };",
                "// Line 110:   }",
                "// Line 111: ",
                "// Line 112:   const parserFn = genFunc();",
                "// Line 113: ",
                "// vulnerable line: 114: /* eslint-disable no-trailing-spaces */",
                "// vulnerable line: 115: /* eslint-disable no-spaced-func */",
                "// vulnerable line: 116: /* eslint-disable no-unexpected-multiline */",
                "// Line 117:   parserFn('(function () {')('return class TextRow {');",
                "// Line 118: ",
                "// Line 119:   // constructor method",
                "// Line 120:   parserFn('constructor(fields) {');",
                "// Line 121:   // node-mysql typeCast compatibility wrapper",
                "// Line 122:   // see https://github.com/mysqljs/mysql/blob/96fdd0566b654436624e2375c7b6604b1f50f825/lib/protocol/packets/Field.js",
                "// Line 123:   if (typeof options.typeCast === 'function') {",
                "// Line 124:     parserFn('const _this = this;');",
                "// Line 125:     parserFn('for(let i=0; i<fields.length; ++i) {');",
                "// Line 126:     parserFn('this[`wrap${i}`] = wrap(fields[i], _this);');",
                "// Line 127:     parserFn('}');",
                "// Line 128:   }",
                "// Line 129:   parserFn('}');",
                "// Line 130: ",
                "// Line 131:   // next method",
                "// Line 132:   parserFn('next(packet, fields, options) {');",
                "// Line 133:   parserFn('this.packet = packet;');",
                "// Line 134:   if (options.rowsAsArray) {",
                "// Line 135:     parserFn(`const result = new Array(${fields.length});`);",
                "// Line 136:   } else {",
                "// vulnerable line: 137: parserFn('const result = {};');",
                "// Line 138:   }",
                "// Line 139: ",
                "// Line 140:   const resultTables = {};",
                "// Line 141:   let resultTablesArray = [];",
                "// Line 142: ",
                "// Line 143:   if (options.nestTables === true) {",
                "// Line 144:     for (let i = 0; i < fields.length; i++) {",
                "// Line 145:       resultTables[fields[i].table] = 1;",
                "// Line 146:     }",
                "// Line 147:     resultTablesArray = Object.keys(resultTables);",
                "// Line 148:     for (let i = 0; i < resultTablesArray.length; i++) {",
                "// vulnerable line: 149: parserFn(`result[${helpers.srcEscape(resultTablesArray[i])}] = {};`);",
                "// Line 150:     }",
                "// Line 151:   }",
                "// Line 152: ",
                "// Line 153:   let lvalue = '';",
                "// Line 154:   let fieldName = '';",
                "// Line 155:   for (let i = 0; i < fields.length; i++) {",
                "// Line 156:     fieldName = helpers.srcEscape(fields[i].name);",
                "// Line 157:     parserFn(`// ${fieldName}: ${typeNames[fields[i].columnType]}`);",
                "// Line 158:     if (typeof options.nestTables === 'string') {",
                "// Line 159:       lvalue = `result[${helpers.srcEscape(",
                "// Line 184:       } else {",
                "// Line 185:         parserFn(`${lvalue} = ${readCode};`);",
                "// Line 186:       }",
                "// Line 187:     }",
                "// Line 188:   }",
                "// Line 189: ",
                "// Line 190:   parserFn('return result;');",
                "// Line 191:   parserFn('}');",
                "// Line 192:   parserFn('};')('})()');",
                "// Line 193: ",
                "// vulnerable line: 194: /* eslint-enable no-trailing-spaces */",
                "// vulnerable line: 195: /* eslint-enable no-spaced-func */",
                "// vulnerable line: 196: /* eslint-enable no-unexpected-multiline */",
                "// Line 197: ",
                "// Line 198:   if (config.debug) {",
                "// Line 199:     helpers.printDebugWithCode(",
                "// Line 200:       'Compiled text protocol row parser',",
                "// Line 201:       parserFn.toString(),",
                "// Line 202:     );",
                "// Line 203:   }",
                "// Line 204:   if (typeof options.typeCast === 'function') {",
                "// Line 205:     return parserFn.toFunction({ wrap });",
                "// Line 206:   }"
            ]
        }
    ]
}