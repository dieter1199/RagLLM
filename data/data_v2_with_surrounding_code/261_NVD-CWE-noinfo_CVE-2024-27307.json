{
    "cve_id": "CVE-2024-27307",
    "cve_description": "JSONata is a JSON query and transformation language. Starting in version 1.4.0 and prior to version 1.8.7 and 2.0.4, a malicious expression can use the transform operator to override properties on the `Object` constructor and prototype. This may lead to denial of service, remote code execution or other unexpected behavior in applications that evaluate user-provided JSONata expressions. This issue has been fixed in JSONata versions 1.8.7 and 2.0.4. Applications that evaluate user-provided expressions should update ASAP to prevent exploitation. As a workaround, one may apply the patch manually.",
    "cve_publish_date": "2024-03-06T20:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Check for constructor property",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "implementation-tests.js",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "9",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "jsonata.js",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1286:                 };",
                "// Line 1287:             }",
                "// Line 1288:             var result = await apply(cloneFunction, [obj], null, environment);",
                "// Line 1289:             var matches = await evaluate(expr.pattern, result, environment);",
                "// Line 1290:             if(typeof matches !== 'undefined') {",
                "// Line 1291:                 if(!Array.isArray(matches)) {",
                "// Line 1292:                     matches = [matches];",
                "// Line 1293:                 }",
                "// Line 1294:                 for(var ii = 0; ii < matches.length; ii++) {",
                "// Line 1295:                     var match = matches[ii];",
                "// vulnerable line: 1296: if (match && match.isPrototypeOf(result)) {",
                "// Line 1297:                         throw {",
                "// Line 1298:                             code: \"D1010\",",
                "// Line 1299:                             stack: (new Error()).stack,",
                "// Line 1300:                             position: expr.position",
                "// Line 1301:                         };",
                "// Line 1302:                     }",
                "// Line 1303:                     // evaluate the update value for each match",
                "// Line 1304:                     var update = await evaluate(expr.update, match, environment);",
                "// Line 1305:                     // update must be an object",
                "// Line 1306:                     var updateType = typeof update;"
            ]
        }
    ]
}