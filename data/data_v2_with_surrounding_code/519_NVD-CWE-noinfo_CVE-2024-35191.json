{
    "cve_id": "CVE-2024-35191",
    "cve_description": "Formie is a Craft CMS plugin for creating forms. Prior to 2.1.6, users with access to a form's settings can include malicious Twig code into fields that support Twig. These might be the Submission Title or the Success Message. This code will then be executed upon creating a submission, or rendering the text.  This has been fixed in Formie 2.1.6.",
    "cve_publish_date": "2024-05-20T21:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Change all instances of dynamic Twig to use safe, sandboxed environment to protect against potential security issues",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "FormsController.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 357:                 'form' => $form,",
                "// Line 358:             ]);",
                "// Line 359: ",
                "// Line 360:             return null;",
                "// Line 361:         }",
                "// Line 362: ",
                "// Line 363:         $this->setSuccessFlash(Craft::t('app', 'Form deleted.'));",
                "// Line 364: ",
                "// Line 365:         if ($this->request->getAcceptsJson()) {",
                "// Line 366:             $url = $this->request->getValidatedBodyParam('redirect');",
                "// vulnerable line: 367: $url = Craft::$app->getView()->renderObjectTemplate($url, $form);",
                "// Line 368: ",
                "// Line 369:             return $this->asJson([",
                "// Line 370:                 'success' => false,",
                "// Line 371:                 'redirect' => UrlHelper::url($url),",
                "// Line 372:             ]);",
                "// Line 373:         }",
                "// Line 374: ",
                "// Line 375:         return $this->redirectToPostedUrl($form);",
                "// Line 376:     }",
                "// Line 377: "
            ]
        },
        {
            "filename_of_changes": "Hidden.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "0",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 129:             // Potentially move this to `Variables::getParsedValue()`.",
                "// Line 130:             if ($element instanceof NestedFieldRow) {",
                "// Line 131:                 $element = $element->owner;",
                "// Line 132:             }",
                "// Line 133: ",
                "// Line 134:             // Check if there's no value been added on the front-end, and use the default value",
                "// Line 135:             if ($value === '') {",
                "// Line 136:                 $value = $this->defaultValue;",
                "// Line 137:             }",
                "// Line 138: ",
                "// vulnerable line: 139: // Prevent users using long-hand Twig `{{` to prevent injection execution",
                "// vulnerable line: 140: $value = str_replace(['{{', '}}'], ['{', '}'], $value);",
                "// Line 141:             $value = Variables::getParsedValue($value, $element);",
                "// Line 142: ",
                "// Line 143:             // Immediately update the value for the element, so integrations use the up-to-date value",
                "// Line 144:             if ($element) {",
                "// Line 145:                 $element->setFieldValue($this->handle, $value);",
                "// Line 146:             }",
                "// Line 147:         }",
                "// Line 148: ",
                "// Line 149:         return parent::serializeValue($value, $element);",
                "// Line 150:     }"
            ]
        },
        {
            "filename_of_changes": "PluginTrait.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "10",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "Rendering.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 491:             }",
                "// Line 492:         }",
                "// Line 493: ",
                "// Line 494:         $disabledValues = [];",
                "// Line 495: ",
                "// Line 496:         // Try to populate fields with their default value",
                "// Line 497:         foreach ($values as $key => $value) {",
                "// Line 498:             try {",
                "// Line 499:                 $field = $form->getFieldByHandle($key);",
                "// Line 500: ",
                "// vulnerable line: 501: // Prevent users using long-hand Twig `{{` to prevent injection execution. Only an issue for ",
                "// Line 502:                 if (is_string($value)) {",
                "// vulnerable line: 503: $value = str_replace(['{{', '}}', '{%', '%}'], ['{', '}', '', ''], $value);",
                "// Line 504:                 }",
                "// Line 505: ",
                "// Line 506:                 if ($field) {",
                "// Line 507:                     // Store any visibly disabled fields against the form to apply later",
                "// Line 508:                     if ($field->visibility === 'disabled') {",
                "// Line 509:                         $disabledValues[$key] = $value;",
                "// Line 510:                     }",
                "// Line 511:                     ",
                "// Line 512:                     // Ensure that the field has a chance to populate the default value correctly",
                "// Line 513:                     $field->populateValue($value);"
            ]
        },
        {
            "filename_of_changes": "Submission.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "4",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 558: ",
                "// Line 559:         if (Craft::$app->getIsMultiSite()) {",
                "// Line 560:             $params['site'] = $this->getSite()->handle;",
                "// Line 561:         }",
                "// Line 562: ",
                "// Line 563:         return UrlHelper::cpUrl($path, $params);",
                "// Line 564:     }",
                "// Line 565: ",
                "// Line 566:     public function updateTitle($form): void",
                "// Line 567:     {",
                "// vulnerable line: 568: // Prevent users using long-hand Twig `{{` to prevent injection execution",
                "// vulnerable line: 569: $submissionTitleFormat = str_replace(['{{', '}}'], ['', ''], $form->settings->submissionTitleFormat);",
                "// Line 570: ",
                "// vulnerable line: 571: if ($customTitle = Variables::getParsedValue($submissionTitleFormat, $this, $form)) {",
                "// Line 572:             $this->title = $customTitle;",
                "// Line 573: ",
                "// Line 574:             // Rather than re-save, directly update the submission record",
                "// Line 575:             Craft::$app->getDb()->createCommand()->update('{{%formie_submissions}}', ['title' => $customTitle], ['id' => $this->id])->execute();",
                "// Line 576:             Craft::$app->getDb()->createCommand()->update('{{%content}}', ['title' => $customTitle], ['elementId' => $this->id])->execute();",
                "// Line 577:         }",
                "// Line 578:     }",
                "// Line 579: ",
                "// Line 580:     /**",
                "// Line 581:      * Gets the submission's form."
            ]
        },
        {
            "filename_of_changes": "SubmissionResolver.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "4",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 92: ",
                "// Line 93:         // Populate the default status if none",
                "// Line 94:         if (!$submission->statusId) {",
                "// Line 95:             $defaultStatus = $form->getDefaultStatus();",
                "// Line 96:             $submission->setStatus($defaultStatus);",
                "// Line 97:         }",
                "// Line 98: ",
                "// Line 99:         if (!$submission->title) {",
                "// Line 100:             $settings = $form->settings;",
                "// Line 101: ",
                "// vulnerable line: 102: // Prevent users using long-hand Twig `{{` to prevent injection execution",
                "// vulnerable line: 103: $submissionTitleFormat = str_replace(['{{', '}}'], ['', ''], $settings->submissionTitleFormat);",
                "// Line 104: ",
                "// vulnerable line: 105: $submission->title = Variables::getParsedValue($submissionTitleFormat, $submission, $form);",
                "// Line 106: ",
                "// Line 107:             if (!$submission->title) {",
                "// Line 108:                 $timeZone = Craft::$app->getTimeZone();",
                "// Line 109:                 $now = new DateTime('now', new DateTimeZone($timeZone));",
                "// Line 110:                 $submission->title = $now->format('Y-m-d H:i');",
                "// Line 111:             }",
                "// Line 112:         }",
                "// Line 113: ",
                "// Line 114:         $submission->setScenario(Element::SCENARIO_LIVE);",
                "// Line 115:         $submission->validateCurrentPageOnly = (bool)$submission->isIncomplete;"
            ]
        },
        {
            "filename_of_changes": "SubmissionsController.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "6",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 696:         $form = $event->form;",
                "// Line 697: ",
                "// Line 698:         if ($request->getAcceptsJson()) {",
                "// Line 699:             return $this->_returnJsonResponse(true, $submission, $form, $nextPage);",
                "// Line 700:         }",
                "// Line 701: ",
                "// Line 702:         if (!empty($nextPage)) {",
                "// Line 703:             // Refresh, there's still more pages to complete. Or check if we should \"redirect\" to a template-defined",
                "// Line 704:             // URL, which is set for every page (commonly the first one, once a submission is available)",
                "// Line 705:             if ($settings->pageRedirectUrl) {",
                "// vulnerable line: 706: $url = $this->getView()->renderObjectTemplate($settings->pageRedirectUrl, $submission);",
                "// Line 707: ",
                "// Line 708:                 return $this->redirect($url);",
                "// Line 709:             }",
                "// Line 710: ",
                "// Line 711:             return $this->refresh();",
                "// Line 712:         }",
                "// Line 713: ",
                "// Line 714:         Formie::$plugin->getService()->setFlash($form->id, 'submitted', true);",
                "// Line 715: ",
                "// Line 716:         if ($form->settings->submitAction == 'message' || $form->settings->submitAction == 'reload') {",
                "// Line 1018:     private function _returnJsonResponse($success, $submission, $form, $nextPage, $extras = []): Response",
                "// Line 1019:     {",
                "// Line 1020:         // Try and get the redirect from the template, as it might've been altered in templates",
                "// Line 1021:         $redirect = $this->request->getValidatedBodyParam('redirect');",
                "// Line 1022: ",
                "// Line 1023:         // Otherwise, use the form defined",
                "// Line 1024:         if (!$redirect) {",
                "// Line 1025:             $redirect = $form->getRedirectUrl();",
                "// Line 1026:         }",
                "// Line 1027: ",
                "// vulnerable line: 1028: $redirectUrl = Craft::$app->getView()->renderObjectTemplate($redirect, $submission);",
                "// Line 1029: ",
                "// Line 1030:         $params = array_merge([",
                "// Line 1031:             'success' => $success,",
                "// Line 1032:             'submissionId' => $submission->id,",
                "// Line 1033:             'currentPageId' => $form->getCurrentPage()->id,",
                "// Line 1034:             'nextPageId' => $nextPage->id ?? null,",
                "// Line 1035:             'nextPageIndex' => $form->getPageIndex($nextPage) ?? 0,",
                "// Line 1036:             'totalPages' => is_countable($form->getPages()) ? count($form->getPages()) : 0,",
                "// Line 1037:             'redirectUrl' => $redirectUrl,",
                "// Line 1038:             'submitActionMessage' => $form->settings->getSubmitActionMessage($submission),",
                "// Line 1192:                 // as we've already set that to be the page with the first field error",
                "// Line 1193:                 return $form->getCurrentPage();",
                "// Line 1194:             }",
                "// Line 1195:         }",
                "// Line 1196: ",
                "// Line 1197:         return $nextPage;",
                "// Line 1198:     }",
                "// Line 1199: ",
                "// Line 1200:     private function _setTitle($submission, $form): void",
                "// Line 1201:     {",
                "// vulnerable line: 1202: // Prevent users using long-hand Twig `{{` to prevent injection execution",
                "// vulnerable line: 1203: $submissionTitleFormat = str_replace(['{{', '}}'], ['', ''], $form->settings->submissionTitleFormat);",
                "// Line 1204: ",
                "// vulnerable line: 1205: $submission->title = Variables::getParsedValue($submissionTitleFormat, $submission, $form);",
                "// Line 1206: ",
                "// Line 1207:         // Set the default title for the submission, so it can save correctly",
                "// Line 1208:         if (!$submission->title) {",
                "// Line 1209:             $now = new DateTime('now', new DateTimeZone(Craft::$app->getTimeZone()));",
                "// Line 1210:             $submission->title = $now->format('D, d M Y H:i:s');",
                "// Line 1211:         }",
                "// Line 1212:     }",
                "// Line 1213: ",
                "// Line 1214:     /**",
                "// Line 1215:      * Returns the named parameter value from either GET or the request body, or bails on the request with a 400 error"
            ]
        },
        {
            "filename_of_changes": "Variables.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 269:         $fieldVariables = array_merge($fieldVariables, self::_getParsedFieldValues($form, $submission, $notification));",
                "// Line 270: ",
                "// Line 271:         // Don't save anything unless we have values",
                "// Line 272:         $fieldVariables = array_filter($fieldVariables);",
                "// Line 273: ",
                "// Line 274:         Formie::$plugin->getRenderCache()->setFieldVariables($cacheKey, $fieldVariables);",
                "// Line 275: ",
                "// Line 276:         $variables = Formie::$plugin->getRenderCache()->getVariables($cacheKey);",
                "// Line 277: ",
                "// Line 278:         // Try to parse submission + extra variables",
                "// vulnerable line: 279: $view = Craft::$app->getView();",
                "// Line 280: ",
                "// Line 281:         try {",
                "// vulnerable line: 282: return $view->renderObjectTemplate($value, $submission, $variables);",
                "// Line 283:         } catch (Throwable $e) {",
                "// Line 284:             Formie::error(Craft::t('formie', 'Failed to render dynamic string “{value}”. Template error: “{message}” {file}:{line}', [",
                "// Line 285:                 'value' => $originalValue,",
                "// Line 286:                 'message' => $e->getMessage(),",
                "// Line 287:                 'file' => $e->getFile(),",
                "// Line 288:                 'line' => $e->getLine(),",
                "// Line 289:             ]));",
                "// Line 290: ",
                "// Line 291:             return '';",
                "// Line 292:         }",
                "// Line 304:             return $data;",
                "// Line 305:         }",
                "// Line 306: ",
                "// Line 307:         // If a specific notification isn't passed in, use a new instance of one. This is for times where we don't really mind",
                "// Line 308:         // _which_ notification is used, like when a submission is made on the front-end, with a submit message.",
                "// Line 309:         if (!$notification) {",
                "// Line 310:             $notification = new Notification();",
                "// Line 311:         }",
                "// Line 312: ",
                "// Line 313:         // Need to switch back to the CP to render our fields email HTML",
                "// vulnerable line: 314: $view = Craft::$app->getView();",
                "// Line 315:         $oldTemplateMode = $view->getTemplateMode();",
                "// Line 316:         $view->setTemplateMode($view::TEMPLATE_MODE_CP);",
                "// Line 317: ",
                "// Line 318:         foreach ($form->getCustomFields() as $field) {",
                "// Line 319:             if (!$field->includeInEmail) {",
                "// Line 320:                 continue;",
                "// Line 321:             }",
                "// Line 322: ",
                "// Line 323:             if ($field->isConditionallyHidden($submission)) {",
                "// Line 324:                 continue;",
                "// Line 533:             return $fieldItems;",
                "// Line 534:         }",
                "// Line 535: ",
                "// Line 536:         // If a specific notification isn't passed in, use a new instance of one. This is for times where we don't really mind",
                "// Line 537:         // _which_ notification is used, like when a submission is made on the front-end, with a submit message.",
                "// Line 538:         if (!$notification) {",
                "// Line 539:             $notification = new Notification();",
                "// Line 540:         }",
                "// Line 541: ",
                "// Line 542:         // Need to switch back to the CP to render our fields email HTML",
                "// vulnerable line: 543: $view = Craft::$app->getView();",
                "// Line 544:         $oldTemplateMode = $view->getTemplateMode();",
                "// Line 545:         $view->setTemplateMode($view::TEMPLATE_MODE_CP);",
                "// Line 546: ",
                "// Line 547:         foreach ($form->getCustomFields() as $field) {",
                "// Line 548:             if (!$field->includeInEmail) {",
                "// Line 549:                 continue;",
                "// Line 550:             }",
                "// Line 551: ",
                "// Line 552:             if ($field->isConditionallyHidden($submission)) {",
                "// Line 553:                 continue;"
            ]
        },
        {
            "filename_of_changes": "Webhook.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 83:             'submission' => $submission,",
                "// Line 84:             'payload' => $payload,",
                "// Line 85:         ]);",
                "// Line 86:         $this->trigger(self::EVENT_MODIFY_WEBHOOK_PAYLOAD, $event);",
                "// Line 87: ",
                "// Line 88:         return $event->payload;",
                "// Line 89:     }",
                "// Line 90: ",
                "// Line 91:     protected function getWebhookUrl($url, Submission $submission): bool|string|null",
                "// Line 92:     {",
                "// vulnerable line: 93: $url = Craft::$app->getView()->renderObjectTemplate($url, $submission);",
                "// Line 94: ",
                "// Line 95:         return App::parseEnv($url);",
                "// Line 96:     }",
                "// Line 97: }"
            ]
        }
    ]
}