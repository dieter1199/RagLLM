{
    "cve_id": "CVE-2024-29181",
    "cve_description": "Strapi is an open-source content management system. Prior to version 4.19.1, a super admin can create a collection where an item in the collection has an association to another collection. When this happens, another user with Author Role can see the list of associated items they did not create. They should see nothing but their own items they created not all items ever created. Users should upgrade @strapi/plugin-content-manager to version 4.19.1 to receive a patch.",
    "cve_publish_date": "2024-06-12T15:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fix: Check component names against collectionTypeNames",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "FormModal.tsx",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "8",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 387: ",
                "// Line 388:       // Check for validity for creating a component",
                "// Line 389:       // This is happening when the user creates a component \"on the fly\"",
                "// Line 390:       // Since we temporarily store the component info in another object",
                "// Line 391:       // The data is set in the componentToCreate key",
                "// Line 392:     } else if (isComponentAttribute && isCreatingComponentFromAView && isInFirstComponentStep) {",
                "// Line 393:       schema = forms.component.schema(",
                "// Line 394:         Object.keys(components) as Common.UID.Component[],",
                "// Line 395:         get(modifiedData, 'componentToCreate.category', ''),",
                "// Line 396:         reservedNames,",
                "// vulnerable line: 397: ctbFormsAPI",
                "// Line 398:       );",
                "// Line 399: ",
                "// Line 400:       // Check form validity for creating a 'common attribute'",
                "// Line 401:       // We need to make sure that it is independent from the step",
                "// Line 402:     } else if (isCreatingAttribute && !isInFirstComponentStep) {",
                "// Line 403:       const type = attributeType === 'relation' ? 'relation' : modifiedData.type;",
                "// Line 404: ",
                "// Line 405:       let alreadyTakenTargetContentTypeAttributes = [];",
                "// Line 406: ",
                "// Line 407:       if (type === 'relation') {",
                "// Line 427:             return attrName !== initialData.targetAttribute;",
                "// Line 428:           }",
                "// Line 429:         );",
                "// Line 430:       }",
                "// Line 431:       schema = forms.attribute.schema(",
                "// Line 432:         get(allDataSchema, pathToSchema, {}),",
                "// Line 433:         type,",
                "// Line 434:         reservedNames,",
                "// Line 435:         alreadyTakenTargetContentTypeAttributes,",
                "// Line 436:         { modifiedData, initialData },",
                "// vulnerable line: 437: ctbFormsAPI",
                "// Line 438:       );",
                "// Line 439:     } else if (isEditingCategory) {",
                "// Line 440:       schema = forms.editCategory.schema(allComponentsCategories, initialData);",
                "// Line 441:     } else {",
                "// Line 442:       // The user is either in the addComponentToDynamicZone modal or",
                "// Line 443:       // in step 1 of the add component (modalType=attribute&attributeType=component) but not creating a component",
                "// Line 444:       // eslint-disable-next-line no-lonely-if",
                "// Line 445:       if (isInFirstComponentStep && isCreatingComponentFromAView) {",
                "// Line 446:         schema = forms.component.schema(",
                "// Line 447:           Object.keys(components) as Common.UID.Component[],",
                "// Line 448:           get(modifiedData, 'componentToCreate.category', ''),",
                "// Line 449:           reservedNames,",
                "// vulnerable line: 450: ctbFormsAPI",
                "// Line 451:         );",
                "// Line 452:       } else {",
                "// Line 453:         // The form is valid",
                "// Line 454:         // The case here is being in the addComponentToDynamicZone modal and not creating a component",
                "// Line 455:         return;",
                "// Line 456:       }",
                "// Line 457:     }",
                "// Line 458: ",
                "// Line 459:     await schema.validate(dataToValidate, { abortEarly: false });",
                "// Line 460:   };"
            ]
        },
        {
            "filename_of_changes": "component-builder.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "8",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "createCollectionName.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "10",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "createComponentSchema.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "7",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: import { translatedErrors as errorsTrads } from '@strapi/helper-plugin';",
                "// Line 2: import * as yup from 'yup';",
                "// Line 3: ",
                "// Line 4: import { getTrad } from '../../../utils/getTrad';",
                "// Line 5: import { CATEGORY_NAME_REGEX } from '../category/regex';",
                "// Line 6: import { createComponentUid } from '../utils/createUid';",
                "// Line 7: ",
                "// Line 8: export const createComponentSchema = (",
                "// Line 9:   usedComponentNames: Array<string>,",
                "// Line 10:   reservedNames: Array<string>,",
                "// vulnerable line: 11: category: string",
                "// Line 12: ) => {",
                "// Line 13:   const shape = {",
                "// Line 14:     displayName: yup",
                "// Line 15:       .string()",
                "// Line 16:       .test({",
                "// Line 17:         name: 'nameAlreadyUsed',",
                "// Line 18:         message: errorsTrads.unique,",
                "// Line 19:         test(value) {",
                "// Line 20:           if (!value) {",
                "// Line 21:             return false;",
                "// Line 22:           }",
                "// Line 23: ",
                "// Line 24:           const name = createComponentUid(value, category);",
                "// Line 25: ",
                "// vulnerable line: 26: return !usedComponentNames.includes(name);",
                "// Line 27:         },",
                "// Line 28:       })",
                "// Line 29:       .test({",
                "// Line 30:         name: 'nameNotAllowed',",
                "// Line 31:         message: getTrad('error.contentTypeName.reserved-name'),",
                "// Line 32:         test(value) {",
                "// Line 33:           if (!value) {",
                "// Line 34:             return false;",
                "// Line 35:           }",
                "// Line 36:           return !reservedNames.includes(value?.trim()?.toLowerCase());"
            ]
        },
        {
            "filename_of_changes": "forms.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "22",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 307:       reservedNames: {",
                "// Line 308:         models: any;",
                "// Line 309:       },",
                "// Line 310:       isEditing = false,",
                "// Line 311:       compoUid: Common.UID.Component | null = null",
                "// Line 312:     ) {",
                "// Line 313:       const takenNames = isEditing",
                "// Line 314:         ? alreadyTakenAttributes.filter((uid: Common.UID.Component) => uid !== compoUid)",
                "// Line 315:         : alreadyTakenAttributes;",
                "// Line 316: ",
                "// vulnerable line: 317: return createComponentSchema(takenNames, reservedNames.models, componentCategory);",
                "// Line 318:     },",
                "// Line 319:     form: {",
                "// Line 320:       advanced() {",
                "// Line 321:         return {",
                "// Line 322:           sections: componentForm.advanced(),",
                "// Line 323:         };",
                "// Line 324:       },",
                "// Line 325:       base() {",
                "// Line 326:         return {",
                "// Line 327:           sections: componentForm.base(),"
            ]
        }
    ]
}