{
    "cve_id": "CVE-2024-4146",
    "cve_description": "In lunary-ai/lunary version v1.2.13, an improper authorization vulnerability exists that allows unauthorized users to access and manipulate projects within an organization they should not have access to. Specifically, the vulnerability is located in the `checkProjectAccess` method within the authorization middleware, which fails to adequately verify if a user has the correct permissions to access a specific project. Instead, it only checks if the user is part of the organization owning the project, overlooking the necessary check against the `account_project` table for explicit project access rights. This flaw enables attackers to gain complete control over all resources within a project, including the ability to create, update, read, and delete any resource, compromising the privacy and security of sensitive information.",
    "cve_publish_date": "2024-06-08T20:15Z",
    "cwe_id": "CWE-863",
    "cwe_name": "Incorrect Authorization",
    "cwe_description": "The product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. This allows attackers to bypass intended access restrictions.",
    "commit_message": "fix: project accesss (#343)",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "authorization.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "5",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: import { Next } from \"koa\"",
                "// Line 2: import sql from \"./db\"",
                "// Line 3: import Context from \"./koa\"",
                "// Line 4: import { Action, ResourceName, hasAccess } from \"shared\"",
                "// Line 5: ",
                "// vulnerable line: 6: // TODO: Needs to use account_project instead",
                "// Line 7: export async function checkProjectAccess(projectId: string, userId: string) {",
                "// Line 8:   const [{ exists: hasAccess }] = await sql`",
                "// Line 9:       select exists (",
                "// Line 10:         select 1 ",
                "// vulnerable line: 11: from project ",
                "// vulnerable line: 12: where org_id = (select org_id from account where id = ${userId}) ",
                "// vulnerable line: 13: and id = ${projectId}",
                "// Line 14:       )",
                "// vulnerable line: 15: `",
                "// Line 16:   return hasAccess",
                "// Line 17: }",
                "// Line 18: ",
                "// Line 19: export function checkAccess(resourceName: ResourceName, action: Action) {",
                "// Line 20:   return async (ctx: Context, next: Next) => {",
                "// Line 21:     if (ctx.state.privateKey) {",
                "// Line 22:       // give all rights to private key",
                "// Line 23:       await next()",
                "// Line 24:       return",
                "// Line 25:     }"
            ]
        }
    ]
}