{
    "cve_id": "CVE-2024-39846",
    "cve_description": "NewPass before 1.2.0 stores passwords (rather than password hashes) directly, which makes it easier to obtain unauthorized access to sensitive information. NOTE: in each case, data at rest is encrypted, but is decrypted within process memory during use.",
    "cve_publish_date": "2024-06-29T21:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Feature: Store password hash in encrypted shared preferences\n\nPreviously, the database encryption password (used for login as well and created during the first launch) was directly stored encrypted in EncryptedSharedPreferences. With this commit, when a user inputs the password to create the user during the first launch, the password is hashed using PBKDF2WithHmacSHA256, and the resulting hash is stored in encrypted shared preferences.\n\nThen, every time the user inputs the known password to login, the password is hashed using the same algorithm, the same number of iterations, and is confronted with the (hashed) password retrieved from the EncryptedSharedPreferences.\n\nThis improves security by ensuring that the actual password is not stored directly, but rather its hash, making it more difficult for unauthorized access to obtain sensitive information.",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "LoginActivity.java",
            "code_language": "Java",
            "number_of_lines_added_for_mitigation": "16",
            "number_of_lines_deleted_vulnerable_to_cve": "6",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 66: ",
                "// Line 67:         welcomeTextView.setText(getString(R.string.welcome_newpass_text));",
                "// Line 68: ",
                "// Line 69:         loginViewModel = new ViewModelProvider(this, new ViewMoldelsFactory(new ResourceRepository(getApplicationContext()))).get(LoginViewModel.class);",
                "// Line 70: ",
                "// Line 71:         loginViewModel.getLoginMessageLiveData().observe(this, message -> {",
                "// Line 72:             // Toast.makeText(this, message, Toast.LENGTH_SHORT).show();",
                "// Line 73:         });",
                "// Line 74: ",
                "// Line 75:         loginViewModel.getLoginSuccessLiveData().observe(this, success -> {",
                "// vulnerable line: 76: String savedPasswordSharedPreferences = encryptedSharedPreferences.getString(\"password\", \"\");",
                "// Line 77: ",
                "// Line 78:             if (success) {",
                "// Line 79:                 Intent intent = new Intent(LoginActivity.this, MainViewActivity.class);",
                "// vulnerable line: 80: StringHelper.setSharedString(savedPasswordSharedPreferences);",
                "// Line 81:                 startActivity(intent);",
                "// Line 82:                 finish();",
                "// Line 83:             } else {",
                "// Line 84:                 AnimationsUtility.errorAnimation(buttonRegisterOrUnlock, textViewRegisterOrUnlock);",
                "// Line 85:             }",
                "// Line 86:         });",
                "// Line 87: ",
                "// Line 88:         encryptedSharedPreferences = EncryptionHelper.getEncryptedSharedPreferences(getApplicationContext());",
                "// Line 89: ",
                "// Line 90:         //Determining whether to set dark or light mode based on shared preferences",
                "// Line 91:         SharedPreferencesHelper.toggleDarkLightModeUI(this);",
                "// Line 92: ",
                "// vulnerable line: 93: String password = encryptedSharedPreferences.getString(\"password\", \"\");",
                "// vulnerable line: 94: Boolean isPasswordEmpty = password.isEmpty();",
                "// Line 95: ",
                "// Line 96:         if (!isPasswordEmpty) {",
                "// Line 97:             textViewRegisterOrUnlock.setText(getString(R.string.unlock_newpass_button_text));",
                "// Line 98:             welcomeTextView.setText(getString(R.string.welcome_back_newpass_text));",
                "// Line 99: ",
                "// Line 100:         } else {",
                "// Line 101:             AlertDialog dialog = getAlertDialog();",
                "// Line 102:             dialog.show();",
                "// Line 103:         }",
                "// Line 104: ",
                "// Line 172:         } else {",
                "// Line 173:             loginWithPassword(view);",
                "// Line 174:         }",
                "// Line 175:     }",
                "// Line 176: ",
                "// Line 177:     private void registerUser() {",
                "// Line 178:         Log.d(\"LOGIN_VM\", \"First launch\");",
                "// Line 179: ",
                "// Line 180:         buttonRegisterOrUnlock.setOnClickListener(v -> {",
                "// Line 181:             String passwordInput = passwordEntry.getText().toString();",
                "// vulnerable line: 182: loginViewModel.createUser(passwordInput, encryptedSharedPreferences);",
                "// Line 183:             VibrationHelper.vibrate(v, VibrationHelper.VibrationType.Strong);",
                "// Line 184:         });",
                "// Line 185:     }",
                "// Line 186: ",
                "// Line 187:     private void hideUI(boolean bool) {",
                "// Line 188:         if (bool) {",
                "// Line 189:             buttonRegisterOrUnlock.setVisibility(View.GONE);",
                "// Line 190:             passwordEntry.setVisibility(View.GONE);",
                "// Line 191:             passwordBox.setVisibility(View.GONE);",
                "// Line 192:             welcomeTextView.setVisibility(View.GONE);",
                "// Line 206:         view.setOnTouchListener((v, event) -> {",
                "// Line 207: ",
                "// Line 208:             String passwordInput = passwordEntry.getText().toString();",
                "// Line 209: ",
                "// Line 210:             switch (event.getAction()) {",
                "// Line 211:                 case MotionEvent.ACTION_DOWN:",
                "// Line 212:                     VibrationHelper.vibrate(v, VibrationHelper.VibrationType.Weak);",
                "// Line 213:                     return true;",
                "// Line 214:                 case MotionEvent.ACTION_UP:",
                "// Line 215:                     v.performClick();",
                "// vulnerable line: 216: loginViewModel.loginUserWithPassword(passwordInput, encryptedSharedPreferences);",
                "// Line 217:                     VibrationHelper.vibrate(v, VibrationHelper.VibrationType.Strong);",
                "// Line 218:                     return true;",
                "// Line 219:             }",
                "// Line 220:             return false;",
                "// Line 221:         });",
                "// Line 222:     }",
                "// Line 223: ",
                "// Line 224: ",
                "// Line 225:     private void initViews(ActivityLoginBinding binding) {",
                "// Line 226:         passwordEntry = binding.loginTwPassword;"
            ]
        },
        {
            "filename_of_changes": "LoginViewModel.java",
            "code_language": "Java",
            "number_of_lines_added_for_mitigation": "10",
            "number_of_lines_deleted_vulnerable_to_cve": "5",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 33: ",
                "// Line 34:     public LiveData<String> getLoginMessageLiveData() {",
                "// Line 35:         return loginMessageLiveData;",
                "// Line 36:     }",
                "// Line 37:     public LiveData<Boolean> getLoginSuccessLiveData() {",
                "// Line 38:         return loginSuccessLiveData;",
                "// Line 39:     }",
                "// Line 40: ",
                "// Line 41: ",
                "// Line 42: ",
                "// vulnerable line: 43: public void loginUserWithPassword(String password, EncryptedSharedPreferences sharedPreferences) {",
                "// Line 44: ",
                "// vulnerable line: 45: String savedPasswordSharedPreferences = sharedPreferences.getString(\"password\", \"\");",
                "// Line 46: ",
                "// vulnerable line: 47: if (savedPasswordSharedPreferences.equals(password)) {",
                "// Line 48:             loginSuccessLiveData.setValue(true);",
                "// Line 49:             loginMessageLiveData.setValue(resourceRepository.getString(R.string.login_done));",
                "// Line 50:         } else {",
                "// Line 51:             loginSuccessLiveData.setValue(false);",
                "// Line 52:             loginMessageLiveData.setValue(resourceRepository.getString(R.string.access_denied));",
                "// Line 53:         }",
                "// Line 54:     }",
                "// Line 55: ",
                "// Line 56:     public void loginUserWithBiometricAuth(Context context) {",
                "// Line 57:         Executor executor = ContextCompat.getMainExecutor(context);",
                "// Line 81:         BiometricPrompt.PromptInfo promptInfo = new BiometricPrompt.PromptInfo.Builder()",
                "// Line 82:                 .setTitle(context.getString(R.string.login))",
                "// Line 83:                 .setSubtitle(context.getString(R.string.use_your_biometric_or_device_credentials))",
                "// Line 84:                 .setAllowedAuthenticators(BiometricManager.Authenticators.BIOMETRIC_WEAK | BiometricManager.Authenticators.DEVICE_CREDENTIAL)",
                "// Line 85:                 .build();",
                "// Line 86: ",
                "// Line 87:         biometricPrompt.authenticate(promptInfo);",
                "// Line 88:     }",
                "// Line 89: ",
                "// Line 90: ",
                "// vulnerable line: 91: public void createUser(String password, EncryptedSharedPreferences sharedPreferences) {",
                "// Line 92: ",
                "// Line 93:         if (password.length() >= 4) {",
                "// Line 94:             SharedPreferences.Editor editor = sharedPreferences.edit();",
                "// vulnerable line: 95: editor.putString(\"password\", password);",
                "// Line 96:             editor.apply();",
                "// Line 97: ",
                "// Line 98:             loginSuccessLiveData.setValue(true);",
                "// Line 99:             loginMessageLiveData.setValue(resourceRepository.getString(R.string.user_created_successfully));",
                "// Line 100:         } else {",
                "// Line 101:             loginSuccessLiveData.setValue(false);",
                "// Line 102:             loginMessageLiveData.setValue(resourceRepository.getString(R.string.password_must_be_at_least_4_characters_long));",
                "// Line 103:         }",
                "// Line 104:     }",
                "// Line 105: }"
            ]
        }
    ]
}