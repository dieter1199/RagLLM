{
    "cve_id": "CVE-2024-30264",
    "cve_description": "Typebot is an open-source chatbot builder. A reflected cross-site scripting (XSS) in the sign-in page of typebot.io prior to version 2.24.0 may allow an attacker to hijack a user's account. The sign-in page takes the `redirectPath` parameter from the URL. If a user clicks on a link where the `redirectPath` parameter has a javascript scheme, the attacker that crafted the link may be able to execute arbitrary JavaScript with the privileges  of the user. Version 2.24.0 contains a patch for this issue.",
    "cve_publish_date": "2024-04-04T21:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "ðŸ”’ Use sanitizeUrl on redirectPath auth param (#1389)",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "SignInForm.tsx",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 48:   const [providers, setProviders] =",
                "// Line 49:     useState<",
                "// Line 50:       Record<LiteralUnion<BuiltInProviderType, string>, ClientSafeProvider>",
                "// Line 51:     >()",
                "// Line 52: ",
                "// Line 53:   const hasNoAuthProvider =",
                "// Line 54:     !isLoadingProviders && Object.keys(providers ?? {}).length === 0",
                "// Line 55: ",
                "// Line 56:   useEffect(() => {",
                "// Line 57:     if (status === 'authenticated') {",
                "// vulnerable line: 58: router.replace(router.query.redirectPath?.toString() ?? '/typebots')",
                "// Line 59:       return",
                "// Line 60:     }",
                "// Line 61:     ;(async () => {",
                "// Line 62:       const providers = await getProviders()",
                "// Line 63:       setProviders(providers ?? undefined)",
                "// Line 64:       setIsLoadingProviders(false)",
                "// Line 65:     })()",
                "// Line 66:   }, [status, router])",
                "// Line 67: ",
                "// Line 68:   useEffect(() => {"
            ]
        }
    ]
}