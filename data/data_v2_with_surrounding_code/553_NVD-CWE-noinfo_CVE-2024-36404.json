{
    "cve_id": "CVE-2024-36404",
    "cve_description": "GeoTools is an open source Java library that provides tools for geospatial data. Prior to versions 31.2, 30.4, and 29.6, Remote Code Execution (RCE) is possible if an application uses certain GeoTools functionality to evaluate XPath expressions supplied by user input. Versions 31.2, 30.4, and 29.6 contain a fix for this issue. As a workaround, GeoTools can operate with reduced functionality by removing the `gt-complex` jar from one's application. As an example of the impact, application schema `datastore` would not function without the ability to use XPath expressions to query complex content. Alternatively, one may utilize a drop-in replacement GeoTools jar from SourceForge for versions 31.1, 30.3, 30.2, 29.2, 28.2, 27.5, 27.4, 26.7, 26.4, 25.2, and 24.0. These jars are for download only and are not available from maven central, intended to quickly provide a fix to affected applications.",
    "cve_publish_date": "2024-07-02T14:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "[GEOT-7587] Improve handling of XPath expressions",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "FeaturePropertyAccessorFactory.java",
            "code_language": "Java",
            "number_of_lines_added_for_mitigation": "8",
            "number_of_lines_deleted_vulnerable_to_cve": "17",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 13:  *    but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "// Line 14:  *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU",
                "// Line 15:  *    Lesser General Public License for more details.",
                "// Line 16:  */",
                "// Line 17: ",
                "// Line 18: package org.geotools.data.complex.expression;",
                "// Line 19: ",
                "// Line 20: import static org.geotools.filter.expression.SimpleFeaturePropertyAccessorFactory.DEFAULT_GEOMETRY_NAME;",
                "// Line 21: ",
                "// Line 22: import java.util.ArrayList;",
                "// vulnerable line: 23: import java.util.Enumeration;",
                "// Line 24: import java.util.Iterator;",
                "// Line 25: import java.util.List;",
                "// Line 26: import java.util.regex.Pattern;",
                "// Line 27: import org.apache.commons.jxpath.JXPathContext;",
                "// Line 28: import org.apache.commons.jxpath.Pointer;",
                "// Line 29: import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;",
                "// Line 30: import org.geotools.api.feature.Attribute;",
                "// Line 31: import org.geotools.api.feature.ComplexAttribute;",
                "// Line 32: import org.geotools.api.feature.Feature;",
                "// Line 33: import org.geotools.api.feature.GeometryAttribute;",
                "// Line 61:  * @author Justin Deoliveira (The Open Planning Project)",
                "// Line 62:  * @author Gabriel Roldan (Axios Engineering)",
                "// Line 63:  */",
                "// Line 64: public class FeaturePropertyAccessorFactory implements PropertyAccessorFactory {",
                "// Line 65: ",
                "// Line 66:     static {",
                "// Line 67:         // unfortunatley, jxpath only works against concreate classes",
                "// Line 68:         // JXPathIntrospector.registerDynamicClass(DefaultFeature.class,",
                "// Line 69:         // FeaturePropertyHandler.class);",
                "// Line 70:         JXPathContextReferenceImpl.addNodePointerFactory(new AttributeNodePointerFactory());",
                "// vulnerable line: 71: }",
                "// Line 72: ",
                "// Line 73:     /** Single instnace is fine - we are not stateful */",
                "// Line 74:     static PropertyAccessor ATTRIBUTE_ACCESS = new FeaturePropertyAccessor();",
                "// Line 75: ",
                "// Line 76:     static PropertyAccessor DEFAULT_GEOMETRY_ACCESS = new DefaultGeometryFeaturePropertyAccessor();",
                "// Line 77: ",
                "// Line 78:     static PropertyAccessor FID_ACCESS = new FidFeaturePropertyAccessor();",
                "// Line 79: ",
                "// Line 80:     static final Pattern FID_PATTERN = Pattern.compile(\"@(\\w+:)?id\");",
                "// Line 81: ",
                "// Line 82:     @Override",
                "// Line 83:     public PropertyAccessor createPropertyAccessor(",
                "// Line 84:             Class type, String xpath, Class target, Hints hints) {",
                "// Line 85: ",
                "// vulnerable line: 86: if (SimpleFeature.class.isAssignableFrom(type)) {",
                "// Line 87:             /*",
                "// Line 88:              * This class is not intended for use with SimpleFeature and causes problems when",
                "// Line 89:              * discovered via SPI and used by code expecting SimpleFeature behaviour. In particular",
                "// Line 90:              * WMS styling code may fail when this class is present. See GEOS-3525.",
                "// Line 91:              */",
                "// Line 92:             return null;",
                "// vulnerable line: 93: }",
                "// Line 94: ",
                "// Line 95:         if (xpath == null) return null;",
                "// Line 96: ",
                "// Line 97:         if (!ComplexAttribute.class.isAssignableFrom(type)",
                "// Line 98:                 && !ComplexType.class.isAssignableFrom(type)",
                "// Line 99:                 && !AttributeDescriptor.class.isAssignableFrom(type)) return null;",
                "// Line 100:         if (DEFAULT_GEOMETRY_NAME.equals(xpath)) return DEFAULT_GEOMETRY_ACCESS;",
                "// Line 101: ",
                "// Line 102:         // check for fid access",
                "// Line 103:         if (FID_PATTERN.matcher(xpath).matches()) return FID_ACCESS;",
                "// Line 104: ",
                "// Line 105:         // check for simple property access",
                "// Line 106:         // if (xpath.matches(\"(\\w+:)?(\\w+)\")) {",
                "// Line 107:         NamespaceSupport namespaces = null;",
                "// Line 108:         if (hints != null) {",
                "// Line 109:             namespaces =",
                "// Line 110:                     (NamespaceSupport) hints.get(FeaturePropertyAccessorFactory.NAMESPACE_CONTEXT);",
                "// vulnerable line: 111: }",
                "// Line 112:         if (namespaces == null) {",
                "// Line 113:             return ATTRIBUTE_ACCESS;",
                "// Line 114:         } else {",
                "// Line 115:             return new FeaturePropertyAccessor(namespaces);",
                "// vulnerable line: 116: }",
                "// Line 117:         // }",
                "// Line 118: ",
                "// Line 119:         // return null;",
                "// vulnerable line: 120: }",
                "// Line 121: ",
                "// Line 122:     /**",
                "// Line 123:      * Access to Feature Identifier.",
                "// Line 124:      *",
                "// Line 125:      * @author Jody Garnett (Refractions Research)",
                "// Line 126:      */",
                "// Line 127:     static class FidFeaturePropertyAccessor implements PropertyAccessor {",
                "// Line 128: ",
                "// Line 129:         @Override",
                "// Line 130:         public boolean canHandle(Object object, String xpath, Class target) {",
                "// Line 131:             // we only work against feature, not feature type",
                "// Line 132:             return object instanceof Attribute && FID_PATTERN.matcher(xpath).matches();",
                "// vulnerable line: 133: }",
                "// Line 134: ",
                "// Line 135:         @Override",
                "// Line 136:         @SuppressWarnings(\"unchecked\")",
                "// Line 137:         public <T> T get(Object object, String xpath, Class<T> target)",
                "// Line 138:                 throws IllegalArgumentException {",
                "// Line 139:             Attribute feature = (Attribute) object;",
                "// Line 140:             return (T) feature.getIdentifier().toString();",
                "// vulnerable line: 141: }",
                "// Line 142: ",
                "// Line 143:         @Override",
                "// Line 144:         public void set(Object object, String xpath, Object value, Class target) {",
                "// Line 145:             throw new org.geotools.api.feature.IllegalAttributeException(",
                "// Line 146:                     null, value, \"feature id is immutable\");",
                "// vulnerable line: 147: }",
                "// vulnerable line: 148: }",
                "// Line 149: ",
                "// Line 150:     static class DefaultGeometryFeaturePropertyAccessor implements PropertyAccessor {",
                "// Line 151: ",
                "// Line 152:         @Override",
                "// Line 153:         public boolean canHandle(Object object, String xpath, Class target) {",
                "// Line 154:             if (!DEFAULT_GEOMETRY_NAME.equals(xpath)) return false;",
                "// Line 155: ",
                "// Line 156:             // if (target != Geometry.class || target != GeometryAttribute.class)",
                "// Line 157:             //    return false;",
                "// Line 158: ",
                "// Line 159:             return (object instanceof Feature || object instanceof FeatureType);",
                "// vulnerable line: 160: }",
                "// Line 161: ",
                "// Line 162:         @Override",
                "// Line 163:         @SuppressWarnings(\"unchecked\")",
                "// Line 164:         public <T> T get(Object object, String xpath, Class<T> target)",
                "// Line 165:                 throws IllegalArgumentException {",
                "// Line 166:             if (object instanceof Feature)",
                "// Line 167:                 return (T) ((Feature) object).getDefaultGeometryProperty();",
                "// Line 168:             if (object instanceof FeatureType) {",
                "// Line 169:                 FeatureType ft = (FeatureType) object;",
                "// Line 170:                 GeometryDescriptor gd = ft.getGeometryDescriptor();",
                "// Line 171:                 if (gd == null) {",
                "// Line 172:                     // look for any geometry descriptor",
                "// Line 173:                     for (PropertyDescriptor pd : ft.getDescriptors()) {",
                "// Line 174:                         if (Geometry.class.isAssignableFrom(pd.getType().getBinding())) {",
                "// Line 175:                             return (T) pd;",
                "// vulnerable line: 176: }",
                "// vulnerable line: 177: }",
                "// vulnerable line: 178: }",
                "// Line 179:                 return (T) gd;",
                "// vulnerable line: 180: }",
                "// Line 181:             return null;",
                "// vulnerable line: 182: }",
                "// Line 183: ",
                "// Line 184:         @Override",
                "// Line 185:         public void set(Object object, String xpath, Object value, Class target)",
                "// Line 186:                 throws IllegalAttributeException {",
                "// Line 187: ",
                "// Line 188:             if (object instanceof Feature) {",
                "// Line 189:                 final Feature f = (Feature) object;",
                "// Line 190:                 GeometryAttribute geom;",
                "// Line 191:                 if (value instanceof GeometryAttribute) {",
                "// Line 192:                     geom = (GeometryAttribute) value;",
                "// Line 193:                     f.setDefaultGeometryProperty(geom);",
                "// Line 194:                 } else if (value instanceof Geometry) {",
                "// Line 195:                     geom = f.getDefaultGeometryProperty();",
                "// Line 196:                     geom.setValue(value);",
                "// Line 197:                 } else {",
                "// Line 198:                     throw new IllegalArgumentException(\"Argument is not a geometry: \" + value);",
                "// vulnerable line: 199: }",
                "// vulnerable line: 200: }",
                "// Line 201:             if (object instanceof FeatureType) {",
                "// Line 202:                 throw new IllegalAttributeException(null, \"feature type is immutable\");",
                "// vulnerable line: 203: }",
                "// vulnerable line: 204: }",
                "// vulnerable line: 205: }",
                "// Line 206: ",
                "// Line 207:     static class FeaturePropertyAccessor implements PropertyAccessor {",
                "// Line 208:         /*static {",
                "// Line 209:                     // TODO: use a wrapper public class for Feature in order to",
                "// Line 210:                     // support any implementation. Reason being that JXPath works",
                "// Line 211:                     // over concrete classes and hence we cannot set it up over the",
                "// Line 212:                     // interface",
                "// Line 213:                     JXPathIntrospector.registerDynamicClass(FeatureImpl.class,",
                "// Line 214:                             AttributePropertyHandler.class);",
                "// Line 215:                     JXPathIntrospector.registerDynamicClass(SimpleFeatureImpl.class,",
                "// Line 234:                     JXPathIntrospector.registerDynamicClass(FeatureTypeImpl.class,",
                "// Line 235:                             AttributeDescriptorPropertyHandler.class);",
                "// Line 236:                     JXPathIntrospector.registerDynamicClass(UniqueNameFeatureTypeImpl.class,",
                "// Line 237:                             AttributeDescriptorPropertyHandler.class);",
                "// Line 238:                 }*/",
                "// Line 239: ",
                "// Line 240:         private NamespaceSupport namespaces;",
                "// Line 241: ",
                "// Line 242:         public FeaturePropertyAccessor() {",
                "// Line 243:             namespaces = new NamespaceSupport();",
                "// vulnerable line: 244: }",
                "// Line 245: ",
                "// Line 246:         public FeaturePropertyAccessor(NamespaceSupport namespaces) {",
                "// Line 247:             this.namespaces = namespaces;",
                "// vulnerable line: 248: }",
                "// Line 249: ",
                "// Line 250:         @Override",
                "// Line 251:         public boolean canHandle(Object object, String xpath, Class target) {",
                "// Line 252: ",
                "// Line 253:             return object instanceof Attribute",
                "// Line 254:                     || object instanceof AttributeType",
                "// Line 255:                     || object instanceof AttributeDescriptor;",
                "// vulnerable line: 256: }",
                "// Line 257: ",
                "// Line 258:         @Override",
                "// Line 259:         @SuppressWarnings(\"unchecked\")",
                "// Line 260:         public <T> T get(Object object, String xpath, Class<T> target)",
                "// Line 261:                 throws IllegalArgumentException {",
                "// Line 262: ",
                "// vulnerable line: 263: JXPathContext context = JXPathContext.newContext(object);",
                "// vulnerable line: 264: Enumeration declaredPrefixes = namespaces.getDeclaredPrefixes();",
                "// vulnerable line: 265: while (declaredPrefixes.hasMoreElements()) {",
                "// vulnerable line: 266: String prefix = (String) declaredPrefixes.nextElement();",
                "// vulnerable line: 267: String uri = namespaces.getURI(prefix);",
                "// vulnerable line: 268: context.registerNamespace(prefix, uri);",
                "// vulnerable line: 269: }",
                "// Line 270: ",
                "// Line 271:             Iterator it = context.iteratePointers(xpath);",
                "// Line 272:             List results = new ArrayList<>();",
                "// Line 273:             while (it.hasNext()) {",
                "// Line 274:                 Pointer pointer = (Pointer) it.next();",
                "// Line 275:                 if (pointer instanceof AttributeNodePointer) {",
                "// Line 276:                     results.add(((AttributeNodePointer) pointer).getImmediateAttribute());",
                "// Line 277:                 } else {",
                "// Line 278:                     results.add(pointer.getValue());",
                "// vulnerable line: 279: }",
                "// vulnerable line: 280: }",
                "// Line 281: ",
                "// Line 282:             if (results.isEmpty()) {",
                "// Line 283:                 throw new IllegalArgumentException(\"x-path gives no results.\");",
                "// Line 284:             } else if (results.size() == 1) {",
                "// Line 285:                 return (T) results.get(0);",
                "// Line 286:             } else {",
                "// Line 287:                 return (T) results;",
                "// vulnerable line: 288: }",
                "// vulnerable line: 289: }",
                "// Line 290: ",
                "// Line 291:         @Override",
                "// Line 292:         public void set(Object object, String xpath, Object value, Class target)",
                "// Line 293:                 throws IllegalAttributeException {",
                "// Line 294: ",
                "// Line 295:             if (object instanceof FeatureType) {",
                "// Line 296:                 throw new IllegalAttributeException(null, \"feature type is immutable\");",
                "// vulnerable line: 297: }",
                "// Line 298: ",
                "// vulnerable line: 299: JXPathContext context = JXPathContext.newContext(object);",
                "// vulnerable line: 300: Enumeration declaredPrefixes = namespaces.getDeclaredPrefixes();",
                "// vulnerable line: 301: while (declaredPrefixes.hasMoreElements()) {",
                "// vulnerable line: 302: String prefix = (String) declaredPrefixes.nextElement();",
                "// vulnerable line: 303: String uri = namespaces.getURI(prefix);",
                "// vulnerable line: 304: context.registerNamespace(prefix, uri);",
                "// vulnerable line: 305: }",
                "// Line 306:             context.setValue(xpath, value);",
                "// Line 307: ",
                "// Line 308:             assert value == context.getValue(xpath);",
                "// vulnerable line: 309: }",
                "// vulnerable line: 310: }",
                "// vulnerable line: 311: }"
            ]
        },
        {
            "filename_of_changes": "FeaturePropertyAccessorTest.java",
            "code_language": "Java",
            "number_of_lines_added_for_mitigation": "14",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "JXPathStreamingParserHandler.java",
            "code_language": "Java",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "7",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 10:  *    version 2.1 of the License.",
                "// Line 11:  *",
                "// Line 12:  *    This library is distributed in the hope that it will be useful,",
                "// Line 13:  *    but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "// Line 14:  *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU",
                "// Line 15:  *    Lesser General Public License for more details.",
                "// Line 16:  */",
                "// Line 17: package org.geotools.xsd.impl.jxpath;",
                "// Line 18: ",
                "// Line 19: import java.util.Iterator;",
                "// vulnerable line: 20: import org.apache.commons.jxpath.JXPathContext;",
                "// vulnerable line: 21: import org.apache.commons.jxpath.JXPathContextFactory;",
                "// Line 22: import org.apache.commons.jxpath.JXPathIntrospector;",
                "// Line 23: import org.geotools.xsd.Configuration;",
                "// Line 24: import org.geotools.xsd.Node;",
                "// Line 25: import org.geotools.xsd.impl.ElementHandler;",
                "// Line 26: import org.geotools.xsd.impl.NodeImpl;",
                "// Line 27: import org.geotools.xsd.impl.StreamingParserHandler;",
                "// Line 28: ",
                "// Line 29: public class JXPathStreamingParserHandler extends StreamingParserHandler {",
                "// Line 30:     /** xpath to stream * */",
                "// Line 31:     String xpath;",
                "// Line 40:     protected boolean stream(ElementHandler handler) {",
                "// Line 41:         // create an xpath context from the root element",
                "// Line 42:         // TODO: cache the context, should work just the same",
                "// Line 43:         //        JXPathIntrospector.registerDynamicClass(ElementHandlerImpl.class,",
                "// Line 44:         //            ElementHandlerPropertyHandler.class);",
                "// Line 45:         JXPathIntrospector.registerDynamicClass(NodeImpl.class, NodePropertyHandler.class);",
                "// Line 46: ",
                "// Line 47:         //        ElementHandler rootHandler =",
                "// Line 48:         //            ((DocumentHandler) handlers.firstElement()).getDocumentElementHandler();",
                "// Line 49:         Node root = handlers.firstElement().getParseNode();",
                "// vulnerable line: 50: JXPathContext jxpContext = JXPathContextFactory.newInstance().newContext(null, root);",
                "// Line 51: ",
                "// vulnerable line: 52: jxpContext.setLenient(true);",
                "// Line 53: ",
                "// vulnerable line: 54: Iterator itr = jxpContext.iterate(xpath);",
                "// Line 55: ",
                "// Line 56:         while (itr.hasNext()) {",
                "// Line 57:             Object obj = itr.next();",
                "// Line 58: ",
                "// Line 59:             if (handler.getParseNode().equals(obj)) {",
                "// Line 60:                 return true;",
                "// Line 61:             }",
                "// Line 62:         }",
                "// Line 63: ",
                "// Line 64:         return false;"
            ]
        },
        {
            "filename_of_changes": "MapPropertyAccessorFactory.java",
            "code_language": "Java",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "4",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 11:  *",
                "// Line 12:  *    This library is distributed in the hope that it will be useful,",
                "// Line 13:  *    but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "// Line 14:  *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU",
                "// Line 15:  *    Lesser General Public License for more details.",
                "// Line 16:  */",
                "// Line 17: ",
                "// Line 18: package org.geotools.data.complex.expression;",
                "// Line 19: ",
                "// Line 20: import java.util.Map;",
                "// vulnerable line: 21: import org.apache.commons.jxpath.JXPathContext;",
                "// Line 22: import org.geotools.api.feature.IllegalAttributeException;",
                "// Line 23: import org.geotools.filter.expression.PropertyAccessor;",
                "// Line 24: import org.geotools.filter.expression.PropertyAccessorFactory;",
                "// Line 25: import org.geotools.util.factory.Hints;",
                "// Line 26: ",
                "// Line 27: /**",
                "// Line 28:  * A {@link PropertyAccessorFactory} that returns a {@link PropertyAccessor} capable of evaluating",
                "// Line 29:  * single attribute names from a {@link Map}.",
                "// Line 30:  *",
                "// Line 31:  * @author Gabriel Roldan",
                "// Line 56: ",
                "// Line 57:                 @Override",
                "// Line 58:                 public boolean canHandle(Object object, String xpath, Class target) {",
                "// Line 59:                     return object instanceof Map;",
                "// Line 60:                 }",
                "// Line 61: ",
                "// Line 62:                 @Override",
                "// Line 63:                 @SuppressWarnings(\"unchecked\")",
                "// Line 64:                 public <T> T get(Object object, String xpath, Class<T> target)",
                "// Line 65:                         throws IllegalArgumentException {",
                "// vulnerable line: 66: JXPathContext context = JXPathContext.newContext(object);",
                "// vulnerable line: 67: context.setLenient(true);",
                "// vulnerable line: 68: return (T) context.getValue(xpath);",
                "// Line 69:                 }",
                "// Line 70: ",
                "// Line 71:                 @Override",
                "// Line 72:                 public void set(Object object, String xpath, Object value, Class target)",
                "// Line 73:                         throws IllegalAttributeException, IllegalArgumentException {",
                "// Line 74:                     throw new IllegalAttributeException(\"not implemented\");",
                "// Line 75:                 }",
                "// Line 76:             };",
                "// Line 77: }"
            ]
        },
        {
            "filename_of_changes": "StreamingParserTest.java",
            "code_language": "Java",
            "number_of_lines_added_for_mitigation": "13",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "XmlXpathUtilites.java",
            "code_language": "Java",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "21",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 11:  *",
                "// Line 12:  *    This library is distributed in the hope that it will be useful,",
                "// Line 13:  *    but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "// Line 14:  *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU",
                "// Line 15:  *    Lesser General Public License for more details.",
                "// Line 16:  */",
                "// Line 17: ",
                "// Line 18: package org.geotools.appschema.util;",
                "// Line 19: ",
                "// Line 20: import java.util.ArrayList;",
                "// vulnerable line: 21: import java.util.Enumeration;",
                "// Line 22: import java.util.List;",
                "// Line 23: import java.util.Scanner;",
                "// Line 24: import org.apache.commons.jxpath.JXPathContext;",
                "// Line 25: import org.jdom2.Document;",
                "// Line 26: import org.xml.sax.helpers.NamespaceSupport;",
                "// Line 27: ",
                "// Line 28: /**",
                "// Line 29:  * Ulities class for xpath handling on a jdom document object",
                "// Line 30:  *",
                "// Line 31:  * @author Russell Petty (GeoScience Victoria)",
                "// Line 34: public class XmlXpathUtilites {",
                "// Line 35: ",
                "// Line 36:     /**",
                "// Line 37:      * @param ns namespaces",
                "// Line 38:      * @param xpathString xpath to search on",
                "// Line 39:      * @param doc xml to search",
                "// Line 40:      * @return a list of values matching the xpath in the xml supplied",
                "// Line 41:      */",
                "// Line 42:     public static List<String> getXPathValues(",
                "// Line 43:             NamespaceSupport ns, String xpathString, Document doc) {",
                "// vulnerable line: 44: JXPathContext context = initialiseContext(ns, doc);",
                "// Line 45:         return getXPathValues(xpathString, context);",
                "// vulnerable line: 46: }",
                "// Line 47: ",
                "// Line 48:     /**",
                "// Line 49:      * @param ns namespaces",
                "// Line 50:      * @param xpathString xpath to search on",
                "// Line 51:      * @param doc xml to search",
                "// Line 52:      * @return count of the values matching the xpath passed in",
                "// Line 53:      */",
                "// Line 54:     public static int countXPathNodes(NamespaceSupport ns, String xpathString, Document doc) {",
                "// Line 55:         int count = 0;",
                "// Line 56:         List<String> ls = getXPathValues(ns, xpathString, doc);",
                "// Line 57:         if (ls != null) {",
                "// Line 58:             count = ls.size();",
                "// vulnerable line: 59: }",
                "// Line 60:         return count;",
                "// vulnerable line: 61: }",
                "// Line 62: ",
                "// Line 63:     /**",
                "// Line 64:      * @param ns namespaces",
                "// Line 65:      * @param xpathString xpath to search on",
                "// Line 66:      * @param doc xml to search",
                "// Line 67:      * @return the (single) value matching the xpath in the xml supplied",
                "// Line 68:      */",
                "// Line 69:     public static String getSingleXPathValue(",
                "// Line 70:             NamespaceSupport ns, String xpathString, Document doc) {",
                "// Line 71:         String id = null;",
                "// vulnerable line: 72: JXPathContext context = initialiseContext(ns, doc);",
                "// Line 73:         try {",
                "// vulnerable line: 74: Object ob = context.getValue(xpathString);",
                "// Line 75:             id = (String) ob;",
                "// Line 76:         } catch (RuntimeException e) {",
                "// Line 77:             throw new RuntimeException(\"Error reading xpath \" + xpathString, e);",
                "// vulnerable line: 78: }",
                "// Line 79:         return id;",
                "// vulnerable line: 80: }",
                "// Line 81: ",
                "// vulnerable line: 82: private static JXPathContext initialiseContext(NamespaceSupport ns, Document doc) {",
                "// vulnerable line: 83: JXPathContext context = JXPathContext.newContext(doc);",
                "// vulnerable line: 84: addNamespaces(ns, context);",
                "// vulnerable line: 85: context.setLenient(true);",
                "// vulnerable line: 86: return context;",
                "// vulnerable line: 87: }",
                "// Line 88: ",
                "// vulnerable line: 89: private static void addNamespaces(NamespaceSupport ns, JXPathContext context) {",
                "// vulnerable line: 90: @SuppressWarnings(\"unchecked\")",
                "// vulnerable line: 91: Enumeration<String> prefixes = ns.getPrefixes();",
                "// vulnerable line: 92: while (prefixes.hasMoreElements()) {",
                "// vulnerable line: 93: String prefix = prefixes.nextElement();",
                "// vulnerable line: 94: String uri = ns.getURI(prefix);",
                "// vulnerable line: 95: context.registerNamespace(prefix, uri);",
                "// vulnerable line: 96: }",
                "// vulnerable line: 97: }",
                "// Line 98: ",
                "// Line 99:     /**",
                "// Line 100:      * Remove indexes from an xpath string.",
                "// Line 101:      *",
                "// Line 102:      * @param xpath xpath string",
                "// Line 103:      * @return unindexed xpath string",
                "// Line 104:      */",
                "// Line 105:     public static String removeIndexes(String xpath) {",
                "// Line 106:         final String[] partialSteps = xpath.split(\"[/]\");",
                "// Line 107:         if (partialSteps.length == 0) {",
                "// Line 108:             return xpath;",
                "// vulnerable line: 109: }",
                "// Line 110: ",
                "// Line 111:         int startIndex = 0;",
                "// Line 112:         StringBuffer buf = new StringBuffer();",
                "// Line 113: ",
                "// Line 114:         for (int i = startIndex; i < partialSteps.length; i++) {",
                "// Line 115:             String step = partialSteps[i];",
                "// Line 116:             int start = step.indexOf('[');",
                "// Line 117: ",
                "// Line 118:             if (start > -1) {",
                "// Line 119:                 int end = step.indexOf(']');",
                "// Line 120:                 try (Scanner scanner = new Scanner(step.substring(start + 1, end))) {",
                "// Line 121:                     if (scanner.hasNextInt()) {",
                "// Line 122:                         // remove index and the brackets",
                "// Line 123:                         step = step.substring(0, start);",
                "// vulnerable line: 124: }",
                "// vulnerable line: 125: }",
                "// vulnerable line: 126: }",
                "// Line 127:             buf.append(step);",
                "// Line 128:             if (i < partialSteps.length - 1) {",
                "// Line 129:                 buf.append(\"/\");",
                "// vulnerable line: 130: }",
                "// vulnerable line: 131: }",
                "// Line 132:         return buf.toString();",
                "// vulnerable line: 133: }",
                "// Line 134: ",
                "// Line 135:     private static List<String> getXPathValues(String xpathString, JXPathContext context) {",
                "// Line 136: ",
                "// Line 137:         List values = null;",
                "// Line 138:         try {",
                "// Line 139:             values = context.selectNodes(xpathString);",
                "// Line 140:         } catch (RuntimeException e) {",
                "// Line 141:             throw new RuntimeException(\"Error reading xpath \" + xpathString, e);",
                "// vulnerable line: 142: }",
                "// Line 143: ",
                "// Line 144:         List<String> ls = null;",
                "// Line 145:         if (values == null) {",
                "// Line 146:             ls = new ArrayList<>();",
                "// Line 147:         } else {",
                "// Line 148:             ls = new ArrayList<>(values.size());",
                "// Line 149:             for (Object value : values) {",
                "// Line 150:                 String unwrappedValue = \"\";",
                "// Line 151:                 if (value instanceof org.jdom2.Attribute) {",
                "// Line 152:                     unwrappedValue = ((org.jdom2.Attribute) value).getValue();",
                "// Line 153:                 } else if (value instanceof org.jdom2.Element) {",
                "// Line 154:                     unwrappedValue = ((org.jdom2.Element) value).getValue();",
                "// vulnerable line: 155: }",
                "// Line 156:                 ls.add(unwrappedValue);",
                "// vulnerable line: 157: }",
                "// vulnerable line: 158: }",
                "// Line 159: ",
                "// Line 160:         return ls;",
                "// vulnerable line: 161: }",
                "// vulnerable line: 162: }"
            ]
        }
    ]
}