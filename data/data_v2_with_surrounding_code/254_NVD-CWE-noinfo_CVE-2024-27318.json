{
    "cve_id": "CVE-2024-27318",
    "cve_description": "Versions of the package onnx before and including 1.15.0 are vulnerable to Directory Traversal as the external_data field of the tensor proto can have a path to the file which is outside the model current directory or user-provided directory. The vulnerability occurs as a bypass for the patch added for CVE-2022-25882.\n",
    "cve_publish_date": "2024-02-23T18:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Fix path sanitization bypass leading to arbitrary read (#5917)\n\nSigned-off-by: liqunfu <liqun.fu@microsoft.com>\nSigned-off-by: liqun Fu <liqun.fu@microsoft.com>\nCo-authored-by: Justin Chu <justinchuby@users.noreply.github.com>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "external_data_helper.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "11",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 29:             self.length = int(self.length)",
                "// Line 30: ",
                "// Line 31: ",
                "// Line 32: def load_external_data_for_tensor(tensor: TensorProto, base_dir: str) -> None:",
                "// Line 33:     \"\"\"Loads data from an external file for tensor.",
                "// Line 34:     Ideally TensorProto should not hold any raw data but if it does it will be ignored.",
                "// Line 35: ",
                "// Line 36:     Arguments:",
                "// Line 37:         tensor: a TensorProto object.",
                "// Line 38:         base_dir: directory that contains the external data.",
                "// vulnerable line: 39: \"\"\"",
                "// Line 40:     info = ExternalDataInfo(tensor)",
                "// vulnerable line: 41: file_location = _sanitize_path(info.location)",
                "// vulnerable line: 42: external_data_file_path = os.path.join(base_dir, file_location)",
                "// Line 43: ",
                "// Line 44:     with open(external_data_file_path, \"rb\") as data_file:",
                "// Line 45:         if info.offset:",
                "// Line 46:             data_file.seek(info.offset)",
                "// Line 47: ",
                "// Line 48:         if info.length:",
                "// Line 49:             tensor.raw_data = data_file.read(info.length)",
                "// Line 50:         else:",
                "// Line 51:             tensor.raw_data = data_file.read()",
                "// Line 52: ",
                "// Line 53: ",
                "// Line 54: def load_external_data_for_model(model: ModelProto, base_dir: str) -> None:",
                "// Line 55:     \"\"\"Loads external tensors into model",
                "// Line 56: ",
                "// Line 57:     Arguments:",
                "// Line 58:         model: ModelProto to load external data to",
                "// Line 59:         base_dir: directory that contains external data",
                "// vulnerable line: 60: \"\"\"",
                "// Line 61:     for tensor in _get_all_tensors(model):",
                "// Line 62:         if uses_external_data(tensor):",
                "// Line 63:             load_external_data_for_tensor(tensor, base_dir)",
                "// Line 64:             # After loading raw_data from external_data, change the state of tensors",
                "// Line 65:             tensor.data_location = TensorProto.DEFAULT",
                "// Line 66:             # and remove external data",
                "// Line 67:             del tensor.external_data[:]",
                "// Line 68: ",
                "// Line 69: ",
                "// Line 70: def set_external_data(",
                "// Line 111:         model (ModelProto): Model to be converted.",
                "// Line 112:         all_tensors_to_one_file (bool): If true, save all tensors to one external file specified by location.",
                "// Line 113:             If false, save each tensor to a file named with the tensor name.",
                "// Line 114:         location: specify the external file relative to the model that all tensors to save to.",
                "// Line 115:             Path is relative to the model path.",
                "// Line 116:             If not specified, will use the model name.",
                "// Line 117:         size_threshold: Threshold for size of data. Only when tensor's data is >= the size_threshold",
                "// Line 118:             it will be converted to external data. To convert every tensor with raw data to external data set size_threshold=0.",
                "// Line 119:         convert_attribute (bool): If true, convert all tensors to external data",
                "// Line 120:                        If false, convert only non-attribute tensors to external data",
                "// vulnerable line: 121: \"\"\"",
                "// Line 122:     tensors = _get_initializer_tensors(model)",
                "// Line 123:     if convert_attribute:",
                "// Line 124:         tensors = _get_all_tensors(model)",
                "// Line 125: ",
                "// Line 126:     if all_tensors_to_one_file:",
                "// Line 127:         file_name = str(uuid.uuid1())",
                "// Line 128:         if location:",
                "// Line 129:             if os.path.isabs(location):",
                "// Line 130:                 raise ValueError(",
                "// Line 131:                     \"location must be a relative path that is relative to the model path.\"",
                "// Line 149:                 set_external_data(tensor, tensor_location)",
                "// Line 150: ",
                "// Line 151: ",
                "// Line 152: def convert_model_from_external_data(model: ModelProto) -> None:",
                "// Line 153:     \"\"\"Call to set all tensors which use external data as embedded data.",
                "// Line 154:     save_model saves all the tensors data as embedded data after",
                "// Line 155:     calling this function.",
                "// Line 156: ",
                "// Line 157:     Arguments:",
                "// Line 158:         model (ModelProto): Model to be converted.",
                "// vulnerable line: 159: \"\"\"",
                "// Line 160:     for tensor in _get_all_tensors(model):",
                "// Line 161:         if uses_external_data(tensor):",
                "// Line 162:             if not tensor.HasField(\"raw_data\"):",
                "// Line 163:                 raise ValueError(\"raw_data field doesn't exist.\")",
                "// Line 164:             del tensor.external_data[:]",
                "// Line 165:             tensor.data_location = TensorProto.DEFAULT",
                "// Line 166: ",
                "// Line 167: ",
                "// Line 168: def save_external_data(tensor: TensorProto, base_path: str) -> None:",
                "// Line 169:     \"\"\"Writes tensor data to an external file according to information in the `external_data` field.",
                "// Line 170: ",
                "// Line 171:     Arguments:",
                "// Line 172:         tensor (TensorProto): Tensor object to be serialized",
                "// Line 173:         base_path: System path of a folder where tensor data is to be stored",
                "// vulnerable line: 174: \"\"\"",
                "// Line 175:     info = ExternalDataInfo(tensor)",
                "// Line 176:     external_data_file_path = os.path.join(base_path, info.location)",
                "// Line 177: ",
                "// Line 178:     # Retrieve the tensor's data from raw_data or load external file",
                "// Line 179:     if not tensor.HasField(\"raw_data\"):",
                "// Line 180:         raise ValueError(\"raw_data field doesn't exist.\")",
                "// Line 181: ",
                "// Line 182:     # Create file if it doesn't exist",
                "// Line 183:     if not os.path.isfile(external_data_file_path):",
                "// Line 184:         with open(external_data_file_path, \"ab\"):",
                "// Line 247:             yield from _recursive_attribute_processor(",
                "// Line 248:                 attribute, _get_attribute_tensors_from_graph",
                "// Line 249:             )",
                "// Line 250: ",
                "// Line 251: ",
                "// Line 252: def _get_attribute_tensors(onnx_model_proto: ModelProto) -> Iterable[TensorProto]:",
                "// Line 253:     \"\"\"Create an iterator of tensors from node attributes of an ONNX model.\"\"\"",
                "// Line 254:     yield from _get_attribute_tensors_from_graph(onnx_model_proto.graph)",
                "// Line 255: ",
                "// Line 256: ",
                "// vulnerable line: 257: def _sanitize_path(path: str) -> str:",
                "// vulnerable line: 258: \"\"\"Remove path components which would allow traversing up a directory tree from a base path.",
                "// Line 259: ",
                "// vulnerable line: 260: Note: This method is currently very basic and should be expanded.",
                "// vulnerable line: 261: \"\"\"",
                "// vulnerable line: 262: return path.lstrip(\"/.\")",
                "// Line 263: ",
                "// Line 264: ",
                "// Line 265: def _is_valid_filename(filename: str) -> bool:",
                "// Line 266:     \"\"\"Utility to check whether the provided filename is valid.\"\"\"",
                "// Line 267:     exp = re.compile('^[^<>:;,?\"*|/]+$')",
                "// Line 268:     match = exp.match(filename)",
                "// Line 269:     return bool(match)",
                "// Line 270: ",
                "// Line 271: ",
                "// Line 272: def uses_external_data(tensor: TensorProto) -> bool:",
                "// Line 278: ",
                "// Line 279: ",
                "// Line 280: def remove_external_data_field(tensor: TensorProto, field_key: str) -> None:",
                "// Line 281:     \"\"\"Removes a field from a Tensor's external_data key-value store.",
                "// Line 282: ",
                "// Line 283:     Modifies tensor object in place.",
                "// Line 284: ",
                "// Line 285:     Arguments:",
                "// Line 286:         tensor (TensorProto): Tensor object from which value will be removed",
                "// Line 287:         field_key (string): The key of the field to be removed",
                "// vulnerable line: 288: \"\"\"",
                "// Line 289:     for i, field in enumerate(tensor.external_data):",
                "// Line 290:         if field.key == field_key:",
                "// Line 291:             del tensor.external_data[i]",
                "// Line 292: ",
                "// Line 293: ",
                "// Line 294: def write_external_data_tensors(model: ModelProto, filepath: str) -> ModelProto:",
                "// Line 295:     \"\"\"Serializes data for all the tensors which have data location set to TensorProto.External.",
                "// Line 296: ",
                "// Line 297:     Note: This function also strips basepath information from all tensors' external_data fields.",
                "// Line 298: ",
                "// Line 299:     Arguments:",
                "// Line 300:         model (ModelProto): Model object which is the source of tensors to serialize.",
                "// Line 301:         filepath: System path to the directory which should be treated as base path for external data.",
                "// Line 302: ",
                "// Line 303:     Returns:",
                "// Line 304:         ModelProto: The modified model object.",
                "// vulnerable line: 305: \"\"\"",
                "// Line 306:     for tensor in _get_all_tensors(model):",
                "// Line 307:         # Writing to external data happens in 2 passes:",
                "// Line 308:         # 1. Tensors with raw data which pass the necessary conditions (size threshold etc) are marked for serialization",
                "// Line 309:         # 2. The raw data in these tensors is serialized to a file",
                "// Line 310:         # Thus serialize only if tensor has raw data and it was marked for serialization",
                "// Line 311:         if uses_external_data(tensor) and tensor.HasField(\"raw_data\"):",
                "// Line 312:             save_external_data(tensor, filepath)",
                "// Line 313:             tensor.ClearField(\"raw_data\")",
                "// Line 314: ",
                "// Line 315:     return model"
            ]
        },
        {
            "filename_of_changes": "model_container.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 281:         \"\"\"",
                "// Line 282:         if self.model_proto_ is None:",
                "// Line 283:             raise RuntimeError(\"A model must be loaded before loading the weights.\")",
                "// Line 284:         self.large_initializers = {}",
                "// Line 285:         base_dir = os.path.dirname(file_path)",
                "// Line 286:         for i, tensor in enumerate(ext_data._get_all_tensors(self.model_proto_)):",
                "// Line 287:             if not ext_data.uses_external_data(tensor):",
                "// Line 288:                 continue",
                "// Line 289: ",
                "// Line 290:             info = ext_data.ExternalDataInfo(tensor)",
                "// vulnerable line: 291: file_location = ext_data._sanitize_path(info.location)",
                "// vulnerable line: 292: external_data_file_path = os.path.join(base_dir, file_location)",
                "// Line 293:             key = f\"#t{i}\"",
                "// Line 294:             _set_external_data(tensor, location=key)",
                "// Line 295: ",
                "// Line 296:             with open(external_data_file_path, \"rb\") as data_file:",
                "// Line 297:                 if info.offset:",
                "// Line 298:                     data_file.seek(info.offset)",
                "// Line 299: ",
                "// Line 300:                 raw_data = (",
                "// Line 301:                     data_file.read(info.length) if info.length else data_file.read()",
                "// Line 302:                 )"
            ]
        }
    ]
}