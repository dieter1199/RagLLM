{
    "cve_id": "CVE-2024-32981",
    "cve_description": "Silverstripe framework is the PHP framework forming the base for the Silverstripe CMS. In affected versions a bad actor with access to edit content in the CMS could add send a specifically crafted encoded payload to the server, which could be used to inject a JavaScript payload on the front end of the site. The payload would be sanitised on the client-side, but server-side sanitisation doesn't catch it. The server-side sanitisation logic has been updated to sanitise against this type of attack in version 5.2.16. All users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "cve_publish_date": "2024-07-17T20:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "[CVE-2024-32981] Disallow `data:text/html` in data attributes",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "HTMLEditorSanitiser.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 340:                         $el->setAttribute($attr, $default);",
                "// Line 341:                     }",
                "// Line 342:                 }",
                "// Line 343: ",
                "// Line 344:                 // And any forced attributes",
                "// Line 345:                 foreach ($elementRule->attributesForced as $attr => $forced) {",
                "// Line 346:                     $el->setAttribute($attr, $forced);",
                "// Line 347:                 }",
                "// Line 348: ",
                "// Line 349:                 // Matches \"javascript:\" with any arbitrary linebreaks inbetween the characters.",
                "// vulnerable line: 350: $regex = '/^\\s*' . implode('\\s*', str_split('javascript:')) . '/i';",
                "// Line 351:                 // Strip out javascript execution in href or src attributes.",
                "// Line 352:                 foreach (['src', 'href', 'data'] as $dangerAttribute) {",
                "// Line 353:                     if ($el->hasAttribute($dangerAttribute)) {",
                "// Line 354:                         if (preg_match($regex, $el->getAttribute($dangerAttribute))) {",
                "// Line 355:                             $el->removeAttribute($dangerAttribute);",
                "// Line 356:                         }",
                "// Line 357:                     }",
                "// Line 358:                 }",
                "// Line 359:             }",
                "// Line 360: "
            ]
        },
        {
            "filename_of_changes": "HTMLEditorSanitiserTest.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "25",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 114:             [",
                "// Line 115:                 'object[data]',",
                "// Line 116:                 '<object data=\"OK\"></object>',",
                "// Line 117:                 '<object data=\"OK\"></object>',",
                "// Line 118:                 'Object with OK content in the data attribute is retained'",
                "// Line 119:             ],",
                "// Line 120:             [",
                "// Line 121:                 'object[data]',",
                "// Line 122:                 '<object data=javascript:alert()>',",
                "// Line 123:                 '<object></object>',",
                "// vulnerable line: 124: 'Object with dangerous content in data attribute is completely removed'",
                "// Line 125:             ],",
                "// Line 126:             [",
                "// Line 127:                 'img[src]',",
                "// Line 128:                 '<img src=\"https://owasp.org/myimage.jpg\" style=\"url:xss\" onerror=\"alert(1)\">',",
                "// Line 129:                 '<img src=\"https://owasp.org/myimage.jpg\">',",
                "// Line 130:                 'XSS vulnerable attributes starting with on or style are removed via configuration'",
                "// Line 131:             ],",
                "// Line 132:         ];",
                "// Line 133: ",
                "// Line 134:         $config = HTMLEditorConfig::get('htmleditorsanitisertest');"
            ]
        }
    ]
}