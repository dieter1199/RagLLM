{
    "cve_id": "CVE-2024-2912",
    "cve_description": "An insecure deserialization vulnerability exists in the BentoML framework, allowing remote code execution (RCE) by sending a specially crafted POST request. By exploiting this vulnerability, attackers can execute arbitrary commands on the server hosting the BentoML application. The vulnerability is triggered when a serialized object, crafted to execute OS commands upon deserialization, is sent to any valid BentoML endpoint. This issue poses a significant security risk, enabling attackers to compromise the server and potentially gain unauthorized access or control.",
    "cve_publish_date": "2024-04-16T00:15Z",
    "cwe_id": "CWE-1188",
    "cwe_name": "Initialization of a Resource with an Insecure Default",
    "cwe_description": "The product initializes or sets a resource with a default that is intended to be changed by the administrator, but the default is not secure.",
    "commit_message": "feat(client): disallow media type other than json for HTTP clients (#4520)\n\n* feat(client): disallow media type other than json for HTTP clients\r\n\r\nSigned-off-by: Frost Ming <me@frostming.com>\r\n\r\n* fix: check media type on server side\r\n\r\nSigned-off-by: Frost Ming <me@frostming.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Frost Ming <me@frostming.com>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "app.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "11",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 168:         assert isinstance(exc, BentoMLException)",
                "// Line 169:         status = exc.error_code.value",
                "// Line 170:         if 400 <= status < 500 and status not in (401, 403):",
                "// Line 171:             return JSONResponse(",
                "// Line 172:                 {\"error\": f\"BentoService error handling API request: {exc}\"},",
                "// Line 173:                 status_code=status,",
                "// Line 174:             )",
                "// Line 175:         else:",
                "// Line 176:             return JSONResponse(\"\", status_code=status)",
                "// Line 177: ",
                "// vulnerable line: 178: def __call__(self, is_main: bool = False) -> Starlette:",
                "// Line 179:         app = super().__call__()",
                "// Line 180: ",
                "// Line 181:         app.add_exception_handler(",
                "// Line 182:             pydantic.ValidationError, self.handle_validation_error",
                "// Line 183:         )",
                "// Line 184:         app.add_exception_handler(BentoMLException, self.handle_bentoml_exception)",
                "// Line 185:         app.add_exception_handler(Exception, self.handle_uncaught_exception)",
                "// Line 186:         app.add_route(\"/schema.json\", self.schema_view, name=\"schema\")",
                "// vulnerable line: 187: if is_main:",
                "// Line 188:             if BentoMLContainer.new_index:",
                "// Line 189:                 assets = Path(__file__).parent / \"assets\"",
                "// Line 190:                 app.mount(\"/assets\", StaticFiles(directory=assets), name=\"assets\")",
                "// Line 191:             else:",
                "// Line 192:                 from bentoml._internal import server",
                "// Line 193: ",
                "// Line 194:                 assets = Path(server.__file__).parent / \"static_content\"",
                "// Line 195:                 app.mount(",
                "// Line 196:                     \"/static_content\",",
                "// Line 197:                     StaticFiles(directory=assets),"
            ]
        },
        {
            "filename_of_changes": "http.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "26",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 98:         token: str | None = None,",
                "// Line 99:         timeout: float = 30,",
                "// Line 100:     ) -> None:",
                "// Line 101:         \"\"\"Create a client instance from a URL.",
                "// Line 102: ",
                "// Line 103:         Args:",
                "// Line 104:             url: The URL of the BentoML service.",
                "// Line 105:             media_type: The media type to use for serialization. Defaults to",
                "// Line 106:                 \"application/json\".",
                "// Line 107: ",
                "// vulnerable line: 108: .. note::",
                "// Line 109: ",
                "// Line 110:             The client created with this method can only return primitive types without a model.",
                "// Line 111:         \"\"\"",
                "// Line 112:         routes: dict[str, ClientEndpoint] = {}",
                "// Line 113:         if service is None:",
                "// Line 114:             schema_url = urljoin(url, \"/schema.json\")",
                "// Line 115: ",
                "// Line 116:             headers = {\"User-Agent\": f\"BentoML HTTP Client/{__version__}\"}",
                "// Line 117:             if token:",
                "// Line 118:                 headers[\"Authorization\"] = f\"Bearer {token}\"",
                "// Line 333:     @abstractmethod",
                "// Line 334:     def _get_stream(",
                "// Line 335:         self, endpoint: ClientEndpoint, args: t.Any, kwargs: t.Any",
                "// Line 336:     ) -> t.Any:",
                "// Line 337:         ...",
                "// Line 338: ",
                "// Line 339: ",
                "// Line 340: class SyncHTTPClient(HTTPClient[httpx.Client]):",
                "// Line 341:     \"\"\"A synchronous client for BentoML service.",
                "// Line 342: ",
                "// vulnerable line: 343: Example:",
                "// Line 344: ",
                "// vulnerable line: 345: with SyncHTTPClient(\"http://localhost:3000\") as client:",
                "// vulnerable line: 346: resp = client.call(\"classify\", input_series=[[1,2,3,4]])",
                "// vulnerable line: 347: assert resp == [0]",
                "// vulnerable line: 348: # Or using named method directly",
                "// vulnerable line: 349: resp = client.classify(input_series=[[1,2,3,4]])",
                "// vulnerable line: 350: assert resp == [0]",
                "// Line 351:     \"\"\"",
                "// Line 352: ",
                "// Line 353:     client_cls = httpx.Client",
                "// Line 354: ",
                "// Line 355:     def __enter__(self: T) -> T:",
                "// Line 356:         return self",
                "// Line 357: ",
                "// Line 358:     def __exit__(self, exc_type: t.Any, exc: t.Any, tb: t.Any) -> None:",
                "// Line 359:         return self.close()",
                "// Line 360: ",
                "// Line 442:         with tempfile.NamedTemporaryFile(",
                "// Line 443:             \"wb\", suffix=filename, dir=self._temp_dir.name, delete=False",
                "// Line 444:         ) as f:",
                "// Line 445:             f.write(resp.read())",
                "// Line 446:         return pathlib.Path(f.name)",
                "// Line 447: ",
                "// Line 448: ",
                "// Line 449: class AsyncHTTPClient(HTTPClient[httpx.AsyncClient]):",
                "// Line 450:     \"\"\"An asynchronous client for BentoML service.",
                "// Line 451: ",
                "// vulnerable line: 452: Example:",
                "// Line 453: ",
                "// vulnerable line: 454: async with AsyncHTTPClient(\"http://localhost:3000\") as client:",
                "// vulnerable line: 455: resp = await client.call(\"classify\", input_series=[[1,2,3,4]])",
                "// vulnerable line: 456: assert resp == [0]",
                "// vulnerable line: 457: # Or using named method directly",
                "// vulnerable line: 458: resp = await client.classify(input_series=[[1,2,3,4]])",
                "// vulnerable line: 459: assert resp == [0]",
                "// Line 460: ",
                "// vulnerable line: 461: .. note::",
                "// Line 462: ",
                "// vulnerable line: 463: If the endpoint returns an async generator, it should be awaited before iterating.",
                "// Line 464: ",
                "// vulnerable line: 465: Example:",
                "// Line 466: ",
                "// vulnerable line: 467: resp = await client.stream(prompt=\"hello\")",
                "// vulnerable line: 468: async for data in resp:",
                "// vulnerable line: 469: print(data)",
                "// Line 470:     \"\"\"",
                "// Line 471: ",
                "// Line 472:     client_cls = httpx.AsyncClient",
                "// Line 473: ",
                "// Line 474:     async def is_ready(self, timeout: int | None = None) -> bool:",
                "// Line 475:         try:",
                "// Line 476:             resp = await self.client.get(",
                "// Line 477:                 \"/readyz\", timeout=timeout or httpx.USE_CLIENT_DEFAULT",
                "// Line 478:             )",
                "// Line 479:             return resp.status_code == 200",
                "// Line 480:         except httpx.TimeoutException:",
                "// Line 481:             logger.warn(\"Timed out waiting for runner to be ready\")",
                "// Line 482:             return False",
                "// Line 483: ",
                "// Line 484:     async def _get_stream(",
                "// Line 485:         self, endpoint: ClientEndpoint, args: t.Any, kwargs: t.Any",
                "// Line 486:     ) -> t.AsyncGenerator[t.Any, None]:",
                "// Line 487:         resp = await self._call(endpoint, args, kwargs)",
                "// Line 488:         assert inspect.isasyncgen(resp)",
                "// vulnerable line: 489: async for data in resp:",
                "// Line 490:             yield data",
                "// Line 491: ",
                "// Line 492:     async def __aenter__(self: T) -> T:",
                "// Line 493:         return self",
                "// Line 494: ",
                "// Line 495:     async def __aexit__(self, *args: t.Any) -> None:",
                "// Line 496:         return await self.close()",
                "// Line 497: ",
                "// Line 498:     async def _call(",
                "// Line 499:         self,"
            ]
        },
        {
            "filename_of_changes": "loader.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 99:     service_identifier: str,",
                "// Line 100:     bento_path: pathlib.Path | None = None,",
                "// Line 101: ) -> Service[t.Any]:",
                "// Line 102:     \"\"\"",
                "// Line 103:     import a service from a service identifier, which should be normalized by",
                "// Line 104:     `normalize_identifier` function.",
                "// Line 105:     \"\"\"",
                "// Line 106:     from _bentoml_sdk import Service",
                "// Line 107: ",
                "// Line 108:     if bento_path is None:",
                "// vulnerable line: 109: bento_path = pathlib.Path(\".\").absolute()",
                "// Line 110: ",
                "// Line 111:     # patch python path if needed",
                "// vulnerable line: 112: if bento_path != pathlib.Path(\".\"):",
                "// Line 113:         # a project",
                "// vulnerable line: 114: extra_python_path = str(bento_path.absolute())",
                "// Line 115:         sys.path.insert(0, extra_python_path)",
                "// Line 116:     else:",
                "// Line 117:         # a project under current directory",
                "// Line 118:         extra_python_path = None",
                "// Line 119: ",
                "// Line 120:     # patch model store if needed",
                "// Line 121:     if (",
                "// Line 122:         bento_path.parent.joinpath(BENTO_YAML_FILENAME).exists()",
                "// Line 123:         and bento_path.parent.joinpath(\"models\").exists()",
                "// Line 124:     ):"
            ]
        },
        {
            "filename_of_changes": "service.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "4",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 88:     help=\"Run the API server in development mode\",",
                "// Line 89:     is_flag=True,",
                "// Line 90:     default=False,",
                "// Line 91:     show_default=True,",
                "// Line 92: )",
                "// Line 93: @click.option(",
                "// Line 94:     \"--timeout\",",
                "// Line 95:     type=click.INT,",
                "// Line 96:     help=\"Specify the timeout for API server\",",
                "// Line 97: )",
                "// vulnerable line: 98: @click.option(\"--main\", \"is_main\", type=click.BOOL, default=False, is_flag=True)",
                "// Line 99: def main(",
                "// Line 100:     bento_identifier: str,",
                "// Line 101:     service_name: str,",
                "// Line 102:     fd: int,",
                "// Line 103:     runner_map: str | None,",
                "// Line 104:     backlog: int,",
                "// Line 105:     worker_env: str | None,",
                "// Line 106:     worker_id: int | None,",
                "// Line 107:     prometheus_dir: str | None,",
                "// Line 108:     ssl_certfile: str | None,",
                "// Line 109:     ssl_keyfile: str | None,",
                "// Line 110:     ssl_keyfile_password: str | None,",
                "// Line 111:     ssl_version: int | None,",
                "// Line 112:     ssl_cert_reqs: int | None,",
                "// Line 113:     ssl_ca_certs: str | None,",
                "// Line 114:     ssl_ciphers: str | None,",
                "// Line 115:     development_mode: bool,",
                "// Line 116:     timeout: int,",
                "// vulnerable line: 117: is_main: bool = False,",
                "// Line 118: ):",
                "// Line 119:     \"\"\"",
                "// Line 120:     Start a HTTP server worker for given service.",
                "// Line 121:     \"\"\"",
                "// Line 122:     import psutil",
                "// Line 123:     import uvicorn",
                "// Line 124: ",
                "// Line 125:     if worker_env:",
                "// Line 126:         env_list: list[dict[str, t.Any]] = json.loads(worker_env)",
                "// Line 127:         if worker_id is not None:",
                "// Line 158:     if worker_id is not None:",
                "// Line 159:         component_context.component_index = worker_id",
                "// Line 160: ",
                "// Line 161:     configure_server_logging()",
                "// Line 162:     BentoMLContainer.development_mode.set(development_mode)",
                "// Line 163: ",
                "// Line 164:     if prometheus_dir is not None:",
                "// Line 165:         BentoMLContainer.prometheus_multiproc_dir.set(prometheus_dir)",
                "// Line 166:     component_context.component_name = service.name",
                "// Line 167: ",
                "// vulnerable line: 168: app_factory = ServiceAppFactory(service)",
                "// vulnerable line: 169: asgi_app = app_factory(is_main=is_main)",
                "// Line 170:     uvicorn_extra_options: dict[str, t.Any] = {}",
                "// Line 171:     if ssl_version is not None:",
                "// Line 172:         uvicorn_extra_options[\"ssl_version\"] = ssl_version",
                "// Line 173:     if ssl_cert_reqs is not None:",
                "// Line 174:         uvicorn_extra_options[\"ssl_cert_reqs\"] = ssl_cert_reqs",
                "// Line 175:     if ssl_ciphers is not None:",
                "// Line 176:         uvicorn_extra_options[\"ssl_ciphers\"] = ssl_ciphers",
                "// Line 177: ",
                "// Line 178:     if psutil.WINDOWS:",
                "// Line 179:         # 1. uvloop is not supported on Windows"
            ]
        },
        {
            "filename_of_changes": "serving.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "0",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 253:             \"--fd\",",
                "// Line 254:             f\"$(circus.sockets.{API_SERVER_NAME})\",",
                "// Line 255:             \"--service-name\",",
                "// Line 256:             svc.name,",
                "// Line 257:             \"--backlog\",",
                "// Line 258:             str(backlog),",
                "// Line 259:             \"--worker-id\",",
                "// Line 260:             \"$(CIRCUS.WID)\",",
                "// Line 261:             \"--prometheus-dir\",",
                "// Line 262:             prometheus_dir,",
                "// vulnerable line: 263: \"--main\",",
                "// Line 264:             *ssl_args,",
                "// Line 265:             *timeout_args,",
                "// Line 266:         ]",
                "// Line 267:         if worker_envs:",
                "// Line 268:             server_args.extend([\"--worker-env\", json.dumps(worker_envs)])",
                "// Line 269:         if development_mode:",
                "// Line 270:             server_args.append(\"--development-mode\")",
                "// Line 271: ",
                "// Line 272:         scheme = \"https\" if BentoMLContainer.ssl.enabled.get() else \"http\"",
                "// Line 273:         watchers.append("
            ]
        }
    ]
}