{
    "cve_id": "CVE-2024-31455",
    "cve_description": "Minder by Stacklok is an open source software supply chain security platform. A refactoring in commit `5c381cf` added the ability to get GitHub repositories registered to a project without specifying a specific provider.  Unfortunately, the SQL query for doing so was missing parenthesis, and would select a random repository. This issue is patched in pull request 2941. As a workaround, revert prior to `5c381cf`, or roll forward past `2eb94e7`.",
    "cve_publish_date": "2024-04-09T17:16Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Fix repository delete by name (#2941)\n\nFix #2938",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "repositories.sql.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 198:         &i.DefaultBranch,",
                "// Line 199:         &i.License,",
                "// Line 200:         &i.ProviderID,",
                "// Line 201:     )",
                "// Line 202:     return i, err",
                "// Line 203: }",
                "// Line 204: ",
                "// Line 205: const getRepositoryByRepoName = `-- name: GetRepositoryByRepoName :one",
                "// Line 206: SELECT id, provider, project_id, repo_owner, repo_name, repo_id, is_private, is_fork, webhook_id, webhook_url, deploy_url, clone_url, created_at, updated_at, default_branch, license, provider_id FROM repositories",
                "// Line 207:     WHERE repo_owner = $1 AND repo_name = $2 AND project_id = $3",
                "// vulnerable line: 208: AND lower(provider) = lower($4::text) OR $4::text IS NULL",
                "// Line 209: `",
                "// Line 210: ",
                "// Line 211: type GetRepositoryByRepoNameParams struct {",
                "// Line 212:     RepoOwner string         `json:\"repo_owner\"`",
                "// Line 213:     RepoName  string         `json:\"repo_name\"`",
                "// Line 214:     ProjectID uuid.UUID      `json:\"project_id\"`",
                "// Line 215:     Provider  sql.NullString `json:\"provider\"`",
                "// Line 216: }",
                "// Line 217: ",
                "// Line 218: func (q *Queries) GetRepositoryByRepoName(ctx context.Context, arg GetRepositoryByRepoNameParams) (Repository, error) {",
                "// Line 241:         &i.DefaultBranch,",
                "// Line 242:         &i.License,",
                "// Line 243:         &i.ProviderID,",
                "// Line 244:     )",
                "// Line 245:     return i, err",
                "// Line 246: }",
                "// Line 247: ",
                "// Line 248: const listRegisteredRepositoriesByProjectIDAndProvider = `-- name: ListRegisteredRepositoriesByProjectIDAndProvider :many",
                "// Line 249: SELECT id, provider, project_id, repo_owner, repo_name, repo_id, is_private, is_fork, webhook_id, webhook_url, deploy_url, clone_url, created_at, updated_at, default_branch, license, provider_id FROM repositories",
                "// Line 250: WHERE project_id = $1 AND webhook_id IS NOT NULL",
                "// vulnerable line: 251: AND lower(provider) = lower($2::text) OR $2::text IS NULL",
                "// Line 252: ORDER BY repo_name",
                "// Line 253: `",
                "// Line 254: ",
                "// Line 255: type ListRegisteredRepositoriesByProjectIDAndProviderParams struct {",
                "// Line 256:     ProjectID uuid.UUID      `json:\"project_id\"`",
                "// Line 257:     Provider  sql.NullString `json:\"provider\"`",
                "// Line 258: }",
                "// Line 259: ",
                "// Line 260: func (q *Queries) ListRegisteredRepositoriesByProjectIDAndProvider(ctx context.Context, arg ListRegisteredRepositoriesByProjectIDAndProviderParams) ([]Repository, error) {",
                "// Line 261:     rows, err := q.db.QueryContext(ctx, listRegisteredRepositoriesByProjectIDAndProvider, arg.ProjectID, arg.Provider)"
            ]
        }
    ]
}