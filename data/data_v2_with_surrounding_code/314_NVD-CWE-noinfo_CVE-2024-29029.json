{
    "cve_id": "CVE-2024-29029",
    "cve_description": "memos is a privacy-first, lightweight note-taking service. In memos 0.13.2, an SSRF vulnerability exists at the /o/get/image that allows unauthenticated users to enumerate the internal network and retrieve images. The response from the image request is then copied into the response of the current server request, causing a reflected XSS vulnerability.",
    "cve_publish_date": "2024-04-19T16:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "chore: retire legacy api",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "presign_link.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "15",
            "number_of_lines_deleted_vulnerable_to_cve": "23",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: package jobs",
                "// Line 2: ",
                "// Line 3: import (",
                "// Line 4:     \"context\"",
                "// vulnerable line: 5: \"encoding/json\"",
                "// Line 6:     \"log/slog\"",
                "// Line 7:     \"strings\"",
                "// Line 8:     \"time\"",
                "// Line 9: ",
                "// Line 10:     \"github.com/pkg/errors\"",
                "// Line 11: ",
                "// Line 12:     \"github.com/usememos/memos/plugin/storage/s3\"",
                "// vulnerable line: 13: apiv1 \"github.com/usememos/memos/server/route/api/v1\"",
                "// Line 14:     \"github.com/usememos/memos/store\"",
                "// Line 15: )",
                "// Line 16: ",
                "// Line 17: // RunPreSignLinks is a background job that pre-signs external links stored in the database.",
                "// Line 18: // It uses S3 client to generate presigned URLs and updates the corresponding resources in the store.",
                "// Line 19: func RunPreSignLinks(ctx context.Context, dataStore *store.Store) {",
                "// Line 20:     for {",
                "// Line 21:         if err := signExternalLinks(ctx, dataStore); err != nil {",
                "// Line 22:             slog.Error(\"failed to pre-sign links\", err)",
                "// Line 23:         } else {",
                "// Line 24:             slog.Debug(\"pre-signed links\")",
                "// vulnerable line: 25: }",
                "// Line 26:         select {",
                "// Line 27:         case <-time.After(s3.LinkLifetime / 2):",
                "// Line 28:         case <-ctx.Done():",
                "// Line 29:             return",
                "// vulnerable line: 30: }",
                "// vulnerable line: 31: }",
                "// vulnerable line: 32: }",
                "// Line 33: ",
                "// Line 34: func signExternalLinks(ctx context.Context, dataStore *store.Store) error {",
                "// Line 35:     const pageSize = 32",
                "// Line 36: ",
                "// Line 37:     objectStore, err := findObjectStorage(ctx, dataStore)",
                "// vulnerable line: 38: if err != nil {",
                "// Line 39:         return errors.Wrapf(err, \"find object storage\")",
                "// vulnerable line: 40: }",
                "// Line 41:     if objectStore == nil || !objectStore.Config.PreSign {",
                "// Line 42:         // object storage not set or not supported",
                "// Line 43:         return nil",
                "// vulnerable line: 44: }",
                "// Line 45: ",
                "// Line 46:     var offset int",
                "// Line 47:     var limit = pageSize",
                "// Line 48:     for {",
                "// Line 49:         resources, err := dataStore.ListResources(ctx, &store.FindResource{",
                "// Line 50:             GetBlob: false,",
                "// Line 51:             Limit:   &limit,",
                "// Line 52:             Offset:  &offset,",
                "// Line 53:         })",
                "// vulnerable line: 54: if err != nil {",
                "// Line 55:             return errors.Wrapf(err, \"list resources, offset %d\", offset)",
                "// vulnerable line: 56: }",
                "// Line 57: ",
                "// Line 58:         for _, res := range resources {",
                "// Line 59:             if res.ExternalLink == \"\" {",
                "// Line 60:                 // not for object store",
                "// Line 61:                 continue",
                "// vulnerable line: 62: }",
                "// Line 63:             if strings.Contains(res.ExternalLink, \"?\") && time.Since(time.Unix(res.UpdatedTs, 0)) < s3.LinkLifetime/2 {",
                "// Line 64:                 // resource not signed (hack for migration)",
                "// Line 65:                 // resource was recently updated - skipping",
                "// Line 66:                 continue",
                "// vulnerable line: 67: }",
                "// Line 68:             newLink, err := objectStore.PreSignLink(ctx, res.ExternalLink)",
                "// vulnerable line: 69: if err != nil {",
                "// Line 70:                 slog.Error(\"failed to pre-sign link\", err)",
                "// Line 71:                 continue // do not fail - we may want update left over links too",
                "// vulnerable line: 72: }",
                "// Line 73:             now := time.Now().Unix()",
                "// Line 74:             // we may want to use here transaction and batch update in the future",
                "// Line 75:             _, err = dataStore.UpdateResource(ctx, &store.UpdateResource{",
                "// Line 76:                 ID:           res.ID,",
                "// Line 77:                 UpdatedTs:    &now,",
                "// Line 78:                 ExternalLink: &newLink,",
                "// Line 79:             })",
                "// vulnerable line: 80: if err != nil {",
                "// Line 81:                 // something with DB - better to stop here",
                "// Line 82:                 return errors.Wrapf(err, \"update resource %d link to %q\", res.ID, newLink)",
                "// vulnerable line: 83: }",
                "// vulnerable line: 84: }",
                "// Line 85: ",
                "// Line 86:         offset += limit",
                "// Line 87:         if len(resources) < limit {",
                "// Line 88:             break",
                "// vulnerable line: 89: }",
                "// vulnerable line: 90: }",
                "// Line 91:     return nil",
                "// vulnerable line: 92: }",
                "// Line 93: ",
                "// Line 94: // findObjectStorage returns current default storage if it's S3-compatible or nil otherwise.",
                "// Line 95: // Returns error only in case of internal problems (ie: database or configuration issues).",
                "// Line 96: // May return nil client and nil error.",
                "// Line 97: func findObjectStorage(ctx context.Context, dataStore *store.Store) (*s3.Client, error) {",
                "// vulnerable line: 98: systemSettingStorageServiceID, err := dataStore.GetWorkspaceSetting(ctx, &store.FindWorkspaceSetting{Name: apiv1.SystemSettingStorageServiceIDName.String()})",
                "// vulnerable line: 99: if err != nil {",
                "// vulnerable line: 100: return nil, errors.Wrap(err, \"Failed to find SystemSettingStorageServiceIDName\")",
                "// vulnerable line: 101: }",
                "// Line 102: ",
                "// vulnerable line: 103: storageServiceID := apiv1.DefaultStorage",
                "// vulnerable line: 104: if systemSettingStorageServiceID != nil {",
                "// vulnerable line: 105: err = json.Unmarshal([]byte(systemSettingStorageServiceID.Value), &storageServiceID)",
                "// vulnerable line: 106: if err != nil {",
                "// vulnerable line: 107: return nil, errors.Wrap(err, \"Failed to unmarshal storage service id\")",
                "// vulnerable line: 108: }",
                "// vulnerable line: 109: }",
                "// vulnerable line: 110: storage, err := dataStore.GetStorage(ctx, &store.FindStorage{ID: &storageServiceID})",
                "// vulnerable line: 111: if err != nil {",
                "// vulnerable line: 112: return nil, errors.Wrap(err, \"Failed to find StorageServiceID\")",
                "// vulnerable line: 113: }",
                "// Line 114: ",
                "// Line 115:     if storage == nil {",
                "// vulnerable line: 116: return nil, nil // storage not configured - not an error, just return empty ref",
                "// vulnerable line: 117: }",
                "// vulnerable line: 118: storageMessage, err := apiv1.ConvertStorageFromStore(storage)",
                "// Line 119: ",
                "// vulnerable line: 120: if err != nil {",
                "// vulnerable line: 121: return nil, errors.Wrap(err, \"Failed to ConvertStorageFromStore\")",
                "// vulnerable line: 122: }",
                "// vulnerable line: 123: if storageMessage.Type != apiv1.StorageS3 {",
                "// Line 124:         return nil, nil",
                "// vulnerable line: 125: }",
                "// Line 126: ",
                "// vulnerable line: 127: s3Config := storageMessage.Config.S3Config",
                "// Line 128:     return s3.NewClient(ctx, &s3.Config{",
                "// Line 129:         AccessKey: s3Config.AccessKey,",
                "// Line 130:         SecretKey: s3Config.SecretKey,",
                "// Line 131:         EndPoint:  s3Config.EndPoint,",
                "// Line 132:         Region:    s3Config.Region,",
                "// Line 133:         Bucket:    s3Config.Bucket,",
                "// vulnerable line: 134: URLPrefix: s3Config.URLPrefix,",
                "// vulnerable line: 135: URLSuffix: s3Config.URLSuffix,",
                "// Line 136:         PreSign:   s3Config.PreSign,",
                "// Line 137:     })",
                "// vulnerable line: 138: }"
            ]
        },
        {
            "filename_of_changes": "server.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "0",
            "number_of_lines_deleted_vulnerable_to_cve": "6",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 8:     \"time\"",
                "// Line 9: ",
                "// Line 10:     \"github.com/google/uuid\"",
                "// Line 11:     \"github.com/labstack/echo/v4\"",
                "// Line 12:     \"github.com/pkg/errors\"",
                "// Line 13: ",
                "// Line 14:     \"github.com/usememos/memos/plugin/telegram\"",
                "// Line 15:     storepb \"github.com/usememos/memos/proto/gen/store\"",
                "// Line 16:     \"github.com/usememos/memos/server/integration\"",
                "// Line 17:     \"github.com/usememos/memos/server/profile\"",
                "// vulnerable line: 18: apiv1 \"github.com/usememos/memos/server/route/api/v1\"",
                "// Line 19:     apiv2 \"github.com/usememos/memos/server/route/api/v2\"",
                "// Line 20:     \"github.com/usememos/memos/server/route/frontend\"",
                "// Line 21:     versionchecker \"github.com/usememos/memos/server/service/version_checker\"",
                "// Line 22:     \"github.com/usememos/memos/store\"",
                "// Line 23: )",
                "// Line 24: ",
                "// Line 25: type Server struct {",
                "// Line 26:     e *echo.Echo",
                "// Line 27: ",
                "// Line 28:     ID      string",
                "// Line 68:     e.GET(\"/healthz\", func(c echo.Context) error {",
                "// Line 69:         return c.String(http.StatusOK, \"Service ready.\")",
                "// Line 70:     })",
                "// Line 71: ",
                "// Line 72:     // Only serve frontend when it's enabled.",
                "// Line 73:     if profile.Frontend {",
                "// Line 74:         frontendService := frontend.NewFrontendService(profile, store)",
                "// Line 75:         frontendService.Serve(ctx, e)",
                "// Line 76:     }",
                "// Line 77: ",
                "// vulnerable line: 78: // Register API v1 endpoints.",
                "// vulnerable line: 79: rootGroup := e.Group(\"\")",
                "// vulnerable line: 80: apiV1Service := apiv1.NewAPIV1Service(s.Secret, profile, store, s.telegramBot)",
                "// vulnerable line: 81: apiV1Service.Register(rootGroup)",
                "// Line 82: ",
                "// Line 83:     apiV2Service := apiv2.NewAPIV2Service(s.Secret, profile, store, s.Profile.Port+1)",
                "// Line 84:     // Register gRPC gateway as api v2.",
                "// Line 85:     if err := apiV2Service.RegisterGateway(ctx, e); err != nil {",
                "// Line 86:         return nil, errors.Wrap(err, \"failed to register gRPC gateway\")",
                "// Line 87:     }",
                "// Line 88: ",
                "// Line 89:     return s, nil",
                "// Line 90: }",
                "// Line 91: "
            ]
        },
        {
            "filename_of_changes": "storage_service.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "5",
            "number_of_lines_deleted_vulnerable_to_cve": "5",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 18:     }",
                "// Line 19:     if currentUser.Role != store.RoleHost {",
                "// Line 20:         return nil, status.Errorf(codes.PermissionDenied, \"permission denied\")",
                "// Line 21:     }",
                "// Line 22: ",
                "// Line 23:     storage, err := s.Store.CreateStorageV1(ctx, convertStorageToStore(request.Storage))",
                "// Line 24:     if err != nil {",
                "// Line 25:         return nil, status.Errorf(codes.Internal, \"failed to create storage, error: %+v\", err)",
                "// Line 26:     }",
                "// Line 27:     return &apiv2pb.CreateStorageResponse{",
                "// vulnerable line: 28: Storage: convertStorageFromStore(storage),",
                "// Line 29:     }, nil",
                "// Line 30: }",
                "// Line 31: ",
                "// Line 32: func (s *APIV2Service) ListStorages(ctx context.Context, _ *apiv2pb.ListStoragesRequest) (*apiv2pb.ListStoragesResponse, error) {",
                "// Line 33:     storages, err := s.Store.ListStoragesV1(ctx, &store.FindStorage{})",
                "// Line 34:     if err != nil {",
                "// Line 35:         return nil, status.Errorf(codes.Internal, \"failed to list storages, error: %+v\", err)",
                "// Line 36:     }",
                "// Line 37: ",
                "// Line 38:     response := &apiv2pb.ListStoragesResponse{",
                "// Line 39:         Storages: []*apiv2pb.Storage{},",
                "// Line 40:     }",
                "// Line 41:     for _, storage := range storages {",
                "// vulnerable line: 42: response.Storages = append(response.Storages, convertStorageFromStore(storage))",
                "// Line 43:     }",
                "// Line 44:     return response, nil",
                "// Line 45: }",
                "// Line 46: ",
                "// Line 47: func (s *APIV2Service) GetStorage(ctx context.Context, request *apiv2pb.GetStorageRequest) (*apiv2pb.GetStorageResponse, error) {",
                "// Line 48:     storage, err := s.Store.GetStorageV1(ctx, &store.FindStorage{",
                "// Line 49:         ID: &request.Id,",
                "// Line 50:     })",
                "// Line 51:     if err != nil {",
                "// Line 52:         return nil, status.Errorf(codes.Internal, \"failed to get storage, error: %+v\", err)",
                "// Line 53:     }",
                "// Line 54:     if storage == nil {",
                "// Line 55:         return nil, status.Errorf(codes.NotFound, \"storage not found\")",
                "// Line 56:     }",
                "// Line 57:     return &apiv2pb.GetStorageResponse{",
                "// vulnerable line: 58: Storage: convertStorageFromStore(storage),",
                "// Line 59:     }, nil",
                "// Line 60: }",
                "// Line 61: ",
                "// Line 62: func (s *APIV2Service) UpdateStorage(ctx context.Context, request *apiv2pb.UpdateStorageRequest) (*apiv2pb.UpdateStorageResponse, error) {",
                "// Line 63:     if request.UpdateMask == nil || len(request.UpdateMask.Paths) == 0 {",
                "// Line 64:         return nil, status.Errorf(codes.InvalidArgument, \"update_mask is required\")",
                "// Line 65:     }",
                "// Line 66: ",
                "// Line 67:     update := &store.UpdateStorageV1{",
                "// Line 68:         ID:   request.Storage.Id,",
                "// Line 75:         case \"config\":",
                "// Line 76:             update.Config = convertStorageConfigToStore(request.Storage.Type, request.Storage.Config)",
                "// Line 77:         }",
                "// Line 78:     }",
                "// Line 79: ",
                "// Line 80:     storage, err := s.Store.UpdateStorageV1(ctx, update)",
                "// Line 81:     if err != nil {",
                "// Line 82:         return nil, status.Errorf(codes.Internal, \"failed to update storage, error: %+v\", err)",
                "// Line 83:     }",
                "// Line 84:     return &apiv2pb.UpdateStorageResponse{",
                "// vulnerable line: 85: Storage: convertStorageFromStore(storage),",
                "// Line 86:     }, nil",
                "// Line 87: }",
                "// Line 88: ",
                "// Line 89: func (s *APIV2Service) DeleteStorage(ctx context.Context, request *apiv2pb.DeleteStorageRequest) (*apiv2pb.DeleteStorageResponse, error) {",
                "// Line 90:     err := s.Store.DeleteStorage(ctx, &store.DeleteStorage{",
                "// Line 91:         ID: request.Id,",
                "// Line 92:     })",
                "// Line 93:     if err != nil {",
                "// Line 94:         return nil, status.Errorf(codes.Internal, \"failed to delete storage, error: %+v\", err)",
                "// Line 95:     }",
                "// Line 96:     return &apiv2pb.DeleteStorageResponse{}, nil",
                "// Line 97: }",
                "// Line 98: ",
                "// vulnerable line: 99: func convertStorageFromStore(storage *storepb.Storage) *apiv2pb.Storage {",
                "// Line 100:     temp := &apiv2pb.Storage{",
                "// Line 101:         Id:    storage.Id,",
                "// Line 102:         Title: storage.Name,",
                "// Line 103:         Type:  apiv2pb.Storage_Type(apiv2pb.Storage_Type_value[storage.Type.String()]),",
                "// Line 104:     }",
                "// Line 105:     if storage.Type == storepb.Storage_S3 {",
                "// Line 106:         s3Config := storage.Config.GetS3Config()",
                "// Line 107:         temp.Config = &apiv2pb.StorageConfig{",
                "// Line 108:             Config: &apiv2pb.StorageConfig_S3Config{",
                "// Line 109:                 S3Config: &apiv2pb.S3Config{"
            ]
        },
        {
            "filename_of_changes": "telegram.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: package integration",
                "// Line 2: ",
                "// Line 3: import (",
                "// vulnerable line: 4: \"bytes\"",
                "// Line 5:     \"context\"",
                "// Line 6:     \"fmt\"",
                "// Line 7:     \"path/filepath\"",
                "// Line 8:     \"slices\"",
                "// Line 9:     \"strconv\"",
                "// Line 10:     \"time\"",
                "// Line 11:     \"unicode/utf16\"",
                "// Line 12: ",
                "// Line 13:     \"github.com/lithammer/shortuuid/v4\"",
                "// Line 14:     \"github.com/pkg/errors\"",
                "// Line 15:     \"github.com/yourselfhosted/gomark/ast\"",
                "// Line 16:     \"github.com/yourselfhosted/gomark/parser\"",
                "// Line 17:     \"github.com/yourselfhosted/gomark/parser/tokenizer\"",
                "// Line 18: ",
                "// Line 19:     \"github.com/usememos/memos/plugin/telegram\"",
                "// Line 20:     \"github.com/usememos/memos/plugin/webhook\"",
                "// Line 21:     storepb \"github.com/usememos/memos/proto/gen/store\"",
                "// vulnerable line: 22: apiv1 \"github.com/usememos/memos/server/route/api/v1\"",
                "// Line 23:     apiv2 \"github.com/usememos/memos/server/route/api/v2\"",
                "// Line 24:     \"github.com/usememos/memos/store\"",
                "// Line 25: )",
                "// Line 26: ",
                "// Line 27: type TelegramHandler struct {",
                "// Line 28:     store *store.Store",
                "// Line 29: }",
                "// Line 30: ",
                "// Line 31: func NewTelegramHandler(store *store.Store) *TelegramHandler {",
                "// Line 32:     return &TelegramHandler{store: store}",
                "// Line 123:         // Fill the common field of create",
                "// Line 124:         create := store.Resource{",
                "// Line 125:             UID:       shortuuid.New(),",
                "// Line 126:             CreatorID: creatorID,",
                "// Line 127:             Filename:  filepath.Base(attachment.FileName),",
                "// Line 128:             Type:      attachment.GetMimeType(),",
                "// Line 129:             Size:      attachment.FileSize,",
                "// Line 130:             MemoID:    &memoMessage.ID,",
                "// Line 131:         }",
                "// Line 132: ",
                "// vulnerable line: 133: err := apiv1.SaveResourceBlob(ctx, t.store, &create, bytes.NewReader(attachment.Data))",
                "// Line 134:         if err != nil {",
                "// Line 135:             _, err := bot.EditMessage(ctx, message.Chat.ID, reply.MessageID, fmt.Sprintf(\"Failed to SaveResourceBlob: %s\", err), nil)",
                "// Line 136:             return err",
                "// Line 137:         }",
                "// Line 138: ",
                "// Line 139:         _, err = t.store.CreateResource(ctx, &create)",
                "// Line 140:         if err != nil {",
                "// Line 141:             _, err := bot.EditMessage(ctx, message.Chat.ID, reply.MessageID, fmt.Sprintf(\"Failed to CreateResource: %s\", err), nil)",
                "// Line 142:             return err",
                "// Line 143:         }"
            ]
        }
    ]
}