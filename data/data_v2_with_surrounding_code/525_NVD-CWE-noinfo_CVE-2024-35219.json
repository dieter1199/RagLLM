{
    "cve_id": "CVE-2024-35219",
    "cve_description": "OpenAPI Generator allows generation of API client libraries (SDK generation), server stubs, documentation and configuration automatically given an OpenAPI Spec. Prior to version 7.6.0, attackers can exploit a path traversal vulnerability to read and delete files and folders from an arbitrary, writable directory as anyone can set the output folder when submitting the request via the `outputFolder` option. The issue was fixed in version 7.6.0 by removing the usage of the `outputFolder` option. No known workarounds are available.",
    "cve_publish_date": "2024-05-27T16:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "skip setting output folder in online service (#18652)",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "Generator.java",
            "code_language": "Java",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "8",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 44: public class Generator {",
                "// Line 45:     private static Logger LOGGER = LoggerFactory.getLogger(Generator.class);",
                "// Line 46: ",
                "// Line 47:     public static Map<String, CliOption> getOptions(String language) {",
                "// Line 48:         CodegenConfig config;",
                "// Line 49:         try {",
                "// Line 50:             config = CodegenConfigLoader.forName(language);",
                "// Line 51:         } catch (Exception e) {",
                "// Line 52:             throw new ResponseStatusException(HttpStatus.NOT_FOUND, String.format(Locale.ROOT,\"Unsupported target %s supplied. %s\",",
                "// Line 53:                     language, e));",
                "// vulnerable line: 54: }",
                "// Line 55:         Map<String, CliOption> map = new LinkedHashMap<>();",
                "// Line 56:         for (CliOption option : config.cliOptions()) {",
                "// Line 57:             map.put(option.getOpt(), option);",
                "// vulnerable line: 58: }",
                "// Line 59:         return map;",
                "// vulnerable line: 60: }",
                "// Line 61: ",
                "// Line 62:     public enum Type {",
                "// Line 63:         CLIENT(\"client\"), SERVER(\"server\");",
                "// Line 64: ",
                "// Line 65:         private String name;",
                "// Line 66: ",
                "// Line 67:         Type(String name) {",
                "// Line 68:             this.name = name;",
                "// vulnerable line: 69: }",
                "// Line 70: ",
                "// Line 71:         String getTypeName() {",
                "// Line 72:             return name;",
                "// vulnerable line: 73: }",
                "// vulnerable line: 74: }",
                "// Line 75: ",
                "// Line 76:     public static String generateClient(String language, GeneratorInput opts) {",
                "// Line 77:         return generate(language, opts, Type.CLIENT);",
                "// vulnerable line: 78: }",
                "// Line 79: ",
                "// Line 80:     public static String generateServer(String language, GeneratorInput opts) {",
                "// Line 81:         return generate(language, opts, Type.SERVER);",
                "// vulnerable line: 82: }",
                "// Line 83: ",
                "// Line 84:     private static String generate(String language, GeneratorInput opts, Type type) {",
                "// Line 85:         LOGGER.debug(String.format(Locale.ROOT,\"generate %s for %s\", type.getTypeName(), language));",
                "// Line 86:         if (opts == null) {",
                "// Line 87:             throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"No options were supplied\");",
                "// vulnerable line: 88: }",
                "// Line 89:         JsonNode node = opts.getSpec();",
                "// Line 90:         if (node != null && \"{}\".equals(node.toString())) {",
                "// Line 91:             LOGGER.debug(\"ignoring empty spec\");",
                "// Line 92:             node = null;",
                "// vulnerable line: 93: }",
                "// Line 94:         OpenAPI openapi;",
                "// Line 95:         ParseOptions parseOptions = new ParseOptions();",
                "// Line 96:         parseOptions.setResolve(true);",
                "// Line 97:         if (node == null) {",
                "// Line 98:             if (opts.getOpenAPIUrl() != null) {",
                "// Line 99:                 if (opts.getAuthorizationValue() != null) {",
                "// Line 100:                     List<AuthorizationValue> authorizationValues = new ArrayList<>();",
                "// Line 101:                     authorizationValues.add(opts.getAuthorizationValue());",
                "// Line 102:                     openapi = new OpenAPIParser().readLocation(opts.getOpenAPIUrl(), authorizationValues, parseOptions).getOpenAPI();",
                "// Line 103:                 } else {",
                "// Line 104:                     openapi = new OpenAPIParser().readLocation(opts.getOpenAPIUrl(), null, parseOptions).getOpenAPI();",
                "// vulnerable line: 105: }",
                "// Line 106:             } else {",
                "// Line 107:                 throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"No OpenAPI specification was supplied\");",
                "// vulnerable line: 108: }",
                "// Line 109:         } else if (opts.getAuthorizationValue() != null) {",
                "// Line 110:             List<AuthorizationValue> authorizationValues = new ArrayList<>();",
                "// Line 111:             authorizationValues.add(opts.getAuthorizationValue());",
                "// Line 112:             openapi = new OpenAPIParser().readContents(node.toString(), authorizationValues, parseOptions).getOpenAPI();",
                "// Line 113: ",
                "// Line 114:         } else {",
                "// Line 115:             openapi = new OpenAPIParser().readContents(node.toString(), null, parseOptions).getOpenAPI();",
                "// vulnerable line: 116: }",
                "// Line 117:         if (openapi == null) {",
                "// Line 118:             throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"The OpenAPI specification supplied was not valid\");",
                "// vulnerable line: 119: }",
                "// Line 120: ",
                "// vulnerable line: 121: String destPath = null;",
                "// Line 122: ",
                "// vulnerable line: 123: if (opts.getOptions() != null) {",
                "// vulnerable line: 124: destPath = opts.getOptions().get(\"outputFolder\");",
                "// vulnerable line: 125: }",
                "// vulnerable line: 126: if (destPath == null) {",
                "// vulnerable line: 127: destPath = language + \"-\" + type.getTypeName();",
                "// vulnerable line: 128: }",
                "// Line 129: ",
                "// Line 130:         ClientOptInput clientOptInput = new ClientOptInput();",
                "// Line 131:         String outputFolder = getTmpFolder().getAbsolutePath() + File.separator + destPath;",
                "// Line 132:         String outputFilename = outputFolder + \"-bundle.zip\";",
                "// Line 133: ",
                "// Line 134:         clientOptInput.openAPI(openapi);",
                "// Line 135: ",
                "// Line 136:         CodegenConfig codegenConfig;",
                "// Line 137:         try {",
                "// Line 138:             codegenConfig = CodegenConfigLoader.forName(language);",
                "// Line 139:         } catch (RuntimeException e) {",
                "// Line 140:             throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"Unsupported target \" + language + \" supplied\");",
                "// vulnerable line: 141: }",
                "// Line 142: ",
                "// vulnerable line: 143: if (opts.getOptions() != null) {",
                "// Line 144:             codegenConfig.additionalProperties().putAll(opts.getOptions());",
                "// Line 145:             codegenConfig.additionalProperties().put(\"openAPI\", openapi);",
                "// vulnerable line: 146: }",
                "// Line 147: ",
                "// Line 148:         codegenConfig.setOutputDir(outputFolder);",
                "// Line 149: ",
                "// Line 150:         clientOptInput.config(codegenConfig);",
                "// Line 151: ",
                "// Line 152:         try {",
                "// Line 153:             List<File> files = new DefaultGenerator().opts(clientOptInput).generate();",
                "// Line 154:             if (files.size() > 0) {",
                "// Line 155:                 List<File> filesToAdd = new ArrayList<>();",
                "// Line 156:                 LOGGER.debug(\"adding to {}\", outputFolder);",
                "// Line 157:                 filesToAdd.add(new File(outputFolder));",
                "// Line 158:                 ZipUtil zip = new ZipUtil();",
                "// Line 159:                 zip.compressFiles(filesToAdd, outputFilename);",
                "// Line 160:             } else {",
                "// Line 161:                 throw new ResponseStatusException(HttpStatus.BAD_REQUEST,",
                "// Line 162:                         \"A target generation was attempted, but no files were created!\");",
                "// vulnerable line: 163: }",
                "// Line 164:             for (File file : files) {",
                "// Line 165:                 try {",
                "// Line 166:                     file.delete();",
                "// Line 167:                 } catch (Exception e) {",
                "// Line 168:                     LOGGER.error(\"unable to delete file \" + file.getAbsolutePath(), e);",
                "// vulnerable line: 169: }",
                "// vulnerable line: 170: }",
                "// Line 171:             try {",
                "// Line 172:                 new File(outputFolder).delete();",
                "// Line 173:             } catch (Exception e) {",
                "// Line 174:                 LOGGER.error(\"unable to delete output folder \" + outputFolder, e);",
                "// vulnerable line: 175: }",
                "// Line 176:         } catch (Exception e) {",
                "// Line 177:             throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"Unable to build target: \" + e.getMessage(), e);",
                "// vulnerable line: 178: }",
                "// Line 179:         return outputFilename;",
                "// vulnerable line: 180: }",
                "// Line 181: ",
                "// Line 182:     private static File getTmpFolder() {",
                "// Line 183:         try {",
                "// Line 184:             File outputFolder = Files.createTempDirectory(\"codegen-tmp\").toFile();",
                "// Line 185:             outputFolder.deleteOnExit();",
                "// Line 186:             return outputFolder;",
                "// Line 187:         } catch (Exception e) {",
                "// Line 188:             e.printStackTrace();",
                "// Line 189:             throw new RuntimeException(\"Cannot access tmp folder\");",
                "// vulnerable line: 190: }",
                "// vulnerable line: 191: }",
                "// vulnerable line: 192: }"
            ]
        }
    ]
}