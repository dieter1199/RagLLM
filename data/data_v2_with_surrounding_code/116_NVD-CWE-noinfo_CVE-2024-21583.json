{
    "cve_id": "CVE-2024-21583",
    "cve_description": "Versions of the package github.com/gitpod-io/gitpod/components/server/go/pkg/lib before main-gha.27122; versions of the package github.com/gitpod-io/gitpod/components/ws-proxy/pkg/proxy before main-gha.27122; versions of the package github.com/gitpod-io/gitpod/install/installer/pkg/components/auth before main-gha.27122; versions of the package github.com/gitpod-io/gitpod/install/installer/pkg/components/public-api-server before main-gha.27122; versions of the package github.com/gitpod-io/gitpod/install/installer/pkg/components/server before main-gha.27122; versions of the package @gitpod/gitpod-protocol before 0.1.5-main-gha.27122 are vulnerable to Cookie Tossing due to a missing __Host- prefix on the _gitpod_io_jwt2_ session cookie. This allows an adversary who controls a subdomain to set the value of the cookie on the Gitpod control plane, which can be assigned to an attackerâ€™s own JWT so that specific actions taken by the victim (such as connecting a new Github organization) are actioned by the attackers session.",
    "cve_publish_date": "2024-07-19T05:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Make auth cookie stricter (#19973)\n\n* Use `__Host-` prefix for cookie\n\n* Fix tests\n\n* Remove domain from cookie\n\n* Fix logout\n\n* remove unused fn\n\n* fix user logout properly\n\n* [server] Make domain-only cookie work for GitHub oauth login\n\n... by adding additional step so we can set the cookie for the base domain only\n\n* test: fix by redirecting before callbacl/authorize\n\n* [server] SessionHandler: Allow to login with both primary and secondary cookies\n\n* [server] Clear 2ndary cookie on logout\n\n* Fix filtering cookie values when primary cookie is empty\n\n* Fix logouts\n\n* Fix tests\n\n---------\n\nCo-authored-by: Gero Posmyk-Leinemann <gero@gitpod.io>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "config_test.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "8",
            "number_of_lines_deleted_vulnerable_to_cve": "8",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 12: ",
                "// Line 13: func TestCookieNameFromDomain(t *testing.T) {",
                "// Line 14:     tests := []struct {",
                "// Line 15:         name            string",
                "// Line 16:         domain          string",
                "// Line 17:         expectedOutcome string",
                "// Line 18:     }{",
                "// Line 19:         {",
                "// Line 20:             name:            \"Simple Domain\",",
                "// Line 21:             domain:          \"example.com\",",
                "// vulnerable line: 22: expectedOutcome: \"_example_com_jwt2_\",",
                "// Line 23:         },",
                "// Line 24:         {",
                "// Line 25:             name:            \"Domain with Underscore\",",
                "// Line 26:             domain:          \"example_test.com\",",
                "// vulnerable line: 27: expectedOutcome: \"_example_test_com_jwt2_\",",
                "// Line 28:         },",
                "// Line 29:         {",
                "// Line 30:             name:            \"Domain with Hyphen\",",
                "// Line 31:             domain:          \"example-test.com\",",
                "// vulnerable line: 32: expectedOutcome: \"_example_test_com_jwt2_\",",
                "// Line 33:         },",
                "// Line 34:         {",
                "// Line 35:             name:            \"Domain with Special Characters\",",
                "// Line 36:             domain:          \"example&test.com\",",
                "// vulnerable line: 37: expectedOutcome: \"_example_test_com_jwt2_\",",
                "// Line 38:         },",
                "// Line 39:         {",
                "// Line 40:             name:            \"Subdomain\",",
                "// Line 41:             domain:          \"subdomain.example.com\",",
                "// vulnerable line: 42: expectedOutcome: \"_subdomain_example_com_jwt2_\",",
                "// Line 43:         },",
                "// Line 44:         {",
                "// Line 45:             name:            \"Subdomain with Hyphen\",",
                "// Line 46:             domain:          \"sub-domain.example.com\",",
                "// vulnerable line: 47: expectedOutcome: \"_sub_domain_example_com_jwt2_\",",
                "// Line 48:         },",
                "// Line 49:         {",
                "// Line 50:             name:            \"Subdomain with Underscore\",",
                "// Line 51:             domain:          \"sub_domain.example.com\",",
                "// vulnerable line: 52: expectedOutcome: \"_sub_domain_example_com_jwt2_\",",
                "// Line 53:         },",
                "// Line 54:         {",
                "// Line 55:             name:            \"Subdomain with Special Characters\",",
                "// Line 56:             domain:          \"sub&domain.example.com\",",
                "// vulnerable line: 57: expectedOutcome: \"_sub_domain_example_com_jwt2_\",",
                "// Line 58:         },",
                "// Line 59:     }",
                "// Line 60: ",
                "// Line 61:     for _, tt := range tests {",
                "// Line 62:         t.Run(tt.name, func(t *testing.T) {",
                "// Line 63:             actual := server_lib.CookieNameFromDomain(tt.domain)",
                "// Line 64:             if actual != tt.expectedOutcome {",
                "// Line 65:                 t.Errorf(\"expected %q, got %q\", tt.expectedOutcome, actual)",
                "// Line 66:             }",
                "// Line 67:         })"
            ]
        },
        {
            "filename_of_changes": "configmap_test.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 56:                 Signing: config.KeyPair{",
                "// Line 57:                     ID:             \"0001\",",
                "// Line 58:                     PublicKeyPath:  \"/secrets/auth-pki/signing/tls.crt\",",
                "// Line 59:                     PrivateKeyPath: \"/secrets/auth-pki/signing/tls.key\",",
                "// Line 60:                 },",
                "// Line 61:             },",
                "// Line 62:             Session: config.SessionConfig{",
                "// Line 63:                 LifetimeSeconds: int64((24 * 7 * time.Hour).Seconds()),",
                "// Line 64:                 Issuer:          \"https://test.domain.everything.awesome.is\",",
                "// Line 65:                 Cookie: config.CookieConfig{",
                "// vulnerable line: 66: Name:     \"_test_domain_everything_awesome_is_jwt2_\",",
                "// Line 67:                     MaxAge:   int64((24 * 7 * time.Hour).Seconds()),",
                "// Line 68:                     SameSite: \"lax\",",
                "// Line 69:                     Secure:   true,",
                "// Line 70:                     HTTPOnly: true,",
                "// Line 71:                 },",
                "// Line 72:             },",
                "// Line 73:         },",
                "// Line 74:         Server: &baseserver.Configuration{",
                "// Line 75:             Services: baseserver.ServicesConfiguration{",
                "// Line 76:                 GRPC: &baseserver.ServerConfiguration{"
            ]
        },
        {
            "filename_of_changes": "configmap_test.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 62:                 Signing: auth.KeyPair{",
                "// Line 63:                     ID:             \"0001\",",
                "// Line 64:                     PrivateKeyPath: \"/secrets/auth-pki/signing/tls.key\",",
                "// Line 65:                     PublicKeyPath:  \"/secrets/auth-pki/signing/tls.crt\",",
                "// Line 66:                 },",
                "// Line 67:             },",
                "// Line 68:             Session: auth.SessionConfig{",
                "// Line 69:                 LifetimeSeconds: int64((7 * 24 * time.Hour).Seconds()),",
                "// Line 70:                 Issuer:          \"https://awesome.domain\",",
                "// Line 71:                 Cookie: auth.CookieConfig{",
                "// vulnerable line: 72: Name:     \"_awesome_domain_jwt2_\",",
                "// Line 73:                     MaxAge:   int64((7 * 24 * time.Hour).Seconds()),",
                "// Line 74:                     SameSite: \"lax\",",
                "// Line 75:                     Secure:   true,",
                "// Line 76:                     HTTPOnly: true,",
                "// Line 77:                 },",
                "// Line 78:             },",
                "// Line 79:         },",
                "// Line 80:         Redis: redis.Configuration{",
                "// Line 81:             Address: \"redis.test_namespace.svc.cluster.local:6379\",",
                "// Line 82:         },"
            ]
        },
        {
            "filename_of_changes": "cookie.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 2: // Licensed under the GNU Affero General Public License (AGPL).",
                "// Line 3: // See License.AGPL.txt in the project root for license information.",
                "// Line 4: ",
                "// Line 5: package lib",
                "// Line 6: ",
                "// Line 7: import \"regexp\"",
                "// Line 8: ",
                "// Line 9: func CookieNameFromDomain(domain string) string {",
                "// Line 10:     // replace all non-word characters with underscores",
                "// Line 11:     derived := regexp.MustCompile(`[\\W_]+`).ReplaceAllString(domain, \"_\")",
                "// vulnerable line: 12: return \"_\" + derived + \"_jwt2_\"",
                "// Line 13: }"
            ]
        },
        {
            "filename_of_changes": "routes.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 815: // This function modifies the slice in-place.",
                "// Line 816: func removeSensitiveCookies(cookies []*http.Cookie, domain string) []*http.Cookie {",
                "// Line 817:     hostnamePrefix := domain",
                "// Line 818:     for _, c := range []string{\" \", \"-\", \".\"} {",
                "// Line 819:         hostnamePrefix = strings.ReplaceAll(hostnamePrefix, c, \"_\")",
                "// Line 820:     }",
                "// Line 821:     hostnamePrefix = \"_\" + hostnamePrefix + \"_\"",
                "// Line 822: ",
                "// Line 823:     n := 0",
                "// Line 824:     for _, c := range cookies {",
                "// vulnerable line: 825: if strings.HasPrefix(c.Name, hostnamePrefix) {",
                "// vulnerable line: 826: // skip session cookie",
                "// Line 827:             continue",
                "// Line 828:         }",
                "// Line 829:         log.WithField(\"hostnamePrefix\", hostnamePrefix).WithField(\"name\", c.Name).Debug(\"keeping cookie\")",
                "// Line 830:         cookies[n] = c",
                "// Line 831:         n++",
                "// Line 832:     }",
                "// Line 833:     return cookies[:n]",
                "// Line 834: }",
                "// Line 835: ",
                "// Line 836: // region blobserve transport."
            ]
        },
        {
            "filename_of_changes": "routes_test.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1033:             t.Fatalf(\"status code should be 401, but got %d\", resp.StatusCode)",
                "// Line 1034:         }",
                "// Line 1035:     })",
                "// Line 1036: ",
                "// Line 1037: }",
                "// Line 1038: ",
                "// Line 1039: func TestRemoveSensitiveCookies(t *testing.T) {",
                "// Line 1040:     var (",
                "// Line 1041:         domain                  = \"test-domain.com\"",
                "// Line 1042:         sessionCookie           = &http.Cookie{Domain: domain, Name: \"_test_domain_com_\", Value: \"fobar\"}",
                "// vulnerable line: 1043: sessionCookieJwt2       = &http.Cookie{Domain: domain, Name: \"_test_domain_com_jwt2_\", Value: \"fobar\"}",
                "// Line 1044:         realGitpodSessionCookie = &http.Cookie{Domain: domain, Name: server_lib.CookieNameFromDomain(domain), Value: \"fobar\"}",
                "// Line 1045:         portAuthCookie          = &http.Cookie{Domain: domain, Name: \"_test_domain_com_ws_77f6b236_3456_4b88_8284_81ca543a9d65_port_auth_\", Value: \"some-token\"}",
                "// Line 1046:         ownerCookie             = &http.Cookie{Domain: domain, Name: \"_test_domain_com_ws_77f6b236_3456_4b88_8284_81ca543a9d65_owner_\", Value: \"some-other-token\"}",
                "// Line 1047:         ownerCookieGen          = ownerTokenCookie(domain, \"77f6b236_3456_4b88_8284_81ca543a9d65\", \"owner-token-gen\")",
                "// Line 1048:         miscCookie              = &http.Cookie{Domain: domain, Name: \"some-other-cookie\", Value: \"I like cookies\"}",
                "// Line 1049:         invalidCookieName       = &http.Cookie{Domain: domain, Name: \"foobar[0]\", Value: \"violates RFC6266\"}",
                "// Line 1050:     )",
                "// Line 1051: ",
                "// Line 1052:     tests := []struct {",
                "// Line 1053:         Name     string"
            ]
        }
    ]
}