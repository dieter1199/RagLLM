{
    "cve_id": "CVE-2024-32480",
    "cve_description": "LibreNMS is an open-source, PHP/MySQL/SNMP-based network monitoring system. Versions prior to 24.4.0 are vulnerable to SQL injection. The `order` parameter is obtained from `$request`. After performing a string check, the value is directly incorporated into an SQL statement and concatenated, resulting in a SQL injection vulnerability. An attacker may extract a whole database this way. Version 24.4.0 fixes the issue.",
    "cve_publish_date": "2024-04-22T23:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Improve order validation in list_devices function to prevent SQL injection (#15885)",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "api_functions.inc.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "6",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 43: use LibreNMStil\\Graph;",
                "// Line 44: use LibreNMStil\\IP;",
                "// Line 45: use LibreNMStil\\IPv4;",
                "// Line 46: use LibreNMStil\\Mac;",
                "// Line 47: use LibreNMStilumber;",
                "// Line 48: ",
                "// Line 49: function api_success($result, $result_name, $message = null, $code = 200, $count = null, $extra = null): JsonResponse",
                "// Line 50: {",
                "// Line 51:     if (isset($result) && ! isset($result_name)) {",
                "// Line 52:         return api_error(500, 'Result name not specified');",
                "// vulnerable line: 53: }",
                "// Line 54: ",
                "// Line 55:     $output = ['status' => 'ok'];",
                "// Line 56: ",
                "// Line 57:     if (isset($result)) {",
                "// Line 58:         $output[$result_name] = $result;",
                "// vulnerable line: 59: }",
                "// Line 60:     if (isset($message) && $message != '') {",
                "// Line 61:         $output['message'] = $message;",
                "// vulnerable line: 62: }",
                "// Line 63:     if (! isset($count) && is_array($result)) {",
                "// Line 64:         $count = count($result);",
                "// vulnerable line: 65: }",
                "// Line 66:     if (isset($count)) {",
                "// Line 67:         $output['count'] = $count;",
                "// vulnerable line: 68: }",
                "// Line 69:     if (isset($extra)) {",
                "// Line 70:         $output = array_merge($output, $extra);",
                "// vulnerable line: 71: }",
                "// Line 72: ",
                "// Line 73:     return response()->json($output, $code, [], JSON_PRETTY_PRINT);",
                "// Line 74: } // end api_success()",
                "// Line 75: ",
                "// Line 76: function api_success_noresult($code, $message = null): JsonResponse",
                "// Line 77: {",
                "// Line 78:     return api_success(null, null, $message, $code);",
                "// Line 79: } // end api_success_noresult",
                "// Line 80: ",
                "// Line 81: function api_error($statusCode, $message): JsonResponse",
                "// Line 82: {",
                "// Line 83:     return response()->json([",
                "// Line 84:         'status' => 'error',",
                "// Line 85:         'message' => $message,",
                "// Line 86:     ], $statusCode, [], JSON_PRETTY_PRINT);",
                "// Line 87: } // end api_error()",
                "// Line 88: ",
                "// Line 89: function api_not_found(): JsonResponse",
                "// Line 90: {",
                "// Line 91:     return api_error(404, \"This API route doesn't exist.\");",
                "// vulnerable line: 92: }",
                "// Line 93: ",
                "// Line 94: function api_get_graph(Request $request, array $additional = [])",
                "// Line 95: {",
                "// Line 96:     try {",
                "// Line 97:         $vars = $request->only([",
                "// Line 98:             'from',",
                "// Line 99:             'to',",
                "// Line 100:             'legend',",
                "// Line 101:             'title',",
                "// Line 102:             'absolute',",
                "// Line 115: ",
                "// Line 116:         $graph = Graph::get([",
                "// Line 117:             'width' => $request->get('width', 1075),",
                "// Line 118:             'height' => $request->get('height', 300),",
                "// Line 119:             ...$additional,",
                "// Line 120:             ...$vars,",
                "// Line 121:         ]);",
                "// Line 122: ",
                "// Line 123:         if ($request->get('output') === 'base64') {",
                "// Line 124:             return api_success(['image' => $graph->base64(), 'content-type' => $graph->contentType()], 'image');",
                "// vulnerable line: 125: }",
                "// Line 126: ",
                "// Line 127:         return response($graph->data, 200, ['Content-Type' => $graph->contentType()]);",
                "// Line 128:     } catch (\\LibreNMS\\Exceptions\\RrdGraphException $e) {",
                "// Line 129:         return api_error(500, $e->getMessage());",
                "// vulnerable line: 130: }",
                "// vulnerable line: 131: }",
                "// Line 132: ",
                "// Line 133: function check_bill_permission($bill_id, $callback)",
                "// Line 134: {",
                "// Line 135:     if (! bill_permitted($bill_id)) {",
                "// Line 136:         return api_error(403, 'Insufficient permissions to access this bill');",
                "// vulnerable line: 137: }",
                "// Line 138: ",
                "// Line 139:     return $callback($bill_id);",
                "// vulnerable line: 140: }",
                "// Line 141: ",
                "// Line 142: function check_device_permission($device_id, $callback = null)",
                "// Line 143: {",
                "// Line 144:     if (! device_permitted($device_id)) {",
                "// Line 145:         return api_error(403, 'Insufficient permissions to access this device');",
                "// vulnerable line: 146: }",
                "// Line 147: ",
                "// Line 148:     return is_callable($callback) ? $callback($device_id) : true;",
                "// vulnerable line: 149: }",
                "// Line 150: ",
                "// Line 151: function check_port_permission($port_id, $device_id, $callback)",
                "// Line 152: {",
                "// Line 153:     if (! device_permitted($device_id) && ! port_permitted($port_id, $device_id)) {",
                "// Line 154:         return api_error(403, 'Insufficient permissions to access this port');",
                "// vulnerable line: 155: }",
                "// Line 156: ",
                "// Line 157:     return $callback($port_id);",
                "// vulnerable line: 158: }",
                "// Line 159: ",
                "// Line 160: function get_graph_by_port_hostname(Request $request, $ifname = null, $type = 'port_bits')",
                "// Line 161: {",
                "// Line 162:     // This will return a graph for a given port by the ifName",
                "// Line 163:     $hostname = $request->route('hostname');",
                "// Line 164:     $device_id = ctype_digit($hostname) ? $hostname : getidbyname($hostname);",
                "// Line 165:     $vars = [",
                "// Line 166:         'port' => $ifname ?: $request->route('ifname'),",
                "// Line 167:         'type' => $request->route('type', $type),",
                "// Line 168:     ];",
                "// Line 170:     $port_field = $request->get('ifDescr') ? 'ifDescr' : 'ifName'; // don't accept user input",
                "// Line 171:     $vars['id'] = Port::where([",
                "// Line 172:         'device_id' => $device_id,",
                "// Line 173:         'deleted' => 0,",
                "// Line 174:         $port_field => $vars['port'],",
                "// Line 175:     ])->value('port_id');",
                "// Line 176: ",
                "// Line 177:     return check_port_permission($vars['id'], $device_id, function () use ($request, $vars) {",
                "// Line 178:         return api_get_graph($request, $vars);",
                "// Line 179:     });",
                "// vulnerable line: 180: }",
                "// Line 181: ",
                "// Line 182: function get_port_stats_by_port_hostname(Illuminate\\Http\\Request $request)",
                "// Line 183: {",
                "// Line 184:     $ifName = $request->route('ifname');",
                "// Line 185: ",
                "// Line 186:     // handle %2f in paths and pass to get_graph_by_port_hostname if needed",
                "// Line 187:     if (Str::contains($ifName, '/')) {",
                "// Line 188:         $parts = explode('/', $request->path());",
                "// Line 189: ",
                "// Line 190:         if (isset($parts[5])) {",
                "// Line 191:             $ifName = urldecode($parts[5]);",
                "// Line 192:             if (isset($parts[6])) {",
                "// Line 193:                 return get_graph_by_port_hostname($request, $ifName, $parts[6]);",
                "// vulnerable line: 194: }",
                "// vulnerable line: 195: }",
                "// vulnerable line: 196: }",
                "// Line 197: ",
                "// Line 198:     // This will return port stats based on a devices hostname and ifName",
                "// Line 199:     $hostname = $request->route('hostname');",
                "// Line 200:     $device_id = ctype_digit($hostname) ? $hostname : getidbyname($hostname);",
                "// Line 201:     $port = dbFetchRow('SELECT * FROM `ports` WHERE `device_id`=? AND `ifName`=? AND `deleted` = 0', [$device_id, $ifName]);",
                "// Line 202: ",
                "// Line 203:     return check_port_permission($port['port_id'], $device_id, function () use ($request, $port) {",
                "// Line 204:         $in_rate = $port['ifInOctets_rate'] * 8;",
                "// Line 205:         $out_rate = $port['ifOutOctets_rate'] * 8;",
                "// Line 206:         $port['in_rate'] = Number::formatSi($in_rate, 2, 3, 'bps');",
                "// Line 209:         $port['out_perc'] = Number::calculatePercent($out_rate, $port['ifSpeed']);",
                "// Line 210:         $port['in_pps'] = Number::formatBi($port['ifInUcastPkts_rate'], 2, 3, '');",
                "// Line 211:         $port['out_pps'] = Number::formatBi($port['ifOutUcastPkts_rate'], 2, 3, '');",
                "// Line 212: ",
                "// Line 213:         //only return requested columns",
                "// Line 214:         if ($request->has('columns')) {",
                "// Line 215:             $cols = explode(',', $request->get('columns'));",
                "// Line 216:             foreach (array_keys($port) as $c) {",
                "// Line 217:                 if (! in_array($c, $cols)) {",
                "// Line 218:                     unset($port[$c]);",
                "// vulnerable line: 219: }",
                "// vulnerable line: 220: }",
                "// vulnerable line: 221: }",
                "// Line 222: ",
                "// Line 223:         return api_success($port, 'port');",
                "// Line 224:     });",
                "// vulnerable line: 225: }",
                "// Line 226: ",
                "// Line 227: function get_graph_generic_by_hostname(Request $request)",
                "// Line 228: {",
                "// Line 229:     // This will return a graph type given a device id.",
                "// Line 230:     $hostname = $request->route('hostname');",
                "// Line 231:     $sensor_id = $request->route('sensor_id');",
                "// Line 232:     $vars = [];",
                "// Line 233:     $vars['type'] = $request->route('type', 'device_uptime');",
                "// Line 234:     if (isset($sensor_id)) {",
                "// Line 235:         $vars['id'] = $sensor_id;",
                "// Line 236:         if (Str::contains($vars['type'], '_wireless')) {",
                "// Line 237:             $vars['type'] = str_replace('device_', '', $vars['type']);",
                "// Line 238:         } else {",
                "// Line 239:             // If this isn't a wireless graph we need to fix the name.",
                "// Line 240:             $vars['type'] = str_replace('device_', 'sensor_', $vars['type']);",
                "// vulnerable line: 241: }",
                "// vulnerable line: 242: }",
                "// Line 243: ",
                "// Line 244:     // use hostname as device_id if it's all digits",
                "// Line 245:     $device_id = ctype_digit($hostname) ? $hostname : getidbyname($hostname);",
                "// Line 246:     $device = device_by_id_cache($device_id);",
                "// Line 247:     $vars['device'] = $device['device_id'];",
                "// Line 248: ",
                "// Line 249:     return check_device_permission($device_id, function () use ($request, $vars) {",
                "// Line 250:         return api_get_graph($request, $vars);",
                "// Line 251:     });",
                "// vulnerable line: 252: }",
                "// Line 253: ",
                "// Line 254: function get_graph_by_service(Request $request)",
                "// Line 255: {",
                "// Line 256:     $vars = [];",
                "// Line 257:     $vars['id'] = $request->route('id');",
                "// Line 258:     $vars['type'] = 'service_graph';",
                "// Line 259:     $vars['ds'] = $request->route('datasource');",
                "// Line 260: ",
                "// Line 261:     $hostname = $request->route('hostname');",
                "// Line 262:     // use hostname as device_id if it's all digits",
                "// Line 263:     $device_id = ctype_digit($hostname) ? $hostname : getidbyname($hostname);",
                "// Line 264:     $device = device_by_id_cache($device_id);",
                "// Line 265:     $vars['device'] = $device['device_id'];",
                "// Line 266: ",
                "// Line 267:     return check_device_permission($device_id, function () use ($request, $vars) {",
                "// Line 268:         return api_get_graph($request, $vars);",
                "// Line 269:     });",
                "// vulnerable line: 270: }",
                "// Line 271: ",
                "// Line 272: function list_locations()",
                "// Line 273: {",
                "// Line 274:     $locations = dbFetchRows('SELECT `locations`.* FROM `locations` WHERE `locations`.`location` IS NOT NULL');",
                "// Line 275:     $total_locations = count($locations);",
                "// Line 276:     if ($total_locations == 0) {",
                "// Line 277:         return api_error(404, 'Locations do not exist');",
                "// vulnerable line: 278: }",
                "// Line 279: ",
                "// Line 280:     return api_success($locations, 'locations');",
                "// vulnerable line: 281: }",
                "// Line 282: ",
                "// Line 283: function get_device(Illuminate\\Http\\Request $request)",
                "// Line 284: {",
                "// Line 285:     // return details of a single device",
                "// Line 286:     $hostname = $request->route('hostname');",
                "// Line 287: ",
                "// Line 288:     // use hostname as device_id if it's all digits",
                "// Line 289:     $device_id = ctype_digit($hostname) ? $hostname : getidbyname($hostname);",
                "// Line 290: ",
                "// Line 291:     // find device matching the id",
                "// Line 292:     $device = device_by_id_cache($device_id);",
                "// Line 293:     if (! $device || ! isset($device['device_id'])) {",
                "// Line 294:         return api_error(404, \"Device $hostname does not exist\");",
                "// vulnerable line: 295: }",
                "// Line 296: ",
                "// Line 297:     return check_device_permission($device_id, function () use ($device) {",
                "// Line 298:         $host_id = get_vm_parent_id($device);",
                "// Line 299:         if (is_numeric($host_id)) {",
                "// Line 300:             $device = array_merge($device, ['parent_id' => $host_id]);",
                "// vulnerable line: 301: }",
                "// Line 302: ",
                "// Line 303:         return api_success([$device], 'devices');",
                "// Line 304:     });",
                "// vulnerable line: 305: }",
                "// Line 306: ",
                "// Line 307: function list_devices(Illuminate\\Http\\Request $request)",
                "// Line 308: {",
                "// Line 309:     // This will return a list of devices",
                "// Line 310: ",
                "// Line 311:     $order = $request->get('order');",
                "// Line 312:     $type = $request->get('type');",
                "// Line 313:     $query = $request->get('query');",
                "// Line 314:     $param = [];",
                "// Line 315: ",
                "// vulnerable line: 316: if (empty($order)) {",
                "// vulnerable line: 317: $order = 'hostname';",
                "// vulnerable line: 318: }",
                "// Line 319: ",
                "// vulnerable line: 320: if (stristr($order, ' desc') === false && stristr($order, ' asc') === false) {",
                "// vulnerable line: 321: $order = 'd.`' . $order . '` ASC';",
                "// vulnerable line: 322: }",
                "// Line 323: ",
                "// Line 324:     $select = ' d.*, GROUP_CONCAT(dd.device_id) AS dependency_parent_id, GROUP_CONCAT(dd.hostname) AS dependency_parent_hostname, `location`, `lat`, `lng` ';",
                "// Line 325:     $join = ' LEFT JOIN `device_relationships` AS dr ON dr.`child_device_id` = d.`device_id` LEFT JOIN `devices` AS dd ON dr.`parent_device_id` = dd.`device_id` LEFT JOIN `locations` ON `locations`.`id` = `d`.`location_id`';",
                "// Line 326: ",
                "// Line 327:     if ($type == 'all' || empty($type)) {",
                "// Line 328:         $sql = '1';",
                "// Line 329:     } elseif ($type == 'device_id') {",
                "// Line 330:         $sql = '`d`.`device_id` = ?';",
                "// Line 331:         $param[] = $query;",
                "// Line 332:     } elseif ($type == 'active') {",
                "// Line 370:         $sql = '`d`.`location_id`=?';",
                "// Line 371:         $param[] = $query;",
                "// Line 372:     } elseif ($type == 'type') {",
                "// Line 373:         $sql = '`d`.`type`=?';",
                "// Line 374:         $param[] = $query;",
                "// Line 375:     } elseif ($type == 'display') {",
                "// Line 376:         $sql = '`d`.`display` LIKE ?';",
                "// Line 377:         $param[] = \"%$query%\";",
                "// Line 378:     } else {",
                "// Line 379:         $sql = '1';",
                "// vulnerable line: 380: }",
                "// Line 381: ",
                "// Line 382:     if (! Auth::user()->hasGlobalRead()) {",
                "// Line 383:         $sql .= ' AND `d`.`device_id` IN (SELECT device_id FROM devices_perms WHERE user_id = ?)';",
                "// Line 384:         $param[] = Auth::id();",
                "// vulnerable line: 385: }",
                "// Line 386:     $devices = [];",
                "// Line 387:     $dev_query = \"SELECT $select FROM `devices` AS d $join WHERE $sql GROUP BY d.`hostname` ORDER BY $order\";",
                "// Line 388:     foreach (dbFetchRows($dev_query, $param) as $device) {",
                "// Line 389:         $host_id = get_vm_parent_id($device);",
                "// Line 390:         $device['ip'] = inet6_ntop($device['ip']);",
                "// Line 391:         if (is_numeric($host_id)) {",
                "// Line 392:             $device['parent_id'] = $host_id;",
                "// vulnerable line: 393: }",
                "// Line 394:         $devices[] = $device;",
                "// vulnerable line: 395: }",
                "// Line 396: ",
                "// Line 397:     return api_success($devices, 'devices');",
                "// vulnerable line: 398: }",
                "// Line 399: ",
                "// Line 400: function add_device(Illuminate\\Http\\Request $request)",
                "// Line 401: {",
                "// Line 402:     // This will add a device using the data passed encoded with json",
                "// Line 403:     $data = $request->json()->all();",
                "// Line 404: ",
                "// Line 405:     if (empty($data)) {",
                "// Line 406:         return api_error(400, 'No information has been provided to add this new device');",
                "// vulnerable line: 407: }",
                "// Line 408:     if (empty($data['hostname'])) {",
                "// Line 409:         return api_error(400, 'Missing the device hostname');",
                "// vulnerable line: 410: }",
                "// Line 411: ",
                "// Line 412:     try {",
                "// Line 413:         $device = new Device(Arr::only($data, [",
                "// Line 414:             'hostname',",
                "// Line 415:             'display',",
                "// Line 416:             'overwrite_ip',",
                "// Line 417:             'location_id',",
                "// Line 418:             'port',",
                "// Line 419:             'transport',",
                "// Line 420:             'poller_group',",
                "// Line 424:             'authlevel',",
                "// Line 425:             'authname',",
                "// Line 426:             'authpass',",
                "// Line 427:             'authalgo',",
                "// Line 428:             'cryptopass',",
                "// Line 429:             'cryptoalgo',",
                "// Line 430:         ]));",
                "// Line 431: ",
                "// Line 432:         if (! empty($data['location'])) {",
                "// Line 433:             $device->location_id = \\App\\Models\\Location::firstOrCreate(['location' => $data['location']])->id;",
                "// vulnerable line: 434: }",
                "// Line 435: ",
                "// Line 436:         // uses different name in legacy call",
                "// Line 437:         if (! empty($data['version'])) {",
                "// Line 438:             $device->snmpver = $data['version'];",
                "// vulnerable line: 439: }",
                "// Line 440: ",
                "// Line 441:         if (! empty($data['snmp_disable'])) {",
                "// Line 442:             $device->os = $data['os'] ?? 'ping';",
                "// Line 443:             $device->sysName = $data['sysName'] ?? '';",
                "// Line 444:             $device->hardware = $data['hardware'] ?? '';",
                "// Line 445:             $device->snmp_disable = 1;",
                "// vulnerable line: 446: }",
                "// Line 447: ",
                "// Line 448:         (new ValidateDeviceAndCreate($device, ! empty($data['force_add']), ! empty($data['ping_fallback'])))->execute();",
                "// Line 449:     } catch (Exception $e) {",
                "// Line 450:         return api_error(500, $e->getMessage());",
                "// vulnerable line: 451: }",
                "// Line 452: ",
                "// Line 453:     $message = \"Device $device->hostname ($device->device_id) has been added successfully\";",
                "// Line 454: ",
                "// Line 455:     return api_success([$device->attributesToArray()], 'devices', $message);",
                "// vulnerable line: 456: }",
                "// Line 457: ",
                "// Line 458: function del_device(Illuminate\\Http\\Request $request)",
                "// Line 459: {",
                "// Line 460:     // This will add a device using the data passed encoded with json",
                "// Line 461:     $hostname = $request->route('hostname');",
                "// Line 462: ",
                "// Line 463:     if (empty($hostname)) {",
                "// Line 464:         return api_error(400, 'No hostname has been provided to delete');",
                "// vulnerable line: 465: }",
                "// Line 466: ",
                "// Line 467:     // allow deleting by device_id or hostname",
                "// Line 468:     $device_id = ctype_digit($hostname) ? $hostname : getidbyname($hostname);",
                "// Line 469:     $device = null;",
                "// Line 470:     if ($device_id) {",
                "// Line 471:         // save the current details for returning to the client on successful delete",
                "// Line 472:         $device = device_by_id_cache($device_id);",
                "// vulnerable line: 473: }",
                "// Line 474: ",
                "// Line 475:     if (! $device) {",
                "// Line 476:         return api_error(404, \"Device $hostname not found\");",
                "// vulnerable line: 477: }",
                "// Line 478: ",
                "// Line 479:     $response = delete_device($device_id);",
                "// Line 480:     if (empty($response)) {",
                "// Line 481:         // FIXME: Need to provide better diagnostics out of delete_device",
                "// Line 482:         return api_error(500, 'Device deletion failed');",
                "// vulnerable line: 483: }",
                "// Line 484: ",
                "// Line 485:     // deletion succeeded - include old device details in response",
                "// Line 486:     return api_success([$device], 'devices', $response);",
                "// vulnerable line: 487: }",
                "// Line 488: ",
                "// Line 489: function maintenance_device(Illuminate\\Http\\Request $request)",
                "// Line 490: {",
                "// Line 491:     if (empty($request->json())) {",
                "// Line 492:         return api_error(400, 'No information has been provided to set this device into maintenance');",
                "// vulnerable line: 493: }",
                "// Line 494: ",
                "// Line 495:     $hostname = $request->route('hostname');",
                "// Line 496: ",
                "// Line 497:     // use hostname as device_id if it's all digits",
                "// Line 498:     $device = ctype_digit($hostname) ? Device::find($hostname) : Device::findByHostname($hostname);",
                "// Line 499: ",
                "// Line 500:     if (is_null($device)) {",
                "// Line 501:         return api_error(404, \"Device $hostname not found\");",
                "// vulnerable line: 502: }",
                "// Line 503: ",
                "// Line 504:     if (! $request->json('duration')) {",
                "// Line 505:         return api_error(400, 'Duration not provided');",
                "// vulnerable line: 506: }",
                "// Line 507: ",
                "// Line 508:     $notes = $request->json('notes');",
                "// Line 509:     $title = $request->json('title') ?? $device->displayName();",
                "// Line 510:     $alert_schedule = new \\App\\Models\\AlertSchedule([",
                "// Line 511:         'title' => $title,",
                "// Line 512:         'notes' => $notes,",
                "// Line 513:         'recurring' => 0,",
                "// Line 514:     ]);",
                "// Line 515: ",
                "// Line 516:     $start = $request->json('start') ?? \\Carbon\\Carbon::now()->format('Y-m-d H:i:00');",
                "// Line 517:     $alert_schedule->start = $start;",
                "// Line 518: ",
                "// Line 519:     $duration = $request->json('duration');",
                "// Line 520: ",
                "// Line 521:     if (Str::contains($duration, ':')) {",
                "// Line 522:         [$duration_hour, $duration_min] = explode(':', $duration);",
                "// Line 523:         $alert_schedule->end = \\Carbon\\Carbon::createFromFormat('Y-m-d H:i:s', $start)",
                "// Line 524:             ->addHours($duration_hour)->addMinutes($duration_min)",
                "// Line 525:             ->format('Y-m-d H:i:00');",
                "// vulnerable line: 526: }",
                "// Line 527: ",
                "// Line 528:     $alert_schedule->save();",
                "// Line 529:     $alert_schedule->devices()->attach($device);",
                "// Line 530: ",
                "// Line 531:     if ($notes && UserPref::getPref(Auth::user(), 'add_schedule_note_to_device')) {",
                "// Line 532:         $device->notes .= (empty($device->notes) ? '' : PHP_EOL) . date('Y-m-d H:i') . ' Alerts delayed: ' . $notes;",
                "// Line 533:         $device->save();",
                "// vulnerable line: 534: }",
                "// Line 535: ",
                "// Line 536:     if ($request->json('start')) {",
                "// Line 537:         return api_success_noresult(201, \"Device {$device->hostname} ({$device->device_id}) will begin maintenance mode at $start\" . ($duration ? \" for {$duration}h\" : ''));",
                "// Line 538:     } else {",
                "// Line 539:         return api_success_noresult(201, \"Device {$device->hostname} ({$device->device_id}) moved into maintenance mode\" . ($duration ? \" for {$duration}h\" : ''));",
                "// vulnerable line: 540: }",
                "// vulnerable line: 541: }",
                "// Line 542: ",
                "// Line 543: function device_availability(Illuminate\\Http\\Request $request)",
                "// Line 544: {",
                "// Line 545:     // return availability per device",
                "// Line 546: ",
                "// Line 547:     $hostname = $request->route('hostname');",
                "// Line 548: ",
                "// Line 549:     if (empty($hostname)) {",
                "// Line 550:         return api_error(400, 'No hostname has been provided to get availability');",
                "// vulnerable line: 551: }",
                "// Line 552: ",
                "// Line 553:     $device_id = ctype_digit($hostname) ? $hostname : getidbyname($hostname);",
                "// Line 554: ",
                "// Line 555:     return check_device_permission($device_id, function ($device_id) {",
                "// Line 556:         $availabilities = Availability::select('duration', 'availability_perc')",
                "// Line 557:                       ->where('device_id', '=', $device_id)",
                "// Line 558:                       ->orderBy('duration', 'ASC');",
                "// Line 559: ",
                "// Line 560:         return api_success($availabilities->get(), 'availability');",
                "// Line 561:     });",
                "// vulnerable line: 562: }",
                "// Line 563: ",
                "// Line 564: function device_outages(Illuminate\\Http\\Request $request)",
                "// Line 565: {",
                "// Line 566:     // return outages per device",
                "// Line 567: ",
                "// Line 568:     $hostname = $request->route('hostname');",
                "// Line 569: ",
                "// Line 570:     if (empty($hostname)) {",
                "// Line 571:         return api_error(400, 'No hostname has been provided to get availability');",
                "// vulnerable line: 572: }",
                "// Line 573: ",
                "// Line 574:     $device_id = ctype_digit($hostname) ? $hostname : getidbyname($hostname);",
                "// Line 575: ",
                "// Line 576:     return check_device_permission($device_id, function ($device_id) {",
                "// Line 577:         $outages = DeviceOutage::select('going_down', 'up_again')",
                "// Line 578:                    ->where('device_id', '=', $device_id)",
                "// Line 579:                    ->orderBy('going_down', 'DESC');",
                "// Line 580: ",
                "// Line 581:         return api_success($outages->get(), 'outages');",
                "// Line 582:     });",
                "// vulnerable line: 583: }",
                "// Line 584: ",
                "// Line 585: function get_vlans(Illuminate\\Http\\Request $request)",
                "// Line 586: {",
                "// Line 587:     $hostname = $request->route('hostname');",
                "// Line 588: ",
                "// Line 589:     if (empty($hostname)) {",
                "// Line 590:         return api_error(500, 'No hostname has been provided');",
                "// vulnerable line: 591: }",
                "// Line 592: ",
                "// Line 593:     $device_id = ctype_digit($hostname) ? $hostname : getidbyname($hostname);",
                "// Line 594:     $device = null;",
                "// Line 595:     if ($device_id) {",
                "// Line 596:         // save the current details for returning to the client on successful delete",
                "// Line 597:         $device = device_by_id_cache($device_id);",
                "// vulnerable line: 598: }",
                "// Line 599: ",
                "// Line 600:     if (! $device) {",
                "// Line 601:         return api_error(404, \"Device $hostname not found\");",
                "// vulnerable line: 602: }",
                "// Line 603: ",
                "// Line 604:     return check_device_permission($device_id, function ($device_id) {",
                "// Line 605:         $vlans = dbFetchRows('SELECT vlan_vlan,vlan_domain,vlan_name,vlan_type,vlan_mtu FROM vlans WHERE `device_id` = ?', [$device_id]);",
                "// Line 606: ",
                "// Line 607:         return api_success($vlans, 'vlans');",
                "// Line 608:     });",
                "// vulnerable line: 609: }",
                "// Line 610: ",
                "// Line 611: function show_endpoints(Illuminate\\Http\\Request $request, Router $router)",
                "// Line 612: {",
                "// Line 613:     $output = [];",
                "// Line 614:     $base = str_replace('api/v0', '', $request->url());",
                "// Line 615:     foreach ($router->getRoutes() as $route) {",
                "// Line 616:         /** @var \\Illuminate\\Routing\\Route $route */",
                "// Line 617:         if (Str::startsWith($route->getPrefix(), 'api/v0') && $route->getName()) {",
                "// Line 618:             $output[$route->getName()] = $base . $route->uri();",
                "// vulnerable line: 619: }",
                "// vulnerable line: 620: }",
                "// Line 621: ",
                "// Line 622:     ksort($output);",
                "// Line 623: ",
                "// Line 624:     return response()->json($output, 200, [], JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES);",
                "// vulnerable line: 625: }",
                "// Line 626: ",
                "// Line 627: function list_bgp(Illuminate\\Http\\Request $request)",
                "// Line 628: {",
                "// Line 629:     $sql = '';",
                "// Line 630:     $sql_params = [];",
                "// Line 631:     $hostname = $request->get('hostname');",
                "// Line 632:     $asn = $request->get('asn');",
                "// Line 633:     $remote_asn = $request->get('remote_asn');",
                "// Line 634:     $local_address = $request->get('local_address');",
                "// Line 635:     $remote_address = $request->get('remote_address');",
                "// Line 636:     $bgp_descr = $request->get('bgp_descr');",
                "// Line 637:     $bgp_state = $request->get('bgp_state');",
                "// Line 638:     $bgp_adminstate = $request->get('bgp_adminstate');",
                "// Line 639:     $bgp_family = $request->get('bgp_family');",
                "// Line 640:     $device_id = ctype_digit($hostname) ? $hostname : getidbyname($hostname);",
                "// Line 641:     if (is_numeric($device_id)) {",
                "// Line 642:         $sql .= ' AND `devices`.`device_id` = ?';",
                "// Line 643:         $sql_params[] = $device_id;",
                "// vulnerable line: 644: }",
                "// Line 645:     if (! empty($asn)) {",
                "// Line 646:         $sql .= ' AND `devices`.`bgpLocalAs` = ?';",
                "// Line 647:         $sql_params[] = preg_replace('/[^0-9]/', '', $asn);",
                "// vulnerable line: 648: }",
                "// Line 649:     if (! empty($remote_asn)) {",
                "// Line 650:         $sql .= ' AND `bgpPeers`.`bgpPeerRemoteAs` = ?';",
                "// Line 651:         $sql_params[] = preg_replace('/[^0-9]/', '', $remote_asn);",
                "// vulnerable line: 652: }",
                "// Line 653:     if (! empty($local_address)) {",
                "// Line 654:         $sql .= ' AND `bgpPeers`.`bgpLocalAddr` = ?';",
                "// Line 655:         try {",
                "// Line 656:             $sql_params[] = IP::parse($local_address)->uncompressed();",
                "// Line 657:         } catch (InvalidIpException $e) {",
                "// Line 658:             return api_error(400, 'Invalid local address');",
                "// vulnerable line: 659: }",
                "// vulnerable line: 660: }",
                "// Line 661:     if (! empty($remote_address)) {",
                "// Line 662:         $sql .= ' AND `bgpPeers`.`bgpPeerIdentifier` = ?';",
                "// Line 663:         try {",
                "// Line 664:             $sql_params[] = IP::parse($remote_address)->uncompressed();",
                "// Line 665:         } catch (InvalidIpException $e) {",
                "// Line 666:             return api_error(400, 'Invalid remote address');",
                "// vulnerable line: 667: }",
                "// vulnerable line: 668: }",
                "// Line 669:     if (! empty($bgp_descr)) {",
                "// Line 670:         $sql .= ' AND `bgpPeers`.`bgpPeerDescr` LIKE ?';",
                "// Line 671:         $sql_params[] = \"%$bgp_descr%\";",
                "// vulnerable line: 672: }",
                "// Line 673:     if (! empty($bgp_state)) {",
                "// Line 674:         $sql .= ' AND `bgpPeers`.`bgpPeerState` = ?';",
                "// Line 675:         $sql_params[] = $bgp_state;",
                "// vulnerable line: 676: }",
                "// Line 677:     if (! empty($bgp_adminstate)) {",
                "// Line 678:         $sql .= ' AND `bgpPeers`.`bgpPeerAdminStatus` = ?';",
                "// Line 679:         $sql_params[] = $bgp_adminstate;",
                "// vulnerable line: 680: }",
                "// Line 681:     if (! empty($bgp_family)) {",
                "// Line 682:         if ($bgp_family == 4) {",
                "// Line 683:             $sql .= ' AND `bgpPeers`.`bgpLocalAddr` LIKE '%.%'';",
                "// Line 684:         } elseif ($bgp_family == 6) {",
                "// Line 685:             $sql .= ' AND `bgpPeers`.`bgpLocalAddr` LIKE '%:%'';",
                "// vulnerable line: 686: }",
                "// vulnerable line: 687: }",
                "// Line 688: ",
                "// Line 689:     $bgp_sessions = dbFetchRows(\"SELECT `bgpPeers`.* FROM `bgpPeers` LEFT JOIN `devices` ON `bgpPeers`.`device_id` = `devices`.`device_id` WHERE `bgpPeerState` IS NOT NULL AND `bgpPeerState` != '' $sql\", $sql_params);",
                "// Line 690:     $total_bgp_sessions = count($bgp_sessions);",
                "// Line 691:     if (! is_numeric($total_bgp_sessions)) {",
                "// Line 692:         return api_error(500, 'Error retrieving bgpPeers');",
                "// vulnerable line: 693: }",
                "// Line 694: ",
                "// Line 695:     return api_success($bgp_sessions, 'bgp_sessions');",
                "// vulnerable line: 696: }",
                "// Line 697: ",
                "// Line 698: function get_bgp(Illuminate\\Http\\Request $request)",
                "// Line 699: {",
                "// Line 700:     $bgpPeerId = $request->route('id');",
                "// Line 701:     if (! is_numeric($bgpPeerId)) {",
                "// Line 702:         return api_error(400, 'Invalid id has been provided');",
                "// vulnerable line: 703: }",
                "// Line 704: ",
                "// Line 705:     $bgp_session = dbFetchRows(\"SELECT * FROM `bgpPeers` WHERE `bgpPeerState` IS NOT NULL AND `bgpPeerState` != '' AND bgpPeer_id = ?\", [$bgpPeerId]);",
                "// Line 706:     $bgp_session_count = count($bgp_session);",
                "// Line 707:     if (! is_numeric($bgp_session_count)) {",
                "// Line 708:         return api_error(500, 'Error retrieving BGP peer');",
                "// vulnerable line: 709: }",
                "// Line 710:     if ($bgp_session_count == 0) {",
                "// Line 711:         return api_error(404, \"BGP peer $bgpPeerId does not exist\");",
                "// vulnerable line: 712: }",
                "// Line 713: ",
                "// Line 714:     return api_success($bgp_session, 'bgp_session');",
                "// vulnerable line: 715: }",
                "// Line 716: ",
                "// Line 717: function edit_bgp_descr(Illuminate\\Http\\Request $request)",
                "// Line 718: {",
                "// Line 719:     $bgp_descr = $request->json('bgp_descr');",
                "// Line 720:     if (! $bgp_descr) {",
                "// Line 721:         return api_error(500, 'Invalid JSON data');",
                "// vulnerable line: 722: }",
                "// Line 723: ",
                "// Line 724:     //find existing bgp for update",
                "// Line 725:     $bgpPeerId = $request->route('id');",
                "// Line 726:     if (! is_numeric($bgpPeerId)) {",
                "// Line 727:         return api_error(400, 'Invalid id has been provided');",
                "// vulnerable line: 728: }",
                "// Line 729: ",
                "// Line 730:     $peer = \\App\\Models\\BgpPeer::firstWhere('bgpPeer_id', $bgpPeerId);",
                "// Line 731: ",
                "// Line 732:     // update existing bgp",
                "// Line 733:     if ($peer === null) {",
                "// Line 734:         return api_error(404, 'BGP peer ' . $bgpPeerId . ' does not exist');",
                "// vulnerable line: 735: }",
                "// Line 736: ",
                "// Line 737:     $peer->bgpPeerDescr = $bgp_descr;",
                "// Line 738: ",
                "// Line 739:     if ($peer->save()) {",
                "// Line 740:         return api_success_noresult(200, 'BGP description for peer ' . $peer->bgpPeerIdentifier . ' on device ' . $peer->device_id . ' updated to ' . $peer->bgpPeerDescr . '.');",
                "// vulnerable line: 741: }",
                "// Line 742: ",
                "// Line 743:     return api_error(500, 'Failed to update existing bgp');",
                "// vulnerable line: 744: }",
                "// Line 745: ",
                "// Line 746: function list_cbgp(Illuminate\\Http\\Request $request)",
                "// Line 747: {",
                "// Line 748:     $sql = '';",
                "// Line 749:     $sql_params = [];",
                "// Line 750:     $hostname = $request->get('hostname');",
                "// Line 751:     $device_id = ctype_digit($hostname) ? $hostname : getidbyname($hostname);",
                "// Line 752:     if (is_numeric($device_id)) {",
                "// Line 753:         $permission = check_device_permission($device_id);",
                "// Line 754:         if ($permission !== true) {",
                "// Line 755:             return $permission; // permission error",
                "// vulnerable line: 756: }",
                "// Line 757:         $sql = ' AND `devices`.`device_id` = ?';",
                "// Line 758:         $sql_params[] = $device_id;",
                "// vulnerable line: 759: }",
                "// Line 760:     if (! Auth::user()->hasGlobalRead()) {",
                "// Line 761:         $sql .= ' AND `bgpPeers_cbgp`.`device_id` IN (SELECT device_id FROM devices_perms WHERE user_id = ?)';",
                "// Line 762:         $sql_params[] = Auth::id();",
                "// vulnerable line: 763: }",
                "// Line 764: ",
                "// Line 765:     $bgp_counters = dbFetchRows(\"SELECT `bgpPeers_cbgp`.* FROM `bgpPeers_cbgp` LEFT JOIN `devices` ON `bgpPeers_cbgp`.`device_id` = `devices`.`device_id` WHERE `bgpPeers_cbgp`.`device_id` IS NOT NULL $sql\", $sql_params);",
                "// Line 766:     $total_bgp_counters = count($bgp_counters);",
                "// Line 767:     if ($total_bgp_counters == 0) {",
                "// Line 768:         return api_error(404, 'BGP counters does not exist');",
                "// vulnerable line: 769: }",
                "// Line 770: ",
                "// Line 771:     return api_success($bgp_counters, 'bgp_counters');",
                "// vulnerable line: 772: }",
                "// Line 773: ",
                "// Line 774: function list_ospf(Illuminate\\Http\\Request $request)",
                "// Line 775: {",
                "// Line 776:     $sql = '';",
                "// Line 777:     $sql_params = [];",
                "// Line 778:     $hostname = $request->get('hostname');",
                "// Line 779:     $device_id = ctype_digit($hostname) ? $hostname : getidbyname($hostname);",
                "// Line 780:     if (is_numeric($device_id)) {",
                "// Line 781:         $sql = ' AND `device_id`=?';",
                "// Line 782:         $sql_params = [$device_id];",
                "// vulnerable line: 783: }",
                "// Line 784: ",
                "// Line 785:     $ospf_neighbours = dbFetchRows(\"SELECT * FROM ospf_nbrs WHERE `ospfNbrState` IS NOT NULL AND `ospfNbrState` != '' $sql\", $sql_params);",
                "// Line 786:     $total_ospf_neighbours = count($ospf_neighbours);",
                "// Line 787:     if (! is_numeric($total_ospf_neighbours)) {",
                "// Line 788:         return api_error(500, 'Error retrieving ospf_nbrs');",
                "// vulnerable line: 789: }",
                "// Line 790: ",
                "// Line 791:     return api_success($ospf_neighbours, 'ospf_neighbours');",
                "// vulnerable line: 792: }",
                "// Line 793: ",
                "// Line 794: function list_ospf_ports(Illuminate\\Http\\Request $request)",
                "// Line 795: {",
                "// Line 796:     $ospf_ports = OspfPort::hasAccess(Auth::user())",
                "// Line 797:               ->get();",
                "// Line 798:     if ($ospf_ports->isEmpty()) {",
                "// Line 799:         return api_error(404, 'Ospf ports do not exist');",
                "// vulnerable line: 800: }",
                "// Line 801: ",
                "// Line 802:     return api_success($ospf_ports, 'ospf_ports', null, 200, $ospf_ports->count());",
                "// vulnerable line: 803: }",
                "// Line 804: ",
                "// Line 805: function get_graph_by_portgroup(Request $request)",
                "// Line 806: {",
                "// Line 807:     $id = $request->route('id');",
                "// Line 808: ",
                "// Line 809:     if (empty($id)) {",
                "// Line 810:         $group = $request->route('group');",
                "// Line 811:         $ports = get_ports_from_type(explode(',', $group));",
                "// Line 812:         $if_list = implode(',', Arr::pluck($ports, 'port_id'));",
                "// Line 813:     } else {",
                "// Line 814:         $if_list = $id;",
                "// vulnerable line: 815: }",
                "// Line 816: ",
                "// Line 817:     return api_get_graph($request, [",
                "// Line 818:         'type' => 'multiport_bits_separate',",
                "// Line 819:         'id' => $if_list,",
                "// Line 820:     ]);",
                "// vulnerable line: 821: }",
                "// Line 822: ",
                "// Line 823: function get_components(Illuminate\\Http\\Request $request)",
                "// Line 824: {",
                "// Line 825:     $hostname = $request->route('hostname');",
                "// Line 826: ",
                "// Line 827:     // Do some filtering if the user requests.",
                "// Line 828:     $options = [];",
                "// Line 829:     // Add the rest of the options with an equals query",
                "// Line 830:     foreach ($request->all() as $k => $v) {",
                "// Line 831:         $options['filter'][$k] = ['=', $v];",
                "// vulnerable line: 832: }",
                "// Line 833: ",
                "// Line 834:     // We need to specify the label as this is a LIKE query",
                "// Line 835:     if ($request->has('label')) {",
                "// Line 836:         // set a label like filter",
                "// Line 837:         $options['filter']['label'] = ['LIKE', $request->get('label')];",
                "// vulnerable line: 838: }",
                "// Line 839: ",
                "// Line 840:     // use hostname as device_id if it's all digits",
                "// Line 841:     $device_id = ctype_digit($hostname) ? $hostname : getidbyname($hostname);",
                "// Line 842: ",
                "// Line 843:     return check_device_permission($device_id, function ($device_id) use ($options) {",
                "// Line 844:         $COMPONENT = new LibreNMS\\Component();",
                "// Line 845:         $components = $COMPONENT->getComponents($device_id, $options);",
                "// Line 846: ",
                "// Line 847:         return api_success($components[$device_id], 'components');",
                "// Line 848:     });",
                "// vulnerable line: 849: }",
                "// Line 850: ",
                "// Line 851: function add_components(Illuminate\\Http\\Request $request)",
                "// Line 852: {",
                "// Line 853:     $hostname = $request->route('hostname');",
                "// Line 854:     $ctype = $request->route('type');",
                "// Line 855: ",
                "// Line 856:     // use hostname as device_id if it's all digits",
                "// Line 857:     $device_id = ctype_digit($hostname) ? $hostname : getidbyname($hostname);",
                "// Line 858:     $COMPONENT = new LibreNMS\\Component();",
                "// Line 859:     $component = $COMPONENT->createComponent($device_id, $ctype);",
                "// Line 860: ",
                "// Line 861:     return api_success($component, 'components');",
                "// vulnerable line: 862: }",
                "// Line 863: ",
                "// Line 864: function edit_components(Illuminate\\Http\\Request $request)",
                "// Line 865: {",
                "// Line 866:     $hostname = $request->route('hostname');",
                "// Line 867:     $data = json_decode($request->getContent(), true);",
                "// Line 868: ",
                "// Line 869:     // use hostname as device_id if it's all digits",
                "// Line 870:     $device_id = ctype_digit($hostname) ? $hostname : getidbyname($hostname);",
                "// Line 871:     $COMPONENT = new LibreNMS\\Component();",
                "// Line 872: ",
                "// Line 873:     if (! $COMPONENT->setComponentPrefs($device_id, $data)) {",
                "// Line 874:         return api_error(500, 'Components could not be edited.');",
                "// vulnerable line: 875: }",
                "// Line 876: ",
                "// Line 877:     return api_success_noresult(200);",
                "// vulnerable line: 878: }",
                "// Line 879: ",
                "// Line 880: function delete_components(Illuminate\\Http\\Request $request)",
                "// Line 881: {",
                "// Line 882:     $cid = $request->route('component');",
                "// Line 883: ",
                "// Line 884:     $COMPONENT = new LibreNMS\\Component();",
                "// Line 885:     if ($COMPONENT->deleteComponent($cid)) {",
                "// Line 886:         return api_success_noresult(200);",
                "// Line 887:     } else {",
                "// Line 888:         return api_error(500, 'Components could not be deleted.');",
                "// vulnerable line: 889: }",
                "// vulnerable line: 890: }",
                "// Line 891: ",
                "// Line 892: function get_graphs(Illuminate\\Http\\Request $request)",
                "// Line 893: {",
                "// Line 894:     $hostname = $request->route('hostname');",
                "// Line 895: ",
                "// Line 896:     // use hostname as device_id if it's all digits",
                "// Line 897:     $device_id = ctype_digit($hostname) ? $hostname : getidbyname($hostname);",
                "// Line 898: ",
                "// Line 899:     return check_device_permission($device_id, function ($device_id) {",
                "// Line 900:         $graphs = [];",
                "// Line 905:         $graphs[] = [",
                "// Line 906:             'desc' => 'Ping Response',",
                "// Line 907:             'name' => 'device_ping_perf',",
                "// Line 908:         ];",
                "// Line 909:         foreach (dbFetchRows('SELECT * FROM device_graphs WHERE device_id = ? ORDER BY graph', [$device_id]) as $graph) {",
                "// Line 910:             $desc = Config::get(\"graph_types.device.{$graph['graph']}.descr\");",
                "// Line 911:             $graphs[] = [",
                "// Line 912:                 'desc' => $desc,",
                "// Line 913:                 'name' => 'device_' . $graph['graph'],",
                "// Line 914:             ];",
                "// vulnerable line: 915: }",
                "// Line 916: ",
                "// Line 917:         return api_success($graphs, 'graphs');",
                "// Line 918:     });",
                "// vulnerable line: 919: }",
                "// Line 920: ",
                "// Line 921: function trigger_device_discovery(Illuminate\\Http\\Request $request)",
                "// Line 922: {",
                "// Line 923:     // return details of a single device",
                "// Line 924:     $hostname = $request->route('hostname');",
                "// Line 925: ",
                "// Line 926:     // use hostname as device_id if it's all digits",
                "// Line 927:     $device_id = ctype_digit($hostname) ? $hostname : getidbyname($hostname);",
                "// Line 928:     // find device matching the id",
                "// Line 929:     $device = device_by_id_cache($device_id);",
                "// Line 930:     if (! $device) {",
                "// Line 931:         return api_error(404, \"Device $hostname does not exist\");",
                "// vulnerable line: 932: }",
                "// Line 933: ",
                "// Line 934:     $ret = device_discovery_trigger($device_id);",
                "// Line 935: ",
                "// Line 936:     return api_success($ret, 'result');",
                "// vulnerable line: 937: }",
                "// Line 938: ",
                "// Line 939: function list_available_health_graphs(Illuminate\\Http\\Request $request)",
                "// Line 940: {",
                "// Line 941:     $hostname = $request->route('hostname');",
                "// Line 942:     $device_id = ctype_digit($hostname) ? $hostname : getidbyname($hostname);",
                "// Line 943: ",
                "// Line 944:     return check_device_permission($device_id, function ($device_id) use ($request) {",
                "// Line 945:         $input_type = $request->route('type');",
                "// Line 946:         if ($input_type) {",
                "// Line 947:             $type = preg_replace('/^device_/', '', $input_type);",
                "// vulnerable line: 948: }",
                "// Line 949:         $sensor_id = $request->route('sensor_id');",
                "// Line 950:         $graphs = [];",
                "// Line 951: ",
                "// Line 952:         if (isset($type)) {",
                "// Line 953:             if (isset($sensor_id)) {",
                "// Line 954:                 $graphs = dbFetchRows('SELECT * FROM `sensors` WHERE `sensor_id` = ?', [$sensor_id]);",
                "// Line 955:             } else {",
                "// Line 956:                 foreach (dbFetchRows('SELECT `sensor_id`, `sensor_descr` FROM `sensors` WHERE `device_id` = ? AND `sensor_class` = ? AND `sensor_deleted` = 0', [$device_id, $type]) as $graph) {",
                "// Line 957:                     $graphs[] = [",
                "// Line 958:                         'sensor_id' => $graph['sensor_id'],",
                "// Line 959:                         'desc' => $graph['sensor_descr'],",
                "// Line 960:                     ];",
                "// vulnerable line: 961: }",
                "// vulnerable line: 962: }",
                "// Line 963:         } else {",
                "// Line 964:             foreach (dbFetchRows('SELECT `sensor_class` FROM `sensors` WHERE `device_id` = ? AND `sensor_deleted` = 0 GROUP BY `sensor_class`', [$device_id]) as $graph) {",
                "// Line 965:                 $graphs[] = [",
                "// Line 966:                     'desc' => ucfirst($graph['sensor_class']),",
                "// Line 967:                     'name' => 'device_' . $graph['sensor_class'],",
                "// Line 968:                 ];",
                "// vulnerable line: 969: }",
                "// Line 970:             $device = Device::find($device_id);",
                "// Line 971: ",
                "// Line 972:             if ($device) {",
                "// Line 973:                 if ($device->processors()->count() > 0) {",
                "// Line 974:                     array_push($graphs, [",
                "// Line 975:                         'desc' => 'Processors',",
                "// Line 976:                         'name' => 'device_processor',",
                "// Line 977:                     ]);",
                "// vulnerable line: 978: }",
                "// Line 979: ",
                "// Line 980:                 if ($device->storage()->count() > 0) {",
                "// Line 981:                     array_push($graphs, [",
                "// Line 982:                         'desc' => 'Storage',",
                "// Line 983:                         'name' => 'device_storage',",
                "// Line 984:                     ]);",
                "// vulnerable line: 985: }",
                "// Line 986: ",
                "// Line 987:                 if ($device->mempools()->count() > 0) {",
                "// Line 988:                     array_push($graphs, [",
                "// Line 989:                         'desc' => 'Memory Pools',",
                "// Line 990:                         'name' => 'device_mempool',",
                "// Line 991:                     ]);",
                "// vulnerable line: 992: }",
                "// vulnerable line: 993: }",
                "// vulnerable line: 994: }",
                "// Line 995: ",
                "// Line 996:         return api_success($graphs, 'graphs');",
                "// Line 997:     });",
                "// vulnerable line: 998: }",
                "// Line 999: ",
                "// Line 1000: function list_available_wireless_graphs(Illuminate\\Http\\Request $request)",
                "// Line 1001: {",
                "// Line 1002:     $hostname = $request->route('hostname');",
                "// Line 1003:     $device_id = ctype_digit($hostname) ? $hostname : getidbyname($hostname);",
                "// Line 1004: ",
                "// Line 1005:     return check_device_permission($device_id, function ($device_id) use ($request) {",
                "// Line 1006:         $input_type = $request->route('type');",
                "// Line 1007:         if ($input_type) {",
                "// Line 1008:             [, , $type] = explode('_', $input_type);",
                "// vulnerable line: 1009: }",
                "// Line 1010:         $sensor_id = $request->route('sensor_id');",
                "// Line 1011:         $graphs = [];",
                "// Line 1012: ",
                "// Line 1013:         if (isset($type)) {",
                "// Line 1014:             if (isset($sensor_id)) {",
                "// Line 1015:                 $graphs = dbFetchRows('SELECT * FROM `wireless_sensors` WHERE `sensor_id` = ?', [$sensor_id]);",
                "// Line 1016:             } else {",
                "// Line 1017:                 foreach (dbFetchRows('SELECT `sensor_id`, `sensor_descr` FROM `wireless_sensors` WHERE `device_id` = ? AND `sensor_class` = ? AND `sensor_deleted` = 0', [$device_id, $type]) as $graph) {",
                "// Line 1018:                     $graphs[] = [",
                "// Line 1019:                         'sensor_id' => $graph['sensor_id'],",
                "// Line 1020:                         'desc' => $graph['sensor_descr'],",
                "// Line 1021:                     ];",
                "// vulnerable line: 1022: }",
                "// vulnerable line: 1023: }",
                "// Line 1024:         } else {",
                "// Line 1025:             foreach (dbFetchRows('SELECT `sensor_class` FROM `wireless_sensors` WHERE `device_id` = ? AND `sensor_deleted` = 0 GROUP BY `sensor_class`', [$device_id]) as $graph) {",
                "// Line 1026:                 $graphs[] = [",
                "// Line 1027:                     'desc' => ucfirst($graph['sensor_class']),",
                "// Line 1028:                     'name' => 'device_wireless_' . $graph['sensor_class'],",
                "// Line 1029:                 ];",
                "// vulnerable line: 1030: }",
                "// vulnerable line: 1031: }",
                "// Line 1032: ",
                "// Line 1033:         return api_success($graphs, 'graphs');",
                "// Line 1034:     });",
                "// vulnerable line: 1035: }",
                "// Line 1036: ",
                "// Line 1037: /**",
                "// Line 1038:  * @throws \\LibreNMS\\Exceptions\\ApiException",
                "// Line 1039:  */",
                "// Line 1040: function get_port_graphs(Illuminate\\Http\\Request $request): JsonResponse",
                "// Line 1041: {",
                "// Line 1042:     $device = DeviceCache::get($request->route('hostname'));",
                "// Line 1043:     $columns = validate_column_list($request->get('columns'), 'ports', ['ifName']);",
                "// Line 1044: ",
                "// Line 1045:     $ports = $device->ports()->isNotDeleted()->hasAccess(Auth::user())",
                "// Line 1046:         ->select($columns)->orderBy('ifIndex')->get();",
                "// Line 1047: ",
                "// Line 1048:     return api_success($ports, 'ports');",
                "// vulnerable line: 1049: }",
                "// Line 1050: ",
                "// Line 1051: function get_device_ip_addresses(Illuminate\\Http\\Request $request)",
                "// Line 1052: {",
                "// Line 1053:     $hostname = $request->route('hostname');",
                "// Line 1054:     // use hostname as device_id if it's all digits",
                "// Line 1055:     $device_id = ctype_digit($hostname) ? $hostname : getidbyname($hostname);",
                "// Line 1056: ",
                "// Line 1057:     return check_device_permission($device_id, function ($device_id) {",
                "// Line 1058:         $ipv4 = dbFetchRows('SELECT `ipv4_addresses`.* FROM `ipv4_addresses` JOIN `ports` ON `ports`.`port_id`=`ipv4_addresses`.`port_id` WHERE `ports`.`device_id` = ? AND `deleted` = 0', [$device_id]);",
                "// Line 1059:         $ipv6 = dbFetchRows('SELECT `ipv6_addresses`.* FROM `ipv6_addresses` JOIN `ports` ON `ports`.`port_id`=`ipv6_addresses`.`port_id` WHERE `ports`.`device_id` = ? AND `deleted` = 0', [$device_id]);",
                "// Line 1060:         $ip_addresses_count = count(array_merge($ipv4, $ipv6));",
                "// Line 1061:         if ($ip_addresses_count == 0) {",
                "// Line 1062:             return api_error(404, \"Device $device_id does not have any IP addresses\");",
                "// vulnerable line: 1063: }",
                "// Line 1064: ",
                "// Line 1065:         return api_success(array_merge($ipv4, $ipv6), 'addresses');",
                "// Line 1066:     });",
                "// vulnerable line: 1067: }",
                "// Line 1068: ",
                "// Line 1069: function get_port_ip_addresses(Illuminate\\Http\\Request $request)",
                "// Line 1070: {",
                "// Line 1071:     $port_id = $request->route('portid');",
                "// Line 1072: ",
                "// Line 1073:     return check_port_permission($port_id, null, function ($port_id) {",
                "// Line 1074:         $ipv4 = dbFetchRows('SELECT * FROM `ipv4_addresses` WHERE `port_id` = ?', [$port_id]);",
                "// Line 1075:         $ipv6 = dbFetchRows('SELECT * FROM `ipv6_addresses` WHERE `port_id` = ?', [$port_id]);",
                "// Line 1076:         $ip_addresses_count = count(array_merge($ipv4, $ipv6));",
                "// Line 1077:         if ($ip_addresses_count == 0) {",
                "// Line 1078:             return api_error(404, \"Port $port_id does not have any IP addresses\");",
                "// vulnerable line: 1079: }",
                "// Line 1080: ",
                "// Line 1081:         return api_success(array_merge($ipv4, $ipv6), 'addresses');",
                "// Line 1082:     });",
                "// vulnerable line: 1083: }",
                "// Line 1084: ",
                "// Line 1085: function get_network_ip_addresses(Illuminate\\Http\\Request $request)",
                "// Line 1086: {",
                "// Line 1087:     $network_id = $request->route('id');",
                "// Line 1088:     $ipv4 = dbFetchRows('SELECT * FROM `ipv4_addresses` WHERE `ipv4_network_id` = ?', [$network_id]);",
                "// Line 1089:     $ipv6 = dbFetchRows('SELECT * FROM `ipv6_addresses` WHERE `ipv6_network_id` = ?', [$network_id]);",
                "// Line 1090:     $ip_addresses_count = count(array_merge($ipv4, $ipv6));",
                "// Line 1091:     if ($ip_addresses_count == 0) {",
                "// Line 1092:         return api_error(404, \"IP network $network_id does not exist or is empty\");",
                "// vulnerable line: 1093: }",
                "// Line 1094: ",
                "// Line 1095:     return api_success(array_merge($ipv4, $ipv6), 'addresses');",
                "// vulnerable line: 1096: }",
                "// Line 1097: ",
                "// Line 1098: function get_port_info(Illuminate\\Http\\Request $request)",
                "// Line 1099: {",
                "// Line 1100:     $port_id = $request->route('portid');",
                "// Line 1101: ",
                "// Line 1102:     return check_port_permission($port_id, null, function ($port_id) {",
                "// Line 1103:         // use hostname as device_id if it's all digits",
                "// Line 1104:         $port = dbFetchRows('SELECT * FROM `ports` WHERE `port_id` = ?', [$port_id]);",
                "// Line 1105: ",
                "// Line 1106:         return api_success($port, 'port');",
                "// Line 1107:     });",
                "// vulnerable line: 1108: }",
                "// Line 1109: ",
                "// Line 1110: function update_port_description(Illuminate\\Http\\Request $request)",
                "// Line 1111: {",
                "// Line 1112:     $port_id = $request->route('portid');",
                "// Line 1113:     $port = Port::hasAccess(Auth::user())",
                "// Line 1114:         ->where([",
                "// Line 1115:             'port_id' => $port_id,",
                "// Line 1116:         ])->first();",
                "// Line 1117:     if (empty($port)) {",
                "// Line 1118:         return api_error(400, 'Invalid port ID.');",
                "// vulnerable line: 1119: }",
                "// Line 1120: ",
                "// Line 1121:     $data = json_decode($request->getContent(), true);",
                "// Line 1122:     $field = 'description';",
                "// Line 1123:     $description = $data[$field];",
                "// Line 1124: ",
                "// Line 1125:     if (empty($description)) {",
                "// Line 1126:         // from update-ifalias.inc.php:",
                "// Line 1127:         // \"Set to repoll so we avoid using ifDescr on port poll\"",
                "// Line 1128:         $description = 'repoll';",
                "// vulnerable line: 1129: }",
                "// Line 1130: ",
                "// Line 1131:     $port->ifAlias = $description;",
                "// Line 1132:     $port->save();",
                "// Line 1133: ",
                "// Line 1134:     $ifName = $port->ifName;",
                "// Line 1135:     $device = $port->device_id;",
                "// Line 1136: ",
                "// Line 1137:     if ($description == 'repoll') {",
                "// Line 1138:         // No description provided, clear description",
                "// Line 1139:         del_dev_attrib($port, 'ifName:' . $ifName); // \"port\" object has required device_id",
                "// Line 1140:         log_event(\"$ifName Port ifAlias cleared via API\", $device, 'interface', 3, $port_id);",
                "// Line 1141: ",
                "// Line 1142:         return api_success_noresult(200, 'Port description cleared.');",
                "// Line 1143:     } else {",
                "// Line 1144:         // Prevent poller from overwriting new description",
                "// Line 1145:         set_dev_attrib($port, 'ifName:' . $ifName, 1); // see above",
                "// Line 1146:         log_event(\"$ifName Port ifAlias set via API: $description\", $device, 'interface', 3, $port_id);",
                "// Line 1147: ",
                "// Line 1148:         return api_success_noresult(200, 'Port description updated.');",
                "// vulnerable line: 1149: }",
                "// vulnerable line: 1150: }",
                "// Line 1151: ",
                "// Line 1152: function get_port_description(Illuminate\\Http\\Request $request)",
                "// Line 1153: {",
                "// Line 1154:     $port_id = $request->route('portid');",
                "// Line 1155:     $port = Port::hasAccess(Auth::user())",
                "// Line 1156:         ->where([",
                "// Line 1157:             'port_id' => $port_id,",
                "// Line 1158:         ])->first();",
                "// Line 1159:     if (empty($port)) {",
                "// Line 1160:         return api_error(400, 'Invalid port ID.');",
                "// Line 1161:     } else {",
                "// Line 1162:         return api_success($port->ifAlias, 'port_description');",
                "// vulnerable line: 1163: }",
                "// vulnerable line: 1164: }",
                "// Line 1165: ",
                "// Line 1166: /**",
                "// Line 1167:  * @throws \\LibreNMS\\Exceptions\\ApiException",
                "// Line 1168:  */",
                "// Line 1169: function search_ports(Illuminate\\Http\\Request $request): JsonResponse",
                "// Line 1170: {",
                "// Line 1171:     $columns = validate_column_list($request->get('columns'), 'ports', ['device_id', 'port_id', 'ifIndex', 'ifName', 'ifAlias']);",
                "// Line 1172:     $field = $request->route('field');",
                "// Line 1173:     $search = $request->route('search');",
                "// Line 1174: ",
                "// Line 1175:     // if only field is set, swap values",
                "// Line 1176:     if (empty($search)) {",
                "// Line 1177:         [$field, $search] = [$search, $field];",
                "// vulnerable line: 1178: }",
                "// Line 1179:     $fields = validate_column_list($field, 'ports', ['ifAlias', 'ifDescr', 'ifName']);",
                "// Line 1180: ",
                "// Line 1181:     $ports = Port::hasAccess(Auth::user())",
                "// Line 1182:         ->isNotDeleted()",
                "// Line 1183:         ->where(function ($query) use ($fields, $search) {",
                "// Line 1184:             foreach ($fields as $field) {",
                "// Line 1185:                 $query->orWhere($field, 'like', \"%$search%\");",
                "// vulnerable line: 1186: }",
                "// Line 1187:         })",
                "// Line 1188:         ->select($columns)",
                "// Line 1189:         ->orderBy('ifName')",
                "// Line 1190:         ->get();",
                "// Line 1191: ",
                "// Line 1192:     if ($ports->isEmpty()) {",
                "// Line 1193:         return api_error(404, 'No ports found');",
                "// vulnerable line: 1194: }",
                "// Line 1195: ",
                "// Line 1196:     return api_success($ports, 'ports');",
                "// vulnerable line: 1197: }",
                "// Line 1198: ",
                "// Line 1199: /**",
                "// Line 1200:  * @throws \\LibreNMS\\Exceptions\\ApiException",
                "// Line 1201:  */",
                "// Line 1202: function get_all_ports(Illuminate\\Http\\Request $request): JsonResponse",
                "// Line 1203: {",
                "// Line 1204:     $columns = validate_column_list($request->get('columns'), 'ports', ['port_id', 'ifName']);",
                "// Line 1205: ",
                "// Line 1206:     $ports = Port::hasAccess(Auth::user())",
                "// Line 1207:         ->select($columns)",
                "// Line 1208:         ->isNotDeleted()",
                "// Line 1209:         ->get();",
                "// Line 1210: ",
                "// Line 1211:     return api_success($ports, 'ports');",
                "// vulnerable line: 1212: }",
                "// Line 1213: ",
                "// Line 1214: function get_port_stack(Illuminate\\Http\\Request $request)",
                "// Line 1215: {",
                "// Line 1216:     $hostname = $request->route('hostname');",
                "// Line 1217:     // use hostname as device_id if it's all digits",
                "// Line 1218:     $device_id = ctype_digit($hostname) ? $hostname : getidbyname($hostname);",
                "// Line 1219: ",
                "// Line 1220:     return check_device_permission($device_id, function ($device_id) use ($request) {",
                "// Line 1221:         if ($request->get('valid_mappings')) {",
                "// Line 1222:             $mappings = dbFetchRows(\"SELECT * FROM `ports_stack` WHERE (`device_id` = ? AND `ifStackStatus` = 'active' AND (`port_id_high` != '0' AND `port_id_low` != '0')) ORDER BY `port_id_high`\", [$device_id]);",
                "// Line 1223:         } else {",
                "// Line 1224:             $mappings = dbFetchRows(\"SELECT * FROM `ports_stack` WHERE `device_id` = ? AND `ifStackStatus` = 'active' ORDER BY `port_id_high`\", [$device_id]);",
                "// vulnerable line: 1225: }",
                "// Line 1226: ",
                "// Line 1227:         return api_success($mappings, 'mappings');",
                "// Line 1228:     });",
                "// vulnerable line: 1229: }",
                "// Line 1230: ",
                "// Line 1231: function update_device_port_notes(Illuminate\\Http\\Request $request): JsonResponse",
                "// Line 1232: {",
                "// Line 1233:     $portid = $request->route('portid');",
                "// Line 1234: ",
                "// Line 1235:     $hostname = $request->route('hostname');",
                "// Line 1236:     // use hostname as device_id if it's all digits",
                "// Line 1237:     $device_id = ctype_digit($hostname) ? $hostname : getidbyname($hostname);",
                "// Line 1238: ",
                "// Line 1239:     $data = json_decode($request->getContent(), true);",
                "// Line 1240:     $field = 'notes';",
                "// Line 1241:     $content = $data[$field];",
                "// Line 1242:     if (empty($data)) {",
                "// Line 1243:         return api_error(400, 'Port field to patch has not been supplied.');",
                "// vulnerable line: 1244: }",
                "// Line 1245: ",
                "// Line 1246:     if (set_dev_attrib($device_id, 'port_id_notes:' . $portid, $content)) {",
                "// Line 1247:         return api_success_noresult(200, 'Port ' . $field . ' field has been updated');",
                "// Line 1248:     } else {",
                "// Line 1249:         return api_error(500, 'Port ' . $field . ' field failed to be updated');",
                "// vulnerable line: 1250: }",
                "// vulnerable line: 1251: }",
                "// Line 1252: ",
                "// Line 1253: function list_alert_rules(Illuminate\\Http\\Request $request)",
                "// Line 1254: {",
                "// Line 1255:     $id = $request->route('id');",
                "// Line 1256: ",
                "// Line 1257:     $rules = \\App\\Http\\Resources\\AlertRule::collection(",
                "// Line 1258:         \\App\\Models\\AlertRule::when($id, fn ($query) => $query->where('id', $id))",
                "// Line 1259:         ->with(['devices:device_id', 'groups:id', 'locations:id'])->get()",
                "// Line 1260:     );",
                "// Line 1261: ",
                "// Line 1262:     return api_success($rules->toArray($request), 'rules');",
                "// vulnerable line: 1263: }",
                "// Line 1264: ",
                "// Line 1265: /**",
                "// Line 1266:  * @throws \\LibreNMS\\Exceptions\\ApiException",
                "// Line 1267:  */",
                "// Line 1268: function list_alerts(Illuminate\\Http\\Request $request): JsonResponse",
                "// Line 1269: {",
                "// Line 1270:     $id = $request->route('id');",
                "// Line 1271: ",
                "// Line 1272:     $sql = 'SELECT `D`.`hostname`, `A`.*, `R`.`severity` FROM `alerts` AS `A`, `devices` AS `D`, `alert_rules` AS `R` WHERE `D`.`device_id` = `A`.`device_id` AND `A`.`rule_id` = `R`.`id` ';",
                "// Line 1273:     $sql .= 'AND `A`.`state` IN ';",
                "// Line 1274:     if ($request->has('state')) {",
                "// Line 1275:         $param = explode(',', $request->get('state'));",
                "// Line 1276:     } else {",
                "// Line 1277:         $param = [1];",
                "// vulnerable line: 1278: }",
                "// Line 1279:     $sql .= dbGenPlaceholders(count($param));",
                "// Line 1280: ",
                "// Line 1281:     if ($id > 0) {",
                "// Line 1282:         $param[] = $id;",
                "// Line 1283:         $sql .= 'AND `A`.id=?';",
                "// vulnerable line: 1284: }",
                "// Line 1285: ",
                "// Line 1286:     $severity = $request->get('severity');",
                "// Line 1287:     if ($severity) {",
                "// Line 1288:         if (in_array($severity, ['ok', 'warning', 'critical'])) {",
                "// Line 1289:             $param[] = $severity;",
                "// Line 1290:             $sql .= ' AND `R`.severity=?';",
                "// vulnerable line: 1291: }",
                "// vulnerable line: 1292: }",
                "// Line 1293: ",
                "// Line 1294:     $order = 'timestamp desc';",
                "// Line 1295: ",
                "// Line 1296:     $alert_rule = $request->get('alert_rule');",
                "// Line 1297:     if (isset($alert_rule)) {",
                "// Line 1298:         if (is_numeric($alert_rule)) {",
                "// Line 1299:             $param[] = $alert_rule;",
                "// Line 1300:             $sql .= ' AND `R`.id=?';",
                "// vulnerable line: 1301: }",
                "// vulnerable line: 1302: }",
                "// Line 1303: ",
                "// Line 1304:     if ($request->has('order')) {",
                "// Line 1305:         [$sort_column, $sort_order] = explode(' ', $request->get('order'), 2);",
                "// Line 1306:         validate_column_list($sort_column, 'alerts');",
                "// Line 1307:         if (in_array($sort_order, ['asc', 'desc'])) {",
                "// Line 1308:             $order = $request->get('order');",
                "// vulnerable line: 1309: }",
                "// vulnerable line: 1310: }",
                "// Line 1311:     $sql .= ' ORDER BY A.' . $order;",
                "// Line 1312: ",
                "// Line 1313:     $alerts = dbFetchRows($sql, $param);",
                "// Line 1314: ",
                "// Line 1315:     return api_success($alerts, 'alerts');",
                "// vulnerable line: 1316: }",
                "// Line 1317: ",
                "// Line 1318: function add_edit_rule(Illuminate\\Http\\Request $request)",
                "// Line 1319: {",
                "// Line 1320:     $data = json_decode($request->getContent(), true);",
                "// Line 1321:     if (json_last_error() || ! is_array($data)) {",
                "// Line 1322:         return api_error(500, \"We couldn't parse the provided json\");",
                "// vulnerable line: 1323: }",
                "// Line 1324: ",
                "// Line 1325:     $rule_id = $data['rule_id'];",
                "// Line 1326:     $tmp_devices = (array) $data['devices'];",
                "// Line 1327:     $groups = (array) $data['groups'];",
                "// Line 1328:     $locations = (array) $data['locations'];",
                "// Line 1329:     if (empty($tmp_devices) && ! isset($rule_id)) {",
                "// Line 1330:         return api_error(400, 'Missing the devices or global device (-1)');",
                "// vulnerable line: 1331: }",
                "// Line 1332: ",
                "// Line 1333:     $devices = [];",
                "// Line 1334:     foreach ($tmp_devices as $device) {",
                "// Line 1335:         if ($device == '-1') {",
                "// Line 1336:             continue;",
                "// vulnerable line: 1337: }",
                "// Line 1338:         $devices[] = (ctype_digit($device) || is_int($device)) ? $device : getidbyname($device);",
                "// vulnerable line: 1339: }",
                "// Line 1340: ",
                "// Line 1341:     if (isset($data['builder'])) {",
                "// Line 1342:         // accept inline json or json as a string",
                "// Line 1343:         $builder = is_array($data['builder']) ? json_encode($data['builder']) : $data['builder'];",
                "// Line 1344:     } else {",
                "// Line 1345:         $builder = $data['rule'];",
                "// vulnerable line: 1346: }",
                "// Line 1347:     if (empty($builder)) {",
                "// Line 1348:         return api_error(400, 'Missing the alert builder rule');",
                "// vulnerable line: 1349: }",
                "// Line 1350: ",
                "// Line 1351:     $name = $data['name'];",
                "// Line 1352:     if (empty($name)) {",
                "// Line 1353:         return api_error(400, 'Missing the alert rule name');",
                "// vulnerable line: 1354: }",
                "// Line 1355: ",
                "// Line 1356:     $severity = $data['severity'];",
                "// Line 1357:     $sevs = [",
                "// Line 1358:         'ok',",
                "// Line 1359:         'warning',",
                "// Line 1360:         'critical',",
                "// Line 1361:     ];",
                "// Line 1362:     if (! in_array($severity, $sevs)) {",
                "// Line 1363:         return api_error(400, 'Missing the severity');",
                "// vulnerable line: 1364: }",
                "// Line 1365: ",
                "// Line 1366:     $disabled = $data['disabled'];",
                "// Line 1367:     if ($disabled != '0' && $disabled != '1') {",
                "// Line 1368:         $disabled = 0;",
                "// vulnerable line: 1369: }",
                "// Line 1370: ",
                "// Line 1371:     $count = $data['count'];",
                "// Line 1372:     $mute = $data['mute'];",
                "// Line 1373:     $delay = $data['delay'];",
                "// Line 1374:     $interval = $data['interval'];",
                "// Line 1375:     $override_query = $data['override_query'];",
                "// Line 1376:     $adv_query = $data['adv_query'];",
                "// Line 1377:     $notes = $data['notes'];",
                "// Line 1378:     $delay_sec = convert_delay($delay);",
                "// Line 1379:     $interval_sec = convert_delay($interval);",
                "// Line 1380:     if ($mute == 1) {",
                "// Line 1381:         $mute = true;",
                "// Line 1382:     } else {",
                "// Line 1383:         $mute = false;",
                "// vulnerable line: 1384: }",
                "// Line 1385: ",
                "// Line 1386:     $extra = [",
                "// Line 1387:         'mute' => $mute,",
                "// Line 1388:         'count' => $count,",
                "// Line 1389:         'delay' => $delay_sec,",
                "// Line 1390:         'interval' => $interval_sec,",
                "// Line 1391:         'options' => [",
                "// Line 1392:             'override_query' => $override_query,",
                "// Line 1393:         ],",
                "// Line 1394:     ];",
                "// Line 1395:     $extra_json = json_encode($extra);",
                "// Line 1396: ",
                "// Line 1397:     if ($override_query === 'on') {",
                "// Line 1398:         $query = $adv_query;",
                "// Line 1399:     } else {",
                "// Line 1400:         $query = QueryBuilderParser::fromJson($builder)->toSql();",
                "// Line 1401:         if (empty($query)) {",
                "// Line 1402:             return api_error(500, \"We couldn't parse your rule\");",
                "// vulnerable line: 1403: }",
                "// vulnerable line: 1404: }",
                "// Line 1405: ",
                "// Line 1406:     if (! isset($rule_id)) {",
                "// Line 1407:         if (dbFetchCell('SELECT `name` FROM `alert_rules` WHERE `name`=?', [$name]) == $name) {",
                "// Line 1408:             return api_error(500, 'Addition failed : Name has already been used');",
                "// vulnerable line: 1409: }",
                "// Line 1410:     } elseif (dbFetchCell('SELECT name FROM alert_rules WHERE name=? AND id !=? ', [$name, $rule_id]) == $name) {",
                "// Line 1411:         return api_error(500, 'Update failed : Invalid rule id');",
                "// vulnerable line: 1412: }",
                "// Line 1413: ",
                "// Line 1414:     if (is_numeric($rule_id)) {",
                "// Line 1415:         if (! (dbUpdate(['name' => $name, 'builder' => $builder, 'query' => $query, 'severity' => $severity, 'disabled' => $disabled, 'extra' => $extra_json, 'notes' => $notes], 'alert_rules', 'id=?', [$rule_id]) >= 0)) {",
                "// Line 1416:             return api_error(500, 'Failed to update existing alert rule');",
                "// vulnerable line: 1417: }",
                "// Line 1418:     } elseif (! $rule_id = dbInsert(['name' => $name, 'builder' => $builder, 'query' => $query, 'severity' => $severity, 'disabled' => $disabled, 'extra' => $extra_json, 'notes' => $notes], 'alert_rules')) {",
                "// Line 1419:         return api_error(500, 'Failed to create new alert rule');",
                "// vulnerable line: 1420: }",
                "// Line 1421: ",
                "// Line 1422:     dbSyncRelationship('alert_device_map', 'rule_id', $rule_id, 'device_id', $devices);",
                "// Line 1423:     dbSyncRelationship('alert_group_map', 'rule_id', $rule_id, 'group_id', $groups);",
                "// Line 1424:     dbSyncRelationship('alert_location_map', 'rule_id', $rule_id, 'location_id', $locations);",
                "// Line 1425: ",
                "// Line 1426:     return api_success_noresult(200);",
                "// vulnerable line: 1427: }",
                "// Line 1428: ",
                "// Line 1429: function delete_rule(Illuminate\\Http\\Request $request)",
                "// Line 1430: {",
                "// Line 1431:     $rule_id = $request->route('id');",
                "// Line 1432:     if (is_numeric($rule_id)) {",
                "// Line 1433:         if (dbDelete('alert_rules', '`id` =  ? LIMIT 1', [$rule_id])) {",
                "// Line 1434:             return api_success_noresult(200, 'Alert rule has been removed');",
                "// Line 1435:         } else {",
                "// Line 1436:             return api_success_noresult(200, 'No alert rule by that ID');",
                "// vulnerable line: 1437: }",
                "// vulnerable line: 1438: }",
                "// Line 1439: ",
                "// Line 1440:     return api_error(400, 'Invalid rule id has been provided');",
                "// vulnerable line: 1441: }",
                "// Line 1442: ",
                "// Line 1443: function ack_alert(Illuminate\\Http\\Request $request)",
                "// Line 1444: {",
                "// Line 1445:     $alert_id = $request->route('id');",
                "// Line 1446:     $data = json_decode($request->getContent(), true);",
                "// Line 1447: ",
                "// Line 1448:     if (! is_numeric($alert_id)) {",
                "// Line 1449:         return api_error(400, 'Invalid alert has been provided');",
                "// vulnerable line: 1450: }",
                "// Line 1451: ",
                "// Line 1452:     $alert = dbFetchRow('SELECT note, info FROM alerts WHERE id=?', [$alert_id]);",
                "// Line 1453:     $note = $alert['note'];",
                "// Line 1454:     $info = json_decode($alert['info'], true);",
                "// Line 1455:     if (! empty($note)) {",
                "// Line 1456:         $note .= PHP_EOL;",
                "// vulnerable line: 1457: }",
                "// Line 1458:     $note .= date(Config::get('dateformat.long')) . ' - Ack (' . Auth::user()->username . \") {$data['note']}\";",
                "// Line 1459:     $info['until_clear'] = $data['until_clear'];",
                "// Line 1460:     $info = json_encode($info);",
                "// Line 1461: ",
                "// Line 1462:     if (dbUpdate(['state' => 2, 'note' => $note, 'info' => $info], 'alerts', '`id` = ? LIMIT 1', [$alert_id])) {",
                "// Line 1463:         return api_success_noresult(200, 'Alert has been acknowledged');",
                "// Line 1464:     } else {",
                "// Line 1465:         return api_success_noresult(200, 'No Alert by that ID');",
                "// vulnerable line: 1466: }",
                "// vulnerable line: 1467: }",
                "// Line 1468: ",
                "// Line 1469: function unmute_alert(Illuminate\\Http\\Request $request)",
                "// Line 1470: {",
                "// Line 1471:     $alert_id = $request->route('id');",
                "// Line 1472:     $data = json_decode($request->getContent(), true);",
                "// Line 1473: ",
                "// Line 1474:     if (! is_numeric($alert_id)) {",
                "// Line 1475:         return api_error(400, 'Invalid alert has been provided');",
                "// vulnerable line: 1476: }",
                "// Line 1477: ",
                "// Line 1478:     $alert = dbFetchRow('SELECT note, info FROM alerts WHERE id=?', [$alert_id]);",
                "// Line 1479:     $note = $alert['note'];",
                "// Line 1480: ",
                "// Line 1481:     if (! empty($note)) {",
                "// Line 1482:         $note .= PHP_EOL;",
                "// vulnerable line: 1483: }",
                "// Line 1484:     $note .= date(Config::get('dateformat.long')) . ' - Ack (' . Auth::user()->username . \") {$data['note']}\";",
                "// Line 1485: ",
                "// Line 1486:     if (dbUpdate(['state' => 1, 'note' => $note], 'alerts', '`id` = ? LIMIT 1', [$alert_id])) {",
                "// Line 1487:         return api_success_noresult(200, 'Alert has been unmuted');",
                "// Line 1488:     } else {",
                "// Line 1489:         return api_success_noresult(200, 'No alert by that ID');",
                "// vulnerable line: 1490: }",
                "// vulnerable line: 1491: }",
                "// Line 1492: ",
                "// Line 1493: function get_inventory(Illuminate\\Http\\Request $request)",
                "// Line 1494: {",
                "// Line 1495:     $hostname = $request->route('hostname');",
                "// Line 1496:     // use hostname as device_id if it's all digits",
                "// Line 1497:     $device_id = ctype_digit($hostname) ? $hostname : getidbyname($hostname);",
                "// Line 1498: ",
                "// Line 1499:     return check_device_permission($device_id, function ($device_id) use ($request) {",
                "// Line 1500:         $sql = '';",
                "// Line 1501:         $params = [];",
                "// Line 1502:         if ($request->get('entPhysicalClass')) {",
                "// Line 1503:             $sql .= ' AND entPhysicalClass=?';",
                "// Line 1504:             $params[] = $request->get('entPhysicalClass');",
                "// vulnerable line: 1505: }",
                "// Line 1506: ",
                "// Line 1507:         if ($request->get('entPhysicalContainedIn')) {",
                "// Line 1508:             $sql .= ' AND entPhysicalContainedIn=?';",
                "// Line 1509:             $params[] = $request->get('entPhysicalContainedIn');",
                "// Line 1510:         } else {",
                "// Line 1511:             $sql .= ' AND entPhysicalContainedIn=\"0\"';",
                "// vulnerable line: 1512: }",
                "// Line 1513: ",
                "// Line 1514:         if (! is_numeric($device_id)) {",
                "// Line 1515:             return api_error(400, 'Invalid device provided');",
                "// vulnerable line: 1516: }",
                "// Line 1517:         $sql .= ' AND `device_id`=?';",
                "// Line 1518:         $params[] = $device_id;",
                "// Line 1519:         $inventory = dbFetchRows(\"SELECT * FROM `entPhysical` WHERE 1 $sql\", $params);",
                "// Line 1520: ",
                "// Line 1521:         return api_success($inventory, 'inventory');",
                "// Line 1522:     });",
                "// vulnerable line: 1523: }",
                "// Line 1524: ",
                "// Line 1525: function get_inventory_for_device(Illuminate\\Http\\Request $request)",
                "// Line 1526: {",
                "// Line 1527:     $hostname = $request->route('hostname');",
                "// Line 1528:     // use hostname as device_id if it's all digits",
                "// Line 1529:     $device_id = ctype_digit($hostname) ? $hostname : getidbyname($hostname);",
                "// Line 1530: ",
                "// Line 1531:     return check_device_permission($device_id, function ($device_id) {",
                "// Line 1532:         $params = [];",
                "// Line 1533:         $sql = 'SELECT * FROM `entPhysical` WHERE device_id = ?';",
                "// Line 1534:         $params[] = $device_id;",
                "// Line 1535:         $inventory = dbFetchRows($sql, $params);",
                "// Line 1536: ",
                "// Line 1537:         return api_success($inventory, 'inventory');",
                "// Line 1538:     });",
                "// vulnerable line: 1539: }",
                "// Line 1540: ",
                "// Line 1541: function search_oxidized(Illuminate\\Http\\Request $request)",
                "// Line 1542: {",
                "// Line 1543:     $search_in_conf_textbox = $request->route('searchstring');",
                "// Line 1544:     $result = search_oxidized_config($search_in_conf_textbox);",
                "// Line 1545: ",
                "// Line 1546:     if (! $result) {",
                "// Line 1547:         return api_error(404, 'Received no data from Oxidized');",
                "// Line 1548:     } else {",
                "// Line 1549:         return api_success($result, 'nodes');",
                "// vulnerable line: 1550: }",
                "// vulnerable line: 1551: }",
                "// Line 1552: ",
                "// Line 1553: function get_oxidized_config(Illuminate\\Http\\Request $request)",
                "// Line 1554: {",
                "// Line 1555:     $hostname = $request->route('device_name');",
                "// Line 1556:     $node_info = json_decode((new \\App\\ApiClients\\Oxidized())->getContent('/node/show/' . $hostname . '?format=json'), true);",
                "// Line 1557:     $result = json_decode((new \\App\\ApiClients\\Oxidized())->getContent('/node/fetch/' . $node_info['full_name'] . '?format=json'), true);",
                "// Line 1558:     if (! $result) {",
                "// Line 1559:         return api_error(404, 'Received no data from Oxidized');",
                "// Line 1560:     } else {",
                "// Line 1561:         return api_success($result, 'config');",
                "// vulnerable line: 1562: }",
                "// vulnerable line: 1563: }",
                "// Line 1564: ",
                "// Line 1565: function list_oxidized(Illuminate\\Http\\Request $request)",
                "// Line 1566: {",
                "// Line 1567:     $return = [];",
                "// Line 1568:     $devices = Device::query()",
                "// Line 1569:             ->with('attribs')",
                "// Line 1570:              ->where('disabled', 0)",
                "// Line 1571:              ->when($request->route('hostname'), function ($query, $hostname) {",
                "// Line 1572:                  return $query->where('hostname', $hostname);",
                "// Line 1573:              })",
                "// Line 1580:     /** @var Device $device */",
                "// Line 1581:     foreach ($devices as $device) {",
                "// Line 1582:         $output = [",
                "// Line 1583:             'hostname' => $device->hostname,",
                "// Line 1584:             'os' => $device->os,",
                "// Line 1585:             'ip' => $device->ip,",
                "// Line 1586:         ];",
                "// Line 1587:         $custom_ssh_port = $device->getAttrib('override_device_ssh_port');",
                "// Line 1588:         if (! empty($custom_ssh_port)) {",
                "// Line 1589:             $output['ssh_port'] = $custom_ssh_port;",
                "// vulnerable line: 1590: }",
                "// Line 1591:         $custom_telnet_port = $device->getAttrib('override_device_telnet_port');",
                "// Line 1592:         if (! empty($custom_telnet_port)) {",
                "// Line 1593:             $output['telnet_port'] = $custom_telnet_port;",
                "// vulnerable line: 1594: }",
                "// Line 1595:         // Pre-populate the group with the default",
                "// Line 1596:         if (Config::get('oxidized.group_support') === true && ! empty(Config::get('oxidized.default_group'))) {",
                "// Line 1597:             $output['group'] = Config::get('oxidized.default_group');",
                "// vulnerable line: 1598: }",
                "// Line 1599: ",
                "// Line 1600:         foreach (Config::get('oxidized.maps') as $maps_column => $maps) {",
                "// Line 1601:             // Based on Oxidized group support we can apply groups by setting group_support to true",
                "// Line 1602:             if ($maps_column == 'group' && Config::get('oxidized.group_support', true) !== true) {",
                "// Line 1603:                 continue;",
                "// vulnerable line: 1604: }",
                "// Line 1605: ",
                "// Line 1606:             foreach ($maps as $field_type => $fields) {",
                "// Line 1607:                 if ($field_type == 'sysname') {",
                "// Line 1608:                     $value = $device->sysName; // fix typo in previous code forcing users to use sysname instead of sysName",
                "// Line 1609:                 } elseif ($field_type == 'location') {",
                "// Line 1610:                     $value = $device->location->location;",
                "// Line 1611:                 } else {",
                "// Line 1612:                     $value = $device->$field_type;",
                "// vulnerable line: 1613: }",
                "// Line 1614: ",
                "// Line 1615:                 foreach ($fields as $field) {",
                "// Line 1616:                     if (isset($field['regex']) && preg_match($field['regex'] . 'i', $value)) {",
                "// Line 1617:                         $output[$maps_column] = $field['value'] ?? $field[$maps_column];  // compatibility with old format",
                "// Line 1618:                         break;",
                "// Line 1619:                     } elseif (isset($field['match']) && $field['match'] == $value) {",
                "// Line 1620:                         $output[$maps_column] = $field['value'] ?? $field[$maps_column]; // compatibility with old format",
                "// Line 1621:                         break;",
                "// vulnerable line: 1622: }",
                "// vulnerable line: 1623: }",
                "// vulnerable line: 1624: }",
                "// vulnerable line: 1625: }",
                "// Line 1626:         //Exclude groups from being sent to Oxidized",
                "// Line 1627:         if (in_array($output['group'], Config::get('oxidized.ignore_groups'))) {",
                "// Line 1628:             continue;",
                "// vulnerable line: 1629: }",
                "// Line 1630: ",
                "// Line 1631:         $return[] = $output;",
                "// vulnerable line: 1632: }",
                "// Line 1633: ",
                "// Line 1634:     return response()->json($return, 200, [], JSON_PRETTY_PRINT);",
                "// vulnerable line: 1635: }",
                "// Line 1636: ",
                "// Line 1637: function list_bills(Illuminate\\Http\\Request $request)",
                "// Line 1638: {",
                "// Line 1639:     $bills = [];",
                "// Line 1640:     $bill_id = $request->route('bill_id');",
                "// Line 1641:     $bill_ref = $request->get('ref');",
                "// Line 1642:     $bill_custid = $request->get('custid');",
                "// Line 1643:     $period = $request->get('period');",
                "// Line 1644:     $param = [];",
                "// Line 1645:     $sql = '';",
                "// Line 1648:         $sql .= '`bill_custid` = ?';",
                "// Line 1649:         $param[] = $bill_custid;",
                "// Line 1650:     } elseif (! empty($bill_ref)) {",
                "// Line 1651:         $sql .= '`bill_ref` = ?';",
                "// Line 1652:         $param[] = $bill_ref;",
                "// Line 1653:     } elseif (is_numeric($bill_id)) {",
                "// Line 1654:         $sql .= '`bill_id` = ?';",
                "// Line 1655:         $param[] = $bill_id;",
                "// Line 1656:     } else {",
                "// Line 1657:         $sql = '1';",
                "// vulnerable line: 1658: }",
                "// Line 1659:     if (! Auth::user()->hasGlobalRead()) {",
                "// Line 1660:         $sql .= ' AND `bill_id` IN (SELECT `bill_id` FROM `bill_perms` WHERE `user_id` = ?)';",
                "// Line 1661:         $param[] = Auth::id();",
                "// vulnerable line: 1662: }",
                "// Line 1663: ",
                "// Line 1664:     if ($period === 'previous') {",
                "// Line 1665:         $select = 'SELECT bills.bill_autoadded, bills.bill_cdr, bills.bill_custid, bills.bill_day, bills.bill_name,",
                "// Line 1666:             bills.bill_notes, bills.bill_quota, bills.bill_ref, bill_history.*, bill_history.traf_total as total_data,",
                "// Line 1667:             bill_history.traf_in as total_data_in, bill_history.traf_out as total_data_out, bill_history.updated as bill_last_calc",
                "// Line 1668:         ';",
                "// Line 1669:         $query = 'FROM `bills`",
                "// Line 1670:             INNER JOIN (SELECT bill_id, MAX(bill_hist_id) AS bill_hist_id FROM bill_history",
                "// Line 1671:                         WHERE bill_dateto < NOW() AND bill_dateto > subdate(NOW(), 40)",
                "// Line 1672:                         GROUP BY bill_id) qLastBills ON bills.bill_id = qLastBills.bill_id",
                "// Line 1673:             INNER JOIN bill_history ON qLastBills.bill_hist_id = bill_history.bill_hist_id",
                "// Line 1674:         ';",
                "// Line 1675:     } else {",
                "// Line 1676:         $select = \"SELECT bills.*,",
                "// Line 1677:             IF(bills.bill_type = 'cdr', bill_cdr, bill_quota) AS bill_allowed",
                "// Line 1678:         \";",
                "// Line 1679:         $query = \"FROM `bills`",
                "// Line 1680: \";",
                "// vulnerable line: 1681: }",
                "// Line 1682: ",
                "// Line 1683:     foreach (dbFetchRows(\"$select $query WHERE $sql ORDER BY `bill_name`\", $param) as $bill) {",
                "// Line 1684:         $rate_data = $bill;",
                "// Line 1685:         $allowed = '';",
                "// Line 1686:         $used = '';",
                "// Line 1687:         $percent = '';",
                "// Line 1688:         $overuse = '';",
                "// Line 1689: ",
                "// Line 1690:         if (strtolower($bill['bill_type']) == 'cdr') {",
                "// Line 1691:             $allowed = Number::formatSi($bill['bill_cdr'], 2, 3, '') . 'bps';",
                "// Line 1692:             $used = Number::formatSi($rate_data['rate_95th'], 2, 3, '') . 'bps';",
                "// Line 1693:             if ($bill['bill_cdr'] > 0) {",
                "// Line 1694:                 $percent = Number::calculatePercent($rate_data['rate_95th'], $bill['bill_cdr']);",
                "// Line 1695:             } else {",
                "// Line 1696:                 $percent = '-';",
                "// vulnerable line: 1697: }",
                "// Line 1698:             $overuse = $rate_data['rate_95th'] - $bill['bill_cdr'];",
                "// Line 1699:             $overuse = (($overuse <= 0) ? '-' : Number::formatSi($overuse, 2, 3, ''));",
                "// Line 1700:         } elseif (strtolower($bill['bill_type']) == 'quota') {",
                "// Line 1701:             $allowed = Billing::formatBytes($bill['bill_quota']);",
                "// Line 1702:             $used = Billing::formatBytes($rate_data['total_data']);",
                "// Line 1703:             if ($bill['bill_quota'] > 0) {",
                "// Line 1704:                 $percent = Number::calculatePercent($rate_data['total_data'], $bill['bill_quota']);",
                "// Line 1705:             } else {",
                "// Line 1706:                 $percent = '-';",
                "// vulnerable line: 1707: }",
                "// Line 1708:             $overuse = $rate_data['total_data'] - $bill['bill_quota'];",
                "// Line 1709:             $overuse = (($overuse <= 0) ? '-' : Billing::formatBytes($overuse));",
                "// vulnerable line: 1710: }",
                "// Line 1711:         $bill['allowed'] = $allowed;",
                "// Line 1712:         $bill['used'] = $used;",
                "// Line 1713:         $bill['percent'] = $percent;",
                "// Line 1714:         $bill['overuse'] = $overuse;",
                "// Line 1715: ",
                "// Line 1716:         $bill['ports'] = dbFetchRows('SELECT `D`.`device_id`,`P`.`port_id`,`P`.`ifName` FROM `bill_ports` AS `B`, `ports` AS `P`, `devices` AS `D` WHERE `B`.`bill_id` = ? AND `P`.`port_id` = `B`.`port_id` AND `D`.`device_id` = `P`.`device_id`', [$bill['bill_id']]);",
                "// Line 1717: ",
                "// Line 1718:         $bills[] = $bill;",
                "// vulnerable line: 1719: }",
                "// Line 1720: ",
                "// Line 1721:     return api_success($bills, 'bills');",
                "// vulnerable line: 1722: }",
                "// Line 1723: ",
                "// Line 1724: function get_bill_graph(Illuminate\\Http\\Request $request)",
                "// Line 1725: {",
                "// Line 1726:     $bill_id = $request->route('bill_id');",
                "// Line 1727:     $graph_type = $request->route('graph_type');",
                "// Line 1728:     if ($graph_type == 'monthly') {",
                "// Line 1729:         $graph_type = 'historicmonthly';",
                "// vulnerable line: 1730: }",
                "// Line 1731: ",
                "// Line 1732:     $vars = [",
                "// Line 1733:         'type' => \"bill_$graph_type\",",
                "// Line 1734:         'id' => $bill_id,",
                "// Line 1735:     ];",
                "// Line 1736: ",
                "// Line 1737:     return check_bill_permission($bill_id, function () use ($request, $vars) {",
                "// Line 1738:         return api_get_graph($request, $vars);",
                "// Line 1739:     });",
                "// vulnerable line: 1740: }",
                "// Line 1741: ",
                "// Line 1742: function get_bill_graphdata(Illuminate\\Http\\Request $request)",
                "// Line 1743: {",
                "// Line 1744:     $bill_id = $request->route('bill_id');",
                "// Line 1745: ",
                "// Line 1746:     return check_bill_permission($bill_id, function ($bill_id) use ($request) {",
                "// Line 1747:         $graph_type = $request->route('graph_type');",
                "// Line 1748:         if ($graph_type == 'bits') {",
                "// Line 1749:             $from = $request->get('from', time() - 60 * 60 * 24);",
                "// Line 1750:             $to = $request->get('to', time());",
                "// Line 1751:             $reducefactor = $request->get('reducefactor');",
                "// Line 1752: ",
                "// Line 1753:             $graph_data = Billing::getBitsGraphData($bill_id, $from, $to, $reducefactor);",
                "// Line 1754:         } elseif ($graph_type == 'monthly') {",
                "// Line 1755:             $graph_data = Billing::getHistoricTransferGraphData($bill_id);",
                "// vulnerable line: 1756: }",
                "// Line 1757: ",
                "// Line 1758:         if (! isset($graph_data)) {",
                "// Line 1759:             return api_error(400, \"Unsupported graph type $graph_type\");",
                "// Line 1760:         } else {",
                "// Line 1761:             return api_success($graph_data, 'graph_data');",
                "// vulnerable line: 1762: }",
                "// Line 1763:     });",
                "// vulnerable line: 1764: }",
                "// Line 1765: ",
                "// Line 1766: function get_bill_history(Illuminate\\Http\\Request $request)",
                "// Line 1767: {",
                "// Line 1768:     $bill_id = $request->route('bill_id');",
                "// Line 1769: ",
                "// Line 1770:     return check_bill_permission($bill_id, function ($bill_id) {",
                "// Line 1771:         $result = dbFetchRows('SELECT * FROM `bill_history` WHERE `bill_id` = ? ORDER BY `bill_datefrom` DESC LIMIT 24', [$bill_id]);",
                "// Line 1772: ",
                "// Line 1773:         return api_success($result, 'bill_history');",
                "// Line 1774:     });",
                "// vulnerable line: 1775: }",
                "// Line 1776: ",
                "// Line 1777: function get_bill_history_graph(Illuminate\\Http\\Request $request)",
                "// Line 1778: {",
                "// Line 1779:     $bill_id = $request->route('bill_id');",
                "// Line 1780:     $bill_hist_id = $request->route('bill_hist_id');",
                "// Line 1781:     $graph_type = $request->route('graph_type');",
                "// Line 1782: ",
                "// Line 1783:     $vars = [",
                "// Line 1784:         'type' => \"bill_$graph_type\",",
                "// Line 1785:         'id' => $bill_id,",
                "// Line 1793:             break;",
                "// Line 1794: ",
                "// Line 1795:         case 'day':",
                "// Line 1796:         case 'hour':",
                "// Line 1797:             $vars['imgtype'] = $graph_type;",
                "// Line 1798:             $vars['type'] = 'bill_historictransfer';",
                "// Line 1799:             break;",
                "// Line 1800: ",
                "// Line 1801:         default:",
                "// Line 1802:             return api_error(400, \"Unknown Graph Type $graph_type\");",
                "// vulnerable line: 1803: }",
                "// Line 1804: ",
                "// Line 1805:     return check_bill_permission($bill_id, function () use ($request, $vars) {",
                "// Line 1806:         return api_get_graph($request, $vars);",
                "// Line 1807:     });",
                "// vulnerable line: 1808: }",
                "// Line 1809: ",
                "// Line 1810: function get_bill_history_graphdata(Illuminate\\Http\\Request $request)",
                "// Line 1811: {",
                "// Line 1812:     $bill_id = $request->route('bill_id');",
                "// Line 1813: ",
                "// Line 1814:     return check_bill_permission($bill_id, function ($bill_id) use ($request) {",
                "// Line 1815:         $bill_hist_id = $request->route('bill_hist_id');",
                "// Line 1816:         $graph_type = $request->route('graph_type');",
                "// Line 1817: ",
                "// Line 1818:         switch ($graph_type) {",
                "// Line 1819:             case 'bits':",
                "// Line 1820:                 $reducefactor = $request->get('reducefactor');",
                "// Line 1821: ",
                "// Line 1822:                 $graph_data = Billing::getHistoryBitsGraphData($bill_id, $bill_hist_id, $reducefactor);",
                "// Line 1823:                 break;",
                "// Line 1824:             case 'day':",
                "// Line 1825:             case 'hour':",
                "// Line 1826:                 $graph_data = Billing::getBandwidthGraphData($bill_id, $bill_hist_id, null, null, $graph_type);",
                "// Line 1827:                 break;",
                "// vulnerable line: 1828: }",
                "// Line 1829: ",
                "// Line 1830:         return ! isset($graph_data) ?",
                "// Line 1831:                api_error(400, \"Unsupported graph type $graph_type\") :",
                "// Line 1832:                api_success($graph_data, 'graph_data');",
                "// Line 1833:     });",
                "// vulnerable line: 1834: }",
                "// Line 1835: ",
                "// Line 1836: function delete_bill(Illuminate\\Http\\Request $request)",
                "// Line 1837: {",
                "// Line 1838:     $bill_id = $request->route('bill_id');",
                "// Line 1839: ",
                "// Line 1840:     if ($bill_id < 1) {",
                "// Line 1841:         return api_error(400, 'Could not remove bill with id ' . $bill_id . '. Invalid id');",
                "// vulnerable line: 1842: }",
                "// Line 1843: ",
                "// Line 1844:     $res = dbDelete('bills', '`bill_id` =  ? LIMIT 1', [$bill_id]);",
                "// Line 1845:     if ($res == 1) {",
                "// Line 1846:         dbDelete('bill_ports', '`bill_id` =  ? ', [$bill_id]);",
                "// Line 1847:         dbDelete('bill_data', '`bill_id` =  ? ', [$bill_id]);",
                "// Line 1848:         dbDelete('bill_history', '`bill_id` =  ? ', [$bill_id]);",
                "// Line 1849:         dbDelete('bill_history', '`bill_id` =  ? ', [$bill_id]);",
                "// Line 1850:         dbDelete('bill_perms', '`bill_id` =  ? ', [$bill_id]);",
                "// Line 1851: ",
                "// Line 1852:         return api_success_noresult(200, 'Bill has been removed');",
                "// vulnerable line: 1853: }",
                "// Line 1854: ",
                "// Line 1855:     return api_error(400, 'Could not remove bill with id ' . $bill_id);",
                "// vulnerable line: 1856: }",
                "// Line 1857: ",
                "// Line 1858: function check_bill_key_value($bill_key, $bill_value)",
                "// Line 1859: {",
                "// Line 1860:     $bill_types = ['quota', 'cdr'];",
                "// Line 1861: ",
                "// Line 1862:     switch ($bill_key) {",
                "// Line 1863:         case 'bill_type':",
                "// Line 1864:             if (! in_array($bill_value, $bill_types)) {",
                "// Line 1865:                 return api_error(400, \"Invalid value for $bill_key: $bill_value. Allowed: quota,cdr\");",
                "// vulnerable line: 1866: }",
                "// Line 1867:             break;",
                "// Line 1868:         case 'bill_cdr':",
                "// Line 1869:             if (! is_numeric($bill_value)) {",
                "// Line 1870:                 return api_error(400, \"Invalid value for $bill_key. Must be numeric.\");",
                "// vulnerable line: 1871: }",
                "// Line 1872:             break;",
                "// Line 1873:         case 'bill_day':",
                "// Line 1874:             if ($bill_value < 1 || $bill_value > 31) {",
                "// Line 1875:                 return api_error(400, \"Invalid value for $bill_key. range: 1-31\");",
                "// vulnerable line: 1876: }",
                "// Line 1877:             break;",
                "// Line 1878:         case 'bill_quota':",
                "// Line 1879:             if (! is_numeric($bill_value)) {",
                "// Line 1880:                 return api_error(400, \"Invalid value for $bill_key. Must be numeric\");",
                "// vulnerable line: 1881: }",
                "// Line 1882:             break;",
                "// Line 1883:         default:",
                "// vulnerable line: 1884: }",
                "// Line 1885: ",
                "// Line 1886:     return true;",
                "// vulnerable line: 1887: }",
                "// Line 1888: ",
                "// Line 1889: function create_edit_bill(Illuminate\\Http\\Request $request)",
                "// Line 1890: {",
                "// Line 1891:     $data = json_decode($request->getContent(), true);",
                "// Line 1892:     if (! $data) {",
                "// Line 1893:         return api_error(500, 'Invalid JSON data');",
                "// vulnerable line: 1894: }",
                "// Line 1895:     //check ports",
                "// Line 1896:     $ports_add = null;",
                "// Line 1897:     if (array_key_exists('ports', $data)) {",
                "// Line 1898:         $ports_add = [];",
                "// Line 1899:         $ports = $data['ports'];",
                "// Line 1900:         foreach ($ports as $port_id) {",
                "// Line 1901:             $result = dbFetchRows('SELECT port_id FROM `ports` WHERE `port_id` = ?  LIMIT 1', [$port_id]);",
                "// Line 1902:             $result = $result[0];",
                "// Line 1903:             if (! is_array($result) || ! array_key_exists('port_id', $result)) {",
                "// Line 1904:                 return api_error(500, 'Port ' . $port_id . ' does not exists');",
                "// vulnerable line: 1905: }",
                "// Line 1906:             $ports_add[] = $port_id;",
                "// vulnerable line: 1907: }",
                "// vulnerable line: 1908: }",
                "// Line 1909: ",
                "// Line 1910:     $bill = [];",
                "// Line 1911:     //find existing bill for update",
                "// Line 1912:     $bill_id = (int) $data['bill_id'];",
                "// Line 1913:     $bills = dbFetchRows(\"SELECT * FROM `bills` WHERE `bill_id` = $bill_id LIMIT 1\");",
                "// Line 1914: ",
                "// Line 1915:     // update existing bill",
                "// Line 1916:     if (is_array($bills) && count($bills) == 1) {",
                "// Line 1917:         $bill = $bills[0];",
                "// Line 1918: ",
                "// Line 1919:         foreach ($data as $bill_key => $bill_value) {",
                "// Line 1920:             $res = check_bill_key_value($bill_key, $bill_value);",
                "// Line 1921:             if ($res === true) {",
                "// Line 1922:                 $bill[$bill_key] = $bill_value;",
                "// Line 1923:             } else {",
                "// Line 1924:                 return $res;",
                "// vulnerable line: 1925: }",
                "// vulnerable line: 1926: }",
                "// Line 1927:         $update_data = [",
                "// Line 1928:             'bill_name' => $bill['bill_name'],",
                "// Line 1929:             'bill_type' => $bill['bill_type'],",
                "// Line 1930:             'bill_cdr' => $bill['bill_cdr'],",
                "// Line 1931:             'bill_day' => $bill['bill_day'],",
                "// Line 1932:             'bill_quota' => $bill['bill_quota'],",
                "// Line 1933:             'bill_custid' => $bill['bill_custid'],",
                "// Line 1934:             'bill_ref' => $bill['bill_ref'],",
                "// Line 1935:             'bill_notes' => $bill['bill_notes'],",
                "// Line 1936:             'dir_95th' => $bill['dir_95th'],",
                "// Line 1937:         ];",
                "// Line 1938:         $update = dbUpdate($update_data, 'bills', 'bill_id=?', [$bill_id]);",
                "// Line 1939:         if ($update === false || $update < 0) {",
                "// Line 1940:             return api_error(500, 'Failed to update existing bill');",
                "// vulnerable line: 1941: }",
                "// Line 1942:     } else {",
                "// Line 1943:         // create new bill",
                "// Line 1944:         if (array_key_exists('bill_id', $data)) {",
                "// Line 1945:             return api_error(500, 'Argument bill_id is not allowed on bill create (auto assigned)');",
                "// vulnerable line: 1946: }",
                "// Line 1947: ",
                "// Line 1948:         $bill_keys = [",
                "// Line 1949:             'bill_name',",
                "// Line 1950:             'bill_type',",
                "// Line 1951:             'bill_cdr',",
                "// Line 1952:             'bill_day',",
                "// Line 1953:             'bill_quota',",
                "// Line 1954:             'bill_custid',",
                "// Line 1955:             'bill_ref',",
                "// Line 1956:             'bill_notes',",
                "// Line 1957:             'dir_95th',",
                "// Line 1958:         ];",
                "// Line 1959: ",
                "// Line 1960:         if ($data['bill_type'] == 'quota') {",
                "// Line 1961:             $data['bill_cdr'] = 0;",
                "// vulnerable line: 1962: }",
                "// Line 1963:         if ($data['bill_type'] == 'cdr') {",
                "// Line 1964:             $data['bill_quota'] = 0;",
                "// vulnerable line: 1965: }",
                "// Line 1966: ",
                "// Line 1967:         $missing_keys = '';",
                "// Line 1968:         $missing = array_diff_key(array_flip($bill_keys), $data);",
                "// Line 1969:         if (count($missing) > 0) {",
                "// Line 1970:             foreach ($missing as $missing_key => $dummy) {",
                "// Line 1971:                 $missing_keys .= \" $missing_key\";",
                "// vulnerable line: 1972: }",
                "// Line 1973: ",
                "// Line 1974:             return api_error(500, 'Missing parameters: ' . $missing_keys);",
                "// vulnerable line: 1975: }",
                "// Line 1976: ",
                "// Line 1977:         foreach ($bill_keys as $bill_key) {",
                "// Line 1978:             $res = check_bill_key_value($bill_key, $data[$bill_key]);",
                "// Line 1979:             if ($res === true) {",
                "// Line 1980:                 $bill[$bill_key] = $data[$bill_key];",
                "// Line 1981:             } else {",
                "// Line 1982:                 return $res;",
                "// vulnerable line: 1983: }",
                "// vulnerable line: 1984: }",
                "// Line 1985: ",
                "// Line 1986:         $bill_id = dbInsert(",
                "// Line 1987:             [",
                "// Line 1988:                 'bill_name' => $bill['bill_name'],",
                "// Line 1989:                 'bill_type' => $bill['bill_type'],",
                "// Line 1990:                 'bill_cdr' => $bill['bill_cdr'],",
                "// Line 1991:                 'bill_day' => $bill['bill_day'],",
                "// Line 1992:                 'bill_quota' => $bill['bill_quota'],",
                "// Line 1993:                 'bill_custid' => $bill['bill_custid'],",
                "// Line 1994:                 'bill_ref' => $bill['bill_ref'],",
                "// Line 1995:                 'bill_notes' => $bill['bill_notes'],",
                "// Line 1996:                 'dir_95th' => $bill['dir_95th'],",
                "// Line 1997:             ],",
                "// Line 1998:             'bills'",
                "// Line 1999:         );",
                "// Line 2000: ",
                "// Line 2001:         if ($bill_id === null) {",
                "// Line 2002:             return api_error(500, 'Failed to create new bill');",
                "// vulnerable line: 2003: }",
                "// vulnerable line: 2004: }",
                "// Line 2005: ",
                "// Line 2006:     // set previously checked ports",
                "// Line 2007:     if (is_array($ports_add)) {",
                "// Line 2008:         dbDelete('bill_ports', \"`bill_id` =  $bill_id\");",
                "// Line 2009:         if (count($ports_add) > 0) {",
                "// Line 2010:             foreach ($ports_add as $port_id) {",
                "// Line 2011:                 dbInsert(['bill_id' => $bill_id, 'port_id' => $port_id, 'bill_port_autoadded' => 0], 'bill_ports');",
                "// vulnerable line: 2012: }",
                "// vulnerable line: 2013: }",
                "// vulnerable line: 2014: }",
                "// Line 2015: ",
                "// Line 2016:     return api_success($bill_id, 'bill_id');",
                "// vulnerable line: 2017: }",
                "// Line 2018: ",
                "// Line 2019: function update_device(Illuminate\\Http\\Request $request)",
                "// Line 2020: {",
                "// Line 2021:     $hostname = $request->route('hostname');",
                "// Line 2022:     // use hostname as device_id if it's all digits",
                "// Line 2023:     $device = ctype_digit($hostname) ? Device::find($hostname) : Device::findByHostname($hostname);",
                "// Line 2024: ",
                "// Line 2025:     if (is_null($device)) {",
                "// Line 2026:         return api_error(404, \"Device $hostname not found\");",
                "// vulnerable line: 2027: }",
                "// Line 2028: ",
                "// Line 2029:     $data = json_decode($request->getContent(), true);",
                "// Line 2030:     $bad_fields = ['device_id', 'hostname'];",
                "// Line 2031:     if (empty($data['field'])) {",
                "// Line 2032:         return api_error(400, 'Device field to patch has not been supplied');",
                "// Line 2033:     } elseif (in_array($data['field'], $bad_fields)) {",
                "// Line 2034:         return api_error(500, 'Device field is not allowed to be updated');",
                "// vulnerable line: 2035: }",
                "// Line 2036: ",
                "// Line 2037:     if (is_array($data['field']) && is_array($data['data'])) {",
                "// Line 2038:         foreach ($data['field'] as $tmp_field) {",
                "// Line 2039:             if (in_array($tmp_field, $bad_fields)) {",
                "// Line 2040:                 return api_error(500, 'Device field is not allowed to be updated');",
                "// vulnerable line: 2041: }",
                "// vulnerable line: 2042: }",
                "// Line 2043:         if (count($data['field']) == count($data['data'])) {",
                "// Line 2044:             $update = [];",
                "// Line 2045:             for ($x = 0; $x < count($data['field']); $x++) {",
                "// Line 2046:                 $field = $data['field'][$x];",
                "// Line 2047:                 $field_data = $data['data'][$x];",
                "// Line 2048: ",
                "// Line 2049:                 if ($field == 'location') {",
                "// Line 2050:                     $field = 'location_id';",
                "// Line 2051:                     $field_data = \\App\\Models\\Location::firstOrCreate(['location' => $field_data])->id;",
                "// vulnerable line: 2052: }",
                "// Line 2053: ",
                "// Line 2054:                 $update[$field] = $field_data;",
                "// vulnerable line: 2055: }",
                "// Line 2056:             if ($device->fill($update)->save()) {",
                "// Line 2057:                 return api_success_noresult(200, 'Device fields have been updated');",
                "// Line 2058:             } else {",
                "// Line 2059:                 return api_error(500, 'Device fields failed to be updated');",
                "// vulnerable line: 2060: }",
                "// Line 2061:         } else {",
                "// Line 2062:             return api_error(500, 'Device fields failed to be updated as the number of fields (' . count($data['field']) . ') does not match the supplied data (' . count($data['data']) . ')');",
                "// vulnerable line: 2063: }",
                "// Line 2064:     } elseif ($device->fill([$data['field'] => $data['data']])->save()) {",
                "// Line 2065:         return api_success_noresult(200, 'Device ' . $data['field'] . ' field has been updated');",
                "// Line 2066:     } else {",
                "// Line 2067:         return api_error(500, 'Device ' . $data['field'] . ' field failed to be updated');",
                "// vulnerable line: 2068: }",
                "// vulnerable line: 2069: }",
                "// Line 2070: ",
                "// Line 2071: function rename_device(Illuminate\\Http\\Request $request)",
                "// Line 2072: {",
                "// Line 2073:     $hostname = $request->route('hostname');",
                "// Line 2074:     $device_id = ctype_digit($hostname) ? $hostname : getidbyname($hostname);",
                "// Line 2075:     $new_hostname = $request->route('new_hostname');",
                "// Line 2076:     $new_device = getidbyname($new_hostname);",
                "// Line 2077: ",
                "// Line 2078:     if (empty($new_hostname)) {",
                "// Line 2079:         return api_error(500, 'Missing new hostname');",
                "// Line 2080:     } elseif ($new_device) {",
                "// Line 2081:         return api_error(500, 'Device failed to rename, new hostname already exists');",
                "// Line 2082:     } else {",
                "// Line 2083:         if (renamehost($device_id, $new_hostname, 'api') == '') {",
                "// Line 2084:             return api_success_noresult(200, 'Device has been renamed');",
                "// Line 2085:         } else {",
                "// Line 2086:             return api_error(500, 'Device failed to be renamed');",
                "// vulnerable line: 2087: }",
                "// vulnerable line: 2088: }",
                "// vulnerable line: 2089: }",
                "// Line 2090: ",
                "// Line 2091: function add_port_group(Illuminate\\Http\\Request $request)",
                "// Line 2092: {",
                "// Line 2093:     $data = json_decode($request->getContent(), true);",
                "// Line 2094:     if (json_last_error() || ! is_array($data)) {",
                "// Line 2095:         return api_error(400, \"We couldn't parse the provided json. \" . json_last_error_msg());",
                "// vulnerable line: 2096: }",
                "// Line 2097: ",
                "// Line 2098:     $rules = [",
                "// Line 2099:         'name' => 'required|string|unique:port_groups',",
                "// Line 2100:     ];",
                "// Line 2101: ",
                "// Line 2102:     $v = Validator::make($data, $rules);",
                "// Line 2103:     if ($v->fails()) {",
                "// Line 2104:         return api_error(422, $v->messages());",
                "// vulnerable line: 2105: }",
                "// Line 2106: ",
                "// Line 2107:     $portGroup = PortGroup::make(['name' => $data['name'], 'desc' => $data['desc']]);",
                "// Line 2108:     $portGroup->save();",
                "// Line 2109: ",
                "// Line 2110:     return api_success($portGroup->id, 'id', 'Port group ' . $portGroup->name . ' created', 201);",
                "// vulnerable line: 2111: }",
                "// Line 2112: ",
                "// Line 2113: function get_port_groups(Illuminate\\Http\\Request $request)",
                "// Line 2114: {",
                "// Line 2115:     $query = PortGroup::query();",
                "// Line 2116: ",
                "// Line 2117:     $groups = $query->orderBy('name')->get();",
                "// Line 2118: ",
                "// Line 2119:     if ($groups->isEmpty()) {",
                "// Line 2120:         return api_error(404, 'No port groups found');",
                "// vulnerable line: 2121: }",
                "// Line 2122: ",
                "// Line 2123:     return api_success($groups->makeHidden('pivot')->toArray(), 'groups', 'Found ' . $groups->count() . ' port groups');",
                "// vulnerable line: 2124: }",
                "// Line 2125: ",
                "// Line 2126: function get_ports_by_group(Illuminate\\Http\\Request $request)",
                "// Line 2127: {",
                "// Line 2128:     $name = $request->route('name');",
                "// Line 2129:     if (! $name) {",
                "// Line 2130:         return api_error(400, 'No port group name provided');",
                "// vulnerable line: 2131: }",
                "// Line 2132: ",
                "// Line 2133:     $port_group = ctype_digit($name) ? PortGroup::find($name) : PortGroup::where('name', $name)->first();",
                "// Line 2134: ",
                "// Line 2135:     if (empty($port_group)) {",
                "// Line 2136:         return api_error(404, 'Port group not found');",
                "// vulnerable line: 2137: }",
                "// Line 2138: ",
                "// Line 2139:     $ports = $port_group->ports()->get($request->get('full') ? ['*'] : ['ports.port_id']);",
                "// Line 2140: ",
                "// Line 2141:     if ($ports->isEmpty()) {",
                "// Line 2142:         return api_error(404, 'No ports found in group ' . $name);",
                "// vulnerable line: 2143: }",
                "// Line 2144: ",
                "// Line 2145:     return api_success($ports->makeHidden('pivot')->toArray(), 'ports');",
                "// vulnerable line: 2146: }",
                "// Line 2147: ",
                "// Line 2148: function assign_port_group(Illuminate\\Http\\Request $request)",
                "// Line 2149: {",
                "// Line 2150:     $port_group_id = $request->route('port_group_id');",
                "// Line 2151:     $data = json_decode($request->getContent(), true);",
                "// Line 2152:     $port_id_list = $data['port_ids'];",
                "// Line 2153: ",
                "// Line 2154:     if (json_last_error() || ! is_array($data)) {",
                "// Line 2155:         return api_error(400, \"We couldn't parse the provided json. \" . json_last_error_msg());",
                "// vulnerable line: 2156: }",
                "// Line 2157: ",
                "// Line 2158:     if (! isset($port_id_list)) {",
                "// Line 2159:         return api_error(400, \"Missing data field 'port_ids' \" . json_last_error_msg());",
                "// vulnerable line: 2160: }",
                "// Line 2161: ",
                "// Line 2162:     $port_group = PortGroup::find($port_group_id);",
                "// Line 2163:     if (! isset($port_group)) {",
                "// Line 2164:         return api_error(404, 'Port Group ID ' . $port_group_id . ' not found');",
                "// vulnerable line: 2165: }",
                "// Line 2166: ",
                "// Line 2167:     $port_group->ports()->attach($port_id_list);",
                "// Line 2168: ",
                "// Line 2169:     return api_success(200, 'Port Ids ' . implode(', ', $port_id_list) . ' have been added to Port Group Id ' . $port_group_id);",
                "// vulnerable line: 2170: }",
                "// Line 2171: ",
                "// Line 2172: function remove_port_group(Illuminate\\Http\\Request $request)",
                "// Line 2173: {",
                "// Line 2174:     $port_group_id = $request->route('port_group_id');",
                "// Line 2175:     $data = json_decode($request->getContent(), true);",
                "// Line 2176:     $port_id_list = $data['port_ids'];",
                "// Line 2177: ",
                "// Line 2178:     if (json_last_error() || ! is_array($data)) {",
                "// Line 2179:         return api_error(400, \"We couldn't parse the provided json. \" . json_last_error_msg());",
                "// vulnerable line: 2180: }",
                "// Line 2181: ",
                "// Line 2182:     if (! isset($port_id_list)) {",
                "// Line 2183:         return api_error(400, \"Missing data field 'port_ids' \" . json_last_error_msg());",
                "// vulnerable line: 2184: }",
                "// Line 2185: ",
                "// Line 2186:     $port_group = PortGroup::find($port_group_id);",
                "// Line 2187:     if (! isset($port_group)) {",
                "// Line 2188:         return api_error(404, 'Port Group ID ' . $port_group_id . ' not found');",
                "// vulnerable line: 2189: }",
                "// Line 2190: ",
                "// Line 2191:     $port_group->ports()->detach($port_id_list);",
                "// Line 2192: ",
                "// Line 2193:     return api_success(200, 'Port Ids ' . implode(', ', $port_id_list) . ' have been removed from Port Group Id ' . $port_group_id);",
                "// vulnerable line: 2194: }",
                "// Line 2195: ",
                "// Line 2196: function add_device_group(Illuminate\\Http\\Request $request)",
                "// Line 2197: {",
                "// Line 2198:     $data = json_decode($request->getContent(), true);",
                "// Line 2199:     if (json_last_error() || ! is_array($data)) {",
                "// Line 2200:         return api_error(400, \"We couldn't parse the provided json. \" . json_last_error_msg());",
                "// vulnerable line: 2201: }",
                "// Line 2202: ",
                "// Line 2203:     $rules = [",
                "// Line 2204:         'name' => 'required|string|unique:device_groups',",
                "// Line 2205:         'type' => 'required|in:dynamic,static',",
                "// Line 2206:         'devices' => 'array|required_if:type,static',",
                "// Line 2207:         'devices.*' => 'integer',",
                "// Line 2208:         'rules' => 'json|required_if:type,dynamic',",
                "// Line 2209:     ];",
                "// Line 2210: ",
                "// Line 2211:     $v = Validator::make($data, $rules);",
                "// Line 2212:     if ($v->fails()) {",
                "// Line 2213:         return api_error(422, $v->messages());",
                "// vulnerable line: 2214: }",
                "// Line 2215: ",
                "// Line 2216:     if (! empty($data['rules'])) {",
                "// Line 2217:         // Only use the rules if they are able to be parsed by the QueryBuilder",
                "// Line 2218:         $query = QueryBuilderParser::fromJson($data['rules'])->toSql();",
                "// Line 2219:         if (empty($query)) {",
                "// Line 2220:             return api_error(500, \"We couldn't parse your rule\");",
                "// vulnerable line: 2221: }",
                "// vulnerable line: 2222: }",
                "// Line 2223: ",
                "// Line 2224:     $deviceGroup = DeviceGroup::make(['name' => $data['name'], 'type' => $data['type'], 'desc' => $data['desc']]);",
                "// Line 2225:     if ($data['type'] == 'dynamic') {",
                "// Line 2226:         $deviceGroup->rules = json_decode($data['rules']);",
                "// vulnerable line: 2227: }",
                "// Line 2228:     $deviceGroup->save();",
                "// Line 2229: ",
                "// Line 2230:     if ($data['type'] == 'static') {",
                "// Line 2231:         $deviceGroup->devices()->sync($data['devices']);",
                "// vulnerable line: 2232: }",
                "// Line 2233: ",
                "// Line 2234:     return api_success($deviceGroup->id, 'id', 'Device group ' . $deviceGroup->name . ' created', 201);",
                "// vulnerable line: 2235: }",
                "// Line 2236: ",
                "// Line 2237: function update_device_group(Illuminate\\Http\\Request $request)",
                "// Line 2238: {",
                "// Line 2239:     $data = json_decode($request->getContent(), true);",
                "// Line 2240:     if (json_last_error() || ! is_array($data)) {",
                "// Line 2241:         return api_error(400, \"We couldn't parse the provided json. \" . json_last_error_msg());",
                "// vulnerable line: 2242: }",
                "// Line 2243: ",
                "// Line 2244:     $name = $request->route('name');",
                "// Line 2245:     if (! $name) {",
                "// Line 2246:         return api_error(400, 'No device group name provided');",
                "// vulnerable line: 2247: }",
                "// Line 2248: ",
                "// Line 2249:     $deviceGroup = ctype_digit($name) ? DeviceGroup::find($name) : DeviceGroup::where('name', $name)->first();",
                "// Line 2250: ",
                "// Line 2251:     if (! $deviceGroup) {",
                "// Line 2252:         return api_error(404, \"Device group $name not found\");",
                "// vulnerable line: 2253: }",
                "// Line 2254: ",
                "// Line 2255:     $rules = [",
                "// Line 2256:         'name' => 'sometimes|string|unique:device_groups',",
                "// Line 2257:         'desc' => 'sometimes|string',",
                "// Line 2258:         'type' => 'sometimes|in:dynamic,static',",
                "// Line 2259:         'devices' => 'array|required_if:type,static',",
                "// Line 2260:         'devices.*' => 'integer',",
                "// Line 2261:         'rules' => 'json|required_if:type,dynamic',",
                "// Line 2262:     ];",
                "// Line 2263: ",
                "// Line 2264:     $v = Validator::make($data, $rules);",
                "// Line 2265:     if ($v->fails()) {",
                "// Line 2266:         return api_error(422, $v->messages());",
                "// vulnerable line: 2267: }",
                "// Line 2268: ",
                "// Line 2269:     if (! empty($data['rules'])) {",
                "// Line 2270:         // Only use the rules if they are able to be parsed by the QueryBuilder",
                "// Line 2271:         $query = QueryBuilderParser::fromJson($data['rules'])->toSql();",
                "// Line 2272:         if (empty($query)) {",
                "// Line 2273:             return api_error(500, \"We couldn't parse your rule\");",
                "// vulnerable line: 2274: }",
                "// vulnerable line: 2275: }",
                "// Line 2276: ",
                "// Line 2277:     $validatedData = $v->safe()->only(['name', 'desc', 'type']);",
                "// Line 2278:     $deviceGroup->fill($validatedData);",
                "// Line 2279: ",
                "// Line 2280:     if ($deviceGroup->type == 'static' && array_key_exists('devices', $data)) {",
                "// Line 2281:         $deviceGroup->devices()->sync($data['devices']);",
                "// vulnerable line: 2282: }",
                "// Line 2283: ",
                "// Line 2284:     if ($deviceGroup->type == 'dynamic' && ! empty($data['rules'])) {",
                "// Line 2285:         $deviceGroup->rules = json_decode($data['rules']);",
                "// vulnerable line: 2286: }",
                "// Line 2287: ",
                "// Line 2288:     try {",
                "// Line 2289:         $deviceGroup->save();",
                "// Line 2290:     } catch (\\Illuminate\\Database\\QueryException $e) {",
                "// Line 2291:         return api_error(500, 'Failed to save changes device group');",
                "// vulnerable line: 2292: }",
                "// Line 2293: ",
                "// Line 2294:     return api_success_noresult(200, \"Device group $name updated\");",
                "// vulnerable line: 2295: }",
                "// Line 2296: ",
                "// Line 2297: function delete_device_group(Illuminate\\Http\\Request $request)",
                "// Line 2298: {",
                "// Line 2299:     $name = $request->route('name');",
                "// Line 2300:     if (! $name) {",
                "// Line 2301:         return api_error(400, 'No device group name provided');",
                "// vulnerable line: 2302: }",
                "// Line 2303: ",
                "// Line 2304:     $deviceGroup = ctype_digit($name) ? DeviceGroup::find($name) : DeviceGroup::where('name', $name)->first();",
                "// Line 2305: ",
                "// Line 2306:     if (! $deviceGroup) {",
                "// Line 2307:         return api_error(404, \"Device group $name not found\");",
                "// vulnerable line: 2308: }",
                "// Line 2309: ",
                "// Line 2310:     $deleted = $deviceGroup->delete();",
                "// Line 2311: ",
                "// Line 2312:     if (! $deleted) {",
                "// Line 2313:         return api_error(500, \"Device group $name could not be removed\");",
                "// vulnerable line: 2314: }",
                "// Line 2315: ",
                "// Line 2316:     return api_success_noresult(200, \"Device group $name deleted\");",
                "// vulnerable line: 2317: }",
                "// Line 2318: ",
                "// Line 2319: function update_device_group_add_devices(Illuminate\\Http\\Request $request)",
                "// Line 2320: {",
                "// Line 2321:     $data = json_decode($request->getContent(), true);",
                "// Line 2322:     if (json_last_error() || ! is_array($data)) {",
                "// Line 2323:         return api_error(400, \"We couldn't parse the provided json. \" . json_last_error_msg());",
                "// vulnerable line: 2324: }",
                "// Line 2325: ",
                "// Line 2326:     $name = $request->route('name');",
                "// Line 2327:     if (! $name) {",
                "// Line 2328:         return api_error(400, 'No device group name provided');",
                "// vulnerable line: 2329: }",
                "// Line 2330: ",
                "// Line 2331:     $deviceGroup = ctype_digit($name) ? DeviceGroup::find($name) : DeviceGroup::where('name', $name)->first();",
                "// Line 2332: ",
                "// Line 2333:     if (! $deviceGroup) {",
                "// Line 2334:         return api_error(404, \"Device group $name not found\");",
                "// vulnerable line: 2335: }",
                "// Line 2336: ",
                "// Line 2337:     if ('static' != $deviceGroup->type) {",
                "// Line 2338:         return api_error(422, 'Only static device group can have devices added');",
                "// vulnerable line: 2339: }",
                "// Line 2340: ",
                "// Line 2341:     $rules = [",
                "// Line 2342:         'devices' => 'array',",
                "// Line 2343:         'devices.*' => 'integer',",
                "// Line 2344:     ];",
                "// Line 2345: ",
                "// Line 2346:     $v = Validator::make($data, $rules);",
                "// Line 2347:     if ($v->fails()) {",
                "// Line 2348:         return api_error(422, $v->messages());",
                "// vulnerable line: 2349: }",
                "// Line 2350: ",
                "// Line 2351:     $deviceGroup->devices()->syncWithoutDetaching($data['devices']);",
                "// Line 2352: ",
                "// Line 2353:     return api_success_noresult(200, 'Devices added');",
                "// vulnerable line: 2354: }",
                "// Line 2355: ",
                "// Line 2356: function update_device_group_remove_devices(Illuminate\\Http\\Request $request)",
                "// Line 2357: {",
                "// Line 2358:     $data = json_decode($request->getContent(), true);",
                "// Line 2359:     if (json_last_error() || ! is_array($data)) {",
                "// Line 2360:         return api_error(400, \"We couldn't parse the provided json. \" . json_last_error_msg());",
                "// vulnerable line: 2361: }",
                "// Line 2362: ",
                "// Line 2363:     $name = $request->route('name');",
                "// Line 2364:     if (! $name) {",
                "// Line 2365:         return api_error(400, 'No device group name provided');",
                "// vulnerable line: 2366: }",
                "// Line 2367: ",
                "// Line 2368:     $deviceGroup = ctype_digit($name) ? DeviceGroup::find($name) : DeviceGroup::where('name', $name)->first();",
                "// Line 2369: ",
                "// Line 2370:     if (! $deviceGroup) {",
                "// Line 2371:         return api_error(404, \"Device group $name not found\");",
                "// vulnerable line: 2372: }",
                "// Line 2373: ",
                "// Line 2374:     if ('static' != $deviceGroup->type) {",
                "// Line 2375:         return api_error(422, 'Only static device group can have devices added');",
                "// vulnerable line: 2376: }",
                "// Line 2377: ",
                "// Line 2378:     $rules = [",
                "// Line 2379:         'devices' => 'array',",
                "// Line 2380:         'devices.*' => 'integer',",
                "// Line 2381:     ];",
                "// Line 2382: ",
                "// Line 2383:     $v = Validator::make($data, $rules);",
                "// Line 2384:     if ($v->fails()) {",
                "// Line 2385:         return api_error(422, $v->messages());",
                "// vulnerable line: 2386: }",
                "// Line 2387: ",
                "// Line 2388:     $deviceGroup->devices()->detach($data['devices']);",
                "// Line 2389: ",
                "// Line 2390:     return api_success_noresult(200, 'Devices removed');",
                "// vulnerable line: 2391: }",
                "// Line 2392: ",
                "// Line 2393: function get_device_groups(Illuminate\\Http\\Request $request)",
                "// Line 2394: {",
                "// Line 2395:     $hostname = $request->route('hostname');",
                "// Line 2396: ",
                "// Line 2397:     if ($hostname) {",
                "// Line 2398:         $device = ctype_digit($hostname) ? Device::find($hostname) : Device::findByHostname($hostname);",
                "// Line 2399:         if (is_null($device)) {",
                "// Line 2400:             return api_error(404, 'Device not found');",
                "// vulnerable line: 2401: }",
                "// Line 2402:         $query = $device->groups();",
                "// Line 2403:     } else {",
                "// Line 2404:         $query = DeviceGroup::query();",
                "// vulnerable line: 2405: }",
                "// Line 2406: ",
                "// Line 2407:     $groups = $query->hasAccess(Auth::user())->orderBy('name')->get();",
                "// Line 2408: ",
                "// Line 2409:     if ($groups->isEmpty()) {",
                "// Line 2410:         return api_error(404, 'No device groups found');",
                "// vulnerable line: 2411: }",
                "// Line 2412: ",
                "// Line 2413:     return api_success($groups->makeHidden('pivot')->toArray(), 'groups', 'Found ' . $groups->count() . ' device groups');",
                "// vulnerable line: 2414: }",
                "// Line 2415: ",
                "// Line 2416: function maintenance_devicegroup(Illuminate\\Http\\Request $request)",
                "// Line 2417: {",
                "// Line 2418:     if (empty($request->json())) {",
                "// Line 2419:         return api_error(400, 'No information has been provided to set this device into maintenance');",
                "// vulnerable line: 2420: }",
                "// Line 2421: ",
                "// Line 2422:     $name = $request->route('name');",
                "// Line 2423:     if (! $name) {",
                "// Line 2424:         return api_error(400, 'No device group name provided');",
                "// vulnerable line: 2425: }",
                "// Line 2426: ",
                "// Line 2427:     $device_group = ctype_digit($name) ? DeviceGroup::find($name) : DeviceGroup::where('name', $name)->first();",
                "// Line 2428: ",
                "// Line 2429:     if (! $device_group) {",
                "// Line 2430:         return api_error(404, \"Device group $name not found\");",
                "// vulnerable line: 2431: }",
                "// Line 2432: ",
                "// Line 2433:     if (! $request->json('duration')) {",
                "// Line 2434:         return api_error(400, 'Duration not provided');",
                "// vulnerable line: 2435: }",
                "// Line 2436: ",
                "// Line 2437:     $notes = $request->json('notes');",
                "// Line 2438:     $title = $request->json('title') ?? $device_group->name;",
                "// Line 2439: ",
                "// Line 2440:     $alert_schedule = new \\App\\Models\\AlertSchedule([",
                "// Line 2441:         'title' => $title,",
                "// Line 2442:         'notes' => $notes,",
                "// Line 2443:         'recurring' => 0,",
                "// Line 2444:     ]);",
                "// Line 2445: ",
                "// Line 2446:     $start = $request->json('start') ?? \\Carbon\\Carbon::now()->format('Y-m-d H:i:00');",
                "// Line 2447:     $alert_schedule->start = $start;",
                "// Line 2448: ",
                "// Line 2449:     $duration = $request->json('duration');",
                "// Line 2450: ",
                "// Line 2451:     if (Str::contains($duration, ':')) {",
                "// Line 2452:         [$duration_hour, $duration_min] = explode(':', $duration);",
                "// Line 2453:         $alert_schedule->end = \\Carbon\\Carbon::createFromFormat('Y-m-d H:i:s', $start)",
                "// Line 2454:             ->addHours($duration_hour)->addMinutes($duration_min)",
                "// Line 2455:             ->format('Y-m-d H:i:00');",
                "// vulnerable line: 2456: }",
                "// Line 2457: ",
                "// Line 2458:     $alert_schedule->save();",
                "// Line 2459:     $alert_schedule->deviceGroups()->attach($device_group);",
                "// Line 2460: ",
                "// Line 2461:     if ($request->json('start')) {",
                "// Line 2462:         return api_success_noresult(201, \"Device group {$device_group->name} ({$device_group->id}) will begin maintenance mode at $start\" . ($duration ? \" for {$duration}h\" : ''));",
                "// Line 2463:     } else {",
                "// Line 2464:         return api_success_noresult(201, \"Device group {$device_group->name} ({$device_group->id}) moved into maintenance mode\" . ($duration ? \" for {$duration}h\" : ''));",
                "// vulnerable line: 2465: }",
                "// vulnerable line: 2466: }",
                "// Line 2467: ",
                "// Line 2468: function get_devices_by_group(Illuminate\\Http\\Request $request)",
                "// Line 2469: {",
                "// Line 2470:     $name = $request->route('name');",
                "// Line 2471:     if (! $name) {",
                "// Line 2472:         return api_error(400, 'No device group name provided');",
                "// vulnerable line: 2473: }",
                "// Line 2474: ",
                "// Line 2475:     $device_group = ctype_digit($name) ? DeviceGroup::find($name) : DeviceGroup::where('name', $name)->first();",
                "// Line 2476: ",
                "// Line 2477:     if (empty($device_group)) {",
                "// Line 2478:         return api_error(404, 'Device group not found');",
                "// vulnerable line: 2479: }",
                "// Line 2480: ",
                "// Line 2481:     $devices = $device_group->devices()->get($request->get('full') ? ['*'] : ['devices.device_id']);",
                "// Line 2482: ",
                "// Line 2483:     if ($devices->isEmpty()) {",
                "// Line 2484:         return api_error(404, 'No devices found in group ' . $name);",
                "// vulnerable line: 2485: }",
                "// Line 2486: ",
                "// Line 2487:     return api_success($devices->makeHidden('pivot')->toArray(), 'devices');",
                "// vulnerable line: 2488: }",
                "// Line 2489: ",
                "// Line 2490: function list_vrf(Illuminate\\Http\\Request $request)",
                "// Line 2491: {",
                "// Line 2492:     $sql = '';",
                "// Line 2493:     $sql_params = [];",
                "// Line 2494:     $hostname = $request->get('hostname');",
                "// Line 2495:     $vrfname = $request->get('vrfname');",
                "// Line 2496:     $device_id = ctype_digit($hostname) ? $hostname : getidbyname($hostname);",
                "// Line 2497:     if (is_numeric($device_id)) {",
                "// Line 2498:         $permission = check_device_permission($device_id);",
                "// Line 2499:         if ($permission !== true) {",
                "// Line 2500:             return $permission;",
                "// vulnerable line: 2501: }",
                "// Line 2502:         $sql = ' AND `devices`.`device_id`=?';",
                "// Line 2503:         $sql_params = [$device_id];",
                "// vulnerable line: 2504: }",
                "// Line 2505:     if (! empty($vrfname)) {",
                "// Line 2506:         $sql = '  AND `vrfs`.`vrf_name`=?';",
                "// Line 2507:         $sql_params = [$vrfname];",
                "// vulnerable line: 2508: }",
                "// Line 2509:     if (! Auth::user()->hasGlobalRead()) {",
                "// Line 2510:         $sql .= ' AND `vrfs`.`device_id` IN (SELECT device_id FROM devices_perms WHERE user_id = ?)';",
                "// Line 2511:         $sql_params[] = Auth::id();",
                "// vulnerable line: 2512: }",
                "// Line 2513: ",
                "// Line 2514:     $vrfs = dbFetchRows(\"SELECT `vrfs`.* FROM `vrfs` LEFT JOIN `devices` ON `vrfs`.`device_id` = `devices`.`device_id` WHERE `vrfs`.`vrf_name` IS NOT NULL $sql\", $sql_params);",
                "// Line 2515:     $total_vrfs = count($vrfs);",
                "// Line 2516:     if ($total_vrfs == 0) {",
                "// Line 2517:         return api_error(404, 'VRFs do not exist');",
                "// vulnerable line: 2518: }",
                "// Line 2519: ",
                "// Line 2520:     return api_success($vrfs, 'vrfs');",
                "// vulnerable line: 2521: }",
                "// Line 2522: ",
                "// Line 2523: function get_vrf(Illuminate\\Http\\Request $request)",
                "// Line 2524: {",
                "// Line 2525:     $vrfId = $request->route('id');",
                "// Line 2526:     if (! is_numeric($vrfId)) {",
                "// Line 2527:         return api_error(400, 'Invalid id has been provided');",
                "// vulnerable line: 2528: }",
                "// Line 2529: ",
                "// Line 2530:     $vrf = dbFetchRows('SELECT * FROM `vrfs` WHERE `vrf_id` IS NOT NULL AND `vrf_id` = ?', [$vrfId]);",
                "// Line 2531:     $vrf_count = count($vrf);",
                "// Line 2532:     if ($vrf_count == 0) {",
                "// Line 2533:         return api_error(404, \"VRF $vrfId does not exist\");",
                "// vulnerable line: 2534: }",
                "// Line 2535: ",
                "// Line 2536:     return api_success($vrf, 'vrf');",
                "// vulnerable line: 2537: }",
                "// Line 2538: ",
                "// Line 2539: function list_mpls_services(Illuminate\\Http\\Request $request)",
                "// Line 2540: {",
                "// Line 2541:     $hostname = $request->get('hostname');",
                "// Line 2542:     $device_id = ctype_digit($hostname) ? $hostname : getidbyname($hostname);",
                "// Line 2543: ",
                "// Line 2544:     $mpls_services = MplsService::hasAccess(Auth::user())->when($device_id, function ($query, $device_id) {",
                "// Line 2545:         return $query->where('device_id', $device_id);",
                "// Line 2546:     })->get();",
                "// Line 2547: ",
                "// Line 2548:     if ($mpls_services->isEmpty()) {",
                "// Line 2549:         return api_error(404, 'MPLS Services do not exist');",
                "// vulnerable line: 2550: }",
                "// Line 2551: ",
                "// Line 2552:     return api_success($mpls_services, 'mpls_services', null, 200, $mpls_services->count());",
                "// vulnerable line: 2553: }",
                "// Line 2554: ",
                "// Line 2555: function list_mpls_saps(Illuminate\\Http\\Request $request)",
                "// Line 2556: {",
                "// Line 2557:     $hostname = $request->get('hostname');",
                "// Line 2558:     $device_id = ctype_digit($hostname) ? $hostname : getidbyname($hostname);",
                "// Line 2559: ",
                "// Line 2560:     $mpls_saps = MplsSap::hasAccess(Auth::user())->when($device_id, function ($query, $device_id) {",
                "// Line 2561:         return $query->where('device_id', $device_id);",
                "// Line 2562:     })->get();",
                "// Line 2563: ",
                "// Line 2564:     if ($mpls_saps->isEmpty()) {",
                "// Line 2565:         return api_error(404, 'SAPs do not exist');",
                "// vulnerable line: 2566: }",
                "// Line 2567: ",
                "// Line 2568:     return api_success($mpls_saps, 'saps', null, 200, $mpls_saps->count());",
                "// vulnerable line: 2569: }",
                "// Line 2570: ",
                "// Line 2571: function list_ipsec(Illuminate\\Http\\Request $request)",
                "// Line 2572: {",
                "// Line 2573:     $hostname = $request->route('hostname');",
                "// Line 2574:     // use hostname as device_id if it's all digits",
                "// Line 2575:     $device_id = ctype_digit($hostname) ? $hostname : getidbyname($hostname);",
                "// Line 2576:     if (! is_numeric($device_id)) {",
                "// Line 2577:         return api_error(400, 'No valid hostname or device ID provided');",
                "// vulnerable line: 2578: }",
                "// Line 2579: ",
                "// Line 2580:     $ipsec = dbFetchRows('SELECT `D`.`hostname`, `I`.* FROM `ipsec_tunnels` AS `I`, `devices` AS `D` WHERE `I`.`device_id`=? AND `D`.`device_id` = `I`.`device_id`', [$device_id]);",
                "// Line 2581: ",
                "// Line 2582:     return api_success($ipsec, 'ipsec');",
                "// vulnerable line: 2583: }",
                "// Line 2584: ",
                "// Line 2585: function list_vlans(Illuminate\\Http\\Request $request)",
                "// Line 2586: {",
                "// Line 2587:     $sql = '';",
                "// Line 2588:     $sql_params = [];",
                "// Line 2589:     $hostname = $request->get('hostname');",
                "// Line 2590:     $device_id = ctype_digit($hostname) ? $hostname : getidbyname($hostname);",
                "// Line 2591:     if (is_numeric($device_id)) {",
                "// Line 2592:         $permission = check_device_permission($device_id);",
                "// Line 2593:         if ($permission !== true) {",
                "// Line 2594:             return $permission;",
                "// vulnerable line: 2595: }",
                "// Line 2596:         $sql = ' AND `devices`.`device_id` = ?';",
                "// Line 2597:         $sql_params[] = $device_id;",
                "// vulnerable line: 2598: }",
                "// Line 2599:     if (! Auth::user()->hasGlobalRead()) {",
                "// Line 2600:         $sql .= ' AND `vlans`.`device_id` IN (SELECT device_id FROM devices_perms WHERE user_id = ?)';",
                "// Line 2601:         $sql_params[] = Auth::id();",
                "// vulnerable line: 2602: }",
                "// Line 2603: ",
                "// Line 2604:     $vlans = dbFetchRows(\"SELECT `vlans`.* FROM `vlans` LEFT JOIN `devices` ON `vlans`.`device_id` = `devices`.`device_id` WHERE `vlans`.`vlan_vlan` IS NOT NULL $sql\", $sql_params);",
                "// Line 2605:     $vlans_count = count($vlans);",
                "// Line 2606:     if ($vlans_count == 0) {",
                "// Line 2607:         return api_error(404, 'VLANs do not exist');",
                "// vulnerable line: 2608: }",
                "// Line 2609: ",
                "// Line 2610:     return api_success($vlans, 'vlans');",
                "// vulnerable line: 2611: }",
                "// Line 2612: ",
                "// Line 2613: function list_links(Illuminate\\Http\\Request $request)",
                "// Line 2614: {",
                "// Line 2615:     $hostname = $request->route('hostname');",
                "// Line 2616:     $sql = '';",
                "// Line 2617:     $sql_params = [];",
                "// Line 2618: ",
                "// Line 2619:     $device_id = ctype_digit($hostname) ? $hostname : getidbyname($hostname);",
                "// Line 2620:     if (is_numeric($device_id)) {",
                "// Line 2621:         $permission = check_device_permission($device_id);",
                "// Line 2622:         if ($permission !== true) {",
                "// Line 2623:             return $permission;",
                "// vulnerable line: 2624: }",
                "// Line 2625:         $sql = ' AND `links`.`local_device_id`=?';",
                "// Line 2626:         $sql_params = [$device_id];",
                "// vulnerable line: 2627: }",
                "// Line 2628:     if (! Auth::user()->hasGlobalRead()) {",
                "// Line 2629:         $sql .= ' AND `links`.`local_device_id` IN (SELECT device_id FROM devices_perms WHERE user_id = ?)';",
                "// Line 2630:         $sql_params[] = Auth::id();",
                "// vulnerable line: 2631: }",
                "// Line 2632:     $links = dbFetchRows(\"SELECT `links`.* FROM `links` LEFT JOIN `devices` ON `links`.`local_device_id` = `devices`.`device_id` WHERE `links`.`id` IS NOT NULL $sql\", $sql_params);",
                "// Line 2633:     $total_links = count($links);",
                "// Line 2634:     if ($total_links == 0) {",
                "// Line 2635:         return api_error(404, 'Links do not exist');",
                "// vulnerable line: 2636: }",
                "// Line 2637: ",
                "// Line 2638:     return api_success($links, 'links');",
                "// vulnerable line: 2639: }",
                "// Line 2640: ",
                "// Line 2641: function get_link(Illuminate\\Http\\Request $request)",
                "// Line 2642: {",
                "// Line 2643:     $linkId = $request->route('id');",
                "// Line 2644:     if (! is_numeric($linkId)) {",
                "// Line 2645:         return api_error(400, 'Invalid id has been provided');",
                "// vulnerable line: 2646: }",
                "// Line 2647: ",
                "// Line 2648:     $link = dbFetchRows('SELECT * FROM `links` WHERE `id` IS NOT NULL AND `id` = ?', [$linkId]);",
                "// Line 2649:     $link_count = count($link);",
                "// Line 2650:     if ($link_count == 0) {",
                "// Line 2651:         return api_error(404, \"Link $linkId does not exist\");",
                "// vulnerable line: 2652: }",
                "// Line 2653: ",
                "// Line 2654:     return api_success($link, 'link');",
                "// vulnerable line: 2655: }",
                "// Line 2656: ",
                "// Line 2657: function get_fdb(Illuminate\\Http\\Request $request)",
                "// Line 2658: {",
                "// Line 2659:     $hostname = $request->route('hostname');",
                "// Line 2660: ",
                "// Line 2661:     if (empty($hostname)) {",
                "// Line 2662:         return api_error(500, 'No hostname has been provided');",
                "// vulnerable line: 2663: }",
                "// Line 2664: ",
                "// Line 2665:     $device_id = ctype_digit($hostname) ? $hostname : getidbyname($hostname);",
                "// Line 2666:     $device = null;",
                "// Line 2667:     if ($device_id) {",
                "// Line 2668:         // save the current details for returning to the client on successful delete",
                "// Line 2669:         $device = Device::find($device_id);",
                "// vulnerable line: 2670: }",
                "// Line 2671: ",
                "// Line 2672:     if (! $device) {",
                "// Line 2673:         return api_error(404, \"Device $hostname not found\");",
                "// vulnerable line: 2674: }",
                "// Line 2675: ",
                "// Line 2676:     return check_device_permission($device_id, function () use ($device) {",
                "// Line 2677:         if ($device) {",
                "// Line 2678:             $fdb = $device->portsFdb;",
                "// Line 2679: ",
                "// Line 2680:             return api_success($fdb, 'ports_fdb');",
                "// vulnerable line: 2681: }",
                "// Line 2682: ",
                "// Line 2683:         return api_error(404, 'Device does not exist');",
                "// Line 2684:     });",
                "// vulnerable line: 2685: }",
                "// Line 2686: ",
                "// Line 2687: function list_fdb(Illuminate\\Http\\Request $request)",
                "// Line 2688: {",
                "// Line 2689:     $mac = $request->route('mac');",
                "// Line 2690: ",
                "// Line 2691:     $fdb = PortsFdb::hasAccess(Auth::user())",
                "// Line 2692:            ->when(! empty($mac), function (Builder $query) use ($mac) {",
                "// Line 2693:                return $query->where('mac_address', $mac);",
                "// Line 2694:            })",
                "// Line 2695:            ->get();",
                "// Line 2696: ",
                "// Line 2697:     if ($fdb->isEmpty()) {",
                "// Line 2698:         return api_error(404, 'Fdb entry does not exist');",
                "// vulnerable line: 2699: }",
                "// Line 2700: ",
                "// Line 2701:     return api_success($fdb, 'ports_fdb');",
                "// vulnerable line: 2702: }",
                "// Line 2703: ",
                "// Line 2704: function list_fdb_detail(Illuminate\\Http\\Request $request)",
                "// Line 2705: {",
                "// Line 2706:     $macAddress = Mac::parse($request->route('mac'));",
                "// Line 2707: ",
                "// Line 2708:     if (! $macAddress->isValid()) {",
                "// Line 2709:         return api_error(422, 'Invalid MAC address');",
                "// vulnerable line: 2710: }",
                "// Line 2711: ",
                "// Line 2712:     $extras = ['mac' => $macAddress->readable(),  'mac_oui' => $macAddress->vendor()];",
                "// Line 2713: ",
                "// Line 2714:     $fdb = PortsFdb::hasAccess(Auth::user())",
                "// Line 2715:         ->leftJoin('ports', 'ports_fdb.port_id', 'ports.port_id')",
                "// Line 2716:         ->leftJoin('devices', 'ports_fdb.device_id', 'devices.device_id')",
                "// Line 2717:         ->where('mac_address', $macAddress->hex())",
                "// Line 2718:         ->orderBy('ports_fdb.updated_at', 'desc')",
                "// Line 2719:         ->select('devices.hostname', 'ports.ifName', 'ports_fdb.updated_at')",
                "// Line 2720:         ->limit(1000)->get();",
                "// Line 2721: ",
                "// Line 2722:     if ($fdb->isEmpty()) {",
                "// Line 2723:         return api_error(404, 'Fdb entry does not exist');",
                "// vulnerable line: 2724: }",
                "// Line 2725: ",
                "// Line 2726:     foreach ($fdb as $i => $fdb_entry) {",
                "// Line 2727:         if ($fdb_entry['updated_at']) {",
                "// Line 2728:             $fdb[$i]['last_seen'] = $fdb_entry['updated_at']->diffForHumans();",
                "// Line 2729:             $fdb[$i]['updated_at'] = $fdb_entry['updated_at']->toDateTimeString();",
                "// vulnerable line: 2730: }",
                "// vulnerable line: 2731: }",
                "// Line 2732: ",
                "// Line 2733:     return api_success($fdb, 'ports_fdb', null, 200, count($fdb), $extras);",
                "// vulnerable line: 2734: }",
                "// Line 2735: ",
                "// Line 2736: function list_sensors()",
                "// Line 2737: {",
                "// Line 2738:     $sensors = Sensor::hasAccess(Auth::user())->get();",
                "// Line 2739:     $total_sensors = $sensors->count();",
                "// Line 2740:     if ($total_sensors == 0) {",
                "// Line 2741:         return api_error(404, 'Sensors do not exist');",
                "// vulnerable line: 2742: }",
                "// Line 2743: ",
                "// Line 2744:     return api_success($sensors, 'sensors');",
                "// vulnerable line: 2745: }",
                "// Line 2746: ",
                "// Line 2747: function list_ip_addresses()",
                "// Line 2748: {",
                "// Line 2749:     $ipv4_addresses = dbFetchRows('SELECT * FROM `ipv4_addresses`');",
                "// Line 2750:     $ipv6_addresses = dbFetchRows('SELECT * FROM `ipv6_addresses`');",
                "// Line 2751:     $ip_addresses_count = count(array_merge($ipv4_addresses, $ipv6_addresses));",
                "// Line 2752:     if ($ip_addresses_count == 0) {",
                "// Line 2753:         return api_error(404, 'IP addresses do not exist');",
                "// vulnerable line: 2754: }",
                "// Line 2755: ",
                "// Line 2756:     return api_success(array_merge($ipv4_addresses, $ipv6_addresses), 'ip_addresses');",
                "// vulnerable line: 2757: }",
                "// Line 2758: ",
                "// Line 2759: function list_ip_networks()",
                "// Line 2760: {",
                "// Line 2761:     $ipv4_networks = dbFetchRows('SELECT * FROM `ipv4_networks`');",
                "// Line 2762:     $ipv6_networks = dbFetchRows('SELECT * FROM `ipv6_networks`');",
                "// Line 2763:     $ip_networks_count = count(array_merge($ipv4_networks, $ipv6_networks));",
                "// Line 2764:     if ($ip_networks_count == 0) {",
                "// Line 2765:         return api_error(404, 'IP networks do not exist');",
                "// vulnerable line: 2766: }",
                "// Line 2767: ",
                "// Line 2768:     return api_success(array_merge($ipv4_networks, $ipv6_networks), 'ip_networks');",
                "// vulnerable line: 2769: }",
                "// Line 2770: ",
                "// Line 2771: function list_arp(Illuminate\\Http\\Request $request)",
                "// Line 2772: {",
                "// Line 2773:     $query = $request->route('query');",
                "// Line 2774:     $cidr = $request->route('cidr');",
                "// Line 2775:     $hostname = $request->get('device');",
                "// Line 2776: ",
                "// Line 2777:     if (empty($query)) {",
                "// Line 2778:         return api_error(400, 'No valid IP/MAC provided');",
                "// Line 2779:     } elseif ($query === 'all' && empty($hostname)) {",
                "// Line 2780:         return api_error(400, 'Device argument is required when requesting all entries');",
                "// vulnerable line: 2781: }",
                "// Line 2782: ",
                "// Line 2783:     if ($query === 'all') {",
                "// Line 2784:         $device_id = ctype_digit($hostname) ? $hostname : getidbyname($hostname);",
                "// Line 2785:         $arp = dbFetchRows('SELECT `ipv4_mac`.* FROM `ipv4_mac` LEFT JOIN `ports` ON `ipv4_mac`.`port_id` = `ports`.`port_id` WHERE `ports`.`device_id` = ?', [$device_id]);",
                "// Line 2786:     } elseif ($cidr) {",
                "// Line 2787:         try {",
                "// Line 2788:             $ip = new IPv4(\"$query/$cidr\");",
                "// Line 2789:             $arp = dbFetchRows(",
                "// Line 2790:                 'SELECT * FROM `ipv4_mac` WHERE (inet_aton(`ipv4_address`) & ?) = ?',",
                "// Line 2791:                 [ip2long($ip->getNetmask()), ip2long($ip->getNetworkAddress())]",
                "// Line 2792:             );",
                "// Line 2793:         } catch (InvalidIpException $e) {",
                "// Line 2794:             return api_error(400, 'Invalid Network Address');",
                "// vulnerable line: 2795: }",
                "// Line 2796:     } elseif (filter_var($query, FILTER_VALIDATE_MAC)) {",
                "// Line 2797:         $mac = Mac::parse($query)->hex();",
                "// Line 2798:         $arp = dbFetchRows('SELECT * FROM `ipv4_mac` WHERE `mac_address`=?', [$mac]);",
                "// Line 2799:     } else {",
                "// Line 2800:         $arp = dbFetchRows('SELECT * FROM `ipv4_mac` WHERE `ipv4_address`=?', [$query]);",
                "// vulnerable line: 2801: }",
                "// Line 2802: ",
                "// Line 2803:     return api_success($arp, 'arp');",
                "// vulnerable line: 2804: }",
                "// Line 2805: ",
                "// Line 2806: function list_services(Illuminate\\Http\\Request $request)",
                "// Line 2807: {",
                "// Line 2808:     $where = [];",
                "// Line 2809:     $params = [];",
                "// Line 2810: ",
                "// Line 2811:     // Filter by State",
                "// Line 2812:     if ($request->has('state')) {",
                "// Line 2813:         $where[] = '`service_status`=?';",
                "// Line 2814:         $params[] = $request->get('state');",
                "// Line 2815:         $where[] = \"`service_disabled`='0'\";",
                "// Line 2816:         $where[] = \"`service_ignore`='0'\";",
                "// Line 2817: ",
                "// Line 2818:         if (! is_numeric($request->get('state'))) {",
                "// Line 2819:             return api_error(400, 'No valid service state provided, valid option is 0=Ok, 1=Warning, 2=Critical');",
                "// vulnerable line: 2820: }",
                "// vulnerable line: 2821: }",
                "// Line 2822: ",
                "// Line 2823:     //Filter by Type",
                "// Line 2824:     if ($request->has('type')) {",
                "// Line 2825:         $where[] = '`service_type` LIKE ?';",
                "// Line 2826:         $params[] = $request->get('type');",
                "// vulnerable line: 2827: }",
                "// Line 2828: ",
                "// Line 2829:     //GET by Host",
                "// Line 2830:     $hostname = $request->route('hostname');",
                "// Line 2831:     if ($hostname) {",
                "// Line 2832:         $device_id = ctype_digit($hostname) ? $hostname : getidbyname($hostname);",
                "// Line 2833:         $where[] = '`device_id` = ?';",
                "// Line 2834:         $params[] = $device_id;",
                "// Line 2835: ",
                "// Line 2836:         if (! is_numeric($device_id)) {",
                "// Line 2837:             return api_error(500, 'No valid hostname or device id provided');",
                "// vulnerable line: 2838: }",
                "// vulnerable line: 2839: }",
                "// Line 2840: ",
                "// Line 2841:     $query = 'SELECT * FROM `services`';",
                "// Line 2842: ",
                "// Line 2843:     if (! empty($where)) {",
                "// Line 2844:         $query .= ' WHERE ' . implode(' AND ', $where);",
                "// vulnerable line: 2845: }",
                "// Line 2846:     $query .= ' ORDER BY `service_ip`';",
                "// Line 2847:     $services = [dbFetchRows($query, $params)]; // double array for backwards compat :(",
                "// Line 2848: ",
                "// Line 2849:     return api_success($services, 'services');",
                "// vulnerable line: 2850: }",
                "// Line 2851: ",
                "// Line 2852: function list_logs(Illuminate\\Http\\Request $request, Router $router)",
                "// Line 2853: {",
                "// Line 2854:     $type = $router->current()->getName();",
                "// Line 2855:     $hostname = $request->route('hostname');",
                "// Line 2856:     $device_id = ctype_digit($hostname) ? $hostname : getidbyname($hostname);",
                "// Line 2857: ",
                "// Line 2858:     $count_query = 'SELECT COUNT(*)';",
                "// Line 2859:     $param = [];",
                "// Line 2860:     if ($type === 'list_eventlog') {",
                "// Line 2874:         $id_field = 'id';",
                "// Line 2875:     } elseif ($type === 'list_authlog') {",
                "// Line 2876:         $query = ' FROM authlog WHERE 1';",
                "// Line 2877:         $full_query = 'SELECT `authlog`.*';",
                "// Line 2878:         $timestamp = 'datetime';",
                "// Line 2879:         $id_field = 'id';",
                "// Line 2880:     } else {",
                "// Line 2881:         $query = ' FROM eventlog LEFT JOIN `devices` ON `eventlog`.`device_id`=`devices`.`device_id` WHERE 1';",
                "// Line 2882:         $full_query = 'SELECT `devices`.`hostname`, `devices`.`sysName`, `eventlog`.*';",
                "// Line 2883:         $timestamp = 'datetime';",
                "// vulnerable line: 2884: }",
                "// Line 2885: ",
                "// Line 2886:     $start = (int) $request->get('start', 0);",
                "// Line 2887:     $limit = (int) $request->get('limit', 50);",
                "// Line 2888:     $from = $request->get('from');",
                "// Line 2889:     $to = $request->get('to');",
                "// Line 2890: ",
                "// Line 2891:     if (is_numeric($device_id)) {",
                "// Line 2892:         $query .= ' AND `devices`.`device_id` = ?';",
                "// Line 2893:         $param[] = $device_id;",
                "// vulnerable line: 2894: }",
                "// Line 2895: ",
                "// Line 2896:     if ($from) {",
                "// Line 2897:         if (is_numeric($from)) {",
                "// Line 2898:             $query .= \" AND $id_field >= ?\";",
                "// Line 2899:         } else {",
                "// Line 2900:             $query .= \" AND $timestamp >= ?\";",
                "// vulnerable line: 2901: }",
                "// Line 2902:         $param[] = $from;",
                "// vulnerable line: 2903: }",
                "// Line 2904: ",
                "// Line 2905:     if ($to) {",
                "// Line 2906:         if (is_numeric($to)) {",
                "// Line 2907:             $query .= \" AND $id_field <= ?\";",
                "// Line 2908:         } else {",
                "// Line 2909:             $query .= \" AND $timestamp <= ?\";",
                "// vulnerable line: 2910: }",
                "// Line 2911:         $param[] = $to;",
                "// vulnerable line: 2912: }",
                "// Line 2913: ",
                "// Line 2914:     $sort_order = $request->get('sortorder') === 'DESC' ? 'DESC' : 'ASC';",
                "// Line 2915: ",
                "// Line 2916:     $count_query = $count_query . $query;",
                "// Line 2917:     $count = dbFetchCell($count_query, $param);",
                "// Line 2918:     $full_query = $full_query . $query . \" ORDER BY $timestamp $sort_order LIMIT $start,$limit\";",
                "// Line 2919:     $logs = dbFetchRows($full_query, $param);",
                "// Line 2920: ",
                "// Line 2921:     if ($type === 'list_alertlog') {",
                "// Line 2922:         foreach ($logs as $index => $log) {",
                "// Line 2923:             $logs[$index]['details'] = json_decode(gzuncompress($log['details']), true);",
                "// vulnerable line: 2924: }",
                "// vulnerable line: 2925: }",
                "// Line 2926: ",
                "// Line 2927:     return api_success($logs, 'logs', null, 200, null, ['total' => $count]);",
                "// vulnerable line: 2928: }",
                "// Line 2929: ",
                "// Line 2930: /**",
                "// Line 2931:  * @throws \\LibreNMS\\Exceptions\\ApiException",
                "// Line 2932:  */",
                "// Line 2933: function validate_column_list(?string $columns, string $table, array $default = []): array",
                "// Line 2934: {",
                "// Line 2935:     if ($columns == '') { // no user input, return default",
                "// Line 2936:         return $default;",
                "// vulnerable line: 2937: }",
                "// Line 2938: ",
                "// Line 2939:     static $schema;",
                "// Line 2940:     if (is_null($schema)) {",
                "// Line 2941:         $schema = new \\LibreNMS\\DB\\Schema();",
                "// vulnerable line: 2942: }",
                "// Line 2943: ",
                "// Line 2944:     $column_names = is_array($columns) ? $columns : explode(',', $columns);",
                "// Line 2945:     $valid_columns = $schema->getColumns($table);",
                "// Line 2946:     $invalid_columns = array_diff(array_map('trim', $column_names), $valid_columns);",
                "// Line 2947: ",
                "// Line 2948:     if (count($invalid_columns) > 0) {",
                "// Line 2949:         throw new InvalidTableColumnException($invalid_columns);",
                "// vulnerable line: 2950: }",
                "// Line 2951: ",
                "// Line 2952:     return $column_names;",
                "// vulnerable line: 2953: }",
                "// Line 2954: ",
                "// Line 2955: function missing_fields($required_fields, $data)",
                "// Line 2956: {",
                "// Line 2957:     foreach ($required_fields as $required) {",
                "// Line 2958:         if (empty($data[$required])) {",
                "// Line 2959:             return true;",
                "// vulnerable line: 2960: }",
                "// vulnerable line: 2961: }",
                "// Line 2962: ",
                "// Line 2963:     return false;",
                "// vulnerable line: 2964: }",
                "// Line 2965: ",
                "// Line 2966: function add_service_template_for_device_group(Illuminate\\Http\\Request $request)",
                "// Line 2967: {",
                "// Line 2968:     $data = json_decode($request->getContent(), true);",
                "// Line 2969:     if (json_last_error() || ! is_array($data)) {",
                "// Line 2970:         return api_error(400, \"We couldn't parse the provided json. \" . json_last_error_msg());",
                "// vulnerable line: 2971: }",
                "// Line 2972: ",
                "// Line 2973:     $rules = [",
                "// Line 2974:         'name' => 'required|string|unique:service_templates',",
                "// Line 2975:         'device_group_id' => 'integer',",
                "// Line 2976:         'type' => 'string',",
                "// Line 2977:         'param' => 'nullable|string',",
                "// Line 2978:         'ip' => 'nullable|string',",
                "// Line 2979:         'desc' => 'nullable|string',",
                "// Line 2980:         'changed' => 'integer',",
                "// Line 2981:         'disabled' => 'integer',",
                "// Line 2982:         'ignore' => 'integer',",
                "// Line 2983:     ];",
                "// Line 2984: ",
                "// Line 2985:     $v = Validator::make($data, $rules);",
                "// Line 2986:     if ($v->fails()) {",
                "// Line 2987:         return api_error(422, $v->messages());",
                "// vulnerable line: 2988: }",
                "// Line 2989: ",
                "// Line 2990:     // Only use the rules if they are able to be parsed by the QueryBuilder",
                "// Line 2991:     $query = QueryBuilderParser::fromJson($data['rules'])->toSql();",
                "// Line 2992:     if (empty($query)) {",
                "// Line 2993:         return api_error(500, \"We couldn't parse your rule\");",
                "// vulnerable line: 2994: }",
                "// Line 2995: ",
                "// Line 2996:     $serviceTemplate = ServiceTemplate::make(['name' => $data['name'], 'device_group_id' => $data['device_group_id'], 'type' => $data['type'], 'param' => $data['param'], 'ip' => $data['ip'], 'desc' => $data['desc'], 'changed' => $data['changed'], 'disabled' => $data['disabled'], 'ignore' => $data['ignore']]);",
                "// Line 2997:     $serviceTemplate->save();",
                "// Line 2998: ",
                "// Line 2999:     return api_success($serviceTemplate->id, 'id', 'Service Template ' . $serviceTemplate->name . ' created', 201);",
                "// vulnerable line: 3000: }",
                "// Line 3001: ",
                "// Line 3002: function get_service_templates(Illuminate\\Http\\Request $request)",
                "// Line 3003: {",
                "// Line 3004:     if ($request->user()->cannot('viewAny', ServiceTemplate::class)) {",
                "// Line 3005:         return api_error(403, 'Insufficient permissions to access service templates');",
                "// vulnerable line: 3006: }",
                "// Line 3007: ",
                "// Line 3008:     $templates = ServiceTemplate::query()->orderBy('name')->get();",
                "// Line 3009: ",
                "// Line 3010:     if ($templates->isEmpty()) {",
                "// Line 3011:         return api_error(404, 'No service templates found');",
                "// vulnerable line: 3012: }",
                "// Line 3013: ",
                "// Line 3014:     return api_success($templates->makeHidden('pivot')->toArray(), 'templates', 'Found ' . $templates->count() . ' service templates');",
                "// vulnerable line: 3015: }",
                "// Line 3016: ",
                "// Line 3017: function add_service_for_host(Illuminate\\Http\\Request $request)",
                "// Line 3018: {",
                "// Line 3019:     $hostname = $request->route('hostname');",
                "// Line 3020:     $device_id = ctype_digit($hostname) ? $hostname : getidbyname($hostname);",
                "// Line 3021:     $data = json_decode($request->getContent(), true);",
                "// Line 3022:     if (missing_fields(['type'], $data)) {",
                "// Line 3023:         return api_error(400, 'Required fields missing (hostname and type needed)');",
                "// vulnerable line: 3024: }",
                "// Line 3025:     if (! in_array($data['type'], list_available_services())) {",
                "// Line 3026:         return api_error(400, 'The service ' . $data['type'] . \" does not exist.",
                "// Line 3027:  Available service types: \" . implode(', ', list_available_services()));",
                "// vulnerable line: 3028: }",
                "// Line 3029:     $service_type = $data['type'];",
                "// Line 3030:     $service_ip = $data['ip'];",
                "// Line 3031:     $service_desc = $data['desc'] ? $data['desc'] : '';",
                "// Line 3032:     $service_param = $data['param'] ? $data['param'] : '';",
                "// Line 3033:     $service_ignore = $data['ignore'] ? true : false; // Default false",
                "// Line 3034:     $service_disable = $data['disable'] ? true : false; // Default false",
                "// Line 3035:     $service_name = $data['name'];",
                "// Line 3036:     $service_id = add_service($device_id, $service_type, $service_desc, $service_ip, $service_param, (int) $service_ignore, (int) $service_disable, 0, $service_name);",
                "// Line 3037:     if ($service_id != false) {",
                "// Line 3038:         return api_success_noresult(201, \"Service $service_type has been added to device $hostname (#$service_id)\");",
                "// vulnerable line: 3039: }",
                "// Line 3040: ",
                "// Line 3041:     return api_error(500, 'Failed to add the service');",
                "// vulnerable line: 3042: }",
                "// Line 3043: ",
                "// Line 3044: function add_parents_to_host(Illuminate\\Http\\Request $request)",
                "// Line 3045: {",
                "// Line 3046:     $data = json_decode($request->getContent(), true);",
                "// Line 3047:     $device_id = $request->route('id');",
                "// Line 3048:     $device_id = ctype_digit($device_id) ? $device_id : getidbyname($device_id);",
                "// Line 3049: ",
                "// Line 3050:     $parent_ids = [];",
                "// Line 3051:     foreach (explode(',', $data['parent_ids']) as $hostname) {",
                "// Line 3052:         $hostname = trim($hostname);",
                "// Line 3053:         $parent_id = ctype_digit($hostname) ? $hostname : getidbyname($hostname);",
                "// Line 3054:         if (empty($parent_id)) {",
                "// Line 3055:             return api_error(400, 'Parent device IDs/Hostname does not exist: ' . $hostname);",
                "// vulnerable line: 3056: }",
                "// Line 3057:         $parent_ids[] = $parent_id;",
                "// vulnerable line: 3058: }",
                "// Line 3059: ",
                "// Line 3060:     if (validateDeviceIds($parent_ids) && validateDeviceIds([$device_id]) && (! in_array($device_id, $parent_ids))) {",
                "// Line 3061:         Device::find($device_id)->parents()->sync($parent_ids);",
                "// Line 3062: ",
                "// Line 3063:         return api_success_noresult(201, 'Device dependencies have been saved');",
                "// vulnerable line: 3064: }",
                "// Line 3065: ",
                "// Line 3066:     return api_error(400, 'Check your parent and device IDs');",
                "// vulnerable line: 3067: }",
                "// Line 3068: ",
                "// Line 3069: function del_parents_from_host(Illuminate\\Http\\Request $request)",
                "// Line 3070: {",
                "// Line 3071:     $device_id = $request->route('id');",
                "// Line 3072:     $device_id = ctype_digit($device_id) ? $device_id : getidbyname($device_id);",
                "// Line 3073:     $data = json_decode($request->getContent(), true);",
                "// Line 3074:     if (! validateDeviceIds([$device_id])) {",
                "// Line 3075:         return api_error(400, 'Check your device ID!');",
                "// vulnerable line: 3076: }",
                "// Line 3077:     $device = Device::find($device_id);",
                "// Line 3078:     if (! empty($data['parent_ids'])) {",
                "// Line 3079:         foreach (explode(',', $data['parent_ids']) as $hostname) {",
                "// Line 3080:             $hostname = trim($hostname);",
                "// Line 3081:             $parent_id = ctype_digit($hostname) ? $hostname : getidbyname($hostname);",
                "// Line 3082:             if (empty($parent_id)) {",
                "// Line 3083:                 return api_error(400, 'Parent device IDs/Hostname does not exist: ' . $hostname);",
                "// vulnerable line: 3084: }",
                "// Line 3085:             $parent_ids[] = $parent_id;",
                "// vulnerable line: 3086: }",
                "// Line 3087: ",
                "// Line 3088:         //remove parents included in the request if they are valid device ids",
                "// Line 3089:         $result = validateDeviceIds($parent_ids) ? $device->parents()->detach($parent_ids) : false;",
                "// vulnerable line: 3090: }",
                "// Line 3091:     if (is_null($result)) {",
                "// Line 3092:         //$result doesn't exist so $data['parent_ids'] is empty",
                "// Line 3093:         $result = $device->parents()->detach(); //remove all parents",
                "// vulnerable line: 3094: }",
                "// Line 3095:     if ($result) {",
                "// Line 3096:         return api_success_noresult(201, 'All device dependencies have been removed');",
                "// vulnerable line: 3097: }",
                "// Line 3098: ",
                "// Line 3099:     return api_error(400, 'Device dependency cannot be deleted check device and parents ids');",
                "// vulnerable line: 3100: }",
                "// Line 3101: ",
                "// Line 3102: function validateDeviceIds($ids)",
                "// Line 3103: {",
                "// Line 3104:     foreach ($ids as $id) {",
                "// Line 3105:         $invalidId = ! is_numeric($id) || $id < 1 || is_null(Device::find($id));",
                "// Line 3106:         if ($invalidId) {",
                "// Line 3107:             return false;",
                "// vulnerable line: 3108: }",
                "// vulnerable line: 3109: }",
                "// Line 3110: ",
                "// Line 3111:     return true;",
                "// vulnerable line: 3112: }",
                "// Line 3113: ",
                "// Line 3114: function add_location(Illuminate\\Http\\Request $request)",
                "// Line 3115: {",
                "// Line 3116:     $data = json_decode($request->getContent(), true);",
                "// Line 3117:     if (missing_fields(['location', 'lat', 'lng'], $data)) {",
                "// Line 3118:         return api_error(400, 'Required fields missing (location, lat and lng needed)');",
                "// vulnerable line: 3119: }",
                "// Line 3120:     // Set the location",
                "// Line 3121:     $location = new \\App\\Models\\Location($data);",
                "// Line 3122:     $location->fixed_coordinates = $data['fixed_coordinates'] ?? $location->coordinatesValid();",
                "// Line 3123: ",
                "// Line 3124:     if ($location->save()) {",
                "// Line 3125:         return api_success_noresult(201, \"Location added with id #$location->id\");",
                "// vulnerable line: 3126: }",
                "// Line 3127: ",
                "// Line 3128:     return api_error(500, 'Failed to add the location');",
                "// vulnerable line: 3129: }",
                "// Line 3130: ",
                "// Line 3131: function edit_location(Illuminate\\Http\\Request $request)",
                "// Line 3132: {",
                "// Line 3133:     $location = $request->route('location_id_or_name');",
                "// Line 3134:     if (empty($location)) {",
                "// Line 3135:         return api_error(400, 'No location has been provided to edit');",
                "// vulnerable line: 3136: }",
                "// Line 3137:     $location_id = ctype_digit($location) ? $location : get_location_id_by_name($location);",
                "// Line 3138:     $data = json_decode($request->getContent(), true);",
                "// Line 3139:     if (empty($location_id)) {",
                "// Line 3140:         return api_error(400, 'Failed to delete location');",
                "// vulnerable line: 3141: }",
                "// Line 3142:     $result = dbUpdate($data, 'locations', '`id` = ?', [$location_id]);",
                "// Line 3143:     if ($result == 1) {",
                "// Line 3144:         return api_success_noresult(201, 'Location updated successfully');",
                "// vulnerable line: 3145: }",
                "// Line 3146: ",
                "// Line 3147:     return api_error(500, 'Failed to update location');",
                "// vulnerable line: 3148: }",
                "// Line 3149: ",
                "// Line 3150: function get_location(Illuminate\\Http\\Request $request)",
                "// Line 3151: {",
                "// Line 3152:     $location = $request->route('location_id_or_name');",
                "// Line 3153:     if (empty($location)) {",
                "// Line 3154:         return api_error(400, 'No location has been provided to get');",
                "// vulnerable line: 3155: }",
                "// Line 3156:     $data = ctype_digit($location) ? Location::find($location) : Location::where('location', $location)->first();",
                "// Line 3157:     if (empty($data)) {",
                "// Line 3158:         return api_error(404, 'Location does not exist');",
                "// vulnerable line: 3159: }",
                "// Line 3160: ",
                "// Line 3161:     return api_success($data, 'get_location');",
                "// vulnerable line: 3162: }",
                "// Line 3163: ",
                "// Line 3164: function get_location_id_by_name($location)",
                "// Line 3165: {",
                "// Line 3166:     return dbFetchCell('SELECT id FROM locations WHERE location = ?', $location);",
                "// vulnerable line: 3167: }",
                "// Line 3168: ",
                "// Line 3169: function del_location(Illuminate\\Http\\Request $request)",
                "// Line 3170: {",
                "// Line 3171:     $location = $request->route('location');",
                "// Line 3172:     if (empty($location)) {",
                "// Line 3173:         return api_error(400, 'No location has been provided to delete');",
                "// vulnerable line: 3174: }",
                "// Line 3175:     $location_id = ctype_digit($location) ? $location : get_location_id_by_name($location);",
                "// Line 3176:     if (empty($location_id)) {",
                "// Line 3177:         return api_error(400, \"Failed to delete $location (Does not exists)\");",
                "// vulnerable line: 3178: }",
                "// Line 3179:     $data = [",
                "// Line 3180:         'location_id' => 0,",
                "// Line 3181:     ];",
                "// Line 3182:     dbUpdate($data, 'devices', '`location_id` = ?', [$location_id]);",
                "// Line 3183:     $result = dbDelete('locations', '`location` = ? ', [$location]);",
                "// Line 3184:     if ($result == 1) {",
                "// Line 3185:         return api_success_noresult(201, \"Location $location has been deleted successfully\");",
                "// vulnerable line: 3186: }",
                "// Line 3187: ",
                "// Line 3188:     return api_error(500, \"Failed to delete the location $location\");",
                "// vulnerable line: 3189: }",
                "// Line 3190: ",
                "// Line 3191: function get_poller_group(Illuminate\\Http\\Request $request)",
                "// Line 3192: {",
                "// Line 3193:     $poller_group = $request->route('poller_group_id_or_name');",
                "// Line 3194:     if (empty($poller_group)) {",
                "// Line 3195:         return api_success(PollerGroup::get(), 'get_poller_group');",
                "// vulnerable line: 3196: }",
                "// Line 3197: ",
                "// Line 3198:     $data = ctype_digit($poller_group) ? PollerGroup::find($poller_group) : PollerGroup::where('group_name', $poller_group)->first();",
                "// Line 3199:     if (empty($data)) {",
                "// Line 3200:         return api_error(404, 'Poller Group does not exist');",
                "// vulnerable line: 3201: }",
                "// Line 3202: ",
                "// Line 3203:     return api_success($data, 'get_poller_group');",
                "// vulnerable line: 3204: }",
                "// Line 3205: ",
                "// Line 3206: function del_service_from_host(Illuminate\\Http\\Request $request)",
                "// Line 3207: {",
                "// Line 3208:     $service_id = $request->route('id');",
                "// Line 3209:     if (empty($service_id)) {",
                "// Line 3210:         return api_error(400, 'No service_id has been provided to delete');",
                "// vulnerable line: 3211: }",
                "// Line 3212:     $result = delete_service($service_id);",
                "// Line 3213:     if ($result == 1) {",
                "// Line 3214:         return api_success_noresult(201, 'Service has been deleted successfully');",
                "// vulnerable line: 3215: }",
                "// Line 3216: ",
                "// Line 3217:     return api_error(500, 'Failed to delete the service');",
                "// vulnerable line: 3218: }",
                "// Line 3219: ",
                "// Line 3220: function search_by_mac(Illuminate\\Http\\Request $request)",
                "// Line 3221: {",
                "// Line 3222:     $macAddress = Mac::parse((string) $request->route('search'))->hex();",
                "// Line 3223: ",
                "// Line 3224:     $rules = [",
                "// Line 3225:         'macAddress' => 'required|string|regex:/^[0-9a-fA-F]{12}$/',",
                "// Line 3226:     ];",
                "// Line 3227: ",
                "// Line 3228:     $validate = Validator::make(['macAddress' => $macAddress], $rules);",
                "// Line 3229:     if ($validate->fails()) {",
                "// Line 3230:         return api_error(422, $validate->messages());",
                "// vulnerable line: 3231: }",
                "// Line 3232: ",
                "// Line 3233:     $ports = Port::whereHas('fdbEntries', function ($fdbDownlink) use ($macAddress) {",
                "// Line 3234:         $fdbDownlink->where('mac_address', $macAddress);",
                "// Line 3235:     })",
                "// Line 3236:          ->withCount('fdbEntries')",
                "// Line 3237:          ->orderBy('fdb_entries_count')",
                "// Line 3238:          ->get();",
                "// Line 3239: ",
                "// Line 3240:     if ($ports->count() == 0) {",
                "// Line 3241:         return api_error(404, 'mac not found');",
                "// vulnerable line: 3242: }",
                "// Line 3243: ",
                "// Line 3244:     if ($request->has('filter') && $request->get('filter') === 'first') {",
                "// Line 3245:         return  api_success($ports->first(), 'ports');",
                "// vulnerable line: 3246: }",
                "// Line 3247: ",
                "// Line 3248:     return api_success($ports, 'ports');",
                "// vulnerable line: 3249: }",
                "// Line 3250: function edit_service_for_host(Illuminate\\Http\\Request $request)",
                "// Line 3251: {",
                "// Line 3252:     $service_id = $request->route('id');",
                "// Line 3253:     $data = json_decode($request->getContent(), true);",
                "// Line 3254:     if (edit_service($data, $service_id) == 1) {",
                "// Line 3255:         return api_success_noresult(201, 'Service updated successfully');",
                "// vulnerable line: 3256: }",
                "// Line 3257: ",
                "// Line 3258:     return api_error(500, \"Failed to update the service with id $service_id\");",
                "// vulnerable line: 3259: }",
                "// Line 3260: ",
                "// Line 3261: /**",
                "// Line 3262:  * recieve syslog messages via json https://github.com/librenms/librenms/pull/14424",
                "// Line 3263:  */",
                "// Line 3264: function post_syslogsink(Illuminate\\Http\\Request $request)",
                "// Line 3265: {",
                "// Line 3266:     $json = $request->json()->all();",
                "// Line 3267: ",
                "// Line 3268:     if (is_null($json)) {",
                "// Line 3269:         return api_success_noresult(400, 'Not valid json');",
                "// vulnerable line: 3270: }",
                "// Line 3271: ",
                "// Line 3272:     $logs = array_is_list($json) ? $json : [$json];",
                "// Line 3273: ",
                "// Line 3274:     foreach ($logs as $entry) {",
                "// Line 3275:         process_syslog($entry, 1);",
                "// vulnerable line: 3276: }",
                "// Line 3277: ",
                "// Line 3278:     return api_success_noresult(200, 'Syslog received: ' . count($logs));",
                "// vulnerable line: 3279: }",
                "// Line 3280: ",
                "// Line 3281: /**",
                "// Line 3282:  * Display Librenms Instance Info",
                "// Line 3283:  */",
                "// Line 3284: function server_info()",
                "// Line 3285: {",
                "// Line 3286:     $version = \\LibreNMStil\\Version::get();",
                "// Line 3287: ",
                "// Line 3288:     $versions = [",
                "// Line 3289:         'local_ver' => $version->name(),",
                "// Line 3294:         'php_ver' => phpversion(),",
                "// Line 3295:         'python_ver' => $version->python(),",
                "// Line 3296:         'database_ver' => $version->databaseServer(),",
                "// Line 3297:         'rrdtool_ver' => $version->rrdtool(),",
                "// Line 3298:         'netsnmp_ver' => $version->netSnmp(),",
                "// Line 3299:     ];",
                "// Line 3300: ",
                "// Line 3301:     return api_success([",
                "// Line 3302:         $versions,",
                "// Line 3303:     ], 'system');",
                "// vulnerable line: 3304: }"
            ]
        }
    ]
}