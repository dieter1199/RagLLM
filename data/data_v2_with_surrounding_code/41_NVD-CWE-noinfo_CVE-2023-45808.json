{
    "cve_id": "CVE-2023-45808",
    "cve_description": "iTop is an IT service management platform.  When creating or updating an object, extkey values aren't checked to be in the current user silo. In other words, by forging an http request, the user can create objects pointing to out of silo objects (for example a UserRequest in an out of scope Organization). Fixed in iTop 2.7.10, 3.0.4, 3.1.1, and 3.2.0.",
    "cve_publish_date": "2024-04-15T18:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "N°6458 Security hardening",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "ItopDataTestCase.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "30",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 8: ",
                "// Line 9: /**",
                "// Line 10:  * Created by PhpStorm.",
                "// Line 11:  * User: Eric",
                "// Line 12:  * Date: 20/11/2017",
                "// Line 13:  * Time: 11:21",
                "// Line 14:  */",
                "// Line 15: ",
                "// Line 16: use ArchivedObjectException;",
                "// Line 17: use CMDBSource;",
                "// vulnerable line: 18: use Config;",
                "// Line 19: use Contact;",
                "// Line 20: use DBObject;",
                "// Line 21: use DBObjectSet;",
                "// Line 22: use DBSearch;",
                "// Line 23: use Exception;",
                "// Line 24: use Farm;",
                "// Line 25: use FunctionalCI;",
                "// Line 26: use Hypervisor;",
                "// Line 27: use lnkContactToFunctionalCI;",
                "// Line 28: use lnkContactToTicket;",
                "// Line 29: use lnkFunctionalCIToTicket;",
                "// Line 30: use MetaModel;",
                "// Line 31: use Person;",
                "// Line 32: use Server;",
                "// vulnerable line: 33: use SetupUtils;",
                "// Line 34: use TagSetFieldData;",
                "// Line 35: use Ticket;",
                "// Line 36: use URP_UserProfile;",
                "// Line 37: use User;",
                "// Line 38: use utils;",
                "// Line 39: use VirtualHost;",
                "// Line 40: use VirtualMachine;",
                "// Line 41: ",
                "// Line 42: ",
                "// Line 43: /** @see \\Combodo\\iTop\\TestnitTest\\ItopDataTestCase::CreateObjectWithTagSet() */",
                "// Line 651:      * Add a link between a CI and a Ticket.",
                "// Line 652:      * The database is not updated.",
                "// Line 653:      *",
                "// Line 654:      * @param FunctionalCI $oCI",
                "// Line 655:      * @param Ticket $oTicket",
                "// Line 656:      * @param string $sImpactCode",
                "// Line 657:      *",
                "// Line 658:      * @return array",
                "// Line 659:      * @throws Exception",
                "// Line 660:      */",
                "// vulnerable line: 661: protected function AddCIToTicket($oCI, $oTicket, $sImpactCode)",
                "// Line 662:     {",
                "// Line 663:         $oNewLink = new lnkFunctionalCIToTicket();",
                "// Line 664:         $oNewLink->Set('functionalci_id', $oCI->GetKey());",
                "// Line 665:         $oNewLink->Set('impact_code', $sImpactCode);",
                "// Line 666:         $oCIs = $oTicket->Get('functionalcis_list');",
                "// Line 667:         $oCIs->AddItem($oNewLink);",
                "// Line 668:         $oTicket->Set('functionalcis_list', $oCIs);",
                "// Line 669: ",
                "// Line 670:         $this->debug(\"Added {$oCI->GetName()} to {$oTicket->Get('ref')} with {$sImpactCode}\");",
                "// Line 671: "
            ]
        },
        {
            "filename_of_changes": "ObjectFormManager.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "14",
            "number_of_lines_deleted_vulnerable_to_cve": "5",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 91:      *",
                "// Line 92:      * @return array formmanager_data as a PHP array",
                "// Line 93:      *",
                "// Line 94:      * @since 2.7.6 3.0.0 N°4384 method creation : factorize as this is used twice now",
                "// Line 95:      * @since 2.7.7 3.0.1 N°4867 now only used once, but we decided to keep this method anyway",
                "// Line 96:      */",
                "// Line 97:     public static function DecodeFormManagerData($formManagerData)",
                "// Line 98:     {",
                "// Line 99:         if (is_array($formManagerData)) {",
                "// Line 100:             return $formManagerData;",
                "// vulnerable line: 101: }",
                "// Line 102: ",
                "// Line 103:         return json_decode($formManagerData, true);",
                "// vulnerable line: 104: }",
                "// Line 105: ",
                "// Line 106:     /**",
                "// Line 107:      * @param string $sJson JSON data that must contain at least :",
                "// Line 108:      *       - formobject_class : The class of the object that is being edited/viewed",
                "// Line 109:      *       - formmode : view|edit|create",
                "// Line 110:      *       - values for parent",
                "// Line 111:      *",
                "// Line 112:      * @return \\Combodo\\iTop\\Portal\\Form\\ObjectFormManager new instance init from JSON data",
                "// Line 113:      *",
                "// Line 114:      * @inheritDoc",
                "// Line 119:     public static function FromJSON($sJson)",
                "// Line 120:     {",
                "// Line 121:         $aJson = static::DecodeFormManagerData($sJson);",
                "// Line 122: ",
                "// Line 123:         /** @var \\Combodo\\iTop\\Portal\\Form\\ObjectFormManager $oFormManager */",
                "// Line 124:         $oFormManager = parent::FromJSON($sJson);",
                "// Line 125: ",
                "// Line 126:         // Retrieving object to edit",
                "// Line 127:         if (!isset($aJson['formobject_class'])) {",
                "// Line 128:             throw new Exception('Object class must be defined in order to generate the form');",
                "// vulnerable line: 129: }",
                "// Line 130:         $sObjectClass = $aJson['formobject_class'];",
                "// Line 131: ",
                "// Line 132:         if (!isset($aJson['formobject_id']))",
                "// Line 133:         {",
                "// Line 134:             $oObject = MetaModel::NewObject($sObjectClass);",
                "// vulnerable line: 135: }",
                "// Line 136:         else",
                "// Line 137:         {",
                "// Line 138:             // Note : AllowAllData set to true here instead of checking scope's flag because we are displaying a value that has been set and validated",
                "// Line 139:             $oObject = MetaModel::GetObject($sObjectClass, $aJson['formobject_id'], true, true);",
                "// vulnerable line: 140: }",
                "// Line 141:         $oFormManager->SetObject($oObject);",
                "// Line 142: ",
                "// Line 143:         // Retrieving form mode",
                "// Line 144:         if (!isset($aJson['formmode']))",
                "// Line 145:         {",
                "// Line 146:             throw new Exception('Form mode must be defined in order to generate the form');",
                "// vulnerable line: 147: }",
                "// Line 148:         $oFormManager->SetMode($aJson['formmode']);",
                "// Line 149: ",
                "// Line 150:         // Retrieving actions rules",
                "// Line 151:         if (isset($aJson['formactionrulestoken']))",
                "// Line 152:         {",
                "// Line 153:             $oFormManager->SetActionRulesToken($aJson['formactionrulestoken']);",
                "// vulnerable line: 154: }",
                "// Line 155: ",
                "// Line 156:         // Retrieving form properties",
                "// Line 157:         if (isset($aJson['formproperties']))",
                "// Line 158:         {",
                "// Line 159:             // As empty array are no passed through HTTP, this one is not always present and we have to ensure it is.",
                "// Line 160:             if (!isset($aJson['formproperties']['fields']))",
                "// Line 161:             {",
                "// Line 162:                 $aJson['formproperties']['fields'] = array();",
                "// vulnerable line: 163: }",
                "// Line 164:             $oFormManager->SetFormProperties($aJson['formproperties']);",
                "// vulnerable line: 165: }",
                "// Line 166: ",
                "// Line 167:         // Retrieving callback urls",
                "// Line 168:         if (!isset($aJson['formcallbacks'])) {",
                "// Line 169:             // TODO",
                "// vulnerable line: 170: }",
                "// Line 171: ",
                "// Line 172:         return $oFormManager;",
                "// vulnerable line: 173: }",
                "// Line 174: ",
                "// Line 175:     /**",
                "// Line 176:      *",
                "// Line 177:      * @return \\Symfony\\Component\\DependencyInjection\\ContainerInterface",
                "// Line 178:      */",
                "// Line 179:     public function GetContainer()",
                "// Line 180:     {",
                "// Line 181:         return $this->oContainer;",
                "// vulnerable line: 182: }",
                "// Line 183: ",
                "// Line 184:     /**",
                "// Line 185:      *",
                "// Line 186:      * @param \\Symfony\\Component\\DependencyInjection\\ContainerInterface $oContainer",
                "// Line 187:      *",
                "// Line 188:      * @return $this",
                "// Line 189:      */",
                "// Line 190:     public function SetContainer(ContainerInterface $oContainer)",
                "// Line 191:     {",
                "// Line 192:         $this->oContainer = $oContainer;",
                "// Line 193: ",
                "// Line 194:         return $this;",
                "// vulnerable line: 195: }",
                "// Line 196: ",
                "// Line 197:     /**",
                "// Line 198:      *",
                "// Line 199:      * @return \\DBObject",
                "// Line 200:      */",
                "// Line 201:     public function GetObject()",
                "// Line 202:     {",
                "// Line 203:         return $this->oObject;",
                "// vulnerable line: 204: }",
                "// Line 205: ",
                "// Line 206:     /**",
                "// Line 207:      *",
                "// Line 208:      * @param \\DBObject $oObject",
                "// Line 209:      *",
                "// Line 210:      * @return $this",
                "// Line 211:      */",
                "// Line 212:     public function SetObject(DBObject $oObject)",
                "// Line 213:     {",
                "// Line 214:         $this->oObject = $oObject;",
                "// Line 215: ",
                "// Line 216:         return $this;",
                "// vulnerable line: 217: }",
                "// Line 218: ",
                "// Line 219:     /**",
                "// Line 220:      *",
                "// Line 221:      * @return string",
                "// Line 222:      */",
                "// Line 223:     public function GetMode()",
                "// Line 224:     {",
                "// Line 225:         return $this->sMode;",
                "// vulnerable line: 226: }",
                "// Line 227: ",
                "// Line 228:     /**",
                "// Line 229:      *",
                "// Line 230:      * @param string $sMode",
                "// Line 231:      *",
                "// Line 232:      * @return $this",
                "// Line 233:      */",
                "// Line 234:     public function SetMode($sMode)",
                "// Line 235:     {",
                "// Line 236:         $this->sMode = $sMode;",
                "// Line 237: ",
                "// Line 238:         return $this;",
                "// vulnerable line: 239: }",
                "// Line 240: ",
                "// Line 241:     /**",
                "// Line 242:      *",
                "// Line 243:      * @return string",
                "// Line 244:      */",
                "// Line 245:     public function GetActionRulesToken()",
                "// Line 246:     {",
                "// Line 247:         return $this->sActionRulesToken;",
                "// vulnerable line: 248: }",
                "// Line 249: ",
                "// Line 250:     /**",
                "// Line 251:      *",
                "// Line 252:      * @param string $sActionRulesToken",
                "// Line 253:      *",
                "// Line 254:      * @return $this",
                "// Line 255:      */",
                "// Line 256:     public function SetActionRulesToken($sActionRulesToken)",
                "// Line 257:     {",
                "// Line 258:         $this->sActionRulesToken = $sActionRulesToken;",
                "// Line 259: ",
                "// Line 260:         return $this;",
                "// vulnerable line: 261: }",
                "// Line 262: ",
                "// Line 263:     /**",
                "// Line 264:      *",
                "// Line 265:      * @return array",
                "// Line 266:      */",
                "// Line 267:     public function GetFormProperties()",
                "// Line 268:     {",
                "// Line 269:         return $this->aFormProperties;",
                "// vulnerable line: 270: }",
                "// Line 271: ",
                "// Line 272:     /**",
                "// Line 273:      *",
                "// Line 274:      * @param array $aFormProperties",
                "// Line 275:      *",
                "// Line 276:      * @return $this",
                "// Line 277:      */",
                "// Line 278:     public function SetFormProperties($aFormProperties)",
                "// Line 279:     {",
                "// Line 280:         $this->aFormProperties = $aFormProperties;",
                "// Line 281: ",
                "// Line 282:         return $this;",
                "// vulnerable line: 283: }",
                "// Line 284: ",
                "// Line 285:     /**",
                "// Line 286:      *",
                "// Line 287:      * @return array",
                "// Line 288:      */",
                "// Line 289:     public function GetCallbackUrls()",
                "// Line 290:     {",
                "// Line 291:         return $this->aCallbackUrls;",
                "// vulnerable line: 292: }",
                "// Line 293: ",
                "// Line 294:     /**",
                "// Line 295:      *",
                "// Line 296:      * @param array $aCallbackUrls",
                "// Line 297:      *",
                "// Line 298:      * @return $this",
                "// Line 299:      */",
                "// Line 300:     public function SetCallbackUrls($aCallbackUrls)",
                "// Line 301:     {",
                "// Line 302:         $this->aCallbackUrls = $aCallbackUrls;",
                "// Line 303: ",
                "// Line 304:         return $this;",
                "// vulnerable line: 305: }",
                "// Line 306: ",
                "// Line 307:     /**",
                "// Line 308:      * Returns if the form manager is handling a transition form instead of a state form.",
                "// Line 309:      *",
                "// Line 310:      * @return bool",
                "// Line 311:      */",
                "// Line 312:     public function IsTransitionForm()",
                "// Line 313:     {",
                "// Line 314:         return ($this->sMode === static::ENUM_MODE_APPLY_STIMULUS);",
                "// vulnerable line: 315: }",
                "// Line 316: ",
                "// Line 317:     /**",
                "// Line 318:      * @inheritDoc",
                "// Line 319:      */",
                "// Line 320:     public function ToJSON()",
                "// Line 321:     {",
                "// Line 322:         $aJson = parent::ToJSON();",
                "// Line 323:         $aJson['formobject_class'] = get_class($this->oObject);",
                "// Line 324:         if ($this->oObject->GetKey() > 0)",
                "// Line 325:         {",
                "// Line 326:             $aJson['formobject_id'] = $this->oObject->GetKey();",
                "// vulnerable line: 327: }",
                "// Line 328:         $aJson['formmode'] = $this->sMode;",
                "// Line 329:         $aJson['formactionrulestoken'] = $this->sActionRulesToken;",
                "// Line 330:         $aJson['formproperties'] = $this->aFormProperties;",
                "// Line 331: ",
                "// Line 332:         return $aJson;",
                "// vulnerable line: 333: }",
                "// Line 334: ",
                "// Line 335:     /**",
                "// Line 336:      * @inheritDoc",
                "// Line 337:      * @throws \\CoreException",
                "// Line 338:      * @throws \\OQLException",
                "// Line 339:      * @throws \\Exception",
                "// Line 340:      */",
                "// Line 341:     public function Build()",
                "// Line 342:     {",
                "// Line 343:         $sObjectClass = get_class($this->oObject);",
                "// Line 344: ",
                "// Line 345:         $aFieldsAtts = array();",
                "// Line 346:         $aFieldsDMOnlyAttCodes = array();",
                "// Line 347:         $aFieldsExtraData = array();",
                "// Line 348: ",
                "// Line 349:         if ($this->oForm !== null)",
                "// Line 350:         {",
                "// Line 351:             $oForm = $this->oForm;",
                "// vulnerable line: 352: }",
                "// Line 353:         else",
                "// Line 354:         {",
                "// Line 355:             $aFormId = 'objectform-'.((isset($this->aFormProperties['id'])) ? $this->aFormProperties['id'] : 'default').'-'.uniqid();",
                "// Line 356:             $oForm = new Form($aFormId);",
                "// Line 357:             $oForm->SetTransactionId(utils::GetNewTransactionId());",
                "// vulnerable line: 358: }",
                "// Line 359: ",
                "// Line 360:         // Building form from its properties",
                "// Line 361:         // - Consistency checks for stimulus form",
                "// Line 362:         if (isset($this->aFormProperties['stimulus_code']))",
                "// Line 363:         {",
                "// Line 364:             $aTransitions = MetaModel::EnumTransitions($sObjectClass, $this->oObject->GetState());",
                "// Line 365:             if (!isset($aTransitions[$this->aFormProperties['stimulus_code']]))",
                "// Line 366:             {",
                "// Line 367:                 $aStimuli = Metamodel::EnumStimuli($sObjectClass);",
                "// Line 368:                 $sStimulusLabel = $aStimuli[$this->aFormProperties['stimulus_code']]->GetLabel();",
                "// Line 369: ",
                "// Line 370:                 $sExceptionMessage = Dict::Format('UI:Error:Invalid_Stimulus_On_Object_In_State', $sStimulusLabel, $this->oObject->GetName(), $this->oObject->GetStateLabel());",
                "// Line 371:                 throw new Exception($sExceptionMessage);",
                "// vulnerable line: 372: }",
                "// vulnerable line: 373: }",
                "// Line 374:         // - The fields",
                "// Line 375:         switch ($this->aFormProperties['type'])",
                "// Line 376:         {",
                "// Line 377:             case 'custom_list':",
                "// Line 378:             case 'static':",
                "// Line 379:                 foreach ($this->aFormProperties['fields'] as $sAttCode => $aOptions)",
                "// Line 380:                 {",
                "// Line 381:                     // When in a transition and no flags are specified for the field, we will retrieve its flags from DM later",
                "// Line 382:                     if ($this->IsTransitionForm() && empty($aOptions))",
                "// Line 383:                     {",
                "// Line 384:                         $aFieldsDMOnlyAttCodes[] = $sAttCode;",
                "// Line 385:                         continue;",
                "// vulnerable line: 386: }",
                "// Line 387: ",
                "// Line 388:                     // Otherwise we proceed as usual",
                "// Line 389:                     $iFieldFlags = OPT_ATT_NORMAL;",
                "// Line 390:                     // Checking if field should be slave",
                "// Line 391:                     if (isset($aOptions['slave']) && ($aOptions['slave'] === true))",
                "// Line 392:                     {",
                "// Line 393:                         $iFieldFlags = $iFieldFlags | OPT_ATT_SLAVE;",
                "// vulnerable line: 394: }",
                "// Line 395:                     // Checking if field should be must_change",
                "// Line 396:                     if (isset($aOptions['must_change']) && ($aOptions['must_change'] === true))",
                "// Line 397:                     {",
                "// Line 398:                         $iFieldFlags = $iFieldFlags | OPT_ATT_MUSTCHANGE;",
                "// vulnerable line: 399: }",
                "// Line 400:                     // Checking if field should be must prompt",
                "// Line 401:                     if (isset($aOptions['must_prompt']) && ($aOptions['must_prompt'] === true))",
                "// Line 402:                     {",
                "// Line 403:                         $iFieldFlags = $iFieldFlags | OPT_ATT_MUSTPROMPT;",
                "// vulnerable line: 404: }",
                "// Line 405:                     // Checking if field should be hidden",
                "// Line 406:                     if (isset($aOptions['hidden']) && ($aOptions['hidden'] === true))",
                "// Line 407:                     {",
                "// Line 408:                         $iFieldFlags = $iFieldFlags | OPT_ATT_HIDDEN;",
                "// vulnerable line: 409: }",
                "// Line 410:                     // Checking if field should be readonly",
                "// Line 411:                     if (isset($aOptions['read_only']) && ($aOptions['read_only'] === true))",
                "// Line 412:                     {",
                "// Line 413:                         $iFieldFlags = $iFieldFlags | OPT_ATT_READONLY;",
                "// vulnerable line: 414: }",
                "// Line 415:                     // Checking if field should be mandatory",
                "// Line 416:                     if (isset($aOptions['mandatory']) && ($aOptions['mandatory'] === true))",
                "// Line 417:                     {",
                "// Line 418:                         $iFieldFlags = $iFieldFlags | OPT_ATT_MANDATORY;",
                "// vulnerable line: 419: }",
                "// Line 420:                     // Finally, adding the attribute and its flags",
                "// Line 421:                     $aFieldsAtts[$sAttCode] = $iFieldFlags;",
                "// vulnerable line: 422: }",
                "// Line 423:                 break;",
                "// Line 424: ",
                "// Line 425:             case 'zlist':",
                "// Line 426:                 foreach (MetaModel::FlattenZList(MetaModel::GetZListItems($sObjectClass, $this->aFormProperties['fields'])) as $sAttCode)",
                "// Line 427:                 {",
                "// Line 428:                     $aFieldsAtts[$sAttCode] = OPT_ATT_NORMAL;",
                "// vulnerable line: 429: }",
                "// Line 430:                 break;",
                "// vulnerable line: 431: }",
                "// Line 432:         // - The layout",
                "// Line 433:         if ($this->aFormProperties['layout'] !== null)",
                "// Line 434:         {",
                "// Line 435:             // Checking if we need to render the template from twig to html in order to parse the fields",
                "// Line 436:             if ($this->aFormProperties['layout']['type'] === 'twig')",
                "// Line 437:             {",
                "// Line 438:                 if ($this->oContainer !== null)",
                "// Line 439:                 {",
                "// Line 440:                     /** @var \\Combodo\\iTop\\Portal\\Helper\\ObjectFormHandlerHelper $oObjectFormHandler */",
                "// Line 441:                     $oObjectFormHandler = $this->oContainer->get('object_form_handler');",
                "// Line 442:                     $sRendered = $oObjectFormHandler->RenderFormFromTwig(",
                "// Line 443:                         $oForm->GetId(),",
                "// Line 444:                         $this->aFormProperties['layout']['content'],",
                "// Line 445:                         array('oRenderer' => $this->oRenderer, 'oObject' => $this->oObject)",
                "// Line 446:                     );",
                "// vulnerable line: 447: }",
                "// Line 448:                 else",
                "// Line 449:                 {",
                "// Line 450:                     $sRendered = 'Form not rendered because of missing container';",
                "// vulnerable line: 451: }",
                "// vulnerable line: 452: }",
                "// Line 453:             else",
                "// Line 454:             {",
                "// Line 455:                 $sRendered = $this->aFormProperties['layout']['content'];",
                "// vulnerable line: 456: }",
                "// Line 457: ",
                "// Line 458:             // Parsing rendered template to find the fields",
                "// Line 459:             $oHtmlDocument = new DOMDocument();",
                "// Line 460:             // Note: Loading as XML instead of HTML avoid some encoding issues (eg. 'é' was transformed to '&tilde;&copy;')",
                "// Line 461:             $oHtmlDocument->loadXML('<root>'.$sRendered.'</root>');",
                "// Line 462: ",
                "// Line 463:             // Adding fields to the list",
                "// Line 464:             $oXPath = new DOMXPath($oHtmlDocument);",
                "// Line 465:             /** @var \\DOMElement $oFieldNode */",
                "// Line 466:             foreach ($oXPath->query('//div[contains(@class, \"form_field\")][@data-field-id]') as $oFieldNode)",
                "// Line 469:                 $sFieldFlags = $oFieldNode->getAttribute('data-field-flags');",
                "// Line 470:                 $iFieldFlags = OPT_ATT_NORMAL;",
                "// Line 471: ",
                "// Line 472:                 // When in a transition and no flags are specified for the field, we will retrieve its flags from DM later",
                "// Line 473:                 if ($this->IsTransitionForm() && $sFieldFlags === '')",
                "// Line 474:                 {",
                "// Line 475:                     // (Might have already been added from the \"fields\" property)",
                "// Line 476:                     if (!in_array($sFieldId, $aFieldsDMOnlyAttCodes))",
                "// Line 477:                     {",
                "// Line 478:                         $aFieldsDMOnlyAttCodes[] = $sFieldId;",
                "// vulnerable line: 479: }",
                "// Line 480:                     continue;",
                "// vulnerable line: 481: }",
                "// Line 482: ",
                "// Line 483:                 // Otherwise we proceed as usual",
                "// Line 484:                 foreach (explode(' ', $sFieldFlags) as $sFieldFlag)",
                "// Line 485:                 {",
                "// Line 486:                     if ($sFieldFlag !== '')",
                "// Line 487:                     {",
                "// Line 488:                         $sConst = 'OPT_ATT_'.strtoupper(str_replace('_', '', $sFieldFlag));",
                "// Line 489:                         if (defined($sConst))",
                "// Line 490:                         {",
                "// Line 491:                             $iFieldFlags = $iFieldFlags | constant($sConst);",
                "// vulnerable line: 492: }",
                "// Line 493:                         else",
                "// Line 494:                         {",
                "// Line 495:                             IssueLog::Error(__METHOD__.' at line '.__LINE__.' : Flag \"'.$sFieldFlag.'\" is not valid for field [@data-field-id=\"'.$sFieldId.'\"] in form[@id=\"'.$this->aFormProperties['id'].'\"]');",
                "// Line 496:                             throw new Exception('Flag \"'.$sFieldFlag.'\" is not valid for field [@data-field-id=\"'.$sFieldId.'\"] in form[@id=\"'.$this->aFormProperties['id'].'\"]');",
                "// vulnerable line: 497: }",
                "// vulnerable line: 498: }",
                "// vulnerable line: 499: }",
                "// Line 500: ",
                "// Line 501:                 // Checking if field has form_path, if not, we add it",
                "// Line 502:                 if (!$oFieldNode->hasAttribute('data-form-path'))",
                "// Line 503:                 {",
                "// Line 504:                     $oFieldNode->setAttribute('data-form-path', $oForm->GetId());",
                "// vulnerable line: 505: }",
                "// Line 506:                 // Checking if field should be displayed opened (For linked set)",
                "// Line 507:                 if ($oFieldNode->hasAttribute('data-field-opened') && ($oFieldNode->getAttribute('data-field-opened') === 'true'))",
                "// Line 508:                 {",
                "// Line 509:                     $aFieldsExtraData[$sFieldId]['opened'] = true;",
                "// vulnerable line: 510: }",
                "// Line 511:                 // Checking if field allows to ignore scope (For linked set)",
                "// Line 512:                 if ($oFieldNode->hasAttribute('data-field-ignore-scopes') && ($oFieldNode->getAttribute('data-field-ignore-scopes') === 'true'))",
                "// Line 513:                 {",
                "// Line 514:                     $aFieldsExtraData[$sFieldId]['ignore_scopes'] = true;",
                "// vulnerable line: 515: }",
                "// Line 516:                 // Checking field display mode",
                "// Line 517:                 if ($oFieldNode->hasAttribute('data-field-display-mode') && $oFieldNode->getAttribute('data-field-display-mode') !== '')",
                "// Line 518:                 {",
                "// Line 519:                     $aFieldsExtraData[$sFieldId]['display_mode'] = $oFieldNode->getAttribute('data-field-display-mode');",
                "// vulnerable line: 520: }",
                "// Line 521:                 elseif (isset($this->aFormProperties['properties']['display_mode']))",
                "// Line 522:                 {",
                "// Line 523:                     $aFieldsExtraData[$sFieldId]['display_mode'] = $this->aFormProperties['properties']['display_mode'];",
                "// vulnerable line: 524: }",
                "// Line 525:                 else",
                "// Line 526:                 {",
                "// Line 527:                     $aFieldsExtraData[$sFieldId]['display_mode'] = ApplicationHelper::FORM_DEFAULT_DISPLAY_MODE;",
                "// vulnerable line: 528: }",
                "// Line 529: ",
                "// Line 530:                 // Finally adding field to the list",
                "// Line 531:                 if (!array_key_exists($sFieldId, $aFieldsAtts))",
                "// Line 532:                 {",
                "// Line 533:                     $aFieldsAtts[$sFieldId] = OPT_ATT_NORMAL;",
                "// vulnerable line: 534: }",
                "// Line 535:                 $aFieldsAtts[$sFieldId] = $aFieldsAtts[$sFieldId] | $iFieldFlags;",
                "// vulnerable line: 536: }",
                "// Line 537: ",
                "// Line 538:             // Adding rendered template to the form renderer as the base layout",
                "// Line 539:             $this->oRenderer->SetBaseLayout($oHtmlDocument->saveHTML());",
                "// vulnerable line: 540: }",
                "// Line 541: ",
                "// Line 542:         // Merging flags from metamodel with those from the form",
                "// Line 543:         // Also, retrieving mandatory attributes from metamodel to be able to complete the form with them if necessary",
                "// Line 544:         //",
                "// Line 545:         // Note: When in a transition, we don't do this for fields that should be set from DM",
                "// Line 546:         if ($this->aFormProperties['type'] !== 'static')",
                "// Line 547:         {",
                "// Line 548:             if ($this->IsTransitionForm())",
                "// Line 549:             {",
                "// Line 550:                 $aDatamodelAttCodes = $this->oObject->GetTransitionAttributes($this->aFormProperties['stimulus_code']);",
                "// vulnerable line: 551: }",
                "// Line 552:             else",
                "// Line 553:             {",
                "// Line 554:                 $aDatamodelAttCodes = MetaModel::ListAttributeDefs($sObjectClass);",
                "// vulnerable line: 555: }",
                "// Line 556: ",
                "// Line 557:             foreach ($aDatamodelAttCodes as $sAttCode => $value)",
                "// Line 558:             {",
                "// Line 559:                 /** var AttributeDefinition $oAttDef */",
                "// Line 560: ",
                "// Line 561:                 // Skipping fields that should come from DM only as they will be process later on",
                "// Line 562:                 if (in_array($sAttCode, $aFieldsDMOnlyAttCodes))",
                "// Line 563:                 {",
                "// Line 564:                     continue;",
                "// vulnerable line: 565: }",
                "// Line 566: ",
                "// Line 567:                 // Retrieving object flags",
                "// Line 568:                 if ($this->IsTransitionForm())",
                "// Line 569:                 {",
                "// Line 570:                     // Retrieving only mandatory flag from DM when on a transition",
                "// Line 571:                     $iFieldFlags = $value & OPT_ATT_MANDATORY;",
                "// Line 572:                     $oAttDef = MetaModel::GetAttributeDef(get_class($this->oObject), $sAttCode);",
                "// vulnerable line: 573: }",
                "// Line 574:                 elseif ($this->oObject->IsNew())",
                "// Line 575:                 {",
                "// Line 576:                     $iFieldFlags = $this->oObject->GetInitialStateAttributeFlags($sAttCode);",
                "// Line 577:                     $oAttDef = $value;",
                "// vulnerable line: 578: }",
                "// Line 579:                 else",
                "// Line 580:                 {",
                "// Line 581:                     $iFieldFlags = $this->oObject->GetAttributeFlags($sAttCode);",
                "// Line 582:                     $oAttDef = $value;",
                "// vulnerable line: 583: }",
                "// Line 584: ",
                "// Line 585:                 // Skipping fields that were not specified to DM only list (garbage collector)",
                "// Line 586:                 if ($this->IsTransitionForm() && !array_key_exists($sAttCode, $aFieldsAtts))",
                "// Line 587:                 {",
                "// Line 588:                     if ((($value & OPT_ATT_MANDATORY) === OPT_ATT_MANDATORY && $oAttDef->IsNull($this->oObject->Get($sAttCode)))",
                "// Line 589:                         || (($value & OPT_ATT_MUSTPROMPT) === OPT_ATT_MUSTPROMPT)",
                "// Line 590:                         || (($value & OPT_ATT_MUSTCHANGE) === OPT_ATT_MUSTCHANGE))",
                "// Line 591:                     {",
                "// Line 592:                         if (!in_array($sAttCode, $aFieldsDMOnlyAttCodes))",
                "// Line 593:                         {",
                "// Line 594:                             $aFieldsDMOnlyAttCodes[] = $sAttCode;",
                "// vulnerable line: 595: }",
                "// vulnerable line: 596: }",
                "// Line 597:                     continue;",
                "// vulnerable line: 598: }",
                "// Line 599: ",
                "// Line 600:                 // Merging flags with those from the form definition",
                "// Line 601:                 // - If the field is in fields list",
                "// Line 602:                 if (array_key_exists($sAttCode, $aFieldsAtts))",
                "// Line 603:                 {",
                "// Line 604:                     // .. We merge them all",
                "// Line 605:                     $aFieldsAtts[$sAttCode] = $aFieldsAtts[$sAttCode] | $iFieldFlags;",
                "// vulnerable line: 606: }",
                "// Line 607:                 // - or it is mandatory and has no value",
                "// Line 608:                 if ((($iFieldFlags & OPT_ATT_MANDATORY) === OPT_ATT_MANDATORY) && ($this->oObject->Get($sAttCode) === ''))",
                "// Line 609:                 {",
                "// Line 610:                     if (!array_key_exists($sAttCode, $aFieldsAtts))",
                "// Line 611:                     {",
                "// Line 612:                         $aFieldsAtts[$sAttCode] = OPT_ATT_NORMAL;",
                "// vulnerable line: 613: }",
                "// Line 614:                     $aFieldsAtts[$sAttCode] = $aFieldsAtts[$sAttCode] | OPT_ATT_MANDATORY;",
                "// vulnerable line: 615: }",
                "// vulnerable line: 616: }",
                "// vulnerable line: 617: }",
                "// Line 618: ",
                "// Line 619:         // Adding fields with DM flags only",
                "// Line 620:         // Note: This should only happen when in a transition",
                "// Line 621:         foreach ($aFieldsDMOnlyAttCodes as $sAttCode)",
                "// Line 622:         {",
                "// Line 623:             // Retrieving object flags from DM",
                "// Line 624:             if ($this->IsTransitionForm())",
                "// Line 625:             {",
                "// Line 626:                 $aTransitionAtts = $this->oObject->GetTransitionAttributes($this->aFormProperties['stimulus_code']);",
                "// Line 627:                 $iFieldFlags = $aTransitionAtts[$sAttCode];",
                "// vulnerable line: 628: }",
                "// Line 629:             elseif ($this->oObject->IsNew())",
                "// Line 630:             {",
                "// Line 631:                 $iFieldFlags = $this->oObject->GetInitialStateAttributeFlags($sAttCode);",
                "// vulnerable line: 632: }",
                "// Line 633:             else",
                "// Line 634:             {",
                "// Line 635:                 $iFieldFlags = $this->oObject->GetAttributeFlags($sAttCode);",
                "// vulnerable line: 636: }",
                "// Line 637: ",
                "// Line 638:             // Resetting/Forcing flag to read/write",
                "// Line 639:             $aFieldsAtts[$sAttCode] = OPT_ATT_NORMAL;",
                "// Line 640:             // Checking if field should be must_change",
                "// Line 641:             if (($iFieldFlags & OPT_ATT_MUSTCHANGE) === OPT_ATT_MUSTCHANGE)",
                "// Line 642:             {",
                "// Line 643:                 $aFieldsAtts[$sAttCode] = $aFieldsAtts[$sAttCode] | OPT_ATT_MUSTCHANGE;",
                "// vulnerable line: 644: }",
                "// Line 645:             // Checking if field should be must_prompt",
                "// Line 646:             if (($iFieldFlags & OPT_ATT_MUSTPROMPT) === OPT_ATT_MUSTPROMPT)",
                "// Line 647:             {",
                "// Line 648:                 $aFieldsAtts[$sAttCode] = $aFieldsAtts[$sAttCode] | OPT_ATT_MUSTPROMPT;",
                "// vulnerable line: 649: }",
                "// Line 650:             // Checking if field should be mandatory",
                "// Line 651:             if (($iFieldFlags & OPT_ATT_MANDATORY) === OPT_ATT_MANDATORY)",
                "// Line 652:             {",
                "// Line 653:                 $aFieldsAtts[$sAttCode] = $aFieldsAtts[$sAttCode] | OPT_ATT_MANDATORY;",
                "// vulnerable line: 654: }",
                "// vulnerable line: 655: }",
                "// Line 656: ",
                "// Line 657:         // Building the form",
                "// Line 658:         foreach ($aFieldsAtts as $sAttCode => $iFieldFlags)",
                "// Line 659:         {",
                "// Line 660:             $oAttDef = MetaModel::GetAttributeDef(get_class($this->oObject), $sAttCode);",
                "// Line 661: ",
                "// Line 662:             /** @var Field $oField */",
                "// Line 663:             $oField = null;",
                "// Line 664:             if (is_callable([$oAttDef, 'MakeFormField']))",
                "// Line 665:             {",
                "// Line 666:                 $oField = $oAttDef->MakeFormField($this->oObject);",
                "// vulnerable line: 667: }",
                "// Line 668: ",
                "// Line 669:             // Failsafe for AttributeType that would not have MakeFormField and therefore could not be used in a form",
                "// Line 670:             if ($oField !== null)",
                "// Line 671:             {",
                "// Line 672:                 if ($this->sMode !== static::ENUM_MODE_VIEW)",
                "// Line 673:                 {",
                "// Line 674:                     // Field dependencies",
                "// Line 675:                     $aFieldDependencies = $oAttDef->GetPrerequisiteAttributes();",
                "// Line 676:                     if (!empty($aFieldDependencies))",
                "// Line 677:                     {",
                "// Line 678:                         $oForm->AddFieldDependencies($oField->GetId(), $aFieldDependencies);",
                "// vulnerable line: 679: }",
                "// Line 680: ",
                "// Line 681:                     // Setting the field flags",
                "// Line 682:                     // - If it's locked because slave, we force it as read only",
                "// Line 683:                     if (($iFieldFlags & OPT_ATT_SLAVE) === OPT_ATT_SLAVE)",
                "// Line 684:                     {",
                "// Line 685:                         $oField->SetReadOnly(true);",
                "// vulnerable line: 686: }",
                "// Line 687:                     // - Else if it's must change (transition), we force it as mustchange, not readonly and not hidden",
                "// Line 688:                     elseif (($iFieldFlags & OPT_ATT_MUSTCHANGE) === OPT_ATT_MUSTCHANGE && $this->IsTransitionForm())",
                "// Line 689:                     {",
                "// Line 690:                         $oField->SetMustChange(true);",
                "// Line 691:                         $oField->SetReadOnly(false);",
                "// Line 692:                         $oField->SetHidden(false);",
                "// vulnerable line: 693: }",
                "// Line 694:                     // - Else if it's must prompt (transition), we force it as not readonly and not hidden",
                "// Line 695:                     elseif (($iFieldFlags & OPT_ATT_MUSTPROMPT) === OPT_ATT_MUSTPROMPT && $this->IsTransitionForm())",
                "// Line 696:                     {",
                "// Line 697:                         $oField->SetReadOnly(false);",
                "// Line 698:                         $oField->SetHidden(false);",
                "// vulnerable line: 699: }",
                "// Line 700:                     // - Else if it wasn't mandatory or already had a value, and it's hidden, we force it as hidden",
                "// Line 701:                     elseif (($iFieldFlags & OPT_ATT_HIDDEN) === OPT_ATT_HIDDEN)",
                "// Line 702:                     {",
                "// Line 703:                         $oField->SetHidden(true);",
                "// vulnerable line: 704: }",
                "// Line 705:                     elseif (($iFieldFlags & OPT_ATT_READONLY) === OPT_ATT_READONLY)",
                "// Line 706:                     {",
                "// Line 707:                         $oField->SetReadOnly(true);",
                "// vulnerable line: 708: }",
                "// Line 709:                     else",
                "// Line 710:                     {",
                "// Line 711:                         // Normal field, use \"flags\" set by AttDef::MakeFormField()",
                "// Line 712:                         // Except if we are in a transition be cause $oAttDef doesn't know if the form is for a transition",
                "// Line 713:                         if ($this->IsTransitionForm())",
                "// Line 714:                         {",
                "// Line 715:                             $oField->SetReadOnly(false);",
                "// Line 716:                             $oField->SetHidden(false);",
                "// Line 717:                             $oField->SetMandatory(false);",
                "// vulnerable line: 718: }",
                "// vulnerable line: 719: }",
                "// Line 720: ",
                "// Line 721:                     // Finally, if it's mandatory ...",
                "// Line 722:                     if (($iFieldFlags & OPT_ATT_MANDATORY) === OPT_ATT_MANDATORY)",
                "// Line 723:                     {",
                "// Line 724:                         // ... and when in a transition, we force it as mandatory",
                "// Line 725:                         if ($this->IsTransitionForm() && $oAttDef->IsNull($this->oObject->Get($sAttCode)))",
                "// Line 726:                         {",
                "// Line 727:                             $oField->SetMandatory(true);",
                "// vulnerable line: 728: }",
                "// Line 729:                         // .. and has no value, we force it as mandatory",
                "// Line 730:                         elseif ($oAttDef->IsNull($this->oObject->Get($sAttCode)))",
                "// Line 731:                         {",
                "// Line 732:                             $oField->SetMandatory(true);",
                "// vulnerable line: 733: }",
                "// vulnerable line: 734: }",
                "// Line 735: ",
                "// Line 736:                     // Specific operation on field",
                "// Line 737:                     // - Field that require a transaction id",
                "// Line 738:                     if (in_array(get_class($oField),",
                "// Line 739:                         array('Combodo\\iTop\\Form\\Field\\TextAreaField', 'Combodo\\iTop\\Form\\Field\\CaseLogField')))",
                "// Line 740:                     {",
                "// Line 741:                         /** @var \\Combodo\\iTop\\Form\\Field\\TextAreaField|\\Combodo\\iTop\\Form\\Field\\CaseLogField $oField */",
                "// Line 742:                         $oField->SetTransactionId($oForm->GetTransactionId());",
                "// vulnerable line: 743: }",
                "// Line 744:                     // - Field that require a search endpoint",
                "// Line 745:                     if (in_array(get_class($oField),",
                "// Line 746:                         array('Combodo\\iTop\\Form\\Field\\SelectObjectField', 'Combodo\\iTop\\Form\\Field\\LinkedSetField')))",
                "// Line 747:                     {",
                "// Line 748:                         /** @var \\Combodo\\iTop\\Form\\Field\\SelectObjectField|\\Combodo\\iTop\\Form\\Field\\LinkedSetField $oField */",
                "// Line 749:                         if ($this->oContainer !== null)",
                "// Line 750:                         {",
                "// Line 751:                             $sSearchEndpoint = $this->oContainer->get('url_generator')->generate('p_object_search_generic', array(",
                "// Line 752:                                 'sTargetAttCode' => $oAttDef->GetCode(),",
                "// Line 753:                                 'sHostObjectClass' => get_class($this->oObject),",
                "// Line 754:                                 'sHostObjectId' => ($this->oObject->IsNew()) ? null : $this->oObject->GetKey(),",
                "// Line 755:                                 'ar_token' => $this->GetActionRulesToken(),",
                "// Line 756:                             ));",
                "// Line 757:                             $oField->SetSearchEndpoint($sSearchEndpoint);",
                "// vulnerable line: 758: }",
                "// vulnerable line: 759: }",
                "// Line 760:                     // - Field that require an information endpoint",
                "// Line 761:                     if (in_array(get_class($oField), array('Combodo\\iTop\\Form\\Field\\LinkedSetField')))",
                "// Line 762:                     {",
                "// Line 763:                         /** @var \\Combodo\\iTop\\Form\\Field\\LinkedSetField $oField */",
                "// Line 764:                         if ($this->oContainer !== null)",
                "// Line 765:                         {",
                "// Line 766:                             $oField->SetInformationEndpoint($this->oContainer->get('url_generator')->generate('p_object_get_information_json'));",
                "// vulnerable line: 767: }",
                "// vulnerable line: 768: }",
                "// Line 769:                     // - Field that require to apply scope on its DM OQL",
                "// Line 770:                     if (in_array(get_class($oField), array('Combodo\\iTop\\Form\\Field\\SelectObjectField')))",
                "// Line 771:                     {",
                "// Line 772:                         /** @var \\Combodo\\iTop\\Form\\Field\\SelectObjectField $oField */",
                "// Line 773:                         if ($this->oContainer !== null)",
                "// Line 774:                         {",
                "// Line 775:                             $oScopeOriginal = ($oField->GetSearch() !== null) ? $oField->GetSearch() : DBSearch::FromOQL($oAttDef->GetValuesDef()->GetFilterExpression());",
                "// Line 776: ",
                "// Line 777:                             /** @var \\DBSearch $oScopeSearch */",
                "// Line 778:                             $oScopeSearch = $this->oContainer->get('scope_validator')->GetScopeFilterForProfiles(UserRights::ListProfiles(),",
                "// Line 779:                                 $oScopeOriginal->GetClass(), UR_ACTION_READ);",
                "// Line 780:                             if ($oScopeSearch === null)",
                "// Line 781:                             {",
                "// Line 782:                                 IssueLog::Info(__METHOD__.' at line '.__LINE__.' : User #'.UserRights::GetUserId().' has no scope query for '.$oScopeOriginal->GetClass().' class.');",
                "// Line 783:                                 throw new HttpException(Response::HTTP_NOT_FOUND, Dict::S('UI:ObjectDoesNotExist'));",
                "// vulnerable line: 784: }",
                "// Line 785:                             $oScopeOriginal = $oScopeOriginal->Intersect($oScopeSearch);",
                "// Line 786:                             // Note : This is to skip the silo restriction on the final query",
                "// Line 787:                             if ($oScopeSearch->IsAllDataAllowed())",
                "// Line 788:                             {",
                "// Line 789:                                 $oScopeOriginal->AllowAllData();",
                "// vulnerable line: 790: }",
                "// Line 791:                             $oScopeOriginal->SetInternalParams(array('this' => $this->oObject));",
                "// Line 792:                             $oField->SetSearch($oScopeOriginal);",
                "// vulnerable line: 793: }",
                "// vulnerable line: 794: }",
                "// Line 795:                     // - Field that require to check if the current value is among allowed ones",
                "// Line 796:                     if (in_array(get_class($oField), array('Combodo\\iTop\\Form\\Field\\SelectObjectField')))",
                "// Line 797:                     {",
                "// Line 798:                         // Note: We can't do this in AttributeExternalKey::MakeFormField() in the Field::SetOnFinalizeCallback() because at this point we have no information about the portal scope and ignore_silos flag, hence it always applies silos.",
                "// Line 799:                         // As a workaround we have to manually check if the field's current value is among the scope",
                "// Line 800:                         $oField->VerifyCurrentValue();",
                "// vulnerable line: 801: }",
                "// Line 802:                     // - Field that require processing on their subfields",
                "// Line 803:                     if (in_array(get_class($oField), array('Combodo\\iTop\\Form\\Field\\SubFormField')))",
                "// Line 804:                     {",
                "// Line 805:                         /** @var \\Combodo\\iTop\\Form\\Field\\SubFormField $oField */",
                "// Line 806:                         $oSubForm = $oField->GetForm();",
                "// Line 807:                         if ($oAttDef->GetEditClass() === 'CustomFields')",
                "// Line 808:                         {",
                "// Line 809:                             // Retrieving only user data fields (not the metadata fields of the template)",
                "// Line 810:                             if ($oSubForm->HasField('user_data'))",
                "// Line 811:                             {",
                "// Line 822:                                         {",
                "// Line 823: ",
                "// Line 824:                                             $sSearchEndpoint = $this->oContainer->get('url_generator')->generate('p_object_search_generic',",
                "// Line 825:                                                 array(",
                "// Line 826:                                                     'sTargetAttCode' => $oAttDef->GetCode(),",
                "// Line 827:                                                     'sHostObjectClass' => get_class($this->oObject),",
                "// Line 828:                                                     'sHostObjectId' => ($this->oObject->IsNew()) ? null : $this->oObject->GetKey(),",
                "// Line 829:                                                     'ar_token' => $this->GetActionRulesToken(),",
                "// Line 830:                                                 ));",
                "// Line 831:                                             $oCustomField->SetSearchEndpoint($sSearchEndpoint);",
                "// vulnerable line: 832: }",
                "// vulnerable line: 833: }",
                "// Line 834:                                     // - Field that require to check if the current value is among allowed ones",
                "// Line 835:                                     if (in_array(get_class($oCustomField), array('Combodo\\iTop\\Form\\Field\\SelectObjectField')))",
                "// Line 836:                                     {",
                "// Line 837:                                         /** @var \\Combodo\\iTop\\Form\\Field\\SelectObjectField $oCustomField */",
                "// Line 838:                                         $oCustomField->VerifyCurrentValue();",
                "// vulnerable line: 839: }",
                "// vulnerable line: 840: }",
                "// vulnerable line: 841: }",
                "// vulnerable line: 842: }",
                "// vulnerable line: 843: }",
                "// vulnerable line: 844: }",
                "// Line 845:                 else",
                "// Line 846:                 {",
                "// Line 847:                     if (($iFieldFlags & OPT_ATT_HIDDEN) === OPT_ATT_HIDDEN)",
                "// Line 848:                     {",
                "// Line 849:                         $oField->SetHidden(true);",
                "// vulnerable line: 850: }",
                "// Line 851:                     else",
                "// Line 852:                     {",
                "// Line 853:                         $oField->SetReadOnly(true);",
                "// vulnerable line: 854: }",
                "// vulnerable line: 855: }",
                "// Line 856: ",
                "// Line 857:                 // Specific operation on field",
                "// Line 858:                 // - LinkedSet",
                "// Line 859:                 if (in_array(get_class($oField), array('Combodo\\iTop\\Form\\Field\\LinkedSetField')))",
                "// Line 860:                 {",
                "// Line 861:                     /** @var \\Combodo\\iTop\\Form\\Field\\LinkedSetField $oField */",
                "// Line 862:                     /** @var \\AttributeLinkedSetIndirect $oAttDef */",
                "// Line 863:                     //   - Overriding attributes to display",
                "// Line 864:                     if ($this->oContainer !== null)",
                "// Line 865:                     {",
                "// Line 866:                         // Note : This snippet is inspired from AttributeLinkedSet::MakeFormField()",
                "// Line 867:                         $aAttCodesToDisplay = ApplicationHelper::GetLoadedListFromClass($this->oContainer->getParameter('combodo.portal.instance.conf')['lists'],",
                "// Line 868:                             $oField->GetTargetClass(), 'list');",
                "// Line 869:                         // - Adding friendlyname attribute to the list is not already in it",
                "// Line 870:                         $sTitleAttCode = 'friendlyname';",
                "// Line 871:                         if (($sTitleAttCode !== null) && !in_array($sTitleAttCode, $aAttCodesToDisplay))",
                "// Line 872:                         {",
                "// Line 873:                             $aAttCodesToDisplay = array_merge(array($sTitleAttCode), $aAttCodesToDisplay);",
                "// vulnerable line: 874: }",
                "// Line 875:                         // - Adding attribute labels",
                "// Line 876:                         $aAttributesToDisplay = array();",
                "// Line 877:                         foreach ($aAttCodesToDisplay as $sAttCodeToDisplay)",
                "// Line 878:                         {",
                "// Line 879:                             $oAttDefToDisplay = MetaModel::GetAttributeDef($oField->GetTargetClass(), $sAttCodeToDisplay);",
                "// Line 880:                             $aAttributesToDisplay[$sAttCodeToDisplay] = $oAttDefToDisplay->GetLabel();",
                "// vulnerable line: 881: }",
                "// Line 882:                         $oField->SetAttributesToDisplay($aAttributesToDisplay);",
                "// vulnerable line: 883: }",
                "// Line 884:                     //    - Filtering links regarding scopes",
                "// Line 885:                     if ($this->oContainer !== null)",
                "// Line 886:                     {",
                "// Line 887:                         $aLimitedAccessItemIDs = array();",
                "// Line 888: ",
                "// Line 889:                         /** @var \\ormLinkSet $oFieldOriginalSet */",
                "// Line 890:                         $oFieldOriginalSet = $oField->GetCurrentValue();",
                "// Line 891:                         while ($oLink = $oFieldOriginalSet->Fetch())",
                "// Line 892:                         {",
                "// Line 893:                             if ($oField->IsIndirect())",
                "// Line 894:                             {",
                "// Line 895:                                 $iRemoteKey = $oLink->Get($oAttDef->GetExtKeyToRemote());",
                "// vulnerable line: 896: }",
                "// Line 897:                             else",
                "// Line 898:                             {",
                "// Line 899:                                 $iRemoteKey = $oLink->GetKey();",
                "// vulnerable line: 900: }",
                "// Line 901: ",
                "// Line 902:                             if (!$this->oContainer->get('security_helper')->IsActionAllowed(UR_ACTION_READ, $oField->GetTargetClass(), $iRemoteKey))",
                "// Line 903:                             {",
                "// Line 904:                                 $aLimitedAccessItemIDs[] = $iRemoteKey;",
                "// vulnerable line: 905: }",
                "// vulnerable line: 906: }",
                "// Line 907:                         $oFieldOriginalSet->rewind();",
                "// Line 908:                         $oField->SetLimitedAccessItemIDs($aLimitedAccessItemIDs);",
                "// vulnerable line: 909: }",
                "// Line 910:                     //    - Displaying as opened",
                "// Line 911:                     if (array_key_exists($sAttCode, $aFieldsExtraData) && array_key_exists('opened', $aFieldsExtraData[$sAttCode]))",
                "// Line 912:                     {",
                "// Line 913:                         $oField->SetDisplayOpened(true);",
                "// vulnerable line: 914: }",
                "// Line 915:                     //    - Displaying out of scopes items",
                "// Line 916:                     if (array_key_exists($sAttCode, $aFieldsExtraData) && array_key_exists('ignore_scopes', $aFieldsExtraData[$sAttCode]))",
                "// Line 917:                     {",
                "// Line 918:                         $oField->SetDisplayLimitedAccessItems(true);",
                "// vulnerable line: 919: }",
                "// vulnerable line: 920: }",
                "// Line 921:                 // - BlobField",
                "// Line 922:                 if (in_array(get_class($oField), array('Combodo\\iTop\\Form\\Field\\BlobField', 'Combodo\\iTop\\Form\\Field\\ImageField')))",
                "// Line 923:                 {",
                "// Line 924:                     //   - Overriding attributes to display",
                "// Line 925:                     if ($this->oContainer !== null)",
                "// Line 926:                     {",
                "// Line 927:                         // Override hardcoded URLs in ormDocument pointing to back office console",
                "// Line 928:                         $sDisplayUrl = $this->oContainer->get('url_generator')->generate('p_object_document_display', array('sObjectClass' => get_class($this->oObject), 'sObjectId' => $this->oObject->GetKey(), 'sObjectField' => $sAttCode, 'cache' => 86400));",
                "// Line 929:                         $sDownloadUrl = $this->oContainer->get('url_generator')->generate('p_object_document_download', array('sObjectClass' => get_class($this->oObject), 'sObjectId' => $this->oObject->GetKey(), 'sObjectField' => $sAttCode, 'cache' => 86400));",
                "// Line 930:                         /** @var \\Combodo\\iTop\\Form\\Field\\BlobField $oField */",
                "// Line 931:                         $oField->SetDisplayUrl($sDisplayUrl)",
                "// Line 932:                             ->SetDownloadUrl($sDownloadUrl);",
                "// vulnerable line: 933: }",
                "// vulnerable line: 934: }",
                "// Line 935: ",
                "// vulnerable line: 936: }",
                "// Line 937:             else",
                "// Line 938:             {",
                "// Line 939:                 $oField = new LabelField($sAttCode);",
                "// Line 940:                 $oField->SetReadOnly(true)",
                "// Line 941:                     ->SetHidden(false)",
                "// Line 942:                     ->SetCurrentValue('Sorry, that AttributeType is not implemented yet.')",
                "// Line 943:                     ->SetLabel($oAttDef->GetLabel());",
                "// vulnerable line: 944: }",
                "// Line 945: ",
                "// Line 946:             // Setting field display mode",
                "// Line 947:             if (array_key_exists($sAttCode, $aFieldsExtraData) && array_key_exists('display_mode', $aFieldsExtraData[$sAttCode]))",
                "// Line 948:             {",
                "// Line 949:                 $oField->SetDisplayMode($aFieldsExtraData[$sAttCode]['display_mode']);",
                "// vulnerable line: 950: }",
                "// Line 951: ",
                "// Line 952:             // Overload (AttributeDefinition) flags metadata as they have been changed while building the form",
                "// Line 953:             $oField->AddMetadata('attribute-flag-hidden', $oField->GetHidden() ? 'true' : 'false');",
                "// Line 954:             $oField->AddMetadata('attribute-flag-read-only', $oField->GetReadOnly() ? 'true' : 'false');",
                "// Line 955:             $oField->AddMetadata('attribute-flag-mandatory', $oField->GetMandatory() ? 'true' : 'false');",
                "// Line 956:             $oField->AddMetadata('attribute-flag-must-change', $oField->GetMustChange() ? 'true' : 'false');",
                "// Line 957: ",
                "// Line 958:             // Do not add hidden fields as they are of no use, if one is necessary because another depends on it, it will be automatically added.",
                "// Line 959:             // Note: We do this at the end because during the process an hidden field could have become writable if mandatory and empty for example.",
                "// Line 960:             if($oField->GetHidden() === false)",
                "// Line 961:             {",
                "// Line 962:                 $oForm->AddField($oField);",
                "// Line 963:             } else {",
                "// Line 964:                 $this->aHiddenFieldsId[]=$oField->GetId();",
                "// vulnerable line: 965: }",
                "// vulnerable line: 966: }",
                "// Line 967: ",
                "// Line 968:         // Checking dependencies to ensure that all needed fields are in the form",
                "// Line 969:         // (This is kind of a garbage collector for dependencies)",
                "// Line 970:         foreach ($oForm->GetDependencies() as $sImpactedFieldId => $aDependencies)",
                "// Line 971:         {",
                "// Line 972:             foreach ($aDependencies as $sDependencyFieldId)",
                "// Line 973:             {",
                "// Line 974:                 if (!$oForm->HasField($sDependencyFieldId))",
                "// Line 975:                 {",
                "// Line 976:                     try",
                "// Line 977:                     {",
                "// Line 978:                         $oAttDef = MetaModel::GetAttributeDef(get_class($this->oObject), $sDependencyFieldId);",
                "// Line 979:                         $oField = $oAttDef->MakeFormField($this->oObject);",
                "// Line 980:                         $oField->SetHidden(true);",
                "// Line 981: ",
                "// Line 982:                         $oForm->AddField($oField);",
                "// vulnerable line: 983: }",
                "// Line 984:                     catch (Exception $e)",
                "// Line 985:                     {",
                "// Line 986:                         // Avoid blocking a form if a RequestTemplate reference a bad attribute (e.g. :this->id)",
                "// Line 987:                         IssueLog::Error('May be a bad OQL (referencing :this->id) in a RequestTemplate causes the following error');",
                "// Line 988:                         IssueLog::Error($e);",
                "// vulnerable line: 989: }",
                "// vulnerable line: 990: }",
                "// vulnerable line: 991: }",
                "// vulnerable line: 992: }",
                "// Line 993: ",
                "// Line 994:         // Checking if the instance has attachments",
                "// Line 995:         if (class_exists('Attachment') && class_exists('AttachmentPlugIn'))",
                "// Line 996:         {",
                "// Line 997:             // Checking if the object is allowed for attachments",
                "// Line 998:             $bClassAllowed = false;",
                "// Line 999:             $aAllowedClasses = MetaModel::GetModuleSetting('itop-attachments', 'allowed_classes', array('Ticket'));",
                "// Line 1000:             foreach ($aAllowedClasses as $sAllowedClass)",
                "// Line 1001:             {",
                "// Line 1002:                 if ($this->oObject instanceof $sAllowedClass)",
                "// Line 1003:                 {",
                "// Line 1004:                     $bClassAllowed = true;",
                "// Line 1005:                     break;",
                "// vulnerable line: 1006: }",
                "// vulnerable line: 1007: }",
                "// Line 1008: ",
                "// Line 1009:             // Adding attachment field",
                "// Line 1010:             if ($bClassAllowed)",
                "// Line 1011:             {",
                "// Line 1012:                 // set id to a unique key - avoid collisions with another attribute that could exist with the name 'attachments'",
                "// Line 1013:                 $oField = new FileUploadField('attachments_plugin');",
                "// Line 1014:                 $oField->SetLabel(Dict::S('Portal:Attachments'))",
                "// Line 1015:                     ->SetUploadEndpoint($this->oContainer->get('url_generator')->generate('p_object_attachment_add'))",
                "// Line 1016:                     ->SetDownloadEndpoint($this->oContainer->get('url_generator')->generate('p_object_attachment_download',",
                "// Line 1017:                         array('sAttachmentId' => '-sAttachmentId-')))",
                "// Line 1019:                     ->SetAllowDelete($this->oContainer->getParameter('combodo.portal.instance.conf')['properties']['attachments']['allow_delete'])",
                "// Line 1020:                     ->SetObject($this->oObject);",
                "// Line 1021: ",
                "// Line 1022:                 // Checking if we can edit attachments in the current state",
                "// Line 1023:                 if (($this->sMode === static::ENUM_MODE_VIEW)",
                "// Line 1024:                     || AttachmentPlugIn::IsReadonlyState($this->oObject, $this->oObject->GetState(),",
                "// Line 1025:                         AttachmentPlugIn::ENUM_GUI_PORTALS) === true",
                "// Line 1026:                     || $oForm->GetEditableFieldCount(true) === 0)",
                "// Line 1027:                 {",
                "// Line 1028:                     $oField->SetReadOnly(true);",
                "// vulnerable line: 1029: }",
                "// Line 1030: ",
                "// Line 1031:                 // Adding attachements field in transition only if it is editable",
                "// Line 1032:                 if (!$this->IsTransitionForm() || ($this->IsTransitionForm() && !$oField->GetReadOnly()))",
                "// Line 1033:                 {",
                "// Line 1034:                     $oForm->AddField($oField);",
                "// vulnerable line: 1035: }",
                "// vulnerable line: 1036: }",
                "// vulnerable line: 1037: }",
                "// Line 1038: ",
                "// Line 1039:         $oForm->Finalize();",
                "// Line 1040:         $this->oForm = $oForm;",
                "// Line 1041:         $this->oRenderer->SetForm($this->oForm);",
                "// vulnerable line: 1042: }",
                "// Line 1043: ",
                "// Line 1044:     /**",
                "// Line 1045:      * @inheritDoc",
                "// Line 1046:      *",
                "// Line 1047:      * @throws \\CoreException",
                "// Line 1048:      * @throws \\CoreUnexpectedValue",
                "// Line 1049:      * @throws \\DeleteException",
                "// Line 1050:      * @throws \\MySQLException",
                "// Line 1051:      * @throws \\OQLException",
                "// Line 1052:      */",
                "// Line 1053:     public function OnCancel($aArgs = null)",
                "// Line 1054:     {",
                "// Line 1055:         // Ask to each field to clean itself",
                "// Line 1056:         /** @var \\Combodo\\iTop\\Form\\Field\\Field $oField */",
                "// Line 1057:         foreach ($this->oForm->GetFields() as $oField)",
                "// Line 1058:         {",
                "// Line 1059:             $oField->OnCancel();",
                "// vulnerable line: 1060: }",
                "// Line 1061:         // Then clean inline images from rich text editor such as TextareaField",
                "// Line 1062:         // Note : This could be done by TextareaField::OnCancel(), but we consider that could have been done in this form outside the field.",
                "// Line 1063:         // Also, it would require the field to know the transaction id which it doesn't as of today.",
                "// Line 1064:         InlineImage::OnFormCancel(utils::GetUploadTempId($this->oForm->GetTransactionId()));",
                "// Line 1065:         // Then clean attachments",
                "// Line 1066:         // TODO : This has to be refactored when the function from itop-attachments has been migrated into the core",
                "// Line 1067:         $this->CancelAttachments();",
                "// vulnerable line: 1068: }",
                "// Line 1069: ",
                "// Line 1070:     /**",
                "// Line 1071:      * @inheritDoc",
                "// Line 1072:      */",
                "// Line 1073:     public function CheckTransaction(&$aData)",
                "// Line 1074:     {",
                "// Line 1075:         $isTransactionValid = tils::IsTransactionValid($this->oForm->GetTransactionId(), false); //The transaction token is kept in order to preserve BC with ajax forms (the second call would fail if the token is deleted). (The GC will take care of cleaning the token for us later on)",
                "// Line 1076:         if (!$isTransactionValid) {",
                "// Line 1077:             if ($this->oObject->IsNew()) {",
                "// Line 1078:                 $sError = Dict::S('UI:Error:ObjectAlreadyCreated');",
                "// Line 1079:             } else {",
                "// Line 1080:                 $sError = Dict::S('UI:Error:ObjectAlreadyUpdated');",
                "// vulnerable line: 1081: }",
                "// Line 1082: ",
                "// Line 1083:             $aData['messages']['error'] += [",
                "// Line 1084:                 '_main' => [$sError]",
                "// Line 1085:             ];",
                "// Line 1086:             $aData['valid'] = false;",
                "// vulnerable line: 1087: }",
                "// vulnerable line: 1088: }",
                "// Line 1089: ",
                "// Line 1090:     /**",
                "// Line 1091:      * Validates the form and returns an array with the validation status and the messages.",
                "// Line 1092:      * If the form is valid, creates/updates the object.",
                "// Line 1093:      *",
                "// Line 1094:      * eg :",
                "// Line 1095:      *  array(",
                "// Line 1096:      *      'status' => true|false",
                "// Line 1097:      *      'messages' => array(",
                "// Line 1098:      *          'errors' => array()",
                "// Line 1106:      * @throws \\MySQLException",
                "// Line 1107:      * @throws \\MySQLHasGoneAwayException",
                "// Line 1108:      * @throws \\OQLException",
                "// Line 1109:      */",
                "// Line 1110:     public function OnSubmit($aArgs = null)",
                "// Line 1111:     {",
                "// Line 1112:         $aData = parent::OnSubmit($aArgs);",
                "// Line 1113: ",
                "// Line 1114:         if (! $aData['valid']) {",
                "// Line 1115:             return $aData;",
                "// vulnerable line: 1116: }",
                "// Line 1117: ",
                "// Line 1118:         // Update object and form",
                "// Line 1119:         $this->OnUpdate($aArgs);",
                "// Line 1120: ",
                "// Line 1121:         // Check if form valid",
                "// Line 1122:         if (! $this->oForm->Validate())",
                "// Line 1123:         {",
                "// Line 1124:             // Handle errors",
                "// Line 1125:             $aData['valid'] = false;",
                "// Line 1126:             $aData['messages']['error'] += $this->oForm->GetErrorMessages();",
                "// Line 1127:             return $aData;",
                "// vulnerable line: 1128: }",
                "// Line 1129: ",
                "// Line 1130:         $sObjectClass = get_class($this->oObject);",
                "// Line 1131: ",
                "// Line 1132:         try {",
                "// Line 1133:             // modification flags",
                "// Line 1134:             $bIsNew = $this->oObject->IsNew();",
                "// Line 1135:             $bWasModified = $this->oObject->IsModified();",
                "// Line 1136:             $bActivateTriggers = (!$bIsNew && $bWasModified);",
                "// Line 1137: ",
                "// Line 1138:             // Forcing allowed writing on the object if necessary. This is used in some particular cases.",
                "// vulnerable line: 1139: $bAllowWrite = $this->oContainer->get('security_helper')->IsActionAllowed($bIsNew ? UR_ACTION_CREATE : UR_ACTION_MODIFY, $sObjectClass, $this->oObject->GetKey());",
                "// Line 1140:             if ($bAllowWrite) {",
                "// Line 1141:                 $this->oObject->AllowWrite(true);",
                "// vulnerable line: 1142: }",
                "// Line 1143: ",
                "// Line 1144:             // Writing object to DB",
                "// Line 1145:             try",
                "// Line 1146:             {",
                "// Line 1147:                 $this->oObject->DBWrite();",
                "// vulnerable line: 1148: }",
                "// vulnerable line: 1149: catch (CoreCannotSaveObjectException $e) {",
                "// Line 1150:                 throw new Exception($e->getHtmlMessage());",
                "// vulnerable line: 1151: }",
                "// vulnerable line: 1152: catch (Exception $e) {",
                "// Line 1153:                 if ($bIsNew) {",
                "// Line 1154:                     throw new Exception(Dict::S('Portal:Error:ObjectCannotBeCreated'));",
                "// vulnerable line: 1155: }",
                "// Line 1156:                 throw new Exception(Dict::S('Portal:Error:ObjectCannotBeUpdated'));",
                "// vulnerable line: 1157: }",
                "// Line 1158:             // Finalizing images link to object, otherwise it will be cleaned by the GC",
                "// Line 1159:             InlineImage::FinalizeInlineImages($this->oObject);",
                "// Line 1160:             // Finalizing attachments link to object",
                "// Line 1161:             // TODO : This has to be refactored when the function from itop-attachments has been migrated into the core",
                "// Line 1162:             if (isset($aArgs['attachmentIds']))",
                "// Line 1163:             {",
                "// Line 1164:                 $this->FinalizeAttachments($aArgs['attachmentIds']);",
                "// vulnerable line: 1165: }",
                "// Line 1166: ",
                "// Line 1167:             // Checking if we have to apply a stimulus",
                "// Line 1168:             if (isset($aArgs['applyStimulus']))",
                "// Line 1169:             {",
                "// Line 1170:                 $this->oObject->ApplyStimulus($aArgs['applyStimulus']['code']);",
                "// vulnerable line: 1171: }",
                "// Line 1172:             // Activating triggers only on update",
                "// Line 1173:             if ($bActivateTriggers)",
                "// Line 1174:             {",
                "// Line 1175:                 $sTriggersQuery = $this->oContainer->getParameter('combodo.portal.instance.conf')['properties']['triggers_query'];",
                "// Line 1176:                 if ($sTriggersQuery !== null)",
                "// Line 1177:                 {",
                "// Line 1178:                     $aParentClasses = MetaModel::EnumParentClasses($sObjectClass, ENUM_PARENT_CLASSES_ALL);",
                "// Line 1179:                     $oTriggerSet = new DBObjectSet(DBObjectSearch::FromOQL($sTriggersQuery), array(),",
                "// Line 1180:                         array('parent_classes' => $aParentClasses));",
                "// Line 1181:                     /** @var \\Trigger $oTrigger */",
                "// Line 1182:                     while ($oTrigger = $oTriggerSet->Fetch())",
                "// Line 1183:                     {",
                "// Line 1184:                         try",
                "// Line 1185:                         {",
                "// Line 1186:                             $oTrigger->DoActivate($this->oObject->ToArgs('this'));",
                "// vulnerable line: 1187: }",
                "// Line 1188:                         catch(Exception $e)",
                "// Line 1189:                         {",
                "// Line 1190:                             utils::EnrichRaisedException($oTrigger, $e);",
                "// vulnerable line: 1191: }",
                "// vulnerable line: 1192: }",
                "// vulnerable line: 1193: }",
                "// vulnerable line: 1194: }",
                "// Line 1195: ",
                "// Line 1196:             // Resetting caselog fields value, otherwise the value will stay in it after submit.",
                "// Line 1197:             $this->oForm->ResetCaseLogFields();",
                "// Line 1198: ",
                "// Line 1199:             if ($bWasModified)",
                "// Line 1200:             {",
                "// Line 1201:                 //=if (isNew) because $bActivateTriggers = (!$this->oObject->IsNew() && $this->oObject->IsModified())",
                "// Line 1202:                 if(!$bActivateTriggers)",
                "// Line 1203:                 {",
                "// Line 1204:                     $aData['messages']['success'] += array(    '_main' => array(Dict::Format('UI:Title:Object_Of_Class_Created', $this->oObject->GetName(),MetaModel::GetName(get_class($this->oObject)))));",
                "// vulnerable line: 1205: }",
                "// Line 1206:                 else",
                "// Line 1207:                 {",
                "// Line 1208:                     $aData['messages']['success'] += array('_main' => array(Dict::Format('UI:Class_Object_Updated', MetaModel::GetName(get_class($this->oObject)), $this->oObject->GetName())));",
                "// vulnerable line: 1209: }",
                "// vulnerable line: 1210: }",
                "// vulnerable line: 1211: }",
                "// Line 1212:         catch (Exception $e)",
                "// Line 1213:         {",
                "// Line 1214:             $aData['valid'] = false;",
                "// Line 1215:             $aData['messages']['error'] += array('_main' => array($e->getMessage()));",
                "// Line 1216:             IssueLog::Error(__METHOD__.' at line '.__LINE__.' : '.$e->getMessage());",
                "// vulnerable line: 1217: }",
                "// Line 1218: ",
                "// Line 1219:         return $aData;",
                "// vulnerable line: 1220: }",
                "// Line 1221: ",
                "// Line 1222:     /**",
                "// Line 1223:      * Updates the form and its fields with the current values",
                "// Line 1224:      *",
                "// Line 1225:      * Note : Doesn't update the object, see ObjectFormManager::OnSubmit() for that;",
                "// Line 1226:      *",
                "// Line 1227:      * @inheritDoc",
                "// Line 1228:      *",
                "// Line 1229:      * @throws \\ArchivedObjectException",
                "// Line 1230:      * @throws \\CoreException",
                "// Line 1262:                             /** @var \\ormLinkSet $oLinkSet */",
                "// Line 1263:                             $oLinkSet = $this->oObject->Get($sAttCode);",
                "// Line 1264:                             $sLinkedClass = $oAttDef->GetLinkedClass();",
                "// Line 1265: ",
                "// Line 1266:                             // Checking links to remove",
                "// Line 1267:                             if (isset($value['remove']))",
                "// Line 1268:                             {",
                "// Line 1269:                                 foreach ($value['remove'] as $iObjKey => $aObjData)",
                "// Line 1270:                                 {",
                "// Line 1271:                                     $oLinkSet->RemoveItem($iObjKey);",
                "// vulnerable line: 1272: }",
                "// vulnerable line: 1273: }",
                "// Line 1274: ",
                "// Line 1275:                             // Checking links to add",
                "// Line 1276:                             if (isset($value['add']))",
                "// Line 1277:                             {",
                "// Line 1278:                                 foreach ($value['add'] as $iObjKey => $aObjdata)",
                "// Line 1279:                                 {",
                "// Line 1280:                                     // Creating link when linkset is indirect...",
                "// Line 1281:                                     if ($oAttDef->IsIndirect())",
                "// Line 1282:                                     {",
                "// Line 1283:                                         /** @var \\AttributeLinkedSetIndirect $oAttDef */",
                "// Line 1284:                                         $oLink = MetaModel::NewObject($sLinkedClass);",
                "// Line 1285:                                         $oLink->Set($oAttDef->GetExtKeyToRemote(), $iObjKey);",
                "// Line 1286:                                         $oLink->Set($oAttDef->GetExtKeyToMe(), $this->oObject->GetKey());",
                "// vulnerable line: 1287: }",
                "// Line 1288:                                     // ... or adding remote object when linkset id direct",
                "// Line 1289:                                     else",
                "// Line 1290:                                     {",
                "// Line 1291:                                         // Note : AllowAllData set to true here instead of checking scope's flag because we are displaying a value that has been set and validated",
                "// Line 1292:                                         $oLink = MetaModel::GetObject($sLinkedClass, $iObjKey, false, true);",
                "// vulnerable line: 1293: }",
                "// Line 1294: ",
                "// Line 1295:                                     if ($oLink !== null)",
                "// Line 1296:                                     {",
                "// Line 1297:                                         $oLinkSet->AddItem($oLink);",
                "// vulnerable line: 1298: }",
                "// vulnerable line: 1299: }",
                "// vulnerable line: 1300: }",
                "// Line 1301: ",
                "// Line 1302:                             // Checking links to modify",
                "// Line 1303:                             // TODO: Not implemented yet as we can't change lnk properties in the portal",
                "// Line 1304: ",
                "// Line 1305:                             // Setting value in the object",
                "// Line 1306:                             $this->oObject->Set($sAttCode, $oLinkSet);",
                "// Line 1307:                         } elseif ($oAttDef instanceof AttributeSet) {",
                "// Line 1308:                             /** @var \\ormSet $oTagSet */",
                "// Line 1309:                             $oOrmSet = $this->oObject->Get($sAttCode);",
                "// Line 1310:                             if (is_null($oOrmSet)) {",
                "// Line 1311:                                 $oOrmSet = new \\ormSet(get_class($this->oObject), $sAttCode, $oAttDef->GetMaxItems());",
                "// vulnerable line: 1312: }",
                "// Line 1313:                             $oOrmSet->ApplyDelta(json_decode($value, true));",
                "// Line 1314:                             $this->oObject->Set($sAttCode, $oOrmSet);",
                "// Line 1315:                         } elseif ($oAttDef instanceof AttributeDateTime) // AttributeDate is derived from AttributeDateTime",
                "// Line 1316:                         {",
                "// Line 1317:                             if ($value != null) {",
                "// Line 1318:                                 $value = $oAttDef->GetFormat()->Parse($value);",
                "// Line 1319:                                 if (is_object($value)) {",
                "// Line 1320:                                     $value = $value->format($oAttDef->GetInternalFormat());",
                "// vulnerable line: 1321: }",
                "// vulnerable line: 1322: }",
                "// Line 1323:                             $this->oObject->Set($sAttCode, $value);",
                "// vulnerable line: 1324: }",
                "// Line 1325:                         elseif ($oAttDef->IsScalar() && is_array($value))",
                "// Line 1326:                         {",
                "// Line 1327:                             $this->oObject->Set($sAttCode, current($value));",
                "// vulnerable line: 1328: }",
                "// Line 1329:                         elseif ($oAttDef->GetEditClass() === 'CustomFields')",
                "// Line 1330:                         {",
                "// Line 1331:                             // We don't update attribute as ormCustomField comparaison is not working as excepted.",
                "// Line 1332:                             // When several templates available, \"template_id\" is not sent by the portal has it is a read-only select input",
                "// Line 1333:                             // therefore, the TemplateFieldsHandler::CompareValues() doesn't work.",
                "// Line 1334:                             // This use case works in the console as it always send all fields, even hidden and read-only.",
                "// Line 1335: ",
                "// Line 1336:                             // Different templates",
                "// Line 1337:                             if (isset($value['template_id'])",
                "// Line 1338:                                 && ($value['template_id'] != $value['current_template_id']))",
                "// Line 1339:                             {",
                "// Line 1340:                                 $this->oObject->Set($sAttCode, $value);",
                "// vulnerable line: 1341: }",
                "// Line 1342:                             // Same template, different fields",
                "// Line 1343:                             elseif (isset($value['template_id'], $value['template_data'])",
                "// Line 1344:                                 && ($value['template_id'] == $value['current_template_id'])",
                "// Line 1345:                                 && ($value['template_data'] != $value['current_template_data']))",
                "// Line 1346:                             {",
                "// Line 1347:                                 $this->oObject->Set($sAttCode, $value);",
                "// vulnerable line: 1348: }",
                "// Line 1349:                             // Update of current values",
                "// Line 1350:                             elseif (isset($value['user_data']))",
                "// Line 1351:                             {",
                "// Line 1352:                                 $this->oObject->Set($sAttCode, $value);",
                "// vulnerable line: 1353: }",
                "// Line 1354:                             // Else don't update! Otherwise we might loose current value",
                "// vulnerable line: 1355: }",
                "// Line 1356:                         else",
                "// Line 1357:                         {",
                "// Line 1358:                             $this->oObject->Set($sAttCode, $value);",
                "// vulnerable line: 1359: }",
                "// vulnerable line: 1360: }",
                "// vulnerable line: 1361: }",
                "// Line 1362:                 $this->oObject->DoComputeValues();",
                "// vulnerable line: 1363: }",
                "// Line 1364: ",
                "// Line 1365:             // Then we retrieve properties of the form to build",
                "// Line 1366:             if (isset($aArgs['formProperties']))",
                "// Line 1367:             {",
                "// Line 1368:                 $aFormProperties = $aArgs['formProperties'];",
                "// vulnerable line: 1369: }",
                "// vulnerable line: 1370: }",
                "// Line 1371:         // Then we build and update form",
                "// Line 1372:         // - We update form properties only we don't have any yet. This is a fallback for cases when form properties where not among the JSON data",
                "// Line 1373:         if ($this->GetFormProperties() === null)",
                "// Line 1374:         {",
                "// Line 1375:             $this->SetFormProperties($aFormProperties);",
                "// vulnerable line: 1376: }",
                "// Line 1377:         $this->Build();",
                "// vulnerable line: 1378: }",
                "// Line 1379: ",
                "// Line 1380:     /**",
                "// Line 1381:      * This is a temporary function until the Attachment refactoring is done. It should be remove once it's done.",
                "// Line 1382:      * It is inspired from itop-attachments/main.attachments.php / UpdateAttachments()",
                "// Line 1383:      *",
                "// Line 1384:      * @param array $aAttachmentIds",
                "// Line 1385:      *",
                "// Line 1386:      * @throws \\CoreException",
                "// Line 1387:      * @throws \\CoreUnexpectedValue",
                "// Line 1388:      * @throws \\DeleteException",
                "// Line 1399:         {",
                "// Line 1400:             $oSearch = DBObjectSearch::FromOQL(\"SELECT Attachment WHERE item_class = :class AND item_id = :item_id\");",
                "// Line 1401:             $oSet = new DBObjectSet($oSearch, array(), array('class' => get_class($this->oObject), 'item_id' => $this->oObject->GetKey()));",
                "// Line 1402:             while ($oAttachment = $oSet->Fetch())",
                "// Line 1403:             {",
                "// Line 1404:                 // Remove attachments that are no longer attached to the current object",
                "// Line 1405:                 if (in_array($oAttachment->GetKey(), $aRemovedAttachmentsIds))",
                "// Line 1406:                 {",
                "// Line 1407:                     $oAttachment->DBDelete();",
                "// Line 1408:                     $aActions[] = self::GetAttachmentActionChangeOp($oAttachment, false);",
                "// vulnerable line: 1409: }",
                "// vulnerable line: 1410: }",
                "// vulnerable line: 1411: }",
                "// Line 1412: ",
                "// Line 1413:         // Processing temporary attachments",
                "// Line 1414:         $sTempId = utils::GetUploadTempId($this->oForm->GetTransactionId());",
                "// Line 1415:         $sOQL = 'SELECT Attachment WHERE temp_id = :temp_id';",
                "// Line 1416:         $oSearch = DBObjectSearch::FromOQL($sOQL);",
                "// Line 1417:         $oSet = new DBObjectSet($oSearch, array(), array('temp_id' => $sTempId));",
                "// Line 1418:         while ($oAttachment = $oSet->Fetch())",
                "// Line 1419:         {",
                "// Line 1420:             // Temp attachment removed",
                "// Line 1421:             if (in_array($oAttachment->GetKey(), $aRemovedAttachmentsIds))",
                "// Line 1422:             {",
                "// Line 1423:                 $oAttachment->DBDelete();",
                "// vulnerable line: 1424: }",
                "// Line 1425:             else",
                "// Line 1426:             {",
                "// Line 1427:                 $oAttachment->SetItem($this->oObject);",
                "// Line 1428:                 $oAttachment->Set('temp_id', '');",
                "// Line 1429:                 $oAttachment->DBUpdate();",
                "// Line 1430:                 $aActions[] = self::GetAttachmentActionChangeOp($oAttachment, true);",
                "// vulnerable line: 1431: }",
                "// vulnerable line: 1432: }",
                "// Line 1433:         ",
                "// Line 1434:         // Save changes to current object history",
                "// Line 1435:         // inspired from itop-attachments/main.attachments.php / RecordHistory",
                "// Line 1436:         foreach ($aActions as $oChangeOp)",
                "// Line 1437:         {",
                "// Line 1438:             $oChangeOp->Set(\"objclass\", get_class($this->oObject));",
                "// Line 1439:             $oChangeOp->Set(\"objkey\", $this->oObject->GetKey());",
                "// Line 1440:             $oChangeOp->DBInsertNoReload();",
                "// vulnerable line: 1441: }",
                "// vulnerable line: 1442: }",
                "// Line 1443: ",
                "// Line 1444:     /**",
                "// Line 1445:      * This is a temporary function until the Attachment refactoring is done. It should be remove once it's done.",
                "// Line 1446:      * It is inspired from itop-attachments/main.attachments.php / UpdateAttachments()",
                "// Line 1447:      *",
                "// Line 1448:      * @throws \\CoreException",
                "// Line 1449:      * @throws \\CoreUnexpectedValue",
                "// Line 1450:      * @throws \\DeleteException",
                "// Line 1451:      * @throws \\MySQLException",
                "// Line 1452:      * @throws \\OQLException",
                "// Line 1454:     protected function CancelAttachments()",
                "// Line 1455:     {",
                "// Line 1456:         // Processing temporary attachments",
                "// Line 1457:         $sTempId = utils::GetUploadTempId($this->oForm->GetTransactionId());",
                "// Line 1458:         $sOQL = 'SELECT Attachment WHERE temp_id = :temp_id';",
                "// Line 1459:         $oSearch = DBObjectSearch::FromOQL($sOQL);",
                "// Line 1460:         $oSet = new DBObjectSet($oSearch, array(), array('temp_id' => $sTempId));",
                "// Line 1461:         while ($oAttachment = $oSet->Fetch())",
                "// Line 1462:         {",
                "// Line 1463:             $oAttachment->DBDelete();",
                "// vulnerable line: 1464: }",
                "// vulnerable line: 1465: }",
                "// Line 1466: ",
                "// Line 1467:     /**",
                "// Line 1468:      * This is a temporary function until the Attachment refactoring is done. It should be remove once it's done.",
                "// Line 1469:      * It is inspired from itop-attachments/main.attachments.php / GetActionChangeOp()",
                "// Line 1470:      *",
                "// Line 1471:      * @param $oAttachment",
                "// Line 1472:      * @param bool $bCreate",
                "// Line 1473:      *",
                "// Line 1474:      * @return \\CMDBChangeOpAttachmentAdded|\\CMDBChangeOpAttachmentRemoved",
                "// Line 1475:      * @throws \\CoreException",
                "// Line 1477:      */",
                "// Line 1478:     private static function GetAttachmentActionChangeOp($oAttachment, $bCreate = true)",
                "// Line 1479:     {",
                "// Line 1480:         $oBlob = $oAttachment->Get('contents');",
                "// Line 1481:         $sFileName = $oBlob->GetFileName();",
                "// Line 1482:         if ($bCreate)",
                "// Line 1483:         {",
                "// Line 1484:             $oChangeOp = new CMDBChangeOpAttachmentAdded();",
                "// Line 1485:             $oChangeOp->Set('attachment_id', $oAttachment->GetKey());",
                "// Line 1486:             $oChangeOp->Set('filename', $sFileName);",
                "// vulnerable line: 1487: }",
                "// Line 1488:         else",
                "// Line 1489:         {",
                "// Line 1490:             $oChangeOp = new CMDBChangeOpAttachmentRemoved();",
                "// Line 1491:             $oChangeOp->Set('filename', $sFileName);",
                "// vulnerable line: 1492: }",
                "// Line 1493:         return $oChangeOp;",
                "// vulnerable line: 1494: }",
                "// Line 1495: ",
                "// Line 1496:     /**",
                "// Line 1497:      * @return array",
                "// Line 1498:      * @since 2.7.5",
                "// Line 1499:      */",
                "// Line 1500:     public function GetHiddenFieldsId()",
                "// Line 1501:     {",
                "// Line 1502:         return $this->aHiddenFieldsId;",
                "// vulnerable line: 1503: }",
                "// Line 1504: ",
                "// Line 1505:     /**",
                "// Line 1506:      * @param array $aHiddenFieldsId",
                "// Line 1507:      * @since 2.7.5",
                "// Line 1508:      */",
                "// Line 1509:     public function SetHiddenFieldsId($aHiddenFieldsId)",
                "// Line 1510:     {",
                "// Line 1511:         $this->aHiddenFieldsId = $aHiddenFieldsId;",
                "// vulnerable line: 1512: }",
                "// vulnerable line: 1513: }"
            ]
        },
        {
            "filename_of_changes": "UI.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "applicationextension.inc.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "cmdbabstract.class.inc.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "5",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "metamodel.class.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "6",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 120:     ///////////////////////////////////////////////////////////////////////////",
                "// Line 121: ",
                "// Line 122:     /** @var bool */",
                "// Line 123:     private static $m_bTraceSourceFiles = false;",
                "// Line 124:     /** @var array */",
                "// Line 125:     private static $m_aClassToFile = array();",
                "// Line 126:     /** @var string */",
                "// Line 127:     protected static $m_sEnvironment = 'production';",
                "// Line 128: ",
                "// Line 129:     /**",
                "// vulnerable line: 130: * @return array",
                "// Line 131:      */",
                "// Line 132:     public static function GetClassFiles()",
                "// Line 133:     {",
                "// Line 134:         return self::$m_aClassToFile;",
                "// Line 135:     }",
                "// Line 136: ",
                "// Line 137:     //",
                "// Line 138: ",
                "// Line 139:     /**",
                "// Line 140:      * Purpose: workaround the following limitation = PHP5 does not allow to know the class (derived",
                "// Line 682:             return (!is_null($v));",
                "// Line 683:         });",
                "// Line 684: ",
                "// Line 685:         return ((count($aNonNullRuleProperties) == 1) && (array_key_exists('disabled', $aNonNullRuleProperties)));",
                "// Line 686:     }",
                "// Line 687: ",
                "// Line 688: ",
                "// Line 689:     /**",
                "// Line 690:      * @param string $sClass",
                "// Line 691:      *",
                "// vulnerable line: 692: * @return array",
                "// Line 693:      * @throws \\CoreException",
                "// Line 694:      * @throws \\DictExceptionMissingString",
                "// Line 695:      */",
                "// Line 696:     final public static function GetNameSpec($sClass)",
                "// Line 697:     {",
                "// Line 698:         self::_check_subclass($sClass);",
                "// Line 699:         $nameRawSpec = self::$m_aClassParams[$sClass][\"name_attcode\"];",
                "// Line 700:         if (is_array($nameRawSpec)) {",
                "// Line 701:             $sFormat = Dict::S(\"Class:$sClass/Name\", '');",
                "// Line 702:             if (strlen($sFormat) == 0) {",
                "// Line 784:         }",
                "// Line 785: ",
                "// Line 786:         return reset($aAttributes);",
                "// Line 787:     }",
                "// Line 788: ",
                "// Line 789:     /**",
                "// Line 790:      * Returns the list of attributes composing the friendlyname",
                "// Line 791:      *",
                "// Line 792:      * @param $sClass",
                "// Line 793:      *",
                "// vulnerable line: 794: * @return array",
                "// Line 795:      */",
                "// Line 796:     final public static function GetFriendlyNameAttributeCodeList($sClass)",
                "// Line 797:     {",
                "// Line 798:         $aNameSpec = self::GetNameSpec($sClass);",
                "// Line 799:         $aAttributes = $aNameSpec[1];",
                "// Line 800: ",
                "// Line 801:         return $aAttributes;",
                "// Line 802:     }",
                "// Line 803: ",
                "// Line 804:     /**",
                "// Line 829:             $oStateAttrDef = self::GetAttributeDef($sClass, $sStateAttrCode);",
                "// Line 830:             $sDefaultState = $oStateAttrDef->GetDefaultValue();",
                "// Line 831:         }",
                "// Line 832: ",
                "// Line 833:         return $sDefaultState;",
                "// Line 834:     }",
                "// Line 835: ",
                "// Line 836:     /**",
                "// Line 837:      * @param string $sClass",
                "// Line 838:      *",
                "// vulnerable line: 839: * @return array",
                "// Line 840:      * @throws \\CoreException",
                "// Line 841:      */",
                "// Line 842:     final public static function GetReconcKeys($sClass)",
                "// Line 843:     {",
                "// Line 844:         self::_check_subclass($sClass);",
                "// Line 845: ",
                "// Line 846:         return self::$m_aClassParams[$sClass][\"reconc_keys\"];",
                "// Line 847:     }",
                "// Line 848: ",
                "// Line 849:     /**",
                "// Line 857:         self::_check_subclass($sClass);",
                "// Line 858: ",
                "// Line 859:         return array_key_exists(\"display_template\",",
                "// Line 860:             self::$m_aClassParams[$sClass]) ? self::$m_aClassParams[$sClass][\"display_template\"] : '';",
                "// Line 861:     }",
                "// Line 862: ",
                "// Line 863:     /**",
                "// Line 864:      * @param string $sClass",
                "// Line 865:      * @param bool $bOnlyDeclared",
                "// Line 866:      *",
                "// vulnerable line: 867: * @return array",
                "// Line 868:      * @throws \\CoreException",
                "// Line 869:      */",
                "// Line 870:     final public static function GetOrderByDefault($sClass, $bOnlyDeclared = false)",
                "// Line 871:     {",
                "// Line 872:         self::_check_subclass($sClass);",
                "// Line 873:         $aOrderBy = array_key_exists(\"order_by_default\",",
                "// Line 874:             self::$m_aClassParams[$sClass]) ? self::$m_aClassParams[$sClass][\"order_by_default\"] : array();",
                "// Line 875:         if ($bOnlyDeclared) {",
                "// Line 876:             // Used to reverse engineer the declaration of the data model",
                "// Line 877:             return $aOrderBy;",
                "// Line 911:     {",
                "// Line 912:         self::_check_subclass($sClass);",
                "// Line 913: ",
                "// Line 914:         return self::$m_aFilterOrigins[$sClass][$sAttCode];",
                "// Line 915:     }",
                "// Line 916: ",
                "// Line 917:     /**",
                "// Line 918:      * @param string $sClass",
                "// Line 919:      * @param string $sAttCode",
                "// Line 920:      *",
                "// vulnerable line: 921: * @return array",
                "// Line 922:      * @throws \\CoreException",
                "// Line 923:      * @throws \\Exception",
                "// Line 924:      */",
                "// Line 925:     final public static function GetPrerequisiteAttributes($sClass, $sAttCode)",
                "// Line 926:     {",
                "// Line 927:         self::_check_subclass($sClass);",
                "// Line 928:         $oAtt = self::GetAttributeDef($sClass, $sAttCode);",
                "// Line 929:         // Temporary implementation: later, we might be able to compute",
                "// Line 930:         // the dependencies, based on the attributes definition",
                "// Line 931:         // (allowed values and default values)",
                "// Line 987:      * @param string $sClass",
                "// Line 988:      *",
                "// Line 989:      * @return string",
                "// Line 990:      */",
                "// Line 991:     final public static function DBGetView($sClass)",
                "// Line 992:     {",
                "// Line 993:         return self::$m_sTablePrefix.\"view_\".$sClass;",
                "// Line 994:     }",
                "// Line 995: ",
                "// Line 996:     /**",
                "// vulnerable line: 997: * @return array",
                "// Line 998:      * @throws \\CoreException",
                "// Line 999:      */",
                "// Line 1000:     final public static function DBEnumTables()",
                "// Line 1001:     {",
                "// Line 1002:         // This API does not rely on our capability to query the DB and retrieve",
                "// Line 1003:         // the list of existing tables",
                "// Line 1004:         // Rather, it uses the list of expected tables, corresponding to the data model",
                "// Line 1005:         $aTables = array();",
                "// Line 1006:         foreach (self::GetClasses() as $sClass) {",
                "// Line 1007:             if (!self::HasTable($sClass)) {",
                "// Line 1015:             }",
                "// Line 1016:             $aTables[$sTable][] = $sClass;",
                "// Line 1017:         }",
                "// Line 1018: ",
                "// Line 1019:         return $aTables;",
                "// Line 1020:     }",
                "// Line 1021: ",
                "// Line 1022:     /**",
                "// Line 1023:      * @param string $sClass",
                "// Line 1024:      *",
                "// vulnerable line: 1025: * @return array",
                "// Line 1026:      * @throws \\CoreException",
                "// Line 1027:      */",
                "// Line 1028:     final public static function DBGetIndexes($sClass)",
                "// Line 1029:     {",
                "// Line 1030:         self::_check_subclass($sClass);",
                "// Line 1031:         if (isset(self::$m_aClassParams[$sClass]['indexes'])) {",
                "// Line 1032:             $aRet = self::$m_aClassParams[$sClass]['indexes'];",
                "// Line 1033:         } else {",
                "// Line 1034:             $aRet = array();",
                "// Line 1035:         }",
                "// Line 1036: ",
                "// Line 1037:         return $aRet;",
                "// Line 1038:     }",
                "// Line 1039: ",
                "// Line 1040: ",
                "// Line 1041:     /**",
                "// Line 1042:      * @param $sClass",
                "// Line 1043:      * @param $aColumns",
                "// Line 1044:      * @param $aTableInfo",
                "// Line 1045:      *",
                "// vulnerable line: 1046: * @return array",
                "// Line 1047:      * @throws \\CoreException",
                "// Line 1048:      */",
                "// Line 1049:     private static function DBGetIndexesLength($sClass, $aColumns, $aTableInfo)",
                "// Line 1050:     {",
                "// Line 1051:         $aLength = array();",
                "// Line 1052:         $aAttDefs = self::ListAttributeDefs($sClass);",
                "// Line 1053:         foreach($aColumns as $sAttSqlCode)",
                "// Line 1054:         {",
                "// Line 1055:             $iLength = null;",
                "// Line 1056:             foreach($aAttDefs as $sAttCode => $oAttDef)",
                "// Line 1207:      * @var array",
                "// Line 1208:      */",
                "// Line 1209:     private static $m_aEnumToMeta = array();",
                "// Line 1210: ",
                "// Line 1211:     /**",
                "// Line 1212:      * @param string $sClass",
                "// Line 1213:      *",
                "// Line 1214:      * @return AttributeDefinition[]",
                "// Line 1215:      * @throws \\CoreException",
                "// Line 1216:      */",
                "// vulnerable line: 1217: final static public function ListAttributeDefs($sClass)",
                "// Line 1218:     {",
                "// Line 1219:         self::_check_subclass($sClass);",
                "// Line 1220:         return self::$m_aAttribDefs[$sClass];",
                "// Line 1221:     }",
                "// Line 1222: ",
                "// Line 1223:     /**",
                "// Line 1224:      * @param string $sClass",
                "// Line 1225:      *",
                "// vulnerable line: 1226: * @return array",
                "// Line 1227:      * @throws \\CoreException",
                "// Line 1228:      */",
                "// Line 1229:     final public static function GetAttributesList($sClass)",
                "// Line 1230:     {",
                "// Line 1231:         self::_check_subclass($sClass);",
                "// Line 1232:         return array_keys(self::$m_aAttribDefs[$sClass]);",
                "// Line 1233:     }",
                "// Line 1234: ",
                "// Line 1235:     /**",
                "// Line 1236:      * @deprecated do not use : dead code, will be removed in the future",
                "// Line 1237:      *",
                "// Line 1238:      * @param string $sClass",
                "// Line 1239:      *",
                "// vulnerable line: 1240: * @return array",
                "// Line 1241:      * @throws \\CoreException",
                "// Line 1242:      */",
                "// Line 1243:     final public static function GetFiltersList($sClass)",
                "// Line 1244:     {",
                "// Line 1245:         self::_check_subclass($sClass);",
                "// Line 1246:         return array_keys(self::$m_aFilterDefs[$sClass]);",
                "// Line 1247:     }",
                "// Line 1248: ",
                "// Line 1249:     /**",
                "// Line 1250:      * @param string $sClass",
                "// Line 1251:      *",
                "// vulnerable line: 1252: * @return array",
                "// Line 1253:      * @throws \\CoreException",
                "// Line 1254:      */",
                "// Line 1255:     final public static function GetKeysList($sClass)",
                "// Line 1256:     {",
                "// Line 1257:         self::_check_subclass($sClass);",
                "// Line 1258:         $aExtKeys = array();",
                "// Line 1259:         foreach(self::$m_aAttribDefs[$sClass] as $sAttCode => $oAttDef)",
                "// Line 1260:         {",
                "// Line 1261:             if ($oAttDef->IsExternalKey())",
                "// Line 1262:             {",
                "// Line 1416:         }",
                "// Line 1417:         else",
                "// Line 1418:         {",
                "// Line 1419:             throw new Exception(\"Unknown attribute $sAttCode from class $sClass\");",
                "// Line 1420:         }",
                "// Line 1421:     }",
                "// Line 1422: ",
                "// Line 1423:     /**",
                "// Line 1424:      * @param string $sClass",
                "// Line 1425:      *",
                "// vulnerable line: 1426: * @return array",
                "// Line 1427:      * @throws \\CoreException",
                "// Line 1428:      */",
                "// Line 1429:     final public static function GetExternalKeys($sClass)",
                "// Line 1430:     {",
                "// Line 1431:         $aExtKeys = array();",
                "// Line 1432:         foreach (self::ListAttributeDefs($sClass) as $sAttCode => $oAtt) {",
                "// Line 1433:             if ($oAtt->IsExternalKey()) {",
                "// Line 1434:                 $aExtKeys[$sAttCode] = $oAtt;",
                "// Line 1435:             }",
                "// Line 1436:         }",
                "// Line 1437: ",
                "// Line 1438:         return $aExtKeys;",
                "// Line 1439:     }",
                "// Line 1440: ",
                "// Line 1441:     /**",
                "// Line 1442:      * @param string $sClass",
                "// Line 1443:      *",
                "// vulnerable line: 1444: * @return array",
                "// Line 1445:      * @throws \\CoreException",
                "// Line 1446:      */",
                "// Line 1447:     final public static function GetLinkedSets($sClass)",
                "// Line 1448:     {",
                "// Line 1449:         $aLinkedSets = array();",
                "// Line 1450:         foreach (self::ListAttributeDefs($sClass) as $sAttCode => $oAtt) {",
                "// Line 1451:             if (is_subclass_of($oAtt, 'AttributeLinkedSet')) {",
                "// Line 1452:                 $aLinkedSets[$sAttCode] = $oAtt;",
                "// Line 1453:             }",
                "// Line 1454:         }",
                "// Line 1534:             self::$m_aTrackForwardCache[$sClass] = $aRes;",
                "// Line 1535:         }",
                "// Line 1536: ",
                "// Line 1537:         return self::$m_aTrackForwardCache[$sClass];",
                "// Line 1538:     }",
                "// Line 1539: ",
                "// Line 1540:     /**",
                "// Line 1541:      * @param string $sClass",
                "// Line 1542:      * @param string $sAttCode",
                "// Line 1543:      *",
                "// vulnerable line: 1544: * @return array",
                "// Line 1545:      */",
                "// Line 1546:     final public static function ListMetaAttributes($sClass, $sAttCode)",
                "// Line 1547:     {",
                "// Line 1548:         if (isset(self::$m_aEnumToMeta[$sClass][$sAttCode])) {",
                "// Line 1549:             $aRet = self::$m_aEnumToMeta[$sClass][$sAttCode];",
                "// Line 1550:         } else {",
                "// Line 1551:             $aRet = array();",
                "// Line 1552:         }",
                "// Line 1553: ",
                "// Line 1554:         return $aRet;",
                "// Line 1695:             return $oFilter->GetDescription();",
                "// Line 1696:         }",
                "// Line 1697:         return \"\";",
                "// Line 1698:     }",
                "// Line 1699: ",
                "// Line 1700:     /**",
                "// Line 1701:      * @deprecated do not use : dead code, will be removed in the future",
                "// Line 1702:      * @param string $sClass",
                "// Line 1703:      * @param string $sFilterCode",
                "// Line 1704:      *",
                "// vulnerable line: 1705: * @return array",
                "// Line 1706:      * @throws \\CoreException",
                "// Line 1707:      */",
                "// Line 1708:     public static function GetFilterOperators($sClass, $sFilterCode)",
                "// Line 1709:     {",
                "// Line 1710:         $oFilter = self::GetClassFilterDef($sClass, $sFilterCode);",
                "// Line 1711:         if ($oFilter)",
                "// Line 1712:         {",
                "// Line 1713:             return $oFilter->GetOperators();",
                "// Line 1714:         }",
                "// Line 1715:         return array();",
                "// Line 1716:     }",
                "// Line 1717: ",
                "// Line 1718:     /**",
                "// Line 1719:      * @deprecated do not use : dead code, will be removed in the future",
                "// Line 1720:      * @param string $sClass",
                "// Line 1721:      * @param string $sFilterCode",
                "// Line 1722:      *",
                "// vulnerable line: 1723: * @return array",
                "// Line 1724:      * @throws \\CoreException",
                "// Line 1725:      */",
                "// Line 1726:     public static function GetFilterLooseOperator($sClass, $sFilterCode)",
                "// Line 1727:     {",
                "// Line 1728:         $oFilter = self::GetClassFilterDef($sClass, $sFilterCode);",
                "// Line 1729:         if ($oFilter)",
                "// Line 1730:         {",
                "// Line 1731:             return $oFilter->GetLooseOperator();",
                "// Line 1732:         }",
                "// Line 1733: ",
                "// Line 1772:     /**",
                "// Line 1773:      * array of (\"classname\" => array of \"listcode\" => list)",
                "// Line 1774:      * list may be an array of attcode / fltcode",
                "// Line 1775:      * list may be an array of \"groupname\" => (array of attcode / fltcode)",
                "// Line 1776:      *",
                "// Line 1777:      * @var array",
                "// Line 1778:      */",
                "// Line 1779:     private static $m_aListData = array();",
                "// Line 1780: ",
                "// Line 1781:     /**",
                "// vulnerable line: 1782: * @return array",
                "// Line 1783:      */",
                "// Line 1784:     public static function EnumZLists()",
                "// Line 1785:     {",
                "// Line 1786:         return array_keys(self::$m_aListInfos);",
                "// Line 1787:     }",
                "// Line 1788: ",
                "// Line 1789:     /**",
                "// Line 1790:      * @param string $sListCode",
                "// Line 1791:      *",
                "// Line 1792:      * @return mixed",
                "// Line 1793:      */",
                "// Line 1794:     final static public function GetZListInfo($sListCode)",
                "// Line 1795:     {",
                "// Line 1796:         return self::$m_aListInfos[$sListCode];",
                "// Line 1797:     }",
                "// Line 1798: ",
                "// Line 1799:     /**",
                "// Line 1800:      * @param string $sClass",
                "// Line 1801:      * @param string $sListCode",
                "// Line 1802:      *",
                "// vulnerable line: 1803: * @return array",
                "// Line 1804:      */",
                "// Line 1805:     public static function GetZListItems($sClass, $sListCode)",
                "// Line 1806:     {",
                "// Line 1807:         if (array_key_exists($sClass, self::$m_aListData))",
                "// Line 1808:         {",
                "// Line 1809:             if (array_key_exists($sListCode, self::$m_aListData[$sClass]))",
                "// Line 1810:             {",
                "// Line 1811:                 return self::$m_aListData[$sClass][$sListCode];",
                "// Line 1812:             }",
                "// Line 1813:         }",
                "// Line 1896:         {",
                "// Line 1897:             $aResult[] = 'depends on';",
                "// Line 1898:         }",
                "// Line 1899: ",
                "// Line 1900:         return $aResult;",
                "// Line 1901:     }",
                "// Line 1902: ",
                "// Line 1903:     /**",
                "// Line 1904:      * @param string $sClass",
                "// Line 1905:      *",
                "// vulnerable line: 1906: * @return array",
                "// Line 1907:      * @throws \\CoreException",
                "// Line 1908:      * @throws \\Exception",
                "// Line 1909:      * @throws \\OQLException",
                "// Line 1910:      */",
                "// Line 1911:     public static function EnumRelationsEx($sClass)",
                "// Line 1912:     {",
                "// Line 1913:         $aRelationInfo = array_keys(self::$m_aRelationInfos);",
                "// Line 1914:         // Return only the relations that have a meaning (i.e. for which at least one query is defined)",
                "// Line 1915:         // for the specified class",
                "// Line 1916:         $aClassRelations = array();",
                "// Line 1978:             $sKey = \"Relation:$sRelCode/UpStream\";",
                "// Line 1979:             $sLegacy = Dict::S(\"Relation:$sRelCode/VerbDown\", $sKey);",
                "// Line 1980:         }",
                "// Line 1981: ",
                "// Line 1982:         return Dict::S($sKey, $sLegacy);",
                "// Line 1983:     }",
                "// Line 1984: ",
                "// Line 1985:     /**",
                "// Line 1986:      * @param string $sRelCode",
                "// Line 1987:      *",
                "// vulnerable line: 1988: * @return array",
                "// Line 1989:      * @throws \\CoreException",
                "// Line 1990:      * @throws \\Exception",
                "// Line 1991:      * @throws \\OQLException",
                "// Line 1992:      */",
                "// Line 1993:     protected static function ComputeRelationQueries($sRelCode)",
                "// Line 1994:     {",
                "// Line 1995:         $bHasLegacy = false;",
                "// Line 1996:         $aQueries = array();",
                "// Line 1997:         foreach(self::GetClasses() as $sClass)",
                "// Line 1998:         {",
                "// Line 2231:         }",
                "// Line 2232: ",
                "// Line 2233:         return $aQueries;",
                "// Line 2234:     }",
                "// Line 2235: ",
                "// Line 2236:     /**",
                "// Line 2237:      * @param string $sClass",
                "// Line 2238:      * @param string $sRelCode",
                "// Line 2239:      * @param bool $bDown",
                "// Line 2240:      *",
                "// vulnerable line: 2241: * @return array",
                "// Line 2242:      * @throws \\CoreException",
                "// Line 2243:      * @throws \\Exception",
                "// Line 2244:      * @throws \\OQLException",
                "// Line 2245:      */",
                "// Line 2246:     public static function EnumRelationQueries($sClass, $sRelCode, $bDown = true)",
                "// Line 2247:     {",
                "// Line 2248:         static $aQueries = array();",
                "// Line 2249:         if (!isset($aQueries[$sRelCode]))",
                "// Line 2250:         {",
                "// Line 2251:             $aQueries[$sRelCode] = self::ComputeRelationQueries($sRelCode);",
                "// Line 2332:     /**",
                "// Line 2333:      * array of (\"classname\" => array of (\"statcode_from\"=>array of (\"stimuluscode\" => array('target_state'=>..., 'actions'=>array of handlers procs, 'user_restriction'=>TBD)))",
                "// Line 2334:      *",
                "// Line 2335:      * @var array",
                "// Line 2336:      */",
                "// Line 2337:     private static $m_aTransitions = array();",
                "// Line 2338: ",
                "// Line 2339:     /**",
                "// Line 2340:      * @param string $sClass",
                "// Line 2341:      *",
                "// vulnerable line: 2342: * @return array",
                "// Line 2343:      */",
                "// Line 2344:     public static function EnumStates($sClass)",
                "// Line 2345:     {",
                "// Line 2346:         if (array_key_exists($sClass, self::$m_aStates))",
                "// Line 2347:         {",
                "// Line 2348:             return self::$m_aStates[$sClass];",
                "// Line 2349:         }",
                "// Line 2350:         else",
                "// Line 2351:         {",
                "// Line 2352:             return array();",
                "// Line 2383:         }",
                "// Line 2384:         else",
                "// Line 2385:         {",
                "// Line 2386:             return array();",
                "// Line 2387:         }",
                "// Line 2388:     }",
                "// Line 2389: ",
                "// Line 2390:     /**",
                "// Line 2391:      * @param string $sClass",
                "// Line 2392:      *",
                "// vulnerable line: 2393: * @return array",
                "// Line 2394:      */",
                "// Line 2395:     public static function EnumStimuli($sClass)",
                "// Line 2396:     {",
                "// Line 2397:         if (array_key_exists($sClass, self::$m_aStimuli))",
                "// Line 2398:         {",
                "// Line 2399:             return self::$m_aStimuli[$sClass];",
                "// Line 2400:         }",
                "// Line 2401:         else",
                "// Line 2402:         {",
                "// Line 2403:             return array();",
                "// Line 2431:     {",
                "// Line 2432:         $sStateAttrCode = self::GetStateAttributeCode($sClass);",
                "// Line 2433:         $oAttDef = self::GetAttributeDef($sClass, $sStateAttrCode);",
                "// Line 2434:         return $oAttDef->GetValueDescription($sStateValue);",
                "// Line 2435:     }",
                "// Line 2436: ",
                "// Line 2437:     /**",
                "// Line 2438:      * @param string $sClass",
                "// Line 2439:      * @param string $sStateCode",
                "// Line 2440:      *",
                "// vulnerable line: 2441: * @return array",
                "// Line 2442:      */",
                "// Line 2443:     public static function EnumTransitions($sClass, $sStateCode)",
                "// Line 2444:     {",
                "// Line 2445:         if (array_key_exists($sClass, self::$m_aTransitions))",
                "// Line 2446:         {",
                "// Line 2447:             if (array_key_exists($sStateCode, self::$m_aTransitions[$sClass]))",
                "// Line 2448:             {",
                "// Line 2449:                 return self::$m_aTransitions[$sClass][$sStateCode];",
                "// Line 2450:             }",
                "// Line 2451:         }",
                "// Line 2455:     /**",
                "// Line 2456:      * Return an hash array of the possible attribute flags (code => value)",
                "// Line 2457:      *",
                "// Line 2458:      * Example:",
                "// Line 2459:      * [",
                "// Line 2460:      *  \"read_only\" => OPT_ATT_READONLY,",
                "// Line 2461:      *  \"mandatory\" => OPT_ATT_MANDATORY,",
                "// Line 2462:      *  ...",
                "// Line 2463:      * ]",
                "// Line 2464:      *",
                "// vulnerable line: 2465: * @return array",
                "// Line 2466:      * @since 2.7.0",
                "// Line 2467:      */",
                "// Line 2468:     public static function EnumPossibleAttributeFlags()",
                "// Line 2469:     {",
                "// Line 2470:         return $aPossibleAttFlags = array(",
                "// Line 2471:             'normal' => OPT_ATT_NORMAL,",
                "// Line 2472:             'hidden' => OPT_ATT_HIDDEN,",
                "// Line 2473:             'read_only' => OPT_ATT_READONLY,",
                "// Line 2474:             'mandatory' => OPT_ATT_MANDATORY,",
                "// Line 2475:             'must_change' => OPT_ATT_MUSTCHANGE,",
                "// Line 3276:     public static function Init()",
                "// Line 3277:     {",
                "// Line 3278:         // In fact it is an ABSTRACT function, but this is not compatible with the fact that it is STATIC (error in E_STRICT interpretation)",
                "// Line 3279:     }",
                "// Line 3280: ",
                "// Line 3281:     /**",
                "// Line 3282:      * To be overloaded by biz model declarations",
                "// Line 3283:      *",
                "// Line 3284:      * @param string $sRelCode",
                "// Line 3285:      *",
                "// vulnerable line: 3286: * @return array",
                "// Line 3287:      */",
                "// Line 3288:     public static function GetRelationQueries($sRelCode)",
                "// Line 3289:     {",
                "// Line 3290:         // In fact it is an ABSTRACT function, but this is not compatible with the fact that it is STATIC (error in E_STRICT interpretation)",
                "// Line 3291:         return array();",
                "// Line 3292:     }",
                "// Line 3293: ",
                "// Line 3294:     /**",
                "// Line 3295:      * @param array $aParams",
                "// Line 3296:      *",
                "// Line 3337:         self::$m_aAttribDefs[$sClass] = array();",
                "// Line 3338:         self::$m_aAttribOrigins[$sClass] = array();",
                "// Line 3339:         self::$m_aFilterDefs[$sClass] = array();",
                "// Line 3340:         self::$m_aFilterOrigins[$sClass] = array();",
                "// Line 3341:     }",
                "// Line 3342: ",
                "// Line 3343:     /**",
                "// Line 3344:      * @param array $aSource1",
                "// Line 3345:      * @param array $aSource2",
                "// Line 3346:      *",
                "// vulnerable line: 3347: * @return array",
                "// Line 3348:      */",
                "// Line 3349:     protected static function object_array_mergeclone($aSource1, $aSource2)",
                "// Line 3350:     {",
                "// Line 3351:         $aRes = array();",
                "// Line 3352:         foreach($aSource1 as $key => $object)",
                "// Line 3353:         {",
                "// Line 3354:             $aRes[$key] = clone $object;",
                "// Line 3355:         }",
                "// Line 3356:         foreach($aSource2 as $key => $object)",
                "// Line 3357:         {",
                "// Line 3549:                 {",
                "// Line 3550:                     unset($aItems[$iFoo]);",
                "// Line 3551:                 }",
                "// Line 3552:             }",
                "// Line 3553:         }",
                "// Line 3554:     }",
                "// Line 3555: ",
                "// Line 3556:     /**",
                "// Line 3557:      * @param array $aList",
                "// Line 3558:      *",
                "// vulnerable line: 3559: * @return array",
                "// Line 3560:      */",
                "// Line 3561:     public static function FlattenZList($aList)",
                "// Line 3562:     {",
                "// Line 3563:         $aResult = array();",
                "// Line 3564:         foreach($aList as $value)",
                "// Line 3565:         {",
                "// Line 3566:             if (!is_array($value))",
                "// Line 3567:             {",
                "// Line 3568:                 $aResult[] = $value;",
                "// Line 3569:             }",
                "// Line 3627:      */",
                "// Line 3628:     public static function Init_DefineHighlightScale($aHighlightScale)",
                "// Line 3629:     {",
                "// Line 3630:         $sTargetClass = self::GetCallersPHPClass(\"Init\");",
                "// Line 3631:         self::$m_aHighlightScales[$sTargetClass] = $aHighlightScale;",
                "// Line 3632:     }",
                "// Line 3633: ",
                "// Line 3634:     /**",
                "// Line 3635:      * @param string $sTargetClass",
                "// Line 3636:      *",
                "// vulnerable line: 3637: * @return array",
                "// Line 3638:      */",
                "// Line 3639:     public static function GetHighlightScale($sTargetClass)",
                "// Line 3640:     {",
                "// Line 3641:         $aScale = array();",
                "// Line 3642:         $aParentScale = array();",
                "// Line 3643:         $sParentClass = self::GetParentPersistentClass($sTargetClass);",
                "// Line 3644:         if (!empty($sParentClass))",
                "// Line 3645:         {",
                "// Line 3646:             // inherit the scale from the parent class",
                "// Line 3647:             $aParentScale = self::GetHighlightScale($sParentClass);",
                "// Line 3868:             if ($oAtt->IsHierarchicalKey())",
                "// Line 3869:             {",
                "// Line 3870:                 $sHierarchicalKeyCode = $sAttCode; // Found the hierarchical key, no need to continue",
                "// Line 3871:                 break;",
                "// Line 3872:             }",
                "// Line 3873:         }",
                "// Line 3874:         return $sHierarchicalKeyCode;",
                "// Line 3875:     }",
                "// Line 3876: ",
                "// Line 3877:     /**",
                "// vulnerable line: 3878: * @return array",
                "// Line 3879:      */",
                "// Line 3880:     public static function EnumRootClasses()",
                "// Line 3881:     {",
                "// Line 3882:         return array_unique(self::$m_aRootClasses);",
                "// Line 3883:     }",
                "// Line 3884: ",
                "// Line 3885:     /**",
                "// Line 3886:      * @param string $sClass",
                "// Line 3887:      * @param int $iOption",
                "// Line 3888:      * @param bool $bRootFirst",
                "// Line 3889:      *",
                "// vulnerable line: 3890: * @return array",
                "// Line 3891:      * @throws \\CoreException",
                "// Line 3892:      */",
                "// Line 3893:     public static function EnumParentClasses($sClass, $iOption = ENUM_PARENT_CLASSES_EXCLUDELEAF, $bRootFirst = true)",
                "// Line 3894:     {",
                "// Line 3895:         self::_check_subclass($sClass);",
                "// Line 3896:         if ($bRootFirst)",
                "// Line 3897:         {",
                "// Line 3898:             $aRes = self::$m_aParentClasses[$sClass];",
                "// Line 3899:         }",
                "// Line 3900:         else",
                "// Line 3915:             }",
                "// Line 3916:         }",
                "// Line 3917: ",
                "// Line 3918:         return $aRes;",
                "// Line 3919:     }",
                "// Line 3920: ",
                "// Line 3921:     /**",
                "// Line 3922:      * @param string $sClass",
                "// Line 3923:      * @param int $iOption one of ENUM_CHILD_CLASSES_EXCLUDETOP, ENUM_CHILD_CLASSES_ALL",
                "// Line 3924:      *",
                "// vulnerable line: 3925: * @return array",
                "// Line 3926:      * @throws \\CoreException",
                "// Line 3927:      */",
                "// Line 3928:     public static function EnumChildClasses($sClass, $iOption = ENUM_CHILD_CLASSES_EXCLUDETOP)",
                "// Line 3929:     {",
                "// Line 3930:         self::_check_subclass($sClass);",
                "// Line 3931: ",
                "// Line 3932:         $aRes = self::$m_aChildClasses[$sClass];",
                "// Line 3933:         if ($iOption != ENUM_CHILD_CLASSES_EXCLUDETOP)",
                "// Line 3934:         {",
                "// Line 3935:             // Add it to the list",
                "// Line 3936:             $aRes[] = $sClass;",
                "// Line 3937:         }",
                "// Line 3938: ",
                "// Line 3939:         return $aRes;",
                "// Line 3940:     }",
                "// Line 3941: ",
                "// Line 3942:     /**",
                "// vulnerable line: 3943: * @return array",
                "// Line 3944:      * @throws \\CoreException",
                "// Line 3945:      */",
                "// Line 3946:     public static function EnumArchivableClasses()",
                "// Line 3947:     {",
                "// Line 3948:         $aRes = array();",
                "// Line 3949:         foreach(self::GetClasses() as $sClass)",
                "// Line 3950:         {",
                "// Line 3951:             if (self::IsArchivable($sClass))",
                "// Line 3952:             {",
                "// Line 3953:                 $aRes[] = $sClass;",
                "// Line 3954:             }",
                "// Line 3955:         }",
                "// Line 3956: ",
                "// Line 3957:         return $aRes;",
                "// Line 3958:     }",
                "// Line 3959: ",
                "// Line 3960:     /**",
                "// Line 3961:      * @param bool $bRootClassesOnly",
                "// Line 3962:      *",
                "// vulnerable line: 3963: * @return array",
                "// Line 3964:      * @throws \\CoreException",
                "// Line 3965:      */",
                "// Line 3966:     public static function EnumObsoletableClasses($bRootClassesOnly = true)",
                "// Line 3967:     {",
                "// Line 3968:         $aRes = array();",
                "// Line 3969:         foreach(self::GetClasses() as $sClass)",
                "// Line 3970:         {",
                "// Line 3971:             if (self::IsObsoletable($sClass))",
                "// Line 3972:             {",
                "// Line 3973:                 if ($bRootClassesOnly && !static::IsRootClass($sClass))",
                "// Line 3984:      * @param string $sClass",
                "// Line 3985:      *",
                "// Line 3986:      * @return bool",
                "// Line 3987:      */",
                "// Line 3988:     public static function HasChildrenClasses($sClass)",
                "// Line 3989:     {",
                "// Line 3990:         return (count(self::$m_aChildClasses[$sClass]) > 0);",
                "// Line 3991:     }",
                "// Line 3992: ",
                "// Line 3993:     /**",
                "// vulnerable line: 3994: * @return array",
                "// Line 3995:      */",
                "// Line 3996:     public static function EnumCategories()",
                "// Line 3997:     {",
                "// Line 3998:         return array_keys(self::$m_Category2Class);",
                "// Line 3999:     }",
                "// Line 4000: ",
                "// Line 4001:     // Note: use EnumChildClasses to take the compound objects into account",
                "// Line 4002: ",
                "// Line 4003:     /**",
                "// Line 4004:      * @param string $sClass",
                "// Line 4005:      *",
                "// vulnerable line: 4006: * @return array",
                "// Line 4007:      * @throws \\CoreException",
                "// Line 4008:      */",
                "// Line 4009:     public static function GetSubclasses($sClass)",
                "// Line 4010:     {",
                "// Line 4011:         self::_check_subclass($sClass);",
                "// Line 4012:         $aSubClasses = array();",
                "// Line 4013:         foreach(self::$m_aClassParams as $sSubClass => $foo)",
                "// Line 4014:         {",
                "// Line 4015:             if (is_subclass_of($sSubClass, $sClass))",
                "// Line 4016:             {",
                "// Line 4018:             }",
                "// Line 4019:         }",
                "// Line 4020: ",
                "// Line 4021:         return $aSubClasses;",
                "// Line 4022:     }",
                "// Line 4023: ",
                "// Line 4024:     /**",
                "// Line 4025:      * @param string $sCategories",
                "// Line 4026:      * @param bool $bStrict",
                "// Line 4027:      *",
                "// vulnerable line: 4028: * @return array",
                "// Line 4029:      * @throws \\CoreException",
                "// Line 4030:      */",
                "// Line 4031:     public static function GetClasses($sCategories = '', $bStrict = false)",
                "// Line 4032:     {",
                "// Line 4033:         $aCategories = explode(',', $sCategories);",
                "// Line 4034:         $aClasses = array();",
                "// Line 4035:         foreach($aCategories as $sCategory)",
                "// Line 4036:         {",
                "// Line 4037:             $sCategory = trim($sCategory);",
                "// Line 4038:             if (strlen($sCategory) == 0)",
                "// Line 4082:     /**",
                "// Line 4083:      * Normalizes query arguments and adds magic parameters:",
                "// Line 4084:      * - current_contact_id",
                "// Line 4085:      * - current_contact (DBObject)",
                "// Line 4086:      * - current_user (DBObject)",
                "// Line 4087:      *",
                "// Line 4088:      * @param array $aArgs Context arguments (some can be persistent objects)",
                "// Line 4089:      * @param array $aMoreArgs Other query parameters",
                "// Line 4090:      * @param array $aExpectedArgs variables present in the query",
                "// Line 4091:      *",
                "// vulnerable line: 4092: * @return array",
                "// Line 4093:      */",
                "// Line 4094:     public static function PrepareQueryArguments($aArgs, $aMoreArgs = array(), $aExpectedArgs = null)",
                "// Line 4095:     {",
                "// Line 4096:         $aScalarArgs = array();",
                "// Line 4097:         if (is_null($aExpectedArgs) || count($aExpectedArgs) > 0 || count($aMoreArgs)>0)",
                "// Line 4098:         {",
                "// Line 4099:             foreach (array_merge($aArgs, $aMoreArgs) as $sArgName => $value)",
                "// Line 4100:             {",
                "// Line 4101:                 if (self::IsValidObject($value))",
                "// Line 4102:                 {",
                "// Line 4198:                 }",
                "// Line 4199:             }",
                "// Line 4200:         }",
                "// Line 4201: ",
                "// Line 4202:         return $aPlaceholders;",
                "// Line 4203:     }",
                "// Line 4204: ",
                "// Line 4205:     /**",
                "// Line 4206:      * @param \\DBSearch $oFilter",
                "// Line 4207:      *",
                "// vulnerable line: 4208: * @return array",
                "// Line 4209:      */",
                "// Line 4210:     public static function MakeModifierProperties($oFilter)",
                "// Line 4211:     {",
                "// Line 4212:         // Compute query modifiers properties (can be set in the search itself, by the context, etc.)",
                "// Line 4213:         //",
                "// Line 4214:         $aModifierProperties = array();",
                "// Line 4215:         /**",
                "// Line 4216:          * @var string $sPluginClass",
                "// Line 4217:          * @var iQueryModifier $oQueryModifier",
                "// Line 4218:          */",
                "// Line 5133:                     {",
                "// Line 5134:                         // forces a refresh of cached information",
                "// Line 5135:                         CMDBSource::CreateTable($sQuery);",
                "// Line 5136:                     }",
                "// Line 5137:                 }",
                "// Line 5138:             }",
                "// Line 5139:         }",
                "// Line 5140:     }",
                "// Line 5141: ",
                "// Line 5142:     /**",
                "// vulnerable line: 5143: * @return array",
                "// Line 5144:      * @throws \\CoreException",
                "// Line 5145:      * @throws \\MySQLException",
                "// Line 5146:      */",
                "// Line 5147:     public static function DBDump()",
                "// Line 5148:     {",
                "// Line 5149:         $aDataDump = array();",
                "// Line 5150:         foreach(self::DBEnumTables() as $sTable => $aClasses)",
                "// Line 5151:         {",
                "// Line 5152:             $aRows = CMDBSource::DumpTable($sTable);",
                "// Line 5153:             $aDataDump[$sTable] = $aRows;",
                "// Line 5366:                     $sRes .= $sClassRes;",
                "// Line 5367:                 }",
                "// Line 5368:             }",
                "// Line 5369:         }",
                "// Line 5370: ",
                "// Line 5371:         return $sRes;",
                "// Line 5372:     }",
                "// Line 5373: ",
                "// Line 5374: ",
                "// Line 5375:     /**",
                "// vulnerable line: 5376: * @return array",
                "// Line 5377:      * @throws \\CoreException",
                "// Line 5378:      * @throws \\Exception",
                "// Line 5379:      */",
                "// Line 5380:     public static function DBCheckFormat()",
                "// Line 5381:     {",
                "// Line 5382:         $aErrors = array();",
                "// Line 5383:         $aSugFix = array();",
                "// Line 5384: ",
                "// Line 5385:         $sAlterDBMetaData = CMDBSource::DBCheckCharsetAndCollation();",
                "// Line 5386: ",
                "// Line 5794:             }",
                "// Line 5795:         }",
                "// Line 5796: ",
                "// Line 5797:         return array($aErrors, $aSugFix, $aCondensedQueries);",
                "// Line 5798:     }",
                "// Line 5799: ",
                "// Line 5800: ",
                "// Line 5801:     /**",
                "// Line 5802:      * @deprecated 2.7.0 N°2369 will be removed in 2.8",
                "// Line 5803:      *",
                "// vulnerable line: 5804: * @return array",
                "// Line 5805:      * @throws \\CoreException",
                "// Line 5806:      * @throws \\Exception",
                "// Line 5807:      * @throws \\MissingQueryArgument",
                "// Line 5808:      */",
                "// Line 5809:     public static function DBCheckViews()",
                "// Line 5810:     {",
                "// Line 5811:         $aErrors = array();",
                "// Line 5812:         $aSugFix = array();",
                "// Line 5813: ",
                "// Line 5814:         // Reporting views (must be created after any other table)",
                "// Line 7179:         }",
                "// Line 7180:         return count($aIds);",
                "// Line 7181:     }",
                "// Line 7182: ",
                "// Line 7183:     // Links",
                "// Line 7184:     //",
                "// Line 7185:     //",
                "// Line 7186:     /**",
                "// Line 7187:      * @param string $sClass",
                "// Line 7188:      *",
                "// vulnerable line: 7189: * @return array",
                "// Line 7190:      * @throws \\CoreException",
                "// Line 7191:      */",
                "// Line 7192:     public static function EnumReferencedClasses($sClass)",
                "// Line 7193:     {",
                "// Line 7194:         self::_check_subclass($sClass);",
                "// Line 7195: ",
                "// Line 7196:         // 1-N links (referenced by my class), returns an array of sAttCode=>sClass",
                "// Line 7197:         $aResult = array();",
                "// Line 7198:         foreach(self::$m_aAttribDefs[$sClass] as $sAttCode => $oAttDef)",
                "// Line 7199:         {",
                "// Line 7204:         }",
                "// Line 7205: ",
                "// Line 7206:         return $aResult;",
                "// Line 7207:     }",
                "// Line 7208: ",
                "// Line 7209:     /**",
                "// Line 7210:      * @param string $sClass",
                "// Line 7211:      * @param bool $bSkipLinkingClasses",
                "// Line 7212:      * @param bool $bInnerJoinsOnly",
                "// Line 7213:      *",
                "// vulnerable line: 7214: * @return array",
                "// Line 7215:      * @throws \\CoreException",
                "// Line 7216:      */",
                "// Line 7217:     public static function EnumReferencingClasses($sClass, $bSkipLinkingClasses = false, $bInnerJoinsOnly = false)",
                "// Line 7218:     {",
                "// Line 7219:         self::_check_subclass($sClass);",
                "// Line 7220: ",
                "// Line 7221:         if ($bSkipLinkingClasses)",
                "// Line 7222:         {",
                "// Line 7223:             $aLinksClasses = array_keys(self::GetLinkClasses());",
                "// Line 7224:         }",
                "// Line 7535:                 return self::$m_aExtensionClasses[$sInterface][$sClassName];",
                "// Line 7536:             }",
                "// Line 7537:         }",
                "// Line 7538: ",
                "// Line 7539:         return $oInstance;",
                "// Line 7540:     }",
                "// Line 7541: ",
                "// Line 7542:     /**",
                "// Line 7543:      * @param string $sEnvironment",
                "// Line 7544:      *",
                "// vulnerable line: 7545: * @return array",
                "// Line 7546:      */",
                "// Line 7547:     public static function GetCacheEntries($sEnvironment = null)",
                "// Line 7548:     {",
                "// Line 7549:         if (is_null($sEnvironment))",
                "// Line 7550:         {",
                "// Line 7551:             $sEnvironment = MetaModel::GetEnvironmentId();",
                "// Line 7552:         }",
                "// Line 7553:         $aEntries = array();",
                "// Line 7554:         $aCacheUserData = apc_cache_info_compat();",
                "// Line 7555:         if (is_array($aCacheUserData) && isset($aCacheUserData['cache_list']))"
            ]
        },
        {
            "filename_of_changes": "userrights.class.inc.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "7",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 826:         if (is_null(self::$m_oUser))",
                "// Line 827:         {",
                "// Line 828:             return '';",
                "// Line 829:         }",
                "// Line 830:         else",
                "// Line 831:         {",
                "// Line 832:             return self::$m_oUser->Get('login');",
                "// Line 833:         }",
                "// Line 834:     }",
                "// Line 835: ",
                "// vulnerable line: 836: /** User */",
                "// Line 837:     public static function GetUserObject()",
                "// Line 838:     {",
                "// Line 839:         if (is_null(self::$m_oUser))",
                "// Line 840:         {",
                "// Line 841:             return null;",
                "// Line 842:         }",
                "// Line 843:         else",
                "// Line 844:         {",
                "// Line 845:             return self::$m_oUser;",
                "// Line 846:         }",
                "// Line 1026:                 return true;",
                "// Line 1027:             }",
                "// Line 1028:         } catch (Exception $e)",
                "// Line 1029:         {",
                "// Line 1030:             return false;",
                "// Line 1031:         }",
                "// Line 1032:     }",
                "// Line 1033: ",
                "// Line 1034:     /**",
                "// Line 1035:      * @param string $sClass",
                "// vulnerable line: 1036: * @param int $iActionCode",
                "// Line 1037:      * @param DBObjectSet $oInstanceSet",
                "// Line 1038:      * @param User $oUser",
                "// Line 1039:      * @return int (UR_ALLOWED_YES|UR_ALLOWED_NO|UR_ALLOWED_DEPENDS)",
                "// Line 1040:      */",
                "// Line 1041:     public static function IsActionAllowed($sClass, $iActionCode, /*dbObjectSet*/$oInstanceSet = null, $oUser = null)",
                "// Line 1042:     {",
                "// Line 1043:         // When initializing, we need to let everything pass trough",
                "// Line 1044:         if (!self::CheckLogin()) return UR_ALLOWED_YES;",
                "// Line 1045: ",
                "// Line 1046:         if (MetaModel::DBIsReadOnly())",
                "// Line 1113:         else",
                "// Line 1114:         {",
                "// Line 1115:             // Other classes could be edited/listed by the administrators",
                "// Line 1116:             return false;",
                "// Line 1117:         }",
                "// Line 1118:     }",
                "// Line 1119: ",
                "// Line 1120:     /**",
                "// Line 1121:      * @param string $sClass",
                "// Line 1122:      * @param string $sAttCode",
                "// vulnerable line: 1123: * @param int $iActionCode",
                "// Line 1124:      * @param DBObjectSet $oInstanceSet",
                "// Line 1125:      * @param User $oUser",
                "// Line 1126:      * @return int (UR_ALLOWED_YES|UR_ALLOWED_NO)",
                "// Line 1127:      */",
                "// Line 1128:     public static function IsActionAllowedOnAttribute($sClass, $sAttCode, $iActionCode, /*dbObjectSet*/$oInstanceSet = null, $oUser = null)",
                "// Line 1129:     {",
                "// Line 1130:         // When initializing, we need to let everything pass trough",
                "// Line 1131:         if (!self::CheckLogin()) return UR_ALLOWED_YES;",
                "// Line 1132: ",
                "// Line 1133:         if (MetaModel::DBIsReadOnly())"
            ]
        },
        {
            "filename_of_changes": "userrightsprofile.class.inc.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 822:         $iPermission = $bStatus ? UR_ALLOWED_YES : UR_ALLOWED_NO;",
                "// Line 823:         return $iPermission;",
                "// Line 824:     }",
                "// Line 825: ",
                "// Line 826:     public function FlushPrivileges()",
                "// Line 827:     {",
                "// Line 828:         $this->ResetCache();",
                "// Line 829:     }",
                "// Line 830: ",
                "// Line 831:     /**",
                "// vulnerable line: 832: * Find out which attribute is corresponding the the dimension 'owner org'",
                "// vulnerable line: 833: * returns null if no such attribute has been found (no filtering should occur)",
                "// Line 834:      */",
                "// Line 835:     public static function GetOwnerOrganizationAttCode($sClass)",
                "// Line 836:     {",
                "// Line 837:         $sAttCode = null;",
                "// Line 838: ",
                "// Line 839:         $aCallSpec = array($sClass, 'MapContextParam');",
                "// Line 840:         if (($sClass == 'Organization') || is_subclass_of($sClass, 'Organization'))",
                "// Line 841:         {",
                "// Line 842:             $sAttCode = 'id';",
                "// Line 843:         }"
            ]
        },
        {
            "filename_of_changes": "userrightsprofile.db.class.inc.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 597:     // Those arrays could be completed on demand (inheriting parent permissions)",
                "// Line 598:     protected $m_aClassActionGrants = null; // profile, class, action -> actiongrantid (or false if NO, or null/missing if undefined)",
                "// Line 599:     protected $m_aClassStimulusGrants = array(); // profile, class, stimulus -> permission",
                "// Line 600: ",
                "// Line 601:     // Built on demand, could be optimized if necessary (doing a query for each attribute that needs to be read)",
                "// Line 602:     protected $m_aObjectActionGrants = array();",
                "// Line 603: ",
                "// Line 604:     /**",
                "// Line 605:      * Read and cache organizations allowed to the given user",
                "// Line 606:      *",
                "// vulnerable line: 607: * @param $oUser",
                "// vulnerable line: 608: * @param $sClass (not used here but can be used in overloads)",
                "// Line 609:      *",
                "// vulnerable line: 610: * @return array",
                "// Line 611:      * @throws \\CoreException",
                "// Line 612:      * @throws \\Exception",
                "// Line 613:      */",
                "// Line 614:     public function GetUserOrgs($oUser, $sClass)",
                "// Line 615:     {",
                "// Line 616:         $iUser = $oUser->GetKey();",
                "// Line 617:         if (!array_key_exists($iUser, $this->m_aUserOrgs))",
                "// Line 618:         {",
                "// Line 619:             $this->m_aUserOrgs[$iUser] = array();",
                "// Line 620: "
            ]
        }
    ]
}