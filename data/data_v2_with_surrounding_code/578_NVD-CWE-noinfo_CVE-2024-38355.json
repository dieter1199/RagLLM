{
    "cve_id": "CVE-2024-38355",
    "cve_description": "Socket.IO is an open source, real-time, bidirectional, event-based, communication framework. A specially crafted Socket.IO packet can trigger an uncaught exception on the Socket.IO server, thus killing the Node.js process. This issue is fixed by commit `15af22fc22` which has been included in `socket.io@4.6.2` (released in May 2023). The fix was backported in the 2.x branch as well with commit `d30630ba10`. Users are advised to upgrade. Users unable to upgrade may attach a listener for the \"error\" event to catch these errors.\n",
    "cve_publish_date": "2024-06-19T20:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "refactor: add a noop handler for the error event\n\nWe should reduce the scope of the \"event\" error in the next major\nversion, as it is overloaded today:\n\n- it can be sent by the client (`socket.emit(\"error\")`, which is a perfectly valid event name)\n- it can be emitted when the connection encounters an error (an invalid packet for example)\n- it can be emitted when a packet is rejected in a middleware (`socket.use()`)\n\nRelated: https://github.com/socketio/socket.io/issues/2047",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "socket.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "8",
            "number_of_lines_deleted_vulnerable_to_cve": "6",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 52:   \"forced close\",",
                "// Line 53:   \"ping timeout\",",
                "// Line 54:   \"server shutting down\",",
                "// Line 55:   \"forced server close\",",
                "// Line 56: ]);",
                "// Line 57: ",
                "// Line 58: export interface SocketReservedEventsMap {",
                "// Line 59:   disconnect: (reason: DisconnectReason, description?: any) => void;",
                "// Line 60:   disconnecting: (reason: DisconnectReason, description?: any) => void;",
                "// Line 61:   error: (err: Error) => void;",
                "// vulnerable line: 62: }",
                "// Line 63: ",
                "// Line 64: // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener",
                "// Line 65: export interface EventEmitterReservedEventsMap {",
                "// Line 66:   newListener: (",
                "// Line 67:     eventName: string | Symbol,",
                "// Line 68:     listener: (...args: any[]) => void",
                "// Line 69:   ) => void;",
                "// Line 70:   removeListener: (",
                "// Line 71:     eventName: string | Symbol,",
                "// Line 72:     listener: (...args: any[]) => void",
                "// Line 73:   ) => void;",
                "// vulnerable line: 74: }",
                "// Line 75: ",
                "// Line 76: export const RESERVED_EVENTS: ReadonlySet<string | Symbol> = new Set<",
                "// Line 77:   | ClientReservedEvents",
                "// Line 78:   | keyof NamespaceReservedEventsMap<never, never, never, never>",
                "// Line 79:   | keyof SocketReservedEventsMap",
                "// Line 80:   | keyof EventEmitterReservedEventsMap",
                "// Line 81: >(<const>[",
                "// Line 82:   \"connect\",",
                "// Line 83:   \"connect_error\",",
                "// Line 84:   \"disconnect\",",
                "// Line 128: ",
                "// Line 129:   /**",
                "// Line 130:    * The query object",
                "// Line 131:    */",
                "// Line 132:   query: ParsedUrlQuery;",
                "// Line 133: ",
                "// Line 134:   /**",
                "// Line 135:    * The auth object",
                "// Line 136:    */",
                "// Line 137:   auth: { [key: string]: any };",
                "// vulnerable line: 138: }",
                "// Line 139: ",
                "// Line 140: /**",
                "// Line 141:  * `[eventName, ...args]`",
                "// Line 142:  */",
                "// Line 143: export type Event = [string, ...any[]];",
                "// Line 144: ",
                "// Line 145: function noop() {}",
                "// Line 146: ",
                "// Line 147: /**",
                "// Line 148:  * This is the main object for interacting with a client.",
                "// Line 261:       this.pid = previousSession.pid;",
                "// Line 262:       previousSession.rooms.forEach((room) => this.join(room));",
                "// Line 263:       this.data = previousSession.data as Partial<SocketData>;",
                "// Line 264:       previousSession.missedPackets.forEach((packet) => {",
                "// Line 265:         this.packet({",
                "// Line 266:           type: PacketType.EVENT,",
                "// Line 267:           data: packet,",
                "// Line 268:         });",
                "// Line 269:       });",
                "// Line 270:       this.recovered = true;",
                "// vulnerable line: 271: } else {",
                "// Line 272:       if (client.conn.protocol === 3) {",
                "// Line 273:         // @ts-ignore",
                "// Line 274:         this.id = nsp.name !== \"/\" ? nsp.name + \"#\" + client.id : client.id;",
                "// vulnerable line: 275: } else {",
                "// Line 276:         this.id = base64id.generateId(); // don't reuse the Engine.IO id because it's sensitive information",
                "// vulnerable line: 277: }",
                "// Line 278:       if (this.server._opts.connectionStateRecovery) {",
                "// Line 279:         this.pid = base64id.generateId();",
                "// vulnerable line: 280: }",
                "// vulnerable line: 281: }",
                "// Line 282:     this.handshake = this.buildHandshake(auth);",
                "// vulnerable line: 283: }",
                "// Line 284: ",
                "// Line 285:   /**",
                "// Line 286:    * Builds the `handshake` BC object",
                "// Line 287:    *",
                "// Line 288:    * @private",
                "// Line 289:    */",
                "// Line 290:   private buildHandshake(auth: object): Handshake {",
                "// Line 291:     return {",
                "// Line 292:       headers: this.request.headers,",
                "// Line 293:       time: new Date() + \"\",",
                "// Line 294:       address: this.conn.remoteAddress,",
                "// Line 295:       xdomain: !!this.request.headers.origin,",
                "// Line 296:       // @ts-ignore",
                "// Line 297:       secure: !!this.request.connection.encrypted,",
                "// Line 298:       issued: +new Date(),",
                "// Line 299:       url: this.request.url!,",
                "// Line 300:       // @ts-ignore",
                "// Line 301:       query: this.request._query,",
                "// Line 302:       auth,",
                "// Line 303:     };",
                "// vulnerable line: 304: }",
                "// Line 305: ",
                "// Line 306:   /**",
                "// Line 307:    * Emits to this client.",
                "// Line 308:    *",
                "// Line 309:    * @example",
                "// Line 310:    * io.on(\"connection\", (socket) => {",
                "// Line 311:    *   socket.emit(\"hello\", \"world\");",
                "// Line 312:    *",
                "// Line 313:    *   // all serializable datastructures are supported (no need to call JSON.stringify)",
                "// Line 314:    *   socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Buffer.from([6]) });",
                "// Line 320:    * });",
                "// Line 321:    *",
                "// Line 322:    * @return Always returns `true`.",
                "// Line 323:    */",
                "// Line 324:   public emit<Ev extends EventNames<EmitEvents>>(",
                "// Line 325:     ev: Ev,",
                "// Line 326:     ...args: EventParams<EmitEvents, Ev>",
                "// Line 327:   ): boolean {",
                "// Line 328:     if (RESERVED_EVENTS.has(ev)) {",
                "// Line 329:       throw new Error(`\"${String(ev)}\" is a reserved event name`);",
                "// vulnerable line: 330: }",
                "// Line 331:     const data: any[] = [ev, ...args];",
                "// Line 332:     const packet: any = {",
                "// Line 333:       type: PacketType.EVENT,",
                "// Line 334:       data: data,",
                "// Line 335:     };",
                "// Line 336: ",
                "// Line 337:     // access last argument to see if it's an ACK callback",
                "// Line 338:     if (typeof data[data.length - 1] === \"function\") {",
                "// Line 339:       const id = this.nsp._ids++;",
                "// Line 340:       debug(\"emitting packet with ack id %d\", id);",
                "// Line 341: ",
                "// Line 342:       this.registerAckCallback(id, data.pop());",
                "// Line 343:       packet.id = id;",
                "// vulnerable line: 344: }",
                "// Line 345: ",
                "// Line 346:     const flags = Object.assign({}, this.flags);",
                "// Line 347:     this.flags = {};",
                "// Line 348: ",
                "// Line 349:     // @ts-ignore",
                "// Line 350:     if (this.nsp.server.opts.connectionStateRecovery) {",
                "// Line 351:       // this ensures the packet is stored and can be transmitted upon reconnection",
                "// Line 352:       this.adapter.broadcast(packet, {",
                "// Line 353:         rooms: new Set([this.id]),",
                "// Line 354:         except: new Set(),",
                "// Line 355:         flags,",
                "// Line 356:       });",
                "// vulnerable line: 357: } else {",
                "// Line 358:       this.notifyOutgoingListeners(packet);",
                "// Line 359:       this.packet(packet, flags);",
                "// vulnerable line: 360: }",
                "// Line 361: ",
                "// Line 362:     return true;",
                "// vulnerable line: 363: }",
                "// Line 364: ",
                "// Line 365:   /**",
                "// Line 366:    * Emits an event and waits for an acknowledgement",
                "// Line 367:    *",
                "// Line 368:    * @example",
                "// Line 369:    * io.on(\"connection\", async (socket) => {",
                "// Line 370:    *   // without timeout",
                "// Line 371:    *   const response = await socket.emitWithAck(\"hello\", \"world\");",
                "// Line 372:    *",
                "// Line 373:    *   // with a specific timeout",
                "// Line 383:   public emitWithAck<Ev extends EventNames<EmitEvents>>(",
                "// Line 384:     ev: Ev,",
                "// Line 385:     ...args: AllButLast<EventParams<EmitEvents, Ev>>",
                "// Line 386:   ): Promise<FirstArg<Last<EventParams<EmitEvents, Ev>>>> {",
                "// Line 387:     // the timeout flag is optional",
                "// Line 388:     const withErr = this.flags.timeout !== undefined;",
                "// Line 389:     return new Promise((resolve, reject) => {",
                "// Line 390:       args.push((arg1, arg2) => {",
                "// Line 391:         if (withErr) {",
                "// Line 392:           return arg1 ? reject(arg1) : resolve(arg2);",
                "// vulnerable line: 393: } else {",
                "// Line 394:           return resolve(arg1);",
                "// vulnerable line: 395: }",
                "// Line 396:       });",
                "// Line 397:       this.emit(ev, ...(args as any[] as EventParams<EmitEvents, Ev>));",
                "// Line 398:     });",
                "// vulnerable line: 399: }",
                "// Line 400: ",
                "// Line 401:   /**",
                "// Line 402:    * @private",
                "// Line 403:    */",
                "// Line 404:   private registerAckCallback(id: number, ack: (...args: any[]) => void): void {",
                "// Line 405:     const timeout = this.flags.timeout;",
                "// Line 406:     if (timeout === undefined) {",
                "// Line 407:       this.acks.set(id, ack);",
                "// Line 408:       return;",
                "// vulnerable line: 409: }",
                "// Line 410: ",
                "// Line 411:     const timer = setTimeout(() => {",
                "// Line 412:       debug(\"event with ack id %d has timed out after %d ms\", id, timeout);",
                "// Line 413:       this.acks.delete(id);",
                "// Line 414:       ack.call(this, new Error(\"operation has timed out\"));",
                "// Line 415:     }, timeout);",
                "// Line 416: ",
                "// Line 417:     this.acks.set(id, (...args) => {",
                "// Line 418:       clearTimeout(timer);",
                "// Line 419:       ack.apply(this, [null, ...args]);",
                "// Line 420:     });",
                "// vulnerable line: 421: }",
                "// Line 422: ",
                "// Line 423:   /**",
                "// Line 424:    * Targets a room when broadcasting.",
                "// Line 425:    *",
                "// Line 426:    * @example",
                "// Line 427:    * io.on(\"connection\", (socket) => {",
                "// Line 428:    *   // the “foo” event will be broadcast to all connected clients in the “room-101” room, except this socket",
                "// Line 429:    *   socket.to(\"room-101\").emit(\"foo\", \"bar\");",
                "// Line 430:    *",
                "// Line 431:    *   // the code above is equivalent to:",
                "// Line 436:    *",
                "// Line 437:    *   // with multiple chained calls",
                "// Line 438:    *   socket.to(\"room-101\").to(\"room-102\").emit(\"foo\", \"bar\");",
                "// Line 439:    * });",
                "// Line 440:    *",
                "// Line 441:    * @param room - a room, or an array of rooms",
                "// Line 442:    * @return a new {@link BroadcastOperator} instance for chaining",
                "// Line 443:    */",
                "// Line 444:   public to(room: Room | Room[]) {",
                "// Line 445:     return this.newBroadcastOperator().to(room);",
                "// vulnerable line: 446: }",
                "// Line 447: ",
                "// Line 448:   /**",
                "// Line 449:    * Targets a room when broadcasting. Similar to `to()`, but might feel clearer in some cases:",
                "// Line 450:    *",
                "// Line 451:    * @example",
                "// Line 452:    * io.on(\"connection\", (socket) => {",
                "// Line 453:    *   // disconnect all clients in the \"room-101\" room, except this socket",
                "// Line 454:    *   socket.in(\"room-101\").disconnectSockets();",
                "// Line 455:    * });",
                "// Line 456:    *",
                "// Line 457:    * @param room - a room, or an array of rooms",
                "// Line 458:    * @return a new {@link BroadcastOperator} instance for chaining",
                "// Line 459:    */",
                "// Line 460:   public in(room: Room | Room[]) {",
                "// Line 461:     return this.newBroadcastOperator().in(room);",
                "// vulnerable line: 462: }",
                "// Line 463: ",
                "// Line 464:   /**",
                "// Line 465:    * Excludes a room when broadcasting.",
                "// Line 466:    *",
                "// Line 467:    * @example",
                "// Line 468:    * io.on(\"connection\", (socket) => {",
                "// Line 469:    *   // the \"foo\" event will be broadcast to all connected clients, except the ones that are in the \"room-101\" room",
                "// Line 470:    *   // and this socket",
                "// Line 471:    *   socket.except(\"room-101\").emit(\"foo\", \"bar\");",
                "// Line 472:    *",
                "// Line 475:    *",
                "// Line 476:    *   // with multiple chained calls",
                "// Line 477:    *   socket.except(\"room-101\").except(\"room-102\").emit(\"foo\", \"bar\");",
                "// Line 478:    * });",
                "// Line 479:    *",
                "// Line 480:    * @param room - a room, or an array of rooms",
                "// Line 481:    * @return a new {@link BroadcastOperator} instance for chaining",
                "// Line 482:    */",
                "// Line 483:   public except(room: Room | Room[]) {",
                "// Line 484:     return this.newBroadcastOperator().except(room);",
                "// vulnerable line: 485: }",
                "// Line 486: ",
                "// Line 487:   /**",
                "// Line 488:    * Sends a `message` event.",
                "// Line 489:    *",
                "// Line 490:    * This method mimics the WebSocket.send() method.",
                "// Line 491:    *",
                "// Line 492:    * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send",
                "// Line 493:    *",
                "// Line 494:    * @example",
                "// Line 495:    * io.on(\"connection\", (socket) => {",
                "// Line 497:    *",
                "// Line 498:    *   // this is equivalent to",
                "// Line 499:    *   socket.emit(\"message\", \"hello\");",
                "// Line 500:    * });",
                "// Line 501:    *",
                "// Line 502:    * @return self",
                "// Line 503:    */",
                "// Line 504:   public send(...args: EventParams<EmitEvents, \"message\">): this {",
                "// Line 505:     this.emit(\"message\", ...args);",
                "// Line 506:     return this;",
                "// vulnerable line: 507: }",
                "// Line 508: ",
                "// Line 509:   /**",
                "// Line 510:    * Sends a `message` event. Alias of {@link send}.",
                "// Line 511:    *",
                "// Line 512:    * @return self",
                "// Line 513:    */",
                "// Line 514:   public write(...args: EventParams<EmitEvents, \"message\">): this {",
                "// Line 515:     this.emit(\"message\", ...args);",
                "// Line 516:     return this;",
                "// vulnerable line: 517: }",
                "// Line 518: ",
                "// Line 519:   /**",
                "// Line 520:    * Writes a packet.",
                "// Line 521:    *",
                "// Line 522:    * @param {Object} packet - packet object",
                "// Line 523:    * @param {Object} opts - options",
                "// Line 524:    * @private",
                "// Line 525:    */",
                "// Line 526:   private packet(",
                "// Line 527:     packet: Omit<Packet, \"nsp\"> & Partial<Pick<Packet, \"nsp\">>,",
                "// Line 528:     opts: any = {}",
                "// Line 529:   ): void {",
                "// Line 530:     packet.nsp = this.nsp.name;",
                "// Line 531:     opts.compress = false !== opts.compress;",
                "// Line 532:     this.client._packet(packet as Packet, opts);",
                "// vulnerable line: 533: }",
                "// Line 534: ",
                "// Line 535:   /**",
                "// Line 536:    * Joins a room.",
                "// Line 537:    *",
                "// Line 538:    * @example",
                "// Line 539:    * io.on(\"connection\", (socket) => {",
                "// Line 540:    *   // join a single room",
                "// Line 541:    *   socket.join(\"room1\");",
                "// Line 542:    *",
                "// Line 543:    *   // join multiple rooms",
                "// Line 547:    * @param {String|Array} rooms - room or array of rooms",
                "// Line 548:    * @return a Promise or nothing, depending on the adapter",
                "// Line 549:    */",
                "// Line 550:   public join(rooms: Room | Array<Room>): Promise<void> | void {",
                "// Line 551:     debug(\"join room %s\", rooms);",
                "// Line 552: ",
                "// Line 553:     return this.adapter.addAll(",
                "// Line 554:       this.id,",
                "// Line 555:       new Set(Array.isArray(rooms) ? rooms : [rooms])",
                "// Line 556:     );",
                "// vulnerable line: 557: }",
                "// Line 558: ",
                "// Line 559:   /**",
                "// Line 560:    * Leaves a room.",
                "// Line 561:    *",
                "// Line 562:    * @example",
                "// Line 563:    * io.on(\"connection\", (socket) => {",
                "// Line 564:    *   // leave a single room",
                "// Line 565:    *   socket.leave(\"room1\");",
                "// Line 566:    *",
                "// Line 567:    *   // leave multiple rooms",
                "// Line 568:    *   socket.leave(\"room1\").leave(\"room2\");",
                "// Line 569:    * });",
                "// Line 570:    *",
                "// Line 571:    * @param {String} room",
                "// Line 572:    * @return a Promise or nothing, depending on the adapter",
                "// Line 573:    */",
                "// Line 574:   public leave(room: string): Promise<void> | void {",
                "// Line 575:     debug(\"leave room %s\", room);",
                "// Line 576: ",
                "// Line 577:     return this.adapter.del(this.id, room);",
                "// vulnerable line: 578: }",
                "// Line 579: ",
                "// Line 580:   /**",
                "// Line 581:    * Leave all rooms.",
                "// Line 582:    *",
                "// Line 583:    * @private",
                "// Line 584:    */",
                "// Line 585:   private leaveAll(): void {",
                "// Line 586:     this.adapter.delAll(this.id);",
                "// vulnerable line: 587: }",
                "// Line 588: ",
                "// Line 589:   /**",
                "// Line 590:    * Called by `Namespace` upon successful",
                "// Line 591:    * middleware execution (ie: authorization).",
                "// Line 592:    * Socket is added to namespace array before",
                "// Line 593:    * call to join, so adapters can access it.",
                "// Line 594:    *",
                "// Line 595:    * @private",
                "// Line 596:    */",
                "// Line 597:   _onconnect(): void {",
                "// Line 598:     debug(\"socket connected - writing packet\");",
                "// Line 599:     this.connected = true;",
                "// Line 600:     this.join(this.id);",
                "// Line 601:     if (this.conn.protocol === 3) {",
                "// Line 602:       this.packet({ type: PacketType.CONNECT });",
                "// vulnerable line: 603: } else {",
                "// Line 604:       this.packet({",
                "// Line 605:         type: PacketType.CONNECT,",
                "// Line 606:         data: { sid: this.id, pid: this.pid },",
                "// Line 607:       });",
                "// vulnerable line: 608: }",
                "// vulnerable line: 609: }",
                "// Line 610: ",
                "// Line 611:   /**",
                "// Line 612:    * Called with each packet. Called by `Client`.",
                "// Line 613:    *",
                "// Line 614:    * @param {Object} packet",
                "// Line 615:    * @private",
                "// Line 616:    */",
                "// Line 617:   _onpacket(packet: Packet): void {",
                "// Line 618:     debug(\"got packet %j\", packet);",
                "// Line 619:     switch (packet.type) {",
                "// Line 629:         this.onack(packet);",
                "// Line 630:         break;",
                "// Line 631: ",
                "// Line 632:       case PacketType.BINARY_ACK:",
                "// Line 633:         this.onack(packet);",
                "// Line 634:         break;",
                "// Line 635: ",
                "// Line 636:       case PacketType.DISCONNECT:",
                "// Line 637:         this.ondisconnect();",
                "// Line 638:         break;",
                "// vulnerable line: 639: }",
                "// vulnerable line: 640: }",
                "// Line 641: ",
                "// Line 642:   /**",
                "// Line 643:    * Called upon event packet.",
                "// Line 644:    *",
                "// Line 645:    * @param {Packet} packet - packet object",
                "// Line 646:    * @private",
                "// Line 647:    */",
                "// Line 648:   private onevent(packet: Packet): void {",
                "// Line 649:     const args = packet.data || [];",
                "// Line 650:     debug(\"emitting event %j\", args);",
                "// Line 651: ",
                "// Line 652:     if (null != packet.id) {",
                "// Line 653:       debug(\"attaching ack callback to event\");",
                "// Line 654:       args.push(this.ack(packet.id));",
                "// vulnerable line: 655: }",
                "// Line 656: ",
                "// Line 657:     if (this._anyListeners && this._anyListeners.length) {",
                "// Line 658:       const listeners = this._anyListeners.slice();",
                "// Line 659:       for (const listener of listeners) {",
                "// Line 660:         listener.apply(this, args);",
                "// vulnerable line: 661: }",
                "// vulnerable line: 662: }",
                "// Line 663:     this.dispatch(args);",
                "// vulnerable line: 664: }",
                "// Line 665: ",
                "// Line 666:   /**",
                "// Line 667:    * Produces an ack callback to emit with an event.",
                "// Line 668:    *",
                "// Line 669:    * @param {Number} id - packet id",
                "// Line 670:    * @private",
                "// Line 671:    */",
                "// Line 672:   private ack(id: number): () => void {",
                "// Line 673:     const self = this;",
                "// Line 674:     let sent = false;",
                "// Line 679:       debug(\"sending ack %j\", args);",
                "// Line 680: ",
                "// Line 681:       self.packet({",
                "// Line 682:         id: id,",
                "// Line 683:         type: PacketType.ACK,",
                "// Line 684:         data: args,",
                "// Line 685:       });",
                "// Line 686: ",
                "// Line 687:       sent = true;",
                "// Line 688:     };",
                "// vulnerable line: 689: }",
                "// Line 690: ",
                "// Line 691:   /**",
                "// Line 692:    * Called upon ack packet.",
                "// Line 693:    *",
                "// Line 694:    * @private",
                "// Line 695:    */",
                "// Line 696:   private onack(packet: Packet): void {",
                "// Line 697:     const ack = this.acks.get(packet.id!);",
                "// Line 698:     if (\"function\" == typeof ack) {",
                "// Line 699:       debug(\"calling ack %s with %j\", packet.id, packet.data);",
                "// Line 700:       ack.apply(this, packet.data);",
                "// Line 701:       this.acks.delete(packet.id!);",
                "// vulnerable line: 702: } else {",
                "// Line 703:       debug(\"bad ack %s\", packet.id);",
                "// vulnerable line: 704: }",
                "// vulnerable line: 705: }",
                "// Line 706: ",
                "// Line 707:   /**",
                "// Line 708:    * Called upon client disconnect packet.",
                "// Line 709:    *",
                "// Line 710:    * @private",
                "// Line 711:    */",
                "// Line 712:   private ondisconnect(): void {",
                "// Line 713:     debug(\"got disconnect packet\");",
                "// Line 714:     this._onclose(\"client namespace disconnect\");",
                "// vulnerable line: 715: }",
                "// Line 716: ",
                "// Line 717:   /**",
                "// Line 718:    * Handles a client error.",
                "// Line 719:    *",
                "// Line 720:    * @private",
                "// Line 721:    */",
                "// Line 722:   _onerror(err: Error): void {",
                "// vulnerable line: 723: if (this.listeners(\"error\").length) {",
                "// vulnerable line: 724: this.emitReserved(\"error\", err);",
                "// vulnerable line: 725: } else {",
                "// vulnerable line: 726: console.error(\"Missing error handler on `socket`.\");",
                "// vulnerable line: 727: console.error(err.stack);",
                "// vulnerable line: 728: }",
                "// vulnerable line: 729: }",
                "// Line 730: ",
                "// Line 731:   /**",
                "// Line 732:    * Called upon closing. Called by `Client`.",
                "// Line 733:    *",
                "// Line 734:    * @param {String} reason",
                "// Line 735:    * @param description",
                "// Line 736:    * @throw {Error} optional error object",
                "// Line 737:    *",
                "// Line 738:    * @private",
                "// Line 739:    */",
                "// Line 746:       this.server._opts.connectionStateRecovery &&",
                "// Line 747:       RECOVERABLE_DISCONNECT_REASONS.has(reason)",
                "// Line 748:     ) {",
                "// Line 749:       debug(\"connection state recovery is enabled for sid %s\", this.id);",
                "// Line 750:       this.adapter.persistSession({",
                "// Line 751:         sid: this.id,",
                "// Line 752:         pid: this.pid,",
                "// Line 753:         rooms: [...this.rooms],",
                "// Line 754:         data: this.data,",
                "// Line 755:       });",
                "// vulnerable line: 756: }",
                "// Line 757: ",
                "// Line 758:     this._cleanup();",
                "// Line 759:     this.nsp._remove(this);",
                "// Line 760:     this.client._remove(this);",
                "// Line 761:     this.connected = false;",
                "// Line 762:     this.emitReserved(\"disconnect\", reason, description);",
                "// Line 763:     return;",
                "// vulnerable line: 764: }",
                "// Line 765: ",
                "// Line 766:   /**",
                "// Line 767:    * Makes the socket leave all the rooms it was part of and prevents it from joining any other room",
                "// Line 768:    *",
                "// Line 769:    * @private",
                "// Line 770:    */",
                "// Line 771:   _cleanup() {",
                "// Line 772:     this.leaveAll();",
                "// Line 773:     this.join = noop;",
                "// vulnerable line: 774: }",
                "// Line 775: ",
                "// Line 776:   /**",
                "// Line 777:    * Produces an `error` packet.",
                "// Line 778:    *",
                "// Line 779:    * @param {Object} err - error object",
                "// Line 780:    *",
                "// Line 781:    * @private",
                "// Line 782:    */",
                "// Line 783:   _error(err): void {",
                "// Line 784:     this.packet({ type: PacketType.CONNECT_ERROR, data: err });",
                "// vulnerable line: 785: }",
                "// Line 786: ",
                "// Line 787:   /**",
                "// Line 788:    * Disconnects this client.",
                "// Line 789:    *",
                "// Line 790:    * @example",
                "// Line 791:    * io.on(\"connection\", (socket) => {",
                "// Line 792:    *   // disconnect this socket (the connection might be kept alive for other namespaces)",
                "// Line 793:    *   socket.disconnect();",
                "// Line 794:    *",
                "// Line 795:    *   // disconnect this socket and close the underlying connection",
                "// Line 796:    *   socket.disconnect(true);",
                "// Line 797:    * })",
                "// Line 798:    *",
                "// Line 799:    * @param {Boolean} close - if `true`, closes the underlying connection",
                "// Line 800:    * @return self",
                "// Line 801:    */",
                "// Line 802:   public disconnect(close = false): this {",
                "// Line 803:     if (!this.connected) return this;",
                "// Line 804:     if (close) {",
                "// Line 805:       this.client._disconnect();",
                "// vulnerable line: 806: } else {",
                "// Line 807:       this.packet({ type: PacketType.DISCONNECT });",
                "// Line 808:       this._onclose(\"server namespace disconnect\");",
                "// vulnerable line: 809: }",
                "// Line 810:     return this;",
                "// vulnerable line: 811: }",
                "// Line 812: ",
                "// Line 813:   /**",
                "// Line 814:    * Sets the compress flag.",
                "// Line 815:    *",
                "// Line 816:    * @example",
                "// Line 817:    * io.on(\"connection\", (socket) => {",
                "// Line 818:    *   socket.compress(false).emit(\"hello\");",
                "// Line 819:    * });",
                "// Line 820:    *",
                "// Line 821:    * @param {Boolean} compress - if `true`, compresses the sending data",
                "// Line 822:    * @return {Socket} self",
                "// Line 823:    */",
                "// Line 824:   public compress(compress: boolean): this {",
                "// Line 825:     this.flags.compress = compress;",
                "// Line 826:     return this;",
                "// vulnerable line: 827: }",
                "// Line 828: ",
                "// Line 829:   /**",
                "// Line 830:    * Sets a modifier for a subsequent event emission that the event data may be lost if the client is not ready to",
                "// Line 831:    * receive messages (because of network slowness or other issues, or because they’re connected through long polling",
                "// Line 832:    * and is in the middle of a request-response cycle).",
                "// Line 833:    *",
                "// Line 834:    * @example",
                "// Line 835:    * io.on(\"connection\", (socket) => {",
                "// Line 836:    *   socket.volatile.emit(\"hello\"); // the client may or may not receive it",
                "// Line 837:    * });",
                "// Line 838:    *",
                "// Line 839:    * @return {Socket} self",
                "// Line 840:    */",
                "// Line 841:   public get volatile(): this {",
                "// Line 842:     this.flags.volatile = true;",
                "// Line 843:     return this;",
                "// vulnerable line: 844: }",
                "// Line 845: ",
                "// Line 846:   /**",
                "// Line 847:    * Sets a modifier for a subsequent event emission that the event data will only be broadcast to every sockets but the",
                "// Line 848:    * sender.",
                "// Line 849:    *",
                "// Line 850:    * @example",
                "// Line 851:    * io.on(\"connection\", (socket) => {",
                "// Line 852:    *   // the “foo” event will be broadcast to all connected clients, except this socket",
                "// Line 853:    *   socket.broadcast.emit(\"foo\", \"bar\");",
                "// Line 854:    * });",
                "// Line 855:    *",
                "// Line 856:    * @return a new {@link BroadcastOperator} instance for chaining",
                "// Line 857:    */",
                "// Line 858:   public get broadcast() {",
                "// Line 859:     return this.newBroadcastOperator();",
                "// vulnerable line: 860: }",
                "// Line 861: ",
                "// Line 862:   /**",
                "// Line 863:    * Sets a modifier for a subsequent event emission that the event data will only be broadcast to the current node.",
                "// Line 864:    *",
                "// Line 865:    * @example",
                "// Line 866:    * io.on(\"connection\", (socket) => {",
                "// Line 867:    *   // the “foo” event will be broadcast to all connected clients on this node, except this socket",
                "// Line 868:    *   socket.local.emit(\"foo\", \"bar\");",
                "// Line 869:    * });",
                "// Line 870:    *",
                "// Line 871:    * @return a new {@link BroadcastOperator} instance for chaining",
                "// Line 872:    */",
                "// Line 873:   public get local() {",
                "// Line 874:     return this.newBroadcastOperator().local;",
                "// vulnerable line: 875: }",
                "// Line 876: ",
                "// Line 877:   /**",
                "// Line 878:    * Sets a modifier for a subsequent event emission that the callback will be called with an error when the",
                "// Line 879:    * given number of milliseconds have elapsed without an acknowledgement from the client:",
                "// Line 880:    *",
                "// Line 881:    * @example",
                "// Line 882:    * io.on(\"connection\", (socket) => {",
                "// Line 883:    *   socket.timeout(5000).emit(\"my-event\", (err) => {",
                "// Line 884:    *     if (err) {",
                "// Line 885:    *       // the client did not acknowledge the event in the given delay",
                "// Line 892:   public timeout(",
                "// Line 893:     timeout: number",
                "// Line 894:   ): Socket<",
                "// Line 895:     ListenEvents,",
                "// Line 896:     DecorateAcknowledgements<EmitEvents>,",
                "// Line 897:     ServerSideEvents,",
                "// Line 898:     SocketData",
                "// Line 899:   > {",
                "// Line 900:     this.flags.timeout = timeout;",
                "// Line 901:     return this;",
                "// vulnerable line: 902: }",
                "// Line 903: ",
                "// Line 904:   /**",
                "// Line 905:    * Dispatch incoming event to socket listeners.",
                "// Line 906:    *",
                "// Line 907:    * @param {Array} event - event that will get emitted",
                "// Line 908:    * @private",
                "// Line 909:    */",
                "// Line 910:   private dispatch(event: Event): void {",
                "// Line 911:     debug(\"dispatching an event %j\", event);",
                "// Line 912:     this.run(event, (err) => {",
                "// Line 913:       process.nextTick(() => {",
                "// Line 914:         if (err) {",
                "// Line 915:           return this._onerror(err);",
                "// vulnerable line: 916: }",
                "// Line 917:         if (this.connected) {",
                "// Line 918:           super.emitUntyped.apply(this, event);",
                "// vulnerable line: 919: } else {",
                "// Line 920:           debug(\"ignore packet received after disconnection\");",
                "// vulnerable line: 921: }",
                "// Line 922:       });",
                "// Line 923:     });",
                "// vulnerable line: 924: }",
                "// Line 925: ",
                "// Line 926:   /**",
                "// Line 927:    * Sets up socket middleware.",
                "// Line 928:    *",
                "// Line 929:    * @example",
                "// Line 930:    * io.on(\"connection\", (socket) => {",
                "// Line 931:    *   socket.use(([event, ...args], next) => {",
                "// Line 932:    *     if (isUnauthorized(event)) {",
                "// Line 933:    *       return next(new Error(\"unauthorized event\"));",
                "// Line 934:    *     }",
                "// Line 942:    *     }",
                "// Line 943:    *   });",
                "// Line 944:    * });",
                "// Line 945:    *",
                "// Line 946:    * @param {Function} fn - middleware function (event, next)",
                "// Line 947:    * @return {Socket} self",
                "// Line 948:    */",
                "// Line 949:   public use(fn: (event: Event, next: (err?: Error) => void) => void): this {",
                "// Line 950:     this.fns.push(fn);",
                "// Line 951:     return this;",
                "// vulnerable line: 952: }",
                "// Line 953: ",
                "// Line 954:   /**",
                "// Line 955:    * Executes the middleware for an incoming event.",
                "// Line 956:    *",
                "// Line 957:    * @param {Array} event - event that will get emitted",
                "// Line 958:    * @param {Function} fn - last fn call in the middleware",
                "// Line 959:    * @private",
                "// Line 960:    */",
                "// Line 961:   private run(event: Event, fn: (err: Error | null) => void): void {",
                "// Line 962:     const fns = this.fns.slice(0);",
                "// Line 966:       fns[i](event, function (err) {",
                "// Line 967:         // upon error, short-circuit",
                "// Line 968:         if (err) return fn(err);",
                "// Line 969: ",
                "// Line 970:         // if no middleware left, summon callback",
                "// Line 971:         if (!fns[i + 1]) return fn(null);",
                "// Line 972: ",
                "// Line 973:         // go on to next",
                "// Line 974:         run(i + 1);",
                "// Line 975:       });",
                "// vulnerable line: 976: }",
                "// Line 977: ",
                "// Line 978:     run(0);",
                "// vulnerable line: 979: }",
                "// Line 980: ",
                "// Line 981:   /**",
                "// Line 982:    * Whether the socket is currently disconnected",
                "// Line 983:    */",
                "// Line 984:   public get disconnected() {",
                "// Line 985:     return !this.connected;",
                "// vulnerable line: 986: }",
                "// Line 987: ",
                "// Line 988:   /**",
                "// Line 989:    * A reference to the request that originated the underlying Engine.IO Socket.",
                "// Line 990:    */",
                "// Line 991:   public get request(): IncomingMessage {",
                "// Line 992:     return this.client.request;",
                "// vulnerable line: 993: }",
                "// Line 994: ",
                "// Line 995:   /**",
                "// Line 996:    * A reference to the underlying Client transport connection (Engine.IO Socket object).",
                "// Line 997:    *",
                "// Line 998:    * @example",
                "// Line 999:    * io.on(\"connection\", (socket) => {",
                "// Line 1000:    *   console.log(socket.conn.transport.name); // prints \"polling\" or \"websocket\"",
                "// Line 1001:    *",
                "// Line 1002:    *   socket.conn.once(\"upgrade\", () => {",
                "// Line 1003:    *     console.log(socket.conn.transport.name); // prints \"websocket\"",
                "// Line 1004:    *   });",
                "// Line 1005:    * });",
                "// Line 1006:    */",
                "// Line 1007:   public get conn() {",
                "// Line 1008:     return this.client.conn;",
                "// vulnerable line: 1009: }",
                "// Line 1010: ",
                "// Line 1011:   /**",
                "// Line 1012:    * Returns the rooms the socket is currently in.",
                "// Line 1013:    *",
                "// Line 1014:    * @example",
                "// Line 1015:    * io.on(\"connection\", (socket) => {",
                "// Line 1016:    *   console.log(socket.rooms); // Set { <socket.id> }",
                "// Line 1017:    *",
                "// Line 1018:    *   socket.join(\"room1\");",
                "// Line 1019:    *",
                "// Line 1020:    *   console.log(socket.rooms); // Set { <socket.id>, \"room1\" }",
                "// Line 1021:    * });",
                "// Line 1022:    */",
                "// Line 1023:   public get rooms(): Set<Room> {",
                "// Line 1024:     return this.adapter.socketRooms(this.id) || new Set();",
                "// vulnerable line: 1025: }",
                "// Line 1026: ",
                "// Line 1027:   /**",
                "// Line 1028:    * Adds a listener that will be fired when any event is received. The event name is passed as the first argument to",
                "// Line 1029:    * the callback.",
                "// Line 1030:    *",
                "// Line 1031:    * @example",
                "// Line 1032:    * io.on(\"connection\", (socket) => {",
                "// Line 1033:    *   socket.onAny((event, ...args) => {",
                "// Line 1034:    *     console.log(`got event ${event}`);",
                "// Line 1035:    *   });",
                "// Line 1036:    * });",
                "// Line 1037:    *",
                "// Line 1038:    * @param listener",
                "// Line 1039:    */",
                "// Line 1040:   public onAny(listener: (...args: any[]) => void): this {",
                "// Line 1041:     this._anyListeners = this._anyListeners || [];",
                "// Line 1042:     this._anyListeners.push(listener);",
                "// Line 1043:     return this;",
                "// vulnerable line: 1044: }",
                "// Line 1045: ",
                "// Line 1046:   /**",
                "// Line 1047:    * Adds a listener that will be fired when any event is received. The event name is passed as the first argument to",
                "// Line 1048:    * the callback. The listener is added to the beginning of the listeners array.",
                "// Line 1049:    *",
                "// Line 1050:    * @param listener",
                "// Line 1051:    */",
                "// Line 1052:   public prependAny(listener: (...args: any[]) => void): this {",
                "// Line 1053:     this._anyListeners = this._anyListeners || [];",
                "// Line 1054:     this._anyListeners.unshift(listener);",
                "// Line 1055:     return this;",
                "// vulnerable line: 1056: }",
                "// Line 1057: ",
                "// Line 1058:   /**",
                "// Line 1059:    * Removes the listener that will be fired when any event is received.",
                "// Line 1060:    *",
                "// Line 1061:    * @example",
                "// Line 1062:    * io.on(\"connection\", (socket) => {",
                "// Line 1063:    *   const catchAllListener = (event, ...args) => {",
                "// Line 1064:    *     console.log(`got event ${event}`);",
                "// Line 1065:    *   }",
                "// Line 1066:    *",
                "// Line 1071:    *",
                "// Line 1072:    *   // or remove all listeners",
                "// Line 1073:    *   socket.offAny();",
                "// Line 1074:    * });",
                "// Line 1075:    *",
                "// Line 1076:    * @param listener",
                "// Line 1077:    */",
                "// Line 1078:   public offAny(listener?: (...args: any[]) => void): this {",
                "// Line 1079:     if (!this._anyListeners) {",
                "// Line 1080:       return this;",
                "// vulnerable line: 1081: }",
                "// Line 1082:     if (listener) {",
                "// Line 1083:       const listeners = this._anyListeners;",
                "// Line 1084:       for (let i = 0; i < listeners.length; i++) {",
                "// Line 1085:         if (listener === listeners[i]) {",
                "// Line 1086:           listeners.splice(i, 1);",
                "// Line 1087:           return this;",
                "// vulnerable line: 1088: }",
                "// vulnerable line: 1089: }",
                "// vulnerable line: 1090: } else {",
                "// Line 1091:       this._anyListeners = [];",
                "// vulnerable line: 1092: }",
                "// Line 1093:     return this;",
                "// vulnerable line: 1094: }",
                "// Line 1095: ",
                "// Line 1096:   /**",
                "// Line 1097:    * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,",
                "// Line 1098:    * e.g. to remove listeners.",
                "// Line 1099:    */",
                "// Line 1100:   public listenersAny() {",
                "// Line 1101:     return this._anyListeners || [];",
                "// vulnerable line: 1102: }",
                "// Line 1103: ",
                "// Line 1104:   /**",
                "// Line 1105:    * Adds a listener that will be fired when any event is sent. The event name is passed as the first argument to",
                "// Line 1106:    * the callback.",
                "// Line 1107:    *",
                "// Line 1108:    * Note: acknowledgements sent to the client are not included.",
                "// Line 1109:    *",
                "// Line 1110:    * @example",
                "// Line 1111:    * io.on(\"connection\", (socket) => {",
                "// Line 1112:    *   socket.onAnyOutgoing((event, ...args) => {",
                "// Line 1113:    *     console.log(`sent event ${event}`);",
                "// Line 1114:    *   });",
                "// Line 1115:    * });",
                "// Line 1116:    *",
                "// Line 1117:    * @param listener",
                "// Line 1118:    */",
                "// Line 1119:   public onAnyOutgoing(listener: (...args: any[]) => void): this {",
                "// Line 1120:     this._anyOutgoingListeners = this._anyOutgoingListeners || [];",
                "// Line 1121:     this._anyOutgoingListeners.push(listener);",
                "// Line 1122:     return this;",
                "// vulnerable line: 1123: }",
                "// Line 1124: ",
                "// Line 1125:   /**",
                "// Line 1126:    * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the",
                "// Line 1127:    * callback. The listener is added to the beginning of the listeners array.",
                "// Line 1128:    *",
                "// Line 1129:    * @example",
                "// Line 1130:    * io.on(\"connection\", (socket) => {",
                "// Line 1131:    *   socket.prependAnyOutgoing((event, ...args) => {",
                "// Line 1132:    *     console.log(`sent event ${event}`);",
                "// Line 1133:    *   });",
                "// Line 1134:    * });",
                "// Line 1135:    *",
                "// Line 1136:    * @param listener",
                "// Line 1137:    */",
                "// Line 1138:   public prependAnyOutgoing(listener: (...args: any[]) => void): this {",
                "// Line 1139:     this._anyOutgoingListeners = this._anyOutgoingListeners || [];",
                "// Line 1140:     this._anyOutgoingListeners.unshift(listener);",
                "// Line 1141:     return this;",
                "// vulnerable line: 1142: }",
                "// Line 1143: ",
                "// Line 1144:   /**",
                "// Line 1145:    * Removes the listener that will be fired when any event is sent.",
                "// Line 1146:    *",
                "// Line 1147:    * @example",
                "// Line 1148:    * io.on(\"connection\", (socket) => {",
                "// Line 1149:    *   const catchAllListener = (event, ...args) => {",
                "// Line 1150:    *     console.log(`sent event ${event}`);",
                "// Line 1151:    *   }",
                "// Line 1152:    *",
                "// Line 1157:    *",
                "// Line 1158:    *   // or remove all listeners",
                "// Line 1159:    *   socket.offAnyOutgoing();",
                "// Line 1160:    * });",
                "// Line 1161:    *",
                "// Line 1162:    * @param listener - the catch-all listener",
                "// Line 1163:    */",
                "// Line 1164:   public offAnyOutgoing(listener?: (...args: any[]) => void): this {",
                "// Line 1165:     if (!this._anyOutgoingListeners) {",
                "// Line 1166:       return this;",
                "// vulnerable line: 1167: }",
                "// Line 1168:     if (listener) {",
                "// Line 1169:       const listeners = this._anyOutgoingListeners;",
                "// Line 1170:       for (let i = 0; i < listeners.length; i++) {",
                "// Line 1171:         if (listener === listeners[i]) {",
                "// Line 1172:           listeners.splice(i, 1);",
                "// Line 1173:           return this;",
                "// vulnerable line: 1174: }",
                "// vulnerable line: 1175: }",
                "// vulnerable line: 1176: } else {",
                "// Line 1177:       this._anyOutgoingListeners = [];",
                "// vulnerable line: 1178: }",
                "// Line 1179:     return this;",
                "// vulnerable line: 1180: }",
                "// Line 1181: ",
                "// Line 1182:   /**",
                "// Line 1183:    * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,",
                "// Line 1184:    * e.g. to remove listeners.",
                "// Line 1185:    */",
                "// Line 1186:   public listenersAnyOutgoing() {",
                "// Line 1187:     return this._anyOutgoingListeners || [];",
                "// vulnerable line: 1188: }",
                "// Line 1189: ",
                "// Line 1190:   /**",
                "// Line 1191:    * Notify the listeners for each packet sent (emit or broadcast)",
                "// Line 1192:    *",
                "// Line 1193:    * @param packet",
                "// Line 1194:    *",
                "// Line 1195:    * @private",
                "// Line 1196:    */",
                "// Line 1197:   private notifyOutgoingListeners(packet: Packet) {",
                "// Line 1198:     if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {",
                "// Line 1199:       const listeners = this._anyOutgoingListeners.slice();",
                "// Line 1200:       for (const listener of listeners) {",
                "// Line 1201:         listener.apply(this, packet.data);",
                "// vulnerable line: 1202: }",
                "// vulnerable line: 1203: }",
                "// vulnerable line: 1204: }",
                "// Line 1205: ",
                "// Line 1206:   private newBroadcastOperator() {",
                "// Line 1207:     const flags = Object.assign({}, this.flags);",
                "// Line 1208:     this.flags = {};",
                "// Line 1209:     return new BroadcastOperator<",
                "// Line 1210:       DecorateAcknowledgementsWithMultipleResponses<EmitEvents>,",
                "// Line 1211:       SocketData",
                "// Line 1212:     >(this.adapter, new Set<Room>(), new Set<Room>([this.id]), flags);",
                "// vulnerable line: 1213: }",
                "// vulnerable line: 1214: }"
            ]
        }
    ]
}