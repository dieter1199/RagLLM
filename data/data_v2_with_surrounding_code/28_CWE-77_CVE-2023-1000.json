{
    "cve_id": "CVE-2023-1000",
    "cve_description": "A vulnerability was found in cyanomiko dcnnt-py up to 0.9.0. It has been classified as critical. Affected is the function main of the file dcnnt/plugins/notifications.py of the component Notification Handler. The manipulation leads to command injection. It is possible to launch the attack remotely. Upgrading to version 0.9.1 is able to address this issue. The patch is identified as b4021d784a97e25151a5353aa763a741e9a148f5. It is recommended to upgrade the affected component. VDB-262230 is the identifier assigned to this vulnerability.",
    "cve_publish_date": "2024-04-27T09:15Z",
    "cwe_id": "CWE-77",
    "cwe_name": "Improper Neutralization of Special Elements used in a Command ('Command Injection')",
    "cwe_description": "The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.",
    "commit_message": "Fix command ijection vulnerability\n\nFix passing of unescaped text to the arguments of notification command\nin dcnnt/plugins/notifications.py\n\nThis is a high-risk vulnerability that can lead to RCE and allow arbitrary code\nexecution on the server while the notification showing.\n\nAll text received over the network MUST be escaped before being transmitted to\nthe database or to the shell command arguments.",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "notifications.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 46:                     name, uin = self.device.name, self.device.uin",
                "// Line 47:                     if text is None:",
                "// Line 48:                         text = ''",
                "// Line 49:                     icon_path = os.path.join(self.conf('icon_dir'), f'{package}.{self.device.uin}.icon.png')",
                "// Line 50:                     if bool(icon_data):",
                "// Line 51:                         try:",
                "// Line 52:                             open(icon_path, 'wb').write(icon_data)",
                "// Line 53:                         except Exception as e:",
                "// Line 54:                             self.log(e, logging.WARNING)",
                "// Line 55:                     icon = icon_path if icon_data else ''",
                "// vulnerable line: 56: command = cmd.format(uin=uin, name=name, icon=icon, text=text, title=title, package=package)",
                "// Line 57:                     self.log('Execute: \"{}\"'.format(command))",
                "// Line 58:                     subprocess.call(command, shell=True)"
            ]
        }
    ]
}