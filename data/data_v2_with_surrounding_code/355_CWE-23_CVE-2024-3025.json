{
    "cve_id": "CVE-2024-3025",
    "cve_description": "mintplex-labs/anything-llm is vulnerable to path traversal attacks due to insufficient validation of user-supplied input in the logo filename functionality. Attackers can exploit this vulnerability by manipulating the logo filename to reference files outside of the restricted directory. This can lead to unauthorized reading or deletion of files by utilizing the `/api/system/upload-logo` and `/api/system/logo` endpoints. The issue stems from the lack of filtering or validation on the logo filename, allowing attackers to target sensitive files such as the application's database.",
    "cve_publish_date": "2024-04-10T17:15Z",
    "cwe_id": "CWE-23",
    "cwe_name": "Relative Path Traversal",
    "cwe_description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as \"..\" that can resolve to a location that is outside of that directory.",
    "commit_message": "norm path logo",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "logo.js",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "8",
            "number_of_lines_deleted_vulnerable_to_cve": "7",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 14: }",
                "// Line 15: ",
                "// Line 16: async function determineLogoFilepath(defaultFilename = LOGO_FILENAME) {",
                "// Line 17:   const currentLogoFilename = await SystemSettings.currentLogoFilename();",
                "// Line 18:   const basePath = process.env.STORAGE_DIR",
                "// Line 19:     ? path.join(process.env.STORAGE_DIR, \"assets\")",
                "// Line 20:     : path.join(__dirname, \"../../storage/assets\");",
                "// Line 21:   const defaultFilepath = path.join(basePath, defaultFilename);",
                "// Line 22: ",
                "// Line 23:   if (currentLogoFilename && validFilename(currentLogoFilename)) {",
                "// vulnerable line: 24: customLogoPath = path.join(basePath, currentLogoFilename);",
                "// Line 25:     return fs.existsSync(customLogoPath) ? customLogoPath : defaultFilepath;",
                "// Line 26:   }",
                "// Line 27: ",
                "// Line 28:   return defaultFilepath;",
                "// Line 29: }",
                "// Line 30: ",
                "// Line 31: function fetchLogo(logoPath) {",
                "// Line 32:   if (!fs.existsSync(logoPath)) {",
                "// Line 33:     return {",
                "// Line 34:       found: false,",
                "// Line 45:     buffer,",
                "// Line 46:     size: buffer.length,",
                "// Line 47:     mime,",
                "// Line 48:   };",
                "// Line 49: }",
                "// Line 50: ",
                "// Line 51: async function renameLogoFile(originalFilename = null) {",
                "// Line 52:   const extname = path.extname(originalFilename) || \".png\";",
                "// Line 53:   const newFilename = `${v4()}${extname}`;",
                "// Line 54:   const originalFilepath = process.env.STORAGE_DIR",
                "// vulnerable line: 55: ? path.join(process.env.STORAGE_DIR, \"assets\", originalFilename)",
                "// vulnerable line: 56: : path.join(__dirname, `../../storage/assets/${originalFilename}`);",
                "// Line 57:   const outputFilepath = process.env.STORAGE_DIR",
                "// vulnerable line: 58: ? path.join(process.env.STORAGE_DIR, \"assets\", newFilename)",
                "// vulnerable line: 59: : path.join(__dirname, `../../storage/assets/${newFilename}`);",
                "// Line 60: ",
                "// Line 61:   fs.renameSync(originalFilepath, outputFilepath);",
                "// Line 62:   return newFilename;",
                "// Line 63: }",
                "// Line 64: ",
                "// Line 65: async function removeCustomLogo(logoFilename = LOGO_FILENAME) {",
                "// Line 66:   if (!logoFilename || !validFilename(logoFilename)) return false;",
                "// Line 67:   const logoPath = process.env.STORAGE_DIR",
                "// vulnerable line: 68: ? path.join(process.env.STORAGE_DIR, `assets/${logoFilename}`)",
                "// vulnerable line: 69: : path.join(__dirname, `../../storage/assets/${logoFilename}`);",
                "// Line 70:   if (fs.existsSync(logoPath)) fs.unlinkSync(logoPath);",
                "// Line 71:   return true;",
                "// Line 72: }",
                "// Line 73: ",
                "// Line 74: module.exports = {",
                "// Line 75:   fetchLogo,",
                "// Line 76:   renameLogoFile,",
                "// Line 77:   removeCustomLogo,",
                "// Line 78:   validFilename,",
                "// Line 79:   getDefaultFilename,"
            ]
        }
    ]
}