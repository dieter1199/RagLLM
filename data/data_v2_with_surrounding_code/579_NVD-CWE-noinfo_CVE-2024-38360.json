{
    "cve_id": "CVE-2024-38360",
    "cve_description": "Discourse is an open source platform for community discussion. In affected versions by creating replacement words with an almost unlimited number of characters, a moderator can reduce the availability of a Discourse instance. This issue has been addressed in stable version 3.2.3 and in current betas. Users are advised to upgrade. Users unable to upgrade may manually remove the long watched words either via SQL or Rails console.",
    "cve_publish_date": "2024-07-15T20:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "SECURITY: limit the number of characters in watched word replacements.\n\nThe watch words controller creation function, create_or_update_word(), doesn’t validate the size of the replacement parameter, unlike the word parameter, when creating a replace watched word. So anyone with moderator privileges can create watched words with almost unlimited characters.",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "admin_watched_words.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "admin_watched_words_spec.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "7",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "watched_word.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "5",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: # frozen_string_literal: true",
                "// Line 2: ",
                "// Line 3: class WatchedWord < ActiveRecord::Base",
                "// Line 4:   MAX_WORDS_PER_ACTION = 2000",
                "// Line 5: ",
                "// vulnerable line: 6: before_validation { self.word = WatchedWord.normalize_word(self.word) }",
                "// Line 7: ",
                "// Line 8:   before_validation do",
                "// Line 9:     if self.action == WatchedWord.actions[:link] && self.replacement !~ %r{\\Ahttps?://}",
                "// Line 10:       self.replacement =",
                "// Line 11:         \"#{Discourse.base_url}#{self.replacement&.starts_with?(\"/\") ? \"\" : \"/\"}#{self.replacement}\"",
                "// Line 12:     end",
                "// Line 13:   end",
                "// Line 14: ",
                "// Line 15:   validates :word, presence: true, uniqueness: true, length: { maximum: 100 }",
                "// Line 16:   validates :action, presence: true"
            ]
        },
        {
            "filename_of_changes": "watched_word_group.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "10",
            "number_of_lines_deleted_vulnerable_to_cve": "10",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: # frozen_string_literal: true",
                "// Line 2: ",
                "// Line 3: class WatchedWordGroup < ActiveRecord::Base",
                "// Line 4:   validates :action, presence: true",
                "// Line 5: ",
                "// Line 6:   has_many :watched_words, dependent: :destroy",
                "// Line 7: ",
                "// Line 8:   def create_or_update_members(words, params)",
                "// Line 9:     WatchedWordGroup.transaction do",
                "// Line 10:       self.action = WatchedWord.actions[params[:action_key].to_sym]",
                "// vulnerable line: 11: self.save! if self.changed?",
                "// Line 12: ",
                "// Line 13:       words.each do |word|",
                "// vulnerable line: 14: watched_word =",
                "// vulnerable line: 15: WatchedWord.create_or_update_word(",
                "// vulnerable line: 16: params.merge(word: word, watched_word_group_id: self.id),",
                "// vulnerable line: 17: )",
                "// Line 18: ",
                "// vulnerable line: 19: if !watched_word.valid?",
                "// vulnerable line: 20: self.errors.merge!(watched_word.errors)",
                "// vulnerable line: 21: raise ActiveRecord::Rollback",
                "// vulnerable line: 22: end",
                "// vulnerable line: 23: end",
                "// vulnerable line: 24: end",
                "// vulnerable line: 25: end",
                "// Line 26: ",
                "// Line 27:   def action_log_details",
                "// Line 28:     \"#{WatchedWord.actions.key(self.action)} → #{watched_words.pluck(:word).join(\", \")}\"",
                "// vulnerable line: 29: end",
                "// vulnerable line: 30: end",
                "// Line 31: ",
                "// Line 32: # == Schema Information",
                "// Line 33: #",
                "// Line 34: # Table name: watched_word_groups",
                "// Line 35: #",
                "// Line 36: #  id         :bigint           not null, primary key",
                "// Line 37: #  action     :integer          not null",
                "// Line 38: #  created_at :datetime         not null",
                "// Line 39: #  updated_at :datetime         not null",
                "// Line 40: #"
            ]
        },
        {
            "filename_of_changes": "watched_word_group_fabricator.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: # frozen_string_literal: true",
                "// Line 2: ",
                "// vulnerable line: 3: Fabricator(:watched_word_group) { action WatchedWord.actions[:block] }"
            ]
        },
        {
            "filename_of_changes": "watched_word_group_spec.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "8",
            "number_of_lines_deleted_vulnerable_to_cve": "15",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: # frozen_string_literal: true",
                "// Line 2: ",
                "// Line 3: RSpec.describe WatchedWordGroup do",
                "// Line 4:   fab!(:watched_word_group)",
                "// vulnerable line: 5: fab!(:watched_word_1) { Fabricate(:watched_word, watched_word_group_id: watched_word_group.id) }",
                "// Line 6:   fab!(:watched_word_2) { Fabricate(:watched_word, watched_word_group_id: watched_word_group.id) }",
                "// Line 7: ",
                "// Line 8:   describe \"#create_or_update_members\" do",
                "// Line 9:     it \"updates watched word action\" do",
                "// Line 10:       words = [watched_word_1.word, watched_word_2.word, \"damn\", \"4sale\"]",
                "// Line 11:       old_action = watched_word_group.action",
                "// Line 12:       watched_words_before_update = watched_word_group.watched_words",
                "// Line 13: ",
                "// Line 14:       expect(old_action).to eq(WatchedWord.actions[:block])",
                "// Line 15:       expect(watched_words_before_update.map(&:action).uniq).to contain_exactly(old_action)",
                "// Line 16: ",
                "// Line 17:       watched_word_group.create_or_update_members(words, action_key: :censor)",
                "// Line 18: ",
                "// Line 19:       expect(watched_word_group.reload.errors).to be_empty",
                "// Line 20: ",
                "// vulnerable line: 21: watched_words = watched_word_group.watched_words",
                "// Line 22: ",
                "// Line 23:       expect(watched_words.size).to eq(4)",
                "// Line 24:       expect(watched_words.map(&:word)).to contain_exactly(*words)",
                "// Line 25:       expect(watched_words.map(&:action).uniq).to contain_exactly(WatchedWord.actions[:censor])",
                "// Line 26:       expect(watched_word_group.action).to eq(WatchedWord.actions[:censor])",
                "// Line 27:     end",
                "// Line 28: ",
                "// vulnerable line: 29: it \"leaves membership intact if update fails\" do",
                "// Line 30:       words = [watched_word_1.word, watched_word_2.word, \"a\" * 120]",
                "// Line 31:       old_action = watched_word_group.action",
                "// Line 32:       watched_words_before_update = watched_word_group.watched_words",
                "// Line 33: ",
                "// Line 34:       expect(watched_words_before_update.size).to eq(2)",
                "// Line 35:       expect(watched_words_before_update.map(&:word)).to contain_exactly(",
                "// Line 36:         watched_word_1.word,",
                "// Line 37:         watched_word_2.word,",
                "// vulnerable line: 38: )",
                "// Line 39:       expect(watched_words_before_update.map(&:action).uniq).to contain_exactly(old_action)",
                "// Line 40: ",
                "// vulnerable line: 41: watched_word_group.create_or_update_members(",
                "// vulnerable line: 42: words,",
                "// vulnerable line: 43: action_key: WatchedWord.actions[watched_word_group.action],",
                "// vulnerable line: 44: )",
                "// Line 45: ",
                "// vulnerable line: 46: expect(watched_word_group.reload.errors).not_to be_empty",
                "// Line 47: ",
                "// vulnerable line: 48: watched_words = watched_word_group.watched_words",
                "// Line 49: ",
                "// vulnerable line: 50: expect(watched_word_group.action).to eq(old_action)",
                "// vulnerable line: 51: expect(watched_words.size).to eq(2)",
                "// vulnerable line: 52: expect(watched_words.map(&:word)).to contain_exactly(watched_word_1.word, watched_word_2.word)",
                "// vulnerable line: 53: expect(watched_words.map(&:action).uniq).to contain_exactly(old_action)",
                "// Line 54:     end",
                "// Line 55:   end",
                "// Line 56: end"
            ]
        },
        {
            "filename_of_changes": "watched_word_spec.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "12",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "watched_words_controller_spec.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 82:       it \"should be able to delete a watched word\" do",
                "// Line 83:         delete \"/admin/customize/watched_words/#{watched_word.id}.json\"",
                "// Line 84: ",
                "// Line 85:         expect(response.status).to eq(200)",
                "// Line 86:         expect(WatchedWord.find_by(id: watched_word.id)).to eq(nil)",
                "// Line 87:         expect(UserHistory.where(action: UserHistory.actions[:watched_word_destroy]).count).to eq(1)",
                "// Line 88:       end",
                "// Line 89: ",
                "// Line 90:       it \"should delete watched word group if it's the last word\" do",
                "// Line 91:         watched_word_group = Fabricate(:watched_word_group)",
                "// vulnerable line: 92: watched_word.update!(watched_word_group: watched_word_group)",
                "// Line 93: ",
                "// Line 94:         delete \"/admin/customize/watched_words/#{watched_word.id}.json\"",
                "// Line 95: ",
                "// Line 96:         expect(response.status).to eq(200)",
                "// Line 97:         expect(WatchedWordGroup.exists?(id: watched_word_group.id)).to be_falsey",
                "// Line 98:         expect(WatchedWord.exists?(id: watched_word.id)).to be_falsey",
                "// Line 99:         expect(",
                "// Line 100:           UserHistory.where(action: UserHistory.actions[:delete_watched_word_group]).count,",
                "// Line 101:         ).to eq(1)",
                "// Line 102:       end"
            ]
        }
    ]
}