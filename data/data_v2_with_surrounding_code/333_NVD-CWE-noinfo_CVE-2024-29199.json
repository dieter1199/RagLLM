{
    "cve_id": "CVE-2024-29199",
    "cve_description": "Nautobot is a Network Source of Truth and Network Automation Platform. A number of Nautobot URL endpoints were found to be improperly accessible to unauthenticated (anonymous) users. These endpoints will not disclose any Nautobot data to an unauthenticated user unless the Nautobot configuration variable EXEMPT_VIEW_PERMISSIONS is changed from its default value (an empty list) to permit access to specific data by unauthenticated users. This vulnerability is fixed in 1.6.16 and 2.1.9.",
    "cve_publish_date": "2024-03-26T03:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "View authentication and permission fixes (#5464)",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "__init__.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "7",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 4: import sys",
                "// Line 5: import time",
                "// Line 6: ",
                "// Line 7: from db_file_storage.views import get_file",
                "// Line 8: from django.apps import apps",
                "// Line 9: from django.conf import settings",
                "// Line 10: from django.contrib.auth.decorators import permission_required",
                "// Line 11: from django.contrib.auth.mixins import AccessMixin, LoginRequiredMixin",
                "// Line 12: from django.contrib.contenttypes.models import ContentType",
                "// Line 13: from django.http import HttpResponseForbidden, HttpResponseServerError, JsonResponse",
                "// vulnerable line: 14: from django.shortcuts import get_object_or_404, redirect, render",
                "// Line 15: from django.template import loader, RequestContext, Template",
                "// Line 16: from django.template.exceptions import TemplateDoesNotExist",
                "// Line 17: from django.urls import resolve, reverse",
                "// Line 18: from django.utils.encoding import smart_str",
                "// Line 19: from django.views.csrf import csrf_failure as _csrf_failure",
                "// Line 20: from django.views.decorators.csrf import requires_csrf_token",
                "// Line 21: from django.views.defaults import ERROR_500_TEMPLATE_NAME, page_not_found",
                "// Line 22: from django.views.generic import TemplateView, View",
                "// Line 23: from graphene_django.views import GraphQLView",
                "// Line 24: from packaging import version",
                "// Line 67:         else:",
                "// Line 68:             raise TemplateDoesNotExist(path)",
                "// Line 69: ",
                "// Line 70:         template = Template(html)",
                "// Line 71: ",
                "// Line 72:         additional_context = RequestContext(request, context)",
                "// Line 73:         return template.render(additional_context)",
                "// Line 74: ",
                "// Line 75:     def get(self, request, *args, **kwargs):",
                "// Line 76:         # Redirect user to login page if not authenticated",
                "// vulnerable line: 77: if not request.user.is_authenticated:",
                "// Line 78:             return self.handle_no_permission()",
                "// Line 79:         # Check whether a new release is available. (Only for staff/superusers.)",
                "// Line 80:         new_release = None",
                "// Line 81:         if request.user.is_staff or request.user.is_superuser:",
                "// Line 82:             latest_release, release_url = get_latest_release()",
                "// Line 83:             if isinstance(latest_release, version.Version):",
                "// Line 84:                 current_version = version.parse(settings.VERSION)",
                "// Line 85:                 if latest_release > current_version:",
                "// Line 86:                     new_release = {",
                "// Line 87:                         \"version\": str(latest_release),",
                "// Line 132:         return {",
                "// Line 133:             \"content_type\": ContentType.objects.get_for_model(Status),",
                "// Line 134:             \"object\": Status.objects.first(),",
                "// Line 135:         }",
                "// Line 136: ",
                "// Line 137: ",
                "// Line 138: class SearchView(AccessMixin, View):",
                "// Line 139:     def get(self, request):",
                "// Line 140:         # if user is not authenticated, redirect to login page",
                "// Line 141:         # when attempting to search",
                "// vulnerable line: 142: if not request.user.is_authenticated:",
                "// Line 143:             return self.handle_no_permission()",
                "// Line 144: ",
                "// Line 145:         # No query",
                "// Line 146:         if \"q\" not in request.GET:",
                "// Line 147:             return render(",
                "// Line 148:                 request,",
                "// Line 149:                 \"search.html\",",
                "// Line 150:                 {",
                "// Line 151:                     \"form\": SearchForm(),",
                "// Line 152:                 },",
                "// Line 203:         return render(",
                "// Line 204:             request,",
                "// Line 205:             \"search.html\",",
                "// Line 206:             {",
                "// Line 207:                 \"form\": form,",
                "// Line 208:                 \"results\": results,",
                "// Line 209:             },",
                "// Line 210:         )",
                "// Line 211: ",
                "// Line 212: ",
                "// vulnerable line: 213: class StaticMediaFailureView(View):",
                "// Line 214:     \"\"\"",
                "// Line 215:     Display a user-friendly error message with troubleshooting tips when a static media file fails to load.",
                "// Line 216:     \"\"\"",
                "// Line 217: ",
                "// Line 218:     def get(self, request):",
                "// Line 219:         return render(request, \"media_failure.html\", {\"filename\": request.GET.get(\"filename\")})",
                "// Line 220: ",
                "// Line 221: ",
                "// Line 222: def resource_not_found(request, exception):",
                "// Line 223:     if request.path.startswith(\"/api/\"):",
                "// Line 258:     t = loader.get_template(template_name)",
                "// Line 259:     context = {",
                "// Line 260:         \"reason\": reason,",
                "// Line 261:         \"settings\": settings,",
                "// Line 262:         \"nautobot_version\": settings.VERSION,",
                "// Line 263:         \"python_version\": platform.python_version(),",
                "// Line 264:     }",
                "// Line 265:     return HttpResponseForbidden(t.render(context), content_type=\"text/html\")",
                "// Line 266: ",
                "// Line 267: ",
                "// vulnerable line: 268: class CustomGraphQLView(GraphQLView):",
                "// Line 269:     def render_graphiql(self, request, **data):",
                "// vulnerable line: 270: if not request.user.is_authenticated:",
                "// vulnerable line: 271: graphql_url = reverse(\"graphql\")",
                "// vulnerable line: 272: login_url = reverse(settings.LOGIN_URL)",
                "// vulnerable line: 273: return redirect(f\"{login_url}?next={graphql_url}\")",
                "// Line 274:         query_name = request.GET.get(\"name\")",
                "// Line 275:         if query_name:",
                "// Line 276:             data[\"obj\"] = GraphQLQuery.objects.get(name=query_name)",
                "// Line 277:             data[\"editing\"] = True",
                "// Line 278:         data[\"saved_graphiql_queries\"] = GraphQLQuery.objects.all()",
                "// Line 279:         data[\"form\"] = GraphQLQueryForm",
                "// Line 280:         return render(request, self.graphiql_template, data)",
                "// Line 281: ",
                "// Line 282: ",
                "// Line 283: class NautobotAppMetricsCollector(Collector):"
            ]
        },
        {
            "filename_of_changes": "api.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 12: from nautobot.core.api.fields import (",
                "// Line 13:     ChoiceField,",
                "// Line 14:     ContentTypeField,",
                "// Line 15:     NautobotHyperlinkedRelatedField,",
                "// Line 16:     ObjectTypeField,",
                "// Line 17:     SerializedPKRelatedField,",
                "// Line 18:     TimeZoneSerializerField,",
                "// Line 19: )",
                "// Line 20: from nautobot.core.api.mixins import WritableSerializerMixin",
                "// Line 21: from nautobot.core.api.parsers import NautobotCSVParser",
                "// vulnerable line: 22: from nautobot.core.api.routers import OrderedDefaultRouter",
                "// Line 23: from nautobot.core.api.schema import NautobotAutoSchema",
                "// Line 24: from nautobot.core.api.serializers import (",
                "// Line 25:     OptInFieldsMixin,",
                "// Line 26:     TreeModelSerializerMixin,",
                "// Line 27: )",
                "// Line 28: from nautobot.core.api.utils import (",
                "// Line 29:     dict_to_filter_params,",
                "// Line 30:     dynamic_import,",
                "// Line 31:     get_api_version_serializer,",
                "// Line 32:     get_serializer_for_model,",
                "// Line 33:     get_view_name,",
                "// Line 34:     is_api_request,",
                "// Line 35:     rest_api_server_error,",
                "// Line 36:     versioned_serializer_selector,",
                "// Line 37: )",
                "// Line 38: from nautobot.core.api.views import (",
                "// vulnerable line: 39: APIRootView,",
                "// Line 40:     BulkDestroyModelMixin,",
                "// Line 41:     BulkUpdateModelMixin,",
                "// Line 42:     GetObjectCountsView,",
                "// Line 43:     ModelViewSet,",
                "// Line 44:     ModelViewSetMixin,",
                "// Line 45:     ReadOnlyModelViewSet,",
                "// Line 46: )",
                "// Line 47: from nautobot.extras.api.fields import MultipleChoiceJSONField",
                "// Line 48: from nautobot.extras.api.mixins import TaggedModelSerializerMixin",
                "// Line 49: from nautobot.extras.api.views import CustomFieldModelViewSet, NautobotModelViewSet, NotesViewSetMixin"
            ]
        },
        {
            "filename_of_changes": "core-view-overrides.md",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "6",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 7: To override a view, you must specify the view's fully qualified name as the `dict` key which consists of the app name followed by the view's name separated by a colon, for instance `dcim:device`. The `dict` value should be the overriding view function.",
                "// Line 8: ",
                "// Line 9: A simple example to override the device detail view:",
                "// Line 10: ",
                "// Line 11: ```python",
                "// Line 12: # views.py",
                "// Line 13: from django.shortcuts import HttpResponse",
                "// Line 14: from django.views import generic",
                "// Line 15: ",
                "// Line 16: ",
                "// vulnerable line: 17: class DeviceViewOverride(generic.View):",
                "// Line 18:     def get(self, request, *args, **kwargs):",
                "// Line 19:         return HttpResponse((\"Hello world! I'm a view which \"",
                "// Line 20:                              \"overrides the device object detail view.\"))",
                "// Line 21: ",
                "// Line 22: ",
                "// Line 23: override_views = {",
                "// Line 24:     \"dcim:device\": DeviceViewOverride.as_view(),",
                "// Line 25: }",
                "// Line 26: ```"
            ]
        },
        {
            "filename_of_changes": "django-generic-views.md",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "6",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: # Utilizing Generic Django Views",
                "// Line 2: ",
                "// Line 3: The use of `generic` Django views can aid in app development. As an example, let's write a view which displays a random animal and the sound it makes. First, create the view in `views.py`:",
                "// Line 4: ",
                "// Line 5: ```python",
                "// Line 6: # views.py",
                "// Line 7: from django.shortcuts import render",
                "// vulnerable line: 8: from django.views.generic import View",
                "// Line 9: ",
                "// Line 10: from .models import Animal",
                "// Line 11: ",
                "// Line 12: ",
                "// vulnerable line: 13: class RandomAnimalView(View):",
                "// Line 14:     \"\"\"Display a randomly-selected Animal.\"\"\"",
                "// Line 15: ",
                "// Line 16:     def get(self, request):",
                "// Line 17:         animal = Animal.objects.order_by('?').first()",
                "// Line 18:         return render(request, 'nautobot_animal_sounds/animal.html', {",
                "// Line 19:             'animal': animal,",
                "// Line 20:         })",
                "// Line 21: ```",
                "// Line 22: ",
                "// Line 23: This view retrieves a random animal from the database and and passes it as a context variable when rendering a template named `animal.html`, which doesn't exist yet. To create this template, first create a directory named `templates/nautobot_animal_sounds/` within the app source directory. (We use the app's name as a subdirectory to guard against naming collisions with other apps.) Then, create a template named `animal.html` as described below."
            ]
        },
        {
            "filename_of_changes": "generic.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "9",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "routers.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "25",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: from rest_framework.routers import DefaultRouter",
                "// Line 2: ",
                "// Line 3: ",
                "// Line 4: class OrderedDefaultRouter(DefaultRouter):",
                "// vulnerable line: 5: def __init__(self, *args, **kwargs):",
                "// Line 6:         super().__init__(*args, **kwargs)",
                "// Line 7: ",
                "// Line 8:         # Extend the list view mappings to support the DELETE operation",
                "// Line 9:         self.routes[0].mapping.update(",
                "// Line 10:             {",
                "// Line 11:                 \"put\": \"bulk_update\",",
                "// Line 12:                 \"patch\": \"bulk_partial_update\",",
                "// Line 13:                 \"delete\": \"bulk_destroy\",",
                "// Line 14:             }",
                "// Line 15:         )"
            ]
        },
        {
            "filename_of_changes": "settings.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "test_api.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "test_graphql.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "14",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 105:         GraphQLQuery.objects.create(name=\"GQL 1\", query=\"{ query: locations {name} }\")",
                "// Line 106:         GraphQLQuery.objects.create(name=\"GQL 2\", query=\"query ($name: [String!]) { locations(name:$name) {name} }\")",
                "// Line 107:         self.location_type = LocationType.objects.get(name=\"Campus\")",
                "// Line 108:         location_status = Status.objects.get_for_model(Location).first()",
                "// Line 109:         self.locations = (",
                "// Line 110:             Location.objects.create(name=\"Location-1\", location_type=self.location_type, status=location_status),",
                "// Line 111:             Location.objects.create(name=\"Location-2\", location_type=self.location_type, status=location_status),",
                "// Line 112:             Location.objects.create(name=\"Location-3\", location_type=self.location_type, status=location_status),",
                "// Line 113:         )",
                "// Line 114: ",
                "// vulnerable line: 115: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 116:     def test_execute_query(self):",
                "// Line 117:         query = \"{ query: locations {name} }\"",
                "// Line 118:         resp = execute_query(query, user=self.user).to_dict()",
                "// Line 119:         self.assertFalse(resp[\"data\"].get(\"error\"))",
                "// Line 120:         self.assertEqual(len(resp[\"data\"][\"query\"]), Location.objects.all().count())",
                "// Line 121: ",
                "// Line 122:     @skip(\"Works in isolation, fails as part of the overall test suite due to issue #446\")",
                "// vulnerable line: 123: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 124:     def test_execute_query_with_custom_field_type_date(self):",
                "// Line 125:         \"\"\"Test Custom Field with Date type returns valid Date object and not string. Fix for bug #3664\"\"\"",
                "// Line 126:         custom_field = CustomField(",
                "// Line 127:             type=CustomFieldTypeChoices.TYPE_DATE, label=\"custom_date_field\", key=\"custom_date_field\"",
                "// Line 128:         )",
                "// Line 129:         custom_field.validated_save()",
                "// Line 130:         custom_field.content_types.set([ContentType.objects.get_for_model(Location)])",
                "// Line 131:         custom_field_data = {\"custom_date_field\": \"2023-01-23\"}",
                "// Line 132:         self.locations[0]._custom_field_data = custom_field_data",
                "// Line 133:         self.locations[0].save()",
                "// Line 134:         query = \"query ($name: [String!]) { locations(name:$name) {name, _custom_field_data, cf_custom_date_field} }\"",
                "// Line 135:         resp = execute_query(query, user=self.user, variables={\"name\": \"Location-1\"}).to_dict()",
                "// Line 136:         self.assertEqual(resp[\"data\"][\"locations\"][\"cf_custom_date_field\"], custom_field_data)",
                "// Line 137: ",
                "// Line 138:     @skip(\"Works in isolation, fails as part of the overall test suite due to issue #446\")",
                "// vulnerable line: 139: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 140:     def test_execute_query_with_custom_field_type_json(self):",
                "// Line 141:         \"\"\"Test Custom Field with JSON type returns valid JSON object and not string. Fix for bug #4627\"\"\"",
                "// Line 142:         custom_field = CustomField(",
                "// Line 143:             type=CustomFieldTypeChoices.TYPE_JSON, label=\"custom_json_field\", key=\"custom_json_field\"",
                "// Line 144:         )",
                "// Line 145:         custom_field.validated_save()",
                "// Line 146:         custom_field.content_types.set([ContentType.objects.get_for_model(Location)])",
                "// Line 147:         custom_field_data = {\"custom_json_field\": {\"name\": \"Custom Example\", \"is_customfield\": True}}",
                "// Line 148:         self.locations[0]._custom_field_data = custom_field_data",
                "// Line 149:         self.locations[0].save()",
                "// Line 150:         query = \"query ($name: [String!]) { locations(name:$name) {name, _custom_field_data, cf_custom_json_field} }\"",
                "// Line 151:         resp = execute_query(query, user=self.user, variables={\"name\": \"Location-1\"}).to_dict()",
                "// Line 152:         self.assertEqual(resp[\"data\"][\"locations\"][\"cf_custom_json_field\"], custom_field_data)",
                "// Line 153: ",
                "// vulnerable line: 154: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 155:     def test_execute_query_with_variable(self):",
                "// Line 156:         query = \"query ($name: [String!]) { locations(name:$name) {name} }\"",
                "// Line 157:         resp = execute_query(query, user=self.user, variables={\"name\": \"Location-1\"}).to_dict()",
                "// Line 158:         self.assertFalse(resp.get(\"error\"))",
                "// Line 159:         self.assertEqual(len(resp[\"data\"][\"locations\"]), 1)",
                "// Line 160: ",
                "// Line 161:     def test_execute_query_with_error(self):",
                "// Line 162:         query = \"THIS TEST WILL ERROR\"",
                "// Line 163:         with self.assertRaises(GraphQLError):",
                "// Line 164:             execute_query(query, user=self.user).to_dict()",
                "// Line 172:         self.assertFalse(resp[\"data\"].get(\"error\"))",
                "// Line 173: ",
                "// Line 174:     def test_graphql_types_registry(self):",
                "// Line 175:         \"\"\"Ensure models with graphql feature are registered in the graphene_django registry.\"\"\"",
                "// Line 176:         graphene_django_registry = get_global_registry()",
                "// Line 177:         for app_label, models in registry[\"model_features\"][\"graphql\"].items():",
                "// Line 178:             for model_name in models:",
                "// Line 179:                 model = apps.get_model(app_label=app_label, model_name=model_name)",
                "// Line 180:                 self.assertIsNotNone(graphene_django_registry.get_type_for_model(model))",
                "// Line 181: ",
                "// vulnerable line: 182: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 183:     def test_graphql_url_field(self):",
                "// Line 184:         \"\"\"Test the url field for all graphql types.\"\"\"",
                "// Line 185:         schema = self.SCHEMA.introspect()",
                "// Line 186:         graphql_fields = schema[\"__schema\"][\"types\"][0][\"fields\"]",
                "// Line 187:         for graphql_field in graphql_fields:",
                "// Line 188:             if graphql_field[\"type\"][\"kind\"] == \"LIST\" or graphql_field[\"name\"] == \"content_type\":",
                "// Line 189:                 continue",
                "// Line 190:             with self.subTest(f\"Testing graphql url field for {graphql_field['name']}\"):",
                "// Line 191:                 graphene_object_type_definition = self.SCHEMA.get_type(graphql_field[\"type\"][\"name\"])",
                "// Line 192: ",
                "// Line 585:             rack (id: $id) {",
                "// Line 586:                 name",
                "// Line 587:             }",
                "// Line 588:         }",
                "// Line 589:         \"\"\"",
                "// Line 590: ",
                "// Line 591:     def test_graphql_api_token_with_perm(self):",
                "// Line 592:         \"\"\"Validate that users can query based on their permissions.\"\"\"",
                "// Line 593:         # First user",
                "// Line 594:         response = self.clients[0].post(self.api_url, {\"query\": self.get_racks_query}, format=\"json\")",
                "// vulnerable line: 595: self.assertEqual(response.status_code, status.HTTP_200_OK)",
                "// vulnerable line: 596: self.assertIsInstance(response.data[\"data\"][\"racks\"], list)",
                "// vulnerable line: 597: names = [item[\"name\"] for item in response.data[\"data\"][\"racks\"]]",
                "// Line 598:         self.assertEqual(names, [\"Rack 1-1\", \"Rack 1-2\"])",
                "// Line 599: ",
                "// Line 600:         # Second user",
                "// Line 601:         response = self.clients[1].post(self.api_url, {\"query\": self.get_racks_query}, format=\"json\")",
                "// vulnerable line: 602: self.assertEqual(response.status_code, status.HTTP_200_OK)",
                "// vulnerable line: 603: self.assertIsInstance(response.data[\"data\"][\"racks\"], list)",
                "// vulnerable line: 604: names = [item[\"name\"] for item in response.data[\"data\"][\"racks\"]]",
                "// Line 605:         self.assertEqual(names, [\"Rack 2-1\", \"Rack 2-2\"])",
                "// Line 606: ",
                "// Line 607:     def test_graphql_api_token_super_user(self):",
                "// Line 608:         \"\"\"Validate a superuser can query everything.\"\"\"",
                "// Line 609:         response = self.clients[2].post(self.api_url, {\"query\": self.get_racks_query}, format=\"json\")",
                "// vulnerable line: 610: self.assertEqual(response.status_code, status.HTTP_200_OK)",
                "// vulnerable line: 611: self.assertIsInstance(response.data[\"data\"][\"racks\"], list)",
                "// vulnerable line: 612: names = [item[\"name\"] for item in response.data[\"data\"][\"racks\"]]",
                "// vulnerable line: 613: self.assertEqual(names, [\"Rack 1-1\", \"Rack 1-2\", \"Rack 2-1\", \"Rack 2-2\"])",
                "// Line 614: ",
                "// Line 615:     def test_graphql_api_token_no_group(self):",
                "// Line 616:         \"\"\"Validate users with no permission are not able to query anything by default.\"\"\"",
                "// Line 617:         response = self.clients[3].post(self.api_url, {\"query\": self.get_racks_query}, format=\"json\")",
                "// vulnerable line: 618: self.assertEqual(response.status_code, status.HTTP_200_OK)",
                "// vulnerable line: 619: self.assertIsInstance(response.data[\"data\"][\"racks\"], list)",
                "// vulnerable line: 620: names = [item[\"name\"] for item in response.data[\"data\"][\"racks\"]]",
                "// vulnerable line: 621: self.assertEqual(names, [])",
                "// Line 622: ",
                "// vulnerable line: 623: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 624:     def test_graphql_api_token_no_group_exempt(self):",
                "// Line 625:         \"\"\"Validate users with no permission are able to query based on the exempt permissions.\"\"\"",
                "// Line 626:         response = self.clients[3].post(self.api_url, {\"query\": self.get_racks_query}, format=\"json\")",
                "// vulnerable line: 627: self.assertEqual(response.status_code, status.HTTP_200_OK)",
                "// vulnerable line: 628: self.assertIsInstance(response.data[\"data\"][\"racks\"], list)",
                "// vulnerable line: 629: names = [item[\"name\"] for item in response.data[\"data\"][\"racks\"]]",
                "// vulnerable line: 630: self.assertEqual(names, [\"Rack 1-1\", \"Rack 1-2\", \"Rack 2-1\", \"Rack 2-2\"])",
                "// Line 631: ",
                "// Line 632:     def test_graphql_api_no_token(self):",
                "// vulnerable line: 633: \"\"\"Validate unauthenticated users are not able to query anything by default.\"\"\"",
                "// vulnerable line: 634: response = self.client.post(self.api_url, {\"query\": self.get_racks_query}, format=\"json\")",
                "// vulnerable line: 635: self.assertEqual(response.status_code, status.HTTP_200_OK)",
                "// vulnerable line: 636: self.assertIsInstance(response.data[\"data\"][\"racks\"], list)",
                "// vulnerable line: 637: names = [item[\"name\"] for item in response.data[\"data\"][\"racks\"]]",
                "// vulnerable line: 638: self.assertEqual(names, [])",
                "// Line 639: ",
                "// vulnerable line: 640: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// vulnerable line: 641: def test_graphql_api_no_token_exempt(self):",
                "// vulnerable line: 642: \"\"\"Validate unauthenticated users are able to query based on the exempt permissions.\"\"\"",
                "// vulnerable line: 643: response = self.client.post(self.api_url, {\"query\": self.get_racks_query}, format=\"json\")",
                "// vulnerable line: 644: self.assertEqual(response.status_code, status.HTTP_200_OK)",
                "// vulnerable line: 645: self.assertIsInstance(response.data[\"data\"][\"racks\"], list)",
                "// vulnerable line: 646: names = [item[\"name\"] for item in response.data[\"data\"][\"racks\"]]",
                "// vulnerable line: 647: self.assertEqual(names, [\"Rack 1-1\", \"Rack 1-2\", \"Rack 2-1\", \"Rack 2-2\"])",
                "// Line 648: ",
                "// Line 649:     def test_graphql_api_wrong_token(self):",
                "// Line 650:         \"\"\"Validate a wrong token return 403.\"\"\"",
                "// Line 651:         self.client.credentials(HTTP_AUTHORIZATION=\"Token zzzzzzzzzzabcdef0123456789abcdef01234567\")",
                "// vulnerable line: 652: response = self.client.post(self.api_url, {\"query\": self.get_racks_query}, format=\"json\")",
                "// Line 653:         self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)",
                "// Line 654: ",
                "// Line 655:     def test_graphql_query_params(self):",
                "// Line 656:         \"\"\"Validate query parameters are available for a model.\"\"\"",
                "// Line 657:         response = self.clients[2].post(self.api_url, {\"query\": self.get_racks_params_query}, format=\"json\")",
                "// vulnerable line: 658: self.assertEqual(response.status_code, status.HTTP_200_OK)",
                "// vulnerable line: 659: self.assertIsInstance(response.data[\"data\"][\"racks\"], list)",
                "// vulnerable line: 660: names = [item[\"name\"] for item in response.data[\"data\"][\"racks\"]]",
                "// Line 661:         self.assertEqual(names, [\"Rack 1-1\", \"Rack 1-2\"])",
                "// Line 662: ",
                "// Line 663:     def test_graphql_query_variables(self):",
                "// Line 664:         \"\"\"Validate graphql variables are working as expected.\"\"\"",
                "// Line 665:         payload = {\"query\": self.get_racks_var_query, \"variables\": {\"location\": \"Location 1\"}}",
                "// Line 666:         response = self.clients[2].post(self.api_url, payload, format=\"json\")",
                "// vulnerable line: 667: self.assertEqual(response.status_code, status.HTTP_200_OK)",
                "// vulnerable line: 668: self.assertIsInstance(response.data[\"data\"][\"racks\"], list)",
                "// vulnerable line: 669: names = [item[\"name\"] for item in response.data[\"data\"][\"racks\"]]",
                "// Line 670:         self.assertEqual(names, [\"Rack 1-1\", \"Rack 1-2\"])",
                "// Line 671: ",
                "// Line 672:         payload = {\"query\": self.get_racks_var_query, \"variables\": {\"location\": \"Location 2\"}}",
                "// Line 673:         response = self.clients[2].post(self.api_url, payload, format=\"json\")",
                "// vulnerable line: 674: self.assertEqual(response.status_code, status.HTTP_200_OK)",
                "// vulnerable line: 675: self.assertIsInstance(response.data[\"data\"][\"racks\"], list)",
                "// vulnerable line: 676: names = [item[\"name\"] for item in response.data[\"data\"][\"racks\"]]",
                "// Line 677:         self.assertEqual(names, [\"Rack 2-1\", \"Rack 2-2\"])",
                "// Line 678: ",
                "// Line 679:     def test_graphql_single_object_query(self):",
                "// Line 680:         \"\"\"Validate graphql query for a single object as opposed to a set of objects also works.\"\"\"",
                "// Line 681:         payload = {\"query\": self.get_rack_query, \"variables\": {\"id\": Rack.objects.first().pk}}",
                "// Line 682:         response = self.clients[2].post(self.api_url, payload, format=\"json\")",
                "// vulnerable line: 683: self.assertEqual(response.status_code, status.HTTP_200_OK)",
                "// Line 684:         self.assertIsInstance(response.data[\"data\"][\"rack\"], dict)",
                "// Line 685:         self.assertEqual(response.data[\"data\"][\"rack\"][\"name\"], Rack.objects.first().name)",
                "// Line 686: ",
                "// Line 687:     def test_graphql_query_multi_level(self):",
                "// Line 688:         \"\"\"Validate request with multiple levels return the proper information, following the permissions.\"\"\"",
                "// Line 689:         response = self.clients[0].post(self.api_url, {\"query\": self.get_locations_racks_query}, format=\"json\")",
                "// vulnerable line: 690: self.assertEqual(response.status_code, status.HTTP_200_OK)",
                "// Line 691:         self.assertIsInstance(response.data[\"data\"][\"locations\"], list)",
                "// Line 692:         self.assertGreater(len(response.data[\"data\"][\"locations\"]), 0)",
                "// Line 693:         location_names = [item[\"name\"] for item in response.data[\"data\"][\"locations\"]]",
                "// Line 694:         rack_names = [item[\"name\"] for item in response.data[\"data\"][\"locations\"][0][\"racks\"]]",
                "// Line 695:         self.assertEqual(location_names, [\"Location 1\"])",
                "// Line 696:         self.assertEqual(rack_names, [\"Rack 1-1\", \"Rack 1-2\"])",
                "// Line 697: ",
                "// Line 698:     def test_graphql_query_format(self):",
                "// Line 699:         \"\"\"Validate application/graphql query is working properly.\"\"\"",
                "// Line 700:         self.client.credentials(HTTP_AUTHORIZATION=f\"Token {self.tokens[2].key}\")",
                "// Line 701:         response = self.client.post(",
                "// Line 702:             self.api_url,",
                "// Line 703:             data=self.get_locations_racks_query,",
                "// Line 704:             content_type=\"application/graphql\",",
                "// Line 705:         )",
                "// vulnerable line: 706: self.assertEqual(response.status_code, status.HTTP_200_OK)",
                "// Line 707:         self.assertIsInstance(response.data[\"data\"][\"locations\"], list)",
                "// Line 708:         location_names = [item[\"name\"] for item in response.data[\"data\"][\"locations\"]]",
                "// Line 709:         location_list = list(Location.objects.values_list(\"name\", flat=True))",
                "// Line 710:         self.assertEqual(location_names, location_list)",
                "// Line 711: ",
                "// Line 712: ",
                "// Line 713: class GraphQLQueryTest(GraphQLTestCaseBase):",
                "// Line 714:     \"\"\"Execute various GraphQL queries and verify their correct responses.\"\"\"",
                "// Line 715: ",
                "// Line 716:     @classmethod",
                "// Line 1104: ",
                "// Line 1105:         cls.backend = get_default_backend()",
                "// Line 1106: ",
                "// Line 1107:     def execute_query(self, query, variables=None):",
                "// Line 1108:         document = self.backend.document_from_string(self.SCHEMA, query)",
                "// Line 1109:         if variables:",
                "// Line 1110:             return document.execute(context_value=self.request, variable_values=variables)",
                "// Line 1111:         else:",
                "// Line 1112:             return document.execute(context_value=self.request)",
                "// Line 1113: ",
                "// vulnerable line: 1114: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 1115:     def test_query_circuit_terminations_cable_peer(self):",
                "// Line 1116:         \"\"\"Test querying circuit terminations for their cable peers\"\"\"",
                "// Line 1117: ",
                "// Line 1118:         query = \"\"\"query {",
                "// Line 1119:     circuit_terminations {",
                "// Line 1120:         id",
                "// Line 1121:         cable_peer_circuit_termination { id }",
                "// Line 1122:         cable_peer_front_port { id }",
                "// Line 1123:         cable_peer_interface { id }",
                "// Line 1124:         cable_peer_rear_port { id }",
                "// Line 1139:             cable_peer_interface = {\"id\": str(cable_peer.id)} if isinstance(cable_peer, Interface) else None",
                "// Line 1140:             cable_peer_front_port = {\"id\": str(cable_peer.id)} if isinstance(cable_peer, FrontPort) else None",
                "// Line 1141:             cable_peer_rear_port = {\"id\": str(cable_peer.id)} if isinstance(cable_peer, RearPort) else None",
                "// Line 1142: ",
                "// Line 1143:             # Assert GraphQL returned properties match those expected",
                "// Line 1144:             self.assertEqual(circuit_term_entry[\"cable_peer_circuit_termination\"], cable_peer_circuit_termination)",
                "// Line 1145:             self.assertEqual(circuit_term_entry[\"cable_peer_interface\"], cable_peer_interface)",
                "// Line 1146:             self.assertEqual(circuit_term_entry[\"cable_peer_front_port\"], cable_peer_front_port)",
                "// Line 1147:             self.assertEqual(circuit_term_entry[\"cable_peer_rear_port\"], cable_peer_rear_port)",
                "// Line 1148: ",
                "// vulnerable line: 1149: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 1150:     def test_query_circuit_termination_connected_endpoint(self):",
                "// Line 1151:         \"\"\"Test querying circuit terminations for their connnected endpoints.\"\"\"",
                "// Line 1152: ",
                "// Line 1153:         query = \"\"\"query {",
                "// Line 1154:     circuit_terminations {",
                "// Line 1155:         id",
                "// Line 1156:         connected_circuit_termination { id }",
                "// Line 1157:         connected_interface { id }",
                "// Line 1158:     }",
                "// Line 1159: }\"\"\"",
                "// Line 1170:                 {\"id\": str(connected_endpoint.id)} if isinstance(connected_endpoint, CircuitTermination) else None",
                "// Line 1171:             )",
                "// Line 1172:             connected_interface = (",
                "// Line 1173:                 {\"id\": str(connected_endpoint.id)} if isinstance(connected_endpoint, Interface) else None",
                "// Line 1174:             )",
                "// Line 1175: ",
                "// Line 1176:             # Assert GraphQL returned properties match those expected",
                "// Line 1177:             self.assertEqual(circuit_term_entry[\"connected_circuit_termination\"], connected_circuit_termination)",
                "// Line 1178:             self.assertEqual(circuit_term_entry[\"connected_interface\"], connected_interface)",
                "// Line 1179: ",
                "// vulnerable line: 1180: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 1181:     def test_query_config_context_and_custom_field_data(self):",
                "// Line 1182:         query = (",
                "// Line 1183:             # pylint: disable=consider-using-f-string",
                "// Line 1184:             \"\"\"",
                "// Line 1185:                 query {",
                "// Line 1186:                     devices {",
                "// Line 1187:                         name",
                "// Line 1188:                         config_context",
                "// Line 1189:                         _custom_field_data",
                "// Line 1190:                     }",
                "// Line 1212:         config_contexts = [item[\"config_context\"] for item in result.data[\"devices\"]]",
                "// Line 1213:         self.assertIsInstance(config_contexts[0], dict)",
                "// Line 1214:         self.assertDictEqual(config_contexts[0], expected_data)",
                "// Line 1215:         self.assertEqual(result.data[\"device\"][\"config_context\"], expected_data)",
                "// Line 1216: ",
                "// Line 1217:         custom_field_data = [item[\"_custom_field_data\"] for item in result.data[\"devices\"]]",
                "// Line 1218:         self.assertIsInstance(custom_field_data[0], dict)",
                "// Line 1219:         self.assertEqual(custom_field_data[0], {})",
                "// Line 1220:         self.assertEqual(result.data[\"device\"][\"_custom_field_data\"], {})",
                "// Line 1221: ",
                "// vulnerable line: 1222: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 1223:     def test_query_console_ports_cable_peer(self):",
                "// Line 1224:         \"\"\"Test querying console port terminations for their cable peers\"\"\"",
                "// Line 1225: ",
                "// Line 1226:         query = \"\"\"query {",
                "// Line 1227:     console_ports {",
                "// Line 1228:         id",
                "// Line 1229:         cable_peer_console_server_port { id }",
                "// Line 1230:         cable_peer_front_port { id }",
                "// Line 1231:         cable_peer_rear_port { id }",
                "// Line 1232:     }",
                "// Line 1244:                 {\"id\": str(cable_peer.id)} if isinstance(cable_peer, ConsoleServerPort) else None",
                "// Line 1245:             )",
                "// Line 1246:             cable_peer_front_port = {\"id\": str(cable_peer.id)} if isinstance(cable_peer, FrontPort) else None",
                "// Line 1247:             cable_peer_rear_port = {\"id\": str(cable_peer.id)} if isinstance(cable_peer, RearPort) else None",
                "// Line 1248: ",
                "// Line 1249:             # Assert GraphQL returned properties match those expected",
                "// Line 1250:             self.assertEqual(console_port_entry[\"cable_peer_console_server_port\"], cable_peer_console_server_port)",
                "// Line 1251:             self.assertEqual(console_port_entry[\"cable_peer_front_port\"], cable_peer_front_port)",
                "// Line 1252:             self.assertEqual(console_port_entry[\"cable_peer_rear_port\"], cable_peer_rear_port)",
                "// Line 1253: ",
                "// vulnerable line: 1254: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 1255:     def test_query_console_ports_connected_endpoint(self):",
                "// Line 1256:         \"\"\"Test querying console ports for their connnected endpoints.\"\"\"",
                "// Line 1257: ",
                "// Line 1258:         query = \"\"\"query {",
                "// Line 1259:     console_ports {",
                "// Line 1260:         id",
                "// Line 1261:         connected_console_server_port { id }",
                "// Line 1262:     }",
                "// Line 1263: }\"\"\"",
                "// Line 1264: ",
                "// Line 1270:             connected_endpoint = console_port_obj.connected_endpoint",
                "// Line 1271: ",
                "// Line 1272:             # Extract Expected Properties from CircuitTermination object",
                "// Line 1273:             connected_console_server_port = (",
                "// Line 1274:                 {\"id\": str(connected_endpoint.id)} if isinstance(connected_endpoint, ConsoleServerPort) else None",
                "// Line 1275:             )",
                "// Line 1276: ",
                "// Line 1277:             # Assert GraphQL returned properties match those expected",
                "// Line 1278:             self.assertEqual(console_port_entry[\"connected_console_server_port\"], connected_console_server_port)",
                "// Line 1279: ",
                "// vulnerable line: 1280: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 1281:     def test_interface_redundancy_group_associations(self):",
                "// Line 1282:         \"\"\"Test graphql functionality for InterfaceRedundancyGroupAssociation\"\"\"",
                "// Line 1283: ",
                "// Line 1284:         query = \"\"\"query {",
                "// Line 1285:     interface_redundancy_group_associations {",
                "// Line 1286:         id",
                "// Line 1287:         interface { id }",
                "// Line 1288:         interface_redundancy_group { id }",
                "// Line 1289:         priority",
                "// Line 1290:     }",
                "// Line 1298:         )",
                "// Line 1299:         for association in result.data[\"interface_redundancy_group_associations\"]:",
                "// Line 1300:             association_obj = InterfaceRedundancyGroupAssociation.objects.get(id=association[\"id\"])",
                "// Line 1301:             # Assert GraphQL returned properties match those expected",
                "// Line 1302:             self.assertEqual(association[\"interface\"][\"id\"], str(association_obj.interface.pk))",
                "// Line 1303:             self.assertEqual(",
                "// Line 1304:                 association[\"interface_redundancy_group\"][\"id\"], str(association_obj.interface_redundancy_group.pk)",
                "// Line 1305:             )",
                "// Line 1306:             self.assertEqual(association[\"priority\"], association_obj.priority)",
                "// Line 1307: ",
                "// vulnerable line: 1308: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 1309:     def test_ip_address_to_interface(self):",
                "// Line 1310:         \"\"\"Test graphql functionality for IPAddressToInterface\"\"\"",
                "// Line 1311: ",
                "// Line 1312:         query = \"\"\"query {",
                "// Line 1313:     ip_address_assignments {",
                "// Line 1314:         id",
                "// Line 1315:         interface { id }",
                "// Line 1316:         vm_interface { id }",
                "// Line 1317:         ip_address { id }",
                "// Line 1318:     }",
                "// Line 1330:             if association_obj.interface:",
                "// Line 1331:                 self.assertEqual(association[\"interface\"][\"id\"], str(association_obj.interface.pk))",
                "// Line 1332:             else:",
                "// Line 1333:                 self.assertEqual(association[\"interface\"], None)",
                "// Line 1334:             if association_obj.vm_interface:",
                "// Line 1335:                 self.assertEqual(association[\"vm_interface\"][\"id\"], str(association_obj.vm_interface.pk))",
                "// Line 1336:             else:",
                "// Line 1337:                 self.assertEqual(association[\"vm_interface\"], None)",
                "// Line 1338:             self.assertEqual(association[\"ip_address\"][\"id\"], str(association_obj.ip_address.pk))",
                "// Line 1339: ",
                "// vulnerable line: 1340: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 1341:     def test_vrf_assignments(self):",
                "// Line 1342:         \"\"\"Test graphql functionality for VRFDeviceAssignment and VRFPrefixAssignment\"\"\"",
                "// Line 1343: ",
                "// Line 1344:         query = \"\"\"query {",
                "// Line 1345:     vrf_device_assignments {",
                "// Line 1346:         id",
                "// Line 1347:         vrf { id }",
                "// Line 1348:         device { id }",
                "// Line 1349:     }",
                "// Line 1350:     vrf_prefix_assignments {",
                "// Line 1369:             # Assert GraphQL returned properties match those expected",
                "// Line 1370:             self.assertEqual(assignment[\"vrf\"][\"id\"], str(assignment_obj.vrf.pk))",
                "// Line 1371:             self.assertEqual(assignment[\"device\"][\"id\"], str(assignment_obj.device.pk))",
                "// Line 1372: ",
                "// Line 1373:         for assignment in result.data[\"vrf_prefix_assignments\"]:",
                "// Line 1374:             assignment_obj = VRFPrefixAssignment.objects.get(id=assignment[\"id\"])",
                "// Line 1375:             # Assert GraphQL returned properties match those expected",
                "// Line 1376:             self.assertEqual(assignment[\"vrf\"][\"id\"], str(assignment_obj.vrf.pk))",
                "// Line 1377:             self.assertEqual(assignment[\"prefix\"][\"id\"], str(assignment_obj.prefix.pk))",
                "// Line 1378: ",
                "// vulnerable line: 1379: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 1380:     def test_query_console_server_ports_cable_peer(self):",
                "// Line 1381:         \"\"\"Test querying console server port terminations for their cable peers\"\"\"",
                "// Line 1382: ",
                "// Line 1383:         query = \"\"\"query {",
                "// Line 1384:     console_server_ports {",
                "// Line 1385:         id",
                "// Line 1386:         cable_peer_console_port { id }",
                "// Line 1387:         cable_peer_front_port { id }",
                "// Line 1388:         cable_peer_rear_port { id }",
                "// Line 1389:     }",
                "// Line 1399:             # Extract Expected Properties from CircuitTermination object",
                "// Line 1400:             cable_peer_console_port = {\"id\": str(cable_peer.id)} if isinstance(cable_peer, ConsolePort) else None",
                "// Line 1401:             cable_peer_front_port = {\"id\": str(cable_peer.id)} if isinstance(cable_peer, FrontPort) else None",
                "// Line 1402:             cable_peer_rear_port = {\"id\": str(cable_peer.id)} if isinstance(cable_peer, RearPort) else None",
                "// Line 1403: ",
                "// Line 1404:             # Assert GraphQL returned properties match those expected",
                "// Line 1405:             self.assertEqual(console_server_port_entry[\"cable_peer_console_port\"], cable_peer_console_port)",
                "// Line 1406:             self.assertEqual(console_server_port_entry[\"cable_peer_front_port\"], cable_peer_front_port)",
                "// Line 1407:             self.assertEqual(console_server_port_entry[\"cable_peer_rear_port\"], cable_peer_rear_port)",
                "// Line 1408: ",
                "// vulnerable line: 1409: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 1410:     def test_query_console_server_ports_connected_endpoint(self):",
                "// Line 1411:         \"\"\"Test querying console server ports for their connnected endpoints.\"\"\"",
                "// Line 1412: ",
                "// Line 1413:         query = \"\"\"query {",
                "// Line 1414:     console_server_ports {",
                "// Line 1415:         id",
                "// Line 1416:         connected_console_port { id }",
                "// Line 1417:     }",
                "// Line 1418: }\"\"\"",
                "// Line 1419: ",
                "// Line 1428:             connected_console_port = (",
                "// Line 1429:                 {\"id\": str(connected_endpoint.id)} if isinstance(connected_endpoint, ConsolePort) else None",
                "// Line 1430:             )",
                "// Line 1431: ",
                "// Line 1432:             # Assert GraphQL returned properties match those expected",
                "// Line 1433:             self.assertEqual(console_server_port_entry[\"connected_console_port\"], connected_console_port)",
                "// Line 1434: ",
                "// Line 1435:     @skip(",
                "// Line 1436:         \"Works in isolation, fails as part of the overall test suite due to issue #446, also something is broken with content types\"",
                "// Line 1437:     )",
                "// vulnerable line: 1438: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 1439:     def test_query_relationship_associations(self):",
                "// Line 1440:         \"\"\"Test queries involving relationship associations.\"\"\"",
                "// Line 1441: ",
                "// Line 1442:         # Query testing for https://github.com/nautobot/nautobot/issues/1228",
                "// Line 1443: ",
                "// Line 1444:         query = (",
                "// Line 1445:             # pylint: disable=consider-using-f-string",
                "// Line 1446:             \"\"\"",
                "// Line 1447:                 query {",
                "// Line 1448:                     device (id: \"%s\") {",
                "// Line 1462: ",
                "// Line 1463:         self.assertIsInstance(result.data, dict, result)",
                "// Line 1464:         self.assertIsInstance(result.data[\"device\"], dict, result)",
                "// Line 1465:         self.assertEqual(result.data[\"device\"][\"name\"], self.device1.name)",
                "// Line 1466:         self.assertIsInstance(result.data[\"device\"][\"rel_device_to_vm\"], dict, result)",
                "// Line 1467:         self.assertEqual(result.data[\"device\"][\"rel_device_to_vm\"][\"id\"], str(self.virtualmachine.id))",
                "// Line 1468:         self.assertIsInstance(result.data[\"device\"][\"rel_device_group\"], list, result)",
                "// Line 1469:         self.assertIn(str(self.device2.id), set(item[\"id\"] for item in result.data[\"device\"][\"rel_device_group\"]))",
                "// Line 1470:         self.assertIn(str(self.device3.id), set(item[\"id\"] for item in result.data[\"device\"][\"rel_device_group\"]))",
                "// Line 1471: ",
                "// vulnerable line: 1472: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 1473:     def test_query_device_role_filter(self):",
                "// Line 1474:         query = (",
                "// Line 1475:             # pylint: disable=consider-using-f-string",
                "// Line 1476:             \"\"\"",
                "// Line 1477:                 query {",
                "// Line 1478:                     devices(role: \"%s\") {",
                "// Line 1479:                         id",
                "// Line 1480:                         name",
                "// Line 1481:                     }",
                "// Line 1482:                 }",
                "// Line 1483:             \"\"\"",
                "// Line 1484:             % (self.device_role1.name,)",
                "// Line 1485:         )",
                "// Line 1486:         result = self.execute_query(query)",
                "// Line 1487: ",
                "// Line 1488:         expected = list(Device.objects.filter(role=self.device_role1).values_list(\"name\", flat=True))",
                "// Line 1489:         self.assertEqual(len(result.data[\"devices\"]), len(expected))",
                "// Line 1490:         device_names = [item[\"name\"] for item in result.data[\"devices\"]]",
                "// Line 1491:         self.assertEqual(sorted(device_names), sorted(expected))",
                "// Line 1492: ",
                "// vulnerable line: 1493: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 1494:     def test_query_with_bad_filter(self):",
                "// Line 1495:         query = \"\"\"",
                "// Line 1496:             query {",
                "// Line 1497:                 devices(role: \"EXPECT NO ENTRIES\") {",
                "// Line 1498:                     id",
                "// Line 1499:                     name",
                "// Line 1500:                 }",
                "// Line 1501:             }",
                "// Line 1502:         \"\"\"",
                "// Line 1503: ",
                "// Line 1504:         response = self.execute_query(query)",
                "// Line 1505:         self.assertEqual(len(response.errors), 1)",
                "// Line 1506:         self.assertIsInstance(response.errors[0], GraphQLLocatedError)",
                "// Line 1507: ",
                "// vulnerable line: 1508: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 1509:     def test_query_locations_filter(self):",
                "// Line 1510:         filters = (",
                "// Line 1511:             ('name: \"Location-1\"', 1),",
                "// Line 1512:             ('name: [\"Location-1\"]', 1),",
                "// Line 1513:             ('name: [\"Location-1\", \"Location-2\"]', 2),",
                "// Line 1514:             ('name__ic: \"Location\"', Location.objects.filter(name__icontains=\"Location\").count()),",
                "// Line 1515:             ('name__ic: [\"Location\"]', Location.objects.filter(name__icontains=\"Location\").count()),",
                "// Line 1516:             ('name__nic: \"Location\"', Location.objects.exclude(name__icontains=\"Location\").count()),",
                "// Line 1517:             ('name__nic: [\"Location\"]', Location.objects.exclude(name__icontains=\"Location\").count()),",
                "// Line 1518:             (\"asn: 65000\", Location.objects.filter(asn=\"65000\").count()),",
                "// Line 1535:             ),",
                "// Line 1536:         )",
                "// Line 1537: ",
                "// Line 1538:         for filterv, nbr_expected_results in filters:",
                "// Line 1539:             with self.subTest(msg=f\"Checking {filterv}\", filterv=filterv, nbr_expected_results=nbr_expected_results):",
                "// Line 1540:                 query = \"query { locations(\" + filterv + \"){ name }}\"",
                "// Line 1541:                 result = self.execute_query(query)",
                "// Line 1542:                 self.assertIsNone(result.errors)",
                "// Line 1543:                 self.assertEqual(len(result.data[\"locations\"]), nbr_expected_results)",
                "// Line 1544: ",
                "// vulnerable line: 1545: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 1546:     def test_query_devices_filter(self):",
                "// Line 1547:         filterset_class = DeviceFilterSet",
                "// Line 1548:         queryset = Device.objects.all()",
                "// Line 1549: ",
                "// Line 1550:         def _count(params, filterset_class=filterset_class, queryset=queryset):",
                "// Line 1551:             return filterset_class(params, queryset).qs.count()",
                "// Line 1552: ",
                "// Line 1553:         filters = {",
                "// Line 1554:             f'name: \"{self.device1.name}\"': _count({\"name\": [self.device1.name]}),",
                "// Line 1555:             f'name: [\"{self.device1.name}\"]': _count({\"name\": [self.device1.name]}),",
                "// Line 1594:             'q: \"notthere\"': _count({\"q\": \"notthere\"}),",
                "// Line 1595:         }",
                "// Line 1596: ",
                "// Line 1597:         for filterv, nbr_expected_results in filters.items():",
                "// Line 1598:             with self.subTest(msg=f\"Checking {filterv}\", filterv=filterv, nbr_expected_results=nbr_expected_results):",
                "// Line 1599:                 query = \"query {devices(\" + filterv + \"){ name }}\"",
                "// Line 1600:                 result = self.execute_query(query)",
                "// Line 1601:                 self.assertIsNone(result.errors)",
                "// Line 1602:                 self.assertEqual(len(result.data[\"devices\"]), nbr_expected_results)",
                "// Line 1603: ",
                "// vulnerable line: 1604: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 1605:     def test_query_ip_addresses_filter(self):",
                "// Line 1606:         filters = (",
                "// Line 1607:             (",
                "// Line 1608:                 'address: \"10.0.1.1\"',",
                "// Line 1609:                 IPAddress.objects.filter(host=\"10.0.1.1\").count(),",
                "// Line 1610:             ),",
                "// Line 1611:             (",
                "// Line 1612:                 \"ip_version: 4\",",
                "// Line 1613:                 IPAddress.objects.filter(ip_version=4).count(),",
                "// Line 1614:             ),",
                "// Line 1650:             ),",
                "// Line 1651:         )",
                "// Line 1652: ",
                "// Line 1653:         for filterv, nbr_expected_results in filters:",
                "// Line 1654:             with self.subTest(msg=f\"Checking {filterv}\", filterv=filterv, nbr_expected_results=nbr_expected_results):",
                "// Line 1655:                 query = \"query { ip_addresses(\" + filterv + \"){ address }}\"",
                "// Line 1656:                 result = self.execute_query(query)",
                "// Line 1657:                 self.assertIsNone(result.errors)",
                "// Line 1658:                 self.assertEqual(len(result.data[\"ip_addresses\"]), nbr_expected_results)",
                "// Line 1659: ",
                "// vulnerable line: 1660: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 1661:     def test_query_ip_addresses_assigned_object(self):",
                "// Line 1662:         \"\"\"Query IP Address assigned_object values.\"\"\"",
                "// Line 1663: ",
                "// Line 1664:         query = \"\"\"query {",
                "// Line 1665:     ip_addresses {",
                "// Line 1666:         address",
                "// Line 1667:         interfaces {",
                "// Line 1668:             name",
                "// Line 1669:             device { name }",
                "// Line 1670:         }",
                "// Line 1689:                 self.assertEqual(entry[\"vm_interfaces\"][0][\"name\"], self.vminterface.name)",
                "// Line 1690:                 self.assertEqual(entry[\"interfaces\"], [])",
                "// Line 1691:                 self.assertIn(\"virtual_machine\", entry[\"vm_interfaces\"][0])",
                "// Line 1692:                 self.assertEqual(entry[\"vm_interfaces\"][0][\"virtual_machine\"][\"name\"], self.virtualmachine.name)",
                "// Line 1693:             else:",
                "// Line 1694:                 self.assertIn(entry[\"interfaces\"][0][\"name\"], (self.interface11.name, self.interface12.name))",
                "// Line 1695:                 self.assertEqual(entry[\"vm_interfaces\"], [])",
                "// Line 1696:                 self.assertIn(\"device\", entry[\"interfaces\"][0])",
                "// Line 1697:                 self.assertEqual(entry[\"interfaces\"][0][\"device\"][\"name\"], self.device1.name)",
                "// Line 1698: ",
                "// vulnerable line: 1699: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 1700:     def test_query_cables_filter(self):",
                "// Line 1701:         filters = (",
                "// Line 1702:             (f'device_id: \"{self.device1.id}\"', 2),",
                "// Line 1703:             ('device: \"Device 3\"', 1),",
                "// Line 1704:             ('device: [\"Device 1\", \"Device 3\"]', 3),",
                "// Line 1705:             (f'rack_id: \"{self.rack1.id}\"', 3),",
                "// Line 1706:             ('rack: \"Rack 2\"', 1),",
                "// Line 1707:             ('rack: [\"Rack 1\", \"Rack 2\"]', 4),",
                "// Line 1708:             (f'location_id: \"{self.location1.id}\"', 4),",
                "// Line 1709:             (f'location: \"{self.location2.name}\"', 1),",
                "// Line 1713:             ('tenant: [\"Tenant 1\", \"Tenant 2\"]', 4),",
                "// Line 1714:         )",
                "// Line 1715: ",
                "// Line 1716:         for filterv, nbr_expected_results in filters:",
                "// Line 1717:             with self.subTest(msg=f\"Checking {filterv}\", filterv=filterv, nbr_expected_results=nbr_expected_results):",
                "// Line 1718:                 query = \"query { cables(\" + filterv + \"){ id }}\"",
                "// Line 1719:                 result = self.execute_query(query)",
                "// Line 1720:                 self.assertIsNone(result.errors)",
                "// Line 1721:                 self.assertEqual(len(result.data[\"cables\"]), nbr_expected_results)",
                "// Line 1722: ",
                "// vulnerable line: 1723: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 1724:     def test_query_front_port_filter_second_level(self):",
                "// Line 1725:         \"\"\"Test \"second-level\" filtering of FrontPorts within a Devices query.\"\"\"",
                "// Line 1726: ",
                "// Line 1727:         filters = (",
                "// Line 1728:             (",
                "// Line 1729:                 f'name: \"{self.device1_front_ports[0].name}\"',",
                "// Line 1730:                 Q(name=self.device1_front_ports[0].name),",
                "// Line 1731:             ),",
                "// Line 1732:             (",
                "// Line 1733:                 f'device: \"{self.device1.name}\"',",
                "// Line 1745:                 query = \"query { devices{ id, front_ports(\" + filterv + \"){ id }}}\"",
                "// Line 1746:                 result = self.execute_query(query)",
                "// Line 1747:                 self.assertIsNone(result.errors)",
                "// Line 1748:                 for device in result.data[\"devices\"]:",
                "// Line 1749:                     qs = FrontPort.objects.filter(device_id=device[\"id\"])",
                "// Line 1750:                     expected_count = qs.filter(qs_filter).count()",
                "// Line 1751:                     matched = max(matched, len(device[\"front_ports\"]))",
                "// Line 1752:                     self.assertEqual(len(device[\"front_ports\"]), expected_count)",
                "// Line 1753:                 self.assertGreater(matched, 0, msg=\"At least one object matched GraphQL query\")",
                "// Line 1754: ",
                "// vulnerable line: 1755: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 1756:     def test_query_front_port_filter_third_level(self):",
                "// Line 1757:         \"\"\"Test \"third-level\" filtering of FrontPorts within Devices within Locations.\"\"\"",
                "// Line 1758: ",
                "// Line 1759:         filters = (",
                "// Line 1760:             (",
                "// Line 1761:                 f'name: \"{self.device1_front_ports[0].name}\"',",
                "// Line 1762:                 Q(name=self.device1_front_ports[0].name),",
                "// Line 1763:             ),",
                "// Line 1764:             (",
                "// Line 1765:                 f'device: \"{self.device1.name}\"',",
                "// Line 1778:                 result = self.execute_query(query)",
                "// Line 1779:                 self.assertIsNone(result.errors)",
                "// Line 1780:                 for location in result.data[\"locations\"]:",
                "// Line 1781:                     for device in location[\"devices\"]:",
                "// Line 1782:                         qs = FrontPort.objects.filter(device_id=device[\"id\"])",
                "// Line 1783:                         expected_count = qs.filter(qs_filter).count()",
                "// Line 1784:                         matched = max(matched, len(device[\"front_ports\"]))",
                "// Line 1785:                         self.assertEqual(len(device[\"front_ports\"]), expected_count)",
                "// Line 1786:                 self.assertGreater(matched, 0, msg=\"At least one object matched GraphQL query\")",
                "// Line 1787: ",
                "// vulnerable line: 1788: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 1789:     def test_query_front_ports_cable_peer(self):",
                "// Line 1790:         \"\"\"Test querying front port terminations for their cable peers\"\"\"",
                "// Line 1791: ",
                "// Line 1792:         query = \"\"\"query {",
                "// Line 1793:     front_ports {",
                "// Line 1794:         id",
                "// Line 1795:         cable_peer_circuit_termination { id }",
                "// Line 1796:         cable_peer_console_port { id }",
                "// Line 1797:         cable_peer_console_server_port { id }",
                "// Line 1798:         cable_peer_front_port { id }",
                "// Line 1821:             cable_peer_rear_port = {\"id\": str(cable_peer.id)} if isinstance(cable_peer, RearPort) else None",
                "// Line 1822: ",
                "// Line 1823:             # Assert GraphQL returned properties match those expected",
                "// Line 1824:             self.assertEqual(entry[\"cable_peer_circuit_termination\"], cable_peer_circuit_termination)",
                "// Line 1825:             self.assertEqual(entry[\"cable_peer_console_port\"], cable_peer_console_port)",
                "// Line 1826:             self.assertEqual(entry[\"cable_peer_console_server_port\"], cable_peer_console_server_port)",
                "// Line 1827:             self.assertEqual(entry[\"cable_peer_front_port\"], cable_peer_front_port)",
                "// Line 1828:             self.assertEqual(entry[\"cable_peer_interface\"], cable_peer_interface)",
                "// Line 1829:             self.assertEqual(entry[\"cable_peer_rear_port\"], cable_peer_rear_port)",
                "// Line 1830: ",
                "// vulnerable line: 1831: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 1832:     def test_query_rear_ports_cable_peer(self):",
                "// Line 1833:         \"\"\"Test querying rear port terminations for their cable peers\"\"\"",
                "// Line 1834: ",
                "// Line 1835:         query = \"\"\"query {",
                "// Line 1836:     rear_ports {",
                "// Line 1837:         id",
                "// Line 1838:         cable_peer_circuit_termination { id }",
                "// Line 1839:         cable_peer_console_port { id }",
                "// Line 1840:         cable_peer_console_server_port { id }",
                "// Line 1841:         cable_peer_front_port { id }",
                "// Line 1864:             cable_peer_rear_port = {\"id\": str(cable_peer.id)} if isinstance(cable_peer, RearPort) else None",
                "// Line 1865: ",
                "// Line 1866:             # Assert GraphQL returned properties match those expected",
                "// Line 1867:             self.assertEqual(entry[\"cable_peer_circuit_termination\"], cable_peer_circuit_termination)",
                "// Line 1868:             self.assertEqual(entry[\"cable_peer_console_port\"], cable_peer_console_port)",
                "// Line 1869:             self.assertEqual(entry[\"cable_peer_console_server_port\"], cable_peer_console_server_port)",
                "// Line 1870:             self.assertEqual(entry[\"cable_peer_front_port\"], cable_peer_front_port)",
                "// Line 1871:             self.assertEqual(entry[\"cable_peer_interface\"], cable_peer_interface)",
                "// Line 1872:             self.assertEqual(entry[\"cable_peer_rear_port\"], cable_peer_rear_port)",
                "// Line 1873: ",
                "// vulnerable line: 1874: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 1875:     def test_query_interfaces_filter(self):",
                "// Line 1876:         \"\"\"Test custom interface filter fields and boolean, not other concrete fields.\"\"\"",
                "// Line 1877: ",
                "// Line 1878:         filters = (",
                "// Line 1879:             (",
                "// Line 1880:                 f'device_id: \"{self.device1.id}\"',",
                "// Line 1881:                 Interface.objects.filter(device=self.device1).count(),",
                "// Line 1882:             ),",
                "// Line 1883:             (",
                "// Line 1884:                 'device: \"Device 3\"',",
                "// Line 1914:             ),",
                "// Line 1915:         )",
                "// Line 1916: ",
                "// Line 1917:         for filterv, nbr_expected_results in filters:",
                "// Line 1918:             with self.subTest(msg=f\"Checking {filterv}\", filterv=filterv, nbr_expected_results=nbr_expected_results):",
                "// Line 1919:                 query = \"query { interfaces(\" + filterv + \"){ id }}\"",
                "// Line 1920:                 result = self.execute_query(query)",
                "// Line 1921:                 self.assertIsNone(result.errors)",
                "// Line 1922:                 self.assertEqual(len(result.data[\"interfaces\"]), nbr_expected_results)",
                "// Line 1923: ",
                "// vulnerable line: 1924: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 1925:     def test_query_interfaces_filter_second_level(self):",
                "// Line 1926:         \"\"\"Test \"second-level\" filtering of Interfaces within a Devices query.\"\"\"",
                "// Line 1927: ",
                "// Line 1928:         filters = (",
                "// Line 1929:             (",
                "// Line 1930:                 f'device_id: \"{self.device1.id}\"',",
                "// Line 1931:                 Q(device=self.device1),",
                "// Line 1932:             ),",
                "// Line 1933:             (",
                "// Line 1934:                 'kind: \"virtual\"',",
                "// Line 1954:                 query = \"query { devices{ id, interfaces(\" + filterv + \"){ id }}}\"",
                "// Line 1955:                 result = self.execute_query(query)",
                "// Line 1956:                 self.assertIsNone(result.errors)",
                "// Line 1957:                 for device in result.data[\"devices\"]:",
                "// Line 1958:                     qs = Interface.objects.filter(device_id=device[\"id\"])",
                "// Line 1959:                     expected_count = qs.filter(qs_filter).count()",
                "// Line 1960:                     matched = max(matched, len(device[\"interfaces\"]))",
                "// Line 1961:                     self.assertEqual(len(device[\"interfaces\"]), expected_count)",
                "// Line 1962:                 self.assertGreater(matched, 0, msg=\"At least one object matched GraphQL query\")",
                "// Line 1963: ",
                "// vulnerable line: 1964: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 1965:     def test_query_interfaces_filter_third_level(self):",
                "// Line 1966:         \"\"\"Test \"third-level\" filtering of Interfaces within Devices within Locations.\"\"\"",
                "// Line 1967: ",
                "// Line 1968:         filters = (",
                "// Line 1969:             (",
                "// Line 1970:                 f'device_id: \"{self.device1.id}\"',",
                "// Line 1971:                 Q(device=self.device1),",
                "// Line 1972:             ),",
                "// Line 1973:             (",
                "// Line 1974:                 'kind: \"virtual\"',",
                "// Line 1995:                 result = self.execute_query(query)",
                "// Line 1996:                 self.assertIsNone(result.errors)",
                "// Line 1997:                 for location in result.data[\"locations\"]:",
                "// Line 1998:                     for device in location[\"devices\"]:",
                "// Line 1999:                         qs = Interface.objects.filter(device_id=device[\"id\"])",
                "// Line 2000:                         expected_count = qs.filter(qs_filter).count()",
                "// Line 2001:                         matched = max(matched, len(device[\"interfaces\"]))",
                "// Line 2002:                         self.assertEqual(len(device[\"interfaces\"]), expected_count)",
                "// Line 2003:                 self.assertGreater(matched, 0, msg=\"At least one object matched GraphQL query\")",
                "// Line 2004: ",
                "// vulnerable line: 2005: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 2006:     def test_query_interfaces_connected_endpoint(self):",
                "// Line 2007:         \"\"\"Test querying interfaces for their connected endpoints.\"\"\"",
                "// Line 2008: ",
                "// Line 2009:         query = \"\"\"query {",
                "// Line 2010:     interfaces {",
                "// Line 2011:         connected_endpoint {",
                "// Line 2012:             ... on InterfaceType {",
                "// Line 2013:                 name",
                "// Line 2014:                 device { name }",
                "// Line 2015:             }",
                "// Line 2032:                 self.assertEqual(",
                "// Line 2033:                     interface_entry[\"connected_endpoint\"][\"name\"], interface_entry[\"connected_interface\"][\"name\"]",
                "// Line 2034:                 )",
                "// Line 2035:                 self.assertEqual(",
                "// Line 2036:                     interface_entry[\"connected_endpoint\"][\"device\"][\"name\"],",
                "// Line 2037:                     interface_entry[\"connected_interface\"][\"device\"][\"name\"],",
                "// Line 2038:                 )",
                "// Line 2039:             # TODO: it would be nice to have connections to circuit terminations to test!",
                "// Line 2040:             self.assertIsNone(interface_entry[\"connected_circuit_termination\"])",
                "// Line 2041: ",
                "// vulnerable line: 2042: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 2043:     def test_query_interfaces_cable_peer(self):",
                "// Line 2044:         \"\"\"Test querying interfaces for their cable peers\"\"\"",
                "// Line 2045: ",
                "// Line 2046:         query = \"\"\"query {",
                "// Line 2047:     interfaces {",
                "// Line 2048:         id",
                "// Line 2049:         cable_peer { __typename }",
                "// Line 2050:         cable_peer_circuit_termination { id }",
                "// Line 2051:         cable_peer_interface { id }",
                "// Line 2052:         cable_peer_front_port { id }",
                "// Line 2068:             cable_peer_interface = {\"id\": str(cable_peer.id)} if isinstance(cable_peer, Interface) else None",
                "// Line 2069:             cable_peer_front_port = {\"id\": str(cable_peer.id)} if isinstance(cable_peer, FrontPort) else None",
                "// Line 2070:             cable_peer_rear_port = {\"id\": str(cable_peer.id)} if isinstance(cable_peer, RearPort) else None",
                "// Line 2071: ",
                "// Line 2072:             # Assert GraphQL returned properties match those expected",
                "// Line 2073:             self.assertEqual(interface_entry[\"cable_peer_circuit_termination\"], cable_peer_circuit_termination)",
                "// Line 2074:             self.assertEqual(interface_entry[\"cable_peer_interface\"], cable_peer_interface)",
                "// Line 2075:             self.assertEqual(interface_entry[\"cable_peer_front_port\"], cable_peer_front_port)",
                "// Line 2076:             self.assertEqual(interface_entry[\"cable_peer_rear_port\"], cable_peer_rear_port)",
                "// Line 2077: ",
                "// vulnerable line: 2078: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 2079:     def test_query_interfaces_mode(self):",
                "// Line 2080:         \"\"\"Test querying interfaces for their mode and make sure a string or None is returned.\"\"\"",
                "// Line 2081: ",
                "// Line 2082:         query = \"\"\"query {",
                "// Line 2083:     devices(name: \"Device 1\") {",
                "// Line 2084:         interfaces {",
                "// Line 2085:             name",
                "// Line 2086:             mode",
                "// Line 2087:         }",
                "// Line 2088:     }",
                "// Line 2090: ",
                "// Line 2091:         result = self.execute_query(query)",
                "// Line 2092:         self.assertIsNone(result.errors)",
                "// Line 2093:         for intf in result.data[\"devices\"][0][\"interfaces\"]:",
                "// Line 2094:             intf_name = intf[\"name\"]",
                "// Line 2095:             if intf_name == \"Int1\":",
                "// Line 2096:                 self.assertEqual(intf[\"mode\"], InterfaceModeChoices.MODE_ACCESS.upper())",
                "// Line 2097:             elif intf_name == \"Int2\":",
                "// Line 2098:                 self.assertIsNone(intf[\"mode\"])",
                "// Line 2099: ",
                "// vulnerable line: 2100: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 2101:     def test_query_providers_filter(self):",
                "// Line 2102:         \"\"\"Test provider filtering by ASN (issue #428).\"\"\"",
                "// Line 2103:         filters = (",
                "// Line 2104:             (\"asn: [4294967295]\", 1),",
                "// Line 2105:             (\"asn: [1, 4294967295]\", 2),",
                "// Line 2106:         )",
                "// Line 2107: ",
                "// Line 2108:         for filterv, nbr_expected_results in filters:",
                "// Line 2109:             with self.subTest(msg=f\"Checking {filterv}\", filterv=filterv, nbr_expected_results=nbr_expected_results):",
                "// Line 2110:                 query = \"query { providers (\" + filterv + \"){ id asn }}\"",
                "// Line 2111:                 result = self.execute_query(query)",
                "// Line 2112:                 self.assertIsNone(result.errors)",
                "// Line 2113:                 self.assertEqual(len(result.data[\"providers\"]), nbr_expected_results)",
                "// Line 2114:                 for provider in result.data[\"providers\"]:",
                "// Line 2115:                     self.assertEqual(provider[\"asn\"], Provider.objects.get(id=provider[\"id\"]).asn)",
                "// Line 2116: ",
                "// vulnerable line: 2117: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 2118:     def test_query_webhooks_filter(self):",
                "// Line 2119:         \"\"\"Test webhook querying and filtering with content types.\"\"\"",
                "// Line 2120:         filters = (",
                "// Line 2121:             ('content_types: [\"dcim.device\"]', 1),",
                "// Line 2122:             ('content_types: [\"dcim.interface\"]', 1),",
                "// Line 2123:             # Since content_types is a many-to-many field, this query is an AND, not an OR",
                "// Line 2124:             ('content_types: [\"dcim.device\", \"dcim.interface\"]', 0),",
                "// Line 2125:             ('content_types: [\"ipam.ipaddress\"]', 0),",
                "// Line 2126:         )",
                "// Line 2127: ",
                "// Line 2128:         for filterv, nbr_expected_results in filters:",
                "// Line 2129:             with self.subTest(msg=f\"Checking {filterv}\", filterv=filterv, nbr_expected_results=nbr_expected_results):",
                "// Line 2130:                 query = \"query { webhooks (\" + filterv + \"){ id name content_types {app_label model}}}\"",
                "// Line 2131:                 result = self.execute_query(query)",
                "// Line 2132:                 self.assertIsNone(result.errors)",
                "// Line 2133:                 self.assertEqual(len(result.data[\"webhooks\"]), nbr_expected_results)",
                "// Line 2134: ",
                "// vulnerable line: 2135: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 2136:     def test_query_device_types(self):",
                "// Line 2137:         \"\"\"Test querying of device types, specifically checking for issue #1203.\"\"\"",
                "// Line 2138:         query = \"\"\"",
                "// Line 2139:         query {",
                "// Line 2140:             device_types {",
                "// Line 2141:                 model",
                "// Line 2142:             }",
                "// Line 2143:         }",
                "// Line 2144:         \"\"\"",
                "// Line 2145:         result = self.execute_query(query)",
                "// Line 2146:         self.assertIsNone(result.errors)",
                "// Line 2147:         self.assertIsInstance(result.data, dict, result)",
                "// Line 2148:         self.assertIsInstance(result.data[\"device_types\"], list, result)",
                "// Line 2149:         self.assertEqual(result.data[\"device_types\"][0][\"model\"], self.device_type1.model, result)",
                "// Line 2150: ",
                "// vulnerable line: 2151: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 2152:     def test_query_interface_pagination(self):",
                "// Line 2153:         query_pagination = \"\"\"query {",
                "// Line 2154:     interfaces(limit: 2, offset: 3) {",
                "// Line 2155:         id",
                "// Line 2156:         name",
                "// Line 2157:         device {",
                "// Line 2158:           name",
                "// Line 2159:         }",
                "// Line 2160:     }",
                "// Line 2161: }\"\"\"",
                "// Line 2175:         # With the limit and skip implemented in the GQL query, this should return Device 2 (Int1) and",
                "// Line 2176:         # Device 3 (Int2). This test will validate that the correct device/interface combinations are returned.",
                "// Line 2177:         device_names = [item[\"device\"][\"name\"] for item in result_1.data.get(\"interfaces\", [])]",
                "// Line 2178:         self.assertEqual(sorted(device_names), [\"Device 2\", \"Device 3\"])",
                "// Line 2179:         interface_names = [item[\"name\"] for item in result_1.data.get(\"interfaces\", [])]",
                "// Line 2180:         self.assertEqual(interface_names, [\"Int2\", \"Int1\"])",
                "// Line 2181: ",
                "// Line 2182:         result_2 = self.execute_query(query_all)",
                "// Line 2183:         self.assertEqual(len(result_2.data.get(\"interfaces\", [])), 6)",
                "// Line 2184: ",
                "// vulnerable line: 2185: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 2186:     def test_query_power_feeds_cable_peer(self):",
                "// Line 2187:         \"\"\"Test querying power feeds for their cable peers\"\"\"",
                "// Line 2188: ",
                "// Line 2189:         query = \"\"\"query {",
                "// Line 2190:     power_feeds {",
                "// Line 2191:         id",
                "// Line 2192:         cable_peer_power_port { id }",
                "// Line 2193:     }",
                "// Line 2194: }\"\"\"",
                "// Line 2195: ",
                "// Line 2199:         for entry in result.data[\"power_feeds\"]:",
                "// Line 2200:             power_feed_obj = PowerFeed.objects.get(id=entry[\"id\"])",
                "// Line 2201:             cable_peer = power_feed_obj.get_cable_peer()",
                "// Line 2202: ",
                "// Line 2203:             # Extract Expected Properties from CircuitTermination object",
                "// Line 2204:             cable_peer_power_port = {\"id\": str(cable_peer.id)} if isinstance(cable_peer, PowerPort) else None",
                "// Line 2205: ",
                "// Line 2206:             # Assert GraphQL returned properties match those expected",
                "// Line 2207:             self.assertEqual(entry[\"cable_peer_power_port\"], cable_peer_power_port)",
                "// Line 2208: ",
                "// vulnerable line: 2209: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 2210:     def test_query_power_feeds_connected_endpoint(self):",
                "// Line 2211:         \"\"\"Test querying power feeds for their connected endpoints\"\"\"",
                "// Line 2212: ",
                "// Line 2213:         query = \"\"\"query {",
                "// Line 2214:     power_feeds {",
                "// Line 2215:         id",
                "// Line 2216:         connected_power_port { id }",
                "// Line 2217:     }",
                "// Line 2218: }\"\"\"",
                "// Line 2219: ",
                "// Line 2225:             connected_endpoint = power_feed_obj.connected_endpoint",
                "// Line 2226: ",
                "// Line 2227:             # Extract Expected Properties from CircuitTermination object",
                "// Line 2228:             connected_power_port = (",
                "// Line 2229:                 {\"id\": str(connected_endpoint.id)} if isinstance(connected_endpoint, PowerPort) else None",
                "// Line 2230:             )",
                "// Line 2231: ",
                "// Line 2232:             # Assert GraphQL returned properties match those expected",
                "// Line 2233:             self.assertEqual(entry[\"connected_power_port\"], connected_power_port)",
                "// Line 2234: ",
                "// vulnerable line: 2235: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 2236:     def test_query_power_outlets_cable_peer(self):",
                "// Line 2237:         \"\"\"Test querying power outlets for their cable peers\"\"\"",
                "// Line 2238: ",
                "// Line 2239:         query = \"\"\"query {",
                "// Line 2240:     power_outlets {",
                "// Line 2241:         id",
                "// Line 2242:         cable_peer_power_port { id }",
                "// Line 2243:     }",
                "// Line 2244: }\"\"\"",
                "// Line 2245: ",
                "// Line 2249:         for entry in result.data[\"power_outlets\"]:",
                "// Line 2250:             power_outlet_obj = PowerOutlet.objects.get(id=entry[\"id\"])",
                "// Line 2251:             cable_peer = power_outlet_obj.get_cable_peer()",
                "// Line 2252: ",
                "// Line 2253:             # Extract Expected Properties from CircuitTermination object",
                "// Line 2254:             cable_peer_power_port = {\"id\": str(cable_peer.id)} if isinstance(cable_peer, PowerPort) else None",
                "// Line 2255: ",
                "// Line 2256:             # Assert GraphQL returned properties match those expected",
                "// Line 2257:             self.assertEqual(entry[\"cable_peer_power_port\"], cable_peer_power_port)",
                "// Line 2258: ",
                "// vulnerable line: 2259: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 2260:     def test_query_power_outlets_connected_endpoint(self):",
                "// Line 2261:         \"\"\"Test querying power outlets for their connected endpoints\"\"\"",
                "// Line 2262: ",
                "// Line 2263:         query = \"\"\"query {",
                "// Line 2264:     power_outlets {",
                "// Line 2265:         id",
                "// Line 2266:         connected_power_port { id }",
                "// Line 2267:     }",
                "// Line 2268: }\"\"\"",
                "// Line 2269: ",
                "// Line 2275:             connected_endpoint = power_outlet_obj.connected_endpoint",
                "// Line 2276: ",
                "// Line 2277:             # Extract Expected Properties from CircuitTermination object",
                "// Line 2278:             connected_power_port = (",
                "// Line 2279:                 {\"id\": str(connected_endpoint.id)} if isinstance(connected_endpoint, PowerPort) else None",
                "// Line 2280:             )",
                "// Line 2281: ",
                "// Line 2282:             # Assert GraphQL returned properties match those expected",
                "// Line 2283:             self.assertEqual(entry[\"connected_power_port\"], connected_power_port)",
                "// Line 2284: ",
                "// vulnerable line: 2285: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 2286:     def test_query_power_ports_cable_peer(self):",
                "// Line 2287:         \"\"\"Test querying power ports for their cable peers\"\"\"",
                "// Line 2288: ",
                "// Line 2289:         query = \"\"\"query {",
                "// Line 2290:     power_ports {",
                "// Line 2291:         id",
                "// Line 2292:         cable_peer_power_feed { id }",
                "// Line 2293:         cable_peer_power_outlet { id }",
                "// Line 2294:     }",
                "// Line 2295: }\"\"\"",
                "// Line 2302:             cable_peer = power_port_obj.get_cable_peer()",
                "// Line 2303: ",
                "// Line 2304:             # Extract Expected Properties from CircuitTermination object",
                "// Line 2305:             cable_peer_power_feed = {\"id\": str(cable_peer.id)} if isinstance(cable_peer, PowerFeed) else None",
                "// Line 2306:             cable_peer_power_outlet = {\"id\": str(cable_peer.id)} if isinstance(cable_peer, PowerOutlet) else None",
                "// Line 2307: ",
                "// Line 2308:             # Assert GraphQL returned properties match those expected",
                "// Line 2309:             self.assertEqual(entry[\"cable_peer_power_feed\"], cable_peer_power_feed)",
                "// Line 2310:             self.assertEqual(entry[\"cable_peer_power_outlet\"], cable_peer_power_outlet)",
                "// Line 2311: ",
                "// vulnerable line: 2312: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 2313:     def test_query_power_ports_connected_endpoint(self):",
                "// Line 2314:         \"\"\"Test querying power ports for their connected endpoints\"\"\"",
                "// Line 2315: ",
                "// Line 2316:         query = \"\"\"query {",
                "// Line 2317:     power_ports {",
                "// Line 2318:         id",
                "// Line 2319:         connected_power_feed { id }",
                "// Line 2320:         connected_power_outlet { id }",
                "// Line 2321:     }",
                "// Line 2322: }\"\"\""
            ]
        },
        {
            "filename_of_changes": "test_graphql.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// vulnerable line: 1: from django.test import override_settings",
                "// Line 2: from django.urls import reverse",
                "// Line 3: from rest_framework import status",
                "// Line 4: ",
                "// Line 5: from nautobot.core.testing import APITestCase",
                "// Line 6: ",
                "// Line 7: ",
                "// Line 8: class TestPrefix(APITestCase):",
                "// Line 9:     def setUp(self):",
                "// Line 10:         super().setUp()",
                "// Line 11:         self.api_url = reverse(\"graphql-api\")",
                "// Line 12: ",
                "// vulnerable line: 13: @override_settings(EXEMPT_VIEW_PERMISSIONS=[\"*\"])",
                "// Line 14:     def test_prefix_ip_version(self):",
                "// Line 15:         \"\"\"Test ip_version is available for a Prefix via GraphQL.\"\"\"",
                "// Line 16:         get_prefixes_query = \"\"\"",
                "// Line 17:         query {",
                "// Line 18:             prefixes {",
                "// Line 19:                 prefix",
                "// Line 20:                 prefix_length",
                "// Line 21:                 ip_version",
                "// Line 22:             }",
                "// Line 23:         }",
                "// Line 24:         \"\"\"",
                "// Line 25:         payload = {\"query\": get_prefixes_query}",
                "// vulnerable line: 26: response = self.client.post(self.api_url, payload, format=\"json\")",
                "// Line 27:         self.assertEqual(response.status_code, status.HTTP_200_OK)",
                "// Line 28:         prefixes = response.data[\"data\"][\"prefixes\"]",
                "// Line 29:         self.assertIsInstance(prefixes, list)",
                "// Line 30:         self.assertGreater(len(prefixes), 0)",
                "// Line 31: ",
                "// Line 32:         for prefix in prefixes:",
                "// Line 33:             self.assertIsInstance(prefix[\"prefix\"], str)",
                "// Line 34:             self.assertIsInstance(prefix[\"prefix_length\"], int)",
                "// Line 35:             self.assertIn(prefix[\"ip_version\"], [4, 6])"
            ]
        },
        {
            "filename_of_changes": "test_views.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "22",
            "number_of_lines_deleted_vulnerable_to_cve": "16",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 53:         request = self.factory.get(\"/\")",
                "// Line 54:         location = Location.objects.first()",
                "// Line 55:         self.assertEqual(self.mixin.get_return_url(request=request, obj=location), location.get_absolute_url())",
                "// Line 56: ",
                "// Line 57: ",
                "// Line 58: class HomeViewTestCase(TestCase):",
                "// Line 59:     def test_home(self):",
                "// Line 60:         url = reverse(\"home\")",
                "// Line 61: ",
                "// Line 62:         response = self.client.get(url)",
                "// vulnerable line: 63: self.assertHttpStatus(response, 200)",
                "// Line 64: ",
                "// Line 65:     def test_search(self):",
                "// Line 66:         url = reverse(\"search\")",
                "// Line 67:         params = {",
                "// Line 68:             \"q\": \"foo\",",
                "// Line 69:         }",
                "// Line 70: ",
                "// Line 71:         response = self.client.get(f\"{url}?{urllib.parse.urlencode(params)}\")",
                "// vulnerable line: 72: self.assertHttpStatus(response, 200)",
                "// Line 73: ",
                "// Line 74:     def make_request(self):",
                "// Line 75:         url = reverse(\"home\")",
                "// Line 76:         response = self.client.get(url)",
                "// Line 77: ",
                "// Line 78:         # Search bar in nav",
                "// Line 79:         nav_search_bar_pattern = re.compile(",
                "// Line 80:             '<nav.*<form action=\"/search/\" method=\"get\" class=\"navbar-form\" id=\"navbar_search\" role=\"search\">.*</form>.*</nav>'",
                "// Line 81:         )",
                "// Line 82:         nav_search_bar_result = nav_search_bar_pattern.search(",
                "// Line 211:             location.cf[multi_select_cf.key] = choices[:2]",
                "// Line 212:             location.cf[select_cf.key] = choices[idx]",
                "// Line 213:             location.save()",
                "// Line 214: ",
                "// Line 215:         query_param = (",
                "// Line 216:             f\"?cf_{multi_select_cf.key}={choices[0]}&cf_{multi_select_cf.key}={choices[1]}\"",
                "// Line 217:             f\"&cf_{select_cf.key}={choices[0]}&cf_{select_cf.key}={choices[1]}\"",
                "// Line 218:         )",
                "// Line 219:         url = reverse(\"dcim:location_list\") + query_param",
                "// Line 220:         response = self.client.get(url)",
                "// vulnerable line: 221: self.assertHttpStatus(response, 200)",
                "// Line 222:         response_content = response.content.decode(response.charset).replace(\"",
                "// Line 223: \", \"\")",
                "// Line 224:         self.assertInHTML(locations[0].name, response_content)",
                "// Line 225:         self.assertInHTML(locations[1].name, response_content)",
                "// Line 226: ",
                "// Line 227: ",
                "// Line 228: class ForceScriptNameTestcase(TestCase):",
                "// Line 229:     \"\"\"Basic test to assert that `settings.FORCE_SCRIPT_NAME` works as intended.\"\"\"",
                "// Line 230: ",
                "// Line 231:     @override_settings(",
                "// Line 313:         AUTHENTICATION_BACKENDS=[",
                "// Line 314:             \"social_core.backends.google.GoogleOAuth2\",",
                "// Line 315:             \"nautobot.core.authentication.ObjectPermissionBackend\",",
                "// Line 316:         ]",
                "// Line 317:     )",
                "// Line 318:     def test_sso_login_button_visible(self):",
                "// Line 319:         self.client.logout()",
                "// Line 320:         sso_login_search_result = self.make_request()",
                "// Line 321:         self.assertIsNotNone(sso_login_search_result)",
                "// Line 322: ",
                "// vulnerable line: 323: @override_settings(BANNER_TOP=\"Hello, Banner Top\", BANNER_BOTTOM=\"Hello, Banner Bottom\")",
                "// vulnerable line: 324: def test_routes_redirect_back_to_login_unauthenticated(self):",
                "// vulnerable line: 325: \"\"\"Assert that api docs and graphql redirects to login page if user is unauthenticated.\"\"\"",
                "// Line 326:         self.client.logout()",
                "// Line 327:         headers = {\"HTTP_ACCEPT\": \"text/html\"}",
                "// vulnerable line: 328: urls = [reverse(\"api_docs\"), reverse(\"graphql\")]",
                "// Line 329:         for url in urls:",
                "// vulnerable line: 330: response = self.client.get(url, follow=True, **headers)",
                "// vulnerable line: 331: self.assertHttpStatus(response, 200)",
                "// vulnerable line: 332: redirect_chain = [(f\"/login/?next={url}\", 302)]",
                "// vulnerable line: 333: self.assertEqual(response.redirect_chain, redirect_chain)",
                "// Line 334:             response_content = response.content.decode(response.charset).replace(\"",
                "// Line 335: \", \"\")",
                "// vulnerable line: 336: # Assert Footer items(`self.footer_elements`), Banner and Banner Top is hidden",
                "// vulnerable line: 337: for footer_text in self.footer_elements:",
                "// vulnerable line: 338: self.assertNotIn(footer_text, response_content)",
                "// vulnerable line: 339: # Only API Docs implements BANNERS",
                "// vulnerable line: 340: if url == urls[0]:",
                "// vulnerable line: 341: self.assertNotIn(\"Hello, Banner Top\", response_content)",
                "// vulnerable line: 342: self.assertNotIn(\"Hello, Banner Bottom\", response_content)",
                "// Line 343: ",
                "// Line 344: ",
                "// Line 345: class MetricsViewTestCase(TestCase):",
                "// Line 346:     def query_and_parse_metrics(self):",
                "// Line 347:         response = self.client.get(reverse(\"metrics\"))",
                "// Line 348:         self.assertHttpStatus(response, 200, msg=\"/metrics should return a 200 HTTP status code.\")",
                "// Line 349:         page_content = response.content.decode(response.charset)",
                "// Line 350:         return text_string_to_metric_families(page_content)",
                "// Line 351: ",
                "// Line 352:     def test_metrics_extensibility(self):",
                "// Line 458:         response = self.client.get(self.url)",
                "// Line 459:         self.assertHttpStatus(response, 403)",
                "// Line 460: ",
                "// Line 461:     def test_get_file_without_permission(self):",
                "// Line 462:         response = self.client.get(self.url)",
                "// Line 463:         self.assertHttpStatus(response, 403)",
                "// Line 464: ",
                "// Line 465:     def test_get_object_with_permission(self):",
                "// Line 466:         self.add_permissions(get_permission_for_model(FileProxy, \"view\"))",
                "// Line 467:         response = self.client.get(self.url)",
                "// vulnerable line: 468: self.assertHttpStatus(response, 200)",
                "// Line 469: ",
                "// Line 470:     def test_get_object_with_constrained_permission(self):",
                "// Line 471:         obj_perm = ObjectPermission(",
                "// Line 472:             name=\"Test permission\",",
                "// Line 473:             constraints={\"pk\": self.file_proxy_1.pk},",
                "// Line 474:             actions=[\"view\"],",
                "// Line 475:         )",
                "// Line 476:         obj_perm.save()",
                "// Line 477:         obj_perm.users.add(self.user)",
                "// Line 478:         obj_perm.object_types.add(ContentType.objects.get_for_model(FileProxy))",
                "// Line 479:         response = self.client.get(self.url)",
                "// vulnerable line: 480: self.assertHttpStatus(response, 200)",
                "// Line 481:         url = f\"{reverse('db_file_storage.download_file')}?name={self.file_proxy_2.file.name}\"",
                "// Line 482:         response = self.client.get(url)",
                "// Line 483:         self.assertHttpStatus(response, 404)",
                "// Line 484: ",
                "// Line 485: ",
                "// Line 486: class SilkUIAccessTestCase(TestCase):",
                "// Line 487:     \"\"\"Test access control related to the django-silk UI\"\"\"",
                "// Line 488: ",
                "// Line 489:     def test_access_for_non_superuser(self):",
                "// Line 490:         # Login as non-superuser"
            ]
        },
        {
            "filename_of_changes": "urls.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: from django.urls import include, path",
                "// Line 2: ",
                "// Line 3: from nautobot.apps.api import OrderedDefaultRouter",
                "// Line 4: ",
                "// Line 5: from example_plugin.api.views import AnotherExampleModelViewSet, ExampleModelViewSet, ExampleModelWebhook",
                "// Line 6: ",
                "// vulnerable line: 7: router = OrderedDefaultRouter()",
                "// Line 8: router.register(\"models\", ExampleModelViewSet)",
                "// Line 9: router.register(\"other-models\", AnotherExampleModelViewSet)",
                "// Line 10: ",
                "// Line 11: urlpatterns = [",
                "// Line 12:     path(",
                "// Line 13:         \"webhook/\", ExampleModelWebhook.as_view(), name=\"examplemodel_webhook\"",
                "// Line 14:     ),  # URL path for testing plugin webhooks",
                "// Line 15:     path(\"\", include(router.urls)),",
                "// Line 16: ]"
            ]
        },
        {
            "filename_of_changes": "urls.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: from nautobot.core.api.routers import OrderedDefaultRouter",
                "// Line 2: ",
                "// Line 3: from . import views",
                "// Line 4: ",
                "// vulnerable line: 5: router = OrderedDefaultRouter()",
                "// vulnerable line: 6: router.APIRootView = views.TenancyRootView",
                "// Line 7: ",
                "// Line 8: # Tenants",
                "// Line 9: router.register(\"tenant-groups\", views.TenantGroupViewSet)",
                "// Line 10: router.register(\"tenants\", views.TenantViewSet)",
                "// Line 11: ",
                "// Line 12: app_name = \"tenancy-api\"",
                "// Line 13: urlpatterns = router.urls"
            ]
        },
        {
            "filename_of_changes": "urls.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: from nautobot.core.api.routers import OrderedDefaultRouter",
                "// Line 2: ",
                "// Line 3: from . import views",
                "// Line 4: ",
                "// vulnerable line: 5: router = OrderedDefaultRouter()",
                "// vulnerable line: 6: router.APIRootView = views.UsersRootView",
                "// Line 7: ",
                "// Line 8: # Users and groups",
                "// Line 9: router.register(\"users\", views.UserViewSet)",
                "// Line 10: router.register(\"groups\", views.GroupViewSet)",
                "// Line 11: ",
                "// Line 12: # Tokens",
                "// Line 13: router.register(\"tokens\", views.TokenViewSet)",
                "// Line 14: ",
                "// Line 15: # Permissions",
                "// Line 16: router.register(\"permissions\", views.ObjectPermissionViewSet)"
            ]
        },
        {
            "filename_of_changes": "utils.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "utils.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "views.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "4",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: from django.shortcuts import HttpResponse, render",
                "// vulnerable line: 2: from django.views.generic import View",
                "// Line 3: from rest_framework.decorators import action",
                "// Line 4: ",
                "// Line 5: from nautobot.apps import views",
                "// Line 6: from nautobot.circuits.models import Circuit",
                "// Line 7: from nautobot.dcim.models import Device",
                "// Line 8: ",
                "// Line 9: from example_plugin import filters, forms, tables",
                "// Line 10: from example_plugin.api import serializers",
                "// Line 11: from example_plugin.models import AnotherExampleModel, ExampleModel",
                "// Line 12: ",
                "// Line 39: ",
                "// Line 40: class DeviceDetailPluginTabTwoView(views.ObjectView):",
                "// Line 41:     \"\"\"",
                "// Line 42:     Same as DeviceDetailPluginTabOneView view above but using a different template.",
                "// Line 43:     \"\"\"",
                "// Line 44: ",
                "// Line 45:     queryset = Device.objects.all()",
                "// Line 46:     template_name = \"example_plugin/tab_device_detail_2.html\"",
                "// Line 47: ",
                "// Line 48: ",
                "// vulnerable line: 49: class ExamplePluginHomeView(View):",
                "// Line 50:     def get(self, request):",
                "// Line 51:         return render(request, \"example_plugin/home.html\")",
                "// Line 52: ",
                "// Line 53: ",
                "// vulnerable line: 54: class ExamplePluginConfigView(View):",
                "// Line 55:     def get(self, request):",
                "// Line 56:         \"\"\"Render the configuration page for this plugin.",
                "// Line 57: ",
                "// Line 58:         Just an example - in reality you'd want to use real config data here as appropriate to your plugin, if any.",
                "// Line 59:         \"\"\"",
                "// Line 60:         form = forms.ExamplePluginConfigForm({\"magic_word\": \"frobozz\", \"maximum_velocity\": 300000})",
                "// Line 61:         return render(request, \"example_plugin/config.html\", {\"form\": form})",
                "// Line 62: ",
                "// Line 63:     def post(self, request):",
                "// Line 64:         \"\"\"Handle configuration changes for this plugin.",
                "// Line 107:     filterset_class = filters.AnotherExampleModelFilterSet",
                "// Line 108:     filterset_form_class = forms.AnotherExampleModelFilterForm",
                "// Line 109:     create_form_class = forms.AnotherExampleModelCreateForm",
                "// Line 110:     update_form_class = forms.AnotherExampleModelUpdateForm",
                "// Line 111:     lookup_field = \"pk\"",
                "// Line 112:     queryset = AnotherExampleModel.objects.all()",
                "// Line 113:     serializer_class = serializers.AnotherExampleModelSerializer",
                "// Line 114:     table_class = tables.AnotherExampleModelTable",
                "// Line 115: ",
                "// Line 116: ",
                "// vulnerable line: 117: class ViewToBeOverridden(View):",
                "// Line 118:     def get(self, request, *args, **kwargs):",
                "// Line 119:         return HttpResponse(\"I am a view in the example plugin which will be overridden by another plugin.\")"
            ]
        },
        {
            "filename_of_changes": "views.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: \"\"\"Views for plugin_with_view_override.\"\"\"",
                "// Line 2: ",
                "// Line 3: from django.shortcuts import HttpResponse",
                "// vulnerable line: 4: from django.views import generic",
                "// Line 5: ",
                "// Line 6: ",
                "// vulnerable line: 7: class ViewOverride(generic.View):",
                "// Line 8:     def get(self, request, *args, **kwargs):",
                "// Line 9:         return HttpResponse(\"Hello world! I'm an overridden view.\")",
                "// Line 10: ",
                "// Line 11: ",
                "// Line 12: override_views = {",
                "// Line 13:     \"plugins:example_plugin:view_to_be_overridden\": ViewOverride.as_view(),",
                "// Line 14: }"
            ]
        },
        {
            "filename_of_changes": "views.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "0",
            "number_of_lines_deleted_vulnerable_to_cve": "12",
            "Code_with_highlighted_vulnerability_lines": [
                "// vulnerable line: 1: from rest_framework.routers import APIRootView",
                "// Line 2: ",
                "// Line 3: from nautobot.circuits import filters",
                "// Line 4: from nautobot.circuits.models import Circuit, CircuitTermination, CircuitType, Provider, ProviderNetwork",
                "// Line 5: from nautobot.core.models.querysets import count_related",
                "// Line 6: from nautobot.dcim.api.views import PathEndpointMixin",
                "// Line 7: from nautobot.extras.api.views import NautobotModelViewSet",
                "// Line 8: ",
                "// Line 9: from . import serializers",
                "// Line 10: ",
                "// Line 11: ",
                "// vulnerable line: 12: class CircuitsRootView(APIRootView):",
                "// vulnerable line: 13: \"\"\"",
                "// vulnerable line: 14: Circuits API root view",
                "// vulnerable line: 15: \"\"\"",
                "// Line 16: ",
                "// vulnerable line: 17: def get_view_name(self):",
                "// vulnerable line: 18: return \"Circuits\"",
                "// Line 19: ",
                "// Line 20: ",
                "// Line 21: #",
                "// Line 22: # Providers",
                "// Line 23: #",
                "// Line 24: ",
                "// Line 25: ",
                "// Line 26: class ProviderViewSet(NautobotModelViewSet):",
                "// Line 27:     queryset = Provider.objects.prefetch_related(\"tags\").annotate(circuit_count=count_related(Circuit, \"provider\"))",
                "// Line 28:     serializer_class = serializers.ProviderSerializer"
            ]
        },
        {
            "filename_of_changes": "views.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "21",
            "number_of_lines_deleted_vulnerable_to_cve": "15",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 15: from drf_spectacular.plumbing import get_relative_url, set_query_parameters",
                "// Line 16: from drf_spectacular.renderers import OpenApiJsonRenderer",
                "// Line 17: from drf_spectacular.utils import extend_schema",
                "// Line 18: from drf_spectacular.views import SpectacularRedocView, SpectacularSwaggerView",
                "// Line 19: from graphene_django.settings import graphene_settings",
                "// Line 20: from graphene_django.views import GraphQLView, HttpError, instantiate_middleware",
                "// Line 21: from graphql import get_default_backend",
                "// Line 22: from graphql.execution import ExecutionResult",
                "// Line 23: from graphql.execution.middleware import MiddlewareManager",
                "// Line 24: from graphql.type.schema import GraphQLSchema",
                "// vulnerable line: 25: from rest_framework import status",
                "// Line 26: from rest_framework.exceptions import ParseError, PermissionDenied",
                "// vulnerable line: 27: from rest_framework.permissions import AllowAny, IsAuthenticated",
                "// Line 28: from rest_framework.response import Response",
                "// Line 29: from rest_framework.reverse import reverse",
                "// Line 30: from rest_framework.views import APIView",
                "// Line 31: from rest_framework.viewsets import ModelViewSet as ModelViewSet_, ReadOnlyModelViewSet as ReadOnlyModelViewSet_",
                "// Line 32: ",
                "// Line 33: from nautobot.core.api import BulkOperationSerializer",
                "// Line 34: from nautobot.core.celery import app as celery_app",
                "// Line 35: from nautobot.core.exceptions import FilterSetFieldNotFound",
                "// Line 36: from nautobot.core.utils.data import is_uuid",
                "// Line 37: from nautobot.core.utils.filtering import get_all_lookup_expr_for_field, get_filterset_parameter_form_field",
                "// Line 334:     \"\"\"",
                "// Line 335:     Extend DRF's ReadOnlyModelViewSet to support queryset restriction.",
                "// Line 336:     \"\"\"",
                "// Line 337: ",
                "// Line 338: ",
                "// Line 339: #",
                "// Line 340: # Views",
                "// Line 341: #",
                "// Line 342: ",
                "// Line 343: ",
                "// vulnerable line: 344: class APIRootView(NautobotAPIVersionMixin, APIView):",
                "// Line 345:     \"\"\"",
                "// vulnerable line: 346: This is the root of the REST API. API endpoints are arranged by app and model name; e.g. `/api/dcim/locations/`.",
                "// Line 347:     \"\"\"",
                "// Line 348: ",
                "// vulnerable line: 349: _ignore_model_permissions = True",
                "// Line 350: ",
                "// vulnerable line: 351: def get_view_name(self):",
                "// vulnerable line: 352: return \"API Root\"",
                "// Line 353: ",
                "// Line 354:     @extend_schema(exclude=True)",
                "// Line 355:     def get(self, request, format=None):  # pylint: disable=redefined-builtin",
                "// Line 356:         return Response(",
                "// Line 357:             OrderedDict(",
                "// Line 358:                 (",
                "// Line 359:                     (",
                "// Line 360:                         \"circuits\",",
                "// Line 361:                         reverse(\"circuits-api:api-root\", request=request, format=format),",
                "// Line 362:                     ),",
                "// Line 485: ",
                "// Line 486:         format = \"openapi\"",
                "// Line 487: ",
                "// Line 488:     renderer_classes = [*SpectacularSwaggerView.renderer_classes, FakeOpenAPIRenderer]",
                "// Line 489: ",
                "// Line 490:     template_name = \"swagger_ui.html\"",
                "// Line 491: ",
                "// Line 492:     @extend_schema(exclude=True)",
                "// Line 493:     def get(self, request, *args, **kwargs):",
                "// Line 494:         \"\"\"Fix up the rendering of the Swagger UI to work with Nautobot's UI.\"\"\"",
                "// vulnerable line: 495: if not request.user.is_authenticated:",
                "// vulnerable line: 496: doc_url = reverse(\"api_docs\")",
                "// vulnerable line: 497: login_url = reverse(settings.LOGIN_URL)",
                "// vulnerable line: 498: return redirect(f\"{login_url}?next={doc_url}\")",
                "// Line 499: ",
                "// Line 500:         # For backward compatibility wtih drf-yasg, `/api/docs/?format=openapi` is a redirect to the JSON schema.",
                "// Line 501:         if request.GET.get(\"format\") == \"openapi\":",
                "// Line 502:             return redirect(\"schema_json\", permanent=True)",
                "// Line 503: ",
                "// Line 504:         # drf-spectacular uses \"settings\" in the rendering context as a way to inject custom JavaScript if desired,",
                "// Line 505:         # which of course conflicts with Nautobot's use of \"settings\" as a representation of django.settings.",
                "// Line 506:         # So we need to intercept it and fix it up.",
                "// Line 507:         response = super().get(request, *args, **kwargs)",
                "// Line 508:         response.data[\"swagger_settings\"] = response.data[\"settings\"]",
                "// Line 518: ",
                "// Line 519: ",
                "// Line 520: #",
                "// Line 521: # GraphQL",
                "// Line 522: #",
                "// Line 523: ",
                "// Line 524: ",
                "// Line 525: class GraphQLDRFAPIView(NautobotAPIVersionMixin, APIView):",
                "// Line 526:     \"\"\"",
                "// Line 527:     API View for GraphQL to integrate properly with DRF authentication mechanism.",
                "// vulnerable line: 528: The code is a stripped down version of graphene-django default View",
                "// vulnerable line: 529: https://github.com/graphql-python/graphene-django/blob/main/graphene_django/views.py#L57",
                "// Line 530:     \"\"\"",
                "// Line 531: ",
                "// vulnerable line: 532: permission_classes = [AllowAny]",
                "// Line 533:     graphql_schema = None",
                "// Line 534:     executor = None",
                "// Line 535:     backend = None",
                "// Line 536:     middleware = None",
                "// Line 537:     root_value = None",
                "// Line 538: ",
                "// Line 539:     def __init__(self, schema=None, executor=None, middleware=None, root_value=None, backend=None):",
                "// Line 540:         self.schema = schema",
                "// Line 541:         self.executor = executor",
                "// Line 542:         self.middleware = middleware"
            ]
        },
        {
            "filename_of_changes": "views.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "12",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 6: from django.db.models import F",
                "// Line 7: from django.http import HttpResponse, HttpResponseForbidden",
                "// Line 8: from django.shortcuts import get_object_or_404",
                "// Line 9: from django.views.decorators.clickjacking import xframe_options_sameorigin",
                "// Line 10: from drf_spectacular.types import OpenApiTypes",
                "// Line 11: from drf_spectacular.utils import extend_schema, OpenApiParameter",
                "// Line 12: from rest_framework.decorators import action",
                "// Line 13: from rest_framework.mixins import ListModelMixin",
                "// Line 14: from rest_framework.permissions import IsAuthenticated",
                "// Line 15: from rest_framework.response import Response",
                "// vulnerable line: 16: from rest_framework.routers import APIRootView",
                "// Line 17: from rest_framework.viewsets import GenericViewSet, ViewSet",
                "// Line 18: ",
                "// Line 19: from nautobot.circuits.models import Circuit",
                "// Line 20: from nautobot.core.api.exceptions import ServiceUnavailable",
                "// Line 21: from nautobot.core.api.utils import get_serializer_for_model",
                "// Line 22: from nautobot.core.models.querysets import count_related",
                "// Line 23: from nautobot.dcim import filters",
                "// Line 24: from nautobot.dcim.models import (",
                "// Line 25:     Cable,",
                "// Line 26:     CablePath,",
                "// Line 63: )",
                "// Line 64: from nautobot.extras.choices import SecretsGroupAccessTypeChoices, SecretsGroupSecretTypeChoices",
                "// Line 65: from nautobot.extras.secrets.exceptions import SecretError",
                "// Line 66: from nautobot.ipam.models import Prefix, VLAN",
                "// Line 67: from nautobot.virtualization.models import VirtualMachine",
                "// Line 68: ",
                "// Line 69: from . import serializers",
                "// Line 70: from .exceptions import MissingFilterException",
                "// Line 71: ",
                "// Line 72: ",
                "// vulnerable line: 73: class DCIMRootView(APIRootView):",
                "// vulnerable line: 74: \"\"\"",
                "// vulnerable line: 75: DCIM API root view",
                "// vulnerable line: 76: \"\"\"",
                "// Line 77: ",
                "// vulnerable line: 78: def get_view_name(self):",
                "// vulnerable line: 79: return \"DCIM\"",
                "// Line 80: ",
                "// Line 81: ",
                "// Line 82: # Mixins",
                "// Line 83: ",
                "// Line 84: ",
                "// Line 85: class PathEndpointMixin:",
                "// Line 86:     # TODO: the OpenAPI schema for this endpoint is wrong since it defaults to the same as \"retrieve\".",
                "// Line 87:     @action(detail=True, url_path=\"trace\")",
                "// Line 88:     def trace(self, request, pk):",
                "// vulnerable line: 89: \"\"\"",
                "// Line 90:         Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).",
                "// vulnerable line: 91: \"\"\"",
                "// Line 92:         obj = get_object_or_404(self.queryset, pk=pk)",
                "// Line 93: ",
                "// Line 94:         # Initialize the path array",
                "// Line 95:         path = []",
                "// Line 96: ",
                "// Line 97:         for near_end, cable, far_end in obj.trace():",
                "// Line 98:             if near_end is None:",
                "// Line 99:                 # Split paths",
                "// Line 100:                 break",
                "// Line 101: ",
                "// Line 114: ",
                "// Line 115:             path.append((x, y, z))",
                "// Line 116: ",
                "// Line 117:         return Response(path)",
                "// Line 118: ",
                "// Line 119: ",
                "// Line 120: class PassThroughPortMixin:",
                "// Line 121:     @extend_schema(filters=False, responses={200: serializers.CablePathSerializer(many=True)})",
                "// Line 122:     @action(detail=True, url_path=\"paths\")",
                "// Line 123:     def paths(self, request, pk):",
                "// vulnerable line: 124: \"\"\"",
                "// Line 125:         Return all CablePaths which traverse a given pass-through port.",
                "// vulnerable line: 126: \"\"\"",
                "// Line 127:         obj = get_object_or_404(self.queryset, pk=pk)",
                "// Line 128:         cablepaths = CablePath.objects.filter(path__contains=obj).prefetch_related(\"origin\", \"destination\")",
                "// Line 129:         serializer = serializers.CablePathSerializer(cablepaths, context={\"request\": request}, many=True)",
                "// Line 130: ",
                "// Line 131:         return Response(serializer.data)",
                "// Line 132: ",
                "// Line 133: ",
                "// Line 134: #",
                "// Line 135: # Location types",
                "// Line 136: #",
                "// Line 193:     filterset_class = filters.RackFilterSet",
                "// Line 194: ",
                "// Line 195:     @extend_schema(",
                "// Line 196:         filters=False,",
                "// Line 197:         parameters=[serializers.RackElevationDetailFilterSerializer],",
                "// Line 198:         responses={200: serializers.RackUnitSerializer(many=True)},",
                "// Line 199:     )",
                "// Line 200:     @action(detail=True)",
                "// Line 201:     @xframe_options_sameorigin",
                "// Line 202:     def elevation(self, request, pk=None):",
                "// vulnerable line: 203: \"\"\"",
                "// Line 204:         Rack elevation representing the list of rack units. Also supports rendering the elevation as an SVG.",
                "// vulnerable line: 205: \"\"\"",
                "// Line 206:         rack = get_object_or_404(self.queryset, pk=pk)",
                "// Line 207:         serializer = serializers.RackElevationDetailFilterSerializer(data=request.GET)",
                "// Line 208:         serializer.is_valid(raise_exception=True)",
                "// Line 209:         data = serializer.validated_data",
                "// Line 210: ",
                "// Line 211:         if data[\"render\"] == \"svg\":",
                "// Line 212:             # Render and return the elevation as an SVG drawing with the correct content type",
                "// Line 213:             drawing = rack.get_elevation_svg(",
                "// Line 214:                 face=data[\"face\"],",
                "// Line 215:                 user=request.user,",
                "// Line 376:     serializer_class = serializers.DeviceSerializer",
                "// Line 377:     filterset_class = filters.DeviceFilterSet",
                "// Line 378: ",
                "// Line 379:     @extend_schema(",
                "// Line 380:         filters=False,",
                "// Line 381:         parameters=[OpenApiParameter(name=\"method\", location=\"query\", required=True, type=OpenApiTypes.STR)],",
                "// Line 382:         responses={\"200\": serializers.DeviceNAPALMSerializer},",
                "// Line 383:     )",
                "// Line 384:     @action(detail=True, url_path=\"napalm\")",
                "// Line 385:     def napalm(self, request, pk):",
                "// vulnerable line: 386: \"\"\"",
                "// Line 387:         Execute a NAPALM method on a Device",
                "// vulnerable line: 388: \"\"\"",
                "// Line 389:         device = get_object_or_404(self.queryset, pk=pk)",
                "// Line 390:         if device.platform is None:",
                "// Line 391:             raise ServiceUnavailable(\"No platform is configured for this device.\")",
                "// Line 392:         if not device.platform.napalm_driver:",
                "// Line 393:             raise ServiceUnavailable(f\"No NAPALM driver is configured for this device's platform: {device.platform}.\")",
                "// Line 394: ",
                "// Line 395:         # Check for primary IP address from Nautobot object",
                "// Line 396:         if device.primary_ip:",
                "// Line 397:             host = str(device.primary_ip.address.ip)",
                "// Line 398:         else:",
                "// Line 714:     serializer_class = serializers.InterfaceRedundancyGroupAssociationSerializer",
                "// Line 715:     filterset_class = filters.InterfaceRedundancyGroupAssociationFilterSet",
                "// Line 716: ",
                "// Line 717: ",
                "// Line 718: #",
                "// Line 719: # Miscellaneous",
                "// Line 720: #",
                "// Line 721: ",
                "// Line 722: ",
                "// Line 723: class ConnectedDeviceViewSet(ViewSet):",
                "// vulnerable line: 724: \"\"\"",
                "// Line 725:     This endpoint allows a user to determine what device (if any) is connected to a given peer device and peer",
                "// Line 726:     interface. This is useful in a situation where a device boots with no configuration, but can detect its neighbors",
                "// Line 727:     via a protocol such as LLDP. Two query parameters must be included in the request:",
                "// Line 728: ",
                "// Line 729:     * `peer_device`: The name of the peer device",
                "// Line 730:     * `peer_interface`: The name of the peer interface",
                "// vulnerable line: 731: \"\"\"",
                "// Line 732: ",
                "// Line 733:     permission_classes = [IsAuthenticated]",
                "// Line 734:     _device_param = OpenApiParameter(",
                "// Line 735:         name=\"peer_device\",",
                "// Line 736:         location=\"query\",",
                "// Line 737:         description=\"The name of the peer device\",",
                "// Line 738:         required=True,",
                "// Line 739:         type=OpenApiTypes.STR,",
                "// Line 740:     )",
                "// Line 741:     _interface_param = OpenApiParameter(",
                "// Line 742:         name=\"peer_interface\",",
                "// Line 743:         location=\"query\",",
                "// Line 744:         description=\"The name of the peer interface\",",
                "// Line 745:         required=True,",
                "// Line 746:         type=OpenApiTypes.STR,",
                "// Line 747:     )",
                "// Line 748: ",
                "// vulnerable line: 749: def get_view_name(self):",
                "// Line 750:         return \"Connected Device Locator\"",
                "// Line 751: ",
                "// Line 752:     @extend_schema(",
                "// Line 753:         parameters=[_device_param, _interface_param],",
                "// Line 754:         responses={\"200\": serializers.DeviceSerializer},",
                "// Line 755:     )",
                "// Line 756:     def list(self, request):",
                "// Line 757:         peer_device_name = request.query_params.get(self._device_param.name)",
                "// Line 758:         peer_interface_name = request.query_params.get(self._interface_param.name)",
                "// Line 759: ",
                "// Line 760:         if not peer_device_name or not peer_interface_name:",
                "// Line 761:             raise MissingFilterException(detail='Request must include \"peer_device\" and \"peer_interface\" filters.')",
                "// Line 762: ",
                "// Line 763:         # Determine local interface from peer interface's connection",
                "// Line 764:         peer_interface = get_object_or_404(",
                "// vulnerable line: 765: Interface.objects.all(),",
                "// Line 766:             device__name=peer_device_name,",
                "// Line 767:             name=peer_interface_name,",
                "// Line 768:         )",
                "// Line 769:         local_interface = peer_interface.connected_endpoint",
                "// Line 770: ",
                "// Line 771:         if local_interface is None:",
                "// Line 772:             return Response()",
                "// Line 773: ",
                "// Line 774:         return Response(serializers.DeviceSerializer(local_interface.device, context={\"request\": request}).data)"
            ]
        },
        {
            "filename_of_changes": "views.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "5",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 4: from django.contrib import messages",
                "// Line 5: from django.contrib.contenttypes.models import ContentType",
                "// Line 6: from django.core.paginator import EmptyPage, PageNotAnInteger",
                "// Line 7: from django.db import transaction",
                "// Line 8: from django.db.models import F, Prefetch",
                "// Line 9: from django.forms import (",
                "// Line 10:     modelformset_factory,",
                "// Line 11:     ModelMultipleChoiceField,",
                "// Line 12:     MultipleHiddenInput,",
                "// Line 13: )",
                "// vulnerable line: 14: from django.shortcuts import get_object_or_404, redirect, render",
                "// Line 15: from django.utils.functional import cached_property",
                "// Line 16: from django.utils.html import format_html",
                "// Line 17: from django.views.generic import View",
                "// Line 18: from django_tables2 import RequestConfig",
                "// Line 19: ",
                "// Line 20: from nautobot.circuits.models import Circuit",
                "// Line 21: from nautobot.core.forms import ConfirmationForm",
                "// Line 22: from nautobot.core.models.querysets import count_related",
                "// Line 23: from nautobot.core.utils.permissions import get_permission_for_model",
                "// Line 24: from nautobot.core.views import generic",
                "// Line 2309:         self.model_form = {",
                "// Line 2310:             \"console-port\": forms.ConnectCableToConsolePortForm,",
                "// Line 2311:             \"console-server-port\": forms.ConnectCableToConsoleServerPortForm,",
                "// Line 2312:             \"power-port\": forms.ConnectCableToPowerPortForm,",
                "// Line 2313:             \"power-outlet\": forms.ConnectCableToPowerOutletForm,",
                "// Line 2314:             \"interface\": forms.ConnectCableToInterfaceForm,",
                "// Line 2315:             \"front-port\": forms.ConnectCableToFrontPortForm,",
                "// Line 2316:             \"rear-port\": forms.ConnectCableToRearPortForm,",
                "// Line 2317:             \"power-feed\": forms.ConnectCableToPowerFeedForm,",
                "// Line 2318:             \"circuit-termination\": forms.ConnectCableToCircuitTerminationForm,",
                "// vulnerable line: 2319: }[kwargs.get(\"termination_b_type\")]",
                "// Line 2320: ",
                "// Line 2321:         return super().dispatch(request, *args, **kwargs)",
                "// Line 2322: ",
                "// Line 2323:     def alter_obj(self, obj, request, url_args, url_kwargs):",
                "// Line 2324:         termination_a_type = url_kwargs.get(\"termination_a_type\")",
                "// Line 2325:         termination_a_id = url_kwargs.get(\"termination_a_id\")",
                "// Line 2326:         termination_b_type_name = url_kwargs.get(\"termination_b_type\")",
                "// Line 2327:         self.termination_b_type = ContentType.objects.get(model=termination_b_type_name.replace(\"-\", \"\"))",
                "// Line 2328: ",
                "// Line 2329:         # Initialize Cable termination attributes"
            ]
        },
        {
            "filename_of_changes": "views.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "0",
            "number_of_lines_deleted_vulnerable_to_cve": "10",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 9: from drf_spectacular.types import OpenApiTypes",
                "// Line 10: from drf_spectacular.utils import extend_schema, extend_schema_view, OpenApiParameter",
                "// Line 11: from graphene_django.views import GraphQLView",
                "// Line 12: from graphql import GraphQLError",
                "// Line 13: from rest_framework import mixins, status, viewsets",
                "// Line 14: from rest_framework.decorators import action",
                "// Line 15: from rest_framework.exceptions import MethodNotAllowed, PermissionDenied, ValidationError",
                "// Line 16: from rest_framework.parsers import JSONParser, MultiPartParser",
                "// Line 17: from rest_framework.permissions import IsAuthenticated",
                "// Line 18: from rest_framework.response import Response",
                "// vulnerable line: 19: from rest_framework.routers import APIRootView",
                "// Line 20: ",
                "// Line 21: from nautobot.core.api.authentication import TokenPermissions",
                "// Line 22: from nautobot.core.api.utils import get_serializer_for_model",
                "// Line 23: from nautobot.core.api.views import (",
                "// Line 24:     BulkDestroyModelMixin,",
                "// Line 25:     BulkUpdateModelMixin,",
                "// Line 26:     ModelViewSet,",
                "// Line 27:     ModelViewSetMixin,",
                "// Line 28:     NautobotAPIVersionMixin,",
                "// Line 29:     ReadOnlyModelViewSet,",
                "// Line 67:     Tag,",
                "// Line 68:     TaggedItem,",
                "// Line 69:     Webhook,",
                "// Line 70: )",
                "// Line 71: from nautobot.extras.secrets.exceptions import SecretError",
                "// Line 72: from nautobot.extras.utils import get_worker_count",
                "// Line 73: ",
                "// Line 74: from . import serializers",
                "// Line 75: ",
                "// Line 76: ",
                "// vulnerable line: 77: class ExtrasRootView(APIRootView):",
                "// vulnerable line: 78: \"\"\"",
                "// vulnerable line: 79: Extras API root view",
                "// vulnerable line: 80: \"\"\"",
                "// Line 81: ",
                "// vulnerable line: 82: def get_view_name(self):",
                "// vulnerable line: 83: return \"Extras\"",
                "// Line 84: ",
                "// Line 85: ",
                "// Line 86: class NotesViewSetMixin:",
                "// Line 87:     def restrict_queryset(self, request, *args, **kwargs):",
                "// vulnerable line: 88: \"\"\"",
                "// Line 89:         Apply \"view\" permissions on the POST /notes/ endpoint, otherwise as ModelViewSetMixin.",
                "// vulnerable line: 90: \"\"\"",
                "// Line 91:         if request.user.is_authenticated and self.action == \"notes\":",
                "// Line 92:             self.queryset = self.queryset.restrict(request.user, \"view\")",
                "// Line 93:         else:",
                "// Line 94:             super().restrict_queryset(request, *args, **kwargs)",
                "// Line 95: ",
                "// Line 96:     class CreateNotePermissions(TokenPermissions):",
                "// Line 97:         \"\"\"As nautobot.core.api.authentication.TokenPermissions, but enforcing add_note permission.\"\"\"",
                "// Line 98: ",
                "// Line 99:         perms_map = {",
                "// Line 100:             \"GET\": [\"%(app_label)s.view_%(model_name)s\", \"extras.view_note\"],",
                "// Line 102:         }",
                "// Line 103: ",
                "// Line 104:     @extend_schema(methods=[\"get\"], filters=False, responses={200: serializers.NoteSerializer(many=True)})",
                "// Line 105:     @extend_schema(",
                "// Line 106:         methods=[\"post\"],",
                "// Line 107:         request=serializers.NoteInputSerializer,",
                "// Line 108:         responses={201: serializers.NoteSerializer(many=False)},",
                "// Line 109:     )",
                "// Line 110:     @action(detail=True, url_path=\"notes\", methods=[\"get\", \"post\"], permission_classes=[CreateNotePermissions])",
                "// Line 111:     def notes(self, request, *args, **kwargs):",
                "// vulnerable line: 112: \"\"\"",
                "// Line 113:         API methods for returning or creating notes on an object.",
                "// vulnerable line: 114: \"\"\"",
                "// Line 115:         obj = get_object_or_404(",
                "// Line 116:             self.queryset, **{self.lookup_field: self.kwargs[self.lookup_url_kwarg or self.lookup_field]}",
                "// Line 117:         )",
                "// Line 118:         if request.method == \"POST\":",
                "// Line 119:             content_type = ContentType.objects.get_for_model(obj)",
                "// Line 120:             data = request.data",
                "// Line 121:             data[\"assigned_object_id\"] = obj.pk",
                "// Line 122:             data[\"assigned_object_type\"] = f\"{content_type.app_label}.{content_type.model}\"",
                "// Line 123:             serializer = serializers.NoteSerializer(data=data, context={\"request\": request})",
                "// Line 124: ",
                "// Line 133: ",
                "// Line 134:         return self.get_paginated_response(serializer.data)",
                "// Line 135: ",
                "// Line 136: ",
                "// Line 137: #",
                "// Line 138: #  Computed Fields",
                "// Line 139: #",
                "// Line 140: ",
                "// Line 141: ",
                "// Line 142: class ComputedFieldViewSet(NotesViewSetMixin, ModelViewSet):",
                "// vulnerable line: 143: \"\"\"",
                "// Line 144:     Manage Computed Fields through DELETE, GET, POST, PUT, and PATCH requests.",
                "// vulnerable line: 145: \"\"\"",
                "// Line 146: ",
                "// Line 147:     queryset = ComputedField.objects.all()",
                "// Line 148:     serializer_class = serializers.ComputedFieldSerializer",
                "// Line 149:     filterset_class = filters.ComputedFieldFilterSet",
                "// Line 150: ",
                "// Line 151: ",
                "// Line 152: #",
                "// Line 153: # Config contexts",
                "// Line 154: #",
                "// Line 155: ",
                "// Line 156: ",
                "// Line 157: class ConfigContextQuerySetMixin:",
                "// vulnerable line: 158: \"\"\"",
                "// Line 159:     Used by views that work with config context models (device and virtual machine).",
                "// Line 160:     Provides a get_queryset() method which deals with adding the config context",
                "// Line 161:     data annotation or not.",
                "// vulnerable line: 162: \"\"\"",
                "// Line 163: ",
                "// Line 164:     def get_queryset(self):",
                "// vulnerable line: 165: \"\"\"",
                "// Line 166:         Build the proper queryset based on the request context",
                "// Line 167: ",
                "// Line 168:         If the `include` query param includes `config_context`, return the queryset annotated with config context.",
                "// Line 169: ",
                "// Line 170:         Else, return the base queryset.",
                "// vulnerable line: 171: \"\"\"",
                "// Line 172:         queryset = super().get_queryset()",
                "// Line 173:         request = self.get_serializer_context()[\"request\"]",
                "// Line 174:         if request is not None and \"config_context\" in request.query_params.get(\"include\", []):",
                "// Line 175:             return queryset.annotate_config_context_data()",
                "// Line 176:         return queryset",
                "// Line 177: ",
                "// Line 178: ",
                "// Line 179: class ConfigContextViewSet(NotesViewSetMixin, ModelViewSet):",
                "// Line 180:     queryset = ConfigContext.objects.prefetch_related(",
                "// Line 181:         \"locations\",",
                "// Line 199:     serializer_class = serializers.ConfigContextSchemaSerializer",
                "// Line 200:     filterset_class = filters.ConfigContextSchemaFilterSet",
                "// Line 201: ",
                "// Line 202: ",
                "// Line 203: #",
                "// Line 204: # ContentTypes",
                "// Line 205: #",
                "// Line 206: ",
                "// Line 207: ",
                "// Line 208: class ContentTypeViewSet(viewsets.ReadOnlyModelViewSet):",
                "// vulnerable line: 209: \"\"\"",
                "// Line 210:     Read-only list of ContentTypes. Limit results to ContentTypes pertinent to Nautobot objects.",
                "// vulnerable line: 211: \"\"\"",
                "// Line 212: ",
                "// Line 213:     permission_classes = [IsAuthenticated]",
                "// Line 214:     queryset = ContentType.objects.order_by(\"app_label\", \"model\")",
                "// Line 215:     serializer_class = serializers.ContentTypeSerializer",
                "// Line 216:     filterset_class = filters.ContentTypeFilterSet",
                "// Line 217: ",
                "// Line 218: ",
                "// Line 219: #",
                "// Line 220: # Custom fields",
                "// Line 221: #",
                "// Line 227:     filterset_class = filters.CustomFieldFilterSet",
                "// Line 228: ",
                "// Line 229: ",
                "// Line 230: class CustomFieldChoiceViewSet(ModelViewSet):",
                "// Line 231:     queryset = CustomFieldChoice.objects.all()",
                "// Line 232:     serializer_class = serializers.CustomFieldChoiceSerializer",
                "// Line 233:     filterset_class = filters.CustomFieldChoiceFilterSet",
                "// Line 234: ",
                "// Line 235: ",
                "// Line 236: class CustomFieldModelViewSet(ModelViewSet):",
                "// vulnerable line: 237: \"\"\"",
                "// Line 238:     Include the applicable set of CustomFields in the ModelViewSet context.",
                "// vulnerable line: 239: \"\"\"",
                "// Line 240: ",
                "// Line 241:     def get_serializer_context(self):",
                "// Line 242:         # Gather all custom fields for the model",
                "// Line 243:         content_type = ContentType.objects.get_for_model(self.queryset.model)",
                "// Line 244:         custom_fields = content_type.custom_fields.all()",
                "// Line 245: ",
                "// Line 246:         context = super().get_serializer_context()",
                "// Line 247:         context.update(",
                "// Line 248:             {",
                "// Line 249:                 \"custom_fields\": custom_fields,",
                "// Line 250:             }",
                "// Line 251:         )",
                "// Line 252:         return context",
                "// Line 253: ",
                "// Line 254: ",
                "// Line 255: class NautobotModelViewSet(NotesViewSetMixin, CustomFieldModelViewSet):",
                "// Line 256:     \"\"\"Base class to use for API ViewSets based on OrganizationalModel or PrimaryModel.",
                "// Line 257: ",
                "// Line 258:     Can also be used for models derived from BaseModel, so long as they support Notes.",
                "// vulnerable line: 259: \"\"\"",
                "// Line 260: ",
                "// Line 261: ",
                "// Line 262: #",
                "// Line 263: # Custom Links",
                "// Line 264: #",
                "// Line 265: ",
                "// Line 266: ",
                "// Line 267: class CustomLinkViewSet(NotesViewSetMixin, ModelViewSet):",
                "// vulnerable line: 268: \"\"\"",
                "// Line 269:     Manage Custom Links through DELETE, GET, POST, PUT, and PATCH requests.",
                "// vulnerable line: 270: \"\"\"",
                "// Line 271: ",
                "// Line 272:     queryset = CustomLink.objects.all()",
                "// Line 273:     serializer_class = serializers.CustomLinkSerializer",
                "// Line 274:     filterset_class = filters.CustomLinkFilterSet",
                "// Line 275: ",
                "// Line 276: ",
                "// Line 277: #",
                "// Line 278: # Dynamic Groups",
                "// Line 279: #",
                "// Line 280: ",
                "// Line 281: ",
                "// Line 282: class DynamicGroupViewSet(NotesViewSetMixin, ModelViewSet):",
                "// vulnerable line: 283: \"\"\"",
                "// Line 284:     Manage Dynamic Groups through DELETE, GET, POST, PUT, and PATCH requests.",
                "// vulnerable line: 285: \"\"\"",
                "// Line 286: ",
                "// Line 287:     queryset = DynamicGroup.objects.select_related(\"content_type\")",
                "// Line 288:     serializer_class = serializers.DynamicGroupSerializer",
                "// Line 289:     filterset_class = filters.DynamicGroupFilterSet",
                "// Line 290: ",
                "// Line 291:     # FIXME(jathan): Figure out how to do dynamic `responses` serializer based on the `content_type`",
                "// Line 292:     # of the DynamicGroup? May not be possible or even desirable to have a \"dynamic schema\".",
                "// Line 293:     # @extend_schema(methods=[\"get\"], responses={200: member_response})",
                "// Line 294:     @action(detail=True, methods=[\"get\"])",
                "// Line 295:     def members(self, request, pk, *args, **kwargs):",
                "// Line 298: ",
                "// Line 299:         # Retrieve the serializer for the content_type and paginate the results",
                "// Line 300:         member_model_class = instance.content_type.model_class()",
                "// Line 301:         member_serializer_class = get_serializer_for_model(member_model_class)",
                "// Line 302:         members = self.paginate_queryset(instance.members)",
                "// Line 303:         member_serializer = member_serializer_class(members, many=True, context={\"request\": request})",
                "// Line 304:         return self.get_paginated_response(member_serializer.data)",
                "// Line 305: ",
                "// Line 306: ",
                "// Line 307: class DynamicGroupMembershipViewSet(ModelViewSet):",
                "// vulnerable line: 308: \"\"\"",
                "// Line 309:     Manage Dynamic Group Memberships through DELETE, GET, POST, PUT, and PATCH requests.",
                "// vulnerable line: 310: \"\"\"",
                "// Line 311: ",
                "// Line 312:     queryset = DynamicGroupMembership.objects.select_related(\"group\", \"parent_group\")",
                "// Line 313:     serializer_class = serializers.DynamicGroupMembershipSerializer",
                "// Line 314:     filterset_class = filters.DynamicGroupMembershipFilterSet",
                "// Line 315: ",
                "// Line 316: ",
                "// Line 317: #",
                "// Line 318: # Export templates",
                "// Line 319: #",
                "// Line 320: ",
                "// Line 359:         file_proxy = self.get_object()",
                "// Line 360:         return FileResponse(file_proxy.file.open(\"rb\"), as_attachment=True)",
                "// Line 361: ",
                "// Line 362: ",
                "// Line 363: #",
                "// Line 364: # Git repositories",
                "// Line 365: #",
                "// Line 366: ",
                "// Line 367: ",
                "// Line 368: class GitRepositoryViewSet(NautobotModelViewSet):",
                "// vulnerable line: 369: \"\"\"",
                "// Line 370:     Manage the use of Git repositories as external data sources.",
                "// vulnerable line: 371: \"\"\"",
                "// Line 372: ",
                "// Line 373:     queryset = GitRepository.objects.all()",
                "// Line 374:     serializer_class = serializers.GitRepositorySerializer",
                "// Line 375:     filterset_class = filters.GitRepositoryFilterSet",
                "// Line 376: ",
                "// Line 377:     @extend_schema(methods=[\"post\"], request=serializers.GitRepositorySerializer)",
                "// Line 378:     # Since we are explicitly checking for `extras:change_gitrepository` in the API sync() method",
                "// Line 379:     # We explicitly set the permission_classes to IsAuthenticated in the @action decorator",
                "// Line 380:     # bypassing the default DRF permission check for `extras:add_gitrepository` and the permission check fall through to the function itself.",
                "// Line 381:     @action(detail=True, methods=[\"post\"], permission_classes=[IsAuthenticated])",
                "// Line 382:     def sync(self, request, pk):",
                "// vulnerable line: 383: \"\"\"",
                "// Line 384:         Enqueue pull git repository and refresh data.",
                "// vulnerable line: 385: \"\"\"",
                "// Line 386:         if not request.user.has_perm(\"extras.change_gitrepository\"):",
                "// Line 387:             raise PermissionDenied(\"This user does not have permission to make changes to Git repositories.\")",
                "// Line 388: ",
                "// Line 389:         if not get_worker_count():",
                "// Line 390:             raise CeleryWorkerNotRunningException()",
                "// Line 391: ",
                "// Line 392:         repository = get_object_or_404(GitRepository, id=pk)",
                "// Line 393:         repository.sync(user=request.user)",
                "// Line 394:         return Response({\"message\": f\"Repository {repository} sync job added to queue.\"})",
                "// Line 395: ",
                "// Line 432:     serializer_class = serializers.ImageAttachmentSerializer",
                "// Line 433:     filterset_class = filters.ImageAttachmentFilterSet",
                "// Line 434: ",
                "// Line 435: ",
                "// Line 436: #",
                "// Line 437: # Jobs",
                "// Line 438: #",
                "// Line 439: ",
                "// Line 440: ",
                "// Line 441: def _create_schedule(serializer, data, job_model, user, approval_required, task_queue=None):",
                "// vulnerable line: 442: \"\"\"",
                "// Line 443:     This is an internal function to create a scheduled job from API data.",
                "// Line 444:     It has to handle both once-offs (i.e. of type TYPE_FUTURE) and interval",
                "// Line 445:     jobs.",
                "// vulnerable line: 446: \"\"\"",
                "// Line 447:     type_ = serializer[\"interval\"]",
                "// Line 448:     if type_ == JobExecutionType.TYPE_IMMEDIATELY:",
                "// Line 449:         time = timezone.now()",
                "// Line 450:         name = serializer.get(\"name\") or f\"{job_model.name} - {time}\"",
                "// Line 451:     elif type_ == JobExecutionType.TYPE_CUSTOM:",
                "// Line 452:         time = serializer.get(\"start_time\")  # doing .get(\"key\", \"default\") returns None instead of \"default\"",
                "// Line 453:         if time is None:",
                "// Line 454:             # \"start_time\" is checked against models.ScheduledJob.earliest_possible_time()",
                "// Line 455:             # which returns timezone.now() + timedelta(seconds=15)",
                "// Line 456:             time = timezone.now() + timedelta(seconds=20)",
                "// Line 531:                     entry[key] = instance.field_attrs[key]",
                "// Line 532:             if \"initial\" in instance.field_attrs:",
                "// Line 533:                 entry[\"default\"] = instance.field_attrs[\"initial\"]",
                "// Line 534:             if \"queryset\" in instance.field_attrs:",
                "// Line 535:                 content_type = ContentType.objects.get_for_model(instance.field_attrs[\"queryset\"].model)",
                "// Line 536:                 entry[\"model\"] = f\"{content_type.app_label}.{content_type.model}\"",
                "// Line 537:             data.append(entry)",
                "// Line 538:         return Response(data)",
                "// Line 539: ",
                "// Line 540:     def restrict_queryset(self, request, *args, **kwargs):",
                "// vulnerable line: 541: \"\"\"",
                "// Line 542:         Apply special \"run_job\" permission as queryset filter on the /run/ endpoint, otherwise as ModelViewSetMixin.",
                "// vulnerable line: 543: \"\"\"",
                "// Line 544:         if request.user.is_authenticated and self.action == \"run\":",
                "// Line 545:             self.queryset = self.queryset.restrict(request.user, \"run\")",
                "// Line 546:         else:",
                "// Line 547:             super().restrict_queryset(request, *args, **kwargs)",
                "// Line 548: ",
                "// Line 549:     class JobRunTokenPermissions(TokenPermissions):",
                "// Line 550:         \"\"\"As nautobot.core.api.authentication.TokenPermissions, but enforcing run_job instead of add_job.\"\"\"",
                "// Line 551: ",
                "// Line 552:         perms_map = {",
                "// Line 553:             \"POST\": [\"%(app_label)s.run_%(model_name)s\"],",
                "// Line 752:     lookup_url_kwarg = \"name\"",
                "// Line 753:     lookup_value_regex = r\"[^/]+\"",
                "// Line 754: ",
                "// Line 755: ",
                "// Line 756: #",
                "// Line 757: # Job Hooks",
                "// Line 758: #",
                "// Line 759: ",
                "// Line 760: ",
                "// Line 761: class JobHooksViewSet(NautobotModelViewSet):",
                "// vulnerable line: 762: \"\"\"",
                "// Line 763:     Manage job hooks through DELETE, GET, POST, PUT, and PATCH requests.",
                "// vulnerable line: 764: \"\"\"",
                "// Line 765: ",
                "// Line 766:     queryset = JobHook.objects.all()",
                "// Line 767:     serializer_class = serializers.JobHookSerializer",
                "// Line 768:     filterset_class = filters.JobHookFilterSet",
                "// Line 769: ",
                "// Line 770: ",
                "// Line 771: #",
                "// Line 772: # Job Results",
                "// Line 773: #",
                "// Line 774: ",
                "// Line 775: ",
                "// Line 776: class JobLogEntryViewSet(ReadOnlyModelViewSet):",
                "// vulnerable line: 777: \"\"\"",
                "// Line 778:     Retrieve a list of job log entries.",
                "// vulnerable line: 779: \"\"\"",
                "// Line 780: ",
                "// Line 781:     queryset = JobLogEntry.objects.select_related(\"job_result\")",
                "// Line 782:     serializer_class = serializers.JobLogEntrySerializer",
                "// Line 783:     filterset_class = filters.JobLogEntryFilterSet",
                "// Line 784: ",
                "// Line 785: ",
                "// Line 786: class JobResultViewSet(",
                "// Line 787:     # DRF mixins:",
                "// Line 788:     # note no CreateModelMixin or UpdateModelMixin",
                "// Line 789:     mixins.DestroyModelMixin,",
                "// Line 790:     # Nautobot mixins:",
                "// Line 791:     BulkDestroyModelMixin,",
                "// Line 792:     # Base class",
                "// Line 793:     ReadOnlyModelViewSet,",
                "// Line 794: ):",
                "// vulnerable line: 795: \"\"\"",
                "// Line 796:     Retrieve a list of job results",
                "// vulnerable line: 797: \"\"\"",
                "// Line 798: ",
                "// Line 799:     queryset = JobResult.objects.select_related(\"job_model\", \"user\")",
                "// Line 800:     serializer_class = serializers.JobResultSerializer",
                "// Line 801:     filterset_class = filters.JobResultFilterSet",
                "// Line 802: ",
                "// Line 803:     @action(detail=True)",
                "// Line 804:     def logs(self, request, pk=None):",
                "// Line 805:         job_result = self.get_object()",
                "// Line 806:         logs = job_result.job_log_entries.all()",
                "// Line 807:         serializer = serializers.JobLogEntrySerializer(logs, context={\"request\": request}, many=True)",
                "// Line 808:         return Response(serializer.data)",
                "// Line 809: ",
                "// Line 810: ",
                "// Line 811: #",
                "// Line 812: # Job Button",
                "// Line 813: #",
                "// Line 814: ",
                "// Line 815: ",
                "// Line 816: class JobButtonViewSet(NotesViewSetMixin, ModelViewSet):",
                "// vulnerable line: 817: \"\"\"",
                "// Line 818:     Manage Job Buttons through DELETE, GET, POST, PUT, and PATCH requests.",
                "// vulnerable line: 819: \"\"\"",
                "// Line 820: ",
                "// Line 821:     queryset = JobButton.objects.all()",
                "// Line 822:     serializer_class = serializers.JobButtonSerializer",
                "// Line 823:     filterset_class = filters.JobButtonFilterSet",
                "// Line 824: ",
                "// Line 825: ",
                "// Line 826: #",
                "// Line 827: # Scheduled Jobs",
                "// Line 828: #",
                "// Line 829: ",
                "// Line 830: ",
                "// Line 831: class ScheduledJobViewSet(ReadOnlyModelViewSet):",
                "// vulnerable line: 832: \"\"\"",
                "// Line 833:     Retrieve a list of scheduled jobs",
                "// vulnerable line: 834: \"\"\"",
                "// Line 835: ",
                "// Line 836:     queryset = ScheduledJob.objects.select_related(\"user\")",
                "// Line 837:     serializer_class = serializers.ScheduledJobSerializer",
                "// Line 838:     filterset_class = filters.ScheduledJobFilterSet",
                "// Line 839: ",
                "// Line 840:     def restrict_queryset(self, request, *args, **kwargs):",
                "// vulnerable line: 841: \"\"\"",
                "// Line 842:         Apply special permissions as queryset filter on the /approve/, /deny/, and /dry-run/ endpoints.",
                "// Line 843: ",
                "// Line 844:         Otherwise, same as ModelViewSetMixin.",
                "// vulnerable line: 845: \"\"\"",
                "// Line 846:         action_to_method = {\"approve\": \"change\", \"deny\": \"delete\", \"dry-run\": \"view\"}",
                "// Line 847:         if request.user.is_authenticated and self.action in action_to_method:",
                "// Line 848:             self.queryset = self.queryset.restrict(request.user, action_to_method[self.action])",
                "// Line 849:         else:",
                "// Line 850:             super().restrict_queryset(request, *args, **kwargs)",
                "// Line 851: ",
                "// Line 852:     class ScheduledJobChangePermissions(TokenPermissions):",
                "// vulnerable line: 853: \"\"\"",
                "// Line 854:         As nautobot.core.api.authentication.TokenPermissions, but enforcing change_scheduledjob not add_scheduledjob.",
                "// vulnerable line: 855: \"\"\"",
                "// Line 856: ",
                "// Line 857:         perms_map = {",
                "// Line 858:             \"POST\": [\"%(app_label)s.change_%(model_name)s\"],",
                "// Line 859:         }",
                "// Line 860: ",
                "// Line 861:     @extend_schema(",
                "// Line 862:         methods=[\"post\"],",
                "// Line 863:         responses={\"200\": serializers.ScheduledJobSerializer},",
                "// Line 864:         request=None,",
                "// Line 865:         parameters=[",
                "// Line 894:             )",
                "// Line 895: ",
                "// Line 896:         scheduled_job.approved_by_user = request.user",
                "// Line 897:         scheduled_job.approved_at = timezone.now()",
                "// Line 898:         scheduled_job.save()",
                "// Line 899:         serializer = serializers.ScheduledJobSerializer(scheduled_job, context={\"request\": request})",
                "// Line 900: ",
                "// Line 901:         return Response(serializer.data)",
                "// Line 902: ",
                "// Line 903:     class ScheduledJobDeletePermissions(TokenPermissions):",
                "// vulnerable line: 904: \"\"\"",
                "// Line 905:         As nautobot.core.api.authentication.TokenPermissions, but enforcing delete_scheduledjob not add_scheduledjob.",
                "// vulnerable line: 906: \"\"\"",
                "// Line 907: ",
                "// Line 908:         perms_map = {",
                "// Line 909:             \"POST\": [\"%(app_label)s.delete_%(model_name)s\"],",
                "// Line 910:         }",
                "// Line 911: ",
                "// Line 912:     @extend_schema(",
                "// Line 913:         methods=[\"post\"],",
                "// Line 914:         request=None,",
                "// Line 915:     )",
                "// Line 916:     @action(detail=True, methods=[\"post\"], permission_classes=[ScheduledJobDeletePermissions])",
                "// Line 918:         scheduled_job = get_object_or_404(ScheduledJob, pk=pk)",
                "// Line 919: ",
                "// Line 920:         if not Job.objects.check_perms(request.user, instance=scheduled_job.job_model, action=\"approve\"):",
                "// Line 921:             raise PermissionDenied(\"You do not have permission to deny this request.\")",
                "// Line 922: ",
                "// Line 923:         scheduled_job.delete()",
                "// Line 924: ",
                "// Line 925:         return Response(None)",
                "// Line 926: ",
                "// Line 927:     class ScheduledJobViewPermissions(TokenPermissions):",
                "// vulnerable line: 928: \"\"\"",
                "// Line 929:         As nautobot.core.api.authentication.TokenPermissions, but enforcing view_scheduledjob not add_scheduledjob.",
                "// vulnerable line: 930: \"\"\"",
                "// Line 931: ",
                "// Line 932:         perms_map = {",
                "// Line 933:             \"POST\": [\"%(app_label)s.view_%(model_name)s\"],",
                "// Line 934:         }",
                "// Line 935: ",
                "// Line 936:     @extend_schema(",
                "// Line 937:         methods=[\"post\"],",
                "// Line 938:         responses={\"200\": serializers.JobResultSerializer},",
                "// Line 939:         request=None,",
                "// Line 940:     )",
                "// Line 977:     def perform_create(self, serializer):",
                "// Line 978:         serializer.save(user=self.request.user)",
                "// Line 979: ",
                "// Line 980: ",
                "// Line 981: #",
                "// Line 982: # Change logging",
                "// Line 983: #",
                "// Line 984: ",
                "// Line 985: ",
                "// Line 986: class ObjectChangeViewSet(ReadOnlyModelViewSet):",
                "// vulnerable line: 987: \"\"\"",
                "// Line 988:     Retrieve a list of recent changes.",
                "// vulnerable line: 989: \"\"\"",
                "// Line 990: ",
                "// Line 991:     queryset = ObjectChange.objects.select_related(\"user\")",
                "// Line 992:     serializer_class = serializers.ObjectChangeSerializer",
                "// Line 993:     filterset_class = filters.ObjectChangeFilterSet",
                "// Line 994: ",
                "// Line 995: ",
                "// Line 996: #",
                "// Line 997: #  Relationships",
                "// Line 998: #",
                "// Line 999: ",
                "// Line 1020:     serializer_class = serializers.RoleSerializer",
                "// Line 1021:     filterset_class = RoleFilterSet",
                "// Line 1022: ",
                "// Line 1023: ",
                "// Line 1024: #",
                "// Line 1025: # Secrets",
                "// Line 1026: #",
                "// Line 1027: ",
                "// Line 1028: ",
                "// Line 1029: class SecretsViewSet(NautobotModelViewSet):",
                "// vulnerable line: 1030: \"\"\"",
                "// Line 1031:     Manage Secrets through DELETE, GET, POST, PUT, and PATCH requests.",
                "// vulnerable line: 1032: \"\"\"",
                "// Line 1033: ",
                "// Line 1034:     queryset = Secret.objects.all()",
                "// Line 1035:     serializer_class = serializers.SecretSerializer",
                "// Line 1036:     filterset_class = filters.SecretFilterSet",
                "// Line 1037: ",
                "// Line 1038:     @extend_schema(",
                "// Line 1039:         responses={",
                "// Line 1040:             200: {",
                "// Line 1041:                 \"type\": \"object\",",
                "// Line 1042:                 \"properties\": {",
                "// Line 1055:             self.get_object().get_value()",
                "// Line 1056:             result = True",
                "// Line 1057:             message = \"Passed\"",
                "// Line 1058:         except SecretError as e:",
                "// Line 1059:             message = str(e)",
                "// Line 1060:         response = {\"result\": result, \"message\": message}",
                "// Line 1061:         return Response(response)",
                "// Line 1062: ",
                "// Line 1063: ",
                "// Line 1064: class SecretsGroupViewSet(NautobotModelViewSet):",
                "// vulnerable line: 1065: \"\"\"",
                "// Line 1066:     Manage Secrets Groups through DELETE, GET, POST, PUT, and PATCH requests.",
                "// vulnerable line: 1067: \"\"\"",
                "// Line 1068: ",
                "// Line 1069:     queryset = SecretsGroup.objects.all()",
                "// Line 1070:     serializer_class = serializers.SecretsGroupSerializer",
                "// Line 1071:     filterset_class = filters.SecretsGroupFilterSet",
                "// Line 1072: ",
                "// Line 1073: ",
                "// Line 1074: class SecretsGroupAssociationViewSet(ModelViewSet):",
                "// vulnerable line: 1075: \"\"\"",
                "// Line 1076:     Manage Secrets Group Associations through DELETE, GET, POST, PUT, and PATCH requests.",
                "// vulnerable line: 1077: \"\"\"",
                "// Line 1078: ",
                "// Line 1079:     queryset = SecretsGroupAssociation.objects.all()",
                "// Line 1080:     serializer_class = serializers.SecretsGroupAssociationSerializer",
                "// Line 1081:     filterset_class = filters.SecretsGroupAssociationFilterSet",
                "// Line 1082: ",
                "// Line 1083: ",
                "// Line 1084: #",
                "// Line 1085: # Statuses",
                "// Line 1086: #",
                "// Line 1087: ",
                "// Line 1088: ",
                "// Line 1089: class StatusViewSet(NautobotModelViewSet):",
                "// vulnerable line: 1090: \"\"\"",
                "// Line 1091:     View and manage custom status choices for objects with a `status` field.",
                "// vulnerable line: 1092: \"\"\"",
                "// Line 1093: ",
                "// Line 1094:     queryset = Status.objects.all()",
                "// Line 1095:     serializer_class = serializers.StatusSerializer",
                "// Line 1096:     filterset_class = filters.StatusFilterSet",
                "// Line 1097: ",
                "// Line 1098: ",
                "// Line 1099: #",
                "// Line 1100: # Tags",
                "// Line 1101: #",
                "// Line 1102: ",
                "// Line 1106:     serializer_class = serializers.TagSerializer",
                "// Line 1107:     filterset_class = filters.TagFilterSet",
                "// Line 1108: ",
                "// Line 1109: ",
                "// Line 1110: #",
                "// Line 1111: # Webhooks",
                "// Line 1112: #",
                "// Line 1113: ",
                "// Line 1114: ",
                "// Line 1115: class WebhooksViewSet(NotesViewSetMixin, ModelViewSet):",
                "// vulnerable line: 1116: \"\"\"",
                "// Line 1117:     Manage Webhooks through DELETE, GET, POST, PUT, and PATCH requests.",
                "// vulnerable line: 1118: \"\"\"",
                "// Line 1119: ",
                "// Line 1120:     queryset = Webhook.objects.all()",
                "// Line 1121:     serializer_class = serializers.WebhookSerializer",
                "// Line 1122:     filterset_class = filters.WebhookFilterSet"
            ]
        },
        {
            "filename_of_changes": "views.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "6",
            "number_of_lines_deleted_vulnerable_to_cve": "9",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: from collections import OrderedDict",
                "// Line 2: ",
                "// Line 3: from django.apps import apps",
                "// Line 4: from django.conf import settings",
                "// vulnerable line: 5: from django.contrib.auth.mixins import LoginRequiredMixin",
                "// Line 6: from django.http import Http404",
                "// Line 7: from django.shortcuts import render",
                "// Line 8: from django.urls.exceptions import NoReverseMatch",
                "// Line 9: from django.views.generic import View",
                "// Line 10: from django_tables2 import RequestConfig",
                "// Line 11: from drf_spectacular.utils import extend_schema",
                "// Line 12: from rest_framework import permissions",
                "// Line 13: from rest_framework.response import Response",
                "// Line 14: from rest_framework.reverse import reverse",
                "// Line 15: from rest_framework.views import APIView",
                "// Line 16: ",
                "// vulnerable line: 17: from nautobot.core.api.views import NautobotAPIVersionMixin",
                "// Line 18: from nautobot.core.forms import TableConfigForm",
                "// Line 19: from nautobot.core.views.mixins import AdminRequiredMixin",
                "// Line 20: from nautobot.core.views.paginator import EnhancedPaginator, get_paginate_count",
                "// Line 21: from nautobot.extras.plugins.tables import InstalledPluginsTable",
                "// Line 22: ",
                "// Line 23: ",
                "// Line 24: class InstalledPluginsView(AdminRequiredMixin, View):",
                "// Line 25:     \"\"\"",
                "// Line 26:     View for listing all installed plugins.",
                "// Line 27:     \"\"\"",
                "// Line 60:             request,",
                "// Line 61:             \"extras/plugins_list.html\",",
                "// Line 62:             {",
                "// Line 63:                 \"table\": table,",
                "// Line 64:                 \"table_config_form\": TableConfigForm(table=table),",
                "// Line 65:                 \"filter_form\": None,",
                "// Line 66:             },",
                "// Line 67:         )",
                "// Line 68: ",
                "// Line 69: ",
                "// vulnerable line: 70: class InstalledPluginDetailView(LoginRequiredMixin, View):",
                "// Line 71:     \"\"\"",
                "// Line 72:     View for showing details of an installed plugin.",
                "// Line 73:     \"\"\"",
                "// Line 74: ",
                "// Line 75:     def get(self, request, plugin):",
                "// Line 76:         plugin_config = apps.get_app_config(plugin)",
                "// Line 77:         if plugin_config.name not in settings.PLUGINS:",
                "// Line 78:             raise Http404",
                "// Line 79: ",
                "// Line 80:         return render(",
                "// Line 85:             },",
                "// Line 86:         )",
                "// Line 87: ",
                "// Line 88: ",
                "// Line 89: class InstalledPluginsAPIView(NautobotAPIVersionMixin, APIView):",
                "// Line 90:     \"\"\"",
                "// Line 91:     API view for listing all installed non-core Apps.",
                "// Line 92:     \"\"\"",
                "// Line 93: ",
                "// Line 94:     permission_classes = [permissions.IsAdminUser]",
                "// vulnerable line: 95: _ignore_model_permissions = True",
                "// Line 96: ",
                "// vulnerable line: 97: def get_view_name(self):",
                "// Line 98:         return \"Installed Plugins\"",
                "// Line 99: ",
                "// Line 100:     @staticmethod",
                "// Line 101:     def _get_plugin_data(plugin_app_config):",
                "// Line 102:         try:",
                "// Line 103:             home_url = reverse(plugin_app_config.home_view_name)",
                "// Line 104:         except NoReverseMatch:",
                "// Line 105:             home_url = None",
                "// Line 106:         try:",
                "// Line 107:             config_url = reverse(plugin_app_config.config_view_name)",
                "// Line 121:             \"home_url\": home_url,",
                "// Line 122:             \"config_url\": config_url,",
                "// Line 123:             \"docs_url\": docs_url,",
                "// Line 124:         }",
                "// Line 125: ",
                "// Line 126:     @extend_schema(exclude=True)",
                "// Line 127:     def get(self, request, format=None):  # pylint: disable=redefined-builtin",
                "// Line 128:         return Response([self._get_plugin_data(apps.get_app_config(plugin)) for plugin in settings.PLUGINS])",
                "// Line 129: ",
                "// Line 130: ",
                "// vulnerable line: 131: class PluginsAPIRootView(NautobotAPIVersionMixin, APIView):",
                "// vulnerable line: 132: _ignore_model_permissions = True",
                "// Line 133: ",
                "// vulnerable line: 134: def get_view_name(self):",
                "// vulnerable line: 135: return \"Plugins\"",
                "// Line 136: ",
                "// Line 137:     @staticmethod",
                "// Line 138:     def _get_plugin_entry(plugin, app_config, request, format_):",
                "// Line 139:         # Check if the plugin specifies any API URLs",
                "// Line 140:         api_app_name = f\"{app_config.name}-api\"",
                "// Line 141:         try:",
                "// Line 142:             entry = (",
                "// Line 143:                 app_config.base_url or app_config.label,",
                "// Line 144:                 reverse(",
                "// Line 145:                     f\"plugins-api:{api_app_name}:api-root\","
            ]
        },
        {
            "filename_of_changes": "views.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "10",
            "number_of_lines_deleted_vulnerable_to_cve": "10",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 707: class DynamicGroupDeleteView(generic.ObjectDeleteView):",
                "// Line 708:     queryset = DynamicGroup.objects.all()",
                "// Line 709: ",
                "// Line 710: ",
                "// Line 711: class DynamicGroupBulkDeleteView(generic.BulkDeleteView):",
                "// Line 712:     queryset = DynamicGroup.objects.all()",
                "// Line 713:     table = tables.DynamicGroupTable",
                "// Line 714:     filterset = filters.DynamicGroupFilterSet",
                "// Line 715: ",
                "// Line 716: ",
                "// vulnerable line: 717: class ObjectDynamicGroupsView(View):",
                "// Line 718:     \"\"\"",
                "// Line 719:     Present a list of dynamic groups associated to a particular object.",
                "// Line 720:     base_template: The name of the template to extend. If not provided, \"<app>/<model>.html\" will be used.",
                "// Line 721:     \"\"\"",
                "// Line 722: ",
                "// Line 723:     base_template = None",
                "// Line 724: ",
                "// Line 725:     def get(self, request, model, **kwargs):",
                "// Line 726:         # Handle QuerySet restriction of parent object if needed",
                "// Line 727:         if hasattr(model.objects, \"restrict\"):",
                "// Line 906:             otherwise redirect to the job result page.",
                "// Line 907:     \"\"\"",
                "// Line 908:     if not request.user.has_perm(\"extras.change_gitrepository\"):",
                "// Line 909:         return HttpResponseForbidden()",
                "// Line 910: ",
                "// Line 911:     # Allow execution only if a worker process is running.",
                "// Line 912:     if not get_worker_count():",
                "// Line 913:         messages.error(request, \"Unable to run job: Celery worker process not running.\")",
                "// Line 914:         return redirect(request.get_full_path(), permanent=False)",
                "// Line 915:     else:",
                "// vulnerable line: 916: repository = get_object_or_404(GitRepository, pk=pk)",
                "// Line 917:         job_result = func(repository, request.user)",
                "// Line 918: ",
                "// Line 919:     return redirect(job_result.get_absolute_url())",
                "// Line 920: ",
                "// Line 921: ",
                "// vulnerable line: 922: class GitRepositorySyncView(View):",
                "// Line 923:     def post(self, request, pk):",
                "// Line 924:         return check_and_call_git_repository_function(request, pk, enqueue_pull_git_repository_and_refresh_data)",
                "// Line 925: ",
                "// Line 926: ",
                "// vulnerable line: 927: class GitRepositoryDryRunView(View):",
                "// Line 928:     def post(self, request, pk):",
                "// Line 929:         return check_and_call_git_repository_function(request, pk, enqueue_git_repository_diff_origin_and_local)",
                "// Line 930: ",
                "// Line 931: ",
                "// Line 932: class GitRepositoryResultView(generic.ObjectView):",
                "// Line 933:     \"\"\"",
                "// Line 934:     Display a JobResult and its Job data.",
                "// Line 935:     \"\"\"",
                "// Line 936: ",
                "// Line 937:     queryset = GitRepository.objects.all()",
                "// Line 1553:         if instance.job_model is not None:",
                "// Line 1554:             job_class = instance.job_model.job_class",
                "// Line 1555: ",
                "// Line 1556:         return {",
                "// Line 1557:             \"job\": job_class,",
                "// Line 1558:             \"associated_record\": associated_record,",
                "// Line 1559:             \"result\": instance,",
                "// Line 1560:         }",
                "// Line 1561: ",
                "// Line 1562: ",
                "// vulnerable line: 1563: class JobLogEntryTableView(View):",
                "// Line 1564:     \"\"\"",
                "// Line 1565:     Display a table of `JobLogEntry` objects for a given `JobResult` instance.",
                "// Line 1566:     \"\"\"",
                "// Line 1567: ",
                "// Line 1568:     queryset = JobResult.objects.all()",
                "// Line 1569: ",
                "// Line 1570:     def get(self, request, pk=None):",
                "// vulnerable line: 1571: instance = self.queryset.get(pk=pk)",
                "// Line 1572:         filter_q = request.GET.get(\"q\")",
                "// Line 1573:         if filter_q:",
                "// Line 1574:             queryset = instance.job_log_entries.filter(",
                "// Line 1575:                 Q(message__icontains=filter_q) | Q(log_level__icontains=filter_q)",
                "// Line 1576:             )",
                "// Line 1577:         else:",
                "// Line 1578:             queryset = instance.job_log_entries.all()",
                "// Line 1579:         log_table = tables.JobLogEntryTable(data=queryset, user=request.user)",
                "// Line 1580:         RequestConfig(request).configure(log_table)",
                "// Line 1581:         return HttpResponse(log_table.as_html(request))",
                "// Line 1640:         return {",
                "// Line 1641:             \"diff_added\": snapshots[\"differences\"][\"added\"],",
                "// Line 1642:             \"diff_removed\": snapshots[\"differences\"][\"removed\"],",
                "// Line 1643:             \"next_change\": instance.get_next_change(request.user),",
                "// Line 1644:             \"prev_change\": instance.get_prev_change(request.user),",
                "// Line 1645:             \"related_changes_table\": related_changes_table,",
                "// Line 1646:             \"related_changes_count\": related_changes.count(),",
                "// Line 1647:         }",
                "// Line 1648: ",
                "// Line 1649: ",
                "// vulnerable line: 1650: class ObjectChangeLogView(View):",
                "// Line 1651:     \"\"\"",
                "// Line 1652:     Present a history of changes made to a particular object.",
                "// Line 1653:     base_template: The name of the template to extend. If not provided, \"<app>/<model>.html\" will be used.",
                "// Line 1654:     \"\"\"",
                "// Line 1655: ",
                "// Line 1656:     base_template = None",
                "// Line 1657: ",
                "// Line 1658:     def get(self, request, model, **kwargs):",
                "// Line 1659:         # Handle QuerySet restriction of parent object if needed",
                "// Line 1660:         if hasattr(model.objects, \"restrict\"):",
                "// Line 1724: ",
                "// Line 1725:     def alter_obj(self, obj, request, url_args, url_kwargs):",
                "// Line 1726:         obj.user = request.user",
                "// Line 1727:         return obj",
                "// Line 1728: ",
                "// Line 1729: ",
                "// Line 1730: class NoteDeleteView(generic.ObjectDeleteView):",
                "// Line 1731:     queryset = Note.objects.all()",
                "// Line 1732: ",
                "// Line 1733: ",
                "// vulnerable line: 1734: class ObjectNotesView(View):",
                "// Line 1735:     \"\"\"",
                "// Line 1736:     Present a list of notes associated to a particular object.",
                "// Line 1737:     base_template: The name of the template to extend. If not provided, \"<app>/<model>.html\" will be used.",
                "// Line 1738:     \"\"\"",
                "// Line 1739: ",
                "// Line 1740:     base_template = None",
                "// Line 1741: ",
                "// Line 1742:     def get(self, request, model, **kwargs):",
                "// Line 1743:         # Handle QuerySet restriction of parent object if needed",
                "// Line 1744:         if hasattr(model.objects, \"restrict\"):",
                "// Line 1745:             obj = get_object_or_404(model.objects.restrict(request.user, \"view\"), **kwargs)",
                "// Line 1746:         else:",
                "// Line 1747:             obj = get_object_or_404(model, **kwargs)",
                "// Line 1748: ",
                "// Line 1749:         notes_form = forms.NoteForm(",
                "// Line 1750:             initial={",
                "// Line 1751:                 \"assigned_object_type\": ContentType.objects.get_for_model(obj),",
                "// Line 1752:                 \"assigned_object_id\": obj.pk,",
                "// Line 1753:             }",
                "// Line 1754:         )",
                "// vulnerable line: 1755: notes_table = tables.NoteTable(obj.notes)",
                "// Line 1756: ",
                "// Line 1757:         # Apply the request context",
                "// Line 1758:         paginate = {",
                "// Line 1759:             \"paginator_class\": EnhancedPaginator,",
                "// Line 1760:             \"per_page\": get_paginate_count(request),",
                "// Line 1761:         }",
                "// Line 1762:         RequestConfig(request, paginate).configure(notes_table)",
                "// Line 1763: ",
                "// Line 1764:         self.base_template = get_base_template(self.base_template, model)",
                "// Line 1765: ",
                "// Line 1966:         groups = instance.secrets_groups.distinct()",
                "// Line 1967:         groups_table = tables.SecretsGroupTable(groups, orderable=False)",
                "// Line 1968: ",
                "// Line 1969:         return {",
                "// Line 1970:             \"format\": format_,",
                "// Line 1971:             \"provider_name\": provider.name if provider else instance.provider,",
                "// Line 1972:             \"groups_table\": groups_table,",
                "// Line 1973:         }",
                "// Line 1974: ",
                "// Line 1975: ",
                "// vulnerable line: 1976: class SecretProviderParametersFormView(View):",
                "// Line 1977:     \"\"\"",
                "// Line 1978:     Helper view to SecretView; retrieve the HTML form appropriate for entering parameters for a given SecretsProvider.",
                "// Line 1979:     \"\"\"",
                "// Line 1980: ",
                "// Line 1981:     def get(self, request, provider_slug):",
                "// Line 1982:         provider = registry[\"secrets_providers\"].get(provider_slug)",
                "// Line 1983:         if not provider:",
                "// Line 1984:             raise Http404",
                "// Line 1985:         return render(",
                "// Line 1986:             request,"
            ]
        },
        {
            "filename_of_changes": "views.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "0",
            "number_of_lines_deleted_vulnerable_to_cve": "11",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: from django.conf import settings",
                "// Line 2: from django.core.cache import cache",
                "// Line 3: from django.shortcuts import get_object_or_404",
                "// Line 4: from drf_spectacular.utils import extend_schema",
                "// Line 5: from rest_framework import status",
                "// Line 6: from rest_framework.decorators import action",
                "// Line 7: from rest_framework.response import Response",
                "// vulnerable line: 8: from rest_framework.routers import APIRootView",
                "// Line 9: ",
                "// Line 10: from nautobot.core.models.querysets import count_related",
                "// Line 11: from nautobot.core.utils.config import get_settings_or_config",
                "// Line 12: from nautobot.extras.api.views import NautobotModelViewSet",
                "// Line 13: from nautobot.ipam import filters",
                "// Line 14: from nautobot.ipam.models import (",
                "// Line 15:     IPAddress,",
                "// Line 16:     IPAddressToInterface,",
                "// Line 17:     Namespace,",
                "// Line 18:     Prefix,",
                "// Line 20:     RouteTarget,",
                "// Line 21:     Service,",
                "// Line 22:     VLAN,",
                "// Line 23:     VLANGroup,",
                "// Line 24:     VRF,",
                "// Line 25: )",
                "// Line 26: ",
                "// Line 27: from . import serializers",
                "// Line 28: ",
                "// Line 29: ",
                "// vulnerable line: 30: class IPAMRootView(APIRootView):",
                "// vulnerable line: 31: \"\"\"",
                "// vulnerable line: 32: IPAM API root view",
                "// vulnerable line: 33: \"\"\"",
                "// Line 34: ",
                "// vulnerable line: 35: def get_view_name(self):",
                "// vulnerable line: 36: return \"IPAM\"",
                "// Line 37: ",
                "// Line 38: ",
                "// Line 39: #",
                "// Line 40: # Namespace",
                "// Line 41: #",
                "// Line 42: ",
                "// Line 43: ",
                "// Line 44: class NamespaceViewSet(NautobotModelViewSet):",
                "// Line 45:     queryset = Namespace.objects.all()",
                "// Line 46:     serializer_class = serializers.NamespaceSerializer",
                "// Line 103: ",
                "// Line 104:     def get_serializer_class(self):",
                "// Line 105:         if self.action == \"available_prefixes\" and self.request.method == \"POST\":",
                "// Line 106:             return serializers.PrefixLengthSerializer",
                "// Line 107:         return super().get_serializer_class()",
                "// Line 108: ",
                "// Line 109:     @extend_schema(methods=[\"get\"], responses={200: serializers.AvailablePrefixSerializer(many=True)})",
                "// Line 110:     @extend_schema(methods=[\"post\"], responses={201: serializers.PrefixSerializer(many=False)})",
                "// Line 111:     @action(detail=True, url_path=\"available-prefixes\", methods=[\"get\", \"post\"], filterset_class=None)",
                "// Line 112:     def available_prefixes(self, request, pk=None):",
                "// vulnerable line: 113: \"\"\"",
                "// Line 114:         A convenience method for returning available child prefixes within a parent.",
                "// Line 115: ",
                "// Line 116:         The advisory lock decorator uses a PostgreSQL advisory lock to prevent this API from being",
                "// Line 117:         invoked in parallel, which results in a race condition where multiple insertions can occur.",
                "// vulnerable line: 118: \"\"\"",
                "// Line 119:         prefix = get_object_or_404(self.queryset, pk=pk)",
                "// Line 120:         if request.method == \"POST\":",
                "// Line 121:             with cache.lock(",
                "// Line 122:                 \"nautobot.ipam.api.views.available_prefixes\", blocking_timeout=5, timeout=settings.REDIS_LOCK_TIMEOUT",
                "// Line 123:             ):",
                "// Line 124:                 available_prefixes = prefix.get_available_prefixes()",
                "// Line 125: ",
                "// Line 126:                 # Validate Requested Prefixes' length",
                "// Line 127:                 serializer = serializers.PrefixLengthSerializer(",
                "// Line 128:                     data=request.data if isinstance(request.data, list) else [request.data],",
                "// Line 184:         request=serializers.AvailableIPSerializer(many=True),",
                "// Line 185:     )",
                "// Line 186:     @action(",
                "// Line 187:         detail=True,",
                "// Line 188:         url_path=\"available-ips\",",
                "// Line 189:         methods=[\"get\", \"post\"],",
                "// Line 190:         queryset=IPAddress.objects.all(),",
                "// Line 191:         filterset_class=None,",
                "// Line 192:     )",
                "// Line 193:     def available_ips(self, request, pk=None):",
                "// vulnerable line: 194: \"\"\"",
                "// Line 195:         A convenience method for returning available IP addresses within a prefix. By default, the number of IPs",
                "// Line 196:         returned will be equivalent to PAGINATE_COUNT. An arbitrary limit (up to MAX_PAGE_SIZE, if set) may be passed,",
                "// Line 197:         however results will not be paginated.",
                "// Line 198: ",
                "// Line 199:         The advisory lock decorator uses a PostgreSQL advisory lock to prevent this API from being",
                "// Line 200:         invoked in parallel, which results in a race condition where multiple insertions can occur.",
                "// vulnerable line: 201: \"\"\"",
                "// Line 202:         prefix = get_object_or_404(Prefix.objects.restrict(request.user), pk=pk)",
                "// Line 203: ",
                "// Line 204:         # Create the next available IP within the prefix",
                "// Line 205:         if request.method == \"POST\":",
                "// Line 206:             with cache.lock(",
                "// Line 207:                 \"nautobot.ipam.api.views.available_ips\", blocking_timeout=5, timeout=settings.REDIS_LOCK_TIMEOUT",
                "// Line 208:             ):",
                "// Line 209:                 # Normalize to a list of objects",
                "// Line 210:                 requested_ips = request.data if isinstance(request.data, list) else [request.data]",
                "// Line 211: "
            ]
        },
        {
            "filename_of_changes": "views.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "9",
            "number_of_lines_deleted_vulnerable_to_cve": "9",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 765:         }",
                "// Line 766: ",
                "// Line 767: ",
                "// Line 768: class IPAddressEditView(generic.ObjectEditView):",
                "// Line 769:     queryset = IPAddress.objects.all()",
                "// Line 770:     model_form = forms.IPAddressForm",
                "// Line 771:     template_name = \"ipam/ipaddress_edit.html\"",
                "// Line 772: ",
                "// Line 773:     def dispatch(self, request, *args, **kwargs):",
                "// Line 774:         if \"interface\" in request.GET or \"vminterface\" in request.GET:",
                "// vulnerable line: 775: _, error_msg = retrieve_interface_or_vminterface_from_request(request)",
                "// vulnerable line: 776: if error_msg:",
                "// vulnerable line: 777: messages.warning(request, error_msg)",
                "// vulnerable line: 778: return redirect(self.get_return_url(request), default_return_url=\"ipam:ipaddress_add\")",
                "// Line 779: ",
                "// Line 780:         return super().dispatch(request, *args, **kwargs)",
                "// Line 781: ",
                "// Line 782:     def successful_post(self, request, obj, created, _logger):",
                "// Line 783:         \"\"\"Check for data that will be invalid in a future Nautobot release and warn the user if found.\"\"\"",
                "// Line 784:         # 3.0 TODO: remove this check after enabling strict enforcement of the equivalent logic in IPAddress.save()",
                "// Line 785:         if obj.parent.type == choices.PrefixTypeChoices.TYPE_CONTAINER:",
                "// Line 786:             warning_msg = format_html(",
                "// Line 787:                 '<p>This <a href=\"{}#ipaddress-parenting-concrete-relationship\">will be considered invalid data</a> '",
                "// Line 788:                 \"in a future release.</p>\",",
                "// Line 851:         return obj",
                "// Line 852: ",
                "// Line 853: ",
                "// Line 854: # 2.0 TODO: Standardize or remove this view in exchange for a `NautobotViewSet` method",
                "// Line 855: class IPAddressAssignView(view_mixins.GetReturnURLMixin, generic.ObjectView):",
                "// Line 856:     \"\"\"",
                "// Line 857:     Search for IPAddresses to be assigned to an Interface.",
                "// Line 858:     \"\"\"",
                "// Line 859: ",
                "// Line 860:     queryset = IPAddress.objects.all()",
                "// vulnerable line: 861: default_return_url = \"ipam:ipaddress_add\"",
                "// Line 862: ",
                "// Line 863:     def dispatch(self, request, *args, **kwargs):",
                "// vulnerable line: 864: # Redirect user if an interface has not been provided",
                "// vulnerable line: 865: if \"interface\" not in request.GET and \"vminterface\" not in request.GET:",
                "// vulnerable line: 866: return redirect(self.get_return_url(request))",
                "// Line 867: ",
                "// vulnerable line: 868: _, error_msg = retrieve_interface_or_vminterface_from_request(request)",
                "// vulnerable line: 869: if error_msg:",
                "// vulnerable line: 870: messages.warning(request, error_msg)",
                "// vulnerable line: 871: return redirect(self.get_return_url(request))",
                "// Line 872: ",
                "// Line 873:         return super().dispatch(request, *args, **kwargs)",
                "// Line 874: ",
                "// Line 875:     def get(self, request, *args, **kwargs):",
                "// Line 876:         interface, _ = retrieve_interface_or_vminterface_from_request(request)",
                "// Line 877:         form = forms.IPAddressAssignForm(data=request.GET)",
                "// Line 878: ",
                "// Line 879:         table = None",
                "// Line 880:         if request.GET.get(\"q\"):",
                "// Line 881:             addresses = (",
                "// Line 905:                 \"table\": table,",
                "// Line 906:             },",
                "// Line 907:         )",
                "// Line 908: ",
                "// Line 909:     def post(self, request):",
                "// Line 910:         interface, _ = retrieve_interface_or_vminterface_from_request(request)",
                "// Line 911: ",
                "// Line 912:         if pks := request.POST.getlist(\"pk\"):",
                "// Line 913:             ip_addresses = IPAddress.objects.restrict(request.user, \"view\").filter(pk__in=pks)",
                "// Line 914:             interface.ip_addresses.add(*ip_addresses)",
                "// vulnerable line: 915: return redirect(self.get_return_url(request))",
                "// Line 916: ",
                "// Line 917:         return render(",
                "// Line 918:             request,",
                "// Line 919:             \"ipam/ipaddress_assign.html\",",
                "// Line 920:             {",
                "// Line 921:                 \"return_url\": self.get_return_url(request),",
                "// Line 922:             },",
                "// Line 923:         )",
                "// Line 924: ",
                "// Line 925: ",
                "// Line 954:                 request=request,",
                "// Line 955:                 template_name=self.template_name,",
                "// Line 956:                 context={",
                "// Line 957:                     \"queryset\": queryset,",
                "// Line 958:                     \"return_url\": self.get_return_url(request),",
                "// Line 959:                 },",
                "// Line 960:             )",
                "// Line 961:         else:",
                "// Line 962:             msg = \"No additional duplicate IPs found.\"",
                "// Line 963:             messages.info(request, msg)",
                "// vulnerable line: 964: return redirect(self.get_return_url(request))",
                "// Line 965: ",
                "// Line 966:     def get(self, request):",
                "// Line 967:         return self.find_duplicate_ips(request)",
                "// Line 968: ",
                "// Line 969:     def post(self, request):",
                "// Line 970:         collapsed_ips = IPAddress.objects.filter(pk__in=request.POST.getlist(\"pk\"))",
                "// Line 971:         merged_attributes = request.POST",
                "// Line 972:         operation_invalid = len(collapsed_ips) < 2",
                "// Line 973:         # Check if there are at least two IP addresses for us to merge",
                "// Line 974:         # and if the skip button is pressed instead.",
                "// Line 1048:                         ip_to_interface_assignments.append(updated_attributes)",
                "// Line 1049:                     # Update Service m2m field with IPAddresses",
                "// Line 1050:                     services = list(Service.objects.filter(ip_addresses__in=collapsed_ips).values_list(\"pk\", flat=True))",
                "// Line 1051:                     # Delete Collapsed IPs",
                "// Line 1052:                     try:",
                "// Line 1053:                         _, deleted_info = collapsed_ips.delete()",
                "// Line 1054:                         deleted_count = deleted_info[IPAddress._meta.label]",
                "// Line 1055:                     except ProtectedError as e:",
                "// Line 1056:                         logger.info(\"Caught ProtectedError while attempting to delete objects\")",
                "// Line 1057:                         handle_protectederror(collapsed_ips, request, e)",
                "// vulnerable line: 1058: return redirect(self.get_return_url(request))",
                "// Line 1059:                     msg = format_html(",
                "// Line 1060:                         'Merged {} {} into <a href=\"{}\">{}</a>',",
                "// Line 1061:                         deleted_count,",
                "// Line 1062:                         self.queryset.model._meta.verbose_name,",
                "// Line 1063:                         merged_ip.get_absolute_url(),",
                "// Line 1064:                         merged_ip,",
                "// Line 1065:                     )",
                "// Line 1066:                     logger_msg = f\"Merged {deleted_count} {self.queryset.model._meta.verbose_name} into {merged_ip}\"",
                "// Line 1067:                     merged_ip.validated_save()",
                "// Line 1068:                     # After some testing"
            ]
        },
        {
            "filename_of_changes": "views.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "0",
            "number_of_lines_deleted_vulnerable_to_cve": "12",
            "Code_with_highlighted_vulnerability_lines": [
                "// vulnerable line: 1: from rest_framework.routers import APIRootView",
                "// Line 2: ",
                "// Line 3: from nautobot.circuits.models import Circuit",
                "// Line 4: from nautobot.core.models.querysets import count_related",
                "// Line 5: from nautobot.dcim.models import Device, Rack",
                "// Line 6: from nautobot.extras.api.views import NautobotModelViewSet",
                "// Line 7: from nautobot.ipam.models import IPAddress, Prefix, VLAN, VRF",
                "// Line 8: from nautobot.tenancy import filters",
                "// Line 9: from nautobot.tenancy.models import Tenant, TenantGroup",
                "// Line 10: from nautobot.virtualization.models import VirtualMachine",
                "// Line 11: ",
                "// Line 12: from . import serializers",
                "// Line 13: ",
                "// Line 14: ",
                "// vulnerable line: 15: class TenancyRootView(APIRootView):",
                "// vulnerable line: 16: \"\"\"",
                "// vulnerable line: 17: Tenancy API root view",
                "// vulnerable line: 18: \"\"\"",
                "// Line 19: ",
                "// vulnerable line: 20: def get_view_name(self):",
                "// vulnerable line: 21: return \"Tenancy\"",
                "// Line 22: ",
                "// Line 23: ",
                "// Line 24: #",
                "// Line 25: # Tenant Groups",
                "// Line 26: #",
                "// Line 27: ",
                "// Line 28: ",
                "// Line 29: class TenantGroupViewSet(NautobotModelViewSet):",
                "// Line 30:     queryset = TenantGroup.objects.annotate(tenant_count=count_related(Tenant, \"tenant_group\"))",
                "// Line 31:     serializer_class = serializers.TenantGroupSerializer"
            ]
        },
        {
            "filename_of_changes": "views.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "8",
            "number_of_lines_deleted_vulnerable_to_cve": "8",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: import logging",
                "// Line 2: ",
                "// Line 3: from django.contrib import messages",
                "// Line 4: from django.contrib.auth import (",
                "// Line 5:     BACKEND_SESSION_KEY,",
                "// Line 6:     login as auth_login,",
                "// Line 7:     logout as auth_logout,",
                "// Line 8:     update_session_auth_hash,",
                "// Line 9: )",
                "// vulnerable line: 10: from django.contrib.auth.mixins import LoginRequiredMixin",
                "// Line 11: from django.http import HttpResponseForbidden, HttpResponseRedirect",
                "// Line 12: from django.shortcuts import get_object_or_404, redirect, render",
                "// Line 13: from django.urls import reverse",
                "// Line 14: from django.utils.decorators import method_decorator",
                "// Line 15: from django.utils.encoding import iri_to_uri",
                "// Line 16: from django.utils.http import url_has_allowed_host_and_scheme",
                "// Line 17: from django.views.decorators.debug import sensitive_post_parameters",
                "// Line 18: from django.views.generic import View",
                "// Line 19: ",
                "// Line 20: from nautobot.core.forms import ConfirmationForm",
                "// Line 111: ",
                "// Line 112: #",
                "// Line 113: # User profiles",
                "// Line 114: #",
                "// Line 115: ",
                "// Line 116: ",
                "// Line 117: def is_django_auth_user(request):",
                "// Line 118:     return request.session.get(BACKEND_SESSION_KEY, None) == \"nautobot.core.authentication.ObjectPermissionBackend\"",
                "// Line 119: ",
                "// Line 120: ",
                "// vulnerable line: 121: class ProfileView(LoginRequiredMixin, View):",
                "// Line 122:     template_name = \"users/profile.html\"",
                "// Line 123: ",
                "// Line 124:     def get(self, request):",
                "// Line 125:         return render(",
                "// Line 126:             request,",
                "// Line 127:             self.template_name,",
                "// Line 128:             {",
                "// Line 129:                 \"is_django_auth_user\": is_django_auth_user(request),",
                "// Line 130:                 \"active_tab\": \"profile\",",
                "// Line 131:             },",
                "// Line 132:         )",
                "// Line 133: ",
                "// Line 134: ",
                "// vulnerable line: 135: class UserConfigView(LoginRequiredMixin, View):",
                "// Line 136:     template_name = \"users/preferences.html\"",
                "// Line 137: ",
                "// Line 138:     def get(self, request):",
                "// Line 139:         return render(",
                "// Line 140:             request,",
                "// Line 141:             self.template_name,",
                "// Line 142:             {",
                "// Line 143:                 \"preferences\": request.user.all_config(),",
                "// Line 144:                 \"active_tab\": \"preferences\",",
                "// Line 145:                 \"is_django_auth_user\": is_django_auth_user(request),",
                "// Line 153:         # Delete selected preferences",
                "// Line 154:         for key in request.POST.getlist(\"pk\"):",
                "// Line 155:             if key in data:",
                "// Line 156:                 user.clear_config(key)",
                "// Line 157:         user.save()",
                "// Line 158:         messages.success(request, \"Your preferences have been updated.\")",
                "// Line 159: ",
                "// Line 160:         return redirect(\"user:preferences\")",
                "// Line 161: ",
                "// Line 162: ",
                "// vulnerable line: 163: class ChangePasswordView(LoginRequiredMixin, View):",
                "// Line 164:     template_name = \"users/change_password.html\"",
                "// Line 165: ",
                "// Line 166:     RESTRICTED_NOTICE = \"Remotely authenticated user credentials cannot be changed within Nautobot.\"",
                "// Line 167: ",
                "// Line 168:     def get(self, request):",
                "// Line 169:         # Non-Django authentication users cannot change their password here",
                "// Line 170:         if not is_django_auth_user(request):",
                "// Line 171:             messages.warning(",
                "// Line 172:                 request,",
                "// Line 173:                 self.RESTRICTED_NOTICE,",
                "// Line 211:                 \"is_django_auth_user\": is_django_auth_user(request),",
                "// Line 212:             },",
                "// Line 213:         )",
                "// Line 214: ",
                "// Line 215: ",
                "// Line 216: #",
                "// Line 217: # API tokens",
                "// Line 218: #",
                "// Line 219: ",
                "// Line 220: ",
                "// vulnerable line: 221: class TokenListView(LoginRequiredMixin, View):",
                "// Line 222:     def get(self, request):",
                "// Line 223:         tokens = Token.objects.filter(user=request.user)",
                "// Line 224: ",
                "// Line 225:         return render(",
                "// Line 226:             request,",
                "// Line 227:             \"users/api_tokens.html\",",
                "// Line 228:             {",
                "// Line 229:                 \"tokens\": tokens,",
                "// Line 230:                 \"active_tab\": \"api_tokens\",",
                "// Line 231:                 \"is_django_auth_user\": is_django_auth_user(request),",
                "// Line 232:             },",
                "// Line 233:         )",
                "// Line 234: ",
                "// Line 235: ",
                "// vulnerable line: 236: class TokenEditView(LoginRequiredMixin, View):",
                "// Line 237:     def get(self, request, pk=None):",
                "// Line 238:         if pk is not None:",
                "// Line 239:             if not request.user.has_perm(\"users.change_token\"):",
                "// Line 240:                 return HttpResponseForbidden()",
                "// Line 241:             token = get_object_or_404(Token.objects.filter(user=request.user), pk=pk)",
                "// Line 242:         else:",
                "// Line 243:             if not request.user.has_perm(\"users.add_token\"):",
                "// Line 244:                 return HttpResponseForbidden()",
                "// Line 245:             token = Token(user=request.user)",
                "// Line 246: ",
                "// Line 285:             {",
                "// Line 286:                 \"obj\": token,",
                "// Line 287:                 \"obj_type\": token._meta.verbose_name,",
                "// Line 288:                 \"form\": form,",
                "// Line 289:                 \"return_url\": reverse(\"user:token_list\"),",
                "// Line 290:                 \"editing\": token.present_in_database,",
                "// Line 291:             },",
                "// Line 292:         )",
                "// Line 293: ",
                "// Line 294: ",
                "// vulnerable line: 295: class TokenDeleteView(LoginRequiredMixin, View):",
                "// Line 296:     def get(self, request, pk):",
                "// Line 297:         token = get_object_or_404(Token.objects.filter(user=request.user), pk=pk)",
                "// Line 298:         initial_data = {",
                "// Line 299:             \"return_url\": reverse(\"user:token_list\"),",
                "// Line 300:         }",
                "// Line 301:         form = ConfirmationForm(initial=initial_data)",
                "// Line 302: ",
                "// Line 303:         return render(",
                "// Line 304:             request,",
                "// Line 305:             \"generic/object_delete.html\",",
                "// Line 329:                 \"return_url\": reverse(\"user:token_list\"),",
                "// Line 330:             },",
                "// Line 331:         )",
                "// Line 332: ",
                "// Line 333: ",
                "// Line 334: #",
                "// Line 335: # Advanced Profile Settings",
                "// Line 336: #",
                "// Line 337: ",
                "// Line 338: ",
                "// vulnerable line: 339: class AdvancedProfileSettingsEditView(LoginRequiredMixin, View):",
                "// Line 340:     template_name = \"users/advanced_settings_edit.html\"",
                "// Line 341: ",
                "// Line 342:     def get(self, request):",
                "// Line 343:         silk_record_requests = request.session.get(\"silk_record_requests\", False)",
                "// Line 344:         form = AdvancedProfileSettingsForm(initial={\"request_profiling\": silk_record_requests})",
                "// Line 345: ",
                "// Line 346:         return render(",
                "// Line 347:             request,",
                "// Line 348:             self.template_name,",
                "// Line 349:             {"
            ]
        },
        {
            "filename_of_changes": "views.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "0",
            "number_of_lines_deleted_vulnerable_to_cve": "12",
            "Code_with_highlighted_vulnerability_lines": [
                "// vulnerable line: 1: from rest_framework.routers import APIRootView",
                "// Line 2: ",
                "// Line 3: from nautobot.core.models.querysets import count_related",
                "// Line 4: from nautobot.dcim.models import Device",
                "// Line 5: from nautobot.extras.api.views import (",
                "// Line 6:     ConfigContextQuerySetMixin,",
                "// Line 7:     ModelViewSet,",
                "// Line 8:     NautobotModelViewSet,",
                "// Line 9:     NotesViewSetMixin,",
                "// Line 10: )",
                "// Line 11: from nautobot.virtualization import filters",
                "// Line 13:     Cluster,",
                "// Line 14:     ClusterGroup,",
                "// Line 15:     ClusterType,",
                "// Line 16:     VirtualMachine,",
                "// Line 17:     VMInterface,",
                "// Line 18: )",
                "// Line 19: ",
                "// Line 20: from . import serializers",
                "// Line 21: ",
                "// Line 22: ",
                "// vulnerable line: 23: class VirtualizationRootView(APIRootView):",
                "// vulnerable line: 24: \"\"\"",
                "// vulnerable line: 25: Virtualization API root view",
                "// vulnerable line: 26: \"\"\"",
                "// Line 27: ",
                "// vulnerable line: 28: def get_view_name(self):",
                "// vulnerable line: 29: return \"Virtualization\"",
                "// Line 30: ",
                "// Line 31: ",
                "// Line 32: #",
                "// Line 33: # Clusters",
                "// Line 34: #",
                "// Line 35: ",
                "// Line 36: ",
                "// Line 37: class ClusterTypeViewSet(NautobotModelViewSet):",
                "// Line 38:     queryset = ClusterType.objects.annotate(cluster_count=count_related(Cluster, \"cluster_type\"))",
                "// Line 39:     serializer_class = serializers.ClusterTypeSerializer"
            ]
        }
    ]
}