{
    "cve_id": "CVE-2024-28190",
    "cve_description": "Contao is an open source content management system. Starting in version 4.0.0 and prior to version 4.13.40 and 5.3.4, users can inject malicious code in filenames when uploading files (back end and front end), which is then executed in tooltips and popups in the back end. Contao versions 4.13.40 and 5.3.4 have a patch for this issue. As a workaround, remove upload fields from frontend forms and disable uploads for untrusted back end users.",
    "cve_publish_date": "2024-04-09T14:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Merge pull request from GHSA-v24p-7p4j-qvvf\n\n* Encode file names in tooltips and titles\n\n* Remove ampersands in sanitizeFileName()\n\n* Revert \"Remove ampersands in sanitizeFileName()\"\n\nThis reverts commit 81d06fe1ba46a969f5eacfa1420a8519379e0262.\n\n---------\n\nCo-authored-by: Leo Feyer <1192057+leofeyer@users.noreply.github.com>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "DC_Folder.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 2723:             // Check whether the folder is public",
                "// Line 2724:             if ($protected === true && \\in_array('.public', $content) && !is_dir(Path::join($folders[$f], '.public')))",
                "// Line 2725:             {",
                "// Line 2726:                 $protected = false;",
                "// Line 2727:             }",
                "// Line 2728: ",
                "// Line 2729:             $folderImg = $protected ? 'folderCP.svg' : 'folderC.svg';",
                "// Line 2730:             $folderAlt = $protected ? $GLOBALS['TL_LANG']['MSC']['folderCP'] : $GLOBALS['TL_LANG']['MSC']['folderC'];",
                "// Line 2731: ",
                "// Line 2732:             // Add the current folder",
                "// vulnerable line: 2733: $strFolderNameEncoded = StringUtil::convertEncoding(StringUtil::specialchars(basename($currentFolder)), System::getContainer()->getParameter('kernel.charset'));",
                "// Line 2734:             $return .= Image::getHtml($folderImg, $folderAlt) . ' <a href=\"' . $this->addToUrl('fn=' . $currentEncoded) . '\" title=\"' . StringUtil::specialchars($GLOBALS['TL_LANG']['MSC']['selectNode']) . '\"><strong>' . $strFolderNameEncoded . '</strong></a></div> <div class=\"tl_right\">';",
                "// Line 2735: ",
                "// Line 2736:             // Paste buttons",
                "// Line 2737:             if ($arrClipboard !== false && Input::get('act') != 'select')",
                "// Line 2738:             {",
                "// Line 2739:                 $labelPasteInto = $GLOBALS['TL_LANG'][$this->strTable]['pasteinto'] ?? $GLOBALS['TL_LANG']['DCA']['pasteinto'];",
                "// Line 2740:                 $imagePasteInto = Image::getHtml('pasteinto.svg', sprintf($labelPasteInto[1], $currentEncoded));",
                "// Line 2741: ",
                "// Line 2742:                 if (\\in_array($arrClipboard['mode'], array('copy', 'cut')) && (($arrClipboard['mode'] == 'cut' && \\dirname($arrClipboard['id']) == $currentFolder) || preg_match('#^' . preg_quote(rawurldecode($arrClipboard['id']), '#') . '(/|$)#i', $currentFolder)))",
                "// Line 2743:                 {",
                "// Line 2846:                             $thumbnail .= ' ' . $this->getPreviewImage(rawurldecode($currentEncoded), true);",
                "// Line 2847:                         }",
                "// Line 2848:                     }",
                "// Line 2849:                     catch (RuntimeException $e)",
                "// Line 2850:                     {",
                "// Line 2851:                         $thumbnail .= '<br><p class=\"preview-image broken-image\">Broken image!</p>';",
                "// Line 2852:                     }",
                "// Line 2853:                 }",
                "// Line 2854:             }",
                "// Line 2855: ",
                "// vulnerable line: 2856: $strFileNameEncoded = StringUtil::convertEncoding(StringUtil::specialchars(basename($currentFile)), System::getContainer()->getParameter('kernel.charset'));",
                "// Line 2857:             $iconAlt = sprintf($GLOBALS['TL_LANG']['MSC']['typeOfFile'], strtoupper($objFile->extension));",
                "// Line 2858: ",
                "// Line 2859:             // No popup links for protected files and templates (see #700)",
                "// Line 2860:             if ($blnProtected || $this->strTable == 'tl_templates')",
                "// Line 2861:             {",
                "// Line 2862:                 $return .= Image::getHtml($objFile->icon, $iconAlt) . ' ' . $strFileNameEncoded . $thumbnail . '</div> <div class=\"tl_right\">';",
                "// Line 2863:             }",
                "// Line 2864:             else",
                "// Line 2865:             {",
                "// Line 2866:                 $return .= '<a href=\"' . $currentEncoded . '\" title=\"' . StringUtil::specialchars($GLOBALS['TL_LANG']['MSC']['view']) . '\" target=\"_blank\">' . Image::getHtml($objFile->icon, $iconAlt) . '</a> ' . $strFileNameEncoded . $thumbnail . '</div> <div class=\"tl_right\">';"
            ]
        }
    ]
}