{
    "cve_id": "CVE-2024-27304",
    "cve_description": "pgx is a PostgreSQL driver and toolkit for Go. SQL injection can occur if an attacker can cause a single query or bind message to exceed 4 GB in size. An integer overflow in the calculated message size can cause the one large message to be sent as multiple messages under the attacker's control. The problem is resolved in v4.18.2 and v5.5.4. As a workaround, reject user input large enough to cause a single query or bind message to exceed 4 GB in size.",
    "cve_publish_date": "2024-03-06T19:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "SQL sanitizer wraps arguments in parentheses\n\npgx v5 was not vulnerable to CVE-2024-27289 do to how the sanitizer was\nbeing called. But the sanitizer itself still had the underlying issue.\nThis commit ports the fix from pgx v4 to v5 to ensure that the issue\ndoes not emerge if pgx uses the sanitizer differently in the future.",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "sanitize.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "sanitize_test.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "19",
            "number_of_lines_deleted_vulnerable_to_cve": "9",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 130: ",
                "// Line 131: func TestQuerySanitize(t *testing.T) {",
                "// Line 132:     successfulTests := []struct {",
                "// Line 133:         query    sanitize.Query",
                "// Line 134:         args     []any",
                "// Line 135:         expected string",
                "// Line 136:     }{",
                "// Line 137:         {",
                "// Line 138:             query:    sanitize.Query{Parts: []sanitize.Part{\"select 42\"}},",
                "// Line 139:             args:     []any{},",
                "// vulnerable line: 140: expected: `select 42`,",
                "// Line 141:         },",
                "// Line 142:         {",
                "// Line 143:             query:    sanitize.Query{Parts: []sanitize.Part{\"select \", 1}},",
                "// Line 144:             args:     []any{int64(42)},",
                "// vulnerable line: 145: expected: `select 42`,",
                "// Line 146:         },",
                "// Line 147:         {",
                "// Line 148:             query:    sanitize.Query{Parts: []sanitize.Part{\"select \", 1}},",
                "// Line 149:             args:     []any{float64(1.23)},",
                "// vulnerable line: 150: expected: `select 1.23`,",
                "// Line 151:         },",
                "// Line 152:         {",
                "// Line 153:             query:    sanitize.Query{Parts: []sanitize.Part{\"select \", 1}},",
                "// Line 154:             args:     []any{true},",
                "// vulnerable line: 155: expected: `select true`,",
                "// Line 156:         },",
                "// Line 157:         {",
                "// Line 158:             query:    sanitize.Query{Parts: []sanitize.Part{\"select \", 1}},",
                "// Line 159:             args:     []any{[]byte{0, 1, 2, 3, 255}},",
                "// Line 160:             expected: `select '\u0000010203ff'`,",
                "// Line 161:         },",
                "// Line 162:         {",
                "// Line 163:             query:    sanitize.Query{Parts: []sanitize.Part{\"select \", 1}},",
                "// Line 164:             args:     []any{nil},",
                "// vulnerable line: 165: expected: `select null`,",
                "// Line 166:         },",
                "// Line 167:         {",
                "// Line 168:             query:    sanitize.Query{Parts: []sanitize.Part{\"select \", 1}},",
                "// Line 169:             args:     []any{\"foobar\"},",
                "// vulnerable line: 170: expected: `select 'foobar'`,",
                "// Line 171:         },",
                "// Line 172:         {",
                "// Line 173:             query:    sanitize.Query{Parts: []sanitize.Part{\"select \", 1}},",
                "// Line 174:             args:     []any{\"foo'bar\"},",
                "// vulnerable line: 175: expected: `select 'foo''bar'`,",
                "// Line 176:         },",
                "// Line 177:         {",
                "// Line 178:             query:    sanitize.Query{Parts: []sanitize.Part{\"select \", 1}},",
                "// Line 179:             args:     []any{`foo'bar`},",
                "// vulnerable line: 180: expected: `select 'foo''bar'`,",
                "// Line 181:         },",
                "// Line 182:         {",
                "// Line 183:             query:    sanitize.Query{Parts: []sanitize.Part{\"insert \", 1}},",
                "// Line 184:             args:     []any{time.Date(2020, time.March, 1, 23, 59, 59, 999999999, time.UTC)},",
                "// vulnerable line: 185: expected: `insert '2020-03-01 23:59:59.999999Z'`,",
                "// Line 186:         },",
                "// Line 187:     }",
                "// Line 188: ",
                "// Line 189:     for i, tt := range successfulTests {",
                "// Line 190:         actual, err := tt.query.Sanitize(tt.args...)",
                "// Line 191:         if err != nil {",
                "// Line 192:             t.Errorf(\"%d. %v\", i, err)",
                "// Line 193:             continue",
                "// Line 194:         }",
                "// Line 195: "
            ]
        }
    ]
}