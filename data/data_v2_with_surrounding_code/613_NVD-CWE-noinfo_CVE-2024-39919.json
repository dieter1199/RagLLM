{
    "cve_id": "CVE-2024-39919",
    "cve_description": "@jmondi/url-to-png is an open source URL to PNG utility featuring parallel rendering using Playwright for screenshots and with storage caching via Local, S3, or CouchDB. The package includes an `ALLOW_LIST` where the host can specify which services the user is permitted to capture screenshots of. By default, capturing screenshots of web services running on localhost, 127.0.0.1, or the [::] is allowed. If someone hosts this project on a server, users could then capture screenshots of other web services running locally. This issue has been addressed in version 2.1.1 with the addition of a blocklist. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "cve_publish_date": "2024-07-15T20:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "block list",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "allow_list.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: import { Context } from \"hono\";",
                "// Line 2: import { HTTPException } from \"hono/http-exception\";",
                "// Line 3: ",
                "// Line 4: import { AppEnv } from \"../app.js\";",
                "// Line 5: import { logger } from \"../lib/logger.js\";",
                "// Line 6: ",
                "// Line 7: export function handleAllowListMiddleware(allowList: string[]) {",
                "// Line 8:   return async (c: Context<AppEnv>, next: () => Promise<void>) => {",
                "// Line 9:     const input = c.get(\"input\");",
                "// vulnerable line: 10: const isValidDomain = allowList.includes(new URL(input.url).host);",
                "// Line 11: ",
                "// Line 12:     if (!isValidDomain) {",
                "// Line 13:       logger.warn(`Blocked request to ${input.url} - not in allowlist`);",
                "// Line 14:       throw new HTTPException(400, { message: \"Invalid URL Requested\" });",
                "// Line 15:     }",
                "// Line 16: ",
                "// Line 17:     await next();",
                "// Line 18:   };",
                "// Line 19: }"
            ]
        },
        {
            "filename_of_changes": "app.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "9",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: import { StringEncrypter } from \"@jmondi/string-encrypt-decrypt\";",
                "// Line 2: import { Hono } from \"hono\";",
                "// Line 3: import { secureHeaders } from \"hono/secure-headers\";",
                "// Line 4: import { StatusCode } from \"hono/utils/http-status\";",
                "// Line 5: ",
                "// Line 6: import { BrowserPool } from \"./lib/browser_pool.js\";",
                "// Line 7: import { ImageRenderInterface } from \"./lib/image_render.js\";",
                "// Line 8: import { logger } from \"./lib/logger.js\";",
                "// Line 9: import { PlainConfigSchema } from \"./lib/schema.js\";",
                "// Line 10: import { ImageStorage } from \"./lib/storage/_base.js\";",
                "// vulnerable line: 11: import { formatAllowList } from \"./lib/utils.js\";",
                "// Line 12: import { handleAllowListMiddleware } from \"./middlewares/allow_list.js\";",
                "// Line 13: import { handleExtractQueryParamsMiddleware } from \"./middlewares/extract_query_params.js\";",
                "// Line 14: import { getIndex } from \"./routes/index.js\";",
                "// Line 15: ",
                "// Line 16: export type Variables = {",
                "// Line 17:   input: PlainConfigSchema;",
                "// Line 18:   imageId: string;",
                "// Line 19: };",
                "// Line 20: export type AppEnv = { Variables: Variables };",
                "// Line 21: ",
                "// Line 51:     let status: StatusCode = 500;",
                "// Line 52:     if (\"status\" in err && typeof err.status === \"number\") {",
                "// Line 53:       status = err.status as StatusCode;",
                "// Line 54:     }",
                "// Line 55:     return c.json({ message: err.message }, status);",
                "// Line 56:   });",
                "// Line 57: ",
                "// Line 58:   app.use(\"/\", handleExtractQueryParamsMiddleware(stringEncrypter));",
                "// Line 59: ",
                "// Line 60:   if (process.env.ALLOW_LIST && process.env.ALLOW_LIST.trim() !== \"\") {",
                "// vulnerable line: 61: const allowList = formatAllowList(process.env.ALLOW_LIST);",
                "// Line 62:     logger.info(`Allowed Domains: ${allowList.join(\", \")}`);",
                "// Line 63:     app.use(\"/\", handleAllowListMiddleware(allowList));",
                "// Line 64:   }",
                "// Line 65: ",
                "// Line 66:   app.get(\"/\", getIndex(imageStorageService, imageRenderService));",
                "// Line 67: ",
                "// Line 68:   return app;",
                "// Line 69: }"
            ]
        },
        {
            "filename_of_changes": "block_list.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "22",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "utils.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// vulnerable line: 1: export function formatAllowList(allowList: string): string[] {",
                "// Line 2:   return allowList.split(\",\").map(url => {",
                "// Line 3:     url = url.trim().replace(/https?:\\/\\//g, \"\");",
                "// Line 4:     return new URL(`http://${url}`).host;",
                "// Line 5:   });",
                "// Line 6: }",
                "// Line 7: ",
                "// Line 8: export function configToString(configAPI: URLSearchParams) {",
                "// Line 9:   let result = \"\";",
                "// Line 10:   for (const [key, value] of configAPI) {",
                "// Line 11:     if (key === \"url\") continue;"
            ]
        }
    ]
}