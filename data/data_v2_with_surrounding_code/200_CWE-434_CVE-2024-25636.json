{
    "cve_id": "CVE-2024-25636",
    "cve_description": "Misskey is an open source, decentralized social media platform with ActivityPub support. Prior to version 2024.2.0, when fetching remote Activity Streams objects, Misskey doesn't check that the response from the remote server has a `Content-Type` header value of the Activity Streams media type, which allows a threat actor to upload a crafted Activity Streams document to a remote server and make a Misskey instance fetch it, if the remote server accepts arbitrary user uploads. The vulnerability allows a threat actor to impersonate and take over an account on a remote server that satisfies all of the following properties: allows the threat actor to register an account; accepts arbitrary user-uploaded documents and places them on the same domain as legitimate Activity Streams actors; and serves user-uploaded document in response to requests with an `Accept` header value of the Activity Streams media type. Version 2024.2.0 contains a patch for the issue.",
    "cve_publish_date": "2024-02-19T20:15Z",
    "cwe_id": "CWE-434",
    "cwe_name": "Unrestricted Upload of File with Dangerous Type",
    "cwe_description": "The product allows the upload or transfer of dangerous file types that are automatically processed within its environment.",
    "commit_message": "Merge pull request from GHSA-qqrm-9grj-6v32\n\n* maybe ok\n\n* fix\n\n* test wip\n\n* :v:\n\n* fix\n\n* if (res.ok)\n\n* validateContentTypeSetAsJsonLD\n\n* 条件を考慮し直す\n\n* その他の+json接尾辞が付いているメディアタイプも受け容れる\n\n* https://github.com/misskey-dev/misskey-ghsa-qqrm-9grj-6v32/pull/1#discussion_r1490999009\n\n* add `; profile=\"https://www.w3.org/ns/activitystreams\"`\n\n* application/ld+json;",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "ApRequestService.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "5",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 63:         return `SHA-256=${crypto.createHash('sha256').update(body).digest('base64')}`;",
                "// Line 64:     }",
                "// Line 65: ",
                "// Line 66:     static createSignedGet(args: { key: PrivateKey, url: string, additionalHeaders: Record<string, string> }): Signed {",
                "// Line 67:         const u = new URL(args.url);",
                "// Line 68: ",
                "// Line 69:         const request: Request = {",
                "// Line 70:             url: u.href,",
                "// Line 71:             method: 'GET',",
                "// Line 72:             headers: this.#objectAssignWithLcKey({",
                "// vulnerable line: 73: 'Accept': 'application/activity+json, application/ld+json',",
                "// Line 74:                 'Date': new Date().toUTCString(),",
                "// Line 75:                 'Host': new URL(args.url).host,",
                "// Line 76:             }, args.additionalHeaders),",
                "// Line 77:         };",
                "// Line 78: ",
                "// Line 79:         const result = this.#signToRequest(request, args.key, ['(request-target)', 'date', 'host', 'accept']);",
                "// Line 80: ",
                "// Line 81:         return {",
                "// Line 82:             request,",
                "// Line 83:             signingString: result.signingString,"
            ]
        },
        {
            "filename_of_changes": "ApResolverService.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 98:         if (this.utilityService.isBlockedHost(meta.blockedHosts, host)) {",
                "// Line 99:             throw new Error('Instance is blocked');",
                "// Line 100:         }",
                "// Line 101: ",
                "// Line 102:         if (this.config.signToActivityPubGet && !this.user) {",
                "// Line 103:             this.user = await this.instanceActorService.getInstanceActor();",
                "// Line 104:         }",
                "// Line 105: ",
                "// Line 106:         const object = (this.user",
                "// Line 107:             ? await this.apRequestService.signedGet(value, this.user) as IObject",
                "// vulnerable line: 108: : await this.httpRequestService.getJson(value, 'application/activity+json, application/ld+json')) as IObject;",
                "// Line 109: ",
                "// Line 110:         if (",
                "// Line 111:             Array.isArray(object['@context']) ?",
                "// Line 112:                 !(object['@context'] as unknown[]).includes('https://www.w3.org/ns/activitystreams') :",
                "// Line 113:                 object['@context'] !== 'https://www.w3.org/ns/activitystreams'",
                "// Line 114:         ) {",
                "// Line 115:             throw new Error('invalid response');",
                "// Line 116:         }",
                "// Line 117: ",
                "// Line 118:         return object;"
            ]
        },
        {
            "filename_of_changes": "LdSignatureService.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "5",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 126:     @bindThis",
                "// Line 127:     private async fetchDocument(url: string): Promise<JsonLd> {",
                "// Line 128:         const json = await this.httpRequestService.send(",
                "// Line 129:             url,",
                "// Line 130:             {",
                "// Line 131:                 headers: {",
                "// Line 132:                     Accept: 'application/ld+json, application/json',",
                "// Line 133:                 },",
                "// Line 134:                 timeout: this.loderTimeout,",
                "// Line 135:             },",
                "// vulnerable line: 136: { throwErrorWhenResponseNotOk: false },",
                "// Line 137:         ).then(res => {",
                "// Line 138:             if (!res.ok) {",
                "// Line 139:                 throw new Error(`${res.status} ${res.statusText}`);",
                "// Line 140:             } else {",
                "// Line 141:                 return res.json();",
                "// Line 142:             }",
                "// Line 143:         });",
                "// Line 144: ",
                "// Line 145:         return json as JsonLd;",
                "// Line 146:     }"
            ]
        },
        {
            "filename_of_changes": "activitypub.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 196:             resolver.register(actor.id, actor);",
                "// Line 197: ",
                "// Line 198:             const user = await personService.createPerson(actor.id, resolver);",
                "// Line 199: ",
                "// Line 200:             assert.strictEqual(user.name, null);",
                "// Line 201:         });",
                "// Line 202:     });",
                "// Line 203: ",
                "// Line 204:     describe('Renderer', () => {",
                "// Line 205:         test('Render an announce with visibility: followers', () => {",
                "// vulnerable line: 206: rendererService.renderAnnounce(null, {",
                "// Line 207:                 id: genAidx(Date.now()),",
                "// Line 208:                 visibility: 'followers',",
                "// Line 209:             } as MiNote);",
                "// Line 210:         });",
                "// Line 211:     });",
                "// Line 212: ",
                "// Line 213:     describe('Featured', () => {",
                "// Line 214:         test('Fetch featured notes from IActor', async () => {",
                "// Line 215:             const actor = createRandomActor();",
                "// Line 216:             actor.featured = `${actor.id}/collections/featured`;"
            ]
        },
        {
            "filename_of_changes": "utils.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "22",
            "number_of_lines_deleted_vulnerable_to_cve": "14",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 9: import { randomUUID } from 'node:crypto';",
                "// Line 10: import { inspect } from 'node:util';",
                "// Line 11: import WebSocket, { ClientOptions } from 'ws';",
                "// Line 12: import fetch, { File, RequestInit } from 'node-fetch';",
                "// Line 13: import { DataSource } from 'typeorm';",
                "// Line 14: import { JSDOM } from 'jsdom';",
                "// Line 15: import { DEFAULT_POLICIES } from '@/core/RoleService.js';",
                "// Line 16: import { entities } from '../src/postgres.js';",
                "// Line 17: import { loadConfig } from '../src/config.js';",
                "// Line 18: import type * as misskey from 'misskey-js';",
                "// vulnerable line: 19: import { Packed } from '@/misc/json-schema.js';",
                "// Line 20: ",
                "// Line 21: export { server as startServer, jobQueue as startJobQueue } from '@/boot/common.js';",
                "// Line 22: ",
                "// Line 23: interface UserToken {",
                "// Line 24:     token: string;",
                "// Line 25:     bearer?: boolean;",
                "// Line 26: }",
                "// Line 27: ",
                "// Line 28: const config = loadConfig();",
                "// Line 29: export const port = config.port;",
                "// Line 116: }",
                "// Line 117: ",
                "// Line 118: /**",
                "// Line 119:  * @brief プロミスにタイムアウト追加",
                "// Line 120:  * @param p 待ち対象プロミス",
                "// Line 121:  * @param timeout 待機ミリ秒",
                "// Line 122:  */",
                "// Line 123: function timeoutPromise<T>(p: Promise<T>, timeout: number): Promise<T> {",
                "// Line 124:     return Promise.race([",
                "// Line 125:         p,",
                "// vulnerable line: 126: new Promise((reject) =>{",
                "// vulnerable line: 127: setTimeout(() => { reject(new Error('timed out')); }, timeout)",
                "// vulnerable line: 128: }) as never",
                "// Line 129:     ]);",
                "// Line 130: }",
                "// Line 131: ",
                "// Line 132: export const signup = async (params?: Partial<misskey.Endpoints['signup']['req']>): Promise<NonNullable<misskey.Endpoints['signup']['res']>> => {",
                "// Line 133:     const q = Object.assign({",
                "// Line 134:         username: randomString(),",
                "// Line 135:         password: 'test',",
                "// Line 136:     }, params);",
                "// Line 137: ",
                "// Line 138:     const res = await api('signup', q);",
                "// Line 336: };",
                "// Line 337: ",
                "// Line 338: export const uploadUrl = async (user: UserToken, url: string): Promise<Packed<'DriveFile'>> => {",
                "// Line 339:     const marker = Math.random().toString();",
                "// Line 340: ",
                "// Line 341:     const catcher = makeStreamCatcher(",
                "// Line 342:         user,",
                "// Line 343:         'main',",
                "// Line 344:         (msg) => msg.type === 'urlUploadFinished' && msg.body.marker === marker,",
                "// Line 345:         (msg) => msg.body.file as Packed<'DriveFile'>,",
                "// vulnerable line: 346: 60 * 1000",
                "// Line 347:     );",
                "// Line 348: ",
                "// Line 349:     await api('drive/files/upload-from-url', {",
                "// Line 350:         url,",
                "// Line 351:         marker,",
                "// Line 352:         force: true,",
                "// Line 353:     }, user);",
                "// Line 354: ",
                "// Line 355:     return catcher;",
                "// Line 356: };",
                "// Line 427: /**",
                "// Line 428:  * @brief WebSocketストリームから特定条件の通知を拾うプロミスを生成",
                "// Line 429:  * @param user ユーザー認証情報",
                "// Line 430:  * @param channel チャンネル",
                "// Line 431:  * @param cond 条件",
                "// Line 432:  * @param extractor 取り出し処理",
                "// Line 433:  * @param timeout ミリ秒タイムアウト",
                "// Line 434:  * @returns 時間内に正常に処理できた場合に通知からextractorを通した値を得る",
                "// Line 435:  */",
                "// Line 436: export function makeStreamCatcher<T>(",
                "// vulnerable line: 437: user: UserToken,",
                "// vulnerable line: 438: channel: string,",
                "// vulnerable line: 439: cond: (message: Record<string, any>) => boolean,",
                "// vulnerable line: 440: extractor: (message: Record<string, any>) => T,",
                "// vulnerable line: 441: timeout = 60 * 1000): Promise<T> {",
                "// vulnerable line: 442: let ws: WebSocket",
                "// Line 443:     const p = new Promise<T>(async (resolve) => {",
                "// Line 444:         ws = await connectStream(user, channel, (msg) => {",
                "// Line 445:             if (cond(msg)) {",
                "// vulnerable line: 446: resolve(extractor(msg))",
                "// Line 447:             }",
                "// Line 448:         });",
                "// Line 449:     }).finally(() => {",
                "// vulnerable line: 450: ws?.close();",
                "// Line 451:     });",
                "// Line 452: ",
                "// Line 453:     return timeoutPromise(p, timeout);",
                "// Line 454: }",
                "// Line 455: ",
                "// Line 456: export type SimpleGetResponse = {",
                "// Line 457:     status: number,",
                "// Line 458:     body: any | JSDOM | null,",
                "// Line 459:     type: string | null,",
                "// Line 460:     location: string | null"
            ]
        }
    ]
}