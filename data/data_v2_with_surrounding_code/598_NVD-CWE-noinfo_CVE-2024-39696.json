{
    "cve_id": "CVE-2024-39696",
    "cve_description": "Evmos is a decentralized Ethereum Virtual Machine chain on the Cosmos Network. Prior to version 19.0.0, a user can create a vesting account with a 3rd party account (EOA or contract) as funder. Then, this user can create an authorization for the contract.CallerAddress, this is the authorization checked in the code. But the funds are taken from the funder address provided in the message. Consequently, the user can fund a vesting account with a 3rd party account without its permission. The funder address can be any address, so this vulnerability can be used to drain all the accounts in the chain. The issue has been patched in version 19.0.0.",
    "cve_publish_date": "2024-07-05T19:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Merge pull request from GHSA-q6hg-6m9x-5g9c\n\n* fix(precompile): add funder and dest check to update balance\n\n* add more test cases\n\n* restrict funder to be origin or contract caller\n\n* restrict dest address when calling from sc\n\n* add test case with funds transfer within precompile call\n\n* remove print\n\n* add check for dirty addresses\n\n* add UpdateDirties func\n\n* update dirties helper func\n\n* Update precompiles/vesting/utils_test.go\n\nCo-authored-by: stepit <48993133+0xstepit@users.noreply.github.com>\nSigned-off-by: Tom <54514587+GAtom22@users.noreply.github.com>\n\n* update comment description\n\n* changes based on review comments\n\n* refactor updateDirties\n\n* add test cases for updating funder balance before and after precompile call\n\n* add revert state test\n\n* update tx logic\n\n* update integration tests\n\n* refactor auth logic\n\n* update tests\n\n* add comt\n\n* fix: add funder and vest acc to dirties\n\n* add test cases for latest changes\n\n* address review comments\n\n* address review comments\n\n* address review comments\n\n* fix FlashLoan contract compilation\n\n* update logic\n\n* use pointer in precompile txs\n\n* remove unnecessary comment\n\n---------\n\nSigned-off-by: Tom <54514587+GAtom22@users.noreply.github.com>\nCo-authored-by: stepit <48993133+0xstepit@users.noreply.github.com>",
    "type_of_change": "Addition",
    "changes": [
        {
            "filename_of_changes": "counter.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "13",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "errors.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "events.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "0",
            "number_of_lines_deleted_vulnerable_to_cve": "4",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 32: func (p Precompile) EmitApprovalEvent(ctx sdk.Context, stateDB vm.StateDB, grantee, granter common.Address, typeURL string) error {",
                "// Line 33:     // Prepare the event topics",
                "// Line 34:     event := p.ABI.Events[authorization.EventTypeApproval]",
                "// Line 35:     topics := make([]common.Hash, 3)",
                "// Line 36: ",
                "// Line 37:     // The first topic is always the signature of the event.",
                "// Line 38:     topics[0] = event.ID",
                "// Line 39: ",
                "// Line 40:     var err error",
                "// Line 41:     topics[1], err = cmn.MakeTopic(grantee)",
                "// vulnerable line: 42: if err != nil {",
                "// vulnerable line: 43: return err",
                "// vulnerable line: 44: }",
                "// Line 45: ",
                "// Line 46:     topics[2], err = cmn.MakeTopic(granter)",
                "// vulnerable line: 47: if err != nil {",
                "// vulnerable line: 48: return err",
                "// vulnerable line: 49: }",
                "// Line 50: ",
                "// Line 51:     // Pack the arguments to be used as the Data field",
                "// Line 52:     arguments := abi.Arguments{event.Inputs[2]}",
                "// Line 53:     packed, err := arguments.Pack(typeURL)",
                "// vulnerable line: 54: if err != nil {",
                "// vulnerable line: 55: return err",
                "// vulnerable line: 56: }",
                "// Line 57: ",
                "// Line 58:     stateDB.AddLog(&ethtypes.Log{",
                "// Line 59:         Address:     p.Address(),",
                "// Line 60:         Topics:      topics,",
                "// Line 61:         Data:        packed,",
                "// Line 62:         BlockNumber: uint64(ctx.BlockHeight()),",
                "// Line 63:     })",
                "// Line 64: ",
                "// Line 65:     return nil",
                "// vulnerable line: 66: }",
                "// Line 67: ",
                "// Line 68: // EmitCreateClawbackVestingAccountEvent creates a new create clawback vesting account event emitted",
                "// Line 69: // on a CreateClawbackVestingAccount transaction.",
                "// Line 70: func (p Precompile) EmitCreateClawbackVestingAccountEvent(",
                "// Line 71:     ctx sdk.Context,",
                "// Line 72:     stateDB vm.StateDB,",
                "// Line 73:     funderAddr, vestingAddr common.Address,",
                "// Line 74: ) error {",
                "// Line 75:     // Prepare the event topics",
                "// Line 76:     event := p.ABI.Events[EventTypeCreateClawbackVestingAccount]",
                "// Line 77:     topics := make([]common.Hash, 3)",
                "// Line 78: ",
                "// Line 79:     // The first topic is always the signature of the event.",
                "// Line 80:     topics[0] = event.ID",
                "// Line 81: ",
                "// Line 82:     var err error",
                "// Line 83:     topics[1], err = cmn.MakeTopic(funderAddr)",
                "// vulnerable line: 84: if err != nil {",
                "// vulnerable line: 85: return err",
                "// vulnerable line: 86: }",
                "// Line 87: ",
                "// Line 88:     topics[2], err = cmn.MakeTopic(vestingAddr)",
                "// vulnerable line: 89: if err != nil {",
                "// vulnerable line: 90: return err",
                "// vulnerable line: 91: }",
                "// Line 92: ",
                "// vulnerable line: 93: if err != nil {",
                "// vulnerable line: 94: return err",
                "// vulnerable line: 95: }",
                "// Line 96: ",
                "// Line 97:     // Create the event",
                "// Line 98:     stateDB.AddLog(&ethtypes.Log{",
                "// Line 99:         Address:     p.Address(),",
                "// Line 100:         Topics:      topics,",
                "// Line 101:         Data:        nil,",
                "// Line 102:         BlockNumber: uint64(ctx.BlockHeight()),",
                "// Line 103:     })",
                "// Line 104: ",
                "// Line 105:     return nil",
                "// vulnerable line: 106: }",
                "// Line 107: ",
                "// Line 108: // EmitFundVestingAccountEvent creates a new fund vesting account event emitted",
                "// Line 109: // on a FundVestingAccount transaction.",
                "// Line 110: func (p Precompile) EmitFundVestingAccountEvent(",
                "// Line 111:     ctx sdk.Context,",
                "// Line 112:     stateDB vm.StateDB,",
                "// Line 113:     msg *vestingtypes.MsgFundVestingAccount,",
                "// Line 114:     funderAddr, vestingAddr common.Address,",
                "// Line 115:     lockupPeriods *LockupPeriods,",
                "// Line 116:     vestingPeriods *VestingPeriods,",
                "// Line 117: ) error {",
                "// Line 118:     // Prepare the event topics",
                "// Line 119:     event := p.ABI.Events[EventTypeFundVestingAccount]",
                "// Line 120:     topics := make([]common.Hash, 3)",
                "// Line 121: ",
                "// Line 122:     // The first topic is always the signature of the event.",
                "// Line 123:     topics[0] = event.ID",
                "// Line 124: ",
                "// Line 125:     var err error",
                "// Line 126:     topics[1], err = cmn.MakeTopic(funderAddr)",
                "// vulnerable line: 127: if err != nil {",
                "// vulnerable line: 128: return err",
                "// vulnerable line: 129: }",
                "// Line 130: ",
                "// Line 131:     topics[2], err = cmn.MakeTopic(vestingAddr)",
                "// vulnerable line: 132: if err != nil {",
                "// vulnerable line: 133: return err",
                "// vulnerable line: 134: }",
                "// Line 135: ",
                "// Line 136:     // Pack the arguments to be used as the Data field",
                "// Line 137:     arguments := abi.Arguments{event.Inputs[2], event.Inputs[3], event.Inputs[4]}",
                "// Line 138:     packed, err := arguments.Pack(uint64(msg.StartTime.Unix()), lockupPeriods.LockupPeriods, vestingPeriods.VestingPeriods)",
                "// vulnerable line: 139: if err != nil {",
                "// vulnerable line: 140: return err",
                "// vulnerable line: 141: }",
                "// Line 142: ",
                "// Line 143:     // Create the event",
                "// Line 144:     stateDB.AddLog(&ethtypes.Log{",
                "// Line 145:         Address:     p.Address(),",
                "// Line 146:         Topics:      topics,",
                "// Line 147:         Data:        packed,",
                "// Line 148:         BlockNumber: uint64(ctx.BlockHeight()),",
                "// Line 149:     })",
                "// Line 150: ",
                "// Line 151:     return nil",
                "// vulnerable line: 152: }",
                "// Line 153: ",
                "// Line 154: // EmitClawbackEvent creates a new clawback event emitted on a Clawback transaction.",
                "// Line 155: //",
                "// Line 156: //nolint:dupl",
                "// Line 157: func (p Precompile) EmitClawbackEvent(",
                "// Line 158:     ctx sdk.Context,",
                "// Line 159:     stateDB vm.StateDB,",
                "// Line 160:     funderAddr, accountAddr, destAddr common.Address,",
                "// Line 161: ) error {",
                "// Line 162:     // Prepare the event topics",
                "// Line 163:     event := p.ABI.Events[EventTypeClawback]",
                "// Line 164:     topics := make([]common.Hash, 3)",
                "// Line 165: ",
                "// Line 166:     // The first topic is always the signature of the event.",
                "// Line 167:     topics[0] = event.ID",
                "// Line 168: ",
                "// Line 169:     var err error",
                "// Line 170:     topics[1], err = cmn.MakeTopic(funderAddr)",
                "// vulnerable line: 171: if err != nil {",
                "// vulnerable line: 172: return err",
                "// vulnerable line: 173: }",
                "// Line 174: ",
                "// Line 175:     topics[2], err = cmn.MakeTopic(accountAddr)",
                "// vulnerable line: 176: if err != nil {",
                "// vulnerable line: 177: return err",
                "// vulnerable line: 178: }",
                "// Line 179: ",
                "// Line 180:     // Pack the arguments to be used as the Data field",
                "// Line 181:     arguments := abi.Arguments{event.Inputs[2]}",
                "// Line 182:     packed, err := arguments.Pack(destAddr)",
                "// vulnerable line: 183: if err != nil {",
                "// vulnerable line: 184: return err",
                "// vulnerable line: 185: }",
                "// Line 186: ",
                "// Line 187:     // Create the event",
                "// Line 188:     stateDB.AddLog(&ethtypes.Log{",
                "// Line 189:         Address:     p.Address(),",
                "// Line 190:         Topics:      topics,",
                "// Line 191:         Data:        packed,",
                "// Line 192:         BlockNumber: uint64(ctx.BlockHeight()),",
                "// Line 193:     })",
                "// Line 194: ",
                "// Line 195:     return nil",
                "// vulnerable line: 196: }",
                "// Line 197: ",
                "// Line 198: // EmitUpdateVestingFunderEvent creates a new update vesting funder event emitted on a UpdateVestingFunder transaction.",
                "// Line 199: //",
                "// Line 200: //nolint:dupl",
                "// Line 201: func (p Precompile) EmitUpdateVestingFunderEvent(",
                "// Line 202:     ctx sdk.Context,",
                "// Line 203:     stateDB vm.StateDB,",
                "// Line 204:     funderAddr, newFunderAddr, vestingAddr common.Address,",
                "// Line 205: ) error {",
                "// Line 206:     // Prepare the event topics",
                "// Line 207:     event := p.ABI.Events[EventTypeUpdateVestingFunder]",
                "// Line 208:     topics := make([]common.Hash, 3)",
                "// Line 209: ",
                "// Line 210:     // The first topic is always the signature of the event.",
                "// Line 211:     topics[0] = event.ID",
                "// Line 212: ",
                "// Line 213:     var err error",
                "// Line 214:     topics[1], err = cmn.MakeTopic(funderAddr)",
                "// vulnerable line: 215: if err != nil {",
                "// vulnerable line: 216: return err",
                "// vulnerable line: 217: }",
                "// Line 218: ",
                "// Line 219:     topics[2], err = cmn.MakeTopic(vestingAddr)",
                "// vulnerable line: 220: if err != nil {",
                "// vulnerable line: 221: return err",
                "// vulnerable line: 222: }",
                "// Line 223: ",
                "// Line 224:     // Pack the arguments to be used as the Data field",
                "// Line 225:     arguments := abi.Arguments{event.Inputs[2]}",
                "// Line 226:     packed, err := arguments.Pack(newFunderAddr)",
                "// vulnerable line: 227: if err != nil {",
                "// vulnerable line: 228: return err",
                "// vulnerable line: 229: }",
                "// Line 230: ",
                "// Line 231:     // Create the event",
                "// Line 232:     stateDB.AddLog(&ethtypes.Log{",
                "// Line 233:         Address:     p.Address(),",
                "// Line 234:         Topics:      topics,",
                "// Line 235:         Data:        packed,",
                "// Line 236:         BlockNumber: uint64(ctx.BlockHeight()),",
                "// Line 237:     })",
                "// Line 238: ",
                "// Line 239:     return nil",
                "// vulnerable line: 240: }",
                "// Line 241: ",
                "// Line 242: // EmitConvertVestingAccountEvent creates a new convert vesting account event emitted on a ConvertVestingAccount transaction.",
                "// Line 243: func (p Precompile) EmitConvertVestingAccountEvent(ctx sdk.Context, stateDB vm.StateDB, vestingAddr common.Address) error {",
                "// Line 244:     // Prepare the event topics",
                "// Line 245:     event := p.ABI.Events[EventTypeConvertVestingAccount]",
                "// Line 246:     topics := make([]common.Hash, 2)",
                "// Line 247: ",
                "// Line 248:     // The first topic is always the signature of the event.",
                "// Line 249:     topics[0] = event.ID",
                "// Line 250: ",
                "// Line 251:     var err error",
                "// Line 252:     topics[1], err = cmn.MakeTopic(vestingAddr)",
                "// vulnerable line: 253: if err != nil {",
                "// vulnerable line: 254: return err",
                "// vulnerable line: 255: }",
                "// Line 256: ",
                "// Line 257:     // Create the event",
                "// Line 258:     stateDB.AddLog(&ethtypes.Log{",
                "// Line 259:         Address:     p.Address(),",
                "// Line 260:         Topics:      topics,",
                "// Line 261:         Data:        nil,",
                "// Line 262:         BlockNumber: uint64(ctx.BlockHeight()),",
                "// Line 263:     })",
                "// Line 264: ",
                "// Line 265:     return nil",
                "// vulnerable line: 266: }"
            ]
        },
        {
            "filename_of_changes": "utils_test.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "23",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 229:         callArgs.ContractABI = s.vestingCallerContract.ABI",
                "// Line 230:     }",
                "// Line 231: ",
                "// Line 232:     return callArgs",
                "// Line 233: }",
                "// Line 234: ",
                "// Line 235: // FundTestClawbackVestingAccount funds the clawback vesting account with some tokens",
                "// Line 236: func (s *PrecompileTestSuite) FundTestClawbackVestingAccount() {",
                "// Line 237:     method := s.precompile.Methods[vesting.FundVestingAccountMethod]",
                "// Line 238:     createArgs := []interface{}{s.address, toAddr, uint64(time.Now().Unix()), lockupPeriods, vestingPeriods}",
                "// vulnerable line: 239: //nolint",
                "// Line 240:     msg, _, _, _, _, err := vesting.NewMsgFundVestingAccount(createArgs, &method)",
                "// Line 241:     _, err = s.app.VestingKeeper.FundVestingAccount(s.ctx, msg)",
                "// Line 242:     s.Require().NoError(err)",
                "// Line 243:     vestingAcc, err := s.app.VestingKeeper.Balances(s.ctx, &vestingtypes.QueryBalancesRequest{Address: sdk.AccAddress(toAddr.Bytes()).String()})",
                "// Line 244:     s.Require().NoError(err)",
                "// Line 245:     s.Require().Equal(vestingAcc.Locked, balancesSdkCoins)",
                "// Line 246:     s.Require().Equal(vestingAcc.Unvested, balancesSdkCoins)",
                "// Line 247: }",
                "// Line 248: ",
                "// Line 249: // CreateTestClawbackVestingAccount creates a vesting account that can clawback",
                "// Line 250: func (s *PrecompileTestSuite) CreateTestClawbackVestingAccount(funder, vestingAddr common.Address) {",
                "// Line 251:     msgArgs := []interface{}{funder, vestingAddr, false}",
                "// vulnerable line: 252: //nolint",
                "// Line 253:     msg, _, _, err := vesting.NewMsgCreateClawbackVestingAccount(msgArgs)",
                "// Line 254:     err = evmosutil.FundAccount(s.ctx, s.app.BankKeeper, vestingAddr.Bytes(), sdk.NewCoins(sdk.NewCoin(utils.BaseDenom, math.NewInt(100))))",
                "// Line 255:     s.Require().NoError(err)",
                "// Line 256:     _, err = s.app.VestingKeeper.CreateClawbackVestingAccount(s.ctx, msg)",
                "// Line 257:     s.Require().NoError(err)",
                "// Line 258: }",
                "// Line 259: ",
                "// Line 260: // DeployContract deploys a contract that calls the staking precompile's methods for testing purposes.",
                "// Line 261: func (s *PrecompileTestSuite) DeployContract(contract evmtypes.CompiledContract) (addr common.Address, err error) {",
                "// Line 262:     addr, err = evmosutil.DeployContract("
            ]
        }
    ]
}