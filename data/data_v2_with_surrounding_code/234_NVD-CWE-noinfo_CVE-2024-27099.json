{
    "cve_id": "CVE-2024-27099",
    "cve_description": "The uAMQP is a C library for AMQP 1.0 communication to Azure Cloud Services. When processing an incorrect `AMQP_VALUE` failed state, may cause a double free problem. This may cause a RCE. Update submodule with commit 2ca42b6e4e098af2d17e487814a91d05f6ae4987.",
    "cve_publish_date": "2024-02-27T19:04Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Fix potential double free in link.c (#456)\n\n* Fix potential double free in link.c\r\n\r\n* Fix unittest\r\n\r\n* Add link_attach_succeeds\r\n\r\n* Add double-free test\r\n\r\n* Fix return value in unit test function\r\n\r\n* Address CR comments\r\n\r\n* Fix unit tests",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "link.c",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 74: DEFINE_ASYNC_OPERATION_CONTEXT(DELIVERY_INSTANCE);",
                "// Line 75: ",
                "// Line 76: static void set_link_state(LINK_INSTANCE* link_instance, LINK_STATE link_state)",
                "// Line 77: {",
                "// Line 78:     link_instance->previous_link_state = link_instance->link_state;",
                "// Line 79:     link_instance->link_state = link_state;",
                "// Line 80: ",
                "// Line 81:     if (link_instance->on_link_state_changed != NULL)",
                "// Line 82:     {",
                "// Line 83:         link_instance->on_link_state_changed(link_instance->callback_context, link_state, link_instance->previous_link_state);",
                "// vulnerable line: 84: }",
                "// vulnerable line: 85: }",
                "// Line 86: ",
                "// Line 87: static void remove_all_pending_deliveries(LINK_INSTANCE* link, bool indicate_settled)",
                "// Line 88: {",
                "// Line 89:     if (link->pending_deliveries != NULL)",
                "// Line 90:     {",
                "// Line 91:         LIST_ITEM_HANDLE item = singlylinkedlist_get_head_item(link->pending_deliveries);",
                "// Line 92:         while (item != NULL)",
                "// Line 93:         {",
                "// Line 94:             LIST_ITEM_HANDLE next_item = singlylinkedlist_get_next_item(item);",
                "// Line 95:             ASYNC_OPERATION_HANDLE pending_delivery_operation = (ASYNC_OPERATION_HANDLE)singlylinkedlist_item_get_value(item);",
                "// Line 96:             if (pending_delivery_operation != NULL)",
                "// Line 97:             {",
                "// Line 98:                 DELIVERY_INSTANCE* delivery_instance = (DELIVERY_INSTANCE*)GET_ASYNC_OPERATION_CONTEXT(DELIVERY_INSTANCE, pending_delivery_operation);",
                "// Line 99:                 if (indicate_settled && (delivery_instance->on_delivery_settled != NULL))",
                "// Line 100:                 {",
                "// Line 101:                     delivery_instance->on_delivery_settled(delivery_instance->callback_context, delivery_instance->delivery_id, LINK_DELIVERY_SETTLE_REASON_NOT_DELIVERED, NULL);",
                "// vulnerable line: 102: }",
                "// Line 103: ",
                "// Line 104:                 async_operation_destroy(pending_delivery_operation);",
                "// vulnerable line: 105: }",
                "// Line 106: ",
                "// Line 107:             item = next_item;",
                "// vulnerable line: 108: }",
                "// Line 109: ",
                "// Line 110:         singlylinkedlist_destroy(link->pending_deliveries);",
                "// Line 111:         link->pending_deliveries = NULL;",
                "// vulnerable line: 112: }",
                "// vulnerable line: 113: }",
                "// Line 114: ",
                "// Line 115: static int send_flow(LINK_INSTANCE* link)",
                "// Line 116: {",
                "// Line 117:     int result;",
                "// Line 118:     FLOW_HANDLE flow = flow_create(0, 0, 0);",
                "// Line 119: ",
                "// Line 120:     if (flow == NULL)",
                "// Line 121:     {",
                "// Line 122:         LogError(\"NULL flow performative\");",
                "// Line 123:         result = MU_FAILURE;",
                "// vulnerable line: 124: }",
                "// Line 125:     else",
                "// Line 126:     {",
                "// Line 127:         if (flow_set_link_credit(flow, link->current_link_credit) != 0)",
                "// Line 128:         {",
                "// Line 129:             LogError(\"Cannot set link credit on flow performative\");",
                "// Line 130:             result = MU_FAILURE;",
                "// vulnerable line: 131: }",
                "// Line 132:         else if (flow_set_handle(flow, link->handle) != 0)",
                "// Line 133:         {",
                "// Line 134:             LogError(\"Cannot set handle on flow performative\");",
                "// Line 135:             result = MU_FAILURE;",
                "// vulnerable line: 136: }",
                "// Line 137:         else if (flow_set_delivery_count(flow, link->delivery_count) != 0)",
                "// Line 138:         {",
                "// Line 139:             LogError(\"Cannot set delivery count on flow performative\");",
                "// Line 140:             result = MU_FAILURE;",
                "// vulnerable line: 141: }",
                "// Line 142:         else",
                "// Line 143:         {",
                "// Line 144:             if (session_send_flow(link->link_endpoint, flow) != 0)",
                "// Line 145:             {",
                "// Line 146:                 LogError(\"Sending flow frame failed in session send\");",
                "// Line 147:                 result = MU_FAILURE;",
                "// vulnerable line: 148: }",
                "// Line 149:             else",
                "// Line 150:             {",
                "// Line 151:                 result = 0;",
                "// vulnerable line: 152: }",
                "// vulnerable line: 153: }",
                "// Line 154: ",
                "// Line 155:         flow_destroy(flow);",
                "// vulnerable line: 156: }",
                "// Line 157: ",
                "// Line 158:     return result;",
                "// vulnerable line: 159: }",
                "// Line 160: ",
                "// Line 161: static int send_disposition(LINK_INSTANCE* link_instance, delivery_number delivery_number, AMQP_VALUE delivery_state)",
                "// Line 162: {",
                "// Line 163:     int result;",
                "// Line 164: ",
                "// Line 165:     DISPOSITION_HANDLE disposition = disposition_create(link_instance->role, delivery_number);",
                "// Line 166:     if (disposition == NULL)",
                "// Line 167:     {",
                "// Line 168:         LogError(\"NULL disposition performative\");",
                "// Line 169:         result = MU_FAILURE;",
                "// vulnerable line: 170: }",
                "// Line 171:     else",
                "// Line 172:     {",
                "// Line 173:         if (disposition_set_last(disposition, delivery_number) != 0)",
                "// Line 174:         {",
                "// Line 175:             LogError(\"Failed setting last on disposition performative\");",
                "// Line 176:             result = MU_FAILURE;",
                "// vulnerable line: 177: }",
                "// Line 178:         else if (disposition_set_settled(disposition, true) != 0)",
                "// Line 179:         {",
                "// Line 180:             LogError(\"Failed setting settled on disposition performative\");",
                "// Line 181:             result = MU_FAILURE;",
                "// vulnerable line: 182: }",
                "// Line 183:         else if ((delivery_state != NULL) && (disposition_set_state(disposition, delivery_state) != 0))",
                "// Line 184:         {",
                "// Line 185:             LogError(\"Failed setting state on disposition performative\");",
                "// Line 186:             result = MU_FAILURE;",
                "// vulnerable line: 187: }",
                "// Line 188:         else",
                "// Line 189:         {",
                "// Line 190:             if (session_send_disposition(link_instance->link_endpoint, disposition) != 0)",
                "// Line 191:             {",
                "// Line 192:                 LogError(\"Sending disposition failed in session send\");",
                "// Line 193:                 result = MU_FAILURE;",
                "// vulnerable line: 194: }",
                "// Line 195:             else",
                "// Line 196:             {",
                "// Line 197:                 result = 0;",
                "// vulnerable line: 198: }",
                "// vulnerable line: 199: }",
                "// Line 200: ",
                "// Line 201:         disposition_destroy(disposition);",
                "// vulnerable line: 202: }",
                "// Line 203: ",
                "// Line 204:     return result;",
                "// vulnerable line: 205: }",
                "// Line 206: ",
                "// Line 207: static int send_detach(LINK_INSTANCE* link_instance, bool close, ERROR_HANDLE error_handle)",
                "// Line 208: {",
                "// Line 209:     int result;",
                "// Line 210:     DETACH_HANDLE detach_performative;",
                "// Line 211: ",
                "// Line 212:     detach_performative = detach_create(0);",
                "// Line 213:     if (detach_performative == NULL)",
                "// Line 214:     {",
                "// Line 215:         LogError(\"NULL detach performative\");",
                "// Line 216:         result = MU_FAILURE;",
                "// vulnerable line: 217: }",
                "// Line 218:     else",
                "// Line 219:     {",
                "// Line 220:         if ((error_handle != NULL) &&",
                "// Line 221:             (detach_set_error(detach_performative, error_handle) != 0))",
                "// Line 222:         {",
                "// Line 223:             LogError(\"Failed setting error on detach frame\");",
                "// Line 224:             result = MU_FAILURE;",
                "// vulnerable line: 225: }",
                "// Line 226:         else if (close &&",
                "// Line 227:             (detach_set_closed(detach_performative, true) != 0))",
                "// Line 228:         {",
                "// Line 229:             LogError(\"Failed setting closed field on detach frame\");",
                "// Line 230:             result = MU_FAILURE;",
                "// vulnerable line: 231: }",
                "// Line 232:         else",
                "// Line 233:         {",
                "// Line 234:             if (session_send_detach(link_instance->link_endpoint, detach_performative) != 0)",
                "// Line 235:             {",
                "// Line 236:                 LogError(\"Sending detach frame failed in session send\");",
                "// Line 237:                 result = MU_FAILURE;",
                "// vulnerable line: 238: }",
                "// Line 239:             else",
                "// Line 240:             {",
                "// Line 241:                 if (close)",
                "// Line 242:                 {",
                "// Line 243:                     /* Declare link to be closed */",
                "// Line 244:                     link_instance->is_closed = true;",
                "// vulnerable line: 245: }",
                "// Line 246: ",
                "// Line 247:                 result = 0;",
                "// vulnerable line: 248: }",
                "// vulnerable line: 249: }",
                "// Line 250: ",
                "// Line 251:         detach_destroy(detach_performative);",
                "// vulnerable line: 252: }",
                "// Line 253: ",
                "// Line 254:     return result;",
                "// vulnerable line: 255: }",
                "// Line 256: ",
                "// Line 257: static int send_attach(LINK_INSTANCE* link, const char* name, handle handle, role role)",
                "// Line 258: {",
                "// Line 259:     int result;",
                "// Line 260:     ATTACH_HANDLE attach = attach_create(name, handle, role);",
                "// Line 261: ",
                "// Line 262:     if (attach == NULL)",
                "// Line 263:     {",
                "// Line 264:         LogError(\"NULL attach performative\");",
                "// Line 265:         result = MU_FAILURE;",
                "// vulnerable line: 266: }",
                "// Line 267:     else",
                "// Line 268:     {",
                "// Line 269:         result = 0;",
                "// Line 270: ",
                "// Line 271:         link->delivery_count = link->initial_delivery_count;",
                "// Line 272: ",
                "// Line 273:         attach_set_snd_settle_mode(attach, link->snd_settle_mode);",
                "// Line 274:         attach_set_rcv_settle_mode(attach, link->rcv_settle_mode);",
                "// Line 275:         attach_set_role(attach, role);",
                "// Line 276:         attach_set_source(attach, link->source);",
                "// Line 277:         attach_set_target(attach, link->target);",
                "// Line 278:         if (link->attach_properties != NULL)",
                "// Line 279:         {",
                "// Line 280:             (void)attach_set_properties(attach, link->attach_properties);",
                "// vulnerable line: 281: }",
                "// Line 282: ",
                "// Line 283:         if (role == role_sender)",
                "// Line 284:         {",
                "// Line 285:             if (attach_set_initial_delivery_count(attach, link->delivery_count) != 0)",
                "// Line 286:             {",
                "// Line 287:                 LogError(\"Cannot set attach initial delivery count\");",
                "// Line 288:                 result = MU_FAILURE;",
                "// vulnerable line: 289: }",
                "// vulnerable line: 290: }",
                "// Line 291: ",
                "// Line 292:         if (result == 0)",
                "// Line 293:         {",
                "// Line 294:             if (attach_set_max_message_size(attach, link->max_message_size) != 0)",
                "// Line 295:             {",
                "// Line 296:                 LogError(\"Cannot set max message size\");",
                "// Line 297:                 result = MU_FAILURE;",
                "// vulnerable line: 298: }",
                "// Line 299:             else if (session_send_attach(link->link_endpoint, attach) != 0)",
                "// Line 300:             {",
                "// Line 301:                 LogError(\"Sending attach failed in session send\");",
                "// Line 302:                 result = MU_FAILURE;",
                "// vulnerable line: 303: }",
                "// Line 304:             else",
                "// Line 305:             {",
                "// Line 306:                 result = 0;",
                "// vulnerable line: 307: }",
                "// vulnerable line: 308: }",
                "// Line 309: ",
                "// Line 310:         attach_destroy(attach);",
                "// vulnerable line: 311: }",
                "// Line 312: ",
                "// Line 313:     return result;",
                "// vulnerable line: 314: }",
                "// Line 315: ",
                "// Line 316: static void link_frame_received(void* context, AMQP_VALUE performative, uint32_t payload_size, const unsigned char* payload_bytes)",
                "// Line 317: {",
                "// Line 318:     LINK_INSTANCE* link_instance = (LINK_INSTANCE*)context;",
                "// Line 319:     AMQP_VALUE descriptor = amqpvalue_get_inplace_descriptor(performative);",
                "// Line 320: ",
                "// Line 321:     if (is_attach_type_by_descriptor(descriptor))",
                "// Line 322:     {",
                "// Line 323:         ATTACH_HANDLE attach_handle;",
                "// Line 324: ",
                "// Line 325:         if (amqpvalue_get_attach(performative, &attach_handle) != 0)",
                "// Line 326:         {",
                "// Line 327:             LogError(\"Cannot get attach performative\");",
                "// vulnerable line: 328: }",
                "// Line 329:         else",
                "// Line 330:         {",
                "// Line 331:             if ((link_instance->role == role_receiver) &&",
                "// Line 332:                 (attach_get_initial_delivery_count(attach_handle, &link_instance->delivery_count) != 0))",
                "// Line 333:             {",
                "// Line 334:                 LogError(\"Cannot get initial delivery count\");",
                "// Line 335:                 remove_all_pending_deliveries(link_instance, true);",
                "// Line 336:                 set_link_state(link_instance, LINK_STATE_DETACHED);",
                "// vulnerable line: 337: }",
                "// Line 338:             else",
                "// Line 339:             {",
                "// Line 340:                 if (attach_get_max_message_size(attach_handle, &link_instance->peer_max_message_size) != 0)",
                "// Line 341:                 {",
                "// Line 342:                     LogError(\"Could not retrieve peer_max_message_size from attach frame\");",
                "// vulnerable line: 343: }",
                "// Line 344: ",
                "// Line 345:                 if ((link_instance->link_state == LINK_STATE_DETACHED) ||",
                "// Line 346:                     (link_instance->link_state == LINK_STATE_HALF_ATTACHED_ATTACH_SENT))",
                "// Line 347:                 {",
                "// Line 348:                     if (link_instance->role == role_receiver)",
                "// Line 349:                     {",
                "// Line 350:                         link_instance->current_link_credit = link_instance->max_link_credit;",
                "// Line 351:                         send_flow(link_instance);",
                "// vulnerable line: 352: }",
                "// Line 353:                     else",
                "// Line 354:                     {",
                "// Line 355:                         link_instance->current_link_credit = 0;",
                "// vulnerable line: 356: }",
                "// Line 357: ",
                "// Line 358:                     if (link_instance->link_state == LINK_STATE_DETACHED)",
                "// Line 359:                     {",
                "// Line 360:                         set_link_state(link_instance, LINK_STATE_HALF_ATTACHED_ATTACH_RECEIVED);",
                "// vulnerable line: 361: }",
                "// Line 362:                     else",
                "// Line 363:                     {",
                "// Line 364:                         set_link_state(link_instance, LINK_STATE_ATTACHED);",
                "// vulnerable line: 365: }",
                "// vulnerable line: 366: }",
                "// vulnerable line: 367: }",
                "// Line 368: ",
                "// Line 369:             attach_destroy(attach_handle);",
                "// vulnerable line: 370: }",
                "// vulnerable line: 371: }",
                "// Line 372:     else if (is_flow_type_by_descriptor(descriptor))",
                "// Line 373:     {",
                "// Line 374:         FLOW_HANDLE flow_handle;",
                "// Line 375:         if (amqpvalue_get_flow(performative, &flow_handle) != 0)",
                "// Line 376:         {",
                "// Line 377:             LogError(\"Cannot get flow performative\");",
                "// vulnerable line: 378: }",
                "// Line 379:         else",
                "// Line 380:         {",
                "// Line 381:             if (link_instance->role == role_sender)",
                "// Line 382:             {",
                "// Line 383:                 delivery_number rcv_delivery_count;",
                "// Line 384:                 uint32_t rcv_link_credit;",
                "// Line 385: ",
                "// Line 386:                 if (flow_get_link_credit(flow_handle, &rcv_link_credit) != 0)",
                "// Line 387:                 {",
                "// Line 388:                     LogError(\"Cannot get link credit\");",
                "// Line 389:                     remove_all_pending_deliveries(link_instance, true);",
                "// Line 390:                     set_link_state(link_instance, LINK_STATE_DETACHED);",
                "// vulnerable line: 391: }",
                "// Line 392:                 else if (flow_get_delivery_count(flow_handle, &rcv_delivery_count) != 0)",
                "// Line 393:                 {",
                "// Line 394:                     LogError(\"Cannot get delivery count\");",
                "// Line 395:                     remove_all_pending_deliveries(link_instance, true);",
                "// Line 396:                     set_link_state(link_instance, LINK_STATE_DETACHED);",
                "// vulnerable line: 397: }",
                "// Line 398:                 else",
                "// Line 399:                 {",
                "// Line 400:                     link_instance->current_link_credit = rcv_delivery_count + rcv_link_credit - link_instance->delivery_count;",
                "// Line 401:                     if (link_instance->current_link_credit > 0)",
                "// Line 402:                     {",
                "// Line 403:                         link_instance->on_link_flow_on(link_instance->callback_context);",
                "// vulnerable line: 404: }",
                "// vulnerable line: 405: }",
                "// vulnerable line: 406: }",
                "// vulnerable line: 407: }",
                "// Line 408: ",
                "// vulnerable line: 409: flow_destroy(flow_handle);",
                "// vulnerable line: 410: }",
                "// Line 411:     else if (is_transfer_type_by_descriptor(descriptor))",
                "// Line 412:     {",
                "// Line 413:         if (link_instance->on_transfer_received != NULL)",
                "// Line 414:         {",
                "// Line 415:             TRANSFER_HANDLE transfer_handle;",
                "// Line 416:             if (amqpvalue_get_transfer(performative, &transfer_handle) != 0)",
                "// Line 417:             {",
                "// Line 418:                 LogError(\"Cannot get transfer performative\");",
                "// vulnerable line: 419: }",
                "// Line 420:             else",
                "// Line 421:             {",
                "// Line 422:                 AMQP_VALUE delivery_state;",
                "// Line 423:                 bool more;",
                "// Line 424:                 bool is_error;",
                "// Line 425: ",
                "// Line 426:                 if (link_instance->current_link_credit == 0)",
                "// Line 427:                 {",
                "// Line 428:                     link_instance->current_link_credit = link_instance->max_link_credit;",
                "// Line 429:                     send_flow(link_instance);",
                "// vulnerable line: 430: }",
                "// Line 431: ",
                "// Line 432:                 more = false;",
                "// Line 433:                 /* Attempt to get more flag, default to false */",
                "// Line 434:                 (void)transfer_get_more(transfer_handle, &more);",
                "// Line 435:                 is_error = false;",
                "// Line 436: ",
                "// Line 437:                 if (transfer_get_delivery_id(transfer_handle, &link_instance->received_delivery_id) != 0)",
                "// Line 438:                 {",
                "// Line 439:                     /* is this not a continuation transfer? */",
                "// Line 440:                     if (link_instance->received_payload_size == 0)",
                "// Line 441:                     {",
                "// Line 442:                         LogError(\"Could not get the delivery Id from the transfer performative\");",
                "// Line 443:                         is_error = true;",
                "// vulnerable line: 444: }",
                "// vulnerable line: 445: }",
                "// Line 446: ",
                "// Line 447:                 if (!is_error)",
                "// Line 448:                 {",
                "// Line 449:                     /* If this is a continuation transfer or if this is the first chunk of a multi frame transfer */",
                "// Line 450:                     if ((link_instance->received_payload_size > 0) || more)",
                "// Line 451:                     {",
                "// Line 452:                         unsigned char* new_received_payload;;",
                "// Line 453:                         size_t realloc_size = safe_add_size_t((size_t)link_instance->received_payload_size, payload_size);",
                "// Line 454:                         if (realloc_size == SIZE_MAX ||",
                "// Line 455:                             (new_received_payload = (unsigned char*)realloc(link_instance->received_payload, realloc_size)) == NULL)",
                "// Line 456:                         {",
                "// Line 457:                             LogError(\"Could not allocate memory for the received payload, size:%zu\", realloc_size);",
                "// vulnerable line: 458: }",
                "// Line 459:                         else",
                "// Line 460:                         {",
                "// Line 461:                             link_instance->received_payload = new_received_payload;",
                "// Line 462:                             (void)memcpy(link_instance->received_payload + link_instance->received_payload_size, payload_bytes, payload_size);",
                "// Line 463:                             link_instance->received_payload_size += payload_size;",
                "// vulnerable line: 464: }",
                "// vulnerable line: 465: }",
                "// Line 466: ",
                "// Line 467:                     if (!more)",
                "// Line 468:                     {",
                "// Line 469:                         const unsigned char* indicate_payload_bytes;",
                "// Line 470:                         uint32_t indicate_payload_size;",
                "// Line 471: ",
                "// Line 472:                         link_instance->current_link_credit--;",
                "// Line 473:                         link_instance->delivery_count++;",
                "// Line 474:                         /* if no previously stored chunks then simply report the current payload */",
                "// Line 475:                         if (link_instance->received_payload_size > 0)",
                "// Line 476:                         {",
                "// Line 477:                             indicate_payload_size = link_instance->received_payload_size;",
                "// Line 478:                             indicate_payload_bytes = link_instance->received_payload;",
                "// vulnerable line: 479: }",
                "// Line 480:                         else",
                "// Line 481:                         {",
                "// Line 482:                             indicate_payload_size = payload_size;",
                "// Line 483:                             indicate_payload_bytes = payload_bytes;",
                "// vulnerable line: 484: }",
                "// Line 485: ",
                "// Line 486:                         delivery_state = link_instance->on_transfer_received(link_instance->callback_context, transfer_handle, indicate_payload_size, indicate_payload_bytes);",
                "// Line 487: ",
                "// Line 488:                         if (link_instance->received_payload_size > 0)",
                "// Line 489:                         {",
                "// Line 490:                             free(link_instance->received_payload);",
                "// Line 491:                             link_instance->received_payload = NULL;",
                "// Line 492:                             link_instance->received_payload_size = 0;",
                "// vulnerable line: 493: }",
                "// Line 494: ",
                "// Line 495:                         if (delivery_state != NULL)",
                "// Line 496:                         {",
                "// Line 497:                             if (send_disposition(link_instance, link_instance->received_delivery_id, delivery_state) != 0)",
                "// Line 498:                             {",
                "// Line 499:                                 LogError(\"Cannot send disposition frame\");",
                "// vulnerable line: 500: }",
                "// Line 501: ",
                "// Line 502:                             amqpvalue_destroy(delivery_state);",
                "// vulnerable line: 503: }",
                "// vulnerable line: 504: }",
                "// vulnerable line: 505: }",
                "// Line 506: ",
                "// Line 507:                 transfer_destroy(transfer_handle);",
                "// vulnerable line: 508: }",
                "// vulnerable line: 509: }",
                "// vulnerable line: 510: }",
                "// Line 511:     else if (is_disposition_type_by_descriptor(descriptor))",
                "// Line 512:     {",
                "// Line 513:         DISPOSITION_HANDLE disposition;",
                "// Line 514:         if (amqpvalue_get_disposition(performative, &disposition) != 0)",
                "// Line 515:         {",
                "// Line 516:             LogError(\"Cannot get disposition performative\");",
                "// vulnerable line: 517: }",
                "// Line 518:         else",
                "// Line 519:         {",
                "// Line 520:             delivery_number first;",
                "// Line 521:             delivery_number last;",
                "// Line 522: ",
                "// Line 523:             if (disposition_get_first(disposition, &first) != 0)",
                "// Line 524:             {",
                "// Line 525:                 LogError(\"Cannot get first field\");",
                "// vulnerable line: 526: }",
                "// Line 527:             else",
                "// Line 528:             {",
                "// Line 529:                 bool settled;",
                "// Line 530: ",
                "// Line 531:                 if (disposition_get_last(disposition, &last) != 0)",
                "// Line 532:                 {",
                "// Line 533:                     last = first;",
                "// vulnerable line: 534: }",
                "// Line 535: ",
                "// Line 536:                 if (disposition_get_settled(disposition, &settled) != 0)",
                "// Line 537:                 {",
                "// Line 538:                     settled = false;",
                "// vulnerable line: 539: }",
                "// Line 540: ",
                "// Line 541:                 if (settled && ",
                "// Line 542:                     link_instance->pending_deliveries != NULL)",
                "// Line 543:                 {",
                "// Line 544:                     LIST_ITEM_HANDLE pending_delivery = singlylinkedlist_get_head_item(link_instance->pending_deliveries);",
                "// Line 545:                     while (pending_delivery != NULL)",
                "// Line 546:                     {",
                "// Line 547:                         LIST_ITEM_HANDLE next_pending_delivery = singlylinkedlist_get_next_item(pending_delivery);",
                "// Line 548:                         ASYNC_OPERATION_HANDLE pending_delivery_operation = (ASYNC_OPERATION_HANDLE)singlylinkedlist_item_get_value(pending_delivery);",
                "// Line 549:                         if (pending_delivery_operation == NULL)",
                "// Line 550:                         {",
                "// Line 551:                             LogError(\"Cannot obtain pending delivery\");",
                "// Line 552:                             break;",
                "// vulnerable line: 553: }",
                "// Line 554:                         else",
                "// Line 555:                         {",
                "// Line 556:                             DELIVERY_INSTANCE* delivery_instance = (DELIVERY_INSTANCE*)GET_ASYNC_OPERATION_CONTEXT(DELIVERY_INSTANCE, pending_delivery_operation);",
                "// Line 557: ",
                "// Line 558:                             if ((delivery_instance->delivery_id >= first) && (delivery_instance->delivery_id <= last))",
                "// Line 559:                             {",
                "// Line 560:                                 AMQP_VALUE delivery_state;",
                "// Line 561:                                 if (disposition_get_state(disposition, &delivery_state) == 0)",
                "// Line 562:                                 {",
                "// Line 563:                                     delivery_instance->on_delivery_settled(delivery_instance->callback_context, delivery_instance->delivery_id, LINK_DELIVERY_SETTLE_REASON_DISPOSITION_RECEIVED, delivery_state);",
                "// Line 564:                                     async_operation_destroy(pending_delivery_operation);",
                "// vulnerable line: 565: }",
                "// Line 566:                                 else",
                "// Line 567:                                 {",
                "// Line 568:                                     LogError(\"Failed getting the disposition state\");",
                "// vulnerable line: 569: }",
                "// Line 570: ",
                "// Line 571:                                 if (singlylinkedlist_remove(link_instance->pending_deliveries, pending_delivery) != 0)",
                "// Line 572:                                 {",
                "// Line 573:                                     LogError(\"Cannot remove pending delivery\");",
                "// Line 574:                                     break;",
                "// vulnerable line: 575: }",
                "// vulnerable line: 576: }",
                "// Line 577: ",
                "// Line 578:                             pending_delivery = next_pending_delivery;",
                "// vulnerable line: 579: }",
                "// vulnerable line: 580: }",
                "// vulnerable line: 581: }",
                "// vulnerable line: 582: }",
                "// Line 583: ",
                "// Line 584:             disposition_destroy(disposition);",
                "// vulnerable line: 585: }",
                "// vulnerable line: 586: }",
                "// Line 587:     else if (is_detach_type_by_descriptor(descriptor))",
                "// Line 588:     {",
                "// Line 589:         DETACH_HANDLE detach;",
                "// Line 590: ",
                "// Line 591:         /* Set link state appropriately based on whether we received detach condition */",
                "// Line 592:         if (amqpvalue_get_detach(performative, &detach) != 0)",
                "// Line 593:         {",
                "// Line 594:             LogError(\"Cannot get detach performative\");",
                "// vulnerable line: 595: }",
                "// Line 596:         else",
                "// Line 597:         {",
                "// Line 598:             bool closed = false;",
                "// Line 599:             ERROR_HANDLE error;",
                "// Line 600: ",
                "// Line 601:             (void)detach_get_closed(detach, &closed);",
                "// Line 602: ",
                "// Line 603:             /* Received a detach while attached */",
                "// Line 604:             if (link_instance->link_state == LINK_STATE_ATTACHED)",
                "// Line 605:             {",
                "// Line 606:                 /* Respond with ack */",
                "// Line 607:                 if (send_detach(link_instance, closed, NULL) != 0)",
                "// Line 608:                 {",
                "// Line 609:                     LogError(\"Failed sending detach frame\");",
                "// vulnerable line: 610: }",
                "// vulnerable line: 611: }",
                "// Line 612:             /* Received a closing detach after we sent a non-closing detach. */",
                "// Line 613:             else if (closed &&",
                "// Line 614:                 ((link_instance->link_state == LINK_STATE_HALF_ATTACHED_ATTACH_SENT) || (link_instance->link_state == LINK_STATE_HALF_ATTACHED_ATTACH_RECEIVED)) &&",
                "// Line 615:                 !link_instance->is_closed)",
                "// Line 616:             {",
                "// Line 617: ",
                "// Line 618:                 /* In this case, we MUST signal that we closed by reattaching and then sending a closing detach.*/",
                "// Line 619:                 if (send_attach(link_instance, link_instance->name, 0, link_instance->role) != 0)",
                "// Line 620:                 {",
                "// Line 621:                     LogError(\"Failed sending attach frame\");",
                "// vulnerable line: 622: }",
                "// Line 623: ",
                "// Line 624:                 if (send_detach(link_instance, true, NULL) != 0)",
                "// Line 625:                 {",
                "// Line 626:                     LogError(\"Failed sending detach frame\");",
                "// vulnerable line: 627: }",
                "// vulnerable line: 628: }",
                "// Line 629: ",
                "// Line 630:             if (detach_get_error(detach, &error) != 0)",
                "// Line 631:             {",
                "// Line 632:                 error = NULL;",
                "// vulnerable line: 633: }",
                "// Line 634:             remove_all_pending_deliveries(link_instance, true);",
                "// Line 635:             // signal link detach received in order to handle cases like redirect",
                "// Line 636:             if (link_instance->on_link_detach_received_event_subscription.on_link_detach_received != NULL)",
                "// Line 637:             {",
                "// Line 638:                 link_instance->on_link_detach_received_event_subscription.on_link_detach_received(link_instance->on_link_detach_received_event_subscription.context, error);",
                "// vulnerable line: 639: }",
                "// Line 640: ",
                "// Line 641:             if (error != NULL)",
                "// Line 642:             {",
                "// Line 643:                 set_link_state(link_instance, LINK_STATE_ERROR);",
                "// Line 644:                 error_destroy(error);",
                "// vulnerable line: 645: }",
                "// Line 646:             else",
                "// Line 647:             {",
                "// Line 648:                 set_link_state(link_instance, LINK_STATE_DETACHED);",
                "// vulnerable line: 649: }",
                "// Line 650: ",
                "// Line 651:             detach_destroy(detach);",
                "// vulnerable line: 652: }",
                "// vulnerable line: 653: }",
                "// vulnerable line: 654: }",
                "// Line 655: ",
                "// Line 656: static void on_session_state_changed(void* context, SESSION_STATE new_session_state, SESSION_STATE previous_session_state)",
                "// Line 657: {",
                "// Line 658:     LINK_INSTANCE* link_instance = (LINK_INSTANCE*)context;",
                "// Line 659:     (void)previous_session_state;",
                "// Line 660: ",
                "// Line 661:     if (new_session_state == SESSION_STATE_MAPPED)",
                "// Line 662:     {",
                "// Line 663:         if ((link_instance->link_state == LINK_STATE_DETACHED) && (!link_instance->is_closed))",
                "// Line 664:         {",
                "// Line 665:             if (send_attach(link_instance, link_instance->name, 0, link_instance->role) == 0)",
                "// Line 666:             {",
                "// Line 667:                 set_link_state(link_instance, LINK_STATE_HALF_ATTACHED_ATTACH_SENT);",
                "// vulnerable line: 668: }",
                "// vulnerable line: 669: }",
                "// vulnerable line: 670: }",
                "// Line 671:     else if (new_session_state == SESSION_STATE_DISCARDING)",
                "// Line 672:     {",
                "// Line 673:         remove_all_pending_deliveries(link_instance, true);",
                "// Line 674:         set_link_state(link_instance, LINK_STATE_DETACHED);",
                "// vulnerable line: 675: }",
                "// Line 676:     else if (new_session_state == SESSION_STATE_ERROR)",
                "// Line 677:     {",
                "// Line 678:         remove_all_pending_deliveries(link_instance, true);",
                "// Line 679:         set_link_state(link_instance, LINK_STATE_ERROR);",
                "// vulnerable line: 680: }",
                "// vulnerable line: 681: }",
                "// Line 682: ",
                "// Line 683: static void on_session_flow_on(void* context)",
                "// Line 684: {",
                "// Line 685:     LINK_INSTANCE* link_instance = (LINK_INSTANCE*)context;",
                "// Line 686:     if (link_instance->role == role_sender)",
                "// Line 687:     {",
                "// Line 688:         link_instance->on_link_flow_on(link_instance->callback_context);",
                "// vulnerable line: 689: }",
                "// vulnerable line: 690: }",
                "// Line 691: ",
                "// Line 692: static void on_send_complete(void* context, IO_SEND_RESULT send_result)",
                "// Line 693: {",
                "// Line 694:     LIST_ITEM_HANDLE delivery_instance_list_item = (LIST_ITEM_HANDLE)context;",
                "// Line 695:     ASYNC_OPERATION_HANDLE pending_delivery_operation = (ASYNC_OPERATION_HANDLE)singlylinkedlist_item_get_value(delivery_instance_list_item);",
                "// Line 696:     if (pending_delivery_operation != NULL)",
                "// Line 697:     {",
                "// Line 698:         DELIVERY_INSTANCE* delivery_instance = (DELIVERY_INSTANCE*)GET_ASYNC_OPERATION_CONTEXT(DELIVERY_INSTANCE, pending_delivery_operation);",
                "// Line 699:         if (delivery_instance != NULL)",
                "// Line 700:         {",
                "// Line 701:             LINK_HANDLE link = (LINK_HANDLE)delivery_instance->link;",
                "// Line 702: ",
                "// Line 703:             (void)send_result;",
                "// Line 704:             if (link != NULL && ",
                "// Line 705:                 link->snd_settle_mode == sender_settle_mode_settled)",
                "// Line 706:             {",
                "// Line 707:                 delivery_instance->on_delivery_settled(delivery_instance->callback_context, delivery_instance->delivery_id, send_result == IO_SEND_OK ? LINK_DELIVERY_SETTLE_REASON_SETTLED : LINK_DELIVERY_SETTLE_REASON_NOT_DELIVERED, NULL);",
                "// Line 708:                 async_operation_destroy(pending_delivery_operation);",
                "// Line 709:                 (void)singlylinkedlist_remove(link->pending_deliveries, delivery_instance_list_item);",
                "// vulnerable line: 710: }",
                "// vulnerable line: 711: }",
                "// vulnerable line: 712: }",
                "// vulnerable line: 713: }",
                "// Line 714: ",
                "// Line 715: static void on_link_endpoint_destroyed(LINK_ENDPOINT_HANDLE handle, void* context)",
                "// Line 716: {",
                "// Line 717:     if (context != NULL)",
                "// Line 718:     {",
                "// Line 719:         LINK_INSTANCE* link = (LINK_INSTANCE*)context;",
                "// Line 720: ",
                "// Line 721:         if (link->link_endpoint == handle)",
                "// Line 722:         {",
                "// Line 723:             // In this case the link endpoint has been destroyed by the session, and link should not try to free it.",
                "// Line 724:             link->link_endpoint = NULL;",
                "// vulnerable line: 725: }",
                "// vulnerable line: 726: }",
                "// vulnerable line: 727: }",
                "// Line 728: ",
                "// Line 729: LINK_HANDLE link_create(SESSION_HANDLE session, const char* name, role role, AMQP_VALUE source, AMQP_VALUE target)",
                "// Line 730: {",
                "// Line 731:     LINK_INSTANCE* result = (LINK_INSTANCE*)calloc(1, sizeof(LINK_INSTANCE));",
                "// Line 732:     if (result == NULL)",
                "// Line 733:     {",
                "// Line 734:         LogError(\"Cannot create link\");",
                "// vulnerable line: 735: }",
                "// Line 736:     else",
                "// Line 737:     {",
                "// Line 738:         result->link_state = LINK_STATE_DETACHED;",
                "// Line 739:         result->previous_link_state = LINK_STATE_DETACHED;",
                "// Line 740:         result->role = role;",
                "// Line 741:         result->source = amqpvalue_clone(source);",
                "// Line 742:         result->target = amqpvalue_clone(target);",
                "// Line 743:         result->session = session;",
                "// Line 744:         result->handle = 0;",
                "// Line 745:         result->snd_settle_mode = sender_settle_mode_unsettled;",
                "// Line 757:         result->received_delivery_id = 0;",
                "// Line 758:         result->on_link_detach_received_event_subscription.on_link_detach_received = NULL;",
                "// Line 759:         result->on_link_detach_received_event_subscription.context = NULL;",
                "// Line 760: ",
                "// Line 761:         result->tick_counter = tickcounter_create();",
                "// Line 762:         if (result->tick_counter == NULL)",
                "// Line 763:         {",
                "// Line 764:             LogError(\"Cannot create tick counter for link\");",
                "// Line 765:             free(result);",
                "// Line 766:             result = NULL;",
                "// vulnerable line: 767: }",
                "// Line 768:         else",
                "// Line 769:         {",
                "// Line 770:             result->pending_deliveries = singlylinkedlist_create();",
                "// Line 771:             if (result->pending_deliveries == NULL)",
                "// Line 772:             {",
                "// Line 773:                 LogError(\"Cannot create pending deliveries list\");",
                "// Line 774:                 tickcounter_destroy(result->tick_counter);",
                "// Line 775:                 free(result);",
                "// Line 776:                 result = NULL;",
                "// vulnerable line: 777: }",
                "// Line 778:             else",
                "// Line 779:             {",
                "// Line 780:                 size_t name_length = strlen(name);",
                "// Line 781:                 result->name = (char*)malloc(name_length + 1);",
                "// Line 782:                 if (result->name == NULL)",
                "// Line 783:                 {",
                "// Line 784:                     LogError(\"Cannot allocate memory for link name\");",
                "// Line 785:                     tickcounter_destroy(result->tick_counter);",
                "// Line 786:                     singlylinkedlist_destroy(result->pending_deliveries);",
                "// Line 787:                     free(result);",
                "// Line 788:                     result = NULL;",
                "// vulnerable line: 789: }",
                "// Line 790:                 else",
                "// Line 791:                 {",
                "// Line 792:                     result->on_link_state_changed = NULL;",
                "// Line 793:                     result->callback_context = NULL;",
                "// Line 794:                     set_link_state(result, LINK_STATE_DETACHED);",
                "// Line 795: ",
                "// Line 796:                     (void)memcpy(result->name, name, name_length + 1);",
                "// Line 797:                     result->link_endpoint = session_create_link_endpoint(session, name);",
                "// Line 798:                     if (result->link_endpoint == NULL)",
                "// Line 799:                     {",
                "// Line 800:                         LogError(\"Cannot create link endpoint\");",
                "// Line 801:                         tickcounter_destroy(result->tick_counter);",
                "// Line 802:                         singlylinkedlist_destroy(result->pending_deliveries);",
                "// Line 803:                         free(result->name);",
                "// Line 804:                         free(result);",
                "// Line 805:                         result = NULL;",
                "// vulnerable line: 806: }",
                "// Line 807:                     else",
                "// Line 808:                     {",
                "// Line 809:                         // This ensures link.c gets notified if the link endpoint is destroyed",
                "// Line 810:                         // by uamqp (due to a DETACH from the hub, e.g.) to prevent a double free.",
                "// Line 811:                         session_set_link_endpoint_callback(result->link_endpoint, on_link_endpoint_destroyed, result);",
                "// vulnerable line: 812: }",
                "// vulnerable line: 813: }",
                "// vulnerable line: 814: }",
                "// vulnerable line: 815: }",
                "// vulnerable line: 816: }",
                "// Line 817: ",
                "// Line 818:     return result;",
                "// vulnerable line: 819: }",
                "// Line 820: ",
                "// Line 821: LINK_HANDLE link_create_from_endpoint(SESSION_HANDLE session, LINK_ENDPOINT_HANDLE link_endpoint, const char* name, role role, AMQP_VALUE source, AMQP_VALUE target)",
                "// Line 822: {",
                "// Line 823:     LINK_INSTANCE* result = (LINK_INSTANCE*)calloc(1, sizeof(LINK_INSTANCE));",
                "// Line 824:     if (result == NULL)",
                "// Line 825:     {",
                "// Line 826:         LogError(\"Cannot create link\");",
                "// vulnerable line: 827: }",
                "// Line 828:     else",
                "// Line 829:     {",
                "// Line 830:         result->link_state = LINK_STATE_DETACHED;",
                "// Line 831:         result->previous_link_state = LINK_STATE_DETACHED;",
                "// Line 832:         result->session = session;",
                "// Line 833:         result->handle = 0;",
                "// Line 834:         result->snd_settle_mode = sender_settle_mode_unsettled;",
                "// Line 835:         result->rcv_settle_mode = receiver_settle_mode_first;",
                "// Line 836:         result->delivery_count = 0;",
                "// Line 837:         result->initial_delivery_count = 0;",
                "// Line 845:         result->received_payload_size = 0;",
                "// Line 846:         result->received_delivery_id = 0;",
                "// Line 847:         result->source = amqpvalue_clone(target);",
                "// Line 848:         result->target = amqpvalue_clone(source);",
                "// Line 849:         result->on_link_detach_received_event_subscription.on_link_detach_received = NULL;",
                "// Line 850:         result->on_link_detach_received_event_subscription.context = NULL;",
                "// Line 851: ",
                "// Line 852:         if (role == role_sender)",
                "// Line 853:         {",
                "// Line 854:             result->role = role_receiver;",
                "// vulnerable line: 855: }",
                "// Line 856:         else",
                "// Line 857:         {",
                "// Line 858:             result->role = role_sender;",
                "// vulnerable line: 859: }",
                "// Line 860: ",
                "// Line 861:         result->tick_counter = tickcounter_create();",
                "// Line 862:         if (result->tick_counter == NULL)",
                "// Line 863:         {",
                "// Line 864:             LogError(\"Cannot create tick counter for link\");",
                "// Line 865:             free(result);",
                "// Line 866:             result = NULL;",
                "// vulnerable line: 867: }",
                "// Line 868:         else",
                "// Line 869:         {",
                "// Line 870:             result->pending_deliveries = singlylinkedlist_create();",
                "// Line 871:             if (result->pending_deliveries == NULL)",
                "// Line 872:             {",
                "// Line 873:                 LogError(\"Cannot create pending deliveries list\");",
                "// Line 874:                 tickcounter_destroy(result->tick_counter);",
                "// Line 875:                 free(result);",
                "// Line 876:                 result = NULL;",
                "// vulnerable line: 877: }",
                "// Line 878:             else",
                "// Line 879:             {",
                "// Line 880:                 size_t name_length = strlen(name);",
                "// Line 881:                 result->name = (char*)malloc(name_length + 1);",
                "// Line 882:                 if (result->name == NULL)",
                "// Line 883:                 {",
                "// Line 884:                     LogError(\"Cannot allocate memory for link name\");",
                "// Line 885:                     tickcounter_destroy(result->tick_counter);",
                "// Line 886:                     singlylinkedlist_destroy(result->pending_deliveries);",
                "// Line 887:                     free(result);",
                "// Line 888:                     result = NULL;",
                "// vulnerable line: 889: }",
                "// Line 890:                 else",
                "// Line 891:                 {",
                "// Line 892:                     (void)memcpy(result->name, name, name_length + 1);",
                "// Line 893:                     result->on_link_state_changed = NULL;",
                "// Line 894:                     result->callback_context = NULL;",
                "// Line 895:                     result->link_endpoint = link_endpoint;",
                "// vulnerable line: 896: }",
                "// vulnerable line: 897: }",
                "// vulnerable line: 898: }",
                "// vulnerable line: 899: }",
                "// Line 900: ",
                "// Line 901:     return result;",
                "// vulnerable line: 902: }",
                "// Line 903: ",
                "// Line 904: void link_destroy(LINK_HANDLE link)",
                "// Line 905: {",
                "// Line 906:     if (link == NULL)",
                "// Line 907:     {",
                "// Line 908:         LogError(\"NULL link\");",
                "// vulnerable line: 909: }",
                "// Line 910:     else",
                "// Line 911:     {",
                "// Line 912:         remove_all_pending_deliveries((LINK_INSTANCE*)link, false);",
                "// Line 913:         tickcounter_destroy(link->tick_counter);",
                "// Line 914: ",
                "// Line 915:         link->on_link_state_changed = NULL;",
                "// Line 916:         (void)link_detach(link, true, NULL, NULL, NULL);",
                "// Line 917:         // This is required to suppress the link destroyed callback, since this function is ",
                "// Line 918:         // actively requesting that (in the following line).",
                "// Line 919:         session_set_link_endpoint_callback(link->link_endpoint, NULL, NULL);",
                "// Line 920:         session_destroy_link_endpoint(link->link_endpoint);",
                "// Line 921:         amqpvalue_destroy(link->source);",
                "// Line 922:         amqpvalue_destroy(link->target);",
                "// Line 923: ",
                "// Line 924:         if (link->name != NULL)",
                "// Line 925:         {",
                "// Line 926:             free(link->name);",
                "// vulnerable line: 927: }",
                "// Line 928: ",
                "// Line 929:         if (link->attach_properties != NULL)",
                "// Line 930:         {",
                "// Line 931:             amqpvalue_destroy(link->attach_properties);",
                "// vulnerable line: 932: }",
                "// Line 933: ",
                "// Line 934:         if (link->received_payload != NULL)",
                "// Line 935:         {",
                "// Line 936:             free(link->received_payload);",
                "// vulnerable line: 937: }",
                "// Line 938: ",
                "// Line 939:         free(link);",
                "// vulnerable line: 940: }",
                "// vulnerable line: 941: }",
                "// Line 942: ",
                "// Line 943: int link_set_snd_settle_mode(LINK_HANDLE link, sender_settle_mode snd_settle_mode)",
                "// Line 944: {",
                "// Line 945:     int result;",
                "// Line 946: ",
                "// Line 947:     if (link == NULL)",
                "// Line 948:     {",
                "// Line 949:         LogError(\"NULL link\");",
                "// Line 950:         result = MU_FAILURE;",
                "// vulnerable line: 951: }",
                "// Line 952:     else",
                "// Line 953:     {",
                "// Line 954:         link->snd_settle_mode = snd_settle_mode;",
                "// Line 955:         result = 0;",
                "// vulnerable line: 956: }",
                "// Line 957: ",
                "// Line 958:     return result;",
                "// vulnerable line: 959: }",
                "// Line 960: ",
                "// Line 961: int link_get_snd_settle_mode(LINK_HANDLE link, sender_settle_mode* snd_settle_mode)",
                "// Line 962: {",
                "// Line 963:     int result;",
                "// Line 964: ",
                "// Line 965:     if ((link == NULL) ||",
                "// Line 966:         (snd_settle_mode == NULL))",
                "// Line 967:     {",
                "// Line 968:         LogError(\"Bad arguments: link = %p, snd_settle_mode = %p\",",
                "// Line 969:             link, snd_settle_mode);",
                "// Line 970:         result = MU_FAILURE;",
                "// vulnerable line: 971: }",
                "// Line 972:     else",
                "// Line 973:     {",
                "// Line 974:         *snd_settle_mode = link->snd_settle_mode;",
                "// Line 975: ",
                "// Line 976:         result = 0;",
                "// vulnerable line: 977: }",
                "// Line 978: ",
                "// Line 979:     return result;",
                "// vulnerable line: 980: }",
                "// Line 981: ",
                "// Line 982: int link_set_rcv_settle_mode(LINK_HANDLE link, receiver_settle_mode rcv_settle_mode)",
                "// Line 983: {",
                "// Line 984:     int result;",
                "// Line 985: ",
                "// Line 986:     if (link == NULL)",
                "// Line 987:     {",
                "// Line 988:         LogError(\"NULL link\");",
                "// Line 989:         result = MU_FAILURE;",
                "// vulnerable line: 990: }",
                "// Line 991:     else",
                "// Line 992:     {",
                "// Line 993:         link->rcv_settle_mode = rcv_settle_mode;",
                "// Line 994:         result = 0;",
                "// vulnerable line: 995: }",
                "// Line 996: ",
                "// Line 997:     return result;",
                "// vulnerable line: 998: }",
                "// Line 999: ",
                "// Line 1000: int link_get_rcv_settle_mode(LINK_HANDLE link, receiver_settle_mode* rcv_settle_mode)",
                "// Line 1001: {",
                "// Line 1002:     int result;",
                "// Line 1003: ",
                "// Line 1004:     if ((link == NULL) ||",
                "// Line 1005:         (rcv_settle_mode == NULL))",
                "// Line 1006:     {",
                "// Line 1007:         LogError(\"Bad arguments: link = %p, rcv_settle_mode = %p\",",
                "// Line 1008:             link, rcv_settle_mode);",
                "// Line 1009:         result = MU_FAILURE;",
                "// vulnerable line: 1010: }",
                "// Line 1011:     else",
                "// Line 1012:     {",
                "// Line 1013:         *rcv_settle_mode = link->rcv_settle_mode;",
                "// Line 1014:         result = 0;",
                "// vulnerable line: 1015: }",
                "// Line 1016: ",
                "// Line 1017:     return result;",
                "// vulnerable line: 1018: }",
                "// Line 1019: ",
                "// Line 1020: int link_set_initial_delivery_count(LINK_HANDLE link, sequence_no initial_delivery_count)",
                "// Line 1021: {",
                "// Line 1022:     int result;",
                "// Line 1023: ",
                "// Line 1024:     if (link == NULL)",
                "// Line 1025:     {",
                "// Line 1026:         LogError(\"NULL link\");",
                "// Line 1027:         result = MU_FAILURE;",
                "// vulnerable line: 1028: }",
                "// Line 1029:     else",
                "// Line 1030:     {",
                "// Line 1031:         link->initial_delivery_count = initial_delivery_count;",
                "// Line 1032:         result = 0;",
                "// vulnerable line: 1033: }",
                "// Line 1034: ",
                "// Line 1035:     return result;",
                "// vulnerable line: 1036: }",
                "// Line 1037: ",
                "// Line 1038: int link_get_initial_delivery_count(LINK_HANDLE link, sequence_no* initial_delivery_count)",
                "// Line 1039: {",
                "// Line 1040:     int result;",
                "// Line 1041: ",
                "// Line 1042:     if ((link == NULL) ||",
                "// Line 1043:         (initial_delivery_count == NULL))",
                "// Line 1044:     {",
                "// Line 1045:         LogError(\"Bad arguments: link = %p, initial_delivery_count = %p\",",
                "// Line 1046:             link, initial_delivery_count);",
                "// Line 1047:         result = MU_FAILURE;",
                "// vulnerable line: 1048: }",
                "// Line 1049:     else",
                "// Line 1050:     {",
                "// Line 1051:         *initial_delivery_count = link->initial_delivery_count;",
                "// Line 1052:         result = 0;",
                "// vulnerable line: 1053: }",
                "// Line 1054: ",
                "// Line 1055:     return result;",
                "// vulnerable line: 1056: }",
                "// Line 1057: ",
                "// Line 1058: int link_set_max_message_size(LINK_HANDLE link, uint64_t max_message_size)",
                "// Line 1059: {",
                "// Line 1060:     int result;",
                "// Line 1061: ",
                "// Line 1062:     if (link == NULL)",
                "// Line 1063:     {",
                "// Line 1064:         LogError(\"NULL link\");",
                "// Line 1065:         result = MU_FAILURE;",
                "// vulnerable line: 1066: }",
                "// Line 1067:     else",
                "// Line 1068:     {",
                "// Line 1069:         link->max_message_size = max_message_size;",
                "// Line 1070:         result = 0;",
                "// vulnerable line: 1071: }",
                "// Line 1072: ",
                "// Line 1073:     return result;",
                "// vulnerable line: 1074: }",
                "// Line 1075: ",
                "// Line 1076: int link_get_max_message_size(LINK_HANDLE link, uint64_t* max_message_size)",
                "// Line 1077: {",
                "// Line 1078:     int result;",
                "// Line 1079: ",
                "// Line 1080:     if ((link == NULL) ||",
                "// Line 1081:         (max_message_size == NULL))",
                "// Line 1082:     {",
                "// Line 1083:         LogError(\"Bad arguments: link = %p, max_message_size = %p\",",
                "// Line 1084:             link, max_message_size);",
                "// Line 1085:         result = MU_FAILURE;",
                "// vulnerable line: 1086: }",
                "// Line 1087:     else",
                "// Line 1088:     {",
                "// Line 1089:         *max_message_size = link->max_message_size;",
                "// Line 1090:         result = 0;",
                "// vulnerable line: 1091: }",
                "// Line 1092: ",
                "// Line 1093:     return result;",
                "// vulnerable line: 1094: }",
                "// Line 1095: ",
                "// Line 1096: int link_get_peer_max_message_size(LINK_HANDLE link, uint64_t* peer_max_message_size)",
                "// Line 1097: {",
                "// Line 1098:     int result;",
                "// Line 1099: ",
                "// Line 1100:     if ((link == NULL) ||",
                "// Line 1101:         (peer_max_message_size == NULL))",
                "// Line 1102:     {",
                "// Line 1103:         LogError(\"Bad arguments: link = %p, peer_max_message_size = %p\",",
                "// Line 1104:             link, peer_max_message_size);",
                "// Line 1105:         result = MU_FAILURE;",
                "// vulnerable line: 1106: }",
                "// Line 1107:     else if ((link->link_state != LINK_STATE_ATTACHED) &&",
                "// Line 1108:         (link->link_state != LINK_STATE_HALF_ATTACHED_ATTACH_RECEIVED))",
                "// Line 1109:     {",
                "// Line 1110:         LogError(\"Attempting to read peer max message size before it was received\");",
                "// Line 1111:         result = MU_FAILURE;",
                "// vulnerable line: 1112: }",
                "// Line 1113:     else",
                "// Line 1114:     {",
                "// Line 1115:         *peer_max_message_size = link->peer_max_message_size;",
                "// Line 1116:         result = 0;",
                "// vulnerable line: 1117: }",
                "// Line 1118: ",
                "// Line 1119:     return result;",
                "// vulnerable line: 1120: }",
                "// Line 1121: ",
                "// Line 1122: int link_set_attach_properties(LINK_HANDLE link, fields attach_properties)",
                "// Line 1123: {",
                "// Line 1124:     int result;",
                "// Line 1125: ",
                "// Line 1126:     if (link == NULL)",
                "// Line 1127:     {",
                "// Line 1128:         LogError(\"NULL link\");",
                "// Line 1129:         result = MU_FAILURE;",
                "// vulnerable line: 1130: }",
                "// Line 1131:     else",
                "// Line 1132:     {",
                "// Line 1133:         link->attach_properties = amqpvalue_clone(attach_properties);",
                "// Line 1134:         if (link->attach_properties == NULL)",
                "// Line 1135:         {",
                "// Line 1136:             LogError(\"Failed cloning attach properties\");",
                "// Line 1137:             result = MU_FAILURE;",
                "// vulnerable line: 1138: }",
                "// Line 1139:         else",
                "// Line 1140:         {",
                "// Line 1141:             result = 0;",
                "// vulnerable line: 1142: }",
                "// vulnerable line: 1143: }",
                "// Line 1144: ",
                "// Line 1145:     return result;",
                "// vulnerable line: 1146: }",
                "// Line 1147: ",
                "// Line 1148: int link_set_max_link_credit(LINK_HANDLE link, uint32_t max_link_credit)",
                "// Line 1149: {",
                "// Line 1150:     int result;",
                "// Line 1151: ",
                "// Line 1152:     if (link == NULL)",
                "// Line 1153:     {",
                "// Line 1154:         result = MU_FAILURE;",
                "// vulnerable line: 1155: }",
                "// Line 1156:     else",
                "// Line 1157:     {",
                "// Line 1158:         link->max_link_credit = max_link_credit;",
                "// Line 1159:         result = 0;",
                "// vulnerable line: 1160: }",
                "// Line 1161: ",
                "// Line 1162:     return result;",
                "// vulnerable line: 1163: }",
                "// Line 1164: ",
                "// Line 1165: int link_attach(LINK_HANDLE link, ON_TRANSFER_RECEIVED on_transfer_received, ON_LINK_STATE_CHANGED on_link_state_changed, ON_LINK_FLOW_ON on_link_flow_on, void* callback_context)",
                "// Line 1166: {",
                "// Line 1167:     int result;",
                "// Line 1168: ",
                "// Line 1169:     if (link == NULL)",
                "// Line 1170:     {",
                "// Line 1171:         LogError(\"NULL link\");",
                "// Line 1172:         result = MU_FAILURE;",
                "// vulnerable line: 1173: }",
                "// Line 1174:     else if (link->is_closed)",
                "// Line 1175:     {",
                "// Line 1176:         LogError(\"Already attached\");",
                "// Line 1177:         result = MU_FAILURE;",
                "// vulnerable line: 1178: }",
                "// Line 1179:     else",
                "// Line 1180:     {",
                "// Line 1181:         if (!link->is_underlying_session_begun)",
                "// Line 1182:         {",
                "// Line 1183:             link->on_link_state_changed = on_link_state_changed;",
                "// Line 1184:             link->on_transfer_received = on_transfer_received;",
                "// Line 1185:             link->on_link_flow_on = on_link_flow_on;",
                "// Line 1186:             link->callback_context = callback_context;",
                "// Line 1187: ",
                "// Line 1188:             if (session_begin(link->session) != 0)",
                "// Line 1189:             {",
                "// Line 1190:                 LogError(\"Begin session failed\");",
                "// Line 1191:                 result = MU_FAILURE;",
                "// vulnerable line: 1192: }",
                "// Line 1193:             else",
                "// Line 1194:             {",
                "// Line 1195:                 link->is_underlying_session_begun = true;",
                "// Line 1196: ",
                "// Line 1197:                 if (session_start_link_endpoint(link->link_endpoint, link_frame_received, on_session_state_changed, on_session_flow_on, link) != 0)",
                "// Line 1198:                 {",
                "// Line 1199:                     LogError(\"Binding link endpoint to session failed\");",
                "// Line 1200:                     result = MU_FAILURE;",
                "// vulnerable line: 1201: }",
                "// Line 1202:                 else",
                "// Line 1203:                 {",
                "// Line 1204:                     link->received_payload_size = 0;",
                "// Line 1205: ",
                "// Line 1206:                     result = 0;",
                "// vulnerable line: 1207: }",
                "// vulnerable line: 1208: }",
                "// vulnerable line: 1209: }",
                "// Line 1210:         else",
                "// Line 1211:         {",
                "// Line 1212:             result = 0;",
                "// vulnerable line: 1213: }",
                "// vulnerable line: 1214: }",
                "// Line 1215: ",
                "// Line 1216:     return result;",
                "// vulnerable line: 1217: }",
                "// Line 1218: ",
                "// Line 1219: int link_detach(LINK_HANDLE link, bool close, const char* error_condition, const char* error_description, AMQP_VALUE info)",
                "// Line 1220: {",
                "// Line 1221:     int result;",
                "// Line 1222: ",
                "// Line 1223:     (void)error_condition;",
                "// Line 1224:     (void)error_description;",
                "// Line 1225:     (void)info;",
                "// Line 1226: ",
                "// Line 1227:     if (link == NULL)",
                "// Line 1228:     {",
                "// Line 1229:         LogError(\"NULL link\");",
                "// Line 1230:         result = MU_FAILURE;",
                "// vulnerable line: 1231: }",
                "// Line 1232:     else if (link->is_closed)",
                "// Line 1233:     {",
                "// Line 1234:         result = 0;",
                "// vulnerable line: 1235: }",
                "// Line 1236:     else",
                "// Line 1237:     {",
                "// Line 1238:         ERROR_HANDLE error;",
                "// Line 1239: ",
                "// Line 1240:         if (error_condition != NULL)",
                "// Line 1241:         {",
                "// Line 1242:             error = error_create(error_condition);",
                "// Line 1243:             if (error == NULL)",
                "// Line 1244:             {",
                "// Line 1245:                 LogInfo(\"Cannot create error for detach, detaching without error anyhow\");",
                "// vulnerable line: 1246: }",
                "// Line 1247:             else",
                "// Line 1248:             {",
                "// Line 1249:                 if (error_description != NULL)",
                "// Line 1250:                 {",
                "// Line 1251:                     if (error_set_description(error, error_description) != 0)",
                "// Line 1252:                     {",
                "// Line 1253:                         LogInfo(\"Cannot set error description on detach error, detaching anyhow\");",
                "// vulnerable line: 1254: }",
                "// vulnerable line: 1255: }",
                "// Line 1256: ",
                "// Line 1257:                 if (info != NULL)",
                "// Line 1258:                 {",
                "// Line 1259:                     if (error_set_info(error, info) != 0)",
                "// Line 1260:                     {",
                "// Line 1261:                         LogInfo(\"Cannot set info map on detach error, detaching anyhow\");",
                "// vulnerable line: 1262: }",
                "// vulnerable line: 1263: }",
                "// vulnerable line: 1264: }",
                "// vulnerable line: 1265: }",
                "// Line 1266:         else",
                "// Line 1267:         {",
                "// Line 1268:             error = NULL;",
                "// vulnerable line: 1269: }",
                "// Line 1270: ",
                "// Line 1271:         switch (link->link_state)",
                "// Line 1272:         {",
                "// Line 1273:         case LINK_STATE_HALF_ATTACHED_ATTACH_SENT:",
                "// Line 1274:         case LINK_STATE_HALF_ATTACHED_ATTACH_RECEIVED:",
                "// Line 1275:             /* Sending detach when remote is not yet attached */",
                "// Line 1276:             if (send_detach(link, close, error) != 0)",
                "// Line 1277:             {",
                "// Line 1278:                 LogError(\"Sending detach frame failed\");",
                "// Line 1279:                 result = MU_FAILURE;",
                "// vulnerable line: 1280: }",
                "// Line 1281:             else",
                "// Line 1282:             {",
                "// Line 1283:                 set_link_state(link, LINK_STATE_DETACHED);",
                "// Line 1284:                 result = 0;",
                "// vulnerable line: 1285: }",
                "// Line 1286:             break;",
                "// Line 1287: ",
                "// Line 1288:         case LINK_STATE_ATTACHED:",
                "// Line 1289:             /* Send detach and wait for remote to respond */",
                "// Line 1290:             if (send_detach(link, close, error) != 0)",
                "// Line 1291:             {",
                "// Line 1292:                 LogError(\"Sending detach frame failed\");",
                "// Line 1293:                 result = MU_FAILURE;",
                "// vulnerable line: 1294: }",
                "// Line 1295:             else",
                "// Line 1296:             {",
                "// Line 1297:                 set_link_state(link, LINK_STATE_HALF_ATTACHED_ATTACH_SENT);",
                "// Line 1298:                 result = 0;",
                "// vulnerable line: 1299: }",
                "// Line 1300:             break;",
                "// Line 1301: ",
                "// Line 1302:         case LINK_STATE_DETACHED:",
                "// Line 1303:             /* Already detached */",
                "// Line 1304:             result = 0;",
                "// Line 1305:             break;",
                "// Line 1306: ",
                "// Line 1307:         default:",
                "// Line 1308:         case LINK_STATE_ERROR:",
                "// Line 1309:             /* Already detached and in error state */",
                "// Line 1310:             result = MU_FAILURE;",
                "// Line 1311:             break;",
                "// vulnerable line: 1312: }",
                "// Line 1313: ",
                "// Line 1314:         if (error != NULL)",
                "// Line 1315:         {",
                "// Line 1316:             error_destroy(error);",
                "// vulnerable line: 1317: }",
                "// vulnerable line: 1318: }",
                "// Line 1319: ",
                "// Line 1320:     return result;",
                "// vulnerable line: 1321: }",
                "// Line 1322: ",
                "// Line 1323: static bool remove_pending_delivery_condition_function(const void* item, const void* match_context, bool* continue_processing)",
                "// Line 1324: {",
                "// Line 1325:     bool result;",
                "// Line 1326: ",
                "// Line 1327:     if (item == match_context)",
                "// Line 1328:     {",
                "// Line 1329:         result = true;",
                "// Line 1330:         *continue_processing = false;",
                "// vulnerable line: 1331: }",
                "// Line 1332:     else",
                "// Line 1333:     {",
                "// Line 1334:         result = false;",
                "// Line 1335:         *continue_processing = true;",
                "// vulnerable line: 1336: }",
                "// Line 1337: ",
                "// Line 1338:     return result;",
                "// vulnerable line: 1339: }",
                "// Line 1340: ",
                "// Line 1341: static void link_transfer_cancel_handler(ASYNC_OPERATION_HANDLE link_transfer_operation)",
                "// Line 1342: {",
                "// Line 1343:     DELIVERY_INSTANCE* pending_delivery = GET_ASYNC_OPERATION_CONTEXT(DELIVERY_INSTANCE, link_transfer_operation);",
                "// Line 1344:     if (pending_delivery->on_delivery_settled != NULL)",
                "// Line 1345:     {",
                "// Line 1346:         pending_delivery->on_delivery_settled(pending_delivery->callback_context, pending_delivery->delivery_id, LINK_DELIVERY_SETTLE_REASON_CANCELLED, NULL);",
                "// vulnerable line: 1347: }",
                "// Line 1348: ",
                "// Line 1349:     (void)singlylinkedlist_remove_if(((LINK_HANDLE)pending_delivery->link)->pending_deliveries, remove_pending_delivery_condition_function, link_transfer_operation);",
                "// Line 1350: ",
                "// Line 1351:     async_operation_destroy(link_transfer_operation);",
                "// vulnerable line: 1352: }",
                "// Line 1353: ",
                "// Line 1354: ASYNC_OPERATION_HANDLE link_transfer_async(LINK_HANDLE link, message_format message_format, PAYLOAD* payloads, size_t payload_count, ON_DELIVERY_SETTLED on_delivery_settled, void* callback_context, LINK_TRANSFER_RESULT* link_transfer_error, tickcounter_ms_t timeout)",
                "// Line 1355: {",
                "// Line 1356:     ASYNC_OPERATION_HANDLE result;",
                "// Line 1357: ",
                "// Line 1358:     if ((link == NULL) ||",
                "// Line 1359:         (link_transfer_error == NULL))",
                "// Line 1360:     {",
                "// Line 1361:         if (link_transfer_error != NULL)",
                "// Line 1362:         {",
                "// Line 1363:             *link_transfer_error = LINK_TRANSFER_ERROR;",
                "// vulnerable line: 1364: }",
                "// Line 1365: ",
                "// Line 1366:         LogError(\"Invalid arguments: link = %p, link_transfer_error = %p\",",
                "// Line 1367:             link, link_transfer_error);",
                "// Line 1368:         result = NULL;",
                "// vulnerable line: 1369: }",
                "// Line 1370:     else",
                "// Line 1371:     {",
                "// Line 1372:         if (link->role != role_sender)",
                "// Line 1373:         {",
                "// Line 1374:             LogError(\"Link is not a sender link\");",
                "// Line 1375:             *link_transfer_error = LINK_TRANSFER_ERROR;",
                "// Line 1376:             result = NULL;",
                "// vulnerable line: 1377: }",
                "// Line 1378:         else if (link->link_state != LINK_STATE_ATTACHED)",
                "// Line 1379:         {",
                "// Line 1380:             LogError(\"Link is not attached\");",
                "// Line 1381:             *link_transfer_error = LINK_TRANSFER_ERROR;",
                "// Line 1382:             result = NULL;",
                "// vulnerable line: 1383: }",
                "// Line 1384:         else if (link->current_link_credit == 0)",
                "// Line 1385:         {",
                "// Line 1386:             *link_transfer_error = LINK_TRANSFER_BUSY;",
                "// Line 1387:             result = NULL;",
                "// vulnerable line: 1388: }",
                "// Line 1389:         else",
                "// Line 1390:         {",
                "// Line 1391:             result = CREATE_ASYNC_OPERATION(DELIVERY_INSTANCE, link_transfer_cancel_handler);",
                "// Line 1392:             if (result == NULL)",
                "// Line 1393:             {",
                "// Line 1394:                 LogError(\"Error creating async operation\");",
                "// Line 1395:                 *link_transfer_error = LINK_TRANSFER_ERROR;",
                "// vulnerable line: 1396: }",
                "// Line 1397:             else",
                "// Line 1398:             {",
                "// Line 1399:                 TRANSFER_HANDLE transfer = transfer_create(0);",
                "// Line 1400:                 if (transfer == NULL)",
                "// Line 1401:                 {",
                "// Line 1402:                     LogError(\"Error creating transfer\");",
                "// Line 1403:                     *link_transfer_error = LINK_TRANSFER_ERROR;",
                "// Line 1404:                     async_operation_destroy(result);",
                "// Line 1405:                     result = NULL;",
                "// vulnerable line: 1406: }",
                "// Line 1407:                 else",
                "// Line 1408:                 {",
                "// Line 1409:                     sequence_no delivery_count = link->delivery_count + 1;",
                "// Line 1410:                     unsigned char delivery_tag_bytes[sizeof(delivery_count)];",
                "// Line 1411:                     delivery_tag delivery_tag;",
                "// Line 1412:                     bool settled;",
                "// Line 1413: ",
                "// Line 1414:                     (void)memcpy(delivery_tag_bytes, &delivery_count, sizeof(delivery_count));",
                "// Line 1415: ",
                "// Line 1416:                     delivery_tag.bytes = &delivery_tag_bytes;",
                "// Line 1417:                     delivery_tag.length = sizeof(delivery_tag_bytes);",
                "// Line 1418: ",
                "// Line 1419:                     if (link->snd_settle_mode == sender_settle_mode_unsettled)",
                "// Line 1420:                     {",
                "// Line 1421:                         settled = false;",
                "// vulnerable line: 1422: }",
                "// Line 1423:                     else",
                "// Line 1424:                     {",
                "// Line 1425:                         settled = true;",
                "// vulnerable line: 1426: }",
                "// Line 1427: ",
                "// Line 1428:                     if (transfer_set_delivery_tag(transfer, delivery_tag) != 0)",
                "// Line 1429:                     {",
                "// Line 1430:                         LogError(\"Failed setting delivery tag\");",
                "// Line 1431:                         *link_transfer_error = LINK_TRANSFER_ERROR;",
                "// Line 1432:                         async_operation_destroy(result);",
                "// Line 1433:                         result = NULL;",
                "// vulnerable line: 1434: }",
                "// Line 1435:                     else if (transfer_set_message_format(transfer, message_format) != 0)",
                "// Line 1436:                     {",
                "// Line 1437:                         LogError(\"Failed setting message format\");",
                "// Line 1438:                         *link_transfer_error = LINK_TRANSFER_ERROR;",
                "// Line 1439:                         async_operation_destroy(result);",
                "// Line 1440:                         result = NULL;",
                "// vulnerable line: 1441: }",
                "// Line 1442:                     else if (transfer_set_settled(transfer, settled) != 0)",
                "// Line 1443:                     {",
                "// Line 1444:                         LogError(\"Failed setting settled flag\");",
                "// Line 1445:                         *link_transfer_error = LINK_TRANSFER_ERROR;",
                "// Line 1446:                         async_operation_destroy(result);",
                "// Line 1447:                         result = NULL;",
                "// vulnerable line: 1448: }",
                "// Line 1449:                     else",
                "// Line 1450:                     {",
                "// Line 1451:                         AMQP_VALUE transfer_value = amqpvalue_create_transfer(transfer);",
                "// Line 1452:                         if (transfer_value == NULL)",
                "// Line 1453:                         {",
                "// Line 1454:                             LogError(\"Failed creating transfer performative AMQP value\");",
                "// Line 1455:                             *link_transfer_error = LINK_TRANSFER_ERROR;",
                "// Line 1456:                             async_operation_destroy(result);",
                "// Line 1457:                             result = NULL;",
                "// vulnerable line: 1458: }",
                "// Line 1459:                         else",
                "// Line 1460:                         {",
                "// Line 1461:                             DELIVERY_INSTANCE* pending_delivery = GET_ASYNC_OPERATION_CONTEXT(DELIVERY_INSTANCE, result);",
                "// Line 1462:                             if (pending_delivery == NULL)",
                "// Line 1463:                             {",
                "// Line 1464:                                 LogError(\"Failed getting pending delivery\");",
                "// Line 1465:                                 *link_transfer_error = LINK_TRANSFER_ERROR;",
                "// Line 1466:                                 async_operation_destroy(result);",
                "// Line 1467:                                 result = NULL;",
                "// vulnerable line: 1468: }",
                "// Line 1469:                             else",
                "// Line 1470:                             {",
                "// Line 1471:                                 if (tickcounter_get_current_ms(link->tick_counter, &pending_delivery->start_tick) != 0)",
                "// Line 1472:                                 {",
                "// Line 1473:                                     LogError(\"Failed getting current tick\");",
                "// Line 1474:                                     *link_transfer_error = LINK_TRANSFER_ERROR;",
                "// Line 1475:                                     async_operation_destroy(result);",
                "// Line 1476:                                     result = NULL;",
                "// vulnerable line: 1477: }",
                "// Line 1478:                                 else",
                "// Line 1479:                                 {",
                "// Line 1480:                                     LIST_ITEM_HANDLE delivery_instance_list_item;",
                "// Line 1481:                                     pending_delivery->timeout = timeout;",
                "// Line 1482:                                     pending_delivery->on_delivery_settled = on_delivery_settled;",
                "// Line 1483:                                     pending_delivery->callback_context = callback_context;",
                "// Line 1484:                                     pending_delivery->link = link;",
                "// Line 1485:                                     delivery_instance_list_item = singlylinkedlist_add(link->pending_deliveries, result);",
                "// Line 1486: ",
                "// Line 1487:                                     if (delivery_instance_list_item == NULL)",
                "// Line 1488:                                     {",
                "// Line 1489:                                         LogError(\"Failed adding delivery to list\");",
                "// Line 1490:                                         *link_transfer_error = LINK_TRANSFER_ERROR;",
                "// Line 1491:                                         async_operation_destroy(result);",
                "// Line 1492:                                         result = NULL;",
                "// vulnerable line: 1493: }",
                "// Line 1494:                                     else",
                "// Line 1495:                                     {",
                "// Line 1496:                                         /* here we should feed data to the transfer frame */",
                "// Line 1497:                                         switch (session_send_transfer(link->link_endpoint, transfer, payloads, payload_count, &pending_delivery->delivery_id, (settled) ? on_send_complete : NULL, delivery_instance_list_item))",
                "// Line 1498:                                         {",
                "// Line 1499:                                         default:",
                "// Line 1500:                                         case SESSION_SEND_TRANSFER_ERROR:",
                "// Line 1501:                                             LogError(\"Failed session send transfer\");",
                "// Line 1502:                                             if (singlylinkedlist_remove(link->pending_deliveries, delivery_instance_list_item) != 0)",
                "// Line 1503:                                             {",
                "// Line 1504:                                                 LogError(\"Error removing pending delivery from the list\");",
                "// vulnerable line: 1505: }",
                "// Line 1506: ",
                "// Line 1507:                                             *link_transfer_error = LINK_TRANSFER_ERROR;",
                "// Line 1508:                                             async_operation_destroy(result);",
                "// Line 1509:                                             result = NULL;",
                "// Line 1510:                                             break;",
                "// Line 1511: ",
                "// Line 1512:                                         case SESSION_SEND_TRANSFER_BUSY:",
                "// Line 1513:                                             /* Ensure we remove from list again since sender will attempt to transfer again on flow on */",
                "// Line 1514:                                             LogError(\"Failed session send transfer\");",
                "// Line 1515:                                             if (singlylinkedlist_remove(link->pending_deliveries, delivery_instance_list_item) != 0)",
                "// Line 1516:                                             {",
                "// Line 1517:                                                 LogError(\"Error removing pending delivery from the list\");",
                "// vulnerable line: 1518: }",
                "// Line 1519: ",
                "// Line 1520:                                             *link_transfer_error = LINK_TRANSFER_BUSY;",
                "// Line 1521:                                             async_operation_destroy(result);",
                "// Line 1522:                                             result = NULL;",
                "// Line 1523:                                             break;",
                "// Line 1524: ",
                "// Line 1525:                                         case SESSION_SEND_TRANSFER_OK:",
                "// Line 1526:                                             link->delivery_count = delivery_count;",
                "// Line 1527:                                             link->current_link_credit--;",
                "// Line 1528:                                             break;",
                "// vulnerable line: 1529: }",
                "// vulnerable line: 1530: }",
                "// vulnerable line: 1531: }",
                "// vulnerable line: 1532: }",
                "// Line 1533: ",
                "// Line 1534:                             amqpvalue_destroy(transfer_value);",
                "// vulnerable line: 1535: }",
                "// vulnerable line: 1536: }",
                "// Line 1537: ",
                "// Line 1538:                     transfer_destroy(transfer);",
                "// vulnerable line: 1539: }",
                "// vulnerable line: 1540: }",
                "// vulnerable line: 1541: }",
                "// vulnerable line: 1542: }",
                "// Line 1543: ",
                "// Line 1544:     return result;",
                "// vulnerable line: 1545: }",
                "// Line 1546: ",
                "// Line 1547: int link_get_name(LINK_HANDLE link, const char** link_name)",
                "// Line 1548: {",
                "// Line 1549:     int result;",
                "// Line 1550: ",
                "// Line 1551:     if (link == NULL)",
                "// Line 1552:     {",
                "// Line 1553:         LogError(\"NULL link\");",
                "// Line 1554:         result = MU_FAILURE;",
                "// vulnerable line: 1555: }",
                "// Line 1556:     else",
                "// Line 1557:     {",
                "// Line 1558:         *link_name = link->name;",
                "// Line 1559:         result = 0;",
                "// vulnerable line: 1560: }",
                "// Line 1561: ",
                "// Line 1562:     return result;",
                "// vulnerable line: 1563: }",
                "// Line 1564: ",
                "// Line 1565: int link_get_received_message_id(LINK_HANDLE link, delivery_number* message_id)",
                "// Line 1566: {",
                "// Line 1567:     int result;",
                "// Line 1568: ",
                "// Line 1569:     if (link == NULL)",
                "// Line 1570:     {",
                "// Line 1571:         LogError(\"NULL link\");",
                "// Line 1572:         result = MU_FAILURE;",
                "// vulnerable line: 1573: }",
                "// Line 1574:     else",
                "// Line 1575:     {",
                "// Line 1576:         *message_id = link->received_delivery_id;",
                "// Line 1577:         result = 0;",
                "// vulnerable line: 1578: }",
                "// Line 1579: ",
                "// Line 1580:     return result;",
                "// vulnerable line: 1581: }",
                "// Line 1582: ",
                "// Line 1583: int link_send_disposition(LINK_HANDLE link, delivery_number message_id, AMQP_VALUE delivery_state)",
                "// Line 1584: {",
                "// Line 1585:     int result;",
                "// Line 1586: ",
                "// Line 1587:     if (delivery_state == NULL)",
                "// Line 1588:     {",
                "// Line 1589:         result = 0;",
                "// vulnerable line: 1590: }",
                "// Line 1591:     else",
                "// Line 1592:     {",
                "// Line 1593:         result = send_disposition(link, message_id, delivery_state);",
                "// Line 1594:         if (result != 0)",
                "// Line 1595:         {",
                "// Line 1596:             LogError(\"Cannot send disposition frame\");",
                "// Line 1597:             result = MU_FAILURE;",
                "// vulnerable line: 1598: }",
                "// vulnerable line: 1599: }",
                "// Line 1600: ",
                "// Line 1601:     return result;",
                "// vulnerable line: 1602: }",
                "// Line 1603: ",
                "// Line 1604: void link_dowork(LINK_HANDLE link)",
                "// Line 1605: {",
                "// Line 1606:     if (link == NULL)",
                "// Line 1607:     {",
                "// Line 1608:         LogError(\"NULL link\");",
                "// vulnerable line: 1609: }",
                "// Line 1610:     else",
                "// Line 1611:     {",
                "// Line 1612:         tickcounter_ms_t current_tick;",
                "// Line 1613: ",
                "// Line 1614:         if (tickcounter_get_current_ms(link->tick_counter, &current_tick) != 0)",
                "// Line 1615:         {",
                "// Line 1616:             LogError(\"Cannot get tick counter value\");",
                "// vulnerable line: 1617: }",
                "// Line 1618:         else",
                "// Line 1619:         {",
                "// Line 1620:             // go through all and find timed out deliveries",
                "// Line 1621:             LIST_ITEM_HANDLE item = singlylinkedlist_get_head_item(link->pending_deliveries);",
                "// Line 1622:             while (item != NULL)",
                "// Line 1623:             {",
                "// Line 1624:                 LIST_ITEM_HANDLE next_item = singlylinkedlist_get_next_item(item);",
                "// Line 1625:                 ASYNC_OPERATION_HANDLE delivery_instance_async_operation = (ASYNC_OPERATION_HANDLE)singlylinkedlist_item_get_value(item);",
                "// Line 1626:                 if (delivery_instance_async_operation != NULL)",
                "// Line 1627:                 {",
                "// Line 1628:                     DELIVERY_INSTANCE* delivery_instance = (DELIVERY_INSTANCE*)GET_ASYNC_OPERATION_CONTEXT(DELIVERY_INSTANCE, delivery_instance_async_operation);",
                "// Line 1629: ",
                "// Line 1630:                     if ((delivery_instance != NULL) &&",
                "// Line 1631:                         (delivery_instance->timeout != 0) &&",
                "// Line 1632:                         (current_tick - delivery_instance->start_tick >= delivery_instance->timeout))",
                "// Line 1633:                     {",
                "// Line 1634:                         if (delivery_instance->on_delivery_settled != NULL)",
                "// Line 1635:                         {",
                "// Line 1636:                             delivery_instance->on_delivery_settled(delivery_instance->callback_context, delivery_instance->delivery_id, LINK_DELIVERY_SETTLE_REASON_TIMEOUT, NULL);",
                "// vulnerable line: 1637: }",
                "// Line 1638: ",
                "// Line 1639:                         if (singlylinkedlist_remove(link->pending_deliveries, item) != 0)",
                "// Line 1640:                         {",
                "// Line 1641:                             LogError(\"Cannot remove item from list\");",
                "// vulnerable line: 1642: }",
                "// Line 1643: ",
                "// Line 1644:                         async_operation_destroy(delivery_instance_async_operation);",
                "// vulnerable line: 1645: }",
                "// vulnerable line: 1646: }",
                "// Line 1647: ",
                "// Line 1648:                 item = next_item;",
                "// vulnerable line: 1649: }",
                "// vulnerable line: 1650: }",
                "// vulnerable line: 1651: }",
                "// vulnerable line: 1652: }",
                "// Line 1653: ",
                "// Line 1654: ON_LINK_DETACH_EVENT_SUBSCRIPTION_HANDLE link_subscribe_on_link_detach_received(LINK_HANDLE link, ON_LINK_DETACH_RECEIVED on_link_detach_received, void* context)",
                "// Line 1655: {",
                "// Line 1656:     ON_LINK_DETACH_EVENT_SUBSCRIPTION_HANDLE result;",
                "// Line 1657: ",
                "// Line 1658:     if ((link == NULL) ||",
                "// Line 1659:         (on_link_detach_received == NULL))",
                "// Line 1660:     {",
                "// Line 1661:         LogError(\"Invalid arguments: link = %p, on_link_detach_received = %p, context = %p\",",
                "// Line 1662:             link, on_link_detach_received, context);",
                "// Line 1663:         result = NULL;",
                "// vulnerable line: 1664: }",
                "// Line 1665:     else",
                "// Line 1666:     {",
                "// Line 1667:         if (link->on_link_detach_received_event_subscription.on_link_detach_received != NULL)",
                "// Line 1668:         {",
                "// Line 1669:             LogError(\"Already subscribed for on_link_detach_received events\");",
                "// Line 1670:             result = NULL;",
                "// vulnerable line: 1671: }",
                "// Line 1672:         else",
                "// Line 1673:         {",
                "// Line 1674:             link->on_link_detach_received_event_subscription.on_link_detach_received = on_link_detach_received;",
                "// Line 1675:             link->on_link_detach_received_event_subscription.context = context;",
                "// Line 1676: ",
                "// Line 1677:             result = &link->on_link_detach_received_event_subscription;",
                "// vulnerable line: 1678: }",
                "// vulnerable line: 1679: }",
                "// Line 1680: ",
                "// Line 1681:     return result;",
                "// vulnerable line: 1682: }",
                "// Line 1683: ",
                "// Line 1684: void link_unsubscribe_on_link_detach_received(ON_LINK_DETACH_EVENT_SUBSCRIPTION_HANDLE event_subscription)",
                "// Line 1685: {",
                "// Line 1686:     if (event_subscription == NULL)",
                "// Line 1687:     {",
                "// Line 1688:         LogError(\"NULL event_subscription\");",
                "// vulnerable line: 1689: }",
                "// Line 1690:     else",
                "// Line 1691:     {",
                "// Line 1692:         event_subscription->on_link_detach_received = NULL;",
                "// Line 1693:         event_subscription->context = NULL;",
                "// vulnerable line: 1694: }",
                "// vulnerable line: 1695: }"
            ]
        }
    ]
}