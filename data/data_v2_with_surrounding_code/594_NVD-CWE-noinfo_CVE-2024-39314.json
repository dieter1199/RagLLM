{
    "cve_id": "CVE-2024-39314",
    "cve_description": "toy-blog is a headless content management system implementation. Starting in version 0.4.3 and prior to version 0.5.0, the administrative password was leaked through the command line parameter. The problem was patched in version 0.5.0. As a workaround, pass `--read-bearer-token-from-stdin` to the launch arguments and feed the token from the standard input in version 0.4.14 or later. Earlier versions do not have this workaround.",
    "cve_publish_date": "2024-07-01T22:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fix!: remove --bearer-token",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "main.rs",
            "code_language": "Rust",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "12",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 30: ",
                "// Line 31: #[derive(Parser)]",
                "// Line 32: struct Args {",
                "// Line 33:     #[clap(subcommand)]",
                "// Line 34:     subcommand: Commands",
                "// Line 35: }",
                "// Line 36: ",
                "// Line 37: #[derive(Subcommand)]",
                "// Line 38: enum Commands {",
                "// Line 39:     Run {",
                "// vulnerable line: 40: /// DEPRECATED",
                "// vulnerable line: 41: #[clap(long)]",
                "// vulnerable line: 42: bearer_token: Option<String>,",
                "// vulnerable line: 43: #[clap(long)]",
                "// Line 44:         http_port: u16,",
                "// vulnerable line: 45: #[clap(long)]",
                "// Line 46:         http_host: String,",
                "// vulnerable line: 47: #[clap(long)]",
                "// Line 48:         telnet_port: u16,",
                "// vulnerable line: 49: #[clap(long)]",
                "// Line 50:         telnet_host: String,",
                "// Line 51:         #[clap(long = \"cloudflare\")]",
                "// Line 52:         cloudflare_support: bool,",
                "// vulnerable line: 53: #[clap(long)]",
                "// Line 54:         read_bearer_token_from_stdin: bool,",
                "// Line 55:     },",
                "// Line 56:     Import {",
                "// vulnerable line: 57: #[clap(long)]",
                "// Line 58:         file_path: PathBuf,",
                "// vulnerable line: 59: #[clap(long)]",
                "// Line 60:         article_id: ArticleId,",
                "// Line 61:     },",
                "// Line 62: }",
                "// Line 63: ",
                "// Line 64: fn setup_logger() -> Result<()> {",
                "// Line 65:     let colors = ColoredLevelConfig::new();",
                "// Line 66:     fern::Dispatch::new()",
                "// Line 67:         .format(move |out, message, record| {",
                "// Line 68:             out.finish(format_args!(",
                "// Line 69:                 \"{}[{}][{}] {}\",",
                "// Line 79:         .apply()?;",
                "// Line 80:     Ok(())",
                "// Line 81: }",
                "// Line 82: ",
                "// Line 83: #[actix_web::main]",
                "// Line 84: async fn main() -> Result<()> {",
                "// Line 85:     setup_logger().unwrap_or_default();",
                "// Line 86:     let args: Args = Args::parse();",
                "// Line 87:     match args.subcommand {",
                "// Line 88:         Commands::Run {",
                "// vulnerable line: 89: bearer_token,",
                "// Line 90:             http_port,",
                "// Line 91:             http_host,",
                "// Line 92:             telnet_port,",
                "// Line 93:             telnet_host,",
                "// Line 94:             cloudflare_support,",
                "// Line 95:             read_bearer_token_from_stdin",
                "// Line 96:         } => {",
                "// vulnerable line: 97: let bearer_token = bearer_token.map_or_else(|| if read_bearer_token_from_stdin {",
                "// Line 98:                 let mut buf = String::new();",
                "// Line 99:                 stdin().read_line(&mut buf).expect(\"failed to read from stdin\");",
                "// Line 100:                 buf.trim_end().to_string()",
                "// vulnerable line: 101: } else {",
                "// vulnerable line: 102: eprintln!(\"You must set bearer token to protecting your server.\");",
                "// vulnerable line: 103: exit(1)",
                "// vulnerable line: 104: }, |token| {",
                "// vulnerable line: 105: eprintln!(\"--bearer-token is unsecure. It will be removed by next major release. Please use --read-bearer-token-from-stdin.\");",
                "// vulnerable line: 106: token",
                "// vulnerable line: 107: });",
                "// Line 108: ",
                "// Line 109:             WRITE_TOKEN.set(bearer_token).unwrap();",
                "// Line 110: ",
                "// Line 111:             let http_server = HttpServer::new(move || {",
                "// Line 112:                 let logger_format = if cloudflare_support {",
                "// Line 113:                     r#\"%a (CF '%{CF-Connecting-IP}i') %t \"%r\" %s \"%{Referer}i\" \"%{User-Agent}i\" \"#",
                "// vulnerable line: 114: } else {",
                "// Line 115:                     r#\"%a %t \"%r\" %s \"%{Referer}i\" \"%{User-Agent}i\" \"#",
                "// Line 116:                 };",
                "// Line 117: ",
                "// Line 118:                 App::new()",
                "// Line 119:                     .service(prefixed_service(\"/api\")",
                "// Line 120:                         .service(",
                "// Line 121:                             (",
                "// Line 122:                                 prefixed_service(\"/article\")",
                "// Line 123:                                     .service(",
                "// Line 124:                                         (",
                "// Line 134:                             )",
                "// Line 135:                         )",
                "// Line 136:                     )",
                "// Line 137:                     .app_data(",
                "// Line 138:                         BearerAuthConfig::default()",
                "// Line 139:                             .realm(\"Perform write operation\")",
                "// Line 140:                             .scope(\"article:write\"),",
                "// Line 141:                     )",
                "// Line 142:                     .wrap(Logger::new(logger_format))",
                "// Line 143:                     .wrap(cors_middleware_factory())",
                "// vulnerable line: 144: });",
                "// Line 145: ",
                "// Line 146:         tokio::spawn({",
                "// Line 147:             Server::build()",
                "// Line 148:                 .bind(\"echo\", (telnet_host, telnet_port), move || {",
                "// Line 149:                     fn_service(move |stream: TcpStream| {",
                "// Line 150:                         telnet_server_service(stream)",
                "// Line 151:                     })",
                "// Line 152:                 })?",
                "// Line 153:                 .run()",
                "// vulnerable line: 154: });",
                "// Line 155: ",
                "// Line 156:         http_server",
                "// Line 157:                     .bind((http_host, http_port))?",
                "// Line 158:                     .run()",
                "// Line 159:                     .await",
                "// Line 160:                     .context(\"while running server\")?;",
                "// Line 161: ",
                "// Line 162:                 Ok(())",
                "// Line 163:             }",
                "// Line 164:         Commands::Import { file_path, article_id } => {"
            ]
        }
    ]
}