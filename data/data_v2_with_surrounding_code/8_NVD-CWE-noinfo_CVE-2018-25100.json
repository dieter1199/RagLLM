{
    "cve_id": "CVE-2018-25100",
    "cve_description": "The Mojolicious module before 7.66 for Perl may leak cookies in certain situations related to multiple similar cookies for the same domain. This affects Mojo::UserAgent::CookieJar.",
    "cve_publish_date": "2024-03-24T01:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fix a security issue in Mojo::UserAgent::CookieJar",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "Changes",
            "code_language": "Perl",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: ",
                "// vulnerable line: 2: 7.66  2018-02-12",
                "// Line 3: ",
                "// Line 4: 7.65  2018-02-11",
                "// Line 5:   - Added EXPERIMENTAL timing->begin, timing->elapsed, timing->rps and",
                "// Line 6:     timing->server_timing helpers to Mojolicious::Plugin::DefaultHelpers.",
                "// Line 7:   - Added EXPERIMENTAL server_timing method to Mojo::Headers.",
                "// Line 8:   - Added support for new HTTP status code.",
                "// Line 9: ",
                "// Line 10: 7.64  2018-02-07",
                "// Line 11:   - Fixed a bug in Mojo::Log where short log messages spanning multiple lines",
                "// Line 12:     would not be formatted properly for systemd."
            ]
        },
        {
            "filename_of_changes": "CookieJar.pm",
            "code_language": "Perl",
            "number_of_lines_added_for_mitigation": "11",
            "number_of_lines_deleted_vulnerable_to_cve": "9",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 15:   for my $cookie (@cookies) {",
                "// Line 16: ",
                "// Line 17:     # Convert max age to expires",
                "// Line 18:     my $age = $cookie->max_age;",
                "// Line 19:     $cookie->expires($age <= 0 ? 0 : $age + time) if looks_like_number $age;",
                "// Line 20: ",
                "// Line 21:     # Check cookie size",
                "// Line 22:     next if length($cookie->value // '') > $size;",
                "// Line 23: ",
                "// Line 24:     # Replace cookie",
                "// vulnerable line: 25: my $origin = $cookie->origin // '';",
                "// vulnerable line: 26: next unless my $domain = lc($cookie->domain // $origin);",
                "// Line 27:     next unless my $path   = $cookie->path;",
                "// Line 28:     next unless length(my $name = $cookie->name // '');",
                "// Line 29:     my $jar = $self->{jar}{$domain} ||= [];",
                "// vulnerable line: 30: @$jar = (grep({ _compare($_, $path, $name, $origin) } @$jar), $cookie);",
                "// Line 31:   }",
                "// Line 32: ",
                "// Line 33:   return $self;",
                "// Line 34: }",
                "// Line 35: ",
                "// Line 36: sub all {",
                "// Line 37:   my $jar = shift->{jar};",
                "// Line 38:   return [map { @{$jar->{$_}} } sort keys %$jar];",
                "// Line 39: }",
                "// Line 40: ",
                "// Line 41: sub collect {",
                "// Line 42:   my ($self, $tx) = @_;",
                "// Line 43: ",
                "// Line 44:   my $url = $tx->req->url;",
                "// Line 45:   for my $cookie (@{$tx->res->cookies}) {",
                "// Line 46: ",
                "// Line 47:     # Validate domain",
                "// vulnerable line: 48: my $host   = lc $url->ihost;",
                "// vulnerable line: 49: my $domain = lc($cookie->domain // $cookie->origin($host)->origin);",
                "// Line 50:     if (my $cb = $self->ignore) { next if $cb->($cookie) }",
                "// Line 51:     next if $host ne $domain && ($host !~ /\\Q.$domain\\E$/ || $host =~ /\\.\\d+$/);",
                "// Line 52: ",
                "// Line 53:     # Validate path",
                "// Line 54:     my $path = $cookie->path // $url->path->to_dir->to_abs_string;",
                "// Line 55:     $path = Mojo::Path->new($path)->trailing_slash(0)->to_abs_string;",
                "// Line 56:     next unless _path($path, $url->path->to_abs_string);",
                "// Line 57:     $self->add($cookie->path($path));",
                "// Line 58:   }",
                "// Line 59: }",
                "// Line 65: ",
                "// Line 66:   my @found;",
                "// Line 67:   my $domain = my $host = lc $url->ihost;",
                "// Line 68:   my $path = $url->path->to_abs_string;",
                "// Line 69:   while ($domain) {",
                "// Line 70:     next unless my $old = $self->{jar}{$domain};",
                "// Line 71: ",
                "// Line 72:     # Grab cookies",
                "// Line 73:     my $new = $self->{jar}{$domain} = [];",
                "// Line 74:     for my $cookie (@$old) {",
                "// vulnerable line: 75: next unless $cookie->domain || $host eq $cookie->origin;",
                "// Line 76: ",
                "// Line 77:       # Check if cookie has expired",
                "// Line 78:       if (defined(my $expires = $cookie->expires)) { next if time > $expires }",
                "// Line 79:       push @$new, $cookie;",
                "// Line 80: ",
                "// Line 81:       # Taste cookie",
                "// Line 82:       next if $cookie->secure && $url->protocol ne 'https';",
                "// Line 83:       next unless _path($cookie->path, $path);",
                "// Line 84:       my $name  = $cookie->name;",
                "// Line 85:       my $value = $cookie->value;",
                "// Line 94: }",
                "// Line 95: ",
                "// Line 96: sub prepare {",
                "// Line 97:   my ($self, $tx) = @_;",
                "// Line 98:   return unless keys %{$self->{jar}};",
                "// Line 99:   my $req = $tx->req;",
                "// Line 100:   $req->cookies(@{$self->find($req->url)});",
                "// Line 101: }",
                "// Line 102: ",
                "// Line 103: sub _compare {",
                "// vulnerable line: 104: my ($cookie, $path, $name, $origin) = @_;",
                "// vulnerable line: 105: return 1 if $cookie->path ne $path || $cookie->name ne $name;",
                "// vulnerable line: 106: return ($cookie->origin // '') ne $origin;",
                "// Line 107: }",
                "// Line 108: ",
                "// Line 109: sub _path { $_[0] eq '/' || $_[0] eq $_[1] || index($_[1], \"$_[0]/\") == 0 }",
                "// Line 110: ",
                "// Line 111: 1;",
                "// Line 112: ",
                "// Line 113: =encoding utf8",
                "// Line 114: ",
                "// Line 115: =head1 NAME",
                "// Line 116: "
            ]
        },
        {
            "filename_of_changes": "Response.pm",
            "code_language": "Perl",
            "number_of_lines_added_for_mitigation": "9",
            "number_of_lines_deleted_vulnerable_to_cve": "8",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: package Mojo::Cookie::Response;",
                "// Line 2: use Mojo::Base 'Mojo::Cookie';",
                "// Line 3: ",
                "// Line 4: use Mojo::Date;",
                "// Line 5: use Mojo::Util qw(quote split_cookie_header);",
                "// Line 6: ",
                "// vulnerable line: 7: has [qw(domain expires httponly max_age origin path secure)];",
                "// Line 8: ",
                "// Line 9: my %ATTRS = map { $_ => 1 } qw(domain expires httponly max-age path secure);",
                "// Line 10: ",
                "// Line 11: sub parse {",
                "// Line 12:   my ($self, $str) = @_;",
                "// Line 13: ",
                "// Line 14:   my @cookies;",
                "// Line 15:   my $tree = split_cookie_header $str // '';",
                "// Line 16:   while (my $pairs = shift @$tree) {",
                "// Line 17:     my ($name, $value) = splice @$pairs, 0, 2;",
                "// Line 108: HttpOnly flag, which can prevent client-side scripts from accessing this",
                "// Line 109: cookie.",
                "// Line 110: ",
                "// Line 111: =head2 max_age",
                "// Line 112: ",
                "// Line 113:   my $max_age = $cookie->max_age;",
                "// Line 114:   $cookie     = $cookie->max_age(60);",
                "// Line 115: ",
                "// Line 116: Max age for cookie.",
                "// Line 117: ",
                "// vulnerable line: 118: =head2 origin",
                "// Line 119: ",
                "// vulnerable line: 120: my $origin = $cookie->origin;",
                "// vulnerable line: 121: $cookie    = $cookie->origin('mojolicious.org');",
                "// Line 122: ",
                "// vulnerable line: 123: Origin of the cookie.",
                "// Line 124: ",
                "// Line 125: =head2 path",
                "// Line 126: ",
                "// Line 127:   my $path = $cookie->path;",
                "// Line 128:   $cookie  = $cookie->path('/test');",
                "// Line 129: ",
                "// Line 130: Cookie path.",
                "// Line 131: ",
                "// Line 132: =head2 secure",
                "// Line 133: "
            ]
        }
    ]
}