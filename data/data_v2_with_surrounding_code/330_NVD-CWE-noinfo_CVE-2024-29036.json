{
    "cve_id": "CVE-2024-29036",
    "cve_description": "Saleor Storefront is software for building e-commerce experiences. Prior to commit 579241e75a5eb332ccf26e0bcdd54befa33f4783, when any user authenticates in the storefront, anonymous users are able to access their data. The session is leaked through cache and can be accessed by anyone. Users should upgrade to a version that incorporates commit 579241e75a5eb332ccf26e0bcdd54befa33f4783 or later to receive a patch. A possible workaround is to temporarily disable authentication by changing the usage of `createSaleorAuthClient()`.",
    "cve_publish_date": "2024-03-20T21:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Merge pull request from GHSA-52cq-c7x7-cqw4",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "ChannelSelect.tsx",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 12: ",
                "// Line 13:     return (",
                "// Line 14:         <select",
                "// Line 15:             className=\"h-10 w-fit rounded-md border border-neutral-300 bg-transparent bg-white px-4 py-2 pr-10 text-sm  placeholder:text-neutral-500 focus:border-black focus:ring-black\"",
                "// Line 16:             onChange={(e) => {",
                "// Line 17:                 const newChannel = e.currentTarget.value;",
                "// Line 18:                 return router.push(`/${newChannel}`);",
                "// Line 19:             }}",
                "// Line 20:         >",
                "// Line 21:             {channels.map((channel) => (",
                "// vulnerable line: 22: <option key={channel.id} value={channel.slug} selected={params.channel === channel.slug}>",
                "// Line 23:                     {channel.currencyCode}",
                "// Line 24:                 </option>",
                "// Line 25:             ))}",
                "// Line 26:         </select>",
                "// Line 27:     );",
                "// Line 28: };"
            ]
        },
        {
            "filename_of_changes": "LoginForm.tsx",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// vulnerable line: 1: import { saleorAuthClient } from \"@/app/config\";",
                "// Line 2: ",
                "// Line 3: export async function LoginForm() {",
                "// Line 4:     return (",
                "// Line 5:         <div className=\"mx-auto mt-16 w-full max-w-lg\">",
                "// Line 6:             <form",
                "// Line 7:                 className=\"rounded border p-8 shadow-md\"",
                "// Line 8:                 action={async (formData) => {",
                "// Line 9:                     \"use server\";",
                "// Line 10: ",
                "// Line 11:                     const email = formData.get(\"email\")?.toString();",
                "// Line 12:                     const password = formData.get(\"password\")?.toString();",
                "// Line 13: ",
                "// Line 14:                     if (!email || !password) {",
                "// Line 15:                         throw new Error(\"Email and password are required\");",
                "// Line 16:                     }",
                "// Line 17: ",
                "// vulnerable line: 18: const { data } = await saleorAuthClient.signIn({ email, password }, { cache: \"no-store\" });",
                "// Line 19: ",
                "// Line 20:                     if (data.tokenCreate.errors.length > 0) {",
                "// Line 21:                         // setErrors(data.tokenCreate.errors.map((error) => error.message));",
                "// Line 22:                         // setFormValues(DefaultValues);",
                "// Line 23:                     }",
                "// Line 24:                 }}",
                "// Line 25:             >",
                "// Line 26:                 <div className=\"mb-2\">",
                "// Line 27:                     <label className=\"sr-only\" htmlFor=\"email\">",
                "// Line 28:                         Email"
            ]
        },
        {
            "filename_of_changes": "actions.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: \"use server\";",
                "// Line 2: ",
                "// vulnerable line: 3: import { saleorAuthClient } from \"@/app/config\";",
                "// Line 4: ",
                "// Line 5: export async function logout() {",
                "// Line 6:     \"use server\";",
                "// vulnerable line: 7: saleorAuthClient.signOut();",
                "// Line 8: }"
            ]
        },
        {
            "filename_of_changes": "config.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "8",
            "number_of_lines_deleted_vulnerable_to_cve": "6",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: import { createSaleorAuthClient } from \"@saleor/auth-sdk\";",
                "// Line 2: import { getNextServerCookiesStorage } from \"@saleor/auth-sdk/next/server\";",
                "// Line 3: import { invariant } from \"ts-invariant\";",
                "// Line 4: ",
                "// Line 5: export const ProductsPerPage = 12;",
                "// Line 6: ",
                "// Line 7: const saleorApiUrl = process.env.NEXT_PUBLIC_SALEOR_API_URL;",
                "// Line 8: invariant(saleorApiUrl, \"Missing NEXT_PUBLIC_SALEOR_API_URL env variable\");",
                "// Line 9: ",
                "// vulnerable line: 10: const nextServerCookiesStorage = getNextServerCookiesStorage();",
                "// vulnerable line: 11: export const saleorAuthClient = createSaleorAuthClient({",
                "// vulnerable line: 12: saleorApiUrl,",
                "// vulnerable line: 13: refreshTokenStorage: nextServerCookiesStorage,",
                "// vulnerable line: 14: accessTokenStorage: nextServerCookiesStorage,",
                "// vulnerable line: 15: });"
            ]
        },
        {
            "filename_of_changes": "graphql.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: import { invariant } from \"ts-invariant\";",
                "// Line 2: import { type TypedDocumentString } from \"../gql/graphql\";",
                "// vulnerable line: 3: import { saleorAuthClient } from \"@/app/config\";",
                "// Line 4: ",
                "// Line 5: type GraphQLErrorResponse = {",
                "// Line 6:     errors: readonly {",
                "// Line 7:         message: string;",
                "// Line 8:     }[];",
                "// Line 9: };",
                "// Line 10: ",
                "// Line 11: type GraphQLRespone<T> = { data: T } | GraphQLErrorResponse;",
                "// Line 12: ",
                "// Line 13: export async function executeGraphQL<Result, Variables>(",
                "// Line 30:         },",
                "// Line 31:         body: JSON.stringify({",
                "// Line 32:             query: operation.toString(),",
                "// Line 33:             ...(variables && { variables }),",
                "// Line 34:         }),",
                "// Line 35:         cache: cache,",
                "// Line 36:         next: { revalidate },",
                "// Line 37:     };",
                "// Line 38: ",
                "// Line 39:     const response = withAuth",
                "// vulnerable line: 40: ? await saleorAuthClient.fetchWithAuth(process.env.NEXT_PUBLIC_SALEOR_API_URL, input)",
                "// Line 41:         : await fetch(process.env.NEXT_PUBLIC_SALEOR_API_URL, input);",
                "// Line 42: ",
                "// Line 43:     if (!response.ok) {",
                "// Line 44:         const body = await (async () => {",
                "// Line 45:             try {",
                "// Line 46:                 return await response.text();",
                "// Line 47:             } catch {",
                "// Line 48:                 return \"\";",
                "// Line 49:             }",
                "// Line 50:         })();"
            ]
        },
        {
            "filename_of_changes": "page.tsx",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 10: ",
                "// Line 11: export default async function Page({ params }: { params: { channel: string } }) {",
                "// Line 12:     const data = await executeGraphQL(ProductListByCollectionDocument, {",
                "// Line 13:         variables: {",
                "// Line 14:             slug: \"featured-products\",",
                "// Line 15:             channel: params.channel,",
                "// Line 16:         },",
                "// Line 17:         revalidate: 60,",
                "// Line 18:     });",
                "// Line 19: ",
                "// vulnerable line: 20: if (!data.collection?.products) throw Error(\"No products found\");",
                "// Line 21: ",
                "// Line 22:     const products = data.collection?.products.edges.map(({ node: product }) => product);",
                "// Line 23: ",
                "// Line 24:     return (",
                "// Line 25:         <section className=\"mx-auto max-w-7xl p-8 pb-16\">",
                "// Line 26:             <h2 className=\"sr-only\">Product list</h2>",
                "// Line 27:             <ProductList products={products} />",
                "// Line 28:         </section>",
                "// Line 29:     );",
                "// Line 30: }"
            ]
        }
    ]
}