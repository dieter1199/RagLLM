{
    "cve_id": "CVE-2023-52426",
    "cve_description": "libexpat through 2.5.0 allows recursive XML Entity Expansion if XML_DTD is undefined at compile time.",
    "cve_publish_date": "2024-02-04T20:15Z",
    "cwe_id": "CWE-776",
    "cwe_name": "Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')",
    "cwe_description": "The product uses XML documents and allows their structure to be defined with a Document Type Definition (DTD), but it does not properly control the number of recursive definitions of entities.",
    "commit_message": "lib|xmlwf|cmake: Extend scope of billion laughs attack protection\n\n.. from \"defined(XML_DTD)\" to \"defined(XML_DTD) || XML_GE==1\".",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "expat.h",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "5",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1018:   XML_FEATURE_UNICODE,",
                "// Line 1019:   XML_FEATURE_UNICODE_WCHAR_T,",
                "// Line 1020:   XML_FEATURE_DTD,",
                "// Line 1021:   XML_FEATURE_CONTEXT_BYTES,",
                "// Line 1022:   XML_FEATURE_MIN_SIZE,",
                "// Line 1023:   XML_FEATURE_SIZEOF_XML_CHAR,",
                "// Line 1024:   XML_FEATURE_SIZEOF_XML_LCHAR,",
                "// Line 1025:   XML_FEATURE_NS,",
                "// Line 1026:   XML_FEATURE_LARGE_SIZE,",
                "// Line 1027:   XML_FEATURE_ATTR_INFO,",
                "// vulnerable line: 1028: /* Added in Expat 2.4.0. */",
                "// Line 1029:   XML_FEATURE_BILLION_LAUGHS_ATTACK_PROTECTION_MAXIMUM_AMPLIFICATION_DEFAULT,",
                "// Line 1030:   XML_FEATURE_BILLION_LAUGHS_ATTACK_PROTECTION_ACTIVATION_THRESHOLD_DEFAULT",
                "// Line 1031:   /* Additional features must be added to the end of this enum. */",
                "// Line 1032: };",
                "// Line 1033: ",
                "// Line 1034: typedef struct {",
                "// Line 1035:   enum XML_FeatureEnum feature;",
                "// Line 1036:   const XML_LChar *name;",
                "// Line 1037:   long int value;",
                "// Line 1038: } XML_Feature;",
                "// Line 1039: ",
                "// Line 1040: XMLPARSEAPI(const XML_Feature *)",
                "// Line 1041: XML_GetFeatureList(void);",
                "// Line 1042: ",
                "// vulnerable line: 1043: #ifdef XML_DTD",
                "// vulnerable line: 1044: /* Added in Expat 2.4.0. */",
                "// Line 1045: XMLPARSEAPI(XML_Bool)",
                "// Line 1046: XML_SetBillionLaughsAttackProtectionMaximumAmplification(",
                "// Line 1047:     XML_Parser parser, float maximumAmplificationFactor);",
                "// Line 1048: ",
                "// vulnerable line: 1049: /* Added in Expat 2.4.0. */",
                "// Line 1050: XMLPARSEAPI(XML_Bool)",
                "// Line 1051: XML_SetBillionLaughsAttackProtectionActivationThreshold(",
                "// Line 1052:     XML_Parser parser, unsigned long long activationThresholdBytes);",
                "// Line 1053: #endif",
                "// Line 1054: ",
                "// Line 1055: /* Expat follows the semantic versioning convention.",
                "// Line 1056:    See https://semver.org",
                "// Line 1057: */",
                "// Line 1058: #define XML_MAJOR_VERSION 2",
                "// Line 1059: #define XML_MINOR_VERSION 5"
            ]
        },
        {
            "filename_of_changes": "xmlwf.c",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "10",
            "number_of_lines_deleted_vulnerable_to_cve": "8",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1153:       attackMaximumAmplification = tcstof(valueText, &afterValueText);",
                "// Line 1154:       if ((errno != 0) || (afterValueText[0] != T('\u0000'))",
                "// Line 1155:           || isnan(attackMaximumAmplification)",
                "// Line 1156:           || (attackMaximumAmplification < 1.0f)) {",
                "// Line 1157:         // This prevents tperror(..) from reporting misleading \"[..]: Success\"",
                "// Line 1158:         errno = ERANGE;",
                "// Line 1159:         tperror(T(\"invalid amplification limit\") T(",
                "// Line 1160:             \" (needs a floating point number greater or equal than 1.0)\"));",
                "// Line 1161:         exit(XMLWF_EXIT_USAGE_ERROR);",
                "// Line 1162:       }",
                "// vulnerable line: 1163: #ifndef XML_DTD",
                "// vulnerable line: 1164: ftprintf(stderr, T(\"Warning: Given amplification limit ignored\") T(",
                "// Line 1165:                            \", xmlwf has been compiled without DTD support.",
                "// Line 1166: \"));",
                "// Line 1167: #endif",
                "// Line 1168:       break;",
                "// Line 1169:     }",
                "// Line 1170:     case T('b'): {",
                "// Line 1171:       const XML_Char *valueText = NULL;",
                "// Line 1172:       XMLWF_SHIFT_ARG_INTO(valueText, argc, argv, i, j);",
                "// Line 1173: ",
                "// Line 1174:       errno = 0;",
                "// Line 1175:       XML_Char *afterValueText = (XML_Char *)valueText;",
                "// Line 1176:       attackThresholdBytes = tcstoull(valueText, &afterValueText, 10);",
                "// Line 1177:       if ((errno != 0) || (afterValueText[0] != T('\u0000'))) {",
                "// Line 1178:         // This prevents tperror(..) from reporting misleading \"[..]: Success\"",
                "// Line 1179:         errno = ERANGE;",
                "// Line 1180:         tperror(T(\"invalid ignore threshold\")",
                "// Line 1181:                     T(\" (needs an integer from 0 to 2^64-1)\"));",
                "// Line 1182:         exit(XMLWF_EXIT_USAGE_ERROR);",
                "// Line 1183:       }",
                "// Line 1184:       attackThresholdGiven = XML_TRUE;",
                "// vulnerable line: 1185: #ifndef XML_DTD",
                "// vulnerable line: 1186: ftprintf(stderr, T(\"Warning: Given attack threshold ignored\") T(",
                "// Line 1187:                            \", xmlwf has been compiled without DTD support.",
                "// Line 1188: \"));",
                "// Line 1189: #endif",
                "// Line 1190:       break;",
                "// Line 1191:     }",
                "// Line 1192:     case T('\u0000'):",
                "// Line 1193:       if (j > 1) {",
                "// Line 1194:         i++;",
                "// Line 1195:         j = 0;",
                "// Line 1196:         break;",
                "// Line 1214:       parser = XML_ParserCreateNS(encoding, NSSEP);",
                "// Line 1215:     else",
                "// Line 1216:       parser = XML_ParserCreate(encoding);",
                "// Line 1217: ",
                "// Line 1218:     if (! parser) {",
                "// Line 1219:       tperror(T(\"Could not instantiate parser\"));",
                "// Line 1220:       exit(XMLWF_EXIT_INTERNAL_ERROR);",
                "// Line 1221:     }",
                "// Line 1222: ",
                "// Line 1223:     if (attackMaximumAmplification != -1.0f) {",
                "// vulnerable line: 1224: #ifdef XML_DTD",
                "// Line 1225:       XML_SetBillionLaughsAttackProtectionMaximumAmplification(",
                "// Line 1226:           parser, attackMaximumAmplification);",
                "// Line 1227: #endif",
                "// Line 1228:     }",
                "// Line 1229:     if (attackThresholdGiven) {",
                "// vulnerable line: 1230: #ifdef XML_DTD",
                "// Line 1231:       XML_SetBillionLaughsAttackProtectionActivationThreshold(",
                "// Line 1232:           parser, attackThresholdBytes);",
                "// Line 1233: #else",
                "// Line 1234:       (void)attackThresholdBytes; // silence -Wunused-but-set-variable",
                "// Line 1235: #endif",
                "// Line 1236:     }",
                "// Line 1237: ",
                "// Line 1238:     if (requireStandalone)",
                "// Line 1239:       XML_SetNotStandaloneHandler(parser, notStandalone);",
                "// Line 1240:     XML_SetParamEntityParsing(parser, paramEntityParsing);"
            ]
        }
    ]
}