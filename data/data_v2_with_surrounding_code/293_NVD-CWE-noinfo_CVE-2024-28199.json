{
    "cve_id": "CVE-2024-28199",
    "cve_description": "phlex is an open source framework for building object-oriented views in Ruby. There is a potential cross-site scripting (XSS) vulnerability that can be exploited via maliciously crafted user data. This was due to improper case-sensitivity in the code that was meant to prevent these attacks. If you render an `<a>` tag with an `href` attribute set to a user-provided link, that link could potentially execute JavaScript when clicked by another user. If you splat user-provided attributes when rendering any HTML tag, malicious event attributes could be included in the output, executing JavaScript when the events are triggered by another user. Patches are available on RubyGems for all 1.x minor versions. Users are advised to upgrade. Users unable to upgrade should consider configuring a content security policy that does not allow `unsafe-inline`.",
    "cve_publish_date": "2024-03-11T23:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Fix improper case-sensitivity\n\nSee https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "naughty_business.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "30",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "sgml.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "9",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 2: ",
                "// Line 3: module Phlex",
                "// Line 4:     # **Standard Generalized Markup Language** for behaviour common to {HTML} and {SVG}.",
                "// Line 5:     class SGML",
                "// Line 6:         include Helpers",
                "// Line 7: ",
                "// Line 8:         class << self",
                "// Line 9:             # Render the view to a String. Arguments are delegated to {.new}.",
                "// Line 10:             def call(...)",
                "// Line 11:                 new(...).call",
                "// vulnerable line: 12: end",
                "// Line 13: ",
                "// Line 14:             # Create a new instance of the component.",
                "// Line 15:             # @note The block will not be delegated {#initialize}. Instead, it will be sent to {#template} when rendering.",
                "// Line 16:             def new(*args, **kwargs, &block)",
                "// Line 17:                 if block",
                "// Line 18:                     object = super(*args, **kwargs, &nil)",
                "// Line 19:                     object.instance_variable_set(:@_content_block, block)",
                "// Line 20:                     object",
                "// Line 21:                 else",
                "// Line 22:                     super",
                "// vulnerable line: 23: end",
                "// vulnerable line: 24: end",
                "// Line 25: ",
                "// Line 26:             # @api private",
                "// Line 27:             def rendered_at_least_once!",
                "// Line 28:                 alias_method :__attributes__, :__final_attributes__",
                "// Line 29:                 alias_method :call, :__final_call__",
                "// vulnerable line: 30: end",
                "// Line 31: ",
                "// Line 32:             # @api private",
                "// Line 33:             def element_method?(method_name)",
                "// Line 34:                 return false unless instance_methods.include?(method_name)",
                "// Line 35: ",
                "// Line 36:                 owner = instance_method(method_name).owner",
                "// Line 37: ",
                "// Line 38:                 return true if owner.is_a?(Phlex::Elements) && owner.registered_elements[method_name]",
                "// Line 39: ",
                "// Line 40:                 false",
                "// vulnerable line: 41: end",
                "// vulnerable line: 42: end",
                "// Line 43: ",
                "// Line 44:         # @!method initialize",
                "// Line 45:         # @abstract Override to define an initializer for your component.",
                "// Line 46:         # @note Your initializer will not receive a block passed to {.new}. Instead, this block will be sent to {#template} when rendering.",
                "// Line 47:         # @example",
                "// Line 48:         #     def initialize(articles:)",
                "// Line 49:         #         @articles = articles",
                "// Line 50:         #     end",
                "// Line 51: ",
                "// Line 52:         # @abstract Override to define a template for your component.",
                "// Line 60:         #             h1 { \"Hello World\" }",
                "// Line 61:         #             yield",
                "// Line 62:         #         }",
                "// Line 63:         #     end",
                "// Line 64:         # @example Alternatively, you can delegate the content block to an element.",
                "// Line 65:         #     def view_template(&block)",
                "// Line 66:         #         article(class: \"card\", &block)",
                "// Line 67:         #     end",
                "// Line 68:         def template",
                "// Line 69:             yield",
                "// vulnerable line: 70: end",
                "// Line 71: ",
                "// Line 72:         def self.method_added(method_name)",
                "// Line 73:             if method_name == :template",
                "// Line 74:                 Kernel.warn \"Defining the `template` method on a Phlex component is deprecated and will be unsupported in Phlex 2.0. Please define `view_template` instead.\"",
                "// vulnerable line: 75: end",
                "// vulnerable line: 76: end",
                "// Line 77: ",
                "// Line 78:         def view_template(&block)",
                "// Line 79:             template(&block)",
                "// vulnerable line: 80: end",
                "// Line 81: ",
                "// Line 82:         # @api private",
                "// Line 83:         def await(task)",
                "// Line 84:             if defined?(Concurrent::IVar) && task.is_a?(Concurrent::IVar)",
                "// Line 85:                 flush if task.pending?",
                "// Line 86: ",
                "// Line 87:                 task.wait.value",
                "// Line 88:             elsif defined?(Async::Task) && task.is_a?(Async::Task)",
                "// Line 89:                 flush if task.running?",
                "// Line 90: ",
                "// Line 91:                 task.wait",
                "// Line 92:             else",
                "// Line 93:                 raise ArgumentError, \"Expected an asynchronous task / promise.\"",
                "// vulnerable line: 94: end",
                "// vulnerable line: 95: end",
                "// Line 96: ",
                "// Line 97:         # Renders the view and returns the buffer. The default buffer is a mutable String.",
                "// Line 98:         def call(...)",
                "// Line 99:             __final_call__(...).tap do",
                "// Line 100:                 self.class.rendered_at_least_once!",
                "// vulnerable line: 101: end",
                "// vulnerable line: 102: end",
                "// Line 103: ",
                "// Line 104:         # @api private",
                "// Line 105:         def __final_call__(buffer = +\"\", context: Phlex::Context.new, view_context: nil, parent: nil, fragment: nil, &block)",
                "// Line 106:             @_buffer = buffer",
                "// Line 107:             @_context = context",
                "// Line 108:             @_view_context = view_context",
                "// Line 109:             @_parent = parent",
                "// Line 110:             @_context.fragment = fragment if fragment",
                "// Line 111: ",
                "// Line 112:             block ||= @_content_block",
                "// Line 117:                 if block",
                "// Line 118:                     if is_a?(DeferredRender)",
                "// Line 119:                         __vanish__(self, &block)",
                "// Line 120:                         view_template",
                "// Line 121:                     else",
                "// Line 122:                         view_template do |*args|",
                "// Line 123:                             if args.length > 0",
                "// Line 124:                                 yield_content_with_args(*args, &block)",
                "// Line 125:                             else",
                "// Line 126:                                 yield_content(&block)",
                "// vulnerable line: 127: end",
                "// vulnerable line: 128: end",
                "// vulnerable line: 129: end",
                "// Line 130:                 else",
                "// Line 131:                     view_template",
                "// vulnerable line: 132: end",
                "// vulnerable line: 133: end",
                "// Line 134: ",
                "// Line 135:             buffer << context.buffer unless parent",
                "// vulnerable line: 136: end",
                "// Line 137: ",
                "// Line 138:         # Access the current render context data",
                "// Line 139:         # @return the supplied context object, by default a Hash",
                "// Line 140:         def context",
                "// Line 141:             @_context.user_context",
                "// vulnerable line: 142: end",
                "// Line 143: ",
                "// Line 144:         # Output text content. The text will be HTML-escaped.",
                "// Line 145:         # @param content [String, Symbol, Integer, void] the content to be output on the buffer. Strings, Symbols, and Integers are handled by `plain` directly, but any object can be handled by overriding `format_object`",
                "// Line 146:         # @return [nil]",
                "// Line 147:         # @see #format_object",
                "// Line 148:         def plain(content)",
                "// Line 149:             context = @_context",
                "// Line 150:             return if context.fragment && !context.in_target_fragment",
                "// Line 151: ",
                "// Line 152:             unless __text__(content)",
                "// Line 153:                 raise ArgumentError, \"You've passed an object to plain that is not handled by format_object. See https://rubydoc.info/gems/phlex/Phlex/SGML#format_object-instance_method for more information\"",
                "// vulnerable line: 154: end",
                "// Line 155: ",
                "// Line 156:             nil",
                "// vulnerable line: 157: end",
                "// Line 158: ",
                "// Line 159:         # Output a whitespace character. This is useful for getting inline elements to wrap. If you pass a block, a whitespace will be output before and after yielding the block.",
                "// Line 160:         # @return [nil]",
                "// Line 161:         # @yield If a block is given, it yields the block with no arguments.",
                "// Line 162:         def whitespace(&block)",
                "// Line 163:             context = @_context",
                "// Line 164:             return if context.fragment && !context.in_target_fragment",
                "// Line 165: ",
                "// Line 166:             buffer = context.buffer",
                "// Line 167: ",
                "// Line 168:             buffer << \" \"",
                "// Line 169: ",
                "// Line 170:             if block_given?",
                "// Line 171:                 yield_content(&block)",
                "// Line 172:                 buffer << \" \"",
                "// vulnerable line: 173: end",
                "// Line 174: ",
                "// Line 175:             nil",
                "// vulnerable line: 176: end",
                "// Line 177: ",
                "// Line 178:         # Output an HTML comment.",
                "// Line 179:         # @return [nil]",
                "// Line 180:         def comment(&block)",
                "// Line 181:             context = @_context",
                "// Line 182:             return if context.fragment && !context.in_target_fragment",
                "// Line 183: ",
                "// Line 184:             buffer = context.buffer",
                "// Line 185: ",
                "// Line 186:             buffer << \"<!-- \"",
                "// Line 187:             yield_content(&block)",
                "// Line 188:             buffer << \" -->\"",
                "// Line 189: ",
                "// Line 190:             nil",
                "// vulnerable line: 191: end",
                "// Line 192: ",
                "// Line 193:         # This method is very dangerous and should usually be avoided. It will output the given String without any HTML safety. You should never use this method to output unsafe user input.",
                "// Line 194:         # @param content [String|nil]",
                "// Line 195:         # @return [nil]",
                "// Line 196:         def unsafe_raw(content = nil)",
                "// Line 197:             return nil unless content",
                "// Line 198: ",
                "// Line 199:             context = @_context",
                "// Line 200:             return if context.fragment && !context.in_target_fragment",
                "// Line 201: ",
                "// Line 202:             context.buffer << content",
                "// Line 203:             nil",
                "// vulnerable line: 204: end",
                "// Line 205: ",
                "// Line 206:         # Capture a block of output as a String.",
                "// Line 207:         # @note This only works if the block's receiver is the current component or the block returns a String.",
                "// Line 208:         # @return [String]",
                "// Line 209:         def capture(&block)",
                "// Line 210:             return \"\" unless block",
                "// Line 211: ",
                "// Line 212:             @_context.capturing_into(+\"\") { yield_content(&block) }",
                "// vulnerable line: 213: end",
                "// Line 214: ",
                "// Line 215:         private",
                "// Line 216: ",
                "// Line 217:         # @api private",
                "// Line 218:         def flush",
                "// Line 219:             return if @_context.capturing",
                "// Line 220: ",
                "// Line 221:             buffer = @_context.buffer",
                "// Line 222:             @_buffer << buffer.dup",
                "// Line 223:             buffer.clear",
                "// vulnerable line: 224: end",
                "// Line 225: ",
                "// Line 226:         # Render another component, block or enumerable",
                "// Line 227:         # @return [nil]",
                "// Line 228:         # @overload render(component, &block)",
                "// Line 229:         #     Renders the component.",
                "// Line 230:         #     @param component [Phlex::SGML]",
                "// Line 231:         # @overload render(component_class, &block)",
                "// Line 232:         #     Renders a new instance of the component class. This is useful for component classes that take no arguments.",
                "// Line 233:         #     @param component_class [Class<Phlex::SGML>]",
                "// Line 234:         # @overload render(proc)",
                "// Line 239:         #     @param enumerable [Enumerable]",
                "// Line 240:         #     @example",
                "// Line 241:         #         render @items",
                "// Line 242:         def render(renderable, &block)",
                "// Line 243:             case renderable",
                "// Line 244:             when Phlex::SGML",
                "// Line 245:                 renderable.call(@_buffer, context: @_context, view_context: @_view_context, parent: self, &block)",
                "// Line 246:             when Class",
                "// Line 247:                 if renderable < Phlex::SGML",
                "// Line 248:                     renderable.new.call(@_buffer, context: @_context, view_context: @_view_context, parent: self, &block)",
                "// vulnerable line: 249: end",
                "// Line 250:             when Enumerable",
                "// Line 251:                 renderable.each { |r| render(r, &block) }",
                "// Line 252:             when Proc, Method",
                "// Line 253:                 if renderable.arity == 0",
                "// Line 254:                     yield_content_with_no_args(&renderable)",
                "// Line 255:                 else",
                "// Line 256:                     yield_content(&renderable)",
                "// vulnerable line: 257: end",
                "// Line 258:             when String",
                "// Line 259:                 plain(renderable)",
                "// Line 260:             else",
                "// Line 261:                 raise ArgumentError, \"You can't render a #{renderable.inspect}.\"",
                "// vulnerable line: 262: end",
                "// Line 263: ",
                "// Line 264:             nil",
                "// vulnerable line: 265: end",
                "// Line 266: ",
                "// Line 267:         # Like {#capture} but the output is vanished into a BlackHole buffer.",
                "// Line 268:         # Because the BlackHole does nothing with the output, this should be faster.",
                "// Line 269:         # @return [nil]",
                "// Line 270:         # @api private",
                "// Line 271:         def __vanish__(*args)",
                "// Line 272:             return unless block_given?",
                "// Line 273: ",
                "// Line 274:             @_context.capturing_into(BlackHole) { yield(*args) }",
                "// Line 275: ",
                "// Line 276:             nil",
                "// vulnerable line: 277: end",
                "// Line 278: ",
                "// Line 279:         # Determines if the component should render. By default, it returns `true`.",
                "// Line 280:         # @abstract Override to define your own predicate to prevent rendering.",
                "// Line 281:         # @return [Boolean]",
                "// Line 282:         def render?",
                "// Line 283:             true",
                "// vulnerable line: 284: end",
                "// Line 285: ",
                "// Line 286:         # Format the object for output",
                "// Line 287:         # @abstract Override to define your own format handling for different object types. Please remember to call `super` in the case that the passed object doesn't match, so that object formatting can be added at different layers of the inheritance tree.",
                "// Line 288:         # @return [String]",
                "// Line 289:         def format_object(object)",
                "// Line 290:             case object",
                "// Line 291:             when Float, Integer",
                "// Line 292:                 object.to_s",
                "// vulnerable line: 293: end",
                "// vulnerable line: 294: end",
                "// Line 295: ",
                "// Line 296:         # @abstract Override this method to hook in around a template render. You can do things before and after calling `super` to render the template. You should always call `super` so that callbacks can be added at different layers of the inheritance tree.",
                "// Line 297:         # @return [nil]",
                "// Line 298:         def around_template",
                "// Line 299:             before_template",
                "// Line 300:             yield",
                "// Line 301:             after_template",
                "// Line 302: ",
                "// Line 303:             nil",
                "// vulnerable line: 304: end",
                "// Line 305: ",
                "// Line 306:         # @abstract Override this method to hook in right before a template is rendered. Please remember to call `super` so that callbacks can be added at different layers of the inheritance tree.",
                "// Line 307:         # @return [nil]",
                "// Line 308:         def before_template",
                "// Line 309:             nil",
                "// vulnerable line: 310: end",
                "// Line 311: ",
                "// Line 312:         # @abstract Override this method to hook in right after a template is rendered. Please remember to call `super` so that callbacks can be added at different layers of the inheritance tree.",
                "// Line 313:         # @return [nil]",
                "// Line 314:         def after_template",
                "// Line 315:             nil",
                "// vulnerable line: 316: end",
                "// Line 317: ",
                "// Line 318:         # Yields the block and checks if it buffered anything. If nothing was buffered, the return value is treated as text. The text is always HTML-escaped.",
                "// Line 319:         # @yieldparam component [self]",
                "// Line 320:         # @return [nil]",
                "// Line 321:         def yield_content",
                "// Line 322:             return unless block_given?",
                "// Line 323: ",
                "// Line 324:             buffer = @_context.buffer",
                "// Line 325: ",
                "// Line 326:             original_length = buffer.length",
                "// Line 327:             content = yield(self)",
                "// Line 328:             __text__(content) if original_length == buffer.length",
                "// Line 329: ",
                "// Line 330:             nil",
                "// vulnerable line: 331: end",
                "// Line 332: ",
                "// Line 333:         # Same as {#yield_content} but yields no arguments.",
                "// Line 334:         # @yield Yields the block with no arguments.",
                "// Line 335:         def yield_content_with_no_args",
                "// Line 336:             return unless block_given?",
                "// Line 337: ",
                "// Line 338:             buffer = @_context.buffer",
                "// Line 339: ",
                "// Line 340:             original_length = buffer.length",
                "// Line 341:             content = yield",
                "// Line 342:             __text__(content) if original_length == buffer.length",
                "// Line 343: ",
                "// Line 344:             nil",
                "// vulnerable line: 345: end",
                "// Line 346: ",
                "// Line 347:         # Same as {#yield_content} but accepts a splat of arguments to yield. This is slightly slower than {#yield_content}.",
                "// Line 348:         # @yield [*args] Yields the given arguments.",
                "// Line 349:         # @return [nil]",
                "// Line 350:         def yield_content_with_args(*args)",
                "// Line 351:             return unless block_given?",
                "// Line 352: ",
                "// Line 353:             buffer = @_context.buffer",
                "// Line 354: ",
                "// Line 355:             original_length = buffer.length",
                "// Line 356:             content = yield(*args)",
                "// Line 357:             __text__(content) if original_length == buffer.length",
                "// Line 358: ",
                "// Line 359:             nil",
                "// vulnerable line: 360: end",
                "// Line 361: ",
                "// Line 362:         # Performs the same task as the public method #plain, but does not raise an error if an unformattable object is passed",
                "// Line 363:         # @api private",
                "// Line 364:         def __text__(content)",
                "// Line 365:             case content",
                "// Line 366:             when String",
                "// Line 367:                 @_context.buffer << Phlex::Escape.html_escape(content)",
                "// Line 368:             when Symbol",
                "// Line 369:                 @_context.buffer << Phlex::Escape.html_escape(content.name)",
                "// Line 370:             when nil",
                "// Line 371:                 nil",
                "// Line 372:             else",
                "// Line 373:                 if (formatted_object = format_object(content))",
                "// Line 374:                     @_context.buffer << Phlex::Escape.html_escape(formatted_object)",
                "// Line 375:                 else",
                "// Line 376:                     return false",
                "// vulnerable line: 377: end",
                "// vulnerable line: 378: end",
                "// Line 379: ",
                "// Line 380:             true",
                "// vulnerable line: 381: end",
                "// Line 382: ",
                "// Line 383:         # @api private",
                "// Line 384:         def __attributes__(**attributes)",
                "// Line 385:             __final_attributes__(**attributes).tap do |buffer|",
                "// Line 386:                 Phlex::ATTRIBUTE_CACHE[respond_to?(:process_attributes) ? (attributes.hash + self.class.hash) : attributes.hash] = buffer.freeze",
                "// vulnerable line: 387: end",
                "// vulnerable line: 388: end",
                "// Line 389: ",
                "// Line 390:         # @api private",
                "// Line 391:         def __final_attributes__(**attributes)",
                "// Line 392:             if respond_to?(:process_attributes)",
                "// Line 393:                 attributes = process_attributes(**attributes)",
                "// vulnerable line: 394: end",
                "// Line 395: ",
                "// vulnerable line: 396: if attributes[:href]&.start_with?(/\\s*javascript:/)",
                "// vulnerable line: 397: attributes.delete(:href)",
                "// vulnerable line: 398: end",
                "// Line 399: ",
                "// vulnerable line: 400: if attributes[\"href\"]&.start_with?(/\\s*javascript:/)",
                "// vulnerable line: 401: attributes.delete(\"href\")",
                "// vulnerable line: 402: end",
                "// Line 403: ",
                "// Line 404:             buffer = +\"\"",
                "// Line 405:             __build_attributes__(attributes, buffer: buffer)",
                "// Line 406: ",
                "// Line 407:             buffer",
                "// vulnerable line: 408: end",
                "// Line 409: ",
                "// Line 410:         # @api private",
                "// Line 411:         def __build_attributes__(attributes, buffer:)",
                "// Line 412:             attributes.each do |k, v|",
                "// Line 413:                 next unless v",
                "// Line 414: ",
                "// Line 415:                 name = case k",
                "// Line 416:                     when String then k",
                "// Line 417:                     when Symbol then k.name.tr(\"_\", \"-\")",
                "// Line 418:                     else raise ArgumentError, \"Attribute keys should be Strings or Symbols.\"",
                "// vulnerable line: 419: end",
                "// Line 420: ",
                "// Line 421:                 # Detect unsafe attribute names. Attribute names are considered unsafe if they match an event attribute or include unsafe characters.",
                "// vulnerable line: 422: if HTML::EVENT_ATTRIBUTES[name] || name.match?(/[<>&\"']/)",
                "// Line 423:                     raise ArgumentError, \"Unsafe attribute name detected: #{k}.\"",
                "// vulnerable line: 424: end",
                "// Line 425: ",
                "// Line 426:                 case v",
                "// Line 427:                 when true",
                "// Line 428:                     buffer << \" \" << name",
                "// Line 429:                 when String",
                "// Line 430:                     buffer << \" \" << name << '=\"' << Phlex::Escape.html_escape(v) << '\"'",
                "// Line 431:                 when Symbol",
                "// Line 432:                     buffer << \" \" << name << '=\"' << Phlex::Escape.html_escape(v.name) << '\"'",
                "// Line 433:                 when Integer, Float",
                "// Line 434:                     buffer << \" \" << name << '=\"' << v.to_s << '\"'",
                "// Line 435:                 when Hash",
                "// Line 436:                     __build_attributes__(",
                "// Line 437:                         v.transform_keys { |subkey|",
                "// Line 438:                             case subkey",
                "// Line 439:                                 when Symbol then\"#{name}-#{subkey.name.tr('_', '-')}\"",
                "// Line 440:                                 else \"#{name}-#{subkey}\"",
                "// vulnerable line: 441: end",
                "// Line 442:                         }, buffer: buffer",
                "// Line 443:                     )",
                "// Line 444:                 when Array",
                "// Line 445:                     buffer << \" \" << name << '=\"' << Phlex::Escape.html_escape(v.compact.join(\" \")) << '\"'",
                "// Line 446:                 when Set",
                "// Line 447:                     buffer << \" \" << name << '=\"' << Phlex::Escape.html_escape(v.to_a.compact.join(\" \")) << '\"'",
                "// Line 448:                 else",
                "// Line 449:                     value = if v.respond_to?(:to_phlex_attribute_value)",
                "// Line 450:                         v.to_phlex_attribute_value",
                "// Line 451:                     elsif v.respond_to?(:to_str)",
                "// Line 452:                         v.to_str",
                "// Line 453:                     else",
                "// Line 454:                         v.to_s",
                "// vulnerable line: 455: end",
                "// Line 456: ",
                "// Line 457:                     buffer << \" \" << name << '=\"' << Phlex::Escape.html_escape(value) << '\"'",
                "// vulnerable line: 458: end",
                "// vulnerable line: 459: end",
                "// Line 460: ",
                "// Line 461:             buffer",
                "// vulnerable line: 462: end",
                "// vulnerable line: 463: end",
                "// vulnerable line: 464: end"
            ]
        }
    ]
}