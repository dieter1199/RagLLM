{
    "cve_id": "CVE-2024-21495",
    "cve_description": "Versions of the package github.com/greenpau/caddy-security before 1.0.42 are vulnerable to Insecure Randomness due to using an insecure random number generation library which could possibly be predicted via a brute-force search. Attackers could use the potentially predictable nonce value used for authentication purposes in the OAuth flow to conduct OAuth replay attacks. In addition, insecure randomness is used while generating multifactor authentication (MFA) secrets and creating API keys in the database package.",
    "cve_publish_date": "2024-02-17T05:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "security: addresses insecure randomness finding\n\nSee also: https://github.com/greenpau/caddy-security/issues/265",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "api_key.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 73:         return nil, errors.ErrAPIKeyUsageEmpty",
                "// Line 74:     }",
                "// Line 75:     if r.Key.Usage != \"api\" {",
                "// Line 76:         return nil, errors.ErrAPIKeyUsageUnsupported.WithArgs(r.Key.Usage)",
                "// Line 77:     }",
                "// Line 78:     if r.Key.Comment == \"\" {",
                "// Line 79:         return nil, errors.ErrAPIKeyCommentEmpty",
                "// Line 80:     }",
                "// Line 81:     p := &APIKey{",
                "// Line 82:         Comment:   r.Key.Comment,",
                "// vulnerable line: 83: ID:        GetRandomString(40),",
                "// Line 84:         Prefix:    r.Key.Prefix,",
                "// Line 85:         Payload:   r.Key.Payload,",
                "// Line 86:         Usage:     r.Key.Usage,",
                "// Line 87:         CreatedAt: time.Now().UTC(),",
                "// Line 88:     }",
                "// Line 89:     if r.Key.Disabled {",
                "// Line 90:         p.Disabled = true",
                "// Line 91:         p.DisabledAt = time.Now().UTC()",
                "// Line 92:     }",
                "// Line 93:     return p, nil"
            ]
        },
        {
            "filename_of_changes": "api_key_test.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "6",
            "number_of_lines_deleted_vulnerable_to_cve": "5",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 30:         want      map[string]interface{}",
                "// Line 31:         shouldErr bool",
                "// Line 32:         err       error",
                "// Line 33:     }{",
                "// Line 34:         {",
                "// Line 35:             name: \"test api key\",",
                "// Line 36:             req: &requests.Request{",
                "// Line 37:                 Key: requests.Key{",
                "// Line 38:                     Usage:   \"api\",",
                "// Line 39:                     Comment: \"jsmith-api-key\",",
                "// vulnerable line: 40: Payload: GetRandomStringFromRange(54, 72),",
                "// Line 41:                 },",
                "// Line 42:             },",
                "// Line 43:             want: map[string]interface{}{",
                "// Line 44:                 \"usage\":    \"api\",",
                "// Line 45:                 \"comment\":  \"jsmith-api-key\",",
                "// Line 46:                 \"disabled\": false,",
                "// Line 47:             },",
                "// Line 48:         },",
                "// Line 49:         {",
                "// Line 50:             name: \"test disabled api key\",",
                "// Line 51:             req: &requests.Request{",
                "// Line 52:                 Key: requests.Key{",
                "// Line 53:                     Usage:    \"api\",",
                "// Line 54:                     Comment:  \"jsmith-api-key\",",
                "// Line 55:                     Disabled: true,",
                "// vulnerable line: 56: Payload:  GetRandomStringFromRange(54, 72),",
                "// Line 57:                 },",
                "// Line 58:             },",
                "// Line 59:             want: map[string]interface{}{",
                "// Line 60:                 \"usage\":    \"api\",",
                "// Line 61:                 \"comment\":  \"jsmith-api-key\",",
                "// Line 62:                 \"disabled\": true,",
                "// Line 63:             },",
                "// Line 64:         },",
                "// Line 65:         {",
                "// Line 66:             name: \"test api key with empty payload\",",
                "// Line 84:                 },",
                "// Line 85:             },",
                "// Line 86:             shouldErr: true,",
                "// Line 87:             err:       errors.ErrAPIKeyPayloadEmpty,",
                "// Line 88:         },",
                "// Line 89:         {",
                "// Line 90:             name: \"test api key with empty usage\",",
                "// Line 91:             req: &requests.Request{",
                "// Line 92:                 Key: requests.Key{",
                "// Line 93:                     Comment:  \"jsmith-api-key\",",
                "// vulnerable line: 94: Payload:  GetRandomStringFromRange(54, 72),",
                "// Line 95:                     Disabled: true,",
                "// Line 96:                 },",
                "// Line 97:             },",
                "// Line 98:             shouldErr: true,",
                "// Line 99:             err:       errors.ErrAPIKeyUsageEmpty,",
                "// Line 100:         },",
                "// Line 101:         {",
                "// Line 102:             name: \"test api key with unsupported usage\",",
                "// Line 103:             req: &requests.Request{",
                "// Line 104:                 Key: requests.Key{",
                "// Line 105:                     Usage:    \"foo\",",
                "// Line 106:                     Comment:  \"jsmith-api-key\",",
                "// vulnerable line: 107: Payload:  GetRandomStringFromRange(54, 72),",
                "// Line 108:                     Disabled: true,",
                "// Line 109:                 },",
                "// Line 110:             },",
                "// Line 111:             shouldErr: true,",
                "// Line 112:             err:       errors.ErrAPIKeyUsageUnsupported.WithArgs(\"foo\"),",
                "// Line 113:         },",
                "// Line 114:         {",
                "// Line 115:             name: \"test api key with empty comment\",",
                "// Line 116:             req: &requests.Request{",
                "// Line 117:                 Key: requests.Key{",
                "// Line 118:                     Usage:    \"api\",",
                "// vulnerable line: 119: Payload:  GetRandomStringFromRange(54, 72),",
                "// Line 120:                     Disabled: true,",
                "// Line 121:                 },",
                "// Line 122:             },",
                "// Line 123:             shouldErr: true,",
                "// Line 124:             err:       errors.ErrAPIKeyCommentEmpty,",
                "// Line 125:         },",
                "// Line 126:     }",
                "// Line 127: ",
                "// Line 128:     for _, tc := range testcases {",
                "// Line 129:         t.Run(tc.name, func(t *testing.T) {"
            ]
        },
        {
            "filename_of_changes": "database.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 559: }",
                "// Line 560: ",
                "// Line 561: // AddAPIKey adds API key for a user.",
                "// Line 562: func (db *Database) AddAPIKey(r *requests.Request) error {",
                "// Line 563:     db.mu.Lock()",
                "// Line 564:     defer db.mu.Unlock()",
                "// Line 565:     user, err := db.validateUserIdentity(r.User.Username, r.User.Email)",
                "// Line 566:     if err != nil {",
                "// Line 567:         return errors.ErrAddAPIKey.WithArgs(r.Key.Usage, err)",
                "// Line 568:     }",
                "// vulnerable line: 569: s := GetRandomStringFromRange(72, 96)",
                "// Line 570:     failCount := 0",
                "// Line 571:     for {",
                "// Line 572:         hk, err := NewPassword(s)",
                "// Line 573:         if err != nil {",
                "// Line 574:             if failCount > 10 {",
                "// Line 575:                 return err",
                "// Line 576:             }",
                "// Line 577:             failCount++",
                "// Line 578:             continue",
                "// Line 579:         }"
            ]
        },
        {
            "filename_of_changes": "mfa_token.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 92: }",
                "// Line 93: ",
                "// Line 94: // Size returns the number of MfaToken instances in MfaTokenBundle.",
                "// Line 95: func (b *MfaTokenBundle) Size() int {",
                "// Line 96:     return b.size",
                "// Line 97: }",
                "// Line 98: ",
                "// Line 99: // NewMfaToken returns an instance of MfaToken.",
                "// Line 100: func NewMfaToken(req *requests.Request) (*MfaToken, error) {",
                "// Line 101:     p := &MfaToken{",
                "// vulnerable line: 102: ID:         GetRandomString(40),",
                "// Line 103:         CreatedAt:  time.Now().UTC(),",
                "// Line 104:         Parameters: make(map[string]string),",
                "// Line 105:         Flags:      make(map[string]bool),",
                "// Line 106:         Comment:    req.MfaToken.Comment,",
                "// Line 107:         Type:       req.MfaToken.Type,",
                "// Line 108:     }",
                "// Line 109: ",
                "// Line 110:     if req.MfaToken.Disabled {",
                "// Line 111:         p.Disabled = true",
                "// Line 112:         p.DisabledAt = time.Now().UTC()"
            ]
        },
        {
            "filename_of_changes": "public_key.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 80: ",
                "// Line 81: // Size returns the number of PublicKey instances in PublicKeyBundle.",
                "// Line 82: func (b *PublicKeyBundle) Size() int {",
                "// Line 83:     return b.size",
                "// Line 84: }",
                "// Line 85: ",
                "// Line 86: // NewPublicKey returns an instance of PublicKey.",
                "// Line 87: func NewPublicKey(r *requests.Request) (*PublicKey, error) {",
                "// Line 88:     p := &PublicKey{",
                "// Line 89:         Comment:   r.Key.Comment,",
                "// vulnerable line: 90: ID:        GetRandomString(40),",
                "// Line 91:         Payload:   r.Key.Payload,",
                "// Line 92:         Usage:     r.Key.Usage,",
                "// Line 93:         CreatedAt: time.Now().UTC(),",
                "// Line 94:     }",
                "// Line 95:     if err := p.parse(); err != nil {",
                "// Line 96:         return nil, err",
                "// Line 97:     }",
                "// Line 98:     if r.Key.Disabled {",
                "// Line 99:         p.Disabled = true",
                "// Line 100:         p.DisabledAt = time.Now().UTC()"
            ]
        },
        {
            "filename_of_changes": "random.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "19",
            "number_of_lines_deleted_vulnerable_to_cve": "5",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 9: // Unless required by applicable law or agreed to in writing, software",
                "// Line 10: // distributed under the License is distributed on an \"AS IS\" BASIS,",
                "// Line 11: // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "// Line 12: // See the License for the specific language governing permissions and",
                "// Line 13: // limitations under the License.",
                "// Line 14: ",
                "// Line 15: package tests",
                "// Line 16: ",
                "// Line 17: import (",
                "// Line 18:     \"github.com/google/uuid\"",
                "// vulnerable line: 19: \"math/rand\"",
                "// Line 20:     \"strings\"",
                "// Line 21: )",
                "// Line 22: ",
                "// Line 23: // NewID returns a random ID to be used for user identification.",
                "// Line 24: func NewID() string {",
                "// Line 25:     return uuid.New().String()",
                "// Line 26: }",
                "// Line 27: ",
                "// Line 28: // NewRandomString returns a random string.",
                "// Line 29: func NewRandomString(length int) string {",
                "// Line 30:     chars := []rune(\"abcdefghijklmnopqrstuvwxyz0123456789\")",
                "// Line 31:     if length == 0 {",
                "// Line 32:         length = 32",
                "// Line 33:     }",
                "// vulnerable line: 34: var b strings.Builder",
                "// vulnerable line: 35: for i := 0; i < length; i++ {",
                "// vulnerable line: 36: b.WriteRune(chars[rand.Intn(len(chars))])",
                "// Line 37:     }",
                "// vulnerable line: 38: return b.String()",
                "// Line 39: }"
            ]
        }
    ]
}