{
    "cve_id": "CVE-2024-4068",
    "cve_description": "The NPM package `braces`, versions prior to 3.0.3, fails to limit the number of characters it can handle, which could lead to Memory Exhaustion. In `lib/parse.js,` if a malicious user sends \"imbalanced braces\" as input, the parsing will enter a loop, which will cause the program to start allocating heap memory without freeing it at any moment of the loop. Eventually, the JavaScript heap limit is reached, and the program will crash.",
    "cve_publish_date": "2024-05-14T15:42Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Snyk js braces 6838727 (#40)\n\n* Remove maxSymbols from README\r\n\r\n* Revert \"Merge pull request #37 from coderaiser/fix/vulnerability\"\r\n\r\nThis reverts commit a5851e57f45c3431a94d83fc565754bc10f5bbc3, reversing\r\nchanges made to 98414f9f1fabe021736e26836d8306d5de747e0d.\r\n\r\n* Lower defaultLength to 10000",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "braces.parse.js",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "0",
            "number_of_lines_deleted_vulnerable_to_cve": "10",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 2: ",
                "// Line 3: require('mocha');",
                "// Line 4: const assert = require('assert').strict;",
                "// Line 5: const parse = require('../lib/parse');",
                "// Line 6: ",
                "// Line 7: describe('braces.parse()', () => {",
                "// Line 8:   describe('errors', () => {",
                "// Line 9:     it('should throw an error when string exceeds max safe length', () => {",
                "// Line 10:       let MAX_LENGTH = 1024 * 64;",
                "// Line 11:       assert.throws(() => parse('.'.repeat(MAX_LENGTH + 2)));",
                "// vulnerable line: 12: });",
                "// vulnerable line: 13: it('should throw an error when symbols exceeds max symbols count default', () => {",
                "// vulnerable line: 14: let SYMBOLS= 1024;",
                "// vulnerable line: 15: assert.throws(() => parse('.'.repeat(MAX_SYMBOLS * 2)));",
                "// vulnerable line: 16: });",
                "// vulnerable line: 17: it('should throw an error when symbols exceeds max symbols count ', () => {",
                "// vulnerable line: 18: let SYMBOLS= 2;",
                "// vulnerable line: 19: assert.throws(() => parse('...', {",
                "// vulnerable line: 20: maxSymbols: 2,",
                "// vulnerable line: 21: }));",
                "// vulnerable line: 22: });",
                "// vulnerable line: 23: });",
                "// Line 24: ",
                "// Line 25:   describe('valid', () => {",
                "// Line 26:     it('should return an AST', () => {",
                "// Line 27:       let ast = parse('a/{b,c}/d');",
                "// Line 28:       let brace = ast.nodes.find(node => node.type === 'brace');",
                "// Line 29:       assert(brace);",
                "// Line 30:       assert.equal(brace.nodes.length, 5);",
                "// vulnerable line: 31: });",
                "// Line 32: ",
                "// Line 33:     it('should ignore braces inside brackets', () => {",
                "// Line 34:       let ast = parse('a/[{b,c}]/d');",
                "// Line 35:       assert.equal(ast.nodes[1].type, 'text');",
                "// Line 36:       assert.equal(ast.nodes[1].value, 'a/[{b,c}]/d');",
                "// vulnerable line: 37: });",
                "// Line 38: ",
                "// Line 39:     it('should parse braces with brackets inside', () => {",
                "// Line 40:       let ast = parse('a/{a,b,[{c,d}]}/e');",
                "// Line 41:       let brace = ast.nodes[2];",
                "// Line 42:       let bracket = brace.nodes.find(node => node.value[0] === '[');",
                "// Line 43:       assert(bracket);",
                "// Line 44:       assert.equal(bracket.value, '[{c,d}]');",
                "// vulnerable line: 45: });",
                "// vulnerable line: 46: });",
                "// Line 47: ",
                "// Line 48:   describe('invalid', () => {",
                "// Line 49:     it('should escape standalone closing braces', () => {",
                "// Line 50:       let one = parse('}');",
                "// Line 51:       assert.equal(one.nodes[1].type, 'text');",
                "// Line 52:       assert.equal(one.nodes[1].value, '}');",
                "// Line 53: ",
                "// Line 54:       let two = parse('a}b');",
                "// Line 55:       assert.equal(two.nodes[1].type, 'text');",
                "// Line 56:       assert.equal(two.nodes[1].value, 'a}b');",
                "// vulnerable line: 57: });",
                "// vulnerable line: 58: });",
                "// vulnerable line: 59: });"
            ]
        },
        {
            "filename_of_changes": "constants.js",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: 'use strict';",
                "// Line 2: ",
                "// Line 3: module.exports = {",
                "// vulnerable line: 4: MAX_LENGTH: 1024 * 64,",
                "// vulnerable line: 5: MAX_SYMBOLS: 1024,",
                "// Line 6: ",
                "// Line 7:   // Digits",
                "// Line 8:   CHAR_0: '0', /* 0 */",
                "// Line 9:   CHAR_9: '9', /* 9 */",
                "// Line 10: ",
                "// Line 11:   // Alphabet chars.",
                "// Line 12:   CHAR_UPPERCASE_A: 'A', /* A */",
                "// Line 13:   CHAR_LOWERCASE_A: 'a', /* a */",
                "// Line 14:   CHAR_UPPERCASE_Z: 'Z', /* Z */",
                "// Line 15:   CHAR_LOWERCASE_Z: 'z', /* z */"
            ]
        }
    ]
}