{
    "cve_id": "CVE-2024-36114",
    "cve_description": "Aircompressor is a library with ports of the Snappy, LZO, LZ4, and Zstandard compression algorithms to Java. All decompressor implementations of Aircompressor (LZ4, LZO, Snappy, Zstandard) can crash the JVM for certain input, and in some cases also leak the content of other memory of the Java process (which could contain sensitive information). When decompressing certain data, the decompressors try to access memory outside the bounds of the given byte arrays or byte buffers. Because Aircompressor uses the JDK class `sun.misc.Unsafe` to speed up memory access, no additional bounds checks are performed and this has similar security consequences as out-of-bounds access in C or C++, namely it can lead to non-deterministic behavior or crash the JVM. Users should update to Aircompressor 0.27 or newer where these issues have been fixed. When decompressing data from untrusted users, this can be exploited for a denial-of-service attack by crashing the JVM, or to leak other sensitive information from the Java process. There are no known workarounds for this issue.",
    "cve_publish_date": "2024-05-29T21:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Fix bounds checks",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "TestZstd.java",
            "code_language": "Java",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 251:         buffer.write(new byte[] {(byte) 255, (byte) 255});",
                "// Line 252:         buffer.write(new byte[] {(byte) 255, (byte) 255});",
                "// Line 253:         buffer.write(new byte[] {(byte) 255, (byte) 255});",
                "// Line 254: ",
                "// Line 255:         buffer.write(new byte[10]);",
                "// Line 256: ",
                "// Line 257:         byte[] data = buffer.toByteArray();",
                "// Line 258: ",
                "// Line 259:         assertThatThrownBy(() -> new ZstdDecompressor().decompress(data, 0, data.length, new byte[10], 0, 10))",
                "// Line 260:                 .isInstanceOf(MalformedInputException.class)",
                "// vulnerable line: 261: .hasMessageStartingWith(\"Input is corrupted\");",
                "// Line 262:     }",
                "// Line 263: }"
            ]
        },
        {
            "filename_of_changes": "ZstdFrameDecompressor.java",
            "code_language": "Java",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 163:                 int header = get24BitLittleEndian(inputBase, input);",
                "// Line 164:                 input += SIZE_OF_BLOCK_HEADER;",
                "// Line 165: ",
                "// Line 166:                 lastBlock = (header & 1) != 0;",
                "// Line 167:                 int blockType = (header >>> 1) & 0b11;",
                "// Line 168:                 int blockSize = (header >>> 3) & 0x1F_FFFF; // 21 bits",
                "// Line 169: ",
                "// Line 170:                 int decodedSize;",
                "// Line 171:                 switch (blockType) {",
                "// Line 172:                     case RAW_BLOCK:",
                "// vulnerable line: 173: verify(inputAddress + blockSize <= inputLimit, input, \"Not enough input bytes\");",
                "// Line 174:                         decodedSize = decodeRawBlock(inputBase, input, blockSize, outputBase, output, outputLimit);",
                "// Line 175:                         input += blockSize;",
                "// Line 176:                         break;",
                "// Line 177:                     case RLE_BLOCK:",
                "// vulnerable line: 178: verify(inputAddress + 1 <= inputLimit, input, \"Not enough input bytes\");",
                "// Line 179:                         decodedSize = decodeRleBlock(blockSize, inputBase, input, outputBase, output, outputLimit);",
                "// Line 180:                         input += 1;",
                "// Line 181:                         break;",
                "// Line 182:                     case COMPRESSED_BLOCK:",
                "// vulnerable line: 183: verify(inputAddress + blockSize <= inputLimit, input, \"Not enough input bytes\");",
                "// Line 184:                         decodedSize = decodeCompressedBlock(inputBase, input, blockSize, outputBase, output, outputLimit, frameHeader.windowSize, outputAddress);",
                "// Line 185:                         input += blockSize;",
                "// Line 186:                         break;",
                "// Line 187:                     default:",
                "// Line 188:                         throw fail(input, \"Invalid block type\");",
                "// Line 189:                 }",
                "// Line 190: ",
                "// Line 191:                 output += decodedSize;",
                "// Line 192:             }",
                "// Line 193:             while (!lastBlock);"
            ]
        }
    ]
}