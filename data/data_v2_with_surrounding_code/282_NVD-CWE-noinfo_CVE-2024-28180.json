{
    "cve_id": "CVE-2024-28180",
    "cve_description": "Package jose aims to provide an implementation of the Javascript Object Signing and Encryption set of standards. An attacker could send a JWE containing compressed data that used large amounts of memory and CPU when decompressed by Decrypt or DecryptMulti. Those functions now return an error if the decompressed data would exceed 250kB or 10x the compressed size (whichever is larger). This vulnerability has been patched in versions 4.0.1, 3.0.3 and 2.6.3.\n",
    "cve_publish_date": "2024-03-09T01:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "jwe: limit maximum output from decompressing (#106)",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "crypter.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "6",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "encoding.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "14",
            "number_of_lines_deleted_vulnerable_to_cve": "4",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 26:     \"strings\"",
                "// Line 27:     \"unicode\"",
                "// Line 28: ",
                "// Line 29:     \"github.com/go-jose/go-jose/v4/json\"",
                "// Line 30: )",
                "// Line 31: ",
                "// Line 32: // Helper function to serialize known-good objects.",
                "// Line 33: // Precondition: value is not a nil pointer.",
                "// Line 34: func mustSerializeJSON(value interface{}) []byte {",
                "// Line 35:     out, err := json.Marshal(value)",
                "// vulnerable line: 36: if err != nil {",
                "// Line 37:         panic(err)",
                "// Line 38:     }",
                "// Line 39:     // We never want to serialize the top-level value \"null,\" since it's not a",
                "// Line 40:     // valid JOSE message. But if a caller passes in a nil pointer to this method,",
                "// Line 41:     // MarshalJSON will happily serialize it as the top-level value \"null\". If",
                "// Line 42:     // that value is then embedded in another operation, for instance by being",
                "// Line 43:     // base64-encoded and fed as input to a signing algorithm",
                "// Line 44:     // (https://github.com/go-jose/go-jose/issues/22), the result will be",
                "// Line 45:     // incorrect. Because this method is intended for known-good objects, and a nil",
                "// Line 46:     // pointer is not a known-good object, we are free to panic in this case.",
                "// Line 78: // Perform decompression based on algorithm",
                "// Line 79: func decompress(algorithm CompressionAlgorithm, input []byte) ([]byte, error) {",
                "// Line 80:     switch algorithm {",
                "// Line 81:     case DEFLATE:",
                "// Line 82:         return inflate(input)",
                "// Line 83:     default:",
                "// Line 84:         return nil, ErrUnsupportedAlgorithm",
                "// Line 85:     }",
                "// Line 86: }",
                "// Line 87: ",
                "// vulnerable line: 88: // Compress with DEFLATE",
                "// Line 89: func deflate(input []byte) ([]byte, error) {",
                "// Line 90:     output := new(bytes.Buffer)",
                "// Line 91: ",
                "// Line 92:     // Writing to byte buffer, err is always nil",
                "// Line 93:     writer, _ := flate.NewWriter(output, 1)",
                "// Line 94:     _, _ = io.Copy(writer, bytes.NewBuffer(input))",
                "// Line 95: ",
                "// Line 96:     err := writer.Close()",
                "// Line 97:     return output.Bytes(), err",
                "// Line 98: }",
                "// Line 99: ",
                "// vulnerable line: 100: // Decompress with DEFLATE",
                "// Line 101: func inflate(input []byte) ([]byte, error) {",
                "// Line 102:     output := new(bytes.Buffer)",
                "// Line 103:     reader := flate.NewReader(bytes.NewBuffer(input))",
                "// Line 104: ",
                "// vulnerable line: 105: _, err := io.Copy(output, reader)",
                "// vulnerable line: 106: if err != nil {",
                "// Line 107:         return nil, err",
                "// Line 108:     }",
                "// Line 109: ",
                "// Line 110:     err = reader.Close()",
                "// Line 111:     return output.Bytes(), err",
                "// Line 112: }",
                "// Line 113: ",
                "// Line 114: // byteBuffer represents a slice of bytes that can be serialized to url-safe base64.",
                "// Line 115: type byteBuffer struct {",
                "// Line 116:     data []byte",
                "// Line 139:     return newBuffer(bytes.TrimLeft(data, \"\u0000\"))",
                "// Line 140: }",
                "// Line 141: ",
                "// Line 142: func (b *byteBuffer) MarshalJSON() ([]byte, error) {",
                "// Line 143:     return json.Marshal(b.base64())",
                "// Line 144: }",
                "// Line 145: ",
                "// Line 146: func (b *byteBuffer) UnmarshalJSON(data []byte) error {",
                "// Line 147:     var encoded string",
                "// Line 148:     err := json.Unmarshal(data, &encoded)",
                "// vulnerable line: 149: if err != nil {",
                "// Line 150:         return err",
                "// Line 151:     }",
                "// Line 152: ",
                "// Line 153:     if encoded == \"\" {",
                "// Line 154:         return nil",
                "// Line 155:     }",
                "// Line 156: ",
                "// Line 157:     decoded, err := base64.RawURLEncoding.DecodeString(encoded)",
                "// vulnerable line: 158: if err != nil {",
                "// Line 159:         return err",
                "// Line 160:     }",
                "// Line 161: ",
                "// Line 162:     *b = *newBuffer(decoded)",
                "// Line 163: ",
                "// Line 164:     return nil",
                "// Line 165: }",
                "// Line 166: ",
                "// Line 167: func (b *byteBuffer) base64() string {",
                "// Line 168:     return base64.RawURLEncoding.EncodeToString(b.data)"
            ]
        }
    ]
}