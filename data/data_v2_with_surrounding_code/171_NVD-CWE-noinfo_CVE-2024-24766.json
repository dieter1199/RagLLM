{
    "cve_id": "CVE-2024-24766",
    "cve_description": "CasaOS-UserService provides user management functionalities to CasaOS. Starting in version 0.4.4.3 and prior to version 0.4.7, the Casa OS Login page disclosed the username enumeration vulnerability in the login page. An attacker can enumerate the CasaOS username using the application response. If the username is incorrect application gives the error `**User does not exist**`.  If the password is incorrect application gives the error `**Invalid password**`.  Version 0.4.7 fixes this issue.",
    "cve_publish_date": "2024-03-06T19:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Merge pull request from GHSA-c967-2652-gfjm\n\n* fix: fix username enumeration\n\n* fix typo msg type\n\n* fix: recovery error patch\n\n* fix: recovery error patch\n\n---------\n\nSigned-off-by: CorrectRoadH <a778917369@gmail.com>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "user.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 104:         c.JSON(common_err.CLIENT_ERROR,",
                "// Line 105:             model.Result{",
                "// Line 106:                 Success: common_err.CLIENT_ERROR,",
                "// Line 107:                 Message: common_err.GetMsg(common_err.INVALID_PARAMS),",
                "// Line 108:             })",
                "// Line 109:         return",
                "// Line 110:     }",
                "// Line 111:     user := service.MyService.User().GetUserAllInfoByName(username)",
                "// Line 112:     if user.Id == 0 {",
                "// Line 113:         c.JSON(common_err.CLIENT_ERROR,",
                "// vulnerable line: 114: model.Result{Success: common_err.USER_NOT_EXIST, Message: common_err.GetMsg(common_err.USER_NOT_EXIST)})",
                "// Line 115:         return",
                "// Line 116:     }",
                "// Line 117:     if user.Password != encryption.GetMD5ByStr(password) {",
                "// Line 118:         c.JSON(common_err.CLIENT_ERROR,",
                "// vulnerable line: 119: model.Result{Success: common_err.PWD_INVALID, Message: common_err.GetMsg(common_err.PWD_INVALID)})",
                "// Line 120:         return",
                "// Line 121:     }",
                "// Line 122: ",
                "// Line 123:     privateKey, _ := service.MyService.User().GetKeyPair()",
                "// Line 124: ",
                "// Line 125:     token := system_model.VerifyInformation{}",
                "// Line 126: ",
                "// Line 127:     accessToken, err := jwt.GetAccessToken(user.Username, privateKey, user.Id)",
                "// Line 128:     if err != nil {",
                "// Line 129:         c.JSON(http.StatusInternalServerError, model.Result{Success: common_err.SERVICE_ERROR, Message: err.Error()})",
                "// Line 158: // @Tags user",
                "// Line 159: // @Param file formData file true \"用户头像\"",
                "// Line 160: // @Security ApiKeyAuth",
                "// Line 161: // @Success 200 {string} string \"ok\"",
                "// Line 162: // @Router /users/avatar [put]",
                "// Line 163: func PutUserAvatar(c *gin.Context) {",
                "// Line 164:     id := c.GetHeader(\"user_id\")",
                "// Line 165:     user := service.MyService.User().GetUserInfoById(id)",
                "// Line 166:     if user.Id == 0 {",
                "// Line 167:         c.JSON(common_err.SERVICE_ERROR,",
                "// vulnerable line: 168: model.Result{Success: common_err.USER_NOT_EXIST, Message: common_err.GetMsg(common_err.USER_NOT_EXIST)})",
                "// Line 169:         return",
                "// Line 170:     }",
                "// Line 171:     json := make(map[string]string)",
                "// Line 172:     c.ShouldBind(&json)",
                "// Line 173: ",
                "// Line 174:     data := json[\"file\"]",
                "// Line 175:     imgBase64 := strings.Replace(data, \"data:image/png;base64,\", \"\", 1)",
                "// Line 176:     decodeData, err := base64.StdEncoding.DecodeString(string(imgBase64))",
                "// Line 177:     if err != nil {",
                "// Line 178:         c.JSON(http.StatusInternalServerError, model.Result{Success: common_err.SERVICE_ERROR, Message: err.Error()})",
                "// Line 213: // @Tags user",
                "// Line 214: // @Param file formData file true \"用户头像\"",
                "// Line 215: // @Security ApiKeyAuth",
                "// Line 216: // @Success 200 {string} string \"ok\"",
                "// Line 217: // @Router /users/avatar [get]",
                "// Line 218: func GetUserAvatar(c *gin.Context) {",
                "// Line 219:     id := c.GetHeader(\"user_id\")",
                "// Line 220:     user := service.MyService.User().GetUserInfoById(id)",
                "// Line 221:     if user.Id == 0 {",
                "// Line 222:         c.JSON(common_err.SERVICE_ERROR,",
                "// vulnerable line: 223: model.Result{Success: common_err.USER_NOT_EXIST, Message: common_err.GetMsg(common_err.USER_NOT_EXIST)})",
                "// Line 224:         return",
                "// Line 225:     }",
                "// Line 226: ",
                "// Line 227:     if file.Exists(user.Avatar) {",
                "// Line 228:         c.Header(\"Content-Disposition\", \"attachment; filename*=utf-8''\"+url2.PathEscape(path.Base(user.Avatar)))",
                "// Line 229:         c.Header(\"Cache-Control\", \"no-cache, no-store, max-age=0, must-revalidate, value\")",
                "// Line 230:         c.File(user.Avatar)",
                "// Line 231:         return",
                "// Line 232:     }",
                "// Line 233:     user.Avatar = \"/usr/share/casaos/www/avatar.svg\"",
                "// Line 251: // @Security ApiKeyAuth",
                "// Line 252: // @Success 200 {string} string \"ok\"",
                "// Line 253: // @Router /user/name/:id [put]",
                "// Line 254: func PutUserInfo(c *gin.Context) {",
                "// Line 255:     id := c.GetHeader(\"user_id\")",
                "// Line 256:     json := model2.UserDBModel{}",
                "// Line 257:     c.ShouldBind(&json)",
                "// Line 258:     user := service.MyService.User().GetUserInfoById(id)",
                "// Line 259:     if user.Id == 0 {",
                "// Line 260:         c.JSON(common_err.SERVICE_ERROR,",
                "// vulnerable line: 261: model.Result{Success: common_err.USER_NOT_EXIST, Message: common_err.GetMsg(common_err.USER_NOT_EXIST)})",
                "// Line 262:         return",
                "// Line 263:     }",
                "// Line 264:     if len(json.Username) > 0 {",
                "// Line 265:         u := service.MyService.User().GetUserInfoByUserName(json.Username)",
                "// Line 266:         if u.Id > 0 {",
                "// Line 267:             c.JSON(common_err.CLIENT_ERROR,",
                "// Line 268:                 model.Result{Success: common_err.USER_EXIST, Message: common_err.GetMsg(common_err.USER_EXIST)})",
                "// Line 269:             return",
                "// Line 270:         }",
                "// Line 271:     }",
                "// Line 302:     c.ShouldBind(&json)",
                "// Line 303:     oldPwd := json[\"old_password\"]",
                "// Line 304:     pwd := json[\"password\"]",
                "// Line 305:     if len(oldPwd) == 0 || len(pwd) == 0 {",
                "// Line 306:         c.JSON(common_err.CLIENT_ERROR, model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
                "// Line 307:         return",
                "// Line 308:     }",
                "// Line 309:     user := service.MyService.User().GetUserAllInfoById(id)",
                "// Line 310:     if user.Id == 0 {",
                "// Line 311:         c.JSON(common_err.SERVICE_ERROR,",
                "// vulnerable line: 312: model.Result{Success: common_err.USER_NOT_EXIST, Message: common_err.GetMsg(common_err.USER_NOT_EXIST)})",
                "// Line 313:         return",
                "// Line 314:     }",
                "// Line 315:     if user.Password != encryption.GetMD5ByStr(oldPwd) {",
                "// Line 316:         c.JSON(common_err.CLIENT_ERROR, model.Result{Success: common_err.PWD_INVALID_OLD, Message: common_err.GetMsg(common_err.PWD_INVALID_OLD)})",
                "// Line 317:         return",
                "// Line 318:     }",
                "// Line 319:     user.Password = encryption.GetMD5ByStr(pwd)",
                "// Line 320:     service.MyService.User().UpdateUserPassword(user)",
                "// Line 321:     user.Password = \"\"",
                "// Line 322:     c.JSON(common_err.SUCCESS, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS), Data: user})",
                "// Line 335:     json := make(map[string]string)",
                "// Line 336:     c.ShouldBind(&json)",
                "// Line 337:     Nickname := json[\"nick_name\"]",
                "// Line 338:     if len(Nickname) == 0 {",
                "// Line 339:         c.JSON(http.StatusOK, model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
                "// Line 340:         return",
                "// Line 341:     }",
                "// Line 342:     user := service.MyService.User().GetUserInfoById(id)",
                "// Line 343:     if user.Id == 0 {",
                "// Line 344:         c.JSON(http.StatusOK,",
                "// vulnerable line: 345: model.Result{Success: common_err.USER_NOT_EXIST, Message: common_err.GetMsg(common_err.USER_NOT_EXIST)})",
                "// Line 346:         return",
                "// Line 347:     }",
                "// Line 348:     user.Nickname = Nickname",
                "// Line 349:     service.MyService.User().UpdateUser(user)",
                "// Line 350:     c.JSON(http.StatusOK, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS), Data: user})",
                "// Line 351: }",
                "// Line 352: ",
                "// Line 353: // @Summary edit user description",
                "// Line 354: // @Produce  application/json",
                "// Line 355: // @Accept multipart/form-data",
                "// Line 363:     json := make(map[string]string)",
                "// Line 364:     c.ShouldBind(&json)",
                "// Line 365:     desc := json[\"description\"]",
                "// Line 366:     if len(desc) == 0 {",
                "// Line 367:         c.JSON(http.StatusOK, model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
                "// Line 368:         return",
                "// Line 369:     }",
                "// Line 370:     user := service.MyService.User().GetUserInfoById(id)",
                "// Line 371:     if user.Id == 0 {",
                "// Line 372:         c.JSON(http.StatusOK,",
                "// vulnerable line: 373: model.Result{Success: common_err.USER_NOT_EXIST, Message: common_err.GetMsg(common_err.USER_NOT_EXIST)})",
                "// Line 374:         return",
                "// Line 375:     }",
                "// Line 376:     user.Description = desc",
                "// Line 377: ",
                "// Line 378:     service.MyService.User().UpdateUser(user)",
                "// Line 379: ",
                "// Line 380:     c.JSON(http.StatusOK, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS), Data: user})",
                "// Line 381: }",
                "// Line 382: ",
                "// Line 383: // @Summary get user info",
                "// Line 456:     if len(name) == 0 {",
                "// Line 457:         c.JSON(common_err.CLIENT_ERROR, model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
                "// Line 458:         return",
                "// Line 459:     }",
                "// Line 460:     id := c.GetHeader(\"user_id\")",
                "// Line 461: ",
                "// Line 462:     user := service.MyService.User().GetUserInfoById(id)",
                "// Line 463:     //    user := service.MyService.User().GetUserInfoByUsername(Username)",
                "// Line 464:     if user.Id == 0 {",
                "// Line 465:         c.JSON(common_err.SERVICE_ERROR,",
                "// vulnerable line: 466: model.Result{Success: common_err.USER_NOT_EXIST, Message: common_err.GetMsg(common_err.USER_NOT_EXIST)})",
                "// Line 467:         return",
                "// Line 468:     }",
                "// Line 469:     filePath := config.AppInfo.UserDataPath + \"/\" + id + \"/\" + name + \".json\"",
                "// Line 470: ",
                "// Line 471:     data := file.ReadFullFile(filePath)",
                "// Line 472:     if !gjson.ValidBytes(data) {",
                "// Line 473:         c.JSON(common_err.SUCCESS, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS), Data: string(data)})",
                "// Line 474:         return",
                "// Line 475:     }",
                "// Line 476:     c.JSON(common_err.SUCCESS, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS), Data: json2.RawMessage(string(data))})",
                "// Line 485: func PostUserCustomConf(c *gin.Context) {",
                "// Line 486:     name := c.Param(\"key\")",
                "// Line 487:     if len(name) == 0 {",
                "// Line 488:         c.JSON(common_err.CLIENT_ERROR, model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
                "// Line 489:         return",
                "// Line 490:     }",
                "// Line 491:     id := c.GetHeader(\"user_id\")",
                "// Line 492:     user := service.MyService.User().GetUserInfoById(id)",
                "// Line 493:     if user.Id == 0 {",
                "// Line 494:         c.JSON(common_err.SERVICE_ERROR,",
                "// vulnerable line: 495: model.Result{Success: common_err.USER_NOT_EXIST, Message: common_err.GetMsg(common_err.USER_NOT_EXIST)})",
                "// Line 496:         return",
                "// Line 497:     }",
                "// Line 498:     data, _ := io.ReadAll(c.Request.Body)",
                "// Line 499:     filePath := config.AppInfo.UserDataPath + \"/\" + strconv.Itoa(user.Id)",
                "// Line 500: ",
                "// Line 501:     if err := file.IsNotExistMkDir(filePath); err != nil {",
                "// Line 502:         c.JSON(common_err.SERVICE_ERROR,",
                "// Line 503:             model.Result{Success: common_err.SERVICE_ERROR, Message: common_err.GetMsg(common_err.SERVICE_ERROR)})",
                "// Line 504:         return",
                "// Line 505:     }",
                "// Line 536: func DeleteUserCustomConf(c *gin.Context) {",
                "// Line 537:     name := c.Param(\"key\")",
                "// Line 538:     if len(name) == 0 {",
                "// Line 539:         c.JSON(common_err.CLIENT_ERROR, model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
                "// Line 540:         return",
                "// Line 541:     }",
                "// Line 542:     id := c.GetHeader(\"user_id\")",
                "// Line 543:     user := service.MyService.User().GetUserInfoById(id)",
                "// Line 544:     if user.Id == 0 {",
                "// Line 545:         c.JSON(common_err.SERVICE_ERROR,",
                "// vulnerable line: 546: model.Result{Success: common_err.USER_NOT_EXIST, Message: common_err.GetMsg(common_err.USER_NOT_EXIST)})",
                "// Line 547:         return",
                "// Line 548:     }",
                "// Line 549:     filePath := config.AppInfo.UserDataPath + \"/\" + strconv.Itoa(user.Id) + \"/\" + name + \".json\"",
                "// Line 550:     err := os.Remove(filePath)",
                "// Line 551:     if err != nil {",
                "// Line 552:         c.JSON(common_err.SERVICE_ERROR, model.Result{Success: common_err.SERVICE_ERROR, Message: common_err.GetMsg(common_err.SERVICE_ERROR)})",
                "// Line 553:         return",
                "// Line 554:     }",
                "// Line 555:     c.JSON(common_err.SUCCESS, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS)})",
                "// Line 556: }"
            ]
        }
    ]
}