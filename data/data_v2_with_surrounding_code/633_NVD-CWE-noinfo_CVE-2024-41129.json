{
    "cve_id": "CVE-2024-41129",
    "cve_description": "The ops library is a Python framework for developing and testing Kubernetes and machine charms. The issue here is that ops passes the secret content as one of the args via CLI. This issue may affect any of the charms that are using: Juju (>=3.0), Juju secrets and not correctly capturing and processing `subprocess.CalledProcessError`. This vulnerability is fixed in 2.15.0.",
    "cve_publish_date": "2024-07-22T15:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fix: use temp dir for secret data (#1290)\n\nChange the mechanism used to pass secret values from ops to hook tools\r\nfrom command line to files in temporary directory.\r\n\r\nRemoves the 2MB total secret size limit imposed by command line length\r\n\r\nHook tool calls juju agent which in turn reads these files, I've\r\nconfirmed with the Juju team that juju agent and charm code are run as\r\nthe same user.",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "model.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "14",
            "number_of_lines_deleted_vulnerable_to_cve": "9",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1258:     def _validate_content(cls, content: Optional[Dict[str, str]]):",
                "// Line 1259:         \"\"\"Ensure the given secret content is valid, or raise ValueError.\"\"\"",
                "// Line 1260:         if not isinstance(content, dict):",
                "// Line 1261:             raise TypeError(f'Secret content must be a dict, not {type(content).__name__}')",
                "// Line 1262:         if not content:",
                "// Line 1263:             raise ValueError('Secret content must not be empty')",
                "// Line 1264: ",
                "// Line 1265:         invalid_keys: List[str] = []",
                "// Line 1266:         invalid_value_keys: List[str] = []",
                "// Line 1267:         invalid_value_types: Set[str] = set()",
                "// vulnerable line: 1268: for k, v in content.items():",
                "// Line 1269:             if not cls._key_re.match(k):",
                "// Line 1270:                 invalid_keys.append(k)",
                "// Line 1271:             if not isinstance(v, str):",
                "// Line 1272:                 invalid_value_keys.append(k)",
                "// Line 1273:                 invalid_value_types.add(type(v).__name__)",
                "// Line 1274: ",
                "// Line 1275:         if invalid_keys:",
                "// Line 1276:             raise ValueError(",
                "// Line 1277:                 f'Invalid secret keys: {invalid_keys}. '",
                "// Line 1278:                 f'Keys should be lowercase letters and digits, at least 3 characters long, '",
                "// Line 3591:     ):",
                "// Line 3592:         args = [id]",
                "// Line 3593:         if label is not None:",
                "// Line 3594:             args.extend(['--label', label])",
                "// Line 3595:         if description is not None:",
                "// Line 3596:             args.extend(['--description', description])",
                "// Line 3597:         if expire is not None:",
                "// Line 3598:             args.extend(['--expire', expire.isoformat()])",
                "// Line 3599:         if rotate is not None:",
                "// Line 3600:             args += ['--rotate', rotate.value]",
                "// vulnerable line: 3601: if content is not None:",
                "// vulnerable line: 3602: # The content has already been validated with Secret._validate_content",
                "// vulnerable line: 3603: for k, v in content.items():",
                "// vulnerable line: 3604: args.append(f'{k}={v}')",
                "// vulnerable line: 3605: self._run_for_secret('secret-set', *args)",
                "// Line 3606: ",
                "// Line 3607:     def secret_add(",
                "// Line 3608:         self,",
                "// Line 3609:         content: Dict[str, str],",
                "// Line 3610:         *,",
                "// Line 3611:         label: Optional[str] = None,",
                "// Line 3612:         description: Optional[str] = None,",
                "// Line 3613:         expire: Optional[datetime.datetime] = None,",
                "// Line 3614:         rotate: Optional[SecretRotate] = None,",
                "// Line 3615:         owner: Optional[str] = None,",
                "// Line 3618:         if label is not None:",
                "// Line 3619:             args.extend(['--label', label])",
                "// Line 3620:         if description is not None:",
                "// Line 3621:             args.extend(['--description', description])",
                "// Line 3622:         if expire is not None:",
                "// Line 3623:             args.extend(['--expire', expire.isoformat()])",
                "// Line 3624:         if rotate is not None:",
                "// Line 3625:             args += ['--rotate', rotate.value]",
                "// Line 3626:         if owner is not None:",
                "// Line 3627:             args += ['--owner', owner]",
                "// vulnerable line: 3628: # The content has already been validated with Secret._validate_content",
                "// vulnerable line: 3629: for k, v in content.items():",
                "// vulnerable line: 3630: args.append(f'{k}={v}')",
                "// vulnerable line: 3631: result = self._run('secret-add', *args, return_output=True)",
                "// Line 3632:         secret_id = typing.cast(str, result)",
                "// Line 3633:         return secret_id.strip()",
                "// Line 3634: ",
                "// Line 3635:     def secret_grant(self, id: str, relation_id: int, *, unit: Optional[str] = None):",
                "// Line 3636:         args = [id, '--relation', str(relation_id)]",
                "// Line 3637:         if unit is not None:",
                "// Line 3638:             args += ['--unit', str(unit)]",
                "// Line 3639:         self._run_for_secret('secret-grant', *args)",
                "// Line 3640: ",
                "// Line 3641:     def secret_revoke(self, id: str, relation_id: int, *, unit: Optional[str] = None):"
            ]
        },
        {
            "filename_of_changes": "test_helpers.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "12",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "test_model.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "14",
            "number_of_lines_deleted_vulnerable_to_cve": "9",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 17: import ipaddress",
                "// Line 18: import json",
                "// Line 19: import os",
                "// Line 20: import pathlib",
                "// Line 21: import re",
                "// Line 22: import tempfile",
                "// Line 23: import typing",
                "// Line 24: import unittest",
                "// Line 25: from collections import OrderedDict",
                "// Line 26: from textwrap import dedent",
                "// vulnerable line: 27: from unittest.mock import MagicMock, patch",
                "// Line 28: ",
                "// Line 29: import pytest",
                "// Line 30: ",
                "// Line 31: import ops",
                "// Line 32: import ops.testing",
                "// Line 33: from ops import pebble",
                "// Line 34: from ops._private import yaml",
                "// Line 35: from ops.model import _ModelBackend",
                "// Line 36: from test.test_helpers import FakeScript",
                "// Line 37: ",
                "// Line 3357:         return ops.Model(ops.CharmMeta(), _ModelBackend('myapp/0'))",
                "// Line 3358: ",
                "// Line 3359:     def test_app_add_secret_simple(self, fake_script: FakeScript, model: ops.Model):",
                "// Line 3360:         fake_script.write('secret-add', 'echo secret:123')",
                "// Line 3361: ",
                "// Line 3362:         secret = model.app.add_secret({'foo': 'x'})",
                "// Line 3363:         assert isinstance(secret, ops.Secret)",
                "// Line 3364:         assert secret.id == 'secret:123'",
                "// Line 3365:         assert secret.label is None",
                "// Line 3366: ",
                "// vulnerable line: 3367: assert fake_script.calls(clear=True) == [['secret-add', '--owner', 'application', 'foo=x']]",
                "// Line 3368: ",
                "// Line 3369:     def test_app_add_secret_args(self, fake_script: FakeScript, model: ops.Model):",
                "// Line 3370:         fake_script.write('secret-add', 'echo secret:234')",
                "// Line 3371: ",
                "// Line 3372:         expire = datetime.datetime(2022, 12, 9, 16, 17, 0)",
                "// Line 3373:         secret = model.app.add_secret(",
                "// Line 3374:             {'foo': 'x', 'bar': 'y'},",
                "// Line 3375:             label='lbl',",
                "// Line 3376:             description='desc',",
                "// Line 3377:             expire=expire,",
                "// Line 3387:                 '--label',",
                "// Line 3388:                 'lbl',",
                "// Line 3389:                 '--description',",
                "// Line 3390:                 'desc',",
                "// Line 3391:                 '--expire',",
                "// Line 3392:                 '2022-12-09T16:17:00',",
                "// Line 3393:                 '--rotate',",
                "// Line 3394:                 'hourly',",
                "// Line 3395:                 '--owner',",
                "// Line 3396:                 'application',",
                "// vulnerable line: 3397: 'foo=x',",
                "// vulnerable line: 3398: 'bar=y',",
                "// Line 3399:             ]",
                "// Line 3400:         ]",
                "// Line 3401: ",
                "// Line 3402:     def test_unit_add_secret_simple(self, fake_script: FakeScript, model: ops.Model):",
                "// Line 3403:         fake_script.write('secret-add', 'echo secret:345')",
                "// Line 3404: ",
                "// Line 3405:         secret = model.unit.add_secret({'foo': 'x'})",
                "// Line 3406:         assert isinstance(secret, ops.Secret)",
                "// Line 3407:         assert secret.id == 'secret:345'",
                "// Line 3408:         assert secret.label is None",
                "// Line 3409: ",
                "// vulnerable line: 3410: assert fake_script.calls(clear=True) == [['secret-add', '--owner', 'unit', 'foo=x']]",
                "// Line 3411: ",
                "// Line 3412:     def test_unit_add_secret_args(self, fake_script: FakeScript, model: ops.Model):",
                "// Line 3413:         fake_script.write('secret-add', 'echo secret:456')",
                "// Line 3414: ",
                "// Line 3415:         expire = datetime.datetime(2022, 12, 9, 16, 22, 0)",
                "// Line 3416:         secret = model.unit.add_secret(",
                "// Line 3417:             {'foo': 'w', 'bar': 'z'},",
                "// Line 3418:             label='l2',",
                "// Line 3419:             description='xyz',",
                "// Line 3420:             expire=expire,",
                "// Line 3430:                 '--label',",
                "// Line 3431:                 'l2',",
                "// Line 3432:                 '--description',",
                "// Line 3433:                 'xyz',",
                "// Line 3434:                 '--expire',",
                "// Line 3435:                 '2022-12-09T16:22:00',",
                "// Line 3436:                 '--rotate',",
                "// Line 3437:                 'yearly',",
                "// Line 3438:                 '--owner',",
                "// Line 3439:                 'unit',",
                "// vulnerable line: 3440: 'foo=w',",
                "// vulnerable line: 3441: 'bar=z',",
                "// Line 3442:             ]",
                "// Line 3443:         ]",
                "// Line 3444: ",
                "// Line 3445:     def test_unit_add_secret_errors(self, model: ops.Model):",
                "// Line 3446:         # Additional add_secret tests are done in TestApplication",
                "// Line 3447:         errors: typing.Any = [",
                "// Line 3448:             ({'xy': 'bar'}, {}, ValueError),",
                "// Line 3449:             ({'foo': 'x'}, {'expire': 7}, TypeError),",
                "// Line 3450:         ]",
                "// Line 3451:         for content, kwargs, exc_type in errors:",
                "// Line 3729:         # If secret doesn't have an ID, we'll run secret-info-get to fetch it",
                "// Line 3730:         secret = self.make_secret(model, label='y')",
                "// Line 3731:         assert secret.id is None",
                "// Line 3732:         secret.set_content({'bar': 'foo'})",
                "// Line 3733:         assert secret.id == 'secret:z'",
                "// Line 3734: ",
                "// Line 3735:         with pytest.raises(ValueError):",
                "// Line 3736:             secret.set_content({'s': 't'})  # ensure it validates content (key too short)",
                "// Line 3737: ",
                "// Line 3738:         assert fake_script.calls(clear=True) == [",
                "// vulnerable line: 3739: ['secret-set', 'secret:x', 'foo=bar'],",
                "// Line 3740:             ['secret-info-get', '--label', 'y', '--format=json'],",
                "// vulnerable line: 3741: ['secret-set', 'secret:z', 'bar=foo'],",
                "// Line 3742:         ]",
                "// Line 3743: ",
                "// Line 3744:     def test_set_info(self, model: ops.Model, fake_script: FakeScript):",
                "// Line 3745:         fake_script.write('secret-set', \"\"\"exit 0\"\"\")",
                "// Line 3746:         fake_script.write('secret-info-get', \"\"\"echo '{\"z\": {\"label\": \"y\", \"revision\": 7}}'\"\"\")",
                "// Line 3747: ",
                "// Line 3748:         secret = self.make_secret(model, id='x')",
                "// Line 3749:         expire = datetime.datetime(2022, 12, 9, 16, 59, 0)",
                "// Line 3750:         secret.set_info(",
                "// Line 3751:             label='lab',"
            ]
        }
    ]
}