{
    "cve_id": "CVE-2024-39943",
    "cve_description": "rejetto HFS (aka HTTP File Server) 3 before 0.52.10 on Linux, UNIX, and macOS allows OS command execution by remote authenticated users (if they have Upload permissions). This occurs because a shell is used to execute df (i.e., with execSync instead of spawnSync in child_process in Node.js).",
    "cve_publish_date": "2024-07-04T23:15Z",
    "cwe_id": "CWE-78",
    "cwe_name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
    "cwe_description": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
    "commit_message": "fix: remote-execution with upload permissions on mac+linux. Thanks to @charmindoge for reporting (CVE requested)",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "util-os.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: import { dirname, resolve } from 'path'",
                "// Line 2: import { existsSync } from 'fs'",
                "// vulnerable line: 3: import { exec, execSync } from 'child_process'",
                "// Line 4: import { onlyTruthy, splitAt, try_ } from './misc'",
                "// Line 5: import _ from 'lodash'",
                "// Line 6: import { pid } from 'node:process'",
                "// Line 7: import { promisify } from 'util'",
                "// Line 8: import { IS_WINDOWS } from './const'",
                "// Line 9: ",
                "// Line 10: export function getDiskSpaceSync(path: string) {",
                "// Line 11:     if (IS_WINDOWS) {",
                "// Line 12:         const drive = resolve(path).slice(0, 2).toUpperCase()",
                "// Line 13:         const out = execSync('wmic logicaldisk get Size,FreeSpace,Name /format:list').toString().replace(/",
                "// Line 14: /g, '')",
                "// Line 15:         const one = parseKeyValueObjects(out).find(x => x.Name === drive)",
                "// Line 16:         if (!one)",
                "// Line 17:             throw Error('miss')",
                "// Line 18:         return { free: Number(one.FreeSpace), total: Number(one.Size) }",
                "// Line 19:     }",
                "// Line 20:     while (path && !existsSync(path))",
                "// Line 21:         path = dirname(path)",
                "// vulnerable line: 22: const out = try_(() => execSync(`df -k \"${path}\"`).toString(),",
                "// Line 23:         err => { throw err.status === 1 ? Error('miss') : err.status === 127 ? Error('unsupported') : err })",
                "// Line 24:     if (!out?.startsWith('Filesystem'))",
                "// Line 25:         throw Error('unsupported')",
                "// Line 26:     const one = out.split('",
                "// Line 27: ')[1] as string",
                "// Line 28:     const [used, free] = one.split(/\\s+/).slice(2, 4).map(x => Number(x) * 1024) as [number, number]",
                "// Line 29:     return { free, total: used + free }",
                "// Line 30: }",
                "// Line 31: ",
                "// Line 32: export async function getDiskSpaces(): Promise<{ name: string, free: number, total: number, description?: string }[]> {"
            ]
        }
    ]
}