{
    "cve_id": "CVE-2024-2213",
    "cve_description": "An issue was discovered in zenml-io/zenml versions up to and including 0.55.4. Due to improper authentication mechanisms, an attacker with access to an active user session can change the account password without needing to know the current password. This vulnerability allows for unauthorized account takeover by bypassing the standard password change verification process. The issue was fixed in version 0.56.3.",
    "cve_publish_date": "2024-06-06T19:15Z",
    "cwe_id": "CWE-287",
    "cwe_name": "Improper Authentication",
    "cwe_description": "When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.",
    "commit_message": "Check old password during password change and add missing CLI commands (#2587)\n\n* Check old password during password change and add missing CLI commands\r\n\r\n* Fix docstrings\r\n\r\n* Ask to re-enter password during CLI password change\r\n\r\n* Auto-update of E2E template\r\n\r\n* Auto-update of LLM Finetuning template\r\n\r\n* Auto-update of NLP template\r\n\r\n---------\r\n\r\nCo-authored-by: GitHub Actions <actions@github.com>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "rest_zen_store.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "18",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "server.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "19",
            "number_of_lines_deleted_vulnerable_to_cve": "20",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 25: import zenml",
                "// Line 26: from zenml.analytics.enums import AnalyticsEvent",
                "// Line 27: from zenml.analytics.utils import track_handler",
                "// Line 28: from zenml.cli import utils as cli_utils",
                "// Line 29: from zenml.cli.cli import cli",
                "// Line 30: from zenml.cli.web_login import web_login",
                "// Line 31: from zenml.client import Client",
                "// Line 32: from zenml.config.global_config import GlobalConfiguration",
                "// Line 33: from zenml.console import console",
                "// Line 34: from zenml.enums import ServerProviderType, StoreType",
                "// vulnerable line: 35: from zenml.exceptions import IllegalOperationError",
                "// Line 36: from zenml.logger import get_logger",
                "// Line 37: from zenml.utils import terraform_utils, yaml_utils",
                "// Line 38: from zenml.zen_server.utils import get_active_deployment",
                "// Line 39: ",
                "// Line 40: logger = get_logger(__name__)",
                "// Line 41: ",
                "// Line 42: LOCAL_ZENML_SERVER_NAME = \"local\"",
                "// Line 43: ",
                "// Line 44: ",
                "// Line 45: @cli.command(\"up\", help=\"Start the ZenML dashboard locally.\")",
                "// vulnerable line: 46: @click.option(",
                "// Line 47:     \"--docker\",",
                "// Line 48:     is_flag=True,",
                "// Line 49:     help=\"Start the ZenML dashboard as a Docker container instead of a local \"",
                "// Line 50:     \"process.\",",
                "// Line 51:     default=False,",
                "// Line 52:     type=click.BOOL,",
                "// vulnerable line: 53: )",
                "// vulnerable line: 54: @click.option(",
                "// Line 55:     \"--port\",",
                "// Line 56:     type=int,",
                "// Line 57:     default=None,",
                "// Line 58:     help=\"Use a custom TCP port value for the ZenML dashboard.\",",
                "// vulnerable line: 59: )",
                "// vulnerable line: 60: @click.option(",
                "// Line 61:     \"--ip-address\",",
                "// Line 62:     type=ipaddress.ip_address,",
                "// Line 63:     default=None,",
                "// Line 64:     help=\"Have the ZenML dashboard listen on an IP address different than the \"",
                "// Line 65:     \"localhost.\",",
                "// vulnerable line: 66: )",
                "// vulnerable line: 67: @click.option(",
                "// Line 68:     \"--blocking\",",
                "// Line 69:     is_flag=True,",
                "// Line 70:     help=\"Run the ZenML dashboard in blocking mode. The CLI will not return \"",
                "// Line 71:     \"until the dashboard is stopped.\",",
                "// Line 72:     default=False,",
                "// Line 73:     type=click.BOOL,",
                "// vulnerable line: 74: )",
                "// vulnerable line: 75: @click.option(",
                "// Line 76:     \"--connect\",",
                "// Line 77:     is_flag=True,",
                "// Line 78:     help=\"Connect the client to the local server even when already connected \"",
                "// Line 79:     \"to a remote ZenML server.\",",
                "// Line 80:     default=False,",
                "// Line 81:     type=click.BOOL,",
                "// vulnerable line: 82: )",
                "// vulnerable line: 83: @click.option(",
                "// Line 84:     \"--image\",",
                "// vulnerable line: 85: type=str,",
                "// Line 86:     default=None,",
                "// Line 87:     help=\"Use a custom Docker image for the ZenML server. Only used when \"",
                "// Line 88:     \"`--docker` is set.\",",
                "// vulnerable line: 89: )",
                "// vulnerable line: 90: @click.option(",
                "// Line 91:     \"--ngrok-token\",",
                "// vulnerable line: 92: type=str,",
                "// Line 93:     default=None,",
                "// Line 94:     help=\"Specify an ngrok auth token to use for exposing the ZenML server.\",",
                "// vulnerable line: 95: )",
                "// Line 96: def up(",
                "// Line 97:     docker: bool = False,",
                "// Line 98:     ip_address: Union[",
                "// Line 99:         ipaddress.IPv4Address, ipaddress.IPv6Address, None",
                "// Line 100:     ] = None,",
                "// Line 101:     port: Optional[int] = None,",
                "// Line 102:     blocking: bool = False,",
                "// Line 103:     connect: bool = False,",
                "// Line 104:     image: Optional[str] = None,",
                "// Line 105:     ngrok_token: Optional[str] = None,",
                "// Line 118:         ngrok_token: An ngrok auth token to use for exposing the ZenML dashboard",
                "// Line 119:             on a public domain. Primarily used for accessing the dashboard in",
                "// Line 120:             Colab.",
                "// Line 121:     \"\"\"",
                "// Line 122:     from zenml.zen_server.deploy.deployer import ServerDeployer",
                "// Line 123: ",
                "// Line 124:     if connect:",
                "// Line 125:         logger.warning(",
                "// Line 126:             \"The `--connect` flag is deprecated, has no effect, and will be \"",
                "// Line 127:             \"removed in a future release.\"",
                "// vulnerable line: 128: )",
                "// Line 129: ",
                "// Line 130:     gc = GlobalConfiguration()",
                "// Line 131: ",
                "// Line 132:     # Raise an error if the client is already connected to a remote server.",
                "// Line 133:     if gc.store_configuration.type == StoreType.REST:",
                "// Line 134:         if not gc.zen_store.is_local_store():",
                "// Line 135:             cli_utils.error(",
                "// Line 136:                 \"Your ZenML client is already connected to a remote server. If \"",
                "// Line 137:                 \"you want to spin up a local ZenML server, please disconnect \"",
                "// Line 138:                 \"from the remote server first by running `zenml disconnect`.\"",
                "// vulnerable line: 139: )",
                "// Line 140: ",
                "// Line 141:     if docker:",
                "// Line 142:         from zenml.utils.docker_utils import check_docker",
                "// Line 143: ",
                "// Line 144:         if not check_docker():",
                "// Line 145:             cli_utils.error(",
                "// Line 146:                 \"Docker does not seem to be installed on your system. Please \"",
                "// Line 147:                 \"install Docker to use the Docker ZenML server local \"",
                "// Line 148:                 \"deployment or use one of the other deployment options.\"",
                "// vulnerable line: 149: )",
                "// Line 150:         provider = ServerProviderType.DOCKER",
                "// Line 151:     else:",
                "// Line 152:         if sys.platform == \"win32\" and not blocking:",
                "// Line 153:             cli_utils.error(",
                "// Line 154:                 \"Running the ZenML server locally as a background process is \"",
                "// Line 155:                 \"not supported on Windows. Please use the `--blocking` flag \"",
                "// Line 156:                 \"to run the server in blocking mode, or run the server in \"",
                "// Line 157:                 \"a Docker container by setting `--docker` instead.\"",
                "// vulnerable line: 158: )",
                "// Line 159:         else:",
                "// Line 160:             pass",
                "// Line 161:         provider = ServerProviderType.LOCAL",
                "// Line 162: ",
                "// Line 163:     deployer = ServerDeployer()",
                "// Line 164: ",
                "// Line 165:     server = get_active_deployment(local=True)",
                "// Line 166:     if server and server.config.provider != provider:",
                "// Line 167:         deployer.remove_server(LOCAL_ZENML_SERVER_NAME)",
                "// Line 168: ",
                "// Line 169:     config_attrs: Dict[str, Any] = dict(",
                "// Line 170:         name=LOCAL_ZENML_SERVER_NAME,",
                "// Line 171:         provider=provider,",
                "// vulnerable line: 172: )",
                "// Line 173:     if not docker:",
                "// Line 174:         config_attrs[\"blocking\"] = blocking",
                "// Line 175:     elif image:",
                "// Line 176:         config_attrs[\"image\"] = image",
                "// Line 177:     if port is not None:",
                "// Line 178:         config_attrs[\"port\"] = port",
                "// Line 179:     if ip_address is not None and provider in [",
                "// Line 180:         ServerProviderType.LOCAL,",
                "// Line 181:         ServerProviderType.DOCKER,",
                "// Line 182:     ]:",
                "// Line 183:         config_attrs[\"ip_address\"] = ip_address",
                "// Line 184: ",
                "// Line 185:     from zenml.zen_server.deploy.deployment import ServerDeploymentConfig",
                "// Line 186: ",
                "// Line 187:     server_config = ServerDeploymentConfig(**config_attrs)",
                "// Line 188:     if blocking:",
                "// Line 189:         from zenml.constants import (",
                "// Line 190:             DEFAULT_USERNAME,",
                "// vulnerable line: 191: )",
                "// Line 192: ",
                "// Line 193:         cli_utils.declare(",
                "// Line 194:             \"The local ZenML dashboard is about to deploy in a \"",
                "// Line 195:             \"blocking process. You can connect to it using the \"",
                "// Line 196:             f\"'{DEFAULT_USERNAME}' username and an empty password.\"",
                "// vulnerable line: 197: )",
                "// Line 198:     server = deployer.deploy_server(server_config)",
                "// Line 199: ",
                "// Line 200:     if not blocking:",
                "// Line 201:         from zenml.constants import (",
                "// Line 202:             DEFAULT_PASSWORD,",
                "// Line 203:             DEFAULT_USERNAME,",
                "// vulnerable line: 204: )",
                "// Line 205: ",
                "// Line 206:         deployer.connect_to_server(",
                "// Line 207:             LOCAL_ZENML_SERVER_NAME,",
                "// Line 208:             DEFAULT_USERNAME,",
                "// Line 209:             DEFAULT_PASSWORD,",
                "// vulnerable line: 210: )",
                "// Line 211: ",
                "// Line 212:         if server.status and server.status.url:",
                "// Line 213:             cli_utils.declare(",
                "// Line 214:                 f\"The local ZenML dashboard is available at \"",
                "// Line 215:                 f\"'{server.status.url}'. You can connect to it using the \"",
                "// Line 216:                 f\"'{DEFAULT_USERNAME}' username and an empty password. \"",
                "// vulnerable line: 217: )",
                "// Line 218:             zenml.show(",
                "// Line 219:                 ngrok_token=ngrok_token,",
                "// Line 220:                 username=DEFAULT_USERNAME,",
                "// Line 221:                 password=DEFAULT_PASSWORD,",
                "// vulnerable line: 222: )",
                "// Line 223: ",
                "// Line 224: ",
                "// vulnerable line: 225: @click.option(",
                "// Line 226:     \"--ngrok-token\",",
                "// vulnerable line: 227: type=str,",
                "// Line 228:     default=None,",
                "// Line 229:     help=\"Specify an ngrok auth token to use for exposing the ZenML server.\",",
                "// vulnerable line: 230: )",
                "// Line 231: @cli.command(\"show\", help=\"Show the ZenML dashboard.\")",
                "// Line 232: def show(ngrok_token: Optional[str] = None) -> None:",
                "// Line 233:     \"\"\"Show the ZenML dashboard.",
                "// Line 234: ",
                "// Line 235:     Args:",
                "// Line 236:         ngrok_token: An ngrok auth token to use for exposing the ZenML dashboard",
                "// Line 237:             on a public domain. Primarily used for accessing the dashboard in",
                "// Line 238:             Colab.",
                "// Line 239:     \"\"\"",
                "// vulnerable line: 240: try:",
                "// Line 241:         zenml.show(ngrok_token=ngrok_token)",
                "// Line 242:     except RuntimeError as e:",
                "// Line 243:         cli_utils.error(str(e))",
                "// Line 244: ",
                "// Line 245: ",
                "// Line 246: @cli.command(\"down\", help=\"Shut down the local ZenML dashboard.\")",
                "// Line 247: def down() -> None:",
                "// Line 248:     \"\"\"Shut down the local ZenML dashboard.\"\"\"",
                "// Line 249:     server = get_active_deployment(local=True)",
                "// Line 250: ",
                "// Line 256: ",
                "// Line 257:         deployer = ServerDeployer()",
                "// Line 258:         deployer.remove_server(server.config.name)",
                "// Line 259:         cli_utils.declare(\"The local ZenML dashboard has been shut down.\")",
                "// Line 260: ",
                "// Line 261:         gc = GlobalConfiguration()",
                "// Line 262:         gc.set_default_store()",
                "// Line 263: ",
                "// Line 264: ",
                "// Line 265: @cli.command(\"deploy\", help=\"Deploy ZenML in the cloud.\")",
                "// vulnerable line: 266: @click.option(",
                "// Line 267:     \"--provider\",",
                "// Line 268:     \"-p\",",
                "// Line 269:     type=click.Choice(",
                "// Line 270:         [",
                "// Line 271:             ServerProviderType.AWS.value,",
                "// Line 272:             ServerProviderType.GCP.value,",
                "// Line 273:             ServerProviderType.AZURE.value,",
                "// Line 274:         ],",
                "// Line 275:         case_sensitive=True,",
                "// Line 276:     ),",
                "// Line 277:     default=None,",
                "// Line 278:     help=\"Server deployment provider.\",",
                "// vulnerable line: 279: )",
                "// vulnerable line: 280: @click.option(",
                "// Line 281:     \"--name\",",
                "// vulnerable line: 282: type=str,",
                "// Line 283:     help=\"A name for the ZenML server deployment. This is used as a prefix for \"",
                "// Line 284:     \"the names of deployed resources, such as database services and Kubernetes \"",
                "// Line 285:     \"resources.\",",
                "// vulnerable line: 286: )",
                "// vulnerable line: 287: @click.option(",
                "// Line 288:     \"--username\",",
                "// vulnerable line: 289: type=str,",
                "// Line 290:     default=None,",
                "// Line 291:     help=\"The username to use for the provisioned admin account.\",",
                "// vulnerable line: 292: )",
                "// vulnerable line: 293: @click.option(",
                "// Line 294:     \"--password\",",
                "// vulnerable line: 295: type=str,",
                "// Line 296:     default=None,",
                "// Line 297:     help=\"The initial password to use for the provisioned admin account.\",",
                "// vulnerable line: 298: )",
                "// vulnerable line: 299: @click.option(",
                "// Line 300:     \"--timeout\",",
                "// Line 301:     \"-t\",",
                "// Line 302:     type=click.INT,",
                "// Line 303:     default=None,",
                "// Line 304:     help=\"Time in seconds to wait for the server to be deployed.\",",
                "// vulnerable line: 305: )",
                "// vulnerable line: 306: @click.option(",
                "// Line 307:     \"--config\",",
                "// Line 308:     help=\"Use a YAML or JSON configuration or configuration file.\",",
                "// vulnerable line: 309: required=False,",
                "// vulnerable line: 310: type=str,",
                "// vulnerable line: 311: )",
                "// vulnerable line: 312: @click.option(",
                "// Line 313:     \"--connect\",",
                "// Line 314:     is_flag=True,",
                "// Line 315:     help=\"Connect your client to the ZenML server after it is successfully \"",
                "// Line 316:     \"deployed.\",",
                "// Line 317:     default=False,",
                "// Line 318:     type=click.BOOL,",
                "// vulnerable line: 319: )",
                "// vulnerable line: 320: @click.option(",
                "// Line 321:     \"--gcp-project-id\",",
                "// Line 322:     help=\"The project in GCP to deploy the server to. \",",
                "// vulnerable line: 323: required=False,",
                "// vulnerable line: 324: type=str,",
                "// vulnerable line: 325: )",
                "// Line 326: def deploy(",
                "// Line 327:     provider: Optional[str] = None,",
                "// Line 328:     connect: bool = False,",
                "// Line 329:     username: Optional[str] = None,",
                "// Line 330:     password: Optional[str] = None,",
                "// Line 331:     name: Optional[str] = None,",
                "// Line 332:     timeout: Optional[int] = None,",
                "// Line 333:     config: Optional[str] = None,",
                "// Line 334:     gcp_project_id: Optional[str] = None,",
                "// Line 335: ) -> None:",
                "// Line 341:         connect: Connecting the client to the ZenML server.",
                "// Line 342:         username: The username for the provisioned admin account.",
                "// Line 343:         password: The initial password to use for the provisioned admin account.",
                "// Line 344:         timeout: Time in seconds to wait for the server to start.",
                "// Line 345:         config: A YAML or JSON configuration or configuration file to use.",
                "// Line 346:         gcp_project_id: The project in GCP to deploy the server to.",
                "// Line 347:     \"\"\"",
                "// Line 348:     with track_handler(",
                "// Line 349:         event=AnalyticsEvent.ZENML_SERVER_DEPLOYED",
                "// Line 350:     ) as analytics_handler:",
                "// vulnerable line: 351: try:",
                "// Line 352:             terraform_utils.verify_terraform_installation()",
                "// Line 353:         except RuntimeError as e:",
                "// Line 354:             cli_utils.error(str(e))",
                "// Line 355: ",
                "// Line 356:         config_dict: Dict[str, Any] = {}",
                "// Line 357: ",
                "// Line 358:         if config:",
                "// Line 359:             if os.path.isfile(config):",
                "// Line 360:                 config_dict = yaml_utils.read_yaml(config)",
                "// Line 361:             else:",
                "// Line 362:                 config_dict = yaml.safe_load(config)",
                "// Line 363:             if not isinstance(config_dict, dict):",
                "// Line 364:                 cli_utils.error(",
                "// Line 365:                     \"The configuration argument must be JSON/YAML content or \"",
                "// Line 366:                     \"point to a valid configuration file.\"",
                "// vulnerable line: 367: )",
                "// Line 368: ",
                "// Line 369:             name = config_dict.get(\"name\", name)",
                "// Line 370:             provider = config_dict.get(\"provider\", provider)",
                "// Line 371:             username = config_dict.get(\"username\", username)",
                "// Line 372:             password = config_dict.get(\"password\", password)",
                "// Line 373: ",
                "// Line 374:         if not name:",
                "// Line 375:             name = click.prompt(",
                "// Line 376:                 \"ZenML server name (used as a prefix for the names of deployed \"",
                "// Line 377:                 \"resources)\",",
                "// Line 378:                 default=\"zenml\",",
                "// vulnerable line: 379: )",
                "// Line 380:         config_dict[\"name\"] = name",
                "// Line 381: ",
                "// Line 382:         if not provider:",
                "// Line 383:             provider = click.prompt(",
                "// Line 384:                 \"ZenML server provider\",",
                "// Line 385:                 type=click.Choice(",
                "// Line 386:                     [",
                "// Line 387:                         ServerProviderType.AWS.value,",
                "// Line 388:                         ServerProviderType.GCP.value,",
                "// Line 389:                         ServerProviderType.AZURE.value,",
                "// Line 390:                     ],",
                "// Line 391:                     case_sensitive=True,",
                "// Line 392:                 ),",
                "// Line 393:                 default=ServerProviderType.AWS.value,",
                "// vulnerable line: 394: )",
                "// Line 395:         config_dict[\"provider\"] = provider",
                "// Line 396: ",
                "// Line 397:         if provider == ServerProviderType.GCP.value:",
                "// Line 398:             if \"project_id\" not in config_dict:",
                "// Line 399:                 if not gcp_project_id:",
                "// Line 400:                     gcp_project_id = click.prompt(",
                "// Line 401:                         \"GCP project ID\",",
                "// vulnerable line: 402: )",
                "// Line 403:                 config_dict[\"project_id\"] = gcp_project_id",
                "// Line 404: ",
                "// Line 405:         if not username:",
                "// Line 406:             username = click.prompt(",
                "// Line 407:                 \"ZenML admin account username\", default=\"default\"",
                "// vulnerable line: 408: )",
                "// Line 409:         config_dict[\"username\"] = username",
                "// Line 410: ",
                "// Line 411:         password = password or config_dict.get(\"password\", None)",
                "// Line 412:         if not password:",
                "// Line 413:             password = click.prompt(",
                "// Line 414:                 \"ZenML admin account password\", hide_input=True",
                "// vulnerable line: 415: )",
                "// Line 416:         config_dict[\"password\"] = password",
                "// Line 417: ",
                "// Line 418:         from zenml.zen_server.deploy.deployment import ServerDeploymentConfig",
                "// Line 419: ",
                "// Line 420:         server_config = ServerDeploymentConfig.parse_obj(config_dict)",
                "// Line 421: ",
                "// Line 422:         from zenml.zen_server.deploy.deployer import ServerDeployer",
                "// Line 423: ",
                "// Line 424:         deployer = ServerDeployer()",
                "// Line 425: ",
                "// Line 426:         server = get_active_deployment(local=False)",
                "// Line 427:         if server:",
                "// Line 428:             if server.config.provider != provider:",
                "// Line 429:                 cli_utils.error(",
                "// Line 430:                     \"ZenML is already deployed using a different provider \"",
                "// Line 431:                     f\"({server.config.provider}). Please tear down the \"",
                "// Line 432:                     \"existing deployment by running `zenml destroy` before \"",
                "// Line 433:                     \"deploying a new one.\"",
                "// vulnerable line: 434: )",
                "// Line 435: ",
                "// Line 436:             if server.config.name != name:",
                "// Line 437:                 cli_utils.error(",
                "// Line 438:                     f\"An existing deployment with a different name \"",
                "// Line 439:                     f\"'{server.config.name}' already exists. Please tear down \"",
                "// Line 440:                     f\"the existing deployment by running `zenml destroy` \"",
                "// Line 441:                     f\"before deploying a new one.\"",
                "// vulnerable line: 442: )",
                "// Line 443: ",
                "// Line 444:         server = deployer.deploy_server(server_config, timeout=timeout)",
                "// Line 445: ",
                "// Line 446:         metadata = {",
                "// Line 447:             \"server_deployment\": str(server.config.provider),",
                "// Line 448:         }",
                "// Line 449: ",
                "// Line 450:         analytics_handler.metadata = metadata",
                "// Line 451: ",
                "// Line 452:         if server.status and server.status.url:",
                "// Line 453:             cli_utils.declare(",
                "// Line 454:                 f\"ZenML server '{name}' running at '{server.status.url}'.\"",
                "// vulnerable line: 455: )",
                "// Line 456: ",
                "// Line 457:             if connect and username:",
                "// Line 458:                 deployer.connect_to_server(",
                "// Line 459:                     server_config.name,",
                "// Line 460:                     username,",
                "// Line 461:                     password or \"\",",
                "// Line 462:                     verify_ssl=server.status.ca_crt",
                "// Line 463:                     if server.status.ca_crt is not None",
                "// Line 464:                     else False,",
                "// vulnerable line: 465: )",
                "// Line 466: ",
                "// Line 467: ",
                "// Line 468: @cli.command(",
                "// Line 469:     \"destroy\", help=\"Tear down and clean up the cloud ZenML deployment.\"",
                "// vulnerable line: 470: )",
                "// Line 471: def destroy() -> None:",
                "// Line 472:     \"\"\"Tear down and clean up a cloud ZenML deployment.\"\"\"",
                "// Line 473:     server = get_active_deployment(local=False)",
                "// Line 474:     if not server:",
                "// Line 475:         cli_utils.declare(\"No cloud ZenML server has been deployed.\")",
                "// Line 476:         return",
                "// Line 477: ",
                "// Line 478:     from zenml.zen_server.deploy.deployer import ServerDeployer",
                "// Line 479: ",
                "// Line 480:     deployer = ServerDeployer()",
                "// Line 481:     deployer.remove_server(server.config.name)",
                "// Line 482: ",
                "// Line 483:     cli_utils.declare(",
                "// Line 484:         \"The ZenML server has been torn down and all resources removed.\"",
                "// vulnerable line: 485: )",
                "// Line 486: ",
                "// Line 487: ",
                "// Line 488: @cli.command(",
                "// Line 489:     \"status\", help=\"Show information about the current configuration.\"",
                "// vulnerable line: 490: )",
                "// Line 491: def status() -> None:",
                "// Line 492:     \"\"\"Show details about the current configuration.\"\"\"",
                "// Line 493:     gc = GlobalConfiguration()",
                "// Line 494:     client = Client()",
                "// Line 495: ",
                "// Line 496:     store_cfg = gc.store_configuration",
                "// Line 497: ",
                "// Line 498:     # Write about the current ZenML server",
                "// Line 499:     cli_utils.declare(\"-----ZenML Server Status-----\")",
                "// Line 500:     if gc.uses_default_store():",
                "// Line 501:         cli_utils.declare(",
                "// Line 502:             f\"Connected to a local ZenML database: ('{store_cfg.url}')\"",
                "// vulnerable line: 503: )",
                "// Line 504:     else:",
                "// Line 505:         cli_utils.declare(f\"Connected to a ZenML server: '{store_cfg.url}'\")",
                "// Line 506: ",
                "// Line 507:     # Write about the active entities",
                "// Line 508:     scope = \"repository\" if client.uses_local_configuration else \"global\"",
                "// Line 509:     cli_utils.declare(f\"  The active user is: '{client.active_user.name}'\")",
                "// Line 510:     cli_utils.declare(",
                "// Line 511:         f\"  The active workspace is: '{client.active_workspace.name}' \"",
                "// Line 512:         f\"({scope})\"",
                "// vulnerable line: 513: )",
                "// Line 514:     cli_utils.declare(",
                "// Line 515:         f\"  The active stack is: '{client.active_stack_model.name}' ({scope})\"",
                "// vulnerable line: 516: )",
                "// Line 517: ",
                "// Line 518:     if client.root:",
                "// Line 519:         cli_utils.declare(f\"Active repository root: {client.root}\")",
                "// Line 520: ",
                "// Line 521:     # Write about the configuration files",
                "// Line 522:     cli_utils.declare(f\"Using configuration from: '{gc.config_directory}'\")",
                "// Line 523:     cli_utils.declare(",
                "// Line 524:         f\"Local store files are located at: '{gc.local_stores_path}'\"",
                "// vulnerable line: 525: )",
                "// Line 526: ",
                "// Line 527:     server = get_active_deployment(local=True)",
                "// Line 528:     if server:",
                "// Line 529:         cli_utils.declare(\"The status of the local dashboard:\")",
                "// Line 530:         cli_utils.print_server_deployment(server)",
                "// Line 531: ",
                "// Line 532:     server = get_active_deployment(local=False)",
                "// Line 533:     if server:",
                "// Line 534:         cli_utils.declare(",
                "// Line 535:             \"The status of the cloud ZenML server deployed from this host:\"",
                "// vulnerable line: 536: )",
                "// Line 537:         cli_utils.print_server_deployment(server)",
                "// Line 538: ",
                "// Line 539: ",
                "// Line 540: @cli.command(",
                "// Line 541:     \"connect\",",
                "// Line 542:     help=(",
                "// Line 543:         \"\"\"Connect to a remote ZenML server.",
                "// Line 544: ",
                "// Line 545:     Examples:",
                "// Line 546: ",
                "// Line 595:         ...",
                "// Line 596: ",
                "// Line 597:         ULnzA0JkRWRnFqH6uXeJo1KAVqtxn1xf8PYxx3NlNDr9wi8KKwARf2lwm6sH4mvq",
                "// Line 598:         1aZ/0iYnGKCu7rLJzxeguliMf69E",
                "// Line 599: ",
                "// Line 600:         -----END CERTIFICATE-----",
                "// Line 601:         http_timeout: 10",
                "// Line 602: ",
                "// Line 603:     \"\"\"",
                "// Line 604:     ),",
                "// vulnerable line: 605: )",
                "// vulnerable line: 606: @click.option(",
                "// Line 607:     \"--url\",",
                "// Line 608:     \"-u\",",
                "// Line 609:     help=\"The URL where the ZenML server is running.\",",
                "// vulnerable line: 610: required=False,",
                "// vulnerable line: 611: type=str,",
                "// vulnerable line: 612: )",
                "// vulnerable line: 613: @click.option(",
                "// Line 614:     \"--username\",",
                "// Line 615:     help=\"The username that is used to authenticate with a ZenML server. If \"",
                "// Line 616:     \"omitted, the web login will be used.\",",
                "// vulnerable line: 617: required=False,",
                "// vulnerable line: 618: type=str,",
                "// vulnerable line: 619: )",
                "// vulnerable line: 620: @click.option(",
                "// Line 621:     \"--password\",",
                "// Line 622:     help=\"The password that is used to authenticate with a ZenML server. If \"",
                "// Line 623:     \"omitted, a prompt will be shown to enter the password.\",",
                "// vulnerable line: 624: required=False,",
                "// vulnerable line: 625: type=str,",
                "// vulnerable line: 626: )",
                "// vulnerable line: 627: @click.option(",
                "// Line 628:     \"--api-key\",",
                "// Line 629:     help=\"Use an API key to authenticate with a ZenML server. If \"",
                "// Line 630:     \"omitted, the web login will be used.\",",
                "// vulnerable line: 631: required=False,",
                "// vulnerable line: 632: type=str,",
                "// vulnerable line: 633: )",
                "// vulnerable line: 634: @click.option(",
                "// vulnerable line: 635: \"--workspace\",",
                "// vulnerable line: 636: help=\"The workspace to use when connecting to the ZenML server.\",",
                "// vulnerable line: 637: required=False,",
                "// vulnerable line: 638: type=str,",
                "// vulnerable line: 639: )",
                "// vulnerable line: 640: @click.option(",
                "// Line 641:     \"--no-verify-ssl\",",
                "// Line 642:     is_flag=True,",
                "// Line 643:     help=\"Whether to verify the server's TLS certificate\",",
                "// Line 644:     default=False,",
                "// vulnerable line: 645: )",
                "// vulnerable line: 646: @click.option(",
                "// Line 647:     \"--ssl-ca-cert\",",
                "// Line 648:     help=\"A path to a CA bundle file to use to verify the server's TLS \"",
                "// Line 649:     \"certificate or the CA bundle value itself\",",
                "// vulnerable line: 650: required=False,",
                "// vulnerable line: 651: type=str,",
                "// vulnerable line: 652: )",
                "// vulnerable line: 653: @click.option(",
                "// Line 654:     \"--config\",",
                "// Line 655:     help=\"Use a YAML or JSON configuration or configuration file.\",",
                "// vulnerable line: 656: required=False,",
                "// vulnerable line: 657: type=str,",
                "// vulnerable line: 658: )",
                "// vulnerable line: 659: @click.option(",
                "// Line 660:     \"--raw-config\",",
                "// Line 661:     is_flag=True,",
                "// Line 662:     help=\"Whether to use the configuration without prompting for missing \"",
                "// Line 663:     \"fields.\",",
                "// Line 664:     default=False,",
                "// vulnerable line: 665: )",
                "// Line 666: def connect(",
                "// Line 667:     url: Optional[str] = None,",
                "// Line 668:     username: Optional[str] = None,",
                "// Line 669:     password: Optional[str] = None,",
                "// Line 670:     api_key: Optional[str] = None,",
                "// vulnerable line: 671: workspace: Optional[str] = None,",
                "// Line 672:     no_verify_ssl: bool = False,",
                "// Line 673:     ssl_ca_cert: Optional[str] = None,",
                "// Line 674:     config: Optional[str] = None,",
                "// Line 675:     raw_config: bool = False,",
                "// Line 676: ) -> None:",
                "// Line 677:     \"\"\"Connect to a remote ZenML server.",
                "// Line 678: ",
                "// Line 679:     Args:",
                "// Line 680:         url: The URL where the ZenML server is reachable.",
                "// Line 681:         username: The username that is used to authenticate with the ZenML",
                "// vulnerable line: 682: server.",
                "// Line 683:         password: The password that is used to authenticate with the ZenML",
                "// vulnerable line: 684: server.",
                "// Line 685:         api_key: The API key that is used to authenticate with the ZenML",
                "// vulnerable line: 686: server.",
                "// vulnerable line: 687: workspace: The active workspace that is used to connect to the ZenML",
                "// vulnerable line: 688: server.",
                "// Line 689:         no_verify_ssl: Whether to verify the server's TLS certificate.",
                "// Line 690:         ssl_ca_cert: A path to a CA bundle to use to verify the server's TLS",
                "// Line 691:             certificate or the CA bundle value itself.",
                "// Line 692:         config: A YAML or JSON configuration or configuration file to use.",
                "// Line 693:         raw_config: Whether to use the configuration without prompting for",
                "// Line 694:             missing fields.",
                "// Line 695:     \"\"\"",
                "// Line 696:     from zenml.config.store_config import StoreConfiguration",
                "// Line 697:     from zenml.zen_stores.base_zen_store import BaseZenStore",
                "// Line 698: ",
                "// Line 702:     if (",
                "// Line 703:         active_deployment",
                "// Line 704:         and active_deployment.status",
                "// Line 705:         and active_deployment.status.url != url",
                "// Line 706:     ):",
                "// Line 707:         cli_utils.error(",
                "// Line 708:             \"You're trying to connect to a remote ZenML server but already \"",
                "// Line 709:             \"have a local server running. This can lead to unexpected \"",
                "// Line 710:             \"behavior. Please shut down the local server by running \"",
                "// Line 711:             \"`zenml down` before connecting to a remote server.\"",
                "// vulnerable line: 712: )",
                "// Line 713: ",
                "// Line 714:     store_dict: Dict[str, Any] = {}",
                "// Line 715:     verify_ssl: Union[str, bool] = (",
                "// Line 716:         ssl_ca_cert if ssl_ca_cert is not None else not no_verify_ssl",
                "// vulnerable line: 717: )",
                "// Line 718: ",
                "// Line 719:     if config:",
                "// Line 720:         if os.path.isfile(config):",
                "// Line 721:             store_dict = yaml_utils.read_yaml(config)",
                "// Line 722:         else:",
                "// Line 723:             store_dict = yaml.safe_load(config)",
                "// Line 724:         if not isinstance(store_dict, dict):",
                "// Line 725:             cli_utils.error(",
                "// Line 726:                 \"The configuration argument must be JSON/YAML content or \"",
                "// Line 727:                 \"point to a valid configuration file.\"",
                "// vulnerable line: 728: )",
                "// Line 729: ",
                "// Line 730:         if raw_config:",
                "// Line 731:             store_config = StoreConfiguration.parse_obj(store_dict)",
                "// Line 732:             GlobalConfiguration().set_store(store_config)",
                "// Line 733:             return",
                "// Line 734: ",
                "// Line 735:         url = store_dict.get(\"url\", url)",
                "// Line 736:         username = username or store_dict.get(\"username\")",
                "// Line 737:         password = password or store_dict.get(\"password\")",
                "// Line 738:         api_key = api_key or store_dict.get(\"api_key\")",
                "// Line 739:         verify_ssl = store_dict.get(\"verify_ssl\", verify_ssl)",
                "// Line 740: ",
                "// Line 741:     elif url is None:",
                "// Line 742:         server = get_active_deployment(local=False)",
                "// Line 743: ",
                "// Line 744:         if server is None or not server.status or not server.status.url:",
                "// vulnerable line: 745: cli_utils.warning(",
                "// Line 746:                 \"Running `zenml connect` without arguments can only be used to \"",
                "// Line 747:                 \"connect to a ZenML server previously deployed from this host \"",
                "// Line 748:                 \"with `zenml deploy`, but no such active deployment was found. \"",
                "// Line 749:                 \"Please use the `--url` or `--config` command line arguments \"",
                "// Line 750:                 \"to configure how to connect to a remote third party ZenML \"",
                "// Line 751:                 \"server. Alternatively, call `zenml up` to start the ZenML \"",
                "// Line 752:                 \"dashboard locally.\"",
                "// vulnerable line: 753: )",
                "// Line 754:             return",
                "// Line 755:         url = server.status.url",
                "// Line 756:         if server.status.ca_crt:",
                "// Line 757:             verify_ssl = server.status.ca_crt",
                "// Line 758: ",
                "// Line 759:     if not url:",
                "// Line 760:         url = click.prompt(\"ZenML server URL\", type=str)",
                "// Line 761:     else:",
                "// Line 762:         cli_utils.declare(f\"Connecting to: '{url}'...\")",
                "// Line 763:     assert url is not None",
                "// Line 774:             username = click.prompt(\"Username\", type=str)",
                "// Line 775: ",
                "// Line 776:     if username:",
                "// Line 777:         store_dict[\"username\"] = username",
                "// Line 778: ",
                "// Line 779:         if password is None:",
                "// Line 780:             password = click.prompt(",
                "// Line 781:                 f\"Password for user {username} (press ENTER for empty password)\",",
                "// Line 782:                 default=\"\",",
                "// Line 783:                 hide_input=True,",
                "// vulnerable line: 784: )",
                "// Line 785:         store_dict[\"password\"] = password",
                "// Line 786:     elif api_key:",
                "// Line 787:         store_dict[\"api_key\"] = api_key",
                "// Line 788: ",
                "// Line 789:     store_config_class = BaseZenStore.get_store_config_class(store_type)",
                "// Line 790:     assert store_config_class is not None",
                "// Line 791: ",
                "// Line 792:     store_config = store_config_class.parse_obj(store_dict)",
                "// vulnerable line: 793: try:",
                "// Line 794:         GlobalConfiguration().set_store(store_config)",
                "// Line 795:     except IllegalOperationError:",
                "// vulnerable line: 796: cli_utils.warning(",
                "// Line 797:             f\"User '{username}' does not have sufficient permissions to \"",
                "// Line 798:             f\"access the server at '{url}'.\"",
                "// vulnerable line: 799: )",
                "// Line 800: ",
                "// vulnerable line: 801: if workspace:",
                "// vulnerable line: 802: try:",
                "// vulnerable line: 803: Client().set_active_workspace(workspace_name_or_id=workspace)",
                "// vulnerable line: 804: except KeyError:",
                "// vulnerable line: 805: cli_utils.warning(",
                "// vulnerable line: 806: f\"The workspace {workspace} does not exist or is not accessible. \"",
                "// vulnerable line: 807: f\"Please set another workspace by running `zenml \"",
                "// vulnerable line: 808: f\"workspace set`.\"",
                "// vulnerable line: 809: )",
                "// Line 810: ",
                "// Line 811: ",
                "// Line 812: @cli.command(\"disconnect\", help=\"Disconnect from a ZenML server.\")",
                "// Line 813: def disconnect_server() -> None:",
                "// Line 814:     \"\"\"Disconnect from a ZenML server.\"\"\"",
                "// Line 815:     from zenml.zen_server.deploy.deployer import ServerDeployer",
                "// Line 816:     from zenml.zen_stores.base_zen_store import BaseZenStore",
                "// Line 817: ",
                "// Line 818:     gc = GlobalConfiguration()",
                "// Line 819: ",
                "// Line 821:     store_type = BaseZenStore.get_store_type(url)",
                "// Line 822:     if store_type == StoreType.REST:",
                "// Line 823:         deployer = ServerDeployer()",
                "// Line 824:         deployer.disconnect_from_server()",
                "// Line 825:     else:",
                "// Line 826:         gc.set_default_store()",
                "// Line 827:         cli_utils.declare(\"Restored default store configuration.\")",
                "// Line 828: ",
                "// Line 829: ",
                "// Line 830: @cli.command(\"logs\", help=\"Show the logs for the local or cloud ZenML server.\")",
                "// vulnerable line: 831: @click.option(",
                "// Line 832:     \"--local\",",
                "// Line 833:     is_flag=True,",
                "// Line 834:     help=\"Show the logs for the local ZenML server.\",",
                "// vulnerable line: 835: )",
                "// vulnerable line: 836: @click.option(",
                "// Line 837:     \"--follow\",",
                "// Line 838:     \"-f\",",
                "// Line 839:     is_flag=True,",
                "// Line 840:     help=\"Continue to output new log data as it becomes available.\",",
                "// vulnerable line: 841: )",
                "// vulnerable line: 842: @click.option(",
                "// Line 843:     \"--tail\",",
                "// Line 844:     \"-t\",",
                "// Line 845:     type=click.INT,",
                "// Line 846:     default=None,",
                "// Line 847:     help=\"Only show the last NUM lines of log output.\",",
                "// vulnerable line: 848: )",
                "// vulnerable line: 849: @click.option(",
                "// Line 850:     \"--raw\",",
                "// Line 851:     \"-r\",",
                "// Line 852:     is_flag=True,",
                "// Line 853:     help=\"Show raw log contents (don't pretty-print logs).\",",
                "// vulnerable line: 854: )",
                "// Line 855: def logs(",
                "// Line 856:     local: bool = False,",
                "// Line 857:     follow: bool = False,",
                "// Line 858:     raw: bool = False,",
                "// Line 859:     tail: Optional[int] = None,",
                "// Line 860: ) -> None:",
                "// Line 861:     \"\"\"Display the logs for a ZenML server.",
                "// Line 862: ",
                "// Line 863:     Args:",
                "// Line 864:         local: Whether to show the logs for the local ZenML server.",
                "// Line 869:     server = get_active_deployment(local=True)",
                "// Line 870:     if not local:",
                "// Line 871:         remote_server = get_active_deployment(local=False)",
                "// Line 872:         if remote_server is not None:",
                "// Line 873:             server = remote_server",
                "// Line 874: ",
                "// Line 875:     if server is None:",
                "// Line 876:         cli_utils.error(",
                "// Line 877:             \"The local ZenML dashboard is not running. Please call `zenml \"",
                "// Line 878:             \"up` first to start the ZenML dashboard locally.\"",
                "// vulnerable line: 879: )",
                "// Line 880: ",
                "// Line 881:     server_name = server.config.name",
                "// Line 882: ",
                "// Line 883:     from zenml.zen_server.deploy.deployer import ServerDeployer",
                "// Line 884: ",
                "// Line 885:     deployer = ServerDeployer()",
                "// Line 886: ",
                "// Line 887:     cli_utils.declare(f\"Showing logs for server: {server_name}\")",
                "// Line 888: ",
                "// Line 889:     from zenml.zen_server.deploy.exceptions import (",
                "// Line 890:         ServerDeploymentNotFoundError,",
                "// vulnerable line: 891: )",
                "// Line 892: ",
                "// vulnerable line: 893: try:",
                "// Line 894:         logs = deployer.get_server_logs(server_name, follow=follow, tail=tail)",
                "// Line 895:     except ServerDeploymentNotFoundError as e:",
                "// Line 896:         cli_utils.error(f\"Server not found: {e}\")",
                "// Line 897: ",
                "// Line 898:     for line in logs:",
                "// Line 899:         # don't pretty-print log lines that are already pretty-printed",
                "// Line 900:         if raw or line.startswith(\"\u001b[\"):",
                "// Line 901:             console.print(line, markup=False)",
                "// Line 902:         else:",
                "// vulnerable line: 903: try:",
                "// Line 904:                 console.print(line)",
                "// Line 905:             except MarkupError:",
                "// Line 906:                 console.print(line, markup=False)"
            ]
        },
        {
            "filename_of_changes": "user.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "6",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "user_schemas.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        }
    ]
}