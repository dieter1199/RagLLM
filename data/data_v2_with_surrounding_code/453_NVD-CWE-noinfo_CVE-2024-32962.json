{
    "cve_id": "CVE-2024-32962",
    "cve_description": "xml-crypto is an xml digital signature and encryption library for Node.js. In affected versions the default configuration does not check authorization of the signer, it only checks the validity of the signature per section 3.2.2 of the w3 xmldsig-core-20080610 spec. As such, without additional validation steps, the default configuration allows a malicious actor to re-sign an XML document, place the certificate in a `<KeyInfo />` element, and pass `xml-crypto` default validation checks. As a result `xml-crypto` trusts by default any certificate provided via digitally signed XML document's `<KeyInfo />`. `xml-crypto` prefers to use any certificate provided via digitally signed XML document's `<KeyInfo />` even if library was configured to use specific certificate (`publicCert`) for signature verification purposes.  An attacker can spoof signature verification by modifying XML document and replacing existing signature with signature generated with malicious private key (created by attacker) and by attaching that private key's certificate to `<KeyInfo />` element. This vulnerability is combination of changes introduced to `4.0.0` on pull request 301 / commit `c2b83f98` and has been addressed in version 6.0.0 with pull request 445 / commit `21201723d`. Users are advised to upgrade. Users unable to upgrade may either check the certificate extracted via `getCertFromKeyInfo` against trusted certificates before accepting the results of the validation or set `xml-crypto's getCertFromKeyInfo` to `() => undefined` forcing `xml-crypto` to use an explicitly configured `publicCert` or `privateKey` for signature verification.",
    "cve_publish_date": "2024-05-02T07:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Set `getCertFromKeyInfo` to `noop` (#445)\n\n`getKeyInfoContent` was incorrectly set to `noop` instead of `getCertFromKeyInfo`",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "document-tests.spec.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "key-info-tests.spec.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "0",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 6: import * as isDomNode from \"@xmldom/is-dom-node\";",
                "// Line 7: ",
                "// Line 8: describe(\"KeyInfo tests\", function () {",
                "// Line 9:   it(\"adds X509Certificate element during signature\", function () {",
                "// Line 10:     const xml = \"<root><x /></root>\";",
                "// Line 11:     const sig = new SignedXml();",
                "// Line 12:     sig.privateKey = fs.readFileSync(\"./test/static/client.pem\");",
                "// Line 13:     sig.publicCert = fs.readFileSync(\"./test/static/client_public.pem\");",
                "// Line 14:     sig.canonicalizationAlgorithm = \"http://www.w3.org/2001/10/xml-exc-c14n#\";",
                "// Line 15:     sig.signatureAlgorithm = \"http://www.w3.org/2000/09/xmldsig#rsa-sha1\";",
                "// vulnerable line: 16: sig.getKeyInfoContent = SignedXml.getKeyInfoContent;",
                "// Line 17:     sig.computeSignature(xml);",
                "// Line 18:     const signedXml = sig.getSignedXml();",
                "// Line 19:     const doc = new xmldom.DOMParser().parseFromString(signedXml);",
                "// Line 20:     const x509 = xpath.select(\"//*[local-name(.)='X509Certificate']\", doc.documentElement);",
                "// Line 21:     isDomNode.assertIsArrayOfNodes(x509);",
                "// Line 22: ",
                "// Line 23:     expect(x509.length, \"X509Certificate element should exist\").to.equal(1);",
                "// Line 24:   });",
                "// Line 25: ",
                "// Line 26:   it(\"make sure private hmac key is not leaked due to key confusion\", function () {"
            ]
        },
        {
            "filename_of_changes": "signed-xml.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 142:     this.publicCert = publicCert;",
                "// Line 143:     this.signatureAlgorithm = signatureAlgorithm ?? this.signatureAlgorithm;",
                "// Line 144:     this.canonicalizationAlgorithm = canonicalizationAlgorithm;",
                "// Line 145:     if (typeof inclusiveNamespacesPrefixList === \"string\") {",
                "// Line 146:       this.inclusiveNamespacesPrefixList = inclusiveNamespacesPrefixList.split(\" \");",
                "// Line 147:     } else if (utils.isArrayHasLength(inclusiveNamespacesPrefixList)) {",
                "// Line 148:       this.inclusiveNamespacesPrefixList = inclusiveNamespacesPrefixList;",
                "// Line 149:     }",
                "// Line 150:     this.implicitTransforms = implicitTransforms ?? this.implicitTransforms;",
                "// Line 151:     this.keyInfoAttributes = keyInfoAttributes ?? this.keyInfoAttributes;",
                "// vulnerable line: 152: this.getKeyInfoContent = getKeyInfoContent ?? SignedXml.noop;",
                "// vulnerable line: 153: this.getCertFromKeyInfo = getCertFromKeyInfo ?? this.getCertFromKeyInfo;",
                "// Line 154:     this.CanonicalizationAlgorithms;",
                "// Line 155:     this.HashAlgorithms;",
                "// Line 156:     this.SignatureAlgorithms;",
                "// Line 157:   }",
                "// Line 158: ",
                "// Line 159:   /**",
                "// Line 160:    * Due to key-confusion issues, it's risky to have both hmac",
                "// Line 161:    * and digital signature algorithms enabled at the same time.",
                "// Line 162:    * This enables HMAC and disables other signing algorithms.",
                "// Line 163:    */"
            ]
        }
    ]
}