{
    "cve_id": "CVE-2024-1666",
    "cve_description": "In lunary-ai/lunary version 1.0.0, an authorization flaw exists that allows unauthorized radar creation. The vulnerability stems from the lack of server-side checks to verify if a user is on a free account during the radar creation process, which is only enforced in the web UI. As a result, attackers can bypass the intended account upgrade requirement by directly sending crafted requests to the server, enabling the creation of an unlimited number of radars without payment.",
    "cve_publish_date": "2024-04-16T00:15Z",
    "cwe_id": "CWE-770",
    "cwe_name": "Allocation of Resources Without Limits or Throttling",
    "cwe_description": "The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.",
    "commit_message": "fix: security patches (#192)",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "index.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "14",
            "number_of_lines_deleted_vulnerable_to_cve": "9",
            "Code_with_highlighted_vulnerability_lines": [
                "// vulnerable line: 1: import Router from \"koa-router\"",
                "// Line 2: import sql from \"@/src/utils/db\"",
                "// Line 3: import Context from \"@/src/utils/koa\"",
                "// vulnerable line: 4: import { getReadableDateTime } from \"@/src/utils/date\"",
                "// vulnerable line: 5: import { runEval } from \"./utils\"",
                "// vulnerable line: 6: import { getEvaluation } from \"./utils\"",
                "// vulnerable line: 7: import { calcRunCost } from \"@/src/utils/calcCost\"",
                "// vulnerable line: 8: import { runChecksOnRun } from \"@/src/checks/runChecks\"",
                "// Line 9: import PQueue from \"p-queue\"",
                "// Line 10: import { PassThrough } from \"stream\"",
                "// vulnerable line: 11: import { checkAccess } from \"@/src/utils/authorization\"",
                "// vulnerable line: 12: import { RunEvent } from \"lunary/types\"",
                "// Line 13: ",
                "// Line 14: const evaluations = new Router({ prefix: \"/evaluations\" })",
                "// Line 15: ",
                "// Line 16: const MAX_PARALLEL_EVALS = 4",
                "// Line 17: ",
                "// Line 18: evaluations.post(",
                "// Line 19:   \"/\",",
                "// Line 20:   checkAccess(\"evaluations\", \"create\"),",
                "// Line 21:   async (ctx: Context) => {",
                "// Line 22:     const { name, datasetId, checklistId, providers } = ctx.request.body as any",
                "// vulnerable line: 23: const { userId, projectId } = ctx.state",
                "// Line 24: ",
                "// Line 25:     ctx.request.socket.setTimeout(0)",
                "// Line 26:     ctx.request.socket.setNoDelay(true)",
                "// Line 27:     ctx.request.socket.setKeepAlive(true)",
                "// Line 28: ",
                "// Line 29:     ctx.set({",
                "// Line 30:       \"Content-Type\": \"text/event-stream\",",
                "// Line 31:       \"Cache-Control\": \"no-cache\",",
                "// Line 32:       Connection: \"keep-alive\",",
                "// Line 33:     })"
            ]
        },
        {
            "filename_of_changes": "index.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "6",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 114:   },",
                "// Line 115: )",
                "// Line 116: ",
                "// Line 117: projects.post(",
                "// Line 118:   \"/:projectId/regenerate-key\",",
                "// Line 119:   checkAccess(\"projects\", \"update\"),",
                "// Line 120:   async (ctx: Context) => {",
                "// Line 121:     const { projectId } = ctx.params",
                "// Line 122:     const { userId } = ctx.state",
                "// Line 123: ",
                "// vulnerable line: 124: // Define the schema for request body validation using Zod",
                "// Line 125:     const requestBodySchema = z.object({",
                "// Line 126:       type: z.enum([\"private\", \"public\"]),",
                "// Line 127:     })",
                "// Line 128:     const { type } = requestBodySchema.parse(ctx.request.body)",
                "// Line 129: ",
                "// Line 130:     const hasProjectAccess = await checkProjectAccess(projectId, userId)",
                "// Line 131: ",
                "// Line 132:     if (!hasProjectAccess) {",
                "// Line 133:       ctx.throw(401, \"Not allowed\")",
                "// Line 134:     }"
            ]
        }
    ]
}