{
    "cve_id": "CVE-2024-36043",
    "cve_description": "question_image.ts in SurveyJS Form Library before 1.10.4 allows contentMode=youtube XSS via the imageLink property.",
    "cve_publish_date": "2024-05-18T20:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Image with contentMode: \"youtube\" allows external script execution\nfixed https://github.com/surveyjs/service/issues/2174",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "question_image.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "8",
            "number_of_lines_deleted_vulnerable_to_cve": "6",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: import { QuestionNonValue } from \"./questionnonvalue\";",
                "// Line 2: import { property, Serializer } from \"./jsonobject\";",
                "// Line 3: import { QuestionFactory } from \"./questionfactory\";",
                "// Line 4: import { LocalizableString } from \"./localizablestring\";",
                "// Line 5: import { CssClassBuilder } from \"./utils/cssClassBuilder\";",
                "// Line 6: import { getRenderedStyleSize, getRenderedSize } from \"./utils/utils\";",
                "// Line 7: ",
                "// vulnerable line: 8: const youtubeTags = [\"youtube.com\", \"youtu.be\"];",
                "// Line 9: const videoSuffics = [\".mp4\", \".mov\", \".wmv\", \".flv\", \".avi\", \".mkv\"];",
                "// Line 10: const youtubeUrl = \"https://www.youtube.com/\";",
                "// Line 11: const youtubeEmbed = \"embed\";",
                "// Line 12: ",
                "// Line 13: function isUrlYoutubeVideo(url: string): boolean {",
                "// Line 14:   if (!url) return false;",
                "// Line 15:   url = url.toLowerCase();",
                "// vulnerable line: 16: for (let i = 0; i < youtubeTags.length; i++) {",
                "// vulnerable line: 17: if (url.indexOf(youtubeTags[i]) !== -1) return true;",
                "// Line 18:   }",
                "// Line 19:   return false;",
                "// Line 20: }",
                "// Line 21: ",
                "// Line 22: /**",
                "// Line 23:   * A class that describes the Image question type. Unlike other question types, Image cannot have a title or value.",
                "// Line 24:  *",
                "// Line 25:  * [View Demo](https://surveyjs.io/form-library/examples/questiontype-image/ (linkStyle))",
                "// Line 26:  */",
                "// Line 27: export class QuestionImageModel extends QuestionNonValue {",
                "// Line 28:   @property({ defaultValue: false }) contentNotLoaded: boolean;",
                "// Line 29: ",
                "// Line 30:   constructor(name: string) {",
                "// Line 31:     super(name);",
                "// Line 32:     const locImageLink = this.createLocalizableString(\"imageLink\", this, false);",
                "// Line 33:     locImageLink.onGetTextCallback = (text: string): string => {",
                "// vulnerable line: 34: return getCorrectImageLink(text);",
                "// Line 35:     };",
                "// Line 36:     this.createLocalizableString(\"altText\", this, false);",
                "// Line 37:     this.registerPropertyChangedHandlers([\"contentMode\", \"imageLink\"], () => this.calculateRenderedMode());",
                "// Line 38:   }",
                "// Line 39:   public getType(): string {",
                "// Line 40:     return \"image\";",
                "// Line 41:   }",
                "// Line 42:   public get isCompositeQuestion(): boolean {",
                "// Line 43:     return false;",
                "// Line 44:   }",
                "// Line 196:     let link = this.imageLink;",
                "// Line 197:     if (!link) return false;",
                "// Line 198:     link = link.toLowerCase();",
                "// Line 199:     for (let i = 0; i < videoSuffics.length; i++) {",
                "// Line 200:       if (link.endsWith(videoSuffics[i])) return true;",
                "// Line 201:     }",
                "// Line 202:     return false;",
                "// Line 203:   }",
                "// Line 204: }",
                "// Line 205: ",
                "// vulnerable line: 206: function getCorrectImageLink(val: string): string {",
                "// vulnerable line: 207: if(!val || !isUrlYoutubeVideo(val)) return val;",
                "// Line 208:   let res = val.toLocaleLowerCase();",
                "// Line 209:   if(res.indexOf(youtubeEmbed) > -1) return val;",
                "// Line 210:   let id = \"\";",
                "// Line 211:   for(var i = val.length - 1; i >= 0; i --) {",
                "// Line 212:     if(val[i] === \"=\" || val[i] === \"/\") break;",
                "// Line 213:     id = val[i] + id;",
                "// Line 214:   }",
                "// Line 215:   return youtubeUrl + youtubeEmbed + \"/\" + id;",
                "// Line 216: }",
                "// Line 217: "
            ]
        },
        {
            "filename_of_changes": "question_imagetests.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "30",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        }
    ]
}