{
    "cve_id": "CVE-2024-3078",
    "cve_description": "A vulnerability was found in Qdrant up to 1.6.1/1.7.4/1.8.2 and classified as critical. This issue affects some unknown processing of the file lib/collection/src/collection/snapshots.rs of the component Full Snapshot REST API. The manipulation leads to path traversal. Upgrading to version 1.8.3 is able to address this issue. The patch is named 3ab5172e9c8f14fa1f7b24e7147eac74e2412b62. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-258611.",
    "cve_publish_date": "2024-03-29T13:15Z",
    "cwe_id": "CWE-22",
    "cwe_name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
    "cwe_description": "The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
    "commit_message": "Fix arbitrary path traversal vulnerability in full snapshot REST API (#3856)\n\n* Improve function to get collection snapshot path\r\n\r\n* Fix arbitrary path traversal in full snapshot path function\r\n\r\n* Add integration test to assert arbitrary path traversal is blocked",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "errors.rs",
            "code_language": "Rust",
            "number_of_lines_added_for_mitigation": "6",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "mod.rs",
            "code_language": "Rust",
            "number_of_lines_added_for_mitigation": "22",
            "number_of_lines_deleted_vulnerable_to_cve": "6",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 20:     pub collections_mapping: HashMap<String, String>,",
                "// Line 21:     /// Aliases for collections `<alias>:<collection_name>`",
                "// Line 22:     #[serde(default)]",
                "// Line 23:     pub collections_aliases: HashMap<String, String>,",
                "// Line 24: }",
                "// Line 25: ",
                "// Line 26: pub async fn get_full_snapshot_path(",
                "// Line 27:     toc: &TableOfContent,",
                "// Line 28:     snapshot_name: &str,",
                "// Line 29: ) -> Result<PathBuf, StorageError> {",
                "// vulnerable line: 30: let snapshot_path = Path::new(toc.snapshots_path()).join(snapshot_name);",
                "// vulnerable line: 31: if !snapshot_path.exists() {",
                "// vulnerable line: 32: return Err(StorageError::NotFound {",
                "// vulnerable line: 33: description: format!(\"Full storage snapshot {snapshot_name} not found\"),",
                "// vulnerable line: 34: });",
                "// Line 35:     }",
                "// vulnerable line: 36: Ok(snapshot_path)",
                "// Line 37: }",
                "// Line 38: ",
                "// Line 39: pub async fn do_delete_full_snapshot(",
                "// Line 40:     dispatcher: &Dispatcher,",
                "// Line 41:     snapshot_name: &str,",
                "// Line 42:     wait: bool,",
                "// Line 43: ) -> Result<bool, StorageError> {",
                "// Line 44:     let dispatcher = dispatcher.clone();",
                "// Line 45:     let snapshot_manager = dispatcher.clone().toc().get_snapshots_storage_manager();",
                "// Line 46:     let snapshot_dir = get_full_snapshot_path(dispatcher.toc(), snapshot_name).await?;",
                "// Line 186:         // have to use std here, cause TarBuilder is not async",
                "// Line 187:         let file = std::fs::File::create(&full_snapshot_path_clone)?;",
                "// Line 188:         let mut builder = TarBuilder::new(file);",
                "// Line 189:         for (temp_file, snapshot_name) in temp_collection_snapshots {",
                "// Line 190:             builder.append_path_with_name(&temp_file, &snapshot_name)?;",
                "// Line 191:         }",
                "// Line 192:         builder.append_path_with_name(&config_path_clone, \"config.json\")?;",
                "// Line 193: ",
                "// Line 194:         builder.finish()?;",
                "// Line 195:         Ok::<(), StorageError>(())",
                "// vulnerable line: 196: });",
                "// Line 197:     archiving.await??;",
                "// Line 198: ",
                "// Line 199:     let snapshot_description = snapshot_manager",
                "// Line 200:         .store_file(&temp_full_snapshot_path, &full_snapshot_path)",
                "// Line 201:         .await?;",
                "// Line 202:     tokio::fs::remove_file(&config_path).await?;",
                "// Line 203:     Ok(snapshot_description)",
                "// Line 204: }"
            ]
        },
        {
            "filename_of_changes": "snapshots.rs",
            "code_language": "Rust",
            "number_of_lines_added_for_mitigation": "23",
            "number_of_lines_deleted_vulnerable_to_cve": "23",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 51:             \"{}-{this_peer_id}-{}.snapshot\",",
                "// Line 52:             self.name(),",
                "// Line 53:             chrono::Utc::now().format(\"%Y-%m-%d-%H-%M-%S\"),",
                "// Line 54:         );",
                "// Line 55: ",
                "// Line 56:         // Final location of snapshot",
                "// Line 57:         let snapshot_path = self.snapshots_path.join(&snapshot_name);",
                "// Line 58:         log::info!(",
                "// Line 59:             \"Creating collection snapshot {} into {:?}\",",
                "// Line 60:             snapshot_name,",
                "// vulnerable line: 61: snapshot_path",
                "// Line 62:         );",
                "// Line 63: ",
                "// Line 64:         // Dedicated temporary directory for this snapshot (deleted on drop)",
                "// Line 65:         let snapshot_temp_target_dir = tempfile::Builder::new()",
                "// Line 66:             .prefix(&format!(\"{snapshot_name}-target-\"))",
                "// Line 67:             .tempdir_in(global_temp_dir)?;",
                "// Line 68: ",
                "// Line 69:         let snapshot_temp_target_dir_path = snapshot_temp_target_dir.path().to_path_buf();",
                "// Line 70:         // Create snapshot of each shard",
                "// Line 71:         {",
                "// Line 118:         // Archive snapshot folder into a single file",
                "// Line 119:         log::debug!(\"Archiving snapshot {snapshot_temp_target_dir_path:?}\");",
                "// Line 120:         let archiving = tokio::task::spawn_blocking(move || -> CollectionResult<_> {",
                "// Line 121:             let mut builder = tar::Builder::new(snapshot_temp_arc_file.as_file_mut());",
                "// Line 122:             // archive recursively collection directory `snapshot_path_with_arc_extension` into `snapshot_path`",
                "// Line 123:             builder.append_dir_all(\".\", &snapshot_temp_target_dir_path)?;",
                "// Line 124:             builder.finish()?;",
                "// Line 125:             drop(builder);",
                "// Line 126:             // return ownership of the file",
                "// Line 127:             Ok(snapshot_temp_arc_file)",
                "// vulnerable line: 128: });",
                "// Line 129:         snapshot_temp_arc_file = archiving.await??;",
                "// Line 130: ",
                "// Line 131:         let snapshot_manager = self.get_snapshots_storage_manager();",
                "// Line 132:         snapshot_manager",
                "// Line 133:             .store_file(snapshot_temp_arc_file.path(), snapshot_path.as_path())",
                "// Line 134:             .await",
                "// Line 135:     }",
                "// Line 136: ",
                "// Line 137:     /// Restore collection from snapshot",
                "// Line 138:     ///",
                "// Line 226:         // `ShardHolder::recover_local_shard_from` is *not* cancel safe",
                "// Line 227:         // (see `ShardReplicaSet::restore_local_replica_from`)",
                "// Line 228:         self.shards_holder",
                "// Line 229:             .read()",
                "// Line 230:             .await",
                "// Line 231:             .recover_local_shard_from(snapshot_shard_path, shard_id, cancel)",
                "// Line 232:             .await",
                "// Line 233:     }",
                "// Line 234: ",
                "// Line 235:     pub async fn get_snapshot_path(&self, snapshot_name: &str) -> CollectionResult<PathBuf> {",
                "// vulnerable line: 236: let snapshot_path = self.snapshots_path.join(snapshot_name);",
                "// Line 237: ",
                "// vulnerable line: 238: let absolute_snapshot_path =",
                "// vulnerable line: 239: snapshot_path",
                "// vulnerable line: 240: .canonicalize()",
                "// vulnerable line: 241: .map_err(|_| CollectionError::NotFound {",
                "// vulnerable line: 242: what: format!(\"Snapshot {snapshot_name}\"),",
                "// vulnerable line: 243: })?;",
                "// Line 244: ",
                "// vulnerable line: 245: let absolute_snapshot_dir =",
                "// vulnerable line: 246: self.snapshots_path",
                "// vulnerable line: 247: .canonicalize()",
                "// vulnerable line: 248: .map_err(|_| CollectionError::NotFound {",
                "// vulnerable line: 249: what: format!(\"Snapshot directory: {}\", self.snapshots_path.display()),",
                "// vulnerable line: 250: })?;",
                "// Line 251: ",
                "// Line 252:         if !absolute_snapshot_path.starts_with(absolute_snapshot_dir) {",
                "// vulnerable line: 253: return Err(CollectionError::NotFound {",
                "// vulnerable line: 254: what: format!(\"Snapshot {snapshot_name}\"),",
                "// vulnerable line: 255: });",
                "// Line 256:         }",
                "// Line 257: ",
                "// vulnerable line: 258: if !snapshot_path.exists() {",
                "// vulnerable line: 259: return Err(CollectionError::NotFound {",
                "// vulnerable line: 260: what: format!(\"Snapshot {snapshot_name}\"),",
                "// vulnerable line: 261: });",
                "// Line 262:         }",
                "// vulnerable line: 263: Ok(snapshot_path)",
                "// Line 264:     }",
                "// Line 265: ",
                "// Line 266:     pub async fn list_shard_snapshots(",
                "// Line 267:         &self,",
                "// Line 268:         shard_id: ShardId,",
                "// Line 269:     ) -> CollectionResult<Vec<SnapshotDescription>> {",
                "// Line 270:         self.shards_holder",
                "// Line 271:             .read()",
                "// Line 272:             .await",
                "// Line 273:             .list_shard_snapshots(&self.snapshots_path, shard_id)"
            ]
        },
        {
            "filename_of_changes": "types.rs",
            "code_language": "Rust",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        }
    ]
}