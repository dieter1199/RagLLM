{
    "cve_id": "CVE-2024-39905",
    "cve_description": "Red is a fully modular Discord bot. Due to a bug in Red's Core API, 3rd-party cogs using the `@commands.can_manage_channel()` command permission check without additional permission controls may authorize a user to run a command even when that user doesn't have permissions to manage a channel. None of the core commands or core cogs are affected. The maintainers of the project are not aware of any _public_ 3rd-party cog utilizing this API at the time of writing this advisory. The problem was patched and released in version 3.5.10.",
    "cve_publish_date": "2024-07-11T16:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Fix `@commands.can_manage_channel` always passing (#6398)",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "requires.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "11",
            "number_of_lines_deleted_vulnerable_to_cve": "5",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 754: ",
                "// Line 755:     def decorator(func: _T) -> _T:",
                "// Line 756:         func = bot_has_permissions(read_message_history=True, add_reactions=True)(func)",
                "// Line 757:         func = check(predicate)(func)",
                "// Line 758:         return func",
                "// Line 759: ",
                "// Line 760:     return decorator",
                "// Line 761: ",
                "// Line 762: ",
                "// Line 763: def _can_manage_channel_deco(",
                "// vulnerable line: 764: privilege_level: Optional[PrivilegeLevel] = None, allow_thread_owner: bool = False",
                "// Line 765: ) -> Callable[[_T], _T]:",
                "// Line 766:     async def predicate(ctx: \"Context\") -> bool:",
                "// Line 767:         if utils.can_user_manage_channel(",
                "// Line 768:             ctx.author, ctx.channel, allow_thread_owner=allow_thread_owner",
                "// Line 769:         ):",
                "// Line 770:             return True",
                "// Line 771: ",
                "// Line 772:         if privilege_level is not None:",
                "// Line 773:             if await PrivilegeLevel.from_ctx(ctx) >= privilege_level:",
                "// Line 774:                 return True",
                "// Line 796:     This check can be overridden by rules.",
                "// Line 797: ",
                "// Line 798:     Parameters",
                "// Line 799:     ----------",
                "// Line 800:     allow_thread_owner: bool",
                "// Line 801:         If ``True``, the command will also be allowed to run if the author is a thread owner.",
                "// Line 802:         This can, for example, be useful to check if the author can edit a channel/thread's name",
                "// Line 803:         as that, in addition to members with manage channel/threads permission,",
                "// Line 804:         can also be done by the thread owner.",
                "// Line 805:     \"\"\"",
                "// vulnerable line: 806: return _can_manage_channel_deco(allow_thread_owner)",
                "// Line 807: ",
                "// Line 808: ",
                "// Line 809: def is_owner():",
                "// Line 810:     \"\"\"Restrict the command to bot owners.",
                "// Line 811: ",
                "// Line 812:     This check cannot be overridden by rules.",
                "// Line 813:     \"\"\"",
                "// Line 814:     return Requires.get_decorator(PrivilegeLevel.BOT_OWNER, {})",
                "// Line 815: ",
                "// Line 816: ",
                "// Line 830:     This check can be overridden by rules.",
                "// Line 831: ",
                "// Line 832:     Parameters",
                "// Line 833:     ----------",
                "// Line 834:     allow_thread_owner: bool",
                "// Line 835:         If ``True``, the command will also be allowed to run if the author is a thread owner.",
                "// Line 836:         This can, for example, be useful to check if the author can edit a channel/thread's name",
                "// Line 837:         as that, in addition to members with manage channel/threads permission,",
                "// Line 838:         can also be done by the thread owner.",
                "// Line 839:     \"\"\"",
                "// vulnerable line: 840: return _can_manage_channel_deco(PrivilegeLevel.GUILD_OWNER, allow_thread_owner)",
                "// Line 841: ",
                "// Line 842: ",
                "// Line 843: def guildowner():",
                "// Line 844:     \"\"\"Restrict the command to the guild owner.",
                "// Line 845: ",
                "// Line 846:     This check can be overridden by rules.",
                "// Line 847:     \"\"\"",
                "// Line 848:     return guildowner_or_permissions()",
                "// Line 849: ",
                "// Line 850: ",
                "// Line 864:     This check can be overridden by rules.",
                "// Line 865: ",
                "// Line 866:     Parameters",
                "// Line 867:     ----------",
                "// Line 868:     allow_thread_owner: bool",
                "// Line 869:         If ``True``, the command will also be allowed to run if the author is a thread owner.",
                "// Line 870:         This can, for example, be useful to check if the author can edit a channel/thread's name",
                "// Line 871:         as that, in addition to members with manage channel/threads permission,",
                "// Line 872:         can also be done by the thread owner.",
                "// Line 873:     \"\"\"",
                "// vulnerable line: 874: return _can_manage_channel_deco(PrivilegeLevel.ADMIN, allow_thread_owner)",
                "// Line 875: ",
                "// Line 876: ",
                "// Line 877: def admin():",
                "// Line 878:     \"\"\"Restrict the command to users with the admin role.",
                "// Line 879: ",
                "// Line 880:     This check can be overridden by rules.",
                "// Line 881:     \"\"\"",
                "// Line 882:     return admin_or_permissions()",
                "// Line 883: ",
                "// Line 884: ",
                "// Line 898:     This check can be overridden by rules.",
                "// Line 899: ",
                "// Line 900:     Parameters",
                "// Line 901:     ----------",
                "// Line 902:     allow_thread_owner: bool",
                "// Line 903:         If ``True``, the command will also be allowed to run if the author is a thread owner.",
                "// Line 904:         This can, for example, be useful to check if the author can edit a channel/thread's name",
                "// Line 905:         as that, in addition to members with manage channel/threads permission,",
                "// Line 906:         can also be done by the thread owner.",
                "// Line 907:     \"\"\"",
                "// vulnerable line: 908: return _can_manage_channel_deco(PrivilegeLevel.MOD, allow_thread_owner)",
                "// Line 909: ",
                "// Line 910: ",
                "// Line 911: def mod():",
                "// Line 912:     \"\"\"Restrict the command to users with the mod role.",
                "// Line 913: ",
                "// Line 914:     This check can be overridden by rules.",
                "// Line 915:     \"\"\"",
                "// Line 916:     return mod_or_permissions()",
                "// Line 917: ",
                "// Line 918: "
            ]
        }
    ]
}