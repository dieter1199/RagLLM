{
    "cve_id": "CVE-2024-28190",
    "cve_description": "Contao is an open source content management system. Starting in version 4.0.0 and prior to version 4.13.40 and 5.3.4, users can inject malicious code in filenames when uploading files (back end and front end), which is then executed in tooltips and popups in the back end. Contao versions 4.13.40 and 5.3.4 have a patch for this issue. As a workaround, remove upload fields from frontend forms and disable uploads for untrusted back end users.",
    "cve_publish_date": "2024-04-09T14:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Merge pull request from GHSA-v24p-7p4j-qvvf\n\n* Encode file names in tooltips and titles\n\n* Allow HTML in help texts\n\n* Remove ampersands in sanitizeFileName()\n\n* Revert \"Remove ampersands in sanitizeFileName()\"\n\nThis reverts commit df7a6d9e7a6122d78380e38e4bb06ff7b823cc71.\n\n* Fix all modals\n\n* Rebuild the assets\n\n---------\n\nCo-authored-by: Leo Feyer <1192057+leofeyer@users.noreply.github.com>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "DC_Folder.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 2718:             // Check whether the folder is public",
                "// Line 2719:             if ($protected === true && \\in_array('.public', $content) && !is_dir(Path::join($folders[$f], '.public')))",
                "// Line 2720:             {",
                "// Line 2721:                 $protected = false;",
                "// Line 2722:             }",
                "// Line 2723: ",
                "// Line 2724:             $folderImg = $protected ? 'folderCP.svg' : 'folderC.svg';",
                "// Line 2725:             $folderAlt = $protected ? $GLOBALS['TL_LANG']['MSC']['folderCP'] : $GLOBALS['TL_LANG']['MSC']['folderC'];",
                "// Line 2726: ",
                "// Line 2727:             // Add the current folder",
                "// vulnerable line: 2728: $strFolderNameEncoded = StringUtil::convertEncoding(StringUtil::specialchars(basename($currentFolder)), System::getContainer()->getParameter('kernel.charset'));",
                "// Line 2729:             $strFolderLabel = '<strong>' . $strFolderNameEncoded . '</strong>';",
                "// Line 2730: ",
                "// Line 2731:             if ($this->isMounted($currentFolder))",
                "// Line 2732:             {",
                "// Line 2733:                 $strFolderLabel = '<a href=\"' . $this->addToUrl('fn=' . $currentEncoded) . '\" title=\"' . StringUtil::specialchars($GLOBALS['TL_LANG']['MSC']['selectNode']) . '\">' . $strFolderLabel . '</a>';",
                "// Line 2734:             }",
                "// Line 2735: ",
                "// Line 2736:             $return .= Image::getHtml($folderImg, $folderAlt) . ' ' . $strFolderLabel . '</div> <div class=\"tl_right\">';",
                "// Line 2737: ",
                "// Line 2738:             if ($this->isMounted($currentFolder))",
                "// Line 2841:                     {",
                "// Line 2842:                         $thumbnail .= ' ' . $this->getPreviewImage(rawurldecode($currentEncoded), true);",
                "// Line 2843:                     }",
                "// Line 2844:                 }",
                "// Line 2845:                 catch (RuntimeException $e)",
                "// Line 2846:                 {",
                "// Line 2847:                     $thumbnail .= '<br><p class=\"preview-image broken-image\">Broken image!</p>';",
                "// Line 2848:                 }",
                "// Line 2849:             }",
                "// Line 2850: ",
                "// vulnerable line: 2851: $strFileNameEncoded = StringUtil::convertEncoding(StringUtil::specialchars(basename($currentFile)), System::getContainer()->getParameter('kernel.charset'));",
                "// Line 2852:             $iconAlt = sprintf($GLOBALS['TL_LANG']['MSC']['typeOfFile'], strtoupper($objFile->extension));",
                "// Line 2853: ",
                "// Line 2854:             // No popup links for protected files and templates (see #700)",
                "// Line 2855:             if ($blnProtected || $this->strTable == 'tl_templates')",
                "// Line 2856:             {",
                "// Line 2857:                 $return .= Image::getHtml($objFile->icon, $iconAlt) . ' ' . $strFileNameEncoded . $thumbnail . '</div> <div class=\"tl_right\">';",
                "// Line 2858:             }",
                "// Line 2859:             else",
                "// Line 2860:             {",
                "// Line 2861:                 $return .= '<a href=\"' . $staticUrl . $currentEncoded . '\" title=\"' . StringUtil::specialchars($GLOBALS['TL_LANG']['MSC']['view']) . '\" target=\"_blank\">' . Image::getHtml($objFile->icon, $iconAlt) . '</a> ' . $strFileNameEncoded . $thumbnail . '</div> <div class=\"tl_right\">';"
            ]
        }
    ]
}