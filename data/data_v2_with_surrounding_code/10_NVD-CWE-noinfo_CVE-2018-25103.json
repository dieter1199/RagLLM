{
    "cve_id": "CVE-2018-25103",
    "cve_description": "There exists use-after-free vulnerabilities in lighttpd <= 1.4.50 request parsing which might read from invalid pointers to memory used in the same request, not from other requests.",
    "cve_publish_date": "2024-06-17T18:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "[core] security: use-after-free invalid Range req\n\n(thx Marcus Wengelin)",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "base.h",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "0",
            "number_of_lines_deleted_vulnerable_to_cve": "4",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 40: ",
                "// Line 41:     buffer *orig_uri;",
                "// Line 42: ",
                "// Line 43:     http_method_t  http_method;",
                "// Line 44:     http_version_t http_version;",
                "// Line 45: ",
                "// Line 46:     buffer *request_line;",
                "// Line 47: ",
                "// Line 48:     /* strings to the header */",
                "// Line 49:     buffer *http_host; /* not alloced */",
                "// vulnerable line: 50: const char   *http_range;",
                "// Line 51:     const char   *http_content_type;",
                "// Line 52:     const char   *http_if_modified_since;",
                "// Line 53:     const char   *http_if_none_match;",
                "// Line 54: ",
                "// Line 55:     array  *headers;",
                "// Line 56: ",
                "// Line 57:     /* CONTENT */",
                "// Line 58:     off_t content_length; /* returned by strtoll() */",
                "// Line 59:     off_t te_chunked;",
                "// Line 60: ",
                "// vulnerable line: 61: /* internal representation */",
                "// vulnerable line: 62: int     accept_encoding;",
                "// Line 63: ",
                "// Line 64:     /* internal */",
                "// Line 65:     buffer *pathinfo;",
                "// Line 66: } request;",
                "// Line 67: ",
                "// Line 68: typedef struct {",
                "// Line 69:     off_t   content_length;",
                "// Line 70:     int     keep_alive;               /* used by  the subrequests in proxy, cgi and fcgi to say the subrequest was keep-alive or not */",
                "// Line 71: ",
                "// Line 72:     array  *headers;"
            ]
        },
        {
            "filename_of_changes": "connections.c",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "0",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 688:     /*CLEAN(proto);*//* set to default in connection_accepted() */",
                "// Line 689: #undef CLEAN",
                "// Line 690: ",
                "// Line 691: #define CLEAN(x)     if (con->x) con->x->used = 0;",
                "// Line 692: ",
                "// Line 693: #undef CLEAN",
                "// Line 694: ",
                "// Line 695: #define CLEAN(x)         con->request.x = NULL;",
                "// Line 696: ",
                "// Line 697:     CLEAN(http_host);",
                "// vulnerable line: 698: CLEAN(http_range);",
                "// Line 699:     CLEAN(http_content_type);",
                "// Line 700: #undef CLEAN",
                "// Line 701:     con->request.content_length = 0;",
                "// Line 702:     con->request.te_chunked = 0;",
                "// Line 703: ",
                "// Line 704:     array_reset(con->request.headers);",
                "// Line 705:     array_reset(con->environment);",
                "// Line 706: ",
                "// Line 707:     chunkqueue_reset(con->request_content_queue);",
                "// Line 708: "
            ]
        },
        {
            "filename_of_changes": "http-header-glue.c",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "25",
            "number_of_lines_deleted_vulnerable_to_cve": "20",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 22: #include <unistd.h>",
                "// Line 23: ",
                "// Line 24: ",
                "// Line 25: int response_header_insert(server *srv, connection *con, const char *key, size_t keylen, const char *value, size_t vallen) {",
                "// Line 26:     data_string *ds;",
                "// Line 27: ",
                "// Line 28:     UNUSED(srv);",
                "// Line 29: ",
                "// Line 30:     if (NULL == (ds = (data_string *)array_get_unused_element(con->response.headers, TYPE_STRING))) {",
                "// Line 31:         ds = data_response_init();",
                "// vulnerable line: 32: }",
                "// Line 33:     buffer_copy_string_len(ds->key, key, keylen);",
                "// Line 34:     buffer_copy_string_len(ds->value, value, vallen);",
                "// Line 35: ",
                "// Line 36:     array_insert_unique(con->response.headers, (data_unset *)ds);",
                "// Line 37: ",
                "// Line 38:     return 0;",
                "// vulnerable line: 39: }",
                "// Line 40: ",
                "// Line 41: int response_header_overwrite(server *srv, connection *con, const char *key, size_t keylen, const char *value, size_t vallen) {",
                "// Line 42:     data_string *ds;",
                "// Line 43: ",
                "// Line 44:     UNUSED(srv);",
                "// Line 45: ",
                "// Line 46:     /* if there already is a key by this name overwrite the value */",
                "// Line 47:     if (NULL != (ds = (data_string *)array_get_element_klen(con->response.headers, key, keylen))) {",
                "// Line 48:         buffer_copy_string_len(ds->value, value, vallen);",
                "// Line 49: ",
                "// Line 50:         return 0;",
                "// vulnerable line: 51: }",
                "// Line 52: ",
                "// Line 53:     return response_header_insert(srv, con, key, keylen, value, vallen);",
                "// vulnerable line: 54: }",
                "// Line 55: ",
                "// Line 56: int response_header_append(server *srv, connection *con, const char *key, size_t keylen, const char *value, size_t vallen) {",
                "// Line 57:     data_string *ds;",
                "// Line 58: ",
                "// Line 59:     UNUSED(srv);",
                "// Line 60: ",
                "// Line 61:     /* if there already is a key by this name append the value */",
                "// Line 62:     if (NULL != (ds = (data_string *)array_get_element_klen(con->response.headers, key, keylen))) {",
                "// Line 63:         buffer_append_string_len(ds->value, CONST_STR_LEN(\", \"));",
                "// Line 64:         buffer_append_string_len(ds->value, value, vallen);",
                "// Line 65:         return 0;",
                "// vulnerable line: 66: }",
                "// Line 67: ",
                "// Line 68:     return response_header_insert(srv, con, key, keylen, value, vallen);",
                "// vulnerable line: 69: }",
                "// Line 70: ",
                "// Line 71: int http_response_redirect_to_directory(server *srv, connection *con) {",
                "// Line 72:     buffer *o;",
                "// Line 73: ",
                "// Line 74:     o = buffer_init();",
                "// Line 75: ",
                "// Line 76:     buffer_copy_buffer(o, con->uri.scheme);",
                "// Line 77:     buffer_append_string_len(o, CONST_STR_LEN(\"://\"));",
                "// Line 78:     if (!buffer_is_empty(con->uri.authority)) {",
                "// Line 79:         buffer_append_string_buffer(o, con->uri.authority);",
                "// vulnerable line: 80: } else {",
                "// Line 81:         /* get the name of the currently connected socket */",
                "// Line 82:         sock_addr our_addr;",
                "// Line 83:         socklen_t our_addr_len;",
                "// Line 84: ",
                "// Line 85:         our_addr_len = sizeof(our_addr);",
                "// Line 86: ",
                "// Line 87:         if (-1 == getsockname(con->fd, (struct sockaddr *)&our_addr, &our_addr_len)",
                "// Line 88:             || our_addr_len > (socklen_t)sizeof(our_addr)) {",
                "// Line 89:             con->http_status = 500;",
                "// Line 90: ",
                "// Line 91:             log_error_write(srv, __FILE__, __LINE__, \"ss\",",
                "// Line 92:                     \"can't get sockname\", strerror(errno));",
                "// Line 93: ",
                "// Line 94:             buffer_free(o);",
                "// Line 95:             return 0;",
                "// vulnerable line: 96: }",
                "// Line 97: ",
                "// Line 98:         /* Lookup name: secondly try to get hostname for bind address */",
                "// Line 99:         if (0 != sock_addr_nameinfo_append_buffer(srv, o, &our_addr)) {",
                "// Line 100:             con->http_status = 500;",
                "// Line 101:             buffer_free(o);",
                "// Line 102:             return -1;",
                "// vulnerable line: 103: } else {",
                "// Line 104:             unsigned short default_port = 80;",
                "// Line 105:             if (buffer_is_equal_caseless_string(con->uri.scheme, CONST_STR_LEN(\"https\"))) {",
                "// Line 106:                 default_port = 443;",
                "// vulnerable line: 107: }",
                "// Line 108:             if (default_port != srv->srvconf.port) {",
                "// Line 109:                 buffer_append_string_len(o, CONST_STR_LEN(\":\"));",
                "// Line 110:                 buffer_append_int(o, srv->srvconf.port);",
                "// vulnerable line: 111: }",
                "// vulnerable line: 112: }",
                "// vulnerable line: 113: }",
                "// Line 114:     buffer_append_string_encoded(o, CONST_BUF_LEN(con->uri.path), ENCODING_REL_URI);",
                "// Line 115:     buffer_append_string_len(o, CONST_STR_LEN(\"/\"));",
                "// Line 116:     if (!buffer_string_is_empty(con->uri.query)) {",
                "// Line 117:         buffer_append_string_len(o, CONST_STR_LEN(\"?\"));",
                "// Line 118:         buffer_append_string_buffer(o, con->uri.query);",
                "// vulnerable line: 119: }",
                "// Line 120: ",
                "// Line 121:     response_header_insert(srv, con, CONST_STR_LEN(\"Location\"), CONST_BUF_LEN(o));",
                "// Line 122: ",
                "// Line 123:     con->http_status = 301;",
                "// Line 124:     con->file_finished = 1;",
                "// Line 125: ",
                "// Line 126:     buffer_free(o);",
                "// Line 127: ",
                "// Line 128:     return 0;",
                "// vulnerable line: 129: }",
                "// Line 130: ",
                "// Line 131: buffer * strftime_cache_get(server *srv, time_t last_mod) {",
                "// Line 132:     static int i;",
                "// Line 133:     struct tm *tm;",
                "// Line 134: ",
                "// Line 135:     for (int j = 0; j < FILE_CACHE_MAX; ++j) {",
                "// Line 136:         if (srv->mtime_cache[j].mtime == last_mod)",
                "// Line 137:             return srv->mtime_cache[j].str; /* found cache-entry */",
                "// vulnerable line: 138: }",
                "// Line 139: ",
                "// Line 140:     if (++i == FILE_CACHE_MAX) {",
                "// Line 141:         i = 0;",
                "// vulnerable line: 142: }",
                "// Line 143: ",
                "// Line 144:     srv->mtime_cache[i].mtime = last_mod;",
                "// Line 145:     tm = gmtime(&(srv->mtime_cache[i].mtime));",
                "// Line 146:     buffer_string_set_length(srv->mtime_cache[i].str, 0);",
                "// Line 147:     buffer_append_strftime(srv->mtime_cache[i].str, \"%a, %d %b %Y %H:%M:%S GMT\", tm);",
                "// Line 148: ",
                "// Line 149:     return srv->mtime_cache[i].str;",
                "// vulnerable line: 150: }",
                "// Line 151: ",
                "// Line 152: ",
                "// Line 153: int http_response_handle_cachable(server *srv, connection *con, buffer *mtime) {",
                "// Line 154:     int head_or_get =",
                "// Line 155:         (  HTTP_METHOD_GET  == con->request.http_method",
                "// Line 156:         || HTTP_METHOD_HEAD == con->request.http_method);",
                "// Line 157:     UNUSED(srv);",
                "// Line 158: ",
                "// Line 159:     /*",
                "// Line 160:      * 14.26 If-None-Match",
                "// Line 167:      */",
                "// Line 168: ",
                "// Line 169:     if (con->request.http_if_none_match) {",
                "// Line 170:         /* use strong etag checking for now: weak comparison must not be used",
                "// Line 171:          * for ranged requests",
                "// Line 172:          */",
                "// Line 173:         if (etag_is_equal(con->physical.etag, con->request.http_if_none_match, 0)) {",
                "// Line 174:             if (head_or_get) {",
                "// Line 175:                 con->http_status = 304;",
                "// Line 176:                 return HANDLER_FINISHED;",
                "// vulnerable line: 177: } else {",
                "// Line 178:                 con->http_status = 412;",
                "// Line 179:                 con->mode = DIRECT;",
                "// Line 180:                 return HANDLER_FINISHED;",
                "// vulnerable line: 181: }",
                "// vulnerable line: 182: }",
                "// Line 183:     } else if (con->request.http_if_modified_since && head_or_get) {",
                "// Line 184:         /* last-modified handling */",
                "// Line 185:         size_t used_len;",
                "// Line 186:         char *semicolon;",
                "// Line 187: ",
                "// Line 188:         if (NULL == (semicolon = strchr(con->request.http_if_modified_since, ';'))) {",
                "// Line 189:             used_len = strlen(con->request.http_if_modified_since);",
                "// vulnerable line: 190: } else {",
                "// Line 191:             used_len = semicolon - con->request.http_if_modified_since;",
                "// vulnerable line: 192: }",
                "// Line 193: ",
                "// Line 194:         if (0 == strncmp(con->request.http_if_modified_since, mtime->ptr, used_len)) {",
                "// Line 195:             if ('\u0000' == mtime->ptr[used_len]) con->http_status = 304;",
                "// Line 196:             return HANDLER_FINISHED;",
                "// vulnerable line: 197: } else {",
                "// Line 198:             char buf[sizeof(\"Sat, 23 Jul 2005 21:20:01 GMT\")];",
                "// Line 199:             time_t t_header, t_file;",
                "// Line 200:             struct tm tm;",
                "// Line 201: ",
                "// Line 202:             /* convert to timestamp */",
                "// Line 203:             if (used_len >= sizeof(buf)) return HANDLER_GO_ON;",
                "// Line 204: ",
                "// Line 205:             strncpy(buf, con->request.http_if_modified_since, used_len);",
                "// Line 206:             buf[used_len] = '\u0000';",
                "// Line 207: ",
                "// Line 208:             if (NULL == strptime(buf, \"%a, %d %b %Y %H:%M:%S GMT\", &tm)) {",
                "// Line 209:                 /**",
                "// Line 210:                  * parsing failed, let's get out of here ",
                "// Line 211:                  */",
                "// Line 212:                 return HANDLER_GO_ON;",
                "// vulnerable line: 213: }",
                "// Line 214:             tm.tm_isdst = 0;",
                "// Line 215:             t_header = mktime(&tm);",
                "// Line 216: ",
                "// Line 217:             strptime(mtime->ptr, \"%a, %d %b %Y %H:%M:%S GMT\", &tm);",
                "// Line 218:             tm.tm_isdst = 0;",
                "// Line 219:             t_file = mktime(&tm);",
                "// Line 220: ",
                "// Line 221:             if (t_file > t_header) return HANDLER_GO_ON;",
                "// Line 222: ",
                "// Line 223:             con->http_status = 304;",
                "// Line 224:             return HANDLER_FINISHED;",
                "// vulnerable line: 225: }",
                "// vulnerable line: 226: }",
                "// Line 227: ",
                "// Line 228:     return HANDLER_GO_ON;",
                "// vulnerable line: 229: }",
                "// Line 230: ",
                "// Line 231: ",
                "// vulnerable line: 232: static int http_response_parse_range(server *srv, connection *con, buffer *path, stat_cache_entry *sce) {",
                "// Line 233:     int multipart = 0;",
                "// Line 234:     int error;",
                "// Line 235:     off_t start, end;",
                "// Line 236:     const char *s, *minus;",
                "// Line 237:     char *boundary = \"fkj49sn38dcn3\";",
                "// Line 238:     data_string *ds;",
                "// Line 239:     buffer *content_type = NULL;",
                "// Line 240: ",
                "// Line 241:     start = 0;",
                "// Line 242:     end = sce->st.st_size - 1;",
                "// Line 243: ",
                "// Line 244:     con->response.content_length = 0;",
                "// Line 245: ",
                "// Line 246:     if (NULL != (ds = (data_string *)array_get_element(con->response.headers, \"Content-Type\"))) {",
                "// Line 247:         content_type = ds->value;",
                "// vulnerable line: 248: }",
                "// Line 249: ",
                "// vulnerable line: 250: for (s = con->request.http_range, error = 0;",
                "// Line 251:          !error && *s && NULL != (minus = strchr(s, '-')); ) {",
                "// Line 252:         char *err;",
                "// Line 253:         off_t la, le;",
                "// Line 254: ",
                "// Line 255:         if (s == minus) {",
                "// Line 256:             /* -<stop> */",
                "// Line 257: ",
                "// Line 258:             le = strtoll(s, &err, 10);",
                "// Line 259: ",
                "// Line 260:             if (le == 0) {",
                "// Line 261:                 /* RFC 2616 - 14.35.1 */",
                "// Line 262: ",
                "// Line 263:                 con->http_status = 416;",
                "// vulnerable line: 264: error = 1;",
                "// Line 265:             } else if (*err == '\u0000') {",
                "// Line 266:                 /* end */",
                "// Line 267:                 s = err;",
                "// Line 268: ",
                "// Line 269:                 end = sce->st.st_size - 1;",
                "// Line 270:                 start = sce->st.st_size + le;",
                "// Line 271:             } else if (*err == ',') {",
                "// Line 272:                 multipart = 1;",
                "// Line 273:                 s = err + 1;",
                "// Line 274: ",
                "// Line 275:                 end = sce->st.st_size - 1;",
                "// Line 276:                 start = sce->st.st_size + le;",
                "// vulnerable line: 277: } else {",
                "// vulnerable line: 278: error = 1;",
                "// vulnerable line: 279: }",
                "// Line 280: ",
                "// Line 281:         } else if (*(minus+1) == '\u0000' || *(minus+1) == ',') {",
                "// Line 282:             /* <start>- */",
                "// Line 283: ",
                "// vulnerable line: 284: la = strtoll(s, &err, 10);",
                "// Line 285: ",
                "// vulnerable line: 286: if (err == minus) {",
                "// Line 287:                 /* ok */",
                "// Line 288: ",
                "// Line 289:                 if (*(err + 1) == '\u0000') {",
                "// Line 290:                     s = err + 1;",
                "// Line 291: ",
                "// Line 292:                     end = sce->st.st_size - 1;",
                "// Line 293:                     start = la;",
                "// Line 294: ",
                "// Line 295:                 } else if (*(err + 1) == ',') {",
                "// Line 296:                     multipart = 1;",
                "// Line 297:                     s = err + 2;",
                "// Line 298: ",
                "// Line 299:                     end = sce->st.st_size - 1;",
                "// Line 300:                     start = la;",
                "// vulnerable line: 301: } else {",
                "// vulnerable line: 302: error = 1;",
                "// vulnerable line: 303: }",
                "// vulnerable line: 304: } else {",
                "// vulnerable line: 305: /* error */",
                "// vulnerable line: 306: error = 1;",
                "// vulnerable line: 307: }",
                "// vulnerable line: 308: } else {",
                "// Line 309:             /* <start>-<stop> */",
                "// Line 310: ",
                "// vulnerable line: 311: la = strtoll(s, &err, 10);",
                "// Line 312: ",
                "// vulnerable line: 313: if (err == minus) {",
                "// Line 314:                 le = strtoll(minus+1, &err, 10);",
                "// Line 315: ",
                "// Line 316:                 /* RFC 2616 - 14.35.1 */",
                "// Line 317:                 if (la > le) {",
                "// vulnerable line: 318: error = 1;",
                "// vulnerable line: 319: }",
                "// Line 320: ",
                "// Line 321:                 if (*err == '\u0000') {",
                "// Line 322:                     /* ok, end*/",
                "// Line 323:                     s = err;",
                "// Line 324: ",
                "// Line 325:                     end = le;",
                "// Line 326:                     start = la;",
                "// Line 327:                 } else if (*err == ',') {",
                "// Line 328:                     multipart = 1;",
                "// Line 329:                     s = err + 1;",
                "// Line 330: ",
                "// Line 331:                     end = le;",
                "// Line 332:                     start = la;",
                "// vulnerable line: 333: } else {",
                "// vulnerable line: 334: /* error */",
                "// Line 335: ",
                "// vulnerable line: 336: error = 1;",
                "// vulnerable line: 337: }",
                "// vulnerable line: 338: } else {",
                "// vulnerable line: 339: /* error */",
                "// Line 340: ",
                "// vulnerable line: 341: error = 1;",
                "// vulnerable line: 342: }",
                "// vulnerable line: 343: }",
                "// Line 344: ",
                "// Line 345:         if (!error) {",
                "// Line 346:             if (start < 0) start = 0;",
                "// Line 347: ",
                "// Line 348:             /* RFC 2616 - 14.35.1 */",
                "// Line 349:             if (end > sce->st.st_size - 1) end = sce->st.st_size - 1;",
                "// Line 350: ",
                "// Line 351:             if (start > sce->st.st_size - 1) {",
                "// vulnerable line: 352: error = 1;",
                "// Line 353: ",
                "// Line 354:                 con->http_status = 416;",
                "// vulnerable line: 355: }",
                "// vulnerable line: 356: }",
                "// Line 357: ",
                "// Line 358:         if (!error) {",
                "// Line 359:             if (multipart) {",
                "// Line 360:                 /* write boundary-header */",
                "// Line 361:                 buffer *b = buffer_init();",
                "// Line 362: ",
                "// Line 363:                 buffer_copy_string_len(b, CONST_STR_LEN(\"",
                "// Line 364: --\"));",
                "// Line 365:                 buffer_append_string(b, boundary);",
                "// Line 366: ",
                "// Line 378:                 buffer_append_string_buffer(b, content_type);",
                "// Line 379: ",
                "// Line 380:                 /* write END-OF-HEADER */",
                "// Line 381:                 buffer_append_string_len(b, CONST_STR_LEN(\"",
                "// Line 382: ",
                "// Line 383: \"));",
                "// Line 384: ",
                "// Line 385:                 con->response.content_length += buffer_string_length(b);",
                "// Line 386:                 chunkqueue_append_buffer(con->write_queue, b);",
                "// Line 387:                 buffer_free(b);",
                "// vulnerable line: 388: }",
                "// Line 389: ",
                "// Line 390:             chunkqueue_append_file(con->write_queue, path, start, end - start + 1);",
                "// Line 391:             con->response.content_length += end - start + 1;",
                "// vulnerable line: 392: }",
                "// vulnerable line: 393: }",
                "// Line 394: ",
                "// Line 395:     /* something went wrong */",
                "// Line 396:     if (error) return -1;",
                "// Line 397: ",
                "// Line 398:     if (multipart) {",
                "// Line 399:         /* add boundary end */",
                "// Line 400:         buffer *b = buffer_init();",
                "// Line 401: ",
                "// Line 402:         buffer_copy_string_len(b, \"",
                "// Line 403: --\", 4);",
                "// Line 409:         chunkqueue_append_buffer(con->write_queue, b);",
                "// Line 410:         buffer_free(b);",
                "// Line 411: ",
                "// Line 412:         /* set header-fields */",
                "// Line 413: ",
                "// Line 414:         buffer_copy_string_len(srv->tmp_buf, CONST_STR_LEN(\"multipart/byteranges; boundary=\"));",
                "// Line 415:         buffer_append_string(srv->tmp_buf, boundary);",
                "// Line 416: ",
                "// Line 417:         /* overwrite content-type */",
                "// Line 418:         response_header_overwrite(srv, con, CONST_STR_LEN(\"Content-Type\"), CONST_BUF_LEN(srv->tmp_buf));",
                "// vulnerable line: 419: } else {",
                "// Line 420:         /* add Content-Range-header */",
                "// Line 421: ",
                "// Line 422:         buffer_copy_string_len(srv->tmp_buf, CONST_STR_LEN(\"bytes \"));",
                "// Line 423:         buffer_append_int(srv->tmp_buf, start);",
                "// Line 424:         buffer_append_string_len(srv->tmp_buf, CONST_STR_LEN(\"-\"));",
                "// Line 425:         buffer_append_int(srv->tmp_buf, end);",
                "// Line 426:         buffer_append_string_len(srv->tmp_buf, CONST_STR_LEN(\"/\"));",
                "// Line 427:         buffer_append_int(srv->tmp_buf, sce->st.st_size);",
                "// Line 428: ",
                "// Line 429:         response_header_insert(srv, con, CONST_STR_LEN(\"Content-Range\"), CONST_BUF_LEN(srv->tmp_buf));",
                "// vulnerable line: 430: }",
                "// Line 431: ",
                "// Line 432:     /* ok, the file is set-up */",
                "// Line 433:     return 0;",
                "// vulnerable line: 434: }",
                "// Line 435: ",
                "// Line 436: ",
                "// Line 437: void http_response_send_file (server *srv, connection *con, buffer *path) {",
                "// Line 438:     stat_cache_entry *sce = NULL;",
                "// Line 439:     buffer *mtime = NULL;",
                "// Line 440:     data_string *ds;",
                "// Line 441:     int allow_caching = (0 == con->http_status || 200 == con->http_status);",
                "// Line 442: ",
                "// Line 443:     if (HANDLER_ERROR == stat_cache_get_entry(srv, con, path, &sce)) {",
                "// Line 444:         con->http_status = (errno == ENOENT) ? 404 : 403;",
                "// Line 445: ",
                "// Line 446:         log_error_write(srv, __FILE__, __LINE__, \"sbsb\",",
                "// Line 447:                 \"not a regular file:\", con->uri.path,",
                "// Line 448:                 \"->\", path);",
                "// Line 449: ",
                "// Line 450:         return;",
                "// vulnerable line: 451: }",
                "// Line 452: ",
                "// Line 453:     /* we only handline regular files */",
                "// Line 454: #ifdef HAVE_LSTAT",
                "// Line 455:     if ((sce->is_symlink == 1) && !con->conf.follow_symlink) {",
                "// Line 456:         con->http_status = 403;",
                "// Line 457: ",
                "// Line 458:         if (con->conf.log_request_handling) {",
                "// Line 459:             log_error_write(srv, __FILE__, __LINE__,  \"s\",  \"-- access denied due symlink restriction\");",
                "// Line 460:             log_error_write(srv, __FILE__, __LINE__,  \"sb\", \"Path         :\", path);",
                "// vulnerable line: 461: }",
                "// Line 462: ",
                "// Line 463:         return;",
                "// vulnerable line: 464: }",
                "// Line 465: #endif",
                "// Line 466:     if (!S_ISREG(sce->st.st_mode)) {",
                "// Line 467:         con->http_status = 403;",
                "// Line 468: ",
                "// Line 469:         if (con->conf.log_file_not_found) {",
                "// Line 470:             log_error_write(srv, __FILE__, __LINE__, \"sbsb\",",
                "// Line 471:                     \"not a regular file:\", con->uri.path,",
                "// Line 472:                     \"->\", sce->name);",
                "// vulnerable line: 473: }",
                "// Line 474: ",
                "// Line 475:         return;",
                "// vulnerable line: 476: }",
                "// Line 477: ",
                "// Line 478:     /* mod_compress might set several data directly, don't overwrite them */",
                "// Line 479: ",
                "// Line 480:     /* set response content-type, if not set already */",
                "// Line 481: ",
                "// Line 482:     if (NULL == array_get_element(con->response.headers, \"Content-Type\")) {",
                "// Line 483:         stat_cache_content_type_get(srv, con, path, sce);",
                "// Line 484:         if (buffer_string_is_empty(sce->content_type)) {",
                "// Line 485:             /* we are setting application/octet-stream, but also announce that",
                "// Line 486:              * this header field might change in the seconds few requests",
                "// Line 487:              *",
                "// Line 488:              * This should fix the aggressive caching of FF and the script download",
                "// Line 489:              * seen by the first installations",
                "// Line 490:              */",
                "// Line 491:             response_header_overwrite(srv, con, CONST_STR_LEN(\"Content-Type\"), CONST_STR_LEN(\"application/octet-stream\"));",
                "// Line 492: ",
                "// Line 493:             allow_caching = 0;",
                "// vulnerable line: 494: } else {",
                "// Line 495:             response_header_overwrite(srv, con, CONST_STR_LEN(\"Content-Type\"), CONST_BUF_LEN(sce->content_type));",
                "// vulnerable line: 496: }",
                "// vulnerable line: 497: }",
                "// Line 498: ",
                "// Line 499:     if (con->conf.range_requests) {",
                "// Line 500:         response_header_overwrite(srv, con, CONST_STR_LEN(\"Accept-Ranges\"), CONST_STR_LEN(\"bytes\"));",
                "// vulnerable line: 501: }",
                "// Line 502: ",
                "// Line 503:     if (allow_caching) {",
                "// Line 504:         if (con->etag_flags != 0 && !buffer_string_is_empty(stat_cache_etag_get(sce, con->etag_flags))) {",
                "// Line 505:             if (NULL == array_get_element(con->response.headers, \"ETag\")) {",
                "// Line 506:                 /* generate e-tag */",
                "// Line 507:                 etag_mutate(con->physical.etag, sce->etag);",
                "// Line 508: ",
                "// Line 509:                 response_header_overwrite(srv, con, CONST_STR_LEN(\"ETag\"), CONST_BUF_LEN(con->physical.etag));",
                "// vulnerable line: 510: }",
                "// vulnerable line: 511: }",
                "// Line 512: ",
                "// Line 513:         /* prepare header */",
                "// Line 514:         if (NULL == (ds = (data_string *)array_get_element(con->response.headers, \"Last-Modified\"))) {",
                "// Line 515:             mtime = strftime_cache_get(srv, sce->st.st_mtime);",
                "// Line 516:             response_header_overwrite(srv, con, CONST_STR_LEN(\"Last-Modified\"), CONST_BUF_LEN(mtime));",
                "// vulnerable line: 517: } else {",
                "// Line 518:             mtime = ds->value;",
                "// vulnerable line: 519: }",
                "// Line 520: ",
                "// Line 521:         if (HANDLER_FINISHED == http_response_handle_cachable(srv, con, mtime)) {",
                "// Line 522:             return;",
                "// vulnerable line: 523: }",
                "// vulnerable line: 524: }",
                "// Line 525: ",
                "// vulnerable line: 526: if (con->request.http_range && con->conf.range_requests",
                "// Line 527:         && (200 == con->http_status || 0 == con->http_status)",
                "// Line 528:         && NULL == array_get_element(con->response.headers, \"Content-Encoding\")) {",
                "// Line 529:         int do_range_request = 1;",
                "// Line 530:         /* check if we have a conditional GET */",
                "// Line 531: ",
                "// Line 532:         if (NULL != (ds = (data_string *)array_get_element(con->request.headers, \"If-Range\"))) {",
                "// Line 533:             /* if the value is the same as our ETag, we do a Range-request,",
                "// Line 534:              * otherwise a full 200 */",
                "// Line 535: ",
                "// Line 536:             if (ds->value->ptr[0] == '\"') {",
                "// Line 537:                 /**",
                "// Line 538:                  * client wants a ETag",
                "// Line 539:                  */",
                "// Line 540:                 if (!con->physical.etag) {",
                "// Line 541:                     do_range_request = 0;",
                "// Line 542:                 } else if (!buffer_is_equal(ds->value, con->physical.etag)) {",
                "// Line 543:                     do_range_request = 0;",
                "// vulnerable line: 544: }",
                "// Line 545:             } else if (!mtime) {",
                "// Line 546:                 /**",
                "// Line 547:                  * we don't have a Last-Modified and can match the If-Range:",
                "// Line 548:                  *",
                "// Line 549:                  * sending all",
                "// Line 550:                  */",
                "// Line 551:                 do_range_request = 0;",
                "// Line 552:             } else if (!buffer_is_equal(ds->value, mtime)) {",
                "// Line 553:                 do_range_request = 0;",
                "// vulnerable line: 554: }",
                "// vulnerable line: 555: }",
                "// Line 556: ",
                "// vulnerable line: 557: if (do_range_request) {",
                "// Line 558:             /* content prepared, I'm done */",
                "// Line 559:             con->file_finished = 1;",
                "// Line 560: ",
                "// vulnerable line: 561: if (0 == http_response_parse_range(srv, con, path, sce)) {",
                "// Line 562:                 con->http_status = 206;",
                "// vulnerable line: 563: }",
                "// Line 564:             return;",
                "// vulnerable line: 565: }",
                "// vulnerable line: 566: }",
                "// Line 567: ",
                "// Line 568:     /* if we are still here, prepare body */",
                "// Line 569: ",
                "// Line 570:     /* we add it here for all requests",
                "// Line 571:      * the HEAD request will drop it afterwards again",
                "// Line 572:      */",
                "// Line 573:     if (0 == sce->st.st_size || 0 == http_chunk_append_file(srv, con, path)) {",
                "// Line 574:         con->http_status = 200;",
                "// Line 575:         con->file_finished = 1;",
                "// vulnerable line: 576: } else {",
                "// Line 577:         con->http_status = 403;",
                "// vulnerable line: 578: }",
                "// vulnerable line: 579: }",
                "// Line 580: ",
                "// Line 581: ",
                "// Line 582: static void http_response_xsendfile (server *srv, connection *con, buffer *path, const array *xdocroot) {",
                "// Line 583:     const int status = con->http_status;",
                "// Line 584:     int valid = 1;",
                "// Line 585: ",
                "// Line 586:     /* reset Content-Length, if set by backend",
                "// Line 587:      * Content-Length might later be set to size of X-Sendfile static file,",
                "// Line 588:      * determined by open(), fstat() to reduces race conditions if the file",
                "// Line 589:      * is modified between stat() (stat_cache_get_entry()) and open(). */",
                "// Line 590:     if (con->parsed_response & HTTP_CONTENT_LENGTH) {",
                "// Line 591:         data_string *ds = (data_string *) array_get_element(con->response.headers, \"Content-Length\");",
                "// Line 592:         if (ds) buffer_reset(ds->value);",
                "// Line 593:         con->parsed_response &= ~HTTP_CONTENT_LENGTH;",
                "// Line 594:         con->response.content_length = -1;",
                "// vulnerable line: 595: }",
                "// Line 596: ",
                "// Line 597:     buffer_urldecode_path(path);",
                "// Line 598:     buffer_path_simplify(path, path);",
                "// Line 599:     if (con->conf.force_lowercase_filenames) {",
                "// Line 600:         buffer_to_lower(path);",
                "// vulnerable line: 601: }",
                "// Line 602: ",
                "// Line 603:     /* check that path is under xdocroot(s)",
                "// Line 604:      * - xdocroot should have trailing slash appended at config time",
                "// Line 605:      * - con->conf.force_lowercase_filenames is not a server-wide setting,",
                "// Line 606:      *   and so can not be definitively applied to xdocroot at config time*/",
                "// Line 607:     if (xdocroot->used) {",
                "// Line 608:         size_t i, xlen = buffer_string_length(path);",
                "// Line 609:         for (i = 0; i < xdocroot->used; ++i) {",
                "// Line 610:             data_string *ds = (data_string *)xdocroot->data[i];",
                "// Line 611:             size_t dlen = buffer_string_length(ds->value);",
                "// Line 612:             if (dlen <= xlen",
                "// Line 613:                 && (!con->conf.force_lowercase_filenames",
                "// Line 614:                 ? 0 == memcmp(path->ptr, ds->value->ptr, dlen)",
                "// Line 615:                 : 0 == strncasecmp(path->ptr, ds->value->ptr, dlen))) {",
                "// Line 616:                 break;",
                "// vulnerable line: 617: }",
                "// vulnerable line: 618: }",
                "// Line 619:         if (i == xdocroot->used) {",
                "// Line 620:             log_error_write(srv, __FILE__, __LINE__, \"SBs\",",
                "// Line 621:                     \"X-Sendfile (\", path,",
                "// Line 622:                     \") not under configured x-sendfile-docroot(s)\");",
                "// Line 623:             con->http_status = 403;",
                "// Line 624:             valid = 0;",
                "// vulnerable line: 625: }",
                "// vulnerable line: 626: }",
                "// Line 627: ",
                "// Line 628:     if (valid) http_response_send_file(srv, con, path);",
                "// Line 629: ",
                "// Line 630:     if (con->http_status >= 400 && status < 300) {",
                "// Line 631:         con->mode = DIRECT;",
                "// Line 632:     } else if (0 != status && 200 != status) {",
                "// Line 633:         con->http_status = status;",
                "// vulnerable line: 634: }",
                "// vulnerable line: 635: }",
                "// Line 636: ",
                "// Line 637: ",
                "// Line 638: static void http_response_xsendfile2(server *srv, connection *con, const buffer *value, const array *xdocroot) {",
                "// Line 639:     const char *pos = value->ptr;",
                "// Line 640:     buffer *b = srv->tmp_buf;",
                "// Line 641:     const int status = con->http_status;",
                "// Line 642: ",
                "// Line 643:     /* reset Content-Length, if set by backend */",
                "// Line 644:     if (con->parsed_response & HTTP_CONTENT_LENGTH) {",
                "// Line 645:         data_string *ds = (data_string *)",
                "// Line 646:           array_get_element(con->response.headers, \"Content-Length\");",
                "// Line 647:         if (ds) buffer_reset(ds->value);",
                "// Line 648:         con->parsed_response &= ~HTTP_CONTENT_LENGTH;",
                "// Line 649:         con->response.content_length = -1;",
                "// vulnerable line: 650: }",
                "// Line 651: ",
                "// Line 652:     while (*pos) {",
                "// Line 653:         const char *filename, *range;",
                "// Line 654:         stat_cache_entry *sce;",
                "// Line 655:         off_t begin_range, end_range, range_len;",
                "// Line 656: ",
                "// Line 657:         while (' ' == *pos) pos++;",
                "// Line 658:         if (!*pos) break;",
                "// Line 659: ",
                "// Line 660:         filename = pos;",
                "// Line 661:         if (NULL == (range = strchr(pos, ' '))) {",
                "// Line 662:             /* missing range */",
                "// Line 663:             log_error_write(srv, __FILE__, __LINE__, \"ss\",",
                "// Line 664:                             \"Couldn't find range after filename:\", filename);",
                "// Line 665:             con->http_status = 502;",
                "// Line 666:             break;",
                "// vulnerable line: 667: }",
                "// Line 668:         buffer_copy_string_len(b, filename, range - filename);",
                "// Line 669: ",
                "// Line 670:         /* find end of range */",
                "// Line 671:         for (pos = ++range; *pos && *pos != ' ' && *pos != ','; pos++) ;",
                "// Line 672: ",
                "// Line 673:         buffer_urldecode_path(b);",
                "// Line 674:         buffer_path_simplify(b, b);",
                "// Line 675:         if (con->conf.force_lowercase_filenames) {",
                "// Line 676:             buffer_to_lower(b);",
                "// vulnerable line: 677: }",
                "// Line 678:         if (xdocroot->used) {",
                "// Line 679:             size_t i, xlen = buffer_string_length(b);",
                "// Line 680:             for (i = 0; i < xdocroot->used; ++i) {",
                "// Line 681:                 data_string *ds = (data_string *)xdocroot->data[i];",
                "// Line 682:                 size_t dlen = buffer_string_length(ds->value);",
                "// Line 683:                 if (dlen <= xlen",
                "// Line 684:                     && (!con->conf.force_lowercase_filenames",
                "// Line 685:                     ? 0 == memcmp(b->ptr, ds->value->ptr, dlen)",
                "// Line 686:                     : 0 == strncasecmp(b->ptr, ds->value->ptr, dlen))) {",
                "// Line 687:                     break;",
                "// vulnerable line: 688: }",
                "// vulnerable line: 689: }",
                "// Line 690:             if (i == xdocroot->used) {",
                "// Line 691:                 log_error_write(srv, __FILE__, __LINE__, \"SBs\",",
                "// Line 692:                                 \"X-Sendfile2 (\", b,",
                "// Line 693:                                 \") not under configured x-sendfile-docroot(s)\");",
                "// Line 694:                 con->http_status = 403;",
                "// Line 695:                 break;",
                "// vulnerable line: 696: }",
                "// vulnerable line: 697: }",
                "// Line 698: ",
                "// Line 699:         if (HANDLER_ERROR == stat_cache_get_entry(srv, con, b, &sce)) {",
                "// Line 700:             log_error_write(srv, __FILE__, __LINE__, \"sb\", \"send-file error: \"",
                "// Line 701:                             \"couldn't get stat_cache entry for X-Sendfile2:\",",
                "// Line 702:                             b);",
                "// Line 703:             con->http_status = 404;",
                "// Line 704:             break;",
                "// Line 705:         } else if (!S_ISREG(sce->st.st_mode)) {",
                "// Line 706:             log_error_write(srv, __FILE__, __LINE__, \"sb\",",
                "// Line 707:                             \"send-file error: wrong filetype for X-Sendfile2:\",",
                "// Line 708:                             b);",
                "// Line 709:             con->http_status = 502;",
                "// Line 710:             break;",
                "// vulnerable line: 711: }",
                "// Line 712:         /* found the file */",
                "// Line 713: ",
                "// Line 714:         /* parse range */",
                "// Line 715:         end_range = sce->st.st_size - 1;",
                "// Line 716:         {",
                "// Line 717:             char *rpos = NULL;",
                "// Line 718:             errno = 0;",
                "// Line 719:             begin_range = strtoll(range, &rpos, 10);",
                "// Line 720:             if (errno != 0 || begin_range < 0 || rpos == range)",
                "// Line 721:                 goto range_failed;",
                "// Line 722:             if ('-' != *rpos++) goto range_failed;",
                "// Line 723:             if (rpos != pos) {",
                "// Line 724:                 range = rpos;",
                "// Line 725:                 end_range = strtoll(range, &rpos, 10);",
                "// Line 726:                 if (errno != 0 || end_range < 0 || rpos == range)",
                "// Line 727:                     goto range_failed;",
                "// vulnerable line: 728: }",
                "// Line 729:             if (rpos != pos) goto range_failed;",
                "// Line 730: ",
                "// Line 731:             goto range_success;",
                "// Line 732: ",
                "// Line 733: range_failed:",
                "// Line 734:             log_error_write(srv, __FILE__, __LINE__, \"ss\",",
                "// Line 735:                             \"Couldn't decode range after filename:\", filename);",
                "// Line 736:             con->http_status = 502;",
                "// Line 737:             break;",
                "// Line 738: ",
                "// Line 739: range_success: ;",
                "// vulnerable line: 740: }",
                "// Line 741: ",
                "// Line 742:         /* no parameters accepted */",
                "// Line 743: ",
                "// Line 744:         while (*pos == ' ') pos++;",
                "// Line 745:         if (*pos != '\u0000' && *pos != ',') {",
                "// Line 746:             con->http_status = 502;",
                "// Line 747:             break;",
                "// vulnerable line: 748: }",
                "// Line 749: ",
                "// Line 750:         range_len = end_range - begin_range + 1;",
                "// Line 751:         if (range_len < 0) {",
                "// Line 752:             con->http_status = 502;",
                "// Line 753:             break;",
                "// vulnerable line: 754: }",
                "// Line 755:         if (range_len != 0) {",
                "// Line 756:             if (0 != http_chunk_append_file_range(srv, con, b,",
                "// Line 757:                                                   begin_range, range_len)) {",
                "// Line 758:                 con->http_status = 502;",
                "// Line 759:                 break;",
                "// vulnerable line: 760: }",
                "// vulnerable line: 761: }",
                "// Line 762: ",
                "// Line 763:         if (*pos == ',') pos++;",
                "// vulnerable line: 764: }",
                "// Line 765: ",
                "// Line 766:     if (con->http_status >= 400 && status < 300) {",
                "// Line 767:         con->mode = DIRECT;",
                "// Line 768:     } else if (0 != status && 200 != status) {",
                "// Line 769:         con->http_status = status;",
                "// vulnerable line: 770: }",
                "// vulnerable line: 771: }",
                "// Line 772: ",
                "// Line 773: ",
                "// Line 774: void http_response_backend_error (server *srv, connection *con) {",
                "// Line 775:     UNUSED(srv);",
                "// Line 776:     if (con->file_started) {",
                "// Line 777:         /*(response might have been already started, kill the connection)*/",
                "// Line 778:         /*(mode == DIRECT to avoid later call to http_response_backend_done())*/",
                "// Line 779:         con->mode = DIRECT;  /*(avoid sending final chunked block)*/",
                "// Line 780:         con->keep_alive = 0; /*(no keep-alive; final chunked block not sent)*/",
                "// Line 781:         con->file_finished = 1;",
                "// Line 782:     } /*(else error status set later by http_response_backend_done())*/",
                "// vulnerable line: 783: }",
                "// Line 784: ",
                "// Line 785: void http_response_backend_done (server *srv, connection *con) {",
                "// Line 786:     /* (not CON_STATE_ERROR and not CON_STATE_RESPONSE_END,",
                "// Line 787:      *  i.e. not called from handle_connection_close or connection_reset",
                "// Line 788:      *  hooks, except maybe from errdoc handler, which later resets state)*/",
                "// Line 789:     switch (con->state) {",
                "// Line 790:     case CON_STATE_HANDLE_REQUEST:",
                "// Line 791:     case CON_STATE_READ_POST:",
                "// Line 792:         if (!con->file_started) {",
                "// Line 793:             /* Send an error if we haven't sent any data yet */",
                "// Line 794:             con->http_status = 500;",
                "// Line 795:             con->mode = DIRECT;",
                "// Line 796:             break;",
                "// Line 797:         } /* else fall through */",
                "// Line 798:     case CON_STATE_WRITE:",
                "// Line 799:         if (!con->file_finished) {",
                "// Line 800:             http_chunk_close(srv, con);",
                "// Line 801:             con->file_finished = 1;",
                "// vulnerable line: 802: }",
                "// Line 803:     default:",
                "// Line 804:         break;",
                "// vulnerable line: 805: }",
                "// vulnerable line: 806: }",
                "// Line 807: ",
                "// Line 808: ",
                "// Line 809: void http_response_upgrade_read_body_unknown(server *srv, connection *con) {",
                "// Line 810:     /* act as transparent proxy */",
                "// Line 811:     UNUSED(srv);",
                "// Line 812:     if (!(con->conf.stream_request_body & FDEVENT_STREAM_REQUEST))",
                "// Line 813:         con->conf.stream_request_body |=",
                "// Line 814:           (FDEVENT_STREAM_REQUEST_BUFMIN | FDEVENT_STREAM_REQUEST);",
                "// Line 815:     if (!(con->conf.stream_response_body & FDEVENT_STREAM_RESPONSE))",
                "// Line 816:         con->conf.stream_response_body |=",
                "// Line 817:           (FDEVENT_STREAM_RESPONSE_BUFMIN | FDEVENT_STREAM_RESPONSE);",
                "// Line 818:     con->conf.stream_request_body |= FDEVENT_STREAM_REQUEST_POLLIN;",
                "// Line 819:     con->request.content_length = -2;",
                "// Line 820:     con->keep_alive = 0;",
                "// vulnerable line: 821: }",
                "// Line 822: ",
                "// Line 823: ",
                "// Line 824: static handler_t http_response_process_local_redir(server *srv, connection *con, size_t blen) {",
                "// Line 825:     /* [RFC3875] The Common Gateway Interface (CGI) Version 1.1",
                "// Line 826:      * [RFC3875] 6.2.2 Local Redirect Response",
                "// Line 827:      *",
                "// Line 828:      *    The CGI script can return a URI path and query-string",
                "// Line 829:      *    ('local-pathquery') for a local resource in a Location header field.",
                "// Line 830:      *    This indicates to the server that it should reprocess the request",
                "// Line 831:      *    using the path specified.",
                "// Line 858:         && 0 == blen",
                "// Line 859:         && !(con->parsed_response & HTTP_STATUS) /*no \"Status\" or NPH response*/",
                "// Line 860:         && 1 == con->response.headers->used) {",
                "// Line 861:         if (++con->loops_per_request > 5) {",
                "// Line 862:             log_error_write(srv, __FILE__, __LINE__, \"sb\",",
                "// Line 863:                             \"too many internal loops while processing request:\",",
                "// Line 864:                             con->request.orig_uri);",
                "// Line 865:             con->http_status = 500; /* Internal Server Error */",
                "// Line 866:             con->mode = DIRECT;",
                "// Line 867:             return HANDLER_FINISHED;",
                "// vulnerable line: 868: }",
                "// Line 869: ",
                "// Line 870:         buffer_copy_buffer(con->request.uri, ds->value);",
                "// Line 871: ",
                "// Line 872:         if (con->request.content_length) {",
                "// Line 873:             if (con->request.content_length",
                "// Line 874:                 != con->request_content_queue->bytes_in) {",
                "// Line 875:                 con->keep_alive = 0;",
                "// vulnerable line: 876: }",
                "// Line 877:             con->request.content_length = 0;",
                "// Line 878:             chunkqueue_reset(con->request_content_queue);",
                "// vulnerable line: 879: }",
                "// Line 880: ",
                "// Line 881:         if (con->http_status != 307 && con->http_status != 308) {",
                "// Line 882:             /* Note: request body (if any) sent to initial dynamic handler",
                "// Line 883:              * and is not available to the internal redirect */",
                "// Line 884:             con->request.http_method = HTTP_METHOD_GET;",
                "// vulnerable line: 885: }",
                "// Line 886: ",
                "// Line 887:         /*(caller must reset request as follows)*/",
                "// Line 888:         /*connection_response_reset(srv, con);*/ /*(sets con->http_status = 0)*/",
                "// Line 889:         /*plugins_call_connection_reset(srv, con);*/",
                "// Line 890: ",
                "// Line 891:         return HANDLER_COMEBACK;",
                "// vulnerable line: 892: }",
                "// Line 893: ",
                "// Line 894:     return HANDLER_GO_ON;",
                "// vulnerable line: 895: }",
                "// Line 896: ",
                "// Line 897: ",
                "// Line 898: static int http_response_process_headers(server *srv, connection *con, http_response_opts *opts, buffer *hdrs) {",
                "// Line 899:     char *ns;",
                "// Line 900:     const char *s;",
                "// Line 901:     int line = 0;",
                "// Line 902: ",
                "// Line 903:     for (s = hdrs->ptr; NULL != (ns = strchr(s, '",
                "// Line 904: ')); s = ns + 1, ++line) {",
                "// Line 905:         const char *key, *value;",
                "// Line 914: ",
                "// Line 915:         if (0 == line && 0 == strncmp(s, \"HTTP/1.\", 7)) {",
                "// Line 916:             /* non-parsed headers ... we parse them anyway */",
                "// Line 917:             if ((s[7] == '1' || s[7] == '0') && s[8] == ' ') {",
                "// Line 918:                 /* after the space should be a status code for us */",
                "// Line 919:                 int status = strtol(s+9, NULL, 10);",
                "// Line 920:                 if (status >= 100 && status < 1000) {",
                "// Line 921:                     con->parsed_response |= HTTP_STATUS;",
                "// Line 922:                     con->http_status = status;",
                "// Line 923:                 } /* else we expected 3 digits and didn't get them */",
                "// vulnerable line: 924: }",
                "// Line 925: ",
                "// Line 926:             if (0 == con->http_status) {",
                "// Line 927:                 log_error_write(srv, __FILE__, __LINE__, \"ss\",",
                "// Line 928:                                 \"invalid HTTP status line:\", s);",
                "// Line 929:                 con->http_status = 502; /* Bad Gateway */",
                "// Line 930:                 con->mode = DIRECT;",
                "// Line 931:                 return -1;",
                "// vulnerable line: 932: }",
                "// Line 933: ",
                "// Line 934:             continue;",
                "// vulnerable line: 935: }",
                "// Line 936: ",
                "// Line 937:         /* parse the headers */",
                "// Line 938:         key = s;",
                "// Line 939:         if (NULL == (value = strchr(s, ':'))) {",
                "// Line 940:             /* we expect: \"<key>: <value>",
                "// Line 941: \" */",
                "// Line 942:             continue;",
                "// vulnerable line: 943: }",
                "// Line 944: ",
                "// Line 945:         key_len = value - key;",
                "// Line 946:         do { ++value; } while (*value == ' ' || *value == '    '); /* skip LWS */",
                "// Line 947: ",
                "// Line 948:         if (opts->authorizer) {",
                "// Line 949:             if (0 == con->http_status || 200 == con->http_status) {",
                "// Line 950:                 if (key_len == 6 && 0 == strncasecmp(key, \"Status\", key_len)) {",
                "// Line 951:                     int status = strtol(value, NULL, 10);",
                "// Line 952:                     if (status >= 100 && status < 1000) {",
                "// Line 953:                         con->http_status = status;",
                "// vulnerable line: 954: } else {",
                "// Line 955:                         con->http_status = 502; /* Bad Gateway */",
                "// Line 956:                         break;",
                "// vulnerable line: 957: }",
                "// Line 958:                 } else if (key_len > 9",
                "// Line 959:                            && 0==strncasecmp(key, CONST_STR_LEN(\"Variable-\"))) {",
                "// Line 960:                     ds = (data_string *)",
                "// Line 961:                       array_get_unused_element(con->environment, TYPE_STRING);",
                "// Line 962:                     if (NULL == ds) ds = data_string_init();",
                "// Line 963:                     buffer_copy_string_len(ds->key, key + 9, key_len - 9);",
                "// Line 964:                     buffer_copy_string(ds->value, value);",
                "// Line 965: ",
                "// Line 966:                     array_insert_unique(con->environment, (data_unset *)ds);",
                "// vulnerable line: 967: }",
                "// Line 968:                 continue;",
                "// vulnerable line: 969: }",
                "// vulnerable line: 970: }",
                "// Line 971: ",
                "// Line 972:         switch(key_len) {",
                "// Line 973:         case 4:",
                "// Line 974:             if (0 == strncasecmp(key, \"Date\", key_len)) {",
                "// Line 975:                 con->parsed_response |= HTTP_DATE;",
                "// vulnerable line: 976: }",
                "// Line 977:             break;",
                "// Line 978:         case 6:",
                "// Line 979:             if (0 == strncasecmp(key, \"Status\", key_len)) {",
                "// Line 980:                 int status;",
                "// Line 981:                 if (opts->backend == BACKEND_PROXY) break; /*(pass w/o parse)*/",
                "// Line 982:                 status = strtol(value, NULL, 10);",
                "// Line 983:                 if (status >= 100 && status < 1000) {",
                "// Line 984:                     con->http_status = status;",
                "// Line 985:                     con->parsed_response |= HTTP_STATUS;",
                "// vulnerable line: 986: } else {",
                "// Line 987:                     con->http_status = 502;",
                "// Line 988:                     con->mode = DIRECT;",
                "// vulnerable line: 989: }",
                "// Line 990:                 continue; /* do not send Status to client */",
                "// vulnerable line: 991: }",
                "// Line 992:             break;",
                "// Line 993:         case 7:",
                "// Line 994:             if (0 == strncasecmp(key, \"Upgrade\", key_len)) {",
                "// Line 995:                 /*(technically, should also verify Connection: upgrade)*/",
                "// Line 996:                 /*(flag only for mod_proxy and mod_cgi (for now))*/",
                "// Line 997:                 if (opts->backend == BACKEND_PROXY",
                "// Line 998:                     || opts->backend == BACKEND_CGI) {",
                "// Line 999:                     con->parsed_response |= HTTP_UPGRADE;",
                "// vulnerable line: 1000: }",
                "// vulnerable line: 1001: }",
                "// Line 1002:             break;",
                "// Line 1003:         case 8:",
                "// Line 1004:             if (0 == strncasecmp(key, \"Location\", key_len)) {",
                "// Line 1005:                 con->parsed_response |= HTTP_LOCATION;",
                "// vulnerable line: 1006: }",
                "// Line 1007:             break;",
                "// Line 1008:         case 10:",
                "// Line 1009:             if (0 == strncasecmp(key, \"Connection\", key_len)) {",
                "// Line 1010:                 if (opts->backend == BACKEND_PROXY) continue;",
                "// Line 1011:                 con->response.keep_alive =",
                "// Line 1012:                   (0 == strcasecmp(value, \"Keep-Alive\")) ? 1 : 0;",
                "// Line 1013:                 con->parsed_response |= HTTP_CONNECTION;",
                "// vulnerable line: 1014: }",
                "// Line 1015:             else if (0 == strncasecmp(key, \"Set-Cookie\", key_len)) {",
                "// Line 1016:                 con->parsed_response |= HTTP_SET_COOKIE;",
                "// vulnerable line: 1017: }",
                "// Line 1018:             break;",
                "// Line 1019:         case 14:",
                "// Line 1020:             if (0 == strncasecmp(key, \"Content-Length\", key_len)) {",
                "// Line 1021:                 con->response.content_length = strtoul(value, NULL, 10);",
                "// Line 1022:                 con->parsed_response |= HTTP_CONTENT_LENGTH;",
                "// vulnerable line: 1023: }",
                "// Line 1024:             break;",
                "// Line 1025:         case 16:",
                "// Line 1026:             if (0 == strncasecmp(key, \"Content-Location\", key_len)) {",
                "// Line 1027:                 con->parsed_response |= HTTP_CONTENT_LOCATION;",
                "// vulnerable line: 1028: }",
                "// Line 1029:             break;",
                "// Line 1030:         case 17:",
                "// Line 1031:             if (0 == strncasecmp(key, \"Transfer-Encoding\", key_len)) {",
                "// Line 1032:                 if (opts->backend == BACKEND_PROXY) continue;",
                "// Line 1033:                 con->parsed_response |= HTTP_TRANSFER_ENCODING;",
                "// vulnerable line: 1034: }",
                "// Line 1035:             break;",
                "// Line 1036:         default:",
                "// Line 1037:             break;",
                "// vulnerable line: 1038: }",
                "// Line 1039: ",
                "// Line 1040:         ds = (data_string *)",
                "// Line 1041:           array_get_unused_element(con->response.headers, TYPE_STRING);",
                "// Line 1042:         if (NULL == ds) ds = data_response_init();",
                "// Line 1043:         buffer_copy_string_len(ds->key, key, key_len);",
                "// Line 1044:         buffer_copy_string(ds->value, value);",
                "// Line 1045: ",
                "// Line 1046:         array_insert_unique(con->response.headers, (data_unset *)ds);",
                "// vulnerable line: 1047: }",
                "// Line 1048: ",
                "// Line 1049:     /* CGI/1.1 rev 03 - 7.2.1.2 */",
                "// Line 1050:     /* (proxy requires Status-Line, so never true for proxy)*/",
                "// Line 1051:     if ((con->parsed_response & HTTP_LOCATION) &&",
                "// Line 1052:         !(con->parsed_response & HTTP_STATUS)) {",
                "// Line 1053:         con->http_status = 302;",
                "// vulnerable line: 1054: }",
                "// Line 1055: ",
                "// Line 1056:     return 0;",
                "// vulnerable line: 1057: }",
                "// Line 1058: ",
                "// Line 1059: ",
                "// Line 1060: handler_t http_response_parse_headers(server *srv, connection *con, http_response_opts *opts, buffer *b) {",
                "// Line 1061:     /**",
                "// Line 1062:      * possible formats of response headers:",
                "// Line 1063:      *",
                "// Line 1064:      * proxy or NPH (non-parsed headers):",
                "// Line 1065:      *",
                "// Line 1066:      *   HTTP/1.0 200 Ok",
                "// Line 1067: ",
                "// Line 1114: (",
                "// Line 1115: )?",
                "// Line 1116:  sequence",
                "// Line 1117:              */",
                "// Line 1118:             if (last_eol > 0 &&",
                "// Line 1119:                 ((i - last_eol == 1) ||",
                "// Line 1120:                  (i - last_eol == 2 && b->ptr[i - 1] == '",
                "// Line 1121: '))) {",
                "// Line 1122:                 is_header_end = 1;",
                "// Line 1123:                 break;",
                "// vulnerable line: 1124: }",
                "// Line 1125: ",
                "// Line 1126:             last_eol = i;",
                "// vulnerable line: 1127: }",
                "// Line 1128:     } else if (i == header_len) { /* (no newline yet; partial header line?) */",
                "// Line 1129:     } else if (opts->backend == BACKEND_CGI) {",
                "// Line 1130:         /* no HTTP headers, but a body (special-case for CGI compat) */",
                "// Line 1131:         /* no colon found; does not appear to be HTTP headers */",
                "// Line 1132:         if (0 != http_chunk_append_buffer(srv, con, b)) {",
                "// Line 1133:             return HANDLER_ERROR;",
                "// vulnerable line: 1134: }",
                "// Line 1135:         con->http_status = 200; /* OK */",
                "// Line 1136:         con->file_started = 1;",
                "// Line 1137:         return HANDLER_GO_ON;",
                "// vulnerable line: 1138: } else {",
                "// Line 1139:         /* invalid response headers */",
                "// Line 1140:         con->http_status = 502; /* Bad Gateway */",
                "// Line 1141:         con->mode = DIRECT;",
                "// Line 1142:         return HANDLER_FINISHED;",
                "// vulnerable line: 1143: }",
                "// Line 1144: ",
                "// Line 1145:     if (!is_header_end) {",
                "// Line 1146:         /*(reuse MAX_HTTP_REQUEST_HEADER as max size",
                "// Line 1147:          * for response headers from backends)*/",
                "// Line 1148:         if (header_len > MAX_HTTP_REQUEST_HEADER) {",
                "// Line 1149:             log_error_write(srv, __FILE__, __LINE__, \"sb\",",
                "// Line 1150:                             \"response headers too large for\", con->uri.path);",
                "// Line 1151:             con->http_status = 502; /* Bad Gateway */",
                "// Line 1152:             con->mode = DIRECT;",
                "// Line 1153:             return HANDLER_FINISHED;",
                "// vulnerable line: 1154: }",
                "// Line 1155:         return HANDLER_GO_ON;",
                "// vulnerable line: 1156: }",
                "// Line 1157: ",
                "// Line 1158:     /* the body starts after the EOL */",
                "// Line 1159:     bstart = b->ptr + (i + 1);",
                "// Line 1160:     blen = header_len - (i + 1);",
                "// Line 1161: ",
                "// Line 1162:     /* strip the last ",
                "// Line 1163: ?",
                "// Line 1164:  */",
                "// Line 1165:     if (i > 0 && (b->ptr[i - 1] == '",
                "// Line 1166: ')) {",
                "// Line 1167:         i--;",
                "// vulnerable line: 1168: }",
                "// Line 1169: ",
                "// Line 1170:     buffer_string_set_length(b, i);",
                "// Line 1171: ",
                "// Line 1172:     if (opts->backend == BACKEND_PROXY && !is_nph) {",
                "// Line 1173:         /* invalid response Status-Line from HTTP proxy */",
                "// Line 1174:         con->http_status = 502; /* Bad Gateway */",
                "// Line 1175:         con->mode = DIRECT;",
                "// Line 1176:         return HANDLER_FINISHED;",
                "// vulnerable line: 1177: }",
                "// Line 1178: ",
                "// Line 1179:     if (0 != http_response_process_headers(srv, con, opts, b)) {",
                "// Line 1180:         return HANDLER_ERROR;",
                "// vulnerable line: 1181: }",
                "// Line 1182: ",
                "// Line 1183:     con->file_started = 1;",
                "// Line 1184: ",
                "// Line 1185:     if (opts->authorizer",
                "// Line 1186:         && (con->http_status == 0 || con->http_status == 200)) {",
                "// Line 1187:         return HANDLER_GO_ON;",
                "// vulnerable line: 1188: }",
                "// Line 1189: ",
                "// Line 1190:     if (con->mode == DIRECT) {",
                "// Line 1191:         return HANDLER_FINISHED;",
                "// vulnerable line: 1192: }",
                "// Line 1193: ",
                "// Line 1194:     if (opts->local_redir && con->http_status >= 300 && con->http_status < 400){",
                "// Line 1195:         /*(con->parsed_response & HTTP_LOCATION)*/",
                "// Line 1196:         handler_t rc = http_response_process_local_redir(srv, con, blen);",
                "// Line 1197:         if (con->mode == DIRECT) con->file_started = 0;",
                "// Line 1198:         if (rc != HANDLER_GO_ON) return rc;",
                "// vulnerable line: 1199: }",
                "// Line 1200: ",
                "// Line 1201:     if (opts->xsendfile_allow) {",
                "// Line 1202:         data_string *ds;",
                "// Line 1203:         /* X-Sendfile2 is deprecated; historical for fastcgi */",
                "// Line 1204:         if (opts->backend == BACKEND_FASTCGI",
                "// Line 1205:             && NULL != (ds = (data_string *) array_get_element(con->response.headers, \"X-Sendfile2\"))) {",
                "// Line 1206:             http_response_xsendfile2(srv, con, ds->value, opts->xsendfile_docroot);",
                "// Line 1207:             buffer_reset(ds->value); /*(do not send to client)*/",
                "// Line 1208:             if (con->mode == DIRECT) con->file_started = 0;",
                "// Line 1209:             return HANDLER_FINISHED;",
                "// Line 1210:         } else if (NULL != (ds = (data_string *) array_get_element(con->response.headers, \"X-Sendfile\"))",
                "// Line 1211:                    || (opts->backend == BACKEND_FASTCGI /* X-LIGHTTPD-send-file is deprecated; historical for fastcgi */",
                "// Line 1212:                        && NULL != (ds = (data_string *) array_get_element(con->response.headers, \"X-LIGHTTPD-send-file\")))) {",
                "// Line 1213:             http_response_xsendfile(srv, con, ds->value, opts->xsendfile_docroot);",
                "// Line 1214:             buffer_reset(ds->value); /*(do not send to client)*/",
                "// Line 1215:             if (con->mode == DIRECT) con->file_started = 0;",
                "// Line 1216:             return HANDLER_FINISHED;",
                "// vulnerable line: 1217: }",
                "// vulnerable line: 1218: }",
                "// Line 1219: ",
                "// Line 1220:     if (blen > 0) {",
                "// Line 1221:         if (0 != http_chunk_append_mem(srv, con, bstart, blen)) {",
                "// Line 1222:             return HANDLER_ERROR;",
                "// vulnerable line: 1223: }",
                "// vulnerable line: 1224: }",
                "// Line 1225: ",
                "// Line 1226:     /* (callback for response headers complete) */",
                "// Line 1227:     return (opts->headers) ? opts->headers(srv, con, opts) : HANDLER_GO_ON;",
                "// vulnerable line: 1228: }",
                "// Line 1229: ",
                "// Line 1230: ",
                "// Line 1231: handler_t http_response_read(server *srv, connection *con, http_response_opts *opts, buffer *b, int fd, int *fde_ndx) {",
                "// Line 1232:     while (1) {",
                "// Line 1233:         ssize_t n;",
                "// Line 1234:         size_t avail = buffer_string_space(b);",
                "// Line 1235:         unsigned int toread = 4096;",
                "// Line 1236: ",
                "// Line 1237:         if (0 == fdevent_ioctl_fionread(fd, opts->fdfmt, (int *)&toread)) {",
                "// Line 1238:             if (avail < toread) {",
                "// Line 1239:                 if (toread < 4096)",
                "// Line 1240:                     toread = 4096;",
                "// Line 1241:                 else if (toread > MAX_READ_LIMIT)",
                "// Line 1242:                     toread = MAX_READ_LIMIT;",
                "// vulnerable line: 1243: }",
                "// Line 1244:             else if (0 == toread) {",
                "// Line 1245:               #if 0",
                "// Line 1246:                 return (fdevent_event_get_interest(srv->ev, fd) & FDEVENT_IN)",
                "// Line 1247:                   ? HANDLER_FINISHED  /* read finished */",
                "// Line 1248:                   : HANDLER_GO_ON;    /* optimistic read; data not ready */",
                "// Line 1249:               #else",
                "// Line 1250:                 if (!(fdevent_event_get_interest(srv->ev, fd) & FDEVENT_IN)) {",
                "// Line 1251:                     if (!(con->conf.stream_response_body",
                "// Line 1252:                           & FDEVENT_STREAM_RESPONSE_POLLRDHUP))",
                "// Line 1253:                         return HANDLER_GO_ON;/*optimistic read; data not ready*/",
                "// vulnerable line: 1254: }",
                "// Line 1255:                 toread = 4096; /* let read() below indicate if EOF or EAGAIN */",
                "// Line 1256:               #endif",
                "// vulnerable line: 1257: }",
                "// vulnerable line: 1258: }",
                "// Line 1259: ",
                "// Line 1260:         if (con->conf.stream_response_body & FDEVENT_STREAM_RESPONSE_BUFMIN) {",
                "// Line 1261:             off_t cqlen = chunkqueue_length(con->write_queue);",
                "// Line 1262:             if (cqlen + (off_t)toread > 65536 - 4096) {",
                "// Line 1263:                 if (!con->is_writable) {",
                "// Line 1264:                     /*(defer removal of FDEVENT_IN interest since",
                "// Line 1265:                      * connection_state_machine() might be able to send data",
                "// Line 1266:                      * immediately, unless !con->is_writable, where",
                "// Line 1267:                      * connection_state_machine() might not loop back to call",
                "// Line 1268:                      * mod_proxy_handle_subrequest())*/",
                "// Line 1269:                     fdevent_event_clr(srv->ev, fde_ndx, fd, FDEVENT_IN);",
                "// vulnerable line: 1270: }",
                "// Line 1271:                 if (cqlen >= 65536-1) return HANDLER_GO_ON;",
                "// Line 1272:                 toread = 65536 - 1 - (unsigned int)cqlen;",
                "// Line 1273:                 /* Note: heuristic is fuzzy in that it limits how much to read",
                "// Line 1274:                  * from backend based on how much is pending to write to client.",
                "// Line 1275:                  * Modules where data from backend is framed (e.g. FastCGI) may",
                "// Line 1276:                  * want to limit how much is buffered from backend while waiting",
                "// Line 1277:                  * for a complete data frame or data packet from backend. */",
                "// vulnerable line: 1278: }",
                "// vulnerable line: 1279: }",
                "// Line 1280: ",
                "// Line 1281:         if (avail < toread) {",
                "// Line 1282:             /*(add avail+toread to reduce allocations when ioctl EOPNOTSUPP)*/",
                "// Line 1283:             avail = avail ? avail - 1 + toread : toread;",
                "// Line 1284:             buffer_string_prepare_append(b, avail);",
                "// vulnerable line: 1285: }",
                "// Line 1286: ",
                "// Line 1287:         n = read(fd, b->ptr+buffer_string_length(b), avail);",
                "// Line 1288: ",
                "// Line 1289:         if (n < 0) {",
                "// Line 1290:             switch (errno) {",
                "// Line 1291:               case EAGAIN:",
                "// Line 1292:              #ifdef EWOULDBLOCK",
                "// Line 1293:              #if EWOULDBLOCK != EAGAIN",
                "// Line 1294:               case EWOULDBLOCK:",
                "// Line 1295:              #endif",
                "// Line 1296:              #endif",
                "// Line 1297:               case EINTR:",
                "// Line 1298:                 return HANDLER_GO_ON;",
                "// Line 1299:               default:",
                "// Line 1300:                 log_error_write(srv, __FILE__, __LINE__, \"ssdd\",",
                "// Line 1301:                                 \"read():\", strerror(errno), con->fd, fd);",
                "// Line 1302:                 return HANDLER_ERROR;",
                "// vulnerable line: 1303: }",
                "// vulnerable line: 1304: }",
                "// Line 1305: ",
                "// Line 1306:         buffer_commit(b, (size_t)n);",
                "// Line 1307: ",
                "// Line 1308:         if (NULL != opts->parse) {",
                "// Line 1309:             handler_t rc = opts->parse(srv, con, opts, b, (size_t)n);",
                "// Line 1310:             if (rc != HANDLER_GO_ON) return rc;",
                "// Line 1311:         } else if (0 == n) {",
                "// Line 1312:             /* note: no further data is sent to backend after read EOF on socket",
                "// Line 1313:              * (not checking for half-closed TCP socket)",
                "// Line 1314:              * (backend should read all data desired prior to closing socket,",
                "// Line 1315:              *  though might send app-level close data frame, if applicable) */",
                "// Line 1316:             return HANDLER_FINISHED; /* read finished */",
                "// Line 1317:         } else if (0 == con->file_started) {",
                "// Line 1318:             /* split header from body */",
                "// Line 1319:             handler_t rc = http_response_parse_headers(srv, con, opts, b);",
                "// Line 1320:             if (rc != HANDLER_GO_ON) return rc;",
                "// Line 1321:             /* accumulate response in b until headers completed (or error) */",
                "// Line 1322:             if (con->file_started) buffer_string_set_length(b, 0);",
                "// vulnerable line: 1323: } else {",
                "// Line 1324:             if (0 != http_chunk_append_buffer(srv, con, b)) {",
                "// Line 1325:                 /* error writing to tempfile;",
                "// Line 1326:                  * truncate response or send 500 if nothing sent yet */",
                "// Line 1327:                 return HANDLER_ERROR;",
                "// vulnerable line: 1328: }",
                "// Line 1329:             buffer_string_set_length(b, 0);",
                "// vulnerable line: 1330: }",
                "// Line 1331: ",
                "// Line 1332:         if ((con->conf.stream_response_body & FDEVENT_STREAM_RESPONSE_BUFMIN)",
                "// Line 1333:             && chunkqueue_length(con->write_queue) > 65536 - 4096) {",
                "// Line 1334:             if (!con->is_writable) {",
                "// Line 1335:                 /*(defer removal of FDEVENT_IN interest since",
                "// Line 1336:                  * connection_state_machine() might be able to send",
                "// Line 1337:                  * data immediately, unless !con->is_writable, where",
                "// Line 1338:                  * connection_state_machine() might not loop back to",
                "// Line 1339:                  * call the subrequest handler)*/",
                "// Line 1340:                 fdevent_event_clr(srv->ev, fde_ndx, fd, FDEVENT_IN);",
                "// vulnerable line: 1341: }",
                "// Line 1342:             break;",
                "// vulnerable line: 1343: }",
                "// Line 1344: ",
                "// Line 1345:         if ((size_t)n < avail)",
                "// Line 1346:             break; /* emptied kernel read buffer or partial read */",
                "// vulnerable line: 1347: }",
                "// Line 1348: ",
                "// Line 1349:     return HANDLER_GO_ON;",
                "// vulnerable line: 1350: }",
                "// Line 1351: ",
                "// Line 1352: ",
                "// Line 1353: int http_cgi_headers (server *srv, connection *con, http_cgi_opts *opts, http_cgi_header_append_cb cb, void *vdata) {",
                "// Line 1354: ",
                "// Line 1355:     /* CGI-SPEC 6.1.2, FastCGI spec 6.3 and SCGI spec */",
                "// Line 1356: ",
                "// Line 1357:     int rc = 0;",
                "// Line 1358:     server_socket *srv_sock = con->srv_socket;",
                "// Line 1359:     const char *s;",
                "// Line 1360:     size_t n;",
                "// Line 1361:     char buf[LI_ITOSTRING_LENGTH];",
                "// Line 1362:     sock_addr *addr;",
                "// Line 1363:     sock_addr addrbuf;",
                "// Line 1364:     char b2[INET6_ADDRSTRLEN + 1];",
                "// Line 1365: ",
                "// Line 1366:     /* (CONTENT_LENGTH must be first for SCGI) */",
                "// Line 1367:     if (!opts->authorizer) {",
                "// Line 1368:         li_itostrn(buf, sizeof(buf), con->request.content_length);",
                "// Line 1369:         rc |= cb(vdata, CONST_STR_LEN(\"CONTENT_LENGTH\"), buf, strlen(buf));",
                "// vulnerable line: 1370: }",
                "// Line 1371: ",
                "// Line 1372:     if (!buffer_string_is_empty(con->uri.query)) {",
                "// Line 1373:         rc |= cb(vdata, CONST_STR_LEN(\"QUERY_STRING\"),",
                "// Line 1374:                         CONST_BUF_LEN(con->uri.query));",
                "// vulnerable line: 1375: } else {",
                "// Line 1376:         rc |= cb(vdata, CONST_STR_LEN(\"QUERY_STRING\"),",
                "// Line 1377:                         CONST_STR_LEN(\"\"));",
                "// vulnerable line: 1378: }",
                "// Line 1379:     if (!buffer_string_is_empty(opts->strip_request_uri)) {",
                "// Line 1380:         /**",
                "// Line 1381:          * /app1/index/list",
                "// Line 1382:          *",
                "// Line 1383:          * stripping /app1 or /app1/ should lead to",
                "// Line 1384:          *",
                "// Line 1385:          * /index/list",
                "// Line 1386:          *",
                "// Line 1387:          */",
                "// Line 1388:         size_t len = buffer_string_length(opts->strip_request_uri);",
                "// Line 1389:         if ('/' == opts->strip_request_uri->ptr[len-1]) {",
                "// Line 1390:             --len;",
                "// vulnerable line: 1391: }",
                "// Line 1392: ",
                "// Line 1393:         if (buffer_string_length(con->request.orig_uri) >= len",
                "// Line 1394:             && 0 == memcmp(con->request.orig_uri->ptr,",
                "// Line 1395:                            opts->strip_request_uri->ptr, len)",
                "// Line 1396:             && con->request.orig_uri->ptr[len] == '/') {",
                "// Line 1397:             rc |= cb(vdata, CONST_STR_LEN(\"REQUEST_URI\"),",
                "// Line 1398:                             con->request.orig_uri->ptr+len,",
                "// Line 1399:                             buffer_string_length(con->request.orig_uri) - len);",
                "// vulnerable line: 1400: } else {",
                "// Line 1401:             rc |= cb(vdata, CONST_STR_LEN(\"REQUEST_URI\"),",
                "// Line 1402:                             CONST_BUF_LEN(con->request.orig_uri));",
                "// vulnerable line: 1403: }",
                "// vulnerable line: 1404: } else {",
                "// Line 1405:         rc |= cb(vdata, CONST_STR_LEN(\"REQUEST_URI\"),",
                "// Line 1406:                         CONST_BUF_LEN(con->request.orig_uri));",
                "// vulnerable line: 1407: }",
                "// Line 1408:     if (!buffer_is_equal(con->request.uri, con->request.orig_uri)) {",
                "// Line 1409:         rc |= cb(vdata, CONST_STR_LEN(\"REDIRECT_URI\"),",
                "// Line 1410:                         CONST_BUF_LEN(con->request.uri));",
                "// vulnerable line: 1411: }",
                "// Line 1412:     /* set REDIRECT_STATUS for php compiled with --force-redirect",
                "// Line 1413:      * (if REDIRECT_STATUS has not already been set by error handler) */",
                "// Line 1414:     if (0 == con->error_handler_saved_status) {",
                "// Line 1415:         rc |= cb(vdata, CONST_STR_LEN(\"REDIRECT_STATUS\"),",
                "// Line 1416:                         CONST_STR_LEN(\"200\"));",
                "// vulnerable line: 1417: }",
                "// Line 1418: ",
                "// Line 1419:     /*",
                "// Line 1420:      * SCRIPT_NAME, PATH_INFO and PATH_TRANSLATED according to",
                "// Line 1421:      * http://cgi-spec.golux.com/draft-coar-cgi-v11-03-clean.html",
                "// Line 1422:      * (6.1.14, 6.1.6, 6.1.7)",
                "// Line 1423:      */",
                "// Line 1424:     if (!opts->authorizer) {",
                "// Line 1425:         rc |= cb(vdata, CONST_STR_LEN(\"SCRIPT_NAME\"),",
                "// Line 1426:                         CONST_BUF_LEN(con->uri.path));",
                "// Line 1427:         if (!buffer_string_is_empty(con->request.pathinfo)) {",
                "// Line 1428:             rc |= cb(vdata, CONST_STR_LEN(\"PATH_INFO\"),",
                "// Line 1429:                             CONST_BUF_LEN(con->request.pathinfo));",
                "// Line 1430:             /* PATH_TRANSLATED is only defined if PATH_INFO is set */",
                "// Line 1431:             if (!buffer_string_is_empty(opts->docroot)) {",
                "// Line 1432:                 buffer_copy_buffer(srv->tmp_buf, opts->docroot);",
                "// vulnerable line: 1433: } else {",
                "// Line 1434:                 buffer_copy_buffer(srv->tmp_buf, con->physical.basedir);",
                "// vulnerable line: 1435: }",
                "// Line 1436:             buffer_append_string_buffer(srv->tmp_buf, con->request.pathinfo);",
                "// Line 1437:             rc |= cb(vdata, CONST_STR_LEN(\"PATH_TRANSLATED\"),",
                "// Line 1438:                             CONST_BUF_LEN(srv->tmp_buf));",
                "// vulnerable line: 1439: }",
                "// vulnerable line: 1440: }",
                "// Line 1441: ",
                "// Line 1442:    /*",
                "// Line 1443:     * SCRIPT_FILENAME and DOCUMENT_ROOT for php",
                "// Line 1444:     * The PHP manual http://www.php.net/manual/en/reserved.variables.php",
                "// Line 1445:     * treatment of PATH_TRANSLATED is different from the one of CGI specs.",
                "// Line 1446:     * (see php.ini cgi.fix_pathinfo = 1 config parameter)",
                "// Line 1447:     */",
                "// Line 1448: ",
                "// Line 1449:     if (!buffer_string_is_empty(opts->docroot)) {",
                "// Line 1450:         /* alternate docroot, e.g. for remote FastCGI or SCGI server */",
                "// Line 1451:         buffer_copy_buffer(srv->tmp_buf, opts->docroot);",
                "// Line 1452:         buffer_append_string_buffer(srv->tmp_buf, con->uri.path);",
                "// Line 1453:         rc |= cb(vdata, CONST_STR_LEN(\"SCRIPT_FILENAME\"),",
                "// Line 1454:                         CONST_BUF_LEN(srv->tmp_buf));",
                "// Line 1455:         rc |= cb(vdata, CONST_STR_LEN(\"DOCUMENT_ROOT\"),",
                "// Line 1456:                         CONST_BUF_LEN(opts->docroot));",
                "// vulnerable line: 1457: } else {",
                "// Line 1458:         if (opts->break_scriptfilename_for_php) {",
                "// Line 1459:             /* php.ini config cgi.fix_pathinfo = 1 need a broken SCRIPT_FILENAME",
                "// Line 1460:              * to find out what PATH_INFO is itself",
                "// Line 1461:              *",
                "// Line 1462:              * see src/sapi/cgi_main.c, init_request_info()",
                "// Line 1463:              */",
                "// Line 1464:             buffer_copy_buffer(srv->tmp_buf, con->physical.path);",
                "// Line 1465:             buffer_append_string_buffer(srv->tmp_buf, con->request.pathinfo);",
                "// Line 1466:             rc |= cb(vdata, CONST_STR_LEN(\"SCRIPT_FILENAME\"),",
                "// Line 1467:                             CONST_BUF_LEN(srv->tmp_buf));",
                "// vulnerable line: 1468: } else {",
                "// Line 1469:             rc |= cb(vdata, CONST_STR_LEN(\"SCRIPT_FILENAME\"),",
                "// Line 1470:                             CONST_BUF_LEN(con->physical.path));",
                "// vulnerable line: 1471: }",
                "// Line 1472:         rc |= cb(vdata, CONST_STR_LEN(\"DOCUMENT_ROOT\"),",
                "// Line 1473:                         CONST_BUF_LEN(con->physical.basedir));",
                "// vulnerable line: 1474: }",
                "// Line 1475: ",
                "// Line 1476:     s = get_http_method_name(con->request.http_method);",
                "// Line 1477:     force_assert(s);",
                "// Line 1478:     rc |= cb(vdata, CONST_STR_LEN(\"REQUEST_METHOD\"), s, strlen(s));",
                "// Line 1479: ",
                "// Line 1480:     s = get_http_version_name(con->request.http_version);",
                "// Line 1481:     force_assert(s);",
                "// Line 1482:     rc |= cb(vdata, CONST_STR_LEN(\"SERVER_PROTOCOL\"), s, strlen(s));",
                "// Line 1483: ",
                "// Line 1484:     rc |= cb(vdata, CONST_STR_LEN(\"SERVER_SOFTWARE\"),",
                "// Line 1486: ",
                "// Line 1487:     rc |= cb(vdata, CONST_STR_LEN(\"GATEWAY_INTERFACE\"),",
                "// Line 1488:                     CONST_STR_LEN(\"CGI/1.1\"));",
                "// Line 1489: ",
                "// Line 1490:     rc |= cb(vdata, CONST_STR_LEN(\"REQUEST_SCHEME\"),",
                "// Line 1491:                     CONST_BUF_LEN(con->uri.scheme));",
                "// Line 1492: ",
                "// Line 1493:     if (buffer_is_equal_caseless_string(con->uri.scheme,",
                "// Line 1494:                                         CONST_STR_LEN(\"https\"))) {",
                "// Line 1495:         rc |= cb(vdata, CONST_STR_LEN(\"HTTPS\"), CONST_STR_LEN(\"on\"));",
                "// vulnerable line: 1496: }",
                "// Line 1497: ",
                "// Line 1498:     addr = &srv_sock->addr;",
                "// Line 1499:     li_utostrn(buf, sizeof(buf), sock_addr_get_port(addr));",
                "// Line 1500:     rc |= cb(vdata, CONST_STR_LEN(\"SERVER_PORT\"), buf, strlen(buf));",
                "// Line 1501: ",
                "// Line 1502:     switch (addr->plain.sa_family) {",
                "// Line 1503:     case AF_INET:",
                "// Line 1504:     case AF_INET6:",
                "// Line 1505:         if (sock_addr_is_addr_wildcard(addr)) {",
                "// Line 1506:             socklen_t addrlen = sizeof(addrbuf);",
                "// Line 1507:             if (0 == getsockname(con->fd,(struct sockaddr *)&addrbuf,&addrlen)){",
                "// Line 1508:                 addr = &addrbuf;",
                "// vulnerable line: 1509: } else {",
                "// Line 1510:                 s = \"\";",
                "// Line 1511:                 break;",
                "// vulnerable line: 1512: }",
                "// vulnerable line: 1513: }",
                "// Line 1514:         s = sock_addr_inet_ntop(addr, b2, sizeof(b2)-1);",
                "// Line 1515:         if (NULL == s) s = \"\";",
                "// Line 1516:         break;",
                "// Line 1517:     default:",
                "// Line 1518:         s = \"\";",
                "// Line 1519:         break;",
                "// vulnerable line: 1520: }",
                "// Line 1521:     force_assert(s);",
                "// Line 1522:     rc |= cb(vdata, CONST_STR_LEN(\"SERVER_ADDR\"), s, strlen(s));",
                "// Line 1523: ",
                "// Line 1524:     if (!buffer_string_is_empty(con->server_name)) {",
                "// Line 1525:         size_t len = buffer_string_length(con->server_name);",
                "// Line 1526: ",
                "// Line 1527:         if (con->server_name->ptr[0] == '[') {",
                "// Line 1528:             const char *colon = strstr(con->server_name->ptr, \"]:\");",
                "// Line 1529:             if (colon) len = (colon + 1) - con->server_name->ptr;",
                "// vulnerable line: 1530: } else {",
                "// Line 1531:             const char *colon = strchr(con->server_name->ptr, ':');",
                "// Line 1532:             if (colon) len = colon - con->server_name->ptr;",
                "// vulnerable line: 1533: }",
                "// Line 1534: ",
                "// Line 1535:         rc |= cb(vdata, CONST_STR_LEN(\"SERVER_NAME\"),",
                "// Line 1536:                         con->server_name->ptr, len);",
                "// vulnerable line: 1537: } else {",
                "// Line 1538:         /* set to be same as SERVER_ADDR (above) */",
                "// Line 1539:         rc |= cb(vdata, CONST_STR_LEN(\"SERVER_NAME\"), s, strlen(s));",
                "// vulnerable line: 1540: }",
                "// Line 1541: ",
                "// Line 1542:     rc |= cb(vdata, CONST_STR_LEN(\"REMOTE_ADDR\"),",
                "// Line 1543:                     CONST_BUF_LEN(con->dst_addr_buf));",
                "// Line 1544: ",
                "// Line 1545:     li_utostrn(buf, sizeof(buf), sock_addr_get_port(&con->dst_addr));",
                "// Line 1546:     rc |= cb(vdata, CONST_STR_LEN(\"REMOTE_PORT\"), buf, strlen(buf));",
                "// Line 1547: ",
                "// Line 1548:     for (n = 0; n < con->request.headers->used; n++) {",
                "// Line 1549:         data_string *ds = (data_string *)con->request.headers->data[n];",
                "// Line 1550:         if (!buffer_string_is_empty(ds->value) && !buffer_is_empty(ds->key)) {",
                "// Line 1551:             /* Security: Do not emit HTTP_PROXY in environment.",
                "// Line 1552:              * Some executables use HTTP_PROXY to configure",
                "// Line 1553:              * outgoing proxy.  See also https://httpoxy.org/ */",
                "// Line 1554:             if (buffer_is_equal_caseless_string(ds->key,",
                "// Line 1555:                                                 CONST_STR_LEN(\"Proxy\"))) {",
                "// Line 1556:                 continue;",
                "// vulnerable line: 1557: }",
                "// Line 1558:             buffer_copy_string_encoded_cgi_varnames(srv->tmp_buf,",
                "// Line 1559:                                                     CONST_BUF_LEN(ds->key), 1);",
                "// Line 1560:             rc |= cb(vdata, CONST_BUF_LEN(srv->tmp_buf),",
                "// Line 1561:                             CONST_BUF_LEN(ds->value));",
                "// vulnerable line: 1562: }",
                "// vulnerable line: 1563: }",
                "// Line 1564: ",
                "// Line 1565:     srv->request_env(srv, con);",
                "// Line 1566: ",
                "// Line 1567:     for (n = 0; n < con->environment->used; n++) {",
                "// Line 1568:         data_string *ds = (data_string *)con->environment->data[n];",
                "// Line 1569:         if (!buffer_is_empty(ds->value) && !buffer_is_empty(ds->key)) {",
                "// Line 1570:             buffer_copy_string_encoded_cgi_varnames(srv->tmp_buf,",
                "// Line 1571:                                                     CONST_BUF_LEN(ds->key), 0);",
                "// Line 1572:             rc |= cb(vdata, CONST_BUF_LEN(srv->tmp_buf),",
                "// Line 1573:                             CONST_BUF_LEN(ds->value));",
                "// vulnerable line: 1574: }",
                "// vulnerable line: 1575: }",
                "// Line 1576: ",
                "// Line 1577:     return rc;",
                "// vulnerable line: 1578: }"
            ]
        },
        {
            "filename_of_changes": "request.c",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "0",
            "number_of_lines_deleted_vulnerable_to_cve": "24",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 36:     /* IPv6 adress */",
                "// Line 37:     if (host->ptr[0] == '[') {",
                "// Line 38:         char *c = host->ptr + 1;",
                "// Line 39:         int colon_cnt = 0;",
                "// Line 40: ",
                "// Line 41:         /* check the address inside [...] */",
                "// Line 42:         for (; *c && *c != ']'; c++) {",
                "// Line 43:             if (*c == ':') {",
                "// Line 44:                 if (++colon_cnt > 7) {",
                "// Line 45:                     return -1;",
                "// vulnerable line: 46: }",
                "// Line 47:             } else if (!light_isxdigit(*c) && '.' != *c) {",
                "// Line 48:                 return -1;",
                "// vulnerable line: 49: }",
                "// vulnerable line: 50: }",
                "// Line 51: ",
                "// Line 52:         /* missing ] */",
                "// Line 53:         if (!*c) {",
                "// Line 54:             return -1;",
                "// vulnerable line: 55: }",
                "// Line 56: ",
                "// Line 57:         /* check port */",
                "// Line 58:         if (*(c+1) == ':') {",
                "// Line 59:             for (c += 2; *c; c++) {",
                "// Line 60:                 if (!light_isdigit(*c)) {",
                "// Line 61:                     return -1;",
                "// vulnerable line: 62: }",
                "// vulnerable line: 63: }",
                "// vulnerable line: 64: }",
                "// Line 65:         else if ('\u0000' != *(c+1)) {",
                "// Line 66:             /* only a port is allowed to follow [...] */",
                "// Line 67:             return -1;",
                "// vulnerable line: 68: }",
                "// vulnerable line: 69: return 0;",
                "// vulnerable line: 70: }",
                "// Line 71: ",
                "// Line 72:     hostport_len = host_len = buffer_string_length(host);",
                "// Line 73: ",
                "// Line 74:     if (NULL != (colon = memchr(host->ptr, ':', host_len))) {",
                "// Line 75:         char *c = colon + 1;",
                "// Line 76: ",
                "// Line 77:         /* check portnumber */",
                "// Line 78:         for (; *c; c++) {",
                "// Line 79:             if (!light_isdigit(*c)) return -1;",
                "// vulnerable line: 80: }",
                "// Line 81: ",
                "// Line 82:         /* remove the port from the host-len */",
                "// Line 83:         host_len = colon - host->ptr;",
                "// vulnerable line: 84: }",
                "// Line 85: ",
                "// Line 86:     /* Host is empty */",
                "// Line 87:     if (host_len == 0) return -1;",
                "// Line 88: ",
                "// Line 89:     /* if the hostname ends in a \".\" strip it */",
                "// Line 90:     if (host->ptr[host_len-1] == '.') {",
                "// Line 91:         /* shift port info one left */",
                "// Line 92:         if (NULL != colon) memmove(colon-1, colon, hostport_len - host_len);",
                "// Line 93:         buffer_string_set_length(host, --hostport_len);",
                "// Line 94:         if (--host_len == 0) return -1;",
                "// vulnerable line: 95: }",
                "// Line 96: ",
                "// Line 97: ",
                "// Line 98:     /* scan from the right and skip the \u0000 */",
                "// Line 99:     for (i = host_len; i-- > 0; ) {",
                "// Line 100:         const char c = host->ptr[i];",
                "// Line 101: ",
                "// Line 102:         switch (stage) {",
                "// Line 103:         case TOPLABEL:",
                "// Line 104:             if (c == '.') {",
                "// Line 105:                 /* only switch stage, if this is not the last character */",
                "// Line 106:                 if (i != host_len - 1) {",
                "// Line 107:                     if (label_len == 0) {",
                "// Line 108:                         return -1;",
                "// vulnerable line: 109: }",
                "// Line 110: ",
                "// Line 111:                     /* check the first character at right of the dot */",
                "// Line 112:                     if (is_ip == 0) {",
                "// Line 113:                         if (!light_isalnum(host->ptr[i+1])) {",
                "// Line 114:                             return -1;",
                "// vulnerable line: 115: }",
                "// Line 116:                     } else if (!light_isdigit(host->ptr[i+1])) {",
                "// Line 117:                         is_ip = 0;",
                "// Line 118:                     } else if ('-' == host->ptr[i+1]) {",
                "// Line 119:                         return -1;",
                "// vulnerable line: 120: } else {",
                "// Line 121:                         /* just digits */",
                "// Line 122:                         is_ip = 1;",
                "// vulnerable line: 123: }",
                "// Line 124: ",
                "// Line 125:                     stage = DOMAINLABEL;",
                "// Line 126: ",
                "// Line 127:                     label_len = 0;",
                "// Line 128:                     level++;",
                "// Line 129:                 } else if (i == 0) {",
                "// Line 130:                     /* just a dot and nothing else is evil */",
                "// Line 131:                     return -1;",
                "// vulnerable line: 132: }",
                "// Line 133:             } else if (i == 0) {",
                "// Line 134:                 /* the first character of the hostname */",
                "// Line 135:                 if (!light_isalnum(c)) {",
                "// Line 136:                     return -1;",
                "// vulnerable line: 137: }",
                "// Line 138:                 label_len++;",
                "// vulnerable line: 139: } else {",
                "// Line 140:                 if (c != '-' && !light_isalnum(c)) {",
                "// Line 141:                     return -1;",
                "// vulnerable line: 142: }",
                "// Line 143:                 if (is_ip == -1) {",
                "// Line 144:                     if (!light_isdigit(c)) is_ip = 0;",
                "// vulnerable line: 145: }",
                "// Line 146:                 label_len++;",
                "// vulnerable line: 147: }",
                "// Line 148: ",
                "// Line 149:             break;",
                "// Line 150:         case DOMAINLABEL:",
                "// Line 151:             if (is_ip == 1) {",
                "// Line 152:                 if (c == '.') {",
                "// Line 153:                     if (label_len == 0) {",
                "// Line 154:                         return -1;",
                "// vulnerable line: 155: }",
                "// Line 156: ",
                "// Line 157:                     label_len = 0;",
                "// Line 158:                     level++;",
                "// Line 159:                 } else if (!light_isdigit(c)) {",
                "// Line 160:                     return -1;",
                "// vulnerable line: 161: } else {",
                "// Line 162:                     label_len++;",
                "// vulnerable line: 163: }",
                "// vulnerable line: 164: } else {",
                "// Line 165:                 if (c == '.') {",
                "// Line 166:                     if (label_len == 0) {",
                "// Line 167:                         return -1;",
                "// vulnerable line: 168: }",
                "// Line 169: ",
                "// Line 170:                     /* c is either - or alphanum here */",
                "// Line 171:                     if ('-' == host->ptr[i+1]) {",
                "// Line 172:                         return -1;",
                "// vulnerable line: 173: }",
                "// Line 174: ",
                "// Line 175:                     label_len = 0;",
                "// Line 176:                     level++;",
                "// Line 177:                 } else if (i == 0) {",
                "// Line 178:                     if (!light_isalnum(c)) {",
                "// Line 179:                         return -1;",
                "// vulnerable line: 180: }",
                "// Line 181:                     label_len++;",
                "// vulnerable line: 182: } else {",
                "// Line 183:                     if (c != '-' && !light_isalnum(c)) {",
                "// Line 184:                         return -1;",
                "// vulnerable line: 185: }",
                "// Line 186:                     label_len++;",
                "// vulnerable line: 187: }",
                "// vulnerable line: 188: }",
                "// Line 189: ",
                "// Line 190:             break;",
                "// vulnerable line: 191: }",
                "// vulnerable line: 192: }",
                "// Line 193: ",
                "// Line 194:     /* a IP has to consist of 4 parts */",
                "// Line 195:     if (is_ip == 1 && level != 3) {",
                "// Line 196:         return -1;",
                "// vulnerable line: 197: }",
                "// Line 198: ",
                "// Line 199:     if (label_len == 0) {",
                "// Line 200:         return -1;",
                "// vulnerable line: 201: }",
                "// Line 202: ",
                "// vulnerable line: 203: return 0;",
                "// vulnerable line: 204: }",
                "// Line 205: ",
                "// Line 206: int http_request_host_normalize(buffer *b, int scheme_port) {",
                "// Line 207:     /*",
                "// Line 208:      * check for and canonicalize numeric IP address and portnum (optional)",
                "// Line 209:      * (IP address may be followed by \":portnum\" (optional))",
                "// Line 210:      * - IPv6: \"[...]\"",
                "// Line 211:      * - IPv4: \"x.x.x.x\"",
                "// Line 212:      * - IPv4: 12345678   (32-bit decimal number)",
                "// Line 213:      * - IPv4: 012345678  (32-bit octal number)",
                "// Line 214:      * - IPv4: 0x12345678 (32-bit hex number)",
                "// Line 237: ",
                "// Line 238:     if (*p != '[') {",
                "// Line 239:         char * const colon = (char *)memchr(p, ':', blen);",
                "// Line 240:         if (colon) {",
                "// Line 241:             if (*p == ':') return -1; /*(empty host then port, or naked IPv6)*/",
                "// Line 242:             if (colon[1] != '\u0000') {",
                "// Line 243:                 char *e;",
                "// Line 244:                 port = strtol(colon+1, &e, 0); /*(allow decimal, octal, hex)*/",
                "// Line 245:                 if (0 < port && port <= USHRT_MAX && *e == '\u0000') {",
                "// Line 246:                     /* valid port */",
                "// vulnerable line: 247: } else {",
                "// Line 248:                     return -1;",
                "// vulnerable line: 249: }",
                "// Line 250:             } /*(else ignore stray colon at string end)*/",
                "// Line 251:             buffer_string_set_length(b, (size_t)(colon - p)); /*(remove port str)*/",
                "// vulnerable line: 252: }",
                "// Line 253: ",
                "// Line 254:         if (light_isdigit(*p)) {",
                "// Line 255:             /* (IPv4 address literal or domain starting w/ digit (e.g. 3com))*/",
                "// Line 256:             sock_addr addr;",
                "// Line 257:             if (1 == sock_addr_inet_pton(&addr, p, AF_INET, 0)) {",
                "// Line 258:                 sock_addr_inet_ntop_copy_buffer(b, &addr);",
                "// vulnerable line: 259: }",
                "// vulnerable line: 260: }",
                "// Line 261:     } else { /* IPv6 addr */",
                "// Line 262:       #if defined(HAVE_IPV6) && defined(HAVE_INET_PTON)",
                "// Line 263: ",
                "// Line 264:         sock_addr addr;",
                "// Line 265:         char *bracket = b->ptr+blen-1;",
                "// Line 266:         char *percent = strchr(b->ptr+1, '%');",
                "// Line 267:         size_t len;",
                "// Line 268:         int rc;",
                "// Line 269:         char buf[INET6_ADDRSTRLEN+16]; /*(+16 for potential %interface name)*/",
                "// Line 270:         if (blen <= 2) return -1; /*(invalid \"[]\")*/",
                "// Line 271:         if (*bracket != ']') {",
                "// Line 272:             bracket = (char *)memchr(b->ptr+1, ']', blen-1);",
                "// Line 273:             if (NULL == bracket || bracket[1] != ':'  || bracket - b->ptr == 1){",
                "// Line 274:                return -1;",
                "// vulnerable line: 275: }",
                "// Line 276:             if (bracket[2] != '\u0000') { /*(ignore stray colon at string end)*/",
                "// Line 277:                 char *e;",
                "// Line 278:                 port = strtol(bracket+2, &e, 0); /*(allow decimal, octal, hex)*/",
                "// Line 279:                 if (0 < port && port <= USHRT_MAX && *e == '\u0000') {",
                "// Line 280:                     /* valid port */",
                "// vulnerable line: 281: } else {",
                "// Line 282:                     return -1;",
                "// vulnerable line: 283: }",
                "// vulnerable line: 284: }",
                "// vulnerable line: 285: }",
                "// Line 286: ",
                "// Line 287:         *bracket = '\u0000';/*(terminate IPv6 string)*/",
                "// Line 288:         if (percent) *percent = '\u0000'; /*(remove %interface from address)*/",
                "// Line 289:         rc = sock_addr_inet_pton(&addr, b->ptr+1, AF_INET6, 0);",
                "// Line 290:         if (percent) *percent = '%'; /*(restore %interface)*/",
                "// Line 291:         *bracket = ']'; /*(restore bracket)*/",
                "// Line 292:         if (1 != rc) return -1;",
                "// Line 293: ",
                "// Line 294:         sock_addr_inet_ntop(&addr, buf, sizeof(buf));",
                "// Line 295:         len = strlen(buf);",
                "// Line 296:         if (percent) {",
                "// Line 297:             if (percent > bracket) return -1;",
                "// Line 298:             if (len + (size_t)(bracket - percent) >= sizeof(buf)) return -1;",
                "// Line 299:             memcpy(buf+len, percent, (size_t)(bracket - percent));",
                "// Line 300:             len += (size_t)(bracket - percent);",
                "// vulnerable line: 301: }",
                "// Line 302:         buffer_string_set_length(b, 1); /* truncate after '[' */",
                "// Line 303:         buffer_append_string_len(b, buf, len);",
                "// Line 304:         buffer_append_string_len(b, CONST_STR_LEN(\"]\"));",
                "// Line 305: ",
                "// Line 306:       #else",
                "// Line 307: ",
                "// Line 308:         return -1;",
                "// Line 309: ",
                "// Line 310:       #endif",
                "// vulnerable line: 311: }",
                "// Line 312: ",
                "// Line 313:     if (0 != port && port != scheme_port) {",
                "// Line 314:         buffer_append_string_len(b, CONST_STR_LEN(\":\"));",
                "// Line 315:         buffer_append_int(b, (int)port);",
                "// vulnerable line: 316: }",
                "// Line 317: ",
                "// vulnerable line: 318: return 0;",
                "// vulnerable line: 319: }",
                "// Line 320: ",
                "// Line 321: static int scheme_port (const buffer *scheme)",
                "// Line 322: {",
                "// Line 323:     return buffer_is_equal_string(scheme, CONST_STR_LEN(\"https\")) ? 443 : 80;",
                "// vulnerable line: 324: }",
                "// Line 325: ",
                "// Line 326: int http_request_host_policy (connection *con, buffer *b, const buffer *scheme) {",
                "// Line 327:     return (((con->conf.http_parseopts & HTTP_PARSEOPT_HOST_STRICT)",
                "// Line 328:              && 0 != request_check_hostname(b))",
                "// Line 329:             || ((con->conf.http_parseopts & HTTP_PARSEOPT_HOST_NORMALIZE)",
                "// Line 330:                 && 0 != http_request_host_normalize(b, scheme_port(scheme))));",
                "// vulnerable line: 331: }",
                "// Line 332: ",
                "// Line 333: #if 0",
                "// Line 334: #define DUMP_HEADER",
                "// Line 335: #endif",
                "// Line 336: ",
                "// Line 337: static int http_request_split_value(array *vals, buffer *b) {",
                "// Line 338:     size_t i, len;",
                "// Line 339:     int state = 0;",
                "// Line 340: ",
                "// Line 341:     const char *current;",
                "// Line 356:         data_string *ds;",
                "// Line 357: ",
                "// Line 358:         switch (state) {",
                "// Line 359:         case 0: /* find start of a token */",
                "// Line 360:             switch (*current) {",
                "// Line 361:             case ' ':",
                "// Line 362:             case '    ': /* skip white space */",
                "// Line 363:             case ',': /* skip empty token */",
                "// Line 364:                 break;",
                "// Line 365:             case '\u0000': /* end of string */",
                "// vulnerable line: 366: return 0;",
                "// Line 367:             default:",
                "// Line 368:                 /* found real data, switch to state 1 to find the end of the token */",
                "// Line 369:                 token_start = token_end = current;",
                "// Line 370:                 state = 1;",
                "// Line 371:                 break;",
                "// vulnerable line: 372: }",
                "// Line 373:             break;",
                "// Line 374:         case 1: /* find end of token and last non white space character */",
                "// Line 375:             switch (*current) {",
                "// Line 376:             case ' ':",
                "// Line 377:             case '    ':",
                "// Line 378:                 /* space - don't update token_end */",
                "// Line 379:                 break;",
                "// Line 380:             case ',':",
                "// Line 381:             case '\u0000': /* end of string also marks the end of a token */",
                "// Line 382:                 if (NULL == (ds = (data_string *)array_get_unused_element(vals, TYPE_STRING))) {",
                "// Line 383:                     ds = data_string_init();",
                "// vulnerable line: 384: }",
                "// Line 385: ",
                "// Line 386:                 buffer_copy_string_len(ds->value, token_start, token_end-token_start+1);",
                "// Line 387:                 array_insert_unique(vals, (data_unset *)ds);",
                "// Line 388: ",
                "// Line 389:                 state = 0;",
                "// Line 390:                 break;",
                "// Line 391:             default:",
                "// Line 392:                 /* no white space, update token_end to include current character */",
                "// Line 393:                 token_end = current;",
                "// Line 394:                 break;",
                "// vulnerable line: 395: }",
                "// Line 396:             break;",
                "// vulnerable line: 397: }",
                "// vulnerable line: 398: }",
                "// Line 399: ",
                "// vulnerable line: 400: return 0;",
                "// vulnerable line: 401: }",
                "// Line 402: ",
                "// Line 403: static int request_uri_is_valid_char(unsigned char c) {",
                "// Line 404:     if (c <= 32) return 0;",
                "// Line 405:     if (c == 127) return 0;",
                "// Line 406:     if (c == 255) return 0;",
                "// Line 407: ",
                "// Line 408:     return 1;",
                "// vulnerable line: 409: }",
                "// Line 410: ",
                "// Line 411: static int http_request_missing_CR_before_LF(server *srv, connection *con) {",
                "// vulnerable line: 412: if (srv->srvconf.log_request_header_on_error) {",
                "// Line 413:         log_error_write(srv, __FILE__, __LINE__, \"s\", \"missing CR before LF in header -> 400\");",
                "// Line 414:         log_error_write(srv, __FILE__, __LINE__, \"Sb\", \"request-header:",
                "// Line 415: \", con->request.request);",
                "// vulnerable line: 416: }",
                "// Line 417: ",
                "// vulnerable line: 418: con->http_status = 400;",
                "// vulnerable line: 419: con->keep_alive = 0;",
                "// Line 420:     con->response.keep_alive = 0;",
                "// vulnerable line: 421: return 0;",
                "// vulnerable line: 422: }",
                "// Line 423: ",
                "// Line 424: int http_request_parse(server *srv, connection *con) {",
                "// Line 425:     char *uri = NULL, *proto = NULL, *method = NULL, con_length_set;",
                "// Line 426:     int is_key = 1, key_len = 0, is_ws_after_key = 0, in_folding;",
                "// Line 427:     char *value = NULL, *key = NULL;",
                "// Line 428:     char *reqline_host = NULL;",
                "// Line 429:     int reqline_hostlen = 0;",
                "// Line 430: ",
                "// Line 431:     enum { HTTP_CONNECTION_UNSET, HTTP_CONNECTION_KEEPALIVE, HTTP_CONNECTION_CLOSE } keep_alive_set = HTTP_CONNECTION_UNSET;",
                "// Line 432: ",
                "// Line 443:      * Option : \"^([-a-zA-Z]+): (.+)$\"",
                "// Line 444:      * End    : \"^$\"",
                "// Line 445:      */",
                "// Line 446: ",
                "// Line 447:     if (con->conf.log_request_header) {",
                "// Line 448:         log_error_write(srv, __FILE__, __LINE__, \"sdsdSb\",",
                "// Line 449:                 \"fd:\", con->fd,",
                "// Line 450:                 \"request-len:\", buffer_string_length(con->request.request),",
                "// Line 451:                 \"",
                "// Line 452: \", con->request.request);",
                "// vulnerable line: 453: }",
                "// Line 454: ",
                "// Line 455:     if (con->request_count > 1 &&",
                "// Line 456:         con->request.request->ptr[0] == '",
                "// Line 457: ' &&",
                "// Line 458:         con->request.request->ptr[1] == '",
                "// Line 459: ') {",
                "// Line 460:         /* we are in keep-alive and might get ",
                "// Line 461:  after a previous POST request.*/",
                "// Line 462: ",
                "// Line 463:           #ifdef __COVERITY__",
                "// Line 464:         if (buffer_string_length(con->request.request) < 2) {",
                "// vulnerable line: 465: con->keep_alive = 0;",
                "// vulnerable line: 466: con->http_status = 400;",
                "// vulnerable line: 467: return 0;",
                "// vulnerable line: 468: }",
                "// Line 469:           #endif",
                "// Line 470:         /* coverity[overflow_sink : FALSE] */",
                "// Line 471:         buffer_copy_string_len(con->parse_request, con->request.request->ptr + 2, buffer_string_length(con->request.request) - 2);",
                "// Line 472:     } else if (con->request_count > 0 &&",
                "// Line 473:         con->request.request->ptr[1] == '",
                "// Line 474: ') {",
                "// Line 475:         /* we are in keep-alive and might get ",
                "// Line 476:  after a previous POST request.*/",
                "// Line 477:         if (http_header_strict) return http_request_missing_CR_before_LF(srv, con);",
                "// Line 478:           #ifdef __COVERITY__",
                "// Line 479:         if (buffer_string_length(con->request.request) < 1) {",
                "// vulnerable line: 480: con->keep_alive = 0;",
                "// vulnerable line: 481: con->http_status = 400;",
                "// vulnerable line: 482: return 0;",
                "// vulnerable line: 483: }",
                "// Line 484:           #endif",
                "// Line 485:         /* coverity[overflow_sink : FALSE] */",
                "// Line 486:         buffer_copy_string_len(con->parse_request, con->request.request->ptr + 1, buffer_string_length(con->request.request) - 1);",
                "// vulnerable line: 487: } else {",
                "// Line 488:         /* fill the local request buffer */",
                "// Line 489:         buffer_copy_buffer(con->parse_request, con->request.request);",
                "// vulnerable line: 490: }",
                "// Line 491: ",
                "// Line 492:     keep_alive_set = 0;",
                "// Line 493:     con_length_set = 0;",
                "// Line 494: ",
                "// Line 495:     /* parse the first line of the request",
                "// Line 496:      *",
                "// Line 497:      * should be:",
                "// Line 498:      *",
                "// Line 499:      * <method> <uri> <protocol>",
                "// Line 500: ",
                "// Line 518: ",
                "// Line 519:                 /* ",
                "// Line 520:  -> \u0000\u0000 */",
                "// Line 521:                 if (con->parse_request->ptr[i] == '",
                "// Line 522: ') {",
                "// Line 523:                     con->parse_request->ptr[i] = '\u0000';",
                "// Line 524:                     ++i;",
                "// Line 525:                 } else if (http_header_strict) { /* '",
                "// Line 526: ' */",
                "// Line 527:                     return http_request_missing_CR_before_LF(srv, con);",
                "// vulnerable line: 528: }",
                "// Line 529:                 con->parse_request->ptr[i] = '\u0000';",
                "// Line 530: ",
                "// Line 531:                 if (request_line_stage != 2) {",
                "// vulnerable line: 532: con->http_status = 400;",
                "// Line 533:                     con->response.keep_alive = 0;",
                "// vulnerable line: 534: con->keep_alive = 0;",
                "// Line 535: ",
                "// vulnerable line: 536: if (srv->srvconf.log_request_header_on_error) {",
                "// Line 537:                         log_error_write(srv, __FILE__, __LINE__, \"s\", \"incomplete request line -> 400\");",
                "// vulnerable line: 538: log_error_write(srv, __FILE__, __LINE__, \"Sb\",",
                "// Line 539:                                 \"request-header:",
                "// Line 540: \",",
                "// vulnerable line: 541: con->request.request);",
                "// vulnerable line: 542: }",
                "// vulnerable line: 543: return 0;",
                "// vulnerable line: 544: }",
                "// Line 545: ",
                "// Line 546:                 proto = con->parse_request->ptr + first;",
                "// Line 547: ",
                "// Line 548:                 *(uri - 1) = '\u0000';",
                "// Line 549:                 *(proto - 1) = '\u0000';",
                "// Line 550: ",
                "// Line 551:                 /* we got the first one :) */",
                "// Line 552:                 if (HTTP_METHOD_UNSET == (r = get_http_method_key(method))) {",
                "// Line 553:                     con->http_status = 501;",
                "// Line 554:                     con->response.keep_alive = 0;",
                "// vulnerable line: 555: con->keep_alive = 0;",
                "// Line 556: ",
                "// vulnerable line: 557: if (srv->srvconf.log_request_header_on_error) {",
                "// Line 558:                         log_error_write(srv, __FILE__, __LINE__, \"s\", \"unknown http-method -> 501\");",
                "// vulnerable line: 559: log_error_write(srv, __FILE__, __LINE__, \"Sb\",",
                "// Line 560:                                 \"request-header:",
                "// Line 561: \",",
                "// vulnerable line: 562: con->request.request);",
                "// vulnerable line: 563: }",
                "// Line 564: ",
                "// vulnerable line: 565: return 0;",
                "// vulnerable line: 566: }",
                "// Line 567: ",
                "// Line 568:                 con->request.http_method = r;",
                "// Line 569: ",
                "// Line 570:                 /*",
                "// Line 571:                  * RFC2616 says:",
                "// Line 572:                  *",
                "// Line 573:                  * HTTP-Version   = \"HTTP\" \"/\" 1*DIGIT \".\" 1*DIGIT",
                "// Line 574:                  *",
                "// Line 575:                  * */",
                "// Line 576:                 if (0 == strncmp(proto, \"HTTP/\", sizeof(\"HTTP/\") - 1)) {",
                "// Line 578:                     char * minor = strchr(major, '.');",
                "// Line 579:                     char *err = NULL;",
                "// Line 580:                     int major_num = 0, minor_num = 0;",
                "// Line 581: ",
                "// Line 582:                     int invalid_version = 0;",
                "// Line 583: ",
                "// Line 584:                     if (NULL == minor || /* no dot */",
                "// Line 585:                         minor == major || /* no major */",
                "// Line 586:                         *(minor + 1) == '\u0000' /* no minor */) {",
                "// Line 587:                         invalid_version = 1;",
                "// vulnerable line: 588: } else {",
                "// Line 589:                         *minor = '\u0000';",
                "// Line 590:                         major_num = strtol(major, &err, 10);",
                "// Line 591: ",
                "// Line 592:                         if (*err != '\u0000') invalid_version = 1;",
                "// Line 593: ",
                "// Line 594:                         *minor++ = '.';",
                "// Line 595:                         minor_num = strtol(minor, &err, 10);",
                "// Line 596: ",
                "// Line 597:                         if (*err != '\u0000') invalid_version = 1;",
                "// vulnerable line: 598: }",
                "// Line 599: ",
                "// Line 600:                     if (invalid_version) {",
                "// vulnerable line: 601: con->http_status = 400;",
                "// vulnerable line: 602: con->keep_alive = 0;",
                "// Line 603: ",
                "// vulnerable line: 604: if (srv->srvconf.log_request_header_on_error) {",
                "// Line 605:                             log_error_write(srv, __FILE__, __LINE__, \"s\", \"unknown protocol -> 400\");",
                "// vulnerable line: 606: log_error_write(srv, __FILE__, __LINE__, \"Sb\",",
                "// Line 607:                                     \"request-header:",
                "// Line 608: \",",
                "// vulnerable line: 609: con->request.request);",
                "// vulnerable line: 610: }",
                "// vulnerable line: 611: return 0;",
                "// vulnerable line: 612: }",
                "// Line 613: ",
                "// Line 614:                     if (major_num == 1 && minor_num == 1) {",
                "// Line 615:                         con->request.http_version = con->conf.allow_http11 ? HTTP_VERSION_1_1 : HTTP_VERSION_1_0;",
                "// Line 616:                     } else if (major_num == 1 && minor_num == 0) {",
                "// Line 617:                         con->request.http_version = HTTP_VERSION_1_0;",
                "// vulnerable line: 618: } else {",
                "// Line 619:                         con->http_status = 505;",
                "// Line 620: ",
                "// vulnerable line: 621: if (srv->srvconf.log_request_header_on_error) {",
                "// Line 622:                             log_error_write(srv, __FILE__, __LINE__, \"s\", \"unknown HTTP version -> 505\");",
                "// vulnerable line: 623: log_error_write(srv, __FILE__, __LINE__, \"Sb\",",
                "// Line 624:                                     \"request-header:",
                "// Line 625: \",",
                "// vulnerable line: 626: con->request.request);",
                "// vulnerable line: 627: }",
                "// vulnerable line: 628: return 0;",
                "// vulnerable line: 629: }",
                "// vulnerable line: 630: } else {",
                "// vulnerable line: 631: con->http_status = 400;",
                "// vulnerable line: 632: con->keep_alive = 0;",
                "// Line 633: ",
                "// vulnerable line: 634: if (srv->srvconf.log_request_header_on_error) {",
                "// Line 635:                         log_error_write(srv, __FILE__, __LINE__, \"s\", \"unknown protocol -> 400\");",
                "// vulnerable line: 636: log_error_write(srv, __FILE__, __LINE__, \"Sb\",",
                "// Line 637:                                 \"request-header:",
                "// Line 638: \",",
                "// vulnerable line: 639: con->request.request);",
                "// vulnerable line: 640: }",
                "// vulnerable line: 641: return 0;",
                "// vulnerable line: 642: }",
                "// Line 643: ",
                "// Line 644:                 if (*uri == '/') {",
                "// Line 645:                     /* (common case) */",
                "// Line 646:                     buffer_copy_string_len(con->request.uri, uri, proto - uri - 1);",
                "// Line 647:                 } else if (0 == strncasecmp(uri, \"http://\", 7) &&",
                "// Line 648:                     NULL != (nuri = strchr(uri + 7, '/'))) {",
                "// Line 649:                     reqline_host = uri + 7;",
                "// Line 650:                     reqline_hostlen = nuri - reqline_host;",
                "// Line 651: ",
                "// Line 652:                     buffer_copy_string_len(con->request.uri, nuri, proto - nuri - 1);",
                "// Line 654:                     NULL != (nuri = strchr(uri + 8, '/'))) {",
                "// Line 655:                     reqline_host = uri + 8;",
                "// Line 656:                     reqline_hostlen = nuri - reqline_host;",
                "// Line 657: ",
                "// Line 658:                     buffer_copy_string_len(con->request.uri, nuri, proto - nuri - 1);",
                "// Line 659:                 } else if (!http_header_strict",
                "// Line 660:                        || (HTTP_METHOD_CONNECT == con->request.http_method && (uri[0] == ':' || light_isdigit(uri[0])))",
                "// Line 661:                        || (HTTP_METHOD_OPTIONS == con->request.http_method && uri[0] == '*' && uri[1] == '\u0000')) {",
                "// Line 662:                     /* everything looks good so far */",
                "// Line 663:                     buffer_copy_string_len(con->request.uri, uri, proto - uri - 1);",
                "// vulnerable line: 664: } else {",
                "// vulnerable line: 665: con->http_status = 400;",
                "// vulnerable line: 666: con->keep_alive = 0;",
                "// Line 667:                     log_error_write(srv, __FILE__, __LINE__, \"ss\", \"request-URI parse error -> 400 for:\", uri);",
                "// vulnerable line: 668: return 0;",
                "// vulnerable line: 669: }",
                "// Line 670: ",
                "// Line 671:                 /* check uri for invalid characters */",
                "// Line 672:                 jlen = buffer_string_length(con->request.uri);",
                "// Line 673:                 if ((con->conf.http_parseopts & HTTP_PARSEOPT_URL_NORMALIZE_CTRLS_REJECT)) {",
                "// Line 674:                     j = jlen; /* URI will be checked in http_response_prepare() */",
                "// Line 675:                 } else if (http_header_strict) {",
                "// Line 676:                     for (j = 0; j < jlen && request_uri_is_valid_char(con->request.uri->ptr[j]); j++) ;",
                "// vulnerable line: 677: } else {",
                "// Line 678:                     char *z = memchr(con->request.uri->ptr, '\u0000', jlen);",
                "// Line 679:                     j = (NULL == z) ? jlen : (size_t)(z - con->request.uri->ptr);",
                "// vulnerable line: 680: }",
                "// Line 681:                 if (j < jlen) {",
                "// vulnerable line: 682: con->http_status = 400;",
                "// vulnerable line: 683: con->keep_alive = 0;",
                "// Line 684: ",
                "// vulnerable line: 685: if (srv->srvconf.log_request_header_on_error) {",
                "// Line 686:                             unsigned char buf[2];",
                "// Line 687:                             buf[0] = con->request.uri->ptr[j];",
                "// Line 688:                             buf[1] = '\u0000';",
                "// Line 689: ",
                "// Line 690:                             if (con->request.uri->ptr[j] > 32 &&",
                "// Line 691:                                 con->request.uri->ptr[j] != 127) {",
                "// Line 692:                                 /* the character is printable -> print it */",
                "// Line 693:                                 log_error_write(srv, __FILE__, __LINE__, \"ss\",",
                "// Line 694:                                         \"invalid character in URI -> 400\",",
                "// Line 695:                                         buf);",
                "// vulnerable line: 696: } else {",
                "// Line 697:                                 /* a control-character, print ascii-code */",
                "// Line 698:                                 log_error_write(srv, __FILE__, __LINE__, \"sd\",",
                "// Line 699:                                         \"invalid character in URI -> 400\",",
                "// Line 700:                                         con->request.uri->ptr[j]);",
                "// vulnerable line: 701: }",
                "// Line 702: ",
                "// vulnerable line: 703: log_error_write(srv, __FILE__, __LINE__, \"Sb\",",
                "// Line 704:                                     \"request-header:",
                "// Line 705: \",",
                "// vulnerable line: 706: con->request.request);",
                "// vulnerable line: 707: }",
                "// Line 708: ",
                "// vulnerable line: 709: return 0;",
                "// vulnerable line: 710: }",
                "// Line 711: ",
                "// Line 712:                 buffer_copy_buffer(con->request.orig_uri, con->request.uri);",
                "// Line 713: ",
                "// Line 714:                 con->http_status = 0;",
                "// Line 715: ",
                "// Line 716:                 line++;",
                "// Line 717:                 first = i+1;",
                "// vulnerable line: 718: }",
                "// Line 719:             break;",
                "// Line 720:         case ' ':",
                "// Line 721:             switch(request_line_stage) {",
                "// Line 722:             case 0:",
                "// Line 723:                 /* GET|POST|... */",
                "// Line 724:                 method = con->parse_request->ptr + first;",
                "// Line 725:                 first = i + 1;",
                "// Line 726:                 break;",
                "// Line 727:             case 1:",
                "// Line 728:                 /* /foobar/... */",
                "// Line 729:                 uri = con->parse_request->ptr + first;",
                "// Line 730:                 first = i + 1;",
                "// Line 731:                 break;",
                "// Line 732:             default:",
                "// Line 733:                 /* ERROR, one space to much */",
                "// vulnerable line: 734: con->http_status = 400;",
                "// Line 735:                 con->response.keep_alive = 0;",
                "// vulnerable line: 736: con->keep_alive = 0;",
                "// Line 737: ",
                "// vulnerable line: 738: if (srv->srvconf.log_request_header_on_error) {",
                "// Line 739:                     log_error_write(srv, __FILE__, __LINE__, \"s\", \"overlong request line -> 400\");",
                "// vulnerable line: 740: log_error_write(srv, __FILE__, __LINE__, \"Sb\",",
                "// Line 741:                             \"request-header:",
                "// Line 742: \",",
                "// vulnerable line: 743: con->request.request);",
                "// vulnerable line: 744: }",
                "// vulnerable line: 745: return 0;",
                "// vulnerable line: 746: }",
                "// Line 747: ",
                "// Line 748:             request_line_stage++;",
                "// Line 749:             break;",
                "// vulnerable line: 750: }",
                "// vulnerable line: 751: }",
                "// Line 752: ",
                "// Line 753:     in_folding = 0;",
                "// Line 754: ",
                "// Line 755:     if (buffer_string_is_empty(con->request.uri)) {",
                "// vulnerable line: 756: con->http_status = 400;",
                "// Line 757:         con->response.keep_alive = 0;",
                "// vulnerable line: 758: con->keep_alive = 0;",
                "// Line 759: ",
                "// vulnerable line: 760: if (srv->srvconf.log_request_header_on_error) {",
                "// Line 761:             log_error_write(srv, __FILE__, __LINE__, \"s\", \"no uri specified -> 400\");",
                "// vulnerable line: 762: log_error_write(srv, __FILE__, __LINE__, \"Sb\",",
                "// Line 763:                             \"request-header:",
                "// Line 764: \",",
                "// vulnerable line: 765: con->request.request);",
                "// vulnerable line: 766: }",
                "// vulnerable line: 767: return 0;",
                "// vulnerable line: 768: }",
                "// Line 769: ",
                "// Line 770:     if (reqline_host) {",
                "// Line 771:         /* Insert as host header */",
                "// Line 772:         data_string *ds;",
                "// Line 773: ",
                "// Line 774:         if (NULL == (ds = (data_string *)array_get_unused_element(con->request.headers, TYPE_STRING))) {",
                "// Line 775:             ds = data_string_init();",
                "// vulnerable line: 776: }",
                "// Line 777: ",
                "// Line 778:         buffer_copy_string_len(ds->key, CONST_STR_LEN(\"Host\"));",
                "// Line 779:         buffer_copy_string_len(ds->value, reqline_host, reqline_hostlen);",
                "// vulnerable line: 780: array_insert_unique(con->request.headers, (data_unset *)ds);",
                "// Line 781:         con->request.http_host = ds->value;",
                "// vulnerable line: 782: }",
                "// Line 783: ",
                "// Line 784:     for (; i <= ilen && !done; i++) {",
                "// Line 785:         char *cur = con->parse_request->ptr + i;",
                "// Line 786: ",
                "// Line 787:         if (is_key) {",
                "// Line 788:             size_t j;",
                "// Line 789:             int got_colon = 0;",
                "// Line 790: ",
                "// Line 791:             /**",
                "// Line 792:              * 1*<any CHAR except CTLs or separators>",
                "// Line 794:              *",
                "// Line 795:              */",
                "// Line 796:             switch(*cur) {",
                "// Line 797:             case ':':",
                "// Line 798:                 is_key = 0;",
                "// Line 799: ",
                "// Line 800:                 value = cur + 1;",
                "// Line 801: ",
                "// Line 802:                 if (is_ws_after_key == 0) {",
                "// Line 803:                     key_len = i - first;",
                "// vulnerable line: 804: }",
                "// Line 805:                 is_ws_after_key = 0;",
                "// Line 806: ",
                "// Line 807:                 break;",
                "// Line 808:             case '(':",
                "// Line 809:             case ')':",
                "// Line 810:             case '<':",
                "// Line 811:             case '>':",
                "// Line 812:             case '@':",
                "// Line 813:             case ',':",
                "// Line 814:             case ';':",
                "// Line 815:             case '':",
                "// Line 816:             case '\"':",
                "// Line 817:             case '/':",
                "// Line 818:             case '[':",
                "// Line 819:             case ']':",
                "// Line 820:             case '?':",
                "// Line 821:             case '=':",
                "// Line 822:             case '{':",
                "// Line 823:             case '}':",
                "// vulnerable line: 824: con->http_status = 400;",
                "// vulnerable line: 825: con->keep_alive = 0;",
                "// Line 826:                 con->response.keep_alive = 0;",
                "// Line 827: ",
                "// vulnerable line: 828: if (srv->srvconf.log_request_header_on_error) {",
                "// Line 829:                     log_error_write(srv, __FILE__, __LINE__, \"sbsds\",",
                "// Line 830:                         \"invalid character in key\", con->request.request, cur, *cur, \"-> 400\");",
                "// Line 831: ",
                "// vulnerable line: 832: log_error_write(srv, __FILE__, __LINE__, \"Sb\",",
                "// Line 833:                         \"request-header:",
                "// Line 834: \",",
                "// vulnerable line: 835: con->request.request);",
                "// vulnerable line: 836: }",
                "// vulnerable line: 837: return 0;",
                "// Line 838:             case ' ':",
                "// Line 839:             case '    ':",
                "// Line 840:                 if (i == first) {",
                "// Line 841:                     is_key = 0;",
                "// Line 842:                     in_folding = 1;",
                "// Line 843:                     value = cur;",
                "// Line 844: ",
                "// Line 845:                     break;",
                "// vulnerable line: 846: }",
                "// Line 847: ",
                "// Line 848: ",
                "// Line 849:                 key_len = i - first;",
                "// Line 850: ",
                "// Line 851:                 /* skip every thing up to the : */",
                "// Line 852:                 for (j = 1; !got_colon; j++) {",
                "// Line 853:                     switch(con->parse_request->ptr[j + i]) {",
                "// Line 854:                     case ' ':",
                "// Line 855:                     case '    ':",
                "// Line 856:                         /* skip WS */",
                "// Line 859:                         /* ok, done; handle the colon the usual way */",
                "// Line 860: ",
                "// Line 861:                         i += j - 1;",
                "// Line 862:                         got_colon = 1;",
                "// Line 863:                         is_ws_after_key = 1; /* we already know the key length */",
                "// Line 864: ",
                "// Line 865:                         break;",
                "// Line 866:                     default:",
                "// Line 867:                         /* error */",
                "// Line 868: ",
                "// vulnerable line: 869: if (srv->srvconf.log_request_header_on_error) {",
                "// Line 870:                             log_error_write(srv, __FILE__, __LINE__, \"s\", \"WS character in key -> 400\");",
                "// vulnerable line: 871: log_error_write(srv, __FILE__, __LINE__, \"Sb\",",
                "// Line 872:                                 \"request-header:",
                "// Line 873: \",",
                "// vulnerable line: 874: con->request.request);",
                "// vulnerable line: 875: }",
                "// Line 876: ",
                "// vulnerable line: 877: con->http_status = 400;",
                "// Line 878:                         con->response.keep_alive = 0;",
                "// vulnerable line: 879: con->keep_alive = 0;",
                "// Line 880: ",
                "// vulnerable line: 881: return 0;",
                "// vulnerable line: 882: }",
                "// vulnerable line: 883: }",
                "// Line 884: ",
                "// Line 885:                 break;",
                "// Line 886:             case '",
                "// Line 887: ':",
                "// Line 888:                 if (con->parse_request->ptr[i+1] == '",
                "// Line 889: ' && i == first) {",
                "// Line 890:                     /* End of Header */",
                "// Line 891:                     con->parse_request->ptr[i] = '\u0000';",
                "// Line 892:                     con->parse_request->ptr[i+1] = '\u0000';",
                "// Line 893: ",
                "// Line 894:                     i++;",
                "// Line 895: ",
                "// Line 896:                     done = 1;",
                "// vulnerable line: 897: } else {",
                "// vulnerable line: 898: if (srv->srvconf.log_request_header_on_error) {",
                "// Line 899:                         log_error_write(srv, __FILE__, __LINE__, \"s\", \"CR without LF -> 400\");",
                "// vulnerable line: 900: log_error_write(srv, __FILE__, __LINE__, \"Sb\",",
                "// Line 901:                             \"request-header:",
                "// Line 902: \",",
                "// vulnerable line: 903: con->request.request);",
                "// vulnerable line: 904: }",
                "// Line 905: ",
                "// vulnerable line: 906: con->http_status = 400;",
                "// vulnerable line: 907: con->keep_alive = 0;",
                "// Line 908:                     con->response.keep_alive = 0;",
                "// vulnerable line: 909: return 0;",
                "// vulnerable line: 910: }",
                "// Line 911:                 break;",
                "// Line 912:             case '",
                "// Line 913: ':",
                "// Line 914:                 if (http_header_strict) {",
                "// Line 915:                     return http_request_missing_CR_before_LF(srv, con);",
                "// Line 916:                 } else if (i == first) {",
                "// Line 917:                     con->parse_request->ptr[i] = '\u0000';",
                "// Line 918:                     done = 1;",
                "// Line 919:                     break;",
                "// vulnerable line: 920: }",
                "// Line 921:                 /* fall through */",
                "// Line 922:             default:",
                "// Line 923:                 if (http_header_strict ? (*cur < 32 || ((unsigned char)*cur) >= 127) : *cur == '\u0000') {",
                "// vulnerable line: 924: con->http_status = 400;",
                "// vulnerable line: 925: con->keep_alive = 0;",
                "// Line 926:                     con->response.keep_alive = 0;",
                "// Line 927: ",
                "// vulnerable line: 928: if (srv->srvconf.log_request_header_on_error) {",
                "// Line 929:                         log_error_write(srv, __FILE__, __LINE__, \"sbsds\",",
                "// Line 930:                             \"invalid character in key\", con->request.request, cur, *cur, \"-> 400\");",
                "// Line 931: ",
                "// vulnerable line: 932: log_error_write(srv, __FILE__, __LINE__, \"Sb\",",
                "// Line 933:                             \"request-header:",
                "// Line 934: \",",
                "// vulnerable line: 935: con->request.request);",
                "// vulnerable line: 936: }",
                "// Line 937: ",
                "// vulnerable line: 938: return 0;",
                "// vulnerable line: 939: }",
                "// Line 940:                 /* ok */",
                "// Line 941:                 break;",
                "// vulnerable line: 942: }",
                "// vulnerable line: 943: } else {",
                "// Line 944:             switch(*cur) {",
                "// Line 945:             case '",
                "// Line 946: ':",
                "// Line 947:             case '",
                "// Line 948: ':",
                "// Line 949:                 if (*cur == '",
                "// Line 950: ' || con->parse_request->ptr[i+1] == '",
                "// Line 951: ') {",
                "// Line 952:                     data_string *ds = NULL;",
                "// Line 953:                     if (*cur == '",
                "// Line 954: ') {",
                "// Line 955:                         if (http_header_strict) return http_request_missing_CR_before_LF(srv, con);",
                "// Line 956:                     } else { /* (con->parse_request->ptr[i+1] == '",
                "// Line 957: ') */",
                "// Line 958:                         con->parse_request->ptr[i] = '\u0000';",
                "// Line 959:                         ++i;",
                "// vulnerable line: 960: }",
                "// Line 961: ",
                "// Line 962:                     /* End of Headerline */",
                "// Line 963:                     con->parse_request->ptr[i] = '\u0000';",
                "// Line 964: ",
                "// Line 965:                     if (in_folding) {",
                "// Line 966:                         /**",
                "// Line 967:                          * we use a evil hack to handle the line-folding",
                "// Line 968:                          * ",
                "// Line 969:                          * As array_insert_unique() deletes 'ds' in the case of a duplicate",
                "// Line 970:                          * ds points somewhere and we get a evil crash. As a solution we keep the old",
                "// Line 971:                          * \"key\" and get the current value from the hash and append us",
                "// Line 972:                          *",
                "// Line 973:                          * */",
                "// Line 974: ",
                "// Line 975:                         if (!key || !key_len) {",
                "// Line 976:                             /* 400 */",
                "// Line 977: ",
                "// vulnerable line: 978: if (srv->srvconf.log_request_header_on_error) {",
                "// Line 979:                                 log_error_write(srv, __FILE__, __LINE__, \"s\", \"WS at the start of first line -> 400\");",
                "// Line 980: ",
                "// vulnerable line: 981: log_error_write(srv, __FILE__, __LINE__, \"Sb\",",
                "// Line 982:                                     \"request-header:",
                "// Line 983: \",",
                "// vulnerable line: 984: con->request.request);",
                "// vulnerable line: 985: }",
                "// Line 986: ",
                "// Line 987: ",
                "// vulnerable line: 988: con->http_status = 400;",
                "// vulnerable line: 989: con->keep_alive = 0;",
                "// Line 990:                             con->response.keep_alive = 0;",
                "// vulnerable line: 991: return 0;",
                "// vulnerable line: 992: }",
                "// Line 993: ",
                "// Line 994:                         if (NULL != (ds = (data_string *)array_get_element_klen(con->request.headers, key, key_len))) {",
                "// Line 995:                             buffer_append_string(ds->value, value);",
                "// vulnerable line: 996: }",
                "// vulnerable line: 997: } else {",
                "// Line 998:                         int s_len;",
                "// Line 999:                         key = con->parse_request->ptr + first;",
                "// Line 1000: ",
                "// Line 1001:                         s_len = cur - value;",
                "// Line 1002: ",
                "// Line 1003:                         /* strip trailing white-spaces */",
                "// Line 1004:                         for (; s_len > 0 && ",
                "// Line 1005:                                 (value[s_len - 1] == ' ' || ",
                "// Line 1006:                                  value[s_len - 1] == '    '); s_len--);",
                "// Line 1007: ",
                "// Line 1008:                         value[s_len] = '\u0000';",
                "// Line 1009: ",
                "// Line 1010:                         if (s_len > 0) {",
                "// Line 1011:                             int cmp = 0;",
                "// Line 1012:                             if (NULL == (ds = (data_string *)array_get_unused_element(con->request.headers, TYPE_STRING))) {",
                "// Line 1013:                                 ds = data_string_init();",
                "// vulnerable line: 1014: }",
                "// Line 1015:                             buffer_copy_string_len(ds->key, key, key_len);",
                "// Line 1016:                             buffer_copy_string_len(ds->value, value, s_len);",
                "// Line 1017: ",
                "// Line 1018:                             /* retreive values",
                "// Line 1019:                              *",
                "// Line 1020:                              *",
                "// Line 1021:                              * the list of options is sorted to simplify the search",
                "// Line 1022:                              */",
                "// Line 1023: ",
                "// Line 1024:                             if (0 == (cmp = buffer_caseless_compare(CONST_BUF_LEN(ds->key), CONST_STR_LEN(\"Connection\")))) {",
                "// Line 1037:                                     data_string *dsv = (data_string *)vals->data[vi];",
                "// Line 1038: ",
                "// Line 1039:                                     if (0 == buffer_caseless_compare(CONST_BUF_LEN(dsv->value), CONST_STR_LEN(\"keep-alive\"))) {",
                "// Line 1040:                                         keep_alive_set = HTTP_CONNECTION_KEEPALIVE;",
                "// Line 1041: ",
                "// Line 1042:                                         break;",
                "// Line 1043:                                     } else if (0 == buffer_caseless_compare(CONST_BUF_LEN(dsv->value), CONST_STR_LEN(\"close\"))) {",
                "// Line 1044:                                         keep_alive_set = HTTP_CONNECTION_CLOSE;",
                "// Line 1045: ",
                "// Line 1046:                                         break;",
                "// vulnerable line: 1047: }",
                "// vulnerable line: 1048: }",
                "// Line 1049: ",
                "// Line 1050:                             } else if (cmp > 0 && 0 == (cmp = buffer_caseless_compare(CONST_BUF_LEN(ds->key), CONST_STR_LEN(\"Content-Length\")))) {",
                "// Line 1051:                                 char *err;",
                "// Line 1052:                                 off_t r;",
                "// Line 1053: ",
                "// Line 1054:                                 if (con_length_set) {",
                "// vulnerable line: 1055: con->http_status = 400;",
                "// vulnerable line: 1056: con->keep_alive = 0;",
                "// Line 1057: ",
                "// vulnerable line: 1058: if (srv->srvconf.log_request_header_on_error) {",
                "// vulnerable line: 1059: log_error_write(srv, __FILE__, __LINE__, \"s\",",
                "// Line 1060:                                                 \"duplicate Content-Length-header -> 400\");",
                "// vulnerable line: 1061: log_error_write(srv, __FILE__, __LINE__, \"Sb\",",
                "// Line 1062:                                                 \"request-header:",
                "// Line 1063: \",",
                "// vulnerable line: 1064: con->request.request);",
                "// vulnerable line: 1065: }",
                "// vulnerable line: 1066: array_insert_unique(con->request.headers, (data_unset *)ds);",
                "// vulnerable line: 1067: return 0;",
                "// vulnerable line: 1068: }",
                "// Line 1069: ",
                "// Line 1070:                                 r = strtoll(ds->value->ptr, &err, 10);",
                "// Line 1071: ",
                "// Line 1072:                                 if (*err == '\u0000' && r >= 0) {",
                "// Line 1073:                                     con_length_set = 1;",
                "// Line 1074:                                     con->request.content_length = r;",
                "// vulnerable line: 1075: } else {",
                "// Line 1076:                                     log_error_write(srv, __FILE__, __LINE__, \"sbs\",",
                "// Line 1077:                                             \"content-length broken:\", ds->value, \"-> 400\");",
                "// Line 1078: ",
                "// vulnerable line: 1079: con->http_status = 400;",
                "// vulnerable line: 1080: con->keep_alive = 0;",
                "// Line 1081: ",
                "// vulnerable line: 1082: array_insert_unique(con->request.headers, (data_unset *)ds);",
                "// vulnerable line: 1083: return 0;",
                "// vulnerable line: 1084: }",
                "// Line 1085:                             } else if (cmp > 0 && 0 == (cmp = buffer_caseless_compare(CONST_BUF_LEN(ds->key), CONST_STR_LEN(\"Content-Type\")))) {",
                "// vulnerable line: 1086: /* if dup, only the first one will survive */",
                "// Line 1087:                                 if (!con->request.http_content_type) {",
                "// Line 1088:                                     con->request.http_content_type = ds->value->ptr;",
                "// vulnerable line: 1089: } else {",
                "// vulnerable line: 1090: con->http_status = 400;",
                "// vulnerable line: 1091: con->keep_alive = 0;",
                "// Line 1092: ",
                "// vulnerable line: 1093: if (srv->srvconf.log_request_header_on_error) {",
                "// vulnerable line: 1094: log_error_write(srv, __FILE__, __LINE__, \"s\",",
                "// Line 1095:                                                 \"duplicate Content-Type-header -> 400\");",
                "// vulnerable line: 1096: log_error_write(srv, __FILE__, __LINE__, \"Sb\",",
                "// Line 1097:                                                 \"request-header:",
                "// Line 1098: \",",
                "// vulnerable line: 1099: con->request.request);",
                "// vulnerable line: 1100: }",
                "// vulnerable line: 1101: array_insert_unique(con->request.headers, (data_unset *)ds);",
                "// vulnerable line: 1102: return 0;",
                "// vulnerable line: 1103: }",
                "// Line 1104:                             } else if (cmp > 0 && 0 == (cmp = buffer_caseless_compare(CONST_BUF_LEN(ds->key), CONST_STR_LEN(\"Host\")))) {",
                "// Line 1105:                                 if (reqline_host) {",
                "// Line 1106:                                     /* ignore all host: headers as we got the host in the request line */",
                "// Line 1107:                                     ds->free((data_unset*) ds);",
                "// Line 1108:                                     ds = NULL;",
                "// Line 1109:                                 } else if (!con->request.http_host) {",
                "// Line 1110:                                     con->request.http_host = ds->value;",
                "// vulnerable line: 1111: } else {",
                "// vulnerable line: 1112: con->http_status = 400;",
                "// vulnerable line: 1113: con->keep_alive = 0;",
                "// Line 1114: ",
                "// vulnerable line: 1115: if (srv->srvconf.log_request_header_on_error) {",
                "// vulnerable line: 1116: log_error_write(srv, __FILE__, __LINE__, \"s\",",
                "// Line 1117:                                                 \"duplicate Host-header -> 400\");",
                "// vulnerable line: 1118: log_error_write(srv, __FILE__, __LINE__, \"Sb\",",
                "// Line 1119:                                                 \"request-header:",
                "// Line 1120: \",",
                "// vulnerable line: 1121: con->request.request);",
                "// vulnerable line: 1122: }",
                "// vulnerable line: 1123: array_insert_unique(con->request.headers, (data_unset *)ds);",
                "// vulnerable line: 1124: return 0;",
                "// vulnerable line: 1125: }",
                "// Line 1126:                             } else if (cmp > 0 && 0 == (cmp = buffer_caseless_compare(CONST_BUF_LEN(ds->key), CONST_STR_LEN(\"If-Modified-Since\")))) {",
                "// Line 1127:                                 /* Proxies sometimes send dup headers",
                "// Line 1128:                                  * if they are the same we ignore the second",
                "// Line 1129:                                  * if not, we raise an error */",
                "// Line 1130:                                 if (!con->request.http_if_modified_since) {",
                "// Line 1131:                                     con->request.http_if_modified_since = ds->value->ptr;",
                "// Line 1132:                                 } else if (0 == strcasecmp(con->request.http_if_modified_since,",
                "// Line 1133:                                             ds->value->ptr)) {",
                "// Line 1134:                                     /* ignore it if they are the same */",
                "// Line 1135: ",
                "// Line 1136:                                     ds->free((data_unset *)ds);",
                "// Line 1137:                                     ds = NULL;",
                "// vulnerable line: 1138: } else {",
                "// vulnerable line: 1139: con->http_status = 400;",
                "// vulnerable line: 1140: con->keep_alive = 0;",
                "// Line 1141: ",
                "// vulnerable line: 1142: if (srv->srvconf.log_request_header_on_error) {",
                "// vulnerable line: 1143: log_error_write(srv, __FILE__, __LINE__, \"s\",",
                "// Line 1144:                                                 \"duplicate If-Modified-Since header -> 400\");",
                "// vulnerable line: 1145: log_error_write(srv, __FILE__, __LINE__, \"Sb\",",
                "// Line 1146:                                                 \"request-header:",
                "// Line 1147: \",",
                "// vulnerable line: 1148: con->request.request);",
                "// vulnerable line: 1149: }",
                "// vulnerable line: 1150: array_insert_unique(con->request.headers, (data_unset *)ds);",
                "// vulnerable line: 1151: return 0;",
                "// vulnerable line: 1152: }",
                "// Line 1153:                             } else if (cmp > 0 && 0 == (cmp = buffer_caseless_compare(CONST_BUF_LEN(ds->key), CONST_STR_LEN(\"If-None-Match\")))) {",
                "// vulnerable line: 1154: /* if dup, only the first one will survive */",
                "// Line 1155:                                 if (!con->request.http_if_none_match) {",
                "// Line 1156:                                     con->request.http_if_none_match = ds->value->ptr;",
                "// vulnerable line: 1157: } else {",
                "// Line 1158:                                     ds->free((data_unset*) ds);",
                "// Line 1159:                                     ds = NULL;",
                "// vulnerable line: 1160: }",
                "// vulnerable line: 1161: } else if (cmp > 0 && 0 == (cmp = buffer_caseless_compare(CONST_BUF_LEN(ds->key), CONST_STR_LEN(\"Range\")))) {",
                "// vulnerable line: 1162: if (!con->request.http_range) {",
                "// vulnerable line: 1163: /* bytes=.*-.* */",
                "// Line 1164: ",
                "// vulnerable line: 1165: if (0 == strncasecmp(ds->value->ptr, \"bytes=\", 6) &&",
                "// vulnerable line: 1166: NULL != strchr(ds->value->ptr+6, '-')) {",
                "// Line 1167: ",
                "// vulnerable line: 1168: /* if dup, only the first one will survive */",
                "// vulnerable line: 1169: con->request.http_range = ds->value->ptr + 6;",
                "// vulnerable line: 1170: }",
                "// vulnerable line: 1171: } else {",
                "// vulnerable line: 1172: con->http_status = 400;",
                "// vulnerable line: 1173: con->keep_alive = 0;",
                "// Line 1174: ",
                "// vulnerable line: 1175: if (srv->srvconf.log_request_header_on_error) {",
                "// vulnerable line: 1176: log_error_write(srv, __FILE__, __LINE__, \"s\",",
                "// vulnerable line: 1177: \"duplicate Range-header -> 400\");",
                "// vulnerable line: 1178: log_error_write(srv, __FILE__, __LINE__, \"Sb\",",
                "// Line 1179:                                                 \"request-header:",
                "// Line 1180: \",",
                "// vulnerable line: 1181: con->request.request);",
                "// vulnerable line: 1182: }",
                "// vulnerable line: 1183: array_insert_unique(con->request.headers, (data_unset *)ds);",
                "// vulnerable line: 1184: return 0;",
                "// vulnerable line: 1185: }",
                "// vulnerable line: 1186: }",
                "// Line 1187: ",
                "// Line 1188:                             if (ds) array_insert_unique(con->request.headers, (data_unset *)ds);",
                "// vulnerable line: 1189: } else {",
                "// Line 1190:                             /* empty header-fields are not allowed by HTTP-RFC, we just ignore them */",
                "// vulnerable line: 1191: }",
                "// vulnerable line: 1192: }",
                "// Line 1193: ",
                "// Line 1194:                     first = i+1;",
                "// Line 1195:                     is_key = 1;",
                "// Line 1196:                     value = NULL;",
                "// Line 1197: #if 0",
                "// Line 1198:                     /**",
                "// Line 1199:                      * for Bug 1230 keep the key_len a live",
                "// Line 1200:                      */",
                "// Line 1201:                     key_len = 0; ",
                "// Line 1202: #endif",
                "// Line 1203:                     in_folding = 0;",
                "// vulnerable line: 1204: } else {",
                "// vulnerable line: 1205: if (srv->srvconf.log_request_header_on_error) {",
                "// Line 1206:                         log_error_write(srv, __FILE__, __LINE__, \"sbs\",",
                "// Line 1207:                                 \"CR without LF\", con->request.request, \"-> 400\");",
                "// vulnerable line: 1208: }",
                "// Line 1209: ",
                "// vulnerable line: 1210: con->http_status = 400;",
                "// vulnerable line: 1211: con->keep_alive = 0;",
                "// Line 1212:                     con->response.keep_alive = 0;",
                "// vulnerable line: 1213: return 0;",
                "// vulnerable line: 1214: }",
                "// Line 1215:                 break;",
                "// Line 1216:             case ' ':",
                "// Line 1217:             case '    ':",
                "// Line 1218:                 /* strip leading WS */",
                "// Line 1219:                 if (value == cur) value = cur+1;",
                "// Line 1220:                 break;",
                "// Line 1221:             default:",
                "// Line 1222:                 if (http_header_strict ? (*cur >= 0 && *cur < 32) : *cur == '\u0000') {",
                "// vulnerable line: 1223: if (srv->srvconf.log_request_header_on_error) {",
                "// Line 1224:                         log_error_write(srv, __FILE__, __LINE__, \"sds\",",
                "// Line 1225:                                 \"invalid char in header\", (int)*cur, \"-> 400\");",
                "// vulnerable line: 1226: }",
                "// Line 1227: ",
                "// vulnerable line: 1228: con->http_status = 400;",
                "// vulnerable line: 1229: con->keep_alive = 0;",
                "// Line 1230: ",
                "// vulnerable line: 1231: return 0;",
                "// vulnerable line: 1232: }",
                "// Line 1233:                 break;",
                "// vulnerable line: 1234: }",
                "// vulnerable line: 1235: }",
                "// vulnerable line: 1236: }",
                "// Line 1237: ",
                "// Line 1238:     con->header_len = i;",
                "// Line 1239: ",
                "// Line 1240:     /* do some post-processing */",
                "// Line 1241: ",
                "// Line 1242:     if (con->request.http_version == HTTP_VERSION_1_1) {",
                "// Line 1243:         if (keep_alive_set != HTTP_CONNECTION_CLOSE) {",
                "// Line 1244:             /* no Connection-Header sent */",
                "// Line 1245: ",
                "// Line 1246:             /* HTTP/1.1 -> keep-alive default TRUE */",
                "// Line 1247:             con->keep_alive = 1;",
                "// vulnerable line: 1248: } else {",
                "// vulnerable line: 1249: con->keep_alive = 0;",
                "// vulnerable line: 1250: }",
                "// Line 1251: ",
                "// Line 1252:         /* RFC 2616, 14.23 */",
                "// Line 1253:         if (con->request.http_host == NULL ||",
                "// Line 1254:             buffer_string_is_empty(con->request.http_host)) {",
                "// vulnerable line: 1255: con->http_status = 400;",
                "// Line 1256:             con->response.keep_alive = 0;",
                "// vulnerable line: 1257: con->keep_alive = 0;",
                "// Line 1258: ",
                "// vulnerable line: 1259: if (srv->srvconf.log_request_header_on_error) {",
                "// Line 1260:                 log_error_write(srv, __FILE__, __LINE__, \"s\", \"HTTP/1.1 but Host missing -> 400\");",
                "// vulnerable line: 1261: log_error_write(srv, __FILE__, __LINE__, \"Sb\",",
                "// Line 1262:                         \"request-header:",
                "// Line 1263: \",",
                "// vulnerable line: 1264: con->request.request);",
                "// vulnerable line: 1265: }",
                "// vulnerable line: 1266: return 0;",
                "// vulnerable line: 1267: }",
                "// vulnerable line: 1268: } else {",
                "// Line 1269:         if (keep_alive_set == HTTP_CONNECTION_KEEPALIVE) {",
                "// Line 1270:             /* no Connection-Header sent */",
                "// Line 1271: ",
                "// Line 1272:             /* HTTP/1.0 -> keep-alive default FALSE  */",
                "// Line 1273:             con->keep_alive = 1;",
                "// vulnerable line: 1274: } else {",
                "// vulnerable line: 1275: con->keep_alive = 0;",
                "// vulnerable line: 1276: }",
                "// vulnerable line: 1277: }",
                "// Line 1278: ",
                "// Line 1279:     /* check hostname field if it is set */",
                "// Line 1280:     if (!buffer_is_empty(con->request.http_host) &&",
                "// Line 1281:         0 != http_request_host_policy(con, con->request.http_host, con->proto)) {",
                "// Line 1282: ",
                "// vulnerable line: 1283: if (srv->srvconf.log_request_header_on_error) {",
                "// vulnerable line: 1284: log_error_write(srv, __FILE__, __LINE__, \"s\",",
                "// Line 1285:                     \"Invalid Hostname -> 400\");",
                "// vulnerable line: 1286: log_error_write(srv, __FILE__, __LINE__, \"Sb\",",
                "// Line 1287:                     \"request-header:",
                "// Line 1288: \",",
                "// vulnerable line: 1289: con->request.request);",
                "// vulnerable line: 1290: }",
                "// Line 1291: ",
                "// vulnerable line: 1292: con->http_status = 400;",
                "// Line 1293:         con->response.keep_alive = 0;",
                "// vulnerable line: 1294: con->keep_alive = 0;",
                "// Line 1295: ",
                "// vulnerable line: 1296: return 0;",
                "// vulnerable line: 1297: }",
                "// Line 1298: ",
                "// Line 1299:     {",
                "// Line 1300:         data_string *ds = (data_string *)array_get_element(con->request.headers, \"Transfer-Encoding\");",
                "// Line 1301:         if (NULL != ds) {",
                "// Line 1302:             if (con->request.http_version == HTTP_VERSION_1_0) {",
                "// vulnerable line: 1303: log_error_write(srv, __FILE__, __LINE__, \"s\",",
                "// Line 1304:                         \"HTTP/1.0 with Transfer-Encoding (bad HTTP/1.0 proxy?) -> 400\");",
                "// vulnerable line: 1305: con->keep_alive = 0;",
                "// Line 1306:                 con->http_status = 400; /* Bad Request */",
                "// vulnerable line: 1307: return 0;",
                "// vulnerable line: 1308: }",
                "// Line 1309: ",
                "// Line 1310:             if (0 != strcasecmp(ds->value->ptr, \"chunked\")) {",
                "// Line 1311:                 /* Transfer-Encoding might contain additional encodings,",
                "// Line 1312:                  * which are not currently supported by lighttpd */",
                "// vulnerable line: 1313: con->keep_alive = 0;",
                "// Line 1314:                 con->http_status = 501; /* Not Implemented */",
                "// vulnerable line: 1315: return 0;",
                "// vulnerable line: 1316: }",
                "// Line 1317: ",
                "// Line 1318:             /* reset value for Transfer-Encoding, a hop-by-hop header,",
                "// Line 1319:              * which must not be blindly forwarded to backends */",
                "// Line 1320:             buffer_reset(ds->value); /* headers with empty values are ignored */",
                "// Line 1321: ",
                "// Line 1322:             con_length_set = 1;",
                "// Line 1323:             con->request.content_length = -1;",
                "// Line 1324: ",
                "// Line 1325:             /*(note: ignore whether or not Content-Length was provided)*/",
                "// Line 1326:             ds = (data_string *)array_get_element(con->request.headers, \"Content-Length\");",
                "// Line 1327:             if (NULL != ds) buffer_reset(ds->value); /* headers with empty values are ignored */",
                "// vulnerable line: 1328: }",
                "// vulnerable line: 1329: }",
                "// Line 1330: ",
                "// Line 1331:     switch(con->request.http_method) {",
                "// Line 1332:     case HTTP_METHOD_GET:",
                "// Line 1333:     case HTTP_METHOD_HEAD:",
                "// Line 1334:         /* content-length is forbidden for those */",
                "// Line 1335:         if (con_length_set && con->request.content_length != 0) {",
                "// Line 1336:             /* content-length is missing */",
                "// vulnerable line: 1337: log_error_write(srv, __FILE__, __LINE__, \"s\",",
                "// Line 1338:                     \"GET/HEAD with content-length -> 400\");",
                "// Line 1339: ",
                "// vulnerable line: 1340: con->keep_alive = 0;",
                "// vulnerable line: 1341: con->http_status = 400;",
                "// vulnerable line: 1342: return 0;",
                "// vulnerable line: 1343: }",
                "// Line 1344:         break;",
                "// Line 1345:     case HTTP_METHOD_POST:",
                "// Line 1346:         /* content-length is required for them */",
                "// Line 1347:         if (!con_length_set) {",
                "// Line 1348:             /* content-length is missing */",
                "// vulnerable line: 1349: log_error_write(srv, __FILE__, __LINE__, \"s\",",
                "// Line 1350:                     \"POST-request, but content-length missing -> 411\");",
                "// Line 1351: ",
                "// vulnerable line: 1352: con->keep_alive = 0;",
                "// Line 1353:             con->http_status = 411;",
                "// vulnerable line: 1354: return 0;",
                "// Line 1355: ",
                "// vulnerable line: 1356: }",
                "// Line 1357:         break;",
                "// Line 1358:     default:",
                "// Line 1359:         break;",
                "// vulnerable line: 1360: }",
                "// Line 1361: ",
                "// Line 1362: ",
                "// Line 1363:     /* check if we have read post data */",
                "// Line 1364:     if (con_length_set) {",
                "// Line 1365:         /* we have content */",
                "// Line 1366:         if (con->request.content_length != 0) {",
                "// Line 1367:             return 1;",
                "// vulnerable line: 1368: }",
                "// vulnerable line: 1369: }",
                "// Line 1370: ",
                "// vulnerable line: 1371: return 0;",
                "// vulnerable line: 1372: }"
            ]
        },
        {
            "filename_of_changes": "test_request.c",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "29",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 6: #include <string.h>",
                "// Line 7: ",
                "// Line 8: #include \"base.h\"",
                "// Line 9: #include \"burl.h\"",
                "// Line 10: ",
                "// Line 11: static void test_request_connection_reset(connection *con)",
                "// Line 12: {",
                "// Line 13:     con->request.http_method = HTTP_METHOD_UNSET;",
                "// Line 14:     con->request.http_version = HTTP_VERSION_UNSET;",
                "// Line 15:     con->request.http_host = NULL;",
                "// vulnerable line: 16: con->request.http_range = NULL;",
                "// Line 17:     con->request.http_content_type = NULL;",
                "// Line 18:     con->request.http_if_modified_since = NULL;",
                "// Line 19:     con->request.http_if_none_match = NULL;",
                "// Line 20:     con->request.content_length = 0;",
                "// Line 21:     con->header_len = 0;",
                "// Line 22:     con->http_status = 0;",
                "// Line 23:     buffer_reset(con->proto);",
                "// Line 24:     buffer_reset(con->parse_request);",
                "// Line 25:     buffer_reset(con->request.request);",
                "// Line 26:     buffer_reset(con->request.request_line);",
                "// Line 108:       \"IPv6 address + port\",",
                "// Line 109:       CONST_STR_LEN(\"GET / HTTP/1.0",
                "// Line 110: \"",
                "// Line 111:                     \"Host: [::1]:80",
                "// Line 112: \"",
                "// Line 113:                     \"",
                "// Line 114: \"));",
                "// Line 115:     assert(buffer_is_equal_string(con->request.http_host,",
                "// Line 116:                                   CONST_STR_LEN(\"[::1]\")));",
                "// Line 117: ",
                "// vulnerable line: 118: run_http_request_parse(srv, con, __LINE__, 400,",
                "// Line 119:       \"directory traversal\",",
                "// Line 120:       CONST_STR_LEN(\"GET / HTTP/1.0",
                "// Line 121: \"",
                "// Line 122:                     \"Host: ../123.org",
                "// Line 123: \"",
                "// Line 124:                     \"",
                "// Line 125: \"));",
                "// Line 126: ",
                "// vulnerable line: 127: run_http_request_parse(srv, con, __LINE__, 400,",
                "// Line 128:       \"leading and trailing dot\",",
                "// Line 129:       CONST_STR_LEN(\"GET / HTTP/1.0",
                "// Line 130: \"",
                "// Line 131:                     \"Host: .jsdh.sfdg.sdfg.",
                "// Line 132: \"",
                "// Line 133:                     \"",
                "// Line 134: \"));",
                "// Line 135: ",
                "// Line 136:     run_http_request_parse(srv, con, __LINE__, 0,",
                "// Line 137:       \"trailing dot is ok\",",
                "// Line 138:       CONST_STR_LEN(\"GET / HTTP/1.0",
                "// Line 139: \"",
                "// Line 140:                     \"Host: jsdh.sfdg.sdfg.",
                "// Line 141: \"",
                "// Line 142:                     \"",
                "// Line 143: \"));",
                "// Line 144:     assert(buffer_is_equal_string(con->request.http_host,",
                "// Line 145:                                   CONST_STR_LEN(\"jsdh.sfdg.sdfg\")));",
                "// Line 146: ",
                "// vulnerable line: 147: run_http_request_parse(srv, con, __LINE__, 400,",
                "// Line 148:       \"leading dot\",",
                "// Line 149:       CONST_STR_LEN(\"GET / HTTP/1.0",
                "// Line 150: \"",
                "// Line 151:                     \"Host: .jsdh.sfdg.sdfg",
                "// Line 152: \"",
                "// Line 153:                     \"",
                "// Line 154: \"));",
                "// Line 155: ",
                "// vulnerable line: 156: run_http_request_parse(srv, con, __LINE__, 400,",
                "// Line 157:       \"two dots\",",
                "// Line 158:       CONST_STR_LEN(\"GET / HTTP/1.0",
                "// Line 159: \"",
                "// Line 160:                     \"Host: jsdh..sfdg.sdfg",
                "// Line 161: \"",
                "// Line 162:                     \"",
                "// Line 163: \"));",
                "// Line 164: ",
                "// vulnerable line: 165: run_http_request_parse(srv, con, __LINE__, 400,",
                "// Line 166:       \"broken port-number\",",
                "// Line 167:       CONST_STR_LEN(\"GET / HTTP/1.0",
                "// Line 168: \"",
                "// Line 169:                     \"Host: jsdh.sfdg.sdfg:asd",
                "// Line 170: \"",
                "// Line 171:                     \"",
                "// Line 172: \"));",
                "// Line 173: ",
                "// vulnerable line: 174: run_http_request_parse(srv, con, __LINE__, 400,",
                "// Line 175:       \"negative port-number\",",
                "// Line 176:       CONST_STR_LEN(\"GET / HTTP/1.0",
                "// Line 177: \"",
                "// Line 178:                     \"Host: jsdh.sfdg.sdfg:-1",
                "// Line 179: \"",
                "// Line 180:                     \"",
                "// Line 181: \"));",
                "// Line 182: ",
                "// vulnerable line: 183: run_http_request_parse(srv, con, __LINE__, 400,",
                "// Line 184:       \"port given but host missing\",",
                "// Line 185:       CONST_STR_LEN(\"GET / HTTP/1.0",
                "// Line 186: \"",
                "// Line 187:                     \"Host: :80",
                "// Line 188: \"",
                "// Line 189:                     \"",
                "// Line 190: \"));",
                "// Line 191: ",
                "// vulnerable line: 192: run_http_request_parse(srv, con, __LINE__, 400,",
                "// Line 193:       \"port and host are broken\",",
                "// Line 194:       CONST_STR_LEN(\"GET / HTTP/1.0",
                "// Line 195: \"",
                "// Line 196:                     \"Host: .jsdh.sfdg.:sdfg.",
                "// Line 197: \"",
                "// Line 198:                     \"",
                "// Line 199: \"));",
                "// Line 200: ",
                "// Line 201:     run_http_request_parse(srv, con, __LINE__, 0,",
                "// Line 202:       \"allowed characters in host-name\",",
                "// Line 203:       CONST_STR_LEN(\"GET / HTTP/1.0",
                "// Line 204: \"",
                "// Line 205:                     \"Host: a.b-c.d123",
                "// Line 206: \"",
                "// Line 207:                     \"",
                "// Line 208: \"));",
                "// Line 209:     assert(buffer_is_equal_string(con->request.http_host,",
                "// Line 210:                                   CONST_STR_LEN(\"a.b-c.d123\")));",
                "// Line 211: ",
                "// vulnerable line: 212: run_http_request_parse(srv, con, __LINE__, 400,",
                "// Line 213:       \"leading dash\",",
                "// Line 214:       CONST_STR_LEN(\"GET / HTTP/1.0",
                "// Line 215: \"",
                "// Line 216:                     \"Host: -a.c",
                "// Line 217: \"",
                "// Line 218:                     \"",
                "// Line 219: \"));",
                "// Line 220: ",
                "// vulnerable line: 221: run_http_request_parse(srv, con, __LINE__, 400,",
                "// Line 222:       \"dot only\",",
                "// Line 223:       CONST_STR_LEN(\"GET / HTTP/1.0",
                "// Line 224: \"",
                "// Line 225:                     \"Host: .",
                "// Line 226: \"",
                "// Line 227:                     \"",
                "// Line 228: \"));",
                "// Line 229: ",
                "// vulnerable line: 230: run_http_request_parse(srv, con, __LINE__, 400,",
                "// Line 231:       \"broken IPv4 address - non-digit\",",
                "// Line 232:       CONST_STR_LEN(\"GET / HTTP/1.0",
                "// Line 233: \"",
                "// Line 234:                     \"Host: a192.168.2.10:1234",
                "// Line 235: \"",
                "// Line 236:                     \"",
                "// Line 237: \"));",
                "// Line 238: ",
                "// vulnerable line: 239: run_http_request_parse(srv, con, __LINE__, 400,",
                "// Line 240:       \"broken IPv4 address - too short\",",
                "// Line 241:       CONST_STR_LEN(\"GET / HTTP/1.0",
                "// Line 242: \"",
                "// Line 243:                     \"Host: 192.168.2:1234",
                "// Line 244: \"",
                "// Line 245:                     \"",
                "// Line 246: \"));",
                "// Line 247: ",
                "// vulnerable line: 248: run_http_request_parse(srv, con, __LINE__, 400,",
                "// Line 249:       \"IPv6 address + SQL injection\",",
                "// Line 250:       CONST_STR_LEN(\"GET / HTTP/1.0",
                "// Line 251: \"",
                "// Line 252:                     \"Host: [::1]' UNION SELECT '/",
                "// Line 253: \"",
                "// Line 254:                     \"",
                "// Line 255: \"));",
                "// Line 256: ",
                "// vulnerable line: 257: run_http_request_parse(srv, con, __LINE__, 400,",
                "// Line 258:       \"IPv6 address + path traversal\",",
                "// Line 259:       CONST_STR_LEN(\"GET / HTTP/1.0",
                "// Line 260: \"",
                "// Line 261:                     \"Host: [::1]/../../../",
                "// Line 262: \"",
                "// Line 263:                     \"",
                "// Line 264: \"));",
                "// Line 265: ",
                "// vulnerable line: 266: run_http_request_parse(srv, con, __LINE__, 400,",
                "// Line 267:       \"negative Content-Length\",",
                "// Line 268:       CONST_STR_LEN(\"POST /12345.txt HTTP/1.0",
                "// Line 269: \"",
                "// Line 270:                     \"Content-Length: -2",
                "// Line 271: \"",
                "// Line 272:                     \"",
                "// Line 273: \"));",
                "// Line 274: ",
                "// Line 275:     run_http_request_parse(srv, con, __LINE__, 411,",
                "// Line 276:       \"Content-Length is empty\",",
                "// Line 277:       CONST_STR_LEN(\"POST /12345.txt HTTP/1.0",
                "// Line 278: \"",
                "// Line 279:                     \"Host: 123.example.org",
                "// Line 280: \"",
                "// Line 281:                     \"Content-Length:",
                "// Line 282: \"",
                "// Line 283:                     \"",
                "// Line 284: \"));",
                "// Line 285: ",
                "// vulnerable line: 286: run_http_request_parse(srv, con, __LINE__, 400,",
                "// Line 287:       \"Host missing\",",
                "// Line 288:       CONST_STR_LEN(\"GET / HTTP/1.1",
                "// Line 289: \"",
                "// Line 290:                     \"",
                "// Line 291: \"));",
                "// Line 292: ",
                "// vulnerable line: 293: run_http_request_parse(srv, con, __LINE__, 400,",
                "// Line 294:       \"empty request-URI\",",
                "// Line 295:       CONST_STR_LEN(\"GET  HTTP/1.0",
                "// Line 296: \"",
                "// Line 297:                     \"",
                "// Line 298: \"));",
                "// Line 299: ",
                "// Line 300:     run_http_request_parse(srv, con, __LINE__, 0,",
                "// Line 301:       \"#1232 - duplicate headers with line-wrapping\",",
                "// Line 302:       CONST_STR_LEN(\"GET / HTTP/1.0",
                "// Line 303: \"",
                "// Line 342: \"",
                "// Line 343:                     \"  baz",
                "// Line 344: \"",
                "// Line 345:                     \"",
                "// Line 346: \"));",
                "// Line 347:     ds = (data_string *)",
                "// Line 348:       array_get_element_klen(con->request.headers, CONST_STR_LEN(\"Location\"));",
                "// Line 349:     assert(ds",
                "// Line 350:            && buffer_is_equal_string(ds->value, CONST_STR_LEN(\"foobar  baz\")));",
                "// Line 351: ",
                "// vulnerable line: 352: run_http_request_parse(srv, con, __LINE__, 400,",
                "// Line 353:       \"missing protocol\",",
                "// Line 354:       CONST_STR_LEN(\"GET /",
                "// Line 355: \"",
                "// Line 356:                     \"",
                "// Line 357: \"));",
                "// Line 358: ",
                "// Line 359:     run_http_request_parse(srv, con, __LINE__, 0,",
                "// Line 360:       \"zeros in protocol version\",",
                "// Line 361:       CONST_STR_LEN(\"GET / HTTP/01.01",
                "// Line 362: \"",
                "// Line 363:                     \"Host: foo",
                "// Line 364: \"",
                "// Line 365:                     \"",
                "// Line 366: \"));",
                "// Line 367:     assert(con->request.http_version == HTTP_VERSION_1_1);",
                "// Line 368: ",
                "// vulnerable line: 369: run_http_request_parse(srv, con, __LINE__, 400,",
                "// Line 370:       \"missing major version\",",
                "// Line 371:       CONST_STR_LEN(\"GET / HTTP/.01",
                "// Line 372: \"",
                "// Line 373:                     \"",
                "// Line 374: \"));",
                "// Line 375: ",
                "// vulnerable line: 376: run_http_request_parse(srv, con, __LINE__, 400,",
                "// Line 377:       \"missing minor version\",",
                "// Line 378:       CONST_STR_LEN(\"GET / HTTP/01.",
                "// Line 379: \"",
                "// Line 380:                     \"",
                "// Line 381: \"));",
                "// Line 382: ",
                "// vulnerable line: 383: run_http_request_parse(srv, con, __LINE__, 400,",
                "// Line 384:       \"strings as version\",",
                "// Line 385:       CONST_STR_LEN(\"GET / HTTP/a.b",
                "// Line 386: \"",
                "// Line 387:                     \"",
                "// Line 388: \"));",
                "// Line 389: ",
                "// vulnerable line: 390: run_http_request_parse(srv, con, __LINE__, 400,",
                "// Line 391:       \"missing protocol + unknown method\",",
                "// Line 392:       CONST_STR_LEN(\"BC /",
                "// Line 393: \"",
                "// Line 394:                     \"",
                "// Line 395: \"));",
                "// Line 396: ",
                "// vulnerable line: 397: run_http_request_parse(srv, con, __LINE__, 400,",
                "// Line 398:       \"missing protocol + unknown method + missing URI\",",
                "// Line 399:       CONST_STR_LEN(\"ABC",
                "// Line 400: \"",
                "// Line 401:                     \"",
                "// Line 402: \"));",
                "// Line 403: ",
                "// Line 404:     run_http_request_parse(srv, con, __LINE__, 501,",
                "// Line 405:       \"unknown method\",",
                "// Line 406:       CONST_STR_LEN(\"ABC / HTTP/1.0",
                "// Line 407: \"",
                "// Line 431:       CONST_STR_LEN(\"GET / HTTP/1.0",
                "// Line 432: \"",
                "// Line 433:                     \"ABC : foo",
                "// Line 434: \"",
                "// Line 435:                     \"",
                "// Line 436: \"));",
                "// Line 437:     ds = (data_string *)",
                "// Line 438:       array_get_element_klen(con->request.headers, CONST_STR_LEN(\"ABC\"));",
                "// Line 439:     assert(ds && buffer_is_equal_string(ds->value, CONST_STR_LEN(\"foo\")));",
                "// Line 440: ",
                "// vulnerable line: 441: run_http_request_parse(srv, con, __LINE__, 400,",
                "// Line 442:       \"whitespace within key\",",
                "// Line 443:       CONST_STR_LEN(\"GET / HTTP/1.0",
                "// Line 444: \"",
                "// Line 445:                     \"ABC a: foo",
                "// Line 446: \"",
                "// Line 447:                     \"",
                "// Line 448: \"));",
                "// Line 449: ",
                "// Line 450:     run_http_request_parse(srv, con, __LINE__, 0,",
                "// Line 451:       \"no whitespace\",",
                "// Line 473:       array_get_element_klen(con->request.headers, CONST_STR_LEN(\"ABC\"));",
                "// Line 474:     assert(ds && buffer_is_equal_string(ds->value, CONST_STR_LEN(\"foo  bc\")));",
                "// Line 475: ",
                "// Line 476:     run_http_request_parse(srv, con, __LINE__, 411,",
                "// Line 477:       \"POST request, no Content-Length\",",
                "// Line 478:       CONST_STR_LEN(\"POST / HTTP/1.0",
                "// Line 479: \"",
                "// Line 480:                     \"",
                "// Line 481: \"));",
                "// Line 482: ",
                "// vulnerable line: 483: run_http_request_parse(srv, con, __LINE__, 400,",
                "// Line 484:       \"Duplicate Host headers, Bug #25\",",
                "// Line 485:       CONST_STR_LEN(\"GET / HTTP/1.0",
                "// Line 486: \"",
                "// Line 487:                     \"Host: www.example.org",
                "// Line 488: \"",
                "// Line 489:                     \"Host: 123.example.org",
                "// Line 490: \"",
                "// Line 491:                     \"",
                "// Line 492: \"));",
                "// Line 493: ",
                "// vulnerable line: 494: run_http_request_parse(srv, con, __LINE__, 400,",
                "// Line 495:       \"Duplicate Content-Length headers\",",
                "// Line 496:       CONST_STR_LEN(\"GET / HTTP/1.0",
                "// Line 497: \"",
                "// Line 498:                     \"Content-Length: 5",
                "// Line 499: \"",
                "// Line 500:                     \"Content-Length: 4",
                "// Line 501: \"",
                "// Line 502:                     \"",
                "// Line 503: \"));",
                "// Line 504: ",
                "// vulnerable line: 505: run_http_request_parse(srv, con, __LINE__, 400,",
                "// Line 506:       \"Duplicate Content-Type headers\",",
                "// Line 507:       CONST_STR_LEN(\"GET / HTTP/1.0",
                "// Line 508: \"",
                "// Line 509:                     \"Content-Type: 5",
                "// Line 510: \"",
                "// Line 511:                     \"Content-Type: 4",
                "// Line 512: \"",
                "// Line 513:                     \"",
                "// Line 514: \"));",
                "// Line 515: ",
                "// vulnerable line: 516: run_http_request_parse(srv, con, __LINE__, 400,",
                "// vulnerable line: 517: \"Duplicate Range headers\",",
                "// Line 518:       CONST_STR_LEN(\"GET / HTTP/1.0",
                "// Line 519: \"",
                "// Line 520:                     \"Range: bytes=5-6",
                "// Line 521: \"",
                "// Line 522:                     \"Range: bytes=5-9",
                "// Line 523: \"",
                "// Line 524:                     \"",
                "// Line 525: \"));",
                "// Line 526: ",
                "// Line 527:     run_http_request_parse(srv, con, __LINE__, 0,",
                "// Line 528:       \"Duplicate If-None-Match headers\",",
                "// Line 529:       CONST_STR_LEN(\"GET / HTTP/1.0",
                "// Line 530: \"",
                "// Line 531:                     \"If-None-Match: 5",
                "// Line 532: \"",
                "// Line 533:                     \"If-None-Match: 4",
                "// Line 534: \"",
                "// Line 535:                     \"",
                "// Line 536: \"));",
                "// Line 537: ",
                "// vulnerable line: 538: run_http_request_parse(srv, con, __LINE__, 400,",
                "// Line 539:       \"Duplicate If-Modified-Since headers\",",
                "// Line 540:       CONST_STR_LEN(\"GET / HTTP/1.0",
                "// Line 541: \"",
                "// Line 542:                     \"If-Modified-Since: 5",
                "// Line 543: \"",
                "// Line 544:                     \"If-Modified-Since: 4",
                "// Line 545: \"",
                "// Line 546:                     \"",
                "// Line 547: \"));",
                "// Line 548: ",
                "// vulnerable line: 549: run_http_request_parse(srv, con, __LINE__, 400,",
                "// Line 550:       \"GET with Content-Length\",",
                "// Line 551:       CONST_STR_LEN(\"GET / HTTP/1.0",
                "// Line 552: \"",
                "// Line 553:                     \"Content-Length: 4",
                "// Line 554: \"",
                "// Line 555:                     \"",
                "// Line 556: \"",
                "// Line 557:                     \"1234\"));",
                "// Line 558: ",
                "// vulnerable line: 559: run_http_request_parse(srv, con, __LINE__, 400,",
                "// Line 560:       \"HEAD with Content-Length\",",
                "// Line 561:       CONST_STR_LEN(\"HEAD / HTTP/1.0",
                "// Line 562: \"",
                "// Line 563:                     \"Content-Length: 4",
                "// Line 564: \"",
                "// Line 565:                     \"",
                "// Line 566: \"",
                "// Line 567:                     \"1234\"));",
                "// Line 568: ",
                "// vulnerable line: 569: run_http_request_parse(srv, con, __LINE__, 400,",
                "// Line 570:       \"invalid chars in Header values (bug #1286)\",",
                "// Line 571:       CONST_STR_LEN(\"GET / HTTP/1.0",
                "// Line 572: \"",
                "// Line 573:                     \"If-Modified-Since: \u0000",
                "// Line 574: \"",
                "// Line 575:                     \"",
                "// Line 576: \"));",
                "// Line 577: ",
                "// Line 578:     /* (quick check that none of above tests were left in a state",
                "// Line 579:      *  which resulted in subsequent tests returning 400 for other"
            ]
        }
    ]
}