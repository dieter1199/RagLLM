{
    "cve_id": "CVE-2024-28242",
    "cve_description": "Discourse is an open source platform for community discussion. In affected versions an attacker can learn that secret categories exist when they have backgrounds set. The issue is patched in the latest stable, beta and tests-passed version of Discourse. Users are advised to upgrade. Users unable to upgrade should temporarily remove category backgrounds.",
    "cve_publish_date": "2024-03-15T20:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "SECURITY: Generate more category CSS on client\n\nThis commit moves the generation of category background CSS from the\nserver side to the client side. This simplifies the server side code\nbecause it does not need to check which categories are visible to the\ncurrent user.",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "builder.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "9",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: # frozen_string_literal: true",
                "// Line 2: ",
                "// Line 3: class Stylesheet::Manager::Builder",
                "// Line 4:   attr_reader :theme",
                "// Line 5: ",
                "// Line 6:   def initialize(target: :desktop, theme: nil, color_scheme: nil, manager:)",
                "// Line 7:     @target = target",
                "// Line 8:     @theme = theme",
                "// Line 9:     @color_scheme = color_scheme",
                "// Line 10:     @manager = manager",
                "// vulnerable line: 11: end",
                "// Line 12: ",
                "// Line 13:   def compile(opts = {})",
                "// Line 14:     if !opts[:force]",
                "// Line 15:       if File.exist?(stylesheet_fullpath)",
                "// Line 16:         if !StylesheetCache.where(target: qualified_target, digest: digest).exists?",
                "// Line 17:           begin",
                "// Line 18:             source_map =",
                "// Line 19:               begin",
                "// Line 20:                 File.read(source_map_fullpath)",
                "// Line 21:               rescue Errno::ENOENT",
                "// vulnerable line: 22: end",
                "// Line 23: ",
                "// Line 24:             StylesheetCache.add(",
                "// Line 25:               qualified_target,",
                "// Line 26:               digest,",
                "// Line 27:               File.read(stylesheet_fullpath),",
                "// Line 28:               source_map,",
                "// Line 29:             )",
                "// Line 30:           rescue => e",
                "// Line 31:             Rails.logger.warn \"Completely unexpected error adding contents of '#{stylesheet_fullpath}' to cache #{e}\"",
                "// vulnerable line: 32: end",
                "// vulnerable line: 33: end",
                "// Line 34:         return true",
                "// vulnerable line: 35: end",
                "// vulnerable line: 36: end",
                "// Line 37: ",
                "// Line 38:     rtl = @target.to_s.end_with?(\"_rtl\")",
                "// Line 39:     css, source_map =",
                "// Line 40:       with_load_paths do |load_paths|",
                "// Line 41:         Stylesheet::Compiler.compile_asset(",
                "// Line 42:           @target.to_s.gsub(/_rtl\\z/, \"\").to_sym,",
                "// Line 43:           rtl: rtl,",
                "// Line 44:           theme_id: theme&.id,",
                "// Line 45:           theme_variables: theme&.scss_variables.to_s,",
                "// Line 46:           source_map_file: source_map_url_relative_from_stylesheet,",
                "// Line 50:       rescue SassC::SyntaxError, SassC::NotRenderedError => e",
                "// Line 51:         if Stylesheet::Importer::THEME_TARGETS.include?(@target.to_s)",
                "// Line 52:           # no special errors for theme, handled in theme editor",
                "// Line 53:           [\"\", nil]",
                "// Line 54:         elsif @target.to_s == Stylesheet::Manager::COLOR_SCHEME_STYLESHEET",
                "// Line 55:           # log error but do not crash for errors in color definitions SCSS",
                "// Line 56:           Rails.logger.error \"SCSS compilation error: #{e.message}\"",
                "// Line 57:           [\"\", nil]",
                "// Line 58:         else",
                "// Line 59:           raise Discourse::ScssError, e.message",
                "// vulnerable line: 60: end",
                "// vulnerable line: 61: end",
                "// Line 62: ",
                "// Line 63:     FileUtils.mkdir_p(cache_fullpath)",
                "// Line 64: ",
                "// Line 65:     File.open(stylesheet_fullpath, \"w\") { |f| f.puts css }",
                "// Line 66: ",
                "// Line 67:     File.open(source_map_fullpath, \"w\") { |f| f.puts source_map } if source_map.present?",
                "// Line 68: ",
                "// Line 69:     begin",
                "// Line 70:       StylesheetCache.add(qualified_target, digest, css, source_map)",
                "// Line 71:     rescue => e",
                "// Line 72:       Rails.logger.warn \"Completely unexpected error adding item to cache #{e}\"",
                "// vulnerable line: 73: end",
                "// Line 74:     css",
                "// vulnerable line: 75: end",
                "// Line 76: ",
                "// Line 77:   def current_hostname",
                "// Line 78:     Discourse.current_hostname",
                "// vulnerable line: 79: end",
                "// Line 80: ",
                "// Line 81:   def cache_fullpath",
                "// Line 82:     Stylesheet::Manager.cache_fullpath",
                "// vulnerable line: 83: end",
                "// Line 84: ",
                "// Line 85:   def stylesheet_fullpath",
                "// Line 86:     \"#{cache_fullpath}/#{stylesheet_filename}\"",
                "// vulnerable line: 87: end",
                "// Line 88: ",
                "// Line 89:   def source_map_fullpath",
                "// Line 90:     \"#{cache_fullpath}/#{source_map_filename}\"",
                "// vulnerable line: 91: end",
                "// Line 92: ",
                "// Line 93:   def source_map_filename",
                "// Line 94:     \"#{stylesheet_filename}.map\"",
                "// vulnerable line: 95: end",
                "// Line 96: ",
                "// Line 97:   def source_map_url_relative_from_stylesheet",
                "// Line 98:     \"#{source_map_filename}?__ws=#{current_hostname}\"",
                "// vulnerable line: 99: end",
                "// Line 100: ",
                "// Line 101:   def stylesheet_fullpath_no_digest",
                "// Line 102:     \"#{cache_fullpath}/#{stylesheet_filename_no_digest}\"",
                "// vulnerable line: 103: end",
                "// Line 104: ",
                "// Line 105:   def stylesheet_absolute_url",
                "// Line 106:     \"#{GlobalSetting.cdn_url}#{stylesheet_relpath}?__ws=#{current_hostname}\"",
                "// vulnerable line: 107: end",
                "// Line 108: ",
                "// Line 109:   def root_path",
                "// Line 110:     \"#{GlobalSetting.relative_url_root}/\"",
                "// vulnerable line: 111: end",
                "// Line 112: ",
                "// Line 113:   def stylesheet_relpath",
                "// Line 114:     \"#{root_path}stylesheets/#{stylesheet_filename}\"",
                "// vulnerable line: 115: end",
                "// Line 116: ",
                "// Line 117:   def stylesheet_relpath_no_digest",
                "// Line 118:     \"#{root_path}stylesheets/#{stylesheet_filename_no_digest}\"",
                "// vulnerable line: 119: end",
                "// Line 120: ",
                "// Line 121:   def qualified_target",
                "// Line 122:     if is_theme?",
                "// Line 123:       \"#{@target}_#{theme&.id}\"",
                "// Line 124:     elsif @color_scheme",
                "// Line 125:       \"#{@target}_#{scheme_slug}_#{@color_scheme&.id}_#{@theme&.id}\"",
                "// Line 126:     else",
                "// Line 127:       scheme_string = theme&.color_scheme ? \"_#{theme.color_scheme.id}\" : \"\"",
                "// Line 128:       \"#{@target}#{scheme_string}\"",
                "// vulnerable line: 129: end",
                "// vulnerable line: 130: end",
                "// Line 131: ",
                "// Line 132:   def stylesheet_filename(with_digest = true)",
                "// Line 133:     digest_string = \"_#{self.digest}\" if with_digest",
                "// Line 134:     \"#{qualified_target}#{digest_string}.css\"",
                "// vulnerable line: 135: end",
                "// Line 136: ",
                "// Line 137:   def stylesheet_filename_no_digest",
                "// Line 138:     stylesheet_filename(_with_digest = false)",
                "// vulnerable line: 139: end",
                "// Line 140: ",
                "// Line 141:   def is_theme?",
                "// Line 142:     !!(@target.to_s =~ Stylesheet::Manager::THEME_REGEX)",
                "// vulnerable line: 143: end",
                "// Line 144: ",
                "// Line 145:   def is_color_scheme?",
                "// Line 146:     !!(@target.to_s == Stylesheet::Manager::COLOR_SCHEME_STYLESHEET)",
                "// vulnerable line: 147: end",
                "// Line 148: ",
                "// Line 149:   def scheme_slug",
                "// Line 150:     Slug.for(ActiveSupport::Inflector.transliterate(@color_scheme.name), \"scheme\")",
                "// vulnerable line: 151: end",
                "// Line 152: ",
                "// Line 153:   # digest encodes the things that trigger a recompile",
                "// Line 154:   def digest",
                "// Line 155:     @digest ||=",
                "// Line 156:       begin",
                "// Line 157:         if is_theme?",
                "// Line 158:           theme_digest",
                "// Line 159:         elsif is_color_scheme?",
                "// Line 160:           color_scheme_digest",
                "// Line 161:         else",
                "// Line 162:           default_digest",
                "// vulnerable line: 163: end",
                "// vulnerable line: 164: end",
                "// vulnerable line: 165: end",
                "// Line 166: ",
                "// Line 167:   def with_load_paths",
                "// Line 168:     if theme",
                "// Line 169:       theme.with_scss_load_paths { |p| yield p }",
                "// Line 170:     else",
                "// Line 171:       yield nil",
                "// vulnerable line: 172: end",
                "// vulnerable line: 173: end",
                "// Line 174: ",
                "// Line 175:   def scss_digest",
                "// Line 176:     if %i[mobile_theme desktop_theme].include?(@target)",
                "// Line 177:       resolve_baked_field(@target.to_s.sub(\"_theme\", \"\"), :scss)",
                "// Line 178:     elsif @target == :embedded_theme",
                "// Line 179:       resolve_baked_field(:common, :embedded_scss)",
                "// Line 180:     else",
                "// Line 181:       raise \"attempting to look up theme digest for invalid field\"",
                "// vulnerable line: 182: end",
                "// vulnerable line: 183: end",
                "// Line 184: ",
                "// Line 185:   def theme_digest",
                "// Line 186:     Digest::SHA1.hexdigest(",
                "// Line 187:       scss_digest.to_s + color_scheme_digest.to_s + settings_digest + uploads_digest +",
                "// Line 188:         current_hostname,",
                "// Line 189:     )",
                "// vulnerable line: 190: end",
                "// Line 191: ",
                "// Line 192:   # this protects us from situations where new versions of a plugin removed a file",
                "// Line 193:   # old instances may still be serving CSS and not aware of the change",
                "// Line 194:   # so we could end up poisoning the cache with a bad file that can not be removed",
                "// Line 195:   def plugins_digest",
                "// Line 196:     assets = []",
                "// Line 197:     DiscoursePluginRegistry.stylesheets.each { |_, paths| assets += paths.to_a }",
                "// Line 198:     DiscoursePluginRegistry.mobile_stylesheets.each { |_, paths| assets += paths.to_a }",
                "// Line 199:     DiscoursePluginRegistry.desktop_stylesheets.each { |_, paths| assets += paths.to_a }",
                "// Line 200:     Digest::SHA1.hexdigest(assets.sort.join)",
                "// vulnerable line: 201: end",
                "// Line 202: ",
                "// Line 203:   def settings_digest",
                "// Line 204:     themes =",
                "// Line 205:       if !theme",
                "// Line 206:         []",
                "// Line 207:       elsif Theme.is_parent_theme?(theme.id)",
                "// Line 208:         @manager.load_themes(@manager.theme_ids)",
                "// Line 209:       else",
                "// Line 210:         [@manager.get_theme(theme.id)]",
                "// vulnerable line: 211: end",
                "// Line 212: ",
                "// Line 213:     fields =",
                "// Line 214:       themes.each_with_object([]) do |theme, array|",
                "// Line 215:         array.concat(theme.yaml_theme_fields.map(&:updated_at))",
                "// vulnerable line: 216: end",
                "// Line 217: ",
                "// Line 218:     settings =",
                "// Line 219:       themes.each_with_object([]) do |theme, array|",
                "// Line 220:         array.concat(theme.theme_settings.map(&:updated_at))",
                "// vulnerable line: 221: end",
                "// Line 222: ",
                "// Line 223:     timestamps = fields.concat(settings).map!(&:to_f).sort!.join(\",\")",
                "// Line 224: ",
                "// Line 225:     Digest::SHA1.hexdigest(timestamps)",
                "// vulnerable line: 226: end",
                "// Line 227: ",
                "// Line 228:   def uploads_digest",
                "// Line 229:     sha1s = []",
                "// Line 230: ",
                "// Line 231:     (theme&.upload_fields || []).map { |upload_field| sha1s << upload_field.upload&.sha1 }",
                "// Line 232: ",
                "// Line 233:     Digest::SHA1.hexdigest(sha1s.compact.sort!.join(\"",
                "// Line 234: \"))",
                "// vulnerable line: 235: end",
                "// Line 236: ",
                "// Line 237:   def default_digest",
                "// Line 238:     Digest::SHA1.hexdigest \"default-#{Stylesheet::Manager.fs_asset_cachebuster}-#{plugins_digest}-#{current_hostname}\"",
                "// vulnerable line: 239: end",
                "// Line 240: ",
                "// Line 241:   def color_scheme_digest",
                "// Line 242:     cs = @color_scheme || theme&.color_scheme",
                "// Line 243: ",
                "// vulnerable line: 244: categories_updated =",
                "// vulnerable line: 245: Stylesheet::Manager",
                "// vulnerable line: 246: .cache",
                "// vulnerable line: 247: .defer_get_set(\"categories_updated\") do",
                "// vulnerable line: 248: Category.where(\"uploaded_background_id IS NOT NULL\").pluck(:updated_at).map(&:to_i).sum",
                "// vulnerable line: 249: end",
                "// Line 250: ",
                "// Line 251:     fonts = \"#{SiteSetting.base_font}-#{SiteSetting.heading_font}\"",
                "// Line 252: ",
                "// Line 253:     digest_string = \"#{current_hostname}-\"",
                "// vulnerable line: 254: if cs || categories_updated > 0",
                "// Line 255:       theme_color_defs = resolve_baked_field(:common, :color_definitions)",
                "// Line 256:       digest_string +=",
                "// vulnerable line: 257: \"#{RailsMultisite::ConnectionManagement.current_db}-#{cs&.id}-#{cs&.version}-#{theme_color_defs}-#{Stylesheet::Manager.fs_asset_cachebuster}-#{categories_updated}-#{fonts}\"",
                "// Line 258:     else",
                "// Line 259:       digest_string += \"defaults-#{Stylesheet::Manager.fs_asset_cachebuster}-#{fonts}\"",
                "// Line 260: ",
                "// Line 261:       if cdn_url = GlobalSetting.cdn_url",
                "// Line 262:         digest_string += \"-#{cdn_url}\"",
                "// vulnerable line: 263: end",
                "// vulnerable line: 264: end",
                "// Line 265:     Digest::SHA1.hexdigest digest_string",
                "// vulnerable line: 266: end",
                "// Line 267: ",
                "// Line 268:   def resolve_baked_field(target, name)",
                "// Line 269:     theme_ids =",
                "// Line 270:       if !theme",
                "// Line 271:         []",
                "// Line 272:       elsif Theme.is_parent_theme?(theme.id)",
                "// Line 273:         @manager.theme_ids",
                "// Line 274:       else",
                "// Line 275:         [theme.id]",
                "// vulnerable line: 276: end",
                "// Line 277: ",
                "// Line 278:     theme_ids = [theme_ids.first] if name != :color_definitions",
                "// Line 279: ",
                "// Line 280:     baked_fields = []",
                "// Line 281:     targets = [Theme.targets[target.to_sym], Theme.targets[:common]]",
                "// Line 282: ",
                "// Line 283:     @manager",
                "// Line 284:       .load_themes(theme_ids)",
                "// Line 285:       .each do |theme|",
                "// Line 286:         theme.builder_theme_fields.each do |theme_field|",
                "// Line 287:           if theme_field.name == name.to_s && targets.include?(theme_field.target_id)",
                "// Line 288:             baked_fields << theme_field",
                "// vulnerable line: 289: end",
                "// vulnerable line: 290: end",
                "// vulnerable line: 291: end",
                "// Line 292: ",
                "// Line 293:     baked_fields",
                "// Line 294:       .map do |f|",
                "// Line 295:         f.ensure_baked!",
                "// Line 296:         f.value_baked || f.value",
                "// vulnerable line: 297: end",
                "// Line 298:       .join(\"",
                "// Line 299: \")",
                "// vulnerable line: 300: end",
                "// vulnerable line: 301: end"
            ]
        },
        {
            "filename_of_changes": "compiler.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "0",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 27:         file += File.read path",
                "// Line 28: ",
                "// Line 29:         case asset.to_s",
                "// Line 30:         when \"embed\", \"publish\"",
                "// Line 31:           file += importer.font",
                "// Line 32:         when \"wizard\"",
                "// Line 33:           file += importer.wizard_fonts",
                "// Line 34:         when Stylesheet::Manager::COLOR_SCHEME_STYLESHEET",
                "// Line 35:           file += importer.import_color_definitions",
                "// Line 36:           file += importer.import_wcag_overrides",
                "// vulnerable line: 37: file += importer.category_backgrounds(options[:color_scheme_id])",
                "// Line 38:           file += importer.font",
                "// Line 39:         end",
                "// Line 40:       end",
                "// Line 41: ",
                "// Line 42:       compile(file, filename, options)",
                "// Line 43:     end",
                "// Line 44: ",
                "// Line 45:     def self.compile(stylesheet, filename, options = {})",
                "// Line 46:       source_map_file = options[:source_map_file] || \"#{filename.sub(\".scss\", \"\")}.css.map\"",
                "// Line 47: "
            ]
        },
        {
            "filename_of_changes": "importer.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "0",
            "number_of_lines_deleted_vulnerable_to_cve": "30",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 3: require \"global_path\"",
                "// Line 4: ",
                "// Line 5: module Stylesheet",
                "// Line 6:   class Importer",
                "// Line 7:     include GlobalPath",
                "// Line 8: ",
                "// Line 9:     THEME_TARGETS ||= %w[embedded_theme mobile_theme desktop_theme]",
                "// Line 10: ",
                "// Line 11:     def self.plugin_assets",
                "// Line 12:       @plugin_assets ||= {}",
                "// vulnerable line: 13: end",
                "// Line 14: ",
                "// Line 15:     def self.register_imports!",
                "// Line 16:       Discourse.plugins.each do |plugin|",
                "// Line 17:         plugin_directory_name = plugin.directory_name",
                "// Line 18: ",
                "// Line 19:         [\"\", \"mobile\", \"desktop\"].each do |type|",
                "// Line 20:           asset_name = type.present? ? \"#{plugin_directory_name}_#{type}\" : plugin_directory_name",
                "// Line 21:           stylesheets =",
                "// Line 22:             (",
                "// Line 23:               if type.present?",
                "// Line 24:                 DiscoursePluginRegistry.send(\"#{type}_stylesheets\")",
                "// Line 25:               else",
                "// Line 26:                 DiscoursePluginRegistry.stylesheets",
                "// vulnerable line: 27: end",
                "// Line 28:             )",
                "// Line 29: ",
                "// Line 30:           plugin_assets[asset_name] = stylesheets[",
                "// Line 31:             plugin_directory_name",
                "// Line 32:           ] if plugin_directory_name.present?",
                "// vulnerable line: 33: end",
                "// vulnerable line: 34: end",
                "// vulnerable line: 35: end",
                "// Line 36: ",
                "// Line 37:     register_imports!",
                "// Line 38: ",
                "// Line 39:     def font",
                "// Line 40:       body_font = DiscourseFonts.fonts.find { |f| f[:key] == SiteSetting.base_font }",
                "// Line 41:       heading_font = DiscourseFonts.fonts.find { |f| f[:key] == SiteSetting.heading_font }",
                "// vulnerable line: 42: contents = +\"\"",
                "// Line 43: ",
                "// Line 44:       contents << <<~CSS if body_font.present?",
                "// Line 45:           #{font_css(body_font)}",
                "// Line 46: ",
                "// Line 47:           :root {",
                "// Line 48:             --font-family: #{body_font[:stack]};",
                "// Line 49:           }",
                "// Line 50:         CSS",
                "// Line 51: ",
                "// Line 52:       contents << <<~CSS if heading_font.present?",
                "// Line 53:           #{font_css(heading_font)}",
                "// Line 54: ",
                "// Line 55:           :root {",
                "// Line 56:             --heading-font-family: #{heading_font[:stack]};",
                "// Line 57:           }",
                "// Line 58:         CSS",
                "// Line 59: ",
                "// vulnerable line: 60: contents",
                "// vulnerable line: 61: end",
                "// Line 62: ",
                "// Line 63:     def wizard_fonts",
                "// vulnerable line: 64: contents = +\"\"",
                "// Line 65: ",
                "// Line 66:       DiscourseFonts.fonts.each do |font|",
                "// Line 67:         if font[:key] == \"system\"",
                "// Line 68:           # Overwrite font definition because the preview canvases in the wizard require explicit @font-face definitions.",
                "// Line 69:           # uses same technique as https://github.com/jonathantneal/system-font-css",
                "// Line 70:           font[:variants] = [",
                "// Line 71:             {",
                "// Line 72:               src:",
                "// Line 73:                 'local(\".SFNS-Regular\"), local(\".SFNSText-Regular\"), local(\".HelveticaNeueDeskInterface-Regular\"), local(\".LucidaGrandeUI\"), local(\"Segoe UI\"), local(\"Ubuntu\"), local(\"Roboto-Regular\"), local(\"DroidSans\"), local(\"Tahoma\")',",
                "// Line 74:               weight: 400,",
                "// Line 75:             },",
                "// Line 76:             {",
                "// Line 77:               src:",
                "// Line 78:                 'local(\".SFNS-Bold\"), local(\".SFNSText-Bold\"), local(\".HelveticaNeueDeskInterface-Bold\"), local(\".LucidaGrandeUI\"), local(\"Segoe UI Bold\"), local(\"Ubuntu Bold\"), local(\"Roboto-Bold\"), local(\"DroidSans-Bold\"), local(\"Tahoma Bold\")',",
                "// Line 79:               weight: 700,",
                "// Line 80:             },",
                "// Line 81:           ]",
                "// vulnerable line: 82: end",
                "// Line 83: ",
                "// Line 84:         contents << font_css(font)",
                "// Line 85:         contents << <<~CSS",
                "// Line 86:           .body-font-#{font[:key].tr(\"_\", \"-\")} {",
                "// Line 87:             font-family: #{font[:stack]};",
                "// Line 88:           }",
                "// Line 89:           .heading-font-#{font[:key].tr(\"_\", \"-\")} h2 {",
                "// Line 90:             font-family: #{font[:stack]};",
                "// Line 91:           }",
                "// Line 92:         CSS",
                "// vulnerable line: 93: end",
                "// Line 94: ",
                "// vulnerable line: 95: contents",
                "// vulnerable line: 96: end",
                "// Line 97: ",
                "// vulnerable line: 98: def category_backgrounds(color_scheme_id)",
                "// vulnerable line: 99: is_dark_color_scheme =",
                "// vulnerable line: 100: color_scheme_id.present? && ColorScheme.find_by_id(color_scheme_id)&.is_dark?",
                "// Line 101: ",
                "// vulnerable line: 102: contents = +\"\"",
                "// vulnerable line: 103: Category",
                "// vulnerable line: 104: .where(\"uploaded_background_id IS NOT NULL\")",
                "// vulnerable line: 105: .each do |c|",
                "// vulnerable line: 106: contents << category_css(c, is_dark_color_scheme) if c.uploaded_background&.url.present?",
                "// vulnerable line: 107: end",
                "// Line 108: ",
                "// vulnerable line: 109: contents",
                "// vulnerable line: 110: end",
                "// Line 111: ",
                "// Line 112:     def import_color_definitions",
                "// vulnerable line: 113: contents = +\"\"",
                "// Line 114:       DiscoursePluginRegistry.color_definition_stylesheets.each do |name, path|",
                "// Line 115:         contents << \"",
                "// Line 116: ",
                "// Line 117: // Color definitions from #{name}",
                "// Line 118: ",
                "// Line 119: \"",
                "// Line 120:         contents << File.read(path.to_s)",
                "// Line 121:         contents << \"",
                "// Line 122: ",
                "// Line 123: \"",
                "// vulnerable line: 124: end",
                "// Line 125: ",
                "// Line 126:       theme_id = @theme_id || SiteSetting.default_theme_id",
                "// Line 127:       resolved_ids = Theme.transform_ids(theme_id)",
                "// Line 128: ",
                "// Line 129:       if resolved_ids",
                "// Line 130:         theme = Theme.find_by_id(theme_id)",
                "// Line 131:         contents << theme&.scss_variables.to_s",
                "// Line 132:         Theme",
                "// Line 133:           .list_baked_fields(resolved_ids, :common, :color_definitions)",
                "// Line 134:           .each do |field|",
                "// Line 135:             contents << \"",
                "// Line 136: ",
                "// Line 137: // Color definitions from #{field.theme.name}",
                "// Line 138: ",
                "// Line 139: \"",
                "// Line 140: ",
                "// Line 141:             if field.theme_id == theme.id",
                "// Line 142:               contents << field.value",
                "// Line 143:             else",
                "// Line 144:               contents << field.compiled_css(prepended_scss)",
                "// vulnerable line: 145: end",
                "// Line 146:             contents << \"",
                "// Line 147: ",
                "// Line 148: \"",
                "// vulnerable line: 149: end",
                "// vulnerable line: 150: end",
                "// vulnerable line: 151: contents",
                "// vulnerable line: 152: end",
                "// Line 153: ",
                "// Line 154:     def import_wcag_overrides",
                "// Line 155:       if @color_scheme_id && ColorScheme.find_by_id(@color_scheme_id)&.is_wcag?",
                "// Line 156:         return \"@import \"wcag\";\"",
                "// vulnerable line: 157: end",
                "// Line 158:       \"\"",
                "// vulnerable line: 159: end",
                "// Line 160: ",
                "// Line 161:     def color_variables",
                "// vulnerable line: 162: contents = +\"\"",
                "// Line 163:       if @color_scheme_id",
                "// Line 164:         colors =",
                "// Line 165:           begin",
                "// Line 166:             ColorScheme.find(@color_scheme_id).resolved_colors",
                "// Line 167:           rescue StandardError",
                "// Line 168:             ColorScheme.base_colors",
                "// vulnerable line: 169: end",
                "// Line 170:       elsif (@theme_id && !theme.component)",
                "// Line 171:         colors = theme&.color_scheme&.resolved_colors || ColorScheme.base_colors",
                "// Line 172:       else",
                "// Line 173:         # this is a slightly ugly backwards compatibility fix,",
                "// Line 174:         # we shouldn't be using the default theme color scheme for components",
                "// Line 175:         # (most components use CSS custom properties which work fine without this)",
                "// Line 176:         colors =",
                "// Line 177:           Theme.find_by_id(SiteSetting.default_theme_id)&.color_scheme&.resolved_colors ||",
                "// Line 178:             ColorScheme.base_colors",
                "// vulnerable line: 179: end",
                "// Line 180: ",
                "// Line 181:       colors.each { |n, hex| contents << \"$#{n}: ##{hex} !default; \" }",
                "// Line 182: ",
                "// vulnerable line: 183: contents",
                "// vulnerable line: 184: end",
                "// Line 185: ",
                "// Line 186:     def public_image_path",
                "// Line 187:       image_path = UrlHelper.absolute(\"#{Discourse.base_path}/images\")",
                "// Line 188:       \"$public_image_path: \"#{image_path}\"; \"",
                "// vulnerable line: 189: end",
                "// Line 190: ",
                "// Line 191:     def prepended_scss",
                "// Line 192:       \"#{color_variables} #{public_image_path} @import \"common/foundation/variables\"; @import \"common/foundation/mixins\"; \"",
                "// vulnerable line: 193: end",
                "// Line 194: ",
                "// Line 195:     def initialize(options)",
                "// Line 196:       @theme = options[:theme]",
                "// Line 197:       @theme_id = options[:theme_id]",
                "// Line 198:       @color_scheme_id = options[:color_scheme_id]",
                "// Line 199: ",
                "// Line 200:       if @theme && !@theme_id",
                "// Line 201:         # make up an id so other stuff does not bail out",
                "// Line 202:         @theme_id = @theme.id || -1",
                "// vulnerable line: 203: end",
                "// vulnerable line: 204: end",
                "// Line 205: ",
                "// Line 206:     def theme_import(target)",
                "// Line 207:       return \"\" if !@theme_id",
                "// Line 208: ",
                "// Line 209:       attr = target == :embedded_theme ? :embedded_scss : :scss",
                "// Line 210:       target = target.to_s.gsub(\"_theme\", \"\").to_sym",
                "// Line 211: ",
                "// vulnerable line: 212: contents = +\"\"",
                "// Line 213: ",
                "// Line 214:       fields = theme.list_baked_fields(target, attr)",
                "// Line 215:       fields.map do |field|",
                "// Line 216:         value = field.value",
                "// Line 217:         if value.present?",
                "// Line 218:           contents << <<~SCSS",
                "// Line 219:           // Theme: #{field.theme.name}",
                "// Line 220:           // Target: #{field.target_name} #{field.name}",
                "// Line 221:           // Last Edited: #{field.updated_at}",
                "// Line 222:           SCSS",
                "// Line 223: ",
                "// Line 224:           contents << value",
                "// vulnerable line: 225: end",
                "// vulnerable line: 226: end",
                "// vulnerable line: 227: contents",
                "// vulnerable line: 228: end",
                "// Line 229: ",
                "// Line 230:     def theme",
                "// Line 231:       @theme = (@theme_id && Theme.find(@theme_id)) || :nil unless @theme",
                "// Line 232:       @theme == :nil ? nil : @theme",
                "// vulnerable line: 233: end",
                "// Line 234: ",
                "// vulnerable line: 235: def category_css(category, is_dark_color_scheme)",
                "// vulnerable line: 236: full_slug = category.full_slug.split(\"-\")[0..-2].join(\"-\")",
                "// Line 237: ",
                "// vulnerable line: 238: # in case we're using a dark color scheme, we define the background using the dark image",
                "// vulnerable line: 239: # if one is available. Otherwise, we use the light image by default.",
                "// vulnerable line: 240: if is_dark_color_scheme && category.uploaded_background_dark&.url.present?",
                "// vulnerable line: 241: return category_background_css(full_slug, category.uploaded_background_dark.url)",
                "// vulnerable line: 242: end",
                "// Line 243: ",
                "// vulnerable line: 244: category_background_css(full_slug, category.uploaded_background.url)",
                "// vulnerable line: 245: end",
                "// Line 246: ",
                "// vulnerable line: 247: def category_background_css(full_slug, background_url)",
                "// vulnerable line: 248: \"body.category-#{full_slug} { background-image: url(#{upload_cdn_path(background_url)}) }\"",
                "// vulnerable line: 249: end",
                "// Line 250: ",
                "// Line 251:     def font_css(font)",
                "// vulnerable line: 252: contents = +\"\"",
                "// Line 253: ",
                "// Line 254:       if font[:variants].present?",
                "// Line 255:         fonts_dir = UrlHelper.absolute(\"#{Discourse.base_path}/fonts\")",
                "// Line 256:         font[:variants].each do |variant|",
                "// Line 257:           src =",
                "// Line 258:             (",
                "// Line 259:               if variant[:src]",
                "// Line 260:                 variant[:src]",
                "// Line 261:               else",
                "// Line 262:                 \"url(\"#{fonts_dir}/#{variant[:filename]}?v=#{DiscourseFonts::VERSION}\") format(\"#{variant[:format]}\")\"",
                "// vulnerable line: 263: end",
                "// Line 264:             )",
                "// Line 265:           contents << <<~CSS",
                "// Line 266:             @font-face {",
                "// Line 267:               font-family: #{font[:name]};",
                "// Line 268:               src: #{src};",
                "// Line 269:               font-weight: #{variant[:weight]};",
                "// Line 270:             }",
                "// Line 271:           CSS",
                "// vulnerable line: 272: end",
                "// vulnerable line: 273: end",
                "// Line 274: ",
                "// vulnerable line: 275: contents",
                "// vulnerable line: 276: end",
                "// vulnerable line: 277: end",
                "// vulnerable line: 278: end"
            ]
        },
        {
            "filename_of_changes": "manager.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: # frozen_string_literal: true",
                "// Line 2: ",
                "// Line 3: require \"distributed_cache\"",
                "// Line 4: require \"stylesheet/compiler\"",
                "// Line 5: ",
                "// Line 6: module Stylesheet",
                "// Line 7: end",
                "// Line 8: ",
                "// Line 9: class Stylesheet::Manager",
                "// vulnerable line: 10: BASE_COMPILER_VERSION = 1",
                "// Line 11: ",
                "// Line 12:   CACHE_PATH = \"tmp/stylesheet-cache\"",
                "// Line 13:   private_constant :CACHE_PATH",
                "// Line 14: ",
                "// Line 15:   MANIFEST_DIR ||= \"#{Rails.root}/tmp/cache/assets/#{Rails.env}\"",
                "// Line 16:   THEME_REGEX ||= /_theme\\z/",
                "// Line 17:   COLOR_SCHEME_STYLESHEET ||= \"color_definitions\"",
                "// Line 18: ",
                "// Line 19:   @@lock = Mutex.new",
                "// Line 20: "
            ]
        },
        {
            "filename_of_changes": "manager_spec.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "0",
            "number_of_lines_deleted_vulnerable_to_cve": "23",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: # frozen_string_literal: true",
                "// Line 2: ",
                "// Line 3: require \"stylesheet/compiler\"",
                "// Line 4: ",
                "// Line 5: RSpec.describe Stylesheet::Manager do",
                "// Line 6:   def manager(theme_id = nil)",
                "// Line 7:     Stylesheet::Manager.new(theme_id: theme_id)",
                "// vulnerable line: 8: end",
                "// Line 9: ",
                "// Line 10:   it \"does not crash for missing theme\" do",
                "// Line 11:     Theme.clear_default!",
                "// Line 12:     link = manager.stylesheet_link_tag(:embedded_theme)",
                "// Line 13:     expect(link).to eq(\"\")",
                "// vulnerable line: 14: end",
                "// Line 15: ",
                "// Line 16:   it \"still returns something for no themes\" do",
                "// Line 17:     link = manager.stylesheet_link_tag(:desktop, \"all\")",
                "// Line 18:     expect(link).not_to eq(\"\")",
                "// vulnerable line: 19: end",
                "// Line 20: ",
                "// Line 21:   describe \"themes with components\" do",
                "// Line 22:     let(:child_theme) do",
                "// Line 23:       Fabricate(:theme, component: true, name: \"a component\").tap do |c|",
                "// Line 24:         c.set_field(target: :common, name: \"scss\", value: \".child_common{.scss{color: red;}}\")",
                "// Line 25:         c.set_field(target: :desktop, name: \"scss\", value: \".child_desktop{.scss{color: red;}}\")",
                "// Line 26:         c.set_field(target: :mobile, name: \"scss\", value: \".child_mobile{.scss{color: red;}}\")",
                "// Line 27:         c.set_field(",
                "// Line 28:           target: :common,",
                "// Line 29:           name: \"embedded_scss\",",
                "// Line 30:           value: \".child_embedded{.scss{color: red;}}\",",
                "// Line 31:         )",
                "// Line 32:         c.save!",
                "// vulnerable line: 33: end",
                "// vulnerable line: 34: end",
                "// Line 35: ",
                "// Line 36:     let(:theme) do",
                "// Line 37:       Fabricate(:theme).tap do |t|",
                "// Line 38:         t.set_field(target: :common, name: \"scss\", value: \".common{.scss{color: red;}}\")",
                "// Line 39:         t.set_field(target: :desktop, name: \"scss\", value: \".desktop{.scss{color: red;}}\")",
                "// Line 40:         t.set_field(target: :mobile, name: \"scss\", value: \".mobile{.scss{color: red;}}\")",
                "// Line 41:         t.set_field(target: :common, name: \"embedded_scss\", value: \".embedded{.scss{color: red;}}\")",
                "// Line 42:         t.save!",
                "// Line 43: ",
                "// Line 44:         t.add_relative_theme!(:child, child_theme)",
                "// vulnerable line: 45: end",
                "// vulnerable line: 46: end",
                "// Line 47: ",
                "// Line 48:     it \"generates the right links for non-theme targets\" do",
                "// Line 49:       manager = manager(nil)",
                "// Line 50: ",
                "// Line 51:       hrefs = manager.stylesheet_details(:desktop, \"all\")",
                "// Line 52: ",
                "// Line 53:       expect(hrefs.length).to eq(1)",
                "// vulnerable line: 54: end",
                "// Line 55: ",
                "// Line 56:     it \"can correctly compile theme css\" do",
                "// vulnerable line: 57: manager = manager(theme.id)",
                "// Line 58:       old_links = manager.stylesheet_link_tag(:desktop_theme, \"all\")",
                "// Line 59: ",
                "// vulnerable line: 60: builder =",
                "// vulnerable line: 61: Stylesheet::Manager::Builder.new(target: :desktop_theme, theme: theme, manager: manager)",
                "// Line 62: ",
                "// Line 63:       builder.compile(force: true)",
                "// Line 64: ",
                "// Line 65:       css = File.read(builder.stylesheet_fullpath)",
                "// Line 66:       _source_map = File.read(builder.source_map_fullpath)",
                "// Line 67: ",
                "// Line 68:       expect(css).to match(/\\.common/)",
                "// Line 69:       expect(css).to match(/\\.desktop/)",
                "// Line 70: ",
                "// Line 71:       # child theme CSS is no longer bundled with main theme",
                "// Line 90:       child_theme.set_field(target: :desktop, name: :scss, value: \".nothing{color: green;}\")",
                "// Line 91:       child_theme.save!",
                "// Line 92: ",
                "// Line 93:       new_links = manager(theme.id).stylesheet_link_tag(:desktop_theme, \"all\")",
                "// Line 94: ",
                "// Line 95:       expect(new_links).not_to eq(old_links)",
                "// Line 96: ",
                "// Line 97:       # our theme better have a name with the theme_id as part of it",
                "// Line 98:       expect(new_links).to include(\"/stylesheets/desktop_theme_#{theme.id}_\")",
                "// Line 99:       expect(new_links).to include(\"/stylesheets/desktop_theme_#{child_theme.id}_\")",
                "// vulnerable line: 100: end",
                "// Line 101: ",
                "// Line 102:     it \"can correctly compile embedded theme css\" do",
                "// vulnerable line: 103: manager = manager(theme.id)",
                "// Line 104: ",
                "// vulnerable line: 105: builder =",
                "// Line 106:         Stylesheet::Manager::Builder.new(target: :embedded_theme, theme: theme, manager: manager)",
                "// Line 107: ",
                "// Line 108:       builder.compile(force: true)",
                "// Line 109: ",
                "// Line 110:       css = File.read(builder.stylesheet_fullpath)",
                "// Line 111:       expect(css).to match(/\\.embedded/)",
                "// Line 112:       expect(css).not_to match(/\\.child_embedded/)",
                "// Line 113: ",
                "// Line 114:       child_theme_builder =",
                "// Line 115:         Stylesheet::Manager::Builder.new(",
                "// Line 116:           target: :embedded_theme,",
                "// Line 117:           theme: child_theme,",
                "// Line 118:           manager: manager,",
                "// Line 119:         )",
                "// Line 120: ",
                "// Line 121:       child_theme_builder.compile(force: true)",
                "// Line 122: ",
                "// Line 123:       css = File.read(child_theme_builder.stylesheet_fullpath)",
                "// Line 124:       expect(css).to match(/\\.child_embedded/)",
                "// vulnerable line: 125: end",
                "// Line 126: ",
                "// Line 127:     it \"includes both parent and child theme assets\" do",
                "// vulnerable line: 128: manager = manager(theme.id)",
                "// Line 129: ",
                "// Line 130:       hrefs = manager.stylesheet_details(:desktop_theme, \"all\")",
                "// Line 131: ",
                "// Line 132:       expect(hrefs.count).to eq(2)",
                "// Line 133: ",
                "// Line 134:       expect(hrefs.map { |href| href[:theme_id] }).to contain_exactly(theme.id, child_theme.id)",
                "// Line 135: ",
                "// Line 136:       hrefs = manager.stylesheet_details(:embedded_theme, \"all\")",
                "// Line 137: ",
                "// Line 138:       expect(hrefs.count).to eq(2)",
                "// Line 139: ",
                "// Line 140:       expect(hrefs.map { |href| href[:theme_id] }).to contain_exactly(theme.id, child_theme.id)",
                "// vulnerable line: 141: end",
                "// Line 142: ",
                "// Line 143:     it \"includes the escaped theme name\" do",
                "// vulnerable line: 144: manager = manager(theme.id)",
                "// Line 145: ",
                "// Line 146:       theme.update(name: \"a strange name\"with a quote in it\")",
                "// Line 147: ",
                "// Line 148:       tag = manager.stylesheet_link_tag(:desktop_theme)",
                "// Line 149:       expect(tag).to have_tag(\"link\", with: { \"data-theme-name\" => theme.name.downcase })",
                "// Line 150:       expect(tag).to have_tag(\"link\", with: { \"data-theme-name\" => child_theme.name.downcase })",
                "// vulnerable line: 151: end",
                "// Line 152: ",
                "// Line 153:     it \"stylesheet_link_tag calls the preload callback when set\" do",
                "// Line 154:       preload_list = []",
                "// Line 155:       preload_callback = ->(href, type) { preload_list << [href, type] }",
                "// Line 156: ",
                "// vulnerable line: 157: manager = manager(theme.id)",
                "// Line 158:       expect { manager.stylesheet_link_tag(:desktop_theme, \"all\", preload_callback) }.to change(",
                "// Line 159:         preload_list,",
                "// Line 160:         :size,",
                "// Line 161:       )",
                "// vulnerable line: 162: end",
                "// Line 163: ",
                "// Line 164:     context \"with stylesheet order\" do",
                "// Line 165:       let(:z_child_theme) do",
                "// Line 166:         Fabricate(:theme, component: true, name: \"ze component\").tap do |z|",
                "// Line 167:           z.set_field(target: :desktop, name: \"scss\", value: \".child_desktop{.scss{color: red;}}\")",
                "// Line 168:           z.save!",
                "// vulnerable line: 169: end",
                "// vulnerable line: 170: end",
                "// Line 171: ",
                "// Line 172:       let(:remote) { RemoteTheme.create!(remote_url: \"https://github.com/org/remote-theme1\") }",
                "// Line 173: ",
                "// Line 174:       let(:child_remote) do",
                "// Line 175:         Fabricate(:theme, remote_theme: remote, component: true).tap do |t|",
                "// Line 176:           t.set_field(target: :desktop, name: \"scss\", value: \".child_desktop{.scss{color: red;}}\")",
                "// Line 177:           t.save!",
                "// vulnerable line: 178: end",
                "// vulnerable line: 179: end",
                "// Line 180: ",
                "// Line 181:       it \"output remote child, then sort children alphabetically, then local parent\" do",
                "// Line 182:         theme.add_relative_theme!(:child, z_child_theme)",
                "// Line 183:         theme.add_relative_theme!(:child, child_remote)",
                "// Line 184: ",
                "// vulnerable line: 185: manager = manager(theme.id)",
                "// Line 186:         hrefs = manager.stylesheet_details(:desktop_theme, \"all\")",
                "// Line 187: ",
                "// Line 188:         parent = hrefs.select { |href| href[:theme_id] == theme.id }.first",
                "// Line 189:         child_a = hrefs.select { |href| href[:theme_id] == child_theme.id }.first",
                "// Line 190:         child_z = hrefs.select { |href| href[:theme_id] == z_child_theme.id }.first",
                "// Line 191:         child_r = hrefs.select { |href| href[:theme_id] == child_remote.id }.first",
                "// Line 192: ",
                "// Line 193:         child_local_A =",
                "// Line 194:           \"<link href=\"#{child_a[:new_href]}\" data-theme-id=\"#{child_a[:theme_id]}\" data-theme-name=\"#{child_a[:theme_name]}\"/>\"",
                "// Line 195:         child_local_Z =",
                "// Line 202:         link_hrefs =",
                "// Line 203:           manager.stylesheet_link_tag(:desktop_theme).gsub(",
                "// Line 204:             'media=\"all\" rel=\"stylesheet\" data-target=\"desktop_theme\" ',",
                "// Line 205:             \"\",",
                "// Line 206:           )",
                "// Line 207: ",
                "// Line 208:         expect(link_hrefs).to eq(",
                "// Line 209:           [child_remote_R, child_local_A, child_local_Z, parent_local].join(\"",
                "// Line 210: \").html_safe,",
                "// Line 211:         )",
                "// vulnerable line: 212: end",
                "// Line 213: ",
                "// Line 214:       it \"output remote child, remote parent, local child\" do",
                "// Line 215:         remote2 = RemoteTheme.create!(remote_url: \"https://github.com/org/remote-theme2\")",
                "// Line 216:         remote_main_theme =",
                "// Line 217:           Fabricate(:theme, remote_theme: remote2, name: \"remote main\").tap do |t|",
                "// Line 218:             t.set_field(target: :desktop, name: \"scss\", value: \".el{color: red;}\")",
                "// Line 219:             t.save!",
                "// vulnerable line: 220: end",
                "// Line 221: ",
                "// Line 222:         remote_main_theme.add_relative_theme!(:child, z_child_theme)",
                "// Line 223:         remote_main_theme.add_relative_theme!(:child, child_remote)",
                "// Line 224: ",
                "// Line 225:         manager = manager(remote_main_theme.id)",
                "// Line 226:         hrefs = manager.stylesheet_details(:desktop_theme, \"all\")",
                "// Line 227: ",
                "// Line 228:         parent_r = hrefs.select { |href| href[:theme_id] == remote_main_theme.id }.first",
                "// Line 229:         child_z = hrefs.select { |href| href[:theme_id] == z_child_theme.id }.first",
                "// Line 230:         child_r = hrefs.select { |href| href[:theme_id] == child_remote.id }.first",
                "// Line 236:         child_remote =",
                "// Line 237:           \"<link href=\"#{child_r[:new_href]}\" data-theme-id=\"#{child_r[:theme_id]}\" data-theme-name=\"#{child_r[:theme_name]}\"/>\"",
                "// Line 238: ",
                "// Line 239:         link_hrefs =",
                "// Line 240:           manager.stylesheet_link_tag(:desktop_theme).gsub(",
                "// Line 241:             'media=\"all\" rel=\"stylesheet\" data-target=\"desktop_theme\" ',",
                "// Line 242:             \"\",",
                "// Line 243:           )",
                "// Line 244:         expect(link_hrefs).to eq([child_remote, parent_remote, child_local].join(\"",
                "// Line 245: \").html_safe)",
                "// vulnerable line: 246: end",
                "// vulnerable line: 247: end",
                "// Line 248: ",
                "// Line 249:     it \"outputs tags for non-theme targets for theme component\" do",
                "// Line 250:       child_theme = Fabricate(:theme, component: true)",
                "// Line 251: ",
                "// Line 252:       hrefs = manager(child_theme.id).stylesheet_details(:desktop, \"all\")",
                "// Line 253: ",
                "// Line 254:       expect(hrefs.count).to eq(1) # desktop",
                "// vulnerable line: 255: end",
                "// Line 256: ",
                "// Line 257:     it \"does not output tags for component targets with no styles\" do",
                "// Line 258:       embedded_scss_child = Fabricate(:theme, component: true)",
                "// Line 259:       embedded_scss_child.set_field(",
                "// Line 260:         target: :common,",
                "// Line 261:         name: \"embedded_scss\",",
                "// Line 262:         value: \".scss{color: red;}\",",
                "// Line 263:       )",
                "// Line 264:       embedded_scss_child.save!",
                "// Line 265: ",
                "// Line 266:       theme.add_relative_theme!(:child, embedded_scss_child)",
                "// Line 267: ",
                "// vulnerable line: 268: manager = manager(theme.id)",
                "// Line 269: ",
                "// Line 270:       hrefs = manager.stylesheet_details(:desktop_theme, \"all\")",
                "// Line 271:       expect(hrefs.count).to eq(2) # theme + child_theme",
                "// Line 272: ",
                "// Line 273:       hrefs = manager.stylesheet_details(:embedded_theme, \"all\")",
                "// Line 274:       expect(hrefs.count).to eq(3) # theme + child_theme + embedded_scss_child",
                "// vulnerable line: 275: end",
                "// Line 276: ",
                "// Line 277:     it \".stylesheet_details can find components mobile SCSS when target is `:mobile_theme`\" do",
                "// Line 278:       child_with_mobile_scss = Fabricate(:theme, component: true)",
                "// Line 279:       child_with_mobile_scss.set_field(target: :mobile, name: :scss, value: \"body { color: red; }\")",
                "// Line 280:       child_with_mobile_scss.save!",
                "// Line 281:       theme.add_relative_theme!(:child, child_with_mobile_scss)",
                "// Line 282: ",
                "// vulnerable line: 283: manager = manager(theme.id)",
                "// Line 284:       hrefs = manager.stylesheet_details(:mobile_theme, \"all\")",
                "// Line 285: ",
                "// Line 286:       expect(hrefs.count).to eq(3)",
                "// Line 287:       expect(hrefs.find { |h| h[:theme_id] == child_with_mobile_scss.id }).to be_present",
                "// vulnerable line: 288: end",
                "// Line 289: ",
                "// Line 290:     it \"does not output multiple assets for non-theme targets\" do",
                "// Line 291:       manager = manager()",
                "// Line 292: ",
                "// Line 293:       hrefs = manager.stylesheet_details(:admin, \"all\")",
                "// Line 294:       expect(hrefs.count).to eq(1)",
                "// Line 295: ",
                "// Line 296:       hrefs = manager.stylesheet_details(:mobile, \"all\")",
                "// Line 297:       expect(hrefs.count).to eq(1)",
                "// vulnerable line: 298: end",
                "// vulnerable line: 299: end",
                "// Line 300: ",
                "// Line 301:   describe \"digest\" do",
                "// Line 302:     after { DiscoursePluginRegistry.reset! }",
                "// Line 303: ",
                "// Line 304:     it \"can correctly account for plugins in default digest\" do",
                "// Line 305:       builder = Stylesheet::Manager::Builder.new(target: :desktop, manager: manager)",
                "// Line 306:       digest1 = builder.digest",
                "// Line 307: ",
                "// Line 308:       DiscoursePluginRegistry.stylesheets[\"fake\"] = Set.new([\"fake_file\"])",
                "// Line 309:       builder = Stylesheet::Manager::Builder.new(target: :desktop, manager: manager)",
                "// Line 310:       digest2 = builder.digest",
                "// Line 311: ",
                "// Line 312:       expect(digest1).not_to eq(digest2)",
                "// vulnerable line: 313: end",
                "// Line 314: ",
                "// Line 315:     it \"can correctly account for settings in theme's components\" do",
                "// Line 316:       theme = Fabricate(:theme)",
                "// Line 317:       child = Fabricate(:theme, component: true)",
                "// Line 318:       theme.add_relative_theme!(:child, child)",
                "// Line 319: ",
                "// Line 320:       child.set_field(target: :settings, name: :yaml, value: \"childcolor: red\")",
                "// Line 321:       child.set_field(target: :common, name: :scss, value: \"body {background-color: $childcolor}\")",
                "// Line 322:       child.save!",
                "// Line 323: ",
                "// vulnerable line: 324: manager = manager(theme.id)",
                "// Line 325: ",
                "// vulnerable line: 326: builder =",
                "// vulnerable line: 327: Stylesheet::Manager::Builder.new(target: :desktop_theme, theme: theme, manager: manager)",
                "// Line 328: ",
                "// Line 329:       digest1 = builder.digest",
                "// Line 330: ",
                "// Line 331:       child.update_setting(:childcolor, \"green\")",
                "// Line 332: ",
                "// vulnerable line: 333: manager = manager(theme.id)",
                "// Line 334: ",
                "// vulnerable line: 335: builder =",
                "// vulnerable line: 336: Stylesheet::Manager::Builder.new(target: :desktop_theme, theme: theme, manager: manager)",
                "// Line 337: ",
                "// Line 338:       digest2 = builder.digest",
                "// Line 339: ",
                "// Line 340:       expect(digest1).not_to eq(digest2)",
                "// vulnerable line: 341: end",
                "// Line 342: ",
                "// Line 343:     let(:image) { file_from_fixtures(\"logo.png\") }",
                "// Line 344:     let(:image2) { file_from_fixtures(\"logo-dev.png\") }",
                "// Line 345: ",
                "// Line 346:     it \"can correctly account for theme uploads in digest\" do",
                "// Line 347:       theme = Fabricate(:theme)",
                "// Line 348: ",
                "// Line 349:       upload = UploadCreator.new(image, \"logo.png\").create_for(-1)",
                "// Line 350:       field =",
                "// Line 351:         ThemeField.create!(",
                "// Line 352:           theme_id: theme.id,",
                "// Line 353:           target_id: Theme.targets[:common],",
                "// Line 354:           name: \"logo\",",
                "// Line 355:           value: \"\",",
                "// Line 356:           upload_id: upload.id,",
                "// Line 357:           type_id: ThemeField.types[:theme_upload_var],",
                "// Line 358:         )",
                "// Line 359: ",
                "// vulnerable line: 360: manager = manager(theme.id)",
                "// Line 361: ",
                "// vulnerable line: 362: builder =",
                "// vulnerable line: 363: Stylesheet::Manager::Builder.new(target: :desktop_theme, theme: theme, manager: manager)",
                "// Line 364: ",
                "// Line 365:       digest1 = builder.digest",
                "// Line 366:       field.destroy!",
                "// Line 367: ",
                "// Line 368:       upload = UploadCreator.new(image2, \"logo.png\").create_for(-1)",
                "// Line 369:       field =",
                "// Line 370:         ThemeField.create!(",
                "// Line 371:           theme_id: theme.id,",
                "// Line 372:           target_id: Theme.targets[:common],",
                "// Line 373:           name: \"logo\",",
                "// Line 374:           value: \"\",",
                "// Line 375:           upload_id: upload.id,",
                "// Line 376:           type_id: ThemeField.types[:theme_upload_var],",
                "// Line 377:         )",
                "// Line 378: ",
                "// vulnerable line: 379: builder =",
                "// Line 380:         Stylesheet::Manager::Builder.new(",
                "// Line 381:           target: :desktop_theme,",
                "// Line 382:           theme: theme.reload,",
                "// Line 383:           manager: manager,",
                "// Line 384:         )",
                "// Line 385: ",
                "// Line 386:       digest2 = builder.digest",
                "// Line 387: ",
                "// Line 388:       expect(digest1).not_to eq(digest2)",
                "// vulnerable line: 389: end",
                "// Line 390: ",
                "// Line 391:     it \"can generate digest with a missing upload record\" do",
                "// Line 392:       theme = Fabricate(:theme)",
                "// Line 393: ",
                "// Line 394:       upload = UploadCreator.new(image, \"logo.png\").create_for(-1)",
                "// Line 395:       field =",
                "// Line 396:         ThemeField.create!(",
                "// Line 397:           theme_id: theme.id,",
                "// Line 398:           target_id: Theme.targets[:common],",
                "// Line 399:           name: \"logo\",",
                "// Line 406:       field =",
                "// Line 407:         ThemeField.create!(",
                "// Line 408:           theme_id: theme.id,",
                "// Line 409:           target_id: Theme.targets[:common],",
                "// Line 410:           name: \"icon\",",
                "// Line 411:           value: \"\",",
                "// Line 412:           upload_id: upload2.id,",
                "// Line 413:           type_id: ThemeField.types[:theme_upload_var],",
                "// Line 414:         )",
                "// Line 415: ",
                "// vulnerable line: 416: manager = manager(theme.id)",
                "// Line 417: ",
                "// vulnerable line: 418: builder =",
                "// vulnerable line: 419: Stylesheet::Manager::Builder.new(target: :desktop_theme, theme: theme, manager: manager)",
                "// Line 420: ",
                "// Line 421:       digest1 = builder.digest",
                "// Line 422:       upload.delete",
                "// Line 423: ",
                "// vulnerable line: 424: builder =",
                "// Line 425:         Stylesheet::Manager::Builder.new(",
                "// Line 426:           target: :desktop_theme,",
                "// Line 427:           theme: theme.reload,",
                "// Line 428:           manager: manager,",
                "// Line 429:         )",
                "// Line 430: ",
                "// Line 431:       digest2 = builder.digest",
                "// Line 432: ",
                "// Line 433:       expect(digest1).not_to eq(digest2)",
                "// vulnerable line: 434: end",
                "// Line 435: ",
                "// Line 436:     it \"returns different digest based on target\" do",
                "// Line 437:       theme = Fabricate(:theme)",
                "// vulnerable line: 438: builder =",
                "// vulnerable line: 439: Stylesheet::Manager::Builder.new(target: :desktop_theme, theme: theme, manager: manager)",
                "// Line 440:       expect(builder.digest).to eq(builder.theme_digest)",
                "// Line 441: ",
                "// Line 442:       builder = Stylesheet::Manager::Builder.new(target: :color_definitions, manager: manager)",
                "// Line 443:       expect(builder.digest).to eq(builder.color_scheme_digest)",
                "// Line 444: ",
                "// Line 445:       builder = Stylesheet::Manager::Builder.new(target: :admin, manager: manager)",
                "// Line 446:       expect(builder.digest).to eq(builder.default_digest)",
                "// Line 447: ",
                "// Line 448:       builder = Stylesheet::Manager::Builder.new(target: :desktop, manager: manager)",
                "// Line 449:       expect(builder.digest).to eq(builder.default_digest)",
                "// vulnerable line: 450: end",
                "// Line 451: ",
                "// Line 452:     it \"returns different digest based on hostname\" do",
                "// Line 453:       theme = Fabricate(:theme)",
                "// Line 454: ",
                "// Line 455:       SiteSetting.force_hostname = \"host1.example.com\"",
                "// Line 456:       initial_theme_digest =",
                "// Line 457:         Stylesheet::Manager::Builder.new(",
                "// Line 458:           target: :desktop_theme,",
                "// Line 459:           theme: theme,",
                "// Line 460:           manager: manager,",
                "// Line 472:           manager: manager,",
                "// Line 473:         ).digest",
                "// Line 474:       new_color_scheme_digest =",
                "// Line 475:         Stylesheet::Manager::Builder.new(target: :color_definitions, manager: manager).digest",
                "// Line 476:       new_default_digest =",
                "// Line 477:         Stylesheet::Manager::Builder.new(target: :desktop, manager: manager).digest",
                "// Line 478: ",
                "// Line 479:       expect(initial_theme_digest).not_to eq(new_theme_digest)",
                "// Line 480:       expect(initial_color_scheme_digest).not_to eq(new_color_scheme_digest)",
                "// Line 481:       expect(initial_default_digest).not_to eq(new_default_digest)",
                "// vulnerable line: 482: end",
                "// vulnerable line: 483: end",
                "// Line 484: ",
                "// Line 485:   describe \"color_scheme_digest\" do",
                "// Line 486:     fab!(:theme)",
                "// Line 487: ",
                "// vulnerable line: 488: it \"changes with category background image\" do",
                "// vulnerable line: 489: category1 = Fabricate(:category, uploaded_background_id: 123, updated_at: 1.week.ago)",
                "// vulnerable line: 490: category2 = Fabricate(:category, uploaded_background_id: 456, updated_at: 2.days.ago)",
                "// Line 491: ",
                "// vulnerable line: 492: manager = manager(theme.id)",
                "// Line 493: ",
                "// vulnerable line: 494: builder =",
                "// vulnerable line: 495: Stylesheet::Manager::Builder.new(target: :desktop_theme, theme: theme, manager: manager)",
                "// Line 496: ",
                "// vulnerable line: 497: digest1 = builder.color_scheme_digest",
                "// Line 498: ",
                "// vulnerable line: 499: category2.update!(uploaded_background_id: 789, updated_at: 1.day.ago)",
                "// Line 500: ",
                "// vulnerable line: 501: digest2 = builder.color_scheme_digest",
                "// vulnerable line: 502: expect(digest2).to_not eq(digest1)",
                "// Line 503: ",
                "// vulnerable line: 504: category1.update!(uploaded_background_id: nil, updated_at: 5.minutes.ago)",
                "// Line 505: ",
                "// vulnerable line: 506: digest3 = builder.color_scheme_digest",
                "// vulnerable line: 507: expect(digest3).to_not eq(digest2)",
                "// vulnerable line: 508: expect(digest3).to_not eq(digest1)",
                "// vulnerable line: 509: end",
                "// Line 510: ",
                "// Line 511:     it \"updates digest when updating a color scheme\" do",
                "// Line 512:       scheme = ColorScheme.create_from_base(name: \"Neutral\", base_scheme_id: \"Neutral\")",
                "// vulnerable line: 513: manager = manager(theme.id)",
                "// Line 514: ",
                "// vulnerable line: 515: builder =",
                "// Line 516:         Stylesheet::Manager::Builder.new(",
                "// Line 517:           target: :color_definitions,",
                "// Line 518:           theme: theme,",
                "// Line 519:           color_scheme: scheme,",
                "// Line 520:           manager: manager,",
                "// Line 521:         )",
                "// Line 522: ",
                "// vulnerable line: 523: digest1 = builder.color_scheme_digest",
                "// Line 524: ",
                "// Line 525:       ColorSchemeRevisor.revise(scheme, colors: [{ name: \"primary\", hex: \"CC0000\" }])",
                "// Line 526: ",
                "// vulnerable line: 527: digest2 = builder.color_scheme_digest",
                "// Line 528: ",
                "// Line 529:       expect(digest1).to_not eq(digest2)",
                "// vulnerable line: 530: end",
                "// Line 531: ",
                "// Line 532:     it \"updates digest when updating a theme's color definitions\" do",
                "// Line 533:       scheme = ColorScheme.base",
                "// vulnerable line: 534: manager = manager(theme.id)",
                "// Line 535: ",
                "// vulnerable line: 536: builder =",
                "// Line 537:         Stylesheet::Manager::Builder.new(",
                "// Line 538:           target: :color_definitions,",
                "// Line 539:           theme: theme,",
                "// Line 540:           color_scheme: scheme,",
                "// Line 541:           manager: manager,",
                "// Line 542:         )",
                "// Line 543: ",
                "// vulnerable line: 544: digest1 = builder.color_scheme_digest",
                "// Line 545: ",
                "// Line 546:       theme.set_field(target: :common, name: :color_definitions, value: \"body {color: brown}\")",
                "// Line 547:       theme.save!",
                "// Line 548: ",
                "// vulnerable line: 549: manager = manager(theme.id)",
                "// Line 550: ",
                "// vulnerable line: 551: builder =",
                "// Line 552:         Stylesheet::Manager::Builder.new(",
                "// Line 553:           target: :color_definitions,",
                "// Line 554:           theme: theme,",
                "// Line 555:           color_scheme: scheme,",
                "// Line 556:           manager: manager,",
                "// Line 557:         )",
                "// Line 558: ",
                "// vulnerable line: 559: digest2 = builder.color_scheme_digest",
                "// Line 560: ",
                "// Line 561:       expect(digest1).to_not eq(digest2)",
                "// vulnerable line: 562: end",
                "// Line 563: ",
                "// Line 564:     it \"updates digest when updating a theme component's color definitions\" do",
                "// Line 565:       scheme = ColorScheme.base",
                "// vulnerable line: 566: manager = manager(theme.id)",
                "// Line 567: ",
                "// vulnerable line: 568: builder =",
                "// Line 569:         Stylesheet::Manager::Builder.new(",
                "// Line 570:           target: :color_definitions,",
                "// Line 571:           theme: theme,",
                "// Line 572:           color_scheme: scheme,",
                "// Line 573:           manager: manager,",
                "// Line 574:         )",
                "// Line 575: ",
                "// vulnerable line: 576: digest1 = builder.color_scheme_digest",
                "// Line 577: ",
                "// Line 578:       child_theme = Fabricate(:theme, component: true)",
                "// Line 579:       child_theme.set_field(",
                "// Line 580:         target: :common,",
                "// Line 581:         name: \"color_definitions\",",
                "// Line 582:         value: \"body {color: fuchsia}\",",
                "// Line 583:       )",
                "// Line 584:       child_theme.save!",
                "// Line 585:       theme.add_relative_theme!(:child, child_theme)",
                "// Line 586:       theme.save!",
                "// Line 587: ",
                "// vulnerable line: 588: manager = manager(theme.id)",
                "// Line 589: ",
                "// vulnerable line: 590: builder =",
                "// Line 591:         Stylesheet::Manager::Builder.new(",
                "// Line 592:           target: :color_definitions,",
                "// Line 593:           theme: theme,",
                "// Line 594:           color_scheme: scheme,",
                "// Line 595:           manager: manager,",
                "// Line 596:         )",
                "// Line 597: ",
                "// vulnerable line: 598: digest2 = builder.color_scheme_digest",
                "// Line 599:       expect(digest1).to_not eq(digest2)",
                "// Line 600: ",
                "// Line 601:       child_theme.set_field(target: :common, name: \"color_definitions\", value: \"body {color: blue}\")",
                "// Line 602:       child_theme.save!",
                "// Line 603: ",
                "// vulnerable line: 604: manager = manager(theme.id)",
                "// Line 605: ",
                "// vulnerable line: 606: builder =",
                "// Line 607:         Stylesheet::Manager::Builder.new(",
                "// Line 608:           target: :color_definitions,",
                "// Line 609:           theme: theme,",
                "// Line 610:           color_scheme: scheme,",
                "// Line 611:           manager: manager,",
                "// Line 612:         )",
                "// Line 613: ",
                "// vulnerable line: 614: digest3 = builder.color_scheme_digest",
                "// Line 615:       expect(digest2).to_not eq(digest3)",
                "// vulnerable line: 616: end",
                "// Line 617: ",
                "// Line 618:     it \"updates digest when setting fonts\" do",
                "// vulnerable line: 619: manager = manager(theme.id)",
                "// vulnerable line: 620: builder =",
                "// vulnerable line: 621: Stylesheet::Manager::Builder.new(target: :desktop_theme, theme: theme, manager: manager)",
                "// vulnerable line: 622: digest1 = builder.color_scheme_digest",
                "// Line 623:       SiteSetting.base_font = DiscourseFonts.fonts[2][:key]",
                "// vulnerable line: 624: digest2 = builder.color_scheme_digest",
                "// Line 625: ",
                "// Line 626:       expect(digest1).to_not eq(digest2)",
                "// Line 627: ",
                "// Line 628:       SiteSetting.heading_font = DiscourseFonts.fonts[4][:key]",
                "// vulnerable line: 629: digest3 = builder.color_scheme_digest",
                "// Line 630: ",
                "// vulnerable line: 631: expect(digest3).to_not eq(digest2)",
                "// vulnerable line: 632: end",
                "// vulnerable line: 633: end",
                "// Line 634: ",
                "// Line 635:   describe \"color_scheme_stylesheets\" do",
                "// Line 636:     it \"returns something by default\" do",
                "// Line 637:       link = manager.color_scheme_stylesheet_link_tag",
                "// Line 638:       expect(link).to include(\"color_definitions_base\")",
                "// vulnerable line: 639: end",
                "// Line 640: ",
                "// Line 641:     it \"does not crash when no default theme is set\" do",
                "// Line 642:       SiteSetting.default_theme_id = -1",
                "// Line 643:       link = manager.color_scheme_stylesheet_link_tag",
                "// Line 644: ",
                "// Line 645:       expect(link).to include(\"color_definitions_base\")",
                "// vulnerable line: 646: end",
                "// Line 647: ",
                "// Line 648:     it \"loads base scheme when defined scheme id is missing\" do",
                "// Line 649:       link = manager.color_scheme_stylesheet_link_tag(125)",
                "// Line 650:       expect(link).to include(\"color_definitions_base\")",
                "// vulnerable line: 651: end",
                "// Line 652: ",
                "// Line 653:     it \"loads nothing when defined dark scheme id is missing\" do",
                "// Line 654:       link = manager.color_scheme_stylesheet_link_tag(125, \"(prefers-color-scheme: dark)\")",
                "// Line 655:       expect(link).to eq(\"\")",
                "// vulnerable line: 656: end",
                "// Line 657: ",
                "// Line 658:     it \"uses the correct color scheme from the default site theme\" do",
                "// Line 659:       cs = Fabricate(:color_scheme, name: \"Funky\")",
                "// Line 660:       theme = Fabricate(:theme, color_scheme_id: cs.id)",
                "// Line 661:       SiteSetting.default_theme_id = theme.id",
                "// Line 662: ",
                "// Line 663:       link = manager.color_scheme_stylesheet_link_tag()",
                "// Line 664:       expect(link).to include(\"/stylesheets/color_definitions_funky_#{cs.id}_\")",
                "// vulnerable line: 665: end",
                "// Line 666: ",
                "// Line 667:     it \"uses the correct color scheme when a non-default theme is selected and it uses the base 'Light' scheme\" do",
                "// Line 668:       cs = Fabricate(:color_scheme, name: \"Not This\")",
                "// Line 669:       ColorSchemeRevisor.revise(cs, colors: [{ name: \"primary\", hex: \"CC0000\" }])",
                "// Line 670:       default_theme = Fabricate(:theme, color_scheme_id: cs.id)",
                "// Line 671:       SiteSetting.default_theme_id = default_theme.id",
                "// Line 672: ",
                "// Line 673:       user_theme = Fabricate(:theme, color_scheme_id: nil)",
                "// Line 674: ",
                "// Line 675:       link = manager(user_theme.id).color_scheme_stylesheet_link_tag(nil, \"all\")",
                "// Line 677: ",
                "// Line 678:       stylesheet =",
                "// Line 679:         Stylesheet::Manager::Builder.new(",
                "// Line 680:           target: :color_definitions,",
                "// Line 681:           theme: user_theme,",
                "// Line 682:           manager: manager,",
                "// Line 683:         ).compile(force: true)",
                "// Line 684: ",
                "// Line 685:       expect(stylesheet).not_to include(\"--primary: #CC0000;\")",
                "// Line 686:       expect(stylesheet).to include(\"--primary: #222222;\") # from base scheme",
                "// vulnerable line: 687: end",
                "// Line 688: ",
                "// Line 689:     it \"uses the correct scheme when a valid scheme id is used\" do",
                "// Line 690:       link = manager.color_scheme_stylesheet_link_tag(ColorScheme.first.id)",
                "// Line 691:       slug = Slug.for(ColorScheme.first.name) + \"_\" + ColorScheme.first.id.to_s",
                "// Line 692:       expect(link).to include(\"/stylesheets/color_definitions_#{slug}_\")",
                "// vulnerable line: 693: end",
                "// Line 694: ",
                "// Line 695:     it \"does not fail with a color scheme name containing spaces and special characters\" do",
                "// Line 696:       cs = Fabricate(:color_scheme, name: 'Funky Bunch -_ @#$*(')",
                "// Line 697:       theme = Fabricate(:theme, color_scheme_id: cs.id)",
                "// Line 698:       SiteSetting.default_theme_id = theme.id",
                "// Line 699: ",
                "// Line 700:       link = manager.color_scheme_stylesheet_link_tag",
                "// Line 701:       expect(link).to include(\"/stylesheets/color_definitions_funky-bunch_#{cs.id}_\")",
                "// vulnerable line: 702: end",
                "// Line 703: ",
                "// Line 704:     it \"updates outputted colors when updating a color scheme\" do",
                "// Line 705:       scheme = ColorScheme.create_from_base(name: \"Neutral\", base_scheme_id: \"Neutral\")",
                "// Line 706:       theme = Fabricate(:theme)",
                "// vulnerable line: 707: manager = manager(theme.id)",
                "// Line 708: ",
                "// vulnerable line: 709: builder =",
                "// Line 710:         Stylesheet::Manager::Builder.new(",
                "// Line 711:           target: :color_definitions,",
                "// Line 712:           theme: theme,",
                "// Line 713:           color_scheme: scheme,",
                "// Line 714:           manager: manager,",
                "// Line 715:         )",
                "// Line 716:       stylesheet = builder.compile",
                "// Line 717: ",
                "// Line 718:       ColorSchemeRevisor.revise(scheme, colors: [{ name: \"primary\", hex: \"CC0000\" }])",
                "// Line 719: ",
                "// Line 722:           target: :color_definitions,",
                "// Line 723:           theme: theme,",
                "// Line 724:           color_scheme: scheme,",
                "// Line 725:           manager: manager,",
                "// Line 726:         )",
                "// Line 727: ",
                "// Line 728:       stylesheet2 = builder2.compile",
                "// Line 729: ",
                "// Line 730:       expect(stylesheet).not_to eq(stylesheet2)",
                "// Line 731:       expect(stylesheet2).to include(\"--primary: #CC0000;\")",
                "// vulnerable line: 732: end",
                "// Line 733: ",
                "// Line 734:     it \"includes updated font definitions\" do",
                "// Line 735:       details1 = manager.color_scheme_stylesheet_details(nil, \"all\")",
                "// Line 736: ",
                "// Line 737:       SiteSetting.base_font = DiscourseFonts.fonts[2][:key]",
                "// Line 738: ",
                "// Line 739:       details2 = manager.color_scheme_stylesheet_details(nil, \"all\")",
                "// Line 740:       expect(details1[:new_href]).not_to eq(details2[:new_href])",
                "// vulnerable line: 741: end",
                "// Line 742: ",
                "// Line 743:     it \"calls the preload callback when set\" do",
                "// Line 744:       preload_list = []",
                "// Line 745:       cs = Fabricate(:color_scheme, name: \"Funky\")",
                "// Line 746:       theme = Fabricate(:theme, color_scheme_id: cs.id)",
                "// Line 747:       preload_callback = ->(href, type) { preload_list << [href, type] }",
                "// Line 748: ",
                "// Line 749:       expect {",
                "// Line 750:         manager.color_scheme_stylesheet_link_tag(theme.id, \"all\", preload_callback)",
                "// Line 751:       }.to change(preload_list, :size).by(1)",
                "// vulnerable line: 752: end",
                "// Line 753: ",
                "// Line 754:     context \"with theme colors\" do",
                "// Line 755:       let(:theme) do",
                "// Line 756:         Fabricate(:theme).tap do |t|",
                "// Line 757:           t.set_field(",
                "// Line 758:             target: :common,",
                "// Line 759:             name: \"color_definitions\",",
                "// Line 760:             value: \":root {--special: rebeccapurple;}\",",
                "// Line 761:           )",
                "// Line 762:           t.save!",
                "// vulnerable line: 763: end",
                "// vulnerable line: 764: end",
                "// Line 765:       let(:scss_child) { ':root {--child-definition: #{dark-light-choose(#c00, #fff)};}' }",
                "// Line 766:       let(:child) do",
                "// Line 767:         Fabricate(:theme, component: true, name: \"Child Theme\").tap do |t|",
                "// Line 768:           t.set_field(target: :common, name: \"color_definitions\", value: scss_child)",
                "// Line 769:           t.save!",
                "// vulnerable line: 770: end",
                "// vulnerable line: 771: end",
                "// Line 772: ",
                "// Line 773:       let(:scheme) { ColorScheme.base }",
                "// Line 774:       let(:dark_scheme) { ColorScheme.create_from_base(name: \"Dark\", base_scheme_id: \"Dark\") }",
                "// Line 775: ",
                "// Line 776:       it \"includes theme color definitions in color scheme\" do",
                "// vulnerable line: 777: manager = manager(theme.id)",
                "// Line 778: ",
                "// Line 779:         stylesheet =",
                "// Line 780:           Stylesheet::Manager::Builder.new(",
                "// Line 781:             target: :color_definitions,",
                "// Line 782:             theme: theme,",
                "// Line 783:             color_scheme: scheme,",
                "// Line 784:             manager: manager,",
                "// Line 785:           ).compile(force: true)",
                "// Line 786: ",
                "// Line 787:         expect(stylesheet).to include(\"--special: rebeccapurple\")",
                "// vulnerable line: 788: end",
                "// Line 789: ",
                "// Line 790:       it \"includes child color definitions in color schemes\" do",
                "// Line 791:         theme.add_relative_theme!(:child, child)",
                "// Line 792:         theme.save!",
                "// vulnerable line: 793: manager = manager(theme.id)",
                "// Line 794: ",
                "// Line 795:         stylesheet =",
                "// Line 796:           Stylesheet::Manager::Builder.new(",
                "// Line 797:             target: :color_definitions,",
                "// Line 798:             theme: theme,",
                "// Line 799:             color_scheme: scheme,",
                "// Line 800:             manager: manager,",
                "// Line 801:           ).compile(force: true)",
                "// Line 802: ",
                "// Line 803:         expect(stylesheet).to include(\"--special: rebeccapurple\")",
                "// Line 804:         expect(stylesheet).to include(\"--child-definition: #c00\")",
                "// vulnerable line: 805: end",
                "// Line 806: ",
                "// Line 807:       it \"respects selected color scheme in child color definitions\" do",
                "// Line 808:         theme.add_relative_theme!(:child, child)",
                "// Line 809:         theme.save!",
                "// Line 810: ",
                "// vulnerable line: 811: manager = manager(theme.id)",
                "// Line 812: ",
                "// Line 813:         stylesheet =",
                "// Line 814:           Stylesheet::Manager::Builder.new(",
                "// Line 815:             target: :color_definitions,",
                "// Line 816:             theme: theme,",
                "// Line 817:             color_scheme: dark_scheme,",
                "// Line 818:             manager: manager,",
                "// Line 819:           ).compile(force: true)",
                "// Line 820: ",
                "// Line 821:         expect(stylesheet).to include(\"--special: rebeccapurple\")",
                "// Line 822:         expect(stylesheet).to include(\"--child-definition: #fff\")",
                "// vulnerable line: 823: end",
                "// Line 824: ",
                "// Line 825:       it \"fails gracefully for broken SCSS\" do",
                "// Line 826:         scss = \"$test: $missing-var;\"",
                "// Line 827:         theme.set_field(target: :common, name: \"color_definitions\", value: scss)",
                "// Line 828:         theme.save!",
                "// Line 829: ",
                "// vulnerable line: 830: manager = manager(theme.id)",
                "// Line 831: ",
                "// Line 832:         stylesheet =",
                "// Line 833:           Stylesheet::Manager::Builder.new(",
                "// Line 834:             target: :color_definitions,",
                "// Line 835:             theme: theme,",
                "// Line 836:             color_scheme: scheme,",
                "// Line 837:             manager: manager,",
                "// Line 838:           )",
                "// Line 839: ",
                "// Line 840:         expect { stylesheet.compile }.not_to raise_error",
                "// vulnerable line: 841: end",
                "// Line 842: ",
                "// Line 843:       it \"child theme SCSS includes the default theme's color scheme variables\" do",
                "// Line 844:         SiteSetting.default_theme_id = theme.id",
                "// Line 845:         custom_scheme = ColorScheme.create_from_base(name: \"Neutral\", base_scheme_id: \"Neutral\")",
                "// Line 846:         ColorSchemeRevisor.revise(custom_scheme, colors: [{ name: \"primary\", hex: \"CC0000\" }])",
                "// Line 847:         theme.color_scheme_id = custom_scheme.id",
                "// Line 848:         theme.save!",
                "// Line 849: ",
                "// Line 850:         scss = \"body{ border: 2px solid $primary;}\"",
                "// Line 851:         child.set_field(target: :common, name: \"scss\", value: scss)",
                "// Line 852:         child.save!",
                "// Line 853: ",
                "// vulnerable line: 854: manager = manager(theme.id)",
                "// Line 855: ",
                "// Line 856:         child_theme_manager =",
                "// Line 857:           Stylesheet::Manager::Builder.new(target: :desktop_theme, theme: child, manager: manager)",
                "// Line 858: ",
                "// Line 859:         child_theme_manager.compile(force: true)",
                "// Line 860: ",
                "// Line 861:         child_css = File.read(child_theme_manager.stylesheet_fullpath)",
                "// Line 862:         expect(child_css).to include(\"body{border:2px solid #c00}\")",
                "// vulnerable line: 863: end",
                "// vulnerable line: 864: end",
                "// Line 865: ",
                "// Line 866:     context \"with encoded slugs\" do",
                "// Line 867:       before { SiteSetting.slug_generation_method = \"encoded\" }",
                "// Line 868:       after { SiteSetting.slug_generation_method = \"ascii\" }",
                "// Line 869: ",
                "// Line 870:       it \"strips unicode in color scheme stylesheet filenames\" do",
                "// Line 871:         cs = Fabricate(:color_scheme, name: \"Grün\")",
                "// Line 872:         cs2 = Fabricate(:color_scheme, name: \"어두운\")",
                "// Line 873: ",
                "// Line 874:         link = manager.color_scheme_stylesheet_link_tag(cs.id)",
                "// Line 875:         expect(link).to include(\"/stylesheets/color_definitions_grun_#{cs.id}_\")",
                "// Line 876:         link2 = manager.color_scheme_stylesheet_link_tag(cs2.id)",
                "// Line 877:         expect(link2).to include(\"/stylesheets/color_definitions_scheme_#{cs2.id}_\")",
                "// vulnerable line: 878: end",
                "// vulnerable line: 879: end",
                "// vulnerable line: 880: end",
                "// Line 881: ",
                "// Line 882:   describe \".precompile_css\" do",
                "// Line 883:     let(:core_targets) do",
                "// Line 884:       %w[desktop mobile admin wizard desktop_rtl mobile_rtl admin_rtl wizard_rtl]",
                "// vulnerable line: 885: end",
                "// Line 886: ",
                "// Line 887:     before { STDERR.stubs(:write) }",
                "// Line 888: ",
                "// Line 889:     after do",
                "// Line 890:       STDERR.unstub(:write)",
                "// Line 891:       Stylesheet::Manager.rm_cache_folder",
                "// vulnerable line: 892: end",
                "// Line 893: ",
                "// Line 894:     it \"correctly generates precompiled CSS\" do",
                "// Line 895:       scheme1 = ColorScheme.create!(name: \"scheme1\")",
                "// Line 896:       scheme2 = ColorScheme.create!(name: \"scheme2\")",
                "// Line 897:       theme_targets = %i[desktop_theme mobile_theme]",
                "// Line 898: ",
                "// Line 899:       Theme.update_all(user_selectable: false)",
                "// Line 900:       user_theme = Fabricate(:theme, user_selectable: true, color_scheme: scheme1)",
                "// Line 901:       default_theme = Fabricate(:theme, user_selectable: true, color_scheme: scheme2)",
                "// Line 902: ",
                "// Line 903:       child_theme =",
                "// Line 904:         Fabricate(:theme).tap do |t|",
                "// Line 905:           t.component = true",
                "// Line 906:           t.save!",
                "// Line 907:           user_theme.add_relative_theme!(:child, t)",
                "// vulnerable line: 908: end",
                "// Line 909: ",
                "// Line 910:       child_theme_with_css =",
                "// Line 911:         Fabricate(:theme).tap do |t|",
                "// Line 912:           t.component = true",
                "// Line 913: ",
                "// Line 914:           t.set_field(target: :common, name: :scss, value: \"body { background: green }\")",
                "// Line 915: ",
                "// Line 916:           t.save!",
                "// Line 917: ",
                "// Line 918:           user_theme.add_relative_theme!(:child, t)",
                "// Line 919:           default_theme.add_relative_theme!(:child, t)",
                "// vulnerable line: 920: end",
                "// Line 921: ",
                "// Line 922:       default_theme.set_default!",
                "// Line 923: ",
                "// Line 924:       StylesheetCache.destroy_all",
                "// Line 925: ",
                "// Line 926:       # only core",
                "// Line 927:       output = capture_output(:stderr) { Stylesheet::Manager.precompile_css }",
                "// Line 928: ",
                "// Line 929:       results = StylesheetCache.pluck(:target)",
                "// Line 930:       expect(results).to contain_exactly(*core_targets)",
                "// Line 941: ",
                "// Line 942:       # themes + core",
                "// Line 943:       Stylesheet::Manager.precompile_css",
                "// Line 944:       results = StylesheetCache.pluck(:target)",
                "// Line 945:       expect(results.size).to eq(30) # 11 core targets + 9 theme + 10 color schemes",
                "// Line 946: ",
                "// Line 947:       theme_targets.each do |tar|",
                "// Line 948:         expect(",
                "// Line 949:           results.count { |target| target =~ /^#{tar}_(#{user_theme.id}|#{default_theme.id})$/ },",
                "// Line 950:         ).to eq(2)",
                "// vulnerable line: 951: end",
                "// Line 952: ",
                "// Line 953:       Theme.clear_default!",
                "// Line 954:       StylesheetCache.destroy_all",
                "// Line 955: ",
                "// Line 956:       # themes + core with no theme set as default",
                "// Line 957:       Stylesheet::Manager.precompile_css",
                "// Line 958:       Stylesheet::Manager.precompile_theme_css",
                "// Line 959:       results = StylesheetCache.pluck(:target)",
                "// Line 960:       expect(results.size).to eq(30) # 11 core targets + 9 theme + 10 color schemes",
                "// Line 961: ",
                "// Line 962:       expect(results).to include(\"color_definitions_#{scheme1.name}_#{scheme1.id}_#{user_theme.id}\")",
                "// Line 963:       expect(results).to include(",
                "// Line 964:         \"color_definitions_#{scheme2.name}_#{scheme2.id}_#{default_theme.id}\",",
                "// Line 965:       )",
                "// Line 966: ",
                "// Line 967:       # Check that sourceMappingURL includes __ws parameter",
                "// Line 968:       content = StylesheetCache.last.content",
                "// Line 969:       expect(content).to match(%r{# sourceMappingURL=[^/]+\\.css\\.map\\?__ws=test\\.localhost})",
                "// vulnerable line: 970: end",
                "// Line 971: ",
                "// Line 972:     it \"generates precompiled CSS with a missing upload\" do",
                "// Line 973:       image = file_from_fixtures(\"logo.png\")",
                "// Line 974:       upload = UploadCreator.new(image, \"logo.png\").create_for(-1)",
                "// Line 975: ",
                "// Line 976:       scheme = ColorScheme.create!(name: \"scheme\")",
                "// Line 977:       theme_targets = %i[desktop_theme mobile_theme]",
                "// Line 978: ",
                "// Line 979:       default_theme =",
                "// Line 980:         Fabricate(:theme, color_scheme: scheme).tap do |t|",
                "// Line 988:               type_id: ThemeField.types[:theme_upload_var],",
                "// Line 989:             )",
                "// Line 990: ",
                "// Line 991:           t.set_field(",
                "// Line 992:             target: :common,",
                "// Line 993:             name: :scss,",
                "// Line 994:             value: \"body { background: url($logo); border: 3px solid green; }\",",
                "// Line 995:           )",
                "// Line 996: ",
                "// Line 997:           t.save!",
                "// vulnerable line: 998: end",
                "// Line 999: ",
                "// Line 1000:       default_theme.set_default!",
                "// Line 1001:       upload.destroy!",
                "// Line 1002:       StylesheetCache.destroy_all",
                "// Line 1003: ",
                "// Line 1004:       Stylesheet::Manager.precompile_theme_css",
                "// Line 1005: ",
                "// Line 1006:       manager = manager(default_theme.id)",
                "// Line 1007:       theme_builder =",
                "// Line 1008:         Stylesheet::Manager::Builder.new(",
                "// Line 1009:           target: :desktop_theme,",
                "// Line 1010:           theme: default_theme,",
                "// Line 1011:           manager: manager,",
                "// Line 1012:         )",
                "// Line 1013:       css = File.read(theme_builder.stylesheet_fullpath)",
                "// Line 1014:       expect(css).to include(\"border:3px solid green}\")",
                "// vulnerable line: 1015: end",
                "// Line 1016: ",
                "// Line 1017:     context \"when there are enabled plugins\" do",
                "// Line 1018:       let(:plugin1) do",
                "// Line 1019:         plugin1 = plugin_from_fixtures(\"my_plugin\")",
                "// Line 1020:         plugin1.register_css \"body { padding: 1px 2px 3px 4px; }\"",
                "// Line 1021:         plugin1",
                "// vulnerable line: 1022: end",
                "// Line 1023: ",
                "// Line 1024:       let(:plugin2) do",
                "// Line 1025:         plugin2 = plugin_from_fixtures(\"scss_plugin\")",
                "// Line 1026:         plugin2",
                "// vulnerable line: 1027: end",
                "// Line 1028: ",
                "// Line 1029:       before do",
                "// Line 1030:         Discourse.plugins << plugin1",
                "// Line 1031:         Discourse.plugins << plugin2",
                "// Line 1032:         plugin1.activate!",
                "// Line 1033:         plugin2.activate!",
                "// Line 1034:         Stylesheet::Importer.register_imports!",
                "// Line 1035:         StylesheetCache.destroy_all",
                "// vulnerable line: 1036: end",
                "// Line 1037: ",
                "// Line 1038:       after do",
                "// Line 1039:         Discourse.plugins.delete(plugin1)",
                "// Line 1040:         Discourse.plugins.delete(plugin2)",
                "// Line 1041:         Stylesheet::Importer.register_imports!",
                "// Line 1042:         DiscoursePluginRegistry.reset!",
                "// vulnerable line: 1043: end",
                "// Line 1044: ",
                "// Line 1045:       it \"generates LTR and RTL CSS for plugins\" do",
                "// Line 1046:         output = capture_output(:stderr) { Stylesheet::Manager.precompile_css }",
                "// Line 1047: ",
                "// Line 1048:         results = StylesheetCache.pluck(:target)",
                "// Line 1049:         expect(results).to contain_exactly(",
                "// Line 1050:           *core_targets,",
                "// Line 1051:           \"my_plugin\",",
                "// Line 1052:           \"my_plugin_rtl\",",
                "// Line 1053:           \"scss_plugin\",",
                "// Line 1067:         expect(plugin1_rtl_css).to include(\"body{padding:1px 4px 3px 2px}\")",
                "// Line 1068:         expect(plugin1_rtl_css).not_to include(\"body{padding:1px 2px 3px 4px}\")",
                "// Line 1069: ",
                "// Line 1070:         plugin2_ltr_css = StylesheetCache.where(target: \"scss_plugin\").pluck(:content).first",
                "// Line 1071:         plugin2_rtl_css = StylesheetCache.where(target: \"scss_plugin_rtl\").pluck(:content).first",
                "// Line 1072: ",
                "// Line 1073:         expect(plugin2_ltr_css).to include(\".pull-left{float:left}\")",
                "// Line 1074:         expect(plugin2_ltr_css).not_to include(\".pull-left{float:right}\")",
                "// Line 1075:         expect(plugin2_rtl_css).to include(\".pull-left{float:right}\")",
                "// Line 1076:         expect(plugin2_rtl_css).not_to include(\".pull-left{float:left}\")",
                "// vulnerable line: 1077: end",
                "// vulnerable line: 1078: end",
                "// vulnerable line: 1079: end",
                "// Line 1080: ",
                "// Line 1081:   describe \".fs_asset_cachebuster\" do",
                "// Line 1082:     it \"returns a number in test/development mode\" do",
                "// Line 1083:       expect(Stylesheet::Manager.fs_asset_cachebuster).to match(/\\A[0-9]+:[0-9]+\\z/)",
                "// vulnerable line: 1084: end",
                "// Line 1085: ",
                "// Line 1086:     context \"with production mode enabled\" do",
                "// Line 1087:       before { Stylesheet::Manager.stubs(:use_file_hash_for_cachebuster?).returns(true) }",
                "// Line 1088: ",
                "// Line 1089:       after do",
                "// Line 1090:         path = Stylesheet::Manager.send(:manifest_full_path)",
                "// Line 1091:         File.delete(path) if File.exist?(path)",
                "// vulnerable line: 1092: end",
                "// Line 1093: ",
                "// Line 1094:       it \"returns a hash\" do",
                "// Line 1095:         cachebuster = Stylesheet::Manager.fs_asset_cachebuster",
                "// Line 1096:         expect(cachebuster).to match(/\\A[0-9]+:[0-9a-f]{40}\\z/)",
                "// vulnerable line: 1097: end",
                "// Line 1098: ",
                "// Line 1099:       it \"caches the value on the filesystem\" do",
                "// Line 1100:         initial_cachebuster = Stylesheet::Manager.recalculate_fs_asset_cachebuster!",
                "// Line 1101:         Stylesheet::Manager.stubs(:list_files).never",
                "// Line 1102:         expect(Stylesheet::Manager.fs_asset_cachebuster).to eq(initial_cachebuster)",
                "// Line 1103:         expect(File.read(Stylesheet::Manager.send(:manifest_full_path))).to eq(initial_cachebuster)",
                "// vulnerable line: 1104: end",
                "// Line 1105: ",
                "// Line 1106:       it \"updates the hash when a file changes\" do",
                "// Line 1107:         original_files = Stylesheet::Manager.send(:list_files)",
                "// Line 1108:         initial_cachebuster = Stylesheet::Manager.recalculate_fs_asset_cachebuster!",
                "// Line 1109: ",
                "// Line 1110:         additional_file_path =",
                "// Line 1111:           \"#{Rails.root}/spec/fixtures/plugins/scss_plugin/assets/stylesheets/colors.scss\"",
                "// Line 1112:         Stylesheet::Manager.stubs(:list_files).returns(original_files + [additional_file_path])",
                "// Line 1113: ",
                "// Line 1114:         new_cachebuster = Stylesheet::Manager.recalculate_fs_asset_cachebuster!",
                "// Line 1115:         expect(new_cachebuster).not_to eq(initial_cachebuster)",
                "// vulnerable line: 1116: end",
                "// vulnerable line: 1117: end",
                "// vulnerable line: 1118: end",
                "// vulnerable line: 1119: end"
            ]
        }
    ]
}