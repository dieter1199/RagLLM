{
    "cve_id": "CVE-2024-31221",
    "cve_description": "Sunshine is a self-hosted game stream host for Moonlight. Starting in version 0.10.0 and prior to version 0.23.0, after unpairing all devices in the web UI interface and then pairing only one device, all of the previously devices will be temporarily paired. Version 0.23.0 contains a patch for the issue. As a workaround, restarting Sunshine after unpairing all devices prevents the vulnerability.",
    "cve_publish_date": "2024-04-08T15:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fix(security): ensure unpairing takes effect without restart (#2365)",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "crypto.cpp",
            "code_language": "C++",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "crypto.h",
            "code_language": "C++",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "nvhttp.cpp",
            "code_language": "C++",
            "number_of_lines_added_for_mitigation": "6",
            "number_of_lines_deleted_vulnerable_to_cve": "4",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1011: ",
                "// Line 1012:     bool clean_slate = config::sunshine.flags[config::flag::FRESH_STATE];",
                "// Line 1013: ",
                "// Line 1014:     if (!clean_slate) {",
                "// Line 1015:       load_state();",
                "// Line 1016:     }",
                "// Line 1017: ",
                "// Line 1018:     conf_intern.pkey = file_handler::read_file(config::nvhttp.pkey.c_str());",
                "// Line 1019:     conf_intern.servercert = file_handler::read_file(config::nvhttp.cert.c_str());",
                "// Line 1020: ",
                "// vulnerable line: 1021: crypto::cert_chain_t cert_chain;",
                "// Line 1022:     for (auto &[_, client] : map_id_client) {",
                "// Line 1023:       for (auto &cert : client.certs) {",
                "// Line 1024:         cert_chain.add(crypto::x509(cert));",
                "// Line 1025:       }",
                "// Line 1026:     }",
                "// Line 1027: ",
                "// Line 1028:     auto add_cert = std::make_shared<safe::queue_t<crypto::x509_t>>(30);",
                "// Line 1029: ",
                "// vulnerable line: 1030: // /resume doesn't always get the parameter \"localAudioPlayMode\"",
                "// vulnerable line: 1031: // /launch will store it in host_audio",
                "// Line 1032:     bool host_audio {};",
                "// Line 1033: ",
                "// Line 1034:     https_server_t https_server { config::nvhttp.cert, config::nvhttp.pkey };",
                "// Line 1035:     http_server_t http_server;",
                "// Line 1036: ",
                "// Line 1037:     // Verify certificates after establishing connection",
                "// vulnerable line: 1038: https_server.verify = [&cert_chain, add_cert](SSL *ssl) {",
                "// Line 1039:       crypto::x509_t x509 { SSL_get_peer_certificate(ssl) };",
                "// Line 1040:       if (!x509) {",
                "// Line 1041:         BOOST_LOG(info) << \"unknown -- denied\"sv;",
                "// Line 1042:         return 0;",
                "// Line 1043:       }",
                "// Line 1044: ",
                "// Line 1045:       int verified = 0;",
                "// Line 1046: ",
                "// Line 1047:       auto fg = util::fail_guard([&]() {",
                "// Line 1048:         char subject_name[256];"
            ]
        }
    ]
}