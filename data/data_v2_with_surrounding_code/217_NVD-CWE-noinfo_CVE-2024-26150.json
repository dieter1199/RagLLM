{
    "cve_id": "CVE-2024-26150",
    "cve_description": "`@backstage/backend-common` is a common functionality library for backends for Backstage, an open platform for building developer portals. In `@backstage/backend-common` prior to versions 0.21.1, 0.20.2, and 0.19.10, paths checks with the `resolveSafeChildPath` utility were not exhaustive enough, leading to risk of path traversal vulnerabilities if symlinks can be injected by attackers. This issue is patched in `@backstage/backend-common` versions 0.21.1, 0.20.2, and 0.19.10.",
    "cve_publish_date": "2024-02-23T16:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "chore: return the original input path, and add a test\n\nSigned-off-by: blam <ben@blam.sh>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "paths.test.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "8",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 9:  *",
                "// Line 10:  * Unless required by applicable law or agreed to in writing, software",
                "// Line 11:  * distributed under the License is distributed on an \"AS IS\" BASIS,",
                "// Line 12:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "// Line 13:  * See the License for the specific language governing permissions and",
                "// Line 14:  * limitations under the License.",
                "// Line 15:  */",
                "// Line 16: ",
                "// Line 17: import { createMockDirectory } from '@backstage/backend-test-utils';",
                "// Line 18: import { resolveSafeChildPath } from './paths';",
                "// vulnerable line: 19: import fs from 'fs/promises';",
                "// Line 20: ",
                "// Line 21: describe('paths', () => {",
                "// Line 22:   describe('resolveSafeChildPath', () => {",
                "// Line 23:     const mockDir = createMockDirectory();",
                "// Line 24:     const secondDirectory = createMockDirectory();",
                "// Line 25: ",
                "// Line 26:     const workspacePath = mockDir.resolve('workspace');",
                "// Line 27: ",
                "// Line 28:     beforeEach(() => {",
                "// Line 29:       mockDir.setContent({",
                "// Line 35:     });",
                "// Line 36: ",
                "// Line 37:     it('should throw an error if the path is outside of the base path', () => {",
                "// Line 38:       expect(() =>",
                "// Line 39:         resolveSafeChildPath(workspacePath, secondDirectory.path),",
                "// Line 40:       ).toThrow(",
                "// Line 41:         'Relative path is not allowed to refer to a directory outside its parent',",
                "// Line 42:       );",
                "// Line 43:     });",
                "// Line 44: ",
                "// vulnerable line: 45: it('should resolve to the full path if the target is inside the directory', async () => {",
                "// Line 46:       expect(resolveSafeChildPath(workspacePath, './README.md')).toEqual(",
                "// vulnerable line: 47: `${await fs.realpath(workspacePath)}/README.md`,",
                "// Line 48:       );",
                "// Line 49:     });",
                "// Line 50: ",
                "// Line 51:     it('should throw an error if the path is a symlink to a directory outside of the base path', () => {",
                "// Line 52:       mockDir.addContent({",
                "// Line 53:         [`${workspacePath}/symlink`]: ({ symlink }) =>",
                "// Line 54:           symlink(secondDirectory.path),",
                "// Line 55:       });",
                "// Line 56: ",
                "// Line 57:       expect(() =>"
            ]
        },
        {
            "filename_of_changes": "paths.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 65: export function resolveSafeChildPath(base: string, path: string): string {",
                "// Line 66:   const resolvedBasePath = resolveRealPath(base);",
                "// Line 67:   const targetPath = resolvePath(resolvedBasePath, path);",
                "// Line 68: ",
                "// Line 69:   if (!isChildPath(resolvedBasePath, resolveRealPath(targetPath))) {",
                "// Line 70:     throw new NotAllowedError(",
                "// Line 71:       'Relative path is not allowed to refer to a directory outside its parent',",
                "// Line 72:     );",
                "// Line 73:   }",
                "// Line 74: ",
                "// vulnerable line: 75: return targetPath;",
                "// Line 76: }",
                "// Line 77: ",
                "// Line 78: function resolveRealPath(path: string): string {",
                "// Line 79:   try {",
                "// Line 80:     return realPath(path);",
                "// Line 81:   } catch (ex) {",
                "// Line 82:     if (ex.code !== 'ENOENT') {",
                "// Line 83:       throw ex;",
                "// Line 84:     }",
                "// Line 85:   }"
            ]
        }
    ]
}