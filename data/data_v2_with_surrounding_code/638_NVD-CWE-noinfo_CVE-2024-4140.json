{
    "cve_id": "CVE-2024-4140",
    "cve_description": "An excessive memory use issue (CWE-770) exists in Email-MIME, before version 1.954, which can cause denial of service when parsing multipart MIME messages. The patch set (from 2020 and 2024) limits excessive depth and the total number of parts.",
    "cve_publish_date": "2024-05-02T20:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "do not allow an excessive number of parts\n\nThis is annoying!  It bugs me that making a mere 100,000 parts should lead\nto excessive consumption of memoryâ€¦ but really, nobody does that for\na good reason.\n\nThis makes top-level (non-recursive) Email::MIME->new set a localized\npart counter to 0 and increment before it makes new subpart objects.\nIf the counter exceeds the max, it will die early.\n\nIt would be better to work, but this is better than eating all memory and\ncrashing, right?\n\nPut together with help from Marc Bradshaw.\n\nTest forthcoming.",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "MIME.pm",
            "code_language": "Perl",
            "number_of_lines_added_for_mitigation": "15",
            "number_of_lines_deleted_vulnerable_to_cve": "4",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 368:       return $self->body;",
                "// Line 369:     }",
                "// Line 370: ",
                "// Line 371:     Carp::confess(\"can't get body as a string for \" . $self->content_type);",
                "// Line 372:   }",
                "// Line 373: ",
                "// Line 374:   my $str = Encode::decode($encoding, $self->body, $self->encode_check);",
                "// Line 375:   return $str;",
                "// Line 376: }",
                "// Line 377: ",
                "// vulnerable line: 378: our $MAX_DEPTH = 10;",
                "// Line 379: ",
                "// Line 380: sub parts_multipart {",
                "// Line 381:   my $self     = shift;",
                "// Line 382:   my $boundary = $self->{ct}->{attributes}->{boundary};",
                "// Line 383: ",
                "// Line 384:   our $DEPTH ||= 0;",
                "// Line 385: ",
                "// Line 386:   Carp::croak(\"attempted to parse a MIME message more than $MAX_DEPTH deep\")",
                "// Line 387:     if $MAX_DEPTH && $DEPTH > $MAX_DEPTH;",
                "// Line 388: ",
                "// Line 402:   my @bits = split /^--\\Q$boundary\\E\\s*$/sm, ($body || '');",
                "// Line 403: ",
                "// Line 404:   $self->SUPER::body_set(undef);",
                "// Line 405: ",
                "// Line 406:   # If there are no headers in the potential MIME part, it's just part of the",
                "// Line 407:   # body.  This is a horrible hack, although it's debatable whether it was",
                "// Line 408:   # better or worse when it was $self->{body} = shift @bits ... -- rjbs,",
                "// Line 409:   # 2006-11-27",
                "// Line 410:   $self->SUPER::body_set(shift @bits) if index(($bits[0] || ''), ':') == -1;",
                "// Line 411: ",
                "// vulnerable line: 412: my $bits = @bits;",
                "// Line 413: ",
                "// Line 414:   my @parts;",
                "// Line 415:   for my $bit (@bits) {",
                "// Line 416:     $bit =~ s/\\A[",
                "// Line 417: ",
                "// Line 418: ]+//smg;",
                "// Line 419:     $bit =~ s/(?<!",
                "// Line 420: )$self->{mycrlf}\\Z//sm;",
                "// Line 421:     local $DEPTH = $DEPTH + 1;",
                "// vulnerable line: 422: my $email = (ref $self)->new($bit, { encode_check => $self->encode_check });",
                "// Line 423:     push @parts, $email;",
                "// Line 424:   }",
                "// Line 425: ",
                "// Line 426:   $self->{parts} = \\@parts;",
                "// Line 427: ",
                "// Line 428:   return @{ $self->{parts} };",
                "// Line 429: }",
                "// Line 430: ",
                "// Line 431: sub force_decode_hook { 0 }",
                "// Line 432: sub decode_hook       { return $_[1] }"
            ]
        }
    ]
}