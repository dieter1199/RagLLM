{
    "cve_id": "CVE-2024-40644",
    "cve_description": "gitoxide An idiomatic, lean, fast & safe pure Rust implementation of Git. `gix-path` can be tricked into running another `git.exe` placed in an untrusted location by a limited user account on Windows systems. Windows permits limited user accounts without administrative privileges to create new directories in the root of the system drive. While `gix-path` first looks for `git` using a `PATH` search, in version 0.10.8 it also has a fallback strategy on Windows of checking two hard-coded paths intended to be the 64-bit and 32-bit Program Files directories. Existing functions, as well as the newly introduced `exe_invocation` function, were updated to make use of these alternative locations. This causes facilities in `gix_path::env` to directly execute `git.exe` in those locations, as well as to return its path or whatever configuration it reports to callers who rely on it. Although unusual setups where the system drive is not `C:`, or even where Program Files directories have non-default names, are technically possible, the main problem arises on a 32-bit Windows system. Such a system has no `C:\\Program Files (x86)` directory. A limited user on a 32-bit Windows system can therefore create the `C:\\Program Files (x86)` directory and populate it with arbitrary contents. Once a payload has been placed at the second of the two hard-coded paths in this way, other user accounts including administrators will execute it if they run an application that uses `gix-path` and do not have `git` in a `PATH` directory. (While having `git` found in a `PATH` search prevents exploitation, merely having it installed in the default location under the real `C:\\Program Files` directory does not. This is because the first hard-coded path's `mingw64` component assumes a 64-bit installation.). Only Windows is affected. Exploitation is unlikely except on a 32-bit system. In particular, running a 32-bit build on a 64-bit system is not a risk factor. Furthermore, the attacker must have a user account on the system, though it may be a relatively unprivileged account. Such a user can perform privilege escalation and execute code as another user, though it may be difficult to do so reliably because the targeted user account must run an application or service that uses `gix-path` and must not have `git` in its `PATH`. The main exploitable configuration is one where Git for Windows has been installed but not added to `PATH`. This is one of the options in its installer, though not the default option. Alternatively, an affected program that sanitizes its `PATH` to remove seemingly nonessential directories could allow exploitation. But for the most part, if the target user has configured a `PATH` in which the real `git.exe` can be found, then this cannot be exploited. This issue has been addressed in release version 0.10.9 and all users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "cve_publish_date": "2024-07-18T17:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fix: Don't assume program files folder locations\n\nThis checks where *program files* directories are located on a\nWindows system, which are used for a fallback check after `git`\nhas not been found in a `PATH` search (to invoke `git` to find out\ninformation such as the location of its system config file).\n\nPreviously, two hard-coded paths were used. These were correct for\nthe vast majority of 64-bit Windows systems, but were in practice\nnever correct on 32-bit Windows systems. Checking programmatically\nfor the locations should thus enable detection to succeed on more\nsystems and under more circumstances, and avoid other problems.",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "git.rs",
            "code_language": "Rust",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "6",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: use std::path::{Path, PathBuf};",
                "// Line 2: use std::process::{Command, Stdio};",
                "// Line 3: ",
                "// Line 4: use bstr::{BStr, BString, ByteSlice};",
                "// Line 5: use once_cell::sync::Lazy;",
                "// Line 6: ",
                "// Line 7: /// Other places to find Git in.",
                "// Line 8: #[cfg(windows)]",
                "// vulnerable line: 9: pub(super) static ALTERNATIVE_LOCATIONS: Lazy<Vec<PathBuf>> = Lazy::new(|| {",
                "// vulnerable line: 10: vec![",
                "// vulnerable line: 11: \"C:/Program Files/Git/mingw64/bin\".into(),",
                "// vulnerable line: 12: \"C:/Program Files (x86)/Git/mingw32/bin\".into(),",
                "// vulnerable line: 13: ]",
                "// vulnerable line: 14: });",
                "// Line 15: #[cfg(not(windows))]",
                "// Line 16: pub(super) static ALTERNATIVE_LOCATIONS: Lazy<Vec<PathBuf>> = Lazy::new(|| vec![]);",
                "// Line 17: ",
                "// Line 18: #[cfg(windows)]",
                "// Line 19: fn locations_under_program_files<F>(var_os_func: F) -> Vec<PathBuf>",
                "// Line 20: where",
                "// Line 21:     F: Fn(&str) -> Option<std::ffi::OsString>,",
                "// Line 22: {",
                "// Line 23:     // Should give a 64-bit program files path from a 32-bit or 64-bit process on a 64-bit system.",
                "// Line 24:     let varname_64bit = \"ProgramW6432\";",
                "// Line 100:                 let candidate = prefix.join(EXE_NAME);",
                "// Line 101:                 candidate.is_file().then_some(candidate)",
                "// Line 102:             })?;",
                "// Line 103:             gix_trace::debug!(cmd = ?cmd, \"invoking git for installation config path in alternate location\");",
                "// Line 104:             git_cmd(executable).output().ok()?.stdout",
                "// Line 105:         }",
                "// Line 106:         Err(_) => return None,",
                "// Line 107:     };",
                "// Line 108: ",
                "// Line 109:     first_file_from_config_with_origin(cmd_output.as_slice().into()).map(ToOwned::to_owned)",
                "// vulnerable line: 110: });",
                "// Line 111: ",
                "// Line 112: /// Returns the file that contains git configuration coming with the installation of the `git` file in the current `PATH`, or `None`",
                "// Line 113: /// if no `git` executable was found or there were other errors during execution.",
                "// Line 114: pub(super) fn install_config_path() -> Option<&'static BStr> {",
                "// Line 115:     let _span = gix_trace::detail!(\"gix_path::git::install_config_path()\");",
                "// Line 116:     static PATH: Lazy<Option<BString>> = Lazy::new(|| {",
                "// Line 117:         // Shortcut: in Msys shells this variable is set which allows to deduce the installation directory,",
                "// Line 118:         // so we can save the `git` invocation.",
                "// Line 119:         #[cfg(windows)]",
                "// Line 120:         if let Some(mut exec_path) = std::env::var_os(\"EXEPATH\").map(std::path::PathBuf::from) {",
                "// Line 121:             exec_path.push(\"etc\");",
                "// Line 122:             exec_path.push(\"gitconfig\");",
                "// Line 123:             return crate::os_string_into_bstring(exec_path.into()).ok();",
                "// Line 124:         }",
                "// Line 125:         EXE_INFO.clone()",
                "// vulnerable line: 126: });",
                "// Line 127:     PATH.as_ref().map(AsRef::as_ref)",
                "// Line 128: }",
                "// Line 129: ",
                "// Line 130: fn first_file_from_config_with_origin(source: &BStr) -> Option<&BStr> {",
                "// Line 131:     let file = source.strip_prefix(b\"file:\")?;",
                "// Line 132:     let end_pos = file.find_byte(b'    ')?;",
                "// Line 133:     file[..end_pos].trim_with(|c| c == '\"').as_bstr().into()",
                "// Line 134: }",
                "// Line 135: ",
                "// Line 136: /// Given `config_path` as obtained from `install_config_path()`, return the path of the git installation base.",
                "// Line 304:                     pathbuf_vec![r\"Z:\\wi\\de\\Git\\mingw64\bin\", r\"Y:",
                "// Line 305: ar",
                "// Line 306: ow\\Git\\mingw32\bin\"]",
                "// Line 307:                 } else {",
                "// Line 308:                     pathbuf_vec![",
                "// Line 309:                         r\"Z:\\wi\\de\\Git\\mingw64\bin\",",
                "// Line 310:                         r\"Y:",
                "// Line 311: ar",
                "// Line 312: ow\\Git\\mingw32\bin\",",
                "// Line 313:                         r\"Z:\\wi\\de\\Git\\mingw32\bin\",",
                "// vulnerable line: 314: ]",
                "// Line 315:                 },",
                "// Line 316:             );",
                "// Line 317:             assert_eq!(",
                "// Line 318:                 locations_from!(",
                "// Line 319:                     \"ProgramFiles\" => r\"foo\bar\",",
                "// Line 320:                     \"ProgramFiles(x86)\" => r\"\\host\\share\\subdir\",",
                "// Line 321:                     \"ProgramW6432\" => r\"\",",
                "// Line 322:                 ),",
                "// Line 323:                 pathbuf_vec![r\"\\host\\share\\subdir\\Git\\mingw32\bin\"],",
                "// Line 324:             );"
            ]
        }
    ]
}