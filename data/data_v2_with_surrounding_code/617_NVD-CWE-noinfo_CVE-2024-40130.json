{
    "cve_id": "CVE-2024-40130",
    "cve_description": "open5gs v2.6.4 is vulnerable to Buffer Overflow. via /lib/core/abts.c.",
    "cve_publish_date": "2024-07-16T19:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Fixed dynamic-stack-buffer-overflow (#2578, #2577)",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "5gc-init.c",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 30: static ogs_thread_t *nssf_thread = NULL;",
                "// Line 31: static ogs_thread_t *bsf_thread = NULL;",
                "// Line 32: static ogs_thread_t *udr_thread = NULL;",
                "// Line 33: ",
                "// Line 34: int app_initialize(const char *const argv[])",
                "// Line 35: {",
                "// Line 36:     const char *argv_out[OGS_ARG_MAX];",
                "// Line 37:     bool user_config = false;",
                "// Line 38:     int i = 0;",
                "// Line 39: ",
                "// vulnerable line: 40: for (i = 0; argv[i]; i++) {",
                "// Line 41:         if (strcmp(\"-c\", argv[i]) == 0) {",
                "// Line 42:             user_config = true; ",
                "// Line 43:         }",
                "// Line 44:         argv_out[i] = argv[i];",
                "// Line 45:     }",
                "// Line 46:     argv_out[i] = NULL;",
                "// Line 47: ",
                "// Line 48:     if (!user_config) {",
                "// Line 49:         argv_out[i++] = \"-c\";",
                "// Line 50:         argv_out[i++] = DEFAULT_CONFIG_FILENAME;"
            ]
        },
        {
            "filename_of_changes": "abts-main.c",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 70: }",
                "// Line 71: ",
                "// Line 72: int main(int argc, const char *const argv[])",
                "// Line 73: {",
                "// Line 74:     int rv, i, opt;",
                "// Line 75:     ogs_getopt_t options;",
                "// Line 76:     struct {",
                "// Line 77:         char *log_level;",
                "// Line 78:         char *domain_mask;",
                "// Line 79:     } optarg;",
                "// vulnerable line: 80: const char *argv_out[argc+2]; /* '-e error' is always added */",
                "// Line 81:     ",
                "// Line 82:     abts_suite *suite = NULL;",
                "// Line 83:     ogs_pkbuf_config_t config;",
                "// Line 84: ",
                "// Line 85:     rv = abts_main(argc, argv, argv_out);",
                "// Line 86:     if (rv != OGS_OK) return rv;",
                "// Line 87: ",
                "// Line 88:     memset(&optarg, 0, sizeof(optarg));",
                "// Line 89:     ogs_getopt_init(&options, (char**)argv_out);",
                "// Line 90: "
            ]
        },
        {
            "filename_of_changes": "abts-main.c",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 43: }",
                "// Line 44: ",
                "// Line 45: int main(int argc, const char *const argv[])",
                "// Line 46: {",
                "// Line 47:     int rv, i, opt;",
                "// Line 48:     ogs_getopt_t options;",
                "// Line 49:     struct {",
                "// Line 50:         char *log_level;",
                "// Line 51:         char *domain_mask;",
                "// Line 52:     } optarg;",
                "// vulnerable line: 53: const char *argv_out[argc+2]; /* '-e error' is always added */",
                "// Line 54:     ",
                "// Line 55:     abts_suite *suite = NULL;",
                "// Line 56:     ogs_pkbuf_config_t config;",
                "// Line 57: ",
                "// Line 58:     rv = abts_main(argc, argv, argv_out);",
                "// Line 59:     if (rv != OGS_OK) return rv;",
                "// Line 60: ",
                "// Line 61:     memset(&optarg, 0, sizeof(optarg));",
                "// Line 62:     ogs_getopt_init(&options, (char**)argv_out);",
                "// Line 63: "
            ]
        },
        {
            "filename_of_changes": "abts-main.c",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 38: }",
                "// Line 39: ",
                "// Line 40: int main(int argc, const char *const argv[])",
                "// Line 41: {",
                "// Line 42:     int rv, i, opt;",
                "// Line 43:     ogs_getopt_t options;",
                "// Line 44:     struct {",
                "// Line 45:         char *log_level;",
                "// Line 46:         char *domain_mask;",
                "// Line 47:     } optarg;",
                "// vulnerable line: 48: const char *argv_out[argc+2]; /* '-e error' is always added */",
                "// Line 49:     ",
                "// Line 50:     abts_suite *suite = NULL;",
                "// Line 51:     ogs_pkbuf_config_t config;",
                "// Line 52: ",
                "// Line 53:     rv = abts_main(argc, argv, argv_out);",
                "// Line 54:     if (rv != OGS_OK) return rv;",
                "// Line 55: ",
                "// Line 56:     memset(&optarg, 0, sizeof(optarg));",
                "// Line 57:     ogs_getopt_init(&options, (char**)argv_out);",
                "// Line 58: "
            ]
        },
        {
            "filename_of_changes": "abts-main.c",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 60: }",
                "// Line 61: ",
                "// Line 62: int main(int argc, const char *const argv[])",
                "// Line 63: {",
                "// Line 64:     int rv, i, opt;",
                "// Line 65:     ogs_getopt_t options;",
                "// Line 66:     struct {",
                "// Line 67:         char *log_level;",
                "// Line 68:         char *domain_mask;",
                "// Line 69:     } optarg;",
                "// vulnerable line: 70: const char *argv_out[argc+2]; /* '-e error' is always added */",
                "// Line 71:     ",
                "// Line 72:     abts_suite *suite = NULL;",
                "// Line 73:     ogs_pkbuf_config_t config;",
                "// Line 74: ",
                "// Line 75:     rv = abts_main(argc, argv, argv_out);",
                "// Line 76:     if (rv != OGS_OK) return rv;",
                "// Line 77: ",
                "// Line 78:     memset(&optarg, 0, sizeof(optarg));",
                "// Line 79:     ogs_getopt_init(&options, (char**)argv_out);",
                "// Line 80: "
            ]
        },
        {
            "filename_of_changes": "app-init.c",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 35: static ogs_thread_t *nssf_thread = NULL;",
                "// Line 36: static ogs_thread_t *bsf_thread = NULL;",
                "// Line 37: static ogs_thread_t *udr_thread = NULL;",
                "// Line 38: ",
                "// Line 39: int app_initialize(const char *const argv[])",
                "// Line 40: {",
                "// Line 41:     const char *argv_out[OGS_ARG_MAX];",
                "// Line 42:     bool user_config = false;",
                "// Line 43:     int i = 0;",
                "// Line 44: ",
                "// vulnerable line: 45: for (i = 0; argv[i]; i++) {",
                "// Line 46:         if (strcmp(\"-c\", argv[i]) == 0) {",
                "// Line 47:             user_config = true;",
                "// Line 48:         }",
                "// Line 49:         argv_out[i] = argv[i];",
                "// Line 50:     }",
                "// Line 51:     argv_out[i] = NULL;",
                "// Line 52: ",
                "// Line 53:     if (!user_config) {",
                "// Line 54:         argv_out[i++] = \"-c\";",
                "// Line 55:         argv_out[i++] = DEFAULT_CONFIG_FILENAME;"
            ]
        },
        {
            "filename_of_changes": "application.c",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 20: #include \"test-config-private.h\"",
                "// Line 21: #include \"test-common.h\"",
                "// Line 22: ",
                "// Line 23: static void run(int argc, const char *const argv[],",
                "// Line 24:         const char *name, void (*init)(const char * const argv[]))",
                "// Line 25: {",
                "// Line 26:     int rv;",
                "// Line 27:     bool user_config;",
                "// Line 28: ",
                "// Line 29:     /* '-f sample-XXXX.conf -e error' is always added */",
                "// vulnerable line: 30: const char *argv_out[argc+4], *new_argv[argc+4];",
                "// Line 31:     int argc_out;",
                "// Line 32: ",
                "// Line 33:     char conf_file[OGS_MAX_FILEPATH_LEN];",
                "// Line 34:     ",
                "// Line 35:     user_config = false;",
                "// Line 36:     for (argc_out = 0; argc_out < argc; argc_out++) {",
                "// Line 37:         if (strcmp(\"-c\", argv[argc_out]) == 0) {",
                "// Line 38:             user_config = true; ",
                "// Line 39:         }",
                "// Line 40:         argv_out[argc_out] = argv[argc_out];"
            ]
        },
        {
            "filename_of_changes": "context.c",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 120:     } else if (test_self()->e_served_tai[index].list0.tai[0].num) {",
                "// Line 121:         test_self()->e_tai.tac =",
                "// Line 122:             test_self()->e_served_tai[index].list0.tai[0].tac[0];",
                "// Line 123:         memcpy(&test_self()->e_tai.plmn_id,",
                "// Line 124:                 &test_self()->e_served_tai[index].list0.tai[0].plmn_id,",
                "// Line 125:                 OGS_PLMN_ID_LEN);",
                "// Line 126:     }",
                "// Line 127: ",
                "// Line 128:     if (test_self()->nr_served_tai[index].list2.num) {",
                "// Line 129:         memcpy(&test_self()->nr_tai,",
                "// vulnerable line: 130: &test_self()->nr_served_tai[index].list2.tai[0], sizeof(ogs_5gs_tai_t));",
                "// Line 131:     } else if (test_self()->nr_served_tai[index].list1.tai[0].num) {",
                "// Line 132:         test_self()->nr_tai.tac =",
                "// Line 133:             test_self()->nr_served_tai[index].list1.tai[0].tac;",
                "// Line 134:         memcpy(&test_self()->nr_tai.plmn_id,",
                "// Line 135:                 &test_self()->nr_served_tai[index].list1.tai[0].plmn_id,",
                "// Line 136:                 OGS_PLMN_ID_LEN);",
                "// Line 137:     } else if (test_self()->nr_served_tai[index].list0.tai[0].num) {",
                "// Line 138:         test_self()->nr_tai.tac =",
                "// Line 139:             test_self()->nr_served_tai[index].list0.tai[0].tac[0];",
                "// Line 140:         memcpy(&test_self()->nr_tai.plmn_id,"
            ]
        },
        {
            "filename_of_changes": "context.h",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "7",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "epc-init.c",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 26: static ogs_thread_t *sgwu_thread = NULL;",
                "// Line 27: static ogs_thread_t *hss_thread = NULL;",
                "// Line 28: static ogs_thread_t *mme_thread = NULL;",
                "// Line 29: ",
                "// Line 30: int app_initialize(const char *const argv[])",
                "// Line 31: {",
                "// Line 32:     const char *argv_out[OGS_ARG_MAX];",
                "// Line 33:     bool user_config = false;",
                "// Line 34:     int i = 0;",
                "// Line 35: ",
                "// vulnerable line: 36: for (i = 0; argv[i]; i++) {",
                "// Line 37:         if (strcmp(\"-c\", argv[i]) == 0) {",
                "// Line 38:             user_config = true; ",
                "// Line 39:         }",
                "// Line 40:         argv_out[i] = argv[i];",
                "// Line 41:     }",
                "// Line 42:     argv_out[i] = NULL;",
                "// Line 43: ",
                "// Line 44:     if (!user_config) {",
                "// Line 45:         argv_out[i++] = \"-c\";",
                "// Line 46:         argv_out[i++] = DEFAULT_CONFIG_FILENAME;"
            ]
        },
        {
            "filename_of_changes": "epc-s1-test.c",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "30",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "gtpu.c",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 35:             ogs_assert(OGS_OK ==",
                "// Line 36:                 ogs_copyaddrinfo(&addr, test_self()->gnb1_addr));",
                "// Line 37:     } else if (index == 2) {",
                "// Line 38:         if (family == AF_INET6)",
                "// Line 39:             ogs_assert(OGS_OK ==",
                "// Line 40:                 ogs_copyaddrinfo(&addr, test_self()->gnb2_addr6));",
                "// Line 41:         else",
                "// Line 42:             ogs_assert(OGS_OK ==",
                "// Line 43:                 ogs_copyaddrinfo(&addr, test_self()->gnb2_addr));",
                "// Line 44:     } else",
                "// vulnerable line: 45: ogs_assert_if_reached();",
                "// Line 46: ",
                "// Line 47:     node = ogs_socknode_new(addr);",
                "// Line 48:     ogs_assert(node);",
                "// Line 49: ",
                "// Line 50:     sock = ogs_udp_server(node->addr, NULL);",
                "// Line 51:     ogs_assert(sock);",
                "// Line 52: ",
                "// Line 53:     node->sock = sock;",
                "// Line 54: ",
                "// Line 55:     return node;",
                "// Line 136:             ogs_assert(bearer);",
                "// Line 137:         }",
                "// Line 138:         ogs_assert(sess);",
                "// Line 139:     } else if (test_ue->amf_ue_ngap_id) {",
                "// Line 140:         /* 5GC */",
                "// Line 141:         ogs_list_for_each(&test_ue->sess_list, sess) {",
                "// Line 142:             if (sess->gnb_n3_teid == teid) goto found;",
                "// Line 143:         }",
                "// Line 144:         ogs_assert(sess);",
                "// Line 145:     } else {",
                "// vulnerable line: 146: ogs_assert_if_reached();",
                "// Line 147:     }",
                "// Line 148: ",
                "// Line 149: found:",
                "// Line 150:     ogs_assert(sess);",
                "// Line 151: ",
                "// Line 152:     ip6_h = pkbuf->data + ogs_gtpu_header_len(pkbuf);",
                "// Line 153:     ogs_assert(ip6_h);",
                "// Line 154:     if (ip6_h->ip6_nxt == IPPROTO_ICMPV6) {",
                "// Line 155:         struct nd_router_advert *advert_h = (struct nd_router_advert *)",
                "// Line 156:             ((unsigned char*)ip6_h + sizeof(struct ip6_hdr));",
                "// Line 194:     if (bearer->qfi) {",
                "// Line 195:         if (sess->upf_n3_ip.ipv4) {",
                "// Line 196:             gnode.addr.ogs_sa_family = AF_INET;",
                "// Line 197:             gnode.addr.sin.sin_addr.s_addr = sess->upf_n3_ip.addr;",
                "// Line 198:         } else if (sess->upf_n3_ip.ipv6) {",
                "// Line 199:             gnode.addr.ogs_sa_family = AF_INET6;",
                "// Line 200:             memcpy(gnode.addr.sin6.sin6_addr.s6_addr,",
                "// Line 201:                     sess->upf_n3_ip.addr6, OGS_IPV6_LEN);",
                "// Line 202:         } else {",
                "// Line 203:             ogs_fatal(\"Not implemented\");",
                "// vulnerable line: 204: ogs_assert_if_reached();",
                "// Line 205:         }",
                "// Line 206: ",
                "// Line 207:     } else if (bearer->ebi) {",
                "// Line 208:         if (bearer->sgw_s1u_ip.ipv4) {",
                "// Line 209:             gnode.addr.ogs_sa_family = AF_INET;",
                "// Line 210:             gnode.addr.sin.sin_addr.s_addr = bearer->sgw_s1u_ip.addr;",
                "// Line 211:         } else if (bearer->sgw_s1u_ip.ipv6) {",
                "// Line 212:             gnode.addr.ogs_sa_family = AF_INET6;",
                "// Line 213:             memcpy(gnode.addr.sin6.sin6_addr.s6_addr,",
                "// Line 214:                     bearer->sgw_s1u_ip.addr6, OGS_IPV6_LEN);",
                "// Line 215:         } else {",
                "// Line 216:             ogs_fatal(\"Not implemented\");",
                "// vulnerable line: 217: ogs_assert_if_reached();",
                "// Line 218:         }",
                "// Line 219:     } else {",
                "// Line 220:         ogs_fatal(\"No QFI[%d] and EBI[%d]\", bearer->qfi, bearer->ebi);",
                "// vulnerable line: 221: ogs_assert_if_reached();",
                "// Line 222:     }",
                "// Line 223: ",
                "// Line 224:     ext_hdesc->pdu_type =",
                "// Line 225:         OGS_GTP2_EXTENSION_HEADER_PDU_TYPE_UL_PDU_SESSION_INFORMATION;",
                "// Line 226: ",
                "// Line 227:     return ogs_gtp2_send_user_plane(&gnode, gtp_hdesc, ext_hdesc, pkbuf);",
                "// Line 228: }",
                "// Line 229: ",
                "// Line 230: int test_gtpu_send_ping(",
                "// Line 231:         ogs_socknode_t *node, test_bearer_t *bearer, const char *dst_ip)",
                "// Line 312: ",
                "// Line 313:         ip6_h->ip6_flow = htobe32(0x60000001);",
                "// Line 314:         ip6_h->ip6_plen = plen;",
                "// Line 315:         ip6_h->ip6_nxt = nxt;;",
                "// Line 316:         ip6_h->ip6_hlim = 0xff;",
                "// Line 317:         memcpy(ip6_h->ip6_src.s6_addr,",
                "// Line 318:                 sess->ue_ip.addr6, sizeof sess->ue_ip.addr6);",
                "// Line 319:         memcpy(ip6_h->ip6_dst.s6_addr, dst_ipsub.sub, sizeof dst_ipsub.sub);",
                "// Line 320:     } else {",
                "// Line 321:         ogs_fatal(\"Invalid family[%d]\", dst_ipsub.family);",
                "// vulnerable line: 322: ogs_assert_if_reached();",
                "// Line 323:     }",
                "// Line 324: ",
                "// Line 325:     memset(&gtp_hdesc, 0, sizeof(gtp_hdesc));",
                "// Line 326:     memset(&ext_hdesc, 0, sizeof(ext_hdesc));",
                "// Line 327: ",
                "// Line 328:     gtp_hdesc.type = OGS_GTPU_MSGTYPE_GPDU;",
                "// Line 329: ",
                "// Line 330:     if (bearer->qfi) {",
                "// Line 331:         gtp_hdesc.teid = sess->upf_n3_teid;",
                "// Line 332:         ext_hdesc.qos_flow_identifier = bearer->qfi;",
                "// Line 333: ",
                "// Line 334:     } else if (bearer->ebi) {",
                "// Line 335:         gtp_hdesc.teid = bearer->sgw_s1u_teid;",
                "// Line 336: ",
                "// Line 337:     } else {",
                "// Line 338:         ogs_fatal(\"No QFI[%d] and EBI[%d]\", bearer->qfi, bearer->ebi);",
                "// vulnerable line: 339: ogs_assert_if_reached();",
                "// Line 340:     }",
                "// Line 341: ",
                "// Line 342:     return test_gtpu_send(node, bearer, &gtp_hdesc, &ext_hdesc, pkbuf);",
                "// Line 343: }",
                "// Line 344: ",
                "// Line 345: int test_gtpu_send_slacc_rs(ogs_socknode_t *node, test_bearer_t *bearer)",
                "// Line 346: {",
                "// Line 347:     test_sess_t *sess = NULL;",
                "// Line 348: ",
                "// Line 349:     ogs_gtp2_header_t gtp_hdesc;",
                "// Line 396:  * Discussion #1506",
                "// Line 397:  * Router Soliciation should include QFI in 5G Core",
                "// Line 398:  */",
                "// Line 399:         ext_hdesc.qos_flow_identifier = bearer->qfi;",
                "// Line 400: ",
                "// Line 401:     } else if (bearer->ebi) {",
                "// Line 402:         gtp_hdesc.teid = bearer->sgw_s1u_teid;",
                "// Line 403: ",
                "// Line 404:     } else {",
                "// Line 405:         ogs_fatal(\"No QFI[%d] and EBI[%d]\", bearer->qfi, bearer->ebi);",
                "// vulnerable line: 406: ogs_assert_if_reached();",
                "// Line 407:     }",
                "// Line 408: ",
                "// Line 409:     return test_gtpu_send(node, bearer, &gtp_hdesc, &ext_hdesc, pkbuf);",
                "// Line 410: }",
                "// Line 411: ",
                "// Line 412: int test_gtpu_send_slacc_rs_with_unspecified_source_address(",
                "// Line 413:         ogs_socknode_t *node, test_bearer_t *bearer)",
                "// Line 414: {",
                "// Line 415:     test_sess_t *sess = NULL;",
                "// Line 416: ",
                "// Line 457:  * Discussion #1506",
                "// Line 458:  * Router Soliciation should include QFI in 5G Core",
                "// Line 459:  */",
                "// Line 460:         ext_hdesc.qos_flow_identifier = bearer->qfi;",
                "// Line 461: ",
                "// Line 462:     } else if (bearer->ebi) {",
                "// Line 463:         gtp_hdesc.teid = bearer->sgw_s1u_teid;",
                "// Line 464: ",
                "// Line 465:     } else {",
                "// Line 466:         ogs_fatal(\"No QFI[%d] and EBI[%d]\", bearer->qfi, bearer->ebi);",
                "// vulnerable line: 467: ogs_assert_if_reached();",
                "// Line 468:     }",
                "// Line 469: ",
                "// Line 470:     return test_gtpu_send(node, bearer, &gtp_hdesc, &ext_hdesc, pkbuf);",
                "// Line 471: }",
                "// Line 472: ",
                "// Line 473: ",
                "// Line 474: int test_gtpu_send_error_indication(",
                "// Line 475:         ogs_socknode_t *node, test_bearer_t *bearer)",
                "// Line 476: {",
                "// Line 477:     test_sess_t *sess = NULL;",
                "// Line 489:     if (bearer->qfi) {",
                "// Line 490:         /* 5GC */",
                "// Line 491:         teid = sess->gnb_n3_teid;",
                "// Line 492: ",
                "// Line 493:     } else if (bearer->ebi) {",
                "// Line 494:         /* EPC */",
                "// Line 495:         teid = bearer->enb_s1u_teid;",
                "// Line 496: ",
                "// Line 497:     } else {",
                "// Line 498:         ogs_fatal(\"No QFI[%d] and EBI[%d]\", bearer->qfi, bearer->ebi);",
                "// vulnerable line: 499: ogs_assert_if_reached();",
                "// Line 500:     }",
                "// Line 501: ",
                "// Line 502:     pkbuf = ogs_gtp1_build_error_indication(teid, node->addr);",
                "// Line 503:     ogs_assert(pkbuf);",
                "// Line 504: ",
                "// Line 505:     memset(&gtp_hdesc, 0, sizeof(gtp_hdesc));",
                "// Line 506:     memset(&ext_hdesc, 0, sizeof(ext_hdesc));",
                "// Line 507: ",
                "// Line 508:     gtp_hdesc.type = OGS_GTPU_MSGTYPE_ERR_IND;",
                "// Line 509:     gtp_hdesc.flags = OGS_GTPU_FLAGS_S|OGS_GTPU_FLAGS_E;",
                "// Line 529:     memset(&ext_hdesc, 0, sizeof(ext_hdesc));",
                "// Line 530: ",
                "// Line 531:     gtp_hdesc.type = OGS_GTPU_MSGTYPE_GPDU;",
                "// Line 532: ",
                "// Line 533:     if (bearer->qfi) {",
                "// Line 534:         gtp_hdesc.teid = sess->handover.upf_dl_teid;",
                "// Line 535:         ext_hdesc.qos_flow_identifier = bearer->qfi;",
                "// Line 536: ",
                "// Line 537:     } else if (bearer->ebi) {",
                "// Line 538: ",
                "// vulnerable line: 539: ogs_fatal(\"Not implmented EPC Indirect Tunnel\");",
                "// vulnerable line: 540: ogs_assert_if_reached();",
                "// Line 541: ",
                "// Line 542:     } else {",
                "// Line 543:         ogs_fatal(\"No QFI[%d] and EBI[%d]\", bearer->qfi, bearer->ebi);",
                "// vulnerable line: 544: ogs_assert_if_reached();",
                "// Line 545:     }",
                "// Line 546: ",
                "// Line 547:     return test_gtpu_send(node, bearer, &gtp_hdesc, &ext_hdesc, pkbuf);",
                "// Line 548: }"
            ]
        }
    ]
}