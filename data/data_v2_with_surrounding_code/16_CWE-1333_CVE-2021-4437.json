{
    "cve_id": "CVE-2021-4437",
    "cve_description": "A vulnerability, which was classified as problematic, has been found in dbartholomae lambda-middleware frameguard up to 1.0.4. Affected by this issue is some unknown functionality of the file packages/json-deserializer/src/JsonDeserializer.ts of the component JSON Mime-Type Handler. The manipulation leads to inefficient regular expression complexity. Upgrading to version 1.1.0 is able to address this issue. The patch is identified as f689404d830cbc1edd6a1018d3334ff5f44dc6a6. It is recommended to upgrade the affected component. VDB-253406 is the identifier assigned to this vulnerability.",
    "cve_publish_date": "2024-02-12T20:15Z",
    "cwe_id": "CWE-1333",
    "cwe_name": "Inefficient Regular Expression Complexity",
    "cwe_description": "The product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles.",
    "commit_message": "fix(json-deserializer): fixed codeQL vulnerability\n\nRemoved the regex used to identify a JSON mime-type as this was potentially vulnerable to\n'Regular expression Denial of Service attacks' and making changes to make the regex more restrictive (but compliant with RFC 6838) did not pass tests for this issue online.\n\nThis now matches based on the last segment of a mimetype being json or json; this should match all the expected mime types.\n\nUpdated unit-tests with additional tests for a variety of compatible mime types.",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "JsonDeserializer.test.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "16",
            "number_of_lines_deleted_vulnerable_to_cve": "9",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 22:         numbers: 2345,",
                "// Line 23:         booleans: true,",
                "// Line 24:         stringValues: \"testString\",",
                "// Line 25:         nulls: null,",
                "// Line 26:         undefineds: undefined,",
                "// Line 27:         andArrays: [\"ofStrings\", 42, null],",
                "// Line 28:       },",
                "// Line 29:     },",
                "// Line 30:   };",
                "// Line 31: ",
                "// vulnerable line: 32: it(\"deserializes objects if the event has a json content-type header\", async () => {",
                "// vulnerable line: 33: const event: APIGatewayProxyEvent = createEvent({",
                "// vulnerable line: 34: headers: { \"Content-Type\": \"application/json\" },",
                "// vulnerable line: 35: body: JSON.stringify(testObject),",
                "// vulnerable line: 36: });",
                "// Line 37: ",
                "// vulnerable line: 38: await handlerWithMiddleware(event, createContext());",
                "// vulnerable line: 39: expect(processedEvent.bodyObject).toMatchObject(",
                "// vulnerable line: 40: JSON.parse(JSON.stringify(testObject))",
                "// vulnerable line: 41: );",
                "// vulnerable line: 42: });",
                "// Line 43: ",
                "// Line 44:   describe(\"sets the request bodyObject to null if:\", () => {",
                "// Line 45:     it.each([",
                "// Line 46:       [\"null headers\", null],",
                "// Line 47:       [\"null content type\", { \"Content-Type\": null }],",
                "// Line 48:       [\"a non-json content-type header\", { \"Content-Type\": \"text/plain\" }],",
                "// Line 49:     ])(\"the event has %s\", async (_: string, headers: any) => {",
                "// Line 50:       const event = createEvent({",
                "// Line 51:         headers,",
                "// vulnerable line: 52: body: JSON.stringify(testObject),",
                "// vulnerable line: 53: });",
                "// Line 54: ",
                "// vulnerable line: 55: await handlerWithMiddleware(event, createContext());",
                "// Line 56:       expect(processedEvent.bodyObject).toBeNull();",
                "// vulnerable line: 57: });",
                "// vulnerable line: 58: });",
                "// Line 59: ",
                "// Line 60:   it(\"decodes the request body before deserializing if isBase64Encoded is true\", async () => {",
                "// Line 61:     const event = createEvent({",
                "// vulnerable line: 62: headers: { \"Content-Type\": \"application/json\" },",
                "// Line 63:       body: Buffer.from(JSON.stringify(testObject)).toString(\"base64\"),",
                "// Line 64:       isBase64Encoded: true,",
                "// vulnerable line: 65: });",
                "// Line 66: ",
                "// vulnerable line: 67: await handlerWithMiddleware(event, createContext());",
                "// vulnerable line: 68: expect(processedEvent.bodyObject).toMatchObject(",
                "// vulnerable line: 69: JSON.parse(JSON.stringify(testObject))",
                "// vulnerable line: 70: );",
                "// vulnerable line: 71: });",
                "// Line 72: ",
                "// Line 73:   it(\"leaves the request body as null if body is null\", async () => {",
                "// Line 74:     const event = createEvent({",
                "// vulnerable line: 75: headers: { \"Content-Type\": \"application/json\" },",
                "// Line 76:       body: null,",
                "// vulnerable line: 77: });",
                "// Line 78: ",
                "// vulnerable line: 79: await handlerWithMiddleware(event, createContext());",
                "// Line 80:     expect(processedEvent.bodyObject).toBeNull();",
                "// vulnerable line: 81: });",
                "// Line 82: ",
                "// Line 83:   it(\"throws a RequestBodyNotJsonError if the request body cannot deserialize\", async () => {",
                "// Line 84:     const event = createEvent({",
                "// vulnerable line: 85: headers: { \"Content-Type\": \"application/json\" },",
                "// Line 86:       body: \"{thisisntvalidJson\",",
                "// vulnerable line: 87: });",
                "// Line 88: ",
                "// Line 89:     expect(() =>",
                "// Line 90:       handlerWithMiddleware(event, createContext())",
                "// Line 91:     ).rejects.toMatchObject({",
                "// Line 92:       statusCode: 400,",
                "// Line 93:       name: \"RequestBodyNotJsonError\",",
                "// Line 94:       message:",
                "// Line 95:         \"Content-Type header specified JSON but the body is not valid JSON!\",",
                "// Line 96:       body: \"{thisisntvalidJson\",",
                "// vulnerable line: 97: });",
                "// vulnerable line: 98: });",
                "// vulnerable line: 99: });"
            ]
        },
        {
            "filename_of_changes": "JsonDeserializer.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "9",
            "number_of_lines_deleted_vulnerable_to_cve": "5",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: import { PromiseHandler } from \"@lambda-middleware/utils\";",
                "// vulnerable line: 2: import debugFactory, { IDebugger } from \"debug\";",
                "// Line 3: import {",
                "// Line 4:   APIGatewayProxyEvent,",
                "// Line 5:   APIGatewayProxyResult,",
                "// Line 6:   Context,",
                "// Line 7: } from \"aws-lambda\";",
                "// Line 8: import { APIGatewayProxyObjectEvent } from \"./types/APIGatewayProxyObjectEvent\";",
                "// Line 9: import { RequestBodyNotJsonError } from \"./customErrors/RequestBodyNotJsonError\";",
                "// Line 10: ",
                "// vulnerable line: 11: const logger: IDebugger = debugFactory(\"@lambda-middleware/json-serializer\");",
                "// Line 12: ",
                "// Line 13: export const jsonDeserializer = <E extends APIGatewayProxyEvent>() => (",
                "// Line 14:   handler: PromiseHandler<APIGatewayProxyObjectEvent<E>, APIGatewayProxyResult>",
                "// Line 15: ) => async (event: E, context: Context): Promise<APIGatewayProxyResult> => {",
                "// Line 16:   const bodyObject = deserializeBody(event);",
                "// Line 17:   return await handler({ ...event, bodyObject }, context);",
                "// Line 18: };",
                "// Line 19: ",
                "// Line 20: const deserializeBody = <",
                "// Line 21:   E extends APIGatewayProxyEvent & { body: string | null }",
                "// Line 43: ",
                "// Line 44: const isJsonMimeType = (event: APIGatewayProxyEvent) => {",
                "// Line 45:   const { headers } = event;",
                "// Line 46:   const contentTypeHeader =",
                "// Line 47:     headers?.[\"Content-Type\"] ?? headers?.[\"content-type\"];",
                "// Line 48: ",
                "// Line 49:   if (!contentTypeHeader) {",
                "// Line 50:     return false;",
                "// Line 51:   }",
                "// Line 52: ",
                "// vulnerable line: 53: const mimePattern = /^application\\/(.+\\+)?json(;.*)?$/;",
                "// vulnerable line: 54: return mimePattern.test(contentTypeHeader);",
                "// Line 55: };"
            ]
        }
    ]
}