{
    "cve_id": "CVE-2024-28863",
    "cve_description": "node-tar is a Tar for Node.js. node-tar prior to version 6.2.1 has no limit on the number of sub-folders created in the folder creation process. An attacker who generates a large number of sub-folders can consume memory on the system running node-tar and even crash the Node.js client within few seconds of running it using a path with too many sub-folders inside. Version 6.2.1 fixes this issue by preventing extraction in excessively deep sub-folders.",
    "cve_publish_date": "2024-03-21T23:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "prevent extraction in excessively deep subfolders\n\nThis sets the limit at 1024 subfolders nesting by default, but that can\nbe dropped down, or set to Infinity to remove the limitation.",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "parse.js",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 639:     const warnings = []",
                "// Line 640:     const p = new Parse()",
                "// Line 641:     p.on('error', er => warnings.push(er.message))",
                "// Line 642:     let aborted = false",
                "// Line 643:     p.on('abort', _ => aborted = true)",
                "// Line 644:     p.write(trunc)",
                "// Line 645:     p.write(trunc)",
                "// Line 646:     p.write(tgz.slice(split))",
                "// Line 647:     p.end()",
                "// Line 648:     t.equal(aborted, true, 'aborted writing')",
                "// vulnerable line: 649: t.same(warnings, ['zlib: incorrect data check'])",
                "// Line 650:     t.end()",
                "// Line 651:   })",
                "// Line 652: ",
                "// Line 653:   t.end()",
                "// Line 654: })",
                "// Line 655: ",
                "// Line 656: t.test('end while consuming', t => {",
                "// Line 657:   // https://github.com/npm/node-tar/issues/157",
                "// Line 658:   const data = zlib.gzipSync(makeTar([",
                "// Line 659:     {"
            ]
        },
        {
            "filename_of_changes": "unpack.js",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "22",
            "number_of_lines_deleted_vulnerable_to_cve": "5",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 232:   [MAYBECLOSE] () {",
                "// Line 233:     if (this[ENDED] && this[PENDING] === 0) {",
                "// Line 234:       this.emit('prefinish')",
                "// Line 235:       this.emit('finish')",
                "// Line 236:       this.emit('end')",
                "// Line 237:     }",
                "// Line 238:   }",
                "// Line 239: ",
                "// Line 240:   [CHECKPATH] (entry) {",
                "// Line 241:     if (this.strip) {",
                "// vulnerable line: 242: const parts = normPath(entry.path).split('/')",
                "// Line 243:       if (parts.length < this.strip) {",
                "// Line 244:         return false",
                "// Line 245:       }",
                "// vulnerable line: 246: entry.path = parts.slice(this.strip).join('/')",
                "// Line 247: ",
                "// Line 248:       if (entry.type === 'Link') {",
                "// Line 249:         const linkparts = normPath(entry.linkpath).split('/')",
                "// Line 250:         if (linkparts.length >= this.strip) {",
                "// Line 251:           entry.linkpath = linkparts.slice(this.strip).join('/')",
                "// Line 252:         } else {",
                "// Line 253:           return false",
                "// Line 254:         }",
                "// Line 255:       }",
                "// Line 256:     }",
                "// Line 257: ",
                "// Line 258:     if (!this.preservePaths) {",
                "// vulnerable line: 259: const p = normPath(entry.path)",
                "// vulnerable line: 260: const parts = p.split('/')",
                "// Line 261:       if (parts.includes('..') || isWindows && /^[a-z]:\\.\\.$/i.test(parts[0])) {",
                "// Line 262:         this.warn('TAR_ENTRY_ERROR', `path contains '..'`, {",
                "// Line 263:           entry,",
                "// Line 264:           path: p,",
                "// Line 265:         })",
                "// Line 266:         return false",
                "// Line 267:       }",
                "// Line 268: ",
                "// Line 269:       // strip off the root",
                "// Line 270:       const [root, stripped] = stripAbsolutePath(p)"
            ]
        }
    ]
}