{
    "cve_id": "CVE-2024-27916",
    "cve_description": "Minder is a software supply chain security platform. Prior to version 0.0.33, a Minder user can use the endpoints `GetRepositoryByName`, `DeleteRepositoryByName`, and `GetArtifactByName` to access any repository in the database, irrespective of who owns the repo and any permissions present. The database query checks by repo owner, repo name and provider name (which is always `github`). These query values are not distinct for the particular user - as long as the user has valid credentials and a provider, they can set the repo owner/name to any value they want and the server will return information on this repo. Version 0.0.33 contains a patch for this issue.",
    "cve_publish_date": "2024-03-21T02:52Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Merge pull request from GHSA-v627-69v2-xx37\n\nFixes #GHSA-v627-69v2-xx37\n\nChange GetRepositoryByRepoName query to include project ID. This enforces that\nthe user can only access the repos in the project they authorized with.\nThis fixes a security issue where several API endpoints allowed any\nauthenticated user to manipulate any repo in the DB, irrespective of who\nowned it.",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "handlers_artifacts.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "handlers_repositories.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "12",
            "number_of_lines_deleted_vulnerable_to_cve": "4",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 267:     }",
                "// Line 268: ",
                "// Line 269:     entityCtx := engine.EntityFromContext(ctx)",
                "// Line 270:     projectID := entityCtx.Project.ID",
                "// Line 271: ",
                "// Line 272:     provider, err := getProviderFromRequestOrDefault(ctx, s.store, in, projectID)",
                "// Line 273:     if err != nil {",
                "// Line 274:         return nil, providerError(err)",
                "// Line 275:     }",
                "// Line 276: ",
                "// vulnerable line: 277: repo, err := s.store.GetRepositoryByRepoName(ctx,",
                "// vulnerable line: 278: db.GetRepositoryByRepoNameParams{Provider: provider.Name, RepoOwner: fragments[0], RepoName: fragments[1]})",
                "// Line 279: ",
                "// Line 280:     if errors.Is(err, sql.ErrNoRows) {",
                "// Line 281:         return nil, status.Errorf(codes.NotFound, \"repository not found\")",
                "// Line 282:     } else if err != nil {",
                "// Line 283:         return nil, err",
                "// Line 284:     }",
                "// Line 285: ",
                "// Line 286:     projID := repo.ProjectID.String()",
                "// Line 287:     r := util.PBRepositoryFromDB(repo)",
                "// Line 288:     r.Context = &pb.Context{",
                "// Line 345:     }",
                "// Line 346: ",
                "// Line 347:     entityCtx := engine.EntityFromContext(ctx)",
                "// Line 348:     projectID := entityCtx.Project.ID",
                "// Line 349: ",
                "// Line 350:     provider, err := getProviderFromRequestOrDefault(ctx, s.store, in, projectID)",
                "// Line 351:     if err != nil {",
                "// Line 352:         return nil, providerError(err)",
                "// Line 353:     }",
                "// Line 354: ",
                "// vulnerable line: 355: repo, err := s.store.GetRepositoryByRepoName(ctx,",
                "// vulnerable line: 356: db.GetRepositoryByRepoNameParams{Provider: provider.Name, RepoOwner: fragments[0], RepoName: fragments[1]})",
                "// Line 357: ",
                "// Line 358:     if errors.Is(err, sql.ErrNoRows) {",
                "// Line 359:         return nil, status.Errorf(codes.NotFound, \"repository not found\")",
                "// Line 360:     } else if err != nil {",
                "// Line 361:         return nil, err",
                "// Line 362:     }",
                "// Line 363:     err = s.deleteRepositoryAndWebhook(ctx, repo, projectID, provider)",
                "// Line 364:     if err != nil {",
                "// Line 365:         return nil, err",
                "// Line 366:     }"
            ]
        },
        {
            "filename_of_changes": "repositories.sql.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "11",
            "number_of_lines_deleted_vulnerable_to_cve": "5",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 181:         &i.DeployUrl,",
                "// Line 182:         &i.CloneUrl,",
                "// Line 183:         &i.CreatedAt,",
                "// Line 184:         &i.UpdatedAt,",
                "// Line 185:         &i.DefaultBranch,",
                "// Line 186:     )",
                "// Line 187:     return i, err",
                "// Line 188: }",
                "// Line 189: ",
                "// Line 190: const getRepositoryByRepoName = `-- name: GetRepositoryByRepoName :one",
                "// vulnerable line: 191: SELECT id, provider, project_id, repo_owner, repo_name, repo_id, is_private, is_fork, webhook_id, webhook_url, deploy_url, clone_url, created_at, updated_at, default_branch FROM repositories WHERE provider = $1 AND repo_owner = $2 AND repo_name = $3",
                "// Line 192: `",
                "// Line 193: ",
                "// Line 194: type GetRepositoryByRepoNameParams struct {",
                "// vulnerable line: 195: Provider  string `json:\"provider\"`",
                "// vulnerable line: 196: RepoOwner string `json:\"repo_owner\"`",
                "// vulnerable line: 197: RepoName  string `json:\"repo_name\"`",
                "// Line 198: }",
                "// Line 199: ",
                "// Line 200: func (q *Queries) GetRepositoryByRepoName(ctx context.Context, arg GetRepositoryByRepoNameParams) (Repository, error) {",
                "// vulnerable line: 201: row := q.db.QueryRowContext(ctx, getRepositoryByRepoName, arg.Provider, arg.RepoOwner, arg.RepoName)",
                "// Line 202:     var i Repository",
                "// Line 203:     err := row.Scan(",
                "// Line 204:         &i.ID,",
                "// Line 205:         &i.Provider,",
                "// Line 206:         &i.ProjectID,",
                "// Line 207:         &i.RepoOwner,",
                "// Line 208:         &i.RepoName,",
                "// Line 209:         &i.RepoID,",
                "// Line 210:         &i.IsPrivate,",
                "// Line 211:         &i.IsFork,",
                "// Line 316: ",
                "// Line 317: const listRepositoriesByOwner = `-- name: ListRepositoriesByOwner :many",
                "// Line 318: SELECT id, provider, project_id, repo_owner, repo_name, repo_id, is_private, is_fork, webhook_id, webhook_url, deploy_url, clone_url, created_at, updated_at, default_branch FROM repositories",
                "// Line 319: WHERE provider = $1 AND repo_owner = $2",
                "// Line 320: ORDER BY repo_name",
                "// Line 321: LIMIT $3",
                "// Line 322: OFFSET $4",
                "// Line 323: `",
                "// Line 324: ",
                "// Line 325: type ListRepositoriesByOwnerParams struct {",
                "// vulnerable line: 326: Provider  string `json:\"provider\"`",
                "// vulnerable line: 327: RepoOwner string `json:\"repo_owner\"`",
                "// Line 328:     Limit     int32  `json:\"limit\"`",
                "// Line 329:     Offset    int32  `json:\"offset\"`",
                "// Line 330: }",
                "// Line 331: ",
                "// Line 332: func (q *Queries) ListRepositoriesByOwner(ctx context.Context, arg ListRepositoriesByOwnerParams) ([]Repository, error) {",
                "// Line 333:     rows, err := q.db.QueryContext(ctx, listRepositoriesByOwner,",
                "// Line 334:         arg.Provider,",
                "// Line 335:         arg.RepoOwner,",
                "// Line 336:         arg.Limit,",
                "// Line 337:         arg.Offset,"
            ]
        },
        {
            "filename_of_changes": "repositories_test.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "5",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 122: ",
                "// Line 123: func TestGetRepositoryByRepoName(t *testing.T) {",
                "// Line 124:     t.Parallel()",
                "// Line 125: ",
                "// Line 126:     org := createRandomOrganization(t)",
                "// Line 127:     project := createRandomProject(t, org.ID)",
                "// Line 128:     prov := createRandomProvider(t, project.ID)",
                "// Line 129:     repo1 := createRandomRepository(t, project.ID, prov.Name)",
                "// Line 130: ",
                "// Line 131:     repo2, err := testQueries.GetRepositoryByRepoName(context.Background(), GetRepositoryByRepoNameParams{",
                "// vulnerable line: 132: Provider: repo1.Provider, RepoOwner: repo1.RepoOwner, RepoName: repo1.RepoName})",
                "// Line 133:     require.NoError(t, err)",
                "// Line 134:     require.NotEmpty(t, repo2)",
                "// Line 135: ",
                "// Line 136:     require.Equal(t, repo1.ID, repo2.ID)",
                "// Line 137:     require.Equal(t, repo1.Provider, repo2.Provider)",
                "// Line 138:     require.Equal(t, repo1.ProjectID, repo2.ProjectID)",
                "// Line 139:     require.Equal(t, repo1.RepoOwner, repo2.RepoOwner)",
                "// Line 140:     require.Equal(t, repo1.RepoName, repo2.RepoName)",
                "// Line 141:     require.Equal(t, repo1.RepoID, repo2.RepoID)",
                "// Line 142:     require.Equal(t, repo1.IsPrivate, repo2.IsPrivate)"
            ]
        }
    ]
}