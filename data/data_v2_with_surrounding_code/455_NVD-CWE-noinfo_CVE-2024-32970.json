{
    "cve_id": "CVE-2024-32970",
    "cve_description": "Phlex is a framework for building object-oriented views in Ruby. In affected versions there is a potential cross-site scripting (XSS) vulnerability that can be exploited via maliciously crafted user data. Since the last two vulnerabilities https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g and https://github.com/phlex-ruby/phlex/security/advisories/GHSA-g7xq-xv8c-h98c, we have invested in extensive browser tests. It was these new tests that helped us uncover these issues. As of now the project exercises every possible attack vector the developers can think of â€” including enumerating every ASCII character, and we run these tests in Chrome, Firefox and Safari. Additionally, we test against a list of 6613 known XSS payloads (see: payloadbox/xss-payload-list). The reason these issues were not detected before is the escapes were working as designed. However, their design didn't take into account just how recklessly permissive browsers are when it comes to executing unsafe JavaScript via HTML attributes. If you render an `<a>` tag with an `href` attribute set to a user-provided link, that link could potentially execute JavaScript when clicked by another user. If you splat user-provided attributes when rendering any HTML or SVG tag, malicious event attributes could be included in the output, executing JavaScript when the events are triggered by another user. Patches are available on RubyGems for all minor versions released in the last year. Users are advised to upgrade. Users unable to upgrade should configure a Content Security Policy that does not allow `unsafe-inline` which would effectively prevent this vulnerability from being exploited. Users who upgrade are also advised to configure a Content Security Policy header that does not allow `unsafe-inline`.",
    "cve_publish_date": "2024-04-30T23:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Browser tests for XSS",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "Gemfile",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "sgml.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 379:                     when String then k",
                "// Line 380:                     when Symbol then k.name.tr(\"_\", \"-\")",
                "// Line 381:                     else raise ArgumentError, \"Attribute keys should be Strings or Symbols.\"",
                "// Line 382:                 end",
                "// Line 383: ",
                "// Line 384:                 lower_name = name.downcase",
                "// Line 385:                 next if lower_name == \"href\" && v.to_s.downcase.tr(\"     ",
                "// Line 386: \", \"\").start_with?(\"javascript:\")",
                "// Line 387: ",
                "// Line 388:                 # Detect unsafe attribute names. Attribute names are considered unsafe if they match an event attribute or include unsafe characters.",
                "// vulnerable line: 389: if HTML::EVENT_ATTRIBUTES.include?(lower_name) || name.match?(/[<>&\"']/)",
                "// Line 390:                     raise ArgumentError, \"Unsafe attribute name detected: #{k}.\"",
                "// Line 391:                 end",
                "// Line 392: ",
                "// Line 393:                 case v",
                "// Line 394:                 when true",
                "// Line 395:                     buffer << \" \" << name",
                "// Line 396:                 when String",
                "// Line 397:                     buffer << \" \" << name << '=\"' << v.gsub('\"', \"&quot;\") << '\"'",
                "// Line 398:                 when Symbol",
                "// Line 399:                     buffer << \" \" << name << '=\"' << v.name.gsub('\"', \"&quot;\") << '\"'"
            ]
        }
    ]
}