{
    "cve_id": "CVE-2024-2206",
    "cve_description": "An SSRF vulnerability exists in the gradio-app/gradio due to insufficient validation of user-supplied URLs in the `/proxy` route. Attackers can exploit this vulnerability by manipulating the `self.replica_urls` set through the `X-Direct-Url` header in requests to the `/` and `/config` routes, allowing the addition of arbitrary URLs for proxying. This flaw enables unauthorized proxying of requests and potential access to internal endpoints within the Hugging Face space. The issue arises from the application's inadequate checking of safe URLs in the `build_proxy_request` function.",
    "cve_publish_date": "2024-03-27T01:15Z",
    "cwe_id": "CWE-918",
    "cwe_name": "Server-Side Request Forgery (SSRF)",
    "cwe_description": "The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.",
    "commit_message": "[WIP] Refactor file normalization to be in the backend and remove it from the frontend of each component (#7183)\n\n* processing\r\n\r\n* add changeset\r\n\r\n* changes\r\n\r\n* add changeset\r\n\r\n* add changeset\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* clean\r\n\r\n* changes\r\n\r\n* add changeset\r\n\r\n* add changeset\r\n\r\n* root url\r\n\r\n* refactor\r\n\r\n* testing\r\n\r\n* testing\r\n\r\n* log\r\n\r\n* logs\r\n\r\n* fix\r\n\r\n* format\r\n\r\n* add changeset\r\n\r\n* remove\r\n\r\n* add root\r\n\r\n* format\r\n\r\n* apply to everything\r\n\r\n* annoying fix\r\n\r\n* fixes\r\n\r\n* lint\r\n\r\n* fixes\r\n\r\n* fixes\r\n\r\n* fixes\r\n\r\n* fix tests\r\n\r\n* fix js tests\r\n\r\n* format\r\n\r\n* fix python tests\r\n\r\n* clean guides\r\n\r\n* add changeset\r\n\r\n* add changeset\r\n\r\n* simplify\r\n\r\n* add changeset\r\n\r\n---------\r\n\r\nCo-authored-by: gradio-pr-bot <gradio-pr-bot@users.noreply.github.com>\r\nCo-authored-by: pngwn <hello@pngwn.io>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "base.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "6",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 188:             )",
                "// Line 189:         self.scale = scale",
                "// Line 190:         self.min_width = min_width",
                "// Line 191:         self.interactive = interactive",
                "// Line 192: ",
                "// Line 193:         # load_event is set in the Blocks.attach_load_events method",
                "// Line 194:         self.load_event: None | dict[str, Any] = None",
                "// Line 195:         self.load_event_to_attach: None | tuple[Callable, float | None] = None",
                "// Line 196:         load_fn, initial_value = self.get_load_fn_and_initial_value(value)",
                "// Line 197:         initial_value = self.postprocess(initial_value)",
                "// vulnerable line: 198: self.value = move_files_to_cache(initial_value, self, postprocess=True)  # type: ignore",
                "// Line 199: ",
                "// Line 200:         if callable(load_fn):",
                "// Line 201:             self.attach_load_event(load_fn, every)",
                "// Line 202: ",
                "// Line 203:         self.component_class_id = self.__class__.get_component_class_id()",
                "// Line 204: ",
                "// Line 205:     TEMPLATE_DIR = \"./templates/\"",
                "// Line 206:     FRONTEND_DIR = \"../../frontend/\"",
                "// Line 207: ",
                "// Line 208:     def get_config(self):"
            ]
        },
        {
            "filename_of_changes": "blocks.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1324:                 if not isinstance(block, components.Component):",
                "// Line 1325:                     raise InvalidComponentError(",
                "// Line 1326:                         f\"{block.__class__} Component with id {input_id} not a valid input component.\"",
                "// Line 1327:                     )",
                "// Line 1328:                 if getattr(block, \"stateful\", False):",
                "// Line 1329:                     processed_input.append(state[input_id])",
                "// Line 1330:                 else:",
                "// Line 1331:                     if input_id in state:",
                "// Line 1332:                         block = state[input_id]",
                "// Line 1333:                     inputs_cached = processing_utils.move_files_to_cache(",
                "// vulnerable line: 1334: inputs[i], block",
                "// Line 1335:                     )",
                "// Line 1336:                     if getattr(block, \"data_model\", None) and inputs_cached is not None:",
                "// Line 1337:                         if issubclass(block.data_model, GradioModel):  # type: ignore",
                "// Line 1338:                             inputs_cached = block.data_model(**inputs_cached)  # type: ignore",
                "// Line 1339:                         elif issubclass(block.data_model, GradioRootModel):  # type: ignore",
                "// Line 1340:                             inputs_cached = block.data_model(root=inputs_cached)  # type: ignore",
                "// Line 1341:                     processed_input.append(block.preprocess(inputs_cached))",
                "// Line 1342:         else:",
                "// Line 1343:             processed_input = inputs",
                "// Line 1344:         return processed_input"
            ]
        },
        {
            "filename_of_changes": "data_classes.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "login_button.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 81:         self.click(fn=None, inputs=[self], outputs=None, js=_js)",
                "// Line 82: ",
                "// Line 83:         self.attach_load_event(self._check_login_status, None)",
                "// Line 84: ",
                "// Line 85:     def _check_login_status(self, request: Request) -> LoginButton:",
                "// Line 86:         # Each time the page is refreshed or loaded, check if the user is logged in and adapt label",
                "// Line 87:         session = getattr(request, \"session\", None) or getattr(",
                "// Line 88:             request.request, \"session\", None",
                "// Line 89:         )",
                "// Line 90:         if session is None or \"oauth_info\" not in session:",
                "// vulnerable line: 91: return LoginButton(value=self.value, interactive=True)",
                "// Line 92:         else:",
                "// Line 93:             username = session[\"oauth_info\"][\"userinfo\"][\"preferred_username\"]",
                "// Line 94:             logout_text = self.logout_value.format(username)",
                "// Line 95:             return LoginButton(logout_text, interactive=True)",
                "// Line 96: ",
                "// Line 97: ",
                "// Line 98: # JS code to redirects to /login/huggingface if user is not logged in.",
                "// Line 99: # If the app is opened in an iframe, open the login page in a new tab.",
                "// Line 100: # Otherwise, redirects locally. Taken from https://stackoverflow.com/a/61596084.",
                "// Line 101: # If user is logged in, redirect to logout page (always in-place)."
            ]
        },
        {
            "filename_of_changes": "route_utils.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "6",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "routes.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "14",
            "number_of_lines_deleted_vulnerable_to_cve": "19",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 10: if sys.version_info >= (3, 9):",
                "// Line 11:     from importlib.resources import files",
                "// Line 12: else:",
                "// Line 13:     from importlib_resources import files",
                "// Line 14: import inspect",
                "// Line 15: import json",
                "// Line 16: import mimetypes",
                "// Line 17: import os",
                "// Line 18: import posixpath",
                "// Line 19: import secrets",
                "// vulnerable line: 20: import shutil",
                "// Line 21: import tempfile",
                "// Line 22: import threading",
                "// Line 23: import time",
                "// Line 24: import traceback",
                "// Line 25: from pathlib import Path",
                "// Line 26: from queue import Empty as EmptyQueue",
                "// Line 27: from typing import TYPE_CHECKING, Any, AsyncIterator, Dict, List, Optional, Type",
                "// Line 28: ",
                "// Line 29: import fastapi",
                "// Line 30: import httpx",
                "// Line 31: import markupsafe",
                "// Line 32: import orjson",
                "// Line 33: from fastapi import BackgroundTasks, Depends, FastAPI, HTTPException, status",
                "// Line 34: from fastapi.middleware.cors import CORSMiddleware",
                "// Line 35: from fastapi.responses import (",
                "// Line 36:     FileResponse,",
                "// Line 37:     HTMLResponse,",
                "// Line 38:     JSONResponse,",
                "// Line 39:     PlainTextResponse,",
                "// vulnerable line: 40: )",
                "// Line 41: from fastapi.security import OAuth2PasswordRequestForm",
                "// Line 42: from fastapi.templating import Jinja2Templates",
                "// Line 43: from gradio_client import utils as client_utils",
                "// Line 44: from gradio_client.documentation import document",
                "// Line 45: from gradio_client.utils import ServerMessage",
                "// Line 46: from jinja2.exceptions import TemplateNotFound",
                "// Line 47: from multipart.multipart import parse_options_header",
                "// Line 48: from starlette.background import BackgroundTask",
                "// Line 49: from starlette.responses import RedirectResponse, StreamingResponse",
                "// Line 50: ",
                "// Line 56: from gradio.oauth import attach_oauth",
                "// Line 57: from gradio.queueing import Estimation",
                "// Line 58: from gradio.route_utils import (  # noqa: F401",
                "// Line 59:     FileUploadProgress,",
                "// Line 60:     FileUploadProgressNotQueuedError,",
                "// Line 61:     FileUploadProgressNotTrackedError,",
                "// Line 62:     GradioMultiPartParser,",
                "// Line 63:     GradioUploadFile,",
                "// Line 64:     MultiPartException,",
                "// Line 65:     Request,",
                "// vulnerable line: 66: )",
                "// Line 67: from gradio.state_holder import StateHolder",
                "// Line 68: from gradio.utils import (",
                "// Line 69:     get_package_version,",
                "// vulnerable line: 70: )",
                "// Line 71: ",
                "// Line 72: if TYPE_CHECKING:",
                "// Line 73:     from gradio.blocks import Block",
                "// Line 74: ",
                "// Line 75: ",
                "// Line 76: mimetypes.init()",
                "// Line 77: ",
                "// Line 78: STATIC_TEMPLATE_LIB = files(\"gradio\").joinpath(\"templates\").as_posix()  # type: ignore",
                "// Line 79: STATIC_PATH_LIB = files(\"gradio\").joinpath(\"templates\", \"frontend\", \"static\").as_posix()  # type: ignore",
                "// Line 80: BUILD_PATH_LIB = files(\"gradio\").joinpath(\"templates\", \"frontend\", \"assets\").as_posix()  # type: ignore",
                "// Line 83: ",
                "// Line 84: class ORJSONResponse(JSONResponse):",
                "// Line 85:     media_type = \"application/json\"",
                "// Line 86: ",
                "// Line 87:     @staticmethod",
                "// Line 88:     def _render(content: Any) -> bytes:",
                "// Line 89:         return orjson.dumps(",
                "// Line 90:             content,",
                "// Line 91:             option=orjson.OPT_SERIALIZE_NUMPY | orjson.OPT_PASSTHROUGH_DATETIME,",
                "// Line 92:             default=str,",
                "// vulnerable line: 93: )",
                "// Line 94: ",
                "// Line 95:     def render(self, content: Any) -> bytes:",
                "// Line 96:         return ORJSONResponse._render(content)",
                "// Line 97: ",
                "// Line 98:     @staticmethod",
                "// Line 99:     def _render_str(content: Any) -> str:",
                "// Line 100:         return ORJSONResponse._render(content).decode(\"utf-8\")",
                "// Line 101: ",
                "// Line 102: ",
                "// Line 103: def toorjson(value):",
                "// Line 104:     return markupsafe.Markup(",
                "// Line 105:         ORJSONResponse._render_str(value)",
                "// Line 106:         .replace(\"<\", \"<\")",
                "// Line 107:         .replace(\">\", \">\")",
                "// Line 108:         .replace(\"&\", \"&\")",
                "// Line 109:         .replace(\"'\", \"'\")",
                "// vulnerable line: 110: )",
                "// Line 111: ",
                "// Line 112: ",
                "// Line 113: templates = Jinja2Templates(directory=STATIC_TEMPLATE_LIB)",
                "// Line 114: templates.env.filters[\"toorjson\"] = toorjson",
                "// Line 115: ",
                "// Line 116: client = httpx.AsyncClient()",
                "// Line 117: ",
                "// Line 118: ",
                "// vulnerable line: 119: def move_uploaded_files_to_cache(files: list[str], destinations: list[str]) -> None:",
                "// vulnerable line: 120: for file, dest in zip(files, destinations):",
                "// vulnerable line: 121: shutil.move(file, dest)",
                "// Line 122: ",
                "// Line 123: ",
                "// Line 124: file_upload_statuses = FileUploadProgress()",
                "// Line 125: ",
                "// Line 126: ",
                "// Line 127: class App(FastAPI):",
                "// Line 128:     \"\"\"",
                "// Line 129:     FastAPI App Wrapper",
                "// Line 130:     \"\"\"",
                "// Line 131: ",
                "// Line 135:         self.blocks: gradio.Blocks | None = None",
                "// Line 136:         self.state_holder = StateHolder()",
                "// Line 137:         self.iterators: dict[str, AsyncIterator] = {}",
                "// Line 138:         self.iterators_to_reset: set[str] = set()",
                "// Line 139:         self.lock = utils.safe_get_lock()",
                "// Line 140:         self.cookie_id = secrets.token_urlsafe(32)",
                "// Line 141:         self.queue_token = secrets.token_urlsafe(32)",
                "// Line 142:         self.startup_events_triggered = False",
                "// Line 143:         self.uploaded_file_dir = os.environ.get(\"GRADIO_TEMP_DIR\") or str(",
                "// Line 144:             (Path(tempfile.gettempdir()) / \"gradio\").resolve()",
                "// vulnerable line: 145: )",
                "// Line 146:         self.change_event: None | threading.Event = None",
                "// Line 147:         self._asyncio_tasks: list[asyncio.Task] = []",
                "// Line 148:         # Allow user to manually set `docs_url` and `redoc_url`",
                "// Line 149:         # when instantiating an App; when they're not set, disable docs and redoc.",
                "// Line 150:         kwargs.setdefault(\"docs_url\", None)",
                "// Line 151:         kwargs.setdefault(\"redoc_url\", None)",
                "// Line 152:         super().__init__(**kwargs)",
                "// Line 153: ",
                "// Line 154:     def configure_app(self, blocks: gradio.Blocks) -> None:",
                "// Line 155:         auth = blocks.auth",
                "// Line 173:             raise ValueError(\"No Blocks has been configured for this app.\")",
                "// Line 174:         return self.blocks",
                "// Line 175: ",
                "// Line 176:     def build_proxy_request(self, url_path):",
                "// Line 177:         url = httpx.URL(url_path)",
                "// Line 178:         assert self.blocks",
                "// Line 179:         # Don't proxy a URL unless it's a URL specifically loaded by the user using",
                "// Line 180:         # gr.load() to prevent SSRF or harvesting of HF tokens by malicious Spaces.",
                "// Line 181:         is_safe_url = any(",
                "// Line 182:             url.host == httpx.URL(root).host for root in self.blocks.proxy_urls",
                "// vulnerable line: 183: )",
                "// Line 184:         if not is_safe_url:",
                "// Line 185:             raise PermissionError(\"This URL cannot be proxied.\")",
                "// Line 186:         is_hf_url = url.host.endswith(\".hf.space\")",
                "// Line 187:         headers = {}",
                "// Line 188:         if Context.hf_token is not None and is_hf_url:",
                "// Line 189:             headers[\"Authorization\"] = f\"Bearer {Context.hf_token}\"",
                "// Line 190:         rp_req = client.build_request(\"GET\", url, headers=headers)",
                "// Line 191:         return rp_req",
                "// Line 192: ",
                "// Line 193:     def _cancel_asyncio_tasks(self):",
                "// Line 203:         app_kwargs.setdefault(\"default_response_class\", ORJSONResponse)",
                "// Line 204:         app = App(**app_kwargs)",
                "// Line 205:         app.configure_app(blocks)",
                "// Line 206: ",
                "// Line 207:         if not wasm_utils.IS_WASM:",
                "// Line 208:             app.add_middleware(",
                "// Line 209:                 CORSMiddleware,",
                "// Line 210:                 allow_origins=[\"*\"],",
                "// Line 211:                 allow_methods=[\"*\"],",
                "// Line 212:                 allow_headers=[\"*\"],",
                "// vulnerable line: 213: )",
                "// Line 214: ",
                "// Line 215:         @app.get(\"/user\")",
                "// Line 216:         @app.get(\"/user/\")",
                "// Line 217:         def get_current_user(request: fastapi.Request) -> Optional[str]:",
                "// Line 218:             token = request.cookies.get(",
                "// Line 219:                 f\"access-token-{app.cookie_id}\"",
                "// Line 220:             ) or request.cookies.get(f\"access-token-unsecure-{app.cookie_id}\")",
                "// Line 221:             return app.tokens.get(token)",
                "// Line 222: ",
                "// Line 223:         @app.get(\"/login_check\")",
                "// Line 224:         @app.get(\"/login_check/\")",
                "// Line 225:         def login_check(user: str = Depends(get_current_user)):",
                "// Line 226:             if app.auth is None or user is not None:",
                "// Line 227:                 return",
                "// Line 228:             raise HTTPException(",
                "// Line 229:                 status_code=status.HTTP_401_UNAUTHORIZED, detail=\"Not authenticated\"",
                "// vulnerable line: 230: )",
                "// Line 231: ",
                "// Line 232:         @app.get(\"/token\")",
                "// Line 233:         @app.get(\"/token/\")",
                "// Line 234:         def get_token(request: fastapi.Request) -> dict:",
                "// Line 235:             token = request.cookies.get(f\"access-token-{app.cookie_id}\")",
                "// Line 236:             return {\"token\": token, \"user\": app.tokens.get(token)}",
                "// Line 237: ",
                "// Line 238:         @app.get(\"/app_id\")",
                "// Line 239:         @app.get(\"/app_id/\")",
                "// Line 240:         def app_id(request: fastapi.Request) -> dict:  # noqa: ARG001",
                "// Line 262:                     await asyncio.sleep(check_rate)",
                "// Line 263:                     if time.perf_counter() - last_heartbeat > heartbeat_rate:",
                "// Line 264:                         yield \"\"\"data: HEARTBEAT",
                "// Line 265: ",
                "// Line 266: \"\"\"",
                "// Line 267:                         last_heartbeat = time.time()",
                "// Line 268: ",
                "// Line 269:             return StreamingResponse(",
                "// Line 270:                 reload_checker(request),",
                "// Line 271:                 media_type=\"text/event-stream\",",
                "// vulnerable line: 272: )",
                "// Line 273: ",
                "// Line 274:         @app.post(\"/login\")",
                "// Line 275:         @app.post(\"/login/\")",
                "// Line 276:         def login(form_data: OAuth2PasswordRequestForm = Depends()):",
                "// Line 277:             username, password = form_data.username.strip(), form_data.password",
                "// Line 278:             if app.auth is None:",
                "// Line 279:                 return RedirectResponse(url=\"/\", status_code=status.HTTP_302_FOUND)",
                "// Line 280:             if (",
                "// Line 281:                 not callable(app.auth)",
                "// Line 282:                 and username in app.auth",
                "// Line 284:             ) or (callable(app.auth) and app.auth.__call__(username, password)):",
                "// Line 285:                 token = secrets.token_urlsafe(16)",
                "// Line 286:                 app.tokens[token] = username",
                "// Line 287:                 response = JSONResponse(content={\"success\": True})",
                "// Line 288:                 response.set_cookie(",
                "// Line 289:                     key=f\"access-token-{app.cookie_id}\",",
                "// Line 290:                     value=token,",
                "// Line 291:                     httponly=True,",
                "// Line 292:                     samesite=\"none\",",
                "// Line 293:                     secure=True,",
                "// vulnerable line: 294: )",
                "// Line 295:                 response.set_cookie(",
                "// Line 296:                     key=f\"access-token-unsecure-{app.cookie_id}\",",
                "// Line 297:                     value=token,",
                "// Line 298:                     httponly=True,",
                "// vulnerable line: 299: )",
                "// Line 300:                 return response",
                "// Line 301:             else:",
                "// Line 302:                 raise HTTPException(status_code=400, detail=\"Incorrect credentials.\")",
                "// Line 303: ",
                "// Line 304:         ###############",
                "// Line 305:         # OAuth Routes",
                "// Line 306:         ###############",
                "// Line 307: ",
                "// Line 308:         # Define OAuth routes if the app expects it (i.e. a LoginButton is defined).",
                "// Line 309:         # It allows users to \"Sign in with HuggingFace\".",
                "// Line 312: ",
                "// Line 313:         ###############",
                "// Line 314:         # Main Routes",
                "// Line 315:         ###############",
                "// Line 316: ",
                "// Line 317:         @app.head(\"/\", response_class=HTMLResponse)",
                "// Line 318:         @app.get(\"/\", response_class=HTMLResponse)",
                "// Line 319:         def main(request: fastapi.Request, user: str = Depends(get_current_user)):",
                "// Line 320:             mimetypes.add_type(\"application/javascript\", \".js\")",
                "// Line 321:             blocks = app.get_blocks()",
                "// vulnerable line: 322: root_path = (",
                "// vulnerable line: 323: request.scope.get(\"root_path\")",
                "// vulnerable line: 324: or request.headers.get(\"X-Direct-Url\")",
                "// vulnerable line: 325: or \"\"",
                "// vulnerable line: 326: )",
                "// Line 327:             if app.auth is None or user is not None:",
                "// Line 328:                 config = app.get_blocks().config",
                "// vulnerable line: 329: config[\"root\"] = route_utils.strip_url(root_path)",
                "// Line 330:             else:",
                "// Line 331:                 config = {",
                "// Line 332:                     \"auth_required\": True,",
                "// Line 333:                     \"auth_message\": blocks.auth_message,",
                "// Line 334:                     \"space_id\": app.get_blocks().space_id,",
                "// Line 335:                     \"root\": route_utils.strip_url(root_path),",
                "// Line 336:                 }",
                "// Line 337: ",
                "// Line 338:             try:",
                "// Line 339:                 template = (",
                "// Line 340:                     \"frontend/share.html\" if blocks.share else \"frontend/index.html\"",
                "// vulnerable line: 341: )",
                "// Line 342:                 return templates.TemplateResponse(",
                "// Line 343:                     template,",
                "// Line 344:                     {\"request\": request, \"config\": config},",
                "// vulnerable line: 345: )",
                "// Line 346:             except TemplateNotFound as err:",
                "// Line 347:                 if blocks.share:",
                "// Line 348:                     raise ValueError(",
                "// Line 349:                         \"Did you install Gradio from source files? Share mode only \"",
                "// Line 350:                         \"works when Gradio is installed through the pip package.\"",
                "// Line 351:                     ) from err",
                "// Line 352:                 else:",
                "// Line 353:                     raise ValueError(",
                "// Line 354:                         \"Did you install Gradio from source files? You need to build \"",
                "// Line 355:                         \"the frontend by running /scripts/build_frontend.sh\"",
                "// Line 356:                     ) from err",
                "// Line 357: ",
                "// Line 358:         @app.get(\"/info/\", dependencies=[Depends(login_check)])",
                "// Line 359:         @app.get(\"/info\", dependencies=[Depends(login_check)])",
                "// Line 360:         def api_info():",
                "// Line 361:             return app.get_blocks().get_api_info()  # type: ignore",
                "// Line 362: ",
                "// Line 363:         @app.get(\"/config/\", dependencies=[Depends(login_check)])",
                "// Line 364:         @app.get(\"/config\", dependencies=[Depends(login_check)])",
                "// Line 365:         def get_config(request: fastapi.Request):",
                "// vulnerable line: 366: root_path = (",
                "// vulnerable line: 367: request.scope.get(\"root_path\")",
                "// vulnerable line: 368: or request.headers.get(\"X-Direct-Url\")",
                "// vulnerable line: 369: or \"\"",
                "// vulnerable line: 370: )",
                "// Line 371:             config = app.get_blocks().config",
                "// vulnerable line: 372: config[\"root\"] = route_utils.strip_url(root_path)",
                "// Line 373:             return config",
                "// Line 374: ",
                "// Line 375:         @app.get(\"/static/{path:path}\")",
                "// Line 376:         def static_resource(path: str):",
                "// Line 377:             static_file = safe_join(STATIC_PATH_LIB, path)",
                "// Line 378:             return FileResponse(static_file)",
                "// Line 379: ",
                "// Line 380:         @app.get(\"/custom_component/{id}/{type}/{file_name}\")",
                "// Line 381:         def custom_component_path(id: str, type: str, file_name: str):",
                "// Line 382:             config = app.get_blocks().config",
                "// Line 383:             components = config[\"components\"]",
                "// Line 384:             location = next(",
                "// Line 385:                 (item for item in components if item[\"component_class_id\"] == id), None",
                "// vulnerable line: 386: )",
                "// Line 387: ",
                "// Line 388:             if location is None:",
                "// Line 389:                 raise HTTPException(status_code=404, detail=\"Component not found.\")",
                "// Line 390: ",
                "// Line 391:             component_instance = app.get_blocks().get_component(location[\"id\"])",
                "// Line 392: ",
                "// Line 393:             module_name = component_instance.__class__.__module__",
                "// Line 394:             module_path = sys.modules[module_name].__file__",
                "// Line 395: ",
                "// Line 396:             if module_path is None or component_instance is None:",
                "// Line 397:                 raise HTTPException(status_code=404, detail=\"Component not found.\")",
                "// Line 398: ",
                "// Line 399:             return FileResponse(",
                "// Line 400:                 safe_join(",
                "// Line 401:                     str(Path(module_path).parent),",
                "// Line 402:                     f\"{component_instance.__class__.TEMPLATE_DIR}/{type}/{file_name}\",",
                "// vulnerable line: 403: )",
                "// vulnerable line: 404: )",
                "// Line 405: ",
                "// Line 406:         @app.get(\"/assets/{path:path}\")",
                "// Line 407:         def build_resource(path: str):",
                "// Line 408:             build_file = safe_join(BUILD_PATH_LIB, path)",
                "// Line 409:             return FileResponse(build_file)",
                "// Line 410: ",
                "// Line 411:         @app.get(\"/favicon.ico\")",
                "// Line 412:         async def favicon():",
                "// Line 413:             blocks = app.get_blocks()",
                "// Line 414:             if blocks.favicon_path is None:",
                "// Line 423:             try:",
                "// Line 424:                 rp_req = app.build_proxy_request(url_path)",
                "// Line 425:             except PermissionError as err:",
                "// Line 426:                 raise HTTPException(status_code=400, detail=str(err)) from err",
                "// Line 427:             rp_resp = await client.send(rp_req, stream=True)",
                "// Line 428:             return StreamingResponse(",
                "// Line 429:                 rp_resp.aiter_raw(),",
                "// Line 430:                 status_code=rp_resp.status_code,",
                "// Line 431:                 headers=rp_resp.headers,  # type: ignore",
                "// Line 432:                 background=BackgroundTask(rp_resp.aclose),",
                "// vulnerable line: 433: )",
                "// Line 434: ",
                "// Line 435:         @app.head(\"/file={path_or_url:path}\", dependencies=[Depends(login_check)])",
                "// Line 436:         @app.get(\"/file={path_or_url:path}\", dependencies=[Depends(login_check)])",
                "// Line 437:         async def file(path_or_url: str, request: fastapi.Request):",
                "// Line 438:             blocks = app.get_blocks()",
                "// Line 439:             if client_utils.is_http_url_like(path_or_url):",
                "// Line 440:                 return RedirectResponse(",
                "// Line 441:                     url=path_or_url, status_code=status.HTTP_302_FOUND",
                "// vulnerable line: 442: )",
                "// Line 443:             abs_path = utils.abspath(path_or_url)",
                "// Line 444: ",
                "// Line 445:             in_blocklist = any(",
                "// Line 446:                 utils.is_in_or_equal(abs_path, blocked_path)",
                "// Line 447:                 for blocked_path in blocks.blocked_paths",
                "// vulnerable line: 448: )",
                "// Line 449:             is_dir = abs_path.is_dir()",
                "// Line 450: ",
                "// Line 451:             if in_blocklist or is_dir:",
                "// Line 452:                 raise HTTPException(403, f\"File not allowed: {path_or_url}.\")",
                "// Line 453: ",
                "// Line 454:             created_by_app = str(abs_path) in set().union(*blocks.temp_file_sets)",
                "// Line 455:             in_allowlist = any(",
                "// Line 456:                 utils.is_in_or_equal(abs_path, allowed_path)",
                "// Line 457:                 for allowed_path in blocks.allowed_paths",
                "// vulnerable line: 458: )",
                "// Line 459:             was_uploaded = utils.is_in_or_equal(abs_path, app.uploaded_file_dir)",
                "// Line 460:             is_cached_example = utils.is_in_or_equal(",
                "// Line 461:                 abs_path, utils.abspath(utils.get_cache_folder())",
                "// vulnerable line: 462: )",
                "// Line 463: ",
                "// Line 464:             if not (",
                "// Line 465:                 created_by_app or in_allowlist or was_uploaded or is_cached_example",
                "// Line 466:             ):",
                "// Line 467:                 raise HTTPException(403, f\"File not allowed: {path_or_url}.\")",
                "// Line 468: ",
                "// Line 469:             if not abs_path.exists():",
                "// Line 470:                 raise HTTPException(404, f\"File not found: {path_or_url}.\")",
                "// Line 471: ",
                "// Line 472:             range_val = request.headers.get(\"Range\", \"\").strip()",
                "// Line 474:                 range_val = range_val[6:]",
                "// Line 475:                 start, end = range_val.split(\"-\")",
                "// Line 476:                 if start.isnumeric() and end.isnumeric():",
                "// Line 477:                     start = int(start)",
                "// Line 478:                     end = int(end)",
                "// Line 479:                     response = ranged_response.RangedFileResponse(",
                "// Line 480:                         abs_path,",
                "// Line 481:                         ranged_response.OpenRange(start, end),",
                "// Line 482:                         dict(request.headers),",
                "// Line 483:                         stat_result=os.stat(abs_path),",
                "// vulnerable line: 484: )",
                "// Line 485:                     return response",
                "// Line 486: ",
                "// Line 487:             return FileResponse(abs_path, headers={\"Accept-Ranges\": \"bytes\"})",
                "// Line 488: ",
                "// Line 489:         @app.get(",
                "// Line 490:             \"/stream/{session_hash}/{run}/{component_id}\",",
                "// Line 491:             dependencies=[Depends(login_check)],",
                "// vulnerable line: 492: )",
                "// Line 493:         async def stream(",
                "// Line 494:             session_hash: str,",
                "// Line 495:             run: int,",
                "// Line 496:             component_id: int,",
                "// Line 497:             request: fastapi.Request,  # noqa: ARG001",
                "// Line 498:         ):",
                "// Line 499:             stream: list = (",
                "// Line 500:                 app.get_blocks()",
                "// Line 501:                 .pending_streams[session_hash]",
                "// Line 502:                 .get(run, {})",
                "// Line 503:                 .get(component_id, None)",
                "// vulnerable line: 504: )",
                "// Line 505:             if stream is None:",
                "// Line 506:                 raise HTTPException(404, \"Stream not found.\")",
                "// Line 507: ",
                "// Line 508:             def stream_wrapper():",
                "// Line 509:                 check_stream_rate = 0.01",
                "// Line 510:                 max_wait_time = 120  # maximum wait between yields - assume generator thread has crashed otherwise.",
                "// Line 511:                 wait_time = 0",
                "// Line 512:                 while True:",
                "// Line 513:                     if len(stream) == 0:",
                "// Line 514:                         if wait_time > max_wait_time:",
                "// Line 545:         @app.post(\"/api/{api_name}\", dependencies=[Depends(login_check)])",
                "// Line 546:         @app.post(\"/api/{api_name}/\", dependencies=[Depends(login_check)])",
                "// Line 547:         async def predict(",
                "// Line 548:             api_name: str,",
                "// Line 549:             body: PredictBody,",
                "// Line 550:             request: fastapi.Request,",
                "// Line 551:             username: str = Depends(get_current_user),",
                "// Line 552:         ):",
                "// Line 553:             fn_index_inferred = route_utils.infer_fn_index(",
                "// Line 554:                 app=app, api_name=api_name, body=body",
                "// vulnerable line: 555: )",
                "// Line 556: ",
                "// Line 557:             if not app.get_blocks().api_open and app.get_blocks().queue_enabled_for_fn(",
                "// Line 558:                 fn_index_inferred",
                "// Line 559:             ):",
                "// Line 560:                 raise HTTPException(",
                "// Line 561:                     detail=\"This API endpoint does not accept direct HTTP POST requests. Please join the queue to use this API.\",",
                "// Line 562:                     status_code=status.HTTP_404_NOT_FOUND,",
                "// vulnerable line: 563: )",
                "// Line 564: ",
                "// Line 565:             gr_request = route_utils.compile_gr_request(",
                "// Line 566:                 app,",
                "// Line 567:                 body,",
                "// Line 568:                 fn_index_inferred=fn_index_inferred,",
                "// Line 569:                 username=username,",
                "// Line 570:                 request=request,",
                "// vulnerable line: 571: )",
                "// Line 572: ",
                "// Line 573:             try:",
                "// Line 574:                 output = await route_utils.call_process_api(",
                "// Line 575:                     app=app,",
                "// Line 576:                     body=body,",
                "// Line 577:                     gr_request=gr_request,",
                "// Line 578:                     fn_index_inferred=fn_index_inferred,",
                "// vulnerable line: 579: )",
                "// Line 580:             except BaseException as error:",
                "// Line 581:                 show_error = app.get_blocks().show_error or isinstance(error, Error)",
                "// Line 582:                 traceback.print_exc()",
                "// Line 583:                 return JSONResponse(",
                "// Line 584:                     content={\"error\": str(error) if show_error else None},",
                "// Line 585:                     status_code=500,",
                "// vulnerable line: 586: )",
                "// Line 587:             return output",
                "// Line 588: ",
                "// Line 589:         @app.get(\"/queue/data\", dependencies=[Depends(login_check)])",
                "// Line 590:         async def queue_data(",
                "// Line 591:             request: fastapi.Request,",
                "// Line 592:             session_hash: str,",
                "// Line 593:         ):",
                "// Line 594:             blocks = app.get_blocks()",
                "// Line 595: ",
                "// Line 596:             async def sse_stream(request: fastapi.Request):",
                "// Line 601:                             await blocks._queue.clean_events(session_hash=session_hash)",
                "// Line 602:                             return",
                "// Line 603: ",
                "// Line 604:                         if (",
                "// Line 605:                             session_hash",
                "// Line 606:                             not in blocks._queue.pending_messages_per_session",
                "// Line 607:                         ):",
                "// Line 608:                             raise HTTPException(",
                "// Line 609:                                 status_code=status.HTTP_404_NOT_FOUND,",
                "// Line 610:                                 detail=\"Session not found.\",",
                "// vulnerable line: 611: )",
                "// Line 612: ",
                "// Line 613:                         heartbeat_rate = 15",
                "// Line 614:                         check_rate = 0.05",
                "// Line 615:                         message = None",
                "// Line 616:                         try:",
                "// Line 617:                             messages = blocks._queue.pending_messages_per_session[",
                "// Line 618:                                 session_hash",
                "// Line 619:                             ]",
                "// Line 620:                             message = messages.get_nowait()",
                "// Line 621:                         except EmptyQueue:",
                "// Line 644:                                 blocks._queue.pending_event_ids_session[",
                "// Line 645:                                     session_hash",
                "// Line 646:                                 ].remove(message[\"event_id\"])",
                "// Line 647:                                 if message[\"msg\"] == ServerMessage.server_stopped or (",
                "// Line 648:                                     message[\"msg\"] == ServerMessage.process_completed",
                "// Line 649:                                     and (",
                "// Line 650:                                         len(",
                "// Line 651:                                             blocks._queue.pending_event_ids_session[",
                "// Line 652:                                                 session_hash",
                "// Line 653:                                             ]",
                "// vulnerable line: 654: )",
                "// Line 655:                                         == 0",
                "// vulnerable line: 656: )",
                "// Line 657:                                 ):",
                "// Line 658:                                     return",
                "// Line 659:                 except BaseException as e:",
                "// Line 660:                     message = {",
                "// Line 661:                         \"msg\": \"unexpected_error\",",
                "// Line 662:                         \"success\": False,",
                "// Line 663:                         \"message\": str(e),",
                "// Line 664:                     }",
                "// Line 665:                     yield f\"data: {json.dumps(message)}",
                "// Line 666: ",
                "// Line 667: \"",
                "// Line 668:                     if isinstance(e, asyncio.CancelledError):",
                "// Line 669:                         del blocks._queue.pending_messages_per_session[session_hash]",
                "// Line 670:                         await blocks._queue.clean_events(session_hash=session_hash)",
                "// Line 671:                     raise e",
                "// Line 672: ",
                "// Line 673:             return StreamingResponse(",
                "// Line 674:                 sse_stream(request),",
                "// Line 675:                 media_type=\"text/event-stream\",",
                "// vulnerable line: 676: )",
                "// Line 677: ",
                "// Line 678:         @app.post(\"/queue/join\", dependencies=[Depends(login_check)])",
                "// Line 679:         async def queue_join(",
                "// Line 680:             body: PredictBody,",
                "// Line 681:             request: fastapi.Request,",
                "// Line 682:             username: str = Depends(get_current_user),",
                "// Line 683:         ):",
                "// Line 684:             blocks = app.get_blocks()",
                "// Line 685: ",
                "// Line 686:             if blocks._queue.server_app is None:",
                "// Line 687:                 blocks._queue.set_server_app(app)",
                "// Line 688: ",
                "// Line 689:             if blocks._queue.stopped:",
                "// Line 690:                 raise HTTPException(",
                "// Line 691:                     status_code=status.HTTP_503_SERVICE_UNAVAILABLE,",
                "// Line 692:                     detail=\"Queue is stopped.\",",
                "// vulnerable line: 693: )",
                "// Line 694: ",
                "// Line 695:             success, event_id = await blocks._queue.push(body, request, username)",
                "// Line 696:             if not success:",
                "// Line 697:                 status_code = (",
                "// Line 698:                     status.HTTP_503_SERVICE_UNAVAILABLE",
                "// Line 699:                     if \"Queue is full.\" in event_id",
                "// Line 700:                     else status.HTTP_400_BAD_REQUEST",
                "// vulnerable line: 701: )",
                "// Line 702:                 raise HTTPException(status_code=status_code, detail=event_id)",
                "// Line 703:             return {\"event_id\": event_id}",
                "// Line 704: ",
                "// Line 705:         @app.post(\"/component_server\", dependencies=[Depends(login_check)])",
                "// Line 706:         @app.post(\"/component_server/\", dependencies=[Depends(login_check)])",
                "// Line 707:         def component_server(body: ComponentServerBody):",
                "// Line 708:             state = app.state_holder[body.session_hash]",
                "// Line 709:             component_id = body.component_id",
                "// Line 710:             block: Block",
                "// Line 711:             if component_id in state:",
                "// Line 712:                 block = state[component_id]",
                "// Line 713:             else:",
                "// Line 714:                 block = app.get_blocks().blocks[component_id]",
                "// Line 715:             fn = getattr(block, body.fn_name, None)",
                "// Line 716:             if fn is None or not getattr(fn, \"_is_server_fn\", False):",
                "// Line 717:                 raise HTTPException(",
                "// Line 718:                     status_code=status.HTTP_404_NOT_FOUND,",
                "// Line 719:                     detail=\"Function not found.\",",
                "// vulnerable line: 720: )",
                "// Line 721:             return fn(body.data)",
                "// Line 722: ",
                "// Line 723:         @app.get(",
                "// Line 724:             \"/queue/status\",",
                "// Line 725:             dependencies=[Depends(login_check)],",
                "// Line 726:             response_model=Estimation,",
                "// vulnerable line: 727: )",
                "// Line 728:         async def get_queue_status():",
                "// Line 729:             return app.get_blocks()._queue.get_status()",
                "// Line 730: ",
                "// Line 731:         @app.get(\"/upload_progress\")",
                "// Line 732:         def get_upload_progress(upload_id: str, request: fastapi.Request):",
                "// Line 733:             async def sse_stream(request: fastapi.Request):",
                "// Line 734:                 last_heartbeat = time.perf_counter()",
                "// Line 735:                 is_done = False",
                "// Line 736:                 while True:",
                "// Line 737:                     if await request.is_disconnected():",
                "// Line 764:                         if time.perf_counter() - last_heartbeat > heartbeat_rate:",
                "// Line 765:                             message = {\"msg\": \"heartbeat\"}",
                "// Line 766:                             yield f\"data: {json.dumps(message)}",
                "// Line 767: ",
                "// Line 768: \"",
                "// Line 769:                             last_heartbeat = time.perf_counter()",
                "// Line 770: ",
                "// Line 771:             return StreamingResponse(",
                "// Line 772:                 sse_stream(request),",
                "// Line 773:                 media_type=\"text/event-stream\",",
                "// vulnerable line: 774: )",
                "// Line 775: ",
                "// Line 776:         @app.post(\"/upload\", dependencies=[Depends(login_check)])",
                "// Line 777:         async def upload_file(",
                "// Line 778:             request: fastapi.Request,",
                "// Line 779:             bg_tasks: BackgroundTasks,",
                "// Line 780:             upload_id: Optional[str] = None,",
                "// Line 781:         ):",
                "// Line 782:             content_type_header = request.headers.get(\"Content-Type\")",
                "// Line 783:             content_type: bytes",
                "// Line 784:             content_type, _ = parse_options_header(content_type_header)",
                "// Line 788:             try:",
                "// Line 789:                 if upload_id:",
                "// Line 790:                     file_upload_statuses.track(upload_id)",
                "// Line 791:                 multipart_parser = GradioMultiPartParser(",
                "// Line 792:                     request.headers,",
                "// Line 793:                     request.stream(),",
                "// Line 794:                     max_files=1000,",
                "// Line 795:                     max_fields=1000,",
                "// Line 796:                     upload_id=upload_id if upload_id else None,",
                "// Line 797:                     upload_progress=file_upload_statuses if upload_id else None,",
                "// vulnerable line: 798: )",
                "// Line 799:                 form = await multipart_parser.parse()",
                "// Line 800:             except MultiPartException as exc:",
                "// Line 801:                 raise HTTPException(status_code=400, detail=exc.message) from exc",
                "// Line 802: ",
                "// Line 803:             output_files = []",
                "// Line 804:             files_to_copy = []",
                "// Line 805:             locations: list[str] = []",
                "// Line 806:             for temp_file in form.getlist(\"files\"):",
                "// Line 807:                 assert isinstance(temp_file, GradioUploadFile)",
                "// Line 808:                 if temp_file.filename:",
                "// Line 821:                 # if that fails, we move in the background.",
                "// Line 822:                 try:",
                "// Line 823:                     os.rename(temp_file.file.name, dest)",
                "// Line 824:                 except OSError:",
                "// Line 825:                     files_to_copy.append(temp_file.file.name)",
                "// Line 826:                     locations.append(str(dest))",
                "// Line 827:                 output_files.append(dest)",
                "// Line 828:             if files_to_copy:",
                "// Line 829:                 bg_tasks.add_task(",
                "// Line 830:                     move_uploaded_files_to_cache, files_to_copy, locations",
                "// vulnerable line: 831: )",
                "// Line 832:             return output_files",
                "// Line 833: ",
                "// Line 834:         @app.on_event(\"startup\")",
                "// Line 835:         @app.get(\"/startup-events\")",
                "// Line 836:         async def startup_events():",
                "// Line 837:             if not app.startup_events_triggered:",
                "// Line 838:                 app.get_blocks().startup_events()",
                "// Line 839:                 app.startup_events_triggered = True",
                "// Line 840:                 return True",
                "// Line 841:             return False"
            ]
        },
        {
            "filename_of_changes": "strong-chefs-study.md",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "18",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "test_components.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "8",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "utils.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "7",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 889:     elif schema.get(\"anyOf\"):",
                "// Line 890:         return \"anyOf\"",
                "// Line 891:     elif schema.get(\"allOf\"):",
                "// Line 892:         return \"allOf\"",
                "// Line 893:     elif \"type\" not in schema:",
                "// Line 894:         return {}",
                "// Line 895:     else:",
                "// Line 896:         raise APIInfoParseError(f\"Cannot parse type for {schema}\")",
                "// Line 897: ",
                "// Line 898: ",
                "// vulnerable line: 899: FILE_DATA = \"Dict(path: str, url: str | None, size: int | None, orig_name: str | None, mime_type: str | None)\"",
                "// Line 900: ",
                "// Line 901: ",
                "// Line 902: def json_schema_to_python_type(schema: Any) -> str:",
                "// Line 903:     type_ = _json_schema_to_python_type(schema, schema.get(\"$defs\"))",
                "// Line 904:     return type_.replace(FILE_DATA, \"filepath\")",
                "// Line 905: ",
                "// Line 906: ",
                "// Line 907: def _json_schema_to_python_type(schema: Any, defs) -> str:",
                "// Line 908:     \"\"\"Convert the json schema into a python type hint\"\"\"",
                "// Line 909:     if schema == {}:"
            ]
        }
    ]
}