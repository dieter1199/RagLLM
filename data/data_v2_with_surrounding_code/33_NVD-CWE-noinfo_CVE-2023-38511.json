{
    "cve_id": "CVE-2023-38511",
    "cve_description": "iTop is an IT service management platform.  Dashboard editor : can load multiple files and URL, and full path disclosure on dashboard config file. This vulnerability is fixed in 3.0.4 and 3.1.1.\n",
    "cve_publish_date": "2024-04-15T17:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "NÂ°6581 - Security hardening",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "dashboard.class.inc.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 857:      * @throws \\CoreUnexpectedValue",
                "// Line 858:      * @throws \\MissingQueryArgument",
                "// Line 859:      * @throws \\MySQLException",
                "// Line 860:      * @throws \\MySQLHasGoneAwayException",
                "// Line 861:      * @throws \\Exception",
                "// Line 862:      */",
                "// Line 863:     public static function GetDashboard($sDashboardFile, $sDashBoardId)",
                "// Line 864:     {",
                "// Line 865:         $bCustomized = false;",
                "// Line 866: ",
                "// vulnerable line: 867: $sDashboardFileSanitized = utils::RealPath($sDashboardFile, APPROOT);",
                "// Line 868:         if (false === $sDashboardFileSanitized) {",
                "// Line 869:             throw new SecurityException('Invalid dashboard file !');",
                "// Line 870:         }",
                "// Line 871: ",
                "// Line 872:         if (!appUserPreferences::GetPref('display_original_dashboard_'.$sDashBoardId, false)) {",
                "// Line 873:             // Search for an eventual user defined dashboard",
                "// Line 874:             $oUDSearch = new DBObjectSearch('UserDashboard');",
                "// Line 875:             $oUDSearch->AddCondition('user_id', UserRights::GetUserId(), '=');",
                "// Line 876:             $oUDSearch->AddCondition('menu_code', $sDashBoardId, '=');",
                "// Line 877:             $oUDSet = new DBObjectSet($oUDSearch);",
                "// Line 911:      * @throws \\CoreUnexpectedValue",
                "// Line 912:      * @throws \\MissingQueryArgument",
                "// Line 913:      * @throws \\MySQLException",
                "// Line 914:      * @throws \\MySQLHasGoneAwayException",
                "// Line 915:      * @throws \\Exception",
                "// Line 916:      */",
                "// Line 917:     public static function GetDashboardToEdit($sDashboardFile, $sDashBoardId)",
                "// Line 918:     {",
                "// Line 919:         $bCustomized = false;",
                "// Line 920: ",
                "// vulnerable line: 921: $sDashboardFileSanitized = utils::RealPath($sDashboardFile, APPROOT);",
                "// Line 922:         if (false === $sDashboardFileSanitized) {",
                "// Line 923:             throw new SecurityException('Invalid dashboard file !');",
                "// Line 924:         }",
                "// Line 925: ",
                "// Line 926:         // Search for an eventual user defined dashboard",
                "// Line 927:         $oUDSearch = new DBObjectSearch('UserDashboard');",
                "// Line 928:         $oUDSearch->AddCondition('user_id', UserRights::GetUserId(), '=');",
                "// Line 929:         $oUDSearch->AddCondition('menu_code', $sDashBoardId, '=');",
                "// Line 930:         $oUDSet = new DBObjectSet($oUDSearch);",
                "// Line 931:         if ($oUDSet->Count() > 0) {",
                "// Line 1134:         } else {",
                "// Line 1135:             $oToolbar = $oDashboard->GetToolbar();",
                "// Line 1136:         }",
                "// Line 1137:         $oActionButton = ButtonUIBlockFactory::MakeIconAction('fas fa-ellipsis-v', Dict::S($sName), $sName, '', false, $sMenuTogglerId)",
                "// Line 1138:             ->AddCSSClass('ibo-top-bar--toolbar-dashboard-menu-toggler')",
                "// Line 1139:             ->AddCSSClass('ibo-action-button');",
                "// Line 1140: ",
                "// Line 1141:         $oToolbar->AddSubBlock($oActionButton);",
                "// Line 1142: ",
                "// Line 1143:         $aActions = array();",
                "// vulnerable line: 1144: $sFile = addslashes($this->sDefinitionFile);",
                "// Line 1145:         $sJSExtraParams = json_encode($aExtraParams);",
                "// Line 1146:         if ($this->HasCustomDashboard()) {",
                "// Line 1147:             $oEdit = new JSPopupMenuItem('UI:Dashboard:Edit', Dict::S('UI:Dashboard:EditCustom'), \"return EditDashboard('{$this->sId}', '$sFile', $sJSExtraParams)\");",
                "// Line 1148:             $aActions[$oEdit->GetUID()] = $oEdit->GetMenuItem();",
                "// Line 1149:             $oRevert = new JSPopupMenuItem('UI:Dashboard:RevertConfirm', Dict::S('UI:Dashboard:DeleteCustom'),",
                "// Line 1150:                 \"if (confirm('\".addslashes(Dict::S('UI:Dashboard:RevertConfirm')).\"')) return RevertDashboard('{$this->sId}', $sJSExtraParams); else return false\");",
                "// Line 1151:             $aActions[$oRevert->GetUID()] = $oRevert->GetMenuItem();",
                "// Line 1152:         } else {",
                "// Line 1153:             $oEdit = new JSPopupMenuItem('UI:Dashboard:Edit', Dict::S('UI:Dashboard:CreateCustom'), \"return EditDashboard('{$this->sId}', '$sFile', $sJSExtraParams)\");",
                "// Line 1154:             $aActions[$oEdit->GetUID()] = $oEdit->GetMenuItem();"
            ]
        }
    ]
}