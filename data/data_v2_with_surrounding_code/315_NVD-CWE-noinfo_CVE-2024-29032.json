{
    "cve_id": "CVE-2024-29032",
    "cve_description": "Qiskit IBM Runtime is an environment that streamlines quantum computations and provides optimal implementations of the Qiskit quantum computing SDK. Starting in version 0.1.0 and prior to version 0.21.2, deserializing json data using `qiskit_ibm_runtime.RuntimeDecoder` can lead to arbitrary code execution given a correctly formatted input string. Version 0.21.2 contains a fix for this issue.",
    "cve_publish_date": "2024-03-20T21:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Merge pull request from GHSA-x4x5-jv3x-9c7m\n\n* restrict import path\n\n* add test",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "json.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 366:                 return _decode_and_deserialize(obj_val, _read_parameter, False)",
                "// Line 367:             if obj_type == \"ParameterExpression\":",
                "// Line 368:                 return _decode_and_deserialize(",
                "// Line 369:                     obj_val, self.__read_parameter_expression, False  # type: ignore[arg-type]",
                "// Line 370:                 )",
                "// Line 371:             if obj_type == \"Instruction\":",
                "// Line 372:                 # Standalone instructions are encoded as the sole instruction in a QPY serialized circuit",
                "// Line 373:                 # to deserialize load qpy circuit and return first instruction object in that circuit.",
                "// Line 374:                 circuit = _decode_and_deserialize(obj_val, load)[0]",
                "// Line 375:                 return circuit.data[0][0]",
                "// vulnerable line: 376: if obj_type == \"settings\":",
                "// Line 377:                 return _deserialize_from_settings(",
                "// Line 378:                     mod_name=obj[\"__module__\"],",
                "// Line 379:                     class_name=obj[\"__class__\"],",
                "// Line 380:                     settings=_cast_strings_keys_to_int(obj_val),",
                "// Line 381:                 )",
                "// Line 382:             if obj_type == \"Result\":",
                "// Line 383:                 return Result.from_dict(obj_val)",
                "// Line 384:             if obj_type == \"spmatrix\":",
                "// Line 385:                 return _decode_and_deserialize(obj_val, scipy.sparse.load_npz, False)",
                "// Line 386:             if obj_type == \"ObservablesArray\":"
            ]
        },
        {
            "filename_of_changes": "test_data_serialization.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "22",
            "number_of_lines_deleted_vulnerable_to_cve": "6",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 20: from unittest import skip",
                "// Line 21: from datetime import datetime",
                "// Line 22: ",
                "// Line 23: import numpy as np",
                "// Line 24: from ddt import data, ddt",
                "// Line 25: ",
                "// Line 26: from qiskit.circuit import Parameter, ParameterVector, QuantumCircuit",
                "// Line 27: from qiskit.circuit.library import EfficientSU2, CXGate, PhaseGate, U2Gate",
                "// Line 28: ",
                "// Line 29: import qiskit.quantum_info as qi",
                "// vulnerable line: 30: from qiskit.quantum_info import SparsePauliOp, Pauli, Statevector",
                "// Line 31: from qiskit.result import Result, Counts",
                "// Line 32: from qiskit.primitives.containers.bindings_array import BindingsArray",
                "// Line 33: from qiskit.primitives.containers.observables_array import ObservablesArray",
                "// Line 34: from qiskit.primitives.containers.estimator_pub import EstimatorPub",
                "// Line 35: from qiskit.primitives.containers.sampler_pub import SamplerPub",
                "// Line 36: from qiskit.primitives.containers import (",
                "// Line 37:     BitArray,",
                "// Line 38:     DataBin,",
                "// Line 39:     make_data_bin,",
                "// Line 40:     PubResult,",
                "// Line 100:         subtests = (bell_circuit, unbound, [bell_circuit, unbound])",
                "// Line 101:         for circ in subtests:",
                "// Line 102:             with self.subTest(circ=circ):",
                "// Line 103:                 encoded = json.dumps(circ, cls=RuntimeEncoder)",
                "// Line 104:                 self.assertIsInstance(encoded, str)",
                "// Line 105:                 decoded = json.loads(encoded, cls=RuntimeDecoder)",
                "// Line 106:                 if not isinstance(circ, list):",
                "// Line 107:                     decoded = [decoded]",
                "// Line 108:                 self.assertTrue(all(isinstance(item, QuantumCircuit) for item in decoded))",
                "// Line 109: ",
                "// vulnerable line: 110: @skip(\"Skip until qiskit-ibm-provider/736 is merged\")",
                "// Line 111:     def test_coder_operators(self):",
                "// Line 112:         \"\"\"Test runtime encoder and decoder for operators.\"\"\"",
                "// Line 113: ",
                "// vulnerable line: 114: coeff_x = Parameter(\"x\")",
                "// vulnerable line: 115: coeff_y = coeff_x + 1",
                "// Line 116: ",
                "// Line 117:         subtests = (",
                "// Line 118:             SparsePauliOp(Pauli(\"XYZX\"), coeffs=[2]),",
                "// vulnerable line: 119: SparsePauliOp(Pauli(\"XYZX\"), coeffs=[coeff_y]),",
                "// Line 120:             SparsePauliOp(Pauli(\"XYZX\"), coeffs=[1 + 2j]),",
                "// Line 121:         )",
                "// Line 122: ",
                "// Line 123:         for operator in subtests:",
                "// Line 124:             with self.subTest(operator=operator):",
                "// Line 125:                 encoded = json.dumps(operator, cls=RuntimeEncoder)",
                "// Line 126:                 self.assertIsInstance(encoded, str)",
                "// Line 127: ",
                "// Line 128:                 with warnings.catch_warnings():",
                "// Line 129:                     # in L146 of utils/json.py",
                "// Line 170:             {\"ndarray\": np.array([[1, 2, 3], [{\"obj\": 123}, 5, 6]], dtype=object)},",
                "// Line 171:             {\"ndarray\": np.array([[1, 2, 3], [{\"obj\": 123}, 5, 6]])},",
                "// Line 172:             {\"ndarray\": np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=int)},",
                "// Line 173:         )",
                "// Line 174:         for obj in subtests:",
                "// Line 175:             encoded = json.dumps(obj, cls=RuntimeEncoder)",
                "// Line 176:             self.assertIsInstance(encoded, str)",
                "// Line 177:             decoded = json.loads(encoded, cls=RuntimeDecoder)",
                "// Line 178:             self.assertTrue(np.array_equal(decoded[\"ndarray\"], obj[\"ndarray\"]))",
                "// Line 179: ",
                "// vulnerable line: 180: @skip(\"Skip until qiskit-ibm-provider/736 is merged\")",
                "// Line 181:     def test_encoder_instruction(self):",
                "// Line 182:         \"\"\"Test encoding and decoding instructions\"\"\"",
                "// Line 183:         subtests = (",
                "// Line 184:             {\"instruction\": CXGate()},",
                "// Line 185:             {\"instruction\": PhaseGate(theta=1)},",
                "// Line 186:             {\"instruction\": U2Gate(phi=1, lam=1)},",
                "// Line 187:             {\"instruction\": U2Gate(phi=Parameter(\"phi\"), lam=Parameter(\"lambda\"))},",
                "// Line 188:         )",
                "// Line 189:         for obj in subtests:",
                "// Line 190:             encoded = json.dumps(obj, cls=RuntimeEncoder)",
                "// Line 217:     obj = json.loads(sys.argv[1], cls=RuntimeDecoder)",
                "// Line 218:     print(obj.__class__.__name__)",
                "// Line 219: \"\"\"",
                "// Line 220:         temp_fp = tempfile.NamedTemporaryFile(mode=\"w\", delete=False)",
                "// Line 221:         self.addCleanup(os.remove, temp_fp.name)",
                "// Line 222:         temp_fp.write(script)",
                "// Line 223:         temp_fp.close()",
                "// Line 224: ",
                "// Line 225:         subtests = (",
                "// Line 226:             SparsePauliOp(Pauli(\"XYZX\"), coeffs=[2]),",
                "// vulnerable line: 227: Statevector([1, 0]),",
                "// Line 228:         )",
                "// Line 229:         for operator in subtests:",
                "// Line 230:             with self.subTest(operator=operator):",
                "// Line 231:                 encoded = json.dumps(operator, cls=RuntimeEncoder)",
                "// Line 232:                 self.assertIsInstance(encoded, str)",
                "// Line 233:                 cmd = [\"python\", temp_fp.name, encoded]",
                "// Line 234:                 proc = subprocess.run(",
                "// Line 235:                     cmd,",
                "// Line 236:                     stdout=subprocess.PIPE,",
                "// Line 237:                     stderr=subprocess.PIPE,"
            ]
        }
    ]
}