{
    "cve_id": "CVE-2024-28231",
    "cve_description": "eprosima Fast DDS is a C++ implementation of the Data Distribution Service standard of the Object Management Group. Prior to versions 2.14.0, 2.13.4, 2.12.3, 2.10.4, and 2.6.8, manipulated DATA Submessage can cause a heap overflow error in the Fast-DDS process, causing the process to be terminated remotely. Additionally, the payload_size in the DATA Submessage packet is declared as uint32_t. When a negative number, such as -1, is input into this variable, it results in an Integer Overflow (for example, -1 gets converted to 0xFFFFFFFF). This eventually leads to a heap-buffer-overflow, causing the program to terminate. Versions 2.14.0, 2.13.4, 2.12.3, 2.10.4, and 2.6.8 contain a fix for this issue.",
    "cve_publish_date": "2024-03-20T20:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Merge pull request from GHSA-9m2j-qw67-ph4w\n\n* Refs #20549: Add BB test\n\nSigned-off-by: Mario Dominguez <mariodominguez@eprosima.com>\n\n* Fix:Fixed integer overflow causing heap overflow\n\nWhen a sub node receives a manipulated DATA sub-message, an Integer Overflow occurs in uint32_t payload_size. This causes a heap buffer overflow error. A comparison statement was inserted before the line that calculates the variable, which fixes the error.\n\nSigned-off-by: Desglaneurs <cveissacgleaning@gmail.com>\n\n* Refs #20549: Fix review\n\nSigned-off-by: Mario Dominguez <mariodominguez@eprosima.com>\n\n* Refs #201549: Reset the change data fields before exiting\n\nSigned-off-by: Mario Dominguez <mariodominguez@eprosima.com>\n\n---------\n\nSigned-off-by: Mario Dominguez <mariodominguez@eprosima.com>\nSigned-off-by: Desglaneurs <cveissacgleaning@gmail.com>\nCo-authored-by: Mario Dominguez <mariodominguez@eprosima.com>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "BlackboxTests.hpp",
            "code_language": "C++",
            "number_of_lines_added_for_mitigation": "8",
            "number_of_lines_deleted_vulnerable_to_cve": "4",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 22: #include <process.h>",
                "// Line 23: #elif defined(_WIN32)",
                "// Line 24: #define GET_PID _getpid",
                "// Line 25: #include <process.h>",
                "// Line 26: #else",
                "// Line 27: #define GET_PID getpid",
                "// Line 28: #include <sys/types.h>",
                "// Line 29: #include <unistd.h>",
                "// Line 30: #endif // if defined(_WIN32)",
                "// Line 31: ",
                "// vulnerable line: 32: #include \"../types/HelloWorldPubSubTypes.h\"",
                "// Line 33: #include \"../types/FixedSizedPubSubTypes.h\"",
                "// Line 34: #include \"../types/KeyedHelloWorldPubSubTypes.h\"",
                "// Line 35: #include \"../types/StringTestPubSubTypes.h\"",
                "// vulnerable line: 36: #include \"../types/Data64kbPubSubTypes.h\"",
                "// vulnerable line: 37: #include \"../types/Data1mbPubSubTypes.h\"",
                "// vulnerable line: 38: #include \"../types/KeyedData1mbPubSubTypes.h\"",
                "// Line 39: ",
                "// Line 40: #include <algorithm>",
                "// Line 41: #include <cstddef>",
                "// Line 42: #include <iostream>",
                "// Line 43: #include <list>",
                "// Line 44: #include <functional>",
                "// Line 45: ",
                "// Line 46: #if HAVE_SECURITY",
                "// Line 47: extern void blackbox_security_init();",
                "// Line 48: #endif // if HAVE_SECURITY"
            ]
        },
        {
            "filename_of_changes": "BlackboxTestsSecurity.cpp",
            "code_language": "C++",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "26",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 34: #include <fastrtps/xmlparser/XMLProfileManager.h>",
                "// Line 35: ",
                "// Line 36: #include <rtps/transport/test_UDPv4Transport.h>",
                "// Line 37: ",
                "// Line 38: using namespace eprosima::fastrtps;",
                "// Line 39: using namespace eprosima::fastrtps::rtps;",
                "// Line 40: using test_UDPv4Transport = eprosima::fastdds::rtps::test_UDPv4Transport;",
                "// Line 41: using test_UDPv4TransportDescriptor = eprosima::fastdds::rtps::test_UDPv4TransportDescriptor;",
                "// Line 42: ",
                "// Line 43: enum communication_type",
                "// vulnerable line: 44: {",
                "// Line 45:     TRANSPORT,",
                "// Line 46:     INTRAPROCESS,",
                "// Line 47:     DATASHARING",
                "// vulnerable line: 48: };",
                "// Line 49: ",
                "// Line 50: class Security : public testing::TestWithParam<communication_type>",
                "// vulnerable line: 51: {",
                "// Line 52: public:",
                "// Line 53: ",
                "// Line 54:     void SetUp() override",
                "// vulnerable line: 55: {",
                "// Line 56:         LibrarySettingsAttributes library_settings;",
                "// Line 57:         switch (GetParam())",
                "// vulnerable line: 58: {",
                "// Line 59:             case INTRAPROCESS:",
                "// Line 60:                 library_settings.intraprocess_delivery = IntraprocessDeliveryType::INTRAPROCESS_FULL;",
                "// Line 61:                 xmlparser::XMLProfileManager::library_settings(library_settings);",
                "// Line 62:                 break;",
                "// Line 63:             case DATASHARING:",
                "// Line 64:                 enable_datasharing = true;",
                "// Line 65:                 break;",
                "// Line 66:             case TRANSPORT:",
                "// Line 67:             default:",
                "// Line 68:                 break;",
                "// vulnerable line: 69: }",
                "// vulnerable line: 70: }",
                "// Line 71: ",
                "// Line 72:     void TearDown() override",
                "// vulnerable line: 73: {",
                "// Line 74:         LibrarySettingsAttributes library_settings;",
                "// Line 75:         switch (GetParam())",
                "// vulnerable line: 76: {",
                "// Line 77:             case INTRAPROCESS:",
                "// Line 78:                 library_settings.intraprocess_delivery = IntraprocessDeliveryType::INTRAPROCESS_OFF;",
                "// Line 79:                 xmlparser::XMLProfileManager::library_settings(library_settings);",
                "// Line 80:                 break;",
                "// Line 81:             case DATASHARING:",
                "// Line 82:                 enable_datasharing = false;",
                "// Line 83:                 break;",
                "// Line 84:             case TRANSPORT:",
                "// Line 85:             default:",
                "// Line 86:                 break;",
                "// vulnerable line: 87: }",
                "// vulnerable line: 88: }",
                "// Line 89: ",
                "// vulnerable line: 90: };",
                "// Line 91: ",
                "// vulnerable line: 92: struct UDPMessageSender",
                "// vulnerable line: 93: {",
                "// vulnerable line: 94: asio::io_service service;",
                "// vulnerable line: 95: asio::ip::udp::socket socket;",
                "// Line 96: ",
                "// vulnerable line: 97: UDPMessageSender()",
                "// vulnerable line: 98: : service()",
                "// vulnerable line: 99: , socket(service)",
                "// vulnerable line: 100: {",
                "// vulnerable line: 101: socket.open(asio::ip::udp::v4());",
                "// vulnerable line: 102: }",
                "// Line 103: ",
                "// vulnerable line: 104: void send(",
                "// vulnerable line: 105: const CDRMessage_t& msg,",
                "// vulnerable line: 106: const Locator_t& destination)",
                "// vulnerable line: 107: {",
                "// vulnerable line: 108: std::string addr = IPLocator::toIPv4string(destination);",
                "// vulnerable line: 109: unsigned short port = static_cast<unsigned short>(destination.port);",
                "// vulnerable line: 110: auto remote = asio::ip::udp::endpoint(asio::ip::address::from_string(addr), port);",
                "// vulnerable line: 111: asio::error_code ec;",
                "// Line 112: ",
                "// vulnerable line: 113: socket.send_to(asio::buffer(msg.buffer, msg.length), remote, 0, ec);",
                "// vulnerable line: 114: }",
                "// Line 115: ",
                "// vulnerable line: 116: };",
                "// Line 117: ",
                "// Line 118: class SecurityPkcs : public ::testing::Test",
                "// vulnerable line: 119: {",
                "// Line 120: public:",
                "// Line 121: ",
                "// Line 122:     struct HsmToken",
                "// vulnerable line: 123: {",
                "// Line 124:         std::string pin;",
                "// Line 125:         std::string id;",
                "// Line 126:         std::string serial;",
                "// Line 127:         std::map<std::string, std::string> urls;",
                "// vulnerable line: 128: };",
                "// Line 129: ",
                "// Line 130:     static void create_hsm_token(",
                "// Line 131:             const char* token_id)",
                "// vulnerable line: 132: {",
                "// Line 133:         // Init the token",
                "// Line 134:         std::stringstream cmd;",
                "// Line 135:         cmd << \"softhsm2-util --init-token --free --label \" << token_id << \" --pin \" << hsm_token_pin",
                "// Line 136:             << \" --so-pin \" << hsm_token_pin << \"\";",
                "// Line 137:         ASSERT_EQ(0, std::system (cmd.str().c_str()));",
                "// Line 138:         tokens[token_id] = HsmToken();",
                "// Line 139:         tokens[token_id].pin = hsm_token_pin;",
                "// Line 140:         tokens[token_id].id = token_id;",
                "// Line 141: ",
                "// Line 142:         // Get the serial number of the HSM slot",
                "// Line 146:                 std::system (\"powershell -C \"softhsm2-util --show-slots | sls 'Serial number:\\s*([\\d\\w]+)' | \"                 \"% { $_.Matches.Groups[1].Value } | Out-File -FilePath softhsm_serial -Encoding ASCII\"\"));",
                "// Line 147: #else // We are running something with sh",
                "// Line 148:         ASSERT_EQ(0,",
                "// Line 149:                 std::system (\"softhsm2-util --show-slots | grep -oP 'Serial number:\\s*\\K(\\d|\\w)+' > softhsm_serial\"));",
                "// Line 150: #endif // _WIN32",
                "// Line 151:         serial_stream << std::ifstream(\"softhsm_serial\").rdbuf();",
                "// Line 152:         std::remove (\"softhsm_serial\");",
                "// Line 153: ",
                "// Line 154:         // Read each serial number one by one",
                "// Line 155:         while (!serial_stream.eof())",
                "// vulnerable line: 156: {",
                "// Line 157:             std::string serial;",
                "// Line 158:             serial_stream >> serial;",
                "// Line 159:             if (!serial.empty())",
                "// vulnerable line: 160: {",
                "// Line 161:                 if (tokens.end() == std::find_if(tokens.begin(), tokens.end(), [&serial](std::pair<const char* const,",
                "// Line 162:                         const HsmToken> t)",
                "// vulnerable line: 163: {",
                "// Line 164:                             return t.second.serial == serial;",
                "// Line 165:                         }))",
                "// vulnerable line: 166: {",
                "// Line 167:                     tokens[token_id].serial = serial;",
                "// Line 168:                     break;",
                "// vulnerable line: 169: }",
                "// vulnerable line: 170: }",
                "// vulnerable line: 171: }",
                "// vulnerable line: 172: }",
                "// Line 173: ",
                "// Line 174:     static void delete_hsm_token(",
                "// Line 175:             const char* token_id)",
                "// vulnerable line: 176: {",
                "// Line 177:         auto it = tokens.find(token_id);",
                "// Line 178:         if (it != tokens.end())",
                "// vulnerable line: 179: {",
                "// Line 180:             // Delete the token",
                "// Line 181:             std::stringstream cmd;",
                "// Line 182:             cmd << \"softhsm2-util --delete-token --token \" << token_id << \" --pin \" << hsm_token_pin",
                "// Line 183:                 << \" --so-pin \" << hsm_token_pin << \"\";",
                "// Line 184:             ASSERT_EQ(0, std::system (cmd.str().c_str()));",
                "// Line 185:             tokens.erase(it);",
                "// vulnerable line: 186: }",
                "// vulnerable line: 187: }",
                "// Line 188: ",
                "// Line 189:     static void SetUpTestCase()",
                "// vulnerable line: 190: {",
                "// Line 191:         // Init the tokens",
                "// Line 192:         create_hsm_token(hsm_token_id_no_pin);",
                "// Line 193:         create_hsm_token(hsm_token_id_url_pin);",
                "// Line 194:         create_hsm_token(hsm_token_id_env_pin);",
                "// Line 195: ",
                "// Line 196:         // Add the keys to the tokens",
                "// Line 197:         import_private_key(std::string(certs_path) + \"/mainsubkey.pem\", hsm_mainsubkey_label,",
                "// Line 198:                 \"1A2B3C\", hsm_token_id_no_pin);",
                "// Line 199:         import_private_key(std::string(certs_path) + \"/mainpubkey.pem\", hsm_mainpubkey_label,",
                "// Line 200:                 \"ABCDEF\", hsm_token_id_no_pin);",
                "// Line 201:         import_private_key(std::string(certs_path) + \"/mainsubkey.pem\", hsm_mainsubkey_label,",
                "// Line 202:                 \"123456\", hsm_token_id_url_pin);",
                "// Line 203:         import_private_key(std::string(certs_path) + \"/mainpubkey.pem\", hsm_mainpubkey_label,",
                "// Line 204:                 \"789ABC\", hsm_token_id_url_pin);",
                "// Line 205:         import_private_key(std::string(certs_path) + \"/mainsubkey.pem\", hsm_mainsubkey_label,",
                "// Line 206:                 \"2468AC\", hsm_token_id_env_pin);",
                "// Line 207:         import_private_key(std::string(certs_path) + \"/mainpubkey.pem\", hsm_mainpubkey_label,",
                "// Line 208:                 \"13579B\", hsm_token_id_env_pin);",
                "// vulnerable line: 209: }",
                "// Line 210: ",
                "// Line 211:     static void TearDownTestCase()",
                "// vulnerable line: 212: {",
                "// Line 213:         // delete the tokens",
                "// Line 214:         delete_hsm_token(hsm_token_id_no_pin);",
                "// Line 215:         delete_hsm_token(hsm_token_id_url_pin);",
                "// Line 216:         delete_hsm_token(hsm_token_id_env_pin);",
                "// vulnerable line: 217: }",
                "// Line 218: ",
                "// Line 219:     static void import_private_key(",
                "// Line 220:             const std::string& key_file,",
                "// Line 221:             const char* key_label,",
                "// Line 222:             const char* key_id,",
                "// Line 223:             const char* token_id)",
                "// vulnerable line: 224: {",
                "// Line 225:         ASSERT_NE(tokens.end(), tokens.find(token_id));",
                "// Line 226: ",
                "// Line 227:         std::stringstream cmd;",
                "// Line 228:         cmd << \"softhsm2-util --import \" << key_file << \" --token \" << token_id << \" --label \" << key_label",
                "// Line 229:             << \" --pin \" << hsm_token_pin << \" --id \" << key_id << \"\";",
                "// Line 230:         // Import the key",
                "// Line 231:         ASSERT_EQ(0,",
                "// Line 232:                 std::system(cmd.str().c_str()));",
                "// Line 233:         // Construct the key URL",
                "// Line 234:         std::stringstream id_url;",
                "// Line 235:         for (unsigned int i = 0; i < strlen(key_id); i += 2)",
                "// vulnerable line: 236: {",
                "// Line 237:             id_url << \"%\" << key_id[i] << key_id[i + 1];",
                "// vulnerable line: 238: }",
                "// Line 239: ",
                "// Line 240:         tokens[token_id].urls[key_label] = \"pkcs11:model=SoftHSM%20v2;manufacturer=SoftHSM%20project;serial=\" +",
                "// Line 241:                 tokens[token_id].serial + \";token=\" + token_id + \";id=\" + id_url.str() + \";object=\" + key_label +",
                "// Line 242:                 \";type=private\";",
                "// vulnerable line: 243: }",
                "// Line 244: ",
                "// Line 245:     static const char* const hsm_token_id_no_pin;",
                "// Line 246:     static const char* const hsm_token_id_url_pin;",
                "// Line 247:     static const char* const hsm_token_id_env_pin;",
                "// Line 248: ",
                "// Line 249:     static constexpr const char* hsm_token_pin = \"1234\";",
                "// Line 250:     static constexpr const char* hsm_mainsubkey_label = \"mainsubkey\";",
                "// Line 251:     static constexpr const char* hsm_mainpubkey_label = \"mainpubkey\";",
                "// Line 252: ",
                "// Line 253:     static std::map<const char*, HsmToken> tokens;",
                "// vulnerable line: 254: };",
                "// Line 255: ",
                "// Line 256: std::map<const char*, SecurityPkcs::HsmToken> SecurityPkcs::tokens;",
                "// Line 257: const char* const SecurityPkcs::hsm_token_id_no_pin = \"testing_token_no_pin\";",
                "// Line 258: const char* const SecurityPkcs::hsm_token_id_url_pin = \"testing_token_url_pin\";",
                "// Line 259: const char* const SecurityPkcs::hsm_token_id_env_pin = \"testing_token_env_pin\";",
                "// Line 260: ",
                "// Line 261: TEST_P(Security, BuiltinAuthenticationPlugin_PKIDH_validation_ok)",
                "// vulnerable line: 262: {",
                "// Line 263:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 264:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 265: ",
                "// Line 266:     PropertyPolicy pub_property_policy, sub_property_policy;",
                "// Line 267: ",
                "// Line 268:     sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 269:             \"builtin.PKI-DH\"));",
                "// Line 270:     sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 271:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 272:     sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_certificate\",",
                "// Line 305:     auto data = default_helloworld_data_generator();",
                "// Line 306: ",
                "// Line 307:     reader.startReception(data);",
                "// Line 308: ",
                "// Line 309:     // Send data",
                "// Line 310:     writer.send(data);",
                "// Line 311:     // In this test all data should be sent.",
                "// Line 312:     ASSERT_TRUE(data.empty());",
                "// Line 313:     // Block reader until reception finished or timeout.",
                "// Line 314:     reader.block_for_all();",
                "// vulnerable line: 315: }",
                "// Line 316: ",
                "// Line 317: // Used to detect Github issue #106",
                "// Line 318: TEST_P(Security, BuiltinAuthenticationPlugin_PKIDH_validation_ok_same_participant)",
                "// vulnerable line: 319: {",
                "// Line 320:     PubSubWriterReader<HelloWorldPubSubType> wreader(TEST_TOPIC_NAME);",
                "// Line 321: ",
                "// Line 322:     PropertyPolicy property_policy;",
                "// Line 323: ",
                "// Line 324:     property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 325:             \"builtin.PKI-DH\"));",
                "// Line 326:     property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 327:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 328:     property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_certificate\",",
                "// Line 329:             \"file://\" + std::string(certs_path) + \"/mainpubcert.pem\"));",
                "// Line 342:     auto data = default_helloworld_data_generator();",
                "// Line 343: ",
                "// Line 344:     wreader.startReception(data);",
                "// Line 345: ",
                "// Line 346:     // Send data",
                "// Line 347:     wreader.send(data);",
                "// Line 348:     // In this test all data should be sent.",
                "// Line 349:     ASSERT_TRUE(data.empty());",
                "// Line 350:     // Block reader until reception finished or timeout.",
                "// Line 351:     wreader.block_for_all();",
                "// vulnerable line: 352: }",
                "// Line 353: ",
                "// Line 354: TEST_P(Security, BuiltinAuthenticationPlugin_PKIDH_validation_fail)",
                "// vulnerable line: 355: {",
                "// vulnerable line: 356: {",
                "// Line 357:         PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 358:         PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 359: ",
                "// Line 360:         PropertyPolicy pub_property_policy;",
                "// Line 361: ",
                "// Line 362:         reader.history_depth(10).",
                "// Line 363:                 reliability(eprosima::fastrtps::RELIABLE_RELIABILITY_QOS).init();",
                "// Line 364: ",
                "// Line 365:         ASSERT_TRUE(reader.isInitialized());",
                "// Line 366: ",
                "// Line 373:         pub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.private_key\",",
                "// Line 374:                 \"file://\" + std::string(certs_path) + \"/mainpubkey.pem\"));",
                "// Line 375: ",
                "// Line 376:         writer.history_depth(10).",
                "// Line 377:                 property_policy(pub_property_policy).init();",
                "// Line 378: ",
                "// Line 379:         ASSERT_TRUE(writer.isInitialized());",
                "// Line 380: ",
                "// Line 381:         // Wait for authorization",
                "// Line 382:         writer.waitUnauthorized();",
                "// vulnerable line: 383: }",
                "// vulnerable line: 384: {",
                "// Line 385:         PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 386:         PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 387: ",
                "// Line 388:         PropertyPolicy sub_property_policy;",
                "// Line 389: ",
                "// Line 390:         sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 391:                 \"builtin.PKI-DH\"));",
                "// Line 392:         sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 393:                 \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 394:         sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_certificate\",",
                "// Line 401:                 property_policy(sub_property_policy).init();",
                "// Line 402: ",
                "// Line 403:         ASSERT_TRUE(reader.isInitialized());",
                "// Line 404: ",
                "// Line 405:         writer.history_depth(10).init();",
                "// Line 406: ",
                "// Line 407:         ASSERT_TRUE(writer.isInitialized());",
                "// Line 408: ",
                "// Line 409:         // Wait for authorization",
                "// Line 410:         reader.waitUnauthorized();",
                "// vulnerable line: 411: }",
                "// vulnerable line: 412: }",
                "// Line 413: ",
                "// Line 414: TEST_P(Security, BuiltinAuthenticationPlugin_PKIDH_lossy_conditions)",
                "// vulnerable line: 415: {",
                "// Line 416:     PubSubReader<Data1mbPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 417:     PubSubWriter<Data1mbPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 418: ",
                "// Line 419:     PropertyPolicy pub_property_policy, sub_property_policy;",
                "// Line 420: ",
                "// Line 421:     sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 422:             \"builtin.PKI-DH\"));",
                "// Line 423:     sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 424:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 425:     sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_certificate\",",
                "// Line 456: ",
                "// Line 457:     ASSERT_TRUE(writer.isInitialized());",
                "// Line 458: ",
                "// Line 459:     // Wait for authorization",
                "// Line 460:     reader.waitAuthorized();",
                "// Line 461:     writer.waitAuthorized();",
                "// Line 462: ",
                "// Line 463:     // Wait for discovery.",
                "// Line 464:     writer.wait_discovery();",
                "// Line 465:     reader.wait_discovery();",
                "// vulnerable line: 466: }",
                "// Line 467: ",
                "// Line 468: // Regresion test for Refs #13295, github #2362",
                "// Line 469: TEST(Security, BuiltinAuthenticationPlugin_second_participant_creation_loop)",
                "// vulnerable line: 470: {",
                "// Line 471:     constexpr size_t n_loops = 101;",
                "// Line 472: ",
                "// Line 473:     using Log = eprosima::fastdds::dds::Log;",
                "// Line 474:     using LogConsumer = eprosima::fastdds::dds::LogConsumer;",
                "// Line 475: ",
                "// Line 476:     // A LogConsumer that just counts the number of entries consumed",
                "// Line 477:     struct TestConsumer : public LogConsumer",
                "// vulnerable line: 478: {",
                "// Line 479:         TestConsumer(",
                "// Line 480:                 std::atomic_size_t& n_logs_ref)",
                "// Line 481:             : n_logs_(n_logs_ref)",
                "// vulnerable line: 482: {",
                "// vulnerable line: 483: }",
                "// Line 484: ",
                "// Line 485:         void Consume(",
                "// Line 486:                 const Log::Entry&) override",
                "// vulnerable line: 487: {",
                "// Line 488:             ++n_logs_;",
                "// vulnerable line: 489: }",
                "// Line 490: ",
                "// Line 491:     private:",
                "// Line 492: ",
                "// Line 493:         std::atomic_size_t& n_logs_;",
                "// vulnerable line: 494: };",
                "// Line 495: ",
                "// Line 496:     // Counter for log entries",
                "// Line 497:     std::atomic<size_t>n_logs{};",
                "// Line 498: ",
                "// Line 499:     // Prepare Log module to check that no SECURITY errors are produced",
                "// Line 500:     Log::SetCategoryFilter(std::regex(\"SECURITY\"));",
                "// Line 501:     Log::SetVerbosity(Log::Kind::Error);",
                "// Line 502:     Log::ClearConsumers();",
                "// Line 503:     Log::RegisterConsumer(std::unique_ptr<LogConsumer>(new TestConsumer(n_logs)));",
                "// Line 504: ",
                "// Line 505:     // Class to allow waiting for the authentication message to be sent",
                "// Line 506:     class AuthMessageSendStatus",
                "// vulnerable line: 507: {",
                "// Line 508:         bool message_sent_ = false;",
                "// Line 509:         std::mutex mutex_;",
                "// Line 510:         std::condition_variable cv_;",
                "// Line 511: ",
                "// Line 512:     public:",
                "// Line 513: ",
                "// Line 514:         void reset()",
                "// vulnerable line: 515: {",
                "// Line 516:             std::lock_guard < std::mutex> guard(mutex_);",
                "// Line 517:             message_sent_ = false;",
                "// vulnerable line: 518: }",
                "// Line 519: ",
                "// Line 520:         void notify()",
                "// vulnerable line: 521: {",
                "// Line 522:             std::lock_guard<std::mutex> guard(mutex_);",
                "// Line 523:             message_sent_ = true;",
                "// Line 524:             cv_.notify_one();",
                "// vulnerable line: 525: }",
                "// Line 526: ",
                "// Line 527:         void wait()",
                "// vulnerable line: 528: {",
                "// Line 529:             std::unique_lock<std::mutex> lock(mutex_);",
                "// Line 530:             cv_.wait(lock, [this]() -> bool",
                "// vulnerable line: 531: {",
                "// Line 532:                         return message_sent_;",
                "// Line 533:                     });",
                "// vulnerable line: 534: }",
                "// Line 535: ",
                "// vulnerable line: 536: };",
                "// Line 537: ",
                "// Line 538:     // Prepare transport to check that the authentication message is sent",
                "// Line 539:     auto transport = std::make_shared<test_UDPv4TransportDescriptor>();",
                "// Line 540:     AuthMessageSendStatus auth_message_send_status;",
                "// Line 541:     transport->drop_data_messages_filter_ = [&auth_message_send_status](eprosima::fastrtps::rtps::CDRMessage_t& msg)",
                "// Line 542:             -> bool",
                "// vulnerable line: 543: {",
                "// Line 544:                 auto old_pos = msg.pos;",
                "// Line 545: ",
                "// Line 546:                 // Jump to writer entity id",
                "// Line 547:                 msg.pos += 2 + 2 + 4;",
                "// Line 548: ",
                "// Line 549:                 // Read writer entity id",
                "// Line 550:                 eprosima::fastrtps::rtps::GUID_t writer_guid;",
                "// Line 551:                 eprosima::fastrtps::rtps::CDRMessage::readEntityId(&msg, &writer_guid.entityId);",
                "// Line 552:                 msg.pos = old_pos;",
                "// Line 553: ",
                "// Line 554:                 if (writer_guid.entityId == eprosima::fastrtps::rtps::participant_stateless_message_writer_entity_id)",
                "// vulnerable line: 555: {",
                "// Line 556:                     auth_message_send_status.notify();",
                "// vulnerable line: 557: }",
                "// Line 558: ",
                "// Line 559:                 return false;",
                "// vulnerable line: 560: };",
                "// Line 561: ",
                "// Line 562:     // Prepare participant properties",
                "// Line 563:     PropertyPolicy property_policy;",
                "// Line 564:     property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\", \"builtin.PKI-DH\"));",
                "// Line 565:     property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 566:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 567:     property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_certificate\",",
                "// Line 568:             \"file://\" + std::string(certs_path) + \"/mainpubcert.pem\"));",
                "// Line 569:     property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.private_key\",",
                "// Line 570:             \"file://\" + std::string(certs_path) + \"/mainpubkey.pem\"));",
                "// Line 572:     // Create the participant being checked",
                "// Line 573:     PubSubReader<HelloWorldPubSubType> main_participant(\"HelloWorldTopic\");",
                "// Line 574:     main_participant.disable_builtin_transport().add_user_transport_to_pparams(transport);",
                "// Line 575:     main_participant.property_policy(property_policy).init();",
                "// Line 576:     EXPECT_TRUE(main_participant.isInitialized());",
                "// Line 577: ",
                "// Line 578:     // Perform a loop in which we create another participant, and destroy it just after it has been discovered.",
                "// Line 579:     // This is the best reproducer of the issue, as authentication messages should be sent when a remote participant",
                "// Line 580:     // is discovered.",
                "// Line 581:     for (size_t n = 1; n <= n_loops; ++n)",
                "// vulnerable line: 582: {",
                "// Line 583:         std::cout << \"Iteration \" << n << std::endl;",
                "// Line 584: ",
                "// Line 585:         // Wait for undiscovery so we can wait for discovery below",
                "// Line 586:         EXPECT_TRUE(main_participant.wait_participant_undiscovery());",
                "// Line 587:         auth_message_send_status.reset();",
                "// Line 588: ",
                "// Line 589:         // Create another participant with authentication enabled",
                "// Line 590:         PubSubParticipant<HelloWorldPubSubType> other_participant(0, 0, 0, 0);",
                "// Line 591:         EXPECT_TRUE(other_participant.property_policy(property_policy).init_participant());",
                "// Line 592: ",
                "// Line 593:         // Wait for the main participant to send an authentication message to the other participant",
                "// Line 594:         auth_message_send_status.wait();",
                "// Line 595: ",
                "// Line 596:         // The created participant gets out of scope here, and is destroyed",
                "// vulnerable line: 597: }",
                "// Line 598: ",
                "// Line 599:     // No SECURITY error logs should have been produced",
                "// Line 600:     Log::Flush();",
                "// Line 601:     EXPECT_EQ(0u, n_logs);",
                "// vulnerable line: 602: }",
                "// Line 603: ",
                "// Line 604: TEST_P(Security, BuiltinAuthenticationPlugin_ensure_same_guid_reconnection)",
                "// vulnerable line: 605: {",
                "// Line 606:     constexpr size_t n_loops = 10;",
                "// Line 607: ",
                "// Line 608:     using Log = eprosima::fastdds::dds::Log;",
                "// Line 609:     using LogConsumer = eprosima::fastdds::dds::LogConsumer;",
                "// Line 610: ",
                "// Line 611:     // A LogConsumer that just counts the number of entries consumed",
                "// Line 612:     struct TestConsumer : public LogConsumer",
                "// vulnerable line: 613: {",
                "// Line 614:         TestConsumer(",
                "// Line 615:                 std::atomic_size_t& n_logs_ref)",
                "// Line 616:             : n_logs_(n_logs_ref)",
                "// vulnerable line: 617: {",
                "// vulnerable line: 618: }",
                "// Line 619: ",
                "// Line 620:         void Consume(",
                "// Line 621:                 const Log::Entry&) override",
                "// vulnerable line: 622: {",
                "// Line 623:             ++n_logs_;",
                "// vulnerable line: 624: }",
                "// Line 625: ",
                "// Line 626:     private:",
                "// Line 627: ",
                "// Line 628:         std::atomic_size_t& n_logs_;",
                "// vulnerable line: 629: };",
                "// Line 630: ",
                "// Line 631:     // Counter for log entries",
                "// Line 632:     std::atomic<size_t>n_logs{};",
                "// Line 633: ",
                "// Line 634:     // Prepare Log module to check that no SECURITY errors are produced",
                "// Line 635:     Log::SetCategoryFilter(std::regex(\"SECURITY\"));",
                "// Line 636:     Log::SetVerbosity(Log::Kind::Error);",
                "// Line 637:     Log::ClearConsumers();",
                "// Line 638:     Log::RegisterConsumer(std::unique_ptr<LogConsumer>(new TestConsumer(n_logs)));",
                "// Line 639: ",
                "// Line 652:     main_participant.property_policy(property_policy).init();",
                "// Line 653:     EXPECT_TRUE(main_participant.isInitialized());",
                "// Line 654: ",
                "// Line 655:     eprosima::fastrtps::rtps::GuidPrefix_t guid_prefix;",
                "// Line 656:     memset(guid_prefix.value, 0xBB, sizeof(guid_prefix.value));",
                "// Line 657: ",
                "// Line 658:     // Perform a loop in which we create another participant, and destroy it just after it has been discovered.",
                "// Line 659:     // This is the best reproducer of the issue, as authentication messages should be sent when a remote participant",
                "// Line 660:     // is discovered.",
                "// Line 661:     for (size_t n = 1; n <= n_loops; ++n)",
                "// vulnerable line: 662: {",
                "// Line 663:         std::cout << \"Iteration \" << n << std::endl;",
                "// Line 664: ",
                "// Line 665:         // Wait for undiscovery so we can wait for discovery below",
                "// Line 666:         EXPECT_TRUE(main_participant.wait_participant_undiscovery());",
                "// Line 667: ",
                "// Line 668:         // Create another participant with authentication enabled and custom GUID",
                "// Line 669:         PubSubReader<HelloWorldPubSubType> other_participant(\"HelloWorldTopic\");",
                "// Line 670:         other_participant.property_policy(property_policy).guid_prefix(guid_prefix).init();",
                "// Line 671:         EXPECT_TRUE(other_participant.isInitialized());",
                "// Line 672: ",
                "// Line 673:         // Wait for mutual discovery and authentication",
                "// Line 674:         main_participant.wait_discovery();",
                "// Line 675:         other_participant.wait_discovery();",
                "// Line 676: ",
                "// Line 677:         // The created participant gets out of scope here, and is destroyed",
                "// vulnerable line: 678: }",
                "// Line 679: ",
                "// Line 680:     // No SECURITY error logs should have been produced",
                "// Line 681:     Log::Flush();",
                "// Line 682:     EXPECT_EQ(0u, n_logs);",
                "// vulnerable line: 683: }",
                "// Line 684: ",
                "// Line 685: TEST_P(Security, BuiltinAuthenticationAndCryptoPlugin_besteffort_rtps_ok)",
                "// vulnerable line: 686: {",
                "// Line 687:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 688:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 689: ",
                "// Line 690:     PropertyPolicy pub_property_policy, sub_property_policy;",
                "// Line 691: ",
                "// Line 692:     sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 693:             \"builtin.PKI-DH\"));",
                "// Line 694:     sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 695:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 696:     sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_certificate\",",
                "// Line 735:     auto data = default_helloworld_data_generator();",
                "// Line 736: ",
                "// Line 737:     reader.startReception(data);",
                "// Line 738: ",
                "// Line 739:     // Send data",
                "// Line 740:     writer.send(data);",
                "// Line 741:     // In this test all data should be sent.",
                "// Line 742:     ASSERT_TRUE(data.empty());",
                "// Line 743:     // Block reader until reception finished or timeout.",
                "// Line 744:     reader.block_for_at_least(2);",
                "// vulnerable line: 745: }",
                "// Line 746: ",
                "// Line 747: TEST_P(Security, BuiltinAuthenticationAndCryptoPlugin_shm_transport_ok)",
                "// vulnerable line: 748: {",
                "// Line 749:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 750:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 751: ",
                "// Line 752:     auto shm_transport = std::make_shared<eprosima::fastdds::rtps::SharedMemTransportDescriptor>();",
                "// Line 753:     auto udp_transport = std::make_shared<UDPv4TransportDescriptor>();",
                "// Line 754:     const uint32_t segment_size = 1024 * 1024;",
                "// Line 755:     shm_transport->segment_size(segment_size);",
                "// Line 756:     shm_transport->max_message_size(segment_size);",
                "// Line 757:     reader.disable_builtin_transport();",
                "// Line 758:     reader.add_user_transport_to_pparams(shm_transport);",
                "// Line 807:     auto data = default_helloworld_data_generator();",
                "// Line 808: ",
                "// Line 809:     reader.startReception(data);",
                "// Line 810: ",
                "// Line 811:     // Send data",
                "// Line 812:     writer.send(data);",
                "// Line 813:     // In this test all data should be sent.",
                "// Line 814:     ASSERT_TRUE(data.empty());",
                "// Line 815:     // Block reader until reception finished or timeout.",
                "// Line 816:     reader.block_for_at_least(2);",
                "// vulnerable line: 817: }",
                "// Line 818: ",
                "// Line 819: TEST_P(Security, BuiltinAuthenticationAndCryptoPlugin_shm_udp_transport_ok)",
                "// vulnerable line: 820: {",
                "// Line 821:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 822:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 823: ",
                "// Line 824:     auto shm_transport = std::make_shared<eprosima::fastdds::rtps::SharedMemTransportDescriptor>();",
                "// Line 825:     auto udp_transport = std::make_shared<UDPv4TransportDescriptor>();",
                "// Line 826:     const uint32_t segment_size = 1024 * 1024;",
                "// Line 827:     shm_transport->segment_size(segment_size);",
                "// Line 828:     shm_transport->max_message_size(segment_size);",
                "// Line 829:     reader.disable_builtin_transport();",
                "// Line 830:     reader.add_user_transport_to_pparams(shm_transport);",
                "// Line 881:     auto data = default_helloworld_data_generator();",
                "// Line 882: ",
                "// Line 883:     reader.startReception(data);",
                "// Line 884: ",
                "// Line 885:     // Send data",
                "// Line 886:     writer.send(data);",
                "// Line 887:     // In this test all data should be sent.",
                "// Line 888:     ASSERT_TRUE(data.empty());",
                "// Line 889:     // Block reader until reception finished or timeout.",
                "// Line 890:     reader.block_for_at_least(2);",
                "// vulnerable line: 891: }",
                "// Line 892: ",
                "// Line 893: TEST(Security, BuiltinAuthenticationAndCryptoPlugin_reliable_rtps_ok)",
                "// vulnerable line: 894: {",
                "// Line 895:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 896:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 897: ",
                "// Line 898:     PropertyPolicy pub_property_policy, sub_property_policy;",
                "// Line 899: ",
                "// Line 900:     sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 901:             \"builtin.PKI-DH\"));",
                "// Line 902:     sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 903:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 904:     sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_certificate\",",
                "// Line 943:     auto data = default_helloworld_data_generator();",
                "// Line 944: ",
                "// Line 945:     reader.startReception(data);",
                "// Line 946: ",
                "// Line 947:     // Send data",
                "// Line 948:     writer.send(data);",
                "// Line 949:     // In this test all data should be sent.",
                "// Line 950:     ASSERT_TRUE(data.empty());",
                "// Line 951:     // Block reader until reception finished or timeout.",
                "// Line 952:     reader.block_for_all();",
                "// vulnerable line: 953: }",
                "// Line 954: ",
                "// Line 955: // Used to detect Github issue #106",
                "// Line 956: TEST_P(Security, BuiltinAuthenticationAndCryptoPlugin_rtps_ok_same_participant)",
                "// vulnerable line: 957: {",
                "// Line 958:     PubSubWriterReader<HelloWorldPubSubType> wreader(TEST_TOPIC_NAME);",
                "// Line 959: ",
                "// Line 960:     PropertyPolicy pub_property_policy, sub_property_policy,",
                "// Line 961:             property_policy;",
                "// Line 962: ",
                "// Line 963:     property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 964:             \"builtin.PKI-DH\"));",
                "// Line 965:     property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 966:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 967:     property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_certificate\",",
                "// Line 984:     auto data = default_helloworld_data_generator();",
                "// Line 985: ",
                "// Line 986:     wreader.startReception(data);",
                "// Line 987: ",
                "// Line 988:     // Send data",
                "// Line 989:     wreader.send(data);",
                "// Line 990:     // In this test all data should be sent.",
                "// Line 991:     ASSERT_TRUE(data.empty());",
                "// Line 992:     // Block reader until reception finished or timeout.",
                "// Line 993:     wreader.block_for_all();",
                "// vulnerable line: 994: }",
                "// Line 995: ",
                "// Line 996: TEST_P(Security, BuiltinAuthenticationAndCryptoPlugin_besteffort_large_string)",
                "// vulnerable line: 997: {",
                "// Line 998:     PubSubReader<StringTestPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 999:     PubSubWriter<StringTestPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 1000: ",
                "// Line 1001:     PropertyPolicy pub_property_policy, sub_property_policy;",
                "// Line 1002: ",
                "// Line 1003:     sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 1004:             \"builtin.PKI-DH\"));",
                "// Line 1005:     sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 1006:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 1007:     sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_certificate\",",
                "// Line 1046:     auto data = default_large_string_data_generator();",
                "// Line 1047: ",
                "// Line 1048:     reader.startReception(data);",
                "// Line 1049: ",
                "// Line 1050:     // Send data",
                "// Line 1051:     writer.send(data);",
                "// Line 1052:     // In this test all data should be sent.",
                "// Line 1053:     ASSERT_TRUE(data.empty());",
                "// Line 1054:     // Block reader until reception finished or timeout.",
                "// Line 1055:     reader.block_for_at_least(2);",
                "// vulnerable line: 1056: }",
                "// Line 1057: ",
                "// Line 1058: TEST_P(Security, BuiltinAuthenticationAndCryptoPlugin_reliable_rtps_large_string)",
                "// vulnerable line: 1059: {",
                "// Line 1060:     PubSubReader<StringTestPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 1061:     PubSubWriter<StringTestPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 1062: ",
                "// Line 1063:     PropertyPolicy pub_property_policy, sub_property_policy;",
                "// Line 1064: ",
                "// Line 1065:     sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 1066:             \"builtin.PKI-DH\"));",
                "// Line 1067:     sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 1068:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 1069:     sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_certificate\",",
                "// Line 1108:     auto data = default_large_string_data_generator();",
                "// Line 1109: ",
                "// Line 1110:     reader.startReception(data);",
                "// Line 1111: ",
                "// Line 1112:     // Send data",
                "// Line 1113:     writer.send(data);",
                "// Line 1114:     // In this test all data should be sent.",
                "// Line 1115:     ASSERT_TRUE(data.empty());",
                "// Line 1116:     // Block reader until reception finished or timeout.",
                "// Line 1117:     reader.block_for_all();",
                "// vulnerable line: 1118: }",
                "// Line 1119: ",
                "// Line 1120: TEST_P(Security, BuiltinAuthenticationAndCryptoPlugin_besteffort_rtps_data300kb)",
                "// vulnerable line: 1121: {",
                "// Line 1122:     PubSubReader<Data1mbPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 1123:     PubSubWriter<Data1mbPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 1124: ",
                "// Line 1125:     PropertyPolicy pub_property_policy, sub_property_policy;",
                "// Line 1126: ",
                "// Line 1127:     sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 1128:             \"builtin.PKI-DH\"));",
                "// Line 1129:     sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 1130:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 1131:     sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_certificate\",",
                "// Line 1178:     auto data = default_data300kb_data_generator(5);",
                "// Line 1179: ",
                "// Line 1180:     reader.startReception(data);",
                "// Line 1181: ",
                "// Line 1182:     // Send data",
                "// Line 1183:     writer.send(data);",
                "// Line 1184:     // In this test all data should be sent.",
                "// Line 1185:     ASSERT_TRUE(data.empty());",
                "// Line 1186:     // Block reader until reception finished or timeout.",
                "// Line 1187:     reader.block_for_at_least(2);",
                "// vulnerable line: 1188: }",
                "// Line 1189: ",
                "// Line 1190: TEST_P(Security, BuiltinAuthenticationAndCryptoPlugin_reliable_rtps_data300kb)",
                "// vulnerable line: 1191: {",
                "// Line 1192:     PubSubReader<Data1mbPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 1193:     PubSubWriter<Data1mbPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 1194: ",
                "// Line 1195:     PropertyPolicy pub_property_policy, sub_property_policy;",
                "// Line 1196: ",
                "// Line 1197:     sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 1198:             \"builtin.PKI-DH\"));",
                "// Line 1199:     sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 1200:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 1201:     sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_certificate\",",
                "// Line 1248:     auto data = default_data300kb_data_generator(5);",
                "// Line 1249: ",
                "// Line 1250:     reader.startReception(data);",
                "// Line 1251: ",
                "// Line 1252:     // Send data",
                "// Line 1253:     writer.send(data);",
                "// Line 1254:     // In this test all data should be sent.",
                "// Line 1255:     ASSERT_TRUE(data.empty());",
                "// Line 1256:     // Block reader until reception finished or timeout.",
                "// Line 1257:     reader.block_for_all();",
                "// vulnerable line: 1258: }",
                "// Line 1259: ",
                "// Line 1260: TEST_P(Security, BuiltinAuthenticationAndCryptoPlugin_besteffort_submessage_ok)",
                "// vulnerable line: 1261: {",
                "// Line 1262:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 1263:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 1264: ",
                "// Line 1265:     PropertyPolicy pub_part_property_policy, sub_part_property_policy,",
                "// Line 1266:             pub_property_policy, sub_property_policy;",
                "// Line 1267: ",
                "// Line 1268:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 1269:             \"builtin.PKI-DH\"));",
                "// Line 1270:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 1271:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 1313:     auto data = default_helloworld_data_generator();",
                "// Line 1314: ",
                "// Line 1315:     reader.startReception(data);",
                "// Line 1316: ",
                "// Line 1317:     // Send data",
                "// Line 1318:     writer.send(data);",
                "// Line 1319:     // In this test all data should be sent.",
                "// Line 1320:     ASSERT_TRUE(data.empty());",
                "// Line 1321:     // Block reader until reception finished or timeout.",
                "// Line 1322:     reader.block_for_at_least(2);",
                "// vulnerable line: 1323: }",
                "// Line 1324: ",
                "// Line 1325: TEST_P(Security, BuiltinAuthenticationAndCryptoPlugin_reliable_submessage_ok)",
                "// vulnerable line: 1326: {",
                "// Line 1327:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 1328:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 1329: ",
                "// Line 1330:     PropertyPolicy pub_part_property_policy, sub_part_property_policy,",
                "// Line 1331:             pub_property_policy, sub_property_policy;",
                "// Line 1332: ",
                "// Line 1333:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 1334:             \"builtin.PKI-DH\"));",
                "// Line 1335:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 1336:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 1378:     auto data = default_helloworld_data_generator();",
                "// Line 1379: ",
                "// Line 1380:     reader.startReception(data);",
                "// Line 1381: ",
                "// Line 1382:     // Send data",
                "// Line 1383:     writer.send(data);",
                "// Line 1384:     // In this test all data should be sent.",
                "// Line 1385:     ASSERT_TRUE(data.empty());",
                "// Line 1386:     // Block reader until reception finished or timeout.",
                "// Line 1387:     reader.block_for_all();",
                "// vulnerable line: 1388: }",
                "// Line 1389: ",
                "// Line 1390: // Used to detect Github issue #106",
                "// Line 1391: TEST_P(Security, BuiltinAuthenticationAndCryptoPlugin_submessage_ok_same_participant)",
                "// vulnerable line: 1392: {",
                "// Line 1393:     PubSubWriterReader<HelloWorldPubSubType> wreader(TEST_TOPIC_NAME);",
                "// Line 1394: ",
                "// Line 1395:     PropertyPolicy pub_property_policy, sub_property_policy,",
                "// Line 1396:             property_policy;",
                "// Line 1397: ",
                "// Line 1398:     property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 1399:             \"builtin.PKI-DH\"));",
                "// Line 1400:     property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 1401:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 1402:     property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_certificate\",",
                "// Line 1422:     auto data = default_helloworld_data_generator();",
                "// Line 1423: ",
                "// Line 1424:     wreader.startReception(data);",
                "// Line 1425: ",
                "// Line 1426:     // Send data",
                "// Line 1427:     wreader.send(data);",
                "// Line 1428:     // In this test all data should be sent.",
                "// Line 1429:     ASSERT_TRUE(data.empty());",
                "// Line 1430:     // Block reader until reception finished or timeout.",
                "// Line 1431:     wreader.block_for_all();",
                "// vulnerable line: 1432: }",
                "// Line 1433: ",
                "// Line 1434: TEST_P(Security, BuiltinAuthenticationAndCryptoPlugin_besteffort_submessage_large_string)",
                "// vulnerable line: 1435: {",
                "// Line 1436:     PubSubReader<StringTestPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 1437:     PubSubWriter<StringTestPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 1438: ",
                "// Line 1439:     PropertyPolicy pub_part_property_policy, sub_part_property_policy,",
                "// Line 1440:             pub_property_policy, sub_property_policy;",
                "// Line 1441: ",
                "// Line 1442:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 1443:             \"builtin.PKI-DH\"));",
                "// Line 1444:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 1445:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 1487:     auto data = default_large_string_data_generator();",
                "// Line 1488: ",
                "// Line 1489:     reader.startReception(data);",
                "// Line 1490: ",
                "// Line 1491:     // Send data",
                "// Line 1492:     writer.send(data);",
                "// Line 1493:     // In this test all data should be sent.",
                "// Line 1494:     ASSERT_TRUE(data.empty());",
                "// Line 1495:     // Block reader until reception finished or timeout.",
                "// Line 1496:     reader.block_for_at_least(2);",
                "// vulnerable line: 1497: }",
                "// Line 1498: ",
                "// Line 1499: TEST_P(Security, BuiltinAuthenticationAndCryptoPlugin_reliable_submessage_large_string)",
                "// vulnerable line: 1500: {",
                "// Line 1501:     PubSubReader<StringTestPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 1502:     PubSubWriter<StringTestPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 1503: ",
                "// Line 1504:     PropertyPolicy pub_part_property_policy, sub_part_property_policy,",
                "// Line 1505:             pub_property_policy, sub_property_policy;",
                "// Line 1506: ",
                "// Line 1507:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 1508:             \"builtin.PKI-DH\"));",
                "// Line 1509:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 1510:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 1552:     auto data = default_large_string_data_generator();",
                "// Line 1553: ",
                "// Line 1554:     reader.startReception(data);",
                "// Line 1555: ",
                "// Line 1556:     // Send data",
                "// Line 1557:     writer.send(data);",
                "// Line 1558:     // In this test all data should be sent.",
                "// Line 1559:     ASSERT_TRUE(data.empty());",
                "// Line 1560:     // Block reader until reception finished or timeout.",
                "// Line 1561:     reader.block_for_all();",
                "// vulnerable line: 1562: }",
                "// Line 1563: ",
                "// Line 1564: TEST_P(Security, BuiltinAuthenticationAndCryptoPlugin_besteffort_submessage_data300kb)",
                "// vulnerable line: 1565: {",
                "// Line 1566:     PubSubReader<Data1mbPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 1567:     PubSubWriter<Data1mbPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 1568: ",
                "// Line 1569:     PropertyPolicy pub_part_property_policy, sub_part_property_policy,",
                "// Line 1570:             pub_property_policy, sub_property_policy;",
                "// Line 1571: ",
                "// Line 1572:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 1573:             \"builtin.PKI-DH\"));",
                "// Line 1574:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 1575:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 1625:     auto data = default_data300kb_data_generator(5);",
                "// Line 1626: ",
                "// Line 1627:     reader.startReception(data);",
                "// Line 1628: ",
                "// Line 1629:     // Send data",
                "// Line 1630:     writer.send(data);",
                "// Line 1631:     // In this test all data should be sent.",
                "// Line 1632:     ASSERT_TRUE(data.empty());",
                "// Line 1633:     // Block reader until reception finished or timeout.",
                "// Line 1634:     reader.block_for_at_least(2);",
                "// vulnerable line: 1635: }",
                "// Line 1636: ",
                "// Line 1637: TEST_P(Security, BuiltinAuthenticationAndCryptoPlugin_reliable_submessage_data300kb)",
                "// vulnerable line: 1638: {",
                "// Line 1639:     PubSubReader<Data1mbPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 1640:     PubSubWriter<Data1mbPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 1641: ",
                "// Line 1642:     PropertyPolicy pub_part_property_policy, sub_part_property_policy,",
                "// Line 1643:             pub_property_policy, sub_property_policy;",
                "// Line 1644: ",
                "// Line 1645:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 1646:             \"builtin.PKI-DH\"));",
                "// Line 1647:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 1648:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 1698:     auto data = default_data300kb_data_generator(5);",
                "// Line 1699: ",
                "// Line 1700:     reader.startReception(data);",
                "// Line 1701: ",
                "// Line 1702:     // Send data",
                "// Line 1703:     writer.send(data);",
                "// Line 1704:     // In this test all data should be sent.",
                "// Line 1705:     ASSERT_TRUE(data.empty());",
                "// Line 1706:     // Block reader until reception finished or timeout.",
                "// Line 1707:     reader.block_for_all();",
                "// vulnerable line: 1708: }",
                "// Line 1709: ",
                "// Line 1710: TEST_P(Security, BuiltinAuthenticationAndCryptoPlugin_besteffort_payload_ok)",
                "// vulnerable line: 1711: {",
                "// Line 1712:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 1713:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 1714: ",
                "// Line 1715:     PropertyPolicy pub_part_property_policy, sub_part_property_policy,",
                "// Line 1716:             pub_property_policy, sub_property_policy;",
                "// Line 1717: ",
                "// Line 1718:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 1719:             \"builtin.PKI-DH\"));",
                "// Line 1720:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 1721:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 1763:     auto data = default_helloworld_data_generator();",
                "// Line 1764: ",
                "// Line 1765:     reader.startReception(data);",
                "// Line 1766: ",
                "// Line 1767:     // Send data",
                "// Line 1768:     writer.send(data);",
                "// Line 1769:     // In this test all data should be sent.",
                "// Line 1770:     ASSERT_TRUE(data.empty());",
                "// Line 1771:     // Block reader until reception finished or timeout.",
                "// Line 1772:     reader.block_for_at_least(2);",
                "// vulnerable line: 1773: }",
                "// Line 1774: ",
                "// Line 1775: TEST_P(Security, BuiltinAuthenticationAndCryptoPlugin_reliable_payload_ok)",
                "// vulnerable line: 1776: {",
                "// Line 1777:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 1778:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 1779: ",
                "// Line 1780:     PropertyPolicy pub_part_property_policy, sub_part_property_policy,",
                "// Line 1781:             pub_property_policy, sub_property_policy;",
                "// Line 1782: ",
                "// Line 1783:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 1784:             \"builtin.PKI-DH\"));",
                "// Line 1785:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 1786:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 1828:     auto data = default_helloworld_data_generator();",
                "// Line 1829: ",
                "// Line 1830:     reader.startReception(data);",
                "// Line 1831: ",
                "// Line 1832:     // Send data",
                "// Line 1833:     writer.send(data);",
                "// Line 1834:     // In this test all data should be sent.",
                "// Line 1835:     ASSERT_TRUE(data.empty());",
                "// Line 1836:     // Block reader until reception finished or timeout.",
                "// Line 1837:     reader.block_for_all();",
                "// vulnerable line: 1838: }",
                "// Line 1839: ",
                "// Line 1840: // Used to detect Github issue #106",
                "// Line 1841: TEST_P(Security, BuiltinAuthenticationAndCryptoPlugin_payload_ok_same_participant)",
                "// vulnerable line: 1842: {",
                "// Line 1843:     PubSubWriterReader<HelloWorldPubSubType> wreader(TEST_TOPIC_NAME);",
                "// Line 1844: ",
                "// Line 1845:     PropertyPolicy pub_property_policy, sub_property_policy,",
                "// Line 1846:             property_policy;",
                "// Line 1847: ",
                "// Line 1848:     property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 1849:             \"builtin.PKI-DH\"));",
                "// Line 1850:     property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 1851:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 1852:     property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_certificate\",",
                "// Line 1872:     auto data = default_helloworld_data_generator();",
                "// Line 1873: ",
                "// Line 1874:     wreader.startReception(data);",
                "// Line 1875: ",
                "// Line 1876:     // Send data",
                "// Line 1877:     wreader.send(data);",
                "// Line 1878:     // In this test all data should be sent.",
                "// Line 1879:     ASSERT_TRUE(data.empty());",
                "// Line 1880:     // Block reader until reception finished or timeout.",
                "// Line 1881:     wreader.block_for_all();",
                "// vulnerable line: 1882: }",
                "// Line 1883: ",
                "// Line 1884: TEST_P(Security, BuiltinAuthenticationAndCryptoPlugin_payload_ok_same_participant_300kb)",
                "// vulnerable line: 1885: {",
                "// Line 1886:     PubSubWriterReader<Data1mbPubSubType> wreader(TEST_TOPIC_NAME);",
                "// Line 1887: ",
                "// Line 1888:     PropertyPolicy pub_property_policy, sub_property_policy, property_policy;",
                "// Line 1889: ",
                "// Line 1890:     property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\", \"builtin.PKI-DH\"));",
                "// Line 1891:     property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 1892:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 1893:     property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_certificate\",",
                "// Line 1894:             \"file://\" + std::string(certs_path) + \"/mainpubcert.pem\"));",
                "// Line 1895:     property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.private_key\",",
                "// Line 1913:     auto data = default_data300kb_data_generator();",
                "// Line 1914: ",
                "// Line 1915:     wreader.startReception(data);",
                "// Line 1916: ",
                "// Line 1917:     // Send data",
                "// Line 1918:     wreader.send(data);",
                "// Line 1919:     // In this test all data should be sent.",
                "// Line 1920:     ASSERT_TRUE(data.empty());",
                "// Line 1921:     // Block reader until reception finished or timeout.",
                "// Line 1922:     wreader.block_for_all();",
                "// vulnerable line: 1923: }",
                "// Line 1924: ",
                "// Line 1925: TEST_P(Security, BuiltinAuthenticationAndCryptoPlugin_besteffort_payload_large_string)",
                "// vulnerable line: 1926: {",
                "// Line 1927:     PubSubReader<StringTestPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 1928:     PubSubWriter<StringTestPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 1929: ",
                "// Line 1930:     PropertyPolicy pub_part_property_policy, sub_part_property_policy,",
                "// Line 1931:             pub_property_policy, sub_property_policy;",
                "// Line 1932: ",
                "// Line 1933:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 1934:             \"builtin.PKI-DH\"));",
                "// Line 1935:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 1936:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 1978:     auto data = default_large_string_data_generator();",
                "// Line 1979: ",
                "// Line 1980:     reader.startReception(data);",
                "// Line 1981: ",
                "// Line 1982:     // Send data",
                "// Line 1983:     writer.send(data);",
                "// Line 1984:     // In this test all data should be sent.",
                "// Line 1985:     ASSERT_TRUE(data.empty());",
                "// Line 1986:     // Block reader until reception finished or timeout.",
                "// Line 1987:     reader.block_for_at_least(2);",
                "// vulnerable line: 1988: }",
                "// Line 1989: ",
                "// Line 1990: TEST_P(Security, BuiltinAuthenticationAndCryptoPlugin_reliable_payload_large_string)",
                "// vulnerable line: 1991: {",
                "// Line 1992:     PubSubReader<StringTestPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 1993:     PubSubWriter<StringTestPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 1994: ",
                "// Line 1995:     PropertyPolicy pub_part_property_policy, sub_part_property_policy,",
                "// Line 1996:             pub_property_policy, sub_property_policy;",
                "// Line 1997: ",
                "// Line 1998:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 1999:             \"builtin.PKI-DH\"));",
                "// Line 2000:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 2001:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 2043:     auto data = default_large_string_data_generator();",
                "// Line 2044: ",
                "// Line 2045:     reader.startReception(data);",
                "// Line 2046: ",
                "// Line 2047:     // Send data",
                "// Line 2048:     writer.send(data);",
                "// Line 2049:     // In this test all data should be sent.",
                "// Line 2050:     ASSERT_TRUE(data.empty());",
                "// Line 2051:     // Block reader until reception finished or timeout.",
                "// Line 2052:     reader.block_for_all();",
                "// vulnerable line: 2053: }",
                "// Line 2054: ",
                "// Line 2055: TEST_P(Security, BuiltinAuthenticationAndCryptoPlugin_besteffort_payload_data300kb)",
                "// vulnerable line: 2056: {",
                "// Line 2057:     PubSubReader<Data1mbPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 2058:     PubSubWriter<Data1mbPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 2059: ",
                "// Line 2060:     PropertyPolicy pub_part_property_policy, sub_part_property_policy,",
                "// Line 2061:             pub_property_policy, sub_property_policy;",
                "// Line 2062: ",
                "// Line 2063:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 2064:             \"builtin.PKI-DH\"));",
                "// Line 2065:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 2066:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 2116:     auto data = default_data300kb_data_generator(5);",
                "// Line 2117: ",
                "// Line 2118:     reader.startReception(data);",
                "// Line 2119: ",
                "// Line 2120:     // Send data",
                "// Line 2121:     writer.send(data);",
                "// Line 2122:     // In this test all data should be sent.",
                "// Line 2123:     ASSERT_TRUE(data.empty());",
                "// Line 2124:     // Block reader until reception finished or timeout.",
                "// Line 2125:     reader.block_for_at_least(2);",
                "// vulnerable line: 2126: }",
                "// Line 2127: ",
                "// Line 2128: TEST_P(Security, BuiltinAuthenticationAndCryptoPlugin_reliable_payload_data300kb)",
                "// vulnerable line: 2129: {",
                "// Line 2130:     PubSubReader<Data1mbPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 2131:     PubSubWriter<Data1mbPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 2132: ",
                "// Line 2133:     PropertyPolicy pub_part_property_policy, sub_part_property_policy,",
                "// Line 2134:             pub_property_policy, sub_property_policy;",
                "// Line 2135: ",
                "// Line 2136:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 2137:             \"builtin.PKI-DH\"));",
                "// Line 2138:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 2139:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 2189:     auto data = default_data300kb_data_generator(5);",
                "// Line 2190: ",
                "// Line 2191:     reader.startReception(data);",
                "// Line 2192: ",
                "// Line 2193:     // Send data",
                "// Line 2194:     writer.send(data);",
                "// Line 2195:     // In this test all data should be sent.",
                "// Line 2196:     ASSERT_TRUE(data.empty());",
                "// Line 2197:     // Block reader until reception finished or timeout.",
                "// Line 2198:     reader.block_for_all();",
                "// vulnerable line: 2199: }",
                "// Line 2200: ",
                "// Line 2201: TEST_P(Security, BuiltinAuthenticationAndCryptoPlugin_besteffort_all_ok)",
                "// vulnerable line: 2202: {",
                "// Line 2203:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 2204:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 2205: ",
                "// Line 2206:     PropertyPolicy pub_part_property_policy, sub_part_property_policy,",
                "// Line 2207:             pub_property_policy, sub_property_policy;",
                "// Line 2208: ",
                "// Line 2209:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 2210:             \"builtin.PKI-DH\"));",
                "// Line 2211:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 2212:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 2258:     auto data = default_helloworld_data_generator();",
                "// Line 2259: ",
                "// Line 2260:     reader.startReception(data);",
                "// Line 2261: ",
                "// Line 2262:     // Send data",
                "// Line 2263:     writer.send(data);",
                "// Line 2264:     // In this test all data should be sent.",
                "// Line 2265:     ASSERT_TRUE(data.empty());",
                "// Line 2266:     // Block reader until reception finished or timeout.",
                "// Line 2267:     reader.block_for_at_least(2);",
                "// vulnerable line: 2268: }",
                "// Line 2269: ",
                "// Line 2270: TEST_P(Security, BuiltinAuthenticationAndCryptoPlugin_reliable_all_ok)",
                "// vulnerable line: 2271: {",
                "// Line 2272:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 2273:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 2274: ",
                "// Line 2275:     PropertyPolicy pub_part_property_policy, sub_part_property_policy,",
                "// Line 2276:             pub_property_policy, sub_property_policy;",
                "// Line 2277: ",
                "// Line 2278:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 2279:             \"builtin.PKI-DH\"));",
                "// Line 2280:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 2281:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 2327:     auto data = default_helloworld_data_generator();",
                "// Line 2328: ",
                "// Line 2329:     reader.startReception(data);",
                "// Line 2330: ",
                "// Line 2331:     // Send data",
                "// Line 2332:     writer.send(data);",
                "// Line 2333:     // In this test all data should be sent.",
                "// Line 2334:     ASSERT_TRUE(data.empty());",
                "// Line 2335:     // Block reader until reception finished or timeout.",
                "// Line 2336:     reader.block_for_all();",
                "// vulnerable line: 2337: }",
                "// Line 2338: ",
                "// Line 2339: TEST_P(Security, BuiltinAuthenticationAndCryptoPlugin_besteffort_all_large_string)",
                "// vulnerable line: 2340: {",
                "// Line 2341:     PubSubReader<StringTestPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 2342:     PubSubWriter<StringTestPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 2343: ",
                "// Line 2344:     PropertyPolicy pub_part_property_policy, sub_part_property_policy,",
                "// Line 2345:             pub_property_policy, sub_property_policy;",
                "// Line 2346: ",
                "// Line 2347:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 2348:             \"builtin.PKI-DH\"));",
                "// Line 2349:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 2350:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 2396:     auto data = default_large_string_data_generator();",
                "// Line 2397: ",
                "// Line 2398:     reader.startReception(data);",
                "// Line 2399: ",
                "// Line 2400:     // Send data",
                "// Line 2401:     writer.send(data);",
                "// Line 2402:     // In this test all data should be sent.",
                "// Line 2403:     ASSERT_TRUE(data.empty());",
                "// Line 2404:     // Block reader until reception finished or timeout.",
                "// Line 2405:     reader.block_for_at_least(2);",
                "// vulnerable line: 2406: }",
                "// Line 2407: ",
                "// Line 2408: TEST_P(Security, BuiltinAuthenticationAndCryptoPlugin_reliable_all_large_string)",
                "// vulnerable line: 2409: {",
                "// Line 2410:     PubSubReader<StringTestPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 2411:     PubSubWriter<StringTestPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 2412: ",
                "// Line 2413:     PropertyPolicy pub_part_property_policy, sub_part_property_policy,",
                "// Line 2414:             pub_property_policy, sub_property_policy;",
                "// Line 2415: ",
                "// Line 2416:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 2417:             \"builtin.PKI-DH\"));",
                "// Line 2418:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 2419:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 2465:     auto data = default_large_string_data_generator();",
                "// Line 2466: ",
                "// Line 2467:     reader.startReception(data);",
                "// Line 2468: ",
                "// Line 2469:     // Send data",
                "// Line 2470:     writer.send(data);",
                "// Line 2471:     // In this test all data should be sent.",
                "// Line 2472:     ASSERT_TRUE(data.empty());",
                "// Line 2473:     // Block reader until reception finished or timeout.",
                "// Line 2474:     reader.block_for_all();",
                "// vulnerable line: 2475: }",
                "// Line 2476: ",
                "// Line 2477: TEST_P(Security, BuiltinAuthenticationAndCryptoPlugin_besteffort_all_data300kb)",
                "// vulnerable line: 2478: {",
                "// Line 2479:     PubSubReader<Data1mbPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 2480:     PubSubWriter<Data1mbPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 2481: ",
                "// Line 2482:     PropertyPolicy pub_part_property_policy, sub_part_property_policy,",
                "// Line 2483:             pub_property_policy, sub_property_policy;",
                "// Line 2484: ",
                "// Line 2485:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 2486:             \"builtin.PKI-DH\"));",
                "// Line 2487:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 2488:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 2542:     auto data = default_data300kb_data_generator(5);",
                "// Line 2543: ",
                "// Line 2544:     reader.startReception(data);",
                "// Line 2545: ",
                "// Line 2546:     // Send data",
                "// Line 2547:     writer.send(data);",
                "// Line 2548:     // In this test all data should be sent.",
                "// Line 2549:     ASSERT_TRUE(data.empty());",
                "// Line 2550:     // Block reader until reception finished or timeout.",
                "// Line 2551:     reader.block_for_at_least(2);",
                "// vulnerable line: 2552: }",
                "// Line 2553: ",
                "// Line 2554: TEST_P(Security, BuiltinAuthenticationAndCryptoPlugin_reliable_all_data300kb)",
                "// vulnerable line: 2555: {",
                "// Line 2556:     PubSubReader<Data1mbPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 2557:     PubSubWriter<Data1mbPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 2558: ",
                "// Line 2559:     PropertyPolicy pub_part_property_policy, sub_part_property_policy,",
                "// Line 2560:             pub_property_policy, sub_property_policy;",
                "// Line 2561: ",
                "// Line 2562:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 2563:             \"builtin.PKI-DH\"));",
                "// Line 2564:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 2565:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 2619:     auto data = default_data300kb_data_generator(5);",
                "// Line 2620: ",
                "// Line 2621:     reader.startReception(data);",
                "// Line 2622: ",
                "// Line 2623:     // Send data",
                "// Line 2624:     writer.send(data);",
                "// Line 2625:     // In this test all data should be sent.",
                "// Line 2626:     ASSERT_TRUE(data.empty());",
                "// Line 2627:     // Block reader until reception finished or timeout.",
                "// Line 2628:     reader.block_for_all();",
                "// vulnerable line: 2629: }",
                "// Line 2630: ",
                "// Line 2631: // Regression test of Refs #2457",
                "// Line 2632: TEST_P(Security, BuiltinAuthenticationAndCryptoPlugin_reliable_all_data300kb_mix)",
                "// vulnerable line: 2633: {",
                "// Line 2634:     PubSubReader<Data1mbPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 2635:     PubSubWriter<Data1mbPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 2636: ",
                "// Line 2637:     PropertyPolicy pub_part_property_policy, sub_part_property_policy,",
                "// Line 2638:             pub_property_policy, sub_property_policy;",
                "// Line 2639: ",
                "// Line 2640:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 2641:             \"builtin.PKI-DH\"));",
                "// Line 2642:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 2643:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 2686:     // Wait for discovery.",
                "// Line 2687:     writer.wait_discovery();",
                "// Line 2688:     reader.wait_discovery();",
                "// Line 2689: ",
                "// Line 2690:     auto data = default_data300kb_mix_data_generator(10);",
                "// Line 2691: ",
                "// Line 2692:     reader.startReception(data);",
                "// Line 2693: ",
                "// Line 2694:     size_t count = 0;",
                "// Line 2695:     for (auto data_sample : data)",
                "// vulnerable line: 2696: {",
                "// Line 2697:         // Send data",
                "// Line 2698:         writer.send_sample(data_sample);",
                "// Line 2699:         ++count;",
                "// Line 2700:         if (count % 2 == 0)",
                "// vulnerable line: 2701: {",
                "// Line 2702:             // Block reader until reception finished or timeout.",
                "// Line 2703:             reader.block_for_at_least(count);",
                "// vulnerable line: 2704: }",
                "// vulnerable line: 2705: }",
                "// vulnerable line: 2706: }",
                "// Line 2707: ",
                "// Line 2708: // Regression test of Refs #2457, Github ros2 #438.",
                "// Line 2709: TEST_P(Security, BuiltinAuthenticationAndCryptoPlugin_user_data)",
                "// vulnerable line: 2710: {",
                "// Line 2711:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 2712:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 2713: ",
                "// Line 2714:     PropertyPolicy pub_part_property_policy, sub_part_property_policy,",
                "// Line 2715:             pub_property_policy, sub_property_policy;",
                "// Line 2716: ",
                "// Line 2717:     pub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 2718:             \"builtin.PKI-DH\"));",
                "// Line 2719:     pub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 2720:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 2743:             \"file://\" + std::string(certs_path) + \"/mainsubcert.pem\"));",
                "// Line 2744:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.private_key\",",
                "// Line 2745:             \"file://\" + std::string(certs_path) + \"/mainsubkey.pem\"));",
                "// Line 2746:     sub_part_property_policy.properties().emplace_back(Property(\"dds.sec.crypto.plugin\",",
                "// Line 2747:             \"builtin.AES-GCM-GMAC\"));",
                "// Line 2748:     sub_part_property_policy.properties().emplace_back(\"rtps.participant.rtps_protection_kind\", \"ENCRYPT\");",
                "// Line 2749:     sub_property_policy.properties().emplace_back(\"rtps.endpoint.submessage_protection_kind\", \"ENCRYPT\");",
                "// Line 2750:     sub_property_policy.properties().emplace_back(\"rtps.endpoint.payload_protection_kind\", \"ENCRYPT\");",
                "// Line 2751: ",
                "// Line 2752:     reader.setOnDiscoveryFunction([&writer](const ParticipantDiscoveryInfo& info) -> bool",
                "// vulnerable line: 2753: {",
                "// Line 2754:                 if (info.info.m_guid == writer.participant_guid())",
                "// vulnerable line: 2755: {",
                "// Line 2756:                     std::cout << \"Received USER_DATA from the writer: \";",
                "// Line 2757:                     for (auto i : info.info.m_userData)",
                "// vulnerable line: 2758: {",
                "// Line 2759:                         std::cout << i << ' ';",
                "// vulnerable line: 2760: }",
                "// Line 2761:                     return info.info.m_userData == std::vector<octet>({ 'a', 'b', 'c', 'd', 'e' });",
                "// vulnerable line: 2762: }",
                "// Line 2763: ",
                "// Line 2764:                 return false;",
                "// Line 2765:             });",
                "// Line 2766: ",
                "// Line 2767:     reader.history_depth(100).",
                "// Line 2768:             reliability(eprosima::fastrtps::RELIABLE_RELIABILITY_QOS).",
                "// Line 2769:             property_policy(sub_part_property_policy).",
                "// Line 2770:             entity_property_policy(sub_property_policy).init();",
                "// Line 2771: ",
                "// Line 2772:     ASSERT_TRUE(reader.isInitialized());",
                "// Line 2773: ",
                "// Line 2774:     // Wait for authorization",
                "// Line 2775:     reader.waitAuthorized();",
                "// Line 2776:     writer.waitAuthorized();",
                "// Line 2777: ",
                "// Line 2778:     reader.wait_discovery();",
                "// Line 2779:     writer.wait_discovery();",
                "// Line 2780: ",
                "// Line 2781:     reader.wait_discovery_result();",
                "// vulnerable line: 2782: }",
                "// Line 2783: ",
                "// Line 2784: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_governance_rule_order)",
                "// vulnerable line: 2785: {",
                "// vulnerable line: 2786: {",
                "// Line 2787:         // Governance rule for topic *HelloWorldTopic* with enable_read/write_access_contrl set to false",
                "// Line 2788:         // Governance rule for topic * with enable_read/write_access_contrl set to true",
                "// Line 2789:         // Permission denied for topic HelloWorldTopic",
                "// Line 2790:         // Creation of reader and writer is allowed",
                "// Line 2791:         PubSubReader<HelloWorldPubSubType> reader(\"HelloWorldTopic\");",
                "// Line 2792:         PubSubWriter<HelloWorldPubSubType> writer(\"HelloWorldTopic\");",
                "// Line 2793:         std::string governance_file(\"governance_rule_order_test.smime\");",
                "// Line 2794: ",
                "// Line 2795:         PropertyPolicy pub_property_policy, sub_property_policy;",
                "// Line 2796: ",
                "// Line 2856:         auto data = default_helloworld_data_generator();",
                "// Line 2857: ",
                "// Line 2858:         reader.startReception(data);",
                "// Line 2859: ",
                "// Line 2860:         // Send data",
                "// Line 2861:         writer.send(data);",
                "// Line 2862:         // In this test all data should be sent.",
                "// Line 2863:         ASSERT_TRUE(data.empty());",
                "// Line 2864:         // Block reader until reception finished or timeout.",
                "// Line 2865:         reader.block_for_all();",
                "// vulnerable line: 2866: }",
                "// Line 2867: ",
                "// vulnerable line: 2868: {",
                "// Line 2869:         // Governance rule for topic * with enable_read/write_access_contrl set to true",
                "// Line 2870:         // Governance rule for topic *HelloWorldTopic* with enable_read/write_access_contrl set to false",
                "// Line 2871:         // Permission denied for topic HelloWorldTopic",
                "// Line 2872:         // Creation of reader and writer is denied",
                "// Line 2873:         PubSubReader<HelloWorldPubSubType> reader(\"HelloWorldTopic\");",
                "// Line 2874:         PubSubWriter<HelloWorldPubSubType> writer(\"HelloWorldTopic\");",
                "// Line 2875:         std::string governance_file(\"governance_rule_order_test_inverse.smime\");",
                "// Line 2876: ",
                "// Line 2877:         PropertyPolicy pub_property_policy, sub_property_policy;",
                "// Line 2878: ",
                "// Line 2916:                     \"dds.sec.access.builtin.Access-Permissions.permissions_ca\",",
                "// Line 2917:                     \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 2918:         pub_property_policy.properties().emplace_back(Property(\"dds.sec.access.builtin.Access-Permissions.governance\",",
                "// Line 2919:                 \"file://\" + std::string(certs_path) + \"/\" + governance_file));",
                "// Line 2920:         pub_property_policy.properties().emplace_back(Property(\"dds.sec.access.builtin.Access-Permissions.permissions\",",
                "// Line 2921:                 \"file://\" + std::string(certs_path) + \"/permissions.smime\"));",
                "// Line 2922: ",
                "// Line 2923:         writer.property_policy(pub_property_policy).init();",
                "// Line 2924: ",
                "// Line 2925:         ASSERT_FALSE(writer.isInitialized());",
                "// vulnerable line: 2926: }",
                "// vulnerable line: 2927: }",
                "// Line 2928: ",
                "// Line 2929: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_multiple_endpoints_matching)",
                "// vulnerable line: 2930: {",
                "// vulnerable line: 2931: {",
                "// Line 2932:         std::string governance_file(\"governance_helloworld_all_enable.smime\");",
                "// Line 2933:         std::string permissions_file(\"permissions_helloworld.smime\");",
                "// Line 2934: ",
                "// Line 2935:         PropertyPolicy pub_property_policy;",
                "// Line 2936:         pub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 2937:                 \"builtin.PKI-DH\"));",
                "// Line 2938:         pub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 2939:                 \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 2940:         pub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_certificate\",",
                "// Line 2941:                 \"file://\" + std::string(certs_path) + \"/mainpubcert.pem\"));",
                "// Line 2996:         publishers.pub_wait_discovery(4u);",
                "// Line 2997:         subscribers.sub_wait_discovery(4u);",
                "// Line 2998: ",
                "// Line 2999:         // Initializing one late joiner in the participants",
                "// Line 3000:         ASSERT_TRUE(subscribers.init_subscriber(2u));",
                "// Line 3001:         ASSERT_TRUE(publishers.init_publisher(2u));",
                "// Line 3002: ",
                "// Line 3003:         // Wait for discovery: 3 subs x 3 pubs",
                "// Line 3004:         publishers.pub_wait_discovery();",
                "// Line 3005:         subscribers.sub_wait_discovery();",
                "// vulnerable line: 3006: }",
                "// vulnerable line: 3007: }",
                "// Line 3008: ",
                "// Line 3009: // Regression test of Refs #5346, Github #441.",
                "// Line 3010: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_fail_on_topic_wildcards)",
                "// vulnerable line: 3011: {",
                "// vulnerable line: 3012: {",
                "// Line 3013:         // Wildcards are only considered on PERMISSIONS, Topic values should be treated as plain strings",
                "// Line 3014:         PubSubReader<HelloWorldPubSubType> reader(\"*\");",
                "// Line 3015:         PubSubWriter<HelloWorldPubSubType> writer(\"*\");",
                "// Line 3016:         std::string governance_file(\"governance_helloworld_all_enable.smime\");",
                "// Line 3017: ",
                "// Line 3018:         PropertyPolicy pub_property_policy, sub_property_policy;",
                "// Line 3019: ",
                "// Line 3020:         sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 3021:                 \"builtin.PKI-DH\"));",
                "// Line 3022:         sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 3058:                     \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 3059:         pub_property_policy.properties().emplace_back(Property(\"dds.sec.access.builtin.Access-Permissions.governance\",",
                "// Line 3060:                 \"file://\" + std::string(certs_path) + \"/\" + governance_file));",
                "// Line 3061:         pub_property_policy.properties().emplace_back(Property(\"dds.sec.access.builtin.Access-Permissions.permissions\",",
                "// Line 3062:                 \"file://\" + std::string(certs_path) + \"/permissions_helloworld.smime\"));",
                "// Line 3063: ",
                "// Line 3064:         writer.setManualTopicName(\"*\").",
                "// Line 3065:                 property_policy(pub_property_policy).init();",
                "// Line 3066: ",
                "// Line 3067:         ASSERT_FALSE(writer.isInitialized());",
                "// vulnerable line: 3068: }",
                "// Line 3069: ",
                "// vulnerable line: 3070: {",
                "// Line 3071:         // Wildcards are only considered on PERMISSIONS, Topic values should be treated as plain strings",
                "// Line 3072:         PubSubReader<HelloWorldPubSubType> reader(\"HelloWorldTopic\");",
                "// Line 3073:         PubSubWriter<HelloWorldPubSubType> writer(\"HelloWorldTopic\");",
                "// Line 3074:         std::string governance_file(\"governance_helloworld_all_enable.smime\");",
                "// Line 3075: ",
                "// Line 3076:         PropertyPolicy pub_property_policy, sub_property_policy;",
                "// Line 3077: ",
                "// Line 3078:         sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 3079:                 \"builtin.PKI-DH\"));",
                "// Line 3080:         sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 3137:         auto data = default_helloworld_data_generator();",
                "// Line 3138: ",
                "// Line 3139:         reader.startReception(data);",
                "// Line 3140: ",
                "// Line 3141:         // Send data",
                "// Line 3142:         writer.send(data);",
                "// Line 3143:         // In this test all data should be sent.",
                "// Line 3144:         ASSERT_TRUE(data.empty());",
                "// Line 3145:         // Block reader until reception finished or timeout.",
                "// Line 3146:         reader.block_for_all();",
                "// vulnerable line: 3147: }",
                "// vulnerable line: 3148: }",
                "// Line 3149: ",
                "// Line 3150: // Regression test of Refs #5346, Github #441.",
                "// Line 3151: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_fail_on_partition_wildcards)",
                "// vulnerable line: 3152: {",
                "// vulnerable line: 3153: {",
                "// Line 3154:         // Wildcards are only considered on PERMISSIONS, partition values should be treated as plain strings",
                "// Line 3155:         PubSubReader<HelloWorldPubSubType> reader(\"HelloWorldTopic\");",
                "// Line 3156:         PubSubWriter<HelloWorldPubSubType> writer(\"HelloWorldTopic\");",
                "// Line 3157:         std::string governance_file(\"governance_helloworld_all_enable.smime\");",
                "// Line 3158: ",
                "// Line 3159:         PropertyPolicy pub_property_policy, sub_property_policy;",
                "// Line 3160: ",
                "// Line 3161:         sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 3162:                 \"builtin.PKI-DH\"));",
                "// Line 3163:         sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 3199:                     \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 3200:         pub_property_policy.properties().emplace_back(Property(\"dds.sec.access.builtin.Access-Permissions.governance\",",
                "// Line 3201:                 \"file://\" + std::string(certs_path) + \"/\" + governance_file));",
                "// Line 3202:         pub_property_policy.properties().emplace_back(Property(\"dds.sec.access.builtin.Access-Permissions.permissions\",",
                "// Line 3203:                 \"file://\" + std::string(certs_path) + \"/permissions_helloworld_partitions.smime\"));",
                "// Line 3204: ",
                "// Line 3205:         writer.partition(\"*\").",
                "// Line 3206:                 property_policy(pub_property_policy).init();",
                "// Line 3207: ",
                "// Line 3208:         ASSERT_FALSE(writer.isInitialized());",
                "// vulnerable line: 3209: }",
                "// Line 3210: ",
                "// vulnerable line: 3211: {",
                "// Line 3212:         // Wildcards are only considered on PERMISSIONS, partition values should be treated as plain strings",
                "// Line 3213:         PubSubReader<HelloWorldPubSubType> reader(\"HelloWorldTopic\");",
                "// Line 3214:         PubSubWriter<HelloWorldPubSubType> writer(\"HelloWorldTopic\");",
                "// Line 3215:         std::string governance_file(\"governance_helloworld_all_enable.smime\");",
                "// Line 3216: ",
                "// Line 3217:         PropertyPolicy pub_property_policy, sub_property_policy;",
                "// Line 3218: ",
                "// Line 3219:         sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 3220:                 \"builtin.PKI-DH\"));",
                "// Line 3221:         sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 3280:         auto data = default_helloworld_data_generator();",
                "// Line 3281: ",
                "// Line 3282:         reader.startReception(data);",
                "// Line 3283: ",
                "// Line 3284:         // Send data",
                "// Line 3285:         writer.send(data);",
                "// Line 3286:         // In this test all data should be sent.",
                "// Line 3287:         ASSERT_TRUE(data.empty());",
                "// Line 3288:         // Block reader until reception finished or timeout.",
                "// Line 3289:         reader.block_for_all();",
                "// vulnerable line: 3290: }",
                "// vulnerable line: 3291: }",
                "// Line 3292: ",
                "// Line 3293: template <typename DataType>",
                "// Line 3294: void prepare_pkcs11_nodes(",
                "// Line 3295:         PubSubReader<DataType>& reader,",
                "// Line 3296:         PubSubWriter<DataType>& writer,",
                "// Line 3297:         const std::string& reader_private_key_url,",
                "// Line 3298:         const std::string& writer_private_key_url)",
                "// vulnerable line: 3299: {",
                "// Line 3300:     std::string governance_file(\"governance_helloworld_all_enable.smime\");",
                "// Line 3301: ",
                "// Line 3302:     // With no PIN, the load of the private key fails",
                "// Line 3303:     PropertyPolicy pub_property_policy;",
                "// Line 3304:     PropertyPolicy sub_property_policy;",
                "// Line 3305: ",
                "// Line 3306:     sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 3307:             \"builtin.PKI-DH\"));",
                "// Line 3308:     sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 3309:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 3342:     pub_property_policy.properties().emplace_back(Property(",
                "// Line 3343:                 \"dds.sec.access.builtin.Access-Permissions.permissions_ca\",",
                "// Line 3344:                 \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 3345:     pub_property_policy.properties().emplace_back(Property(\"dds.sec.access.builtin.Access-Permissions.governance\",",
                "// Line 3346:             \"file://\" + std::string(certs_path) + \"/\" + governance_file));",
                "// Line 3347:     pub_property_policy.properties().emplace_back(Property(\"dds.sec.access.builtin.Access-Permissions.permissions\",",
                "// Line 3348:             \"file://\" + std::string(certs_path) + \"/permissions_helloworld.smime\"));",
                "// Line 3349: ",
                "// Line 3350:     writer.history_depth(10).",
                "// Line 3351:             property_policy(pub_property_policy).init();",
                "// vulnerable line: 3352: }",
                "// Line 3353: ",
                "// Line 3354: TEST_F(SecurityPkcs, BuiltinAuthenticationAndAccessAndCryptoPlugin_pkcs11_key)",
                "// vulnerable line: 3355: {",
                "// vulnerable line: 3356: {",
                "// Line 3357:         PubSubReader<HelloWorldPubSubType> reader(\"HelloWorldTopic\");",
                "// Line 3358:         PubSubWriter<HelloWorldPubSubType> writer(\"HelloWorldTopic\");",
                "// Line 3359:         prepare_pkcs11_nodes(reader, writer,",
                "// Line 3360:                 tokens[hsm_token_id_no_pin].urls[hsm_mainsubkey_label],",
                "// Line 3361:                 tokens[hsm_token_id_no_pin].urls[hsm_mainpubkey_label]);",
                "// Line 3362: ",
                "// Line 3363:         ASSERT_FALSE(reader.isInitialized());",
                "// Line 3364:         ASSERT_FALSE(writer.isInitialized());",
                "// vulnerable line: 3365: }",
                "// vulnerable line: 3366: {",
                "// Line 3367:         PubSubReader<HelloWorldPubSubType> reader(\"HelloWorldTopic\");",
                "// Line 3368:         PubSubWriter<HelloWorldPubSubType> writer(\"HelloWorldTopic\");",
                "// Line 3369:         prepare_pkcs11_nodes(reader, writer,",
                "// Line 3370:                 tokens[hsm_token_id_url_pin].urls[hsm_mainsubkey_label] + \"?pin-value=\" + hsm_token_pin,",
                "// Line 3371:                 tokens[hsm_token_id_url_pin].urls[hsm_mainpubkey_label] + \"?pin-value=\" + hsm_token_pin);",
                "// Line 3372: ",
                "// Line 3373:         ASSERT_TRUE(reader.isInitialized());",
                "// Line 3374:         ASSERT_TRUE(writer.isInitialized());",
                "// Line 3375: ",
                "// Line 3376:         // Wait for authorization",
                "// Line 3385: ",
                "// Line 3386:         reader.startReception(data);",
                "// Line 3387: ",
                "// Line 3388:         // Send data",
                "// Line 3389:         writer.send(data);",
                "// Line 3390:         // In this test all data should be sent.",
                "// Line 3391:         ASSERT_TRUE(data.empty());",
                "// Line 3392:         // Block reader until reception finished or timeout.",
                "// Line 3393:         reader.block_for_all();",
                "// Line 3394: ",
                "// vulnerable line: 3395: }",
                "// vulnerable line: 3396: {",
                "// Line 3397:         // Set the PIN on the environment variable",
                "// Line 3398: #ifdef _WIN32",
                "// Line 3399:         _putenv_s(\"FASTDDS_PKCS11_PIN\", \"1234\");",
                "// Line 3400: #else",
                "// Line 3401:         setenv(\"FASTDDS_PKCS11_PIN\", \"1234\", 1);",
                "// Line 3402: #endif // ifdef _WIN32",
                "// Line 3403: ",
                "// Line 3404:         PubSubReader<HelloWorldPubSubType> reader(\"HelloWorldTopic\");",
                "// Line 3405:         PubSubWriter<HelloWorldPubSubType> writer(\"HelloWorldTopic\");",
                "// Line 3406:         prepare_pkcs11_nodes(reader, writer,",
                "// Line 3428:         ASSERT_TRUE(data.empty());",
                "// Line 3429:         // Block reader until reception finished or timeout.",
                "// Line 3430:         reader.block_for_all();",
                "// Line 3431: ",
                "// Line 3432:         // unset the PIN environment variable for the next round",
                "// Line 3433: #ifdef _WIN32",
                "// Line 3434:         _putenv_s(\"FASTDDS_PKCS11_PIN\", \"\");",
                "// Line 3435: #else",
                "// Line 3436:         unsetenv(\"FASTDDS_PKCS11_PIN\");",
                "// Line 3437: #endif // ifdef _WIN32",
                "// vulnerable line: 3438: }",
                "// vulnerable line: 3439: }",
                "// Line 3440: ",
                "// Line 3441: static void CommonPermissionsConfigure(",
                "// Line 3442:         PubSubReader<HelloWorldPubSubType>& reader,",
                "// Line 3443:         PubSubWriter<HelloWorldPubSubType>& writer,",
                "// Line 3444:         const std::string& governance_file,",
                "// Line 3445:         const std::string& permissions_file)",
                "// vulnerable line: 3446: {",
                "// Line 3447:     PropertyPolicy sub_property_policy;",
                "// Line 3448:     sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 3449:             \"builtin.PKI-DH\"));",
                "// Line 3450:     sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 3451:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 3452:     sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_certificate\",",
                "// Line 3453:             \"file://\" + std::string(certs_path) + \"/mainsubcert.pem\"));",
                "// Line 3454:     sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.private_key\",",
                "// Line 3455:             \"file://\" + std::string(certs_path) + \"/mainsubkey.pem\"));",
                "// Line 3456:     sub_property_policy.properties().emplace_back(Property(\"dds.sec.crypto.plugin\",",
                "// Line 3478:             \"builtin.AES-GCM-GMAC\"));",
                "// Line 3479:     pub_property_policy.properties().emplace_back(Property(\"dds.sec.access.plugin\",",
                "// Line 3480:             \"builtin.Access-Permissions\"));",
                "// Line 3481:     pub_property_policy.properties().emplace_back(Property(\"dds.sec.access.builtin.Access-Permissions.permissions_ca\",",
                "// Line 3482:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 3483:     pub_property_policy.properties().emplace_back(Property(\"dds.sec.access.builtin.Access-Permissions.governance\",",
                "// Line 3484:             \"file://\" + std::string(certs_path) + \"/\" + governance_file));",
                "// Line 3485:     pub_property_policy.properties().emplace_back(Property(\"dds.sec.access.builtin.Access-Permissions.permissions\",",
                "// Line 3486:             \"file://\" + std::string(certs_path) + \"/\" + permissions_file));",
                "// Line 3487:     writer.property_policy(pub_property_policy);",
                "// vulnerable line: 3488: }",
                "// Line 3489: ",
                "// Line 3490: static void BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(",
                "// Line 3491:         PubSubReader<HelloWorldPubSubType>& reader,",
                "// Line 3492:         PubSubWriter<HelloWorldPubSubType>& writer,",
                "// Line 3493:         const std::string& governance_file)",
                "// vulnerable line: 3494: {",
                "// Line 3495:     CommonPermissionsConfigure(reader, writer, governance_file, \"permissions.smime\");",
                "// Line 3496: ",
                "// Line 3497:     reader.history_depth(10).reliability(eprosima::fastrtps::RELIABLE_RELIABILITY_QOS).init();",
                "// Line 3498:     ASSERT_TRUE(reader.isInitialized());",
                "// Line 3499: ",
                "// Line 3500:     writer.history_depth(10).init();",
                "// Line 3501:     ASSERT_TRUE(writer.isInitialized());",
                "// Line 3502: ",
                "// Line 3503:     // Wait for authorization",
                "// Line 3504:     reader.waitAuthorized();",
                "// Line 3511:     auto data = default_helloworld_data_generator();",
                "// Line 3512: ",
                "// Line 3513:     reader.startReception(data);",
                "// Line 3514: ",
                "// Line 3515:     // Send data",
                "// Line 3516:     writer.send(data);",
                "// Line 3517:     // In this test all data should be sent.",
                "// Line 3518:     ASSERT_TRUE(data.empty());",
                "// Line 3519:     // Block reader until reception finished or timeout.",
                "// Line 3520:     reader.block_for_all();",
                "// vulnerable line: 3521: }",
                "// Line 3522: ",
                "// Line 3523: // Regression test of Refs #16168, Github #3102.",
                "// Line 3524: TEST_P(Security, RemoveParticipantProxyDataonSecurityManagerLeaseExpired_validation_no_deadlock)",
                "// vulnerable line: 3525: {",
                "// Line 3526:     std::string governance_file(\"governance_helloworld_disable_liveliness.smime\");",
                "// Line 3527:     std::string permissions_file(\"permissions_helloworld.smime\");",
                "// Line 3528: ",
                "// Line 3529:     //!Lambda for configuring publisher participant qos and security properties",
                "// Line 3530:     auto secure_participant_pub_configurator = [&governance_file,",
                "// Line 3531:                     &permissions_file](const std::shared_ptr<PubSubWriter<HelloWorldPubSubType>>& part,",
                "// Line 3532:                     const std::shared_ptr<eprosima::fastdds::rtps::TransportDescriptorInterface>& interface)",
                "// vulnerable line: 3533: {",
                "// Line 3534:                 part->lease_duration(3, 1);",
                "// Line 3535:                 part->disable_builtin_transport().add_user_transport_to_pparams(interface);",
                "// Line 3536: ",
                "// Line 3537:                 PropertyPolicy property_policy;",
                "// Line 3538: ",
                "// Line 3539:                 property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 3540:                         \"builtin.PKI-DH\"));",
                "// Line 3541:                 property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 3542:                         \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 3543:                 property_policy.properties().emplace_back(Property(\"dds.sec.crypto.plugin\",",
                "// Line 3555:                             \"dds.sec.access.builtin.Access-Permissions.governance\",",
                "// Line 3556:                             \"file://\" + std::string(certs_path) + \"/\" + governance_file));",
                "// Line 3557:                 property_policy.properties().emplace_back(Property(",
                "// Line 3558:                             \"dds.sec.access.builtin.Access-Permissions.permissions\",",
                "// Line 3559:                             \"file://\" + std::string(certs_path) + \"/\" + permissions_file));",
                "// Line 3560: ",
                "// Line 3561:                 std::cout << \" Configuring Publisher Participant Properties \" << std::endl;",
                "// Line 3562: ",
                "// Line 3563:                 part->property_policy(property_policy);",
                "// Line 3564: ",
                "// vulnerable line: 3565: };",
                "// Line 3566:     //!Lambda for configuring subscriber participant qos and security properties",
                "// Line 3567:     auto secure_participant_sub_configurator = [&governance_file,",
                "// Line 3568:                     &permissions_file](const std::shared_ptr<PubSubReader<HelloWorldPubSubType>>& part,",
                "// Line 3569:                     const std::shared_ptr<eprosima::fastdds::rtps::TransportDescriptorInterface>& interface)",
                "// vulnerable line: 3570: {",
                "// Line 3571:                 part->lease_duration(3, 1);",
                "// Line 3572:                 part->disable_builtin_transport().add_user_transport_to_pparams(interface);",
                "// Line 3573: ",
                "// Line 3574:                 PropertyPolicy property_policy;",
                "// Line 3575: ",
                "// Line 3576:                 property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 3577:                         \"builtin.PKI-DH\"));",
                "// Line 3578:                 property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 3579:                         \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 3580:                 property_policy.properties().emplace_back(Property(\"dds.sec.crypto.plugin\",",
                "// Line 3592:                             \"dds.sec.access.builtin.Access-Permissions.governance\",",
                "// Line 3593:                             \"file://\" + std::string(certs_path) + \"/\" + governance_file));",
                "// Line 3594:                 property_policy.properties().emplace_back(Property(",
                "// Line 3595:                             \"dds.sec.access.builtin.Access-Permissions.permissions\",",
                "// Line 3596:                             \"file://\" + std::string(certs_path) + \"/\" + permissions_file));",
                "// Line 3597: ",
                "// Line 3598:                 std::cout << \" Configuring Subscriber Participant Properties \" << std::endl;",
                "// Line 3599: ",
                "// Line 3600:                 part->property_policy(property_policy);",
                "// Line 3601: ",
                "// vulnerable line: 3602: };",
                "// Line 3603: ",
                "// Line 3604:     //! 1.Spawn a couple of participants writer/reader",
                "// Line 3605:     std::string topic_name = \"HelloWorldTopic\";",
                "// Line 3606:     auto pubsub_writer = std::make_shared<PubSubWriter<HelloWorldPubSubType>>(topic_name);",
                "// Line 3607:     auto pubsub_reader = std::make_shared<PubSubReader<HelloWorldPubSubType>>(topic_name);",
                "// Line 3608: ",
                "// Line 3609:     // Initialization of all the participants",
                "// Line 3610:     std::cout << \"Initializing PubSubs for topic \" << topic_name << std::endl;",
                "// Line 3611: ",
                "// Line 3612:     auto test_udptransport = std::make_shared<test_UDPv4TransportDescriptor>();",
                "// Line 3650: ",
                "// Line 3651:     //! 8.Wait reader to remove writer participant",
                "// Line 3652:     //! Writer participant lease duration will expire in 3 secs",
                "// Line 3653:     //! Check if deadlock is produced when accessing ResourceEvent collection",
                "// Line 3654:     //! to unregister a TimedEvent() in ResourceEvent",
                "// Line 3655:     pubsub_writer_undiscovered = pubsub_reader->wait_participant_undiscovery(std::chrono::seconds(6));",
                "// Line 3656: ",
                "// Line 3657:     //! 9.Assert if last operation timed out",
                "// Line 3658:     ASSERT_TRUE(pubsub_writer_undiscovered);",
                "// Line 3659: ",
                "// vulnerable line: 3660: }",
                "// Line 3661: ",
                "// Line 3662: TEST(Security, AllowUnauthenticatedParticipants_EntityCreationFailsIfRTPSProtectionIsNotNONE)",
                "// vulnerable line: 3663: {",
                "// Line 3664:     PubSubReader<HelloWorldPubSubType> reader(\"HelloWorldTopic\");",
                "// Line 3665:     std::string governance_file(\"governance_allow_unauth_rtps_encrypt.smime\");",
                "// Line 3666: ",
                "// Line 3667:     PropertyPolicy property_policy;",
                "// Line 3668: ",
                "// Line 3669:     property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 3670:             \"builtin.PKI-DH\"));",
                "// Line 3671:     property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 3672:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 3673:     property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_certificate\",",
                "// Line 3684:     property_policy.properties().emplace_back(Property(\"dds.sec.access.builtin.Access-Permissions.governance\",",
                "// Line 3685:             \"file://\" + std::string(certs_path) + \"/\" + governance_file));",
                "// Line 3686:     property_policy.properties().emplace_back(Property(\"dds.sec.access.builtin.Access-Permissions.permissions\",",
                "// Line 3687:             \"file://\" + std::string(certs_path) + \"/permissions_helloworld.smime\"));",
                "// Line 3688: ",
                "// Line 3689:     reader.property_policy(property_policy).init();",
                "// Line 3690: ",
                "// Line 3691:     //! If allow_unauthenticated_participants TRUE and rtps_protection is not NONE",
                "// Line 3692:     //! Entity creation must fail",
                "// Line 3693:     ASSERT_FALSE(reader.isInitialized());",
                "// vulnerable line: 3694: }",
                "// Line 3695: ",
                "// Line 3696: ",
                "// Line 3697: TEST(Security, AllowUnauthenticatedParticipants_TwoSecureParticipantsWithDifferentCertificatesAreAbleToMatch)",
                "// vulnerable line: 3698: {",
                "// Line 3699:     //! Create",
                "// Line 3700:     PubSubReader<HelloWorldPubSubType> reader(\"HelloWorldTopic\");",
                "// Line 3701:     PubSubWriter<HelloWorldPubSubType> writer(\"HelloWorldTopic\");",
                "// Line 3702: ",
                "// Line 3703:     PropertyPolicy pub_property_policy, sub_property_policy;",
                "// Line 3704: ",
                "// Line 3705:     sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 3706:             \"builtin.PKI-DH\"));",
                "// Line 3707:     sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 3708:             \"file://\" + std::string(certs_path) + \"/othercacert.pem\"));",
                "// Line 3767:     reader.startReception(data);",
                "// Line 3768: ",
                "// Line 3769:     writer.send(data);",
                "// Line 3770: ",
                "// Line 3771:     // In this test all data should be sent.",
                "// Line 3772:     ASSERT_TRUE(data.empty());",
                "// Line 3773: ",
                "// Line 3774:     // Block reader until reception finished or timeout.",
                "// Line 3775:     reader.block_for_all();",
                "// Line 3776: ",
                "// vulnerable line: 3777: }",
                "// Line 3778: ",
                "// Line 3779: TEST(Security, AllowUnauthenticatedParticipants_TwoParticipantsDifferentCertificatesWithReadWriteProtectionDoNotMatch)",
                "// vulnerable line: 3780: {",
                "// Line 3781:     //! Create",
                "// Line 3782:     PubSubReader<HelloWorldPubSubType> reader(\"HelloWorldTopic\");",
                "// Line 3783:     PubSubWriter<HelloWorldPubSubType> writer(\"HelloWorldTopic\");",
                "// Line 3784: ",
                "// Line 3785:     PropertyPolicy pub_property_policy, sub_property_policy;",
                "// Line 3786: ",
                "// Line 3787:     sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 3788:             \"builtin.PKI-DH\"));",
                "// Line 3789:     sub_property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 3790:             \"file://\" + std::string(certs_path) + \"/othercacert.pem\"));",
                "// Line 3838:     //! Wait for the authorization to fail (~15secs)",
                "// Line 3839:     writer.waitUnauthorized();",
                "// Line 3840: ",
                "// Line 3841:     //! Wait some time afterwards (this will time out)",
                "// Line 3842:     writer.wait_discovery(std::chrono::seconds(1));",
                "// Line 3843: ",
                "// Line 3844:     //! check that the writer does not match the reader because of",
                "// Line 3845:     //! having read and write protection enabled",
                "// Line 3846:     //! despite allow_unauthenticated_participants is enabled",
                "// Line 3847:     ASSERT_FALSE(writer.is_matched());",
                "// vulnerable line: 3848: }",
                "// Line 3849: ",
                "// Line 3850: // Regresion test for redmine issue 20166",
                "// Line 3851: TEST(Security, InANonSecureParticipantWithTwoSecureParticipantScenario_TheTwoSecureParticipantsCorrectlyCommunicate)",
                "// vulnerable line: 3852: {",
                "// Line 3853:     // Create",
                "// Line 3854:     PubSubReader<HelloWorldPubSubType> non_secure_reader(\"HelloWorldTopic\");",
                "// Line 3855:     PubSubReader<HelloWorldPubSubType> secure_reader(\"HelloWorldTopic\");",
                "// Line 3856:     PubSubWriter<HelloWorldPubSubType> secure_writer(\"HelloWorldTopic\");",
                "// Line 3857: ",
                "// Line 3858:     // Configure security",
                "// Line 3859:     const std::string governance_file(\"governance_helloworld_all_enable.smime\");",
                "// Line 3860:     const std::string permissions_file(\"permissions_helloworld.smime\");",
                "// Line 3861:     CommonPermissionsConfigure(secure_reader, secure_writer, governance_file, permissions_file);",
                "// Line 3862: ",
                "// Line 3888: ",
                "// Line 3889:     secure_reader.startReception(data);",
                "// Line 3890: ",
                "// Line 3891:     secure_writer.send(data);",
                "// Line 3892: ",
                "// Line 3893:     // In this test all data should be sent.",
                "// Line 3894:     ASSERT_TRUE(data.empty());",
                "// Line 3895: ",
                "// Line 3896:     secure_reader.block_for_all();",
                "// Line 3897:     EXPECT_EQ(non_secure_reader.getReceivedCount(), 0u);",
                "// vulnerable line: 3898: }",
                "// Line 3899: ",
                "// Line 3900: // *INDENT-OFF*",
                "// Line 3901: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsDisableDiscoveryDisableAccessEncrypt_validation_ok_enable_discovery_enable_access_encrypt)",
                "// Line 3902: // *INDENT-ON*",
                "// vulnerable line: 3903: {",
                "// Line 3904:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 3905:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 3906:     std::string governance_file(\"governance_disable_discovery_disable_access_encrypt.smime\");",
                "// Line 3907: ",
                "// Line 3908:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 3909: }",
                "// Line 3910: ",
                "// Line 3911: // *INDENT-OFF*",
                "// Line 3912: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsDisableDiscoveryDisableAccessEncrypt_validation_ok_disable_discovery_enable_access_encrypt)",
                "// Line 3913: // *INDENT-ON*",
                "// vulnerable line: 3914: {",
                "// Line 3915:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 3916:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 3917:     std::string governance_file(\"governance_disable_discovery_disable_access_encrypt.smime\");",
                "// Line 3918: ",
                "// Line 3919:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 3920: }",
                "// Line 3921: ",
                "// Line 3922: // *INDENT-OFF*",
                "// Line 3923: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsDisableDiscoveryDisableAccessEncrypt_validation_ok_disable_discovery_disable_access_encrypt)",
                "// Line 3924: // *INDENT-ON*",
                "// vulnerable line: 3925: {",
                "// Line 3926:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 3927:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 3928:     std::string governance_file(\"governance_disable_discovery_disable_access_encrypt.smime\");",
                "// Line 3929: ",
                "// Line 3930:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 3931: }",
                "// Line 3932: ",
                "// Line 3933: // *INDENT-OFF*",
                "// Line 3934: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsDisableDiscoveryDisableAccessEncrypt_validation_ok_enable_discovery_disable_access_encrypt)",
                "// Line 3935: // *INDENT-ON*",
                "// vulnerable line: 3936: {",
                "// Line 3937:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 3938:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 3939:     std::string governance_file(\"governance_disable_discovery_disable_access_encrypt.smime\");",
                "// Line 3940: ",
                "// Line 3941:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 3942: }",
                "// Line 3943: ",
                "// Line 3944: // *INDENT-OFF*",
                "// Line 3945: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsDisableDiscoveryDisableAccessEncrypt_validation_ok_enable_discovery_enable_access_none)",
                "// Line 3946: // *INDENT-ON*",
                "// vulnerable line: 3947: {",
                "// Line 3948:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 3949:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 3950:     std::string governance_file(\"governance_disable_discovery_disable_access_encrypt.smime\");",
                "// Line 3951: ",
                "// Line 3952:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 3953: }",
                "// Line 3954: ",
                "// Line 3955: // *INDENT-OFF*",
                "// Line 3956: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsDisableDiscoveryDisableAccessEncrypt_validation_ok_disable_discovery_enable_access_none)",
                "// Line 3957: // *INDENT-ON*",
                "// vulnerable line: 3958: {",
                "// Line 3959:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 3960:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 3961:     std::string governance_file(\"governance_disable_discovery_disable_access_encrypt.smime\");",
                "// Line 3962: ",
                "// Line 3963:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 3964: }",
                "// Line 3965: ",
                "// Line 3966: // *INDENT-OFF*",
                "// Line 3967: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsDisableDiscoveryDisableAccessEncrypt_validation_ok_disable_discovery_disable_access_none)",
                "// Line 3968: // *INDENT-ON*",
                "// vulnerable line: 3969: {",
                "// Line 3970:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 3971:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 3972:     std::string governance_file(\"governance_disable_discovery_disable_access_encrypt.smime\");",
                "// Line 3973: ",
                "// Line 3974:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 3975: }",
                "// Line 3976: ",
                "// Line 3977: // *INDENT-OFF*",
                "// Line 3978: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsDisableDiscoveryDisableAccessEncrypt_validation_ok_enable_discovery_disable_access_none)",
                "// Line 3979: // *INDENT-ON*",
                "// vulnerable line: 3980: {",
                "// Line 3981:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 3982:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 3983:     std::string governance_file(\"governance_disable_discovery_disable_access_encrypt.smime\");",
                "// Line 3984: ",
                "// Line 3985:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 3986: }",
                "// Line 3987: ",
                "// Line 3988: // *INDENT-OFF*",
                "// Line 3989: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsDisableDiscoveryDisableAccessNone_validation_ok_enable_discovery_enable_access_encrypt)",
                "// Line 3990: // *INDENT-ON*",
                "// vulnerable line: 3991: {",
                "// Line 3992:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 3993:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 3994:     std::string governance_file(\"governance_disable_discovery_disable_access_none.smime\");",
                "// Line 3995: ",
                "// Line 3996:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 3997: }",
                "// Line 3998: ",
                "// Line 3999: // *INDENT-OFF*",
                "// Line 4000: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsDisableDiscoveryDisableAccessNone_validation_ok_disable_discovery_enable_access_encrypt)",
                "// Line 4001: // *INDENT-ON*",
                "// vulnerable line: 4002: {",
                "// Line 4003:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4004:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4005:     std::string governance_file(\"governance_disable_discovery_disable_access_none.smime\");",
                "// Line 4006: ",
                "// Line 4007:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4008: }",
                "// Line 4009: ",
                "// Line 4010: // *INDENT-OFF*",
                "// Line 4011: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsDisableDiscoveryDisableAccessNone_validation_ok_disable_discovery_disable_access_encrypt)",
                "// Line 4012: // *INDENT-ON*",
                "// vulnerable line: 4013: {",
                "// Line 4014:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4015:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4016:     std::string governance_file(\"governance_disable_discovery_disable_access_none.smime\");",
                "// Line 4017: ",
                "// Line 4018:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4019: }",
                "// Line 4020: ",
                "// Line 4021: // *INDENT-OFF*",
                "// Line 4022: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsDisableDiscoveryDisableAccessNone_validation_ok_enable_discovery_disable_access_encrypt)",
                "// Line 4023: // *INDENT-ON*",
                "// vulnerable line: 4024: {",
                "// Line 4025:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4026:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4027:     std::string governance_file(\"governance_disable_discovery_disable_access_none.smime\");",
                "// Line 4028: ",
                "// Line 4029:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4030: }",
                "// Line 4031: ",
                "// Line 4032: // *INDENT-OFF*",
                "// Line 4033: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsDisableDiscoveryDisableAccessNone_validation_ok_enable_discovery_enable_access_none)",
                "// Line 4034: // *INDENT-ON*",
                "// vulnerable line: 4035: {",
                "// Line 4036:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4037:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4038:     std::string governance_file(\"governance_disable_discovery_disable_access_none.smime\");",
                "// Line 4039: ",
                "// Line 4040:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4041: }",
                "// Line 4042: ",
                "// Line 4043: // *INDENT-OFF*",
                "// Line 4044: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsDisableDiscoveryDisableAccessNone_validation_ok_disable_discovery_enable_access_none)",
                "// Line 4045: // *INDENT-ON*",
                "// vulnerable line: 4046: {",
                "// Line 4047:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4048:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4049:     std::string governance_file(\"governance_disable_discovery_disable_access_none.smime\");",
                "// Line 4050: ",
                "// Line 4051:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4052: }",
                "// Line 4053: ",
                "// Line 4054: // *INDENT-OFF*",
                "// Line 4055: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsDisableDiscoveryDisableAccessNone_validation_ok_disable_discovery_disable_access_none)",
                "// Line 4056: // *INDENT-ON*",
                "// vulnerable line: 4057: {",
                "// Line 4058:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4059:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4060:     std::string governance_file(\"governance_disable_discovery_disable_access_none.smime\");",
                "// Line 4061: ",
                "// Line 4062:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4063: }",
                "// Line 4064: ",
                "// Line 4065: ",
                "// Line 4066: // *INDENT-OFF*",
                "// Line 4067: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsDisableDiscoveryDisableAccessNone_validation_ok_enable_discovery_disable_access_none)",
                "// Line 4068: // *INDENT-ON*",
                "// vulnerable line: 4069: {",
                "// Line 4070:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4071:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4072:     std::string governance_file(\"governance_disable_discovery_disable_access_none.smime\");",
                "// Line 4073: ",
                "// Line 4074:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4075: }",
                "// Line 4076: ",
                "// Line 4077: // *INDENT-OFF*",
                "// Line 4078: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsDisableDiscoveryEnableAccessEncrypt_validation_ok_enable_discovery_enable_access_encrypt)",
                "// Line 4079: // *INDENT-ON*",
                "// vulnerable line: 4080: {",
                "// Line 4081:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4082:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4083:     std::string governance_file(\"governance_disable_discovery_enable_access_encrypt.smime\");",
                "// Line 4084: ",
                "// Line 4085:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4086: }",
                "// Line 4087: ",
                "// Line 4088: // *INDENT-OFF*",
                "// Line 4089: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsDisableDiscoveryEnableAccessEncrypt_validation_ok_disable_discovery_enable_access_encrypt)",
                "// Line 4090: // *INDENT-ON*",
                "// vulnerable line: 4091: {",
                "// Line 4092:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4093:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4094:     std::string governance_file(\"governance_disable_discovery_enable_access_encrypt.smime\");",
                "// Line 4095: ",
                "// Line 4096:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4097: }",
                "// Line 4098: ",
                "// Line 4099: // *INDENT-OFF*",
                "// Line 4100: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsDisableDiscoveryEnableAccessEncrypt_validation_ok_disable_discovery_disable_access_encrypt)",
                "// Line 4101: // *INDENT-ON*",
                "// vulnerable line: 4102: {",
                "// Line 4103:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4104:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4105:     std::string governance_file(\"governance_disable_discovery_enable_access_encrypt.smime\");",
                "// Line 4106: ",
                "// Line 4107:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4108: }",
                "// Line 4109: ",
                "// Line 4110: // *INDENT-OFF*",
                "// Line 4111: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsDisableDiscoveryEnableAccessEncrypt_validation_ok_enable_discovery_disable_access_encrypt)",
                "// Line 4112: // *INDENT-ON*",
                "// vulnerable line: 4113: {",
                "// Line 4114:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4115:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4116:     std::string governance_file(\"governance_disable_discovery_enable_access_encrypt.smime\");",
                "// Line 4117: ",
                "// Line 4118:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4119: }",
                "// Line 4120: ",
                "// Line 4121: // *INDENT-OFF*",
                "// Line 4122: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsDisableDiscoveryEnableAccessEncrypt_validation_ok_enable_discovery_enable_access_none)",
                "// Line 4123: // *INDENT-ON*",
                "// vulnerable line: 4124: {",
                "// Line 4125:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4126:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4127:     std::string governance_file(\"governance_disable_discovery_enable_access_encrypt.smime\");",
                "// Line 4128: ",
                "// Line 4129:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4130: }",
                "// Line 4131: ",
                "// Line 4132: // *INDENT-OFF*",
                "// Line 4133: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsDisableDiscoveryEnableAccessEncrypt_validation_ok_disable_discovery_enable_access_none)",
                "// Line 4134: // *INDENT-ON*",
                "// vulnerable line: 4135: {",
                "// Line 4136:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4137:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4138:     std::string governance_file(\"governance_disable_discovery_enable_access_encrypt.smime\");",
                "// Line 4139: ",
                "// Line 4140:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4141: }",
                "// Line 4142: ",
                "// Line 4143: // *INDENT-OFF*",
                "// Line 4144: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsDisableDiscoveryEnableAccessEncrypt_validation_ok_disable_discovery_disable_access_none)",
                "// Line 4145: // *INDENT-ON*",
                "// vulnerable line: 4146: {",
                "// Line 4147:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4148:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4149:     std::string governance_file(\"governance_disable_discovery_enable_access_encrypt.smime\");",
                "// Line 4150: ",
                "// Line 4151:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4152: }",
                "// Line 4153: ",
                "// Line 4154: ",
                "// Line 4155: // *INDENT-OFF*",
                "// Line 4156: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsDisableDiscoveryEnableAccessEncrypt_validation_ok_enable_discovery_disable_access_none)",
                "// Line 4157: // *INDENT-ON*",
                "// vulnerable line: 4158: {",
                "// Line 4159:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4160:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4161:     std::string governance_file(\"governance_disable_discovery_enable_access_encrypt.smime\");",
                "// Line 4162: ",
                "// Line 4163:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4164: }",
                "// Line 4165: ",
                "// Line 4166: // *INDENT-OFF*",
                "// Line 4167: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsDisableDiscoveryEnableAccessNone_validation_ok_enable_discovery_enable_access_encrypt)",
                "// Line 4168: // *INDENT-ON*",
                "// vulnerable line: 4169: {",
                "// Line 4170:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4171:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4172:     std::string governance_file(\"governance_disable_discovery_enable_access_none.smime\");",
                "// Line 4173: ",
                "// Line 4174:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4175: }",
                "// Line 4176: ",
                "// Line 4177: // *INDENT-OFF*",
                "// Line 4178: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsDisableDiscoveryEnableAccessNone_validation_ok_disable_discovery_enable_access_encrypt)",
                "// Line 4179: // *INDENT-ON*",
                "// vulnerable line: 4180: {",
                "// Line 4181:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4182:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4183:     std::string governance_file(\"governance_disable_discovery_enable_access_none.smime\");",
                "// Line 4184: ",
                "// Line 4185:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4186: }",
                "// Line 4187: ",
                "// Line 4188: // *INDENT-OFF*",
                "// Line 4189: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsDisableDiscoveryEnableAccessNone_validation_ok_disable_discovery_disable_access_encrypt)",
                "// Line 4190: // *INDENT-ON*",
                "// vulnerable line: 4191: {",
                "// Line 4192:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4193:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4194:     std::string governance_file(\"governance_disable_discovery_enable_access_none.smime\");",
                "// Line 4195: ",
                "// Line 4196:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4197: }",
                "// Line 4198: ",
                "// Line 4199: // *INDENT-OFF*",
                "// Line 4200: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsDisableDiscoveryEnableAccessNone_validation_ok_enable_discovery_disable_access_encrypt)",
                "// Line 4201: // *INDENT-ON*",
                "// vulnerable line: 4202: {",
                "// Line 4203:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4204:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4205:     std::string governance_file(\"governance_disable_discovery_enable_access_none.smime\");",
                "// Line 4206: ",
                "// Line 4207:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4208: }",
                "// Line 4209: ",
                "// Line 4210: // *INDENT-OFF*",
                "// Line 4211: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsDisableDiscoveryEnableAccessNone_validation_ok_enable_discovery_enable_access_none)",
                "// Line 4212: // *INDENT-ON*",
                "// vulnerable line: 4213: {",
                "// Line 4214:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4215:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4216:     std::string governance_file(\"governance_disable_discovery_enable_access_none.smime\");",
                "// Line 4217: ",
                "// Line 4218:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4219: }",
                "// Line 4220: ",
                "// Line 4221: // *INDENT-OFF*",
                "// Line 4222: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsDisableDiscoveryEnableAccessNone_validation_ok_disable_discovery_enable_access_none)",
                "// Line 4223: // *INDENT-ON*",
                "// vulnerable line: 4224: {",
                "// Line 4225:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4226:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4227:     std::string governance_file(\"governance_disable_discovery_enable_access_none.smime\");",
                "// Line 4228: ",
                "// Line 4229:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4230: }",
                "// Line 4231: ",
                "// Line 4232: // *INDENT-OFF*",
                "// Line 4233: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsDisableDiscoveryEnableAccessNone_validation_ok_disable_discovery_disable_access_none)",
                "// Line 4234: // *INDENT-ON*",
                "// vulnerable line: 4235: {",
                "// Line 4236:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4237:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4238:     std::string governance_file(\"governance_disable_discovery_enable_access_none.smime\");",
                "// Line 4239: ",
                "// Line 4240:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4241: }",
                "// Line 4242: ",
                "// Line 4243: // *INDENT-OFF*",
                "// Line 4244: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsDisableDiscoveryEnableAccessNone_validation_ok_enable_discovery_disable_access_none)",
                "// Line 4245: // *INDENT-ON*",
                "// vulnerable line: 4246: {",
                "// Line 4247:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4248:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4249:     std::string governance_file(\"governance_disable_discovery_enable_access_none.smime\");",
                "// Line 4250: ",
                "// Line 4251:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4252: }",
                "// Line 4253: ",
                "// Line 4254: // *INDENT-OFF*",
                "// Line 4255: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsEnableDiscoveryDisableAccessEncrypt_validation_ok_enable_discovery_enable_access_encrypt)",
                "// Line 4256: // *INDENT-ON*",
                "// vulnerable line: 4257: {",
                "// Line 4258:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4259:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4260:     std::string governance_file(\"governance_enable_discovery_disable_access_encrypt.smime\");",
                "// Line 4261: ",
                "// Line 4262:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4263: }",
                "// Line 4264: ",
                "// Line 4265: // *INDENT-OFF*",
                "// Line 4266: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsEnableDiscoveryDisableAccessEncrypt_validation_ok_disable_discovery_enable_access_encrypt)",
                "// Line 4267: // *INDENT-ON*",
                "// vulnerable line: 4268: {",
                "// Line 4269:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4270:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4271:     std::string governance_file(\"governance_enable_discovery_disable_access_encrypt.smime\");",
                "// Line 4272: ",
                "// Line 4273:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4274: }",
                "// Line 4275: ",
                "// Line 4276: // *INDENT-OFF*",
                "// Line 4277: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsEnableDiscoveryDisableAccessEncrypt_validation_ok_disable_discovery_disable_access_encrypt)",
                "// Line 4278: // *INDENT-ON*",
                "// vulnerable line: 4279: {",
                "// Line 4280:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4281:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4282:     std::string governance_file(\"governance_enable_discovery_disable_access_encrypt.smime\");",
                "// Line 4283: ",
                "// Line 4284:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4285: }",
                "// Line 4286: ",
                "// Line 4287: // *INDENT-OFF*",
                "// Line 4288: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsEnableDiscoveryDisableAccessEncrypt_validation_ok_enable_discovery_disable_access_encrypt)",
                "// Line 4289: // *INDENT-ON*",
                "// vulnerable line: 4290: {",
                "// Line 4291:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4292:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4293:     std::string governance_file(\"governance_enable_discovery_disable_access_encrypt.smime\");",
                "// Line 4294: ",
                "// Line 4295:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4296: }",
                "// Line 4297: ",
                "// Line 4298: // *INDENT-OFF*",
                "// Line 4299: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsEnableDiscoveryDisableAccessEncrypt_validation_ok_enable_discovery_enable_access_none)",
                "// Line 4300: // *INDENT-ON*",
                "// vulnerable line: 4301: {",
                "// Line 4302:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4303:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4304:     std::string governance_file(\"governance_enable_discovery_disable_access_encrypt.smime\");",
                "// Line 4305: ",
                "// Line 4306:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4307: }",
                "// Line 4308: ",
                "// Line 4309: // *INDENT-OFF*",
                "// Line 4310: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsEnableDiscoveryDisableAccessEncrypt_validation_ok_disable_discovery_enable_access_none)",
                "// Line 4311: // *INDENT-ON*",
                "// vulnerable line: 4312: {",
                "// Line 4313:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4314:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4315:     std::string governance_file(\"governance_enable_discovery_disable_access_encrypt.smime\");",
                "// Line 4316: ",
                "// Line 4317:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4318: }",
                "// Line 4319: ",
                "// Line 4320: // *INDENT-OFF*",
                "// Line 4321: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsEnableDiscoveryDisableAccessEncrypt_validation_ok_disable_discovery_disable_access_none)",
                "// Line 4322: // *INDENT-ON*",
                "// vulnerable line: 4323: {",
                "// Line 4324:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4325:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4326:     std::string governance_file(\"governance_enable_discovery_disable_access_encrypt.smime\");",
                "// Line 4327: ",
                "// Line 4328:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4329: }",
                "// Line 4330: ",
                "// Line 4331: // *INDENT-OFF*",
                "// Line 4332: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsEnableDiscoveryDisableAccessEncrypt_validation_ok_enable_discovery_disable_access_none)",
                "// Line 4333: // *INDENT-ON*",
                "// vulnerable line: 4334: {",
                "// Line 4335:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4336:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4337:     std::string governance_file(\"governance_enable_discovery_disable_access_encrypt.smime\");",
                "// Line 4338: ",
                "// Line 4339:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4340: }",
                "// Line 4341: ",
                "// Line 4342: // *INDENT-OFF*",
                "// Line 4343: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsEnableDiscoveryDisableAccessNone_validation_ok_enable_discovery_enable_access_encrypt)",
                "// Line 4344: // *INDENT-ON*",
                "// vulnerable line: 4345: {",
                "// Line 4346:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4347:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4348:     std::string governance_file(\"governance_enable_discovery_disable_access_none.smime\");",
                "// Line 4349: ",
                "// Line 4350:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4351: }",
                "// Line 4352: ",
                "// Line 4353: // *INDENT-OFF*",
                "// Line 4354: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsEnableDiscoveryDisableAccessNone_validation_ok_disable_discovery_enable_access_encrypt)",
                "// Line 4355: // *INDENT-ON*",
                "// vulnerable line: 4356: {",
                "// Line 4357:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4358:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4359:     std::string governance_file(\"governance_enable_discovery_disable_access_none.smime\");",
                "// Line 4360: ",
                "// Line 4361:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4362: }",
                "// Line 4363: ",
                "// Line 4364: // *INDENT-OFF*",
                "// Line 4365: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsEnableDiscoveryDisableAccessNone_validation_ok_disable_discovery_disable_access_encrypt)",
                "// Line 4366: // *INDENT-ON*",
                "// vulnerable line: 4367: {",
                "// Line 4368:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4369:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4370:     std::string governance_file(\"governance_enable_discovery_disable_access_none.smime\");",
                "// Line 4371: ",
                "// Line 4372:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4373: }",
                "// Line 4374: ",
                "// Line 4375: // *INDENT-OFF*",
                "// Line 4376: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsEnableDiscoveryDisableAccessNone_validation_ok_enable_discovery_disable_access_encrypt)",
                "// Line 4377: // *INDENT-ON*",
                "// vulnerable line: 4378: {",
                "// Line 4379:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4380:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4381:     std::string governance_file(\"governance_enable_discovery_disable_access_none.smime\");",
                "// Line 4382: ",
                "// Line 4383:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4384: }",
                "// Line 4385: ",
                "// Line 4386: // *INDENT-OFF*",
                "// Line 4387: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsEnableDiscoveryDisableAccessNone_validation_ok_enable_discovery_enable_access_none)",
                "// Line 4388: // *INDENT-ON*",
                "// vulnerable line: 4389: {",
                "// Line 4390:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4391:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4392:     std::string governance_file(\"governance_enable_discovery_disable_access_none.smime\");",
                "// Line 4393: ",
                "// Line 4394:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4395: }",
                "// Line 4396: ",
                "// Line 4397: // *INDENT-OFF*",
                "// Line 4398: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsEnableDiscoveryDisableAccessNone_validation_ok_disable_discovery_enable_access_none)",
                "// Line 4399: // *INDENT-ON*",
                "// vulnerable line: 4400: {",
                "// Line 4401:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4402:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4403:     std::string governance_file(\"governance_enable_discovery_disable_access_none.smime\");",
                "// Line 4404: ",
                "// Line 4405:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4406: }",
                "// Line 4407: ",
                "// Line 4408: // *INDENT-OFF*",
                "// Line 4409: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsEnableDiscoveryDisableAccessNone_validation_ok_disable_discovery_disable_access_none)",
                "// Line 4410: // *INDENT-ON*",
                "// vulnerable line: 4411: {",
                "// Line 4412:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4413:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4414:     std::string governance_file(\"governance_enable_discovery_disable_access_none.smime\");",
                "// Line 4415: ",
                "// Line 4416:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4417: }",
                "// Line 4418: ",
                "// Line 4419: // *INDENT-OFF*",
                "// Line 4420: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsEnableDiscoveryDisableAccessNone_validation_ok_enable_discovery_disable_access_none)",
                "// Line 4421: // *INDENT-ON*",
                "// vulnerable line: 4422: {",
                "// Line 4423:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4424:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4425:     std::string governance_file(\"governance_enable_discovery_disable_access_none.smime\");",
                "// Line 4426: ",
                "// Line 4427:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4428: }",
                "// Line 4429: ",
                "// Line 4430: // *INDENT-OFF*",
                "// Line 4431: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsEnableDiscoveryEnableAccessEncrypt_validation_ok_enable_discovery_enable_access_encrypt)",
                "// Line 4432: // *INDENT-ON*",
                "// vulnerable line: 4433: {",
                "// Line 4434:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4435:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4436:     std::string governance_file(\"governance_enable_discovery_enable_access_encrypt.smime\");",
                "// Line 4437: ",
                "// Line 4438:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4439: }",
                "// Line 4440: ",
                "// Line 4441: // *INDENT-OFF*",
                "// Line 4442: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsEnableDiscoveryEnableAccessEncrypt_validation_ok_disable_discovery_enable_access_encrypt)",
                "// Line 4443: // *INDENT-ON*",
                "// vulnerable line: 4444: {",
                "// Line 4445:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4446:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4447:     std::string governance_file(\"governance_enable_discovery_enable_access_encrypt.smime\");",
                "// Line 4448: ",
                "// Line 4449:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4450: }",
                "// Line 4451: ",
                "// Line 4452: // *INDENT-OFF*",
                "// Line 4453: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsEnableDiscoveryEnableAccessEncrypt_validation_ok_disable_discovery_disable_access_encrypt)",
                "// Line 4454: // *INDENT-ON*",
                "// vulnerable line: 4455: {",
                "// Line 4456:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4457:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4458:     std::string governance_file(\"governance_enable_discovery_enable_access_encrypt.smime\");",
                "// Line 4459: ",
                "// Line 4460:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4461: }",
                "// Line 4462: ",
                "// Line 4463: // *INDENT-OFF*",
                "// Line 4464: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsEnableDiscoveryEnableAccessEncrypt_validation_ok_enable_discovery_disable_access_encrypt)",
                "// Line 4465: // *INDENT-ON*",
                "// vulnerable line: 4466: {",
                "// Line 4467:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4468:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4469:     std::string governance_file(\"governance_enable_discovery_enable_access_encrypt.smime\");",
                "// Line 4470: ",
                "// Line 4471:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4472: }",
                "// Line 4473: ",
                "// Line 4474: // *INDENT-OFF*",
                "// Line 4475: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsEnableDiscoveryEnableAccessEncrypt_validation_ok_enable_discovery_enable_access_none)",
                "// Line 4476: // *INDENT-ON*",
                "// vulnerable line: 4477: {",
                "// Line 4478:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4479:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4480:     std::string governance_file(\"governance_enable_discovery_enable_access_encrypt.smime\");",
                "// Line 4481: ",
                "// Line 4482:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4483: }",
                "// Line 4484: ",
                "// Line 4485: // *INDENT-OFF*",
                "// Line 4486: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsEnableDiscoveryEnableAccessEncrypt_validation_ok_disable_discovery_enable_access_none)",
                "// Line 4487: // *INDENT-ON*",
                "// vulnerable line: 4488: {",
                "// Line 4489:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4490:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4491:     std::string governance_file(\"governance_enable_discovery_enable_access_encrypt.smime\");",
                "// Line 4492: ",
                "// Line 4493:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4494: }",
                "// Line 4495: ",
                "// Line 4496: // *INDENT-OFF*",
                "// Line 4497: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsEnableDiscoveryEnableAccessEncrypt_validation_ok_disable_discovery_disable_access_none)",
                "// Line 4498: // *INDENT-ON*",
                "// vulnerable line: 4499: {",
                "// Line 4500:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4501:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4502:     std::string governance_file(\"governance_enable_discovery_enable_access_encrypt.smime\");",
                "// Line 4503: ",
                "// Line 4504:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4505: }",
                "// Line 4506: ",
                "// Line 4507: // *INDENT-OFF*",
                "// Line 4508: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsEnableDiscoveryEnableAccessEncrypt_validation_ok_enable_discovery_disable_access_none)",
                "// Line 4509: // *INDENT-ON*",
                "// vulnerable line: 4510: {",
                "// Line 4511:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4512:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4513:     std::string governance_file(\"governance_enable_discovery_enable_access_encrypt.smime\");",
                "// Line 4514: ",
                "// Line 4515:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4516: }",
                "// Line 4517: ",
                "// Line 4518: // *INDENT-OFF*",
                "// Line 4519: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsEnableDiscoveryEnableAccessNone_validation_ok_enable_discovery_enable_access_encrypt)",
                "// Line 4520: // *INDENT-ON*",
                "// vulnerable line: 4521: {",
                "// Line 4522:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4523:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4524:     std::string governance_file(\"governance_enable_discovery_enable_access_none.smime\");",
                "// Line 4525: ",
                "// Line 4526:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4527: }",
                "// Line 4528: ",
                "// Line 4529: // *INDENT-OFF*",
                "// Line 4530: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsEnableDiscoveryEnableAccessNone_validation_ok_disable_discovery_enable_access_encrypt)",
                "// Line 4531: // *INDENT-ON*",
                "// vulnerable line: 4532: {",
                "// Line 4533:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4534:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4535:     std::string governance_file(\"governance_enable_discovery_enable_access_none.smime\");",
                "// Line 4536: ",
                "// Line 4537:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4538: }",
                "// Line 4539: ",
                "// Line 4540: // *INDENT-OFF*",
                "// Line 4541: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsEnableDiscoveryEnableAccessNone_validation_ok_disable_discovery_disable_access_encrypt)",
                "// Line 4542: // *INDENT-ON*",
                "// vulnerable line: 4543: {",
                "// Line 4544:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4545:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4546:     std::string governance_file(\"governance_enable_discovery_enable_access_none.smime\");",
                "// Line 4547: ",
                "// Line 4548:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4549: }",
                "// Line 4550: ",
                "// Line 4551: // *INDENT-OFF*",
                "// Line 4552: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsEnableDiscoveryEnableAccessNone_validation_ok_enable_discovery_disable_access_encrypt)",
                "// Line 4553: // *INDENT-ON*",
                "// vulnerable line: 4554: {",
                "// Line 4555:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4556:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4557:     std::string governance_file(\"governance_enable_discovery_enable_access_none.smime\");",
                "// Line 4558: ",
                "// Line 4559:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4560: }",
                "// Line 4561: ",
                "// Line 4562: // *INDENT-OFF*",
                "// Line 4563: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsEnableDiscoveryEnableAccessNone_validation_ok_enable_discovery_enable_access_none)",
                "// Line 4564: // *INDENT-ON*",
                "// vulnerable line: 4565: {",
                "// Line 4566:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4567:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4568:     std::string governance_file(\"governance_enable_discovery_enable_access_none.smime\");",
                "// Line 4569: ",
                "// Line 4570:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4571: }",
                "// Line 4572: ",
                "// Line 4573: // *INDENT-OFF*",
                "// Line 4574: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsEnableDiscoveryEnableAccessNone_validation_ok_disable_discovery_enable_access_none)",
                "// Line 4575: // *INDENT-ON*",
                "// vulnerable line: 4576: {",
                "// Line 4577:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4578:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4579:     std::string governance_file(\"governance_enable_discovery_enable_access_none.smime\");",
                "// Line 4580: ",
                "// Line 4581:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4582: }",
                "// Line 4583: ",
                "// Line 4584: // *INDENT-OFF*",
                "// Line 4585: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsEnableDiscoveryEnableAccessNone_validation_ok_disable_discovery_disable_access_none)",
                "// Line 4586: // *INDENT-ON*",
                "// vulnerable line: 4587: {",
                "// Line 4588:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4589:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4590:     std::string governance_file(\"governance_enable_discovery_enable_access_none.smime\");",
                "// Line 4591: ",
                "// Line 4592:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4593: }",
                "// Line 4594: ",
                "// Line 4595: // *INDENT-OFF*",
                "// Line 4596: TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsEnableDiscoveryEnableAccessNone_validation_ok_enable_discovery_disable_access_none)",
                "// Line 4597: // *INDENT-ON*",
                "// vulnerable line: 4598: {",
                "// Line 4599:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4600:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4601:     std::string governance_file(\"governance_enable_discovery_enable_access_none.smime\");",
                "// Line 4602: ",
                "// Line 4603:     BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);",
                "// vulnerable line: 4604: }",
                "// Line 4605: ",
                "// Line 4606: TEST(Security, MaliciousHeartbeatIgnore)",
                "// vulnerable line: 4607: {",
                "// Line 4608:     PubSubWriter<HelloWorldPubSubType> writer(\"HelloWorldTopic_MaliciousHeartbeatIgnore\");",
                "// Line 4609:     PubSubReader<HelloWorldPubSubType> reader(\"HelloWorldTopic_MaliciousHeartbeatIgnore\");",
                "// Line 4610: ",
                "// Line 4611:     struct MaliciousHeartbeat",
                "// vulnerable line: 4612: {",
                "// Line 4613:         std::array<char, 4> rtps_id{{'R', 'T', 'P', 'S'}};",
                "// Line 4614:         std::array<uint8_t, 2> protocol_version{{2, 3}};",
                "// Line 4615:         std::array<uint8_t, 2> vendor_id{{0x01, 0x0F}};",
                "// Line 4616:         GuidPrefix_t sender_prefix;",
                "// Line 4617: ",
                "// Line 4618:         uint8_t submessage_id = 0x07;",
                "// Line 4619: #if FASTDDS_IS_BIG_ENDIAN_TARGET",
                "// Line 4620:         uint8_t flags = 0;",
                "// Line 4621: #else",
                "// Line 4622:         uint8_t flags = 0x01;",
                "// Line 4623: #endif  // FASTDDS_IS_BIG_ENDIAN_TARGET",
                "// Line 4624:         uint16_t submessage_length = 4 + 4 + 8 + 8 + 4;",
                "// Line 4625:         EntityId_t reader_id{};",
                "// Line 4626:         EntityId_t writer_id{};",
                "// Line 4627:         SequenceNumber_t first_sn{};",
                "// Line 4628:         SequenceNumber_t last_sn{};",
                "// Line 4629:         int32_t count = 0;",
                "// vulnerable line: 4630: };",
                "// Line 4631: ",
                "// Line 4632:     // Set custom transport on both participants",
                "// Line 4633:     auto transport = std::make_shared<test_UDPv4TransportDescriptor>();",
                "// Line 4634:     std::atomic<bool> avoid_sec_submessages{false};",
                "// Line 4635:     transport->sub_messages_filter_ = [&avoid_sec_submessages](CDRMessage_t& msg) -> bool",
                "// vulnerable line: 4636: {",
                "// Line 4637:                 return avoid_sec_submessages.load() && (0x30 == (msg.buffer[msg.pos] & 0xF0));",
                "// vulnerable line: 4638: };",
                "// Line 4639: ",
                "// Line 4640:     UDPMessageSender fake_msg_sender;",
                "// Line 4641: ",
                "// Line 4642:     writer.disable_builtin_transport().add_user_transport_to_pparams(transport);",
                "// Line 4643:     reader.disable_builtin_transport().add_user_transport_to_pparams(transport);",
                "// Line 4644: ",
                "// Line 4645:     // Set custom reader locator so we can send malicious data to a known location",
                "// Line 4646:     Locator_t reader_locator;",
                "// Line 4647:     ASSERT_TRUE(IPLocator::setIPv4(reader_locator, \"127.0.0.1\"));",
                "// Line 4648:     reader_locator.port = 7000;",
                "// Line 4666:     writer.wait_discovery();",
                "// Line 4667: ",
                "// Line 4668:     // Disable secure submessages and send data",
                "// Line 4669:     avoid_sec_submessages.store(true);",
                "// Line 4670:     auto data = default_helloworld_data_generator();",
                "// Line 4671:     reader.startReception(data);",
                "// Line 4672:     writer.send(data);",
                "// Line 4673:     ASSERT_TRUE(data.empty());",
                "// Line 4674: ",
                "// Line 4675:     // Send malicious heartbeat",
                "// vulnerable line: 4676: {",
                "// Line 4677:         auto writer_guid = writer.datawriter_guid();",
                "// Line 4678: ",
                "// Line 4679:         MaliciousHeartbeat hb{};",
                "// Line 4680:         hb.sender_prefix = writer_guid.guidPrefix;",
                "// Line 4681:         hb.writer_id = writer_guid.entityId;",
                "// Line 4682:         hb.reader_id = EntityId_t::unknown();",
                "// Line 4683:         hb.first_sn.low = 100;",
                "// Line 4684:         hb.last_sn.low = 100;",
                "// Line 4685:         hb.count = 100;",
                "// Line 4686: ",
                "// Line 4687:         CDRMessage_t msg(0);",
                "// Line 4688:         uint32_t msg_len = static_cast<uint32_t>(sizeof(hb));",
                "// Line 4689:         msg.init(reinterpret_cast<octet*>(&hb), msg_len);",
                "// Line 4690:         msg.length = msg_len;",
                "// Line 4691:         msg.pos = msg_len;",
                "// Line 4692:         fake_msg_sender.send(msg, reader_locator);",
                "// vulnerable line: 4693: }",
                "// Line 4694: ",
                "// Line 4695:     // Enable secure submessages",
                "// Line 4696:     avoid_sec_submessages.store(false);",
                "// Line 4697:     // Block reader until reception finished or timeout.",
                "// Line 4698:     reader.block_for_all();",
                "// vulnerable line: 4699: }",
                "// Line 4700: ",
                "// Line 4701: TEST_P(Security, MaliciousParticipantRemovalIgnore)",
                "// vulnerable line: 4702: {",
                "// Line 4703:     PubSubWriter<HelloWorldPubSubType> writer(\"HelloWorldTopic_MaliciousParticipantRemovalIgnore\");",
                "// Line 4704:     PubSubReader<HelloWorldPubSubType> reader(\"HelloWorldTopic_MaliciousParticipantRemovalIgnore\");",
                "// Line 4705: ",
                "// Line 4706:     struct MaliciousParticipantRemoval",
                "// vulnerable line: 4707: {",
                "// Line 4708:         std::array<char, 4> rtps_id{ {'R', 'T', 'P', 'S'} };",
                "// Line 4709:         std::array<uint8_t, 2> protocol_version{ {2, 3} };",
                "// Line 4710:         std::array<uint8_t, 2> vendor_id{ {0x01, 0x0F} };",
                "// Line 4711:         GuidPrefix_t sender_prefix{};",
                "// Line 4712: ",
                "// Line 4713:         struct DataSubMsg",
                "// vulnerable line: 4714: {",
                "// Line 4715:             struct Header",
                "// vulnerable line: 4716: {",
                "// Line 4717:                 uint8_t submessage_id = 0x15;",
                "// Line 4718: #if FASTDDS_IS_BIG_ENDIAN_TARGET",
                "// Line 4719:                 uint8_t flags = 0x02;",
                "// Line 4720: #else",
                "// Line 4721:                 uint8_t flags = 0x03;",
                "// Line 4722: #endif  // FASTDDS_IS_BIG_ENDIAN_TARGET",
                "// Line 4723:                 uint16_t submessage_length = 2 + 2 + 4 + 4 + 8;",
                "// Line 4724:                 uint16_t extra_flags = 0;",
                "// Line 4725:                 uint16_t octets_to_inline_qos = 4 + 4 + 8;",
                "// Line 4726:                 EntityId_t reader_id{};",
                "// Line 4727:                 EntityId_t writer_id{};",
                "// Line 4728:                 SequenceNumber_t sn{};",
                "// vulnerable line: 4729: };",
                "// Line 4730: ",
                "// Line 4731:             struct InlineQos",
                "// vulnerable line: 4732: {",
                "// Line 4733:                 struct KeyHash",
                "// vulnerable line: 4734: {",
                "// Line 4735:                     uint16_t pid = 0x0070;  // PID_KEY_HASH",
                "// Line 4736:                     uint16_t plen = 16;",
                "// Line 4737:                     GUID_t guid{};",
                "// vulnerable line: 4738: };",
                "// Line 4739: ",
                "// Line 4740:                 struct StatusInfo",
                "// vulnerable line: 4741: {",
                "// Line 4742:                     uint16_t pid = 0x0071;  // PID_STATUS_INFO",
                "// Line 4743:                     uint16_t plen = 4;",
                "// Line 4744:                     uint8_t flags[4] = { 0x00, 0x00, 0x00, 0x03 };",
                "// vulnerable line: 4745: };",
                "// Line 4746: ",
                "// Line 4747:                 struct Sentinel",
                "// vulnerable line: 4748: {",
                "// Line 4749:                     uint16_t pid = 0x0001;  // PID_SENTINEL",
                "// Line 4750:                     uint16_t plen = 0;",
                "// vulnerable line: 4751: };",
                "// Line 4752: ",
                "// Line 4753:                 KeyHash hash;",
                "// Line 4754:                 StatusInfo status;",
                "// Line 4755:                 Sentinel sentinel;",
                "// vulnerable line: 4756: };",
                "// Line 4757: ",
                "// Line 4758:             Header header;",
                "// Line 4759:             InlineQos inline_qos;",
                "// vulnerable line: 4760: }",
                "// Line 4761:         data;",
                "// vulnerable line: 4762: };",
                "// Line 4763: ",
                "// Line 4764:     // Set common QoS",
                "// Line 4765:     reader.history_depth(10).reliability(eprosima::fastrtps::RELIABLE_RELIABILITY_QOS);",
                "// Line 4766:     writer.history_depth(10).reliability(eprosima::fastrtps::RELIABLE_RELIABILITY_QOS);",
                "// Line 4767: ",
                "// Line 4768:     // Configure security",
                "// Line 4769:     const std::string governance_file(\"governance_helloworld_all_enable.smime\");",
                "// Line 4770:     const std::string permissions_file(\"permissions_helloworld.smime\");",
                "// Line 4771:     CommonPermissionsConfigure(reader, writer, governance_file, permissions_file);",
                "// Line 4772: ",
                "// Line 4775:     ASSERT_TRUE(reader.isInitialized());",
                "// Line 4776:     writer.init();",
                "// Line 4777:     ASSERT_TRUE(writer.isInitialized());",
                "// Line 4778:     reader.waitAuthorized();",
                "// Line 4779:     writer.waitAuthorized();",
                "// Line 4780:     reader.wait_discovery();",
                "// Line 4781:     writer.wait_discovery();",
                "// Line 4782: ",
                "// Line 4783:     // Send fake DATA(p[UD])",
                "// Line 4784:     UDPMessageSender fake_msg_sender;",
                "// vulnerable line: 4785: {",
                "// Line 4786:         auto writer_guid = writer.datawriter_guid();",
                "// Line 4787:         auto participant_guid = writer.participant_guid();",
                "// Line 4788:         auto domain_id = static_cast<uint32_t>(GET_PID() % 230);",
                "// Line 4789: ",
                "// Line 4790:         MaliciousParticipantRemoval packet{};",
                "// Line 4791:         packet.sender_prefix = writer_guid.guidPrefix;",
                "// Line 4792:         packet.data.header.submessage_length += sizeof(packet.data.inline_qos);",
                "// Line 4793:         packet.data.header.writer_id = c_EntityId_SPDPWriter;",
                "// Line 4794:         packet.data.header.reader_id = c_EntityId_SPDPReader;",
                "// Line 4795:         packet.data.header.sn.low = 100;",
                "// Line 4798:         Locator_t mcast_locator;",
                "// Line 4799:         ASSERT_TRUE(IPLocator::setIPv4(mcast_locator, \"239.255.0.1\"));",
                "// Line 4800:         mcast_locator.port = 7400 + 250 * domain_id;",
                "// Line 4801: ",
                "// Line 4802:         CDRMessage_t msg(0);",
                "// Line 4803:         uint32_t msg_len = static_cast<uint32_t>(sizeof(packet));",
                "// Line 4804:         msg.init(reinterpret_cast<octet*>(&packet), msg_len);",
                "// Line 4805:         msg.length = msg_len;",
                "// Line 4806:         msg.pos = msg_len;",
                "// Line 4807:         fake_msg_sender.send(msg, mcast_locator);",
                "// vulnerable line: 4808: }",
                "// Line 4809: ",
                "// Line 4810:     EXPECT_FALSE(reader.wait_participant_undiscovery(std::chrono::seconds(1)));",
                "// Line 4811: ",
                "// Line 4812:     auto data = default_helloworld_data_generator();",
                "// Line 4813:     reader.startReception(data);",
                "// Line 4814:     writer.send(data);",
                "// Line 4815:     ASSERT_TRUE(data.empty());",
                "// Line 4816:     reader.block_for_all();",
                "// vulnerable line: 4817: }",
                "// Line 4818: ",
                "// Line 4819: TEST(Security, ValidateAuthenticationHandshakePropertiesParsing)",
                "// vulnerable line: 4820: {",
                "// Line 4821:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4822: ",
                "// Line 4823:     PropertyPolicy property_policy;",
                "// Line 4824: ",
                "// Line 4825:     property_policy.properties().emplace_back(Property(\"dds.sec.auth.plugin\",",
                "// Line 4826:             \"builtin.PKI-DH\"));",
                "// Line 4827:     property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_ca\",",
                "// Line 4828:             \"file://\" + std::string(certs_path) + \"/maincacert.pem\"));",
                "// Line 4829:     property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.identity_certificate\",",
                "// Line 4830:             \"file://\" + std::string(certs_path) + \"/mainsubcert.pem\"));",
                "// Line 4876:             \"5\"));",
                "// Line 4877:     property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.initial_handshake_resend_period\",",
                "// Line 4878:             \"200\"));",
                "// Line 4879:     property_policy.properties().emplace_back(Property(\"dds.sec.auth.builtin.PKI-DH.handshake_resend_period_gain\",",
                "// Line 4880:             \"1.75\"));",
                "// Line 4881: ",
                "// Line 4882:     writer.property_policy(property_policy).init();",
                "// Line 4883: ",
                "// Line 4884:     // Writer should correctly initialize",
                "// Line 4885:     ASSERT_TRUE(writer.isInitialized());",
                "// vulnerable line: 4886: }",
                "// Line 4887: ",
                "// Line 4888: TEST(Security, ValidateAuthenticationHandshakeProperties)",
                "// vulnerable line: 4889: {",
                "// Line 4890:     // Create",
                "// Line 4891:     PubSubReader<HelloWorldPubSubType> reader(TEST_TOPIC_NAME);",
                "// Line 4892:     PubSubWriter<HelloWorldPubSubType> writer(TEST_TOPIC_NAME);",
                "// Line 4893: ",
                "// Line 4894:     PropertyPolicy property_policy;",
                "// Line 4895:     std::string xml_file = \"auth_handshake_props_profile.xml\";",
                "// Line 4896:     std::string profile_name = \"auth_handshake_props\";",
                "// Line 4897: ",
                "// Line 4898:     // Set a configuration that makes participant authentication",
                "// Line 4899:     // to be performed quickly so that we receive handshake",
                "// Line 4918:     std::chrono::duration<double, std::milli> max_time(500);",
                "// Line 4919:     auto t0 = std::chrono::steady_clock::now();",
                "// Line 4920:     reader.waitAuthorized();",
                "// Line 4921:     auto auth_elapsed_time = std::chrono::duration<double, std::milli>(",
                "// Line 4922:         std::chrono::steady_clock::now() - t0);",
                "// Line 4923: ",
                "// Line 4924:     // Both should be authorized",
                "// Line 4925:     writer.waitAuthorized();",
                "// Line 4926: ",
                "// Line 4927:     ASSERT_TRUE(auth_elapsed_time < max_time);",
                "// vulnerable line: 4928: }",
                "// Line 4929: ",
                "// Line 4930: ",
                "// Line 4931: void blackbox_security_init()",
                "// vulnerable line: 4932: {",
                "// Line 4933:     certs_path = std::getenv(\"CERTS_PATH\");",
                "// Line 4934: ",
                "// Line 4935:     if (certs_path == nullptr)",
                "// vulnerable line: 4936: {",
                "// Line 4937:         std::cout << \"Cannot get enviroment variable CERTS_PATH\" << std::endl;",
                "// Line 4938:         exit(-1);",
                "// vulnerable line: 4939: }",
                "// vulnerable line: 4940: }",
                "// Line 4941: ",
                "// Line 4942: #ifdef INSTANTIATE_TEST_SUITE_P",
                "// Line 4943: #define GTEST_INSTANTIATE_TEST_MACRO(x, y, z, w) INSTANTIATE_TEST_SUITE_P(x, y, z, w)",
                "// Line 4944: #else",
                "// Line 4945: #define GTEST_INSTANTIATE_TEST_MACRO(x, y, z, w) INSTANTIATE_TEST_CASE_P(x, y, z, w)",
                "// Line 4946: #endif // ifdef INSTANTIATE_TEST_SUITE_P",
                "// Line 4947: ",
                "// Line 4948: GTEST_INSTANTIATE_TEST_MACRO(Security,",
                "// Line 4949:         Security,",
                "// Line 4950:         testing::Values(TRANSPORT, INTRAPROCESS, DATASHARING),",
                "// Line 4951:         [](const testing::TestParamInfo<Security::ParamType>& info)",
                "// vulnerable line: 4952: {",
                "// Line 4953:             switch (info.param)",
                "// vulnerable line: 4954: {",
                "// Line 4955:                 case INTRAPROCESS:",
                "// Line 4956:                     return \"Intraprocess\";",
                "// Line 4957:                     break;",
                "// Line 4958:                 case DATASHARING:",
                "// Line 4959:                     return \"Datasharing\";",
                "// Line 4960:                     break;",
                "// Line 4961:                 case TRANSPORT:",
                "// Line 4962:                 default:",
                "// Line 4963:                     return \"Transport\";",
                "// vulnerable line: 4964: }",
                "// Line 4965: ",
                "// Line 4966:         });",
                "// Line 4967: ",
                "// Line 4968: ",
                "// Line 4969: #endif // if HAVE_SECURITY"
            ]
        },
        {
            "filename_of_changes": "MessageReceiver.cpp",
            "code_language": "C++",
            "number_of_lines_added_for_mitigation": "14",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 836:         ch.inline_qos.data = &msg->buffer[msg->pos - inlineQosSize];",
                "// Line 837:         ch.inline_qos.max_size = inlineQosSize;",
                "// Line 838:         ch.inline_qos.length = inlineQosSize;",
                "// Line 839:         ch.inline_qos.encapsulation = endiannessFlag ? PL_CDR_LE : PL_CDR_BE;",
                "// Line 840:         ch.inline_qos.pos = 0;",
                "// Line 841:     }",
                "// Line 842: ",
                "// Line 843:     if (dataFlag || keyFlag)",
                "// Line 844:     {",
                "// Line 845:         uint32_t payload_size;",
                "// vulnerable line: 846: payload_size = smh->submessageLength -",
                "// vulnerable line: 847: (RTPSMESSAGE_DATA_EXTRA_INLINEQOS_SIZE + octetsToInlineQos + inlineQosSize);",
                "// Line 848: ",
                "// Line 849:         if (dataFlag)",
                "// Line 850:         {",
                "// Line 851:             uint32_t next_pos = msg->pos + payload_size;",
                "// Line 852:             if (msg->length >= next_pos && payload_size > 0)",
                "// Line 853:             {",
                "// Line 854:                 ch.serializedPayload.data = &msg->buffer[msg->pos];",
                "// Line 855:                 ch.serializedPayload.length = payload_size;",
                "// Line 856:                 ch.serializedPayload.max_size = payload_size;",
                "// Line 857:                 msg->pos = next_pos;"
            ]
        },
        {
            "filename_of_changes": "PubSubReader.hpp",
            "code_language": "C++",
            "number_of_lines_added_for_mitigation": "8",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 326:             participant_guid_ = participant_->getGuid();",
                "// Line 327: ",
                "// Line 328:             // Register type",
                "// Line 329:             ASSERT_EQ(eprosima::fastrtps::Domain::registerType(participant_, &type_), true);",
                "// Line 330: ",
                "// Line 331:             //Create subscribe r",
                "// Line 332:             subscriber_ = eprosima::fastrtps::Domain::createSubscriber(participant_, subscriber_attr, &listener_);",
                "// Line 333: ",
                "// Line 334:             if (subscriber_ != nullptr)",
                "// Line 335:             {",
                "// vulnerable line: 336: std::cout << \"Created subscriber \" << subscriber_->getGuid() << \" for topic \" <<",
                "// Line 337:                     subscriber_attr_.topic.topicName << std::endl;",
                "// Line 338: ",
                "// Line 339:                 initialized_ = true;",
                "// Line 340:             }",
                "// Line 341:         }",
                "// Line 342:     }",
                "// Line 343: ",
                "// Line 344:     bool isInitialized() const",
                "// Line 345:     {",
                "// Line 346:         return initialized_;"
            ]
        },
        {
            "filename_of_changes": "data_generators.cpp",
            "code_language": "C++",
            "number_of_lines_added_for_mitigation": "21",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        }
    ]
}