{
    "cve_id": "CVE-2024-34713",
    "cve_description": "sshproxy is used on a gateway to transparently proxy a user SSH connection on the gateway to an internal host via SSH. Prior to version 1.6.3, any user authorized to connect to a ssh server using `sshproxy` can inject options to the `ssh` command executed by `sshproxy`. All versions of `sshproxy` are impacted. The problem is patched starting in version 1.6.3. The only workaround is to use the `force_command` option in `sshproxy.yaml`, but it's rarely relevant.",
    "cve_publish_date": "2024-05-14T16:17Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Prevent ssh option injection (#16)",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "sshproxy.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 469:     commandTranslated := false",
                "// Line 470:     if doCmd != \"\" {",
                "// Line 471:         if commandMustMatch && originalCmd != doCmd {",
                "// Line 472:             log.Errorf(\"error executing proxied ssh command: originalCmd \"%s\" does not match forceCommand \"%s\"\", originalCmd, forceCommand)",
                "// Line 473:             return 1",
                "// Line 474:         }",
                "// Line 475:         for fromCmd, translateCmdConf := range config.TranslateCommands {",
                "// Line 476:             if doCmd == fromCmd {",
                "// Line 477:                 log.Debugf(\"translateCmdConf = %+v\", translateCmdConf)",
                "// Line 478:                 sshArgs = append(sshArgs, translateCmdConf.SSHArgs...)",
                "// vulnerable line: 479: sshArgs = append(sshArgs, \"--\", host, translateCmdConf.Command)",
                "// Line 480:                 if config.Dump != \"\" && translateCmdConf.DisableDump {",
                "// Line 481:                     config.Dump = \"etcd\"",
                "// Line 482:                 }",
                "// Line 483:                 commandTranslated = true",
                "// Line 484:                 break",
                "// Line 485:             }",
                "// Line 486:         }",
                "// Line 487:         if !commandTranslated {",
                "// Line 488:             if interactiveCommand {",
                "// Line 489:                 // Force TTY allocation because the user probably asked for it.",
                "// Line 490:                 sshArgs = append(sshArgs, \"-t\")",
                "// Line 491:             }",
                "// vulnerable line: 492: sshArgs = append(sshArgs, host, doCmd)",
                "// Line 493:         }",
                "// Line 494:     } else {",
                "// Line 495:         sshArgs = append(sshArgs, host)",
                "// Line 496:     }",
                "// Line 497:     cmd := exec.CommandContext(ctx, config.SSH.Exe, sshArgs...)",
                "// Line 498:     log.Debugf(\"command = %s %q\", cmd.Path, cmd.Args)",
                "// Line 499: ",
                "// Line 500:     var recorder *Recorder",
                "// Line 501:     if config.Dump != \"\" {",
                "// Line 502:         recorder = NewRecorder(conninfo, config.Dump, doCmd, config.EtcdStatsInterval.Duration(), config.LogStatsInterval.Duration(), config.DumpLimitSize, config.DumpLimitWindow.Duration())"
            ]
        }
    ]
}