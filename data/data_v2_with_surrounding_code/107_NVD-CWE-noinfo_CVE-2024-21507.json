{
    "cve_id": "CVE-2024-21507",
    "cve_description": "Versions of the package mysql2 before 3.9.3 are vulnerable to Improper Input Validation through the keyFromFields function, resulting in cache poisoning. An attacker can inject a colon (:) character within a value of the attacker-crafted key.",
    "cve_publish_date": "2024-04-10T05:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fix(cache): improve cache key serialization (#2424)\n\n* fix(cache): improve cache key formation. Fixes a potential parser cache poisoning attack vulnerability reported by Vsevolod Kokorin (Slonser) of Solidlab",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "parser_cache.js",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "28",
            "number_of_lines_deleted_vulnerable_to_cve": "15",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: 'use strict';",
                "// Line 2: ",
                "// Line 3: const LRU = require('lru-cache').default;",
                "// Line 4: ",
                "// Line 5: const parserCache = new LRU({",
                "// vulnerable line: 6: max: 15000",
                "// Line 7: });",
                "// Line 8: ",
                "// Line 9: function keyFromFields(type, fields, options, config) {",
                "// vulnerable line: 10: let res =",
                "// vulnerable line: 11: `${type}` +",
                "// vulnerable line: 12: `/${typeof options.nestTables}` +",
                "// vulnerable line: 13: `/${options.nestTables}` +",
                "// vulnerable line: 14: `/${options.rowsAsArray}` +",
                "// vulnerable line: 15: `/${options.supportBigNumbers || config.supportBigNumbers}` +",
                "// vulnerable line: 16: `/${options.bigNumberStrings || config.bigNumberStrings}` +",
                "// vulnerable line: 17: `/${typeof options.typeCast}` +",
                "// vulnerable line: 18: `/${options.timezone || config.timezone}` +",
                "// vulnerable line: 19: `/${options.decimalNumbers}` +",
                "// vulnerable line: 20: `/${options.dateStrings}`;",
                "// Line 21:   for (let i = 0; i < fields.length; ++i) {",
                "// Line 22:     const field = fields[i];",
                "// vulnerable line: 23: res += `/${field.name}:${field.columnType}:${field.length}:${field.schema}:${field.table}:${field.flags}:${field.characterSet}`;",
                "// Line 24:   }",
                "// vulnerable line: 25: return res;",
                "// Line 26: }",
                "// Line 27: ",
                "// Line 28: function getParser(type, fields, options, config, compiler) {",
                "// Line 29:   const key = keyFromFields(type, fields, options, config);",
                "// Line 30:   let parser = parserCache.get(key);",
                "// Line 31: ",
                "// Line 32:   if (parser) {",
                "// Line 33:     return parser;",
                "// Line 34:   }",
                "// Line 35: ",
                "// Line 42:   parserCache.max = max;",
                "// Line 43: }",
                "// Line 44: ",
                "// Line 45: function clearCache() {",
                "// Line 46:   parserCache.clear();",
                "// Line 47: }",
                "// Line 48: ",
                "// Line 49: module.exports = {",
                "// Line 50:   getParser: getParser,",
                "// Line 51:   setMaxCache: setMaxCache,",
                "// vulnerable line: 52: clearCache: clearCache",
                "// Line 53: };"
            ]
        }
    ]
}