{
    "cve_id": "CVE-2024-31226",
    "cve_description": "Sunshine is a self-hosted game stream host for Moonlight. Users who ran Sunshine versions 0.17.0 through 0.22.2 as a service on Windows may be impacted when terminating the service if an attacked placed a file named `C:\\Program.exe`, `C:\\Program.bat`, or `C:\\Program.cmd` on the user's computer. This attack vector isn't exploitable unless the user has manually loosened ACLs on the system drive. If the user's system locale is not English, then the name of the executable will likely vary. Version 0.23.0 contains a patch for the issue. Some workarounds are available. One may identify and block potentially malicious software executed path interception by using application control tools, like Windows Defender Application Control, AppLocker, or Software Restriction Policies where appropriate. Alternatively, ensure that proper permissions and directory access control are set to deny users the ability to write files to the top-level directory `C:`. Require that all executables be placed in write-protected directories.",
    "cve_publish_date": "2024-05-16T19:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Quote the path to sunshinesvc.exe when launching the termination helper (#2379)",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "sunshinesvc.cpp",
            "code_language": "C++",
            "number_of_lines_added_for_mitigation": "5",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 138:     &security_attributes,",
                "// Line 139:     CREATE_ALWAYS,",
                "// Line 140:     0,",
                "// Line 141:     NULL);",
                "// Line 142: }",
                "// Line 143: ",
                "// Line 144: bool",
                "// Line 145: RunTerminationHelper(HANDLE console_token, DWORD pid) {",
                "// Line 146:   WCHAR module_path[MAX_PATH];",
                "// Line 147:   GetModuleFileNameW(NULL, module_path, _countof(module_path));",
                "// vulnerable line: 148: std::wstring command { module_path };",
                "// Line 149: ",
                "// Line 150:   command += L\" --terminate \" + std::to_wstring(pid);",
                "// Line 151: ",
                "// Line 152:   STARTUPINFOW startup_info = {};",
                "// Line 153:   startup_info.cb = sizeof(startup_info);",
                "// Line 154:   startup_info.lpDesktop = (LPWSTR) L\"winsta0\\default\";",
                "// Line 155: ",
                "// Line 156:   // Execute ourselves as a detached process in the user session with the --terminate argument.",
                "// Line 157:   // This will allow us to attach to Sunshine's console and send it a Ctrl-C event.",
                "// Line 158:   PROCESS_INFORMATION process_info;",
                "// Line 159:   if (!CreateProcessAsUserW(console_token,",
                "// vulnerable line: 160: NULL,",
                "// Line 161:         (LPWSTR) command.c_str(),",
                "// vulnerable line: 162: NULL,",
                "// vulnerable line: 163: NULL,",
                "// Line 164:         FALSE,",
                "// Line 165:         CREATE_UNICODE_ENVIRONMENT | DETACHED_PROCESS,",
                "// vulnerable line: 166: NULL,",
                "// vulnerable line: 167: NULL,",
                "// Line 168:         &startup_info,",
                "// Line 169:         &process_info)) {",
                "// Line 170:     return false;",
                "// Line 171:   }",
                "// Line 172: ",
                "// Line 173:   // Wait for the termination helper to complete",
                "// Line 174:   WaitForSingleObject(process_info.hProcess, INFINITE);",
                "// Line 175: ",
                "// Line 176:   // Check the exit status of the helper process",
                "// Line 177:   DWORD exit_code;",
                "// Line 251:     SetServiceStatus(service_status_handle, &service_status);",
                "// Line 252:     return;",
                "// Line 253:   }",
                "// Line 254: ",
                "// Line 255:   // Only allow Sunshine.exe to inherit the log file handle, not all inheritable handles",
                "// Line 256:   UpdateProcThreadAttribute(startup_info.lpAttributeList,",
                "// Line 257:     0,",
                "// Line 258:     PROC_THREAD_ATTRIBUTE_HANDLE_LIST,",
                "// Line 259:     &log_file_handle,",
                "// Line 260:     sizeof(log_file_handle),",
                "// vulnerable line: 261: NULL,",
                "// Line 262:     NULL);",
                "// Line 263: ",
                "// Line 264:   // Tell SCM we're running (and stoppable now)",
                "// Line 265:   service_status.dwControlsAccepted = SERVICE_ACCEPT_STOP | SERVICE_ACCEPT_PRESHUTDOWN | SERVICE_ACCEPT_SESSIONCHANGE;",
                "// Line 266:   service_status.dwCurrentState = SERVICE_RUNNING;",
                "// Line 267:   SetServiceStatus(service_status_handle, &service_status);",
                "// Line 268: ",
                "// Line 269:   // Loop every 3 seconds until the stop event is set or Sunshine.exe is running",
                "// Line 270:   while (WaitForSingleObject(stop_event, 3000) != WAIT_OBJECT_0) {",
                "// Line 271:     auto console_session_id = WTSGetActiveConsoleSessionId();",
                "// Line 285:       CloseHandle(console_token);",
                "// Line 286:       continue;",
                "// Line 287:     }",
                "// Line 288: ",
                "// Line 289:     // Start Sunshine.exe inside our job object",
                "// Line 290:     UpdateProcThreadAttribute(startup_info.lpAttributeList,",
                "// Line 291:       0,",
                "// Line 292:       PROC_THREAD_ATTRIBUTE_JOB_LIST,",
                "// Line 293:       &job_handle,",
                "// Line 294:       sizeof(job_handle),",
                "// vulnerable line: 295: NULL,",
                "// Line 296:       NULL);",
                "// Line 297: ",
                "// Line 298:     PROCESS_INFORMATION process_info;",
                "// Line 299:     if (!CreateProcessAsUserW(console_token,",
                "// Line 300:           L\"Sunshine.exe\",",
                "// vulnerable line: 301: NULL,",
                "// vulnerable line: 302: NULL,",
                "// vulnerable line: 303: NULL,",
                "// Line 304:           TRUE,",
                "// Line 305:           CREATE_UNICODE_ENVIRONMENT | CREATE_NO_WINDOW | EXTENDED_STARTUPINFO_PRESENT,",
                "// vulnerable line: 306: NULL,",
                "// vulnerable line: 307: NULL,",
                "// Line 308:           (LPSTARTUPINFOW) &startup_info,",
                "// Line 309:           &process_info)) {",
                "// Line 310:       CloseHandle(console_token);",
                "// Line 311:       CloseHandle(job_handle);",
                "// Line 312:       continue;",
                "// Line 313:     }",
                "// Line 314: ",
                "// Line 315:     bool still_running;",
                "// Line 316:     do {",
                "// Line 317:       // Wait for the stop event to be set, Sunshine.exe to terminate, or the console session to change"
            ]
        }
    ]
}