{
    "cve_id": "CVE-2024-25130",
    "cve_description": "Tuleap is an open source suite to improve management of software developments and collaboration. Prior to version 15.5.99.76 of Tuleap Community Edition and prior to versions 15.5-4 and 15.4-7 of Tuleap Enterprise Edition, users with a read access to a tracker where the mass update feature is used might get access to restricted information. Tuleap Community Edition 15.5.99.76, Tuleap Enterprise Edition 15.5-4, and Tuleap Enterprise Edition 15.4-7 contain a patch for this issue.",
    "cve_publish_date": "2024-02-22T19:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fix: request #36803 Mass update clears permissions on artifact\n\nAn additional checkbox is added to control if the field should be\nupdated or not when doing a masschange.\n\nChange-Id: I721298a0f5ec50c3aac1a59efcfba6166958baf0",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "MasschangeDataValueExtractor.class.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "Tracker_FormElement_Field_PermissionsOnArtifact.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "26",
            "number_of_lines_deleted_vulnerable_to_cve": "22",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: <?php",
                "// vulnerable line: 2: /**",
                "// Line 3:  * Copyright (c) Enalean, 2015 - Present. All Rights Reserved.",
                "// Line 4:  * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved",
                "// vulnerable line: 5: *",
                "// Line 6:  * This file is a part of Tuleap.",
                "// vulnerable line: 7: *",
                "// Line 8:  * Tuleap is free software; you can redistribute it and/or modify",
                "// Line 9:  * it under the terms of the GNU General Public License as published by",
                "// Line 10:  * the Free Software Foundation; either version 2 of the License, or",
                "// Line 11:  * (at your option) any later version.",
                "// vulnerable line: 12: *",
                "// Line 13:  * Tuleap is distributed in the hope that it will be useful,",
                "// Line 14:  * but WITHOUT ANY WARRANTY; without even the implied warranty of",
                "// Line 15:  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
                "// Line 16:  * GNU General Public License for more details.",
                "// vulnerable line: 17: *",
                "// Line 18:  * You should have received a copy of the GNU General Public License",
                "// Line 19:  * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.",
                "// vulnerable line: 20: */",
                "// Line 21: ",
                "// Line 22: use Tuleap\\Option\\Option;",
                "// Line 23: use Tuleap\\Project\\RESTserGroupRepresentation;",
                "// Line 24: use Tuleap\\Tracker\\Artifact\\Artifact;",
                "// Line 25: use Tuleap\\Tracker\\FormElement\\Field\\File\\CreatedFileURLMapping;",
                "// Line 26: use Tuleap\\Tracker\\FormElement\\Field\\PermissionsOnArtifact\\ChangesChecker;",
                "// Line 27: use Tuleap\\Tracker\\FormElement\\Field\\PermissionsOnArtifact\\PermissionsOnArtifactFieldValueDao;",
                "// Line 28: use Tuleap\\Tracker\\FormElement\\PermissionsOnArtifactUGroupRetriever;",
                "// Line 29: use Tuleap\\Tracker\\FormElement\\PermissionsOnArtifactUsageFormatter;",
                "// Line 30: use Tuleap\\Tracker\\FormElement\\PermissionsOnArtifactValidator;",
                "// Line 31: use Tuleap\\Tracker\\Report\\Query\\ParametrizedFrom;",
                "// Line 32: use Tuleap\\Tracker\\Report\\Query\\ParametrizedFromWhere;",
                "// Line 33: use Tuleap\\Tracker\\REST",
                "// Line 34: 1\\TrackerFieldsRepresentations\\PermissionsOnArtifacts;",
                "// Line 35: use TuleapserserGroupameTranslator;",
                "// Line 36: ",
                "// Line 37: //phpcs:ignore PSR1.Classes.ClassDeclaration.MissingNamespace, Squiz.Classes.ValidClassName.NotCamelCaps",
                "// Line 38: class Tracker_FormElement_Field_PermissionsOnArtifact extends Tracker_FormElement_Field",
                "// Line 39: {",
                "// vulnerable line: 40: public const GRANTED_GROUPS     = 'granted_groups';",
                "// vulnerable line: 41: public const USE_IT             = 'use_artifact_permissions';",
                "// vulnerable line: 42: public const IS_USED_BY_DEFAULT = false;",
                "// vulnerable line: 43: public const PERMISSION_TYPE    = 'PLUGIN_TRACKER_ARTIFACT_ACCESS';",
                "// Line 44: ",
                "// Line 45:     public $default_properties = [];",
                "// Line 46: ",
                "// Line 47: ",
                "// vulnerable line: 48: /**",
                "// Line 49:      * Returns the default value for this field, or nullif no default value defined",
                "// vulnerable line: 50: *",
                "// Line 51:      * @return mixed The default value for this field, or null if no default value defined",
                "// vulnerable line: 52: */",
                "// Line 53:     public function getDefaultValue()",
                "// Line 54:     {",
                "// Line 55:     }",
                "// Line 56: ",
                "// vulnerable line: 57: /**",
                "// Line 58:      * The field is permanently deleted from the db",
                "// Line 59:      * This hooks is here to delete specific properties,",
                "// Line 60:      * or specific values of the field.",
                "// Line 61:      * (The field itself will be deleted later)",
                "// vulnerable line: 62: *",
                "// Line 63:      * @return bool true if success",
                "// vulnerable line: 64: */",
                "// Line 65:     public function delete()",
                "// Line 66:     {",
                "// Line 67:         return true;",
                "// Line 68:     }",
                "// Line 69: ",
                "// vulnerable line: 70: /**",
                "// vulnerable line: 71: * @return string",
                "// vulnerable line: 72: */",
                "// Line 73:     private function fetchChangesetRegardingPermissions($artifact_id, $changeset_id)",
                "// Line 74:     {",
                "// Line 75:         $values   = [];",
                "// Line 76:         $artifact = Tracker_ArtifactFactory::instance()->getArtifactById($artifact_id);",
                "// Line 77:         if ($artifact->useArtifactPermissions()) {",
                "// Line 78:             $dao = new Tracker_Artifact_Changeset_ValueDao();",
                "// Line 79:             $row = $dao->searchByFieldId($changeset_id, $this->id);",
                "// Line 80:             if ($row === null) {",
                "// Line 81:                 return '';",
                "// Line 82:             }",
                "// Line 94:     public function fetchChangesetValue(",
                "// Line 95:         int $artifact_id,",
                "// Line 96:         int $changeset_id,",
                "// Line 97:         mixed $value,",
                "// Line 98:         ?Tracker_Report $report = null,",
                "// Line 99:         ?int $from_aid = null,",
                "// Line 100:     ): string {",
                "// Line 101:         return $this->fetchChangesetRegardingPermissions($artifact_id, $changeset_id);",
                "// Line 102:     }",
                "// Line 103: ",
                "// vulnerable line: 104: /**",
                "// vulnerable line: 105: * @return string",
                "// vulnerable line: 106: */",
                "// Line 107:     public function fetchCSVChangesetValue($artifact_id, $changeset_id, $value, $report)",
                "// Line 108:     {",
                "// Line 109:         return $this->fetchChangesetRegardingPermissions($artifact_id, $changeset_id);",
                "// Line 110:     }",
                "// Line 111: ",
                "// vulnerable line: 112: /**",
                "// Line 113:      * Fetch the value",
                "// Line 114:      * @param mixed $value the value of the field",
                "// vulnerable line: 115: * @return string",
                "// vulnerable line: 116: */",
                "// Line 117:     public function fetchRawValue($value)",
                "// Line 118:     {",
                "// Line 119:         return $this->values[$value]->getLabel();",
                "// Line 120:     }",
                "// Line 121: ",
                "// vulnerable line: 122: /**",
                "// Line 123:      * Fetch the value in a specific changeset",
                "// Line 124:      * @param Tracker_Artifact_Changeset $changeset",
                "// vulnerable line: 125: * @return string",
                "// vulnerable line: 126: */",
                "// Line 127:     public function fetchRawValueFromChangeset($changeset)",
                "// Line 128:     {",
                "// Line 129:         return '';",
                "// Line 130:     }",
                "// Line 131: ",
                "// Line 132:     protected function getValueDao(): PermissionsOnArtifactFieldValueDao",
                "// Line 133:     {",
                "// Line 134:         return new PermissionsOnArtifactFieldValueDao(new Tracker_Artifact_Changeset_ValueDao());",
                "// Line 135:     }",
                "// Line 136: ",
                "// Line 137:     private function getPermissionsOnArtifactUsageRetriever()",
                "// Line 138:     {",
                "// Line 139:         return new PermissionsOnArtifactUsageFormatter($this->getPermissionsValidator());",
                "// Line 140:     }",
                "// Line 141: ",
                "// vulnerable line: 142: /**",
                "// Line 143:      * @param array $submitted_values",
                "// vulnerable line: 144: *",
                "// Line 145:      * @return string html",
                "// vulnerable line: 146: */",
                "// Line 147:     protected function fetchSubmitValue(array $submitted_values)",
                "// Line 148:     {",
                "// Line 149:         $value = $this->getValueFromSubmitOrDefault($submitted_values);",
                "// Line 150:         $value = $this->getPermissionsOnArtifactUGroupRetriever()->initializeUGroupsIfNoUGroupsAreChoosen($value);",
                "// Line 151: ",
                "// Line 152:         $is_disabled = false;",
                "// Line 153:         $is_checked  = ($this->getPermissionsValidator()->isArtifactPermissionChecked($value) === true);",
                "// Line 154: ",
                "// vulnerable line: 155: return $this->getArtifactValueHTML($this->getId(), $is_checked, $is_disabled);",
                "// Line 156:     }",
                "// Line 157: ",
                "// vulnerable line: 158: /**",
                "// vulnerable line: 159: * @return string",
                "// vulnerable line: 160: */",
                "// vulnerable line: 161: protected function fetchSubmitValueMasschange()",
                "// Line 162:     {",
                "// Line 163:         $is_checked  = false;",
                "// Line 164:         $is_disabled = false;",
                "// Line 165: ",
                "// vulnerable line: 166: return $this->getArtifactValueHTML($this->getId(), $is_checked, $is_disabled);",
                "// Line 167:     }",
                "// Line 168: ",
                "// vulnerable line: 169: /**",
                "// Line 170:      * Fetch the html code to display the field value in artifact",
                "// vulnerable line: 171: *",
                "// Line 172:      * @param Artifact                        $artifact         The artifact",
                "// Line 173:      * @param Tracker_Artifact_ChangesetValue $value            The actual value of the field",
                "// Line 174:      * @param array                           $submitted_values The value already submitted by the user",
                "// vulnerable line: 175: *",
                "// vulnerable line: 176: * @return string",
                "// vulnerable line: 177: */",
                "// Line 178:     protected function fetchArtifactValue(",
                "// Line 179:         Artifact $artifact,",
                "// Line 180:         ?Tracker_Artifact_ChangesetValue $value,",
                "// Line 181:         array $submitted_values,",
                "// Line 182:     ) {",
                "// Line 183:         $is_read_only = false;",
                "// Line 184:         return $this->fetchArtifactValueCommon($is_read_only, $artifact, $value, $submitted_values);",
                "// Line 185:     }",
                "// Line 186: ",
                "// vulnerable line: 187: /**",
                "// Line 188:      * Fetch the field value in artifact to be displayed in mail",
                "// vulnerable line: 189: *",
                "// Line 190:      * @param Artifact                        $artifact The artifact",
                "// Line 191:      * @param PFUser                          $user     The user who will receive the email",
                "// Line 192:      * @param bool                            $ignore_perms",
                "// Line 193:      * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field",
                "// Line 194:      * @param string                          $format   mail format",
                "// vulnerable line: 195: *",
                "// vulnerable line: 196: * @return string",
                "// vulnerable line: 197: */",
                "// Line 198:     public function fetchMailArtifactValue(",
                "// Line 199:         Artifact $artifact,",
                "// Line 200:         PFUser $user,",
                "// Line 201:         $ignore_perms,",
                "// Line 202:         ?Tracker_Artifact_ChangesetValue $value = null,",
                "// Line 203:         $format = 'text',",
                "// Line 204:     ) {",
                "// Line 205:         $output    = '';",
                "// Line 206:         $separator = '&nbsp;';",
                "// Line 207:         if ($format == 'text') {",
                "// Line 208:             $separator = PHP_EOL;",
                "// Line 209:             $output   .= dgettext('tuleap-tracker', 'Restrict access to this artifact for the following user groups:');",
                "// Line 210:         }",
                "// Line 211: ",
                "// Line 212:         $ugroups = permission_fetch_selected_ugroups(self::PERMISSION_TYPE, $artifact->getId(), $this->getTracker()->getGroupId());",
                "// Line 213:         $output .= $separator . implode(', ', $ugroups);",
                "// Line 214:         return $output;",
                "// Line 215:     }",
                "// Line 216: ",
                "// vulnerable line: 217: /**",
                "// Line 218:      * Fetch the html code to display the field value in artifact in read only mode",
                "// vulnerable line: 219: *",
                "// Line 220:      * @param Artifact                        $artifact The artifact",
                "// Line 221:      * @param Tracker_Artifact_ChangesetValue $value    The actual value of the field",
                "// vulnerable line: 222: *",
                "// vulnerable line: 223: * @return string",
                "// vulnerable line: 224: */",
                "// Line 225:     public function fetchArtifactValueReadOnly(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)",
                "// Line 226:     {",
                "// Line 227:         $is_read_only = true;",
                "// Line 228:         return $this->fetchArtifactValueCommon($is_read_only, $artifact, $value, []);",
                "// Line 229:     }",
                "// Line 230: ",
                "// Line 231:     public function fetchArtifactValueWithEditionFormIfEditable(",
                "// Line 232:         Artifact $artifact,",
                "// Line 233:         ?Tracker_Artifact_ChangesetValue $value,",
                "// Line 234:         array $submitted_values,",
                "// Line 256:     {",
                "// Line 257:         $changeset_values   = $this->getLastChangesetValues($artifact_id);",
                "// Line 258:         $is_expecting_input = $this->isRequired() && empty($changeset_values);",
                "// Line 259: ",
                "// Line 260:         $html  = $this->fetchRestrictCheckbox($can_user_restrict_permissions_to_nobody, $is_read_only, $is_expecting_input);",
                "// Line 261:         $html .= $this->fetchUserGroupList($is_read_only, $changeset_values);",
                "// Line 262: ",
                "// Line 263:         return $html;",
                "// Line 264:     }",
                "// Line 265: ",
                "// vulnerable line: 266: private function fetchUserGroupList($is_read_only, array $changeset_values)",
                "// Line 267:     {",
                "// Line 268:         $field_id     = $this->getId();",
                "// Line 269:         $element_name = 'artifact[' . $field_id . '][u_groups][]';",
                "// Line 270: ",
                "// Line 271:         $hp    = Codendi_HTMLPurifier::instance();",
                "// Line 272:         $html  = '<select '",
                "// Line 273:             . 'name=\"' . $hp->purify($element_name) . '\" '",
                "// vulnerable line: 274: . 'id=\"' . $hp->purify(str_replace('[]', '', $element_name)) . '\" '",
                "// Line 275:             . 'multiple '",
                "// Line 276:             . 'size=\"8\" '",
                "// Line 277:             . (($this->isRequired()) ? 'required=\"required\"' : '' )",
                "// Line 278:             . (($is_read_only) ? 'disabled=\"disabled\"' : '' )",
                "// Line 279:             . '>';",
                "// Line 280:         $html .= $this->getOptions($this->getAllUserGroups(), $changeset_values);",
                "// Line 281:         $html .= '</select>';",
                "// Line 282: ",
                "// Line 283:         return $html;",
                "// Line 284:     }",
                "// Line 288:         $user_group_ids = [];",
                "// Line 289: ",
                "// Line 290:         $db_res = permission_db_authorized_ugroups(self::PERMISSION_TYPE, $artifact_id);",
                "// Line 291:         while ($row = db_fetch_array($db_res)) {",
                "// Line 292:             $user_group_ids[] = $row['ugroup_id'];",
                "// Line 293:         }",
                "// Line 294: ",
                "// Line 295:         return $user_group_ids;",
                "// Line 296:     }",
                "// Line 297: ",
                "// vulnerable line: 298: /**",
                "// Line 299:      * @see fetchArtifactValueReadOnly",
                "// Line 300:      * @see fetchArtifactValue",
                "// vulnerable line: 301: *",
                "// Line 302:      * @param bool                            $is_read_only",
                "// Line 303:      * @param array                           $submitted_values",
                "// vulnerable line: 304: *",
                "// Line 305:      * @return string html",
                "// vulnerable line: 306: */",
                "// Line 307:     protected function fetchArtifactValueCommon(",
                "// Line 308:         $is_read_only,",
                "// Line 309:         Artifact $artifact,",
                "// Line 310:         ?Tracker_Artifact_ChangesetValue $value,",
                "// Line 311:         array $submitted_values,",
                "// Line 312:     ) {",
                "// Line 313:         if (isset($submitted_values[$this->getId()]) && is_array($submitted_values[$this->getId()])) {",
                "// Line 314:             $is_checked = $this->getPermissionsValidator()->isArtifactPermissionChecked($submitted_values[$this->getId()]);",
                "// Line 315:         } else {",
                "// Line 316:             $is_checked = $artifact->useArtifactPermissions();",
                "// Line 317:         }",
                "// Line 318: ",
                "// Line 319:         return $this->getArtifactValueHTML($artifact->getId(), $is_checked, $is_read_only);",
                "// Line 320:     }",
                "// Line 321: ",
                "// vulnerable line: 322: /**",
                "// vulnerable line: 323: * @return string",
                "// vulnerable line: 324: */",
                "// Line 325:     protected function fetchAdminFormElement()",
                "// Line 326:     {",
                "// Line 327:         $changeset_values = $this->getLastChangesetValues(0);",
                "// Line 328: ",
                "// Line 329:         $html  = $this->fetchRestrictCheckbox(false, true, false);",
                "// Line 330:         $html .= $this->fetchUserGroupList(true, $changeset_values);",
                "// Line 331: ",
                "// Line 332:         return $html;",
                "// Line 333:     }",
                "// Line 334: ",
                "// Line 345:     public static function getFactoryIconUseIt()",
                "// Line 346:     {",
                "// Line 347:         return $GLOBALS['HTML']->getImagePath('ic/lock.png');",
                "// Line 348:     }",
                "// Line 349: ",
                "// Line 350:     public static function getFactoryIconCreate()",
                "// Line 351:     {",
                "// Line 352:         return $GLOBALS['HTML']->getImagePath('ic/lock--plus.png');",
                "// Line 353:     }",
                "// Line 354: ",
                "// vulnerable line: 355: /**",
                "// Line 356:      * @return bool say if the field is a unique one",
                "// vulnerable line: 357: */",
                "// Line 358:     public static function getFactoryUniqueField()",
                "// Line 359:     {",
                "// Line 360:         return true;",
                "// Line 361:     }",
                "// Line 362: ",
                "// vulnerable line: 363: /**",
                "// Line 364:      * Fetch the html code to display the field value in tooltip",
                "// vulnerable line: 365: *",
                "// Line 366:      * @param Tracker_Artifact_ChangesetValue_PermissionsOnArtifact $value The changeset value for this field",
                "// vulnerable line: 367: * @return string",
                "// vulnerable line: 368: */",
                "// Line 369:     protected function fetchTooltipValue(Artifact $artifact, ?Tracker_Artifact_ChangesetValue $value = null)",
                "// Line 370:     {",
                "// Line 371:         $html = '';",
                "// Line 372:         if ($value && $artifact->useArtifactPermissions()) {",
                "// Line 373:             $ugroup_dao = $this->getUGroupDao();",
                "// Line 374: ",
                "// Line 375:             $perms      = $value->getPerms();",
                "// Line 376:             $perms_name = [];",
                "// Line 377:             foreach ($perms as $perm) {",
                "// Line 378:                 $row          = $ugroup_dao->searchByUGroupId($perm)->getRow();",
                "// Line 379:                 $perms_name[] = \\TuleapserserGroupameTranslator::getUserGroupDisplayKey((string) $row['name']);",
                "// Line 380:             }",
                "// Line 381:             $html .= implode(\",\", $perms_name);",
                "// Line 382:         }",
                "// Line 383:         return $html;",
                "// Line 384:     }",
                "// Line 385: ",
                "// vulnerable line: 386: /**",
                "// Line 387:     * Returns the UGroupDao",
                "// vulnerable line: 388: *",
                "// Line 389:     * @return UGroupDao The dao",
                "// vulnerable line: 390: */",
                "// Line 391:     protected function getUGroupDao()",
                "// Line 392:     {",
                "// Line 393:         return new UGroupDao(CodendiDataAccess::instance());",
                "// Line 394:     }",
                "// Line 395: ",
                "// Line 396:     public function getCriteriaFromWhere(Tracker_Report_Criteria $criteria): Option",
                "// Line 397:     {",
                "// Line 398:         //Only filter query if field is used",
                "// Line 399:         if (! $this->isUsed()) {",
                "// Line 400:             return Option::nothing(ParametrizedFromWhere::class);",
                "// Line 425:             return Option::fromValue(",
                "// Line 426:                 ParametrizedFromWhere::fromParametrizedFrom(",
                "// Line 427:                     new ParametrizedFrom($sql, [$this->id, ...$in->values()])",
                "// Line 428:                 )",
                "// Line 429:             );",
                "// Line 430:         }",
                "// Line 431: ",
                "// Line 432:         return Option::nothing(ParametrizedFromWhere::class);",
                "// Line 433:     }",
                "// Line 434: ",
                "// vulnerable line: 435: /**",
                "// Line 436:      * Get the \"from\" statement to retrieve field values",
                "// Line 437:      * You can join on artifact AS a, tracker_changeset AS c",
                "// Line 438:      * which tables used to retrieve the last changeset of matching artifacts.",
                "// vulnerable line: 439: * @return string",
                "// vulnerable line: 440: */",
                "// Line 441: ",
                "// Line 442:     public function getQueryFrom()",
                "// Line 443:     {",
                "// Line 444:         return '';",
                "// Line 445:     }",
                "// Line 446: ",
                "// vulnerable line: 447: /**",
                "// Line 448:      * @see getQueryFrom",
                "// vulnerable line: 449: */",
                "// Line 450:     public function getQuerySelect(): string",
                "// Line 451:     {",
                "// Line 452:         return '';",
                "// Line 453:     }",
                "// Line 454: ",
                "// vulnerable line: 455: /**",
                "// Line 456:      * Search in the db the criteria value used to search against this field.",
                "// Line 457:      * @param Tracker_Report_Criteria $criteria",
                "// Line 458:      * @return mixed",
                "// vulnerable line: 459: */",
                "// Line 460:     public function getCriteriaValue($criteria)",
                "// Line 461:     {",
                "// Line 462:         if (! isset($this->criteria_value)) {",
                "// Line 463:             $this->criteria_value = [];",
                "// Line 464:         }",
                "// Line 465: ",
                "// Line 466:         if (isset($this->criteria_value[$criteria->report->id]) && $this->criteria_value[$criteria->report->id]) {",
                "// Line 467:             $values                                      = $this->criteria_value[$criteria->report->id];",
                "// Line 468:             $this->criteria_value[$criteria->report->id] = [];",
                "// Line 469: ",
                "// Line 541:             $id       = $user_group->getId();",
                "// Line 542:             $selected = (in_array($id, $selected_ids)) ? 'selected=\"selected\"' : '';",
                "// Line 543:             $options .= '<option value=\"' . $id . '\" ' . $selected . '>';",
                "// Line 544:             $options .= NameTranslator::getUserGroupDisplayName($user_group->getName());",
                "// Line 545:             $options .= '</option>';",
                "// Line 546:         }",
                "// Line 547: ",
                "// Line 548:         return $options;",
                "// Line 549:     }",
                "// Line 550: ",
                "// vulnerable line: 551: /**",
                "// Line 552:      * @return ProjectUGroup[]",
                "// vulnerable line: 553: */",
                "// Line 554:     public function getAllUserGroups()",
                "// Line 555:     {",
                "// Line 556:         $user_groups     = [];",
                "// Line 557:         $permission_type = self::PERMISSION_TYPE;",
                "// Line 558: ",
                "// Line 559:         $sql = \"SELECT ugroup_id FROM permissions_values WHERE permission_type='$permission_type'\";",
                "// Line 560:         $res = db_query($sql);",
                "// Line 561: ",
                "// Line 562:         $predefined_ugroups = '';",
                "// Line 563:         if (db_numrows($res) < 1) {",
                "// Line 579:         }",
                "// Line 580: ",
                "// Line 581:         return $user_groups;",
                "// Line 582:     }",
                "// Line 583: ",
                "// Line 584:     protected function getCriteriaDao()",
                "// Line 585:     {",
                "// Line 586:         return new Tracker_Report_Criteria_PermissionsOnArtifact_ValueDao();",
                "// Line 587:     }",
                "// Line 588: ",
                "// vulnerable line: 589: /**",
                "// Line 590:      * @param mixed            $value",
                "// vulnerable line: 591: *",
                "// Line 592:      * @return bool true if the value is considered ok",
                "// vulnerable line: 593: */",
                "// Line 594:     protected function validate(Artifact $artifact, $value)",
                "// Line 595:     {",
                "// Line 596:         if ($this->getPermissionsValidator()->isArtifactPermissionChecked($value) === true) {",
                "// Line 597:             return $this->getPermissionsValidator()->isNoneGroupSelected($value) === false;",
                "// Line 598:         }",
                "// Line 599: ",
                "// Line 600:         return $this->getPermissionsValidator()->hasAGroupSelected($value);",
                "// Line 601:     }",
                "// Line 602: ",
                "// vulnerable line: 603: /**",
                "// Line 604:      * @param mixed $submitted_value",
                "// vulnerable line: 605: *",
                "// vulnerable line: 606: */",
                "// Line 607:     public function validateFieldWithPermissionsAndRequiredStatus(",
                "// Line 608:         Artifact $artifact,",
                "// Line 609:         $submitted_value,",
                "// Line 610:         PFUser $user,",
                "// Line 611:         ?Tracker_Artifact_ChangesetValue $last_changeset_value = null,",
                "// Line 612:         ?bool $is_submission = null,",
                "// Line 613:     ): bool {",
                "// Line 614:         if ($last_changeset_value === null && $this->isRequired() === true && $this->isAtLeastOneUGroupSelected($submitted_value) === false) {",
                "// Line 615:             $this->addRequiredError();",
                "// Line 616: ",
                "// Line 666: ",
                "// Line 667:         if (! empty($value['u_groups'])) {",
                "// Line 668:             $this->addPermissions($value['u_groups'], $artifact->getId());",
                "// Line 669: ",
                "// Line 670:             return $this->getValueDao()->create($changeset_value_id, $value[self::USE_IT], $value['u_groups']);",
                "// Line 671:         }",
                "// Line 672: ",
                "// Line 673:         return true;",
                "// Line 674:     }",
                "// Line 675: ",
                "// vulnerable line: 676: /**",
                "// Line 677:      * @see Tracker_FormElement_Field::hasChanges()",
                "// vulnerable line: 678: */",
                "// Line 679:     public function hasChanges(Artifact $artifact, Tracker_Artifact_ChangesetValue $old_value, $new_value)",
                "// Line 680:     {",
                "// Line 681:         assert($old_value instanceof Tracker_Artifact_ChangesetValue_PermissionsOnArtifact);",
                "// Line 682:         return (new ChangesChecker())->hasChanges($old_value, $new_value);",
                "// Line 683:     }",
                "// Line 684: ",
                "// vulnerable line: 685: /**",
                "// Line 686:      * Get the value of this field",
                "// vulnerable line: 687: *",
                "// Line 688:      * @param Tracker_Artifact_Changeset $changeset   The changeset (needed in only few cases like 'lud' field)",
                "// Line 689:      * @param int                        $value_id    The id of the value",
                "// Line 690:      * @param bool $has_changed If the changeset value has changed from the previous one",
                "// vulnerable line: 691: *",
                "// Line 692:      * @return Tracker_Artifact_ChangesetValue or null if not found",
                "// vulnerable line: 693: */",
                "// Line 694:     public function getChangesetValue($changeset, $value_id, $has_changed)",
                "// Line 695:     {",
                "// Line 696:         $value_ids = $this->getValueDao()->searchById($value_id) ?: [];",
                "// Line 697:         $ugroups   = [];",
                "// Line 698: ",
                "// Line 699:         foreach ($value_ids as $v) {",
                "// Line 700:             $ugroups[(int) $v['ugroup_id']] = $v['ugroup_name'];",
                "// Line 701:         }",
                "// Line 702: ",
                "// Line 703:         return new Tracker_Artifact_ChangesetValue_PermissionsOnArtifact($value_id, $changeset, $this, $has_changed, $changeset->getArtifact()->useArtifactPermissions(), $ugroups);",
                "// Line 718: ",
                "// Line 719:             $user_groups = $this->getUserGroupsFromREST($value['value'][self::GRANTED_GROUPS]);",
                "// Line 720: ",
                "// Line 721:             return $this->getFieldDataFromArray($user_groups);",
                "// Line 722:         }",
                "// Line 723:         throw new Tracker_FormElement_InvalidFieldException(",
                "// Line 724:             'Permission field values must be passed as an array of ugroup ids e.g. \"value\" : {\"granted_groups\" : [158, \"142_3\"]}'",
                "// Line 725:         );",
                "// Line 726:     }",
                "// Line 727: ",
                "// vulnerable line: 728: /**",
                "// Line 729:      * @return int[]",
                "// Line 730:      * @throws Tracker_FormElement_InvalidFieldException",
                "// vulnerable line: 731: */",
                "// Line 732:     private function getUserGroupsFromREST($user_groups)",
                "// Line 733:     {",
                "// Line 734:         if (! is_array($user_groups)) {",
                "// Line 735:             throw new Tracker_FormElement_InvalidFieldException(\"'granted_groups' must be an array. E.g. [2, '124_3']\");",
                "// Line 736:         }",
                "// Line 737: ",
                "// Line 738:         $project_groups = [];",
                "// Line 739:         foreach ($user_groups as $user_group) {",
                "// Line 740:             try {",
                "// Line 741:                 UserGroupRepresentation::checkRESTIdIsAppropriate($user_group);",
                "// Line 756:         }",
                "// Line 757: ",
                "// Line 758:         return $project_groups;",
                "// Line 759:     }",
                "// Line 760: ",
                "// Line 761:     public function getFieldDataFromRESTValueByField(array $value, ?Artifact $artifact = null)",
                "// Line 762:     {",
                "// Line 763:         throw new Tracker_FormElement_RESTValueByField_NotImplementedException();",
                "// Line 764:     }",
                "// Line 765: ",
                "// vulnerable line: 766: /**",
                "// Line 767:      * Get the field data for artifact submission",
                "// vulnerable line: 768: *",
                "// Line 769:      * @param string $value",
                "// vulnerable line: 770: *",
                "// Line 771:      * @return mixed the field data corresponding to the value for artifact submission",
                "// vulnerable line: 772: */",
                "// Line 773:     public function getFieldData($value)",
                "// Line 774:     {",
                "// Line 775:         return $this->getFieldDataFromArray(explode(',', $value));",
                "// Line 776:     }",
                "// Line 777: ",
                "// Line 778:     private function getFieldDataFromArray(array $values)",
                "// Line 779:     {",
                "// Line 780:         $ugroup_ids = array_filter(array_map('intval', $values));",
                "// Line 781:         if (count($ugroup_ids) == 0) {",
                "// Line 782:             return [",
                "// Line 784:                 'u_groups'   => [],",
                "// Line 785:             ];",
                "// Line 786:         } else {",
                "// Line 787:             return [",
                "// Line 788:                 self::USE_IT => 1,",
                "// Line 789:                 'u_groups'   => $ugroup_ids,",
                "// Line 790:             ];",
                "// Line 791:         }",
                "// Line 792:     }",
                "// Line 793: ",
                "// vulnerable line: 794: /**",
                "// Line 795:      * @return bool",
                "// vulnerable line: 796: */",
                "// Line 797:     protected function criteriaCanBeAdvanced()",
                "// Line 798:     {",
                "// Line 799:         return true;",
                "// Line 800:     }",
                "// Line 801: ",
                "// vulnerable line: 802: /**",
                "// Line 803:      * Adds permissions in the database",
                "// vulnerable line: 804: *",
                "// Line 805:      * @param Array $ugroups the list of ugroups",
                "// Line 806:      * @param int          $artifact_id  The id of the artifact",
                "// vulnerable line: 807: *",
                "// Line 808:      * @return bool",
                "// vulnerable line: 809: */",
                "// Line 810:     public function addPermissions($ugroups, $artifact_id)",
                "// Line 811:     {",
                "// Line 812:         $pm              = PermissionsManager::instance();",
                "// Line 813:         $permission_type = self::PERMISSION_TYPE;",
                "// Line 814:         foreach ($ugroups as $ugroup) {",
                "// Line 815:             if (! $pm->addPermission($permission_type, $artifact_id, $ugroup)) {",
                "// Line 816:                 return false;",
                "// Line 817:             }",
                "// Line 818:         }",
                "// Line 819:         return true;",
                "// Line 820:     }",
                "// Line 821: ",
                "// Line 822:     public function accept(Tracker_FormElement_FieldVisitor $visitor)",
                "// Line 823:     {",
                "// Line 824:         return $visitor->visitPermissionsOnArtifact($this);",
                "// Line 825:     }",
                "// Line 826: ",
                "// vulnerable line: 827: /**",
                "// Line 828:      * Return REST value of a field for a given changeset",
                "// vulnerable line: 829: *",
                "// vulnerable line: 830: *",
                "// Line 831:      * @return mixed | null if no values",
                "// vulnerable line: 832: */",
                "// Line 833:     public function getRESTValue(PFUser $user, Tracker_Artifact_Changeset $changeset)",
                "// Line 834:     {",
                "// Line 835:         $value = $changeset->getValue($this);",
                "// Line 836:         if ($value) {",
                "// Line 837:             return $value->getFullRESTValue($user);",
                "// Line 838:         }",
                "// Line 839:     }",
                "// Line 840: ",
                "// vulnerable line: 841: /**",
                "// Line 842:      * @return PermissionsOnArtifacts",
                "// vulnerable line: 843: */",
                "// Line 844:     public function getRESTAvailableValues()",
                "// Line 845:     {",
                "// Line 846:         $representation = new PermissionsOnArtifacts();",
                "// Line 847:         $project_id     = $this->getTracker()->getGroupId();",
                "// Line 848:         $representation->build($project_id, self::IS_USED_BY_DEFAULT, $this->getAllUserGroups());",
                "// Line 849: ",
                "// Line 850:         return $representation;",
                "// Line 851:     }",
                "// Line 852: ",
                "// vulnerable line: 853: /**",
                "// Line 854:      * @param bool $can_user_restrict_permissions_to_nobody",
                "// Line 855:      * @param bool $disabled",
                "// vulnerable line: 856: *",
                "// vulnerable line: 857: * @return string",
                "// vulnerable line: 858: */",
                "// vulnerable line: 859: private function fetchRestrictCheckbox($can_user_restrict_permissions_to_nobody, $disabled, $is_expecting_input)",
                "// Line 860:     {",
                "// Line 861:         $empty_value_class = '';",
                "// Line 862:         if ($is_expecting_input) {",
                "// Line 863:             $empty_value_class = 'empty_value';",
                "// Line 864:         }",
                "// Line 865: ",
                "// vulnerable line: 866: $html = '<p class=\"tracker_field_permissionsonartifact ' . $empty_value_class . '\">';",
                "// Line 867:         if ($this->isRequired() == false) {",
                "// Line 868:             if (! $disabled) {",
                "// vulnerable line: 869: $html .= '<input type=\"hidden\" name=\"artifact[' . $this->getId() . '][use_artifact_permissions]\" value=\"0\" />';",
                "// Line 870:             }",
                "// vulnerable line: 871: $html .= '<label class=\"checkbox\" for=\"artifact_' . $this->getId() . '_use_artifact_permissions\">';",
                "// vulnerable line: 872: $html .= '<input type=\"checkbox\"",
                "// vulnerable line: 873: name=\"artifact[' . $this->getId() . '][use_artifact_permissions]\"",
                "// vulnerable line: 874: id=\"artifact_' . $this->getId() . '_use_artifact_permissions\"",
                "// Line 875:                         value=\"1\" ' .",
                "// Line 876:                 (($can_user_restrict_permissions_to_nobody == true) ? 'checked=\"checked\"' : '') .",
                "// Line 877:                 (($disabled == true) ? 'disabled=\"disabled\"' : '') .",
                "// Line 878:                 '/>';",
                "// Line 879:         } else {",
                "// vulnerable line: 880: $html .= '<input type=\"hidden\" name=\"artifact[' . $this->getId(",
                "// vulnerable line: 881: ) . '][use_artifact_permissions]\" value=\"1\" />';",
                "// Line 882:         }",
                "// Line 883: ",
                "// Line 884:         $html .= dgettext('tuleap-tracker', 'Restrict access to this artifact for the following user groups:') . '</label>';",
                "// Line 885:         $html .= '</p>';",
                "// Line 886: ",
                "// Line 887:         return $html;",
                "// Line 888:     }",
                "// Line 889: ",
                "// Line 890:     public function isCSVImportable(): bool",
                "// Line 891:     {"
            ]
        }
    ]
}