{
    "cve_id": "CVE-2024-1739",
    "cve_description": "lunary-ai/lunary is vulnerable to an authentication issue due to improper validation of email addresses during the signup process. Specifically, the server fails to treat email addresses as case insensitive, allowing the creation of multiple accounts with the same email address by varying the case of the email characters. For example, accounts for 'abc@gmail.com' and 'Abc@gmail.com' can both be created, leading to potential impersonation and confusion among users.",
    "cve_publish_date": "2024-04-16T00:15Z",
    "cwe_id": "CWE-821",
    "cwe_name": "Incorrect Synchronization",
    "cwe_description": "The product utilizes a shared resource in a concurrent manner, but it does not correctly synchronize access to the resource.",
    "commit_message": "fix: case sensitivity for existing user verification",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "index.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 33:     orgId,",
                "// Line 34:     signupMethod,",
                "// Line 35:   } = bodySchema.parse(ctx.request.body)",
                "// Line 36: ",
                "// Line 37:   if (orgName?.includes(\"https://\") || name.includes(\"http://\")) {",
                "// Line 38:     ctx.throw(403, \"Bad request\")",
                "// Line 39:     return",
                "// Line 40:   }",
                "// Line 41: ",
                "// Line 42:   const [existingUser] = await sql`",
                "// vulnerable line: 43: select * from account where email = ${email}",
                "// Line 44:   `",
                "// Line 45:   if (existingUser) {",
                "// Line 46:     ctx.throw(403, \"User already exists\")",
                "// Line 47:   }",
                "// Line 48: ",
                "// Line 49:   if (signupMethod === \"signup\") {",
                "// Line 50:     const { user, org } = await sql.begin(async (sql) => {",
                "// Line 51:       const plan = process.env.DEFAULT_PLAN || \"free\"",
                "// Line 52: ",
                "// Line 53:       const [org] =",
                "// Line 137: })",
                "// Line 138: ",
                "// Line 139: auth.post(\"/login\", async (ctx: Context) => {",
                "// Line 140:   const bodySchema = z.object({",
                "// Line 141:     email: z.string().email(),",
                "// Line 142:     password: z.string(),",
                "// Line 143:   })",
                "// Line 144:   const { email, password } = bodySchema.parse(ctx.request.body)",
                "// Line 145: ",
                "// Line 146:   const [user] = await sql`",
                "// vulnerable line: 147: select * from account where email = ${email}",
                "// Line 148:   `",
                "// Line 149:   if (!user) {",
                "// Line 150:     ctx.status = 403",
                "// Line 151:     ctx.body = { error: \"Unauthorized\", message: \"Invalid email or password\" }",
                "// Line 152:     return",
                "// Line 153:   }",
                "// Line 154: ",
                "// Line 155:   const passwordCorrect = await verifyPassword(password, user.passwordHash)",
                "// Line 156: ",
                "// Line 157:   if (!passwordCorrect) {"
            ]
        }
    ]
}