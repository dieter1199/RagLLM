{
    "cve_id": "CVE-2024-31455",
    "cve_description": "Minder by Stacklok is an open source software supply chain security platform. A refactoring in commit `5c381cf` added the ability to get GitHub repositories registered to a project without specifying a specific provider.  Unfortunately, the SQL query for doing so was missing parenthesis, and would select a random repository. This issue is patched in pull request 2941. As a workaround, revert prior to `5c381cf`, or roll forward past `2eb94e7`.",
    "cve_publish_date": "2024-04-09T17:16Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Make provider an optional filter (#2871)\n\nRef #2522",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "artifact.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 13: // See the License for the specific language governing permissions and",
                "// Line 14: // limitations under the License.",
                "// Line 15: ",
                "// Line 16: // Package artifact provides the artifact subcommands",
                "// Line 17: package artifact",
                "// Line 18: ",
                "// Line 19: import (",
                "// Line 20:     \"github.com/spf13/cobra\"",
                "// Line 21: ",
                "// Line 22:     \"github.com/stacklok/minder/cmd/cli/app\"",
                "// vulnerable line: 23: ghclient \"github.com/stacklok/minder/internal/providers/github/oauth\"",
                "// Line 24: )",
                "// Line 25: ",
                "// Line 26: // ArtifactCmd is the artifact subcommand",
                "// Line 27: var ArtifactCmd = &cobra.Command{",
                "// Line 28:     Use:   \"artifact\",",
                "// Line 29:     Short: \"Manage artifacts within a minder control plane\",",
                "// Line 30:     Long:  `The minder artifact commands allow the management of artifacts within a minder control plane`,",
                "// Line 31:     RunE: func(cmd *cobra.Command, _ []string) error {",
                "// Line 32:         return cmd.Usage()",
                "// Line 33:     },",
                "// Line 34: }",
                "// Line 35: ",
                "// Line 36: func init() {",
                "// Line 37:     app.RootCmd.AddCommand(ArtifactCmd)",
                "// Line 38:     // Flags for all subcommands",
                "// vulnerable line: 39: ArtifactCmd.PersistentFlags().StringP(\"provider\", \"p\", ghclient.Github, \"Name of the provider, i.e. github\")",
                "// Line 40:     ArtifactCmd.PersistentFlags().StringP(\"project\", \"j\", \"\", \"ID of the project\")",
                "// Line 41: }"
            ]
        },
        {
            "filename_of_changes": "common.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "9",
            "number_of_lines_deleted_vulnerable_to_cve": "6",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 53:     if trait.Valid {",
                "// Line 54:         msgs = append(msgs, fmt.Sprintf(\"trait: %s\", trait.ProviderType))",
                "// Line 55:     }",
                "// Line 56: ",
                "// Line 57:     return util.UserVisibleError(codes.NotFound, \"provider not found with filters: %s\", strings.Join(msgs, \", \"))",
                "// Line 58: }",
                "// Line 59: ",
                "// Line 60: func getProviderFromRequestOrDefault(",
                "// Line 61:     ctx context.Context,",
                "// Line 62:     store db.Store,",
                "// vulnerable line: 63: in HasProtoContext,",
                "// Line 64:     projectId uuid.UUID,",
                "// Line 65: ) (db.Provider, error) {",
                "// vulnerable line: 66: name := getNameFilterParam(in.GetContext())",
                "// Line 67:     providers, err := findProvider(ctx, name, db.NullProviderType{}, projectId, store)",
                "// Line 68:     if err != nil {",
                "// Line 69:         return db.Provider{}, err",
                "// Line 70:     }",
                "// Line 71: ",
                "// Line 72:     return inferProvider(providers, name)",
                "// Line 73: }",
                "// Line 74: ",
                "// Line 75: func getProvidersByTrait(",
                "// Line 76:     ctx context.Context,",
                "// Line 77:     store db.Store,",
                "// vulnerable line: 78: in HasProtoContext,",
                "// Line 79:     projectId uuid.UUID,",
                "// Line 80:     trait db.ProviderType,",
                "// Line 81: ) ([]db.Provider, error) {",
                "// vulnerable line: 82: name := getNameFilterParam(in.GetContext())",
                "// Line 83:     t := db.NullProviderType{ProviderType: trait, Valid: true}",
                "// Line 84:     providers, err := findProvider(ctx, name, t, projectId, store)",
                "// Line 85:     if err != nil {",
                "// Line 86:         return nil, err",
                "// Line 87:     }",
                "// Line 88: ",
                "// Line 89:     return providers, nil",
                "// Line 90: }",
                "// Line 91: ",
                "// Line 92: // findProvider is a helper function to find a provider by name and trait",
                "// Line 113:     }",
                "// Line 114: ",
                "// Line 115:     if len(provs) == 0 {",
                "// Line 116:         return nil, filteredResultNotFoundError(name, trait)",
                "// Line 117:     }",
                "// Line 118: ",
                "// Line 119:     return provs, nil",
                "// Line 120: }",
                "// Line 121: ",
                "// Line 122: // getNameFilterParam allows us to build a name filter for our provider queries",
                "// vulnerable line: 123: func getNameFilterParam(in *pb.Context) sql.NullString {",
                "// Line 124:     return sql.NullString{",
                "// vulnerable line: 125: String: in.GetProvider(),",
                "// vulnerable line: 126: Valid:  in.GetProvider() != \"\",",
                "// Line 127:     }",
                "// Line 128: }",
                "// Line 129: ",
                "// Line 130: // given a list of providers, inferProvider will validate the filter and",
                "// Line 131: // return the provider if it can be inferred. Note that this assumes that validation",
                "// Line 132: // has already been made and that the list of providers is not empty.",
                "// Line 133: func inferProvider(providers []db.Provider, nameFilter sql.NullString) (db.Provider, error) {",
                "// Line 134:     if !nameFilter.Valid {",
                "// Line 135:         if len(providers) == 1 {",
                "// Line 136:             return providers[0], nil"
            ]
        },
        {
            "filename_of_changes": "common.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "13",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "handlers_artifacts.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "8",
            "number_of_lines_deleted_vulnerable_to_cve": "9",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 33:     \"github.com/stacklok/minder/internal/util\"",
                "// Line 34:     pb \"github.com/stacklok/minder/pkg/api/protobuf/go/minder/v1\"",
                "// Line 35: )",
                "// Line 36: ",
                "// Line 37: // ListArtifacts lists all artifacts for a given project and provider",
                "// Line 38: // nolint:gocyclo",
                "// Line 39: func (s *Server) ListArtifacts(ctx context.Context, in *pb.ListArtifactsRequest) (*pb.ListArtifactsResponse, error) {",
                "// Line 40:     entityCtx := engine.EntityFromContext(ctx)",
                "// Line 41:     projectID := entityCtx.Project.ID",
                "// Line 42: ",
                "// vulnerable line: 43: provider, err := getProviderFromRequestOrDefault(ctx, s.store, in, projectID)",
                "// vulnerable line: 44: if err != nil {",
                "// vulnerable line: 45: return nil, providerError(err)",
                "// vulnerable line: 46: }",
                "// Line 47: ",
                "// Line 48:     artifactFilter, err := parseArtifactListFrom(s.store, in.From)",
                "// vulnerable line: 49: if err != nil {",
                "// Line 50:         return nil, fmt.Errorf(\"failed to parse artifact list from: %w\", err)",
                "// vulnerable line: 51: }",
                "// Line 52: ",
                "// vulnerable line: 53: results, err := artifactFilter.listArtifacts(ctx, provider.Name, projectID)",
                "// vulnerable line: 54: if err != nil {",
                "// Line 55:         return nil, fmt.Errorf(\"failed to list artifacts: %w\", err)",
                "// vulnerable line: 56: }",
                "// Line 57: ",
                "// Line 58:     // Telemetry logging",
                "// vulnerable line: 59: logger.BusinessRecord(ctx).Provider = provider.Name",
                "// Line 60:     logger.BusinessRecord(ctx).Project = projectID",
                "// Line 61: ",
                "// Line 62:     return &pb.ListArtifactsResponse{Results: results}, nil",
                "// vulnerable line: 63: }",
                "// Line 64: ",
                "// Line 65: // GetArtifactByName gets an artifact by name",
                "// Line 66: // nolint:gocyclo",
                "// Line 67: func (s *Server) GetArtifactByName(ctx context.Context, in *pb.GetArtifactByNameRequest) (*pb.GetArtifactByNameResponse, error) {",
                "// Line 68:     // tag and latest versions cannot be set at same time",
                "// Line 69:     nameParts := strings.Split(in.Name, \"/\")",
                "// Line 70:     if len(nameParts) < 3 {",
                "// Line 71:         return nil, util.UserVisibleError(codes.InvalidArgument, \"invalid artifact name user repoOwner/repoName/artifactName\")",
                "// vulnerable line: 72: }",
                "// Line 73: ",
                "// Line 74:     entityCtx := engine.EntityFromContext(ctx)",
                "// Line 75:     projectID := entityCtx.Project.ID",
                "// Line 76: ",
                "// Line 77:     repo, err := s.store.GetRepositoryByRepoName(ctx, db.GetRepositoryByRepoNameParams{",
                "// vulnerable line: 78: Provider:  in.GetContext().GetProvider(),",
                "// Line 79:         RepoOwner: nameParts[0],",
                "// Line 80:         RepoName:  nameParts[1],",
                "// Line 81:         ProjectID: projectID,",
                "// Line 82:     })",
                "// vulnerable line: 83: if err != nil {",
                "// Line 84:         if errors.Is(err, sql.ErrNoRows) {",
                "// Line 85:             return nil, util.UserVisibleError(codes.NotFound, \"repository not found\")",
                "// vulnerable line: 86: }",
                "// Line 87:         return nil, status.Errorf(codes.Unknown, \"failed to get repository: %s\", err)",
                "// vulnerable line: 88: }",
                "// Line 89: ",
                "// Line 90:     // the artifact name is the rest of the parts",
                "// Line 91:     artifactName := strings.Join(nameParts[2:], \"/\")",
                "// Line 92:     artifact, err := s.store.GetArtifactByName(ctx, db.GetArtifactByNameParams{",
                "// Line 93:         RepositoryID: repo.ID,",
                "// Line 94:         ArtifactName: artifactName,",
                "// Line 95:     })",
                "// vulnerable line: 96: if err != nil {",
                "// Line 97:         if errors.Is(err, sql.ErrNoRows) {",
                "// Line 98:             return nil, status.Errorf(codes.NotFound, \"artifact not found\")",
                "// vulnerable line: 99: }",
                "// Line 100:         return nil, status.Errorf(codes.Unknown, \"failed to get artifact: %s\", err)",
                "// vulnerable line: 101: }",
                "// Line 102: ",
                "// Line 103:     // Telemetry logging",
                "// Line 104:     logger.BusinessRecord(ctx).Provider = artifact.Provider",
                "// Line 105:     logger.BusinessRecord(ctx).Project = artifact.ProjectID",
                "// Line 106:     logger.BusinessRecord(ctx).Artifact = artifact.ID",
                "// Line 107:     logger.BusinessRecord(ctx).Repository = artifact.RepositoryID",
                "// Line 108: ",
                "// Line 109:     return &pb.GetArtifactByNameResponse{Artifact: &pb.Artifact{",
                "// Line 110:         ArtifactPk: artifact.ID.String(),",
                "// Line 111:         Owner:      artifact.RepoOwner,",
                "// Line 112:         Name:       artifact.ArtifactName,",
                "// Line 113:         Type:       artifact.ArtifactType,",
                "// Line 114:         Visibility: artifact.ArtifactVisibility,",
                "// Line 115:         Repository: artifact.RepoName,",
                "// Line 116:         CreatedAt:  timestamppb.New(artifact.CreatedAt),",
                "// Line 117:     },",
                "// Line 118:         Versions: nil, // explicitly nil, will probably deprecate that field later",
                "// Line 119:     }, nil",
                "// vulnerable line: 120: }",
                "// Line 121: ",
                "// Line 122: // GetArtifactById gets an artifact by id",
                "// Line 123: // nolint:gocyclo",
                "// Line 124: func (s *Server) GetArtifactById(ctx context.Context, in *pb.GetArtifactByIdRequest) (*pb.GetArtifactByIdResponse, error) {",
                "// Line 125:     // tag and latest versions cannot be set at same time",
                "// Line 126:     parsedArtifactID, err := uuid.Parse(in.Id)",
                "// vulnerable line: 127: if err != nil {",
                "// Line 128:         return nil, util.UserVisibleError(codes.InvalidArgument, \"invalid artifact ID\")",
                "// vulnerable line: 129: }",
                "// Line 130: ",
                "// Line 131:     // retrieve artifact details",
                "// Line 132:     artifact, err := s.store.GetArtifactByID(ctx, parsedArtifactID)",
                "// vulnerable line: 133: if err != nil {",
                "// Line 134:         if errors.Is(err, sql.ErrNoRows) {",
                "// Line 135:             return nil, status.Errorf(codes.NotFound, \"artifact not found\")",
                "// vulnerable line: 136: }",
                "// Line 137:         return nil, status.Errorf(codes.Unknown, \"failed to get artifact: %s\", err)",
                "// vulnerable line: 138: }",
                "// Line 139: ",
                "// Line 140:     // Telemetry logging",
                "// Line 141:     logger.BusinessRecord(ctx).Provider = artifact.Provider",
                "// Line 142:     logger.BusinessRecord(ctx).Project = artifact.ProjectID",
                "// Line 143:     logger.BusinessRecord(ctx).Artifact = artifact.ID",
                "// Line 144:     logger.BusinessRecord(ctx).Repository = artifact.RepositoryID",
                "// Line 145: ",
                "// Line 146:     return &pb.GetArtifactByIdResponse{Artifact: &pb.Artifact{",
                "// Line 147:         ArtifactPk: artifact.ID.String(),",
                "// Line 148:         Owner:      artifact.RepoOwner,",
                "// Line 149:         Name:       artifact.ArtifactName,",
                "// Line 150:         Type:       artifact.ArtifactType,",
                "// Line 151:         Visibility: artifact.ArtifactVisibility,",
                "// Line 152:         Repository: artifact.RepoName,",
                "// Line 153:         CreatedAt:  timestamppb.New(artifact.CreatedAt),",
                "// Line 154:     },",
                "// Line 155:         Versions: nil, // explicitly nil, will probably deprecate that field later",
                "// Line 156:     }, nil",
                "// vulnerable line: 157: }",
                "// Line 158: ",
                "// Line 159: type artifactSource string",
                "// Line 160: ",
                "// Line 161: const (",
                "// Line 162:     artifactSourceRepo artifactSource = \"repository\"",
                "// Line 163: )",
                "// Line 164: ",
                "// Line 165: type artifactListFilter struct {",
                "// Line 166:     store db.Store",
                "// Line 167: ",
                "// Line 168:     repoSlubList []string",
                "// Line 169:     source       artifactSource",
                "// Line 170:     filter       string",
                "// vulnerable line: 171: }",
                "// Line 172: ",
                "// Line 173: func parseArtifactListFrom(store db.Store, from string) (*artifactListFilter, error) {",
                "// Line 174:     if from == \"\" {",
                "// Line 175:         return &artifactListFilter{",
                "// Line 176:             store:  store,",
                "// Line 177:             source: artifactSourceRepo,",
                "// Line 178:         }, nil",
                "// vulnerable line: 179: }",
                "// Line 180: ",
                "// Line 181:     parts := strings.Split(from, \"=\")",
                "// Line 182:     if len(parts) != 2 {",
                "// Line 183:         return nil, util.UserVisibleError(codes.InvalidArgument, \"invalid filter, use format: <source>=<filter>\")",
                "// vulnerable line: 184: }",
                "// Line 185: ",
                "// Line 186:     source := parts[0]",
                "// Line 187:     filter := parts[1]",
                "// Line 188: ",
                "// Line 189:     var repoSlubList []string",
                "// Line 190: ",
                "// Line 191:     switch source {",
                "// Line 192:     case string(artifactSourceRepo):",
                "// Line 193:         repoSlubList = strings.Split(filter, \",\")",
                "// Line 194:     default:",
                "// Line 195:         return nil, util.UserVisibleError(codes.InvalidArgument, \"invalid filter source, only repository is supported\")",
                "// vulnerable line: 196: }",
                "// Line 197: ",
                "// Line 198:     return &artifactListFilter{",
                "// Line 199:         store:        store,",
                "// Line 200:         source:       artifactSource(source),",
                "// Line 201:         filter:       filter,",
                "// Line 202:         repoSlubList: repoSlubList,",
                "// Line 203:     }, nil",
                "// vulnerable line: 204: }",
                "// Line 205: ",
                "// Line 206: func (filter *artifactListFilter) listArtifacts(ctx context.Context, provider string, project uuid.UUID) ([]*pb.Artifact, error) {",
                "// Line 207:     if filter.source != artifactSourceRepo {",
                "// Line 208:         // just repos are supported now and we should never get here",
                "// Line 209:         // when we support more, we turn this into an if-else or a switch",
                "// Line 210:         return []*pb.Artifact{}, nil",
                "// vulnerable line: 211: }",
                "// Line 212: ",
                "// Line 213:     repositories, err := artifactListRepoFilter(ctx, filter.store, provider, project, filter.repoSlubList)",
                "// vulnerable line: 214: if err != nil {",
                "// Line 215:         return nil, fmt.Errorf(\"failed to get repositories: %w\", err)",
                "// vulnerable line: 216: }",
                "// Line 217: ",
                "// Line 218:     results := []*pb.Artifact{}",
                "// Line 219:     for _, repository := range repositories {",
                "// Line 220:         artifacts, err := filter.store.ListArtifactsByRepoID(ctx, repository.ID)",
                "// vulnerable line: 221: if err != nil {",
                "// Line 222:             return nil, status.Errorf(codes.Unknown, \"failed to get artifacts: %s\", err)",
                "// vulnerable line: 223: }",
                "// Line 224: ",
                "// Line 225:         for _, artifact := range artifacts {",
                "// Line 226:             results = append(results, &pb.Artifact{",
                "// Line 227:                 ArtifactPk: artifact.ID.String(),",
                "// Line 228:                 Owner:      repository.RepoOwner,",
                "// Line 229:                 Name:       artifact.ArtifactName,",
                "// Line 230:                 Type:       artifact.ArtifactType,",
                "// Line 231:                 Visibility: artifact.ArtifactVisibility,",
                "// Line 232:                 Repository: repository.RepoName,",
                "// Line 233:                 CreatedAt:  timestamppb.New(artifact.CreatedAt),",
                "// Line 234:             })",
                "// vulnerable line: 235: }",
                "// vulnerable line: 236: }",
                "// Line 237: ",
                "// Line 238:     return results, nil",
                "// vulnerable line: 239: }",
                "// Line 240: ",
                "// Line 241: func artifactListRepoFilter(",
                "// Line 242:     ctx context.Context, store db.Store, provider string, projectID uuid.UUID, repoSlubList []string,",
                "// Line 243: ) ([]*db.Repository, error) {",
                "// Line 244:     repositories, err := store.ListRegisteredRepositoriesByProjectIDAndProvider(ctx,",
                "// vulnerable line: 245: db.ListRegisteredRepositoriesByProjectIDAndProviderParams{Provider: provider, ProjectID: projectID})",
                "// vulnerable line: 246: if err != nil {",
                "// Line 247:         if errors.Is(err, sql.ErrNoRows) {",
                "// Line 248:             return nil, status.Errorf(codes.NotFound, \"repositories not found\")",
                "// vulnerable line: 249: }",
                "// Line 250:         return nil, status.Errorf(codes.Unknown, \"failed to get repositories: %s\", err)",
                "// vulnerable line: 251: }",
                "// Line 252: ",
                "// Line 253:     var filterRepositories []*db.Repository",
                "// Line 254:     for _, repo := range repositories {",
                "// Line 255:         repo := repo",
                "// Line 256:         if repoInSlubList(&repo, repoSlubList) {",
                "// Line 257:             filterRepositories = append(filterRepositories, &repo)",
                "// vulnerable line: 258: }",
                "// vulnerable line: 259: }",
                "// Line 260: ",
                "// Line 261:     return filterRepositories, nil",
                "// vulnerable line: 262: }",
                "// Line 263: ",
                "// Line 264: func repoInSlubList(repo *db.Repository, slubList []string) bool {",
                "// Line 265:     if len(slubList) == 0 {",
                "// Line 266:         return true",
                "// vulnerable line: 267: }",
                "// Line 268: ",
                "// Line 269:     // we might want to save the repoSlub in the future into the db..",
                "// Line 270:     repoSlub := fmt.Sprintf(\"%s/%s\", repo.RepoOwner, repo.RepoName)",
                "// Line 271:     return slices.Contains(slubList, repoSlub)",
                "// vulnerable line: 272: }"
            ]
        },
        {
            "filename_of_changes": "handlers_oauth.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "20",
            "number_of_lines_deleted_vulnerable_to_cve": "5",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 34:     \"golang.org/x/oauth2\"",
                "// Line 35:     \"google.golang.org/grpc/codes\"",
                "// Line 36:     \"google.golang.org/grpc/status\"",
                "// Line 37: ",
                "// Line 38:     \"github.com/stacklok/minder/internal/auth\"",
                "// Line 39:     mcrypto \"github.com/stacklok/minder/internal/crypto\"",
                "// Line 40:     \"github.com/stacklok/minder/internal/db\"",
                "// Line 41:     \"github.com/stacklok/minder/internal/engine\"",
                "// Line 42:     \"github.com/stacklok/minder/internal/logger\"",
                "// Line 43:     \"github.com/stacklok/minder/internal/providers\"",
                "// vulnerable line: 44: \"github.com/stacklok/minder/internal/providers/github/oauth\"",
                "// Line 45:     \"github.com/stacklok/minder/internal/util\"",
                "// Line 46:     pb \"github.com/stacklok/minder/pkg/api/protobuf/go/minder/v1\"",
                "// Line 47: )",
                "// Line 48: ",
                "// vulnerable line: 49: const defaultProvider = oauth.Github",
                "// Line 50: ",
                "// Line 51: // GetAuthorizationURL returns the URL to redirect the user to for authorization",
                "// Line 52: // and the state to be used for the callback. It accepts a provider string",
                "// Line 53: // and a boolean indicating whether the client is a CLI or web client",
                "// Line 54: func (s *Server) GetAuthorizationURL(ctx context.Context,",
                "// Line 55:     req *pb.GetAuthorizationURLRequest) (*pb.GetAuthorizationURLResponse, error) {",
                "// Line 56:     entityCtx := engine.EntityFromContext(ctx)",
                "// Line 57:     projectID := entityCtx.Project.ID",
                "// Line 58: ",
                "// Line 59:     var provider string",
                "// Line 378:     }",
                "// Line 379:     return token, nil",
                "// Line 380: }",
                "// Line 381: ",
                "// Line 382: // StoreProviderToken stores the provider token for a project",
                "// Line 383: func (s *Server) StoreProviderToken(ctx context.Context,",
                "// Line 384:     in *pb.StoreProviderTokenRequest) (*pb.StoreProviderTokenResponse, error) {",
                "// Line 385:     entityCtx := engine.EntityFromContext(ctx)",
                "// Line 386:     projectID := entityCtx.Project.ID",
                "// Line 387: ",
                "// vulnerable line: 388: provider, err := getProviderFromRequestOrDefault(ctx, s.store, in, projectID)",
                "// Line 389:     if err != nil {",
                "// Line 390:         return nil, providerError(err)",
                "// Line 391:     }",
                "// Line 392: ",
                "// Line 393:     if !slices.Contains(provider.AuthFlows, db.AuthorizationFlowUserInput) {",
                "// Line 394:         return nil, util.UserVisibleError(codes.InvalidArgument,",
                "// Line 395:             \"provider does not support token enrollment\")",
                "// Line 396:     }",
                "// Line 397: ",
                "// Line 398:     // validate token",
                "// Line 444:     return &pb.StoreProviderTokenResponse{}, nil",
                "// Line 445: }",
                "// Line 446: ",
                "// Line 447: // VerifyProviderTokenFrom verifies the provider token since a timestamp",
                "// Line 448: // Deprecated: Use VerifyProviderCredential instead",
                "// Line 449: func (s *Server) VerifyProviderTokenFrom(ctx context.Context,",
                "// Line 450:     in *pb.VerifyProviderTokenFromRequest) (*pb.VerifyProviderTokenFromResponse, error) {",
                "// Line 451:     entityCtx := engine.EntityFromContext(ctx)",
                "// Line 452:     projectID := entityCtx.Project.ID",
                "// Line 453: ",
                "// vulnerable line: 454: provider, err := getProviderFromRequestOrDefault(ctx, s.store, in, projectID)",
                "// Line 455:     if err != nil {",
                "// Line 456:         return nil, providerError(err)",
                "// Line 457:     }",
                "// Line 458: ",
                "// Line 459:     // check if a token has been created since timestamp",
                "// Line 460:     _, err = s.store.GetAccessTokenSinceDate(ctx,",
                "// Line 461:         db.GetAccessTokenSinceDateParams{Provider: provider.Name, ProjectID: projectID, UpdatedAt: in.Timestamp.AsTime()})",
                "// Line 462:     if err != nil {",
                "// Line 463:         if errors.Is(err, sql.ErrNoRows) {",
                "// Line 464:             return &pb.VerifyProviderTokenFromResponse{Status: \"KO\"}, nil"
            ]
        },
        {
            "filename_of_changes": "handlers_profile.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 51: ",
                "// Line 52:     entityCtx := engine.EntityFromContext(ctx)",
                "// Line 53: ",
                "// Line 54:     // validate that project and provider are valid and exist in the db",
                "// Line 55:     err := entityCtx.Validate(ctx, s.store)",
                "// Line 56:     if err != nil {",
                "// Line 57:         return nil, status.Errorf(codes.InvalidArgument, \"error in entity context: %v\", err)",
                "// Line 58:     }",
                "// Line 59: ",
                "// Line 60:     // TODO: This will be removed once we decouple providers from profiles",
                "// vulnerable line: 61: provider, err := getProviderFromRequestOrDefault(ctx, s.store, in, entityCtx.Project.ID)",
                "// Line 62:     if err != nil {",
                "// Line 63:         return nil, providerError(err)",
                "// Line 64:     }",
                "// Line 65: ",
                "// Line 66:     newProfile, err := db.WithTransaction(s.store, func(qtx db.ExtendQuerier) (*minderv1.Profile, error) {",
                "// Line 67:         return s.profiles.CreateProfile(ctx, entityCtx.Project.ID, &provider, uuid.Nil, in, qtx)",
                "// Line 68:     })",
                "// Line 69:     if err != nil {",
                "// Line 70:         // assumption: service layer is setting meaningful errors",
                "// Line 71:         return nil, err",
                "// Line 627:     in := cpr.GetProfile()",
                "// Line 628: ",
                "// Line 629:     entityCtx := engine.EntityFromContext(ctx)",
                "// Line 630: ",
                "// Line 631:     err := entityCtx.Validate(ctx, s.store)",
                "// Line 632:     if err != nil {",
                "// Line 633:         return nil, status.Errorf(codes.InvalidArgument, \"error in entity context: %v\", err)",
                "// Line 634:     }",
                "// Line 635: ",
                "// Line 636:     // TODO: This will be removed once we decouple providers from profiles",
                "// vulnerable line: 637: provider, err := getProviderFromRequestOrDefault(ctx, s.store, in, entityCtx.Project.ID)",
                "// Line 638:     if err != nil {",
                "// Line 639:         return nil, providerError(err)",
                "// Line 640:     }",
                "// Line 641: ",
                "// Line 642:     updatedProfile, err := db.WithTransaction(s.store, func(qtx db.ExtendQuerier) (*minderv1.Profile, error) {",
                "// Line 643:         return s.profiles.UpdateProfile(ctx, entityCtx.Project.ID, &provider, uuid.Nil, in, qtx)",
                "// Line 644:     })",
                "// Line 645: ",
                "// Line 646:     if err != nil {",
                "// Line 647:         // assumption: service layer sets sensible errors"
            ]
        },
        {
            "filename_of_changes": "repo.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 13: // See the License for the specific language governing permissions and",
                "// Line 14: // limitations under the License.",
                "// Line 15: ",
                "// Line 16: // Package repo contains the repo logic for the control plane",
                "// Line 17: package repo",
                "// Line 18: ",
                "// Line 19: import (",
                "// Line 20:     \"github.com/spf13/cobra\"",
                "// Line 21: ",
                "// Line 22:     \"github.com/stacklok/minder/cmd/cli/app\"",
                "// vulnerable line: 23: ghclient \"github.com/stacklok/minder/internal/providers/github/oauth\"",
                "// Line 24: )",
                "// Line 25: ",
                "// Line 26: // RepoCmd is the root command for the repo subcommands",
                "// Line 27: var RepoCmd = &cobra.Command{",
                "// Line 28:     Use:   \"repo\",",
                "// Line 29:     Short: \"Manage repositories\",",
                "// Line 30:     Long:  `The repo commands allow the management of repositories within Minder.`,",
                "// Line 31:     RunE: func(cmd *cobra.Command, _ []string) error {",
                "// Line 32:         return cmd.Usage()",
                "// Line 33:     },",
                "// Line 34: }",
                "// Line 35: ",
                "// Line 36: func init() {",
                "// Line 37:     app.RootCmd.AddCommand(RepoCmd)",
                "// Line 38:     // Flags for all subcommands",
                "// vulnerable line: 39: RepoCmd.PersistentFlags().StringP(\"provider\", \"p\", ghclient.Github, \"Name of the provider, i.e. github\")",
                "// Line 40:     RepoCmd.PersistentFlags().StringP(\"project\", \"j\", \"\", \"ID of the project\")",
                "// Line 41: }"
            ]
        },
        {
            "filename_of_changes": "repositories.sql.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "21",
            "number_of_lines_deleted_vulnerable_to_cve": "17",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 54:     WebhookUrl    string         `json:\"webhook_url\"`",
                "// Line 55:     DeployUrl     string         `json:\"deploy_url\"`",
                "// Line 56:     CloneUrl      string         `json:\"clone_url\"`",
                "// Line 57:     DefaultBranch sql.NullString `json:\"default_branch\"`",
                "// Line 58:     License       sql.NullString `json:\"license\"`",
                "// Line 59:     ProviderID    uuid.UUID      `json:\"provider_id\"`",
                "// Line 60: }",
                "// Line 61: ",
                "// Line 62: func (q *Queries) CreateRepository(ctx context.Context, arg CreateRepositoryParams) (Repository, error) {",
                "// Line 63:     row := q.db.QueryRowContext(ctx, createRepository,",
                "// vulnerable line: 64: arg.Provider,",
                "// Line 65:         arg.ProjectID,",
                "// Line 66:         arg.RepoOwner,",
                "// Line 67:         arg.RepoName,",
                "// Line 68:         arg.RepoID,",
                "// Line 69:         arg.IsPrivate,",
                "// Line 70:         arg.IsFork,",
                "// Line 71:         arg.WebhookID,",
                "// Line 72:         arg.WebhookUrl,",
                "// Line 73:         arg.DeployUrl,",
                "// Line 74:         arg.CloneUrl,",
                "// Line 138:     )",
                "// Line 139:     return i, err",
                "// Line 140: }",
                "// Line 141: ",
                "// Line 142: const getRepositoryByIDAndProject = `-- name: GetRepositoryByIDAndProject :one",
                "// Line 143: SELECT id, provider, project_id, repo_owner, repo_name, repo_id, is_private, is_fork, webhook_id, webhook_url, deploy_url, clone_url, created_at, updated_at, default_branch, license, provider_id FROM repositories WHERE id = $1 AND project_id = $2",
                "// Line 144: `",
                "// Line 145: ",
                "// Line 146: type GetRepositoryByIDAndProjectParams struct {",
                "// Line 147:     ID        uuid.UUID `json:\"id\"`",
                "// vulnerable line: 148: ProjectID uuid.UUID `json:\"project_id\"`",
                "// Line 149: }",
                "// Line 150: ",
                "// Line 151: func (q *Queries) GetRepositoryByIDAndProject(ctx context.Context, arg GetRepositoryByIDAndProjectParams) (Repository, error) {",
                "// Line 152:     row := q.db.QueryRowContext(ctx, getRepositoryByIDAndProject, arg.ID, arg.ProjectID)",
                "// Line 153:     var i Repository",
                "// Line 154:     err := row.Scan(",
                "// Line 155:         &i.ID,",
                "// Line 156:         &i.Provider,",
                "// Line 157:         &i.ProjectID,",
                "// Line 158:         &i.RepoOwner,",
                "// Line 196:         &i.CreatedAt,",
                "// Line 197:         &i.UpdatedAt,",
                "// Line 198:         &i.DefaultBranch,",
                "// Line 199:         &i.License,",
                "// Line 200:         &i.ProviderID,",
                "// Line 201:     )",
                "// Line 202:     return i, err",
                "// Line 203: }",
                "// Line 204: ",
                "// Line 205: const getRepositoryByRepoName = `-- name: GetRepositoryByRepoName :one",
                "// vulnerable line: 206: SELECT id, provider, project_id, repo_owner, repo_name, repo_id, is_private, is_fork, webhook_id, webhook_url, deploy_url, clone_url, created_at, updated_at, default_branch, license, provider_id FROM repositories WHERE provider = $1 AND repo_owner = $2 AND repo_name = $3 AND project_id = $4",
                "// Line 207: `",
                "// Line 208: ",
                "// Line 209: type GetRepositoryByRepoNameParams struct {",
                "// vulnerable line: 210: Provider  string    `json:\"provider\"`",
                "// vulnerable line: 211: RepoOwner string    `json:\"repo_owner\"`",
                "// vulnerable line: 212: RepoName  string    `json:\"repo_name\"`",
                "// vulnerable line: 213: ProjectID uuid.UUID `json:\"project_id\"`",
                "// Line 214: }",
                "// Line 215: ",
                "// Line 216: func (q *Queries) GetRepositoryByRepoName(ctx context.Context, arg GetRepositoryByRepoNameParams) (Repository, error) {",
                "// Line 217:     row := q.db.QueryRowContext(ctx, getRepositoryByRepoName,",
                "// vulnerable line: 218: arg.Provider,",
                "// Line 219:         arg.RepoOwner,",
                "// Line 220:         arg.RepoName,",
                "// Line 221:         arg.ProjectID,",
                "// Line 222:     )",
                "// Line 223:     var i Repository",
                "// Line 224:     err := row.Scan(",
                "// Line 225:         &i.ID,",
                "// Line 226:         &i.Provider,",
                "// Line 227:         &i.ProjectID,",
                "// Line 228:         &i.RepoOwner,",
                "// Line 238:         &i.UpdatedAt,",
                "// Line 239:         &i.DefaultBranch,",
                "// Line 240:         &i.License,",
                "// Line 241:         &i.ProviderID,",
                "// Line 242:     )",
                "// Line 243:     return i, err",
                "// Line 244: }",
                "// Line 245: ",
                "// Line 246: const listRegisteredRepositoriesByProjectIDAndProvider = `-- name: ListRegisteredRepositoriesByProjectIDAndProvider :many",
                "// Line 247: SELECT id, provider, project_id, repo_owner, repo_name, repo_id, is_private, is_fork, webhook_id, webhook_url, deploy_url, clone_url, created_at, updated_at, default_branch, license, provider_id FROM repositories",
                "// vulnerable line: 248: WHERE provider = $1 AND project_id = $2 AND webhook_id IS NOT NULL",
                "// Line 249: ORDER BY repo_name",
                "// Line 250: `",
                "// Line 251: ",
                "// Line 252: type ListRegisteredRepositoriesByProjectIDAndProviderParams struct {",
                "// vulnerable line: 253: Provider  string    `json:\"provider\"`",
                "// vulnerable line: 254: ProjectID uuid.UUID `json:\"project_id\"`",
                "// Line 255: }",
                "// Line 256: ",
                "// Line 257: func (q *Queries) ListRegisteredRepositoriesByProjectIDAndProvider(ctx context.Context, arg ListRegisteredRepositoriesByProjectIDAndProviderParams) ([]Repository, error) {",
                "// vulnerable line: 258: rows, err := q.db.QueryContext(ctx, listRegisteredRepositoriesByProjectIDAndProvider, arg.Provider, arg.ProjectID)",
                "// Line 259:     if err != nil {",
                "// Line 260:         return nil, err",
                "// Line 261:     }",
                "// Line 262:     defer rows.Close()",
                "// Line 263:     items := []Repository{}",
                "// Line 264:     for rows.Next() {",
                "// Line 265:         var i Repository",
                "// Line 266:         if err := rows.Scan(",
                "// Line 267:             &i.ID,",
                "// Line 268:             &i.Provider,",
                "// Line 290:         return nil, err",
                "// Line 291:     }",
                "// Line 292:     if err := rows.Err(); err != nil {",
                "// Line 293:         return nil, err",
                "// Line 294:     }",
                "// Line 295:     return items, nil",
                "// Line 296: }",
                "// Line 297: ",
                "// Line 298: const listRepositoriesByProjectID = `-- name: ListRepositoriesByProjectID :many",
                "// Line 299: SELECT id, provider, project_id, repo_owner, repo_name, repo_id, is_private, is_fork, webhook_id, webhook_url, deploy_url, clone_url, created_at, updated_at, default_branch, license, provider_id FROM repositories",
                "// vulnerable line: 300: WHERE provider = $1 AND project_id = $2",
                "// vulnerable line: 301: AND (repo_id >= $3 OR $3 IS NULL)",
                "// Line 302: ORDER BY project_id, provider, repo_id",
                "// Line 303: LIMIT $4::bigint",
                "// Line 304: `",
                "// Line 305: ",
                "// Line 306: type ListRepositoriesByProjectIDParams struct {",
                "// vulnerable line: 307: Provider  string        `json:\"provider\"`",
                "// vulnerable line: 308: ProjectID uuid.UUID     `json:\"project_id\"`",
                "// vulnerable line: 309: RepoID    sql.NullInt64 `json:\"repo_id\"`",
                "// vulnerable line: 310: Limit     sql.NullInt64 `json:\"limit\"`",
                "// Line 311: }",
                "// Line 312: ",
                "// Line 313: func (q *Queries) ListRepositoriesByProjectID(ctx context.Context, arg ListRepositoriesByProjectIDParams) ([]Repository, error) {",
                "// Line 314:     rows, err := q.db.QueryContext(ctx, listRepositoriesByProjectID,",
                "// vulnerable line: 315: arg.Provider,",
                "// Line 316:         arg.ProjectID,",
                "// Line 317:         arg.RepoID,",
                "// Line 318:         arg.Limit,",
                "// Line 319:     )",
                "// Line 320:     if err != nil {",
                "// Line 321:         return nil, err",
                "// Line 322:     }",
                "// Line 323:     defer rows.Close()",
                "// Line 324:     items := []Repository{}",
                "// Line 325:     for rows.Next() {"
            ]
        },
        {
            "filename_of_changes": "repositories_test.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "8",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 123: ",
                "// Line 124: func TestGetRepositoryByRepoName(t *testing.T) {",
                "// Line 125:     t.Parallel()",
                "// Line 126: ",
                "// Line 127:     org := createRandomOrganization(t)",
                "// Line 128:     project := createRandomProject(t, org.ID)",
                "// Line 129:     prov := createRandomProvider(t, project.ID)",
                "// Line 130:     repo1 := createRandomRepository(t, project.ID, prov)",
                "// Line 131: ",
                "// Line 132:     repo2, err := testQueries.GetRepositoryByRepoName(context.Background(), GetRepositoryByRepoNameParams{",
                "// vulnerable line: 133: Provider:  repo1.Provider,",
                "// Line 134:         RepoOwner: repo1.RepoOwner,",
                "// Line 135:         RepoName:  repo1.RepoName,",
                "// Line 136:         ProjectID: project.ID,",
                "// Line 137:     })",
                "// Line 138:     require.NoError(t, err)",
                "// Line 139:     require.NotEmpty(t, repo2)",
                "// Line 140: ",
                "// Line 141:     require.Equal(t, repo1.ID, repo2.ID)",
                "// Line 142:     require.Equal(t, repo1.Provider, repo2.Provider)",
                "// Line 143:     require.Equal(t, repo1.ProjectID, repo2.ProjectID)",
                "// Line 161:     prov := createRandomProvider(t, project.ID)",
                "// Line 162:     createRandomRepository(t, project.ID, prov)",
                "// Line 163: ",
                "// Line 164:     for i := 1001; i < 1020; i++ {",
                "// Line 165:         createRandomRepository(t, project.ID, prov, func(r *CreateRepositoryParams) {",
                "// Line 166:             r.RepoID = int64(i)",
                "// Line 167:         })",
                "// Line 168:     }",
                "// Line 169: ",
                "// Line 170:     arg := ListRepositoriesByProjectIDParams{",
                "// vulnerable line: 171: Provider:  prov.Name,",
                "// Line 172:         ProjectID: project.ID,",
                "// Line 173:     }",
                "// Line 174: ",
                "// Line 175:     repos, err := testQueries.ListRepositoriesByProjectID(context.Background(), arg)",
                "// Line 176:     require.NoError(t, err)",
                "// Line 177:     require.NotEmpty(t, repos)",
                "// Line 178: ",
                "// Line 179:     for _, repo := range repos {",
                "// Line 180:         require.NotEmpty(t, repo)",
                "// Line 181:         require.Equal(t, arg.ProjectID, repo.ProjectID)"
            ]
        },
        {
            "filename_of_changes": "run_profile.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 120: ",
                "// Line 121:     return nil",
                "// Line 122: }",
                "// Line 123: ",
                "// Line 124: func (r *Reconciler) publishProfileInitEvents(",
                "// Line 125:     ctx context.Context,",
                "// Line 126:     ectx *engine.EntityContext,",
                "// Line 127: ) error {",
                "// Line 128:     dbrepos, err := r.store.ListRegisteredRepositoriesByProjectIDAndProvider(ctx,",
                "// Line 129:         db.ListRegisteredRepositoriesByProjectIDAndProviderParams{",
                "// vulnerable line: 130: Provider:  ectx.Provider.Name,",
                "// Line 131:             ProjectID: ectx.Project.ID,",
                "// Line 132:         })",
                "// Line 133:     if err != nil {",
                "// Line 134:         return fmt.Errorf(\"publishProfileInitEvents: error getting registered repos: %v\", err)",
                "// Line 135:     }",
                "// Line 136: ",
                "// Line 137:     for _, dbrepo := range dbrepos {",
                "// Line 138:         // protobufs are our API, so we always execute on these instead of the DB directly.",
                "// Line 139:         repo := util.PBRepositoryFromDB(dbrepo)",
                "// Line 140:         err := entities.NewEntityInfoWrapper()."
            ]
        },
        {
            "filename_of_changes": "service.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "30",
            "number_of_lines_deleted_vulnerable_to_cve": "14",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 51:     ret1, _ := ret[1].(error)",
                "// Line 52:     return ret0, ret1",
                "// Line 53: }",
                "// Line 54: ",
                "// Line 55: // CreateRepository indicates an expected call of CreateRepository.",
                "// Line 56: func (mr *MockRepositoryServiceMockRecorder) CreateRepository(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {",
                "// Line 57:     mr.mock.ctrl.T.Helper()",
                "// Line 58:     return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"CreateRepository\", reflect.TypeOf((*MockRepositoryService)(nil).CreateRepository), arg0, arg1, arg2, arg3, arg4, arg5)",
                "// Line 59: }",
                "// Line 60: ",
                "// vulnerable line: 61: // DeleteRepositoryByID mocks base method.",
                "// vulnerable line: 62: func (m *MockRepositoryService) DeleteRepositoryByID(arg0 context.Context, arg1 clients.GitHubRepoClient, arg2, arg3 uuid.UUID) error {",
                "// Line 63:     m.ctrl.T.Helper()",
                "// vulnerable line: 64: ret := m.ctrl.Call(m, \"DeleteRepositoryByID\", arg0, arg1, arg2, arg3)",
                "// vulnerable line: 65: ret0, _ := ret[0].(error)",
                "// vulnerable line: 66: return ret0",
                "// Line 67: }",
                "// Line 68: ",
                "// vulnerable line: 69: // DeleteRepositoryByID indicates an expected call of DeleteRepositoryByID.",
                "// vulnerable line: 70: func (mr *MockRepositoryServiceMockRecorder) DeleteRepositoryByID(arg0, arg1, arg2, arg3 any) *gomock.Call {",
                "// Line 71:     mr.mock.ctrl.T.Helper()",
                "// vulnerable line: 72: return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"DeleteRepositoryByID\", reflect.TypeOf((*MockRepositoryService)(nil).DeleteRepositoryByID), arg0, arg1, arg2, arg3)",
                "// Line 73: }",
                "// Line 74: ",
                "// vulnerable line: 75: // DeleteRepositoryByName mocks base method.",
                "// vulnerable line: 76: func (m *MockRepositoryService) DeleteRepositoryByName(arg0 context.Context, arg1 clients.GitHubRepoClient, arg2 uuid.UUID, arg3, arg4, arg5 string) error {",
                "// Line 77:     m.ctrl.T.Helper()",
                "// vulnerable line: 78: ret := m.ctrl.Call(m, \"DeleteRepositoryByName\", arg0, arg1, arg2, arg3, arg4, arg5)",
                "// vulnerable line: 79: ret0, _ := ret[0].(error)",
                "// vulnerable line: 80: return ret0",
                "// Line 81: }",
                "// Line 82: ",
                "// vulnerable line: 83: // DeleteRepositoryByName indicates an expected call of DeleteRepositoryByName.",
                "// vulnerable line: 84: func (mr *MockRepositoryServiceMockRecorder) DeleteRepositoryByName(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {",
                "// Line 85:     mr.mock.ctrl.T.Helper()",
                "// vulnerable line: 86: return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"DeleteRepositoryByName\", reflect.TypeOf((*MockRepositoryService)(nil).DeleteRepositoryByName), arg0, arg1, arg2, arg3, arg4, arg5)",
                "// Line 87: }"
            ]
        },
        {
            "filename_of_changes": "webhook_update.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 135: func updateGithubWebhooks(",
                "// Line 136:     ctx context.Context,",
                "// Line 137:     ghCli provifv1.GitHub,",
                "// Line 138:     store db.Store,",
                "// Line 139:     provider db.Provider,",
                "// Line 140:     webhookHost string,",
                "// Line 141:     secret string,",
                "// Line 142: ) error {",
                "// Line 143:     repos, err := store.ListRegisteredRepositoriesByProjectIDAndProvider(ctx,",
                "// Line 144:         db.ListRegisteredRepositoriesByProjectIDAndProviderParams{",
                "// vulnerable line: 145: Provider:  provider.Name,",
                "// Line 146:             ProjectID: provider.ProjectID,",
                "// Line 147:         })",
                "// Line 148:     if err != nil {",
                "// Line 149:         return fmt.Errorf(\"unable to list registered repositories: %w\", err)",
                "// Line 150:     }",
                "// Line 151: ",
                "// Line 152:     for _, repo := range repos {",
                "// Line 153:         err := updateGithubRepoHooks(ctx, ghCli, repo, webhookHost, secret)",
                "// Line 154:         if err != nil {",
                "// Line 155:             zerolog.Ctx(ctx).Err(err).Msg(\"unable to update repo hooks\")"
            ]
        }
    ]
}