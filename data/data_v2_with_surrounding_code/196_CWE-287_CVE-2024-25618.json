{
    "cve_id": "CVE-2024-25618",
    "cve_description": "Mastodon is a free, open-source social network server based on ActivityPub. Mastodon allows new identities from configured authentication providers (CAS, SAML, OIDC) to attach to existing local users with the same e-mail address. This results in a possible account takeover if the authentication provider allows changing the e-mail address or multiple authentication providers are configured. When a user logs in through an external authentication provider for the first time, Mastodon checks the e-mail address passed by the provider to find an existing account. However, using the e-mail address alone means that if the authentication provider allows changing the e-mail address of an account, the Mastodon account can immediately be hijacked. All users logging in through external authentication providers are affected. The severity is medium, as it also requires the external authentication provider to misbehave. However, some well-known OIDC providers (like Microsoft Azure) make it very easy to accidentally allow unverified e-mail changes. Moreover, OpenID Connect also allows dynamic client registration. This issue has been addressed in versions 4.2.6, 4.1.14, 4.0.14, and 3.5.18. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "cve_publish_date": "2024-02-14T21:15Z",
    "cwe_id": "CWE-287",
    "cwe_name": "Improper Authentication",
    "cwe_description": "When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.",
    "commit_message": "Merge pull request from GHSA-vm39-j3vx-pch3\n\n* Prevent different identities from a same SSO provider from accessing a same account\n\n* Lock auth provider changes behind `ALLOW_UNSAFE_AUTH_PROVIDER_REATTACH=true`\n\n* Rename methods to avoid confusion between OAuth and OmniAuth",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "identity.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 10: #  updated_at :datetime         not null",
                "// Line 11: #  id         :bigint(8)        not null, primary key",
                "// Line 12: #  user_id    :bigint(8)",
                "// Line 13: #",
                "// Line 14: ",
                "// Line 15: class Identity < ApplicationRecord",
                "// Line 16:   belongs_to :user",
                "// Line 17:   validates :uid, presence: true, uniqueness: { scope: :provider }",
                "// Line 18:   validates :provider, presence: true",
                "// Line 19: ",
                "// vulnerable line: 20: def self.find_for_oauth(auth)",
                "// Line 21:     find_or_create_by(uid: auth.uid, provider: auth.provider)",
                "// Line 22:   end",
                "// Line 23: end"
            ]
        },
        {
            "filename_of_changes": "identity_spec.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: # frozen_string_literal: true",
                "// Line 2: ",
                "// Line 3: require 'rails_helper'",
                "// Line 4: ",
                "// Line 5: RSpec.describe Identity do",
                "// vulnerable line: 6: describe '.find_for_oauth' do",
                "// Line 7:     let(:auth) { Fabricate(:identity, user: Fabricate(:user)) }",
                "// Line 8: ",
                "// Line 9:     it 'calls .find_or_create_by' do",
                "// Line 10:       allow(described_class).to receive(:find_or_create_by)",
                "// Line 11: ",
                "// vulnerable line: 12: described_class.find_for_oauth(auth)",
                "// Line 13: ",
                "// Line 14:       expect(described_class).to have_received(:find_or_create_by).with(uid: auth.uid, provider: auth.provider)",
                "// Line 15:     end",
                "// Line 16: ",
                "// Line 17:     it 'returns an instance of Identity' do",
                "// vulnerable line: 18: expect(described_class.find_for_oauth(auth)).to be_instance_of described_class",
                "// Line 19:     end",
                "// Line 20:   end",
                "// Line 21: end"
            ]
        },
        {
            "filename_of_changes": "omniauth_callbacks_controller.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: # frozen_string_literal: true",
                "// Line 2: ",
                "// Line 3: class Auth::OmniauthCallbacksController < Devise::OmniauthCallbacksController",
                "// Line 4:   skip_before_action :check_self_destruct!",
                "// Line 5:   skip_before_action :verify_authenticity_token",
                "// Line 6: ",
                "// Line 7:   def self.provides_callback_for(provider)",
                "// Line 8:     define_method provider do",
                "// Line 9:       @provider = provider",
                "// vulnerable line: 10: @user = User.find_for_oauth(request.env['omniauth.auth'], current_user)",
                "// Line 11: ",
                "// Line 12:       if @user.persisted?",
                "// Line 13:         record_login_activity",
                "// Line 14:         sign_in_and_redirect @user, event: :authentication",
                "// Line 15:         set_flash_message(:notice, :success, kind: label_for_provider) if is_navigational_format?",
                "// Line 16:       else",
                "// Line 17:         session[\"devise.#{provider}_data\"] = request.env['omniauth.auth']",
                "// Line 18:         redirect_to new_user_registration_url",
                "// Line 19:       end",
                "// Line 20:     end"
            ]
        },
        {
            "filename_of_changes": "omniauth_callbacks_spec.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 89:           .by(1)",
                "// Line 90:           .and change(LoginActivity, :count)",
                "// Line 91:           .by(1)",
                "// Line 92: ",
                "// Line 93:         expect(response).to redirect_to(auth_setup_path(missing_email: '1'))",
                "// Line 94:       end",
                "// Line 95:     end",
                "// Line 96: ",
                "// Line 97:     context 'when a user cannot be built' do",
                "// Line 98:       before do",
                "// vulnerable line: 99: allow(User).to receive(:find_for_oauth).and_return(User.new)",
                "// Line 100:       end",
                "// Line 101: ",
                "// Line 102:       it 'redirects to the new user signup page' do",
                "// Line 103:         expect { subject }",
                "// Line 104:           .to not_change(User, :count)",
                "// Line 105:           .and not_change(Identity, :count)",
                "// Line 106:           .and not_change(LoginActivity, :count)",
                "// Line 107: ",
                "// Line 108:         expect(response).to redirect_to(new_user_registration_url)",
                "// Line 109:       end"
            ]
        }
    ]
}