{
    "cve_id": "CVE-2024-29888",
    "cve_description": "Saleor is an e-commerce platform that serves high-volume companies. When using `Pickup: Local stock only` click-and-collect as a delivery method in specific conditions the customer could overwrite the warehouse address with its own, which exposes its address as click-and-collect address. This issue has been patched in versions: `3.14.61`, `3.15.37`, `3.16.34`, `3.17.32`, `3.18.28`, `3.19.15`.",
    "cve_publish_date": "2024-03-27T19:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Fix relation between order and click and collect address (#15697)\n\n* Create a copy of collection point address during checkout completion\r\n\r\n* Add migration for creating order shipping addresses",
    "type_of_change": "Addition",
    "changes": [
        {
            "filename_of_changes": "0176_merge_20240325_1315.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "12",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "0177_merge_20240325_1329.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "12",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "0180_merge_20240325_1333.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "12",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "0182_merge_20240325_1338.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "12",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "0184_merge_0182_merge_20240325_1338_0183_order_tax_error.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "12",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "complete_checkout.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "saleor3_19.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "29",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "test_checkout_complete_with_payment.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "5",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 3098:     checkout_with_item_for_cc,",
                "// Line 3099:     payment_dummy,",
                "// Line 3100:     address,",
                "// Line 3101:     warehouse_for_cc,",
                "// Line 3102:     warehouse,",
                "// Line 3103: ):",
                "// Line 3104:     # given",
                "// Line 3105:     order_count = Order.objects.count()",
                "// Line 3106:     checkout = checkout_with_item_for_cc",
                "// Line 3107:     checkout.collection_point = warehouse_for_cc",
                "// vulnerable line: 3108: checkout.shipping_address = None",
                "// Line 3109:     checkout.save(update_fields=[\"collection_point\", \"shipping_address\"])",
                "// Line 3110: ",
                "// Line 3111:     variables = {",
                "// Line 3112:         \"id\": to_global_id_or_none(checkout),",
                "// Line 3113:         \"redirectUrl\": \"https://www.example.com\",",
                "// Line 3114:     }",
                "// Line 3115: ",
                "// Line 3116:     manager = get_plugins_manager(allow_replica=False)",
                "// Line 3117:     lines, _ = fetch_checkout_lines(checkout)",
                "// Line 3118:     checkout_info = fetch_checkout_info(checkout, lines, manager)",
                "// Line 3140:     # then",
                "// Line 3141:     content = get_graphql_content(response)[\"data\"][\"checkoutComplete\"]",
                "// Line 3142: ",
                "// Line 3143:     assert not content[\"errors\"]",
                "// Line 3144:     assert Order.objects.count() == order_count + 1",
                "// Line 3145: ",
                "// Line 3146:     order = Order.objects.first()",
                "// Line 3147: ",
                "// Line 3148:     assert order.collection_point == warehouse_for_cc",
                "// Line 3149:     assert order.shipping_method is None",
                "// vulnerable line: 3150: assert order.shipping_address == warehouse_for_cc.address",
                "// Line 3151:     assert order.shipping_price == zero_taxed_money(payment.currency)",
                "// Line 3152:     assert order.lines.count() == 1",
                "// Line 3153: ",
                "// Line 3154:     # ensure the allocation is made on the correct warehouse",
                "// Line 3155:     assert order.lines.first().allocations.first().stock.warehouse == warehouse_for_cc",
                "// Line 3156: ",
                "// Line 3157: ",
                "// Line 3158: def test_complete_checkout_for_global_click_and_collect(",
                "// Line 3159:     api_client,",
                "// Line 3160:     checkout_with_item_for_cc,",
                "// Line 3208:     # then",
                "// Line 3209:     content = get_graphql_content(response)[\"data\"][\"checkoutComplete\"]",
                "// Line 3210: ",
                "// Line 3211:     assert not content[\"errors\"]",
                "// Line 3212:     assert Order.objects.count() == order_count + 1",
                "// Line 3213: ",
                "// Line 3214:     order = Order.objects.latest(\"created_at\")",
                "// Line 3215: ",
                "// Line 3216:     assert order.collection_point == warehouse_for_cc",
                "// Line 3217:     assert order.shipping_method is None",
                "// vulnerable line: 3218: assert order.shipping_address == warehouse_for_cc.address",
                "// Line 3219:     assert order.shipping_price == zero_taxed_money(payment.currency)",
                "// Line 3220:     assert order.lines.count() == 1",
                "// Line 3221: ",
                "// Line 3222:     # ensure the allocation is made on the correct warehouse",
                "// Line 3223:     assert order.lines.first().allocations.first().stock.warehouse == warehouse_for_cc",
                "// Line 3224: ",
                "// Line 3225: ",
                "// Line 3226: def test_complete_checkout_raises_error_for_local_stock(",
                "// Line 3227:     api_client, checkout_with_item_for_cc, payment_dummy, address, warehouse_for_cc",
                "// Line 3228: ):"
            ]
        },
        {
            "filename_of_changes": "test_checkout_complete_with_transactions.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 2766:     # then",
                "// Line 2767:     content = get_graphql_content(response)[\"data\"][\"checkoutComplete\"]",
                "// Line 2768: ",
                "// Line 2769:     assert not content[\"errors\"]",
                "// Line 2770:     assert Order.objects.count() == 1",
                "// Line 2771: ",
                "// Line 2772:     order = Order.objects.first()",
                "// Line 2773: ",
                "// Line 2774:     assert order.collection_point == warehouse_for_cc",
                "// Line 2775:     assert order.shipping_method is None",
                "// vulnerable line: 2776: assert order.shipping_address == warehouse_for_cc.address",
                "// Line 2777:     assert order.shipping_price == zero_taxed_money(order.channel.currency_code)",
                "// Line 2778:     assert order.lines.count() == 1",
                "// Line 2779: ",
                "// Line 2780:     # ensure the allocation is made on the correct warehouse",
                "// Line 2781:     assert order.lines.first().allocations.first().stock.warehouse == warehouse_for_cc",
                "// Line 2782: ",
                "// Line 2783: ",
                "// Line 2784: def test_complete_checkout_for_global_click_and_collect(",
                "// Line 2785:     api_client,",
                "// Line 2786:     checkout_with_item_for_cc,",
                "// Line 2826:     # then",
                "// Line 2827:     content = get_graphql_content(response)[\"data\"][\"checkoutComplete\"]",
                "// Line 2828: ",
                "// Line 2829:     assert not content[\"errors\"]",
                "// Line 2830:     assert Order.objects.count() == 1",
                "// Line 2831: ",
                "// Line 2832:     order = Order.objects.latest(\"created_at\")",
                "// Line 2833: ",
                "// Line 2834:     assert order.collection_point == warehouse_for_cc",
                "// Line 2835:     assert order.shipping_method is None",
                "// vulnerable line: 2836: assert order.shipping_address == warehouse_for_cc.address",
                "// Line 2837:     assert order.shipping_price == zero_taxed_money(order.channel.currency_code)",
                "// Line 2838:     assert order.lines.count() == 1",
                "// Line 2839: ",
                "// Line 2840:     # ensure the allocation is made on the correct warehouse",
                "// Line 2841:     assert order.lines.first().allocations.first().stock.warehouse == warehouse_for_cc",
                "// Line 2842: ",
                "// Line 2843: ",
                "// Line 2844: def test_complete_checkout_raises_error_for_local_stock(",
                "// Line 2845:     api_client,",
                "// Line 2846:     checkout_with_item_for_cc,"
            ]
        }
    ]
}