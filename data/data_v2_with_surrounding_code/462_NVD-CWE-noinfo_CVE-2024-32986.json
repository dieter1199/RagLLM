{
    "cve_id": "CVE-2024-32986",
    "cve_description": "PWAsForFirefox is a tool to install, manage and use Progressive Web Apps (PWAs) in Mozilla Firefox. Due to improper sanitization of web app properties (such as name, description, shortcuts), web apps were able to inject additional lines into XDG Desktop Entries (on Linux) and `AppInfo.ini` (on PortableApps.com). This allowed malicious web apps to introduce keys like `Exec`, which could run arbitrary code when the affected web app was launched. This vulnerability affects all Linux and PortableApps.com users of all PWAsForFirefox versions up to (excluding) 2.12.0. Windows and macOS users are not affected. This vulnerability has been fixed in commit `9932d4b` which has been included in release in v2.12.0. The main fix is implemented in the native part, but the extension also contains additional fixes. All Linux and PortableApps.com users are advised to update to this version as soon as possible. It is also recommended for Windows and macOS users to update to this version, as it contains additional fixes related to properties sanitization. There are no known workarounds for this vulnerability.",
    "cve_publish_date": "2024-05-03T10:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Fix improper sanitization of web app properties that lead to security vulnerabilities\n\nThis contains a critical security fix. More details will be published soon.",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "browser.jsm",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 77:     tabLabelContainer.append(tabLabel);",
                "// Line 78:     siteInfo.append(tabLabelContainer);",
                "// Line 79: ",
                "// Line 80:     document.getElementById('TabsToolbar-customization-target').append(siteInfo);",
                "// Line 81: ",
                "// Line 82:     // Set initial favicon and title to the site's static info",
                "// Line 83:     const siteIcons = buildIconList(window.gFFPWASiteConfig?.manifest.icons || []);",
                "// Line 84:     const siteIcon = siteIcons.find(icon => icon.size >= 32) || siteIcons[siteIcons.length - 1];",
                "// Line 85:     if (siteIcon) tabIconImage.setAttribute('src', siteIcon.icon.src);",
                "// Line 86: ",
                "// vulnerable line: 87: const siteName = window.gFFPWASiteConfig?.config.name || window.gFFPWASiteConfig?.manifest.name || window.gFFPWASiteConfig?.manifest.short_name",
                "// Line 88:     tabLabel.replaceChildren(siteName);",
                "// Line 89:     document.title = siteName;",
                "// Line 90: ",
                "// Line 91:     // Sync current tab favicon and title with custom info elements",
                "// Line 92:     // This can be disabled by user using our preferences",
                "// Line 93:     const docDS = document.documentElement.dataset;",
                "// Line 94:     docDS['contentTitleDefault'] = docDS['contentTitlePrivate'] = 'CONTENTTITLE'",
                "// Line 95:     docDS['titleDefault'] = docDS['titlePrivate'] = siteName",
                "// Line 96: ",
                "// Line 97:     window.gBrowser.updateTitlebar = function () {",
                "// Line 345: ",
                "// Line 346:       // Check if protocol handler is allowed",
                "// Line 347:       try { browser.ownerGlobal.navigator.checkProtocolHandlerAllowed(protocol, url, documentURI) }",
                "// Line 348:       catch (_) { return }",
                "// Line 349: ",
                "// Line 350:       // If the protocol handler is already registered, just return early",
                "// Line 351:       // We only allow one handler (either manifest or custom) per protocol scheme",
                "// Line 352:       const existingHandlers = new Set([",
                "// Line 353:         ...window.gFFPWASiteConfig.config.custom_protocol_handlers,",
                "// Line 354:         ...window.gFFPWASiteConfig.manifest.protocol_handlers",
                "// vulnerable line: 355: ].map(handler => handler.protocol).sort());",
                "// Line 356:       if (existingHandlers.has(protocol)) return;",
                "// Line 357: ",
                "// Line 358:       // Now ask the user and provide the proper callback",
                "// Line 359:       const message = this._getFormattedString('addProtocolHandlerMessage', [url.host, protocol,]);",
                "// Line 360: ",
                "// Line 361:       const notificationBox = browser.getTabBrowser().getNotificationBox(browser);",
                "// Line 362:       const notificationIcon = url.prePath + '/favicon.ico';",
                "// Line 363:       const notificationValue = 'Protocol Registration: ' + protocol;",
                "// Line 364: ",
                "// Line 365:       const addButton = {"
            ]
        },
        {
            "filename_of_changes": "launch.js",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: import '../utils/errors'",
                "// Line 2: import '../utils/i18nHtml'",
                "// Line 3: ",
                "// vulnerable line: 4: import { launchSite, obtainSiteList, obtainUrls, PREF_LAUNCH_CURRENT_URL, setPopupSize } from '../utils'",
                "// Line 5: import { getMessage } from '../utils/i18n'",
                "// Line 6: ",
                "// Line 7: async function createInstanceList () {",
                "// Line 8:   // Obtain a current manifest URL",
                "// Line 9:   const { manifestUrl, documentUrl } = await obtainUrls()",
                "// Line 10: ",
                "// Line 11:   // Obtain a list of existing sites and restrict them to the current manifest URL",
                "// Line 12:   const sites = Object.values(await obtainSiteList())",
                "// Line 13:     .filter(site => site.config.manifest_url === manifestUrl)",
                "// Line 14: ",
                "// Line 19:   // Launch site with the current URL, if enabled in settings",
                "// Line 20:   let settingsLaunchCurrentUrl = (await browser.storage.local.get(PREF_LAUNCH_CURRENT_URL))[PREF_LAUNCH_CURRENT_URL]",
                "// Line 21:   settingsLaunchCurrentUrl = settingsLaunchCurrentUrl !== undefined ? settingsLaunchCurrentUrl : true",
                "// Line 22: ",
                "// Line 23:   // Create a list element for every instance with handler that launches it",
                "// Line 24:   for (const site of sites) {",
                "// Line 25:     const url = settingsLaunchCurrentUrl ? documentUrl : undefined",
                "// Line 26: ",
                "// Line 27:     const siteElement = document.createElement('button')",
                "// Line 28:     siteElement.classList.add(...['list-group-item', 'list-group-item-action'])",
                "// vulnerable line: 29: siteElement.innerText = site.config.name || site.manifest.name || site.manifest.short_name || new URL(site.manifest.scope).host",
                "// Line 30:     siteElement.addEventListener('click', () => { launchSite(site, url) })",
                "// Line 31: ",
                "// Line 32:     listElement.append(siteElement)",
                "// Line 33:   }",
                "// Line 34: ",
                "// Line 35:   // Create a list element that opens new instance popup",
                "// Line 36:   {",
                "// Line 37:     const newInstanceElement = document.createElement('button')",
                "// Line 38:     newInstanceElement.classList.add(...['list-group-item', 'list-group-item-action'])",
                "// Line 39: "
            ]
        },
        {
            "filename_of_changes": "manage.js",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "23",
            "number_of_lines_deleted_vulnerable_to_cve": "18",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 15:   getIcon,",
                "// Line 16:   isAutoRuntimeInstallSupported,",
                "// Line 17:   isProtocolSchemePermitted,",
                "// Line 18:   launchSite,",
                "// Line 19:   obtainProfileList,",
                "// Line 20:   obtainSiteList,",
                "// Line 21:   PREF_AUTO_LAUNCH_EXCLUSION,",
                "// Line 22:   PREF_DEFAULT_PROFILE_TEMPLATE,",
                "// Line 23:   PREF_DISPLAY_PAGE_ACTION,",
                "// Line 24:   PREF_ENABLE_AUTO_LAUNCH,",
                "// vulnerable line: 25: PREF_LAUNCH_CURRENT_URL, PREF_LOCALE,",
                "// Line 26:   PREF_SHOW_UPDATE_POPUP,",
                "// Line 27:   setConfig,",
                "// Line 28:   setPopupSize",
                "// Line 29: } from '../utils'",
                "// Line 30: import { getAllLocales, getCurrentLocale, getMessage } from '../utils/i18n'",
                "// Line 31: import { knownCategories } from './categories'",
                "// Line 32: ",
                "// Line 33: // Display install/update page when clicked on browser action and the native program is not correctly installed",
                "// Line 34: async function handleNativeStatus () {",
                "// Line 35:   switch (await checkNativeStatus()) {",
                "// Line 76:   const templateElement = document.getElementById('sites-list-template')",
                "// Line 77:   const loadingElement = document.getElementById('sites-list-loading')",
                "// Line 78:   const emptyElement = document.getElementById('sites-list-empty')",
                "// Line 79: ",
                "// Line 80:   loadingElement.classList.add('d-none')",
                "// Line 81:   if (!sites.length) emptyElement.classList.remove('d-none')",
                "// Line 82: ",
                "// Line 83:   // Create a list element for every instance with handlers for launching and editing",
                "// Line 84:   for (const site of sites) {",
                "// Line 85:     const siteElement = templateElement.content.firstElementChild.cloneNode(true)",
                "// vulnerable line: 86: const siteName = site.config.name || site.manifest.name || site.manifest.short_name || new URL(site.manifest.scope).host",
                "// Line 87:     const siteIcon = site.config.icon_url || getIcon(buildIconList(site.manifest.icons), 64)",
                "// Line 88: ",
                "// Line 89:     const letterElement = siteElement.querySelector('#sites-list-template-letter')",
                "// Line 90:     if (siteIcon) letterElement.classList.add('d-none')",
                "// Line 91:     letterElement.setAttribute('data-letter', siteName[0])",
                "// Line 92:     letterElement.removeAttribute('id')",
                "// Line 93: ",
                "// Line 94:     const iconElement = siteElement.querySelector('#sites-list-template-icon')",
                "// Line 95:     if (!siteIcon) iconElement.classList.add('d-none')",
                "// Line 96:     iconElement.src = siteIcon",
                "// Line 99:     iconElement.onerror = () => {",
                "// Line 100:       letterElement.classList.remove('d-none')",
                "// Line 101:       iconElement.classList.add('d-none')",
                "// Line 102:     }",
                "// Line 103: ",
                "// Line 104:     const titleElement = siteElement.querySelector('#sites-list-template-title')",
                "// Line 105:     titleElement.innerText = siteName",
                "// Line 106:     titleElement.removeAttribute('id')",
                "// Line 107: ",
                "// Line 108:     const descriptionElement = siteElement.querySelector('#sites-list-template-description')",
                "// vulnerable line: 109: descriptionElement.innerText = site.config.description || site.manifest.description || ''",
                "// Line 110:     descriptionElement.removeAttribute('id')",
                "// Line 111: ",
                "// Line 112:     const launchElement = siteElement.querySelector('#sites-list-template-launch')",
                "// Line 113:     const launchElementTooltip = await getMessage('managePageAppListLaunch')",
                "// Line 114:     launchElement.addEventListener('click', () => { launchSite(site) })",
                "// Line 115:     launchElement.setAttribute('title', launchElementTooltip)",
                "// Line 116:     launchElement.setAttribute('aria-label', launchElementTooltip)",
                "// Line 117:     launchElement.removeAttribute('id')",
                "// Line 118: ",
                "// Line 119:     const editElement = siteElement.querySelector('#sites-list-template-edit')",
                "// Line 120:     const editElementTooltip = await getMessage('managePageAppListEdit')",
                "// Line 121:     editElement.addEventListener('click', async (event) => {",
                "// Line 122:       const form = document.getElementById('web-app-form')",
                "// Line 123:       const submit = document.getElementById('web-app-submit')",
                "// Line 124: ",
                "// Line 125:       // Set placeholders from manifest",
                "// vulnerable line: 126: document.getElementById('web-app-name').setAttribute('placeholder', site.manifest.name || site.manifest.short_name || new URL(site.manifest.scope).host)",
                "// vulnerable line: 127: document.getElementById('web-app-description').setAttribute('placeholder', site.manifest.description || '')",
                "// Line 128:       document.getElementById('web-app-start-url').setAttribute('placeholder', site.manifest.start_url)",
                "// Line 129: ",
                "// Line 130:       // Set values from config",
                "// Line 131:       document.getElementById('web-app-name').value = site.config.name || ''",
                "// Line 132:       document.getElementById('web-app-description').value = site.config.description || ''",
                "// Line 133:       document.getElementById('web-app-start-url').value = site.config.start_url",
                "// Line 134:       document.getElementById('web-app-icon-url').value = site.config.icon_url",
                "// Line 135:       document.getElementById('web-app-ulid').value = site.ulid",
                "// Line 136: ",
                "// Line 137:       // Clear previous categories",
                "// Line 138:       const categoriesElement = document.getElementById('web-app-categories')",
                "// Line 139:       categoriesElement.tagsInstance.resetSearchInput()",
                "// Line 140:       categoriesElement.tagsInstance.reset()",
                "// Line 141: ",
                "// Line 142:       // Set categories from config or manifest",
                "// vulnerable line: 143: const categoriesList = site.config.categories?.length ? site.config.categories : site.manifest.categories",
                "// vulnerable line: 144: for (const category of categoriesList || []) categoriesElement.tagsInstance.addItem(category, category)",
                "// Line 145: ",
                "// Line 146:       // Clear previous keywords",
                "// Line 147:       const keywordsElement = document.getElementById('web-app-keywords')",
                "// Line 148:       keywordsElement.tagsInstance.resetSearchInput()",
                "// Line 149:       keywordsElement.tagsInstance.reset()",
                "// Line 150: ",
                "// Line 151:       // Set keywords from config or manifest",
                "// vulnerable line: 152: const keywordsList = site.config.keywords?.length ? site.config.keywords : site.manifest.keywords",
                "// vulnerable line: 153: for (const keyword of keywordsList || []) keywordsElement.tagsInstance.addItem(keyword, keyword)",
                "// Line 154: ",
                "// Line 155:       // Set site's profile from config",
                "// Line 156:       const profilesElement = document.getElementById('web-app-profile')",
                "// Line 157:       profilesElement.replaceChildren()",
                "// vulnerable line: 158: profilesElement.add(new Option(profiles[site.profile].name || site.profile, site.profile))",
                "// Line 159: ",
                "// Line 160:       // Create protocol handlers list and set enabled handlers",
                "// Line 161:       // Currently not supported on macOS",
                "// Line 162:       const platform = await browser.runtime.getPlatformInfo()",
                "// Line 163:       if (platform.os !== 'mac') {",
                "// vulnerable line: 164: const possibleHandlers = new Set([...site.config.custom_protocol_handlers, ...site.manifest.protocol_handlers].map(handler => handler.protocol).sort())",
                "// vulnerable line: 165: const enabledHandlers = site.config.enabled_protocol_handlers",
                "// Line 166: ",
                "// Line 167:         const handlersBox = document.getElementById('web-app-protocol-handlers-box')",
                "// Line 168:         const handlersList = document.getElementById('web-app-protocol-handlers-list')",
                "// Line 169:         handlersList.replaceChildren()",
                "// Line 170: ",
                "// Line 171:         for (const handler of possibleHandlers) {",
                "// Line 172:           if (isProtocolSchemePermitted(handler)) {",
                "// Line 173:             const checkboxInput = document.createElement('input')",
                "// Line 174:             checkboxInput.classList.add('web-app-protocol-handler', 'form-check-input', 'me-1')",
                "// Line 175:             checkboxInput.type = 'checkbox'",
                "// Line 307: ",
                "// Line 308:         // Get simple site data",
                "// Line 309:         const startUrl = document.getElementById('web-app-start-url').value || null",
                "// Line 310:         const iconUrl = document.getElementById('web-app-icon-url').value || null",
                "// Line 311:         const name = document.getElementById('web-app-name').value || null",
                "// Line 312:         const description = document.getElementById('web-app-description').value || null",
                "// Line 313: ",
                "// Line 314:         // Get categories and keywords based on user form input and site manifest",
                "// Line 315:         // If the user list is identical to the manifest, ignore it, otherwise, set it as a user overwrite",
                "// Line 316:         const userCategories = [...document.getElementById('web-app-categories').selectedOptions].map(option => option.value)",
                "// vulnerable line: 317: const manifestCategories = site.manifest.categories || []",
                "// Line 318:         const categories = userCategories.toString() !== manifestCategories.toString() ? userCategories : null",
                "// Line 319: ",
                "// Line 320:         const userKeywords = [...document.getElementById('web-app-keywords').selectedOptions].map(option => option.value)",
                "// vulnerable line: 321: const manifestKeywords = site.manifest.keywords || []",
                "// Line 322:         const keywords = userKeywords.toString() !== manifestKeywords.toString() ? userKeywords : null",
                "// Line 323: ",
                "// Line 324:         // Get list of enabled protocol handlers",
                "// Line 325:         const enabledProtocolHandlers = [...document.querySelectorAll('.web-app-protocol-handler:checked')].map(check => check.value)",
                "// Line 326: ",
                "// Line 327:         // Control whether the auto launch is enabled",
                "// Line 328:         const autoLaunchEnabled = document.getElementById('web-app-auto-launch').checked",
                "// Line 329:         const enabledUrlHandlers = []",
                "// Line 330:         if (autoLaunchEnabled) enabledUrlHandlers.push(site.manifest.scope)",
                "// Line 331: ",
                "// Line 519:   const emptyElement = document.getElementById('profiles-list-empty')",
                "// Line 520: ",
                "// Line 521:   loadingElement.classList.add('d-none')",
                "// Line 522:   if (!profiles.length) emptyElement.classList.remove('d-none')",
                "// Line 523: ",
                "// Line 524:   // Create a list element for every instance with handlers for launching and editing",
                "// Line 525:   for (const profile of profiles) {",
                "// Line 526:     const profileElement = templateElement.content.firstElementChild.cloneNode(true)",
                "// Line 527: ",
                "// Line 528:     const nameElement = profileElement.querySelector('#profiles-list-template-name')",
                "// vulnerable line: 529: nameElement.innerText = profile.name || await getMessage('managePageProfileListUnnamed')",
                "// Line 530:     nameElement.removeAttribute('id')",
                "// Line 531: ",
                "// Line 532:     const countElement = profileElement.querySelector('#profiles-list-template-count')",
                "// Line 533:     countElement.innerText = `(${await getMessage('managePageProfileListCount', undefined, profile.sites.length)})`",
                "// Line 534:     if (profile.sites.length === 0) {",
                "// Line 535:       countElement.classList.add('text-opacity-50')",
                "// Line 536:     }",
                "// Line 537:     countElement.removeAttribute('id')",
                "// Line 538: ",
                "// Line 539:     const descriptionElement = profileElement.querySelector('#profiles-list-template-description')",
                "// vulnerable line: 540: descriptionElement.innerText = profile.description || ''",
                "// Line 541:     descriptionElement.removeAttribute('id')",
                "// Line 542: ",
                "// Line 543:     const editElement = profileElement.querySelector('#profiles-list-template-edit')",
                "// Line 544:     const editElementTooltip = await getMessage('managePageProfileListEdit')",
                "// Line 545:     editElement.addEventListener('click', async (event) => {",
                "// Line 546:       const form = document.getElementById('profile-form')",
                "// Line 547:       const submit = document.getElementById('profile-submit')",
                "// Line 548: ",
                "// Line 549:       // Set label to edit",
                "// Line 550:       document.getElementById('profile-edit-label').innerText = await getMessage('managePageProfileListEdit')",
                "// Line 677:   }",
                "// Line 678: }",
                "// Line 679: ",
                "// Line 680: // Handle site and profile search",
                "// Line 681: async function handleSearch () {",
                "// Line 682:   const searchHandler = function (listElement) {",
                "// Line 683:     document.getElementById('search-box').classList.remove('invisible')",
                "// Line 684: ",
                "// Line 685:     document.getElementById('search-input').oninput = function () {",
                "// Line 686:       for (const item of document.getElementById(listElement).children) {",
                "// vulnerable line: 687: const itemName = item.querySelector('.list-group-item-name')?.innerText.toLowerCase()",
                "// vulnerable line: 688: const searchQuery = this.value.toLowerCase()",
                "// Line 689: ",
                "// Line 690:         if (!itemName) continue",
                "// Line 691:         item.classList.toggle('d-none', itemName.indexOf(searchQuery) === -1)",
                "// Line 692:       }",
                "// Line 693:     }",
                "// Line 694:   }",
                "// Line 695: ",
                "// Line 696:   const searchHide = function () {",
                "// Line 697:     document.getElementById('search-box').classList.add('invisible')",
                "// Line 698:   }"
            ]
        },
        {
            "filename_of_changes": "systemIntegration.jsm",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 175:  * problems on some desktop environments (for example, Xfce), `windowclass` and",
                "// Line 176:  * `windowname` attributes to prevent grouping different web apps, and window",
                "// Line 177:  * colors based on the colors from the manifest.",
                "// Line 178:  *",
                "// Line 179:  * @param {ChromeWindow&Window} window - Window where integration should be applied",
                "// Line 180:  * @param {object} site - Site config for which integration should be used",
                "// Line 181:  */",
                "// Line 182: function applySystemIntegration (window, site) {",
                "// Line 183:   // Set title only on the main browser chrome window",
                "// Line 184:   if (window.location.href === AppConstants.BROWSER_CHROME_URL) {",
                "// vulnerable line: 185: window.document.title = site.config.name || site.manifest.name || site.manifest.short_name;",
                "// Line 186:   }",
                "// Line 187: ",
                "// Line 188:   window.document.documentElement.setAttribute('icon', `FFPWA-${site.ulid}`);",
                "// Line 189:   window.document.documentElement.setAttribute('windowclass', `FFPWA-${site.ulid}`);",
                "// Line 190:   window.document.documentElement.setAttribute('windowname', `FFPWA-${site.ulid}`);",
                "// Line 191: ",
                "// Line 192:   if (AppConstants.platform === 'win') {",
                "// Line 193:     WinTaskbar.setGroupIdForWindow(window, `filips.firefoxpwa.${site.ulid}`);",
                "// Line 194:     setWindowIcons(window, site);",
                "// Line 195:   }"
            ]
        }
    ]
}