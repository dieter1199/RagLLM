{
    "cve_id": "CVE-2024-29028",
    "cve_description": "memos is a privacy-first, lightweight note-taking service. In memos 0.13.2, an SSRF vulnerability exists at the /o/get/httpmeta that allows unauthenticated users to enumerate the internal network and receive limited html values in json form. This vulnerability is fixed in 0.16.1.",
    "cve_publish_date": "2024-04-19T15:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "chore: remove unused httpmeta getter api",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "http_getter.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "0",
            "number_of_lines_deleted_vulnerable_to_cve": "29",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 4:     \"fmt\"",
                "// Line 5:     \"net/http\"",
                "// Line 6:     \"net/url\"",
                "// Line 7: ",
                "// Line 8:     \"github.com/labstack/echo/v4\"",
                "// Line 9: ",
                "// Line 10:     getter \"github.com/usememos/memos/plugin/http-getter\"",
                "// Line 11: )",
                "// Line 12: ",
                "// Line 13: func (*APIV1Service) registerGetterPublicRoutes(g *echo.Group) {",
                "// vulnerable line: 14: // GET /get/httpmeta?url={url} - Get website meta.",
                "// vulnerable line: 15: g.GET(\"/get/httpmeta\", GetWebsiteMetadata)",
                "// Line 16: ",
                "// Line 17:     // GET /get/image?url={url} - Get image.",
                "// Line 18:     g.GET(\"/get/image\", GetImage)",
                "// vulnerable line: 19: }",
                "// Line 20: ",
                "// vulnerable line: 21: // GetWebsiteMetadata godoc",
                "// vulnerable line: 22: //",
                "// vulnerable line: 23: //    @Summary    Get website metadata",
                "// vulnerable line: 24: //    @Tags        get",
                "// vulnerable line: 25: //    @Produce    json",
                "// vulnerable line: 26: //    @Param        url    query        string            true    \"Website URL\"",
                "// vulnerable line: 27: //    @Success    200    {object}    getter.HTMLMeta    \"Extracted metadata\"",
                "// vulnerable line: 28: //    @Failure    400    {object}    nil                \"Missing website url | Wrong url\"",
                "// vulnerable line: 29: //    @Failure    406    {object}    nil                \"Failed to get website meta with url: %s\"",
                "// vulnerable line: 30: //    @Router        /o/get/GetWebsiteMetadata [GET]",
                "// vulnerable line: 31: func GetWebsiteMetadata(c echo.Context) error {",
                "// vulnerable line: 32: urlStr := c.QueryParam(\"url\")",
                "// vulnerable line: 33: if urlStr == \"\" {",
                "// vulnerable line: 34: return echo.NewHTTPError(http.StatusBadRequest, \"Missing website url\")",
                "// vulnerable line: 35: }",
                "// vulnerable line: 36: if _, err := url.Parse(urlStr); err != nil {",
                "// vulnerable line: 37: return echo.NewHTTPError(http.StatusBadRequest, \"Wrong url\").SetInternal(err)",
                "// vulnerable line: 38: }",
                "// Line 39: ",
                "// vulnerable line: 40: htmlMeta, err := getter.GetHTMLMeta(urlStr)",
                "// vulnerable line: 41: if err != nil {",
                "// vulnerable line: 42: return echo.NewHTTPError(http.StatusNotAcceptable, fmt.Sprintf(\"Failed to get website meta with url: %s\", urlStr)).SetInternal(err)",
                "// vulnerable line: 43: }",
                "// vulnerable line: 44: return c.JSON(http.StatusOK, htmlMeta)",
                "// vulnerable line: 45: }",
                "// Line 46: ",
                "// Line 47: // GetImage godoc",
                "// vulnerable line: 48: //",
                "// Line 49: //    @Summary    Get GetImage from URL",
                "// vulnerable line: 50: //    @Tags        get",
                "// Line 51: //    @Produce    GetImage/*",
                "// Line 52: //    @Param        url    query        string    true    \"Image url\"",
                "// Line 53: //    @Success    200    {object}    nil        \"Image\"",
                "// Line 54: //    @Failure    400    {object}    nil        \"Missing GetImage url | Wrong url | Failed to get GetImage url: %s\"",
                "// Line 55: //    @Failure    500    {object}    nil        \"Failed to write GetImage blob\"",
                "// Line 56: //    @Router        /o/get/GetImage [GET]",
                "// Line 57: func GetImage(c echo.Context) error {",
                "// vulnerable line: 58: urlStr := c.QueryParam(\"url\")",
                "// vulnerable line: 59: if urlStr == \"\" {",
                "// Line 60:         return echo.NewHTTPError(http.StatusBadRequest, \"Missing image url\")",
                "// vulnerable line: 61: }",
                "// vulnerable line: 62: if _, err := url.Parse(urlStr); err != nil {",
                "// vulnerable line: 63: return echo.NewHTTPError(http.StatusBadRequest, \"Wrong url\").SetInternal(err)",
                "// vulnerable line: 64: }",
                "// Line 65: ",
                "// Line 66:     image, err := getter.GetImage(urlStr)",
                "// vulnerable line: 67: if err != nil {",
                "// Line 68:         return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf(\"Failed to get image url: %s\", urlStr)).SetInternal(err)",
                "// vulnerable line: 69: }",
                "// Line 70: ",
                "// Line 71:     c.Response().Writer.WriteHeader(http.StatusOK)",
                "// Line 72:     c.Response().Writer.Header().Set(\"Content-Type\", image.Mediatype)",
                "// Line 73:     c.Response().Writer.Header().Set(echo.HeaderCacheControl, \"max-age=31536000, immutable\")",
                "// Line 74:     if _, err := c.Response().Writer.Write(image.Blob); err != nil {",
                "// Line 75:         return echo.NewHTTPError(http.StatusInternalServerError, \"Failed to write image blob\").SetInternal(err)",
                "// vulnerable line: 76: }",
                "// Line 77:     return nil",
                "// vulnerable line: 78: }"
            ]
        }
    ]
}