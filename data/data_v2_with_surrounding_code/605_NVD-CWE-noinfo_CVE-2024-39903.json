{
    "cve_id": "CVE-2024-39903",
    "cve_description": "Solara is a pure Python, React-style framework for scaling Jupyter and web apps. A Local File Inclusion (LFI) vulnerability was identified in widgetti/solara, in version <1.35.1, which was fixed in version 1.35.1. This vulnerability arises from the application's failure to properly validate URI fragments for directory traversal sequences such as '../' when serving static files. An attacker can exploit this flaw by manipulating the fragment part of the URI to read arbitrary files on the local file system.",
    "cve_publish_date": "2024-07-12T15:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fix: CVE followup, do not serve relative files\n\nWe still served files above the directory of intent.\nWe now test all endpoint, using both starlette and flask to\nmake sure this will not happen again.",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "cdn_helper.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "9",
            "number_of_lines_deleted_vulnerable_to_cve": "11",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: import logging",
                "// vulnerable line: 2: import os",
                "// Line 3: import pathlib",
                "// Line 4: import shutil",
                "// Line 5: ",
                "// Line 6: import requests",
                "// Line 7: ",
                "// Line 8: import solara.settings",
                "// Line 9: ",
                "// Line 10: logger = logging.getLogger(\"Solara.cdn\")",
                "// Line 11: ",
                "// Line 12: cdn_url_path = \"_solara/cdn\"",
                "// Line 20:         cache_path.write_bytes(data)",
                "// Line 21:     except FileNotFoundError:",
                "// Line 22:         logger.info(\"Failed writing cache file: %s\", cache_path)",
                "// Line 23: ",
                "// Line 24: ",
                "// Line 25: def get_from_cache(base_cache_dir: pathlib.Path, path):",
                "// Line 26:     cache_path = pathlib.Path(base_cache_dir / path)",
                "// Line 27:     # Make sure cache_path is a subdirectory of base_cache_dir",
                "// Line 28:     # so we don't accidentally read files from the parent directory",
                "// Line 29:     # which is a security risk.",
                "// vulnerable line: 30: # We use os.path.normpath() because we do not want to follow symlinks",
                "// vulnerable line: 31: # in editable installs, since some packages are symlinked",
                "// vulnerable line: 32: if not os.path.normpath(cache_path).startswith(os.path.normpath(base_cache_dir)):",
                "// vulnerable line: 33: logger.warning(",
                "// vulnerable line: 34: \"Trying to read from outside of cache directory: %s is not a subdir of %s (%s - %s)\",",
                "// vulnerable line: 35: cache_path,",
                "// vulnerable line: 36: base_cache_dir,",
                "// vulnerable line: 37: os.path.normpath(cache_path),",
                "// vulnerable line: 38: os.path.normpath(base_cache_dir),",
                "// vulnerable line: 39: )",
                "// Line 40:         raise PermissionError(\"Trying to read from outside of cache directory\")",
                "// Line 41: ",
                "// Line 42:     try:",
                "// Line 43:         logger.info(\"Opening cache file: %s\", cache_path)",
                "// Line 44:         return cache_path.read_bytes()",
                "// Line 45:     except FileNotFoundError:",
                "// Line 46:         pass",
                "// Line 47: ",
                "// Line 48: ",
                "// Line 49: def get_cdn_url(path):"
            ]
        },
        {
            "filename_of_changes": "flask.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "5",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 192:     return flask.Response(\"not found\", status=404)",
                "// Line 193: ",
                "// Line 194: ",
                "// Line 195: @blueprint.route(\"/static/nbextensions/<dir>/<filename>\")",
                "// Line 196: def nbext(dir, filename):",
                "// Line 197:     if not allowed():",
                "// Line 198:         abort(401)",
                "// Line 199:     for directory in server.nbextensions_directories:",
                "// Line 200:         file = directory / dir / filename",
                "// Line 201:         if file.exists():",
                "// vulnerable line: 202: return send_from_directory(directory / dir, filename)",
                "// Line 203:     return flask.Response(\"not found\", status=404)",
                "// Line 204: ",
                "// Line 205: ",
                "// Line 206: @blueprint.route(\"/static/<path:path>\")",
                "// Line 207: def serve_static(path):",
                "// Line 208:     if not allowed():",
                "// Line 209:         abort(401)",
                "// Line 210:     return send_from_directory(server.solara_static, path)",
                "// Line 211: ",
                "// Line 212: ",
                "// Line 213: if solara.settings.assets.proxy:",
                "// Line 214: ",
                "// Line 215:     @blueprint.route(f\"/{cdn_helper.cdn_url_path}/<path:path>\")",
                "// Line 216:     def cdn(path):",
                "// Line 217:         if not allowed():",
                "// Line 218:             abort(401)",
                "// Line 219:         cache_directory = settings.assets.proxy_cache_dir",
                "// vulnerable line: 220: content = cdn_helper.get_data(Path(cache_directory), path)",
                "// Line 221:         mime = mimetypes.guess_type(path)",
                "// Line 222:         return flask.Response(content, mimetype=mime[0])",
                "// Line 223: ",
                "// Line 224: ",
                "// Line 225: @blueprint.route(\"/\", defaults={\"path\": \"\"})",
                "// Line 226: @blueprint.route(\"/<path:path>\")",
                "// Line 227: def read_root(path):",
                "// Line 228:     root_path = url_for(\".read_root\")",
                "// Line 229:     if root_path.endswith(\"/\"):",
                "// Line 230:         root_path = root_path[:-1]"
            ]
        },
        {
            "filename_of_changes": "starlette.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "6",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "utils.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "7",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        }
    ]
}