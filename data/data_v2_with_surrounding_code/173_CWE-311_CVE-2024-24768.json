{
    "cve_id": "CVE-2024-24768",
    "cve_description": "1Panel is an open source Linux server operation and maintenance management panel. The HTTPS cookie that comes with the panel does not have the Secure keyword, which may cause the cookie to be sent in plain text if accessed using HTTP. This issue has been patched in version 1.9.6.\n\n",
    "cve_publish_date": "2024-02-05T15:15Z",
    "cwe_id": "CWE-311",
    "cwe_name": "Missing Encryption of Sensitive Data",
    "cwe_description": "The product does not encrypt sensitive or critical information before storage or transmission.",
    "commit_message": "feat: 面板开启 https 时，cookie 开启 secure 属性 (#3817)",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "auth.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "10",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 122:         token, err := j.CreateToken(claims)",
                "// Line 123:         if err != nil {",
                "// Line 124:             return nil, err",
                "// Line 125:         }",
                "// Line 126:         return &dto.UserLoginInfo{Name: name, Token: token}, nil",
                "// Line 127:     }",
                "// Line 128:     sID, _ := c.Cookie(constant.SessionName)",
                "// Line 129:     sessionUser, err := global.SESSION.Get(sID)",
                "// Line 130:     if err != nil {",
                "// Line 131:         sID = uuid.New().String()",
                "// vulnerable line: 132: c.SetCookie(constant.SessionName, sID, 0, \"\", \"\", false, false)",
                "// Line 133:         err := global.SESSION.Set(sID, sessionUser, lifeTime)",
                "// Line 134:         if err != nil {",
                "// Line 135:             return nil, err",
                "// Line 136:         }",
                "// Line 137:         return &dto.UserLoginInfo{Name: name}, nil",
                "// Line 138:     }",
                "// Line 139:     if err := global.SESSION.Set(sID, sessionUser, lifeTime); err != nil {",
                "// Line 140:         return nil, err",
                "// Line 141:     }",
                "// Line 142: ",
                "// Line 143:     return &dto.UserLoginInfo{Name: name}, nil",
                "// Line 144: }",
                "// Line 145: ",
                "// Line 146: func (u *AuthService) LogOut(c *gin.Context) error {",
                "// Line 147:     sID, _ := c.Cookie(constant.SessionName)",
                "// Line 148:     if sID != \"\" {",
                "// vulnerable line: 149: c.SetCookie(constant.SessionName, sID, -1, \"\", \"\", false, false)",
                "// Line 150:         err := global.SESSION.Delete(sID)",
                "// Line 151:         if err != nil {",
                "// Line 152:             return err",
                "// Line 153:         }",
                "// Line 154:     }",
                "// Line 155:     return nil",
                "// Line 156: }",
                "// Line 157: ",
                "// Line 158: func (u *AuthService) VerifyCode(code string) (bool, error) {",
                "// Line 159:     setting, err := settingRepo.Get(settingRepo.WithByKey(\"SecurityEntrance\"))"
            ]
        },
        {
            "filename_of_changes": "setting.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "6",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        }
    ]
}