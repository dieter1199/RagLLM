{
    "cve_id": "CVE-2024-35192",
    "cve_description": "Trivy is a security scanner. Prior to 0.51.2, if a malicious actor is able to trigger Trivy to scan container images from a crafted malicious registry, it could result in the leakage of credentials for legitimate registries such as AWS Elastic Container Registry (ECR), Google Cloud Artifact/Container Registry, or Azure Container Registry (ACR). These tokens can then be used to push/pull images from those registries to which the identity/user running Trivy has access. Systems are not affected if the default credential provider chain is unable to obtain valid credentials. This vulnerability only applies when scanning container images directly from a registry. This vulnerability is fixed in 0.51.2.",
    "cve_publish_date": "2024-05-20T21:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Merge pull request from GHSA-xcq4-m2r3-cmrj\n\n* Update azure.go\n\n* Update ecr.go\n\n* Update google.go\n\n* Update ecr_test.go\n\n* Update azure_test.go\n\n* Update google_test.go",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "azure.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 13:     \"golang.org/x/xerrors\"",
                "// Line 14: ",
                "// Line 15:     \"github.com/aquasecurity/trivy/pkg/fanal/types\"",
                "// Line 16: )",
                "// Line 17: ",
                "// Line 18: type Registry struct {",
                "// Line 19:     domain string",
                "// Line 20: }",
                "// Line 21: ",
                "// Line 22: const (",
                "// vulnerable line: 23: azureURL = \"azurecr.io\"",
                "// Line 24:     scope    = \"https://management.azure.com/.default\"",
                "// Line 25:     scheme   = \"https\"",
                "// Line 26: )",
                "// Line 27: ",
                "// Line 28: func (r *Registry) CheckOptions(domain string, _ types.RegistryOptions) error {",
                "// Line 29:     if !strings.HasSuffix(domain, azureURL) {",
                "// Line 30:         return xerrors.Errorf(\"Azure registry: %w\", types.InvalidURLPattern)",
                "// Line 31:     }",
                "// Line 32:     r.domain = domain",
                "// Line 33:     return nil"
            ]
        },
        {
            "filename_of_changes": "azure_test.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "5",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "ecr.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 7: ",
                "// Line 8:     \"github.com/aws/aws-sdk-go-v2/aws\"",
                "// Line 9:     \"github.com/aws/aws-sdk-go-v2/config\"",
                "// Line 10:     \"github.com/aws/aws-sdk-go-v2/credentials\"",
                "// Line 11:     \"github.com/aws/aws-sdk-go-v2/service/ecr\"",
                "// Line 12:     \"golang.org/x/xerrors\"",
                "// Line 13: ",
                "// Line 14:     \"github.com/aquasecurity/trivy/pkg/fanal/types\"",
                "// Line 15: )",
                "// Line 16: ",
                "// vulnerable line: 17: const ecrURL = \"amazonaws.com\"",
                "// Line 18: ",
                "// Line 19: type ecrAPI interface {",
                "// Line 20:     GetAuthorizationToken(ctx context.Context, params *ecr.GetAuthorizationTokenInput, optFns ...func(*ecr.Options)) (*ecr.GetAuthorizationTokenOutput, error)",
                "// Line 21: }",
                "// Line 22: ",
                "// Line 23: type ECR struct {",
                "// Line 24:     Client ecrAPI",
                "// Line 25: }",
                "// Line 26: ",
                "// Line 27: func getSession(option types.RegistryOptions) (aws.Config, error) {",
                "// Line 30:         return config.LoadDefaultConfig(",
                "// Line 31:             context.TODO(),",
                "// Line 32:             config.WithRegion(option.AWSRegion),",
                "// Line 33:             config.WithCredentialsProvider(credentials.NewStaticCredentialsProvider(option.AWSAccessKey, option.AWSSecretKey, option.AWSSessionToken)),",
                "// Line 34:         )",
                "// Line 35:     }",
                "// Line 36:     return config.LoadDefaultConfig(context.TODO())",
                "// Line 37: }",
                "// Line 38: ",
                "// Line 39: func (e *ECR) CheckOptions(domain string, option types.RegistryOptions) error {",
                "// vulnerable line: 40: if !strings.HasSuffix(domain, ecrURL) {",
                "// Line 41:         return xerrors.Errorf(\"ECR : %w\", types.InvalidURLPattern)",
                "// Line 42:     }",
                "// Line 43: ",
                "// Line 44:     cfg, err := getSession(option)",
                "// Line 45:     if err != nil {",
                "// Line 46:         return err",
                "// Line 47:     }",
                "// Line 48: ",
                "// Line 49:     svc := ecr.NewFromConfig(cfg)",
                "// Line 50:     e.Client = svc"
            ]
        },
        {
            "filename_of_changes": "ecr_test.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "8",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "google.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 11: ",
                "// Line 12:     \"github.com/aquasecurity/trivy/pkg/fanal/types\"",
                "// Line 13: )",
                "// Line 14: ",
                "// Line 15: type Registry struct {",
                "// Line 16:     Store  store.GCRCredStore",
                "// Line 17:     domain string",
                "// Line 18: }",
                "// Line 19: ",
                "// Line 20: // Google container registry",
                "// vulnerable line: 21: const gcrURL = \"gcr.io\"",
                "// Line 22: ",
                "// Line 23: // Google artifact registry",
                "// vulnerable line: 24: const garURL = \"docker.pkg.dev\"",
                "// Line 25: ",
                "// Line 26: func (g *Registry) CheckOptions(domain string, option types.RegistryOptions) error {",
                "// vulnerable line: 27: if !strings.HasSuffix(domain, gcrURL) && !strings.HasSuffix(domain, garURL) {",
                "// Line 28:         return xerrors.Errorf(\"Google registry: %w\", types.InvalidURLPattern)",
                "// Line 29:     }",
                "// Line 30:     g.domain = domain",
                "// Line 31:     if option.GCPCredPath != \"\" {",
                "// Line 32:         g.Store = store.NewGCRCredStore(option.GCPCredPath)",
                "// Line 33:     }",
                "// Line 34:     return nil",
                "// Line 35: }",
                "// Line 36: ",
                "// Line 37: func (g *Registry) GetCredential(_ context.Context) (username, password string, err error) {"
            ]
        },
        {
            "filename_of_changes": "google_test.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        }
    ]
}