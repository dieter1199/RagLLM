{
    "cve_id": "CVE-2024-32971",
    "cve_description": "Apollo Router is a configurable, graph router written in Rust to run a federated supergraph that uses Apollo Federation 2. The affected versions of Apollo Router contain a bug that in limited circumstances, could lead to unexpected operations being executed which can result in unintended data or effects. This only affects Router instances configured to use distributed query plan caching. The root cause of this defect is a bug in Apollo Router’s cache retrieval logic: When this defect is present and distributed query planning caching is enabled, asking the Router to execute an operation (whether it is a query, a mutation, or a subscription) may result in an unexpected variation of that operation being executed or the generation of unexpected errors. The issue stems from inadvertently executing a modified version of a previously executed operation, whose query plan is stored in the underlying cache (specifically, Redis). Depending on the type of the operation, the result may vary. For a query, results may be fetched that don’t match what was requested (e.g., rather than running `fetchUsers(type: ENTERPRISE)` the Router may run `fetchUsers(type: TRIAL)`. For a mutation, this may result in incorrect mutations being sent to underlying subgraph servers (e.g., rather than sending `deleteUser(id: 10)` to a subgraph, the Router may run `deleteUser(id: 12)`. Users who are using distributed query plan caching, are advised to either upgrade to version 1.45.1 or above or downgrade to version 1.43.2 of the Apollo Router. Apollo Router versions 1.44.0 or 1.45.0 are not recommended for use and have been withdrawn. Users unable to upgrade can disable distributed query plan caching to mitigate this issue.",
    "cve_publish_date": "2024-05-02T07:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "release: v1.45.1 (#5009)",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "apollo_exporter.rs",
            "code_language": "Rust",
            "number_of_lines_added_for_mitigation": "0",
            "number_of_lines_deleted_vulnerable_to_cve": "14",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 44:     ServerError(String),",
                "// Line 45: ",
                "// Line 46:     #[error(\"Apollo exporter client error: {0}\")]",
                "// Line 47:     ClientError(String),",
                "// Line 48: ",
                "// Line 49:     #[error(\"Apollo exporter unavailable error: {0}\")]",
                "// Line 50:     Unavailable(String),",
                "// Line 51: ",
                "// Line 52:     #[error(\"Apollo Studio not accepting reports for {1} seconds\")]",
                "// Line 53:     StudioBackoff(Report, u64),",
                "// vulnerable line: 54: }",
                "// Line 55: ",
                "// Line 56: impl ExportError for ApolloExportError {",
                "// Line 57:     fn exporter_name(&self) -> &'static str {",
                "// Line 58:         \"ApolloExporter\"",
                "// vulnerable line: 59: }",
                "// vulnerable line: 60: }",
                "// Line 61: ",
                "// Line 62: #[derive(Clone, Default)]",
                "// Line 63: pub(crate) enum Sender {",
                "// Line 64:     #[default]",
                "// Line 65:     Noop,",
                "// Line 66:     Apollo(mpsc::Sender<SingleReport>),",
                "// vulnerable line: 67: }",
                "// Line 68: ",
                "// Line 69: impl Sender {",
                "// Line 70:     pub(crate) fn send(&self, report: SingleReport) {",
                "// Line 71:         match &self {",
                "// Line 72:             Sender::Noop => {}",
                "// Line 73:             Sender::Apollo(channel) => {",
                "// Line 74:                 if let Err(err) = channel.to_owned().try_send(report) {",
                "// Line 75:                     tracing::warn!(",
                "// Line 76:                         \"could not send metrics to telemetry, metric will be dropped: {}\",",
                "// Line 77:                         err",
                "// vulnerable line: 78: );",
                "// vulnerable line: 79: }",
                "// vulnerable line: 80: }",
                "// vulnerable line: 81: }",
                "// vulnerable line: 82: }",
                "// vulnerable line: 83: }",
                "// Line 84: ",
                "// Line 85: /// The Apollo exporter is responsible for attaching report header information for individual requests",
                "// Line 86: /// Retrying when sending fails.",
                "// Line 87: /// Sending periodically (in the case of metrics).",
                "// Line 88: pub(crate) struct ApolloExporter {",
                "// Line 89:     batch_config: BatchProcessorConfig,",
                "// Line 90:     endpoint: Url,",
                "// Line 91:     apollo_key: String,",
                "// Line 92:     header: proto::reports::ReportHeader,",
                "// Line 93:     client: Client,",
                "// Line 94:     strip_traces: AtomicBool,",
                "// Line 95:     studio_backoff: Mutex<Instant>,",
                "// vulnerable line: 96: }",
                "// Line 97: ",
                "// Line 98: impl ApolloExporter {",
                "// Line 99:     pub(crate) fn new(",
                "// Line 100:         endpoint: &Url,",
                "// Line 101:         batch_config: &BatchProcessorConfig,",
                "// Line 102:         apollo_key: &str,",
                "// Line 103:         apollo_graph_ref: &str,",
                "// Line 104:         schema_id: &str,",
                "// Line 105:     ) -> Result<ApolloExporter, BoxError> {",
                "// Line 106:         let header = proto::reports::ReportHeader {",
                "// Line 124:             apollo_key: apollo_key.to_string(),",
                "// Line 125:             client: reqwest::Client::builder()",
                "// Line 126:                 .no_gzip()",
                "// Line 127:                 .timeout(batch_config.max_export_timeout)",
                "// Line 128:                 .build()",
                "// Line 129:                 .map_err(BoxError::from)?,",
                "// Line 130:             header,",
                "// Line 131:             strip_traces: Default::default(),",
                "// Line 132:             studio_backoff: Mutex::new(Instant::now()),",
                "// Line 133:         })",
                "// vulnerable line: 134: }",
                "// Line 135: ",
                "// Line 136:     pub(crate) fn start(self) -> Sender {",
                "// Line 137:         let (tx, mut rx) = mpsc::channel::<SingleReport>(self.batch_config.max_queue_size);",
                "// Line 138:         tokio::spawn(async move {",
                "// Line 139:             let timeout = tokio::time::interval(self.batch_config.scheduled_delay);",
                "// Line 140:             let mut report = Report::default();",
                "// Line 141:             let mut backoff_warn = true;",
                "// Line 142: ",
                "// Line 143:             tokio::pin!(timeout);",
                "// Line 144: ",
                "// Line 149:                     biased;",
                "// Line 150:                     _ = timeout.tick() => {",
                "// Line 151:                         match self.submit_report(std::mem::take(&mut report)).await {",
                "// Line 152:                             Ok(_) => backoff_warn = true,",
                "// Line 153:                             Err(err) => {",
                "// Line 154:                                 match err {",
                "// Line 155:                                     ApolloExportError::StudioBackoff(unsubmitted, remaining) => {",
                "// Line 156:                                         if backoff_warn {",
                "// Line 157:                                             tracing::warn!(\"Apollo Studio not accepting reports for {remaining} seconds\");",
                "// Line 158:                                             backoff_warn = false;",
                "// vulnerable line: 159: }",
                "// Line 160:                                         report = unsubmitted;",
                "// Line 161:                                     },",
                "// Line 162:                                     _ => tracing::error!(\"failed to submit Apollo report: {}\", err)",
                "// vulnerable line: 163: }",
                "// vulnerable line: 164: }",
                "// vulnerable line: 165: }",
                "// vulnerable line: 166: }",
                "// Line 167:                     single_report = rx.recv() => {",
                "// Line 168:                         if let Some(r) = single_report {",
                "// Line 169:                             report += r;",
                "// Line 170:                         } else {",
                "// Line 171:                             tracing::debug!(\"terminating apollo exporter\");",
                "// Line 172:                             break;",
                "// vulnerable line: 173: }",
                "// Line 174:                     },",
                "// Line 175:                 };",
                "// vulnerable line: 176: }",
                "// Line 177: ",
                "// Line 178:             if let Err(e) = self.submit_report(std::mem::take(&mut report)).await {",
                "// Line 179:                 tracing::error!(\"failed to submit Apollo report: {}\", e)",
                "// vulnerable line: 180: }",
                "// Line 181:         });",
                "// Line 182:         Sender::Apollo(tx)",
                "// vulnerable line: 183: }",
                "// Line 184: ",
                "// Line 185:     pub(crate) async fn submit_report(&self, report: Report) -> Result<(), ApolloExportError> {",
                "// Line 186:         // We may be sending traces but with no operation count",
                "// Line 187:         if report.licensed_operation_count_by_type.is_empty() && report.traces_per_query.is_empty()",
                "// Line 188:         {",
                "// Line 189:             return Ok(());",
                "// vulnerable line: 190: }",
                "// Line 191: ",
                "// Line 192:         // If studio has previously told us not to submit reports, return for further processing",
                "// Line 193:         let expires_at = *self.studio_backoff.lock().unwrap();",
                "// Line 194:         let now = Instant::now();",
                "// Line 195:         if expires_at > now {",
                "// Line 196:             let remaining = expires_at - now;",
                "// Line 197:             return Err(ApolloExportError::StudioBackoff(",
                "// Line 198:                 report,",
                "// Line 199:                 remaining.as_secs(),",
                "// Line 200:             ));",
                "// vulnerable line: 201: }",
                "// Line 202: ",
                "// Line 203:         tracing::debug!(\"submitting report: {:?}\", report);",
                "// Line 204:         // Protobuf encode message",
                "// Line 205:         let mut content = BytesMut::new();",
                "// Line 206:         let mut proto_report = report.build_proto_report(self.header.clone());",
                "// Line 207:         prost::Message::encode(&proto_report, &mut content)",
                "// Line 208:             .map_err(|e| ApolloExportError::ClientError(e.to_string()))?;",
                "// Line 209:         // Create a gzip encoder",
                "// Line 210:         let mut encoder = GzEncoder::new(Vec::new(), Compression::default());",
                "// Line 211:         // Write our content to our encoder",
                "// Line 237:             .map_err(|e| ApolloExportError::Unavailable(e.to_string()))?;",
                "// Line 238: ",
                "// Line 239:         let mut msg = \"default error message\".to_string();",
                "// Line 240:         let mut has_traces = false;",
                "// Line 241: ",
                "// Line 242:         for (_, traces_and_stats) in proto_report.traces_per_query.iter_mut() {",
                "// Line 243:             if !traces_and_stats.trace.is_empty() {",
                "// Line 244:                 has_traces = true;",
                "// Line 245:                 if self.strip_traces.load(Ordering::SeqCst) {",
                "// Line 246:                     traces_and_stats.trace.clear();",
                "// vulnerable line: 247: }",
                "// vulnerable line: 248: }",
                "// vulnerable line: 249: }",
                "// Line 250: ",
                "// Line 251:         // We want to retry if we have traces...",
                "// Line 252:         let retries = if has_traces { 5 } else { 1 };",
                "// Line 253: ",
                "// Line 254:         for i in 0..retries {",
                "// Line 255:             // We know these requests can be cloned",
                "// Line 256:             let task_req = req.try_clone().expect(\"requests must be clone-able\");",
                "// Line 257:             match self.client.execute(task_req).await {",
                "// Line 258:                 Ok(v) => {",
                "// Line 259:                     let status = v.status();",
                "// Line 278:                             // convert it to u64, just ignore it. Otherwise, interpret it as a",
                "// Line 279:                             // number of seconds for which we should not attempt to send any more",
                "// Line 280:                             // reports.",
                "// Line 281:                             let mut retry_after = 0;",
                "// Line 282:                             if let Some(returned_retry_after) =",
                "// Line 283:                                 opt_header_retry.and_then(|v| v.to_str().ok()?.parse::<u64>().ok())",
                "// Line 284:                             {",
                "// Line 285:                                 retry_after = returned_retry_after;",
                "// Line 286:                                 *self.studio_backoff.lock().unwrap() =",
                "// Line 287:                                     Instant::now() + Duration::from_secs(retry_after);",
                "// vulnerable line: 288: }",
                "// Line 289:                             // Even if we can't update the studio_backoff, we should not continue to",
                "// Line 290:                             // retry here. We'd better just return the error.",
                "// Line 291:                             return Err(ApolloExportError::StudioBackoff(report, retry_after));",
                "// vulnerable line: 292: }",
                "// Line 293:                     } else {",
                "// Line 294:                         tracing::debug!(\"ingress response text: {:?}\", data);",
                "// Line 295:                         let report_type = if has_traces {",
                "// Line 296:                             ROUTER_REPORT_TYPE_TRACES",
                "// Line 297:                         } else {",
                "// Line 298:                             ROUTER_REPORT_TYPE_METRICS",
                "// Line 299:                         };",
                "// Line 300:                         u64_counter!(",
                "// Line 301:                             \"apollo.router.telemetry.studio.reports\",",
                "// Line 302:                             \"The number of reports submitted to Studio by the Router\",",
                "// Line 303:                             1,",
                "// Line 304:                             report.type = report_type",
                "// vulnerable line: 305: );",
                "// Line 306:                         if has_traces && !self.strip_traces.load(Ordering::SeqCst) {",
                "// Line 307:                             // If we had traces then maybe disable sending traces from this exporter based on the response.",
                "// Line 308:                             if let Ok(response) = serde_json::Value::from_str(&data) {",
                "// Line 309:                                 if let Some(Value::Bool(true)) = response.get(\"tracesIgnored\") {",
                "// Line 310:                                     tracing::warn!(\"traces will not be sent to Apollo as this account is on a free plan\");",
                "// Line 311:                                     self.strip_traces.store(true, Ordering::SeqCst);",
                "// vulnerable line: 312: }",
                "// vulnerable line: 313: }",
                "// vulnerable line: 314: }",
                "// Line 315:                         return Ok(());",
                "// vulnerable line: 316: }",
                "// vulnerable line: 317: }",
                "// Line 318:                 Err(e) => {",
                "// Line 319:                     // TODO: Ultimately need more sophisticated handling here. For example",
                "// Line 320:                     // a redirect should not be treated the same way as a connect or a",
                "// Line 321:                     // type builder error...",
                "// Line 322:                     tracing::warn!(\"attempt: {}, could not transfer: {}\", i + 1, e);",
                "// Line 323:                     msg = e.to_string();",
                "// vulnerable line: 324: }",
                "// vulnerable line: 325: }",
                "// Line 326:             backoff += BACKOFF_INCREMENT;",
                "// Line 327:             tokio::time::sleep(backoff).await;",
                "// vulnerable line: 328: }",
                "// Line 329:         Err(ApolloExportError::Unavailable(msg))",
                "// vulnerable line: 330: }",
                "// vulnerable line: 331: }",
                "// Line 332: ",
                "// Line 333: #[cfg(not(target_os = \"windows\"))]",
                "// Line 334: pub(crate) fn get_uname() -> Result<String, std::io::Error> {",
                "// Line 335:     let u = uname::uname()?;",
                "// Line 336:     Ok(format!(",
                "// Line 337:         \"{}, {}, {}, {}, {},\",",
                "// Line 338:         u.sysname, u.nodename, u.release, u.version, u.machine",
                "// Line 339:     ))",
                "// vulnerable line: 340: }",
                "// Line 341: ",
                "// Line 342: #[cfg(target_os = \"windows\")]",
                "// Line 343: pub(crate) fn get_uname() -> Result<String, std::io::Error> {",
                "// Line 344:     // Best we can do on windows right now",
                "// Line 345:     let sysname = sys_info::os_type().unwrap_or_else(|_| \"Windows\".to_owned());",
                "// Line 346:     let nodename = sys_info::hostname().unwrap_or_else(|_| \"unknown\".to_owned());",
                "// Line 347:     let release = sys_info::os_release().unwrap_or_else(|_| \"unknown\".to_owned());",
                "// Line 348:     let version = \"unknown\";",
                "// Line 349:     let machine = \"unknown\";",
                "// Line 350:     Ok(format!(",
                "// Line 351:         \"{}, {}, {}, {}, {}\",",
                "// Line 352:         sysname, nodename, release, version, machine",
                "// Line 353:     ))",
                "// vulnerable line: 354: }",
                "// Line 355: ",
                "// Line 356: #[allow(unreachable_pub)]",
                "// Line 357: pub(crate) mod proto {",
                "// Line 358:     pub(crate) mod reports {",
                "// Line 359:         #![allow(clippy::derive_partial_eq_without_eq)]",
                "// Line 360:         tonic::include_proto!(\"reports\");",
                "// vulnerable line: 361: }",
                "// vulnerable line: 362: }",
                "// Line 363: ",
                "// Line 364: /// Reporting Error type",
                "// Line 365: #[derive(Debug)]",
                "// Line 366: pub(crate) struct ReporterError {",
                "// Line 367:     source: Box<dyn Error + Send + Sync + 'static>,",
                "// Line 368:     msg: String,",
                "// vulnerable line: 369: }",
                "// Line 370: ",
                "// Line 371: impl std::error::Error for ReporterError {}",
                "// Line 372: ",
                "// Line 373: impl From<InvalidUri> for ReporterError {",
                "// Line 374:     fn from(error: InvalidUri) -> Self {",
                "// Line 375:         ReporterError {",
                "// Line 376:             msg: error.to_string(),",
                "// Line 377:             source: Box::new(error),",
                "// vulnerable line: 378: }",
                "// vulnerable line: 379: }",
                "// vulnerable line: 380: }",
                "// Line 381: ",
                "// Line 382: impl From<tonic::transport::Error> for ReporterError {",
                "// Line 383:     fn from(error: tonic::transport::Error) -> Self {",
                "// Line 384:         ReporterError {",
                "// Line 385:             msg: error.to_string(),",
                "// Line 386:             source: Box::new(error),",
                "// vulnerable line: 387: }",
                "// vulnerable line: 388: }",
                "// vulnerable line: 389: }",
                "// Line 390: ",
                "// Line 391: impl From<std::io::Error> for ReporterError {",
                "// Line 392:     fn from(error: std::io::Error) -> Self {",
                "// Line 393:         ReporterError {",
                "// Line 394:             msg: error.to_string(),",
                "// Line 395:             source: Box::new(error),",
                "// vulnerable line: 396: }",
                "// vulnerable line: 397: }",
                "// vulnerable line: 398: }",
                "// Line 399: ",
                "// Line 400: impl From<sys_info::Error> for ReporterError {",
                "// Line 401:     fn from(error: sys_info::Error) -> Self {",
                "// Line 402:         ReporterError {",
                "// Line 403:             msg: error.to_string(),",
                "// Line 404:             source: Box::new(error),",
                "// vulnerable line: 405: }",
                "// vulnerable line: 406: }",
                "// vulnerable line: 407: }",
                "// Line 408: ",
                "// Line 409: impl From<JoinError> for ReporterError {",
                "// Line 410:     fn from(error: JoinError) -> Self {",
                "// Line 411:         ReporterError {",
                "// Line 412:             msg: error.to_string(),",
                "// Line 413:             source: Box::new(error),",
                "// vulnerable line: 414: }",
                "// vulnerable line: 415: }",
                "// vulnerable line: 416: }",
                "// Line 417: ",
                "// Line 418: impl std::fmt::Display for ReporterError {",
                "// Line 419:     fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "// Line 420:         write!(",
                "// Line 421:             f,",
                "// Line 422:             \"ReporterError: source: {}, message: {}\",",
                "// Line 423:             self.source, self.msg",
                "// Line 424:         )",
                "// vulnerable line: 425: }",
                "// vulnerable line: 426: }",
                "// Line 427: ",
                "// Line 428: pub(crate) fn serialize_timestamp<S>(",
                "// Line 429:     timestamp: &Option<prost_types::Timestamp>,",
                "// Line 430:     serializer: S,",
                "// Line 431: ) -> Result<S::Ok, S::Error>",
                "// Line 432: where",
                "// Line 433:     S: serde::Serializer,",
                "// Line 434: {",
                "// Line 435:     match timestamp {",
                "// Line 436:         Some(ts) => {",
                "// Line 437:             let mut ts_strukt = serializer.serialize_struct(\"Timestamp\", 2)?;",
                "// Line 438:             ts_strukt.serialize_field(\"seconds\", &ts.seconds)?;",
                "// Line 439:             ts_strukt.serialize_field(\"nanos\", &ts.nanos)?;",
                "// Line 440:             ts_strukt.end()",
                "// vulnerable line: 441: }",
                "// Line 442:         None => serializer.serialize_none(),",
                "// vulnerable line: 443: }",
                "// vulnerable line: 444: }",
                "// Line 445: ",
                "// Line 446: #[cfg(not(windows))] // git checkout converts ",
                "// Line 447:  to ",
                "// Line 448: , making == below fail",
                "// vulnerable line: 449: #[test]",
                "// vulnerable line: 450: fn check_reports_proto_is_up_to_date() {",
                "// vulnerable line: 451: let proto_url = \"https://usage-reporting.api.apollographql.com/proto/reports.proto\";",
                "// vulnerable line: 452: let response = reqwest::blocking::get(proto_url).unwrap();",
                "// vulnerable line: 453: let content = response.text().unwrap();",
                "// vulnerable line: 454: // Not using assert_eq! as printing the entire file would be too verbose",
                "// vulnerable line: 455: assert!(",
                "// vulnerable line: 456: content == include_str!(\"proto/reports.proto\"),",
                "// Line 457:         \"Protobuf file is out of date. Run this command to update it:",
                "// Line 458: ",
                "// Line 459:                 curl -f {proto_url} > apollo-router/src/plugins/telemetry/proto/reports.proto",
                "// Line 460: ",
                "// Line 461: \"",
                "// vulnerable line: 462: );",
                "// vulnerable line: 463: }"
            ]
        },
        {
            "filename_of_changes": "bridge_query_planner.rs",
            "code_language": "Rust",
            "number_of_lines_added_for_mitigation": "17",
            "number_of_lines_deleted_vulnerable_to_cve": "7",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 208:             Some(Arc::new(Introspection::new(planner.clone()).await?))",
                "// Line 209:         } else {",
                "// Line 210:             None",
                "// Line 211:         };",
                "// Line 212: ",
                "// Line 213:         let enable_authorization_directives =",
                "// Line 214:             AuthorizationPlugin::enable_directives(&configuration, &schema)?;",
                "// Line 215:         let federation_instrument = federation_version_instrument(schema.federation_version());",
                "// Line 216:         Ok(Self {",
                "// Line 217:             planner,",
                "// vulnerable line: 218: schema,",
                "// Line 219:             subgraph_schemas,",
                "// Line 220:             introspection,",
                "// Line 221:             enable_authorization_directives,",
                "// Line 222:             configuration,",
                "// Line 223:             _federation_instrument: federation_instrument,",
                "// Line 224:         })",
                "// Line 225:     }",
                "// Line 226: ",
                "// Line 227:     pub(crate) async fn new_from_planner(",
                "// Line 228:         old_planner: Arc<Planner<QueryPlanResult>>,",
                "// Line 276:             Some(Arc::new(Introspection::new(planner.clone()).await?))",
                "// Line 277:         } else {",
                "// Line 278:             None",
                "// Line 279:         };",
                "// Line 280: ",
                "// Line 281:         let enable_authorization_directives =",
                "// Line 282:             AuthorizationPlugin::enable_directives(&configuration, &schema)?;",
                "// Line 283:         let federation_instrument = federation_version_instrument(schema.federation_version());",
                "// Line 284:         Ok(Self {",
                "// Line 285:             planner,",
                "// vulnerable line: 286: schema,",
                "// Line 287:             subgraph_schemas,",
                "// Line 288:             introspection,",
                "// Line 289:             enable_authorization_directives,",
                "// Line 290:             configuration,",
                "// Line 291:             _federation_instrument: federation_instrument,",
                "// Line 292:         })",
                "// Line 293:     }",
                "// Line 294: ",
                "// Line 295:     pub(crate) fn planner(&self) -> Arc<Planner<QueryPlanResult>> {",
                "// Line 296:         self.planner.clone()",
                "// Line 373:         doc: &ParsedDocument,",
                "// Line 374:     ) -> Result<QueryPlannerContent, QueryPlannerError> {",
                "// Line 375:         let planner_result = match self",
                "// Line 376:             .planner",
                "// Line 377:             .plan(filtered_query.clone(), operation.clone(), plan_options)",
                "// Line 378:             .await",
                "// Line 379:             .map_err(QueryPlannerError::RouterBridgeError)?",
                "// Line 380:             .into_result()",
                "// Line 381:         {",
                "// Line 382:             Ok(mut plan) => {",
                "// vulnerable line: 383: plan.data.query_plan.hash_subqueries(&self.subgraph_schemas);",
                "// Line 384:                 plan.data",
                "// Line 385:                     .query_plan",
                "// Line 386:                     .extract_authorization_metadata(&self.schema.definitions, &key);",
                "// Line 387:                 plan",
                "// Line 388:             }",
                "// Line 389:             Err(err) => {",
                "// Line 390:                 let plan_errors: PlanErrors = err.into();",
                "// Line 391:                 return Err(QueryPlannerError::from(plan_errors));",
                "// Line 392:             }",
                "// Line 393:         };",
                "// Line 581:             .get::<CacheKeyMetadata>()",
                "// Line 582:             .cloned()",
                "// Line 583:             .unwrap_or_default();",
                "// Line 584:         let this = self.clone();",
                "// Line 585:         let fut = async move {",
                "// Line 586:             let mut doc = match context.extensions().lock().get::<ParsedDocument>().cloned() {",
                "// Line 587:                 None => return Err(QueryPlannerError::SpecError(SpecError::UnknownFileId)),",
                "// Line 588:                 Some(d) => d,",
                "// Line 589:             };",
                "// Line 590: ",
                "// vulnerable line: 591: let schema = &this.schema.api_schema().definitions;",
                "// vulnerable line: 592: match add_defer_labels(schema, &doc.ast) {",
                "// Line 593:                 Err(e) => {",
                "// Line 594:                     return Err(QueryPlannerError::SpecError(SpecError::TransformError(",
                "// Line 595:                         e.to_string(),",
                "// Line 596:                     )))",
                "// Line 597:                 }",
                "// Line 598:                 Ok(modified_query) => {",
                "// Line 599:                     let executable_document = modified_query",
                "// vulnerable line: 600: .to_executable_validate(schema)",
                "// Line 601:                         .map_err(|e| SpecError::ValidationError(e.into()))?;",
                "// Line 602:                     let hash = QueryHashVisitor::hash_query(",
                "// vulnerable line: 603: schema,",
                "// Line 604:                         &executable_document,",
                "// Line 605:                         operation_name.as_deref(),",
                "// Line 606:                     )",
                "// Line 607:                     .map_err(|e| SpecError::QueryHashing(e.to_string()))?;",
                "// Line 608:                     doc = Arc::new(ParsedDocumentInner {",
                "// Line 609:                         executable: Arc::new(executable_document),",
                "// Line 610:                         ast: modified_query,",
                "// Line 611:                         hash: Arc::new(QueryHash(hash)),",
                "// Line 612:                     });",
                "// Line 613:                     context",
                "// Line 805: ",
                "// Line 806: #[derive(Debug, PartialEq, Deserialize)]",
                "// Line 807: #[serde(rename_all = \"camelCase\")]",
                "// Line 808: /// The root query plan container.",
                "// Line 809: struct QueryPlan {",
                "// Line 810:     /// The hierarchical nodes that make up the query plan",
                "// Line 811:     node: Option<PlanNode>,",
                "// Line 812: }",
                "// Line 813: ",
                "// Line 814: impl QueryPlan {",
                "// vulnerable line: 815: fn hash_subqueries(&mut self, schemas: &HashMap<String, Arc<Valid<apollo_compiler::Schema>>>) {",
                "// Line 816:         if let Some(node) = self.node.as_mut() {",
                "// vulnerable line: 817: node.hash_subqueries(schemas);",
                "// Line 818:         }",
                "// Line 819:     }",
                "// Line 820: ",
                "// Line 821:     fn extract_authorization_metadata(",
                "// Line 822:         &mut self,",
                "// Line 823:         schema: &apollo_compiler::Schema,",
                "// Line 824:         key: &CacheKeyMetadata,",
                "// Line 825:     ) {",
                "// Line 826:         if let Some(node) = self.node.as_mut() {",
                "// Line 827:             node.extract_authorization_metadata(schema, key);"
            ]
        },
        {
            "filename_of_changes": "caching_query_planner.rs",
            "code_language": "Rust",
            "number_of_lines_added_for_mitigation": "5",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "datadog.rs",
            "code_language": "Rust",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 22: use crate::plugins::telemetry::tracing::BatchProcessorConfig;",
                "// Line 23: use crate::plugins::telemetry::tracing::SpanProcessorExt;",
                "// Line 24: use crate::plugins::telemetry::tracing::TracingConfigurator;",
                "// Line 25: ",
                "// Line 26: lazy_static! {",
                "// Line 27:     static ref SPAN_RESOURCE_NAME_ATTRIBUTE_MAPPING: HashMap<&'static str, &'static str> = {",
                "// Line 28:         let mut map = HashMap::new();",
                "// Line 29:         map.insert(\"request\", \"http.route\");",
                "// Line 30:         map.insert(\"supergraph\", \"graphql.operation.name\");",
                "// Line 31:         map.insert(\"query_planning\", \"graphql.operation.name\");",
                "// vulnerable line: 32: map.insert(\"subgraph\", \"apollo.subgraph.name\");",
                "// Line 33:         map.insert(\"subgraph_request\", \"graphql.operation.name\");",
                "// Line 34:         map",
                "// Line 35:     };",
                "// Line 36:     static ref DEFAULT_ENDPOINT: Uri = Uri::from_static(\"http://127.0.0.1:8126\");",
                "// Line 37: }",
                "// Line 38: ",
                "// Line 39: #[derive(Debug, Clone, Deserialize, JsonSchema, Default)]",
                "// Line 40: #[serde(deny_unknown_fields)]",
                "// Line 41: pub(crate) struct Config {",
                "// Line 42:     /// Enable datadog"
            ]
        },
        {
            "filename_of_changes": "fetch.rs",
            "code_language": "Rust",
            "number_of_lines_added_for_mitigation": "11",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 209:             // with nested operations (Query or Mutation has an operation returning a Query or Mutation),",
                "// Line 210:             // when the first fetch fails, the query plan will still execute up until the second fetch,",
                "// Line 211:             // where `requires` is empty (not a federated fetch), the current dir is not emmpty (child of",
                "// Line 212:             // the previous operation field) and the data is null. In that case, we recognize that we",
                "// Line 213:             // should not perform the next fetch",
                "// Line 214:             if !current_dir.is_empty()",
                "// Line 215:                 && data",
                "// Line 216:                     .get_path(schema, current_dir)",
                "// Line 217:                     .map(|value| value.is_null())",
                "// Line 218:                     .unwrap_or(true)",
                "// vulnerable line: 219: {",
                "// Line 220:                 return None;",
                "// Line 221:             }",
                "// Line 222: ",
                "// Line 223:             Some(Variables {",
                "// Line 224:                 variables: variable_usages",
                "// Line 225:                     .iter()",
                "// Line 226:                     .filter_map(|key| {",
                "// Line 227:                         body.variables",
                "// Line 228:                             .get_key_value(key.as_str())",
                "// Line 229:                             .map(|(variable_key, value)| (variable_key.clone(), value.clone()))",
                "// Line 384: ",
                "// Line 385:                 // errors with path should be updated to the path of the entity they target",
                "// Line 386:                 if let Some(ref path) = error.path {",
                "// Line 387:                     if path.starts_with(&entities_path) {",
                "// Line 388:                         // the error's path has the format '/_entities/1/other' so we ignore the",
                "// Line 389:                         // first element and then get the index",
                "// Line 390:                         match path.0.get(1) {",
                "// Line 391:                             Some(json_ext::PathElement::Index(i)) => {",
                "// Line 392:                                 for values_path in",
                "// Line 393:                                     inverted_paths.get(*i).iter().flat_map(|v| v.iter())",
                "// vulnerable line: 394: {",
                "// Line 395:                                     errors.push(Error {",
                "// Line 396:                                         locations: error.locations.clone(),",
                "// Line 397:                                         // append to the entitiy's path the error's path without",
                "// Line 398:                                         //`_entities` and the index",
                "// Line 399:                                         path: Some(Path::from_iter(",
                "// Line 400:                                             values_path.0.iter().chain(&path.0[2..]).cloned(),",
                "// Line 401:                                         )),",
                "// Line 402:                                         message: error.message.clone(),",
                "// Line 403:                                         extensions: error.extensions.clone(),",
                "// Line 404:                                     })",
                "// Line 490: ",
                "// Line 491:     #[cfg(test)]",
                "// Line 492:     pub(crate) fn service_name(&self) -> &str {",
                "// Line 493:         &self.service_name",
                "// Line 494:     }",
                "// Line 495: ",
                "// Line 496:     pub(crate) fn operation_kind(&self) -> &OperationKind {",
                "// Line 497:         &self.operation_kind",
                "// Line 498:     }",
                "// Line 499: ",
                "// vulnerable line: 500: pub(crate) fn hash_subquery(&mut self, schema: &Valid<apollo_compiler::Schema>) {",
                "// Line 501:         let doc = ExecutableDocument::parse(schema, &self.operation, \"query.graphql\")",
                "// Line 502:             .expect(\"subgraph queries should be valid\");",
                "// Line 503: ",
                "// vulnerable line: 504: if let Ok(hash) = QueryHashVisitor::hash_query(schema, &doc, self.operation_name.as_deref())",
                "// vulnerable line: 505: {",
                "// Line 506:             self.schema_aware_hash = Arc::new(QueryHash(hash));",
                "// Line 507:         }",
                "// Line 508:     }",
                "// Line 509: ",
                "// Line 510:     pub(crate) fn extract_authorization_metadata(",
                "// Line 511:         &mut self,",
                "// Line 512:         schema: &apollo_compiler::Schema,",
                "// Line 513:         global_authorisation_cache_key: &CacheKeyMetadata,",
                "// Line 514:     ) {",
                "// Line 515:         let doc = ExecutableDocument::parse("
            ]
        },
        {
            "filename_of_changes": "plan.rs",
            "code_language": "Rust",
            "number_of_lines_added_for_mitigation": "12",
            "number_of_lines_deleted_vulnerable_to_cve": "9",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 312:         }",
                "// Line 313:     }",
                "// Line 314: ",
                "// Line 315:     pub(crate) fn hash_subqueries(",
                "// Line 316:         &mut self,",
                "// Line 317:         schemas: &HashMap<String, Arc<Valid<apollo_compiler::Schema>>>,",
                "// Line 318:     ) {",
                "// Line 319:         match self {",
                "// Line 320:             PlanNode::Fetch(fetch_node) => {",
                "// Line 321:                 if let Some(schema) = schemas.get(&fetch_node.service_name) {",
                "// vulnerable line: 322: fetch_node.hash_subquery(schema);",
                "// Line 323:                 }",
                "// Line 324:             }",
                "// Line 325: ",
                "// Line 326:             PlanNode::Sequence { nodes } => {",
                "// Line 327:                 for node in nodes {",
                "// vulnerable line: 328: node.hash_subqueries(schemas);",
                "// Line 329:                 }",
                "// Line 330:             }",
                "// Line 331:             PlanNode::Parallel { nodes } => {",
                "// Line 332:                 for node in nodes {",
                "// vulnerable line: 333: node.hash_subqueries(schemas);",
                "// Line 334:                 }",
                "// Line 335:             }",
                "// vulnerable line: 336: PlanNode::Flatten(flatten) => flatten.node.hash_subqueries(schemas),",
                "// Line 337:             PlanNode::Defer { primary, deferred } => {",
                "// Line 338:                 if let Some(node) = primary.node.as_mut() {",
                "// vulnerable line: 339: node.hash_subqueries(schemas);",
                "// Line 340:                 }",
                "// Line 341:                 for deferred_node in deferred {",
                "// Line 342:                     if let Some(node) = deferred_node.node.take() {",
                "// Line 343:                         let mut new_node = (*node).clone();",
                "// vulnerable line: 344: new_node.hash_subqueries(schemas);",
                "// Line 345:                         deferred_node.node = Some(Arc::new(new_node));",
                "// Line 346:                     }",
                "// Line 347:                 }",
                "// Line 348:             }",
                "// Line 349:             PlanNode::Subscription { primary: _, rest } => {",
                "// Line 350:                 if let Some(node) = rest.as_mut() {",
                "// vulnerable line: 351: node.hash_subqueries(schemas);",
                "// Line 352:                 }",
                "// Line 353:             }",
                "// Line 354:             PlanNode::Condition {",
                "// Line 355:                 condition: _,",
                "// Line 356:                 if_clause,",
                "// Line 357:                 else_clause,",
                "// Line 358:             } => {",
                "// Line 359:                 if let Some(node) = if_clause.as_mut() {",
                "// vulnerable line: 360: node.hash_subqueries(schemas);",
                "// Line 361:                 }",
                "// Line 362:                 if let Some(node) = else_clause.as_mut() {",
                "// vulnerable line: 363: node.hash_subqueries(schemas);",
                "// Line 364:                 }",
                "// Line 365:             }",
                "// Line 366:         }",
                "// Line 367:     }",
                "// Line 368: ",
                "// Line 369:     #[cfg(test)]",
                "// Line 370:     /// Retrieves all the services used across all plan nodes.",
                "// Line 371:     ///",
                "// Line 372:     /// Note that duplicates are not filtered.",
                "// Line 373:     pub(crate) fn service_usage<'a>(&'a self) -> Box<dyn Iterator<Item = &'a str> + 'a> {"
            ]
        },
        {
            "filename_of_changes": "query.rs",
            "code_language": "Rust",
            "number_of_lines_added_for_mitigation": "12",
            "number_of_lines_deleted_vulnerable_to_cve": "5",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 273:     ) -> Result<ParsedDocument, SpecError> {",
                "// Line 274:         let parser = &mut apollo_compiler::Parser::new()",
                "// Line 275:             .recursion_limit(configuration.limits.parser_max_recursion)",
                "// Line 276:             .token_limit(configuration.limits.parser_max_tokens);",
                "// Line 277:         let ast = match parser.parse_ast(query, \"query.graphql\") {",
                "// Line 278:             Ok(ast) => ast,",
                "// Line 279:             Err(errors) => {",
                "// Line 280:                 return Err(SpecError::ParseError(errors.into()));",
                "// Line 281:             }",
                "// Line 282:         };",
                "// vulnerable line: 283: let schema = &schema.api_schema().definitions;",
                "// vulnerable line: 284: let executable_document = match ast.to_executable_validate(schema) {",
                "// Line 285:             Ok(doc) => doc,",
                "// Line 286:             Err(errors) => {",
                "// Line 287:                 return Err(SpecError::ValidationError(errors.into()));",
                "// Line 288:             }",
                "// Line 289:         };",
                "// Line 290: ",
                "// Line 291:         // Trace log recursion limit data",
                "// Line 292:         let recursion_limit = parser.recursion_reached();",
                "// Line 293:         tracing::trace!(?recursion_limit, \"recursion limit data\");",
                "// Line 294: ",
                "// vulnerable line: 295: let hash = QueryHashVisitor::hash_query(schema, &executable_document, operation_name)",
                "// vulnerable line: 296: .map_err(|e| SpecError::QueryHashing(e.to_string()))?;",
                "// Line 297:         Ok(Arc::new(ParsedDocumentInner {",
                "// Line 298:             ast,",
                "// Line 299:             executable: Arc::new(executable_document),",
                "// Line 300:             hash: Arc::new(QueryHash(hash)),",
                "// Line 301:         }))",
                "// Line 302:     }",
                "// Line 303: ",
                "// Line 304:     pub(crate) fn parse(",
                "// Line 305:         query: impl Into<String>,",
                "// Line 306:         operation_name: Option<&str>,",
                "// Line 336:             has_defer: false,",
                "// Line 337:             has_unconditional_defer: false,",
                "// Line 338:             conditional_defer_variable_names: IndexSet::new(),",
                "// Line 339:         };",
                "// Line 340:         let fragments = Fragments::from_hir(document, schema, &mut defer_stats)?;",
                "// Line 341:         let operations = document",
                "// Line 342:             .all_operations()",
                "// Line 343:             .map(|operation| Operation::from_hir(operation, schema, &mut defer_stats, &fragments))",
                "// Line 344:             .collect::<Result<Vec<_>, SpecError>>()?;",
                "// Line 345: ",
                "// vulnerable line: 346: let mut visitor = QueryHashVisitor::new(&schema.definitions, document);",
                "// Line 347:         traverse::document(&mut visitor, document, operation_name).map_err(|e| {",
                "// Line 348:             SpecError::QueryHashing(format!(\"could not calculate the query hash: {e}\"))",
                "// Line 349:         })?;",
                "// Line 350:         let hash = visitor.finish();",
                "// Line 351: ",
                "// Line 352:         Ok((fragments, operations, defer_stats, hash))",
                "// Line 353:     }",
                "// Line 354: ",
                "// Line 355:     #[allow(clippy::too_many_arguments)]",
                "// Line 356:     fn format_value<'a: 'b, 'b>("
            ]
        }
    ]
}