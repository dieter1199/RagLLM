{
    "cve_id": "CVE-2022-24805",
    "cve_description": "net-snmp provides various tools relating to the Simple Network Management Protocol. Prior to version 5.9.2, a buffer overflow in the handling of the `INDEX` of             `NET-SNMP-VACM-MIB` can cause an out-of-bounds memory access. A user with read-only credentials can exploit the issue. Version 5.9.2 contains a patch. Users should use strong SNMPv3 credentials and avoid sharing the credentials. Those who must use SNMPv1 or SNMPv2c should use a complex community string and enhance the protection by restricting access to a given IP address range.\n",
    "cve_publish_date": "2024-04-16T20:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "CHANGES: snmpd: fix bounds checking in NET-SNMP-AGENT-MIB, NET-SNMP-VACM-MIB, SNMP-VIEW-BASED-ACM-MIB, SNMP-USER-BASED-SM-MIB\n\nReported by: Yu Zhang of VARAS@IIE, Nanyu Zhong of VARAS@IIE\nFixes by: Arista Networks",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "nsLogging.c",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "6",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "nsVacmAccessTable.c",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "14",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 289:             case COLUMN_NSVACMACCESSSTATUS:",
                "// Line 290:                 switch (*request->requestvb->val.integer) {",
                "// Line 291:                 case RS_CREATEANDGO:",
                "// Line 292:                 case RS_CREATEANDWAIT:",
                "// Line 293:                     if (!entry) {",
                "// Line 294:                          idx = table_info->indexes; gName = (char*)idx->val.string;",
                "// Line 295:                          idx = idx->next_variable;  cPrefix = (char*)idx->val.string;",
                "// Line 296:                          idx = idx->next_variable;  model = *idx->val.integer;",
                "// Line 297:                          idx = idx->next_variable;  level = *idx->val.integer;",
                "// Line 298:                          entry = vacm_createAccessEntry( gName, cPrefix, model, level );",
                "// vulnerable line: 299: entry->storageType = ST_NONVOLATILE;",
                "// vulnerable line: 300: netsnmp_insert_iterator_context(request, (void*)entry);",
                "// Line 301:                     }",
                "// Line 302:                 }",
                "// Line 303:             }",
                "// Line 304:         }",
                "// Line 305:         break;",
                "// Line 306: ",
                "// Line 307:     case MODE_SET_FREE:",
                "// Line 308:     case MODE_SET_UNDO:",
                "// Line 309:         /* XXX - TODO */",
                "// Line 310:         break;"
            ]
        },
        {
            "filename_of_changes": "usmUser.c",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "0",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1479:                           &engineID, &engineIDLen, (u_char **) & newName,",
                "// Line 1480:                           &nameLen)) {",
                "// Line 1481:             DEBUGMSGTL((\"usmUser\",",
                "// Line 1482:                         \"can't parse the OID for engineID or name",
                "// Line 1483: \"));",
                "// Line 1484:             return SNMP_ERR_INCONSISTENTNAME;",
                "// Line 1485:         }",
                "// Line 1486: ",
                "// Line 1487:         if (engineIDLen < 5 || engineIDLen > 32 || nameLen < 1",
                "// Line 1488:             || nameLen > 32) {",
                "// vulnerable line: 1489: SNMP_FREE(engineID);",
                "// vulnerable line: 1490: SNMP_FREE(newName);",
                "// Line 1491:             return SNMP_ERR_NOCREATION;",
                "// Line 1492:         }",
                "// Line 1493: ",
                "// Line 1494:         /*",
                "// Line 1495:          * Now see if a user already exists with these index values. ",
                "// Line 1496:          */",
                "// Line 1497:         uptr = usm_get_user(engineID, engineIDLen, newName);",
                "// Line 1498: ",
                "// Line 1499:         if (uptr != NULL) {",
                "// Line 1500:             if (long_ret == RS_CREATEANDGO || long_ret == RS_CREATEANDWAIT) {",
                "// vulnerable line: 1501: SNMP_FREE(engineID);",
                "// vulnerable line: 1502: SNMP_FREE(newName);",
                "// Line 1503:                 long_ret = RS_NOTREADY;",
                "// Line 1504:                 return SNMP_ERR_INCONSISTENTVALUE;",
                "// Line 1505:             }",
                "// vulnerable line: 1506: SNMP_FREE(engineID);",
                "// vulnerable line: 1507: SNMP_FREE(newName);",
                "// Line 1508:         } else {",
                "// Line 1509:             if (long_ret == RS_ACTIVE || long_ret == RS_NOTINSERVICE) {",
                "// vulnerable line: 1510: SNMP_FREE(engineID);",
                "// vulnerable line: 1511: SNMP_FREE(newName);",
                "// Line 1512:                 return SNMP_ERR_INCONSISTENTVALUE;",
                "// Line 1513:             }",
                "// Line 1514:             if (long_ret == RS_CREATEANDGO || long_ret == RS_CREATEANDWAIT) {",
                "// Line 1515:                 if ((uptr = usm_create_user()) == NULL) {",
                "// vulnerable line: 1516: SNMP_FREE(engineID);",
                "// vulnerable line: 1517: SNMP_FREE(newName);",
                "// Line 1518:                     return SNMP_ERR_RESOURCEUNAVAILABLE;",
                "// Line 1519:                 }",
                "// Line 1520:                 uptr->engineID = engineID;",
                "// Line 1521:                 uptr->name = newName;",
                "// Line 1522:                 uptr->secName = strdup(uptr->name);",
                "// Line 1523:                 if (uptr->secName == NULL) {",
                "// Line 1524:                     usm_free_user(uptr);",
                "// Line 1525:                     return SNMP_ERR_RESOURCEUNAVAILABLE;",
                "// Line 1526:                 }",
                "// Line 1527:                 uptr->engineIDLen = engineIDLen;",
                "// Line 1533: ",
                "// Line 1534:                 uptr->userStatus = long_ret;",
                "// Line 1535: ",
                "// Line 1536:                 /*",
                "// Line 1537:                  * Add to the list of users (we will take it off again",
                "// Line 1538:                  * later if something goes wrong).  ",
                "// Line 1539:                  */",
                "// Line 1540: ",
                "// Line 1541:                 usm_add_user(uptr);",
                "// Line 1542:             } else {",
                "// vulnerable line: 1543: SNMP_FREE(engineID);",
                "// vulnerable line: 1544: SNMP_FREE(newName);",
                "// Line 1545:             }",
                "// Line 1546:         }",
                "// Line 1547:     } else if (action == ACTION) {",
                "// Line 1548:         usm_parse_oid(&name[USM_MIB_LENGTH], name_len - USM_MIB_LENGTH,",
                "// Line 1549:                       &engineID, &engineIDLen, (u_char **) & newName,",
                "// Line 1550:                       &nameLen);",
                "// Line 1551:         uptr = usm_get_user(engineID, engineIDLen, newName);",
                "// vulnerable line: 1552: SNMP_FREE(engineID);",
                "// vulnerable line: 1553: SNMP_FREE(newName);",
                "// Line 1554: ",
                "// Line 1555:         if (uptr != NULL) {",
                "// Line 1556:             if (long_ret == RS_CREATEANDGO || long_ret == RS_ACTIVE) {",
                "// Line 1557:                 if (usmStatusCheck(uptr)) {",
                "// Line 1558:                     uptr->userStatus = RS_ACTIVE;",
                "// Line 1559:                 } else {",
                "// vulnerable line: 1560: SNMP_FREE(engineID);",
                "// vulnerable line: 1561: SNMP_FREE(newName);",
                "// Line 1562:                     return SNMP_ERR_INCONSISTENTVALUE;",
                "// Line 1563:                 }",
                "// Line 1564:             } else if (long_ret == RS_CREATEANDWAIT) {",
                "// Line 1565:                 if (usmStatusCheck(uptr)) {",
                "// Line 1566:                     uptr->userStatus = RS_NOTINSERVICE;",
                "// Line 1567:                 } else {",
                "// Line 1568:                     uptr->userStatus = RS_NOTREADY;",
                "// Line 1569:                 }",
                "// Line 1570:             } else if (long_ret == RS_NOTINSERVICE) {",
                "// Line 1571:                 if (uptr->userStatus == RS_ACTIVE ||",
                "// Line 1574:                 } else {",
                "// Line 1575:                     return SNMP_ERR_INCONSISTENTVALUE;",
                "// Line 1576:                 }",
                "// Line 1577:             }",
                "// Line 1578:         }",
                "// Line 1579:     } else if (action == COMMIT) {",
                "// Line 1580:         usm_parse_oid(&name[USM_MIB_LENGTH], name_len - USM_MIB_LENGTH,",
                "// Line 1581:                       &engineID, &engineIDLen, (u_char **) & newName,",
                "// Line 1582:                       &nameLen);",
                "// Line 1583:         uptr = usm_get_user(engineID, engineIDLen, newName);",
                "// vulnerable line: 1584: SNMP_FREE(engineID);",
                "// vulnerable line: 1585: SNMP_FREE(newName);",
                "// Line 1586: ",
                "// Line 1587:         if (uptr != NULL) {",
                "// Line 1588:             if (long_ret == RS_DESTROY) {",
                "// Line 1589:                 usm_remove_user(uptr);",
                "// Line 1590:                 usm_free_user(uptr);",
                "// Line 1591:             }",
                "// Line 1592:         }",
                "// Line 1593:     } else if (action == UNDO || action == FREE) {",
                "// Line 1594:         if (usm_parse_oid(&name[USM_MIB_LENGTH], name_len - USM_MIB_LENGTH,",
                "// Line 1595:                       &engineID, &engineIDLen, (u_char **) & newName,",
                "// Line 1596:                       &nameLen)) {",
                "// Line 1597:             /* Can't extract engine info from the OID - nothing to undo */",
                "// Line 1598:             return SNMP_ERR_NOERROR;",
                "// Line 1599:         }",
                "// Line 1600:         uptr = usm_get_user(engineID, engineIDLen, newName);",
                "// vulnerable line: 1601: SNMP_FREE(engineID);",
                "// vulnerable line: 1602: SNMP_FREE(newName);",
                "// Line 1603: ",
                "// Line 1604:         if (long_ret == RS_CREATEANDGO || long_ret == RS_CREATEANDWAIT) {",
                "// Line 1605:             usm_remove_user(uptr);",
                "// Line 1606:             usm_free_user(uptr);",
                "// Line 1607:         }",
                "// Line 1608:     }",
                "// Line 1609: ",
                "// Line 1610:     return SNMP_ERR_NOERROR;",
                "// Line 1611: }  /* write_usmUserStatus */",
                "// Line 1612: "
            ]
        },
        {
            "filename_of_changes": "vacm_vars.c",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        }
    ]
}