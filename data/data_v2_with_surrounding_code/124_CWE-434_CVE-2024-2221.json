{
    "cve_id": "CVE-2024-2221",
    "cve_description": "qdrant/qdrant is vulnerable to a path traversal and arbitrary file upload vulnerability via the `/collections/{COLLECTION}/snapshots/upload` endpoint, specifically through the `snapshot` parameter. This vulnerability allows attackers to upload and overwrite any file on the filesystem, leading to potential remote code execution. This issue affects the integrity and availability of the system, enabling unauthorized access and potentially causing the server to malfunction.",
    "cve_publish_date": "2024-04-10T17:15Z",
    "cwe_id": "CWE-434",
    "cwe_name": "Unrestricted Upload of File with Dangerous Type",
    "cwe_description": "The product allows the upload or transfer of dangerous file types that are automatically processed within its environment.",
    "commit_message": "Bump version to 1.8.0 (#3779)",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "defaults.rs",
            "code_language": "Rust",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: use std::time::Duration;",
                "// Line 2: ",
                "// Line 3: use lazy_static::lazy_static;",
                "// Line 4: use semver::Version;",
                "// Line 5: ",
                "// Line 6: use crate::cpu;",
                "// Line 7: ",
                "// Line 8: /// Current Qdrant version",
                "// vulnerable line: 9: pub const QDRANT_VERSION: Version = Version::new(1, 7, 4);",
                "// Line 10: ",
                "// Line 11: /// Default timeout for consensus meta operations.",
                "// Line 12: pub const CONSENSUS_META_OP_WAIT: Duration = Duration::from_secs(10);",
                "// Line 13: ",
                "// Line 14: lazy_static! {",
                "// Line 15:     /// Max number of pooled elements to preserve in memory.",
                "// Line 16:     /// Scaled according to the number of logical CPU cores to account for concurrent operations.",
                "// Line 17:     pub static ref POOL_KEEP_LIMIT: usize = cpu::get_num_cpus().clamp(16, 128);",
                "// Line 18: }",
                "// Line 19: "
            ]
        }
    ]
}