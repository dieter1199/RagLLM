{
    "cve_id": "CVE-2024-21508",
    "cve_description": "Versions of the package mysql2 before 3.9.4 are vulnerable to Remote Code Execution (RCE) via the readCodeFor function due to improper validation of the supportBigNumbers and bigNumberStrings values.",
    "cve_publish_date": "2024-04-11T05:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fix(security): improve supportBigNumbers and bigNumberStrings sanitization (#2572)\n\nFixes a potential RCE attack vulnerability reported by Vsevolod Kokorin (Slonser) of Solidlab",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "binary_parser.js",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "6",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 5: const Types = require('../constants/types.js');",
                "// Line 6: const helpers = require('../helpers');",
                "// Line 7: const genFunc = require('generate-function');",
                "// Line 8: const parserCache = require('./parser_cache.js');",
                "// Line 9: const typeNames = [];",
                "// Line 10: for (const t in Types) {",
                "// Line 11:   typeNames[Types[t]] = t;",
                "// Line 12: }",
                "// Line 13: ",
                "// Line 14: function readCodeFor(field, config, options, fieldNum) {",
                "// vulnerable line: 15: const supportBigNumbers =",
                "// vulnerable line: 16: options.supportBigNumbers || config.supportBigNumbers;",
                "// vulnerable line: 17: const bigNumberStrings = options.bigNumberStrings || config.bigNumberStrings;",
                "// Line 18:   const timezone = options.timezone || config.timezone;",
                "// Line 19:   const dateStrings = options.dateStrings || config.dateStrings;",
                "// Line 20:   const unsigned = field.flags & FieldFlags.UNSIGNED;",
                "// Line 21:   switch (field.columnType) {",
                "// Line 22:     case Types.TINY:",
                "// Line 23:       return unsigned ? 'packet.readInt8();' : 'packet.readSInt8();';",
                "// Line 24:     case Types.SHORT:",
                "// Line 25:       return unsigned ? 'packet.readInt16();' : 'packet.readSInt16();';",
                "// Line 26:     case Types.LONG:",
                "// Line 27:     case Types.INT24: // in binary protocol int24 is encoded in 4 bytes int32"
            ]
        },
        {
            "filename_of_changes": "text_parser.js",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "26",
            "number_of_lines_deleted_vulnerable_to_cve": "21",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 2: ",
                "// Line 3: const Types = require('../constants/types.js');",
                "// Line 4: const Charsets = require('../constants/charsets.js');",
                "// Line 5: const helpers = require('../helpers');",
                "// Line 6: const genFunc = require('generate-function');",
                "// Line 7: const parserCache = require('./parser_cache.js');",
                "// Line 8: ",
                "// Line 9: const typeNames = [];",
                "// Line 10: for (const t in Types) {",
                "// Line 11:   typeNames[Types[t]] = t;",
                "// vulnerable line: 12: }",
                "// Line 13: ",
                "// Line 14: function readCodeFor(type, charset, encodingExpr, config, options) {",
                "// vulnerable line: 15: const supportBigNumbers =",
                "// vulnerable line: 16: options.supportBigNumbers || config.supportBigNumbers;",
                "// vulnerable line: 17: const bigNumberStrings = options.bigNumberStrings || config.bigNumberStrings;",
                "// Line 18:   const timezone = options.timezone || config.timezone;",
                "// Line 19:   const dateStrings = options.dateStrings || config.dateStrings;",
                "// Line 20: ",
                "// Line 21:   switch (type) {",
                "// Line 22:     case Types.TINY:",
                "// Line 23:     case Types.SHORT:",
                "// Line 24:     case Types.LONG:",
                "// Line 25:     case Types.INT24:",
                "// Line 26:     case Types.YEAR:",
                "// Line 27:       return 'packet.parseLengthCodedIntNoBigCheck()';",
                "// Line 28:     case Types.LONGLONG:",
                "// Line 29:       if (supportBigNumbers && bigNumberStrings) {",
                "// Line 30:         return 'packet.parseLengthCodedIntString()';",
                "// vulnerable line: 31: }",
                "// Line 32:       return `packet.parseLengthCodedInt(${supportBigNumbers})`;",
                "// Line 33:     case Types.FLOAT:",
                "// Line 34:     case Types.DOUBLE:",
                "// Line 35:       return 'packet.parseLengthCodedFloat()';",
                "// Line 36:     case Types.NULL:",
                "// Line 37:       return 'packet.readLengthCodedNumber()';",
                "// Line 38:     case Types.DECIMAL:",
                "// Line 39:     case Types.NEWDECIMAL:",
                "// Line 40:       if (config.decimalNumbers) {",
                "// Line 41:         return 'packet.parseLengthCodedFloat()';",
                "// vulnerable line: 42: }",
                "// Line 43:       return 'packet.readLengthCodedString(\"ascii\")';",
                "// Line 44:     case Types.DATE:",
                "// Line 45:       if (helpers.typeMatch(type, dateStrings, Types)) {",
                "// Line 46:         return 'packet.readLengthCodedString(\"ascii\")';",
                "// vulnerable line: 47: }",
                "// Line 48:       return `packet.parseDate('${timezone}')`;",
                "// Line 49:     case Types.DATETIME:",
                "// Line 50:     case Types.TIMESTAMP:",
                "// Line 51:       if (helpers.typeMatch(type, dateStrings, Types)) {",
                "// Line 52:         return 'packet.readLengthCodedString(\"ascii\")';",
                "// vulnerable line: 53: }",
                "// Line 54:       return `packet.parseDateTime('${timezone}')`;",
                "// Line 55:     case Types.TIME:",
                "// Line 56:       return 'packet.readLengthCodedString(\"ascii\")';",
                "// Line 57:     case Types.GEOMETRY:",
                "// Line 58:       return 'packet.parseGeometryValue()';",
                "// Line 59:     case Types.JSON:",
                "// Line 60:       // Since for JSON columns mysql always returns charset 63 (BINARY),",
                "// Line 61:       // we have to handle it according to JSON specs and use \"utf8\",",
                "// Line 62:       // see https://github.com/sidorares/node-mysql2/issues/409",
                "// Line 63:       return 'JSON.parse(packet.readLengthCodedString(\"utf8\"))';",
                "// Line 64:     default:",
                "// Line 65:       if (charset === Charsets.BINARY) {",
                "// Line 66:         return 'packet.readLengthCodedBuffer()';",
                "// vulnerable line: 67: }",
                "// Line 68:       return `packet.readLengthCodedString(${encodingExpr})`;",
                "// vulnerable line: 69: }",
                "// vulnerable line: 70: }",
                "// Line 71: ",
                "// Line 72: function compile(fields, options, config) {",
                "// Line 73:   // use global typeCast if current query doesn't specify one",
                "// Line 74:   if (",
                "// Line 75:     typeof config.typeCast === 'function' &&",
                "// Line 76:     typeof options.typeCast !== 'function'",
                "// Line 77:   ) {",
                "// Line 78:     options.typeCast = config.typeCast;",
                "// vulnerable line: 79: }",
                "// Line 80: ",
                "// Line 81:   function wrap(field, _this) {",
                "// Line 82:     return {",
                "// Line 83:       type: typeNames[field.columnType],",
                "// Line 84:       length: field.columnLength,",
                "// Line 85:       db: field.schema,",
                "// Line 86:       table: field.table,",
                "// Line 87:       name: field.name,",
                "// vulnerable line: 88: string: function(encoding = field.encoding) {",
                "// Line 89:         if (field.columnType === Types.JSON && encoding === field.encoding) {",
                "// Line 90:           // Since for JSON columns mysql always returns charset 63 (BINARY),",
                "// Line 91:           // we have to handle it according to JSON specs and use \"utf8\",",
                "// Line 92:           // see https://github.com/sidorares/node-mysql2/issues/1661",
                "// vulnerable line: 93: console.warn(`typeCast: JSON column \"${field.name}\" is interpreted as BINARY by default, recommended to manually set utf8 encoding: \\`field.string(\"utf8\")\\``);",
                "// vulnerable line: 94: }",
                "// Line 95: ",
                "// Line 96:         return _this.packet.readLengthCodedString(encoding);",
                "// Line 97:       },",
                "// vulnerable line: 98: buffer: function() {",
                "// Line 99:         return _this.packet.readLengthCodedBuffer();",
                "// Line 100:       },",
                "// vulnerable line: 101: geometry: function() {",
                "// Line 102:         return _this.packet.parseGeometryValue();",
                "// vulnerable line: 103: }",
                "// Line 104:     };",
                "// vulnerable line: 105: }",
                "// Line 106: ",
                "// Line 107:   const parserFn = genFunc();",
                "// Line 108: ",
                "// Line 109:   /* eslint-disable no-trailing-spaces */",
                "// Line 110:   /* eslint-disable no-spaced-func */",
                "// Line 111:   /* eslint-disable no-unexpected-multiline */",
                "// vulnerable line: 112: parserFn('(function () {')(",
                "// vulnerable line: 113: 'return class TextRow {'",
                "// vulnerable line: 114: );",
                "// Line 115: ",
                "// Line 116:   // constructor method",
                "// Line 117:   parserFn('constructor(fields) {');",
                "// Line 118:   // node-mysql typeCast compatibility wrapper",
                "// Line 119:   // see https://github.com/mysqljs/mysql/blob/96fdd0566b654436624e2375c7b6604b1f50f825/lib/protocol/packets/Field.js",
                "// Line 120:   if (typeof options.typeCast === 'function') {",
                "// Line 121:     parserFn('const _this = this;');",
                "// Line 122:     parserFn('for(let i=0; i<fields.length; ++i) {');",
                "// Line 123:     parserFn('this[`wrap${i}`] = wrap(fields[i], _this);');",
                "// Line 124:     parserFn('}');",
                "// vulnerable line: 125: }",
                "// Line 126:   parserFn('}');",
                "// Line 127: ",
                "// Line 128:   // next method",
                "// Line 129:   parserFn('next(packet, fields, options) {');",
                "// vulnerable line: 130: parserFn(\"this.packet = packet;\");",
                "// Line 131:   if (options.rowsAsArray) {",
                "// Line 132:     parserFn(`const result = new Array(${fields.length});`);",
                "// Line 133:   } else {",
                "// vulnerable line: 134: parserFn(\"const result = {};\");",
                "// vulnerable line: 135: }",
                "// Line 136: ",
                "// Line 137:   const resultTables = {};",
                "// Line 138:   let resultTablesArray = [];",
                "// Line 139: ",
                "// Line 140:   if (options.nestTables === true) {",
                "// vulnerable line: 141: for (let i=0; i < fields.length; i++) {",
                "// Line 142:       resultTables[fields[i].table] = 1;",
                "// vulnerable line: 143: }",
                "// Line 144:     resultTablesArray = Object.keys(resultTables);",
                "// vulnerable line: 145: for (let i=0; i < resultTablesArray.length; i++) {",
                "// Line 146:       parserFn(`result[${helpers.srcEscape(resultTablesArray[i])}] = {};`);",
                "// vulnerable line: 147: }",
                "// vulnerable line: 148: }",
                "// Line 149: ",
                "// Line 150:   let lvalue = '';",
                "// Line 151:   let fieldName = '';",
                "// Line 152:   for (let i = 0; i < fields.length; i++) {",
                "// Line 153:     fieldName = helpers.srcEscape(fields[i].name);",
                "// Line 154:     parserFn(`// ${fieldName}: ${typeNames[fields[i].columnType]}`);",
                "// Line 155:     if (typeof options.nestTables === 'string') {",
                "// Line 156:       lvalue = `result[${helpers.srcEscape(",
                "// vulnerable line: 157: fields[i].table + options.nestTables + fields[i].name",
                "// Line 158:       )}]`;",
                "// Line 159:     } else if (options.nestTables === true) {",
                "// Line 160:       lvalue = `result[${helpers.srcEscape(fields[i].table)}][${fieldName}]`;",
                "// Line 161:     } else if (options.rowsAsArray) {",
                "// Line 162:       lvalue = `result[${i.toString(10)}]`;",
                "// Line 163:     } else {",
                "// Line 164:       lvalue = `result[${fieldName}]`;",
                "// vulnerable line: 165: }",
                "// Line 166:     if (options.typeCast === false) {",
                "// Line 167:       parserFn(`${lvalue} = packet.readLengthCodedBuffer();`);",
                "// Line 168:     } else {",
                "// Line 169:       const encodingExpr = `fields[${i}].encoding`;",
                "// Line 170:       const readCode = readCodeFor(",
                "// Line 171:         fields[i].columnType,",
                "// Line 172:         fields[i].characterSet,",
                "// Line 173:         encodingExpr,",
                "// Line 174:         config,",
                "// vulnerable line: 175: options",
                "// vulnerable line: 176: );",
                "// Line 177:       if (typeof options.typeCast === 'function') {",
                "// vulnerable line: 178: parserFn(`${lvalue} = options.typeCast(this.wrap${i}, function() { return ${readCode} });`);",
                "// vulnerable line: 179: }  else {",
                "// Line 180:         parserFn(`${lvalue} = ${readCode};`);",
                "// vulnerable line: 181: }",
                "// vulnerable line: 182: }",
                "// vulnerable line: 183: }",
                "// Line 184: ",
                "// Line 185:   parserFn('return result;');",
                "// Line 186:   parserFn('}');",
                "// Line 187:   parserFn('};')('})()');",
                "// Line 188: ",
                "// Line 189:   /* eslint-enable no-trailing-spaces */",
                "// Line 190:   /* eslint-enable no-spaced-func */",
                "// Line 191:   /* eslint-enable no-unexpected-multiline */",
                "// Line 192: ",
                "// Line 193:   if (config.debug) {",
                "// Line 194:     helpers.printDebugWithCode(",
                "// Line 195:       'Compiled text protocol row parser',",
                "// vulnerable line: 196: parserFn.toString()",
                "// vulnerable line: 197: );",
                "// vulnerable line: 198: }",
                "// Line 199:   if (typeof options.typeCast === 'function') {",
                "// vulnerable line: 200: return parserFn.toFunction({wrap});",
                "// vulnerable line: 201: }",
                "// Line 202:   return parserFn.toFunction();",
                "// vulnerable line: 203: }",
                "// Line 204: ",
                "// Line 205: function getTextParser(fields, options, config) {",
                "// Line 206:   return parserCache.getParser('text', fields, options, config, compile);",
                "// vulnerable line: 207: }",
                "// Line 208: ",
                "// Line 209: module.exports = getTextParser;"
            ]
        }
    ]
}