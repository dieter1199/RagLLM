{
    "cve_id": "CVE-2024-29189",
    "cve_description": "PyAnsys Geometry is a Python client library for the Ansys Geometry service and other CAD Ansys products. On file src/ansys/geometry/core/connection/product_instance.py, upon calling this method _start_program directly, users could exploit its usage to perform malicious operations on the current machine where the script is ran. This vulnerability is fixed in 0.3.3 and 0.4.12.",
    "cve_publish_date": "2024-03-26T03:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "feat: accept bandit advisories in-line for subprocess (#1077)\n\nCo-authored-by: pyansys-ci-bot <pyansys.github.bot@ansys.com>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "product_instance.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "8",
            "number_of_lines_deleted_vulnerable_to_cve": "4",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 16: # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
                "// Line 17: # FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
                "// Line 18: # AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
                "// Line 19: # LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
                "// Line 20: # OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE",
                "// Line 21: # SOFTWARE.",
                "// Line 22: \"\"\"Module containing the ``ProductInstance`` class.\"\"\"",
                "// Line 23: import os",
                "// Line 24: import signal",
                "// Line 25: import socket",
                "// vulnerable line: 26: import subprocess",
                "// Line 27: ",
                "// Line 28: from ansys.tools.path import get_available_ansys_installations, get_latest_ansys_installation",
                "// Line 29: from beartype.typing import TYPE_CHECKING, Dict, List",
                "// Line 30: ",
                "// Line 31: from ansys.geometry.core.connection.backend import ApiVersions, BackendType",
                "// Line 32: from ansys.geometry.core.logger import LOG",
                "// Line 33: ",
                "// Line 34: if TYPE_CHECKING:  # pragma: no cover",
                "// Line 35:     from ansys.geometry.core.modeler import Modeler",
                "// Line 36: ",
                "// Line 295:         )",
                "// Line 296:     else:",
                "// Line 297:         raise RuntimeError(",
                "// Line 298:             f\"Cannot connect to backend {backend_type.name} using ``prepare_and_start_backend()``\"",
                "// Line 299:         )",
                "// Line 300: ",
                "// Line 301:     LOG.info(f\"Launching ProductInstance for {backend_type.name}\")",
                "// Line 302:     LOG.debug(f\"Args: {args}\")",
                "// Line 303:     LOG.debug(f\"Environment variables: {env_copy}\")",
                "// Line 304: ",
                "// vulnerable line: 305: instance = ProductInstance(_start_program(args, env_copy).pid)",
                "// Line 306: ",
                "// Line 307:     # Verify that the backend is ready to accept connections",
                "// Line 308:     # before returning the Modeler instance.",
                "// Line 309:     LOG.info(\"Waiting for backend to be ready...\")",
                "// Line 310:     _wait_for_backend(host, port, timeout)",
                "// Line 311: ",
                "// Line 312:     return Modeler(",
                "// Line 313:         host=host, port=port, timeout=timeout, product_instance=instance, backend_type=backend_type",
                "// Line 314:     )",
                "// Line 315: ",
                "// Line 396:     else:",
                "// Line 397:         msg = (",
                "// Line 398:             \"Default manifest file's path does not exist.\"",
                "// Line 399:             \" Please specify a valid manifest.\"",
                "// Line 400:             f\" The ApiServer Add-In seems to be missing in {os.path.dirname(def_manifest_path)}\"",
                "// Line 401:         )",
                "// Line 402:         LOG.error(msg)",
                "// Line 403:         raise RuntimeError(msg)",
                "// Line 404: ",
                "// Line 405: ",
                "// vulnerable line: 406: def _start_program(args: List[str], local_env: Dict[str, str]) -> subprocess.Popen:",
                "// Line 407:     \"\"\"",
                "// Line 408:     Start the program where the path is the first item of the ``args`` array argument.",
                "// Line 409: ",
                "// Line 410:     Parameters",
                "// Line 411:     ----------",
                "// Line 412:     args : List[str]",
                "// Line 413:         List of arguments to be passed to the program. The first list's item shall",
                "// Line 414:         be the program path.",
                "// Line 415:     local_env : Dict[str,str]",
                "// Line 416:         Environment variables to be passed to the program.",
                "// Line 417: ",
                "// Line 418:     Returns",
                "// Line 419:     -------",
                "// Line 420:     subprocess.Popen",
                "// Line 421:         The subprocess object.",
                "// Line 422:     \"\"\"",
                "// vulnerable line: 423: return subprocess.Popen(",
                "// Line 424:         args,",
                "// Line 425:         stdin=subprocess.DEVNULL,",
                "// Line 426:         stdout=subprocess.DEVNULL,",
                "// Line 427:         stderr=subprocess.DEVNULL,",
                "// Line 428:         env=local_env,",
                "// Line 429:     )",
                "// Line 430: ",
                "// Line 431: ",
                "// Line 432: def _check_minimal_versions(latest_installed_version: int) -> None:",
                "// Line 433:     \"\"\""
            ]
        }
    ]
}