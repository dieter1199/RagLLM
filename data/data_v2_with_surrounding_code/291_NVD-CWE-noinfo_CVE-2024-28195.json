{
    "cve_id": "CVE-2024-28195",
    "cve_description": "your_spotify is an open source, self hosted Spotify tracking dashboard. YourSpotify versions < 1.9.0 do not protect the API and login flow against Cross-Site Request Forgery (CSRF). Attackers can use this to execute CSRF attacks on victims, allowing them to retrieve, modify or delete data on the affected YourSpotify instance. Using repeated CSRF attacks, it is also possible to create a new user on the victim instance and promote the new user to instance administrator if a legitimate administrator visits a website prepared by an attacker. Note: Real-world exploitability of this vulnerability depends on the browser version and browser settings in use by the victim. This issue has been addressed in version 1.9.0. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "cve_publish_date": "2024-03-13T18:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Merge pull request from GHSA-hfgf-99p3-6fjj\n\n* More secure OAuth, fixed frame ancestors\n\n* Change generateRandomString to return base64-encoded entropy\n\nWhile the old implementation also seems to yield correct results, it is\n(at least in my opinion) not obvious that it is correct and sufficiently\nsecure for the following reasons:\n\n1. It takes the output string length as a parameter instead of the\n   required amount of entropy.\n   For cryptographic applications, it is important to know how much\n   entropy any generated secret contains. Therefore, the input to the\n   function should be the required bytes of entropy instead of the\n   output string length.\n\n2. While it uses a rather simple algorithm to convert the entropy bytes\n   to a string, using a well-known and dead simple encoding such as\n   base64 (or hexadecimal, but base64 is more compact) is even easier to\n   verify as \"obviously correct\". In this case URL-safe base64 is chosen\n   because the values are also used in URLs.\n\nAll usages of the function were also changed to accomodate the parameter\nchange to requested bytes of entropy. For all of them 32 bytes (256\nbits) of entropy were chosen, which nicely fits the purpose of being\nused for SHA256 and is definitely enough entropy for things like OAuth\n'state'.\n\n* Apply more restrictive CSP and prevent MIME sniffing for backend\n\nAs the backend doesn't show HTML pages to users, a very restrictive CSP\ncan be used. I'm currently not aware of any active issues, but being as\nrestrictive as possible doesn't hurt, which is what default-src 'none'\ndoes.\n\nAlso, set \"X-Content-Type-Options: nosniff\" to prevent MIME sniffing in\nbrowsers, which can also be an issue in certain circumstances.\n\n* Implement a basic Content-Security-Policy in the client\n\nThis commit implements a basic CSP in the client by setting it as a\n<meta> tag in index.html. Normally it would be preferred to set the CSP\nin a HTTP header, but the react dev server does not seem to support\nthat. However, it is very important to have the CSP active during\ndevelopment to catch errors caused by a restrictive CSP before deploying\nto production.\n\nNote that a header-based CSP is still required to set\n\"frame-ancestors 'none'\" to prevent clickjacking. It is perfectly fine\nto set the CSP both in the <meta> tag and in the HTTP header, both CSPs\nwill be applied.\n\nThere is still room for improvement in the CSP. With some effort, the\nscript-src could be further restricted using a combination of hashes or\nnonces and 'strict-dynamic' to get rid of 'self'. The connect-src could\nalso be restricted to only the backend origin.\n\nThat being said, this is still a very good starting point and much\nbetter than not having a CSP at all.\n\n* Prevent MIME sniffing for the client in production\n\nPrevent MIME sniffing for the client in production by setting the header\n\"X-Content-Type-Options: nosniff\".\n\n* Use only the origin of CLIENT_ENDPOINT for CORS policy\n\nWhen the full CLIENT_ENDPOINT is used to set the CORS policy, the policy\ndoes not get applied correctly when the client is served under a\nsubdirectory. Always using the origin fixes this.\n\n* removed pkce, connect-src is dynamic\n\n* ensuring API_ENDPOINT ends with a /\n\n* make sure api endpoint ends with a slash, updated CORS notice\n\n* fixed comment on index.html\n\n---------\n\nCo-authored-by: Marius Renner <marius@mariusrenner.de>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "Provider.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "18",
            "number_of_lines_deleted_vulnerable_to_cve": "8",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: /* eslint-disable @typescript-eslint/no-unused-vars */",
                "// Line 2: import Axios from \"axios\";",
                "// Line 3: import { credentials } from \"./credentials\";",
                "// Line 4: ",
                "// Line 5: export class Provider {",
                "// Line 6:   static getRedirect = () => {};",
                "// Line 7: ",
                "// Line 8:   // @ts-ignore",
                "// vulnerable line: 9: static exchangeCode = code => {};",
                "// Line 10: ",
                "// Line 11:   // @ts-ignore",
                "// Line 12:   static refresh = refreshToken => {};",
                "// Line 13: ",
                "// Line 14:   // @ts-ignore",
                "// Line 15:   static getUniqueID = accessToken => {};",
                "// Line 16: ",
                "// Line 17:   // @ts-ignore",
                "// Line 18:   static getHttpClient = accessToken => {};",
                "// Line 19: }",
                "// Line 20: ",
                "// Line 21: export class Spotify extends Provider {",
                "// vulnerable line: 22: static getRedirect = () => {",
                "// Line 23:     const { scopes } = credentials.spotify;",
                "// Line 24:     const { redirectUri } = credentials.spotify;",
                "// Line 25: ",
                "// vulnerable line: 26: return `https://accounts.spotify.com/authorize?response_type=code&client_id=${",
                "// vulnerable line: 27: credentials.spotify.public",
                "// vulnerable line: 28: }${",
                "// vulnerable line: 29: scopes ? `&scope=${encodeURIComponent(scopes)}` : \"\"",
                "// vulnerable line: 30: }&redirect_uri=${encodeURIComponent(redirectUri)}`;",
                "// Line 31:   };",
                "// Line 32: ",
                "// vulnerable line: 33: static exchangeCode = async (code: string) => {",
                "// Line 34:     const { data } = await Axios.post(",
                "// Line 35:       \"https://accounts.spotify.com/api/token\",",
                "// Line 36:       null,",
                "// Line 37:       {",
                "// Line 38:         params: {",
                "// Line 39:           grant_type: \"authorization_code\",",
                "// Line 40:           code,",
                "// Line 41:           redirect_uri: credentials.spotify.redirectUri,",
                "// Line 42:           client_id: credentials.spotify.public,",
                "// Line 43:           client_secret: credentials.spotify.secret,"
            ]
        },
        {
            "filename_of_changes": "app.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "24",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 11: import { router as artistRouter } from \"./routes/artist\";",
                "// Line 12: import { router as albumRouter } from \"./routes/album\";",
                "// Line 13: import { router as importRouter } from \"./routes/importer\";",
                "// Line 14: import { router as trackRouter } from \"./routes/track\";",
                "// Line 15: import { router as searchRouter } from \"./routes/search\";",
                "// Line 16: import { get } from \"./tools/env\";",
                "// Line 17: import { LogLevelAccepts } from \"./tools/logger\";",
                "// Line 18: ",
                "// Line 19: const app = express();",
                "// Line 20: ",
                "// vulnerable line: 21: let corsValue = get(\"CORS\")?.split(\",\");",
                "// vulnerable line: 22: if (corsValue?.[0] === \"all\") {",
                "// Line 23:   corsValue = undefined;",
                "// Line 24: }",
                "// Line 25: ",
                "// Line 26: app.use(",
                "// Line 27:   cors({",
                "// Line 28:     origin: corsValue ?? true,",
                "// Line 29:     methods: [\"GET\", \"PUT\", \"POST\", \"DELETE\"],",
                "// Line 30:     credentials: true,",
                "// Line 31:   }),",
                "// Line 32: );"
            ]
        },
        {
            "filename_of_changes": "crypto.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "12",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "env.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "0",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: import { z } from \"zod\";",
                "// vulnerable line: 2: import { logger } from \"./logger\";",
                "// Line 3: import { toBoolean, toNumber } from \"./zod\";",
                "// Line 4: ",
                "// Line 5: const validators = {",
                "// Line 6:   CLIENT_ENDPOINT: z.string(),",
                "// Line 7:   MAX_IMPORT_CACHE_SIZE: z.preprocess(toNumber, z.number().optional()),",
                "// Line 8:   CORS: z.string().optional(),",
                "// Line 9:   MONGO_ENDPOINT: z.string().optional(),",
                "// Line 10:   SPOTIFY_PUBLIC: z.string(),",
                "// Line 11:   SPOTIFY_SECRET: z.string(),",
                "// Line 12:   API_ENDPOINT: z.string(),"
            ]
        },
        {
            "filename_of_changes": "privateData.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// vulnerable line: 1: import { randomUUID } from \"crypto\";",
                "// Line 2: import { PrivateDataModel } from \"../Models\";",
                "// Line 3: ",
                "// Line 4: export async function createPrivateData() {",
                "// vulnerable line: 5: await PrivateDataModel.create({ jwtPrivateKey: randomUUID() });",
                "// Line 6: }",
                "// Line 7: ",
                "// Line 8: export async function getPrivateData() {",
                "// Line 9:   return PrivateDataModel.findOne({});",
                "// Line 10: }"
            ]
        },
        {
            "filename_of_changes": "search.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "8",
            "number_of_lines_deleted_vulnerable_to_cve": "8",
            "Code_with_highlighted_vulnerability_lines": [
                "// vulnerable line: 1: import { Router } from 'express';",
                "// vulnerable line: 2: import { z } from 'zod';",
                "// vulnerable line: 3: import { searchArtist, searchTrack } from '../database';",
                "// vulnerable line: 4: import { logger } from '../tools/logger';",
                "// vulnerable line: 5: import { isLoggedOrGuest, validating } from '../tools/middleware';",
                "// vulnerable line: 6: import { TypedPayload } from '../tools/types';",
                "// vulnerable line: 7: import { searchAlbum } from '../database/queries/album';",
                "// Line 8: ",
                "// Line 9: export const router = Router();",
                "// Line 10: ",
                "// Line 11: const search = z.object({",
                "// Line 12:   query: z.string().min(3).max(64),",
                "// Line 13: });",
                "// Line 14: ",
                "// Line 15: router.get(",
                "// Line 16:   \"/:query\",",
                "// Line 17:   validating(search, \"params\"),",
                "// Line 18:   isLoggedOrGuest,",
                "// Line 19:   async (req, res) => {",
                "// Line 20:     const { query } = req.params as TypedPayload<typeof search>;",
                "// Line 21: ",
                "// Line 22:     try {",
                "// Line 23:       const [artists, tracks, albums] = await Promise.all([",
                "// Line 24:         searchArtist(query),",
                "// Line 25:         searchTrack(query),",
                "// vulnerable line: 26: searchAlbum(query)",
                "// Line 27:       ]);",
                "// Line 28:       return res.status(200).send({ artists, tracks, albums });",
                "// Line 29:     } catch (e) {",
                "// Line 30:       logger.error(e);",
                "// Line 31:       return res.status(500).end();",
                "// Line 32:     }",
                "// Line 33:   },",
                "// Line 34: );"
            ]
        }
    ]
}