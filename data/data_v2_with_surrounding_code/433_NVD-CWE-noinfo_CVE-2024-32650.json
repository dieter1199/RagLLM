{
    "cve_id": "CVE-2024-32650",
    "cve_description": "Rustls is a modern TLS library written in Rust. `rustls::ConnectionCommon::complete_io` could fall into an infinite loop based on network input. When using a blocking rustls server, if a client send a `close_notify` message immediately after `client_hello`, the server's `complete_io` will get in an infinite loop. This vulnerability is fixed in 0.23.5, 0.22.4, and 0.21.11.",
    "cve_publish_date": "2024-04-19T16:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Don't specially handle unauthenticated close_notify alerts",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "common_state.rs",
            "code_language": "Rust",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 424:     pub(crate) fn process_alert(&mut self, alert: &AlertMessagePayload) -> Result<(), Error> {",
                "// Line 425:         // Reject unknown AlertLevels.",
                "// Line 426:         if let AlertLevel::Unknown(_) = alert.level {",
                "// Line 427:             return Err(self.send_fatal_alert(",
                "// Line 428:                 AlertDescription::IllegalParameter,",
                "// Line 429:                 Error::AlertReceived(alert.description),",
                "// Line 430:             ));",
                "// Line 431:         }",
                "// Line 432: ",
                "// Line 433:         // If we get a CloseNotify, make a note to declare EOF to our",
                "// vulnerable line: 434: // caller.",
                "// vulnerable line: 435: if alert.description == AlertDescription::CloseNotify {",
                "// Line 436:             self.has_received_close_notify = true;",
                "// Line 437:             return Ok(());",
                "// Line 438:         }",
                "// Line 439: ",
                "// Line 440:         // Warnings are nonfatal for TLS1.2, but outlawed in TLS1.3",
                "// Line 441:         // (except, for no good reason, user_cancelled).",
                "// Line 442:         let err = Error::AlertReceived(alert.description);",
                "// Line 443:         if alert.level == AlertLevel::Warning {",
                "// Line 444:             if self.is_tls13() && alert.description != AlertDescription::UserCanceled {",
                "// Line 445:                 return Err(self.send_fatal_alert(AlertDescription::DecodeError, err));"
            ]
        }
    ]
}