{
    "cve_id": "CVE-2024-39896",
    "cve_description": "Directus is a real-time API and App dashboard for managing SQL database content. When relying on SSO providers in combination with local authentication it can be possible to enumerate existing SSO users in the instance. This is possible because if an email address exists in Directus and belongs to a known SSO provider then it will throw a \"helpful\" error that the user belongs to another provider. This vulnerability is fixed in 10.13.0.",
    "cve_publish_date": "2024-07-08T18:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Merge pull request from GHSA-jgf4-vwc3-r46v\n\n* naive fix for enumeration\n\n* re-added explicit provider check\n\n* Remove user suspended error as well\n\n---------\n\nCo-authored-by: Rijk van Zanten <rijkvanzanten@me.com>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "authentication.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "12",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: import { Action } from '@directus/constants';",
                "// Line 2: import { useEnv } from '@directus/env';",
                "// Line 3: import {",
                "// Line 4:     InvalidCredentialsError,",
                "// Line 5:     InvalidOtpError,",
                "// vulnerable line: 6: InvalidProviderError,",
                "// Line 7:     ServiceUnavailableError,",
                "// Line 8:     UserSuspendedError,",
                "// Line 9: } from '@directus/errors';",
                "// Line 10: import type { Accountability, SchemaOverview } from '@directus/types';",
                "// Line 11: import jwt from 'jsonwebtoken';",
                "// Line 12: import type { Knex } from 'knex';",
                "// Line 13: import { clone, cloneDeep } from 'lodash-es';",
                "// Line 14: import { performance } from 'perf_hooks';",
                "// Line 15: import { getAuthProvider } from '../auth.js';",
                "// Line 16: import { DEFAULT_AUTH_PROVIDER } from '../constants.js';",
                "// Line 33:     knex: Knex;",
                "// Line 34:     accountability: Accountability | null;",
                "// Line 35:     activityService: ActivityService;",
                "// Line 36:     schema: SchemaOverview;",
                "// Line 37: ",
                "// Line 38:     constructor(options: AbstractServiceOptions) {",
                "// Line 39:         this.knex = options.knex || getDatabase();",
                "// Line 40:         this.accountability = options.accountability || null;",
                "// Line 41:         this.activityService = new ActivityService({ knex: this.knex, schema: options.schema });",
                "// Line 42:         this.schema = options.schema;",
                "// vulnerable line: 43: }",
                "// Line 44: ",
                "// Line 45:     /**",
                "// Line 46:      * Retrieve the tokens for a given user email.",
                "// Line 47:      *",
                "// Line 48:      * Password is optional to allow usage of this function within the SSO flow and extensions. Make sure",
                "// Line 49:      * to handle password existence checks elsewhere",
                "// Line 50:      */",
                "// Line 51:     async login(",
                "// Line 52:         providerName: string = DEFAULT_AUTH_PROVIDER,",
                "// Line 53:         payload: Record<string, any>,",
                "// Line 61:         const STALL_TIME = env['LOGIN_STALL_TIME'] as number;",
                "// Line 62:         const timeStart = performance.now();",
                "// Line 63: ",
                "// Line 64:         const provider = getAuthProvider(providerName);",
                "// Line 65: ",
                "// Line 66:         let userId;",
                "// Line 67: ",
                "// Line 68:         try {",
                "// Line 69:             userId = await provider.getUserID(cloneDeep(payload));",
                "// Line 70:         } catch (err) {",
                "// vulnerable line: 71: await stall(STALL_TIME, timeStart);",
                "// Line 72:             throw err;",
                "// vulnerable line: 73: }",
                "// Line 74: ",
                "// Line 75:         const user = await this.knex",
                "// Line 76:             .select<User & { tfa_secret: string | null }>(",
                "// Line 77:                 'u.id',",
                "// Line 78:                 'u.first_name',",
                "// Line 79:                 'u.last_name',",
                "// Line 80:                 'u.email',",
                "// Line 81:                 'u.password',",
                "// Line 82:                 'u.status',",
                "// Line 83:                 'u.role',",
                "// Line 118:                     provider: providerName,",
                "// Line 119:                 },",
                "// Line 120:                 {",
                "// Line 121:                     database: this.knex,",
                "// Line 122:                     schema: this.schema,",
                "// Line 123:                     accountability: this.accountability,",
                "// Line 124:                 },",
                "// Line 125:             );",
                "// Line 126:         };",
                "// Line 127: ",
                "// vulnerable line: 128: if (user?.status !== 'active') {",
                "// Line 129:             emitStatus('fail');",
                "// Line 130: ",
                "// vulnerable line: 131: if (user?.status === 'suspended') {",
                "// vulnerable line: 132: await stall(STALL_TIME, timeStart);",
                "// vulnerable line: 133: throw new UserSuspendedError();",
                "// vulnerable line: 134: } else {",
                "// vulnerable line: 135: await stall(STALL_TIME, timeStart);",
                "// vulnerable line: 136: throw new InvalidCredentialsError();",
                "// vulnerable line: 137: }",
                "// vulnerable line: 138: } else if (user.provider !== providerName) {",
                "// vulnerable line: 139: await stall(STALL_TIME, timeStart);",
                "// vulnerable line: 140: throw new InvalidProviderError();",
                "// vulnerable line: 141: }",
                "// Line 142: ",
                "// Line 143:         const settingsService = new SettingsService({",
                "// Line 144:             knex: this.knex,",
                "// Line 145:             schema: this.schema,",
                "// Line 146:         });",
                "// Line 147: ",
                "// Line 148:         const { auth_login_attempts: allowedAttempts } = await settingsService.readSingleton({",
                "// Line 149:             fields: ['auth_login_attempts'],",
                "// Line 150:         });",
                "// Line 151: ",
                "// Line 154: ",
                "// Line 155:             try {",
                "// Line 156:                 await loginAttemptsLimiter.consume(user.id);",
                "// Line 157:             } catch (error) {",
                "// Line 158:                 if (error instanceof RateLimiterRes && error.remainingPoints === 0) {",
                "// Line 159:                     await this.knex('directus_users').update({ status: 'suspended' }).where({ id: user.id });",
                "// Line 160:                     user.status = 'suspended';",
                "// Line 161: ",
                "// Line 162:                     // This means that new attempts after the user has been re-activated will be accepted",
                "// Line 163:                     await loginAttemptsLimiter.set(user.id, 0, 0);",
                "// vulnerable line: 164: } else {",
                "// Line 165:                     throw new ServiceUnavailableError({",
                "// Line 166:                         service: 'authentication',",
                "// Line 167:                         reason: 'Rate limiter unreachable',",
                "// Line 168:                     });",
                "// vulnerable line: 169: }",
                "// vulnerable line: 170: }",
                "// vulnerable line: 171: }",
                "// Line 172: ",
                "// Line 173:         try {",
                "// Line 174:             await provider.login(clone(user), cloneDeep(updatedPayload));",
                "// Line 175:         } catch (e) {",
                "// Line 176:             emitStatus('fail');",
                "// vulnerable line: 177: await stall(STALL_TIME, timeStart);",
                "// Line 178:             throw e;",
                "// vulnerable line: 179: }",
                "// Line 180: ",
                "// Line 181:         if (user.tfa_secret && !options?.otp) {",
                "// Line 182:             emitStatus('fail');",
                "// vulnerable line: 183: await stall(STALL_TIME, timeStart);",
                "// Line 184:             throw new InvalidOtpError();",
                "// vulnerable line: 185: }",
                "// Line 186: ",
                "// Line 187:         if (user.tfa_secret && options?.otp) {",
                "// Line 188:             const tfaService = new TFAService({ knex: this.knex, schema: this.schema });",
                "// Line 189:             const otpValid = await tfaService.verifyOTP(user.id, options?.otp);",
                "// Line 190: ",
                "// Line 191:             if (otpValid === false) {",
                "// Line 192:                 emitStatus('fail');",
                "// vulnerable line: 193: await stall(STALL_TIME, timeStart);",
                "// Line 194:                 throw new InvalidOtpError();",
                "// vulnerable line: 195: }",
                "// vulnerable line: 196: }",
                "// Line 197: ",
                "// Line 198:         const tokenPayload: DirectusTokenPayload = {",
                "// Line 199:             id: user.id,",
                "// Line 200:             role: user.role,",
                "// Line 201:             app_access: user.app_access,",
                "// Line 202:             admin_access: user.admin_access,",
                "// Line 203:         };",
                "// Line 204: ",
                "// Line 205:         const refreshToken = nanoid(64);",
                "// Line 206:         const refreshTokenExpiration = new Date(Date.now() + getMilliseconds(env['REFRESH_TOKEN_TTL'], 0));",
                "// Line 207: ",
                "// Line 208:         if (options?.session) {",
                "// Line 209:             tokenPayload.session = refreshToken;",
                "// vulnerable line: 210: }",
                "// Line 211: ",
                "// Line 212:         const customClaims = await emitter.emitFilter(",
                "// Line 213:             'auth.jwt',",
                "// Line 214:             tokenPayload,",
                "// Line 215:             {",
                "// Line 216:                 status: 'pending',",
                "// Line 217:                 user: user?.id,",
                "// Line 218:                 provider: providerName,",
                "// Line 219:                 type: 'login',",
                "// Line 220:             },",
                "// Line 246:         if (this.accountability) {",
                "// Line 247:             await this.activityService.createOne({",
                "// Line 248:                 action: Action.LOGIN,",
                "// Line 249:                 user: user.id,",
                "// Line 250:                 ip: this.accountability.ip,",
                "// Line 251:                 user_agent: this.accountability.userAgent,",
                "// Line 252:                 origin: this.accountability.origin,",
                "// Line 253:                 collection: 'directus_users',",
                "// Line 254:                 item: user.id,",
                "// Line 255:             });",
                "// vulnerable line: 256: }",
                "// Line 257: ",
                "// Line 258:         await this.knex('directus_users').update({ last_access: new Date() }).where({ id: user.id });",
                "// Line 259: ",
                "// Line 260:         emitStatus('success');",
                "// Line 261: ",
                "// Line 262:         if (allowedAttempts !== null) {",
                "// Line 263:             await loginAttemptsLimiter.set(user.id, 0, 0);",
                "// vulnerable line: 264: }",
                "// Line 265: ",
                "// vulnerable line: 266: await stall(STALL_TIME, timeStart);",
                "// Line 267: ",
                "// Line 268:         return {",
                "// Line 269:             accessToken,",
                "// Line 270:             refreshToken,",
                "// Line 271:             expires: getMilliseconds(TTL),",
                "// Line 272:             id: user.id,",
                "// Line 273:         };",
                "// vulnerable line: 274: }",
                "// Line 275: ",
                "// Line 276:     async refresh(refreshToken: string, options?: Partial<{ session: boolean }>): Promise<LoginResult> {",
                "// Line 277:         const { nanoid } = await import('nanoid');",
                "// Line 278:         const STALL_TIME = env['LOGIN_STALL_TIME'] as number;",
                "// Line 279:         const timeStart = performance.now();",
                "// Line 280: ",
                "// Line 281:         if (!refreshToken) {",
                "// vulnerable line: 282: throw new InvalidCredentialsError();",
                "// vulnerable line: 283: }",
                "// Line 284: ",
                "// Line 285:         const record = await this.knex",
                "// Line 286:             .select({",
                "// Line 287:                 session_expires: 's.expires',",
                "// Line 288:                 session_next_token: 's.next_token',",
                "// Line 289:                 user_id: 'u.id',",
                "// Line 290:                 user_first_name: 'u.first_name',",
                "// Line 291:                 user_last_name: 'u.last_name',",
                "// Line 292:                 user_email: 'u.email',",
                "// Line 293:                 user_password: 'u.password',",
                "// Line 317:             .andWhere('s.expires', '>=', new Date())",
                "// Line 318:             .andWhere((subQuery) => {",
                "// Line 319:                 subQuery.whereNull('d.date_end').orWhere('d.date_end', '>=', new Date());",
                "// Line 320:             })",
                "// Line 321:             .andWhere((subQuery) => {",
                "// Line 322:                 subQuery.whereNull('d.date_start').orWhere('d.date_start', '<=', new Date());",
                "// Line 323:             })",
                "// Line 324:             .first();",
                "// Line 325: ",
                "// Line 326:         if (!record || (!record.share_id && !record.user_id)) {",
                "// vulnerable line: 327: throw new InvalidCredentialsError();",
                "// vulnerable line: 328: }",
                "// Line 329: ",
                "// Line 330:         if (record.user_id && record.user_status !== 'active') {",
                "// Line 331:             await this.knex('directus_sessions').where({ token: refreshToken }).del();",
                "// Line 332: ",
                "// Line 333:             if (record.user_status === 'suspended') {",
                "// vulnerable line: 334: await stall(STALL_TIME, timeStart);",
                "// vulnerable line: 335: throw new UserSuspendedError();",
                "// vulnerable line: 336: } else {",
                "// vulnerable line: 337: await stall(STALL_TIME, timeStart);",
                "// vulnerable line: 338: throw new InvalidCredentialsError();",
                "// vulnerable line: 339: }",
                "// vulnerable line: 340: }",
                "// Line 341: ",
                "// Line 342:         if (record.user_id) {",
                "// Line 343:             const provider = getAuthProvider(record.user_provider);",
                "// Line 344: ",
                "// Line 345:             await provider.refresh({",
                "// Line 346:                 id: record.user_id,",
                "// Line 347:                 first_name: record.user_first_name,",
                "// Line 348:                 last_name: record.user_last_name,",
                "// Line 349:                 email: record.user_email,",
                "// Line 350:                 password: record.user_password,",
                "// Line 351:                 status: record.user_status,",
                "// Line 352:                 provider: record.user_provider,",
                "// Line 353:                 external_identifier: record.user_external_identifier,",
                "// Line 354:                 auth_data: record.user_auth_data,",
                "// Line 355:                 role: record.role_id,",
                "// Line 356:                 app_access: record.role_app_access,",
                "// Line 357:                 admin_access: record.role_admin_access,",
                "// Line 358:             });",
                "// vulnerable line: 359: }",
                "// Line 360: ",
                "// Line 361:         let newRefreshToken = record.session_next_token ?? nanoid(64);",
                "// Line 362:         const sessionDuration = env[options?.session ? 'SESSION_COOKIE_TTL' : 'REFRESH_TOKEN_TTL'];",
                "// Line 363:         const refreshTokenExpiration = new Date(Date.now() + getMilliseconds(sessionDuration, 0));",
                "// Line 364: ",
                "// Line 365:         const tokenPayload: DirectusTokenPayload = {",
                "// Line 366:             id: record.user_id,",
                "// Line 367:             role: record.role_id,",
                "// Line 368:             app_access: record.role_app_access,",
                "// Line 369:             admin_access: record.role_admin_access,",
                "// Line 370:         };",
                "// Line 371: ",
                "// Line 372:         if (options?.session) {",
                "// Line 373:             newRefreshToken = await this.updateStatefulSession(record, refreshToken, newRefreshToken, refreshTokenExpiration);",
                "// Line 374:             tokenPayload.session = newRefreshToken;",
                "// vulnerable line: 375: } else {",
                "// Line 376:             // Original stateless token behavior",
                "// Line 377:             await this.knex('directus_sessions')",
                "// Line 378:                 .update({",
                "// Line 379:                     token: newRefreshToken,",
                "// Line 380:                     expires: refreshTokenExpiration,",
                "// Line 381:                 })",
                "// Line 382:                 .where({ token: refreshToken });",
                "// vulnerable line: 383: }",
                "// Line 384: ",
                "// Line 385:         if (record.share_id) {",
                "// Line 386:             tokenPayload.share = record.share_id;",
                "// Line 387:             tokenPayload.role = record.share_role;",
                "// Line 388: ",
                "// Line 389:             tokenPayload.share_scope = {",
                "// Line 390:                 collection: record.share_collection,",
                "// Line 391:                 item: record.share_item,",
                "// Line 392:             };",
                "// Line 393: ",
                "// Line 394:             tokenPayload.app_access = false;",
                "// Line 395:             tokenPayload.admin_access = false;",
                "// Line 396: ",
                "// Line 397:             delete tokenPayload.id;",
                "// vulnerable line: 398: }",
                "// Line 399: ",
                "// Line 400:         const customClaims = await emitter.emitFilter(",
                "// Line 401:             'auth.jwt',",
                "// Line 402:             tokenPayload,",
                "// Line 403:             {",
                "// Line 404:                 status: 'pending',",
                "// Line 405:                 user: record.user_id,",
                "// Line 406:                 provider: record.user_provider,",
                "// Line 407:                 type: 'refresh',",
                "// Line 408:             },",
                "// Line 415: ",
                "// Line 416:         const TTL = env[options?.session ? 'SESSION_COOKIE_TTL' : 'ACCESS_TOKEN_TTL'] as string;",
                "// Line 417: ",
                "// Line 418:         const accessToken = jwt.sign(customClaims, getSecret(), {",
                "// Line 419:             expiresIn: TTL,",
                "// Line 420:             issuer: 'directus',",
                "// Line 421:         });",
                "// Line 422: ",
                "// Line 423:         if (record.user_id) {",
                "// Line 424:             await this.knex('directus_users').update({ last_access: new Date() }).where({ id: record.user_id });",
                "// vulnerable line: 425: }",
                "// Line 426: ",
                "// Line 427:         // Clear expired sessions for the current user",
                "// Line 428:         await this.knex('directus_sessions')",
                "// Line 429:             .delete()",
                "// Line 430:             .where('user', '=', record.user_id)",
                "// Line 431:             .andWhere('expires', '<', new Date());",
                "// Line 432: ",
                "// Line 433:         return {",
                "// Line 434:             accessToken,",
                "// Line 435:             refreshToken: newRefreshToken,",
                "// Line 436:             expires: getMilliseconds(TTL),",
                "// Line 437:             id: record.user_id,",
                "// Line 438:         };",
                "// vulnerable line: 439: }",
                "// Line 440: ",
                "// Line 441:     private async updateStatefulSession(",
                "// Line 442:         sessionRecord: Record<string, any>,",
                "// Line 443:         oldSessionToken: string,",
                "// Line 444:         newSessionToken: string,",
                "// Line 445:         sessionExpiration: Date,",
                "// Line 446:     ): Promise<string> {",
                "// Line 447:         if (sessionRecord['session_next_token']) {",
                "// Line 448:             // The current session token was already refreshed and has a reference",
                "// Line 449:             // to the new session, update the new session timeout for the new refresh",
                "// Line 450:             await this.knex('directus_sessions')",
                "// Line 451:                 .update({",
                "// Line 452:                     expires: sessionExpiration,",
                "// Line 453:                 })",
                "// Line 454:                 .where({ token: newSessionToken });",
                "// Line 455: ",
                "// Line 456:             return newSessionToken;",
                "// vulnerable line: 457: }",
                "// Line 458: ",
                "// Line 459:         // Keep the old session active for a short period of time",
                "// Line 460:         const GRACE_PERIOD = getMilliseconds(env['SESSION_REFRESH_GRACE_PERIOD'], 10_000);",
                "// Line 461: ",
                "// Line 462:         // Update the existing session record to have a short safety timeout",
                "// Line 463:         // before expiring, and add the reference to the new session token",
                "// Line 464:         const updatedSession = await this.knex('directus_sessions')",
                "// Line 465:             .update(",
                "// Line 466:                 {",
                "// Line 467:                     next_token: newSessionToken,",
                "// Line 472:             .where({ token: oldSessionToken, next_token: null });",
                "// Line 473: ",
                "// Line 474:         if (updatedSession.length === 0) {",
                "// Line 475:             // Don't create a new session record, we already have a \"next_token\" reference",
                "// Line 476:             const { next_token } = await this.knex('directus_sessions')",
                "// Line 477:                 .select('next_token')",
                "// Line 478:                 .where({ token: oldSessionToken })",
                "// Line 479:                 .first();",
                "// Line 480: ",
                "// Line 481:             return next_token;",
                "// vulnerable line: 482: }",
                "// Line 483: ",
                "// Line 484:         // Instead of updating the current session record with a new token,",
                "// Line 485:         // create a new copy with the new token",
                "// Line 486:         await this.knex('directus_sessions').insert({",
                "// Line 487:             token: newSessionToken,",
                "// Line 488:             user: sessionRecord['user_id'],",
                "// Line 489:             expires: sessionExpiration,",
                "// Line 490:             ip: this.accountability?.ip,",
                "// Line 491:             user_agent: this.accountability?.userAgent,",
                "// Line 492:             origin: this.accountability?.origin,",
                "// Line 493:         });",
                "// Line 494: ",
                "// Line 495:         return newSessionToken;",
                "// vulnerable line: 496: }",
                "// Line 497: ",
                "// Line 498:     async logout(refreshToken: string): Promise<void> {",
                "// Line 499:         const record = await this.knex",
                "// Line 500:             .select<User & Session>(",
                "// Line 501:                 'u.id',",
                "// Line 502:                 'u.first_name',",
                "// Line 503:                 'u.last_name',",
                "// Line 504:                 'u.email',",
                "// Line 505:                 'u.password',",
                "// Line 506:                 'u.status',",
                "// Line 514:             .where('s.token', refreshToken)",
                "// Line 515:             .first();",
                "// Line 516: ",
                "// Line 517:         if (record) {",
                "// Line 518:             const user = record;",
                "// Line 519: ",
                "// Line 520:             const provider = getAuthProvider(user.provider);",
                "// Line 521:             await provider.logout(clone(user));",
                "// Line 522: ",
                "// Line 523:             await this.knex.delete().from('directus_sessions').where('token', refreshToken);",
                "// vulnerable line: 524: }",
                "// vulnerable line: 525: }",
                "// Line 526: ",
                "// Line 527:     async verifyPassword(userID: string, password: string): Promise<void> {",
                "// Line 528:         const user = await this.knex",
                "// Line 529:             .select<User>(",
                "// Line 530:                 'id',",
                "// Line 531:                 'first_name',",
                "// Line 532:                 'last_name',",
                "// Line 533:                 'email',",
                "// Line 534:                 'password',",
                "// Line 535:                 'status',",
                "// Line 536:                 'role',",
                "// Line 537:                 'provider',",
                "// Line 538:                 'external_identifier',",
                "// Line 539:                 'auth_data',",
                "// Line 540:             )",
                "// Line 541:             .from('directus_users')",
                "// Line 542:             .where('id', userID)",
                "// Line 543:             .first();",
                "// Line 544: ",
                "// Line 545:         if (!user) {",
                "// vulnerable line: 546: throw new InvalidCredentialsError();",
                "// vulnerable line: 547: }",
                "// Line 548: ",
                "// Line 549:         const provider = getAuthProvider(user.provider);",
                "// Line 550:         await provider.verify(clone(user), password);",
                "// vulnerable line: 551: }",
                "// vulnerable line: 552: }"
            ]
        }
    ]
}