{
    "cve_id": "CVE-2024-22423",
    "cve_description": "yt-dlp is a youtube-dl fork with additional features and fixes. The patch that addressed CVE-2023-40581 attempted to prevent RCE when using `--exec` with `%q` by replacing double quotes with two double quotes. However, this escaping is not sufficient, and still allows expansion of environment variables. Support for output template expansion in `--exec`, along with this vulnerable behavior, was added to `yt-dlp` in version 2021.04.11. yt-dlp version 2024.04.09 fixes this issue by properly escaping `%`. It replaces them with `%%cd:~,%`, a variable that expands to nothing, leaving only the leading percent. It is recommended to upgrade yt-dlp to version 2024.04.09 as soon as possible. Also, always be careful when using `--exec`, because while this specific vulnerability has been patched, using unvalidated input in shell commands is inherently dangerous. For Windows users who are not able to upgrade, avoid using any output template expansion in `--exec` other than `{}` (filepath); if expansion in `--exec` is needed, verify the fields you are using do not contain `\"`, `|` or `&`; and/or instead of using `--exec`, write the info json and load the fields from it instead.",
    "cve_publish_date": "2024-04-09T18:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "[core] Prevent RCE when using `--exec` with `%q` (CVE-2024-22423)\n\nThe shell escape function now properly escapes `%`, `\\\\` and `\\n`. `utils.Popen` as well as `%q` output template expansion have been patched accordingly.\n\nPrior to this fix using `--exec` together with `%q` when on Windows could cause remote code to execute. See https://github.com/yt-dlp/yt-dlp/security/advisories/GHSA-hjq6-52gw-2g7p for more details.\n\nAuthored by: Grub4K",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "YoutubeDL.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "4",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 18: import subprocess",
                "// Line 19: import sys",
                "// Line 20: import tempfile",
                "// Line 21: import time",
                "// Line 22: import tokenize",
                "// Line 23: import traceback",
                "// Line 24: import unicodedata",
                "// Line 25: ",
                "// Line 26: from .cache import Cache",
                "// Line 27: from .compat import functools, urllib  # isort: split",
                "// vulnerable line: 28: from .compat import compat_os_name, compat_shlex_quote, urllib_req_to_req",
                "// Line 29: from .cookies import LenientSimpleCookie, load_cookies",
                "// Line 30: from .downloader import FFmpegFD, get_suitable_downloader, shorten_protocol_name",
                "// Line 31: from .downloader.rtmp import rtmpdump_version",
                "// Line 32: from .extractor import gen_extractor_classes, get_info_extractor",
                "// Line 33: from .extractor.common import UnsupportedURLIE",
                "// Line 34: from .extractor.openload import PhantomJSwrapper",
                "// Line 35: from .minicurses import format_text",
                "// Line 36: from .networking import HEADRequest, Request, RequestDirector",
                "// Line 37: from .networking.common import _REQUEST_HANDLERS, _RH_PREFERENCES",
                "// Line 38: from .networking.exceptions import (",
                "// Line 95:     PlaylistEntries,",
                "// Line 96:     Popen,",
                "// Line 97:     PostProcessingError,",
                "// Line 98:     ReExtractInfo,",
                "// Line 99:     RejectedVideoReached,",
                "// Line 100:     SameFileError,",
                "// Line 101:     UnavailableVideoError,",
                "// Line 102:     UserNotLive,",
                "// Line 103:     YoutubeDLError,",
                "// Line 104:     age_restricted,",
                "// vulnerable line: 105: args_to_str,",
                "// Line 106:     bug_reports_message,",
                "// Line 107:     date_from_str,",
                "// Line 108:     deprecation_warning,",
                "// Line 109:     determine_ext,",
                "// Line 110:     determine_protocol,",
                "// Line 111:     encode_compat_str,",
                "// Line 112:     encodeFilename,",
                "// Line 113:     error_to_compat_str,",
                "// Line 114:     escapeHTML,",
                "// Line 115:     expand_path,",
                "// Line 820:         if idxs:",
                "// Line 821:             correct_argv = (",
                "// Line 822:                 ['yt-dlp']",
                "// Line 823:                 + [a for i, a in enumerate(argv) if i not in idxs]",
                "// Line 824:                 + ['--'] + [argv[i] for i in idxs]",
                "// Line 825:             )",
                "// Line 826:             self.report_warning(",
                "// Line 827:                 'Long argument string detected. '",
                "// Line 828:                 'Use -- to separate parameters and URLs, like this:",
                "// Line 829: %s' %",
                "// vulnerable line: 830: args_to_str(correct_argv))",
                "// Line 831: ",
                "// Line 832:     def add_info_extractor(self, ie):",
                "// Line 833:         \"\"\"Add an InfoExtractor object to the end of the list.\"\"\"",
                "// Line 834:         ie_key = ie.ie_key()",
                "// Line 835:         self._ies[ie_key] = ie",
                "// Line 836:         if not isinstance(ie, type):",
                "// Line 837:             self._ies_instances[ie_key] = ie",
                "// Line 838:             ie.set_downloader(self)",
                "// Line 839: ",
                "// Line 840:     def get_info_extractor(self, ie_key):",
                "// Line 1359: ' if '#' in flags else ', '",
                "// Line 1360:                 value, fmt = delim.join(map(str, variadic(value, allowed_types=(str, bytes)))), str_fmt",
                "// Line 1361:             elif fmt[-1] == 'j':  # json",
                "// Line 1362:                 value, fmt = json.dumps(",
                "// Line 1363:                     value, default=_dumpjson_default,",
                "// Line 1364:                     indent=4 if '#' in flags else None, ensure_ascii='+' not in flags), str_fmt",
                "// Line 1365:             elif fmt[-1] == 'h':  # html",
                "// Line 1366:                 value, fmt = escapeHTML(str(value)), str_fmt",
                "// Line 1367:             elif fmt[-1] == 'q':  # quoted",
                "// Line 1368:                 value = map(str, variadic(value) if '#' in flags else [value])",
                "// vulnerable line: 1369: value, fmt = ' '.join(map(compat_shlex_quote, value)), str_fmt",
                "// Line 1370:             elif fmt[-1] == 'B':  # bytes",
                "// Line 1371:                 value = f'%{str_fmt}'.encode() % str(value).encode()",
                "// Line 1372:                 value, fmt = value.decode('utf-8', 'ignore'), 's'",
                "// Line 1373:             elif fmt[-1] == 'U':  # unicode normalized",
                "// Line 1374:                 value, fmt = unicodedata.normalize(",
                "// Line 1375:                     # \"+\" = compatibility equivalence, \"#\" = NFD",
                "// Line 1376:                     'NF%s%s' % ('K' if '+' in flags else '', 'D' if '#' in flags else 'C'),",
                "// Line 1377:                     value), str_fmt",
                "// Line 1378:             elif fmt[-1] == 'D':  # decimal suffix",
                "// Line 1379:                 num_fmt, fmt = fmt[:-1].replace('#', ''), 's'"
            ]
        },
        {
            "filename_of_changes": "__init__.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "6",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 20:         pass",
                "// Line 21: ",
                "// Line 22: ",
                "// Line 23: def compat_etree_fromstring(text):",
                "// Line 24:     return etree.XML(text, parser=etree.XMLParser(target=_TreeBuilder()))",
                "// Line 25: ",
                "// Line 26: ",
                "// Line 27: compat_os_name = os._name if os.name == 'java' else os.name",
                "// Line 28: ",
                "// Line 29: ",
                "// vulnerable line: 30: if compat_os_name == 'nt':",
                "// vulnerable line: 31: def compat_shlex_quote(s):",
                "// vulnerable line: 32: import re",
                "// vulnerable line: 33: return s if re.match(r'^[-_\\w./]+$', s) else s.replace('\"', '\"\"').join('\"\"')",
                "// vulnerable line: 34: else:",
                "// vulnerable line: 35: from shlex import quote as compat_shlex_quote  # noqa: F401",
                "// Line 36: ",
                "// Line 37: ",
                "// Line 38: def compat_ord(c):",
                "// Line 39:     return c if isinstance(c, int) else ord(c)",
                "// Line 40: ",
                "// Line 41: ",
                "// Line 42: if compat_os_name == 'nt' and sys.version_info < (3, 8):",
                "// Line 43:     # os.path.realpath on Windows does not follow symbolic links",
                "// Line 44:     # prior to Python 3.8 (see https://bugs.python.org/issue9949)",
                "// Line 45:     def compat_realpath(path):",
                "// Line 46:         while os.path.islink(path):",
                "// Line 47:             path = os.path.abspath(os.readlink(path))",
                "// Line 48:         return os.path.realpath(path)",
                "// vulnerable line: 49: else:",
                "// Line 50:     compat_realpath = os.path.realpath",
                "// Line 51: ",
                "// Line 52: ",
                "// Line 53: # Python 3.8+ does not honor %HOME% on windows, but this breaks compatibility with youtube-dl",
                "// Line 54: # See https://github.com/yt-dlp/yt-dlp/issues/792",
                "// Line 55: # https://docs.python.org/3/library/os.path.html#os.path.expanduser",
                "// Line 56: if compat_os_name in ('nt', 'ce'):",
                "// Line 57:     def compat_expanduser(path):",
                "// Line 58:         HOME = os.environ.get('HOME')",
                "// Line 59:         if not HOME:",
                "// Line 60:             return os.path.expanduser(path)",
                "// Line 61:         elif not path.startswith('~'):",
                "// Line 62:             return path",
                "// Line 63:         i = path.replace('', '/', 1).find('/')  # ~user",
                "// Line 64:         if i < 0:",
                "// Line 65:             i = len(path)",
                "// Line 66:         userhome = os.path.join(os.path.dirname(HOME), path[1:i]) if i > 1 else HOME",
                "// Line 67:         return userhome + path[i:]",
                "// vulnerable line: 68: else:",
                "// Line 69:     compat_expanduser = os.path.expanduser",
                "// Line 70: ",
                "// Line 71: ",
                "// Line 72: def urllib_req_to_req(urllib_request):",
                "// Line 73:     \"\"\"Convert urllib Request to a networking Request\"\"\"",
                "// Line 74:     from ..networking import Request",
                "// Line 75:     from ..utils.networking import HTTPHeaderDict",
                "// Line 76:     return Request(",
                "// Line 77:         urllib_request.get_full_url(), data=urllib_request.data, method=urllib_request.get_method(),",
                "// Line 78:         headers=HTTPHeaderDict(urllib_request.headers, urllib_request.unredirected_hdrs),"
            ]
        },
        {
            "filename_of_changes": "test_utils.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        }
    ]
}