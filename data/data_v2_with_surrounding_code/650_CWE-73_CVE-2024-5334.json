{
    "cve_id": "CVE-2024-5334",
    "cve_description": "A local file read vulnerability exists in the stitionai/devika repository, affecting the latest version. The vulnerability is due to improper handling of the 'snapshot_path' parameter in the '/api/get-browser-snapshot' endpoint. An attacker can exploit this vulnerability by crafting a request with a malicious 'snapshot_path' parameter, leading to arbitrary file read from the system. This issue impacts the security of the application by allowing unauthorized access to sensitive files on the server.",
    "cve_publish_date": "2024-06-27T18:15Z",
    "cwe_id": "CWE-73",
    "cwe_name": "External Control of File Name or Path",
    "cwe_description": "The product allows user input to control or influence paths or file names that are used in filesystem operations.",
    "commit_message": "Fix: Sanitizing HTML inputs and Cors misconfiguration",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "devika.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "9",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 19: from src.apis.project import project_bp",
                "// Line 20: from src.config import Config",
                "// Line 21: from src.logger import Logger, route_logger",
                "// Line 22: from src.project import ProjectManager",
                "// Line 23: from src.state import AgentState",
                "// Line 24: from src.agents import Agent",
                "// Line 25: from src.llm import LLM",
                "// Line 26: ",
                "// Line 27: ",
                "// Line 28: app = Flask(__name__)",
                "// vulnerable line: 29: CORS(app)",
                "// Line 30: app.register_blueprint(project_bp)",
                "// Line 31: socketio.init_app(app)",
                "// Line 32: ",
                "// Line 33: ",
                "// Line 34: log = logging.getLogger(\"werkzeug\")",
                "// Line 35: log.disabled = True",
                "// Line 36: ",
                "// Line 37: ",
                "// Line 38: TIKTOKEN_ENC = tiktoken.get_encoding(\"cl100k_base\")",
                "// Line 39: ",
                "// Line 46: ",
                "// Line 47: ",
                "// Line 48: # initial socket",
                "// Line 49: @socketio.on('socket_connect')",
                "// Line 50: def test_connect(data):",
                "// Line 51:     print(\"Socket connected :: \", data)",
                "// Line 52:     emit_agent(\"socket_response\", {\"data\": \"Server Connected\"})",
                "// Line 53: ",
                "// Line 54: ",
                "// Line 55: @app.route(\"/api/data\", methods=[\"GET\"])",
                "// vulnerable line: 56: @route_logger(logger)",
                "// Line 57: def data():",
                "// Line 58:     project = manager.get_project_list()",
                "// Line 59:     models = LLM().list_models()",
                "// Line 60:     search_engines = [\"Bing\", \"Google\", \"DuckDuckGo\"]",
                "// Line 61:     return jsonify({\"projects\": project, \"models\": models, \"search_engines\": search_engines})",
                "// Line 62: ",
                "// Line 63: ",
                "// Line 64: @app.route(\"/api/messages\", methods=[\"POST\"])",
                "// Line 65: def get_messages():",
                "// Line 66:     data = request.json",
                "// Line 92:             emit_agent(\"info\", {\"type\": \"warning\", \"message\": \"previous agent doesn't completed it's task.\"})",
                "// Line 93:             last_state = AgentState.get_latest_state(project_name)",
                "// Line 94:             if last_state[\"agent_is_active\"] or not last_state[\"completed\"]:",
                "// Line 95:                 thread = Thread(target=lambda: agent.execute(message, project_name))",
                "// Line 96:                 thread.start()",
                "// Line 97:             else:",
                "// Line 98:                 thread = Thread(target=lambda: agent.subsequent_execute(message, project_name))",
                "// Line 99:                 thread.start()",
                "// Line 100: ",
                "// Line 101: @app.route(\"/api/is-agent-active\", methods=[\"POST\"])",
                "// vulnerable line: 102: @route_logger(logger)",
                "// Line 103: def is_agent_active():",
                "// Line 104:     data = request.json",
                "// Line 105:     project_name = data.get(\"project_name\")",
                "// Line 106:     is_active = AgentState.is_agent_active(project_name)",
                "// Line 107:     return jsonify({\"is_active\": is_active})",
                "// Line 108: ",
                "// Line 109: ",
                "// Line 110: @app.route(\"/api/get-agent-state\", methods=[\"POST\"])",
                "// vulnerable line: 111: @route_logger(logger)",
                "// Line 112: def get_agent_state():",
                "// Line 113:     data = request.json",
                "// Line 114:     project_name = data.get(\"project_name\")",
                "// Line 115:     agent_state = AgentState.get_latest_state(project_name)",
                "// Line 116:     return jsonify({\"state\": agent_state})",
                "// Line 117: ",
                "// Line 118: ",
                "// vulnerable line: 119: @app.route(\"/api/get-project-files/\", methods=[\"GET\"])",
                "// vulnerable line: 120: @route_logger(logger)",
                "// vulnerable line: 121: def project_files():",
                "// vulnerable line: 122: project_name = request.args.get(\"project_name\")",
                "// vulnerable line: 123: files = AgentState.get_project_files(project_name)  ",
                "// vulnerable line: 124: return jsonify({\"files\": files})",
                "// Line 125: ",
                "// Line 126: ",
                "// Line 127: @app.route(\"/api/get-browser-snapshot\", methods=[\"GET\"])",
                "// vulnerable line: 128: @route_logger(logger)",
                "// Line 129: def browser_snapshot():",
                "// Line 130:     snapshot_path = request.args.get(\"snapshot_path\")",
                "// Line 131:     return send_file(snapshot_path, as_attachment=True)",
                "// Line 132: ",
                "// Line 133: ",
                "// Line 134: @app.route(\"/api/get-browser-session\", methods=[\"GET\"])",
                "// vulnerable line: 135: @route_logger(logger)",
                "// Line 136: def get_browser_session():",
                "// vulnerable line: 137: project_name = request.args.get(\"project_name\")",
                "// Line 138:     agent_state = AgentState.get_latest_state(project_name)",
                "// Line 139:     if not agent_state:",
                "// Line 140:         return jsonify({\"session\": None})",
                "// Line 141:     else:",
                "// Line 142:         browser_session = agent_state[\"browser_session\"]",
                "// Line 143:         return jsonify({\"session\": browser_session})",
                "// Line 144: ",
                "// Line 145: ",
                "// Line 146: @app.route(\"/api/get-terminal-session\", methods=[\"GET\"])",
                "// vulnerable line: 147: @route_logger(logger)",
                "// Line 148: def get_terminal_session():",
                "// vulnerable line: 149: project_name = request.args.get(\"project_name\")",
                "// Line 150:     agent_state = AgentState.get_latest_state(project_name)",
                "// Line 151:     if not agent_state:",
                "// Line 152:         return jsonify({\"terminal_state\": None})",
                "// Line 153:     else:",
                "// Line 154:         terminal_state = agent_state[\"terminal_session\"]",
                "// Line 155:         return jsonify({\"terminal_state\": terminal_state})",
                "// Line 156: ",
                "// Line 157: ",
                "// Line 158: @app.route(\"/api/run-code\", methods=[\"POST\"])",
                "// vulnerable line: 159: @route_logger(logger)",
                "// Line 160: def run_code():",
                "// Line 161:     data = request.json",
                "// Line 162:     project_name = data.get(\"project_name\")",
                "// Line 163:     code = data.get(\"code\")",
                "// Line 164:     # TODO: Implement code execution logic",
                "// Line 165:     return jsonify({\"message\": \"Code execution started\"})",
                "// Line 166: ",
                "// Line 167: ",
                "// Line 168: @app.route(\"/api/calculate-tokens\", methods=[\"POST\"])",
                "// vulnerable line: 169: @route_logger(logger)",
                "// Line 170: def calculate_tokens():",
                "// Line 171:     data = request.json",
                "// Line 172:     prompt = data.get(\"prompt\")",
                "// Line 173:     tokens = len(TIKTOKEN_ENC.encode(prompt))",
                "// Line 174:     return jsonify({\"token_usage\": tokens})",
                "// Line 175: ",
                "// Line 176: ",
                "// Line 177: @app.route(\"/api/token-usage\", methods=[\"GET\"])",
                "// vulnerable line: 178: @route_logger(logger)",
                "// Line 179: def token_usage():",
                "// vulnerable line: 180: project_name = request.args.get(\"project_name\")",
                "// Line 181:     token_count = AgentState.get_latest_token_usage(project_name)",
                "// Line 182:     return jsonify({\"token_usage\": token_count})",
                "// Line 183: ",
                "// Line 184: ",
                "// Line 185: @app.route(\"/api/logs\", methods=[\"GET\"])",
                "// Line 186: def real_time_logs():",
                "// Line 187:     log_file = logger.read_log_file()",
                "// Line 188:     return jsonify({\"logs\": log_file})",
                "// Line 189: ",
                "// Line 190: ",
                "// Line 191: @app.route(\"/api/settings\", methods=[\"POST\"])",
                "// vulnerable line: 192: @route_logger(logger)",
                "// Line 193: def set_settings():",
                "// Line 194:     data = request.json",
                "// Line 195:     config.update_config(data)",
                "// Line 196:     return jsonify({\"message\": \"Settings updated\"})",
                "// Line 197: ",
                "// Line 198: ",
                "// Line 199: @app.route(\"/api/settings\", methods=[\"GET\"])",
                "// vulnerable line: 200: @route_logger(logger)",
                "// Line 201: def get_settings():",
                "// Line 202:     configs = config.get_config()",
                "// Line 203:     return jsonify({\"settings\": configs})",
                "// Line 204: ",
                "// Line 205: ",
                "// Line 206: @app.route(\"/api/status\", methods=[\"GET\"])",
                "// vulnerable line: 207: @route_logger(logger)",
                "// Line 208: def status():",
                "// Line 209:     return jsonify({\"status\": \"server is running!\"})",
                "// Line 210: ",
                "// Line 211: if __name__ == \"__main__\":",
                "// Line 212:     logger.info(\"Devika is up and running!\")",
                "// Line 213:     socketio.run(app, debug=False, port=1337, host=\"0.0.0.0\")"
            ]
        },
        {
            "filename_of_changes": "project.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "13",
            "number_of_lines_deleted_vulnerable_to_cve": "4",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 10: ",
                "// Line 11: logger = Logger()",
                "// Line 12: manager = ProjectManager()",
                "// Line 13: ",
                "// Line 14: ",
                "// Line 15: # Project APIs",
                "// Line 16: @project_bp.route(\"/api/create-project\", methods=[\"POST\"])",
                "// Line 17: @route_logger(logger)",
                "// Line 18: def create_project():",
                "// Line 19:     data = request.json",
                "// vulnerable line: 20: project_name = data.get(\"project_name\")",
                "// vulnerable line: 21: manager.create_project(project_name)",
                "// Line 22:     return jsonify({\"message\": \"Project created\"})",
                "// Line 23: ",
                "// Line 24: ",
                "// Line 25: @project_bp.route(\"/api/delete-project\", methods=[\"POST\"])",
                "// Line 26: @route_logger(logger)",
                "// Line 27: def delete_project():",
                "// Line 28:     data = request.json",
                "// vulnerable line: 29: project_name = data.get(\"project_name\")",
                "// Line 30:     manager.delete_project(project_name)",
                "// Line 31:     AgentState().delete_state(project_name)",
                "// Line 32:     return jsonify({\"message\": \"Project deleted\"})",
                "// Line 33: ",
                "// Line 34: ",
                "// Line 35: @project_bp.route(\"/api/download-project\", methods=[\"GET\"])",
                "// Line 36: @route_logger(logger)",
                "// Line 37: def download_project():",
                "// vulnerable line: 38: project_name = request.args.get(\"project_name\")",
                "// Line 39:     manager.project_to_zip(project_name)",
                "// Line 40:     project_path = manager.get_zip_path(project_name)",
                "// Line 41:     return send_file(project_path, as_attachment=False)",
                "// Line 42: ",
                "// Line 43: ",
                "// Line 44: @project_bp.route(\"/api/download-project-pdf\", methods=[\"GET\"])",
                "// Line 45: @route_logger(logger)",
                "// Line 46: def download_project_pdf():",
                "// vulnerable line: 47: project_name = request.args.get(\"project_name\")",
                "// Line 48:     pdf_dir = Config().get_pdfs_dir()",
                "// Line 49:     pdf_path = os.path.join(pdf_dir, f\"{project_name}.pdf\")",
                "// Line 50: ",
                "// Line 51:     response = make_response(send_file(pdf_path))",
                "// Line 52:     response.headers['Content-Type'] = 'project_bplication/pdf'",
                "// Line 53:     return response"
            ]
        },
        {
            "filename_of_changes": "project.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "29",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "state.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "25",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 168:                 session.add(agent_state)",
                "// Line 169:                 session.commit()",
                "// Line 170: ",
                "// Line 171:     def get_latest_token_usage(self, project: str):",
                "// Line 172:         with Session(self.engine) as session:",
                "// Line 173:             agent_state = session.query(AgentStateModel).filter(AgentStateModel.project == project).first()",
                "// Line 174:             if agent_state:",
                "// Line 175:                 return json.loads(agent_state.state_stack_json)[-1][\"token_usage\"]",
                "// Line 176:             return 0",
                "// Line 177: ",
                "// vulnerable line: 178: def get_project_files(self, project_name: str):",
                "// vulnerable line: 179: if not project_name:",
                "// vulnerable line: 180: return []",
                "// vulnerable line: 181: project_directory = \"-\".join(project_name.split(\" \"))",
                "// vulnerable line: 182: directory = os.path.join(os.getcwd(), 'data', 'projects', project_directory) ",
                "// vulnerable line: 183: if(not os.path.exists(directory)):",
                "// vulnerable line: 184: return []",
                "// vulnerable line: 185: files = []",
                "// vulnerable line: 186: for root, _, filenames in os.walk(directory):",
                "// vulnerable line: 187: for filename in filenames:",
                "// vulnerable line: 188: file_relative_path = os.path.relpath(root, directory)",
                "// vulnerable line: 189: if file_relative_path == '.': file_relative_path = ''",
                "// vulnerable line: 190: file_path = os.path.join(file_relative_path, filename)",
                "// vulnerable line: 191: print(\"file_path\",file_path)",
                "// vulnerable line: 192: try:",
                "// vulnerable line: 193: with open(os.path.join(root, filename), 'r') as file:",
                "// vulnerable line: 194: print(\"File:\", filename)",
                "// vulnerable line: 195: files.append({",
                "// vulnerable line: 196: \"file\": file_path,",
                "// vulnerable line: 197: \"code\": file.read()",
                "// vulnerable line: 198: })",
                "// vulnerable line: 199: except Exception as e:",
                "// vulnerable line: 200: print(f\"Error reading file {filename}: {e}\")",
                "// vulnerable line: 201: return files"
            ]
        }
    ]
}