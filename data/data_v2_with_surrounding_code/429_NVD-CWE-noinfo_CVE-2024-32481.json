{
    "cve_id": "CVE-2024-32481",
    "cve_description": "Vyper is a pythonic Smart Contract Language for the Ethereum virtual machine. Starting in version 0.3.8 and prior to version 0.4.0b1, when looping over a `range` of the form `range(start, start + N)`, if `start` is negative, the execution will always revert. This issue is caused by an incorrect assertion inserted by the code generation of the range `stmt.parse_For_range()`. The issue arises when `start` is signed, instead of using `sle`, `le` is used and `start` is interpreted as an unsigned integer for the comparison. If it is a negative number, its 255th bit is set to `1` and is hence interpreted as a very large unsigned integer making the assertion always fail. Any contract having a `range(start, start + N)` where `start` is a signed integer with the possibility for `start` to be negative is affected. If a call goes through the loop while supplying a negative `start` the execution will revert. Version 0.4.0b1 fixes the issue.",
    "cve_publish_date": "2024-04-25T17:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Merge pull request from GHSA-6r8q-pfpv-7cgj\n\nfor loops of the form `for i in range(x, x+N)`, the range of the\niterator is not checked, leading to potential overflow. the following\nexample demonstrates the potential for overflow:\n\n```\n@external\ndef test() -> uint16:\n    x:uint8 = 255\n    a:uint8 = 0\n    for i in range(x, x+2):\n        a = i\n    return convert(a,uint16)  # returns 256\n```\n\nthis commit fixes the issue by adding a range check before entering the\nloop body.",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "stmt.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        }
    ]
}