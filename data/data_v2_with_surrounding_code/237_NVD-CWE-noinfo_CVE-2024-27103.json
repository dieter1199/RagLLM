{
    "cve_id": "CVE-2024-27103",
    "cve_description": "Querybook is a Big Data Querying UI. When a user searches for their queries, datadocs, tables and lists, the search result is marked and highlighted, and this feature uses dangerouslySetInnerHTML which means that if the highlighted result has an XSS payload it will trigger. While the input to dangerouslySetInnerHTML is not sanitized for the data inside of queries which leads to an XSS vulnerability. During the \"query auto-suggestion\" the name of the suggested tables are set with innerHTML which leads to the XSS vulnerability. A patch to rectify this issue has been introduced in Querybook version 3.31.2.",
    "cve_publish_date": "2024-02-28T18:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Merge pull request from GHSA-3hjm-9277-5c88\n\n* Fix XSS vulnerabilities\n\n* remove console.log",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "SearchResultItem.tsx",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "19",
            "number_of_lines_deleted_vulnerable_to_cve": "6",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 48:             );",
                "// Line 49:         }",
                "// Line 50:         return highlightedTitle;",
                "// Line 51:     }, [title, searchString]);",
                "// Line 52: ",
                "// Line 53:     return highlightedTitle && highlightedTitle !== 'Untitled' ? (",
                "// Line 54:         <AccentText size=\"smedium\" weight=\"bold\" color=\"text\" hover>",
                "// Line 55:             <div",
                "// Line 56:                 className=\"result-item-title\"",
                "// Line 57:                 dangerouslySetInnerHTML={{",
                "// vulnerable line: 58: __html: highlightedTitle,",
                "// Line 59:                 }}",
                "// Line 60:             />",
                "// Line 61:         </AccentText>",
                "// Line 62:     ) : (",
                "// Line 63:         <UntitledText size=\"smedium\" />",
                "// Line 64:     );",
                "// Line 65: };",
                "// Line 66: ",
                "// Line 67: function formatHighlightStrings(strArr: string[]) {",
                "// Line 68:     return strArr.join(' ... ').replace(/<\\/mark>\\s*<mark>/g, ' ');",
                "// Line 159:                 noPadding",
                "// Line 160:                 icon={isQueryTextExpanded ? 'Minimize2' : 'Maximize2'}",
                "// Line 161:                 size={14}",
                "// Line 162:                 onClick={() =>",
                "// Line 163:                     setIsQueryTextExpanded((isExpaneded) => !isExpaneded)",
                "// Line 164:                 }",
                "// Line 165:             />",
                "// Line 166:             {!isQueryTextExpanded ? (",
                "// Line 167:                 <span",
                "// Line 168:                     dangerouslySetInnerHTML={{",
                "// vulnerable line: 169: __html: formatHighlightStrings(",
                "// vulnerable line: 170: queryTextHighlightedContent",
                "// Line 171:                         ),",
                "// Line 172:                     }}",
                "// Line 173:                 />",
                "// Line 174:             ) : (",
                "// Line 175:                 getSyntaxHighlightedQueryDOM()",
                "// Line 176:             )}",
                "// Line 177:         </div>",
                "// Line 178:     );",
                "// Line 179: ",
                "// Line 180:     // If there are no highlighted sections in query text returned, display",
                "// Line 274:             </div>",
                "// Line 275:         );",
                "// Line 276:     }",
                "// Line 277: ",
                "// Line 278:     const title = preview.title || 'Untitled Doc';",
                "// Line 279:     const dataDocContent = (preview.highlight || {}).cells;",
                "// Line 280:     const descriptionDOM = dataDocContent && (",
                "// Line 281:         <span",
                "// Line 282:             className=\"result-item-description\"",
                "// Line 283:             dangerouslySetInnerHTML={{",
                "// vulnerable line: 284: __html: formatHighlightStrings(dataDocContent),",
                "// Line 285:             }}",
                "// Line 286:         />",
                "// Line 287:     );",
                "// Line 288: ",
                "// Line 289:     return (",
                "// Line 290:         <div className=\"SearchResultItemContainer\">",
                "// Line 291:             <div",
                "// Line 292:                 className=\"SearchResultItem DataDocItem\"",
                "// Line 293:                 onClick={handleClick}",
                "// Line 294:                 ref={selfRef}",
                "// Line 374:     const goldenIcon = golden ? (",
                "// Line 375:         <div className=\"result-item-golden ml4\">",
                "// Line 376:             <Icon className=\"crown\" name=\"Crown\" />",
                "// Line 377:         </div>",
                "// Line 378:     ) : null;",
                "// Line 379: ",
                "// Line 380:     const highlightedDescription = (preview.highlight || {}).description;",
                "// Line 381:     const descriptionDOM = highlightedDescription ? (",
                "// Line 382:         <span",
                "// Line 383:             dangerouslySetInnerHTML={{",
                "// vulnerable line: 384: __html: formatHighlightStrings(highlightedDescription),",
                "// Line 385:             }}",
                "// Line 386:         />",
                "// Line 387:     ) : (",
                "// Line 388:         description || 'no description'",
                "// Line 389:     );",
                "// Line 390: ",
                "// Line 391:     const tagsListDOM = tags?.length ? (",
                "// Line 392:         <div>",
                "// Line 393:             {tags.map((tag) => (",
                "// Line 394:                 <Tag mini key={tag}>",
                "// Line 477:             </div>",
                "// Line 478:         );",
                "// Line 479:     }",
                "// Line 480: ",
                "// Line 481:     const title = preview.title || 'Untitled Board';",
                "// Line 482: ",
                "// Line 483:     const highlightedDescription = preview.highlight?.description;",
                "// Line 484:     const descriptionDOM = highlightedDescription ? (",
                "// Line 485:         <span",
                "// Line 486:             dangerouslySetInnerHTML={{",
                "// vulnerable line: 487: __html: formatHighlightStrings(highlightedDescription),",
                "// Line 488:             }}",
                "// Line 489:         />",
                "// Line 490:     ) : (",
                "// Line 491:         description || 'No list description'",
                "// Line 492:     );",
                "// Line 493: ",
                "// Line 494:     return (",
                "// Line 495:         <div className=\"SearchResultItemContainer\">",
                "// Line 496:             <div",
                "// Line 497:                 className=\"SearchResultItem BoardItem\""
            ]
        },
        {
            "filename_of_changes": "StatementLog.tsx",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 97:     const logViewerDOM = (",
                "// Line 98:         <div",
                "// Line 99:             ref={logRef}",
                "// Line 100:             onScroll={(event) => {",
                "// Line 101:                 if (event.target === logRef.current) {",
                "// Line 102:                     updateScrollPosition(logRef.current.scrollTop);",
                "// Line 103:                 }",
                "// Line 104:             }}",
                "// Line 105:             className=\"statement-execution-log-container\"",
                "// Line 106:             dangerouslySetInnerHTML={{",
                "// vulnerable line: 107: __html: logText,",
                "// Line 108:             }}",
                "// Line 109:         />",
                "// Line 110:     );",
                "// Line 111: ",
                "// Line 112:     return (",
                "// Line 113:         <div",
                "// Line 114:             className={clsx({",
                "// Line 115:                 StatementExecutionLog: true,",
                "// Line 116:                 'is-fullscreen': fullScreen,",
                "// Line 117:             })}"
            ]
        },
        {
            "filename_of_changes": "sql-autocompleter.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "7",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: import { getLanguageSetting, ILanguageSetting } from './sql-setting';",
                "// Line 2: ",
                "// Line 3: import CodeMirror from 'lib/codemirror';",
                "// Line 4: import { ICodeAnalysis, TableToken } from 'lib/sql-helper/sql-lexer';",
                "// Line 5: import { reduxStore } from 'redux/store';",
                "// Line 6: import { SearchTableResource } from 'resource/search';",
                "// vulnerable line: 7: import { bind } from 'lodash-decorators';",
                "// Line 8: ",
                "// Line 9: interface ILineAnalysis {",
                "// Line 10:     statementNum: number;",
                "// Line 11:     context: string;",
                "// Line 12:     reference: TableToken[];",
                "// Line 13:     alias: Record<string, TableToken>;",
                "// Line 14: }",
                "// Line 15: ",
                "// Line 16: /**",
                "// Line 17:  * CompletionRow used by Codemirror.",
                "// Line 401:                               : word",
                "// Line 402:                       )",
                "// Line 403:                       .join('.')",
                "// Line 404:                 : data.label.replace(",
                "// Line 405:                       data.originalText,",
                "// Line 406:                       `<b style='font-weight: bold'>${data.originalText}</b>`",
                "// Line 407:                   );",
                "// Line 408: ",
                "// Line 409:         const div = document.createElement('div');",
                "// Line 410:         div.className = 'code-editor-autocomplete-wrapper';",
                "// vulnerable line: 411: div.innerHTML = `",
                "// Line 412:             <span class=\"code-editor-autocomplete-span code-editor-text-span\">",
                "// Line 413:                 ${text}",
                "// Line 414:             </span>",
                "// Line 415:             <span class=\"code-editor-autocomplete-span code-editor-tooltip-span\">",
                "// Line 416:                 ${tooltip}",
                "// Line 417:             </span>",
                "// vulnerable line: 418: `;",
                "// Line 419: ",
                "// Line 420:         element.appendChild(div);",
                "// Line 421:     }",
                "// Line 422: ",
                "// Line 423:     private getAutoSuggestionFormatters(type: string, text: string): Formatter {",
                "// Line 424:         const keywordFormatter: Formatter = (word) => {",
                "// Line 425:             const upperCasedWord = word.toUpperCase();",
                "// Line 426:             const upperCasedString = text.toUpperCase();",
                "// Line 427:             const score = -upperCasedWord.length;",
                "// Line 428:             return {"
            ]
        }
    ]
}