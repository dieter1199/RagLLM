{
    "cve_id": "CVE-2024-1625",
    "cve_description": "An Insecure Direct Object Reference (IDOR) vulnerability exists in the lunary-ai/lunary application version 0.3.0, allowing unauthorized deletion of any organization's project. The vulnerability is due to insufficient authorization checks in the project deletion endpoint, where the endpoint fails to verify if the project ID provided in the request belongs to the requesting user's organization. As a result, an attacker can delete projects belonging to any organization by sending a crafted DELETE request with the target project's ID. This issue affects the project deletion functionality implemented in the projects.delete route.",
    "cve_publish_date": "2024-04-10T17:15Z",
    "cwe_id": "CWE-863",
    "cwe_name": "Incorrect Authorization",
    "cwe_description": "The product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. This allows attackers to bypass intended access restrictions.",
    "commit_message": "fix: project deletion safeguard",
    "type_of_change": "Addition",
    "changes": [
        {
            "filename_of_changes": "authorization.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "13",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "index.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "15",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: import sql from \"@/src/utils/db\"",
                "// Line 2: import Context from \"@/src/utils/koa\"",
                "// Line 3: import Router from \"koa-router\"",
                "// Line 4: import { z } from \"zod\"",
                "// Line 5: ",
                "// Line 6: const projects = new Router({",
                "// Line 7:   prefix: \"/projects\",",
                "// Line 8: })",
                "// Line 9: ",
                "// Line 10: projects.get(\"/\", async (ctx: Context) => {",
                "// vulnerable line: 11: const { orgId } = ctx.state",
                "// Line 12: ",
                "// Line 13:   const rows = await sql`",
                "// Line 14:     select",
                "// Line 15:       id,",
                "// Line 16:       created_at,",
                "// Line 17:       name,",
                "// Line 18:       org_id,",
                "// Line 19:       exists(select * from run where project_id = project.id) as activated,",
                "// Line 20:       (select api_key from api_key where project_id = project.id and type = 'public') as public_api_key,",
                "// Line 21:       (select api_key from api_key where project_id = project.id and type = 'private') as private_api_key ",
                "// Line 22:     from",
                "// Line 23:       project",
                "// Line 24:     where",
                "// Line 25:       org_id = ${orgId}",
                "// Line 26:   `",
                "// Line 27: ",
                "// Line 28:   ctx.body = rows",
                "// Line 29: })",
                "// Line 30: ",
                "// Line 31: projects.post(\"/\", async (ctx: Context) => {",
                "// vulnerable line: 32: const { orgId } = ctx.state",
                "// Line 33: ",
                "// Line 34:   const bodySchema = z.object({",
                "// Line 35:     name: z.string(),",
                "// Line 36:   })",
                "// Line 37:   const { name } = bodySchema.parse(ctx.request.body)",
                "// Line 38: ",
                "// Line 39:   const [org] = await sql`select * from org where id = ${orgId}`",
                "// Line 40: ",
                "// Line 41:   if (org.plan === \"free\") {",
                "// Line 42:     ctx.throw(403, \"You can't create more than two project under the free plan\")",
                "// Line 62:       type: \"private\",",
                "// Line 63:       projectId: project.id,",
                "// Line 64:     },",
                "// Line 65:   ]",
                "// Line 66:   await sql`insert into api_key ${sql(privateKey)}`",
                "// Line 67:   ctx.body = project",
                "// Line 68: })",
                "// Line 69: ",
                "// Line 70: projects.delete(\"/:projectId\", async (ctx: Context) => {",
                "// Line 71:   const { projectId } = ctx.params",
                "// vulnerable line: 72: const { orgId } = ctx.state",
                "// Line 73: ",
                "// Line 74:   const [{ count }] =",
                "// Line 75:     await sql`select count(*)::int from  project where org_id = ${orgId}`",
                "// Line 76: ",
                "// Line 77:   if (count > 1) {",
                "// Line 78:     await sql`delete from project where id = ${projectId}`",
                "// Line 79:     ctx.status = 200",
                "// Line 80:   } else {",
                "// Line 81:     ctx.status = 422",
                "// Line 82: "
            ]
        }
    ]
}