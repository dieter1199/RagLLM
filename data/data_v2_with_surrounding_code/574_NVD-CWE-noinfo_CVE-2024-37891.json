{
    "cve_id": "CVE-2024-37891",
    "cve_description": " urllib3 is a user-friendly HTTP client library for Python. When using urllib3's proxy support with `ProxyManager`, the `Proxy-Authorization` header is only sent to the configured proxy, as expected. However, when sending HTTP requests *without* using urllib3's proxy support, it's possible to accidentally configure the `Proxy-Authorization` header even though it won't have any effect as the request is not using a forwarding proxy or a tunneling proxy. In those cases, urllib3 doesn't treat the `Proxy-Authorization` HTTP header as one carrying authentication material and thus doesn't strip the header on cross-origin redirects. Because this is a highly unlikely scenario, we believe the severity of this vulnerability is low for almost all users. Out of an abundance of caution urllib3 will automatically strip the `Proxy-Authorization` header during cross-origin redirects to avoid the small chance that users are doing this on accident. Users should use urllib3's proxy support or disable automatic redirects to achieve safe processing of the `Proxy-Authorization` header, but we still decided to strip the header by default in order to further protect users who aren't using the correct approach. We believe the number of usages affected by this advisory is low. It requires all of the following to be true to be exploited: 1. Setting the `Proxy-Authorization` header without using urllib3's built-in proxy support. 2. Not disabling HTTP redirects. 3. Either not using an HTTPS origin server or for the proxy or target origin to redirect to a malicious origin. Users are advised to update to either version 1.26.19 or version 2.2.2. Users unable to upgrade may use the `Proxy-Authorization` header with urllib3's `ProxyManager`, disable HTTP redirects using `redirects=False` when sending requests, or not user the `Proxy-Authorization` header as mitigations.",
    "cve_publish_date": "2024-06-17T20:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Merge pull request from GHSA-34jh-p97f-mpxf\n\n* Strip Proxy-Authorization header on redirects\n\n* Fix test_retry_default_remove_headers_on_redirect\n\n* Set release date",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "retry.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 182: ",
                "// Line 183:     #: Default methods to be used for ``allowed_methods``",
                "// Line 184:     DEFAULT_ALLOWED_METHODS = frozenset(",
                "// Line 185:         [\"HEAD\", \"GET\", \"PUT\", \"DELETE\", \"OPTIONS\", \"TRACE\"]",
                "// Line 186:     )",
                "// Line 187: ",
                "// Line 188:     #: Default status codes to be used for ``status_forcelist``",
                "// Line 189:     RETRY_AFTER_STATUS_CODES = frozenset([413, 429, 503])",
                "// Line 190: ",
                "// Line 191:     #: Default headers to be used for ``remove_headers_on_redirect``",
                "// vulnerable line: 192: DEFAULT_REMOVE_HEADERS_ON_REDIRECT = frozenset([\"Cookie\", \"Authorization\"])",
                "// Line 193: ",
                "// Line 194:     #: Default maximum backoff time.",
                "// Line 195:     DEFAULT_BACKOFF_MAX = 120",
                "// Line 196: ",
                "// Line 197:     # Backward compatibility; assigned outside of the class.",
                "// Line 198:     DEFAULT: typing.ClassVar[Retry]",
                "// Line 199: ",
                "// Line 200:     def __init__(",
                "// Line 201:         self,",
                "// Line 202:         total: bool | int | None = 10,"
            ]
        },
        {
            "filename_of_changes": "test_poolmanager.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "24",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 137:             assert len(http.pools) == 1",
                "// Line 138:             pool = http.connection_from_host(self.host, self.port)",
                "// Line 139:             assert pool.num_connections == 1",
                "// Line 140: ",
                "// Line 141:     def test_redirect_cross_host_remove_headers(self) -> None:",
                "// Line 142:         with PoolManager() as http:",
                "// Line 143:             r = http.request(",
                "// Line 144:                 \"GET\",",
                "// Line 145:                 f\"{self.base_url}/redirect\",",
                "// Line 146:                 fields={\"target\": f\"{self.base_url_alt}/headers\"},",
                "// vulnerable line: 147: headers={\"Authorization\": \"foo\", \"Cookie\": \"foo=bar\"},",
                "// Line 148:             )",
                "// Line 149: ",
                "// Line 150:             assert r.status == 200",
                "// Line 151: ",
                "// Line 152:             data = r.json()",
                "// Line 153: ",
                "// Line 154:             assert \"Authorization\" not in data",
                "// Line 155:             assert \"Cookie\" not in data",
                "// Line 156: ",
                "// Line 157:             r = http.request(",
                "// Line 158:                 \"GET\",",
                "// Line 159:                 f\"{self.base_url}/redirect\",",
                "// Line 160:                 fields={\"target\": f\"{self.base_url_alt}/headers\"},",
                "// vulnerable line: 161: headers={\"authorization\": \"foo\", \"cookie\": \"foo=bar\"},",
                "// Line 162:             )",
                "// Line 163: ",
                "// Line 164:             assert r.status == 200",
                "// Line 165: ",
                "// Line 166:             data = r.json()",
                "// Line 167: ",
                "// Line 168:             assert \"authorization\" not in data",
                "// Line 169:             assert \"Authorization\" not in data",
                "// Line 170:             assert \"cookie\" not in data",
                "// Line 171:             assert \"Cookie\" not in data",
                "// Line 172: ",
                "// Line 173:     def test_redirect_cross_host_no_remove_headers(self) -> None:",
                "// Line 174:         with PoolManager() as http:",
                "// Line 175:             r = http.request(",
                "// Line 176:                 \"GET\",",
                "// Line 177:                 f\"{self.base_url}/redirect\",",
                "// Line 178:                 fields={\"target\": f\"{self.base_url_alt}/headers\"},",
                "// vulnerable line: 179: headers={\"Authorization\": \"foo\", \"Cookie\": \"foo=bar\"},",
                "// Line 180:                 retries=Retry(remove_headers_on_redirect=[]),",
                "// Line 181:             )",
                "// Line 182: ",
                "// Line 183:             assert r.status == 200",
                "// Line 184: ",
                "// Line 185:             data = r.json()",
                "// Line 186: ",
                "// Line 187:             assert data[\"Authorization\"] == \"foo\"",
                "// Line 188:             assert data[\"Cookie\"] == \"foo=bar\"",
                "// Line 189: "
            ]
        },
        {
            "filename_of_changes": "test_retry.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "5",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 327: ",
                "// Line 328:     def test_retry_method_not_allowed(self) -> None:",
                "// Line 329:         error = ReadTimeoutError(DUMMY_POOL, \"/\", \"read timed out\")",
                "// Line 330:         retry = Retry()",
                "// Line 331:         with pytest.raises(ReadTimeoutError):",
                "// Line 332:             retry.increment(method=\"POST\", error=error)",
                "// Line 333: ",
                "// Line 334:     def test_retry_default_remove_headers_on_redirect(self) -> None:",
                "// Line 335:         retry = Retry()",
                "// Line 336: ",
                "// vulnerable line: 337: assert retry.remove_headers_on_redirect == {\"authorization\", \"cookie\"}",
                "// Line 338: ",
                "// Line 339:     def test_retry_set_remove_headers_on_redirect(self) -> None:",
                "// Line 340:         retry = Retry(remove_headers_on_redirect=[\"X-API-Secret\"])",
                "// Line 341: ",
                "// Line 342:         assert retry.remove_headers_on_redirect == {\"x-api-secret\"}",
                "// Line 343: ",
                "// Line 344:     @pytest.mark.parametrize(\"value\", [\"-1\", \"+1\", \"1.0\", \"²\"])  # ² = ^2",
                "// Line 345:     def test_parse_retry_after_invalid(self, value: str) -> None:",
                "// Line 346:         retry = Retry()",
                "// Line 347:         with pytest.raises(InvalidHeader):"
            ]
        }
    ]
}