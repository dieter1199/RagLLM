{
    "cve_id": "CVE-2024-30261",
    "cve_description": "Undici is an HTTP/1.1 client, written from scratch for Node.js. An attacker can alter the `integrity` option passed to `fetch()`, allowing `fetch()` to accept requests as valid even if they have been tampered. This vulnerability was patched in version(s) 5.28.4 and 6.11.1.",
    "cve_publish_date": "2024-04-04T15:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Merge pull request from GHSA-9qxr-qj54-h672\n\nCo-authored-by: uzlopak <aras.abbasi@googlemail.com>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "util.js",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "13",
            "number_of_lines_deleted_vulnerable_to_cve": "12",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 277:   await t.test('should parse valid metadata with option', () => {",
                "// Line 278:     const body = 'Hello world!'",
                "// Line 279:     const hash256 = createHash('sha256').update(body).digest('base64')",
                "// Line 280:     const hash384 = createHash('sha384').update(body).digest('base64')",
                "// Line 281:     const hash512 = createHash('sha512').update(body).digest('base64')",
                "// Line 282: ",
                "// Line 283:     const validMetadata = `sha256-${hash256} !@ sha384-${hash384} !@ sha512-${hash512} !@`",
                "// Line 284:     const result = util.parseMetadata(validMetadata)",
                "// Line 285: ",
                "// Line 286:     assert.deepEqual(result, [",
                "// vulnerable line: 287: { algo: 'sha256', hash: hash256 },",
                "// vulnerable line: 288: { algo: 'sha384', hash: hash384 },",
                "// vulnerable line: 289: { algo: 'sha512', hash: hash512 }",
                "// Line 290:     ])",
                "// Line 291:   })",
                "// Line 292: ",
                "// Line 293:   await t.test('should parse valid metadata with non ASCII chars option', () => {",
                "// Line 294:     const body = 'Hello world!'",
                "// Line 295:     const hash256 = createHash('sha256').update(body).digest('base64')",
                "// Line 296:     const hash384 = createHash('sha384').update(body).digest('base64')",
                "// Line 297:     const hash512 = createHash('sha512').update(body).digest('base64')",
                "// Line 298: ",
                "// Line 299:     const validMetadata = `sha256-${hash256} !© sha384-${hash384} !€ sha512-${hash512} !µ`",
                "// Line 300:     const result = util.parseMetadata(validMetadata)",
                "// Line 301: ",
                "// Line 302:     assert.deepEqual(result, [",
                "// vulnerable line: 303: { algo: 'sha256', hash: hash256 },",
                "// vulnerable line: 304: { algo: 'sha384', hash: hash384 },",
                "// vulnerable line: 305: { algo: 'sha512', hash: hash512 }",
                "// Line 306:     ])",
                "// Line 307:   })",
                "// Line 308: ",
                "// Line 309:   await t.test('should parse valid metadata without option', () => {",
                "// Line 310:     const body = 'Hello world!'",
                "// Line 311:     const hash256 = createHash('sha256').update(body).digest('base64')",
                "// Line 312:     const hash384 = createHash('sha384').update(body).digest('base64')",
                "// Line 313:     const hash512 = createHash('sha512').update(body).digest('base64')",
                "// Line 314: ",
                "// Line 315:     const validMetadata = `sha256-${hash256} sha384-${hash384} sha512-${hash512}`",
                "// Line 316:     const result = util.parseMetadata(validMetadata)",
                "// Line 317: ",
                "// Line 318:     assert.deepEqual(result, [",
                "// vulnerable line: 319: { algo: 'sha256', hash: hash256 },",
                "// vulnerable line: 320: { algo: 'sha384', hash: hash384 },",
                "// vulnerable line: 321: { algo: 'sha512', hash: hash512 }",
                "// Line 322:     ])",
                "// Line 323:   })",
                "// Line 324: ",
                "// vulnerable line: 325: await t.test('should ignore invalid metadata with invalid base64 chars', () => {",
                "// Line 326:     const body = 'Hello world!'",
                "// Line 327:     const hash256 = createHash('sha256').update(body).digest('base64')",
                "// Line 328:     const invalidHash384 = 'zifp5hE1Xl5LQQqQz[]Bq/iaq9Wb6jVb//T7EfTmbXD2aEP5c2ZdJr9YTDfcTE1ZH+'",
                "// Line 329:     const hash512 = createHash('sha512').update(body).digest('base64')",
                "// Line 330: ",
                "// Line 331:     const validMetadata = `sha256-${hash256} sha384-${invalidHash384} sha512-${hash512}`",
                "// Line 332:     const result = util.parseMetadata(validMetadata)",
                "// Line 333: ",
                "// Line 334:     assert.deepEqual(result, [",
                "// vulnerable line: 335: { algo: 'sha256', hash: hash256 },",
                "// vulnerable line: 336: { algo: 'sha512', hash: hash512 }",
                "// Line 337:     ])",
                "// Line 338:   })",
                "// Line 339: })"
            ]
        }
    ]
}