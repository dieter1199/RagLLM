{
    "cve_id": "CVE-2024-32881",
    "cve_description": "Danswer is the AI Assistant connected to company's docs, apps, and people. Danswer is vulnerable to unauthorized access to GET/SET of Slack Bot Tokens. Anyone with network access can steal slack bot tokens and set them. This implies full compromise of the customer's slack bot, leading to internal Slack access. This issue was patched in version 3.63.",
    "cve_publish_date": "2024-04-26T21:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Slack improvement",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "slack_bot.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "5",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 185:     _: User | None = Depends(current_admin_user),",
                "// Line 186: ) -> list[SlackBotConfig]:",
                "// Line 187:     slack_bot_config_models = fetch_slack_bot_configs(db_session=db_session)",
                "// Line 188:     return [",
                "// Line 189:         SlackBotConfig.from_model(slack_bot_config_model)",
                "// Line 190:         for slack_bot_config_model in slack_bot_config_models",
                "// Line 191:     ]",
                "// Line 192: ",
                "// Line 193: ",
                "// Line 194: @router.put(\"/admin/slack-bot/tokens\")",
                "// vulnerable line: 195: def put_tokens(tokens: SlackBotTokens) -> None:",
                "// Line 196:     save_tokens(tokens=tokens)",
                "// Line 197: ",
                "// Line 198: ",
                "// Line 199: @router.get(\"/admin/slack-bot/tokens\")",
                "// vulnerable line: 200: def get_tokens() -> SlackBotTokens:",
                "// Line 201:     try:",
                "// Line 202:         return fetch_tokens()",
                "// Line 203:     except ConfigNotFoundError:",
                "// Line 204:         raise HTTPException(status_code=404, detail=\"No tokens found\")"
            ]
        }
    ]
}