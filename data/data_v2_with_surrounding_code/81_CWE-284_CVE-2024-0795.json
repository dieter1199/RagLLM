{
    "cve_id": "CVE-2024-0795",
    "cve_description": "If an attacked was given access to an instance with the admin or manager role there is no backend authentication that would prevent the attacked from creating a new user with an `admin` role and then be able to use this new account to have elevated privileges on the instance",
    "cve_publish_date": "2024-03-02T22:15Z",
    "cwe_id": "CWE-284",
    "cwe_name": "Improper Access Control",
    "cwe_description": "The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.",
    "commit_message": "Implement total permission overhaul (#629)\n\n* Implement total permission overhaul\r\nAdd explicit permissions on each flex and strict route\r\nPatch issues with role escalation and CRUD of users\r\nPatch permissions on all routes for coverage\r\nImprove middleware to accept role array for clarity\r\n\r\n* update comments\r\n\r\n* remove permissions to API-keys for manager. Manager could generate API-key and using high-privelege api-key give themselves admin\r\n\r\n* update sidebar permissions for multi-user and single user\r\n\r\n* update options for mobile sidebar",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "index.js",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "7",
            "number_of_lines_deleted_vulnerable_to_cve": "16",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 13:     /*",
                "// Line 14:     #swagger.tags = ['Admin']",
                "// Line 15:     #swagger.description = 'Check to see if the instance is in multi-user-mode first. Methods are disabled until multi user mode is enabled via the UI.'",
                "// Line 16:     #swagger.responses[200] = {",
                "// Line 17:       content: {",
                "// Line 18:         \"application/json\": {",
                "// Line 19:           schema: {",
                "// Line 20:             type: 'object',",
                "// Line 21:             example: {",
                "// Line 22:              \"isMultiUser\": true",
                "// vulnerable line: 23: }",
                "// vulnerable line: 24: }",
                "// vulnerable line: 25: }",
                "// vulnerable line: 26: }",
                "// vulnerable line: 27: }",
                "// Line 28:     #swagger.responses[403] = {",
                "// Line 29:       schema: {",
                "// Line 30:         \"$ref\": \"#/definitions/InvalidAPIKey\"",
                "// vulnerable line: 31: }",
                "// vulnerable line: 32: }",
                "// Line 33:     */",
                "// Line 34:     const isMultiUser = multiUserMode(response);",
                "// Line 35:     response.status(200).json({ isMultiUser });",
                "// vulnerable line: 36: });",
                "// Line 37: ",
                "// Line 38:   app.get(\"/v1/admin/users\", [validApiKey], async (request, response) => {",
                "// Line 39:     /*",
                "// Line 40:     #swagger.tags = ['Admin']",
                "// Line 41:     #swagger.description = 'Check to see if the instance is in multi-user-mode first. Methods are disabled until multi user mode is enabled via the UI.'",
                "// Line 42:     #swagger.responses[200] = {",
                "// Line 43:       content: {",
                "// Line 44:         \"application/json\": {",
                "// Line 45:           schema: {",
                "// Line 46:             type: 'object',",
                "// Line 47:             example: {",
                "// Line 48:              \"users\": [",
                "// Line 49:                 {",
                "// Line 50:                   username: \"sample-sam\",",
                "// Line 51:                   role: 'default',",
                "// vulnerable line: 52: }",
                "// Line 53:              ]",
                "// vulnerable line: 54: }",
                "// vulnerable line: 55: }",
                "// vulnerable line: 56: }",
                "// vulnerable line: 57: }",
                "// vulnerable line: 58: }",
                "// Line 59:     #swagger.responses[403] = {",
                "// Line 60:       schema: {",
                "// Line 61:         \"$ref\": \"#/definitions/InvalidAPIKey\"",
                "// vulnerable line: 62: }",
                "// vulnerable line: 63: }",
                "// Line 64:      #swagger.responses[401] = {",
                "// Line 65:       description: \"Instance is not in Multi-User mode. Method denied\",",
                "// vulnerable line: 66: }",
                "// Line 67:     */",
                "// Line 68:     try {",
                "// Line 69:       if (!multiUserMode(response)) {",
                "// Line 70:         response.sendStatus(401).end();",
                "// vulnerable line: 71: return;",
                "// vulnerable line: 72: }",
                "// Line 73: ",
                "// Line 74:       const users = (await User.where()).map((user) => {",
                "// Line 75:         const { password, ...rest } = user;",
                "// Line 76:         return rest;",
                "// vulnerable line: 77: });",
                "// Line 78:       response.status(200).json({ users });",
                "// Line 79:     } catch (e) {",
                "// Line 80:       console.error(e);",
                "// Line 81:       response.sendStatus(500).end();",
                "// vulnerable line: 82: }",
                "// vulnerable line: 83: });",
                "// Line 84: ",
                "// Line 85:   app.post(\"/v1/admin/users/new\", [validApiKey], async (request, response) => {",
                "// Line 86:     /*",
                "// Line 87:     #swagger.tags = ['Admin']",
                "// Line 88:     #swagger.description = 'Create a new user with username and password. Methods are disabled until multi user mode is enabled via the UI.'",
                "// Line 89:     #swagger.requestBody = {",
                "// Line 90:         description: 'Key pair object that will define the new user to add to the system.',",
                "// Line 91:         required: true,",
                "// Line 92:         type: 'object',",
                "// Line 93:         content: {",
                "// Line 94:           \"application/json\": {",
                "// Line 95:             example: {",
                "// Line 96:               username: \"sample-sam\",",
                "// Line 97:               password: 'hunter2',",
                "// Line 98:               role: 'default | admin'",
                "// vulnerable line: 99: }",
                "// vulnerable line: 100: }",
                "// vulnerable line: 101: }",
                "// vulnerable line: 102: }",
                "// Line 103:     #swagger.responses[200] = {",
                "// Line 104:       content: {",
                "// Line 105:         \"application/json\": {",
                "// Line 106:           schema: {",
                "// Line 107:             type: 'object',",
                "// Line 108:             example: {",
                "// Line 109:               user: {",
                "// Line 110:                 id: 1,",
                "// Line 111:                 username: 'sample-sam',",
                "// Line 112:                 role: 'default',",
                "// Line 113:               },",
                "// Line 114:               error: null,",
                "// vulnerable line: 115: }",
                "// vulnerable line: 116: }",
                "// vulnerable line: 117: }",
                "// vulnerable line: 118: }",
                "// vulnerable line: 119: }",
                "// Line 120:     #swagger.responses[403] = {",
                "// Line 121:       schema: {",
                "// Line 122:         \"$ref\": \"#/definitions/InvalidAPIKey\"",
                "// vulnerable line: 123: }",
                "// vulnerable line: 124: }",
                "// Line 125:      #swagger.responses[401] = {",
                "// Line 126:       description: \"Instance is not in Multi-User mode. Method denied\",",
                "// vulnerable line: 127: }",
                "// Line 128:     */",
                "// Line 129:     try {",
                "// Line 130:       if (!multiUserMode(response)) {",
                "// Line 131:         response.sendStatus(401).end();",
                "// vulnerable line: 132: return;",
                "// vulnerable line: 133: }",
                "// Line 134: ",
                "// Line 135:       const newUserParams = reqBody(request);",
                "// Line 136:       const { user: newUser, error } = await User.create(newUserParams);",
                "// Line 137:       response.status(200).json({ user: newUser, error });",
                "// Line 138:     } catch (e) {",
                "// Line 139:       console.error(e);",
                "// Line 140:       response.sendStatus(500).end();",
                "// vulnerable line: 141: }",
                "// vulnerable line: 142: });",
                "// Line 143: ",
                "// Line 144:   app.post(\"/v1/admin/users/:id\", [validApiKey], async (request, response) => {",
                "// Line 145:     /*",
                "// Line 146:     #swagger.tags = ['Admin']",
                "// Line 147:     #swagger.path = '/v1/admin/users/{id}'",
                "// Line 148:     #swagger.parameters['id'] = {",
                "// Line 149:       in: 'path',",
                "// Line 150:       description: 'id of the user in the database.',",
                "// Line 151:       required: true,",
                "// Line 152:       type: 'string'",
                "// vulnerable line: 153: }",
                "// Line 154:     #swagger.description = 'Update existing user settings. Methods are disabled until multi user mode is enabled via the UI.'",
                "// Line 155:     #swagger.requestBody = {",
                "// Line 156:         description: 'Key pair object that will update the found user. All fields are optional and will not update unless specified.',",
                "// Line 157:         required: true,",
                "// Line 158:         type: 'object',",
                "// Line 159:         content: {",
                "// Line 160:           \"application/json\": {",
                "// Line 161:             example: {",
                "// Line 162:               username: \"sample-sam\",",
                "// Line 163:               password: 'hunter2',",
                "// Line 164:               role: 'default | admin',",
                "// Line 165:               suspended: 0,",
                "// vulnerable line: 166: }",
                "// vulnerable line: 167: }",
                "// vulnerable line: 168: }",
                "// vulnerable line: 169: }",
                "// Line 170:     #swagger.responses[200] = {",
                "// Line 171:       content: {",
                "// Line 172:         \"application/json\": {",
                "// Line 173:           schema: {",
                "// Line 174:             type: 'object',",
                "// Line 175:             example: {",
                "// Line 176:               success: true,",
                "// Line 177:               error: null,",
                "// vulnerable line: 178: }",
                "// vulnerable line: 179: }",
                "// vulnerable line: 180: }",
                "// vulnerable line: 181: }",
                "// vulnerable line: 182: }",
                "// Line 183:     #swagger.responses[403] = {",
                "// Line 184:       schema: {",
                "// Line 185:         \"$ref\": \"#/definitions/InvalidAPIKey\"",
                "// vulnerable line: 186: }",
                "// vulnerable line: 187: }",
                "// Line 188:      #swagger.responses[401] = {",
                "// Line 189:       description: \"Instance is not in Multi-User mode. Method denied\",",
                "// vulnerable line: 190: }",
                "// Line 191:     */",
                "// Line 192:     try {",
                "// Line 193:       if (!multiUserMode(response)) {",
                "// Line 194:         response.sendStatus(401).end();",
                "// vulnerable line: 195: return;",
                "// vulnerable line: 196: }",
                "// Line 197: ",
                "// Line 198:       const { id } = request.params;",
                "// Line 199:       const updates = reqBody(request);",
                "// Line 200:       const user = await User.get({ id: Number(id) });",
                "// Line 201: ",
                "// vulnerable line: 202: // Check to make sure with this update that includes a role change to",
                "// vulnerable line: 203: // something other than admin that we still have at least one admin left.",
                "// vulnerable line: 204: if (",
                "// vulnerable line: 205: updates.hasOwnProperty(\"role\") && // has admin prop to change",
                "// vulnerable line: 206: updates.role !== \"admin\" && // and we are changing to non-admin",
                "// vulnerable line: 207: user.role === \"admin\" // and they currently are an admin",
                "// vulnerable line: 208: ) {",
                "// vulnerable line: 209: const adminCount = await User.count({ role: \"admin\" });",
                "// vulnerable line: 210: if (adminCount - 1 <= 0) {",
                "// vulnerable line: 211: response.status(200).json({",
                "// vulnerable line: 212: success: false,",
                "// vulnerable line: 213: error:",
                "// vulnerable line: 214: \"No system admins will remain if you do this. Update failed.\",",
                "// vulnerable line: 215: });",
                "// vulnerable line: 216: return;",
                "// vulnerable line: 217: }",
                "// vulnerable line: 218: }",
                "// Line 219: ",
                "// Line 220:       const { success, error } = await User.update(id, updates);",
                "// Line 221:       response.status(200).json({ success, error });",
                "// Line 222:     } catch (e) {",
                "// Line 223:       console.error(e);",
                "// Line 224:       response.sendStatus(500).end();",
                "// vulnerable line: 225: }",
                "// vulnerable line: 226: });",
                "// Line 227: ",
                "// Line 228:   app.delete(",
                "// Line 229:     \"/v1/admin/users/:id\",",
                "// Line 230:     [validApiKey],",
                "// Line 231:     async (request, response) => {",
                "// Line 232:       /*",
                "// Line 233:     #swagger.tags = ['Admin']",
                "// Line 234:     #swagger.description = 'Delete existing user by id. Methods are disabled until multi user mode is enabled via the UI.'",
                "// Line 235:     #swagger.path = '/v1/admin/users/{id}'",
                "// Line 236:     #swagger.parameters['id'] = {",
                "// Line 237:       in: 'path',",
                "// Line 238:       description: 'id of the user in the database.',",
                "// Line 239:       required: true,",
                "// Line 240:       type: 'string'",
                "// vulnerable line: 241: }",
                "// Line 242:     #swagger.responses[200] = {",
                "// Line 243:       content: {",
                "// Line 244:         \"application/json\": {",
                "// Line 245:           schema: {",
                "// Line 246:             type: 'object',",
                "// Line 247:             example: {",
                "// Line 248:               success: true,",
                "// Line 249:               error: null,",
                "// vulnerable line: 250: }",
                "// vulnerable line: 251: }",
                "// vulnerable line: 252: }",
                "// vulnerable line: 253: }",
                "// vulnerable line: 254: }",
                "// Line 255:     #swagger.responses[403] = {",
                "// Line 256:       schema: {",
                "// Line 257:         \"$ref\": \"#/definitions/InvalidAPIKey\"",
                "// vulnerable line: 258: }",
                "// vulnerable line: 259: }",
                "// Line 260:      #swagger.responses[401] = {",
                "// Line 261:       description: \"Instance is not in Multi-User mode. Method denied\",",
                "// vulnerable line: 262: }",
                "// Line 263:     */",
                "// Line 264:       try {",
                "// Line 265:         if (!multiUserMode(response)) {",
                "// Line 266:           response.sendStatus(401).end();",
                "// vulnerable line: 267: return;",
                "// vulnerable line: 268: }",
                "// Line 269: ",
                "// Line 270:         const { id } = request.params;",
                "// Line 271:         await User.delete({ id });",
                "// Line 272:         response.status(200).json({ success: true, error: null });",
                "// Line 273:       } catch (e) {",
                "// Line 274:         console.error(e);",
                "// Line 275:         response.sendStatus(500).end();",
                "// vulnerable line: 276: }",
                "// vulnerable line: 277: }",
                "// Line 278:   );",
                "// Line 279: ",
                "// Line 280:   app.get(\"/v1/admin/invites\", [validApiKey], async (request, response) => {",
                "// Line 281:     /*",
                "// Line 282:     #swagger.tags = ['Admin']",
                "// Line 283:     #swagger.description = 'List all existing invitations to instance regardless of status. Methods are disabled until multi user mode is enabled via the UI.'",
                "// Line 284:     #swagger.responses[200] = {",
                "// Line 285:       content: {",
                "// Line 286:         \"application/json\": {",
                "// Line 287:           schema: {",
                "// Line 288:             type: 'object',",
                "// Line 289:             example: {",
                "// Line 290:              \"invites\": [",
                "// Line 291:                 {",
                "// Line 292:                   id: 1,",
                "// Line 293:                   status: \"pending\",",
                "// Line 294:                   code: 'abc-123',",
                "// Line 295:                   claimedBy: null",
                "// vulnerable line: 296: }",
                "// Line 297:              ]",
                "// vulnerable line: 298: }",
                "// vulnerable line: 299: }",
                "// vulnerable line: 300: }",
                "// vulnerable line: 301: }",
                "// vulnerable line: 302: }",
                "// Line 303:     #swagger.responses[403] = {",
                "// Line 304:       schema: {",
                "// Line 305:         \"$ref\": \"#/definitions/InvalidAPIKey\"",
                "// vulnerable line: 306: }",
                "// vulnerable line: 307: }",
                "// Line 308:      #swagger.responses[401] = {",
                "// Line 309:       description: \"Instance is not in Multi-User mode. Method denied\",",
                "// vulnerable line: 310: }",
                "// Line 311:     */",
                "// Line 312:     try {",
                "// Line 313:       if (!multiUserMode(response)) {",
                "// Line 314:         response.sendStatus(401).end();",
                "// vulnerable line: 315: return;",
                "// vulnerable line: 316: }",
                "// Line 317: ",
                "// Line 318:       const invites = await Invite.whereWithUsers();",
                "// Line 319:       response.status(200).json({ invites });",
                "// Line 320:     } catch (e) {",
                "// Line 321:       console.error(e);",
                "// Line 322:       response.sendStatus(500).end();",
                "// vulnerable line: 323: }",
                "// vulnerable line: 324: });",
                "// Line 325: ",
                "// Line 326:   app.post(\"/v1/admin/invite/new\", [validApiKey], async (request, response) => {",
                "// Line 327:     /*",
                "// Line 328:     #swagger.tags = ['Admin']",
                "// Line 329:     #swagger.description = 'Create a new invite code for someone to use to register with instance. Methods are disabled until multi user mode is enabled via the UI.'",
                "// Line 330:     #swagger.responses[200] = {",
                "// Line 331:       content: {",
                "// Line 332:         \"application/json\": {",
                "// Line 333:           schema: {",
                "// Line 334:             type: 'object',",
                "// Line 335:             example: {",
                "// Line 336:               invite: {",
                "// Line 337:                 id: 1,",
                "// Line 338:                 status: \"pending\",",
                "// Line 339:                 code: 'abc-123',",
                "// Line 340:               },",
                "// Line 341:               error: null,",
                "// vulnerable line: 342: }",
                "// vulnerable line: 343: }",
                "// vulnerable line: 344: }",
                "// vulnerable line: 345: }",
                "// vulnerable line: 346: }",
                "// Line 347:     #swagger.responses[403] = {",
                "// Line 348:       schema: {",
                "// Line 349:         \"$ref\": \"#/definitions/InvalidAPIKey\"",
                "// vulnerable line: 350: }",
                "// vulnerable line: 351: }",
                "// Line 352:      #swagger.responses[401] = {",
                "// Line 353:       description: \"Instance is not in Multi-User mode. Method denied\",",
                "// vulnerable line: 354: }",
                "// Line 355:     */",
                "// Line 356:     try {",
                "// Line 357:       if (!multiUserMode(response)) {",
                "// Line 358:         response.sendStatus(401).end();",
                "// vulnerable line: 359: return;",
                "// vulnerable line: 360: }",
                "// Line 361: ",
                "// Line 362:       const { invite, error } = await Invite.create();",
                "// Line 363:       response.status(200).json({ invite, error });",
                "// Line 364:     } catch (e) {",
                "// Line 365:       console.error(e);",
                "// Line 366:       response.sendStatus(500).end();",
                "// vulnerable line: 367: }",
                "// vulnerable line: 368: });",
                "// Line 369: ",
                "// Line 370:   app.delete(",
                "// Line 371:     \"/v1/admin/invite/:id\",",
                "// Line 372:     [validApiKey],",
                "// Line 373:     async (request, response) => {",
                "// Line 374:       /*",
                "// Line 375:     #swagger.tags = ['Admin']",
                "// Line 376:     #swagger.description = 'Deactivates (soft-delete) invite by id. Methods are disabled until multi user mode is enabled via the UI.'",
                "// Line 377:     #swagger.path = '/v1/admin/invite/{id}'",
                "// Line 378:     #swagger.parameters['id'] = {",
                "// Line 379:       in: 'path',",
                "// Line 380:       description: 'id of the invite in the database.',",
                "// Line 381:       required: true,",
                "// Line 382:       type: 'string'",
                "// vulnerable line: 383: }",
                "// Line 384:     #swagger.responses[200] = {",
                "// Line 385:       content: {",
                "// Line 386:         \"application/json\": {",
                "// Line 387:           schema: {",
                "// Line 388:             type: 'object',",
                "// Line 389:             example: {",
                "// Line 390:               success: true,",
                "// Line 391:               error: null,",
                "// vulnerable line: 392: }",
                "// vulnerable line: 393: }",
                "// vulnerable line: 394: }",
                "// vulnerable line: 395: }",
                "// vulnerable line: 396: }",
                "// Line 397:     #swagger.responses[403] = {",
                "// Line 398:       schema: {",
                "// Line 399:         \"$ref\": \"#/definitions/InvalidAPIKey\"",
                "// vulnerable line: 400: }",
                "// vulnerable line: 401: }",
                "// Line 402:      #swagger.responses[401] = {",
                "// Line 403:       description: \"Instance is not in Multi-User mode. Method denied\",",
                "// vulnerable line: 404: }",
                "// Line 405:     */",
                "// Line 406:       try {",
                "// Line 407:         if (!multiUserMode(response)) {",
                "// Line 408:           response.sendStatus(401).end();",
                "// vulnerable line: 409: return;",
                "// vulnerable line: 410: }",
                "// Line 411: ",
                "// Line 412:         const { id } = request.params;",
                "// Line 413:         const { success, error } = await Invite.deactivate(id);",
                "// Line 414:         response.status(200).json({ success, error });",
                "// Line 415:       } catch (e) {",
                "// Line 416:         console.error(e);",
                "// Line 417:         response.sendStatus(500).end();",
                "// vulnerable line: 418: }",
                "// vulnerable line: 419: }",
                "// Line 420:   );",
                "// Line 421: ",
                "// Line 422:   app.post(",
                "// Line 423:     \"/v1/admin/workspaces/:workspaceId/update-users\",",
                "// Line 424:     [validApiKey],",
                "// Line 425:     async (request, response) => {",
                "// Line 426:       /*",
                "// Line 427:     #swagger.tags = ['Admin']",
                "// Line 428:     #swagger.path = '/v1/admin/workspaces/{workspaceId}/update-users'",
                "// Line 429:     #swagger.parameters['workspaceId'] = {",
                "// Line 430:       in: 'path',",
                "// Line 431:       description: 'id of the workspace in the database.',",
                "// Line 432:       required: true,",
                "// Line 433:       type: 'string'",
                "// vulnerable line: 434: }",
                "// Line 435:     #swagger.description = 'Overwrite workspace permissions to only be accessible by the given user ids and admins. Methods are disabled until multi user mode is enabled via the UI.'",
                "// Line 436:     #swagger.requestBody = {",
                "// Line 437:         description: 'Entire array of user ids who can access the workspace. All fields are optional and will not update unless specified.',",
                "// Line 438:         required: true,",
                "// Line 439:         type: 'object',",
                "// Line 440:         content: {",
                "// Line 441:           \"application/json\": {",
                "// Line 442:             example: {",
                "// Line 443:               userIds: [1,2,4,12],",
                "// vulnerable line: 444: }",
                "// vulnerable line: 445: }",
                "// vulnerable line: 446: }",
                "// vulnerable line: 447: }",
                "// Line 448:     #swagger.responses[200] = {",
                "// Line 449:       content: {",
                "// Line 450:         \"application/json\": {",
                "// Line 451:           schema: {",
                "// Line 452:             type: 'object',",
                "// Line 453:             example: {",
                "// Line 454:               success: true,",
                "// Line 455:               error: null,",
                "// vulnerable line: 456: }",
                "// vulnerable line: 457: }",
                "// vulnerable line: 458: }",
                "// vulnerable line: 459: }",
                "// vulnerable line: 460: }",
                "// Line 461:     #swagger.responses[403] = {",
                "// Line 462:       schema: {",
                "// Line 463:         \"$ref\": \"#/definitions/InvalidAPIKey\"",
                "// vulnerable line: 464: }",
                "// vulnerable line: 465: }",
                "// Line 466:      #swagger.responses[401] = {",
                "// Line 467:       description: \"Instance is not in Multi-User mode. Method denied\",",
                "// vulnerable line: 468: }",
                "// Line 469:     */",
                "// Line 470:       try {",
                "// Line 471:         if (!multiUserMode(response)) {",
                "// Line 472:           response.sendStatus(401).end();",
                "// vulnerable line: 473: return;",
                "// vulnerable line: 474: }",
                "// Line 475: ",
                "// Line 476:         const { workspaceId } = request.params;",
                "// Line 477:         const { userIds } = reqBody(request);",
                "// Line 478:         const { success, error } = await Workspace.updateUsers(",
                "// Line 479:           workspaceId,",
                "// Line 480:           userIds",
                "// Line 481:         );",
                "// Line 482:         response.status(200).json({ success, error });",
                "// Line 483:       } catch (e) {",
                "// Line 484:         console.error(e);",
                "// Line 485:         response.sendStatus(500).end();",
                "// vulnerable line: 486: }",
                "// vulnerable line: 487: }",
                "// Line 488:   );",
                "// Line 489: ",
                "// Line 490:   app.post(",
                "// Line 491:     \"/v1/admin/workspace-chats\",",
                "// Line 492:     [validApiKey],",
                "// Line 493:     async (request, response) => {",
                "// Line 494:       /*",
                "// Line 495:     #swagger.tags = ['Admin']",
                "// Line 496:     #swagger.description = 'All chats in the system ordered by most recent. Methods are disabled until multi user mode is enabled via the UI.'",
                "// Line 497:     #swagger.requestBody = {",
                "// Line 498:         description: 'Page offset to show of workspace chats. All fields are optional and will not update unless specified.',",
                "// Line 499:         required: false,",
                "// Line 500:         type: 'integer',",
                "// Line 501:         content: {",
                "// Line 502:           \"application/json\": {",
                "// Line 503:             example: {",
                "// Line 504:               offset: 2,",
                "// vulnerable line: 505: }",
                "// vulnerable line: 506: }",
                "// vulnerable line: 507: }",
                "// vulnerable line: 508: }",
                "// Line 509:     #swagger.responses[200] = {",
                "// Line 510:       content: {",
                "// Line 511:         \"application/json\": {",
                "// Line 512:           schema: {",
                "// Line 513:             type: 'object',",
                "// Line 514:             example: {",
                "// Line 515:               success: true,",
                "// Line 516:               error: null,",
                "// vulnerable line: 517: }",
                "// vulnerable line: 518: }",
                "// vulnerable line: 519: }",
                "// vulnerable line: 520: }",
                "// vulnerable line: 521: }",
                "// Line 522:     #swagger.responses[403] = {",
                "// Line 523:       schema: {",
                "// Line 524:         \"$ref\": \"#/definitions/InvalidAPIKey\"",
                "// vulnerable line: 525: }",
                "// vulnerable line: 526: }",
                "// Line 527:     */",
                "// Line 528:       try {",
                "// Line 529:         const pgSize = 20;",
                "// Line 530:         const { offset = 0 } = reqBody(request);",
                "// Line 531:         const chats = await WorkspaceChats.whereWithData(",
                "// Line 532:           {},",
                "// Line 533:           pgSize,",
                "// Line 534:           offset * pgSize,",
                "// Line 535:           { id: \"desc\" }",
                "// Line 536:         );",
                "// Line 537: ",
                "// Line 538:         const hasPages = (await WorkspaceChats.count()) > (offset + 1) * pgSize;",
                "// Line 539:         response.status(200).json({ chats: chats, hasPages });",
                "// Line 540:       } catch (e) {",
                "// Line 541:         console.error(e);",
                "// Line 542:         response.sendStatus(500).end();",
                "// vulnerable line: 543: }",
                "// vulnerable line: 544: }",
                "// Line 545:   );",
                "// Line 546: ",
                "// Line 547:   app.get(\"/v1/admin/preferences\", [validApiKey], async (request, response) => {",
                "// Line 548:     /*",
                "// Line 549:     #swagger.tags = ['Admin']",
                "// Line 550:     #swagger.description = 'Show all multi-user preferences for instance. Methods are disabled until multi user mode is enabled via the UI.'",
                "// Line 551:     #swagger.responses[200] = {",
                "// Line 552:       content: {",
                "// Line 553:         \"application/json\": {",
                "// Line 554:           schema: {",
                "// Line 555:             type: 'object',",
                "// Line 556:             example: {",
                "// Line 557:               settings: {",
                "// Line 558:                 users_can_delete_workspaces: true,",
                "// Line 559:                 limit_user_messages: false,",
                "// Line 560:                 message_limit: 10,",
                "// vulnerable line: 561: }",
                "// vulnerable line: 562: }",
                "// vulnerable line: 563: }",
                "// vulnerable line: 564: }",
                "// vulnerable line: 565: }",
                "// vulnerable line: 566: }",
                "// Line 567:     #swagger.responses[403] = {",
                "// Line 568:       schema: {",
                "// Line 569:         \"$ref\": \"#/definitions/InvalidAPIKey\"",
                "// vulnerable line: 570: }",
                "// vulnerable line: 571: }",
                "// Line 572:      #swagger.responses[401] = {",
                "// Line 573:       description: \"Instance is not in Multi-User mode. Method denied\",",
                "// vulnerable line: 574: }",
                "// Line 575:     */",
                "// Line 576:     try {",
                "// Line 577:       if (!multiUserMode(response)) {",
                "// Line 578:         response.sendStatus(401).end();",
                "// vulnerable line: 579: return;",
                "// vulnerable line: 580: }",
                "// Line 581: ",
                "// Line 582:       const settings = {",
                "// Line 583:         users_can_delete_workspaces:",
                "// Line 584:           (await SystemSettings.get({ label: \"users_can_delete_workspaces\" }))",
                "// Line 585:             ?.value === \"true\",",
                "// Line 586:         limit_user_messages:",
                "// Line 587:           (await SystemSettings.get({ label: \"limit_user_messages\" }))",
                "// Line 588:             ?.value === \"true\",",
                "// Line 589:         message_limit:",
                "// Line 590:           Number(",
                "// Line 591:             (await SystemSettings.get({ label: \"message_limit\" }))?.value",
                "// Line 592:           ) || 10,",
                "// Line 593:       };",
                "// Line 594:       response.status(200).json({ settings });",
                "// Line 595:     } catch (e) {",
                "// Line 596:       console.error(e);",
                "// Line 597:       response.sendStatus(500).end();",
                "// vulnerable line: 598: }",
                "// vulnerable line: 599: });",
                "// Line 600: ",
                "// Line 601:   app.post(",
                "// Line 602:     \"/v1/admin/preferences\",",
                "// Line 603:     [validApiKey],",
                "// Line 604:     async (request, response) => {",
                "// Line 605:       /*",
                "// Line 606:     #swagger.tags = ['Admin']",
                "// Line 607:     #swagger.description = 'Update multi-user preferences for instance. Methods are disabled until multi user mode is enabled via the UI.'",
                "// Line 608:     #swagger.requestBody = {",
                "// Line 609:       description: 'Object with setting key and new value to set. All keys are optional and will not update unless specified.',",
                "// Line 610:       required: true,",
                "// Line 611:       type: 'object',",
                "// Line 612:       content: {",
                "// Line 613:         \"application/json\": {",
                "// Line 614:           example: {",
                "// Line 615:             users_can_delete_workspaces: false,",
                "// Line 616:             limit_user_messages: true,",
                "// Line 617:             message_limit: 5,",
                "// vulnerable line: 618: }",
                "// vulnerable line: 619: }",
                "// vulnerable line: 620: }",
                "// vulnerable line: 621: }",
                "// Line 622:     #swagger.responses[200] = {",
                "// Line 623:       content: {",
                "// Line 624:         \"application/json\": {",
                "// Line 625:           schema: {",
                "// Line 626:             type: 'object',",
                "// Line 627:             example: {",
                "// Line 628:               success: true,",
                "// Line 629:               error: null,",
                "// vulnerable line: 630: }",
                "// vulnerable line: 631: }",
                "// vulnerable line: 632: }",
                "// vulnerable line: 633: }",
                "// vulnerable line: 634: }",
                "// Line 635:     #swagger.responses[403] = {",
                "// Line 636:       schema: {",
                "// Line 637:         \"$ref\": \"#/definitions/InvalidAPIKey\"",
                "// vulnerable line: 638: }",
                "// vulnerable line: 639: }",
                "// Line 640:      #swagger.responses[401] = {",
                "// Line 641:       description: \"Instance is not in Multi-User mode. Method denied\",",
                "// vulnerable line: 642: }",
                "// Line 643:     */",
                "// Line 644:       try {",
                "// Line 645:         if (!multiUserMode(response)) {",
                "// Line 646:           response.sendStatus(401).end();",
                "// vulnerable line: 647: return;",
                "// vulnerable line: 648: }",
                "// Line 649: ",
                "// Line 650:         const updates = reqBody(request);",
                "// Line 651:         await SystemSettings.updateSettings(updates);",
                "// Line 652:         response.status(200).json({ success: true, error: null });",
                "// Line 653:       } catch (e) {",
                "// Line 654:         console.error(e);",
                "// Line 655:         response.sendStatus(500).end();",
                "// vulnerable line: 656: }",
                "// vulnerable line: 657: }",
                "// Line 658:   );",
                "// vulnerable line: 659: }",
                "// Line 660: ",
                "// Line 661: module.exports = { apiAdminEndpoints };"
            ]
        },
        {
            "filename_of_changes": "index.jsx",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "29",
            "number_of_lines_deleted_vulnerable_to_cve": "6",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 8:   const rowRef = useRef(null);",
                "// Line 9:   const [suspended, setSuspended] = useState(user.suspended === 1);",
                "// Line 10:   const handleSuspend = async () => {",
                "// Line 11:     if (",
                "// Line 12:       !window.confirm(",
                "// Line 13:         `Are you sure you want to suspend ${user.username}?",
                "// Line 14: After you do this they will be logged out and unable to log back into this instance of AnythingLLM until unsuspended by an admin.`",
                "// Line 15:       )",
                "// Line 16:     )",
                "// Line 17:       return false;",
                "// vulnerable line: 18: setSuspended(!suspended);",
                "// vulnerable line: 19: await Admin.updateUser(user.id, { suspended: suspended ? 0 : 1 });",
                "// Line 20:   };",
                "// Line 21:   const handleDelete = async () => {",
                "// Line 22:     if (",
                "// Line 23:       !window.confirm(",
                "// Line 24:         `Are you sure you want to delete ${user.username}?",
                "// Line 25: After you do this they will be logged out and unable to use this instance of AnythingLLM.",
                "// Line 26: ",
                "// Line 27: This action is irreversible.`",
                "// Line 28:       )",
                "// Line 29:     )",
                "// Line 30:       return false;",
                "// vulnerable line: 31: rowRef?.current?.remove();",
                "// vulnerable line: 32: await Admin.deleteUser(user.id);",
                "// Line 33:   };",
                "// Line 34: ",
                "// Line 35:   return (",
                "// Line 36:     <>",
                "// Line 37:       <tr",
                "// Line 38:         ref={rowRef}",
                "// Line 39:         className=\"bg-transparent text-white text-opacity-80 text-sm font-medium\"",
                "// Line 40:       >",
                "// Line 41:         <th scope=\"row\" className=\"px-6 py-4 whitespace-nowrap\">",
                "// Line 42:           {user.username}",
                "// Line 43:         </th>",
                "// Line 44:         <td className=\"px-6 py-4\">{titleCase(user.role)}</td>",
                "// Line 45:         <td className=\"px-6 py-4\">{user.createdAt}</td>",
                "// Line 46:         <td className=\"px-6 py-4 flex items-center gap-x-6\">",
                "// vulnerable line: 47: {currUser?.role !== \"default\" && (",
                "// Line 48:             <button",
                "// Line 49:               onClick={() =>",
                "// Line 50:                 document?.getElementById(EditUserModalId(user))?.showModal()",
                "// Line 51:               }",
                "// Line 52:               className=\"font-medium text-white text-opacity-80 rounded-lg hover:text-white px-2 py-1 hover:text-opacity-60 hover:bg-white hover:bg-opacity-10\"",
                "// Line 53:             >",
                "// Line 54:               <DotsThreeOutline weight=\"fill\" className=\"h-5 w-5\" />",
                "// Line 55:             </button>",
                "// Line 56:           )}",
                "// vulnerable line: 57: {currUser?.id !== user.id && currUser?.role !== \"default\" && (",
                "// Line 58:             <>",
                "// Line 59:               <button",
                "// Line 60:                 onClick={handleSuspend}",
                "// Line 61:                 className=\"font-medium text-orange-600 dark:text-orange-300 px-2 py-1 rounded-lg hover:bg-orange-50 hover:dark:bg-orange-800 hover:dark:bg-opacity-20\"",
                "// Line 62:               >",
                "// Line 63:                 {suspended ? \"Unsuspend\" : \"Suspend\"}",
                "// Line 64:               </button>",
                "// Line 65:               <button",
                "// Line 66:                 onClick={handleDelete}",
                "// Line 67:                 className=\"font-medium text-red-600 dark:text-red-300 px-2 py-1 rounded-lg hover:bg-red-50 hover:dark:bg-red-800 hover:dark:bg-opacity-20\""
            ]
        }
    ]
}