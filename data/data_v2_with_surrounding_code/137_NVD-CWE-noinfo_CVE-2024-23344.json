{
    "cve_id": "CVE-2024-23344",
    "cve_description": "Tuleap is an Open Source Suite to improve management of software developments and collaboration. Some users might get access to restricted information when a process validates the permissions of multiple users (e.g. mail notifications). This issue has been patched in version 15.4.99.140 of Tuleap Community Edition.",
    "cve_publish_date": "2024-02-06T16:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fix: CCE user cannot update artifact sometimes\n\nHow to reproduce:\nHave an artifact A with a comment containing a cross reference to another\nartifact B like `See art #123`.\nIn the tracker of the artifact A, upload a Custom Code Execution module\nin the administration.\n\nThere is an example module if you need one:\n```\ncd plugins/tracker_cce/wasm_modules/post-action-add-comment\nnix-shell\ncargo build --target wasm32-wasi --release\n```\nThen you can upload the generated file:\n`plugins/tracker_cce/wasm_modules/post-action-add-comment/target/wasm32-wasi/release/post-action-add-comment.wasm`\n\nThe example module take an integer field `field_a`, an integer field\n`field_b`, and fill a text field `field_sum`. You will need them for the\ntest. Or use your own module.\n\nNow update the artifact A. The (async) execution of the module should be a\nsuccess and a new comment is added to the artifact by CCE user.\n\nCloses request #35862: Artifact userCanView not properly cached\nPart of story #35093: execute custom code as artifact post action\n\nChange-Id: Id08ce6570c1dd2c7ebedcd70339f9d9d6b008d58",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "ArtifactTestBuilder.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "14",
            "number_of_lines_deleted_vulnerable_to_cve": "6",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 40:     private string $description = '';",
                "// Line 41:     /**",
                "// Line 42:      * @var \\Tracker_Artifact_Changeset[]",
                "// Line 43:      */",
                "// Line 44:     private array $changesets                                = [];",
                "// Line 45:     private \\Tracker_Artifact_Changeset|null $last_changeset = null;",
                "// Line 46:     /**",
                "// Line 47:      * @var \\Tracker_ArtifactFactory | null",
                "// Line 48:      */",
                "// Line 49:     private $artifact_factory;",
                "// vulnerable line: 50: private bool|null $user_can_view = null;",
                "// Line 51: ",
                "// Line 52:     /**",
                "// Line 53:      * @var \\Project|null",
                "// Line 54:      */",
                "// Line 55:     private $project;",
                "// Line 56:     private int $submission_timestamp  = 1234567890;",
                "// Line 57:     private ?PFUser $submitted_by_user = null;",
                "// Line 58:     private ?Artifact $parent          = null;",
                "// Line 59:     private bool $has_parent           = false;",
                "// Line 60:     private bool|null $is_open         = null;",
                "// Line 65:     private ?array $ancestors = null;",
                "// Line 66: ",
                "// Line 67:     private function __construct(int $id)",
                "// Line 68:     {",
                "// Line 69:         $this->id      = $id;",
                "// Line 70:         $this->tracker = TrackerTestBuilder::aTracker()",
                "// Line 71:             ->withId(101)",
                "// Line 72:             ->withName(\"bug\")",
                "// Line 73:             ->withColor(TrackerColor::fromName('fiesta-red'))",
                "// Line 74:             ->build();",
                "// vulnerable line: 75: }",
                "// Line 76: ",
                "// Line 77:     public static function anArtifact(int $id): self",
                "// Line 78:     {",
                "// Line 79:         return new self($id);",
                "// vulnerable line: 80: }",
                "// Line 81: ",
                "// Line 82:     public function withTitle(string $title): self",
                "// Line 83:     {",
                "// Line 84:         $this->title = $title;",
                "// Line 85: ",
                "// Line 86:         return $this;",
                "// vulnerable line: 87: }",
                "// Line 88: ",
                "// Line 89:     public function withDescription(string $description): self",
                "// Line 90:     {",
                "// Line 91:         $this->description = $description;",
                "// Line 92: ",
                "// Line 93:         return $this;",
                "// vulnerable line: 94: }",
                "// Line 95: ",
                "// Line 96:     public function submittedBy(PFUser $user): self",
                "// Line 97:     {",
                "// Line 98:         $this->submitted_by_user = $user;",
                "// Line 99: ",
                "// Line 100:         return $this;",
                "// vulnerable line: 101: }",
                "// Line 102: ",
                "// Line 103:     public function withArtifactFactory(\\Tracker_ArtifactFactory $artifact_factory): self",
                "// Line 104:     {",
                "// Line 105:         $this->artifact_factory = $artifact_factory;",
                "// Line 106: ",
                "// Line 107:         return $this;",
                "// vulnerable line: 108: }",
                "// Line 109: ",
                "// Line 110:     public function inTracker(\\Tracker $tracker): self",
                "// Line 111:     {",
                "// Line 112:         $this->tracker = $tracker;",
                "// Line 113: ",
                "// Line 114:         return $this;",
                "// vulnerable line: 115: }",
                "// Line 116: ",
                "// Line 117:     public function inProject(\\Project $project): self",
                "// Line 118:     {",
                "// Line 119:         $this->project = $project;",
                "// Line 120: ",
                "// Line 121:         return $this;",
                "// vulnerable line: 122: }",
                "// Line 123: ",
                "// Line 124:     public function withSubmissionTimestamp(int $submission_timestamp): self",
                "// Line 125:     {",
                "// Line 126:         $this->submission_timestamp = $submission_timestamp;",
                "// Line 127:         return $this;",
                "// vulnerable line: 128: }",
                "// Line 129: ",
                "// Line 130:     /** @no-named-arguments */",
                "// Line 131:     public function withChangesets(\\Tracker_Artifact_Changeset $last_changeset, \\Tracker_Artifact_Changeset ...$previous_changesets): self",
                "// Line 132:     {",
                "// Line 133:         $this->changesets     = [...$previous_changesets, $last_changeset];",
                "// Line 134:         $this->last_changeset = $last_changeset;",
                "// Line 135: ",
                "// Line 136:         return $this;",
                "// vulnerable line: 137: }",
                "// Line 138: ",
                "// vulnerable line: 139: public function userCanView(bool $user_can_view): self",
                "// Line 140:     {",
                "// vulnerable line: 141: $this->user_can_view = $user_can_view;",
                "// Line 142:         return $this;",
                "// vulnerable line: 143: }",
                "// Line 144: ",
                "// Line 145:     public function withParent(?Artifact $artifact): self",
                "// Line 146:     {",
                "// Line 147:         $this->parent     = $artifact;",
                "// Line 148:         $this->has_parent = true;",
                "// Line 149:         return $this;",
                "// vulnerable line: 150: }",
                "// Line 151: ",
                "// Line 152:     public function isOpen(bool $is_open): self",
                "// Line 153:     {",
                "// Line 154:         $this->is_open = $is_open;",
                "// Line 155: ",
                "// Line 156:         return $this;",
                "// vulnerable line: 157: }",
                "// Line 158: ",
                "// Line 159:     public function withStatus(string $status): self",
                "// Line 160:     {",
                "// Line 161:         $this->status = $status;",
                "// Line 162: ",
                "// Line 163:         return $this;",
                "// vulnerable line: 164: }",
                "// Line 165: ",
                "// Line 166:     /**",
                "// Line 167:      * @param Artifact[] $ancestors",
                "// Line 168:      */",
                "// Line 169:     public function withAncestors(array $ancestors): self",
                "// Line 170:     {",
                "// Line 171:         $this->ancestors = $ancestors;",
                "// Line 172: ",
                "// Line 173:         return $this;",
                "// vulnerable line: 174: }",
                "// Line 175: ",
                "// Line 176:     public function build(): Artifact",
                "// Line 177:     {",
                "// Line 178:         $artifact = new Artifact(",
                "// Line 179:             $this->id,",
                "// Line 180:             $this->tracker->getId(),",
                "// Line 181:             102,",
                "// Line 182:             $this->submission_timestamp,",
                "// Line 183:             false,",
                "// Line 184:         );",
                "// Line 185: ",
                "// Line 186:         $artifact->setTracker($this->tracker);",
                "// Line 187:         $artifact->setTitle($this->title);",
                "// Line 188:         $artifact->setDescription($this->description);",
                "// Line 189: ",
                "// Line 190:         if ($this->submitted_by_user) {",
                "// Line 191:             $artifact->setSubmittedByUser($this->submitted_by_user);",
                "// vulnerable line: 192: }",
                "// Line 193: ",
                "// Line 194:         if ($this->artifact_factory) {",
                "// Line 195:             $artifact->setArtifactFactory($this->artifact_factory);",
                "// vulnerable line: 196: }",
                "// Line 197: ",
                "// Line 198:         if ($this->project) {",
                "// Line 199:             $artifact->getTracker()->setProject($this->project);",
                "// vulnerable line: 200: }",
                "// Line 201: ",
                "// Line 202:         if ($this->changesets) {",
                "// Line 203:             $artifact->setChangesets($this->changesets);",
                "// vulnerable line: 204: }",
                "// Line 205: ",
                "// Line 206:         if ($this->last_changeset) {",
                "// Line 207:             $artifact->setLastChangeset($this->last_changeset);",
                "// vulnerable line: 208: }",
                "// vulnerable line: 209: if ($this->user_can_view !== null) {",
                "// vulnerable line: 210: $artifact->setUserCanView($this->user_can_view);",
                "// vulnerable line: 211: }",
                "// Line 212:         if ($this->has_parent) {",
                "// Line 213:             $artifact->setParent($this->parent);",
                "// vulnerable line: 214: }",
                "// Line 215:         if ($this->is_open !== null) {",
                "// Line 216:             $artifact->setIsOpen($this->is_open);",
                "// vulnerable line: 217: }",
                "// Line 218:         if ($this->ancestors !== null) {",
                "// Line 219:             $artifact->setAllAncestors($this->ancestors);",
                "// vulnerable line: 220: }",
                "// Line 221:         if ($this->status !== null) {",
                "// Line 222:             $artifact->setStatus($this->status);",
                "// vulnerable line: 223: }",
                "// Line 224: ",
                "// Line 225:         return $artifact;",
                "// vulnerable line: 226: }",
                "// vulnerable line: 227: }"
            ]
        },
        {
            "filename_of_changes": "IterationsRetrieverTest.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "6",
            "number_of_lines_deleted_vulnerable_to_cve": "6",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 916:             ->willReturn(",
                "// Line 917:                 new SemanticTimeframe(",
                "// Line 918:                     $this->tracker,",
                "// Line 919:                     new TimeframeWithEndDate(",
                "// Line 920:                         $start_date_field,",
                "// Line 921:                         $end_date_field,",
                "// Line 922:                     )",
                "// Line 923:                 )",
                "// Line 924:             );",
                "// Line 925: ",
                "// vulnerable line: 926: $iteration = $this->anArtifactWithoutChangesetValue(201, 'Title', $this->tracker, true);",
                "// Line 927: ",
                "// Line 928:         $this->artifact_factory",
                "// Line 929:             ->expects(self::once())",
                "// Line 930:             ->method('getPaginatedArtifactsByTrackerId')",
                "// Line 931:             ->with(self::ITERATION_TRACKER_ID, 0, 10, false)",
                "// Line 932:             ->willReturn(",
                "// Line 933:                 new \\Tracker_Artifact_PaginatedArtifacts([$iteration], 1)",
                "// Line 934:             );",
                "// Line 935: ",
                "// Line 936:         $collection = $this->retriever->getIterations(self::ROADMAP_ID, $level, 0, 10);",
                "// Line 1287:             ->willReturn(",
                "// Line 1288:                 new SemanticTimeframe(",
                "// Line 1289:                     $this->tracker,",
                "// Line 1290:                     new TimeframeWithEndDate(",
                "// Line 1291:                         $start_date_field,",
                "// Line 1292:                         $end_date_field,",
                "// Line 1293:                     )",
                "// Line 1294:                 )",
                "// Line 1295:             );",
                "// Line 1296: ",
                "// vulnerable line: 1297: $iteration = $this->anArtifact(123, \"Sprint W42\", $this->tracker, true);",
                "// Line 1298: ",
                "// Line 1299:         $this->artifact_factory",
                "// Line 1300:             ->expects(self::once())",
                "// Line 1301:             ->method('getPaginatedArtifactsByTrackerId')",
                "// Line 1302:             ->with(self::ITERATION_TRACKER_ID, 0, 10, false)",
                "// Line 1303:             ->willReturn(",
                "// Line 1304:                 new \\Tracker_Artifact_PaginatedArtifacts([$iteration], 1)",
                "// Line 1305:             );",
                "// Line 1306: ",
                "// Line 1307:         $collection = $this->retriever->getIterations(self::ROADMAP_ID, $level, 0, 10);",
                "// Line 1347: ",
                "// Line 1348:     private function mockRoadmapConfig(array $db_result): void",
                "// Line 1349:     {",
                "// Line 1350:         $this->dao",
                "// Line 1351:             ->expects(self::once())",
                "// Line 1352:             ->method('searchById')",
                "// Line 1353:             ->with(self::ROADMAP_ID)",
                "// Line 1354:             ->willReturn($db_result);",
                "// Line 1355:     }",
                "// Line 1356: ",
                "// vulnerable line: 1357: private function anArtifact(int $id, string $title, Tracker $tracker, bool $readable): Artifact",
                "// Line 1358:     {",
                "// Line 1359:         $changeset       = $this->createMock(\\Tracker_Artifact_Changeset::class);",
                "// Line 1360:         $changeset_value = $this->createMock(\\Tracker_Artifact_ChangesetValue_Date::class);",
                "// Line 1361:         $changeset->method('getValue')->willReturn($changeset_value);",
                "// Line 1362:         $changeset_value->method('getTimestamp')->willReturn(1234567890);",
                "// Line 1363: ",
                "// Line 1364:         return ArtifactTestBuilder::anArtifact($id)",
                "// Line 1365:             ->withTitle($title)",
                "// Line 1366:             ->inTracker($tracker)",
                "// Line 1367:             ->withChangesets($changeset)",
                "// vulnerable line: 1368: ->userCanView($readable)",
                "// Line 1369:             ->withParent(null)",
                "// Line 1370:             ->isOpen(true)",
                "// Line 1371:             ->build();",
                "// Line 1372:     }",
                "// Line 1373: ",
                "// vulnerable line: 1374: private function anArtifactWithoutChangesetValue(int $id, string $title, Tracker $tracker, bool $readable): Artifact",
                "// Line 1375:     {",
                "// Line 1376:         $changeset       = $this->createMock(\\Tracker_Artifact_Changeset::class);",
                "// Line 1377:         $changeset_value = $this->createMock(\\Tracker_Artifact_ChangesetValue_Date::class);",
                "// Line 1378:         $changeset->method('getValue')->willReturn($changeset_value);",
                "// Line 1379:         $changeset_value->method('getTimestamp')->willReturn(null);",
                "// Line 1380: ",
                "// Line 1381:         return ArtifactTestBuilder::anArtifact($id)",
                "// Line 1382:             ->withTitle($title)",
                "// Line 1383:             ->inTracker($tracker)",
                "// Line 1384:             ->withChangesets($changeset)",
                "// vulnerable line: 1385: ->userCanView($readable)",
                "// Line 1386:             ->withParent(null)",
                "// Line 1387:             ->isOpen(true)",
                "// Line 1388:             ->build();",
                "// Line 1389:     }",
                "// Line 1390: }"
            ]
        },
        {
            "filename_of_changes": "MilestoneFactoryGetBareMilestoneByArtifactIdTest.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 111: ",
                "// Line 112:         $this->planning_factory->shouldReceive('getPlanningByPlanningTracker')->with($planning_tracker)->andReturn(Mockery::mock(Planning::class));",
                "// Line 113: ",
                "// Line 114: ",
                "// Line 115:         $changeset = ChangesetTestBuilder::aChangeset('1')->build();",
                "// Line 116: ",
                "// Line 117:         $artifact = ArtifactTestBuilder::anArtifact($this->artifact_id)",
                "// Line 118:             ->withTitle('title')",
                "// Line 119:             ->inTracker($planning_tracker)",
                "// Line 120:             ->withChangesets($changeset)",
                "// vulnerable line: 121: ->userCanView(true)",
                "// Line 122:             ->withParent(null)",
                "// Line 123:             ->isOpen(true)",
                "// Line 124:             ->withAncestors([])",
                "// Line 125:             ->build();",
                "// Line 126: ",
                "// Line 127:         $this->artifact_factory->shouldReceive('getArtifactById')->with($this->artifact_id)->andReturn($artifact);",
                "// Line 128: ",
                "// Line 129:         $this->timeframe_calculator->shouldReceive('buildDatePeriodWithoutWeekendForChangeset')",
                "// Line 130:             ->with($artifact->getLastChangeset(), $this->user, $this->logger)",
                "// Line 131:             ->once()"
            ]
        },
        {
            "filename_of_changes": "MilestoneFactoryGetMilestoneTest.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "5",
            "number_of_lines_deleted_vulnerable_to_cve": "5",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 133:             'use_artifact_permissions' => true,",
                "// Line 134:         ];",
                "// Line 135: ",
                "// Line 136:         $this->dao->shouldReceive('searchSubMilestones')->andReturn(",
                "// Line 137:             TestHelper::arrayToDar($row_sprint_1, $row_sprint_2, $row_hackfest_2012)",
                "// Line 138:         );",
                "// Line 139: ",
                "// Line 140:         $release_1_0   = ArtifactTestBuilder::anArtifact(1)",
                "// Line 141:             ->withTitle('release_1_0')",
                "// Line 142:             ->withChangesets(ChangesetTestBuilder::aChangeset('1')->build())",
                "// vulnerable line: 143: ->userCanView(true)",
                "// Line 144:             ->withParent(null)",
                "// Line 145:             ->isOpen(true)",
                "// Line 146:             ->withAncestors([])",
                "// Line 147:             ->build();",
                "// Line 148:         $sprint_1      = ArtifactTestBuilder::anArtifact(101)",
                "// Line 149:             ->withTitle('sprint_1')",
                "// Line 150:             ->withChangesets(ChangesetTestBuilder::aChangeset('2')->build())",
                "// Line 151:             ->inTracker($sprints_tracker)",
                "// vulnerable line: 152: ->userCanView(true)",
                "// Line 153:             ->withParent(null)",
                "// Line 154:             ->isOpen(true)",
                "// Line 155:             ->withAncestors([])",
                "// Line 156:             ->build();",
                "// Line 157:         $sprint_2      = ArtifactTestBuilder::anArtifact(102)",
                "// Line 158:             ->withTitle('sprint_2')",
                "// Line 159:             ->withChangesets(ChangesetTestBuilder::aChangeset('3')->build())",
                "// Line 160:             ->inTracker($sprints_tracker)",
                "// vulnerable line: 161: ->userCanView(true)",
                "// Line 162:             ->withParent(null)",
                "// Line 163:             ->isOpen(true)",
                "// Line 164:             ->withAncestors([])",
                "// Line 165:             ->build();",
                "// Line 166:         $hackfest_2012 = ArtifactTestBuilder::anArtifact(102)",
                "// Line 167:             ->withTitle('hackfest_2012')",
                "// Line 168:             ->withChangesets(ChangesetTestBuilder::aChangeset('4')->build())",
                "// Line 169:             ->inTracker($hackfests_tracker)",
                "// vulnerable line: 170: ->userCanView(true)",
                "// Line 171:             ->withParent(null)",
                "// Line 172:             ->isOpen(true)",
                "// Line 173:             ->withAncestors([])",
                "// Line 174:             ->build();",
                "// Line 175: ",
                "// Line 176:         $this->artifact_factory->shouldReceive('getInstanceFromRow')->with($row_sprint_1)->andReturn($sprint_1);",
                "// Line 177:         $this->artifact_factory->shouldReceive('getInstanceFromRow')->with($row_sprint_2)->andReturn($sprint_2);",
                "// Line 178:         $this->artifact_factory->shouldReceive('getInstanceFromRow')->with($row_hackfest_2012)->andReturn(",
                "// Line 179:             $hackfest_2012",
                "// Line 180:         );",
                "// Line 221:     {",
                "// Line 222:         $project = Mockery::mock(Project::class);",
                "// Line 223:         $tracker = Mockery::mock(Tracker::class);",
                "// Line 224:         $tracker->shouldReceive('getProject')->andReturn($project);",
                "// Line 225:         $tracker->shouldReceive('getId')->andReturn(1);",
                "// Line 226: ",
                "// Line 227:         $artifact = ArtifactTestBuilder::anArtifact(100)",
                "// Line 228:             ->withTitle('release_1_0')",
                "// Line 229:             ->withChangesets(ChangesetTestBuilder::aChangeset('1')->build())",
                "// Line 230:             ->inTracker($tracker)",
                "// vulnerable line: 231: ->userCanView(true)",
                "// Line 232:             ->withParent(null)",
                "// Line 233:             ->isOpen(true)",
                "// Line 234:             ->withAncestors([])",
                "// Line 235:             ->build();",
                "// Line 236: ",
                "// Line 237:         $this->artifact_factory->shouldReceive('getArtifactById')",
                "// Line 238:             ->with($artifact->getId())",
                "// Line 239:             ->andReturn($artifact)",
                "// Line 240:             ->once();",
                "// Line 241: "
            ]
        },
        {
            "filename_of_changes": "MilestoneFactoryGetPaginatedMilestonesTest.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 390:     }",
                "// Line 391: ",
                "// Line 392:     private function anArtifact(int $artifact_id, \\Tracker $milestone_tracker): Artifact",
                "// Line 393:     {",
                "// Line 394:         $changeset = ChangesetTestBuilder::aChangeset('1')->build();",
                "// Line 395: ",
                "// Line 396:         return ArtifactTestBuilder::anArtifact($artifact_id)",
                "// Line 397:             ->withTitle('title')",
                "// Line 398:             ->inTracker($milestone_tracker)",
                "// Line 399:             ->withChangesets($changeset)",
                "// vulnerable line: 400: ->userCanView(true)",
                "// Line 401:             ->withParent(null)",
                "// Line 402:             ->isOpen(true)",
                "// Line 403:             ->withAncestors([])",
                "// Line 404:             ->build();",
                "// Line 405:     }",
                "// Line 406: }"
            ]
        },
        {
            "filename_of_changes": "MilestoneFactoryGetTopMilestonesTest.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 114:         $milestones = $this->milestone_factory->getSubMilestones($this->user, $this->top_milestone);",
                "// Line 115: ",
                "// Line 116:         $this->assertEmpty($milestones);",
                "// Line 117:     }",
                "// Line 118: ",
                "// Line 119:     public function testItReturnsMilestonePerArtifact(): void",
                "// Line 120:     {",
                "// Line 121:         $artifact_1 = ArtifactTestBuilder::anArtifact(1)",
                "// Line 122:             ->inTracker($this->tracker)",
                "// Line 123:             ->withChangesets(ChangesetTestBuilder::aChangeset('1')->build())",
                "// vulnerable line: 124: ->userCanView(true)",
                "// Line 125:             ->withParent(null)",
                "// Line 126:             ->isOpen(true)",
                "// Line 127:             ->withAncestors([])",
                "// Line 128:             ->build();",
                "// Line 129:         $artifact_2 = ArtifactTestBuilder::anArtifact(2)",
                "// Line 130:             ->inTracker($this->tracker)",
                "// Line 131:             ->withChangesets(ChangesetTestBuilder::aChangeset('2')->build())",
                "// vulnerable line: 132: ->userCanView(true)",
                "// Line 133:             ->withParent(null)",
                "// Line 134:             ->isOpen(true)",
                "// Line 135:             ->withAncestors([])",
                "// Line 136:             ->build();",
                "// Line 137: ",
                "// Line 138:         $my_artifacts = [",
                "// Line 139:             $artifact_1,",
                "// Line 140:             $artifact_2,",
                "// Line 141:         ];",
                "// Line 142: ",
                "// Line 169:         // Some artifacts have no changeset on Tuleap.net (because of anonymous that can create",
                "// Line 170:         // artifacts but artifact creation fails because they have to write access to fields",
                "// Line 171:         // the artifact creation is stopped half the way hence without changeset",
                "// Line 172:         $artifact_1 = Mockery::mock(Artifact::class);",
                "// Line 173:         $artifact_1->shouldReceive('getLastChangeset')->andReturn(null);",
                "// Line 174:         $artifact_1->shouldReceive('getTracker')->andReturn($this->tracker);",
                "// Line 175: ",
                "// Line 176:         $artifact_2 = ArtifactTestBuilder::anArtifact(2)",
                "// Line 177:             ->inTracker($this->tracker)",
                "// Line 178:             ->withChangesets(ChangesetTestBuilder::aChangeset('1')->build())",
                "// vulnerable line: 179: ->userCanView(true)",
                "// Line 180:             ->withParent(null)",
                "// Line 181:             ->isOpen(true)",
                "// Line 182:             ->withAncestors([])",
                "// Line 183:             ->build();",
                "// Line 184: ",
                "// Line 185:         $my_artifacts = [",
                "// Line 186:             $artifact_1,",
                "// Line 187:             $artifact_2,",
                "// Line 188:         ];",
                "// Line 189: "
            ]
        },
        {
            "filename_of_changes": "MilestoneFactoryTest.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 202:         $this->assertEquals($this->artifact_open_current_without_start_date, $milestones[0]->getArtifact());",
                "// Line 203:         $this->assertEquals($this->artifact_open_future_without_start_date, $milestones[1]->getArtifact());",
                "// Line 204:         $this->assertEquals($this->artifact_open_future_with_start_date, $milestones[2]->getArtifact());",
                "// Line 205:     }",
                "// Line 206: ",
                "// Line 207:     private function getAnArtifact(int $id, bool $is_open, string $status, \\Tracker $tracker): Artifact",
                "// Line 208:     {",
                "// Line 209:         return ArtifactTestBuilder::anArtifact($id)",
                "// Line 210:             ->inTracker($tracker)",
                "// Line 211:             ->withChangesets(ChangesetTestBuilder::aChangeset('1')->build())",
                "// vulnerable line: 212: ->userCanView(true)",
                "// Line 213:             ->withParent(null)",
                "// Line 214:             ->withStatus($status)",
                "// Line 215:             ->isOpen($is_open)",
                "// Line 216:             ->withAncestors([])",
                "// Line 217:             ->build();",
                "// Line 218:     }",
                "// Line 219: }"
            ]
        },
        {
            "filename_of_changes": "PromotedMilestoneBuilderTest.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 60:     private PromotedMilestoneBuilder $builder;",
                "// Line 61: ",
                "// Line 62:     protected function setUp(): void",
                "// Line 63:     {",
                "// Line 64:         $this->changeset   = ChangesetTestBuilder::aChangeset('501')->build();",
                "// Line 65:         $this->user        = UserTestBuilder::anActiveUser()->build();",
                "// Line 66:         $this->project     = ProjectTestBuilder::aProject()->withId(101)->build();",
                "// Line 67:         $this->tracker     = TrackerTestBuilder::aTracker()->build();",
                "// Line 68:         $this->artifact    = ArtifactTestBuilder::anArtifact(1)",
                "// Line 69:             ->inTracker($this->tracker)",
                "// vulnerable line: 70: ->userCanView(true)",
                "// Line 71:             ->withChangesets($this->changeset)",
                "// Line 72:             ->build();",
                "// Line 73:         $this->title_field = TrackerFormElementStringFieldBuilder::aStringField(301)->build();",
                "// Line 74: ",
                "// Line 75:         $this->timeframe_builder = $this->createMock(SemanticTimeframeBuilder::class);",
                "// Line 76:         $this->start_field       = TrackerFormElementDateFieldBuilder::aDateField(302)->build();",
                "// Line 77:         $this->end_field         = TrackerFormElementDateFieldBuilder::aDateField(303)->build();",
                "// Line 78: ",
                "// Line 79:         $this->start_field->setUserCanRead($this->user, true);",
                "// Line 80:         $this->end_field->setUserCanRead($this->user, true);",
                "// Line 86:             $this->planning_factory,",
                "// Line 87:             $this->timeframe_builder,",
                "// Line 88:             new NullLogger()",
                "// Line 89:         );",
                "// Line 90:     }",
                "// Line 91: ",
                "// Line 92:     public function testItReturnNothingOptionWhenUserCanNotViewArtifact(): void",
                "// Line 93:     {",
                "// Line 94:         $artifact = ArtifactTestBuilder::anArtifact(1)",
                "// Line 95:             ->inTracker($this->tracker)",
                "// vulnerable line: 96: ->userCanView(false)",
                "// Line 97:             ->build();",
                "// Line 98: ",
                "// Line 99:         self::assertTrue($this->builder->build($artifact, $this->user, $this->project)->isNothing());",
                "// Line 100:     }",
                "// Line 101: ",
                "// Line 102:     public function testItReturnsNothingOptionWhenTitleFieldIsNotFound(): void",
                "// Line 103:     {",
                "// Line 104:         Tracker_Semantic_Title::setInstance(new Tracker_Semantic_Title($this->tracker, null), $this->tracker);",
                "// Line 105:         self::assertTrue($this->builder->build($this->artifact, $this->user, $this->project)->isNothing());",
                "// Line 106:     }"
            ]
        },
        {
            "filename_of_changes": "RoadmapTasksRetrieverTest.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "11",
            "number_of_lines_deleted_vulnerable_to_cve": "9",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 627:             ->expects(self::once())",
                "// Line 628:             ->method('userCanAccessProject')",
                "// Line 629:             ->with($this->user, $this->project);",
                "// Line 630: ",
                "// Line 631:         $title_field = $this->createMock(\\Tracker_FormElement_Field_String::class);",
                "// Line 632:         $title_field->method('userCanRead')->willReturn(true);",
                "// Line 633:         $tracker = $this->getTracker(self::TRACKER_ID, $title_field, 'acid-green', 'task');",
                "// Line 634: ",
                "// Line 635:         $start_date_field = TrackerFormElementDateFieldBuilder::aDateField(1)",
                "// Line 636:             ->withUserCanRead($this->user)",
                "// vulnerable line: 637: ->build();",
                "// Line 638:         $end_date_field   = TrackerFormElementDateFieldBuilder::aDateField(2)",
                "// Line 639:             ->withUserCanRead($this->user)",
                "// vulnerable line: 640: ->build();",
                "// Line 641: ",
                "// Line 642:         $total_effort_field = $this->createMock(\\Tracker_FormElement_Field_Numeric::class);",
                "// Line 643:         $total_effort_field->method('userCanRead')->willReturn(true);",
                "// Line 644: ",
                "// Line 645:         $remaining_effort_field = $this->createMock(\\Tracker_FormElement_Field_Numeric::class);",
                "// Line 646:         $remaining_effort_field->method('userCanRead')->willReturn(true);",
                "// Line 647: ",
                "// Line 648:         $semantic_timeframe = new SemanticTimeframe($tracker, new TimeframeWithEndDate($start_date_field, $end_date_field));",
                "// Line 649:         $this->semantic_timeframe_builder",
                "// Line 650:             ->method('getSemantic')",
                "// Line 660:                     new MethodBasedOnEffort(",
                "// Line 661:                         $this->createMock(SemanticProgressDao::class),",
                "// Line 662:                         $total_effort_field,",
                "// Line 663:                         $remaining_effort_field",
                "// Line 664:                     )",
                "// Line 665:                 )",
                "// Line 666:             );",
                "// Line 667: ",
                "// Line 668:         $task_201 = $this->anArtifact(201, 'Do this', $tracker, true, $semantic_timeframe);",
                "// Line 669:         $task_202 = $this->anArtifact(202, 'Do that', $tracker, false, $semantic_timeframe);",
                "// vulnerable line: 670: $task_203 = $this->anArtifactWithoutStartDate(203, 'Do those', $tracker, true, $semantic_timeframe);",
                "// Line 671:         $task_204 = $this->anArtifact(204, 'Done more than 1 year ago', $tracker, true, $semantic_timeframe);",
                "// Line 672: ",
                "// Line 673:         $this->mockEffort($total_effort_field, [201 => 8, 203 => 3]);",
                "// Line 674:         $this->mockEffort($remaining_effort_field, [201 => 5, 203 => 0.75]);",
                "// Line 675: ",
                "// Line 676:         $artifacts = [$task_201, $task_202, $task_203, $task_204];",
                "// Line 677:         $this->artifact_factory",
                "// Line 678:             ->expects(self::once())",
                "// Line 679:             ->method('getPaginatedArtifactsByListOfTrackerIds')",
                "// Line 680:             ->with([self::TRACKER_ID], 0, 10)",
                "// Line 768:             ->method('userCanAccessProject')",
                "// Line 769:             ->with($this->user, $this->project);",
                "// Line 770: ",
                "// Line 771:         $title_field = $this->createMock(\\Tracker_FormElement_Field_String::class);",
                "// Line 772:         $title_field->method('userCanRead')->willReturn(true);",
                "// Line 773: ",
                "// Line 774:         $tracker = $this->getTracker(self::TRACKER_ID, $title_field, 'acid-green', 'task');",
                "// Line 775: ",
                "// Line 776:         $start_date_field = TrackerFormElementDateFieldBuilder::aDateField(1)",
                "// Line 777:             ->withUserCanRead($this->user)",
                "// vulnerable line: 778: ->build();",
                "// Line 779:         $end_date_field   = TrackerFormElementDateFieldBuilder::aDateField(2)",
                "// Line 780:             ->withUserCanRead($this->user)",
                "// vulnerable line: 781: ->build();",
                "// Line 782: ",
                "// Line 783:         $total_effort_field = $this->createMock(\\Tracker_FormElement_Field_Numeric::class);",
                "// Line 784:         $total_effort_field->method('userCanRead')->willReturn(true);",
                "// Line 785:         $remaining_effort_field = $this->createMock(\\Tracker_FormElement_Field_Numeric::class);",
                "// Line 786:         $remaining_effort_field->method('userCanRead')->willReturn(true);",
                "// Line 787: ",
                "// Line 788:         $semantic_timeframe = new SemanticTimeframe($tracker, new TimeframeWithEndDate($start_date_field, $end_date_field));",
                "// Line 789:         $this->semantic_timeframe_builder",
                "// Line 790:             ->method('getSemantic')",
                "// Line 791:             ->with($tracker)",
                "// Line 800:                     new MethodBasedOnEffort(",
                "// Line 801:                         $this->createMock(SemanticProgressDao::class),",
                "// Line 802:                         $total_effort_field,",
                "// Line 803:                         $remaining_effort_field",
                "// Line 804:                     )",
                "// Line 805:                 )",
                "// Line 806:             );",
                "// Line 807: ",
                "// Line 808:         $task_201 = $this->anArtifact(201, 'Do this', $tracker, true, $semantic_timeframe);",
                "// Line 809:         $task_202 = $this->anArtifact(202, 'Do that', $tracker, false, $semantic_timeframe);",
                "// vulnerable line: 810: $task_203 = $this->anArtifactWithoutStartDate(203, 'Do those', $tracker, true, $semantic_timeframe);",
                "// Line 811:         $task_204 = $this->anArtifact(204, 'Done more than 1 year ago', $tracker, true, $semantic_timeframe);",
                "// Line 812: ",
                "// Line 813:         $this->mockEffort($total_effort_field, [201 => 8, 203 => 3]);",
                "// Line 814:         $this->mockEffort($remaining_effort_field, [201 => 5, 203 => 0.75]);",
                "// Line 815: ",
                "// Line 816:         $artifacts = [$task_201, $task_202, $task_203, $task_204];",
                "// Line 817:         $this->artifact_factory",
                "// Line 818:             ->expects(self::once())",
                "// Line 819:             ->method('getPaginatedArtifactsByListOfArtifactIds')",
                "// Line 820:             ->with([201, 202], 0, 10)",
                "// Line 915:             ->method('userCanAccessProject')",
                "// Line 916:             ->with($this->user, $this->project);",
                "// Line 917: ",
                "// Line 918:         $title_field = $this->createMock(\\Tracker_FormElement_Field_String::class);",
                "// Line 919:         $title_field->method('userCanRead')->willReturn(true);",
                "// Line 920: ",
                "// Line 921:         $tracker = $this->getTracker(self::TRACKER_ID, $title_field, 'acid-green', 'task');",
                "// Line 922: ",
                "// Line 923:         $start_date_field   = TrackerFormElementDateFieldBuilder::aDateField(1)",
                "// Line 924:             ->withUserCanRead($this->user)",
                "// vulnerable line: 925: ->build();",
                "// Line 926:         $end_date_field     = TrackerFormElementDateFieldBuilder::aDateField(2)",
                "// Line 927:             ->withUserCanRead($this->user)",
                "// vulnerable line: 928: ->build();",
                "// Line 929:         $total_effort_field = $this->createMock(\\Tracker_FormElement_Field_Numeric::class);",
                "// Line 930:         $total_effort_field->method('userCanRead')->willReturn(true);",
                "// Line 931:         $remaining_effort_field = $this->createMock(\\Tracker_FormElement_Field_Numeric::class);",
                "// Line 932:         $remaining_effort_field->method('userCanRead')->willReturn(true);",
                "// Line 933: ",
                "// Line 934:         $semantic_timeframe = new SemanticTimeframe($tracker, new TimeframeWithEndDate($start_date_field, $end_date_field));",
                "// Line 935:         $this->semantic_timeframe_builder",
                "// Line 936:             ->method('getSemantic')",
                "// Line 937:             ->with($tracker)",
                "// Line 938:             ->willReturn($semantic_timeframe);",
                "// Line 1038:         $title_field = $this->createMock(\\Tracker_FormElement_Field_String::class);",
                "// Line 1039:         $title_field->method('userCanRead')->willReturn(true);",
                "// Line 1040:         $another_title_field = $this->createMock(\\Tracker_FormElement_Field_String::class);",
                "// Line 1041:         $another_title_field->method('userCanRead')->willReturn(true);",
                "// Line 1042: ",
                "// Line 1043:         $tracker         = $this->getTracker(self::TRACKER_ID, $title_field, 'acid-green', 'task');",
                "// Line 1044:         $another_tracker = $this->getTracker(self::ANOTHER_TRACKER_ID, $another_title_field, 'red-wine', 'bug');",
                "// Line 1045: ",
                "// Line 1046:         $start_date_field = TrackerFormElementDateFieldBuilder::aDateField(1)",
                "// Line 1047:             ->withUserCanRead($this->user)",
                "// vulnerable line: 1048: ->build();",
                "// Line 1049:         $end_date_field   = TrackerFormElementDateFieldBuilder::aDateField(2)",
                "// Line 1050:             ->withUserCanRead($this->user)",
                "// vulnerable line: 1051: ->build();",
                "// Line 1052: ",
                "// Line 1053:         $another_start_date_field = TrackerFormElementDateFieldBuilder::aDateField(3)",
                "// Line 1054:             ->withUserCanRead($this->user)",
                "// vulnerable line: 1055: ->build();",
                "// Line 1056:         $another_end_date_field   = TrackerFormElementDateFieldBuilder::aDateField(4)",
                "// Line 1057:             ->withUserCanRead($this->user)",
                "// vulnerable line: 1058: ->build();",
                "// Line 1059: ",
                "// Line 1060:         $semantic_timeframe_tracker         = new SemanticTimeframe(",
                "// Line 1061:             $tracker,",
                "// Line 1062:             new TimeframeWithEndDate($start_date_field, $end_date_field)",
                "// Line 1063:         );",
                "// Line 1064:         $semantic_timeframe_another_tracker = new SemanticTimeframe(",
                "// Line 1065:             $another_tracker,",
                "// Line 1066:             new TimeframeWithEndDate($another_start_date_field, $another_end_date_field)",
                "// Line 1067:         );",
                "// Line 1068:         $this->semantic_timeframe_builder",
                "// Line 1073:             });",
                "// Line 1074: ",
                "// Line 1075:         $this->progress_builder",
                "// Line 1076:             ->method('getSemantic')",
                "// Line 1077:             ->willReturnCallback(static fn(Tracker $arg) => match ($arg) {",
                "// Line 1078:                 $tracker         => new SemanticProgress($tracker, new MethodNotConfigured()),",
                "// Line 1079:                 $another_tracker => new SemanticProgress($another_tracker, new MethodNotConfigured()),",
                "// Line 1080:             });",
                "// Line 1081: ",
                "// Line 1082:         $task_201 = $this->anArtifact(201, 'Do this', $tracker, true, $semantic_timeframe_tracker);",
                "// vulnerable line: 1083: $task_203 = $this->anArtifactWithoutStartDate(203, 'Do those', $another_tracker, true, $semantic_timeframe_another_tracker);",
                "// Line 1084: ",
                "// Line 1085: ",
                "// Line 1086:         $artifacts = [$task_201, $task_203];",
                "// Line 1087:         $this->artifact_factory",
                "// Line 1088:             ->expects(self::once())",
                "// Line 1089:             ->method('getPaginatedArtifactsByListOfTrackerIds')",
                "// Line 1090:             ->with([self::TRACKER_ID, self::ANOTHER_TRACKER_ID], 0, 10)",
                "// Line 1091:             ->willReturn(",
                "// Line 1092:                 new \\Tracker_Artifact_PaginatedArtifacts($artifacts, 2)",
                "// Line 1093:             );",
                "// Line 1216:         $end_field = $semantic_timeframe->getEndDateField();",
                "// Line 1217:         if ($end_field !== null) {",
                "// Line 1218:             $changeset->setFieldValue(",
                "// Line 1219:                 $end_field,",
                "// Line 1220:                 ChangesetValueDateTestBuilder::aValue(2, $changeset, $end_field)",
                "// Line 1221:                     ->withTimestamp(1234567890)",
                "// Line 1222:                     ->build()",
                "// Line 1223:             );",
                "// Line 1224:         }",
                "// Line 1225: ",
                "// vulnerable line: 1226: return ArtifactTestBuilder::anArtifact($id)",
                "// Line 1227:             ->withTitle($title)",
                "// Line 1228:             ->inTracker($tracker)",
                "// Line 1229:             ->withChangesets($changeset)",
                "// vulnerable line: 1230: ->userCanView($readable)",
                "// Line 1231:             ->withParent(null)",
                "// vulnerable line: 1232: ->isOpen(true)",
                "// vulnerable line: 1233: ->build();",
                "// Line 1234:     }",
                "// Line 1235: ",
                "// vulnerable line: 1236: private function anArtifactWithoutStartDate(int $id, string $title, Tracker $tracker, bool $readable, SemanticTimeframe $semantic_timeframe): Artifact",
                "// Line 1237:     {",
                "// Line 1238:         $changeset   = ChangesetTestBuilder::aChangeset('1')->build();",
                "// Line 1239:         $start_field = $semantic_timeframe->getStartDateField();",
                "// Line 1240:         if ($start_field !== null) {",
                "// Line 1241:             $changeset->setFieldValue($start_field, null);",
                "// Line 1242:         }",
                "// Line 1243:         $end_field = $semantic_timeframe->getEndDateField();",
                "// Line 1244:         if ($end_field !== null) {",
                "// Line 1245:             $changeset->setFieldValue(",
                "// Line 1246:                 $end_field,",
                "// Line 1247:                 ChangesetValueDateTestBuilder::aValue(2, $changeset, $end_field)",
                "// Line 1248:                     ->withTimestamp(1234567890)",
                "// Line 1249:                     ->build()",
                "// Line 1250:             );",
                "// Line 1251:         }",
                "// vulnerable line: 1252: return ArtifactTestBuilder::anArtifact($id)",
                "// Line 1253:             ->withTitle($title)",
                "// Line 1254:             ->inTracker($tracker)",
                "// Line 1255:             ->withChangesets($changeset)",
                "// vulnerable line: 1256: ->userCanView($readable)",
                "// Line 1257:             ->withParent(null)",
                "// vulnerable line: 1258: ->isOpen(true)",
                "// vulnerable line: 1259: ->build();",
                "// Line 1260:     }",
                "// Line 1261: }"
            ]
        },
        {
            "filename_of_changes": "TimeframeNotConfiguredTest.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "8",
            "number_of_lines_deleted_vulnerable_to_cve": "4",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 95:     {",
                "// Line 96:         $artifact  = $this->createMock(Artifact::class);",
                "// Line 97:         $tracker   = TrackerTestBuilder::aTracker()->withName('User story')->build();",
                "// Line 98:         $changeset = $this->createMock(\\Tracker_Artifact_Changeset::class);",
                "// Line 99: ",
                "// Line 100:         $artifact->expects(self::once())->method('getLastChangeset')->willReturn($changeset);",
                "// Line 101:         $changeset->expects(self::once())->method('getTracker')->willReturn($tracker);",
                "// Line 102: ",
                "// Line 103:         $date_period = $this->timeframe->buildDatePeriodWithoutWeekendForChangesetForREST(",
                "// Line 104:             $artifact->getLastChangeset(),",
                "// vulnerable line: 105: UserTestBuilder::anActiveUser()->build(),",
                "// Line 106:             new NullLogger()",
                "// Line 107:         );",
                "// Line 108: ",
                "// Line 109:         self::assertNull($date_period->getStartDate());",
                "// Line 110:         self::assertNull($date_period->getDuration());",
                "// Line 111:         self::assertNull($date_period->getEndDate());",
                "// Line 112:         self::assertEquals(",
                "// Line 113:             'Semantic Timeframe is not configured for tracker User story.',",
                "// Line 114:             $date_period->getErrorMessage()",
                "// Line 115:         );",
                "// Line 116:     }",
                "// Line 117: ",
                "// Line 118:     public function testItReturnsAnEmptyDatePeriodWithAnErrorMessageForArtifactREST(): void",
                "// Line 119:     {",
                "// Line 120:         $changeset = $this->createMock(\\Tracker_Artifact_Changeset::class);",
                "// Line 121:         $artifact  = ArtifactTestBuilder::anArtifact(1)",
                "// Line 122:             ->withTitle('release_1_0')",
                "// Line 123:             ->withChangesets($changeset)",
                "// vulnerable line: 124: ->userCanView(true)",
                "// Line 125:             ->build();",
                "// Line 126:         $tracker   = TrackerTestBuilder::aTracker()->withName('User story')->build();",
                "// Line 127:         $changeset->expects(self::once())->method('getTracker')->willReturn($tracker);",
                "// Line 128: ",
                "// Line 129:         $date_period = $this->timeframe->buildDatePeriodWithoutWeekendForChangesetForREST(",
                "// Line 130:             $artifact->getLastChangeset(),",
                "// vulnerable line: 131: UserTestBuilder::anActiveUser()->build(),",
                "// Line 132:             new NullLogger()",
                "// Line 133:         );",
                "// Line 134: ",
                "// Line 135:         self::assertNull($date_period->getStartDate());",
                "// Line 136:         self::assertNull($date_period->getDuration());",
                "// Line 137:         self::assertNull($date_period->getEndDate());",
                "// Line 138:         self::assertEquals(",
                "// Line 139:             'Semantic Timeframe is not configured for tracker User story.',",
                "// Line 140:             $date_period->getErrorMessage()",
                "// Line 141:         );",
                "// Line 142:     }",
                "// Line 143: ",
                "// Line 144:     public function testItThrowsAnExceptionWhenInChartContext(): void",
                "// Line 145:     {",
                "// Line 146:         $changeset = $this->createMock(\\Tracker_Artifact_Changeset::class);",
                "// Line 147:         $artifact  = ArtifactTestBuilder::anArtifact(1)",
                "// Line 148:             ->withTitle('release_1_0')",
                "// Line 149:             ->withChangesets($changeset)",
                "// vulnerable line: 150: ->userCanView(true)",
                "// Line 151:             ->build();",
                "// Line 152:         $tracker   = TrackerTestBuilder::aTracker()->withName('User story')->build();",
                "// Line 153: ",
                "// Line 154:         $changeset->expects(self::once())->method('getTracker')->willReturn($tracker);",
                "// Line 155: ",
                "// Line 156:         self::expectException(\\Tracker_FormElement_Chart_Field_Exception::class);",
                "// Line 157: ",
                "// Line 158:         $this->timeframe->buildDatePeriodWithoutWeekendForChangesetChartRendering(",
                "// Line 159:             $artifact->getLastChangeset(),",
                "// vulnerable line: 160: UserTestBuilder::anActiveUser()->build(),",
                "// Line 161:             new NullLogger()",
                "// Line 162:         );",
                "// Line 163:     }",
                "// Line 164: }"
            ]
        },
        {
            "filename_of_changes": "TimeframeWithDurationTest.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "4",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 475:             $this->duration_field,",
                "// Line 476:             ChangesetValueIntegerTestBuilder::aValue(2, $changeset, $this->duration_field)",
                "// Line 477:                 ->withValue($duration)",
                "// Line 478:                 ->build()",
                "// Line 479:         );",
                "// Line 480: ",
                "// Line 481:         return ArtifactTestBuilder::anArtifact('1')",
                "// Line 482:             ->withTitle('title')",
                "// Line 483:             ->inTracker($this->tracker)",
                "// Line 484:             ->withChangesets($changeset)",
                "// vulnerable line: 485: ->userCanView(true)",
                "// Line 486:             ->withParent(null)",
                "// Line 487:             ->isOpen(true)",
                "// Line 488:             ->build();",
                "// Line 489:     }",
                "// Line 490: ",
                "// Line 491:     private function anArtifactWithoutStartDate(int $duration): Artifact",
                "// Line 492:     {",
                "// Line 493:         $changeset = ChangesetTestBuilder::aChangeset('1')->build();",
                "// Line 494:         $changeset->setFieldValue($this->start_date_field, null);",
                "// Line 495:         $changeset->setFieldValue(",
                "// Line 496:             $this->duration_field,",
                "// Line 497:             ChangesetValueIntegerTestBuilder::aValue(2, $changeset, $this->duration_field)",
                "// Line 498:                 ->withValue($duration)",
                "// Line 499:                 ->build()",
                "// Line 500:         );",
                "// Line 501: ",
                "// Line 502:         return ArtifactTestBuilder::anArtifact('1')",
                "// Line 503:             ->withTitle('title')",
                "// Line 504:             ->inTracker($this->tracker)",
                "// Line 505:             ->withChangesets($changeset)",
                "// vulnerable line: 506: ->userCanView(true)",
                "// Line 507:             ->withParent(null)",
                "// Line 508:             ->isOpen(true)",
                "// Line 509:             ->build();",
                "// Line 510:     }",
                "// Line 511: ",
                "// Line 512:     private function anArtifactWithoutDuration(string $start_date): Artifact",
                "// Line 513:     {",
                "// Line 514:         $changeset = ChangesetTestBuilder::aChangeset('1')->build();",
                "// Line 515:         $changeset->setFieldValue(",
                "// Line 516:             $this->start_date_field,",
                "// Line 517:             ChangesetValueDateTestBuilder::aValue(1, $changeset, $this->start_date_field)",
                "// Line 518:                 ->withTimestamp(strtotime($start_date))",
                "// Line 519:                 ->build()",
                "// Line 520:         );",
                "// Line 521:         $changeset->setFieldValue($this->duration_field, null);",
                "// Line 522: ",
                "// Line 523:         return ArtifactTestBuilder::anArtifact('1')",
                "// Line 524:             ->withTitle('title')",
                "// Line 525:             ->inTracker($this->tracker)",
                "// Line 526:             ->withChangesets($changeset)",
                "// vulnerable line: 527: ->userCanView(true)",
                "// Line 528:             ->withParent(null)",
                "// Line 529:             ->isOpen(true)",
                "// Line 530:             ->build();",
                "// Line 531:     }",
                "// Line 532: ",
                "// Line 533:     private function anArtifactWithoutAnyValue(): Artifact",
                "// Line 534:     {",
                "// Line 535:         $changeset = ChangesetTestBuilder::aChangeset('1')->build();",
                "// Line 536:         $changeset->setFieldValue($this->start_date_field, null);",
                "// Line 537:         $changeset->setFieldValue($this->duration_field, null);",
                "// Line 538: ",
                "// Line 539:         return ArtifactTestBuilder::anArtifact('1')",
                "// Line 540:             ->withTitle('title')",
                "// Line 541:             ->inTracker($this->tracker)",
                "// Line 542:             ->withChangesets($changeset)",
                "// vulnerable line: 543: ->userCanView(true)",
                "// Line 544:             ->withParent(null)",
                "// Line 545:             ->isOpen(true)",
                "// Line 546:             ->build();",
                "// Line 547:     }",
                "// Line 548: }"
            ]
        },
        {
            "filename_of_changes": "TimeframeWithEndDateTest.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "4",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 475:             $this->end_date_field,",
                "// Line 476:             ChangesetValueDateTestBuilder::aValue(2, $changeset, $this->end_date_field)",
                "// Line 477:                 ->withTimestamp(strtotime($end_date))",
                "// Line 478:                 ->build()",
                "// Line 479:         );",
                "// Line 480: ",
                "// Line 481:         return ArtifactTestBuilder::anArtifact('4')",
                "// Line 482:             ->withTitle('title')",
                "// Line 483:             ->inTracker(TrackerTestBuilder::aTracker()->build())",
                "// Line 484:             ->withChangesets($changeset)",
                "// vulnerable line: 485: ->userCanView(true)",
                "// Line 486:             ->withParent(null)",
                "// Line 487:             ->isOpen(true)",
                "// Line 488:             ->build();",
                "// Line 489:     }",
                "// Line 490: ",
                "// Line 491:     private function anArtifactWithoutEndDate(string $start_date): Artifact",
                "// Line 492:     {",
                "// Line 493:         $changeset = ChangesetTestBuilder::aChangeset('1')->build();",
                "// Line 494:         $changeset->setFieldValue(",
                "// Line 495:             $this->start_date_field,",
                "// Line 496:             ChangesetValueDateTestBuilder::aValue(1, $changeset, $this->start_date_field)",
                "// Line 497:                 ->withTimestamp(strtotime($start_date))",
                "// Line 498:                 ->build()",
                "// Line 499:         );",
                "// Line 500:         $changeset->setFieldValue($this->end_date_field, null);",
                "// Line 501: ",
                "// Line 502:         return ArtifactTestBuilder::anArtifact('4')",
                "// Line 503:             ->withTitle('title')",
                "// Line 504:             ->inTracker(TrackerTestBuilder::aTracker()->build())",
                "// Line 505:             ->withChangesets($changeset)",
                "// vulnerable line: 506: ->userCanView(true)",
                "// Line 507:             ->withParent(null)",
                "// Line 508:             ->isOpen(true)",
                "// Line 509:             ->build();",
                "// Line 510:     }",
                "// Line 511: ",
                "// Line 512:     private function anArtifactWithoutStartDate(string $end_date): Artifact",
                "// Line 513:     {",
                "// Line 514:         $changeset = ChangesetTestBuilder::aChangeset('1')->build();",
                "// Line 515:         $changeset->setFieldValue($this->start_date_field, null);",
                "// Line 516:         $changeset->setFieldValue(",
                "// Line 517:             $this->end_date_field,",
                "// Line 518:             ChangesetValueDateTestBuilder::aValue(2, $changeset, $this->end_date_field)",
                "// Line 519:                 ->withTimestamp(strtotime($end_date))",
                "// Line 520:                 ->build()",
                "// Line 521:         );",
                "// Line 522: ",
                "// Line 523:         return ArtifactTestBuilder::anArtifact('4')",
                "// Line 524:             ->withTitle('title')",
                "// Line 525:             ->inTracker(TrackerTestBuilder::aTracker()->build())",
                "// Line 526:             ->withChangesets($changeset)",
                "// vulnerable line: 527: ->userCanView(true)",
                "// Line 528:             ->withParent(null)",
                "// Line 529:             ->isOpen(true)",
                "// Line 530:             ->build();",
                "// Line 531:     }",
                "// Line 532: ",
                "// Line 533:     private function anArtifactWithoutAnyValue(): Artifact",
                "// Line 534:     {",
                "// Line 535:         $changeset = ChangesetTestBuilder::aChangeset('1')->build();",
                "// Line 536:         $changeset->setFieldValue($this->start_date_field, null);",
                "// Line 537:         $changeset->setFieldValue($this->end_date_field, null);",
                "// Line 538: ",
                "// Line 539:         return ArtifactTestBuilder::anArtifact('4')",
                "// Line 540:             ->withTitle('title')",
                "// Line 541:             ->inTracker(TrackerTestBuilder::aTracker()->build())",
                "// Line 542:             ->withChangesets($changeset)",
                "// vulnerable line: 543: ->userCanView(true)",
                "// Line 544:             ->withParent(null)",
                "// Line 545:             ->isOpen(true)",
                "// Line 546:             ->build();",
                "// Line 547:     }",
                "// Line 548: }"
            ]
        }
    ]
}