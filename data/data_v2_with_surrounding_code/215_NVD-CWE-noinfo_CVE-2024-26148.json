{
    "cve_id": "CVE-2024-26148",
    "cve_description": "Querybook is a user interface for querying big data. Prior to version 3.31.1, there is a vulnerability in Querybook's rich text editor that enables users to input arbitrary URLs without undergoing necessary validation. This particular security flaw allows the use of `javascript:` protocol which can potentially trigger arbitrary client-side execution. The most extreme exploit of this flaw could occur when an admin user unknowingly clicks on a cross-site scripting URL, thereby unintentionally compromising admin role access to the attacker. A patch to rectify this issue has been introduced in Querybook version `3.31.1`. The fix is backward compatible and automatically fixes existing DataDocs. There are no known workarounds for this issue, except for manually checking each URL prior to clicking on them.",
    "cve_publish_date": "2024-02-21T23:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fix: XSS injection with Querybook RichTextEditor (#1412)",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "index.tsx",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "19",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: import * as DraftJs from 'draft-js';",
                "// Line 2: import type { Stack } from 'immutable';",
                "// vulnerable line: 3: import React from 'react';",
                "// Line 4: ",
                "// Line 5: import { Link } from 'ui/Link/Link';",
                "// Line 6: ",
                "// Line 7: interface IUrlLinkProps {",
                "// Line 8:     contentState: DraftJs.ContentState;",
                "// Line 9:     entityKey: string;",
                "// Line 10: }",
                "// Line 11: ",
                "// Line 12: const UrlLink: React.FunctionComponent<IUrlLinkProps> = (props) => {",
                "// vulnerable line: 13: const { url } = props.contentState.getEntity(props.entityKey).getData();",
                "// Line 14:     return (",
                "// vulnerable line: 15: <Link to={url} newTab>",
                "// Line 16:             {props.children}",
                "// Line 17:         </Link>",
                "// Line 18:     );",
                "// Line 19: };",
                "// Line 20: ",
                "// Line 21: function findLinkEntities(contentBlock, callback, contentState) {",
                "// Line 22:     contentBlock.findEntityRanges((character) => {",
                "// Line 23:         const entityKey = character.getEntity();",
                "// Line 24:         return (",
                "// Line 25:             entityKey !== null &&"
            ]
        }
    ]
}