{
    "cve_id": "CVE-2024-40648",
    "cve_description": "matrix-rust-sdk is an implementation of a Matrix client-server library in Rust. The `UserIdentity::is_verified()` method in the matrix-sdk-crypto crate before version 0.7.2 doesn't take into account the verification status of the user's own identity while performing the check and may as a result return a value contrary to what is implied by its name and documentation. If the method is used to decide whether to perform sensitive operations towards a user identity, a malicious homeserver could manipulate the outcome in order to make the identity appear trusted. This is not a typical usage of the method, which lowers the impact. The method itself is not used inside the `matrix-sdk-crypto` crate. The 0.7.2 release of the `matrix-sdk-crypto` crate includes a fix. All users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "cve_publish_date": "2024-07-18T17:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "crypto: Fix UserIdentity::is_verified to take into account our own identity\n\nThe `UserIdentity::is_verified()` method in the matrix-sdk-crypto crate\nbefore version 0.7.2 doesn't take into account the verification status\nof the user's own identity while performing the check and may as a result\nreturn a value contrary to what is implied by its name and documentation.\n\nThis patch fixes this and adds a regression test.\n\nThe method itself is not used internally and as such has not a larger\nimpact.\n\nCo-authored-by: Denis Kasak <dkasak@termina.org.uk>\nSigned-off-by: Damir JeliÄ‡ <poljar@termina.org.uk>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "machine.rs",
            "code_language": "Rust",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 3505:             Err(MegolmError::JsonError(..))",
                "// Line 3506:         );",
                "// Line 3507: ",
                "// Line 3508:         // so should get_room_event_encryption_info",
                "// Line 3509:         assert_matches!(",
                "// Line 3510:             bob.get_room_event_encryption_info(&event, room_id).await,",
                "// Line 3511:             Err(MegolmError::JsonError(..))",
                "// Line 3512:         );",
                "// Line 3513:     }",
                "// Line 3514: ",
                "// vulnerable line: 3515: async fn setup_cross_signing_for_machine_test_helper(alice: &OlmMachine, bob: &OlmMachine) {",
                "// Line 3516:         let CrossSigningBootstrapRequests { upload_signing_keys_req: alice_upload_signing, .. } =",
                "// Line 3517:             alice.bootstrap_cross_signing(false).await.expect(\"Expect Alice x-signing key request\");",
                "// Line 3518: ",
                "// Line 3519:         let CrossSigningBootstrapRequests { upload_signing_keys_req: bob_upload_signing, .. } =",
                "// Line 3520:             bob.bootstrap_cross_signing(false).await.expect(\"Expect Bob x-signing key request\");",
                "// Line 3521: ",
                "// Line 3522:         let bob_device_keys = bob",
                "// Line 3523:             .get_device(bob.user_id(), bob.device_id(), None)",
                "// Line 3524:             .await",
                "// Line 3525:             .unwrap()",
                "// Line 3626:           }",
                "// Line 3627:         );",
                "// Line 3628: ",
                "// Line 3629:         let kq_response = KeyQueryResponse::try_from_http_response(response_from_file(&json))",
                "// Line 3630:             .expect(\"Can't parse the `/keys/upload` response\");",
                "// Line 3631: ",
                "// Line 3632:         alice.receive_keys_query_response(&TransactionId::new(), &kq_response).await.unwrap();",
                "// Line 3633:         bob.receive_keys_query_response(&TransactionId::new(), &kq_response).await.unwrap();",
                "// Line 3634:     }",
                "// Line 3635: ",
                "// vulnerable line: 3636: async fn mark_alice_identity_as_verified_test_helper(alice: &OlmMachine, bob: &OlmMachine) {",
                "// Line 3637:         let alice_device =",
                "// Line 3638:             bob.get_device(alice.user_id(), alice.device_id(), None).await.unwrap().unwrap();",
                "// Line 3639: ",
                "// Line 3640:         let alice_identity =",
                "// Line 3641:             bob.get_identity(alice.user_id(), None).await.unwrap().unwrap().other().unwrap();",
                "// Line 3642:         let upload_request = alice_identity.verify().await.unwrap();",
                "// Line 3643: ",
                "// Line 3644:         let raw_extracted =",
                "// Line 3645:             upload_request.signed_keys.get(alice.user_id()).unwrap().iter().next().unwrap().1.get();",
                "// Line 3646: "
            ]
        }
    ]
}