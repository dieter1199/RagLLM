{
    "cve_id": "CVE-2024-35190",
    "cve_description": "Asterisk is an open source private branch exchange and telephony toolkit. After upgrade to 18.23.0, ALL unauthorized SIP requests are identified as PJSIP Endpoint of local asterisk server. This vulnerability is fixed in 18.23.1, 20.8.1, and 21.3.1.\n",
    "cve_publish_date": "2024-05-17T17:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Revert \"res_pjsip_endpoint_identifier_ip: Add endpoint identifier transport address.\"\n\nThis reverts PR #602\n\nResolves: #GHSA-qqxj-v78h-hrf9",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "pjsip_configuration.c",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "0",
            "number_of_lines_deleted_vulnerable_to_cve": "5",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 407:  * ",
                "// Line 408: eturn String representation.",
                "// Line 409:  */",
                "// Line 410: static const char *sip_endpoint_identifier_type2str(enum ast_sip_endpoint_identifier_type method)",
                "// Line 411: {",
                "// Line 412:     const char *str = \"<unknown>\";",
                "// Line 413: ",
                "// Line 414:     switch (method) {",
                "// Line 415:     case AST_SIP_ENDPOINT_IDENTIFY_BY_USERNAME:",
                "// Line 416:         str = \"username\";",
                "// vulnerable line: 417: break;",
                "// Line 418:     case AST_SIP_ENDPOINT_IDENTIFY_BY_AUTH_USERNAME:",
                "// Line 419:         str = \"auth_username\";",
                "// vulnerable line: 420: break;",
                "// Line 421:     case AST_SIP_ENDPOINT_IDENTIFY_BY_IP:",
                "// Line 422:         str = \"ip\";",
                "// vulnerable line: 423: break;",
                "// Line 424:     case AST_SIP_ENDPOINT_IDENTIFY_BY_HEADER:",
                "// Line 425:         str = \"header\";",
                "// vulnerable line: 426: break;",
                "// Line 427:     case AST_SIP_ENDPOINT_IDENTIFY_BY_REQUEST_URI:",
                "// Line 428:         str = \"request_uri\";",
                "// vulnerable line: 429: break;",
                "// vulnerable line: 430: case AST_SIP_ENDPOINT_IDENTIFY_BY_TRANSPORT:",
                "// vulnerable line: 431: str = \"transport\";",
                "// vulnerable line: 432: break;",
                "// Line 433:     }",
                "// Line 434:     return str;",
                "// Line 435: }",
                "// Line 436: ",
                "// Line 437: /*!",
                "// Line 438:  * \\internal",
                "// Line 439:  * \brief Convert string to an endpoint identifier token.",
                "// Line 440:  *",
                "// Line 441:  * \\param str String to convert",
                "// Line 442:  *",
                "// Line 452:     if (!strcasecmp(str, \"username\")) {",
                "// Line 453:         method = AST_SIP_ENDPOINT_IDENTIFY_BY_USERNAME;",
                "// Line 454:     } else if (!strcasecmp(str, \"auth_username\")) {",
                "// Line 455:         method = AST_SIP_ENDPOINT_IDENTIFY_BY_AUTH_USERNAME;",
                "// Line 456:     } else if (!strcasecmp(str, \"ip\")) {",
                "// Line 457:         method = AST_SIP_ENDPOINT_IDENTIFY_BY_IP;",
                "// Line 458:     } else if (!strcasecmp(str, \"header\")) {",
                "// Line 459:         method = AST_SIP_ENDPOINT_IDENTIFY_BY_HEADER;",
                "// Line 460:     } else if (!strcasecmp(str, \"request_uri\")) {",
                "// Line 461:         method = AST_SIP_ENDPOINT_IDENTIFY_BY_REQUEST_URI;",
                "// vulnerable line: 462: } else if (!strcasecmp(str, \"transport\")) {",
                "// vulnerable line: 463: method = AST_SIP_ENDPOINT_IDENTIFY_BY_TRANSPORT;",
                "// Line 464:     } else {",
                "// Line 465:         method = -1;",
                "// Line 466:     }",
                "// Line 467:     return method;",
                "// Line 468: }",
                "// Line 469: ",
                "// Line 470: static int ident_handler(const struct aco_option *opt, struct ast_variable *var, void *obj)",
                "// Line 471: {",
                "// Line 472:     struct ast_sip_endpoint *endpoint = obj;",
                "// Line 473:     char *idents = ast_strdupa(var->value);",
                "// Line 540:             continue;",
                "// Line 541:         }",
                "// Line 542: ",
                "// Line 543:         buf_used += snprintf(*buf + buf_used, buf_size - buf_used, \"%s%s\",",
                "// Line 544:             method_str, idx < methods - 1 ? \",\" : \"\");",
                "// Line 545:         if (buf_size <= buf_used) {",
                "// Line 546:             /* Need more room than available, truncating. */",
                "// Line 547:             *(*buf + (buf_size - 1)) = '\u0000';",
                "// Line 548:             ast_log(LOG_WARNING, \"Truncated identify_by string: %s",
                "// Line 549: \", *buf);",
                "// vulnerable line: 550: break;",
                "// Line 551:         }",
                "// Line 552:     }",
                "// Line 553: ",
                "// Line 554:     return 0;",
                "// Line 555: }",
                "// Line 556: ",
                "// Line 557: static int media_address_handler(const struct aco_option *opt, struct ast_variable *var, void *obj)",
                "// Line 558: {",
                "// Line 559:     struct ast_sip_endpoint *endpoint = obj;",
                "// Line 560:     struct ast_sockaddr addr;"
            ]
        },
        {
            "filename_of_changes": "res_pjsip.h",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "0",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 611:     /*! Identify based on user name in From header */",
                "// Line 612:     AST_SIP_ENDPOINT_IDENTIFY_BY_USERNAME = (1 << 0),",
                "// Line 613:     /*! Identify based on user name in Auth header first, then From header */",
                "// Line 614:     AST_SIP_ENDPOINT_IDENTIFY_BY_AUTH_USERNAME = (1 << 1),",
                "// Line 615:     /*! Identify based on source IP address */",
                "// Line 616:     AST_SIP_ENDPOINT_IDENTIFY_BY_IP = (1 << 2),",
                "// Line 617:     /*! Identify based on arbitrary headers */",
                "// Line 618:     AST_SIP_ENDPOINT_IDENTIFY_BY_HEADER = (1 << 3),",
                "// Line 619:     /*! Identify based on request uri */",
                "// Line 620:     AST_SIP_ENDPOINT_IDENTIFY_BY_REQUEST_URI = (1 << 4),",
                "// vulnerable line: 621: /*! Identify based on bound (local) IP address */",
                "// vulnerable line: 622: AST_SIP_ENDPOINT_IDENTIFY_BY_TRANSPORT = (1 << 5),",
                "// Line 623: };",
                "// Line 624: AST_VECTOR(ast_sip_identify_by_vector, enum ast_sip_endpoint_identifier_type);",
                "// Line 625: ",
                "// Line 626: enum ast_sip_session_refresh_method {",
                "// Line 627:     /*! Use reinvite to negotiate direct media */",
                "// Line 628:     AST_SIP_SESSION_REFRESH_METHOD_INVITE,",
                "// Line 629:     /*! Use UPDATE to negotiate direct media */",
                "// Line 630:     AST_SIP_SESSION_REFRESH_METHOD_UPDATE,",
                "// Line 631: };",
                "// Line 632: "
            ]
        }
    ]
}