{
    "cve_id": "CVE-2023-52557",
    "cve_description": "In OpenBSD 7.3 before errata 016, npppd(8) could crash by a l2tp message which has an AVP (Attribute-Value Pair) with wrong length.\n",
    "cve_publish_date": "2024-03-01T17:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Check if the avp->length is not broken.   Also make sure that\navp_enum() checks if avp->length is valid.\n\nok mvp",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "l2tp_subr.c",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "5",
            "number_of_lines_deleted_vulnerable_to_cve": "6",
            "Code_with_highlighted_vulnerability_lines": [
                "// vulnerable line: 1: /*    $OpenBSD: l2tp_subr.c,v 1.4 2012/05/08 13:15:11 yasuoka Exp $    */",
                "// Line 2: ",
                "// Line 3: /*-",
                "// Line 4:  * Copyright (c) 2009 Internet Initiative Japan Inc.",
                "// Line 5:  * All rights reserved.",
                "// Line 6:  *",
                "// Line 7:  * Redistribution and use in source and binary forms, with or without",
                "// Line 8:  * modification, are permitted provided that the following conditions",
                "// Line 9:  * are met:",
                "// Line 10:  * 1. Redistributions of source code must retain the above copyright",
                "// Line 11:  *    notice, this list of conditions and the following disclaimer.",
                "// Line 18:  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE",
                "// Line 19:  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE",
                "// Line 20:  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL",
                "// Line 21:  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS",
                "// Line 22:  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)",
                "// Line 23:  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT",
                "// Line 24:  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY",
                "// Line 25:  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF",
                "// Line 26:  * SUCH DAMAGE.",
                "// Line 27:  */",
                "// vulnerable line: 28: /* $Id: l2tp_subr.c,v 1.4 2012/05/08 13:15:11 yasuoka Exp $ */",
                "// Line 29: /**@file L2TP related sub-routines */",
                "// Line 30: #include <sys/types.h>",
                "// Line 31: #include <sys/time.h>",
                "// Line 32: #include <sys/socket.h>",
                "// Line 33: #include <netinet/in.h>",
                "// Line 34: #include <stdlib.h>",
                "// Line 35: #include <stdio.h>",
                "// Line 36: #include <syslog.h>",
                "// Line 37: #include <string.h>",
                "// Line 38: #include <event.h>",
                "// Line 73:     avp->is_mandatory = ((flags & 0x8000) != 0)? 1 : 0;",
                "// Line 74:     avp->is_hidden = ((flags & 0x4000) != 0)? 1 : 0;",
                "// Line 75:     avp->length = flags & 0x03ff;",
                "// Line 76: ",
                "// Line 77:     GETSHORT(avp->vendor_id, pkt);",
                "// Line 78: ",
                "// Line 79:     avp->attr_type = *pkt << 8;",
                "// Line 80:     avp->attr_type |= *(pkt + 1);",
                "// Line 81:     pkt += 2;",
                "// Line 82: ",
                "// vulnerable line: 83: if (avp->length > pktlen)",
                "// Line 84:         return -1;",
                "// Line 85: ",
                "// vulnerable line: 86: if (filldata != 0)",
                "// Line 87:         memcpy(avp->attr_value, pkt, avp->length - 6);",
                "// Line 88: ",
                "// Line 89:     return avp->length;",
                "// Line 90: }",
                "// Line 91: ",
                "// Line 92: #define    NAME_VAL(x)    { x, #x }",
                "// Line 93: static struct _label_name {",
                "// Line 94:     int        label;",
                "// Line 95:     const char    *name;",
                "// Line 96: }",
                "// Line 279:  */",
                "// Line 280: struct l2tp_avp *",
                "// Line 281: avp_find(struct l2tp_avp *avp, const u_char *pkt, int pktlen,",
                "// Line 282:     uint16_t vendor_id, uint16_t attr_type, int fill_data)",
                "// Line 283: {",
                "// Line 284:     int avpsz;",
                "// Line 285: ",
                "// Line 286:     while (pktlen >= 6 &&",
                "// Line 287:         (avpsz = avp_enum(avp, pkt, pktlen, fill_data)) > 0) {",
                "// Line 288:         if (avp->vendor_id != vendor_id || avp->attr_type != attr_type) {",
                "// vulnerable line: 289: if (avpsz < 6)",
                "// vulnerable line: 290: return NULL;",
                "// Line 291:             pkt += avpsz;",
                "// Line 292:             pktlen -= avpsz;",
                "// Line 293:             continue;",
                "// Line 294:         }",
                "// Line 295:         return avp;",
                "// Line 296:     }",
                "// Line 297: ",
                "// vulnerable line: 298: return NULL;",
                "// Line 299: }",
                "// Line 300: ",
                "// Line 301: /**",
                "// Line 302:  * Search the Message-Type AVP and return it.  The memory space of the \"avp\"",
                "// Line 303:  * must be larger than or equal to L2TP_AVP_MAXSIZ (1024).",
                "// Line 304:  */",
                "// Line 305: struct l2tp_avp *",
                "// Line 306: avp_find_message_type_avp(struct l2tp_avp *avp, const u_char *pkt, int pktlen)",
                "// Line 307: {",
                "// Line 308:     return avp_find(avp, pkt, pktlen, 0, L2TP_AVP_TYPE_MESSAGE_TYPE, 1);"
            ]
        }
    ]
}