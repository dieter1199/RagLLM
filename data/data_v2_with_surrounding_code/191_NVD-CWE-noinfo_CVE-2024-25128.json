{
    "cve_id": "CVE-2024-25128",
    "cve_description": "Flask-AppBuilder is an application development framework, built on top of Flask. When Flask-AppBuilder is set to AUTH_TYPE AUTH_OID, it allows an attacker to forge an HTTP request, that could deceive the backend into using any requested OpenID service. This vulnerability could grant an attacker unauthorised privilege access if a custom OpenID service is deployed by the attacker and accessible by the backend. This vulnerability is only exploitable when the application is using the OpenID 2.0 authorization protocol. Upgrade to Flask-AppBuilder 4.3.11 to fix the vulnerability.",
    "cve_publish_date": "2024-02-29T01:44Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fix: openID provider validation flow (#2186)\n\n* fix: openID provider validation flow\r\n\r\n* remove test cleanup",
    "type_of_change": "Addition",
    "changes": [
        {
            "filename_of_changes": "config_oid.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "29",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "manager.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "8",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "test_mvc_oauth.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 19: ",
                "// Line 20: class OAuthRemoteMock:",
                "// Line 21:     def authorize_access_token(self):",
                "// Line 22:         return {\"access_token\": \"some-key\"}",
                "// Line 23: ",
                "// Line 24:     def get(self, item):",
                "// Line 25:         if item == \"userinfo\":",
                "// Line 26:             return UserInfoReponseMock()",
                "// Line 27: ",
                "// Line 28: ",
                "// vulnerable line: 29: class APICSRFTestCase(FABTestCase):",
                "// Line 30:     def setUp(self):",
                "// Line 31:         from flask import Flask",
                "// Line 32:         from flask_wtf import CSRFProtect",
                "// Line 33:         from flask_appbuilder import AppBuilder",
                "// Line 34: ",
                "// Line 35:         self.app = Flask(__name__)",
                "// Line 36:         self.app.config.from_object(\"tests.config_oauth\")",
                "// Line 37:         self.app.config[\"WTF_CSRF_ENABLED\"] = True",
                "// Line 38: ",
                "// Line 39:         self.csrf = CSRFProtect(self.app)"
            ]
        },
        {
            "filename_of_changes": "test_security_api.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "views.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "5",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 559:     @expose(\"/login/\", methods=[\"GET\", \"POST\"])",
                "// Line 560:     def login(self, flag=True) -> WerkzeugResponse:",
                "// Line 561:         @self.appbuilder.sm.oid.loginhandler",
                "// Line 562:         def login_handler(self):",
                "// Line 563:             if g.user is not None and g.user.is_authenticated:",
                "// Line 564:                 return redirect(self.appbuilder.get_url_for_index)",
                "// Line 565:             form = LoginForm_oid()",
                "// Line 566:             if form.validate_on_submit():",
                "// Line 567:                 session[\"remember_me\"] = form.remember_me.data",
                "// Line 568:                 return self.appbuilder.sm.oid.try_login(",
                "// vulnerable line: 569: form.openid.data,",
                "// Line 570:                     ask_for=self.oid_ask_for,",
                "// Line 571:                     ask_for_optional=self.oid_ask_for_optional,",
                "// Line 572:                 )",
                "// Line 573:             return self.render_template(",
                "// Line 574:                 self.login_template,",
                "// Line 575:                 title=self.title,",
                "// Line 576:                 form=form,",
                "// Line 577:                 providers=self.appbuilder.sm.openid_providers,",
                "// Line 578:                 appbuilder=self.appbuilder,",
                "// Line 579:             )"
            ]
        }
    ]
}