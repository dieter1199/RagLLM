{
    "cve_id": "CVE-2024-24752",
    "cve_description": "Bref enable serverless PHP on AWS Lambda. When Bref is used with the Event-Driven Function runtime and the handler is a `RequestHandlerInterface`, then the Lambda event is converted to a PSR7 object. During the conversion process, if the request is a MultiPart, each part is parsed and for each which contains a file, it is extracted and saved in `/tmp` with a random filename starting with `bref_upload_`. The flow mimics what plain PHP does but it does not delete the temporary files when the request has been processed. An attacker could fill the Lambda instance disk by performing multiple MultiPart requests containing files. This vulnerability is patched in 2.1.13.",
    "cve_publish_date": "2024-02-01T16:17Z",
    "cwe_id": "CWE-400",
    "cwe_name": "Uncontrolled Resource Consumption",
    "cwe_description": "The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.",
    "commit_message": "Support malformed multipart body\n\nFor example body containing broken array keys like `key0[key1][key2][`",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "CommonHttpTest.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 394: --testBoundary",
                "// Line 395: Content-Disposition: form-data; name=\"bar\"; filename=\"cars.csv\"",
                "// Line 396: ",
                "// Line 397: Year,Make,Model",
                "// Line 398: 1997,Ford,E350",
                "// Line 399: 2000,Mercury,Cougar",
                "// Line 400: ",
                "// Line 401: --testBoundary--",
                "// Line 402: \";",
                "// Line 403:         $this->assertBody($body);",
                "// vulnerable line: 404: $this->assertParsedBody([]);",
                "// Line 405:         $this->assertUploadedFile(",
                "// Line 406:             'foo',",
                "// Line 407:             'lorem.txt',",
                "// Line 408:             'text/plain',",
                "// Line 409:             0,",
                "// Line 410:             57,",
                "// Line 411:             \"Lorem ipsum dolor sit amet,",
                "// Line 412: consectetur adipiscing elit.",
                "// Line 413: \"",
                "// Line 414:         );",
                "// Line 552:     abstract protected function assertRemotePort(int $expected): void;",
                "// Line 553: ",
                "// Line 554:     abstract protected function assertServerName(string $expected): void;",
                "// Line 555: ",
                "// Line 556:     abstract protected function assertServerPort(int $expected): void;",
                "// Line 557: ",
                "// Line 558:     abstract protected function assertUri(string $expected): void;",
                "// Line 559: ",
                "// Line 560:     abstract protected function assertHasMultiHeader(bool $expected): void;",
                "// Line 561: ",
                "// vulnerable line: 562: abstract protected function assertParsedBody(array $expected): void;",
                "// Line 563: ",
                "// Line 564:     abstract protected function assertSourceIp(string $expected): void;",
                "// Line 565: ",
                "// Line 566:     abstract protected function assertBasicAuthUser(string $expected): void;",
                "// Line 567: ",
                "// Line 568:     abstract protected function assertBasicAuthPassword(string $expected): void;",
                "// Line 569: ",
                "// Line 570:     abstract protected function assertUploadedFile(",
                "// Line 571:         string $key,",
                "// Line 572:         string $filename,"
            ]
        },
        {
            "filename_of_changes": "HttpRequestEventTest.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 105:     protected function assertHasMultiHeader(bool $expected): void",
                "// Line 106:     {",
                "// Line 107:         $this->assertEquals($expected, $this->event->hasMultiHeader());",
                "// Line 108:     }",
                "// Line 109: ",
                "// Line 110:     protected function assertSourceIp(string $expected): void",
                "// Line 111:     {",
                "// Line 112:         $this->assertEquals($expected, $this->event->getSourceIp());",
                "// Line 113:     }",
                "// Line 114: ",
                "// vulnerable line: 115: protected function assertParsedBody(array $expected): void",
                "// Line 116:     {",
                "// Line 117:         // Not applicable here since the class doesn't parse the body",
                "// Line 118:     }",
                "// Line 119: ",
                "// Line 120:     protected function assertUploadedFile(",
                "// Line 121:         string $key,",
                "// Line 122:         string $filename,",
                "// Line 123:         string $mimeType,",
                "// Line 124:         int $error,",
                "// Line 125:         int $size,"
            ]
        },
        {
            "filename_of_changes": "Psr7BridgeTest.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 116:     {",
                "// Line 117:         $this->assertEquals($expected, (string) $this->request->getUri());",
                "// Line 118:         $this->assertEquals($expected, $this->request->getServerParams()['REQUEST_URI']);",
                "// Line 119:     }",
                "// Line 120: ",
                "// Line 121:     protected function assertHasMultiHeader(bool $expected): void",
                "// Line 122:     {",
                "// Line 123:         // Not applicable here",
                "// Line 124:     }",
                "// Line 125: ",
                "// vulnerable line: 126: protected function assertParsedBody(array $expected): void",
                "// Line 127:     {",
                "// Line 128:         $this->assertEquals($expected, $this->request->getParsedBody());",
                "// Line 129:     }",
                "// Line 130: ",
                "// Line 131:     protected function assertUploadedFile(",
                "// Line 132:         string $key,",
                "// Line 133:         string $filename,",
                "// Line 134:         string $mimeType,",
                "// Line 135:         int $error,",
                "// Line 136:         int $size,"
            ]
        }
    ]
}