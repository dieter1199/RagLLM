{
    "cve_id": "CVE-2024-23832",
    "cve_description": "Mastodon is a free, open-source social network server based on ActivityPub Mastodon allows configuration of LDAP for authentication. Due to insufficient origin validation in all Mastodon, attackers can impersonate and take over any remote account. Every Mastodon version prior to 3.5.17 is vulnerable, as well as 4.0.x versions prior to 4.0.13, 4.1.x version prior to 4.1.13, and 4.2.x versions prior to 4.2.5.",
    "cve_publish_date": "2024-02-01T17:15Z",
    "cwe_id": "CWE-290",
    "cwe_name": "Authentication Bypass by Spoofing",
    "cwe_description": "This attack-focused weakness is caused by incorrectly implemented authentication schemes that are subject to spoofing attacks.",
    "commit_message": "Merge pull request from GHSA-3fjr-858r-92rw\n\n* Fix insufficient origin validation\n\n* Bump version to 4.3.0-alpha.1",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "activity.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 147:   end",
                "// Line 148: ",
                "// Line 149:   def follow_from_object",
                "// Line 150:     @follow_from_object ||= ::Follow.find_by(target_account: @account, uri: object_uri) unless object_uri.nil?",
                "// Line 151:   end",
                "// Line 152: ",
                "// Line 153:   def fetch_remote_original_status",
                "// Line 154:     if object_uri.start_with?('http')",
                "// Line 155:       return if ActivityPub::TagManager.instance.local_uri?(object_uri)",
                "// Line 156: ",
                "// vulnerable line: 157: ActivityPub::FetchRemoteStatusService.new.call(object_uri, id: true, on_behalf_of: @account.followers.local.first, request_id: @options[:request_id])",
                "// Line 158:     elsif @object['url'].present?",
                "// Line 159:       ::FetchRemoteStatusService.new.call(@object['url'], request_id: @options[:request_id])",
                "// Line 160:     end",
                "// Line 161:   end",
                "// Line 162: ",
                "// Line 163:   def fetch?",
                "// Line 164:     !@options[:delivery]",
                "// Line 165:   end",
                "// Line 166: ",
                "// Line 167:   def followed_by_local_accounts?"
            ]
        },
        {
            "filename_of_changes": "fetch_remote_account_service.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: # frozen_string_literal: true",
                "// Line 2: ",
                "// Line 3: class ActivityPub::FetchRemoteAccountService < ActivityPub::FetchRemoteActorService",
                "// Line 4:   # Does a WebFinger roundtrip on each call, unless `only_key` is true",
                "// vulnerable line: 5: def call(uri, id: true, prefetched_body: nil, break_on_redirect: false, only_key: false, suppress_errors: true, request_id: nil)",
                "// Line 6:     actor = super",
                "// Line 7:     return actor if actor.nil? || actor.is_a?(Account)",
                "// Line 8: ",
                "// Line 9:     Rails.logger.debug { \"Fetching account #{uri} failed: Expected Account, got #{actor.class.name}\" }",
                "// Line 10:     raise Error, \"Expected Account, got #{actor.class.name}\" unless suppress_errors",
                "// Line 11:   end",
                "// Line 12: end"
            ]
        },
        {
            "filename_of_changes": "fetch_remote_account_service_spec.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 11:       id: 'https://example.com/alice',",
                "// Line 12:       type: 'Person',",
                "// Line 13:       preferredUsername: 'alice',",
                "// Line 14:       name: 'Alice',",
                "// Line 15:       summary: 'Foo bar',",
                "// Line 16:       inbox: 'http://example.com/alice/inbox',",
                "// Line 17:     }",
                "// Line 18:   end",
                "// Line 19: ",
                "// Line 20:   describe '#call' do",
                "// vulnerable line: 21: let(:account) { subject.call('https://example.com/alice', id: true) }",
                "// Line 22: ",
                "// Line 23:     shared_examples 'sets profile data' do",
                "// Line 24:       it 'returns an account with expected details' do",
                "// Line 25:         expect(account)",
                "// Line 26:           .to be_an(Account)",
                "// Line 27:           .and have_attributes(",
                "// Line 28:             display_name: eq('Alice'),",
                "// Line 29:             note: eq('Foo bar'),",
                "// Line 30:             url: eq('https://example.com/alice')",
                "// Line 31:           )"
            ]
        },
        {
            "filename_of_changes": "fetch_remote_actor_service.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 3: class ActivityPub::FetchRemoteActorService < BaseService",
                "// Line 4:   include JsonLdHelper",
                "// Line 5:   include DomainControlHelper",
                "// Line 6:   include WebfingerHelper",
                "// Line 7: ",
                "// Line 8:   class Error < StandardError; end",
                "// Line 9: ",
                "// Line 10:   SUPPORTED_TYPES = %w(Application Group Organization Person Service).freeze",
                "// Line 11: ",
                "// Line 12:   # Does a WebFinger roundtrip on each call, unless `only_key` is true",
                "// vulnerable line: 13: def call(uri, id: true, prefetched_body: nil, break_on_redirect: false, only_key: false, suppress_errors: true, request_id: nil)",
                "// Line 14:     return if domain_not_allowed?(uri)",
                "// Line 15:     return ActivityPub::TagManager.instance.uri_to_actor(uri) if ActivityPub::TagManager.instance.local_uri?(uri)",
                "// Line 16: ",
                "// Line 17:     @json = begin",
                "// Line 18:       if prefetched_body.nil?",
                "// vulnerable line: 19: fetch_resource(uri, id)",
                "// Line 20:       else",
                "// vulnerable line: 21: body_to_json(prefetched_body, compare_id: id ? uri : nil)",
                "// Line 22:       end",
                "// Line 23:     rescue Oj::ParseError",
                "// Line 24:       raise Error, \"Error parsing JSON-LD document #{uri}\"",
                "// Line 25:     end",
                "// Line 26: ",
                "// Line 27:     raise Error, \"Error fetching actor JSON at #{uri}\" if @json.nil?",
                "// Line 28:     raise Error, \"Unsupported JSON-LD context for document #{uri}\" unless supported_context?",
                "// Line 29:     raise Error, \"Unexpected object type for actor #{uri} (expected any of: #{SUPPORTED_TYPES})\" unless expected_type?",
                "// Line 30:     raise Error, \"Actor #{uri} has moved to #{@json['movedTo']}\" if break_on_redirect && @json['movedTo'].present?",
                "// Line 31:     raise Error, \"Actor #{uri} has no 'preferredUsername', which is a requirement for Mastodon compatibility\" if @json['preferredUsername'].blank?"
            ]
        },
        {
            "filename_of_changes": "fetch_remote_actor_service_spec.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 11:       id: 'https://example.com/alice',",
                "// Line 12:       type: 'Person',",
                "// Line 13:       preferredUsername: 'alice',",
                "// Line 14:       name: 'Alice',",
                "// Line 15:       summary: 'Foo bar',",
                "// Line 16:       inbox: 'http://example.com/alice/inbox',",
                "// Line 17:     }",
                "// Line 18:   end",
                "// Line 19: ",
                "// Line 20:   describe '#call' do",
                "// vulnerable line: 21: let(:account) { subject.call('https://example.com/alice', id: true) }",
                "// Line 22: ",
                "// Line 23:     shared_examples 'sets profile data' do",
                "// Line 24:       it 'returns an account and sets attributes' do",
                "// Line 25:         expect(account)",
                "// Line 26:           .to be_an(Account)",
                "// Line 27:           .and have_attributes(",
                "// Line 28:             display_name: eq('Alice'),",
                "// Line 29:             note: eq('Foo bar'),",
                "// Line 30:             url: eq('https://example.com/alice')",
                "// Line 31:           )"
            ]
        },
        {
            "filename_of_changes": "fetch_remote_key_service.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "15",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: # frozen_string_literal: true",
                "// Line 2: ",
                "// Line 3: class ActivityPub::FetchRemoteKeyService < BaseService",
                "// Line 4:   include JsonLdHelper",
                "// Line 5: ",
                "// Line 6:   class Error < StandardError; end",
                "// Line 7: ",
                "// Line 8:   # Returns actor that owns the key",
                "// vulnerable line: 9: def call(uri, id: true, prefetched_body: nil, suppress_errors: true)",
                "// Line 10:     raise Error, 'No key URI given' if uri.blank?",
                "// Line 11: ",
                "// vulnerable line: 12: if prefetched_body.nil?",
                "// vulnerable line: 13: if id",
                "// vulnerable line: 14: @json = fetch_resource_without_id_validation(uri)",
                "// vulnerable line: 15: if actor_type?",
                "// vulnerable line: 16: @json = fetch_resource(@json['id'], true)",
                "// vulnerable line: 17: elsif uri != @json['id']",
                "// vulnerable line: 18: raise Error, \"Fetched URI #{uri} has wrong id #{@json['id']}\"",
                "// vulnerable line: 19: end",
                "// vulnerable line: 20: else",
                "// vulnerable line: 21: @json = fetch_resource(uri, id)",
                "// vulnerable line: 22: end",
                "// vulnerable line: 23: else",
                "// vulnerable line: 24: @json = body_to_json(prefetched_body, compare_id: id ? uri : nil)",
                "// vulnerable line: 25: end",
                "// Line 26: ",
                "// Line 27:     raise Error, \"Unable to fetch key JSON at #{uri}\" if @json.nil?",
                "// Line 28:     raise Error, \"Unsupported JSON-LD context for document #{uri}\" unless supported_context?(@json)",
                "// Line 29:     raise Error, \"Unexpected object type for key #{uri}\" unless expected_type?",
                "// Line 30:     return find_actor(@json['id'], @json, suppress_errors) if actor_type?",
                "// Line 31: ",
                "// Line 32:     @owner = fetch_resource(owner_uri, true)",
                "// Line 33: ",
                "// Line 34:     raise Error, \"Unable to fetch actor JSON #{owner_uri}\" if @owner.nil?",
                "// Line 35:     raise Error, \"Unsupported JSON-LD context for document #{owner_uri}\" unless supported_context?(@owner)",
                "// Line 36:     raise Error, \"Unexpected object type for actor #{owner_uri} (expected any of: #{SUPPORTED_TYPES})\" unless expected_owner_type?",
                "// Line 37:     raise Error, \"publicKey id for #{owner_uri} does not correspond to #{@json['id']}\" unless confirmed_owner?",
                "// Line 38: ",
                "// Line 39:     find_actor(owner_uri, @owner, suppress_errors)",
                "// Line 40:   rescue Error => e",
                "// Line 41:     Rails.logger.debug { \"Fetching key #{uri} failed: #{e.message}\" }",
                "// Line 42:     raise unless suppress_errors",
                "// vulnerable line: 43: end",
                "// Line 44: ",
                "// Line 45:   private",
                "// Line 46: ",
                "// Line 47:   def find_actor(uri, prefetched_body, suppress_errors)",
                "// Line 48:     actor   = ActivityPub::TagManager.instance.uri_to_actor(uri)",
                "// Line 49:     actor ||= ActivityPub::FetchRemoteActorService.new.call(uri, prefetched_body: prefetched_body, suppress_errors: suppress_errors)",
                "// Line 50:     actor",
                "// vulnerable line: 51: end",
                "// Line 52: ",
                "// Line 53:   def expected_type?",
                "// Line 54:     actor_type? || public_key?",
                "// vulnerable line: 55: end",
                "// Line 56: ",
                "// Line 57:   def actor_type?",
                "// Line 58:     equals_or_includes_any?(@json['type'], ActivityPub::FetchRemoteActorService::SUPPORTED_TYPES)",
                "// vulnerable line: 59: end",
                "// Line 60: ",
                "// Line 61:   def public_key?",
                "// Line 62:     @json['publicKeyPem'].present? && @json['owner'].present?",
                "// vulnerable line: 63: end",
                "// Line 64: ",
                "// Line 65:   def owner_uri",
                "// Line 66:     @owner_uri ||= value_or_id(@json['owner'])",
                "// vulnerable line: 67: end",
                "// Line 68: ",
                "// Line 69:   def expected_owner_type?",
                "// Line 70:     equals_or_includes_any?(@owner['type'], ActivityPub::FetchRemoteActorService::SUPPORTED_TYPES)",
                "// vulnerable line: 71: end",
                "// Line 72: ",
                "// Line 73:   def confirmed_owner?",
                "// Line 74:     value_or_id(@owner['publicKey']) == @json['id']",
                "// vulnerable line: 75: end",
                "// vulnerable line: 76: end"
            ]
        },
        {
            "filename_of_changes": "fetch_remote_key_service_spec.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 48:       publicKey: actor_public_key,",
                "// Line 49:     }",
                "// Line 50:   end",
                "// Line 51: ",
                "// Line 52:   before do",
                "// Line 53:     stub_request(:get, 'https://example.com/alice').to_return(body: Oj.dump(actor))",
                "// Line 54:     stub_request(:get, 'https://example.com/.well-known/webfinger?resource=acct:alice@example.com').to_return(body: Oj.dump(webfinger), headers: { 'Content-Type': 'application/jrd+json' })",
                "// Line 55:   end",
                "// Line 56: ",
                "// Line 57:   describe '#call' do",
                "// vulnerable line: 58: let(:account) { subject.call(public_key_id, id: false) }",
                "// Line 59: ",
                "// Line 60:     context 'when the key is a sub-object from the actor' do",
                "// Line 61:       before do",
                "// Line 62:         stub_request(:get, public_key_id).to_return(body: Oj.dump(actor))",
                "// Line 63:       end",
                "// Line 64: ",
                "// Line 65:       it 'returns the expected account' do",
                "// Line 66:         expect(account.uri).to eq 'https://example.com/alice'",
                "// Line 67:       end",
                "// Line 68:     end"
            ]
        },
        {
            "filename_of_changes": "fetch_remote_status_service.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "4",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: # frozen_string_literal: true",
                "// Line 2: ",
                "// Line 3: class ActivityPub::FetchRemoteStatusService < BaseService",
                "// Line 4:   include JsonLdHelper",
                "// Line 5:   include DomainControlHelper",
                "// Line 6:   include Redisable",
                "// Line 7: ",
                "// Line 8:   DISCOVERIES_PER_REQUEST = 1000",
                "// Line 9: ",
                "// Line 10:   # Should be called when uri has already been checked for locality",
                "// vulnerable line: 11: def call(uri, id: true, prefetched_body: nil, on_behalf_of: nil, expected_actor_uri: nil, request_id: nil)",
                "// Line 12:     return if domain_not_allowed?(uri)",
                "// Line 13: ",
                "// Line 14:     @request_id = request_id || \"#{Time.now.utc.to_i}-status-#{uri}\"",
                "// Line 15:     @json = if prefetched_body.nil?",
                "// vulnerable line: 16: fetch_resource(uri, id, on_behalf_of)",
                "// Line 17:             else",
                "// vulnerable line: 18: body_to_json(prefetched_body, compare_id: id ? uri : nil)",
                "// Line 19:             end",
                "// Line 20: ",
                "// Line 21:     return unless supported_context?",
                "// Line 22: ",
                "// Line 23:     actor_uri     = nil",
                "// Line 24:     activity_json = nil",
                "// Line 25:     object_uri    = nil",
                "// Line 26: ",
                "// Line 27:     if expected_object_type?",
                "// Line 28:       actor_uri     = value_or_id(first_of_value(@json['attributedTo']))",
                "// Line 58:   private",
                "// Line 59: ",
                "// Line 60:   def trustworthy_attribution?(uri, attributed_to)",
                "// Line 61:     return false if uri.nil? || attributed_to.nil?",
                "// Line 62: ",
                "// Line 63:     Addressable::URI.parse(uri).normalized_host.casecmp(Addressable::URI.parse(attributed_to).normalized_host).zero?",
                "// Line 64:   end",
                "// Line 65: ",
                "// Line 66:   def account_from_uri(uri)",
                "// Line 67:     actor = ActivityPub::TagManager.instance.uri_to_resource(uri, Account)",
                "// vulnerable line: 68: actor = ActivityPub::FetchRemoteAccountService.new.call(uri, id: true, request_id: @request_id) if actor.nil? || actor.possibly_stale?",
                "// Line 69:     actor",
                "// Line 70:   end",
                "// Line 71: ",
                "// Line 72:   def supported_context?",
                "// Line 73:     super(@json)",
                "// Line 74:   end",
                "// Line 75: ",
                "// Line 76:   def expected_activity_type?",
                "// Line 77:     equals_or_includes_any?(@json['type'], %w(Create Announce))",
                "// Line 78:   end"
            ]
        },
        {
            "filename_of_changes": "fetch_resource_service.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "9",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 41:   end",
                "// Line 42: ",
                "// Line 43:   def process_response(response, terminal = false)",
                "// Line 44:     @response_code = response.code",
                "// Line 45:     return nil if response.code != 200",
                "// Line 46: ",
                "// Line 47:     if ['application/activity+json', 'application/ld+json'].include?(response.mime_type)",
                "// Line 48:       body = response.body_with_limit",
                "// Line 49:       json = body_to_json(body)",
                "// Line 50: ",
                "// vulnerable line: 51: [json['id'], { prefetched_body: body, id: true }] if supported_context?(json) && (equals_or_includes_any?(json['type'], ActivityPub::FetchRemoteActorService::SUPPORTED_TYPES) || expected_type?(json))",
                "// Line 52:     elsif !terminal",
                "// Line 53:       link_header = response['Link'] && parse_link_header(response)",
                "// Line 54: ",
                "// Line 55:       if link_header&.find_link(%w(rel alternate))",
                "// Line 56:         process_link_headers(link_header)",
                "// Line 57:       elsif response.mime_type == 'text/html'",
                "// Line 58:         process_html(response)",
                "// Line 59:       end",
                "// Line 60:     end",
                "// Line 61:   end"
            ]
        },
        {
            "filename_of_changes": "fetch_resource_service_spec.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "5",
            "number_of_lines_deleted_vulnerable_to_cve": "5",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 50:       let(:body) { '' }",
                "// Line 51: ",
                "// Line 52:       let(:content_type) { 'application/json' }",
                "// Line 53: ",
                "// Line 54:       let(:headers) do",
                "// Line 55:         { 'Content-Type' => content_type }",
                "// Line 56:       end",
                "// Line 57: ",
                "// Line 58:       let(:json) do",
                "// Line 59:         {",
                "// vulnerable line: 60: id: 1,",
                "// Line 61:           '@context': ActivityPub::TagManager::CONTEXT,",
                "// Line 62:           type: 'Note',",
                "// Line 63:         }.to_json",
                "// Line 64:       end",
                "// Line 65: ",
                "// Line 66:       before do",
                "// Line 67:         stub_request(:get, url).to_return(status: 200, body: body, headers: headers)",
                "// Line 68:         stub_request(:get, 'http://example.com/foo').to_return(status: 200, body: json, headers: { 'Content-Type' => 'application/activity+json' })",
                "// Line 69:       end",
                "// Line 70: ",
                "// Line 76:       context 'when content type is application/atom+xml' do",
                "// Line 77:         let(:content_type) { 'application/atom+xml' }",
                "// Line 78: ",
                "// Line 79:         it { is_expected.to be_nil }",
                "// Line 80:       end",
                "// Line 81: ",
                "// Line 82:       context 'when content type is activity+json' do",
                "// Line 83:         let(:content_type) { 'application/activity+json; charset=utf-8' }",
                "// Line 84:         let(:body) { json }",
                "// Line 85: ",
                "// vulnerable line: 86: it { is_expected.to eq [1, { prefetched_body: body, id: true }] }",
                "// Line 87:       end",
                "// Line 88: ",
                "// Line 89:       context 'when content type is ld+json with profile' do",
                "// Line 90:         let(:content_type) { 'application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\"' }",
                "// Line 91:         let(:body) { json }",
                "// Line 92: ",
                "// vulnerable line: 93: it { is_expected.to eq [1, { prefetched_body: body, id: true }] }",
                "// Line 94:       end",
                "// Line 95: ",
                "// Line 96:       context 'when link header is present' do",
                "// Line 97:         let(:headers) { { 'Link' => '<http://example.com/foo>; rel=\"alternate\"; type=\"application/activity+json\"' } }",
                "// Line 98: ",
                "// vulnerable line: 99: it { is_expected.to eq [1, { prefetched_body: json, id: true }] }",
                "// Line 100:       end",
                "// Line 101: ",
                "// Line 102:       context 'when content type is text/html' do",
                "// Line 103:         let(:content_type) { 'text/html' }",
                "// Line 104:         let(:body) { '<html><head><link rel=\"alternate\" href=\"http://example.com/foo\" type=\"application/activity+json\"/></head></html>' }",
                "// Line 105: ",
                "// vulnerable line: 106: it { is_expected.to eq [1, { prefetched_body: json, id: true }] }",
                "// Line 107:       end",
                "// Line 108:     end",
                "// Line 109:   end",
                "// Line 110: end"
            ]
        },
        {
            "filename_of_changes": "jsonld_helper.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 148:       elsif value.is_a?(Array)",
                "// Line 149:         value.zip(compacted_value).all? do |v, vc|",
                "// Line 150:           v.is_a?(Hash) ? (vc.is_a?(Hash) && safe_for_forwarding?(v, vc)) : v == vc",
                "// Line 151:         end",
                "// Line 152:       else",
                "// Line 153:         value == compacted_value",
                "// Line 154:       end",
                "// Line 155:     end",
                "// Line 156:   end",
                "// Line 157: ",
                "// vulnerable line: 158: def fetch_resource(uri, id, on_behalf_of = nil, request_options: {})",
                "// vulnerable line: 159: unless id",
                "// Line 160:       json = fetch_resource_without_id_validation(uri, on_behalf_of)",
                "// Line 161: ",
                "// Line 162:       return if !json.is_a?(Hash) || unsupported_uri_scheme?(json['id'])",
                "// Line 163: ",
                "// Line 164:       uri = json['id']",
                "// Line 165:     end",
                "// Line 166: ",
                "// Line 167:     json = fetch_resource_without_id_validation(uri, on_behalf_of, request_options: request_options)",
                "// Line 168:     json.present? && json['id'] == uri ? json : nil",
                "// Line 169:   end"
            ]
        },
        {
            "filename_of_changes": "linked_data_signature.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 12:   def verify_actor!",
                "// Line 13:     return unless @json['signature'].is_a?(Hash)",
                "// Line 14: ",
                "// Line 15:     type        = @json['signature']['type']",
                "// Line 16:     creator_uri = @json['signature']['creator']",
                "// Line 17:     signature   = @json['signature']['signatureValue']",
                "// Line 18: ",
                "// Line 19:     return unless type == 'RsaSignature2017'",
                "// Line 20: ",
                "// Line 21:     creator = ActivityPub::TagManager.instance.uri_to_actor(creator_uri)",
                "// vulnerable line: 22: creator = ActivityPub::FetchRemoteKeyService.new.call(creator_uri, id: false) if creator&.public_key.blank?",
                "// Line 23: ",
                "// Line 24:     return if creator.nil?",
                "// Line 25: ",
                "// Line 26:     options_hash   = hash(@json['signature'].without('type', 'id', 'signatureValue').merge('@context' => CONTEXT))",
                "// Line 27:     document_hash  = hash(@json.without('signature'))",
                "// Line 28:     to_be_verified = options_hash + document_hash",
                "// Line 29: ",
                "// Line 30:     creator if creator.keypair.public_key.verify(OpenSSL::Digest.new('SHA256'), Base64.decode64(signature), to_be_verified)",
                "// Line 31:   rescue OpenSSL::PKey::RSAError",
                "// Line 32:     false"
            ]
        },
        {
            "filename_of_changes": "linked_data_signature_spec.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 49:       before do",
                "// Line 50:         # Ensure signature is computed with the old key",
                "// Line 51:         signature",
                "// Line 52: ",
                "// Line 53:         # Unset key",
                "// Line 54:         old_key = sender.public_key",
                "// Line 55:         sender.update!(private_key: '', public_key: '')",
                "// Line 56: ",
                "// Line 57:         allow(ActivityPub::FetchRemoteKeyService).to receive(:new).and_return(service_stub)",
                "// Line 58: ",
                "// vulnerable line: 59: allow(service_stub).to receive(:call).with('http://example.com/alice', id: false) do",
                "// Line 60:           sender.update!(public_key: old_key)",
                "// Line 61:           sender",
                "// Line 62:         end",
                "// Line 63:       end",
                "// Line 64: ",
                "// Line 65:       it 'fetches key and returns creator' do",
                "// Line 66:         expect(subject.verify_actor!).to eq sender",
                "// vulnerable line: 67: expect(service_stub).to have_received(:call).with('http://example.com/alice', id: false).once",
                "// Line 68:       end",
                "// Line 69:     end",
                "// Line 70: ",
                "// Line 71:     context 'when signature is missing' do",
                "// Line 72:       let(:signature) { nil }",
                "// Line 73: ",
                "// Line 74:       it 'returns nil' do",
                "// Line 75:         expect(subject.verify_actor!).to be_nil",
                "// Line 76:       end",
                "// Line 77:     end"
            ]
        },
        {
            "filename_of_changes": "process_account_service.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 270: ",
                "// Line 271:     total_items = collection.is_a?(Hash) && collection['totalItems'].present? && collection['totalItems'].is_a?(Numeric) ? collection['totalItems'] : nil",
                "// Line 272:     has_first_page = collection.is_a?(Hash) && collection['first'].present?",
                "// Line 273:     @collections[type] = [total_items, has_first_page]",
                "// Line 274:   rescue HTTP::Error, OpenSSL::SSL::SSLError, Mastodon::LengthValidationError",
                "// Line 275:     @collections[type] = [nil, nil]",
                "// Line 276:   end",
                "// Line 277: ",
                "// Line 278:   def moved_account",
                "// Line 279:     account   = ActivityPub::TagManager.instance.uri_to_resource(@json['movedTo'], Account)",
                "// vulnerable line: 280: account ||= ActivityPub::FetchRemoteAccountService.new.call(@json['movedTo'], id: true, break_on_redirect: true, request_id: @options[:request_id])",
                "// Line 281:     account",
                "// Line 282:   end",
                "// Line 283: ",
                "// Line 284:   def skip_download?",
                "// Line 285:     @account.suspended? || domain_block&.reject_media?",
                "// Line 286:   end",
                "// Line 287: ",
                "// Line 288:   def auto_suspend?",
                "// Line 289:     domain_block&.suspend?",
                "// Line 290:   end"
            ]
        },
        {
            "filename_of_changes": "resolve_url_service_spec.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "signature_verification.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 260: ",
                "// Line 261:     if domain_not_allowed?(domain)",
                "// Line 262:       @signature_verification_failure_code = 403",
                "// Line 263:       return",
                "// Line 264:     end",
                "// Line 265: ",
                "// Line 266:     if key_id.start_with?('acct:')",
                "// Line 267:       stoplight_wrap_request { ResolveAccountService.new.call(key_id.delete_prefix('acct:'), suppress_errors: false) }",
                "// Line 268:     elsif !ActivityPub::TagManager.instance.local_uri?(key_id)",
                "// Line 269:       account   = ActivityPub::TagManager.instance.uri_to_actor(key_id)",
                "// vulnerable line: 270: account ||= stoplight_wrap_request { ActivityPub::FetchRemoteKeyService.new.call(key_id, id: false, suppress_errors: false) }",
                "// Line 271:       account",
                "// Line 272:     end",
                "// Line 273:   rescue Mastodon::PrivateNetworkAddressError => e",
                "// Line 274:     raise SignatureVerificationError, \"Requests to private network addresses are disallowed (tried to query #{e.host})\"",
                "// Line 275:   rescue Mastodon::HostValidationError, ActivityPub::FetchRemoteActorService::Error, ActivityPub::FetchRemoteKeyService::Error, Webfinger::Error => e",
                "// Line 276:     raise SignatureVerificationError, e.message",
                "// Line 277:   end",
                "// Line 278: ",
                "// Line 279:   def stoplight_wrap_request(&block)",
                "// Line 280:     Stoplight(\"source:#{request.remote_ip}\", &block)"
            ]
        },
        {
            "filename_of_changes": "version.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 10: ",
                "// Line 11:     def minor",
                "// Line 12:       3",
                "// Line 13:     end",
                "// Line 14: ",
                "// Line 15:     def patch",
                "// Line 16:       0",
                "// Line 17:     end",
                "// Line 18: ",
                "// Line 19:     def default_prerelease",
                "// vulnerable line: 20: 'alpha.0'",
                "// Line 21:     end",
                "// Line 22: ",
                "// Line 23:     def prerelease",
                "// Line 24:       ENV['MASTODON_VERSION_PRERELEASE'].presence || default_prerelease",
                "// Line 25:     end",
                "// Line 26: ",
                "// Line 27:     def build_metadata",
                "// Line 28:       ENV.fetch('MASTODON_VERSION_METADATA', nil)",
                "// Line 29:     end",
                "// Line 30: "
            ]
        }
    ]
}