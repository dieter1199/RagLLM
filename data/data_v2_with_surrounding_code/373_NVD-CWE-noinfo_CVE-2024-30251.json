{
    "cve_id": "CVE-2024-30251",
    "cve_description": "aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. In affected versions an attacker can send a specially crafted POST (multipart/form-data) request. When the aiohttp server processes it, the server will enter an infinite loop and be unable to process any further requests. An attacker can stop the application from serving requests after sending a single request. This issue has been addressed in version 3.9.4. Users are advised to upgrade. Users unable to upgrade may manually apply a patch to their systems. Please see the linked GHSA for instructions.",
    "cve_publish_date": "2024-05-02T14:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "[PR #8335/5a6949da backport][3.9] Add Content-Disposition automatically (#8336)\n\n**This is a backport of PR #8335 as merged into master\r\n(5a6949da642d1db6cf414fd0d1f70e54c7b7be14).**\r\n\r\nCo-authored-by: Sam Bull <git@sambull.org>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "multipart.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "test_multipart.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "17",
            "number_of_lines_deleted_vulnerable_to_cve": "5",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1426:         assert part.headers[CONTENT_TYPE] == \"test/passed\"",
                "// Line 1427: ",
                "// Line 1428:     def test_append_multipart(self, writer) -> None:",
                "// Line 1429:         subwriter = aiohttp.MultipartWriter(boundary=\":\")",
                "// Line 1430:         subwriter.append_json({\"foo\": \"bar\"})",
                "// Line 1431:         writer.append(subwriter, {CONTENT_TYPE: \"test/passed\"})",
                "// Line 1432:         assert 1 == len(writer)",
                "// Line 1433:         part = writer._parts[0][0]",
                "// Line 1434:         assert part.headers[CONTENT_TYPE] == \"test/passed\"",
                "// Line 1435: ",
                "// vulnerable line: 1436: async def test_set_content_disposition_after_append(self):",
                "// Line 1437:         writer = aiohttp.MultipartWriter(\"form-data\")",
                "// vulnerable line: 1438: payload = writer.append(\"some-data\")",
                "// vulnerable line: 1439: payload.set_content_disposition(\"form-data\", name=\"method\")",
                "// vulnerable line: 1440: assert CONTENT_DISPOSITION in payload.headers",
                "// vulnerable line: 1441: assert \"name=\" in payload.headers[CONTENT_DISPOSITION]",
                "// Line 1442: ",
                "// Line 1443:     def test_with(self) -> None:",
                "// Line 1444:         with aiohttp.MultipartWriter(boundary=\":\") as writer:",
                "// Line 1445:             writer.append(\"foo\")",
                "// Line 1446:             writer.append(b\"bar\")",
                "// Line 1447:             writer.append_json({\"baz\": True})",
                "// Line 1448:         assert 3 == len(writer)",
                "// Line 1449: ",
                "// Line 1450:     def test_append_int_not_allowed(self) -> None:",
                "// Line 1451:         with pytest.raises(TypeError):"
            ]
        }
    ]
}