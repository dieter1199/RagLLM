{
    "cve_id": "CVE-2024-28105",
    "cve_description": "phpMyFAQ is an open source FAQ web application for PHP 8.1+ and MySQL, PostgreSQL and other databases. The category image upload function in phpmyfaq is vulnerable to manipulation of the `Content-type` and `lang` parameters, allowing attackers to upload malicious files with a .php extension, potentially leading to remote code execution (RCE) on the system. This vulnerability is fixed in 3.2.6.",
    "cve_publish_date": "2024-03-25T19:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fix: don't allow to upload arbitrary binary data",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "File.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 96:         if (file_exists($filePath)) {",
                "// Line 97:             $this->realHash = md5_file($filePath);",
                "// Line 98:             $this->filesize = filesize($filePath);",
                "// Line 99:             $this->filename = null == $filename ? basename($filePath) : $filename;",
                "// Line 100: ",
                "// Line 101:             $this->saveMeta();",
                "// Line 102: ",
                "// Line 103:             $targetFile = $this->buildFilePath();",
                "// Line 104: ",
                "// Line 105:             if (null !== $this->id && $this->createSubDirs($targetFile)) {",
                "// vulnerable line: 106: // Doing this check we're sure not to unnecessary",
                "// Line 107:                 // overwrite existing unencrypted file duplicates.",
                "// Line 108:                 if (!$this->linkedRecords()) {",
                "// Line 109:                     $source = new VanillaFile($filePath);",
                "// Line 110:                     $target = $this->getFile(FilesystemFile::MODE_WRITE);",
                "// Line 111: ",
                "// Line 112:                     $success = $source->moveTo($target);",
                "// Line 113:                 } else {",
                "// Line 114:                     $success = true;",
                "// Line 115:                 }",
                "// Line 116: "
            ]
        },
        {
            "filename_of_changes": "attachment.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 74:             return;",
                "// Line 75:         }",
                "// Line 76: ",
                "// Line 77:         $files = AttachmentFactory::rearrangeUploadedFiles($_FILES['filesToUpload']);",
                "// Line 78:         $uploadedFiles = [];",
                "// Line 79: ",
                "// Line 80:         foreach ($files as $file) {",
                "// Line 81:             if (",
                "// Line 82:                 is_uploaded_file($file['tmp_name']) &&",
                "// Line 83:                 !($file['size'] > $faqConfig->get('records.maxAttachmentSize')) &&",
                "// vulnerable line: 84: $file['type'] !== \"text/html\"",
                "// Line 85:             ) {",
                "// Line 86:                 $attachment = AttachmentFactory::create();",
                "// Line 87:                 $attachment->setRecordId($recordId);",
                "// Line 88:                 $attachment->setRecordLang($recordLang);",
                "// Line 89:                 try {",
                "// Line 90:                     if (!$attachment->save($file['tmp_name'], $file['name'])) {",
                "// Line 91:                         throw new AttachmentException();",
                "// Line 92:                     }",
                "// Line 93:                 } catch (AttachmentException $e) {",
                "// Line 94:                     $attachment->delete();",
                "// Line 95:                 }",
                "// Line 96:                 $uploadedFiles[] = [",
                "// Line 97:                     'attachmentId' => $attachment->getId(),",
                "// Line 98:                     'fileName' => $attachment->getFilename(),",
                "// Line 99:                     'faqId' => $recordId,",
                "// Line 100:                     'faqLanguage' => $recordLang",
                "// Line 101:                 ];",
                "// Line 102:             } else {",
                "// Line 103:                 $response->setStatusCode(Response::HTTP_BAD_REQUEST);",
                "// vulnerable line: 104: $response->setData('The image is too large.');",
                "// Line 105:                 $response->send();",
                "// Line 106:                 return;",
                "// Line 107:             }",
                "// Line 108:         }",
                "// Line 109: ",
                "// Line 110:         $response->setStatusCode(Response::HTTP_OK);",
                "// Line 111:         $response->setData($uploadedFiles);",
                "// Line 112:         $response->send();",
                "// Line 113:         break;",
                "// Line 114: }"
            ]
        }
    ]
}