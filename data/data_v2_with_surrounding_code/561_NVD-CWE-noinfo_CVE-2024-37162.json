{
    "cve_id": "CVE-2024-37162",
    "cve_description": "zsa is a library for building typesafe server actions in Next.js. All users are impacted. The zsa application transfers the parse error stack from the server to the client in production build mode. This can potentially reveal sensitive information about the server environment, such as the machine username and directory paths. An attacker could exploit this vulnerability to gain unauthorized access to sensitive server information. This information could be used to plan further attacks or gain a deeper understanding of the server infrastructure. This has been patched on `0.3.3`.",
    "cve_publish_date": "2024-06-07T15:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "remove stack from errors",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "actions.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "5",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 4: import { createServerAction } from \"zsa\"",
                "// Line 5: ",
                "// Line 6: export const incrementNumberAction = createServerAction()",
                "// Line 7:   .input(",
                "// Line 8:     z.object({",
                "// Line 9:       number: z.number(),",
                "// Line 10:     })",
                "// Line 11:   )",
                "// Line 12:   .handler(async ({ input }) => {",
                "// Line 13:     await new Promise((resolve) => setTimeout(resolve, 500))",
                "// vulnerable line: 14: return input.number + 1",
                "// Line 15:   })",
                "// Line 16: ",
                "// Line 17: export const plainAction = createServerAction().handler(async () => {",
                "// Line 18:   return \"hello world\"",
                "// Line 19: })"
            ]
        },
        {
            "filename_of_changes": "errors.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "0",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 50: }",
                "// Line 51: ",
                "// Line 52: /**",
                "// Line 53:  * A TZSAError is a ZSAError that is thrown by a server action that has a type",
                "// Line 54:  */",
                "// Line 55: export type TZSAError<TInputSchema extends z.ZodType> = Error &",
                "// Line 56:   (",
                "// Line 57:     | {",
                "// Line 58:         code: Exclude<keyof typeof ERROR_CODES, \"INPUT_PARSE_ERROR\">",
                "// Line 59:         message?: string",
                "// vulnerable line: 60: stack: string",
                "// Line 61:         data: string",
                "// Line 62:         name: string",
                "// Line 63:         fieldErrors?: undefined",
                "// Line 64:         formErrors?: undefined",
                "// Line 65:         formattedErrors?: undefined",
                "// Line 66:       }",
                "// Line 67:     | {",
                "// Line 68:         message?: string",
                "// vulnerable line: 69: stack: string",
                "// Line 70:         code: \"INPUT_PARSE_ERROR\"",
                "// Line 71:         data: string",
                "// Line 72:         name: string",
                "// Line 73:         fieldErrors: z.inferFlattenedErrors<TInputSchema>[\"fieldErrors\"]",
                "// Line 74:         formErrors: z.inferFlattenedErrors<TInputSchema>[\"formErrors\"]",
                "// Line 75:         formattedErrors: z.inferFormattedError<TInputSchema>",
                "// Line 76:       }",
                "// Line 77:   )"
            ]
        },
        {
            "filename_of_changes": "increment-example.tsx",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "openapi.test.tsx",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "0",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 158:           number2: \"100\",",
                "// Line 159:         },",
                "// Line 160:       })",
                "// Line 161: ",
                "// Line 162:       const response = await GET(request)",
                "// Line 163:       expect(response.status).toBe(400)",
                "// Line 164: ",
                "// Line 165:       const json = await response.json()",
                "// Line 166:       expect(json.code).toBe(\"INPUT_PARSE_ERROR\")",
                "// Line 167:       expect(json.message).toBeDefined()",
                "// vulnerable line: 168: expect(json.stack).not.toBeDefined()",
                "// Line 169:     })",
                "// Line 170: ",
                "// Line 171:     it(\"should multiply two numbers [POST]\", async () => {",
                "// Line 172:       const { POST } = createRouteHandlers(openapiRouter)",
                "// Line 173: ",
                "// Line 174:       const request = mockNextRequest({",
                "// Line 175:         method: \"POST\",",
                "// Line 176:         pathname: \"/api/calculations/multiply/100\",",
                "// Line 177:         body: {",
                "// Line 178:           number2: \"100\",",
                "// Line 380:           number2: \"0\",",
                "// Line 381:         },",
                "// Line 382:       })",
                "// Line 383: ",
                "// Line 384:       const response = await POST(request)",
                "// Line 385:       expect(response.status).toBe(400)",
                "// Line 386: ",
                "// Line 387:       const json = await response.json()",
                "// Line 388:       expect(json.code).toBe(\"INPUT_PARSE_ERROR\")",
                "// Line 389:       expect(json.message).toBeDefined()",
                "// vulnerable line: 390: expect(json.stack).toBeDefined()",
                "// Line 391:       expect(json.name).toBeDefined()",
                "// Line 392:     })",
                "// Line 393: ",
                "// Line 394:     it(\"it should fail to divide a number by zero and return a custom error [POST]\", async () => {",
                "// Line 395:       const { POST } = setupApiHandler(",
                "// Line 396:         \"/api/calculations/divide/{number1}\",",
                "// Line 397:         divideAction,",
                "// Line 398:         {",
                "// Line 399:           shapeError: (error) => {",
                "// Line 400:             return {",
                "// Line 412:           number2: \"0\",",
                "// Line 413:         },",
                "// Line 414:       })",
                "// Line 415: ",
                "// Line 416:       const response = await POST(request)",
                "// Line 417:       expect(response.status).toBe(400)",
                "// Line 418: ",
                "// Line 419:       const json = await response.json()",
                "// Line 420:       expect(json.code).toBe(\"INPUT_PARSE_ERROR\")",
                "// Line 421:       expect(json.message).toBeDefined()",
                "// vulnerable line: 422: expect(json.stack).not.toBeDefined()",
                "// Line 423:     })",
                "// Line 424:   })",
                "// Line 425: ",
                "// Line 426:   describe(\"next redirect\", () => {",
                "// Line 427:     it(\"throws the redirect error\", async () => {",
                "// Line 428:       const { POST } = setupApiHandler(\"/api\", nextRedirectAction)",
                "// Line 429: ",
                "// Line 430:       const request = mockNextRequest({",
                "// Line 431:         method: \"POST\",",
                "// Line 432:         pathname: \"/api\","
            ]
        },
        {
            "filename_of_changes": "page.tsx",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "15",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "zod-safe-function.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "0",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 505:     ) {",
                "// Line 506:       formattedErrors = data.format()",
                "// Line 507:       flattenedErrors = data.flatten()",
                "// Line 508:     }",
                "// Line 509: ",
                "// Line 510:     return [",
                "// Line 511:       null,",
                "// Line 512:       {",
                "// Line 513:         data: stringifyIfNeeded(customError.data),",
                "// Line 514:         name: customError.name,",
                "// vulnerable line: 515: stack: JSON.stringify(customError.stack),",
                "// Line 516:         message: stringifyIfNeeded(customError.message),",
                "// Line 517:         code: customError.code,",
                "// Line 518:         fieldErrors: flattenedErrors?.fieldErrors,",
                "// Line 519:         formErrors: flattenedErrors?.formErrors,",
                "// Line 520:         formattedErrors: formattedErrors as any,",
                "// Line 521:       } as any,",
                "// Line 522:     ]",
                "// Line 523:   }",
                "// Line 524: ",
                "// Line 525:   /** helper function to parse input data given the active input schema */"
            ]
        }
    ]
}