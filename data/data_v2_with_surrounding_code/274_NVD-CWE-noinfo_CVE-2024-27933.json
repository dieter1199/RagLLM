{
    "cve_id": "CVE-2024-27933",
    "cve_description": "Deno is a JavaScript, TypeScript, and WebAssembly runtime. In version 1.39.0, use of raw file descriptors in `op_node_ipc_pipe()` leads to premature close of arbitrary file descriptors, allowing standard input to be re-opened as a different resource resulting in permission prompt bypass. Node child_process IPC relies on the JS side to pass the raw IPC file descriptor to `op_node_ipc_pipe()`, which returns a `IpcJsonStreamResource` ID associated with the file descriptor. On closing the resource, the raw file descriptor is closed together.\n\nUse of raw file descriptors in `op_node_ipc_pipe()` leads to premature close of arbitrary file descriptors. This allow standard input (fd 0) to be closed and re-opened for a different resource, which allows a silent permission prompt bypass. This is exploitable by an attacker controlling the code executed inside a Deno runtime to obtain arbitrary code execution on the host machine regardless of permissions.\n\nThis bug is known to be exploitable. There is a working exploit that achieves arbitrary code execution by bypassing prompts from zero permissions, additionally abusing the fact that Cache API lacks filesystem permission checks. The attack can be conducted silently as stderr can also be closed, suppressing all prompt outputs.\n\nVersion 1.39.1 fixes the bug.\n",
    "cve_publish_date": "2024-03-21T02:52Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fix(node): child_process IPC on Windows (#21597)\n\nThis PR implements the child_process IPC pipe between parent and child.\r\nThe implementation uses Windows named pipes created by parent and passes\r\nthe inheritable file handle to the child.\r\n\r\nI've also replace parts of the initial implementation which passed the\r\nraw parent fd to JS with resource ids instead. This way no file handle\r\nis exposed to the JS land (both parent and child).\r\n\r\n`IpcJsonStreamResource` can stream upto 800MB/s of JSON data on Win 11\r\nAMD Ryzen 7 16GB (without `memchr` vectorization)",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "lib.rs",
            "code_language": "Rust",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 300:     ops::require::op_require_path_basename,",
                "// Line 301:     ops::require::op_require_read_file<P>,",
                "// Line 302:     ops::require::op_require_as_file_path,",
                "// Line 303:     ops::require::op_require_resolve_exports<P>,",
                "// Line 304:     ops::require::op_require_read_closest_package_json<P>,",
                "// Line 305:     ops::require::op_require_read_package_scope<P>,",
                "// Line 306:     ops::require::op_require_package_imports_resolve<P>,",
                "// Line 307:     ops::require::op_require_break_on_next_statement,",
                "// Line 308:     ops::util::op_node_guess_handle_type,",
                "// Line 309:     ops::crypto::op_node_create_private_key,",
                "// vulnerable line: 310: ops::ipc::op_node_ipc_pipe,",
                "// Line 311:     ops::ipc::op_node_child_ipc_pipe,",
                "// Line 312:     ops::ipc::op_node_ipc_write,",
                "// Line 313:     ops::ipc::op_node_ipc_read,",
                "// Line 314:   ],",
                "// Line 315:   esm_entry_point = \"ext:deno_node/02_init.js\",",
                "// Line 316:   esm = [",
                "// Line 317:     dir \"polyfills\",",
                "// Line 318:     \"00_globals.js\",",
                "// Line 319:     \"02_init.js\",",
                "// Line 320:     \"_brotli.js\","
            ]
        },
        {
            "filename_of_changes": "mod.rs",
            "code_language": "Rust",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 910:       self.maybe_config_file().as_ref(),",
                "// Line 911:       file_fetcher,",
                "// Line 912:     )",
                "// Line 913:     .await",
                "// Line 914:     .with_context(|| {",
                "// Line 915:       format!(\"Unable to load '{import_map_specifier}' import map\")",
                "// Line 916:     })",
                "// Line 917:     .map(Some)",
                "// Line 918:   }",
                "// Line 919: ",
                "// vulnerable line: 920: pub fn node_ipc_fd(&self) -> Option<i32> {",
                "// Line 921:     let maybe_node_channel_fd = std::env::var(\"DENO_CHANNEL_FD\").ok();",
                "// Line 922:     if let Some(node_channel_fd) = maybe_node_channel_fd {",
                "// Line 923:       // Remove so that child processes don't inherit this environment variable.",
                "// Line 924:       std::env::remove_var(\"DENO_CHANNEL_FD\");",
                "// vulnerable line: 925: node_channel_fd.parse::<i32>().ok()",
                "// Line 926:     } else {",
                "// Line 927:       None",
                "// Line 928:     }",
                "// Line 929:   }",
                "// Line 930: ",
                "// Line 931:   pub fn resolve_main_module(&self) -> Result<ModuleSpecifier, AnyError> {",
                "// Line 932:     match &self.flags.subcommand {",
                "// Line 933:       DenoSubcommand::Bundle(bundle_flags) => {",
                "// Line 934:         resolve_url_or_path(&bundle_flags.source_file, self.initial_cwd())",
                "// Line 935:           .map_err(AnyError::from)"
            ]
        },
        {
            "filename_of_changes": "worker.rs",
            "code_language": "Rust",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 117:   shared_array_buffer_store: SharedArrayBufferStore,",
                "// Line 118:   compiled_wasm_module_store: CompiledWasmModuleStore,",
                "// Line 119:   module_loader_factory: Box<dyn ModuleLoaderFactory>,",
                "// Line 120:   root_cert_store_provider: Arc<dyn RootCertStoreProvider>,",
                "// Line 121:   fs: Arc<dyn deno_fs::FileSystem>,",
                "// Line 122:   emitter: Option<Arc<Emitter>>,",
                "// Line 123:   maybe_file_watcher_communicator: Option<Arc<WatcherCommunicator>>,",
                "// Line 124:   maybe_inspector_server: Option<Arc<InspectorServer>>,",
                "// Line 125:   maybe_lockfile: Option<Arc<Mutex<Lockfile>>>,",
                "// Line 126:   feature_checker: Arc<FeatureChecker>,",
                "// vulnerable line: 127: node_ipc: Option<i32>,",
                "// Line 128: }",
                "// Line 129: ",
                "// Line 130: impl SharedWorkerState {",
                "// Line 131:   // Currently empty",
                "// Line 132: }",
                "// Line 133: ",
                "// Line 134: pub struct CliMainWorker {",
                "// Line 135:   main_module: ModuleSpecifier,",
                "// Line 136:   is_main_cjs: bool,",
                "// Line 137:   worker: MainWorker,",
                "// Line 397:     blob_store: Arc<BlobStore>,",
                "// Line 398:     module_loader_factory: Box<dyn ModuleLoaderFactory>,",
                "// Line 399:     root_cert_store_provider: Arc<dyn RootCertStoreProvider>,",
                "// Line 400:     fs: Arc<dyn deno_fs::FileSystem>,",
                "// Line 401:     emitter: Option<Arc<Emitter>>,",
                "// Line 402:     maybe_file_watcher_communicator: Option<Arc<WatcherCommunicator>>,",
                "// Line 403:     maybe_inspector_server: Option<Arc<InspectorServer>>,",
                "// Line 404:     maybe_lockfile: Option<Arc<Mutex<Lockfile>>>,",
                "// Line 405:     feature_checker: Arc<FeatureChecker>,",
                "// Line 406:     options: CliMainWorkerOptions,",
                "// vulnerable line: 407: node_ipc: Option<i32>,",
                "// Line 408:   ) -> Self {",
                "// Line 409:     Self {",
                "// Line 410:       shared: Arc::new(SharedWorkerState {",
                "// Line 411:         options,",
                "// Line 412:         subcommand,",
                "// Line 413:         storage_key_resolver,",
                "// Line 414:         npm_resolver,",
                "// Line 415:         node_resolver,",
                "// Line 416:         blob_store,",
                "// Line 417:         broadcast_channel: Default::default(),"
            ]
        },
        {
            "filename_of_changes": "worker_bootstrap.rs",
            "code_language": "Rust",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 52:   pub no_color: bool,",
                "// Line 53:   pub is_tty: bool,",
                "// Line 54:   // --unstable flag, deprecated",
                "// Line 55:   pub unstable: bool,",
                "// Line 56:   // --unstable-* flags",
                "// Line 57:   pub unstable_features: Vec<i32>,",
                "// Line 58:   pub user_agent: String,",
                "// Line 59:   pub inspect: bool,",
                "// Line 60:   pub has_node_modules_dir: bool,",
                "// Line 61:   pub maybe_binary_npm_command_name: Option<String>,",
                "// vulnerable line: 62: pub node_ipc_fd: Option<i32>,",
                "// Line 63: }",
                "// Line 64: ",
                "// Line 65: impl Default for BootstrapOptions {",
                "// Line 66:   fn default() -> Self {",
                "// Line 67:     let cpu_count = thread::available_parallelism()",
                "// Line 68:       .map(|p| p.get())",
                "// Line 69:       .unwrap_or(1);",
                "// Line 70: ",
                "// Line 71:     let runtime_version = env!(\"CARGO_PKG_VERSION\");",
                "// Line 72:     let user_agent = format!(\"Deno/{runtime_version}\");"
            ]
        }
    ]
}