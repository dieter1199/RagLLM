{
    "cve_id": "CVE-2024-28232",
    "cve_description": "Go package IceWhaleTech/CasaOS-UserService provides user management functionalities to CasaOS. The Casa OS Login page has disclosed the username enumeration vulnerability in the login page which was patched in version 0.4.7. This issue in CVE-2024-28232 has been patched in version 0.4.8 but that version has not yet been uploaded to Go's package manager.\n",
    "cve_publish_date": "2024-04-01T17:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Merge pull request from GHSA-hcw2-2r9c-gc6p",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "user.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 118:         c.JSON(common_err.CLIENT_ERROR,",
                "// Line 119:             model.Result{",
                "// Line 120:                 Success: common_err.CLIENT_ERROR,",
                "// Line 121:                 Message: common_err.GetMsg(common_err.INVALID_PARAMS),",
                "// Line 122:             })",
                "// Line 123:         return",
                "// Line 124:     }",
                "// Line 125:     user := service.MyService.User().GetUserAllInfoByName(username)",
                "// Line 126:     if user.Id == 0 {",
                "// Line 127:         c.JSON(common_err.CLIENT_ERROR,",
                "// vulnerable line: 128: model.Result{Success: common_err.USER_NOT_EXIST, Message: common_err.GetMsg(common_err.USER_NOT_EXIST)})",
                "// Line 129:         return",
                "// Line 130:     }",
                "// Line 131:     if user.Password != encryption.GetMD5ByStr(password) {",
                "// Line 132:         c.JSON(common_err.CLIENT_ERROR,",
                "// Line 133:             model.Result{Success: common_err.USER_NOT_EXIST_OR_PWD_INVALID, Message: common_err.GetMsg(common_err.USER_NOT_EXIST_OR_PWD_INVALID)})",
                "// Line 134:         return",
                "// Line 135:     }",
                "// Line 136: ",
                "// Line 137:     // clean limit",
                "// Line 138:     limiter = rate.NewLimiter(rate.Every(time.Minute), 5)",
                "// Line 175: // @Tags user",
                "// Line 176: // @Param file formData file true \"用户头像\"",
                "// Line 177: // @Security ApiKeyAuth",
                "// Line 178: // @Success 200 {string} string \"ok\"",
                "// Line 179: // @Router /users/avatar [put]",
                "// Line 180: func PutUserAvatar(c *gin.Context) {",
                "// Line 181:     id := c.GetHeader(\"user_id\")",
                "// Line 182:     user := service.MyService.User().GetUserInfoById(id)",
                "// Line 183:     if user.Id == 0 {",
                "// Line 184:         c.JSON(common_err.SERVICE_ERROR,",
                "// vulnerable line: 185: model.Result{Success: common_err.USER_NOT_EXIST, Message: common_err.GetMsg(common_err.USER_NOT_EXIST)})",
                "// Line 186:         return",
                "// Line 187:     }",
                "// Line 188:     json := make(map[string]string)",
                "// Line 189:     c.ShouldBind(&json)",
                "// Line 190: ",
                "// Line 191:     data := json[\"file\"]",
                "// Line 192:     imgBase64 := strings.Replace(data, \"data:image/png;base64,\", \"\", 1)",
                "// Line 193:     decodeData, err := base64.StdEncoding.DecodeString(string(imgBase64))",
                "// Line 194:     if err != nil {",
                "// Line 195:         c.JSON(http.StatusInternalServerError, model.Result{Success: common_err.SERVICE_ERROR, Message: err.Error()})",
                "// Line 230: // @Tags user",
                "// Line 231: // @Param file formData file true \"用户头像\"",
                "// Line 232: // @Security ApiKeyAuth",
                "// Line 233: // @Success 200 {string} string \"ok\"",
                "// Line 234: // @Router /users/avatar [get]",
                "// Line 235: func GetUserAvatar(c *gin.Context) {",
                "// Line 236:     id := c.GetHeader(\"user_id\")",
                "// Line 237:     user := service.MyService.User().GetUserInfoById(id)",
                "// Line 238:     if user.Id == 0 {",
                "// Line 239:         c.JSON(common_err.SERVICE_ERROR,",
                "// vulnerable line: 240: model.Result{Success: common_err.USER_NOT_EXIST, Message: common_err.GetMsg(common_err.USER_NOT_EXIST)})",
                "// Line 241:         return",
                "// Line 242:     }",
                "// Line 243: ",
                "// Line 244:     if file.Exists(user.Avatar) {",
                "// Line 245:         c.Header(\"Content-Disposition\", \"attachment; filename*=utf-8''\"+url2.PathEscape(path.Base(user.Avatar)))",
                "// Line 246:         c.Header(\"Cache-Control\", \"no-cache, no-store, max-age=0, must-revalidate, value\")",
                "// Line 247:         c.File(user.Avatar)",
                "// Line 248:         return",
                "// Line 249:     }",
                "// Line 250:     user.Avatar = \"/usr/share/casaos/www/avatar.svg\"",
                "// Line 319:     c.ShouldBind(&json)",
                "// Line 320:     oldPwd := json[\"old_password\"]",
                "// Line 321:     pwd := json[\"password\"]",
                "// Line 322:     if len(oldPwd) == 0 || len(pwd) == 0 {",
                "// Line 323:         c.JSON(common_err.CLIENT_ERROR, model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
                "// Line 324:         return",
                "// Line 325:     }",
                "// Line 326:     user := service.MyService.User().GetUserAllInfoById(id)",
                "// Line 327:     if user.Id == 0 {",
                "// Line 328:         c.JSON(common_err.SERVICE_ERROR,",
                "// vulnerable line: 329: model.Result{Success: common_err.USER_NOT_EXIST, Message: common_err.GetMsg(common_err.USER_NOT_EXIST)})",
                "// Line 330:         return",
                "// Line 331:     }",
                "// Line 332:     if user.Password != encryption.GetMD5ByStr(oldPwd) {",
                "// Line 333:         c.JSON(common_err.CLIENT_ERROR, model.Result{Success: common_err.PWD_INVALID_OLD, Message: common_err.GetMsg(common_err.PWD_INVALID_OLD)})",
                "// Line 334:         return",
                "// Line 335:     }",
                "// Line 336:     user.Password = encryption.GetMD5ByStr(pwd)",
                "// Line 337:     service.MyService.User().UpdateUserPassword(user)",
                "// Line 338:     user.Password = \"\"",
                "// Line 339:     c.JSON(common_err.SUCCESS, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS), Data: user})",
                "// Line 352:     json := make(map[string]string)",
                "// Line 353:     c.ShouldBind(&json)",
                "// Line 354:     Nickname := json[\"nick_name\"]",
                "// Line 355:     if len(Nickname) == 0 {",
                "// Line 356:         c.JSON(http.StatusOK, model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
                "// Line 357:         return",
                "// Line 358:     }",
                "// Line 359:     user := service.MyService.User().GetUserInfoById(id)",
                "// Line 360:     if user.Id == 0 {",
                "// Line 361:         c.JSON(http.StatusOK,",
                "// vulnerable line: 362: model.Result{Success: common_err.USER_NOT_EXIST, Message: common_err.GetMsg(common_err.USER_NOT_EXIST)})",
                "// Line 363:         return",
                "// Line 364:     }",
                "// Line 365:     user.Nickname = Nickname",
                "// Line 366:     service.MyService.User().UpdateUser(user)",
                "// Line 367:     c.JSON(http.StatusOK, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS), Data: user})",
                "// Line 368: }",
                "// Line 369: ",
                "// Line 370: // @Summary edit user description",
                "// Line 371: // @Produce  application/json",
                "// Line 372: // @Accept multipart/form-data",
                "// Line 380:     json := make(map[string]string)",
                "// Line 381:     c.ShouldBind(&json)",
                "// Line 382:     desc := json[\"description\"]",
                "// Line 383:     if len(desc) == 0 {",
                "// Line 384:         c.JSON(http.StatusOK, model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
                "// Line 385:         return",
                "// Line 386:     }",
                "// Line 387:     user := service.MyService.User().GetUserInfoById(id)",
                "// Line 388:     if user.Id == 0 {",
                "// Line 389:         c.JSON(http.StatusOK,",
                "// vulnerable line: 390: model.Result{Success: common_err.USER_NOT_EXIST, Message: common_err.GetMsg(common_err.USER_NOT_EXIST)})",
                "// Line 391:         return",
                "// Line 392:     }",
                "// Line 393:     user.Description = desc",
                "// Line 394: ",
                "// Line 395:     service.MyService.User().UpdateUser(user)",
                "// Line 396: ",
                "// Line 397:     c.JSON(http.StatusOK, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS), Data: user})",
                "// Line 398: }",
                "// Line 399: ",
                "// Line 400: // @Summary get user info",
                "// Line 473:     if len(name) == 0 {",
                "// Line 474:         c.JSON(common_err.CLIENT_ERROR, model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
                "// Line 475:         return",
                "// Line 476:     }",
                "// Line 477:     id := c.GetHeader(\"user_id\")",
                "// Line 478: ",
                "// Line 479:     user := service.MyService.User().GetUserInfoById(id)",
                "// Line 480:     //    user := service.MyService.User().GetUserInfoByUsername(Username)",
                "// Line 481:     if user.Id == 0 {",
                "// Line 482:         c.JSON(common_err.SERVICE_ERROR,",
                "// vulnerable line: 483: model.Result{Success: common_err.USER_NOT_EXIST, Message: common_err.GetMsg(common_err.USER_NOT_EXIST)})",
                "// Line 484:         return",
                "// Line 485:     }",
                "// Line 486:     filePath := config.AppInfo.UserDataPath + \"/\" + id + \"/\" + name + \".json\"",
                "// Line 487: ",
                "// Line 488:     data := file.ReadFullFile(filePath)",
                "// Line 489:     if !gjson.ValidBytes(data) {",
                "// Line 490:         c.JSON(common_err.SUCCESS, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS), Data: string(data)})",
                "// Line 491:         return",
                "// Line 492:     }",
                "// Line 493:     c.JSON(common_err.SUCCESS, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS), Data: json2.RawMessage(string(data))})",
                "// Line 502: func PostUserCustomConf(c *gin.Context) {",
                "// Line 503:     name := c.Param(\"key\")",
                "// Line 504:     if len(name) == 0 {",
                "// Line 505:         c.JSON(common_err.CLIENT_ERROR, model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
                "// Line 506:         return",
                "// Line 507:     }",
                "// Line 508:     id := c.GetHeader(\"user_id\")",
                "// Line 509:     user := service.MyService.User().GetUserInfoById(id)",
                "// Line 510:     if user.Id == 0 {",
                "// Line 511:         c.JSON(common_err.SERVICE_ERROR,",
                "// vulnerable line: 512: model.Result{Success: common_err.USER_NOT_EXIST, Message: common_err.GetMsg(common_err.USER_NOT_EXIST)})",
                "// Line 513:         return",
                "// Line 514:     }",
                "// Line 515:     data, _ := io.ReadAll(c.Request.Body)",
                "// Line 516:     filePath := config.AppInfo.UserDataPath + \"/\" + strconv.Itoa(user.Id)",
                "// Line 517: ",
                "// Line 518:     if err := file.IsNotExistMkDir(filePath); err != nil {",
                "// Line 519:         c.JSON(common_err.SERVICE_ERROR,",
                "// Line 520:             model.Result{Success: common_err.SERVICE_ERROR, Message: common_err.GetMsg(common_err.SERVICE_ERROR)})",
                "// Line 521:         return",
                "// Line 522:     }",
                "// Line 553: func DeleteUserCustomConf(c *gin.Context) {",
                "// Line 554:     name := c.Param(\"key\")",
                "// Line 555:     if len(name) == 0 {",
                "// Line 556:         c.JSON(common_err.CLIENT_ERROR, model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
                "// Line 557:         return",
                "// Line 558:     }",
                "// Line 559:     id := c.GetHeader(\"user_id\")",
                "// Line 560:     user := service.MyService.User().GetUserInfoById(id)",
                "// Line 561:     if user.Id == 0 {",
                "// Line 562:         c.JSON(common_err.SERVICE_ERROR,",
                "// vulnerable line: 563: model.Result{Success: common_err.USER_NOT_EXIST, Message: common_err.GetMsg(common_err.USER_NOT_EXIST)})",
                "// Line 564:         return",
                "// Line 565:     }",
                "// Line 566:     filePath := config.AppInfo.UserDataPath + \"/\" + strconv.Itoa(user.Id) + \"/\" + name + \".json\"",
                "// Line 567:     err := os.Remove(filePath)",
                "// Line 568:     if err != nil {",
                "// Line 569:         c.JSON(common_err.SERVICE_ERROR, model.Result{Success: common_err.SERVICE_ERROR, Message: common_err.GetMsg(common_err.SERVICE_ERROR)})",
                "// Line 570:         return",
                "// Line 571:     }",
                "// Line 572:     c.JSON(common_err.SUCCESS, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS)})",
                "// Line 573: }"
            ]
        }
    ]
}