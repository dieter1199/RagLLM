{
    "cve_id": "CVE-2024-21511",
    "cve_description": "Versions of the package mysql2 before 3.9.7 are vulnerable to Arbitrary Code Injection due to improper sanitization of the timezone parameter in the readCodeFor function by calling a native MySQL Server date/time function.",
    "cve_publish_date": "2024-04-23T05:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fix(security): sanitize timezone parameter value to prevent code injection (#2608)\n\n* fix(security): sanitize timezone parameter value to prevent code injection. Discovered by zhaoyudi (Nebulalabï¼‰",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "binary_parser.js",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 35:       return 'packet.readFloat();';",
                "// Line 36:     case Types.DOUBLE:",
                "// Line 37:       return 'packet.readDouble();';",
                "// Line 38:     case Types.NULL:",
                "// Line 39:       return 'null;';",
                "// Line 40:     case Types.DATE:",
                "// Line 41:     case Types.DATETIME:",
                "// Line 42:     case Types.TIMESTAMP:",
                "// Line 43:     case Types.NEWDATE:",
                "// Line 44:       if (helpers.typeMatch(field.columnType, dateStrings, Types)) {",
                "// vulnerable line: 45: return `packet.readDateTimeString(${field.decimals});`;",
                "// Line 46:       }",
                "// vulnerable line: 47: return `packet.readDateTime('${timezone}');`;",
                "// Line 48:     case Types.TIME:",
                "// Line 49:       return 'packet.readTimeString()';",
                "// Line 50:     case Types.DECIMAL:",
                "// Line 51:     case Types.NEWDECIMAL:",
                "// Line 52:       if (config.decimalNumbers) {",
                "// Line 53:         return 'packet.parseLengthCodedFloat();';",
                "// Line 54:       }",
                "// Line 55:       return 'packet.readLengthCodedString(\"ascii\");';",
                "// Line 56:     case Types.GEOMETRY:",
                "// Line 57:       return 'packet.parseGeometryValue();';"
            ]
        },
        {
            "filename_of_changes": "text_parser.js",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 41:     case Types.DECIMAL:",
                "// Line 42:     case Types.NEWDECIMAL:",
                "// Line 43:       if (config.decimalNumbers) {",
                "// Line 44:         return 'packet.parseLengthCodedFloat()';",
                "// Line 45:       }",
                "// Line 46:       return 'packet.readLengthCodedString(\"ascii\")';",
                "// Line 47:     case Types.DATE:",
                "// Line 48:       if (helpers.typeMatch(type, dateStrings, Types)) {",
                "// Line 49:         return 'packet.readLengthCodedString(\"ascii\")';",
                "// Line 50:       }",
                "// vulnerable line: 51: return `packet.parseDate('${timezone}')`;",
                "// Line 52:     case Types.DATETIME:",
                "// Line 53:     case Types.TIMESTAMP:",
                "// Line 54:       if (helpers.typeMatch(type, dateStrings, Types)) {",
                "// Line 55:         return 'packet.readLengthCodedString(\"ascii\")';",
                "// Line 56:       }",
                "// vulnerable line: 57: return `packet.parseDateTime('${timezone}')`;",
                "// Line 58:     case Types.TIME:",
                "// Line 59:       return 'packet.readLengthCodedString(\"ascii\")';",
                "// Line 60:     case Types.GEOMETRY:",
                "// Line 61:       return 'packet.parseGeometryValue()';",
                "// Line 62:     case Types.JSON:",
                "// Line 63:       // Since for JSON columns mysql always returns charset 63 (BINARY),",
                "// Line 64:       // we have to handle it according to JSON specs and use \"utf8\",",
                "// Line 65:       // see https://github.com/sidorares/node-mysql2/issues/409",
                "// Line 66:       return 'JSON.parse(packet.readLengthCodedString(\"utf8\"))';",
                "// Line 67:     default:"
            ]
        }
    ]
}