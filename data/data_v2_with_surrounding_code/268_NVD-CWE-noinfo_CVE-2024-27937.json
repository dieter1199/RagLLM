{
    "cve_id": "CVE-2024-27937",
    "cve_description": "GLPI is a Free Asset and IT Management Software package, Data center management, ITIL Service Desk, licenses tracking and software auditing. An authenticated user can obtain the email address of all GLPI users. This issue has been patched in version 10.0.13.\n",
    "cve_publish_date": "2024-03-18T16:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Merge pull request from GHSA-98qw-hpg3-2hpj\n\n* Filter entity restriction in dropdowns to match active entities\n\n* Handle string values in entities filtering",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "CommonDBRelation.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1471:                             $options['itemtypes']     = $specificities['itemtypes'];",
                "// Line 1472:                            // At least, if not forced by user, 'checkright' == true",
                "// Line 1473:                             if (!isset($options['checkright'])) {",
                "// Line 1474:                                 $options['checkright']    = true;",
                "// Line 1475:                             }",
                "// Line 1476:                             Dropdown::showSelectItemFromItemtypes($options);",
                "// Line 1477:                         }",
                "// Line 1478:                     } else {",
                "// Line 1479:                         $options['name'] = 'peer_' . $peers_id;",
                "// Line 1480:                         if (isset($_POST['entity_restrict'])) {",
                "// vulnerable line: 1481: $options['entity'] = $_POST['entity_restrict'];",
                "// Line 1482:                         }",
                "// Line 1483:                         if ($normalized_action == 'remove') {",
                "// Line 1484:                             $options['nochecklimit'] = true;",
                "// Line 1485:                         }",
                "// Line 1486:                         $dropdown_method = $specificities['dropdown_method_' . $peer_number];",
                "// Line 1487:                         $peertype::$dropdown_method($options);",
                "// Line 1488:                     }",
                "// Line 1489:                 }",
                "// Line 1490:                // Allow any relation to display its own fields (NetworkPort_Vlan for tagged ...)",
                "// Line 1491:                 static::showRelationMassiveActionsSubForm($ma, $peer_number);"
            ]
        },
        {
            "filename_of_changes": "CommonITILObject.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 4945:         $actor_name = '_users_id_' . $typename;",
                "// Line 4946:         if ($type == CommonITILActor::OBSERVER) {",
                "// Line 4947:             $actor_name = '_users_id_' . $typename . '[]';",
                "// Line 4948:         }",
                "// Line 4949:         $params = [",
                "// Line 4950:             'name'   => $actor_name,",
                "// Line 4951:             'value'  => $options[\"_users_id_\" . $typename],",
                "// Line 4952:             'right'  => $right,",
                "// Line 4953:             'rand'   => $rand,",
                "// Line 4954:             'width'  => \"95%\",",
                "// vulnerable line: 4955: 'entity' => $options['entities_id'] ?? $options['entity_restrict']",
                "// Line 4956:         ];",
                "// Line 4957: ",
                "// Line 4958:        //only for active ldap and corresponding right",
                "// Line 4959:         $ldap_methods = getAllDataFromTable('glpi_authldaps', ['is_active' => 1]);",
                "// Line 4960:         if (",
                "// Line 4961:             count($ldap_methods)",
                "// Line 4962:             && Session::haveRight('user', User::IMPORTEXTAUTHUSERS)",
                "// Line 4963:         ) {",
                "// Line 4964:             $params['ldap_import'] = true;",
                "// Line 4965:         }"
            ]
        },
        {
            "filename_of_changes": "Consumable.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 199: ",
                "// Line 200:         $input = $ma->getInput();",
                "// Line 201:         switch ($ma->getAction()) {",
                "// Line 202:             case 'give':",
                "// Line 203:                 if (isset($input[\"entities_id\"])) {",
                "// Line 204:                     Dropdown::showSelectItemFromItemtypes(['itemtype_name'",
                "// Line 205:                                                               => 'give_itemtype',",
                "// Line 206:                         'items_id_name'",
                "// Line 207:                                                               => 'give_items_id',",
                "// Line 208:                         'entity_restrict'",
                "// vulnerable line: 209: => $input[\"entities_id\"],",
                "// Line 210:                         'itemtypes'",
                "// Line 211:                                                               => $CFG_GLPI[\"consumables_types\"]",
                "// Line 212:                     ]);",
                "// Line 213:                     echo \"<br><br>\" . Html::submit(",
                "// Line 214:                         _x('button', 'Give'),",
                "// Line 215:                         ['name' => 'massiveaction']",
                "// Line 216:                     );",
                "// Line 217:                     return true;",
                "// Line 218:                 }",
                "// Line 219:         }"
            ]
        },
        {
            "filename_of_changes": "Dropdown.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "12",
            "number_of_lines_deleted_vulnerable_to_cve": "6",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 86:      *",
                "// Line 87:      * @since 9.5.0 Usage of string in condition option is removed",
                "// Line 88:      **/",
                "// Line 89:     public static function show($itemtype, $options = [])",
                "// Line 90:     {",
                "// Line 91:         /** @var array $CFG_GLPI */",
                "// Line 92:         global $CFG_GLPI;",
                "// Line 93: ",
                "// Line 94:         if (!($item = getItemForItemtype($itemtype))) {",
                "// Line 95:             return false;",
                "// vulnerable line: 96: }",
                "// Line 97: ",
                "// Line 98:         $table = $item->getTable();",
                "// Line 99: ",
                "// Line 100:         $params['name']                 = $item->getForeignKeyField();",
                "// Line 101:         $params['value']                = (($itemtype == 'Entity') ? $_SESSION['glpiactive_entity'] : '');",
                "// Line 102:         $params['comments']             = true;",
                "// Line 103:         $params['entity']               = -1;",
                "// Line 104:         $params['entity_sons']          = false;",
                "// Line 105:         $params['toupdate']             = '';",
                "// Line 106:         $params['width']                = '';",
                "// Line 124:         $params['url']                  = $CFG_GLPI['root_doc'] . \"/ajax/getDropdownValue.php\";",
                "// Line 125:         $params['display_dc_position']  = false;",
                "// Line 126:         $params['hide_if_no_elements']  = false;",
                "// Line 127:         $params['readonly']             = false;",
                "// Line 128:         $params['parent_id_field']      = null;",
                "// Line 129:         $params['multiple']             = false;",
                "// Line 130: ",
                "// Line 131:         if (is_array($options) && count($options)) {",
                "// Line 132:             foreach ($options as $key => $val) {",
                "// Line 133:                 $params[$key] = $val;",
                "// vulnerable line: 134: }",
                "// vulnerable line: 135: }",
                "// Line 136:         $output       = '';",
                "// Line 137:         $name         = $params['emptylabel'];",
                "// Line 138:         $comment      = \"\";",
                "// Line 139: ",
                "// Line 140:         if ($params['multiple']) {",
                "// Line 141:             $params['display_emptychoice'] = false;",
                "// Line 142:             $params['values'] = $params['value'] ?? [];",
                "// Line 143:             $params['comments'] = false;",
                "// Line 144:             unset($params['value']);",
                "// vulnerable line: 145: }",
                "// Line 146: ",
                "// Line 147:        // Check default value for dropdown : need to be a numeric (or null)",
                "// vulnerable line: 148: if (",
                "// Line 149:             isset($params['value'])",
                "// Line 150:             && ((strlen($params['value']) == 0) || !is_numeric($params['value']) && $params['value'] != 'mygroups')",
                "// Line 151:         ) {",
                "// Line 152:             $params['value'] = 0;",
                "// vulnerable line: 153: }",
                "// Line 154: ",
                "// Line 155:         // Remove selected value from used to prevent current selected value from being hidden from available values",
                "// Line 156:         if ($params['multiple']) {",
                "// Line 157:             $params['used'] = array_diff($params['used'], $params['values']);",
                "// Line 158:         } else {",
                "// Line 159:             $params['used'] = array_diff($params['used'], [$params['value']]);",
                "// vulnerable line: 160: }",
                "// Line 161: ",
                "// Line 162:         $names = [];",
                "// Line 163:         if (!$params['multiple'] && isset($params['toadd'][$params['value']])) {",
                "// Line 164:             $name = $params['toadd'][$params['value']];",
                "// Line 165:         } else if (",
                "// Line 166:             !$params['multiple']",
                "// Line 167:             && ($params['value'] > 0 || ($itemtype == \"Entity\" && $params['value'] >= 0))",
                "// Line 168:         ) {",
                "// Line 169:             $tmpname = self::getDropdownName($table, $params['value'], 1);",
                "// Line 170: ",
                "// Line 171:             if ($tmpname[\"name\"] != \"&nbsp;\") {",
                "// Line 172:                 $name    = $tmpname[\"name\"];",
                "// Line 173:                 $comment = $tmpname[\"comment\"];",
                "// vulnerable line: 174: }",
                "// Line 175:         } else if ($params['multiple']) {",
                "// Line 176:             foreach ($params['values'] as $value) {",
                "// Line 177:                 if (isset($params['toadd'][$value])) {",
                "// Line 178:                     // Specific case, value added by the \"toadd\" param",
                "// Line 179:                     $names[] = $params['toadd'][$value];",
                "// Line 180:                 } else {",
                "// Line 181:                     $names[] = self::getDropdownName($table, $value);",
                "// vulnerable line: 182: }",
                "// vulnerable line: 183: }",
                "// vulnerable line: 184: }",
                "// Line 185: ",
                "// Line 186:         if ($params['readonly']) {",
                "// Line 187:             return '<span class=\"form-control\" readonly'",
                "// Line 188:                 . ($params['width'] ? ' style=\"width: ' . $params[\"width\"] . '\"' : '') . '>'",
                "// Line 189:                 . ($params['multiple'] ? implode(', ', $names) : $name)",
                "// Line 190:                 . '</span>';",
                "// vulnerable line: 191: }",
                "// Line 192: ",
                "// Line 193:        // Manage entity_sons",
                "// vulnerable line: 194: if (",
                "// Line 195:             !($params['entity'] < 0)",
                "// Line 196:             && $params['entity_sons']",
                "// Line 197:         ) {",
                "// Line 198:             if (is_array($params['entity'])) {",
                "// Line 199:                // translation not needed - only for debug",
                "// Line 200:                 $output .= \"entity_sons options is not available with entity option as array\";",
                "// Line 201:             } else {",
                "// Line 202:                 $params['entity'] = getSonsOf('glpi_entities', $params['entity']);",
                "// vulnerable line: 203: }",
                "// vulnerable line: 204: }",
                "// Line 205: ",
                "// Line 206:         $field_id = Html::cleanId(\"dropdown_\" . $params['name'] . $params['rand']);",
                "// Line 207: ",
                "// Line 208:        // Manage condition",
                "// Line 209:         if (!empty($params['condition'])) {",
                "// Line 210:            // Put condition in session and replace it by its key",
                "// Line 211:            // This is made to prevent passing to many parameters when calling the ajax script",
                "// Line 212:             $params['condition'] = static::addNewCondition($params['condition']);",
                "// vulnerable line: 213: }",
                "// Line 214: ",
                "// Line 215:         if ($params['multiple']) {",
                "// Line 216:             $names = Sanitizer::unsanitize($names);",
                "// Line 217:         } else {",
                "// Line 218:             $name = Sanitizer::unsanitize($name);",
                "// vulnerable line: 219: }",
                "// Line 220: ",
                "// Line 221:         $p = [",
                "// Line 222:             'width'                => $params['width'],",
                "// Line 223:             'itemtype'             => $itemtype,",
                "// Line 224:             'display_emptychoice'  => $params['display_emptychoice'],",
                "// Line 225:             'placeholder'          => $params['placeholder'],",
                "// Line 226:             'displaywith'          => $params['displaywith'],",
                "// Line 227:             'emptylabel'           => $params['emptylabel'],",
                "// Line 228:             'condition'            => $params['condition'],",
                "// Line 229:             'used'                 => $params['used'],",
                "// Line 245:             'parent_id_field'      => $params['parent_id_field'],",
                "// Line 246:             'multiple'             => $params['multiple'] ?? false,",
                "// Line 247:         ];",
                "// Line 248: ",
                "// Line 249:         if ($params['multiple']) {",
                "// Line 250:             $p['values'] = $params['values'];",
                "// Line 251:             $p['valuesnames'] = $names;",
                "// Line 252:         } else {",
                "// Line 253:             $p['value'] = $params['value'];",
                "// Line 254:             $p['valuename'] = $name;",
                "// vulnerable line: 255: }",
                "// Line 256: ",
                "// Line 257:         if ($params['hide_if_no_elements']) {",
                "// Line 258:             $result = self::getDropdownValue(",
                "// Line 259:                 ['display_emptychoice' => false, 'page' => 1, 'page_limit' => 1] + $p,",
                "// Line 260:                 false",
                "// Line 261:             );",
                "// Line 262:             if ($result['count'] === 0) {",
                "// Line 263:                 return;",
                "// vulnerable line: 264: }",
                "// vulnerable line: 265: }",
                "// Line 266: ",
                "// Line 267:         // Add icon",
                "// Line 268:         $add_item_icon = \"\";",
                "// vulnerable line: 269: if (",
                "// Line 270:             ($item instanceof CommonDropdown)",
                "// Line 271:             && $item->canCreate()",
                "// Line 272:             && !isset($_REQUEST['_in_modal'])",
                "// Line 273:             && $params['addicon']",
                "// Line 274:         ) {",
                "// Line 275:             $add_item_icon .= '<div class=\"btn btn-outline-secondary\"",
                "// Line 276:                            title=\"' . __s('Add') . '\" data-bs-toggle=\"modal\" data-bs-target=\"#add_' . $field_id . '\">';",
                "// Line 277:             $add_item_icon .= Ajax::createIframeModalWindow('add_' . $field_id, $item->getFormURL(), ['display' => false]);",
                "// Line 278:             $add_item_icon .= \"<span data-bs-toggle='tooltip'>",
                "// Line 279:               <i class='fa-fw ti ti-plus'></i>",
                "// Line 280:               <span class='sr-only'>\" . __s('Add') . \"</span>",
                "// Line 281:                 </span>\";",
                "// Line 282:             $add_item_icon .= '</div>';",
                "// vulnerable line: 283: }",
                "// Line 284: ",
                "// Line 285:        // Display comment",
                "// Line 286:         $icon_array = [];",
                "// Line 287:         if ($params['comments']) {",
                "// Line 288:             $comment_id      = Html::cleanId(\"comment_\" . $params['name'] . $params['rand']);",
                "// Line 289:             $link_id         = Html::cleanId(\"comment_link_\" . $params['name'] . $params['rand']);",
                "// Line 290:             $kblink_id       = Html::cleanId(\"kb_link_\" . $params['name'] . $params['rand']);",
                "// Line 291:             $breadcrumb_id   = Html::cleanId(\"dc_breadcrumb_\" . $params['name'] . $params['rand']);",
                "// Line 292:             $options_tooltip = ['contentid' => $comment_id,",
                "// Line 293:                 'linkid'    => $link_id,",
                "// Line 294:                 'display'   => false",
                "// Line 295:             ];",
                "// Line 296: ",
                "// Line 297:             if ($item->canView()) {",
                "// vulnerable line: 298: if (",
                "// Line 299:                     $params['value']",
                "// Line 300:                     && $item->getFromDB($params['value'])",
                "// Line 301:                     && $item->canViewItem()",
                "// Line 302:                 ) {",
                "// Line 303:                     $options_tooltip['link']       = $item->getLinkURL();",
                "// Line 304:                 } else {",
                "// Line 305:                     $options_tooltip['link']       = $item->getSearchURL();",
                "// vulnerable line: 306: }",
                "// Line 307:             } else {",
                "// Line 308:                 $options_tooltip['awesome-class'] = 'btn btn-outline-secondary fa-info';",
                "// vulnerable line: 309: }",
                "// Line 310: ",
                "// Line 311:             if (empty($comment)) {",
                "// Line 312:                 $comment = Toolbox::ucfirst(",
                "// Line 313:                     sprintf(",
                "// Line 314:                         __('Show %1$s'),",
                "// Line 315:                         $item::getTypeName(Session::getPluralNumber())",
                "// Line 316:                     )",
                "// Line 317:                 );",
                "// vulnerable line: 318: }",
                "// Line 319: ",
                "// Line 320:             $paramscomment = [];",
                "// Line 321:             if ($item->canView()) {",
                "// Line 322:                 $paramscomment['withlink'] = $link_id;",
                "// vulnerable line: 323: }",
                "// Line 324: ",
                "// Line 325:             // Comment icon",
                "// Line 326:             $comment_icon = Ajax::updateItemOnSelectEvent(",
                "// Line 327:                 $field_id,",
                "// Line 328:                 $comment_id,",
                "// Line 329:                 $CFG_GLPI[\"root_doc\"] . \"/ajax/comments.php\",",
                "// Line 330:                 $paramscomment,",
                "// Line 331:                 false",
                "// Line 332:             );",
                "// Line 333:             $options_tooltip['link_class'] = 'btn btn-outline-secondary';",
                "// Line 334:             $comment_icon .= Html::showToolTip($comment, $options_tooltip);",
                "// Line 335:             $icon_array[] = $comment_icon;",
                "// Line 336: ",
                "// Line 337:             // Add icon",
                "// vulnerable line: 338: if (",
                "// Line 339:                 ($item instanceof CommonDropdown)",
                "// Line 340:                 && $item->canCreate()",
                "// Line 341:                 && !isset($_REQUEST['_in_modal'])",
                "// Line 342:                 && $params['addicon']",
                "// Line 343:             ) {",
                "// Line 344:                   $icon_array[] = $add_item_icon;",
                "// vulnerable line: 345: }",
                "// Line 346: ",
                "// Line 347:            // Supplier Links",
                "// Line 348:             if ($itemtype == \"Supplier\") {",
                "// Line 349:                 if ($item->getFromDB($params['value'])) {",
                "// Line 350:                     $link_icon = '<div>';",
                "// Line 351:                     $link_icon .= $item->getLinks();",
                "// Line 352:                     $link_icon .= '</div>';",
                "// Line 353:                     $icon_array[] = $link_icon;",
                "// vulnerable line: 354: }",
                "// vulnerable line: 355: }",
                "// Line 356: ",
                "// Line 357:            // Location icon",
                "// Line 358:             if ($itemtype == 'Location') {",
                "// Line 359:                 $location_icon = '<div class=\"btn btn-outline-secondary\">';",
                "// Line 360:                 $location_icon .= \"<span title='\" . __s('Display on map') . \"' data-bs-toggle='tooltip' onclick='showMapForLocation(this)' data-fid='$field_id'>",
                "// Line 361:                <i class='fa-fw ti ti-map'></i>",
                "// Line 362:             </span>\";",
                "// Line 363:                 $location_icon .= '</div>';",
                "// Line 364:                 $icon_array[] = $location_icon;",
                "// vulnerable line: 365: }",
                "// Line 366: ",
                "// Line 367:             if ($params['display_dc_position']) {",
                "// Line 368:                 if ($rack = $item->isRackPart($itemtype, $params['value'], true)) {",
                "// Line 369:                     $dc_icon = \"<span id='\" . $breadcrumb_id . \"' title='\" . __s('Display on datacenter') . \"'>\";",
                "// Line 370:                     $dc_icon .= \"&nbsp;<a class='fas fa-crosshairs' href='\" . $rack->getLinkURL() . \"'></a>\";",
                "// Line 371:                     $dc_icon .= \"</span>\";",
                "// Line 372:                     $paramscomment['with_dc_position'] = $breadcrumb_id;",
                "// Line 373:                     $icon_array[] = $dc_icon;",
                "// vulnerable line: 374: }",
                "// vulnerable line: 375: }",
                "// Line 376: ",
                "// Line 377:            // KB links",
                "// vulnerable line: 378: if (",
                "// Line 379:                 $item->isField('knowbaseitemcategories_id') && Session::haveRightsOr('knowbase', [READ, KnowbaseItem::READFAQ])",
                "// Line 380:                 && method_exists($item, 'getLinks')",
                "// Line 381:             ) {",
                "// Line 382:                 // With the self-service profile, $item (whose itemtype = ITILCategory) is empty,",
                "// Line 383:                 //  as the profile does not have rights to ITILCategory to initialise it before.",
                "// Line 384:                 if ($item->isNewItem()) {",
                "// Line 385:                     $item->getFromDB($params['value']);",
                "// vulnerable line: 386: }",
                "// Line 387:                 if ($itemlinks = $item->getLinks()) {",
                "// Line 388:                     $paramskblinks = [",
                "// Line 389:                         'value'       => '__VALUE__',",
                "// Line 390:                         'itemtype'    => $itemtype,",
                "// Line 391:                         '_idor_token' => Session::getNewIDORToken($itemtype),",
                "// Line 392:                         'withlink'    => $kblink_id,",
                "// Line 393:                     ];",
                "// Line 394:                     $kb_link_icon = '<div class=\"btn btn-outline-secondary\">';",
                "// Line 395:                     $kb_link_icon .= Ajax::updateItemOnSelectEvent(",
                "// Line 396:                         $field_id,",
                "// Line 397:                         $kblink_id,",
                "// Line 398:                         $CFG_GLPI[\"root_doc\"] . \"/ajax/kblink.php\",",
                "// Line 399:                         $paramskblinks,",
                "// Line 400:                         false",
                "// Line 401:                     );",
                "// Line 402:                     $kb_link_icon .= \"<span id='$kblink_id'>\";",
                "// Line 403:                     $kb_link_icon .= $itemlinks;",
                "// Line 404:                     $kb_link_icon .= \"</span>\";",
                "// Line 405:                     $kb_link_icon .= '</div>';",
                "// Line 406:                     $icon_array[] = $kb_link_icon;",
                "// vulnerable line: 407: }",
                "// vulnerable line: 408: }",
                "// vulnerable line: 409: }",
                "// Line 410: ",
                "// Line 411:         // Trick to get the \"+\" button to work with dropdowns that support multiple values",
                "// Line 412:         if (count($icon_array) === 0 && $add_item_icon !== '') {",
                "// Line 413:             $icon_array[] = $add_item_icon;",
                "// vulnerable line: 414: }",
                "// Line 415: ",
                "// Line 416:         if (count($icon_array) > 0) {",
                "// Line 417:             $icon_count = count($icon_array);",
                "// Line 418:             $original_width = $params['width'];",
                "// Line 419:             if ($original_width === '100%') {",
                "// Line 420:                 $calc_width = \"calc(100% - (({$icon_count} * 0.9em) + (18px * {$icon_count})))\";",
                "// Line 421:                 $p['width'] = $calc_width;",
                "// vulnerable line: 422: }",
                "// Line 423:             $output .= Html::jsAjaxDropdown(",
                "// Line 424:                 $params['name'],",
                "// Line 425:                 $field_id,",
                "// Line 426:                 $params['url'],",
                "// Line 427:                 $p",
                "// Line 428:             );",
                "// Line 429:             $icons = implode('', $icon_array);",
                "// Line 430:             $output = \"<div class='btn-group btn-group-sm' role='group'",
                "// Line 431:                 style='width: {$original_width}'>{$output} {$icons}</div>\";",
                "// Line 432:         } else {",
                "// Line 433:             $output .= Html::jsAjaxDropdown(",
                "// Line 434:                 $params['name'],",
                "// Line 435:                 $field_id,",
                "// Line 436:                 $params['url'],",
                "// Line 437:                 $p",
                "// Line 438:             );",
                "// vulnerable line: 439: }",
                "// Line 440: ",
                "// Line 441:         $output .= Ajax::commonDropdownUpdateItem($params, false);",
                "// Line 442:         if ($params['display']) {",
                "// Line 443:             echo $output;",
                "// Line 444:             return $params['rand'];",
                "// vulnerable line: 445: }",
                "// Line 446:         return $output;",
                "// vulnerable line: 447: }",
                "// Line 448: ",
                "// Line 449: ",
                "// Line 450:     /**",
                "// Line 451:      * Add new condition",
                "// Line 452:      *",
                "// Line 453:      * @todo should not use session to pass query parameters...",
                "// Line 454:      *",
                "// Line 455:      * @param array $condition Condition to add",
                "// Line 456:      *",
                "// Line 457:      * @return string",
                "// Line 458:      */",
                "// Line 459:     public static function addNewCondition(array $condition)",
                "// Line 460:     {",
                "// Line 461:         $sha1 = sha1(serialize($condition));",
                "// Line 462:         $_SESSION['glpicondition'][$sha1] = $condition;",
                "// Line 463:         return $sha1;",
                "// vulnerable line: 464: }",
                "// Line 465: ",
                "// Line 466:     /**",
                "// Line 467:      * Get the value of a dropdown",
                "// Line 468:      *",
                "// Line 469:      * Returns the value of the dropdown from $table with ID $id.",
                "// Line 470:      *",
                "// Line 471:      * @param string  $table        the dropdown table from witch we want values on the select",
                "// Line 472:      * @param integer $id           id of the element to get",
                "// Line 473:      * @param boolean $withcomment  give array with name and comment (default 0)",
                "// Line 474:      * @param boolean $translate    (true by default)",
                "// Line 479:      **/",
                "// Line 480:     public static function getDropdownName($table, $id, $withcomment = 0, $translate = true, $tooltip = true, string $default = '&nbsp;')",
                "// Line 481:     {",
                "// Line 482:         /** @var \\DBmysql $DB */",
                "// Line 483:         global $DB;",
                "// Line 484: ",
                "// Line 485:         $item = getItemForItemtype(getItemTypeForTable($table));",
                "// Line 486: ",
                "// Line 487:         if (!is_object($item)) {",
                "// Line 488:             return $default;",
                "// vulnerable line: 489: }",
                "// Line 490: ",
                "// Line 491:         if ($item instanceof CommonTreeDropdown) {",
                "// Line 492:             return getTreeValueCompleteName($table, $id, $withcomment, $translate, $tooltip, $default);",
                "// vulnerable line: 493: }",
                "// Line 494: ",
                "// Line 495:         $name    = \"\";",
                "// Line 496:         $comment = \"\";",
                "// Line 497: ",
                "// Line 498:         if ($id) {",
                "// Line 499:             $SELECTNAME    = new \\QueryExpression(\"'' AS \" . $DB->quoteName('transname'));",
                "// Line 500:             $SELECTCOMMENT = new \\QueryExpression(\"'' AS \" . $DB->quoteName('transcomment'));",
                "// Line 501:             $JOIN          = [];",
                "// Line 502:             $JOINS         = [];",
                "// Line 503:             if ($translate) {",
                "// Line 508:                             'namet'  => 'items_id',",
                "// Line 509:                             $table   => 'id', [",
                "// Line 510:                                 'AND' => [",
                "// Line 511:                                     'namet.itemtype'  => getItemTypeForTable($table),",
                "// Line 512:                                     'namet.language'  => $_SESSION['glpilanguage'],",
                "// Line 513:                                     'namet.field'     => 'name'",
                "// Line 514:                                 ]",
                "// Line 515:                             ]",
                "// Line 516:                         ]",
                "// Line 517:                     ];",
                "// vulnerable line: 518: }",
                "// Line 519:                 if (Session::haveTranslations(getItemTypeForTable($table), 'comment')) {",
                "// Line 520:                     $SELECTCOMMENT = 'namec.value AS transcomment';",
                "// Line 521:                     $JOINS['glpi_dropdowntranslations AS namec'] = [",
                "// Line 522:                         'ON' => [",
                "// Line 523:                             'namec'  => 'items_id',",
                "// Line 524:                             $table   => 'id', [",
                "// Line 525:                                 'AND' => [",
                "// Line 526:                                     'namec.itemtype'  => getItemTypeForTable($table),",
                "// Line 527:                                     'namec.language'  => $_SESSION['glpilanguage'],",
                "// Line 528:                                     'namec.field'     => 'comment'",
                "// Line 529:                                 ]",
                "// Line 530:                             ]",
                "// Line 531:                         ]",
                "// Line 532:                     ];",
                "// vulnerable line: 533: }",
                "// Line 534: ",
                "// Line 535:                 if (count($JOINS)) {",
                "// Line 536:                     $JOIN = ['LEFT JOIN' => $JOINS];",
                "// vulnerable line: 537: }",
                "// vulnerable line: 538: }",
                "// Line 539: ",
                "// Line 540:             $criteria = [",
                "// Line 541:                 'SELECT' => [",
                "// Line 542:                     \"$table.*\",",
                "// Line 543:                     $SELECTNAME,",
                "// Line 544:                     $SELECTCOMMENT",
                "// Line 545:                 ],",
                "// Line 546:                 'FROM'   => $table,",
                "// Line 547:                 'WHERE'  => [\"$table.id\" => $id]",
                "// Line 548:             ] + $JOIN;",
                "// Line 554:            /// GetName of class already give Name !!",
                "// Line 555:            /// TODO CommonDBTM : review getComments to be recursive and add information from class hierarchy",
                "// Line 556:            /// getUserName have the same system : clean it too",
                "// Line 557:            /// Need to study the problem",
                "// Line 558:             if (count($iterator)) {",
                "// Line 559:                 $data = $iterator->current();",
                "// Line 560:                 if ($translate && !empty($data['transname'])) {",
                "// Line 561:                     $name = $data['transname'];",
                "// Line 562:                 } else {",
                "// Line 563:                     $name = $data[$item->getNameField()];",
                "// vulnerable line: 564: }",
                "// Line 565:                 if (isset($data[\"comment\"])) {",
                "// Line 566:                     if ($translate && !empty($data['transcomment'])) {",
                "// Line 567:                         $comment = $data['transcomment'];",
                "// Line 568:                     } else {",
                "// Line 569:                         $comment = $data[\"comment\"];",
                "// vulnerable line: 570: }",
                "// vulnerable line: 571: }",
                "// Line 572: ",
                "// Line 573:                 switch ($table) {",
                "// Line 574:                     case \"glpi_computers\":",
                "// Line 575:                         if (empty($name)) {",
                "// Line 576:                              $name = \"($id)\";",
                "// vulnerable line: 577: }",
                "// Line 578:                         break;",
                "// Line 579: ",
                "// Line 580:                     case \"glpi_contacts\":",
                "// Line 581:                        //TRANS: %1$s is the name, %2$s is the firstname",
                "// Line 582:                         $name = sprintf(__('%1$s %2$s'), $name, $data[\"firstname\"]);",
                "// Line 583:                         if ($tooltip) {",
                "// Line 584:                             if (!empty($data[\"phone\"])) {",
                "// Line 585:                                 $comment .= \"<br>\" . sprintf(",
                "// Line 586:                                     __('%1$s: %2$s'),",
                "// Line 587:                                     \"<span class='b'>\" . Phone::getTypeName(1),",
                "// Line 588:                                     \"</span>\" . $data['phone']",
                "// Line 589:                                 );",
                "// vulnerable line: 590: }",
                "// Line 591:                             if (!empty($data[\"phone2\"])) {",
                "// Line 592:                                 $comment .= \"<br>\" . sprintf(",
                "// Line 593:                                     __('%1$s: %2$s'),",
                "// Line 594:                                     \"<span class='b'>\" . __('Phone 2'),",
                "// Line 595:                                     \"</span>\" . $data['phone2']",
                "// Line 596:                                 );",
                "// vulnerable line: 597: }",
                "// Line 598:                             if (!empty($data[\"mobile\"])) {",
                "// Line 599:                                 $comment .= \"<br>\" . sprintf(",
                "// Line 600:                                     __('%1$s: %2$s'),",
                "// Line 601:                                     \"<span class='b'>\" . __('Mobile phone'),",
                "// Line 602:                                     \"</span>\" . $data['mobile']",
                "// Line 603:                                 );",
                "// vulnerable line: 604: }",
                "// Line 605:                             if (!empty($data[\"fax\"])) {",
                "// Line 606:                                 $comment .= \"<br>\" . sprintf(",
                "// Line 607:                                     __('%1$s: %2$s'),",
                "// Line 608:                                     \"<span class='b'>\" . __('Fax'),",
                "// Line 609:                                     \"</span>\" . $data['fax']",
                "// Line 610:                                 );",
                "// vulnerable line: 611: }",
                "// Line 612:                             if (!empty($data[\"email\"])) {",
                "// Line 613:                                 $comment .= \"<br>\" . sprintf(",
                "// Line 614:                                     __('%1$s: %2$s'),",
                "// Line 615:                                     \"<span class='b'>\" . _n('Email', 'Emails', 1),",
                "// Line 616:                                     \"</span>\" . $data['email']",
                "// Line 617:                                 );",
                "// vulnerable line: 618: }",
                "// vulnerable line: 619: }",
                "// Line 620:                         break;",
                "// Line 621: ",
                "// Line 622:                     case \"glpi_suppliers\":",
                "// Line 623:                         if ($tooltip) {",
                "// Line 624:                             if (!empty($data[\"phonenumber\"])) {",
                "// Line 625:                                  $comment .= \"<br>\" . sprintf(",
                "// Line 626:                                      __('%1$s: %2$s'),",
                "// Line 627:                                      \"<span class='b'>\" . Phone::getTypeName(1),",
                "// Line 628:                                      \"</span>\" . $data['phonenumber']",
                "// Line 629:                                  );",
                "// vulnerable line: 630: }",
                "// Line 631:                             if (!empty($data[\"fax\"])) {",
                "// Line 632:                                 $comment .= \"<br>\" . sprintf(",
                "// Line 633:                                     __('%1$s: %2$s'),",
                "// Line 634:                                     \"<span class='b'>\" . __('Fax'),",
                "// Line 635:                                     \"</span>\" . $data['fax']",
                "// Line 636:                                 );",
                "// vulnerable line: 637: }",
                "// Line 638:                             if (!empty($data[\"email\"])) {",
                "// Line 639:                                 $comment .= \"<br>\" . sprintf(",
                "// Line 640:                                     __('%1$s: %2$s'),",
                "// Line 641:                                     \"<span class='b'>\" . _n('Email', 'Emails', 1),",
                "// Line 642:                                     \"</span>\" . $data['email']",
                "// Line 643:                                 );",
                "// vulnerable line: 644: }",
                "// vulnerable line: 645: }",
                "// Line 646:                         break;",
                "// Line 647: ",
                "// Line 648:                     case \"glpi_sockets\":",
                "// Line 649:                         $name = sprintf(",
                "// Line 650:                             __('%1$s (%2$s)'),",
                "// Line 651:                             $name,",
                "// Line 652:                             self::getDropdownName(",
                "// Line 653:                                 \"glpi_locations\",",
                "// Line 654:                                 $data[\"locations_id\"],",
                "// Line 655:                                 false,",
                "// Line 664:                                  $comment .= \"<br>\" . sprintf(",
                "// Line 665:                                      __('%1$s: %2$s'),",
                "// Line 666:                                      \"<span class='b'>\" . Location::getTypeName(1) . \"</span>\",",
                "// Line 667:                                      self::getDropdownName(",
                "// Line 668:                                          \"glpi_locations\",",
                "// Line 669:                                          $data[\"locations_id\"],",
                "// Line 670:                                          false,",
                "// Line 671:                                          $translate",
                "// Line 672:                                      )",
                "// Line 673:                                  );",
                "// vulnerable line: 674: }",
                "// Line 675:                             if (!empty($data['budgettypes_id'])) {",
                "// Line 676:                                 $comment .= \"<br>\" . sprintf(",
                "// Line 677:                                     __('%1$s: %2$s'),",
                "// Line 678:                                     \"<span class='b'>\" . _n('Type', 'Types', 1) . \"</span>\",",
                "// Line 679:                                     self::getDropdownName(",
                "// Line 680:                                         \"glpi_budgettypes\",",
                "// Line 681:                                         $data[\"budgettypes_id\"],",
                "// Line 682:                                         false,",
                "// Line 683:                                         $translate",
                "// Line 684:                                     )",
                "// Line 685:                                 );",
                "// vulnerable line: 686: }",
                "// Line 687:                             if (!empty($data['begin_date'])) {",
                "// Line 688:                                 $comment .= \"<br>\" . sprintf(",
                "// Line 689:                                     __('%1$s: %2$s'),",
                "// Line 690:                                     \"<span class='b'>\" . __('Start date') . \"</span>\",",
                "// Line 691:                                     Html::convDateTime($data[\"begin_date\"])",
                "// Line 692:                                 );",
                "// vulnerable line: 693: }",
                "// Line 694:                             if (!empty($data['end_date'])) {",
                "// Line 695:                                 $comment .= \"<br>\" . sprintf(",
                "// Line 696:                                     __('%1$s: %2$s'),",
                "// Line 697:                                     \"<span class='b'>\" . __('End date') . \"</span>\",",
                "// Line 698:                                     Html::convDateTime($data[\"end_date\"])",
                "// Line 699:                                 );",
                "// vulnerable line: 700: }",
                "// vulnerable line: 701: }",
                "// vulnerable line: 702: }",
                "// vulnerable line: 703: }",
                "// vulnerable line: 704: }",
                "// Line 705: ",
                "// Line 706:         if (empty($name)) {",
                "// Line 707:             $name = $default;",
                "// vulnerable line: 708: }",
                "// Line 709: ",
                "// Line 710:         if ($withcomment) {",
                "// Line 711:             return [",
                "// Line 712:                 'name'      => $name,",
                "// Line 713:                 'comment'   => $comment",
                "// Line 714:             ];",
                "// vulnerable line: 715: }",
                "// Line 716: ",
                "// Line 717:         return $name;",
                "// vulnerable line: 718: }",
                "// Line 719: ",
                "// Line 720: ",
                "// Line 721:     /**",
                "// Line 722:      * Get values of a dropdown for a list of item",
                "// Line 723:      *",
                "// Line 724:      * @param string    $table  the dropdown table from witch we want values on the select",
                "// Line 725:      * @param integer[] $ids    array containing the ids to get",
                "// Line 726:      *",
                "// Line 727:      * @return array containing the value of the dropdown or &nbsp; if not exists",
                "// Line 728:      **/",
                "// Line 732:         global $DB;",
                "// Line 733: ",
                "// Line 734:         $tabs = [];",
                "// Line 735: ",
                "// Line 736:         if (count($ids)) {",
                "// Line 737:             $itemtype = getItemTypeForTable($table);",
                "// Line 738:             if ($item = getItemForItemtype($itemtype)) {",
                "// Line 739:                 $field    = 'name';",
                "// Line 740:                 if ($item instanceof CommonTreeDropdown) {",
                "// Line 741:                     $field = 'completename';",
                "// vulnerable line: 742: }",
                "// Line 743: ",
                "// Line 744:                 $iterator = $DB->request([",
                "// Line 745:                     'SELECT' => ['id', $field],",
                "// Line 746:                     'FROM'   => $table,",
                "// Line 747:                     'WHERE'  => ['id' => $ids]",
                "// Line 748:                 ]);",
                "// Line 749: ",
                "// Line 750:                 foreach ($iterator as $data) {",
                "// Line 751:                      $tabs[$data['id']] = $data[$field];",
                "// vulnerable line: 752: }",
                "// vulnerable line: 753: }",
                "// vulnerable line: 754: }",
                "// Line 755:         return $tabs;",
                "// vulnerable line: 756: }",
                "// Line 757: ",
                "// Line 758: ",
                "// Line 759:     /**",
                "// Line 760:      * Make a select box for device type",
                "// Line 761:      *",
                "// Line 762:      * @param string   $name     name of the select box",
                "// Line 763:      * @param string[] $types    array of types to display",
                "// Line 764:      * @param array    $options  Parameters which could be used in options array :",
                "// Line 765:      *    - value               : integer / preselected value (default '')",
                "// Line 766:      *    - used                : array / Already used items ID: not to display in dropdown (default empty)",
                "// Line 780:         $params['used']                = [];",
                "// Line 781:         $params['emptylabel']          = self::EMPTY_VALUE;",
                "// Line 782:         $params['display']             = true;",
                "// Line 783:         $params['width']               = '';",
                "// Line 784:         $params['display_emptychoice'] = true;",
                "// Line 785:         $params['rand']         = mt_rand();",
                "// Line 786: ",
                "// Line 787:         if (is_array($options) && count($options)) {",
                "// Line 788:             foreach ($options as $key => $val) {",
                "// Line 789:                 $params[$key] = $val;",
                "// vulnerable line: 790: }",
                "// vulnerable line: 791: }",
                "// Line 792: ",
                "// Line 793:         $values = [];",
                "// Line 794:         if (count($types)) {",
                "// Line 795:             foreach ($types as $type) {",
                "// Line 796:                 if ($item = getItemForItemtype($type)) {",
                "// Line 797:                     $values[$type] = $item->getTypeName(1);",
                "// vulnerable line: 798: }",
                "// vulnerable line: 799: }",
                "// vulnerable line: 800: }",
                "// Line 801:         asort($values);",
                "// Line 802:         return self::showFromArray(",
                "// Line 803:             $name,",
                "// Line 804:             $values,",
                "// Line 805:             $params",
                "// Line 806:         );",
                "// vulnerable line: 807: }",
                "// Line 808: ",
                "// Line 809: ",
                "// Line 810:     /**",
                "// Line 811:      * Make a select box for device type",
                "// Line 812:      *",
                "// Line 813:      * @param string $name          name of the select box",
                "// Line 814:      * @param string $itemtype_ref  itemtype reference where to search in itemtype field",
                "// Line 815:      * @param array  $options       array of possible options:",
                "// Line 816:      *        - may be value (default value) / field (used field to search itemtype)",
                "// Line 817:      *",
                "// Line 823:     {",
                "// Line 824:         /** @var \\DBmysql $DB */",
                "// Line 825:         global $DB;",
                "// Line 826: ",
                "// Line 827:         $p['value'] = 0;",
                "// Line 828:         $p['field'] = 'itemtype';",
                "// Line 829: ",
                "// Line 830:         if (is_array($options) && count($options)) {",
                "// Line 831:             foreach ($options as $key => $val) {",
                "// Line 832:                 $p[$key] = $val;",
                "// vulnerable line: 833: }",
                "// vulnerable line: 834: }",
                "// Line 835: ",
                "// Line 836:         $iterator = $DB->request([",
                "// Line 837:             'SELECT'          => $p['field'],",
                "// Line 838:             'DISTINCT'        => true,",
                "// Line 839:             'FROM'            => getTableForItemType($itemtype_ref)",
                "// Line 840:         ]);",
                "// Line 841: ",
                "// Line 842:         $tabs = [];",
                "// Line 843:         foreach ($iterator as $data) {",
                "// Line 844:             $tabs[$data[$p['field']]] = $data[$p['field']];",
                "// vulnerable line: 845: }",
                "// Line 846:         return self::showItemTypes($name, $tabs, ['value' => $p['value']]);",
                "// vulnerable line: 847: }",
                "// Line 848: ",
                "// Line 849: ",
                "// Line 850:     /**",
                "// Line 851:      * Make a select box for icons",
                "// Line 852:      *",
                "// Line 853:      * @param string  $myname      the name of the HTML select",
                "// Line 854:      * @param mixed   $value       the preselected value we want",
                "// Line 855:      * @param string  $store_path  path where icons are stored",
                "// Line 856:      * @param boolean $display     display of get string ? (true by default)",
                "// Line 857:      *",
                "// Line 862:      **/",
                "// Line 863:     public static function dropdownIcons($myname, $value, $store_path, $display = true, $options = [])",
                "// Line 864:     {",
                "// Line 865: ",
                "// Line 866:         if (is_dir($store_path)) {",
                "// Line 867:             if ($dh = opendir($store_path)) {",
                "// Line 868:                 $files = [];",
                "// Line 869: ",
                "// Line 870:                 while (($file = readdir($dh)) !== false) {",
                "// Line 871:                     $files[] = $file;",
                "// vulnerable line: 872: }",
                "// Line 873: ",
                "// Line 874:                 closedir($dh);",
                "// Line 875:                 sort($files);",
                "// Line 876: ",
                "// Line 877:                 $values = [];",
                "// Line 878:                 foreach ($files as $file) {",
                "// Line 879:                     if (preg_match(\"/\\.png$/i\", $file)) {",
                "// Line 880:                         $values[$file] = $file;",
                "// vulnerable line: 881: }",
                "// vulnerable line: 882: }",
                "// Line 883:                 $rand = mt_rand();",
                "// Line 884:                 self::showFromArray(",
                "// Line 885:                     $myname,",
                "// Line 886:                     $values,",
                "// Line 887:                     array_merge(",
                "// Line 888:                         [",
                "// Line 889:                             'value'                 => $value,",
                "// Line 890:                             'display_emptychoice'   => true,",
                "// Line 891:                             'display'               => $display,",
                "// Line 892:                             'noselect2'             => true, // we will instanciate it later",
                "// Line 898: ",
                "// Line 899:                 /** @var array $CFG_GLPI */",
                "// Line 900:                 global $CFG_GLPI;",
                "// Line 901: ",
                "// Line 902:                 // templates for select2 dropdown",
                "// Line 903:                 $js = <<<JAVASCRIPT",
                "// Line 904:                 $(function() {",
                "// Line 905:                     const formatFormIcon = function(icon) {",
                "// Line 906:                         if (!icon.id || icon.id == '0') {",
                "// Line 907:                             return icon.text;",
                "// vulnerable line: 908: }",
                "// Line 909:                         var img = '<span><img alt=\"\" src=\"{$CFG_GLPI['typedoc_icon_dir']}/'+icon.id+'\" />';",
                "// Line 910:                         var label = '<span>'+icon.text+'</span>';",
                "// Line 911:                         return $(img+'&nbsp;'+label);",
                "// Line 912:                     };",
                "// Line 913:                     $(\"#dropdown_{$myname}{$rand}\").select2({",
                "// Line 914:                         width: '60%',",
                "// Line 915:                         templateSelection: formatFormIcon,",
                "// Line 916:                         templateResult: formatFormIcon",
                "// Line 917:                     });",
                "// Line 918:                 });",
                "// Line 919: JAVASCRIPT;",
                "// Line 920:                 echo Html::scriptBlock($js);",
                "// Line 921:             } else {",
                "// Line 922:                //TRANS: %s is the store path",
                "// Line 923:                 printf(__('Error reading directory %s'), $store_path);",
                "// vulnerable line: 924: }",
                "// Line 925:         } else {",
                "// Line 926:            //TRANS: %s is the store path",
                "// Line 927:             printf(__('Error: %s is not a directory'), $store_path);",
                "// vulnerable line: 928: }",
                "// vulnerable line: 929: }",
                "// Line 930: ",
                "// Line 931: ",
                "// Line 932:     /**",
                "// Line 933:      * Dropdown for GMT selection",
                "// Line 934:      *",
                "// Line 935:      * @param string $name   select name",
                "// Line 936:      * @param mixed  $value  default value (default '')",
                "// Line 937:      **/",
                "// Line 938:     public static function showGMT($name, $value = '')",
                "// Line 939:     {",
                "// Line 950:                     __('%1$s %2$s'),",
                "// Line 951:                     __('GMT'),",
                "// Line 952:                     sprintf(",
                "// Line 953:                         _n('%s hour', '%s hours', $element),",
                "// Line 954:                         $element",
                "// Line 955:                     )",
                "// Line 956:                 );",
                "// Line 957:             } else {",
                "// Line 958:                 $display_value                   = __('GMT');",
                "// Line 959:                 $values[$element * HOUR_TIMESTAMP] = __('GMT');",
                "// vulnerable line: 960: }",
                "// vulnerable line: 961: }",
                "// Line 962:         Dropdown::showFromArray($name, $values, ['value' => $value]);",
                "// vulnerable line: 963: }",
                "// Line 964: ",
                "// Line 965: ",
                "// Line 966:     /**",
                "// Line 967:      * Make a select box for a boolean choice (Yes/No) or display a checkbox. Add a",
                "// Line 968:      * 'use_checkbox' = true to the $params array to display a checkbox instead a select box",
                "// Line 969:      *",
                "// Line 970:      * @param string  $name         select name",
                "// Line 971:      * @param mixed   $value        preselected value. (default 0)",
                "// Line 972:      * @param integer $restrict_to  allows to display only yes or no in the dropdown (default -1)",
                "// Line 973:      * @param array   $params       Array of optional options (passed to showFromArray)",
                "// Line 976:      *    integer if option display=true (random part of elements id)",
                "// Line 977:      *    string if option display=false (HTML code)",
                "// Line 978:      **/",
                "// Line 979:     public static function showYesNo($name, $value = 0, $restrict_to = -1, $params = [])",
                "// Line 980:     {",
                "// Line 981:         $options = [];",
                "// Line 982: ",
                "// Line 983:         if (!array_key_exists('use_checkbox', $params)) {",
                "// Line 984:            // TODO: switch to true when Html::showCheckbox() is validated",
                "// Line 985:             $params['use_checkbox'] = false;",
                "// vulnerable line: 986: }",
                "// Line 987:         if ($params['use_checkbox']) {",
                "// Line 988:             if (!empty($params['rand'])) {",
                "// Line 989:                 $rand = $params['rand'];",
                "// Line 990:             } else {",
                "// Line 991:                 $rand = mt_rand();",
                "// vulnerable line: 992: }",
                "// Line 993: ",
                "// Line 994:             $options = ['name' => $name,",
                "// Line 995:                 'id'   => Html::cleanId(\"dropdown_\" . $name . $rand)",
                "// Line 996:             ];",
                "// Line 997: ",
                "// Line 998:             switch ($restrict_to) {",
                "// Line 999:                 case 0:",
                "// Line 1000:                     $options['checked']  = false;",
                "// Line 1001:                     $options['readonly'] = true;",
                "// Line 1002:                     break;",
                "// Line 1003: ",
                "// Line 1004:                 case 1:",
                "// Line 1005:                     $options['checked']  = true;",
                "// Line 1006:                     $options['readonly'] = true;",
                "// Line 1007:                     break;",
                "// Line 1008: ",
                "// Line 1009:                 default:",
                "// Line 1010:                     $options['checked']  = ($value ? 1 : 0);",
                "// Line 1011:                     $options['readonly'] = false;",
                "// Line 1012:                     break;",
                "// vulnerable line: 1013: }",
                "// Line 1014: ",
                "// Line 1015:             $output = Html::getCheckbox($options);",
                "// Line 1016:             if (!isset($params['display']) || $params['display'] == 'true') {",
                "// Line 1017:                 echo $output;",
                "// Line 1018:                 return $rand;",
                "// Line 1019:             } else {",
                "// Line 1020:                 return $output;",
                "// vulnerable line: 1021: }",
                "// vulnerable line: 1022: }",
                "// Line 1023: ",
                "// Line 1024:         if ($restrict_to != 0) {",
                "// Line 1025:             $options[0] = __('No');",
                "// vulnerable line: 1026: }",
                "// Line 1027: ",
                "// Line 1028:         if ($restrict_to != 1) {",
                "// Line 1029:             $options[1] = __('Yes');",
                "// vulnerable line: 1030: }",
                "// Line 1031: ",
                "// Line 1032:         $params['value'] = $value;",
                "// Line 1033:         $params['width'] = \"65px\";",
                "// Line 1034:         return self::showFromArray($name, $options, $params);",
                "// vulnerable line: 1035: }",
                "// Line 1036: ",
                "// Line 1037: ",
                "// Line 1038:     /**",
                "// Line 1039:      * Get Yes No string",
                "// Line 1040:      *",
                "// Line 1041:      * @param mixed $value Yes No value",
                "// Line 1042:      *",
                "// Line 1043:      * @return string",
                "// Line 1044:      **/",
                "// Line 1045:     public static function getYesNo($value)",
                "// Line 1046:     {",
                "// Line 1047: ",
                "// Line 1048:         if ($value) {",
                "// Line 1049:             return __('Yes');",
                "// vulnerable line: 1050: }",
                "// Line 1051:         return __('No');",
                "// vulnerable line: 1052: }",
                "// Line 1053: ",
                "// Line 1054: ",
                "// Line 1055:     /**",
                "// Line 1056:      * Get the Device list name the user is allowed to edit",
                "// Line 1057:      *",
                "// Line 1058:      * @return array (group of dropdown) of array (itemtype => localized name)",
                "// Line 1059:      **/",
                "// Line 1060:     public static function getDeviceItemTypes()",
                "// Line 1061:     {",
                "// Line 1062:         static $optgroup = null;",
                "// Line 1063: ",
                "// Line 1064:         if (!Session::haveRight('device', READ)) {",
                "// Line 1065:             return [];",
                "// vulnerable line: 1066: }",
                "// Line 1067: ",
                "// Line 1068:         if (is_null($optgroup)) {",
                "// Line 1069:             $devices = [];",
                "// Line 1070:             foreach (CommonDevice::getDeviceTypes() as $device_type) {",
                "// Line 1071:                 $devices[$device_type] = $device_type::getTypeName(Session::getPluralNumber());",
                "// vulnerable line: 1072: }",
                "// Line 1073:             asort($devices);",
                "// Line 1074:             $optgroup = [_n('Component', 'Components', Session::getPluralNumber()) => $devices];",
                "// vulnerable line: 1075: }",
                "// Line 1076:         return $optgroup;",
                "// vulnerable line: 1077: }",
                "// Line 1078: ",
                "// Line 1079: ",
                "// Line 1080:     /**",
                "// Line 1081:      * Get the dropdown list name the user is allowed to edit",
                "// Line 1082:      *",
                "// Line 1083:      * @return array (group of dropdown) of array (itemtype => localized name)",
                "// Line 1084:      **/",
                "// Line 1085:     public static function getStandardDropdownItemTypes()",
                "// Line 1086:     {",
                "// Line 1087:         static $optgroup = null;",
                "// Line 1268:                     'USBVendor' => null,",
                "// Line 1269:                     'PCIVendor' => null",
                "// Line 1270:                 ]",
                "// Line 1271: ",
                "// Line 1272:             ]; //end $opt",
                "// Line 1273: ",
                "// Line 1274:             $plugdrop = Plugin::getDropdowns();",
                "// Line 1275: ",
                "// Line 1276:             if (count($plugdrop)) {",
                "// Line 1277:                 $optgroup = array_merge($optgroup, $plugdrop);",
                "// vulnerable line: 1278: }",
                "// Line 1279: ",
                "// Line 1280:             foreach ($optgroup as $label => &$dp) {",
                "// Line 1281:                 foreach ($dp as $key => &$val) {",
                "// Line 1282:                     if ($tmp = getItemForItemtype($key)) {",
                "// Line 1283:                         if (!$tmp->canView()) {",
                "// Line 1284:                             unset($optgroup[$label][$key]);",
                "// Line 1285:                         } else if ($val === null) {",
                "// Line 1286:                             $val = $key::getTypeName(Session::getPluralNumber());",
                "// vulnerable line: 1287: }",
                "// Line 1288:                     } else {",
                "// Line 1289:                         unset($optgroup[$label][$key]);",
                "// vulnerable line: 1290: }",
                "// vulnerable line: 1291: }",
                "// Line 1292: ",
                "// Line 1293:                 if (count($optgroup[$label]) == 0) {",
                "// Line 1294:                     unset($optgroup[$label]);",
                "// vulnerable line: 1295: }",
                "// vulnerable line: 1296: }",
                "// vulnerable line: 1297: }",
                "// Line 1298:         return $optgroup;",
                "// vulnerable line: 1299: }",
                "// Line 1300: ",
                "// Line 1301: ",
                "// Line 1302:     /**",
                "// Line 1303:      * Display a menu to select an itemtype which open the search form (by default)",
                "// Line 1304:      *",
                "// Line 1305:      * @param string     $title     title to display",
                "// Line 1306:      * @param array      $optgroup  (group of dropdown) of array (itemtype => localized name)",
                "// Line 1307:      * @param string     $value     URL of selected current value (default '')",
                "// Line 1308:      * @param array      $options",
                "// Line 1309:      *",
                "// Line 1323:         echo \"<label class='col-sm-1 col-form-label'>$title</label>\";",
                "// Line 1324:         $selected = '';",
                "// Line 1325: ",
                "// Line 1326:         $values = [];",
                "// Line 1327:         foreach ($optgroup as $label => $dp) {",
                "// Line 1328:             foreach ($dp as $key => $val) {",
                "// Line 1329:                 $search = $key::getSearchURL();",
                "// Line 1330: ",
                "// Line 1331:                 if (basename($search) == basename($value)) {",
                "// Line 1332:                     $selected = $search;",
                "// vulnerable line: 1333: }",
                "// Line 1334:                 $values[$label][$search] = $val;",
                "// vulnerable line: 1335: }",
                "// vulnerable line: 1336: }",
                "// Line 1337:         echo \"<div class='col-sm-11'>\";",
                "// Line 1338:         Dropdown::showFromArray('dpmenu', $values, [",
                "// Line 1339:             'on_change'           => $params['on_change'],",
                "// Line 1340:             'value'               => $selected,",
                "// Line 1341:             'display_emptychoice' => $params['display_emptychoice'],",
                "// Line 1342:             'width'               => $params['width'],",
                "// Line 1343:         ]);",
                "// Line 1344:         echo \"</div>\";",
                "// Line 1345:         echo \"</div>\";",
                "// Line 1346:         echo \"</div>\";",
                "// vulnerable line: 1347: }",
                "// Line 1348: ",
                "// Line 1349: ",
                "// Line 1350:     /**",
                "// Line 1351:      * Display a list to select a itemtype with link to search form",
                "// Line 1352:      *",
                "// Line 1353:      * @param $optgroup array (group of dropdown) of array (itemtype => localized name)",
                "// Line 1354:      */",
                "// Line 1355:     public static function showItemTypeList($optgroup)",
                "// Line 1356:     {",
                "// Line 1357:         Html::requireJs('masonry');",
                "// Line 1358:         echo TemplateRenderer::getInstance()->render(",
                "// Line 1359:             'pages/setup/dropdowns_list.html.twig',",
                "// Line 1360:             [",
                "// Line 1361:                 'optgroup' => $optgroup,",
                "// Line 1362:             ]",
                "// Line 1363:         );",
                "// vulnerable line: 1364: }",
                "// Line 1365: ",
                "// Line 1366: ",
                "// Line 1367:     /**",
                "// Line 1368:      * Dropdown available languages",
                "// Line 1369:      *",
                "// Line 1370:      * @param string $myname   select name",
                "// Line 1371:      * @param array  $options  array of additionnal options:",
                "// Line 1372:      *    - display_emptychoice : allow selection of no language",
                "// Line 1373:      *    - emptylabel          : specific string to empty label if display_emptychoice is true",
                "// Line 1374:      **/",
                "// Line 1375:     public static function showLanguages($myname, $options = [])",
                "// Line 1376:     {",
                "// Line 1377:         $values = [];",
                "// Line 1378:         if (isset($options['display_emptychoice']) && ($options['display_emptychoice'])) {",
                "// Line 1379:             if (isset($options['emptylabel'])) {",
                "// Line 1380:                 $values[''] = $options['emptylabel'];",
                "// Line 1381:             } else {",
                "// Line 1382:                 $values[''] = self::EMPTY_VALUE;",
                "// vulnerable line: 1383: }",
                "// Line 1384:             unset($options['display_emptychoice']);",
                "// vulnerable line: 1385: }",
                "// Line 1386: ",
                "// Line 1387:         $values = array_merge($values, self::getLanguages());",
                "// Line 1388:         return self::showFromArray($myname, $values, $options);",
                "// vulnerable line: 1389: }",
                "// Line 1390: ",
                "// Line 1391:     /**",
                "// Line 1392:      * Get available languages",
                "// Line 1393:      *",
                "// Line 1394:      * @since 9.5.0",
                "// Line 1395:      *",
                "// Line 1396:      * @return array",
                "// Line 1397:      */",
                "// Line 1398:     public static function getLanguages()",
                "// Line 1399:     {",
                "// Line 1400:         /** @var array $CFG_GLPI */",
                "// Line 1401:         global $CFG_GLPI;",
                "// Line 1402: ",
                "// Line 1403:         $languages = [];",
                "// Line 1404:         foreach ($CFG_GLPI[\"languages\"] as $key => $val) {",
                "// Line 1405:             if (isset($val[1]) && is_file(GLPI_ROOT . \"/locales/\" . $val[1])) {",
                "// Line 1406:                 $languages[$key] = $val[0];",
                "// vulnerable line: 1407: }",
                "// vulnerable line: 1408: }",
                "// Line 1409: ",
                "// Line 1410:         return $languages;",
                "// vulnerable line: 1411: }",
                "// Line 1412: ",
                "// Line 1413: ",
                "// Line 1414:     /**",
                "// Line 1415:      * @since 0.84",
                "// Line 1416:      *",
                "// Line 1417:      * @param $value",
                "// Line 1418:      **/",
                "// Line 1419:     public static function getLanguageName($value)",
                "// Line 1420:     {",
                "// Line 1421:         /** @var array $CFG_GLPI */",
                "// Line 1422:         global $CFG_GLPI;",
                "// Line 1423: ",
                "// Line 1424:         if (isset($CFG_GLPI[\"languages\"][$value][0])) {",
                "// Line 1425:             return $CFG_GLPI[\"languages\"][$value][0];",
                "// vulnerable line: 1426: }",
                "// Line 1427:         return $value;",
                "// vulnerable line: 1428: }",
                "// Line 1429: ",
                "// Line 1430: ",
                "// Line 1431:     /**",
                "// Line 1432:      * Print a select with hours",
                "// Line 1433:      *",
                "// Line 1434:      * Print a select named $name with hours options and selected value $value",
                "// Line 1435:      *",
                "// Line 1436:      *@param $name             string   HTML select name",
                "// Line 1437:      *@param $options array of options :",
                "// Line 1438:      *     - value              default value (default '')",
                "// Line 1454: ",
                "// Line 1455:         $p['value']          = '';",
                "// Line 1456:         $p['limit_planning'] = false;",
                "// Line 1457:         $p['display']        = true;",
                "// Line 1458:         $p['width']          = '';",
                "// Line 1459:         $p['step']           = $CFG_GLPI[\"time_step\"];",
                "// Line 1460: ",
                "// Line 1461:         if (is_array($options) && count($options)) {",
                "// Line 1462:             foreach ($options as $key => $val) {",
                "// Line 1463:                 $p[$key] = $val;",
                "// vulnerable line: 1464: }",
                "// vulnerable line: 1465: }",
                "// Line 1466: ",
                "// Line 1467:         $begin = 0;",
                "// Line 1468:         $end   = 24;",
                "// Line 1469:        // Check if the $step is Ok for the $value field",
                "// Line 1470:         $split = explode(\":\", $p['value']);",
                "// Line 1471: ",
                "// Line 1472:        // Valid value XX:YY ou XX:YY:ZZ",
                "// Line 1473:         if ((count($split) == 2) || (count($split) == 3)) {",
                "// Line 1474:             $min = $split[1];",
                "// Line 1475: ",
                "// Line 1476:            // Problem",
                "// Line 1477:             if (($min % $p['step']) != 0) {",
                "// Line 1478:                // set minimum step",
                "// Line 1479:                 $p['step'] = 5;",
                "// vulnerable line: 1480: }",
                "// vulnerable line: 1481: }",
                "// Line 1482: ",
                "// Line 1483:         if ($p['limit_planning']) {",
                "// Line 1484:             $plan_begin = explode(\":\", $CFG_GLPI[\"planning_begin\"]);",
                "// Line 1485:             $plan_end   = explode(\":\", $CFG_GLPI[\"planning_end\"]);",
                "// Line 1486:             $begin      = (int) $plan_begin[0];",
                "// Line 1487:             $end        = (int) $plan_end[0];",
                "// vulnerable line: 1488: }",
                "// Line 1489: ",
                "// Line 1490:         $values   = [];",
                "// Line 1491:         $selected = '';",
                "// Line 1492: ",
                "// Line 1493:         for ($i = $begin; $i < $end; $i++) {",
                "// Line 1494:             if ($i < 10) {",
                "// Line 1495:                 $tmp = \"0\" . $i;",
                "// Line 1496:             } else {",
                "// Line 1497:                 $tmp = $i;",
                "// vulnerable line: 1498: }",
                "// Line 1499: ",
                "// Line 1500:             for ($j = 0; $j < 60; $j += $p['step']) {",
                "// Line 1501:                 if ($j < 10) {",
                "// Line 1502:                     $val = $tmp . \":0$j\";",
                "// Line 1503:                 } else {",
                "// Line 1504:                     $val = $tmp . \":$j\";",
                "// vulnerable line: 1505: }",
                "// Line 1506:                 $values[$val] = $val;",
                "// Line 1507:                 if (($p['value'] == $val . \":00\") || ($p['value'] == $val)) {",
                "// Line 1508:                     $selected = $val;",
                "// vulnerable line: 1509: }",
                "// vulnerable line: 1510: }",
                "// vulnerable line: 1511: }",
                "// Line 1512:        // Last item",
                "// Line 1513:         $val = $end . \":00\";",
                "// Line 1514:         $values[$val] = $val;",
                "// Line 1515:         if (($p['value'] == $val . \":00\") || ($p['value'] == $val)) {",
                "// Line 1516:             $selected = $val;",
                "// vulnerable line: 1517: }",
                "// Line 1518:         $p['value'] = $selected;",
                "// Line 1519:         return Dropdown::showFromArray($name, $values, $p);",
                "// vulnerable line: 1520: }",
                "// Line 1521: ",
                "// Line 1522: ",
                "// Line 1523:     /**",
                "// Line 1524:      * show a dropdown to selec a type",
                "// Line 1525:      *",
                "// Line 1526:      * @since 0.83",
                "// Line 1527:      *",
                "// Line 1528:      * @param array|string $types    Types used (default \"state_types\") (default '')",
                "// Line 1529:      * @param array        $options  Array of optional options",
                "// Line 1530:      *        name, value, rand, emptylabel, display_emptychoice, on_change, plural, checkright",
                "// Line 1551:        //Display emptychoice ?",
                "// Line 1552:         $params['display_emptychoice'] = true;",
                "// Line 1553:         $params['checkright']          = false;",
                "// Line 1554:         $params['toupdate']            = '';",
                "// Line 1555:         $params['display']             = true;",
                "// Line 1556:         $params['track_changes']       = true;",
                "// Line 1557: ",
                "// Line 1558:         if (is_array($options) && count($options)) {",
                "// Line 1559:             foreach ($options as $key => $val) {",
                "// Line 1560:                 $params[$key] = $val;",
                "// vulnerable line: 1561: }",
                "// vulnerable line: 1562: }",
                "// Line 1563: ",
                "// Line 1564:         if (!is_array($types)) {",
                "// Line 1565:             $types = $CFG_GLPI[\"state_types\"];",
                "// vulnerable line: 1566: }",
                "// Line 1567:         $options = [];",
                "// Line 1568: ",
                "// Line 1569:         foreach ($types as $type) {",
                "// Line 1570:             if ($item = getItemForItemtype($type)) {",
                "// Line 1571:                 if ($params['checkright'] && !$item->canView()) {",
                "// Line 1572:                     continue;",
                "// vulnerable line: 1573: }",
                "// Line 1574:                 $options[$type] = $item->getTypeName($params['plural'] ? 2 : 1);",
                "// vulnerable line: 1575: }",
                "// vulnerable line: 1576: }",
                "// Line 1577:         asort($options);",
                "// Line 1578: ",
                "// Line 1579:         if (count($options)) {",
                "// Line 1580:             return Dropdown::showFromArray($params['name'], $options, [",
                "// Line 1581:                 'value'               => $params['value'],",
                "// Line 1582:                 'on_change'           => $params['on_change'],",
                "// Line 1583:                 'toupdate'            => $params['toupdate'],",
                "// Line 1584:                 'display_emptychoice' => $params['display_emptychoice'],",
                "// Line 1585:                 'emptylabel'          => $params['emptylabel'],",
                "// Line 1586:                 'display'             => $params['display'],",
                "// Line 1587:                 'rand'                => $params['rand'],",
                "// Line 1588:                 'track_changes'       => $params['track_changes'],",
                "// Line 1589:             ]);",
                "// vulnerable line: 1590: }",
                "// Line 1591:         return 0;",
                "// vulnerable line: 1592: }",
                "// Line 1593: ",
                "// Line 1594: ",
                "// Line 1595:     /**",
                "// Line 1596:      * Make a select box for all items",
                "// Line 1597:      *",
                "// Line 1598:      * @since 0.85",
                "// Line 1599:      *",
                "// Line 1600:      * @param $options array:",
                "// Line 1601:      *   - itemtype_name        : the name of the field containing the itemtype (default 'itemtype')",
                "// Line 1602:      *   - items_id_name        : the name of the field containing the id of the selected item",
                "// Line 1632:         $params['emptylabel']             = self::EMPTY_VALUE;",
                "// Line 1633:         $params['used']                   = [];",
                "// Line 1634:         $params['ajax_page']              = $CFG_GLPI[\"root_doc\"] . \"/ajax/dropdownAllItems.php\";",
                "// Line 1635:         $params['display']                = true;",
                "// Line 1636:         $params['rand']                   = mt_rand();",
                "// Line 1637:         $params['itemtype_track_changes'] = false;",
                "// Line 1638: ",
                "// Line 1639:         if (is_array($options) && count($options)) {",
                "// Line 1640:             foreach ($options as $key => $val) {",
                "// Line 1641:                 $params[$key] = $val;",
                "// vulnerable line: 1642: }",
                "// vulnerable line: 1643: }",
                "// Line 1644: ",
                "// Line 1645:         $select = self::showItemType($params['itemtypes'], [",
                "// Line 1646:             'checkright'    => $params['checkright'],",
                "// Line 1647:             'name'          => $params['itemtype_name'],",
                "// Line 1648:             'emptylabel'    => $params['emptylabel'],",
                "// Line 1649:             'display'       => $params['display'],",
                "// Line 1650:             'rand'          => $params['rand'],",
                "// Line 1651:             'track_changes' => $params['itemtype_track_changes'],",
                "// Line 1652:         ]);",
                "// Line 1653: ",
                "// Line 1655:             'idtable'             => '__VALUE__',",
                "// Line 1656:             'name'                => $params['items_id_name'],",
                "// Line 1657:             'entity_restrict'     => $params['entity_restrict'],",
                "// Line 1658:             'showItemSpecificity' => $params['showItemSpecificity'],",
                "// Line 1659:             'rand'                => $params['rand']",
                "// Line 1660:         ];",
                "// Line 1661: ",
                "// Line 1662:        // manage condition",
                "// Line 1663:         if ($params['onlyglobal']) {",
                "// Line 1664:             $p_ajax['condition'] = static::addNewCondition(['is_global' => 1]);",
                "// vulnerable line: 1665: }",
                "// Line 1666:         if ($params['used']) {",
                "// Line 1667:             $p_ajax['used'] = $params['used'];",
                "// vulnerable line: 1668: }",
                "// Line 1669: ",
                "// Line 1670:         $field_id = Html::cleanId(\"dropdown_\" . $params['itemtype_name'] . $params['rand']);",
                "// Line 1671:         $show_id  = Html::cleanId(\"show_\" . $params['items_id_name'] . $params['rand']);",
                "// Line 1672: ",
                "// Line 1673:         $ajax = Ajax::updateItemOnSelectEvent(",
                "// Line 1674:             $field_id,",
                "// Line 1675:             $show_id,",
                "// Line 1676:             $params['ajax_page'],",
                "// Line 1677:             $p_ajax,",
                "// Line 1678:             $params['display']",
                "// Line 1679:         );",
                "// Line 1680: ",
                "// Line 1681:         $out = \"\";",
                "// Line 1682:         if (!$params['display']) {",
                "// Line 1683:             $out .= $select . $ajax;",
                "// vulnerable line: 1684: }",
                "// Line 1685: ",
                "// Line 1686:         $out .= \"<br><span id='$show_id'>&nbsp;</span>",
                "// Line 1687: \";",
                "// Line 1688: ",
                "// Line 1689:        // We check $options as the caller will set $options['default_itemtype'] only if it needs a",
                "// Line 1690:        // default itemtype and the default value can be '' thus empty won't be valid !",
                "// Line 1691:         if (array_key_exists('default_itemtype', $options)) {",
                "// Line 1692:             $out .= \"<script type='text/javascript' >",
                "// Line 1693: \";",
                "// Line 1694:             $out .= \"$(function() {\";",
                "// Line 1700:             $ajax2 = Ajax::updateItem(",
                "// Line 1701:                 $show_id,",
                "// Line 1702:                 $params['ajax_page'],",
                "// Line 1703:                 $p_ajax,",
                "// Line 1704:                 \"\",",
                "// Line 1705:                 $params['display']",
                "// Line 1706:             );",
                "// Line 1707: ",
                "// Line 1708:             if (!$params['display']) {",
                "// Line 1709:                 $out .= $ajax2;",
                "// vulnerable line: 1710: }",
                "// vulnerable line: 1711: }",
                "// Line 1712: ",
                "// Line 1713:         if ($params['display']) {",
                "// Line 1714:             echo $out;",
                "// Line 1715:             return $params['rand'];",
                "// vulnerable line: 1716: }",
                "// Line 1717: ",
                "// Line 1718:         return $out;",
                "// vulnerable line: 1719: }",
                "// Line 1720: ",
                "// Line 1721: ",
                "// Line 1722:     /**",
                "// Line 1723:      * Dropdown numbers",
                "// Line 1724:      *",
                "// Line 1725:      * @since 0.84",
                "// Line 1726:      *",
                "// Line 1727:      * @param string $myname   select name",
                "// Line 1728:      * @param array  $options  array of additionnal options :",
                "// Line 1729:      *     - value              default value (default 0)",
                "// Line 1756:             'width'           => '',",
                "// Line 1757:             'on_change'       => '',",
                "// Line 1758:             'used'            => [],",
                "// Line 1759:             'specific_tags'   => [],",
                "// Line 1760:             'class'           => \"form-select\",",
                "// Line 1761:         ];",
                "// Line 1762: ",
                "// Line 1763:         if (is_array($options) && count($options)) {",
                "// Line 1764:             foreach ($options as $key => $val) {",
                "// Line 1765:                 $p[$key] = $val;",
                "// vulnerable line: 1766: }",
                "// vulnerable line: 1767: }",
                "// Line 1768:         if (($p['value'] < $p['min']) && !isset($p['toadd'][$p['value']])) {",
                "// Line 1769:             $min = $p['min'];",
                "// Line 1770: ",
                "// Line 1771:             while (isset($p['used'][$min])) {",
                "// Line 1772:                 ++$min;",
                "// vulnerable line: 1773: }",
                "// Line 1774:             $p['value'] = $min;",
                "// vulnerable line: 1775: }",
                "// Line 1776: ",
                "// Line 1777:         $field_id = Html::cleanId(\"dropdown_\" . $myname . $p['rand']);",
                "// Line 1778:         $valuekey = Toolbox::isFloat($p['value']) ? (string)$p['value'] : $p['value'];",
                "// Line 1779:         if (!isset($p['toadd'][$valuekey])) {",
                "// Line 1780:             $decimals = Toolbox::isFloat($p['value']) ? Toolbox::getDecimalNumbers($p['step']) : 0;",
                "// Line 1781:             $valuename = self::getValueWithUnit($p['value'], $p['unit'], $decimals);",
                "// Line 1782:         } else {",
                "// Line 1783:             $valuename = $p['toadd'][$valuekey];",
                "// vulnerable line: 1784: }",
                "// Line 1785:         $param = ['value'               => $p['value'],",
                "// Line 1786:             'valuename'           => $valuename,",
                "// Line 1787:             'width'               => $p['width'],",
                "// Line 1788:             'on_change'           => $p['on_change'],",
                "// Line 1789:             'used'                => $p['used'],",
                "// Line 1790:             'unit'                => $p['unit'],",
                "// Line 1791:             'min'                 => $p['min'],",
                "// Line 1792:             'max'                 => $p['max'],",
                "// Line 1793:             'step'                => $p['step'],",
                "// Line 1794:             'toadd'               => $p['toadd'],",
                "// Line 1799:         $out   = Html::jsAjaxDropdown(",
                "// Line 1800:             $myname,",
                "// Line 1801:             $field_id,",
                "// Line 1802:             $CFG_GLPI['root_doc'] . \"/ajax/getDropdownNumber.php\",",
                "// Line 1803:             $param",
                "// Line 1804:         );",
                "// Line 1805: ",
                "// Line 1806:         if ($p['display']) {",
                "// Line 1807:             echo $out;",
                "// Line 1808:             return $p['rand'];",
                "// vulnerable line: 1809: }",
                "// Line 1810:         return $out;",
                "// vulnerable line: 1811: }",
                "// Line 1812: ",
                "// Line 1813: ",
                "// Line 1814:     /**",
                "// Line 1815:      * Get value with unit / Automatic management of standar unit (year, month, %, ...)",
                "// Line 1816:      *",
                "// Line 1817:      * @since 0.84",
                "// Line 1818:      *",
                "// Line 1819:      * @param integer $value    numeric value",
                "// Line 1820:      * @param string  $unit     unit (maybe year, month, day, hour, % for standard management)",
                "// Line 1821:      * @param integer $decimals number of decimal",
                "// Line 1822:      **/",
                "// Line 1823:     public static function getValueWithUnit($value, $unit, $decimals = 0)",
                "// Line 1824:     {",
                "// Line 1825: ",
                "// Line 1826:         $formatted_number = is_numeric($value)",
                "// Line 1827:          ? Html::formatNumber($value, false, $decimals)",
                "// Line 1828:          : $value;",
                "// Line 1829: ",
                "// Line 1830:         if (strlen($unit) == 0) {",
                "// Line 1831:             return $formatted_number;",
                "// vulnerable line: 1832: }",
                "// Line 1833: ",
                "// Line 1834:         switch ($unit) {",
                "// Line 1835:             case 'year':",
                "// Line 1836:                //TRANS: %s is a number of years",
                "// Line 1837:                 return sprintf(_n('%s year', '%s years', $value), $formatted_number);",
                "// Line 1838: ",
                "// Line 1839:             case 'month':",
                "// Line 1840:                //TRANS: %s is a number of months",
                "// Line 1841:                 return sprintf(_n('%s month', '%s months', $value), $formatted_number);",
                "// Line 1842: ",
                "// Line 1864:                 return sprintf(_n('%d unit', '%d units', $value), $value);",
                "// Line 1865: ",
                "// Line 1866:             case 'auto':",
                "// Line 1867:                 return Toolbox::getSize($value * 1024 * 1024);",
                "// Line 1868: ",
                "// Line 1869:             case '%':",
                "// Line 1870:                 return sprintf(__('%s%%'), $formatted_number);",
                "// Line 1871: ",
                "// Line 1872:             default:",
                "// Line 1873:                 return sprintf(__('%1$s %2$s'), $formatted_number, $unit);",
                "// vulnerable line: 1874: }",
                "// vulnerable line: 1875: }",
                "// Line 1876: ",
                "// Line 1877: ",
                "// Line 1878:     /**",
                "// Line 1879:      * Dropdown integers",
                "// Line 1880:      *",
                "// Line 1881:      * @since 0.83",
                "// Line 1882:      *",
                "// Line 1883:      * @param string $myname   select name",
                "// Line 1884:      * @param array  $options  array of options",
                "// Line 1885:      *    - value           : default value",
                "// Line 1911:         $params['display']             = true;",
                "// Line 1912:         $params['display_emptychoice'] = true;",
                "// Line 1913:         $params['width']               = '';",
                "// Line 1914:         $params['class']               = 'form-select';",
                "// Line 1915:         $params['allow_max_change']    = true;",
                "// Line 1916:         $params['disabled']            = false;",
                "// Line 1917: ",
                "// Line 1918:         if (is_array($options) && count($options)) {",
                "// Line 1919:             foreach ($options as $key => $val) {",
                "// Line 1920:                 $params[$key] = $val;",
                "// vulnerable line: 1921: }",
                "// vulnerable line: 1922: }",
                "// Line 1923: ",
                "// Line 1924:        // Manage min :",
                "// Line 1925:         $params['min'] = floor($params['min'] / $params['step']) * $params['step'];",
                "// Line 1926: ",
                "// Line 1927:         if ($params['min'] == 0) {",
                "// Line 1928:             $params['min'] = $params['step'];",
                "// vulnerable line: 1929: }",
                "// Line 1930: ",
                "// Line 1931:         if ($params['allow_max_change']) {",
                "// Line 1932:             $params['max'] = max($params['value'], $params['max']);",
                "// vulnerable line: 1933: }",
                "// Line 1934: ",
                "// Line 1935:        // Floor with MINUTE_TIMESTAMP for rounded purpose",
                "// Line 1936:         if (empty($params['value'])) {",
                "// Line 1937:             $params['value'] = 0;",
                "// vulnerable line: 1938: }",
                "// vulnerable line: 1939: if (",
                "// Line 1940:             ($params['value'] < max($params['min'], 10 * MINUTE_TIMESTAMP))",
                "// Line 1941:             && $params['addfirstminutes']",
                "// Line 1942:         ) {",
                "// Line 1943:             $params['value'] = floor(($params['value']) / MINUTE_TIMESTAMP) * MINUTE_TIMESTAMP;",
                "// Line 1944:         } else if (!in_array($params['value'], $params['toadd'])) {",
                "// Line 1945:            // Round to a valid step except if value is already valid (defined in values to add)",
                "// Line 1946:             $params['value'] = floor(($params['value']) / $params['step']) * $params['step'];",
                "// vulnerable line: 1947: }",
                "// Line 1948: ",
                "// Line 1949:         if (!$params['allow_max_change'] && $params['value'] > $params['max']) {",
                "// Line 1950:             $params['toadd'][] = $params['value'];",
                "// vulnerable line: 1951: }",
                "// Line 1952: ",
                "// Line 1953:         // Generate array keys",
                "// Line 1954:         $values = [];",
                "// Line 1955: ",
                "// Line 1956:         if ($params['value']) {",
                "// Line 1957:             $values[$params['value']] = '';",
                "// vulnerable line: 1958: }",
                "// Line 1959: ",
                "// Line 1960:         if ($params['addfirstminutes']) {",
                "// Line 1961:             $max = max($params['min'], 10 * MINUTE_TIMESTAMP);",
                "// Line 1962:             for ($i = MINUTE_TIMESTAMP; $i < $max; $i += MINUTE_TIMESTAMP) {",
                "// Line 1963:                 $values[$i] = '';",
                "// vulnerable line: 1964: }",
                "// vulnerable line: 1965: }",
                "// Line 1966: ",
                "// Line 1967:         for ($i = $params['min']; $i <= $params['max']; $i += $params['step']) {",
                "// Line 1968:             $values[$i] = '';",
                "// vulnerable line: 1969: }",
                "// Line 1970: ",
                "// Line 1971:         if (count($params['toadd'])) {",
                "// Line 1972:             foreach ($params['toadd'] as $key) {",
                "// Line 1973:                 $values[$key] = '';",
                "// vulnerable line: 1974: }",
                "// Line 1975:             ksort($values);",
                "// vulnerable line: 1976: }",
                "// Line 1977: ",
                "// Line 1978:         // Generate array values",
                "// Line 1979:         foreach ($values as $i => $val) {",
                "// Line 1980:             if ($params['inhours']) {",
                "// Line 1981:                 $day  = 0;",
                "// Line 1982:                 $hour = floor($i / HOUR_TIMESTAMP);",
                "// Line 1983:             } else {",
                "// Line 1984:                 $day  = floor($i / DAY_TIMESTAMP);",
                "// Line 1985:                 $hour = floor(($i % DAY_TIMESTAMP) / HOUR_TIMESTAMP);",
                "// vulnerable line: 1986: }",
                "// Line 1987:             $minute     = floor(($i % HOUR_TIMESTAMP) / MINUTE_TIMESTAMP);",
                "// Line 1988:             if ($minute === '0') {",
                "// Line 1989:                 $minute = '00';",
                "// vulnerable line: 1990: }",
                "// Line 1991:             if ($day > 0) {",
                "// Line 1992:                 if (($hour > 0) || ($minute > 0)) {",
                "// Line 1993:                     if ($minute < 10) {",
                "// Line 1994:                          $minute = '0' . $minute;",
                "// vulnerable line: 1995: }",
                "// Line 1996: ",
                "// Line 1997:                    //TRANS: %1$d is the number of days, %2$d the number of hours,",
                "// Line 1998:                    //       %3$s the number of minutes : display 1 day 3h15",
                "// Line 1999:                     $values[$i] = sprintf(",
                "// Line 2000:                         _n('%1$d day %2$dh%3$s', '%1$d days %2$dh%3$s', $day),",
                "// Line 2001:                         $day,",
                "// Line 2002:                         $hour,",
                "// Line 2003:                         $minute",
                "// Line 2004:                     );",
                "// Line 2005:                 } else {",
                "// Line 2006:                     $values[$i] = sprintf(_n('%d day', '%d days', $day), $day);",
                "// vulnerable line: 2007: }",
                "// Line 2008:             } else if ($hour > 0 || $minute > 0) {",
                "// Line 2009:                 if ($minute < 10) {",
                "// Line 2010:                     $minute = '0' . $minute;",
                "// vulnerable line: 2011: }",
                "// Line 2012: ",
                "// Line 2013:                //TRANS: %1$d the number of hours, %2$s the number of minutes : display 3h15",
                "// Line 2014:                 $values[$i] = sprintf(__('%1$dh%2$s'), $hour, $minute);",
                "// vulnerable line: 2015: }",
                "// vulnerable line: 2016: }",
                "// Line 2017: ",
                "// Line 2018:         return Dropdown::showFromArray($myname, $values, [",
                "// Line 2019:             'value'               => $params['value'],",
                "// Line 2020:             'display'             => $params['display'],",
                "// Line 2021:             'width'               => $params['width'],",
                "// Line 2022:             'display_emptychoice' => $params['display_emptychoice'],",
                "// Line 2023:             'rand'                => $params['rand'],",
                "// Line 2024:             'emptylabel'          => $params['emptylabel'],",
                "// Line 2025:             'class'               => $params['class'],",
                "// Line 2026:             'disabled'            => $params['disabled'],",
                "// Line 2027:         ]);",
                "// vulnerable line: 2028: }",
                "// Line 2029: ",
                "// Line 2030: ",
                "// Line 2031:     /**",
                "// Line 2032:      * Toggle view in LDAP user import/synchro between no restriction and date restriction",
                "// Line 2033:      *",
                "// Line 2034:      * @param $enabled (default 0)",
                "// Line 2035:      **/",
                "// Line 2036:     public static function showAdvanceDateRestrictionSwitch($enabled = 0)",
                "// Line 2037:     {",
                "// Line 2038:         /** @var array $CFG_GLPI */",
                "// Line 2051:          Ajax::updateItemJsCode('date_restriction', $url, $params);",
                "// Line 2052:         echo \"};\";",
                "// Line 2053:         echo \"</script>\";",
                "// Line 2054: ",
                "// Line 2055:         echo \"</table>\";",
                "// Line 2056:         echo \"<span id='date_restriction'>\";",
                "// Line 2057:         $_POST['enabled'] = $enabled;",
                "// Line 2058:         include(GLPI_ROOT . \"/ajax/ldapdaterestriction.php\");",
                "// Line 2059:         echo \"</span>\";",
                "// Line 2060:         return $rand;",
                "// vulnerable line: 2061: }",
                "// Line 2062: ",
                "// Line 2063: ",
                "// Line 2064:     /**",
                "// Line 2065:      * Dropdown of values in an array",
                "// Line 2066:      *",
                "// Line 2067:      * @param string $name      select name",
                "// Line 2068:      * @param array  $elements  array of elements to display",
                "// Line 2069:      * @param array  $options   array of possible options:",
                "// Line 2070:      *    - value               : integer / preselected value (default 0)",
                "// Line 2071:      *    - used                : array / Already used items ID: not to display in dropdown (default empty)",
                "// Line 2120:         $param['required']            = false;",
                "// Line 2121:         $param['noselect2']           = false;",
                "// Line 2122:         $param['templateResult']      = \"templateResult\";",
                "// Line 2123:         $param['templateSelection']   = \"templateSelection\";",
                "// Line 2124:         $param['track_changes']       = \"true\";",
                "// Line 2125: ",
                "// Line 2126:         if (is_array($options) && count($options)) {",
                "// Line 2127:             if (isset($options['value']) && strlen($options['value'])) {",
                "// Line 2128:                 $options['values'] = [$options['value']];",
                "// Line 2129:                 unset($options['value']);",
                "// vulnerable line: 2130: }",
                "// Line 2131:             foreach ($options as $key => $val) {",
                "// Line 2132:                 $param[$key] = $val;",
                "// vulnerable line: 2133: }",
                "// vulnerable line: 2134: }",
                "// Line 2135: ",
                "// Line 2136:         $other_select_option = $name . '_other_value';",
                "// Line 2137:         if ($param['other'] !== false) {",
                "// Line 2138:             $param['on_change'] .= \"displayOtherSelectOptions(this, \"$other_select_option\");\";",
                "// Line 2139: ",
                "// Line 2140:            // If $param['other'] is a string, then we must highlight \"other\" option",
                "// Line 2141:             if (is_string($param['other'])) {",
                "// Line 2142:                 if (!$param[\"multiple\"]) {",
                "// Line 2143:                     $param['values'] = [$other_select_option];",
                "// Line 2144:                 } else {",
                "// Line 2145:                     $param['values'][] = $other_select_option;",
                "// vulnerable line: 2146: }",
                "// vulnerable line: 2147: }",
                "// vulnerable line: 2148: }",
                "// Line 2149: ",
                "// Line 2150:         $param['option_tooltips'] = Html::entities_deep($param['option_tooltips']);",
                "// Line 2151: ",
                "// Line 2152:         if ($param[\"display_emptychoice\"] && !$param[\"multiple\"]) {",
                "// Line 2153:             $elements = [ 0 => $param['emptylabel'] ] + $elements;",
                "// vulnerable line: 2154: }",
                "// Line 2155: ",
                "// Line 2156:         if ($param[\"multiple\"]) {",
                "// Line 2157:             $field_name = $name . \"[]\";",
                "// Line 2158:         } else {",
                "// Line 2159:             $field_name = $name;",
                "// vulnerable line: 2160: }",
                "// Line 2161: ",
                "// Line 2162:         $output = '';",
                "// Line 2163:        // readonly mode",
                "// Line 2164:         $field_id = Html::cleanId(\"dropdown_\" . $name . $param['rand']);",
                "// Line 2165:         if ($param['readonly']) {",
                "// Line 2166:             $to_display = [];",
                "// Line 2167:             foreach ($param['values'] as $value) {",
                "// Line 2168:                 $output .= \"<input type='hidden' name='$field_name' value='$value'>\";",
                "// Line 2169:                 if (isset($elements[$value])) {",
                "// Line 2170:                     $to_display[] = $elements[$value];",
                "// vulnerable line: 2171: }",
                "// vulnerable line: 2172: }",
                "// Line 2173:             $output .= '<span class=\"form-control\" readonly style=\"width: ' . $param[\"width\"] . '\">' . implode(', ', $to_display) . '</span>';",
                "// Line 2174:         } else {",
                "// Line 2175:             $output  .= \"<select name='$field_name' id='$field_id'\";",
                "// Line 2176: ",
                "// Line 2177:             if ($param['tooltip']) {",
                "// Line 2178:                 $output .= ' title=\"' . Html::entities_deep($param['tooltip']) . '\"';",
                "// vulnerable line: 2179: }",
                "// Line 2180: ",
                "// Line 2181:             if ($param['class']) {",
                "// Line 2182:                 $output .= ' class=\"' . Html::entities_deep($param['class']) . '\"';",
                "// vulnerable line: 2183: }",
                "// Line 2184: ",
                "// Line 2185:             if (!empty($param[\"on_change\"])) {",
                "// Line 2186:                 $output .= \" onChange='\" . $param[\"on_change\"] . \"'\";",
                "// vulnerable line: 2187: }",
                "// Line 2188: ",
                "// Line 2189:             if ((is_int($param[\"size\"])) && ($param[\"size\"] > 0)) {",
                "// Line 2190:                 $output .= \" size='\" . $param[\"size\"] . \"'\";",
                "// vulnerable line: 2191: }",
                "// Line 2192: ",
                "// Line 2193:             if ($param[\"multiple\"]) {",
                "// Line 2194:                 $output .= \" multiple\";",
                "// vulnerable line: 2195: }",
                "// Line 2196: ",
                "// Line 2197:             if ($param[\"disabled\"]) {",
                "// Line 2198:                 $output .= \" disabled='disabled'\";",
                "// vulnerable line: 2199: }",
                "// Line 2200: ",
                "// Line 2201:             if ($param[\"required\"]) {",
                "// Line 2202:                 $output .= \" required='required'\";",
                "// vulnerable line: 2203: }",
                "// Line 2204: ",
                "// Line 2205:             if (!$param['track_changes']) {",
                "// Line 2206:                 $output .= \" data-track-changes=''\";",
                "// vulnerable line: 2207: }",
                "// Line 2208: ",
                "// Line 2209:             $output .= '>';",
                "// Line 2210:             $max_option_size = 0;",
                "// Line 2211:             foreach ($elements as $key => $val) {",
                "// Line 2212:                // optgroup management",
                "// Line 2213:                 if (is_array($val)) {",
                "// Line 2214:                     $opt_goup = Html::entities_deep($key);",
                "// Line 2215:                     if ($max_option_size < strlen($opt_goup)) {",
                "// Line 2216:                         $max_option_size = strlen($opt_goup);",
                "// vulnerable line: 2217: }",
                "// Line 2218: ",
                "// Line 2219:                     $output .= \"<optgroup label=\"$opt_goup\"\";",
                "// Line 2220:                     $optgroup_tooltips = false;",
                "// Line 2221:                     if (isset($param['option_tooltips'][$key])) {",
                "// Line 2222:                         if (is_array($param['option_tooltips'][$key])) {",
                "// Line 2223:                             if (isset($param['option_tooltips'][$key]['__optgroup_label'])) {",
                "// Line 2224:                                 $output .= ' title=\"' . $param['option_tooltips'][$key]['__optgroup_label'] . '\"';",
                "// vulnerable line: 2225: }",
                "// Line 2226:                             $optgroup_tooltips = $param['option_tooltips'][$key];",
                "// Line 2227:                         } else {",
                "// Line 2228:                             $output .= ' title=\"' . $param['option_tooltips'][$key] . '\"';",
                "// vulnerable line: 2229: }",
                "// vulnerable line: 2230: }",
                "// Line 2231:                     $output .= \">\";",
                "// Line 2232: ",
                "// Line 2233:                     foreach ($val as $key2 => $val2) {",
                "// Line 2234:                         if (!isset($param['used'][$key2])) {",
                "// Line 2235:                             $output .= \"<option value='\" . $key2 . \"'\";",
                "// Line 2236:                            // Do not use in_array : trouble with 0 and empty value",
                "// Line 2237:                             foreach ($param['values'] as $value) {",
                "// Line 2238:                                 if (strcmp($key2, $value) === 0) {",
                "// Line 2239:                                     $output .= \" selected\";",
                "// Line 2240:                                     break;",
                "// vulnerable line: 2241: }",
                "// vulnerable line: 2242: }",
                "// Line 2243:                             if ($optgroup_tooltips && isset($optgroup_tooltips[$key2])) {",
                "// Line 2244:                                 $output .= ' title=\"' . $optgroup_tooltips[$key2] . '\"';",
                "// vulnerable line: 2245: }",
                "// Line 2246:                             $output .= \">\" .  Html::entities_deep($val2) . \"</option>\";",
                "// Line 2247:                             if ($max_option_size < strlen($val2)) {",
                "// Line 2248:                                 $max_option_size = strlen($val2);",
                "// vulnerable line: 2249: }",
                "// vulnerable line: 2250: }",
                "// vulnerable line: 2251: }",
                "// Line 2252:                     $output .= \"</optgroup>\";",
                "// Line 2253:                 } else {",
                "// Line 2254:                     if (!isset($param['used'][$key])) {",
                "// Line 2255:                         $output .= \"<option value='\" . Html::entities_deep($key) . \"'\";",
                "// Line 2256:                        // Do not use in_array : trouble with 0 and empty value",
                "// Line 2257:                         foreach ($param['values'] as $value) {",
                "// Line 2258:                             if (strcmp($key, $value) === 0) {",
                "// Line 2259:                                 $output .= \" selected\";",
                "// Line 2260:                                 break;",
                "// vulnerable line: 2261: }",
                "// vulnerable line: 2262: }",
                "// Line 2263:                         if (isset($param['option_tooltips'][$key])) {",
                "// Line 2264:                             $output .= ' title=\"' . $param['option_tooltips'][$key] . '\"';",
                "// vulnerable line: 2265: }",
                "// Line 2266:                         $output .= \">\" . Html::entities_deep($val) . \"</option>\";",
                "// Line 2267:                         if (!is_null($val) && ($max_option_size < strlen($val))) {",
                "// Line 2268:                             $max_option_size = strlen($val);",
                "// vulnerable line: 2269: }",
                "// vulnerable line: 2270: }",
                "// vulnerable line: 2271: }",
                "// vulnerable line: 2272: }",
                "// Line 2273: ",
                "// Line 2274:             if ($param['other'] !== false) {",
                "// Line 2275:                 $output .= \"<option value='$other_select_option'\";",
                "// Line 2276:                 if (is_string($param['other'])) {",
                "// Line 2277:                     $output .= \" selected\";",
                "// vulnerable line: 2278: }",
                "// Line 2279:                 $output .= \">\" . __('Other...') . \"</option>\";",
                "// vulnerable line: 2280: }",
                "// Line 2281: ",
                "// Line 2282:             $output .= \"</select>\";",
                "// Line 2283:             if ($param['other'] !== false) {",
                "// Line 2284:                 $output .= \"<input name='$other_select_option' id='$other_select_option' type='text'\";",
                "// Line 2285:                 if (is_string($param['other'])) {",
                "// Line 2286:                     $output .= \" value=\"\" . $param['other'] . \"\"\";",
                "// Line 2287:                 } else {",
                "// Line 2288:                     $output .= \" style=\"display: none\"\";",
                "// vulnerable line: 2289: }",
                "// Line 2290:                 $output .= \">\";",
                "// vulnerable line: 2291: }",
                "// vulnerable line: 2292: }",
                "// Line 2293: ",
                "// Line 2294:         if (!$param['noselect2']) {",
                "// Line 2295:            // Width set on select",
                "// Line 2296:             $adapt_params = [",
                "// Line 2297:                 'width'             => $param[\"width\"],",
                "// Line 2298:                 'templateResult'    => $param[\"templateResult\"],",
                "// Line 2299:                 'templateSelection' => $param[\"templateSelection\"],",
                "// Line 2300:             ];",
                "// Line 2301:             $output .= Html::jsAdaptDropdown($field_id, $adapt_params);",
                "// vulnerable line: 2302: }",
                "// Line 2303: ",
                "// Line 2304:         if ($param[\"multiple\"]) {",
                "// Line 2305:            // Hack for All / None because select2 does not provide it",
                "// Line 2306:             $select   = __('All');",
                "// Line 2307:             $deselect = __('None');",
                "// Line 2308:             $output  .= \"<div class='invisible' id='selectallbuttons_$field_id'>\";",
                "// Line 2309:             $output  .= \"<div class='d-flex justify-content-around p-1'>\";",
                "// Line 2310:             $output  .= \"<a class='btn btn-sm' \" .",
                "// Line 2311:                       \"onclick=\"selectAll('$field_id');$('#$field_id').select2('close');\">$select\" .",
                "// Line 2312:                      \"</a> \";",
                "// Line 2313:             $output  .= \"<a class='btn btn-sm' onclick=\"deselectAll('$field_id');\">$deselect\" .",
                "// Line 2314:                      \"</a>\";",
                "// Line 2315:             $output  .= \"</div></div>\";",
                "// Line 2316: ",
                "// Line 2317:             $js = \"",
                "// Line 2318:          var multichecksappend$field_id = false;",
                "// Line 2319:          $('#$field_id').on('select2:open', function(e) {",
                "// Line 2320:             if (!multichecksappend$field_id) {",
                "// Line 2321:                $('#select2-$field_id-results').parent().append($('#selectallbuttons_$field_id').html());",
                "// Line 2322:                multichecksappend$field_id = true;",
                "// vulnerable line: 2323: }",
                "// Line 2324:          });\";",
                "// Line 2325:             $output .= Html::scriptBlock($js);",
                "// vulnerable line: 2326: }",
                "// Line 2327:         $output .= Ajax::commonDropdownUpdateItem($param, false);",
                "// Line 2328: ",
                "// Line 2329:         if ($param['display']) {",
                "// Line 2330:             echo $output;",
                "// Line 2331:             return $param['rand'];",
                "// vulnerable line: 2332: }",
                "// Line 2333:         return $output;",
                "// vulnerable line: 2334: }",
                "// Line 2335: ",
                "// Line 2336: ",
                "// Line 2337:     /**",
                "// Line 2338:      * Dropdown for frequency (interval between 2 actions)",
                "// Line 2339:      *",
                "// Line 2340:      * @param string  $name   select name",
                "// Line 2341:      * @param integer $value  default value (default 0)",
                "// Line 2342:      *",
                "// Line 2343:      * @return void",
                "// Line 2344:      **/",
                "// Line 2345:     public static function showFrequency($name, $value = 0)",
                "// Line 2346:     {",
                "// Line 2347: ",
                "// Line 2348:         $tab = [];",
                "// Line 2349: ",
                "// Line 2350:         $tab[MINUTE_TIMESTAMP] = sprintf(_n('%d minute', '%d minutes', 1), 1);",
                "// Line 2351: ",
                "// Line 2352:        // Minutes",
                "// Line 2353:         for ($i = 5; $i < 60; $i += 5) {",
                "// Line 2354:             $tab[$i * MINUTE_TIMESTAMP] = sprintf(_n('%d minute', '%d minutes', $i), $i);",
                "// vulnerable line: 2355: }",
                "// Line 2356: ",
                "// Line 2357:        // Heures",
                "// Line 2358:         for ($i = 1; $i < 24; $i++) {",
                "// Line 2359:             $tab[$i * HOUR_TIMESTAMP] = sprintf(_n('%d hour', '%d hours', $i), $i);",
                "// vulnerable line: 2360: }",
                "// Line 2361: ",
                "// Line 2362:        // Jours",
                "// Line 2363:         $tab[DAY_TIMESTAMP] = __('Each day');",
                "// Line 2364:         for ($i = 2; $i < 7; $i++) {",
                "// Line 2365:             $tab[$i * DAY_TIMESTAMP] = sprintf(_n('%d day', '%d days', $i), $i);",
                "// vulnerable line: 2366: }",
                "// Line 2367: ",
                "// Line 2368:         $tab[WEEK_TIMESTAMP]  = __('Each week');",
                "// Line 2369:         $tab[MONTH_TIMESTAMP] = __('Each month');",
                "// Line 2370: ",
                "// Line 2371:         Dropdown::showFromArray($name, $tab, ['value' => $value]);",
                "// vulnerable line: 2372: }",
                "// Line 2373: ",
                "// Line 2374:     /**",
                "// Line 2375:      * Dropdown for global item management",
                "// Line 2376:      *",
                "// Line 2377:      * @param integer $ID           item ID",
                "// Line 2378:      * @param array   attrs   array which contains the extra paramters",
                "// Line 2379:      *",
                "// Line 2380:      * Parameters can be :",
                "// Line 2381:      * - target target for actions",
                "// Line 2382:      * - withtemplate template or basic computer",
                "// Line 2390:         $params['management_restrict'] = 0;",
                "// Line 2391:         $params['value']               = 0;",
                "// Line 2392:         $params['name']                = 'is_global';",
                "// Line 2393:         $params['target']              = '';",
                "// Line 2394:         $params['class']               = \"form-select\";",
                "// Line 2395:         $params['width']               = \"\";",
                "// Line 2396: ",
                "// Line 2397:         foreach ($attrs as $key => $value) {",
                "// Line 2398:             if ($value != '') {",
                "// Line 2399:                 $params[$key] = $value;",
                "// vulnerable line: 2400: }",
                "// vulnerable line: 2401: }",
                "// Line 2402: ",
                "// vulnerable line: 2403: if (",
                "// Line 2404:             $params['value']",
                "// Line 2405:             && empty($params['withtemplate'])",
                "// Line 2406:         ) {",
                "// Line 2407:             echo __('Global management');",
                "// Line 2408: ",
                "// Line 2409:             if ($params['management_restrict'] == 2) {",
                "// Line 2410:                 echo \"&nbsp;\";",
                "// Line 2411:                 Html::showSimpleForm(",
                "// Line 2412:                     $params['target'],",
                "// Line 2413:                     'unglobalize',",
                "// Line 2417:                     '',",
                "// Line 2418:                     [__('Do you really want to use unitary management for this item?'),",
                "// Line 2419:                         __('Duplicate the element as many times as there are connections')",
                "// Line 2420:                     ]",
                "// Line 2421:                 );",
                "// Line 2422:                 echo \"&nbsp;\";",
                "// Line 2423: ",
                "// Line 2424:                 echo \"<span class='fa fa-info pointer'\" .",
                "// Line 2425:                  \" title=\"\" . __s('Duplicate the element as many times as there are connections') .",
                "// Line 2426:                  \"\"><span class='sr-only'>\" . __s('Duplicate the element as many times as there are connections') . \"</span></span>\";",
                "// vulnerable line: 2427: }",
                "// Line 2428:         } else {",
                "// Line 2429:             if ($params['management_restrict'] == 2) {",
                "// Line 2430:                 $rand = mt_rand();",
                "// Line 2431:                 $values = [MANAGEMENT_UNITARY => __('Unit management'),",
                "// Line 2432:                     MANAGEMENT_GLOBAL  => __('Global management')",
                "// Line 2433:                 ];",
                "// Line 2434:                 Dropdown::showFromArray($params['name'], $values, [",
                "// Line 2435:                     'value' => $params['value'],",
                "// Line 2436:                     'class' => $params['class'],",
                "// Line 2437:                     'width' => $params['width'],",
                "// Line 2438:                 ]);",
                "// Line 2439:             } else {",
                "// Line 2440:                // Templates edition",
                "// Line 2441:                 if (!empty($params['withtemplate'])) {",
                "// Line 2442:                     echo \"<input type='hidden' name='is_global' value='\" .",
                "// Line 2443:                       $params['management_restrict'] . \"'>\";",
                "// Line 2444:                     echo (!$params['management_restrict'] ? __('Unit management') : __('Global management'));",
                "// Line 2445:                 } else {",
                "// Line 2446:                     echo (!$params['value'] ? __('Unit management') : __('Global management'));",
                "// vulnerable line: 2447: }",
                "// vulnerable line: 2448: }",
                "// vulnerable line: 2449: }",
                "// vulnerable line: 2450: }",
                "// Line 2451: ",
                "// Line 2452: ",
                "// Line 2453:     /**",
                "// Line 2454:      * Import a dropdown - check if already exists",
                "// Line 2455:      *",
                "// Line 2456:      * @param string $itemtype  name of the class",
                "// Line 2457:      * @param array  $input     of value to import",
                "// Line 2458:      *",
                "// Line 2459:      * @return boolean|integer ID of the new item or false on error",
                "// Line 2460:      **/",
                "// Line 2461:     public static function import($itemtype, $input)",
                "// Line 2462:     {",
                "// Line 2463: ",
                "// Line 2464:         if (!($item = getItemForItemtype($itemtype))) {",
                "// Line 2465:             return false;",
                "// vulnerable line: 2466: }",
                "// Line 2467:         return $item->import($input);",
                "// vulnerable line: 2468: }",
                "// Line 2469: ",
                "// Line 2470: ",
                "// Line 2471:     /**",
                "// Line 2472:      * Import a value in a dropdown table.",
                "// Line 2473:      *",
                "// Line 2474:      * This import a new dropdown if it doesn't exist - Play dictionary if needed",
                "// Line 2475:      *",
                "// Line 2476:      * @param string  $itemtype         name of the class",
                "// Line 2477:      * @param string  $value            Value of the new dropdown.",
                "// Line 2478:      * @param integer $entities_id       entity in case of specific dropdown",
                "// Line 2486:         $itemtype,",
                "// Line 2487:         $value,",
                "// Line 2488:         $entities_id = -1,",
                "// Line 2489:         $external_params = [],",
                "// Line 2490:         $comment = '',",
                "// Line 2491:         $add = true",
                "// Line 2492:     ) {",
                "// Line 2493: ",
                "// Line 2494:         if (!($item = getItemForItemtype($itemtype))) {",
                "// Line 2495:             return false;",
                "// vulnerable line: 2496: }",
                "// Line 2497:         return $item->importExternal($value, $entities_id, $external_params, $comment, $add);",
                "// vulnerable line: 2498: }",
                "// Line 2499: ",
                "// Line 2500:     /**",
                "// Line 2501:      * Get the label associated with a management type",
                "// Line 2502:      *",
                "// Line 2503:      * @param integer value the type of management (default 0)",
                "// Line 2504:      *",
                "// Line 2505:      * @return string the label corresponding to it, or \"\"",
                "// Line 2506:      **/",
                "// Line 2507:     public static function getGlobalSwitch($value = 0)",
                "// Line 2508:     {",
                "// Line 2509: ",
                "// Line 2510:         switch ($value) {",
                "// Line 2511:             case 0:",
                "// Line 2512:                 return __('Unit management');",
                "// Line 2513: ",
                "// Line 2514:             case 1:",
                "// Line 2515:                 return __('Global management');",
                "// Line 2516: ",
                "// Line 2517:             default:",
                "// Line 2518:                 return \"\";",
                "// vulnerable line: 2519: }",
                "// vulnerable line: 2520: }",
                "// Line 2521: ",
                "// Line 2522: ",
                "// Line 2523:     /**",
                "// Line 2524:      * show dropdown for output format",
                "// Line 2525:      *",
                "// Line 2526:      * @since 0.83",
                "// Line 2527:      **/",
                "// Line 2528:     public static function showOutputFormat($itemtype = null)",
                "// Line 2529:     {",
                "// Line 2530:         /** @var array $CFG_GLPI */",
                "// Line 2535:         $values[Search::SYLK_OUTPUT]              = __('Current page in SLK');",
                "// Line 2536:         $values[Search::CSV_OUTPUT]               = __('Current page in CSV');",
                "// Line 2537:         $values['-' . Search::PDF_OUTPUT_LANDSCAPE] = __('All pages in landscape PDF');",
                "// Line 2538:         $values['-' . Search::PDF_OUTPUT_PORTRAIT]  = __('All pages in portrait PDF');",
                "// Line 2539:         $values['-' . Search::SYLK_OUTPUT]          = __('All pages in SLK');",
                "// Line 2540:         $values['-' . Search::CSV_OUTPUT]           = __('All pages in CSV');",
                "// Line 2541: ",
                "// Line 2542:         if ($itemtype != \"Stat\") {",
                "// Line 2543:            // Do not show this option for stat page",
                "// Line 2544:             $values['-' . Search::NAMES_OUTPUT] = __('Copy names to clipboard');",
                "// vulnerable line: 2545: }",
                "// Line 2546: ",
                "// Line 2547:         $rand = mt_rand();",
                "// Line 2548:         Dropdown::showFromArray('display_type', $values, ['rand' => $rand]);",
                "// Line 2549:         echo \"<button type='submit' name='export' class='btn' \" .",
                "// Line 2550:              \" title=\"\" . _sx('button', 'Export') . \"\">\" .",
                "// Line 2551:              \"<i class='far fa-save'></i><span class='sr-only'>\" . _sx('button', 'Export') . \"<span>\";",
                "// vulnerable line: 2552: }",
                "// Line 2553: ",
                "// Line 2554: ",
                "// Line 2555:     /**",
                "// Line 2556:      * show dropdown to select list limit",
                "// Line 2557:      *",
                "// Line 2558:      * @since 0.83",
                "// Line 2559:      *",
                "// Line 2560:      * @param string $onchange  Optional, for ajax (default '')",
                "// Line 2561:      **/",
                "// Line 2562:     public static function showListLimit($onchange = '', $display = true)",
                "// Line 2563:     {",
                "// Line 2564:         /** @var array $CFG_GLPI */",
                "// Line 2565:         global $CFG_GLPI;",
                "// Line 2566: ",
                "// Line 2567:         if (isset($_SESSION['glpilist_limit'])) {",
                "// Line 2568:             $list_limit = $_SESSION['glpilist_limit'];",
                "// Line 2569:         } else {",
                "// Line 2570:             $list_limit = $CFG_GLPI['list_limit'];",
                "// vulnerable line: 2571: }",
                "// Line 2572: ",
                "// Line 2573:         $values = [];",
                "// Line 2574: ",
                "// Line 2575:         for ($i = 5; $i < 20; $i += 5) {",
                "// Line 2576:             $values[$i] = $i;",
                "// vulnerable line: 2577: }",
                "// Line 2578:         for ($i = 20; $i < 50; $i += 10) {",
                "// Line 2579:             $values[$i] = $i;",
                "// vulnerable line: 2580: }",
                "// Line 2581:         for ($i = 50; $i < 250; $i += 50) {",
                "// Line 2582:             $values[$i] = $i;",
                "// vulnerable line: 2583: }",
                "// Line 2584:         for ($i = 250; $i < 1000; $i += 250) {",
                "// Line 2585:             $values[$i] = $i;",
                "// vulnerable line: 2586: }",
                "// Line 2587:         for ($i = 1000; $i < 5000; $i += 1000) {",
                "// Line 2588:             $values[$i] = $i;",
                "// vulnerable line: 2589: }",
                "// Line 2590:         for ($i = 5000; $i <= 10000; $i += 5000) {",
                "// Line 2591:             $values[$i] = $i;",
                "// vulnerable line: 2592: }",
                "// Line 2593:         $values[9999999] = 9999999;",
                "// Line 2594:        // Propose max input vars -10",
                "// Line 2595:         $max             = Toolbox::get_max_input_vars();",
                "// Line 2596:         if ($max > 10) {",
                "// Line 2597:             $values[$max - 10] = $max - 10;",
                "// vulnerable line: 2598: }",
                "// Line 2599:         ksort($values);",
                "// Line 2600:         return self::showFromArray(",
                "// Line 2601:             'glpilist_limit',",
                "// Line 2602:             $values,",
                "// Line 2603:             ['on_change' => $onchange,",
                "// Line 2604:                 'value'     => $list_limit,",
                "// Line 2605:                 'display'   => $display",
                "// Line 2606:             ]",
                "// Line 2607:         );",
                "// vulnerable line: 2608: }",
                "// Line 2609: ",
                "// Line 2610:     /**",
                "// Line 2611:      * Get dropdown value",
                "// Line 2612:      *",
                "// Line 2613:      * @param array   $post Posted values",
                "// Line 2614:      * @param boolean $json Encode to JSON, default to true",
                "// Line 2615:      *",
                "// Line 2616:      * @return string|array",
                "// Line 2617:      */",
                "// Line 2618:     public static function getDropdownValue($post, $json = true)",
                "// Line 2619:     {",
                "// Line 2620:         /**",
                "// Line 2621:          * @var array $CFG_GLPI",
                "// Line 2622:          * @var \\DBmysql $DB",
                "// Line 2623:          */",
                "// Line 2624:         global $CFG_GLPI, $DB;",
                "// Line 2625: ",
                "// Line 2626:        // check if asked itemtype is the one originaly requested by the form",
                "// Line 2627:         if (!Session::validateIDOR($post)) {",
                "// Line 2628:             return;",
                "// vulnerable line: 2629: }",
                "// Line 2630: ",
                "// vulnerable line: 2631: if (",
                "// Line 2632:             isset($post[\"entity_restrict\"])",
                "// Line 2633:             && !is_array($post[\"entity_restrict\"])",
                "// Line 2634:             && (substr($post[\"entity_restrict\"], 0, 1) === '[')",
                "// Line 2635:             && (substr($post[\"entity_restrict\"], -1) === ']')",
                "// Line 2636:         ) {",
                "// Line 2637:             $decoded = Toolbox::jsonDecode($post['entity_restrict']);",
                "// Line 2638:             $entities = [];",
                "// Line 2639:             if (is_array($decoded)) {",
                "// Line 2640:                 foreach ($decoded as $value) {",
                "// Line 2641:                     $entities[] = (int)$value;",
                "// vulnerable line: 2642: }",
                "// vulnerable line: 2643: }",
                "// vulnerable line: 2644: $post[\"entity_restrict\"] = $entities;",
                "// vulnerable line: 2645: }",
                "// vulnerable line: 2646: if (isset($post['entity_restrict']) && 'default' === $post['entity_restrict']) {",
                "// vulnerable line: 2647: $post['entity_restrict'] = $_SESSION['glpiactiveentities'];",
                "// vulnerable line: 2648: }",
                "// Line 2649: ",
                "// Line 2650:        // Security",
                "// Line 2651:         if (!($item = getItemForItemtype($post['itemtype']))) {",
                "// Line 2652:             return;",
                "// vulnerable line: 2653: }",
                "// Line 2654: ",
                "// Line 2655:         $table = $item->getTable();",
                "// Line 2656:         $datas = [];",
                "// Line 2657: ",
                "// Line 2658:         $displaywith = false;",
                "// Line 2659:         if (isset($post['displaywith'])) {",
                "// Line 2660:             if (is_array($post['displaywith']) && count($post['displaywith'])) {",
                "// Line 2661:                 $post['displaywith'] = self::filterDisplayWith($item, $post['displaywith']);",
                "// Line 2662: ",
                "// Line 2663:                 if (count($post['displaywith'])) {",
                "// Line 2664:                     $displaywith = true;",
                "// vulnerable line: 2665: }",
                "// vulnerable line: 2666: }",
                "// vulnerable line: 2667: }",
                "// Line 2668: ",
                "// Line 2669:         if (!isset($post['permit_select_parent'])) {",
                "// Line 2670:             $post['permit_select_parent'] = false;",
                "// vulnerable line: 2671: }",
                "// Line 2672: ",
                "// Line 2673:         if (isset($post['condition']) && !empty($post['condition']) && !is_array($post['condition'])) {",
                "// Line 2674:            // Retreive conditions from SESSION using its key",
                "// Line 2675:             $key = $post['condition'];",
                "// Line 2676:             if (isset($_SESSION['glpicondition']) && isset($_SESSION['glpicondition'][$key])) {",
                "// Line 2677:                 $post['condition'] = $_SESSION['glpicondition'][$key];",
                "// Line 2678:             } else {",
                "// Line 2679:                 $post['condition'] = [];",
                "// vulnerable line: 2680: }",
                "// vulnerable line: 2681: }",
                "// Line 2682: ",
                "// Line 2683:         if (!isset($post['emptylabel']) || ($post['emptylabel'] == '')) {",
                "// Line 2684:             $post['emptylabel'] = Dropdown::EMPTY_VALUE;",
                "// vulnerable line: 2685: }",
                "// Line 2686: ",
                "// Line 2687:         $where = [];",
                "// Line 2688: ",
                "// Line 2689:         if ($item->maybeDeleted()) {",
                "// Line 2690:             $where[\"$table.is_deleted\"] = 0;",
                "// vulnerable line: 2691: }",
                "// Line 2692:         if ($item->maybeTemplate()) {",
                "// Line 2693:             $where[\"$table.is_template\"] = 0;",
                "// vulnerable line: 2694: }",
                "// Line 2695: ",
                "// Line 2696:         if (!isset($post['page'])) {",
                "// Line 2697:             $post['page']       = 1;",
                "// Line 2698:             $post['page_limit'] = $CFG_GLPI['dropdown_max'];",
                "// vulnerable line: 2699: }",
                "// Line 2700: ",
                "// Line 2701:         $start = intval(($post['page'] - 1) * $post['page_limit']);",
                "// Line 2702:         $limit = intval($post['page_limit']);",
                "// Line 2703: ",
                "// Line 2704:         if (isset($post['used'])) {",
                "// Line 2705:             $used = $post['used'];",
                "// Line 2706: ",
                "// Line 2707:             if (count($used)) {",
                "// Line 2708:                 $where['NOT'] = [\"$table.id\" => $used];",
                "// vulnerable line: 2709: }",
                "// vulnerable line: 2710: }",
                "// Line 2711: ",
                "// Line 2712:         if (isset($post['toadd'])) {",
                "// Line 2713:             $toadd = $post['toadd'];",
                "// Line 2714:         } else {",
                "// Line 2715:             $toadd = [];",
                "// vulnerable line: 2716: }",
                "// Line 2717: ",
                "// Line 2718:         $ljoin = [];",
                "// Line 2719: ",
                "// Line 2720:         if (isset($post['condition']) && !empty($post['condition'])) {",
                "// Line 2721:             if (isset($post['condition']['LEFT JOIN'])) {",
                "// Line 2722:                 $ljoin = $post['condition']['LEFT JOIN'];",
                "// Line 2723:                 unset($post['condition']['LEFT JOIN']);",
                "// vulnerable line: 2724: }",
                "// Line 2725:             if (isset($post['condition']['WHERE'])) {",
                "// Line 2726:                 $where = array_merge($where, $post['condition']['WHERE']);",
                "// Line 2727:             } else {",
                "// Line 2728:                 $where = array_merge($where, $post['condition']);",
                "// vulnerable line: 2729: }",
                "// vulnerable line: 2730: }",
                "// Line 2731: ",
                "// Line 2732:         $one_item = -1;",
                "// Line 2733:         if (isset($post['_one_id'])) {",
                "// Line 2734:             $one_item = $post['_one_id'];",
                "// vulnerable line: 2735: }",
                "// Line 2736: ",
                "// Line 2737:        // Count real items returned",
                "// Line 2738:         $count = 0;",
                "// Line 2739:         if ($item instanceof CommonTreeDropdown) {",
                "// Line 2740:             if (isset($post['parent_id']) && $post['parent_id'] != '') {",
                "// Line 2741:                 $sons = getSonsOf($table, $post['parent_id']);",
                "// Line 2742:                 $where[] = [",
                "// Line 2743:                     [\"$table.id\" => $sons],",
                "// Line 2744:                     [\"NOT\" => [\"$table.id\" => $post['parent_id']]],",
                "// Line 2745:                 ];",
                "// vulnerable line: 2746: }",
                "// Line 2747:             if ($one_item >= 0) {",
                "// Line 2748:                 $where[\"$table.id\"] = $one_item;",
                "// Line 2749:             } else {",
                "// Line 2750:                 if (!empty($post['searchText'])) {",
                "// Line 2751:                     $raw_search     = Search::makeTextSearchValue($post['searchText']);",
                "// Line 2752:                     $encoded_search = Sanitizer::encodeHtmlSpecialChars($raw_search);",
                "// Line 2753: ",
                "// Line 2754:                     $swhere = [",
                "// Line 2755:                         [\"$table.completename\" => ['LIKE', $raw_search]],",
                "// Line 2756:                         [\"$table.completename\" => ['LIKE', $encoded_search]],",
                "// Line 2757:                     ];",
                "// Line 2758:                     if (Session::haveTranslations($post['itemtype'], 'completename')) {",
                "// Line 2759:                         $swhere[] = [\"namet.value\" => ['LIKE', $raw_search]];",
                "// Line 2760:                         $swhere[] = [\"namet.value\" => ['LIKE', $encoded_search]];",
                "// vulnerable line: 2761: }",
                "// Line 2762: ",
                "// vulnerable line: 2763: if (",
                "// Line 2764:                         $_SESSION['glpiis_ids_visible']",
                "// Line 2765:                         && is_numeric($post['searchText']) && (int)$post['searchText'] == $post['searchText']",
                "// Line 2766:                     ) {",
                "// Line 2767:                         $swhere[$table . '.' . $item->getIndexName()] = ['LIKE', \"%{$post['searchText']}%\"];",
                "// vulnerable line: 2768: }",
                "// Line 2769: ",
                "// Line 2770:                    // search also in displaywith columns",
                "// Line 2771:                     if ($displaywith && count($post['displaywith'])) {",
                "// Line 2772:                         foreach ($post['displaywith'] as $with) {",
                "// Line 2773:                             $swhere[] = [\"$table.$with\" => ['LIKE', $raw_search]];",
                "// Line 2774:                             $swhere[] = [\"$table.$with\" => ['LIKE', $encoded_search]];",
                "// vulnerable line: 2775: }",
                "// vulnerable line: 2776: }",
                "// Line 2777: ",
                "// Line 2778:                     $where[] = ['OR' => $swhere];",
                "// vulnerable line: 2779: }",
                "// vulnerable line: 2780: }",
                "// Line 2781: ",
                "// Line 2782:             $multi = false;",
                "// Line 2783: ",
                "// Line 2784:            // Manage multiple Entities dropdowns",
                "// Line 2785:             $order = [\"$table.completename\"];",
                "// Line 2786: ",
                "// Line 2787:            // No multi if get one item",
                "// Line 2788:             if ($item->isEntityAssign()) {",
                "// Line 2789:                 $recur = $item->maybeRecursive();",
                "// Line 2790: ",
                "// Line 2791:                // Entities are not really recursive : do not display parents",
                "// Line 2792:                 if ($post['itemtype'] == 'Entity') {",
                "// Line 2793:                     $recur = false;",
                "// vulnerable line: 2794: }",
                "// Line 2795: ",
                "// Line 2796:                 if (isset($post[\"entity_restrict\"]) && !($post[\"entity_restrict\"] < 0)) {",
                "// Line 2797:                     $where = $where + getEntitiesRestrictCriteria(",
                "// Line 2798:                         $table,",
                "// Line 2799:                         '',",
                "// Line 2800:                         $post[\"entity_restrict\"],",
                "// Line 2801:                         $recur",
                "// Line 2802:                     );",
                "// Line 2803: ",
                "// Line 2804:                     if (is_array($post[\"entity_restrict\"]) && (count($post[\"entity_restrict\"]) > 1)) {",
                "// Line 2805:                           $multi = true;",
                "// vulnerable line: 2806: }",
                "// Line 2807:                 } else {",
                "// Line 2808:                    // If private item do not use entity",
                "// Line 2809:                     if (!$item->maybePrivate()) {",
                "// Line 2810:                         $where = $where + getEntitiesRestrictCriteria($table, '', '', $recur);",
                "// Line 2811: ",
                "// Line 2812:                         if (count($_SESSION['glpiactiveentities']) > 1) {",
                "// Line 2813:                              $multi = true;",
                "// vulnerable line: 2814: }",
                "// Line 2815:                     } else {",
                "// Line 2816:                         $multi = false;",
                "// vulnerable line: 2817: }",
                "// vulnerable line: 2818: }",
                "// Line 2819: ",
                "// Line 2820:                // Force recursive items to multi entity view",
                "// Line 2821:                 if ($recur) {",
                "// Line 2822:                     $multi = true;",
                "// vulnerable line: 2823: }",
                "// Line 2824: ",
                "// Line 2825:                // no multi view for entitites",
                "// Line 2826:                 if ($post['itemtype'] == \"Entity\") {",
                "// Line 2827:                     $multi = false;",
                "// vulnerable line: 2828: }",
                "// Line 2829: ",
                "// Line 2830:                 if ($multi) {",
                "// Line 2831:                     array_unshift($order, \"$table.entities_id\");",
                "// vulnerable line: 2832: }",
                "// vulnerable line: 2833: }",
                "// Line 2834: ",
                "// Line 2835:             $addselect = [];",
                "// Line 2836:             if (Session::haveTranslations($post['itemtype'], 'completename')) {",
                "// Line 2837:                 $addselect[] = \"namet.value AS transcompletename\";",
                "// Line 2838:                 $ljoin['glpi_dropdowntranslations AS namet'] = [",
                "// Line 2839:                     'ON' => [",
                "// Line 2840:                         'namet'  => 'items_id',",
                "// Line 2841:                         $table   => 'id', [",
                "// Line 2842:                             'AND' => [",
                "// Line 2843:                                 'namet.itemtype'  => $post['itemtype'],",
                "// Line 2844:                                 'namet.language'  => $_SESSION['glpilanguage'],",
                "// Line 2845:                                 'namet.field'     => 'completename'",
                "// Line 2846:                             ]",
                "// Line 2847:                         ]",
                "// Line 2848:                     ]",
                "// Line 2849:                 ];",
                "// vulnerable line: 2850: }",
                "// Line 2851:             if (Session::haveTranslations($post['itemtype'], 'name')) {",
                "// Line 2852:                 $addselect[] = \"namet2.value AS transname\";",
                "// Line 2853:                 $ljoin['glpi_dropdowntranslations AS namet2'] = [",
                "// Line 2854:                     'ON' => [",
                "// Line 2855:                         'namet2' => 'items_id',",
                "// Line 2856:                         $table   => 'id', [",
                "// Line 2857:                             'AND' => [",
                "// Line 2858:                                 'namet2.itemtype' => $post['itemtype'],",
                "// Line 2859:                                 'namet2.language' => $_SESSION['glpilanguage'],",
                "// Line 2860:                                 'namet2.field'    => 'name'",
                "// Line 2861:                             ]",
                "// Line 2862:                         ]",
                "// Line 2863:                     ]",
                "// Line 2864:                 ];",
                "// vulnerable line: 2865: }",
                "// Line 2866:             if (Session::haveTranslations($post['itemtype'], 'comment')) {",
                "// Line 2867:                 $addselect[] = \"commentt.value AS transcomment\";",
                "// Line 2868:                 $ljoin['glpi_dropdowntranslations AS commentt'] = [",
                "// Line 2869:                     'ON' => [",
                "// Line 2870:                         'commentt'  => 'items_id',",
                "// Line 2871:                         $table      => 'id', [",
                "// Line 2872:                             'AND' => [",
                "// Line 2873:                                 'commentt.itemtype'  => $post['itemtype'],",
                "// Line 2874:                                 'commentt.language'  => $_SESSION['glpilanguage'],",
                "// Line 2875:                                 'commentt.field'     => 'comment'",
                "// Line 2876:                             ]",
                "// Line 2877:                         ]",
                "// Line 2878:                     ]",
                "// Line 2879:                 ];",
                "// vulnerable line: 2880: }",
                "// Line 2881: ",
                "// Line 2882:             if ($start > 0 && $multi) {",
                "// Line 2883:                //we want to load last entry of previous page",
                "// Line 2884:                //(and therefore one more result) to check if",
                "// Line 2885:                //entity name must be displayed again",
                "// Line 2886:                 --$start;",
                "// Line 2887:                 ++$limit;",
                "// vulnerable line: 2888: }",
                "// Line 2889: ",
                "// Line 2890:             $criteria = [",
                "// Line 2891:                 'SELECT'   => array_merge([\"$table.*\"], $addselect),",
                "// Line 2892:                 'DISTINCT' => true,",
                "// Line 2893:                 'FROM'     => $table,",
                "// Line 2894:                 'WHERE'    => $where,",
                "// Line 2895:                 'ORDER'    => $order,",
                "// Line 2896:                 'START'    => $start,",
                "// Line 2897:                 'LIMIT'    => $limit",
                "// Line 2898:             ];",
                "// Line 2899:             if (count($ljoin)) {",
                "// Line 2900:                 $criteria['LEFT JOIN'] = $ljoin;",
                "// vulnerable line: 2901: }",
                "// Line 2902:             $iterator = $DB->request($criteria);",
                "// Line 2903: ",
                "// Line 2904:            // Empty search text : display first",
                "// Line 2905:             if ($post['page'] == 1 && empty($post['searchText'])) {",
                "// Line 2906:                 if ($post['display_emptychoice']) {",
                "// Line 2907:                     $datas[] = [",
                "// Line 2908:                         'id' => 0,",
                "// Line 2909:                         'text' => $post['emptylabel']",
                "// Line 2910:                     ];",
                "// vulnerable line: 2911: }",
                "// vulnerable line: 2912: }",
                "// Line 2913: ",
                "// Line 2914:             if ($post['page'] == 1) {",
                "// Line 2915:                 if (count($toadd)) {",
                "// Line 2916:                     foreach ($toadd as $key => $val) {",
                "// Line 2917:                         $datas[] = [",
                "// Line 2918:                             'id' => $key,",
                "// Line 2919:                             'text' => stripslashes($val)",
                "// Line 2920:                         ];",
                "// vulnerable line: 2921: }",
                "// vulnerable line: 2922: }",
                "// vulnerable line: 2923: }",
                "// Line 2924:             $last_level_displayed = [];",
                "// Line 2925:             $datastoadd           = [];",
                "// Line 2926: ",
                "// Line 2927:            // Ignore first item for all pages except first page",
                "// Line 2928:             $firstitem = (($post['page'] > 1));",
                "// Line 2929:             $firstitem_entity = -1;",
                "// Line 2930:             $prev             = -1;",
                "// Line 2931:             if (count($iterator)) {",
                "// Line 2932:                 foreach ($iterator as $data) {",
                "// Line 2933:                     $ID    = $data['id'];",
                "// Line 2934:                     $level = $data['level'];",
                "// Line 2935: ",
                "// Line 2936:                     if (isset($data['transname']) && !empty($data['transname'])) {",
                "// Line 2937:                         $outputval = $data['transname'];",
                "// Line 2938:                     } else {",
                "// Line 2939:                         $outputval = $data['name'];",
                "// vulnerable line: 2940: }",
                "// Line 2941: ",
                "// vulnerable line: 2942: if (",
                "// Line 2943:                         $multi",
                "// Line 2944:                         && ($data[\"entities_id\"] != $prev)",
                "// Line 2945:                     ) {",
                "// Line 2946:                        // Do not do it for first item for next page load",
                "// Line 2947:                         if (!$firstitem) {",
                "// Line 2948:                             if ($prev >= 0) {",
                "// Line 2949:                                 if (count($datastoadd)) {",
                "// Line 2950:                                     $datas[] = [",
                "// Line 2951:                                         'text'     => Dropdown::getDropdownName(\"glpi_entities\", $prev),",
                "// Line 2952:                                         'children' => $datastoadd,",
                "// Line 2953:                                         'itemtype' => \"Entity\",",
                "// Line 2954:                                     ];",
                "// vulnerable line: 2955: }",
                "// vulnerable line: 2956: }",
                "// vulnerable line: 2957: }",
                "// Line 2958:                         $prev = $data[\"entities_id\"];",
                "// Line 2959:                         if ($firstitem) {",
                "// Line 2960:                             $firstitem_entity = $prev;",
                "// vulnerable line: 2961: }",
                "// Line 2962:                        // Reset last level displayed :",
                "// Line 2963:                         $datastoadd = [];",
                "// vulnerable line: 2964: }",
                "// Line 2965: ",
                "// Line 2966:                     if ($_SESSION['glpiuse_flat_dropdowntree']) {",
                "// Line 2967:                         if (isset($data['transcompletename']) && !empty($data['transcompletename'])) {",
                "// Line 2968:                             $outputval = $data['transcompletename'];",
                "// Line 2969:                         } else {",
                "// Line 2970:                             $outputval = $data['completename'];",
                "// vulnerable line: 2971: }",
                "// Line 2972: ",
                "// Line 2973:                         $outputval = CommonTreeDropdown::sanitizeSeparatorInCompletename($outputval);",
                "// Line 2974: ",
                "// Line 2975:                         $level = 0;",
                "// Line 2976:                     } else { // Need to check if parent is the good one",
                "// Line 2977:                         // Do not do if only get one item",
                "// Line 2978:                         if (($level > 1)) {",
                "// Line 2979:                            // Last parent is not the good one need to display arbo",
                "// vulnerable line: 2980: if (",
                "// Line 2981:                                 !isset($last_level_displayed[$level - 1])",
                "// Line 2982:                                 || ($last_level_displayed[$level - 1] != $data[$item->getForeignKeyField()])",
                "// Line 2983:                             ) {",
                "// Line 2984:                                 $work_level    = $level - 1;",
                "// Line 2985:                                 $work_parentID = $data[$item->getForeignKeyField()];",
                "// Line 2986:                                 $parent_datas  = [];",
                "// Line 2987:                                 do {",
                "// Line 2988:                                // Get parent",
                "// Line 2989:                                     if ($item->getFromDB($work_parentID)) {",
                "// Line 2990:                                         // Do not do for first item for next page load",
                "// Line 2998:                                             if (isset($item->fields[\"comment\"])) {",
                "// Line 2999:                                                  $addcomment",
                "// Line 3000:                                                  = DropdownTranslation::getTranslatedValue(",
                "// Line 3001:                                                      $ID,",
                "// Line 3002:                                                      $post['itemtype'],",
                "// Line 3003:                                                      'comment',",
                "// Line 3004:                                                      $_SESSION['glpilanguage'],",
                "// Line 3005:                                                      $item->fields['comment']",
                "// Line 3006:                                                  );",
                "// Line 3007:                                                  $title = sprintf(__('%1$s - %2$s'), $title, $addcomment);",
                "// vulnerable line: 3008: }",
                "// Line 3009:                                             $output2 = DropdownTranslation::getTranslatedValue(",
                "// Line 3010:                                                 $item->fields['id'],",
                "// Line 3011:                                                 $post['itemtype'],",
                "// Line 3012:                                                 'name',",
                "// Line 3013:                                                 $_SESSION['glpilanguage'],",
                "// Line 3014:                                                 $item->fields['name']",
                "// Line 3015:                                             );",
                "// Line 3016: ",
                "// Line 3017:                                             $temp = ['id'       => $work_parentID,",
                "// Line 3018:                                                 'text'     => $output2,",
                "// Line 3019:                                                 'level'    => (int)$work_level,",
                "// Line 3020:                                                 'disabled' => true",
                "// Line 3021:                                             ];",
                "// Line 3022:                                             if ($post['permit_select_parent']) {",
                "// Line 3023:                                                 $temp['title'] = $title;",
                "// Line 3024:                                                 $temp['selection_text'] = $selection_text;",
                "// Line 3025:                                                 unset($temp['disabled']);",
                "// vulnerable line: 3026: }",
                "// Line 3027:                                             array_unshift($parent_datas, $temp);",
                "// vulnerable line: 3028: }",
                "// Line 3029:                                         $last_level_displayed[$work_level] = $item->fields['id'];",
                "// Line 3030:                                         $work_level--;",
                "// Line 3031:                                         $work_parentID = $item->fields[$item->getForeignKeyField()];",
                "// Line 3032:                                     } else { // Error getting item : stop",
                "// Line 3033:                                         $work_level = -1;",
                "// vulnerable line: 3034: }",
                "// Line 3035:                                 } while (",
                "// Line 3036:                                     ($work_level >= 1)",
                "// Line 3037:                                       && (!isset($last_level_displayed[$work_level])",
                "// Line 3038:                                       || ($last_level_displayed[$work_level] != $work_parentID))",
                "// Line 3039:                                 );",
                "// Line 3040:                               // Add parents",
                "// Line 3041:                                 foreach ($parent_datas as $val) {",
                "// Line 3042:                                     $datastoadd[] = $val;",
                "// vulnerable line: 3043: }",
                "// vulnerable line: 3044: }",
                "// vulnerable line: 3045: }",
                "// Line 3046:                         $last_level_displayed[$level] = $data['id'];",
                "// vulnerable line: 3047: }",
                "// Line 3048: ",
                "// Line 3049:                    // Do not do for first item for next page load",
                "// Line 3050:                     if (!$firstitem) {",
                "// vulnerable line: 3051: if (",
                "// Line 3052:                             $_SESSION[\"glpiis_ids_visible\"]",
                "// Line 3053:                             || (Toolbox::strlen($outputval) == 0)",
                "// Line 3054:                         ) {",
                "// Line 3055:                             $outputval = sprintf(__('%1$s (%2$s)'), $outputval, $ID);",
                "// vulnerable line: 3056: }",
                "// Line 3057: ",
                "// Line 3058:                         if (isset($data['transcompletename']) && !empty($data['transcompletename'])) {",
                "// Line 3059:                             $title = $data['transcompletename'];",
                "// Line 3060:                         } else {",
                "// Line 3061:                             $title = $data['completename'];",
                "// vulnerable line: 3062: }",
                "// Line 3063: ",
                "// Line 3064:                         $title = CommonTreeDropdown::sanitizeSeparatorInCompletename($title);",
                "// Line 3065: ",
                "// Line 3066:                         $selection_text = $title;",
                "// Line 3067: ",
                "// Line 3068:                         if (isset($data[\"comment\"])) {",
                "// Line 3069:                             if (isset($data['transcomment']) && !empty($data['transcomment'])) {",
                "// Line 3070:                                 $addcomment = $data['transcomment'];",
                "// Line 3071:                             } else {",
                "// Line 3072:                                 $addcomment = $data['comment'];",
                "// vulnerable line: 3073: }",
                "// Line 3074:                             $title = sprintf(__('%1$s - %2$s'), $title, $addcomment);",
                "// vulnerable line: 3075: }",
                "// Line 3076:                         $datastoadd[] = [",
                "// Line 3077:                             'id' => $ID,",
                "// Line 3078:                             'text' => $outputval,",
                "// Line 3079:                             'level' => (int)$level,",
                "// Line 3080:                             'title' => $title,",
                "// Line 3081:                             'selection_text' => $selection_text",
                "// Line 3082:                         ];",
                "// Line 3083:                         $count++;",
                "// vulnerable line: 3084: }",
                "// Line 3085:                     $firstitem = false;",
                "// vulnerable line: 3086: }",
                "// vulnerable line: 3087: }",
                "// Line 3088: ",
                "// Line 3089:             if ($multi) {",
                "// Line 3090:                 if (count($datastoadd)) {",
                "// Line 3091:                    // On paging mode do not add entity information each time",
                "// Line 3092:                     if ($prev == $firstitem_entity) {",
                "// Line 3093:                         $datas = array_merge($datas, $datastoadd);",
                "// Line 3094:                     } else {",
                "// Line 3095:                         $datas[] = [",
                "// Line 3096:                             'text' => Dropdown::getDropdownName(\"glpi_entities\", $prev),",
                "// Line 3097:                             'children' => $datastoadd,",
                "// Line 3098:                             'itemtype' => \"Entity\",",
                "// Line 3099:                         ];",
                "// vulnerable line: 3100: }",
                "// vulnerable line: 3101: }",
                "// Line 3102:             } else {",
                "// Line 3103:                 if (count($datastoadd)) {",
                "// Line 3104:                     $datas = array_merge($datas, $datastoadd);",
                "// vulnerable line: 3105: }",
                "// vulnerable line: 3106: }",
                "// Line 3107:         } else { // Not a dropdowntree",
                "// Line 3108:             $multi = false;",
                "// Line 3109:            // No multi if get one item",
                "// Line 3110:             if ($item->isEntityAssign()) {",
                "// Line 3111:                 $multi = $item->maybeRecursive();",
                "// Line 3112: ",
                "// Line 3113:                 if (isset($post[\"entity_restrict\"]) && !($post[\"entity_restrict\"] < 0)) {",
                "// Line 3114:                     $where = $where + getEntitiesRestrictCriteria(",
                "// Line 3115:                         $table,",
                "// Line 3116:                         \"entities_id\",",
                "// Line 3117:                         $post[\"entity_restrict\"],",
                "// Line 3118:                         $multi",
                "// Line 3119:                     );",
                "// Line 3120: ",
                "// Line 3121:                     if (is_array($post[\"entity_restrict\"]) && (count($post[\"entity_restrict\"]) > 1)) {",
                "// Line 3122:                         $multi = true;",
                "// vulnerable line: 3123: }",
                "// Line 3124:                 } else {",
                "// Line 3125:                    // Do not use entity if may be private",
                "// Line 3126:                     if (!$item->maybePrivate()) {",
                "// Line 3127:                         $where = $where + getEntitiesRestrictCriteria($table, '', '', $multi);",
                "// Line 3128: ",
                "// Line 3129:                         if (count($_SESSION['glpiactiveentities']) > 1) {",
                "// Line 3130:                             $multi = true;",
                "// vulnerable line: 3131: }",
                "// Line 3132:                     } else {",
                "// Line 3133:                         $multi = false;",
                "// vulnerable line: 3134: }",
                "// vulnerable line: 3135: }",
                "// vulnerable line: 3136: }",
                "// Line 3137: ",
                "// Line 3138:             $field = \"name\";",
                "// Line 3139:             if ($item instanceof CommonDevice) {",
                "// Line 3140:                 $field = \"designation\";",
                "// Line 3141:             } else if ($item instanceof Item_Devices) {",
                "// Line 3142:                 $field = \"itemtype\";",
                "// vulnerable line: 3143: }",
                "// Line 3144: ",
                "// Line 3145:             if (!empty($post['searchText'])) {",
                "// Line 3146:                 $raw_search     = Search::makeTextSearchValue($post['searchText']);",
                "// Line 3147:                 $encoded_search = Sanitizer::encodeHtmlSpecialChars($raw_search);",
                "// Line 3148: ",
                "// Line 3149:                 $orwhere = [",
                "// Line 3150:                     [\"$table.$field\" => ['LIKE', $raw_search]],",
                "// Line 3151:                     [\"$table.$field\" => ['LIKE', $encoded_search]],",
                "// Line 3152:                 ];",
                "// Line 3153: ",
                "// vulnerable line: 3154: if (",
                "// Line 3155:                     $_SESSION['glpiis_ids_visible']",
                "// Line 3156:                     && is_numeric($post['searchText']) && (int)$post['searchText'] == $post['searchText']",
                "// Line 3157:                 ) {",
                "// Line 3158:                     $orwhere[$table . '.' . $item->getIndexName()] = ['LIKE', \"%{$post['searchText']}%\"];",
                "// vulnerable line: 3159: }",
                "// Line 3160: ",
                "// Line 3161:                 if ($item instanceof CommonDCModelDropdown) {",
                "// Line 3162:                     $orwhere[] = [$table . '.product_number' => ['LIKE', $raw_search]];",
                "// Line 3163:                     $orwhere[] = [$table . '.product_number' => ['LIKE', $encoded_search]];",
                "// vulnerable line: 3164: }",
                "// Line 3165: ",
                "// Line 3166:                 if (Session::haveTranslations($post['itemtype'], $field)) {",
                "// Line 3167:                     $orwhere[] = ['namet.value' => ['LIKE', $raw_search]];",
                "// Line 3168:                     $orwhere[] = ['namet.value' => ['LIKE', $encoded_search]];",
                "// vulnerable line: 3169: }",
                "// Line 3170:                 if ($post['itemtype'] == \"SoftwareLicense\") {",
                "// Line 3171:                     $orwhere[] = ['glpi_softwares.name' => ['LIKE', $raw_search]];",
                "// Line 3172:                     $orwhere[] = ['glpi_softwares.name' => ['LIKE', $encoded_search]];",
                "// vulnerable line: 3173: }",
                "// Line 3174: ",
                "// Line 3175:                // search also in displaywith columns",
                "// Line 3176:                 if ($displaywith && count($post['displaywith'])) {",
                "// Line 3177:                     foreach ($post['displaywith'] as $with) {",
                "// Line 3178:                         $orwhere[] = [\"$table.$with\" => ['LIKE', $raw_search]];",
                "// Line 3179:                         $orwhere[] = [\"$table.$with\" => ['LIKE', $encoded_search]];",
                "// vulnerable line: 3180: }",
                "// vulnerable line: 3181: }",
                "// Line 3182: ",
                "// Line 3183:                 $where[] = ['OR' => $orwhere];",
                "// vulnerable line: 3184: }",
                "// Line 3185:             $addselect = [];",
                "// Line 3186: ",
                "// Line 3187:             if (Session::haveTranslations($post['itemtype'], $field)) {",
                "// Line 3188:                 $addselect[] = \"namet.value AS transname\";",
                "// Line 3189:                 $ljoin['glpi_dropdowntranslations AS namet'] = [",
                "// Line 3190:                     'ON' => [",
                "// Line 3191:                         'namet'  => 'items_id',",
                "// Line 3192:                         $table   => 'id', [",
                "// Line 3193:                             'AND' => [",
                "// Line 3194:                                 'namet.itemtype'  => $post['itemtype'],",
                "// Line 3195:                                 'namet.language'  => $_SESSION['glpilanguage'],",
                "// Line 3196:                                 'namet.field'     => $field",
                "// Line 3197:                             ]",
                "// Line 3198:                         ]",
                "// Line 3199:                     ]",
                "// Line 3200:                 ];",
                "// vulnerable line: 3201: }",
                "// Line 3202:             if (Session::haveTranslations($post['itemtype'], 'comment')) {",
                "// Line 3203:                 $addselect[] = \"commentt.value AS transcomment\";",
                "// Line 3204:                 $ljoin['glpi_dropdowntranslations AS commentt'] = [",
                "// Line 3205:                     'ON' => [",
                "// Line 3206:                         'commentt'  => 'items_id',",
                "// Line 3207:                         $table      => 'id', [",
                "// Line 3208:                             'AND' => [",
                "// Line 3209:                                 'commentt.itemtype'  => $post['itemtype'],",
                "// Line 3210:                                 'commentt.language'  => $_SESSION['glpilanguage'],",
                "// Line 3211:                                 'commentt.field'     => 'comment'",
                "// Line 3212:                             ]",
                "// Line 3213:                         ]",
                "// Line 3214:                     ]",
                "// Line 3215:                 ];",
                "// vulnerable line: 3216: }",
                "// Line 3217: ",
                "// Line 3218:             $criteria = [];",
                "// Line 3219:             switch ($post['itemtype']) {",
                "// Line 3220:                 case \"Contact\":",
                "// Line 3221:                     $criteria = [",
                "// Line 3222:                         'SELECT' => [",
                "// Line 3223:                             \"$table.entities_id\",",
                "// Line 3224:                             new \\QueryExpression(",
                "// Line 3225:                                 \"CONCAT(IFNULL(\" . $DB->quoteName('name') . \",''),' ',IFNULL(\" .",
                "// Line 3226:                                 $DB->quoteName('firstname') . \",'')) AS \" . $DB->quoteName($field)",
                "// Line 3267:                     break;",
                "// Line 3268: ",
                "// Line 3269:                 case KnowbaseItem::getType():",
                "// Line 3270:                     $criteria = [",
                "// Line 3271:                         'SELECT' => array_merge([\"$table.*\"], $addselect),",
                "// Line 3272:                         'DISTINCT'        => true,",
                "// Line 3273:                         'FROM'            => $table",
                "// Line 3274:                     ];",
                "// Line 3275:                     if (count($ljoin)) {",
                "// Line 3276:                         $criteria['LEFT JOIN'] = $ljoin;",
                "// vulnerable line: 3277: }",
                "// Line 3278: ",
                "// Line 3279:                     $visibility = KnowbaseItem::getVisibilityCriteria();",
                "// Line 3280:                     if (count($visibility['LEFT JOIN'])) {",
                "// Line 3281:                         $criteria['LEFT JOIN'] = array_merge(",
                "// Line 3282:                             (isset($criteria['LEFT JOIN']) ? $criteria['LEFT JOIN'] : []),",
                "// Line 3283:                             $visibility['LEFT JOIN']",
                "// Line 3284:                         );",
                "// Line 3285:                        //Do not use where??",
                "// Line 3286:                        /*if (isset($visibility['WHERE'])) {",
                "// Line 3287:                          $where = $visibility['WHERE'];",
                "// Line 3288:                        }*/",
                "// vulnerable line: 3289: }",
                "// Line 3290:                     break;",
                "// Line 3291: ",
                "// Line 3292:                 case Ticket::class:",
                "// Line 3293:                     $criteria = [",
                "// Line 3294:                         'SELECT' => array_merge([\"$table.*\"], $addselect),",
                "// Line 3295:                         'FROM'   => $table,",
                "// Line 3296:                     ];",
                "// Line 3297:                     if (count($ljoin)) {",
                "// Line 3298:                         $criteria['LEFT JOIN'] = $ljoin;",
                "// vulnerable line: 3299: }",
                "// Line 3300:                     if (!Session::haveRight(Ticket::$rightname, Ticket::READALL)) {",
                "// Line 3301:                         $unused_ref = [];",
                "// Line 3302:                         $joins_str = Search::addDefaultJoin(Ticket::class, Ticket::getTable(), $unused_ref);",
                "// Line 3303:                         if (!empty($joins_str)) {",
                "// Line 3304:                             $criteria['LEFT JOIN'] = [new QueryExpression($joins_str)];",
                "// vulnerable line: 3305: }",
                "// Line 3306:                         $where[] = new QueryExpression(Search::addDefaultWhere(Ticket::class));",
                "// vulnerable line: 3307: }",
                "// Line 3308:                     break;",
                "// Line 3309: ",
                "// Line 3310:                 case Project::getType():",
                "// Line 3311:                     $visibility = Project::getVisibilityCriteria();",
                "// Line 3312:                     if (count($visibility['LEFT JOIN'])) {",
                "// Line 3313:                         $ljoin = array_merge($ljoin, $visibility['LEFT JOIN']);",
                "// Line 3314:                         if (isset($visibility['WHERE'])) {",
                "// Line 3315:                              $where[] = $visibility['WHERE'];",
                "// vulnerable line: 3316: }",
                "// vulnerable line: 3317: }",
                "// Line 3318:                    //no break to reach default case.",
                "// Line 3319: ",
                "// Line 3320:                 default:",
                "// Line 3321:                     $criteria = [",
                "// Line 3322:                         'SELECT' => array_merge([\"$table.*\"], $addselect),",
                "// Line 3323:                         'FROM'   => $table",
                "// Line 3324:                     ];",
                "// Line 3325:                     if (count($ljoin)) {",
                "// Line 3326:                         $criteria['LEFT JOIN'] = $ljoin;",
                "// vulnerable line: 3327: }",
                "// vulnerable line: 3328: }",
                "// Line 3329: ",
                "// Line 3330:             $criteria = array_merge(",
                "// Line 3331:                 $criteria,",
                "// Line 3332:                 [",
                "// Line 3333:                     'DISTINCT' => true,",
                "// Line 3334:                     'WHERE'    => $where,",
                "// Line 3335:                     'START'    => $start,",
                "// Line 3336:                     'LIMIT'    => $limit",
                "// Line 3337:                 ]",
                "// Line 3338:             );",
                "// Line 3339: ",
                "// Line 3340:             $order_field = \"$table.$field\";",
                "// Line 3341:             if (isset($post['order']) && !empty($post['order'])) {",
                "// Line 3342:                 $order_field = $post['order'];",
                "// vulnerable line: 3343: }",
                "// Line 3344:             if ($multi) {",
                "// Line 3345:                 $criteria['ORDERBY'] = [\"$table.entities_id\", $order_field];",
                "// Line 3346:             } else {",
                "// Line 3347:                 $criteria['ORDERBY'] = [$order_field];",
                "// vulnerable line: 3348: }",
                "// Line 3349: ",
                "// Line 3350:             $iterator = $DB->request($criteria);",
                "// Line 3351: ",
                "// Line 3352:            // Display first if no search",
                "// Line 3353:             if ($post['page'] == 1 && empty($post['searchText'])) {",
                "// Line 3354:                 if (!isset($post['display_emptychoice']) || $post['display_emptychoice']) {",
                "// Line 3355:                     $datas[] = [",
                "// Line 3356:                         'id' => 0,",
                "// Line 3357:                         'text' => $post[\"emptylabel\"]",
                "// Line 3358:                     ];",
                "// vulnerable line: 3359: }",
                "// vulnerable line: 3360: }",
                "// Line 3361:             if ($post['page'] == 1) {",
                "// Line 3362:                 if (count($toadd)) {",
                "// Line 3363:                     foreach ($toadd as $key => $val) {",
                "// Line 3364:                         $datas[] = [",
                "// Line 3365:                             'id' => $key,",
                "// Line 3366:                             'text' => stripslashes($val)",
                "// Line 3367:                         ];",
                "// vulnerable line: 3368: }",
                "// vulnerable line: 3369: }",
                "// vulnerable line: 3370: }",
                "// Line 3371: ",
                "// Line 3372:             $datastoadd = [];",
                "// Line 3373: ",
                "// Line 3374:             if (count($iterator)) {",
                "// Line 3375:                 $prev = -1;",
                "// Line 3376: ",
                "// Line 3377:                 foreach ($iterator as $data) {",
                "// vulnerable line: 3378: if (",
                "// Line 3379:                         $multi",
                "// Line 3380:                         && ($data[\"entities_id\"] != $prev)",
                "// Line 3381:                     ) {",
                "// Line 3382:                         if ($prev >= 0) {",
                "// Line 3383:                             if (count($datastoadd)) {",
                "// Line 3384:                                 $datas[] = [",
                "// Line 3385:                                     'text'     => Dropdown::getDropdownName(\"glpi_entities\", $prev),",
                "// Line 3386:                                     'children' => $datastoadd,",
                "// Line 3387:                                     'itemtype' => \"Entity\",",
                "// Line 3388:                                 ];",
                "// vulnerable line: 3389: }",
                "// vulnerable line: 3390: }",
                "// Line 3391:                         $prev       = $data[\"entities_id\"];",
                "// Line 3392:                         $datastoadd = [];",
                "// vulnerable line: 3393: }",
                "// Line 3394: ",
                "// Line 3395:                     if (isset($data['transname']) && !empty($data['transname'])) {",
                "// Line 3396:                         $outputval = $data['transname'];",
                "// Line 3397:                     } else if ($field == 'itemtype' && class_exists($data['itemtype'])) {",
                "// Line 3398:                         $tmpitem = new $data[$field]();",
                "// Line 3399:                         if ($tmpitem->getFromDB($data['items_id'])) {",
                "// Line 3400:                             $outputval = sprintf(__('%1$s - %2$s'), $tmpitem->getTypeName(), $tmpitem->getName());",
                "// Line 3401:                         } else {",
                "// Line 3402:                             $outputval = $tmpitem->getTypeName();",
                "// vulnerable line: 3403: }",
                "// Line 3404:                     } else if ($item instanceof CommonDCModelDropdown) {",
                "// Line 3405:                         $outputval = sprintf(__('%1$s - %2$s'), $data[$field], $data['product_number']);",
                "// Line 3406:                     } else {",
                "// Line 3407:                         $outputval = $data[$field] ?? \"\";",
                "// vulnerable line: 3408: }",
                "// Line 3409: ",
                "// Line 3410:                     $ID         = $data['id'];",
                "// Line 3411:                     $addcomment = \"\";",
                "// Line 3412:                     $title      = $outputval;",
                "// Line 3413:                     if (isset($data[\"comment\"])) {",
                "// Line 3414:                         if (isset($data['transcomment']) && !empty($data['transcomment'])) {",
                "// Line 3415:                             $addcomment .= $data['transcomment'];",
                "// Line 3416:                         } else {",
                "// Line 3417:                             $addcomment .= $data[\"comment\"];",
                "// vulnerable line: 3418: }",
                "// Line 3419: ",
                "// Line 3420:                         $title = sprintf(__('%1$s - %2$s'), $title, $addcomment);",
                "// vulnerable line: 3421: }",
                "// vulnerable line: 3422: if (",
                "// Line 3423:                         $_SESSION[\"glpiis_ids_visible\"]",
                "// Line 3424:                         || (strlen($outputval) == 0)",
                "// Line 3425:                     ) {",
                "// Line 3426:                        //TRANS: %1$s is the name, %2$s the ID",
                "// Line 3427:                         $outputval = sprintf(__('%1$s (%2$s)'), $outputval, $ID);",
                "// vulnerable line: 3428: }",
                "// Line 3429:                     if ($displaywith) {",
                "// Line 3430:                         foreach ($post['displaywith'] as $key) {",
                "// Line 3431:                             if (isset($data[$key])) {",
                "// Line 3432:                                 $withoutput = $data[$key];",
                "// Line 3433:                                 if (isForeignKeyField($key)) {",
                "// Line 3434:                                     $withoutput = Dropdown::getDropdownName(",
                "// Line 3435:                                         getTableNameForForeignKeyField($key),",
                "// Line 3436:                                         $data[$key]",
                "// Line 3437:                                     );",
                "// vulnerable line: 3438: }",
                "// Line 3439:                                 if ((strlen($withoutput) > 0) && ($withoutput != '&nbsp;')) {",
                "// Line 3440:                                     $outputval = sprintf(__('%1$s - %2$s'), $outputval, $withoutput);",
                "// vulnerable line: 3441: }",
                "// vulnerable line: 3442: }",
                "// vulnerable line: 3443: }",
                "// vulnerable line: 3444: }",
                "// Line 3445:                     $datastoadd[] = [",
                "// Line 3446:                         'id' => $ID,",
                "// Line 3447:                         'text' => $outputval,",
                "// Line 3448:                         'title' => $title",
                "// Line 3449:                     ];",
                "// Line 3450:                     $count++;",
                "// vulnerable line: 3451: }",
                "// Line 3452:                 if ($multi) {",
                "// Line 3453:                     if (count($datastoadd)) {",
                "// Line 3454:                         $datas[] = [",
                "// Line 3455:                             'text'     => Dropdown::getDropdownName(\"glpi_entities\", $prev),",
                "// Line 3456:                             'children' => $datastoadd,",
                "// Line 3457:                             'itemtype' => \"Entity\",",
                "// Line 3458:                         ];",
                "// vulnerable line: 3459: }",
                "// Line 3460:                 } else {",
                "// Line 3461:                     if (count($datastoadd)) {",
                "// Line 3462:                         $datas = array_merge($datas, $datastoadd);",
                "// vulnerable line: 3463: }",
                "// vulnerable line: 3464: }",
                "// vulnerable line: 3465: }",
                "// vulnerable line: 3466: }",
                "// Line 3467: ",
                "// Line 3468:         $ret['results'] = Sanitizer::unsanitize($datas);",
                "// Line 3469:         $ret['count']   = $count;",
                "// Line 3470: ",
                "// Line 3471:         return ($json === true) ? json_encode($ret) : $ret;",
                "// vulnerable line: 3472: }",
                "// Line 3473: ",
                "// Line 3474:     private static function filterDisplayWith(CommonDBTM $item, array $fields): array",
                "// Line 3475:     {",
                "// Line 3476:         /** @var \\DBmysql $DB */",
                "// Line 3477:         global $DB;",
                "// Line 3478: ",
                "// Line 3479:         // Filter invalid fields",
                "// Line 3480:         $table = $item->getTable();",
                "// Line 3481:         foreach ($fields as $key => $value) {",
                "// Line 3482:             if (!$DB->fieldExists($table, $value)) {",
                "// Line 3483:                 unset($fields[$key]);",
                "// vulnerable line: 3484: }",
                "// vulnerable line: 3485: }",
                "// Line 3486: ",
                "// Line 3487:         // Filter sensitive fields in `displaywith`",
                "// Line 3488:         // `CommonDBTM::unsetUndisclosedFields()` expects a `$field => $value` format.",
                "// Line 3489:         $key_value_fields = array_fill_keys($fields, 0);",
                "// Line 3490:         $item::unsetUndisclosedFields($key_value_fields);",
                "// Line 3491:         $fields = array_keys($key_value_fields);",
                "// Line 3492: ",
                "// Line 3493:         return $fields;",
                "// vulnerable line: 3494: }",
                "// Line 3495: ",
                "// Line 3496:     /**",
                "// Line 3497:      * Get dropdown connect",
                "// Line 3498:      *",
                "// Line 3499:      * @param array   $post Posted values",
                "// Line 3500:      * @param boolean $json Encode to JSON, default to true",
                "// Line 3501:      *",
                "// Line 3502:      * @return string|array",
                "// Line 3503:      */",
                "// Line 3504:     public static function getDropdownConnect($post, $json = true)",
                "// Line 3505:     {",
                "// Line 3506:         /**",
                "// Line 3507:          * @var array $CFG_GLPI",
                "// Line 3508:          * @var \\DBmysql $DB",
                "// Line 3509:          */",
                "// Line 3510:         global $CFG_GLPI, $DB;",
                "// Line 3511: ",
                "// Line 3512:        // check if asked itemtype is the one originaly requested by the form",
                "// Line 3513:         if (!Session::validateIDOR($post)) {",
                "// Line 3514:             return;",
                "// vulnerable line: 3515: }",
                "// Line 3516: ",
                "// Line 3517:         if (!isset($post['fromtype']) || !($fromitem = getItemForItemtype($post['fromtype']))) {",
                "// Line 3518:             return;",
                "// vulnerable line: 3519: }",
                "// Line 3520: ",
                "// Line 3521:         $fromitem->checkGlobal(UPDATE);",
                "// Line 3522:         $used = [];",
                "// Line 3523:         if (isset($post[\"used\"])) {",
                "// Line 3524:             $used = $post[\"used\"];",
                "// Line 3525: ",
                "// Line 3526:             if (isset($used[$post['itemtype']])) {",
                "// Line 3527:                 $used = $used[$post['itemtype']];",
                "// Line 3528:             } else {",
                "// Line 3529:                 $used = [];",
                "// vulnerable line: 3530: }",
                "// vulnerable line: 3531: }",
                "// Line 3532: ",
                "// Line 3533:        // Make a select box",
                "// Line 3534:         $table = getTableForItemType($post[\"itemtype\"]);",
                "// Line 3535:         if (!$item = getItemForItemtype($post['itemtype'])) {",
                "// Line 3536:             return;",
                "// vulnerable line: 3537: }",
                "// Line 3538: ",
                "// Line 3539:         $where = [];",
                "// Line 3540: ",
                "// Line 3541:         if ($item->maybeDeleted()) {",
                "// Line 3542:             $where[\"$table.is_deleted\"] = 0;",
                "// vulnerable line: 3543: }",
                "// Line 3544:         if ($item->maybeTemplate()) {",
                "// Line 3545:             $where[\"$table.is_template\"] = 0;",
                "// vulnerable line: 3546: }",
                "// Line 3547: ",
                "// Line 3548:         if (isset($post['searchText']) && (strlen($post['searchText']) > 0)) {",
                "// Line 3549:             $raw_search     = Search::makeTextSearchValue($post['searchText']);",
                "// Line 3550:             $encoded_search = Sanitizer::encodeHtmlSpecialChars($raw_search);",
                "// Line 3551:             $where['OR'] = [",
                "// Line 3552:                 [\"$table.name\"        => ['LIKE', $raw_search]],",
                "// Line 3553:                 [\"$table.name\"        => ['LIKE', $encoded_search]],",
                "// Line 3554:                 [\"$table.otherserial\" => ['LIKE', $raw_search]],",
                "// Line 3555:                 [\"$table.otherserial\" => ['LIKE', $encoded_search]],",
                "// Line 3556:                 [\"$table.serial\"      => ['LIKE', $raw_search]],",
                "// Line 3557:                 [\"$table.serial\"      => ['LIKE', $encoded_search]],",
                "// Line 3558:             ];",
                "// vulnerable line: 3559: }",
                "// Line 3560: ",
                "// Line 3561:         $multi = $item->maybeRecursive();",
                "// Line 3562: ",
                "// Line 3563:         if (isset($post[\"entity_restrict\"]) && !($post[\"entity_restrict\"] < 0)) {",
                "// Line 3564:             $where = $where + getEntitiesRestrictCriteria($table, '', $post[\"entity_restrict\"], $multi);",
                "// Line 3565:             if (is_array($post[\"entity_restrict\"]) && (count($post[\"entity_restrict\"]) > 1)) {",
                "// Line 3566:                 $multi = true;",
                "// vulnerable line: 3567: }",
                "// Line 3568:         } else {",
                "// Line 3569:             $where = $where + getEntitiesRestrictCriteria($table, '', $_SESSION['glpiactiveentities'], $multi);",
                "// Line 3570:             if (count($_SESSION['glpiactiveentities']) > 1) {",
                "// Line 3571:                 $multi = true;",
                "// vulnerable line: 3572: }",
                "// vulnerable line: 3573: }",
                "// Line 3574: ",
                "// Line 3575:         if (!isset($post['page'])) {",
                "// Line 3576:             $post['page']       = 1;",
                "// Line 3577:             $post['page_limit'] = $CFG_GLPI['dropdown_max'];",
                "// vulnerable line: 3578: }",
                "// Line 3579: ",
                "// Line 3580:         $start = intval(($post['page'] - 1) * $post['page_limit']);",
                "// Line 3581:         $limit = intval($post['page_limit']);",
                "// Line 3582: ",
                "// Line 3583:         if (!isset($post['onlyglobal'])) {",
                "// Line 3584:             $post['onlyglobal'] = false;",
                "// vulnerable line: 3585: }",
                "// Line 3586: ",
                "// vulnerable line: 3587: if (",
                "// Line 3588:             $post[\"onlyglobal\"]",
                "// Line 3589:             && ($post[\"itemtype\"] != 'Computer')",
                "// Line 3590:         ) {",
                "// Line 3591:             $where[\"$table.is_global\"] = 1;",
                "// Line 3592:         } else {",
                "// Line 3593:             $where_used = [];",
                "// Line 3594:             if (!empty($used)) {",
                "// Line 3595:                 $where_used[] = ['NOT' => [\"$table.id\" => $used]];",
                "// vulnerable line: 3596: }",
                "// Line 3597: ",
                "// Line 3598:             if ($post[\"itemtype\"] == 'Computer') {",
                "// Line 3599:                 $where = $where + $where_used;",
                "// Line 3600:             } else {",
                "// Line 3601:                 $where[] = [",
                "// Line 3602:                     'OR' => [",
                "// Line 3603:                         [",
                "// Line 3604:                             'glpi_computers_items.id'  => null",
                "// Line 3605:                         ] + $where_used,",
                "// Line 3606:                         \"$table.is_global\"            => 1",
                "// Line 3607:                     ]",
                "// Line 3608:                 ];",
                "// vulnerable line: 3609: }",
                "// vulnerable line: 3610: }",
                "// Line 3611: ",
                "// Line 3612:         $criteria = [",
                "// Line 3613:             'SELECT'          => [",
                "// Line 3614:                 \"$table.id\",",
                "// Line 3615:                 \"$table.name AS name\",",
                "// Line 3616:                 \"$table.serial AS serial\",",
                "// Line 3617:                 \"$table.otherserial AS otherserial\",",
                "// Line 3618:                 \"$table.entities_id AS entities_id\"",
                "// Line 3619:             ],",
                "// Line 3620:             'DISTINCT'        => true,",
                "// Line 3631:                     'ON' => [",
                "// Line 3632:                         $table                  => 'id',",
                "// Line 3633:                         'glpi_computers_items'  => 'items_id', [",
                "// Line 3634:                             'AND' => [",
                "// Line 3635:                                 'glpi_computers_items.itemtype'  => $post['itemtype']",
                "// Line 3636:                             ]",
                "// Line 3637:                         ]",
                "// Line 3638:                     ]",
                "// Line 3639:                 ]",
                "// Line 3640:             ];",
                "// vulnerable line: 3641: }",
                "// Line 3642: ",
                "// Line 3643:         $iterator = $DB->request($criteria);",
                "// Line 3644: ",
                "// Line 3645:         $results = [];",
                "// Line 3646:        // Display first if no search",
                "// Line 3647:         if (empty($post['searchText'])) {",
                "// Line 3648:             $results[] = [",
                "// Line 3649:                 'id' => 0,",
                "// Line 3650:                 'text' => Dropdown::EMPTY_VALUE",
                "// Line 3651:             ];",
                "// vulnerable line: 3652: }",
                "// Line 3653:         if (count($iterator)) {",
                "// Line 3654:             $prev       = -1;",
                "// Line 3655:             $datatoadd = [];",
                "// Line 3656: ",
                "// Line 3657:             foreach ($iterator as $data) {",
                "// Line 3658:                 if ($multi && ($data[\"entities_id\"] != $prev)) {",
                "// Line 3659:                     if (count($datatoadd)) {",
                "// Line 3660:                         $results[] = [",
                "// Line 3661:                             'text' => Dropdown::getDropdownName(\"glpi_entities\", $prev),",
                "// Line 3662:                             'children' => $datatoadd",
                "// Line 3663:                         ];",
                "// vulnerable line: 3664: }",
                "// Line 3665:                     $prev = $data[\"entities_id\"];",
                "// Line 3666:                     // Reset last level displayed :",
                "// Line 3667:                     $datatoadd = [];",
                "// vulnerable line: 3668: }",
                "// Line 3669:                 $output = $data['name'];",
                "// Line 3670:                 $ID     = $data['id'];",
                "// Line 3671: ",
                "// vulnerable line: 3672: if (",
                "// Line 3673:                     $_SESSION[\"glpiis_ids_visible\"]",
                "// Line 3674:                     || empty($output)",
                "// Line 3675:                 ) {",
                "// Line 3676:                     $output = sprintf(__('%1$s (%2$s)'), $output, $ID);",
                "// vulnerable line: 3677: }",
                "// Line 3678:                 if (!empty($data['serial'])) {",
                "// Line 3679:                     $output = sprintf(__('%1$s - %2$s'), $output, $data[\"serial\"]);",
                "// vulnerable line: 3680: }",
                "// Line 3681:                 if (!empty($data['otherserial'])) {",
                "// Line 3682:                     $output = sprintf(__('%1$s - %2$s'), $output, $data[\"otherserial\"]);",
                "// vulnerable line: 3683: }",
                "// Line 3684:                 $datatoadd[] = [",
                "// Line 3685:                     'id' => $ID,",
                "// Line 3686:                     'text' => $output",
                "// Line 3687:                 ];",
                "// vulnerable line: 3688: }",
                "// Line 3689: ",
                "// Line 3690:             if ($multi) {",
                "// Line 3691:                 if (count($datatoadd)) {",
                "// Line 3692:                     $results[] = [",
                "// Line 3693:                         'text' => Dropdown::getDropdownName(\"glpi_entities\", $prev),",
                "// Line 3694:                         'children' => $datatoadd",
                "// Line 3695:                     ];",
                "// vulnerable line: 3696: }",
                "// Line 3697:             } else {",
                "// Line 3698:                 if (count($datatoadd)) {",
                "// Line 3699:                     $results = array_merge($results, $datatoadd);",
                "// vulnerable line: 3700: }",
                "// vulnerable line: 3701: }",
                "// vulnerable line: 3702: }",
                "// Line 3703: ",
                "// Line 3704:         $ret['results'] = $results;",
                "// Line 3705:         return ($json === true) ? json_encode($ret) : $ret;",
                "// vulnerable line: 3706: }",
                "// Line 3707: ",
                "// Line 3708:     /**",
                "// Line 3709:      * Get dropdown find num",
                "// Line 3710:      *",
                "// Line 3711:      * @param array   $post Posted values",
                "// Line 3712:      * @param boolean $json Encode to JSON, default to true",
                "// Line 3713:      *",
                "// Line 3714:      * @return string|array",
                "// Line 3715:      */",
                "// Line 3716:     public static function getDropdownFindNum($post, $json = true)",
                "// Line 3717:     {",
                "// Line 3718:         /**",
                "// Line 3719:          * @var array $CFG_GLPI",
                "// Line 3720:          * @var \\DBmysql $DB",
                "// Line 3721:          */",
                "// Line 3722:         global $CFG_GLPI, $DB;",
                "// Line 3723: ",
                "// Line 3724:        // Security",
                "// Line 3725:         if (!$DB->tableExists($post['table'])) {",
                "// Line 3726:             return;",
                "// vulnerable line: 3727: }",
                "// Line 3728: ",
                "// Line 3729:         $itemtypeisplugin = isPluginItemType($post['itemtype']);",
                "// Line 3730: ",
                "// Line 3731:        // check if asked itemtype is the one originaly requested by the form",
                "// Line 3732:         if (!Session::validateIDOR($post)) {",
                "// Line 3733:             return;",
                "// vulnerable line: 3734: }",
                "// Line 3735: ",
                "// Line 3736:         if (!$item = getItemForItemtype($post['itemtype'])) {",
                "// Line 3737:             return;",
                "// vulnerable line: 3738: }",
                "// Line 3739: ",
                "// Line 3740:         $where = [];",
                "// Line 3741:         if (isset($post['used']) && !empty($post['used'])) {",
                "// Line 3742:             $where['NOT'] = ['id' => $post['used']];",
                "// vulnerable line: 3743: }",
                "// Line 3744: ",
                "// Line 3745:         if ($item->maybeDeleted()) {",
                "// Line 3746:             $where['is_deleted'] = 0;",
                "// vulnerable line: 3747: }",
                "// Line 3748: ",
                "// Line 3749:         if ($item->maybeTemplate()) {",
                "// Line 3750:             $where['is_template'] = 0;",
                "// vulnerable line: 3751: }",
                "// Line 3752: ",
                "// Line 3753:         if (isset($_POST['searchText']) && (strlen($post['searchText']) > 0)) {",
                "// Line 3754:             $search = ['LIKE', Search::makeTextSearchValue($post['searchText'])];",
                "// Line 3755:             $orwhere = $item->isField('name') ? [",
                "// Line 3756:                 'name'   => $search",
                "// Line 3757:             ] : [];",
                "// Line 3758:             if (is_int($post['searchText']) || (is_string($post['searchText'] && ctype_digit($post['searchText'])))) {",
                "// Line 3759:                 $orwhere[] = ['id' => $post['searchText']];",
                "// vulnerable line: 3760: }",
                "// Line 3761: ",
                "// Line 3762:             if ($DB->fieldExists($post['table'], \"contact\")) {",
                "// Line 3763:                 $orwhere['contact'] = $search;",
                "// vulnerable line: 3764: }",
                "// Line 3765:             if ($DB->fieldExists($post['table'], \"serial\")) {",
                "// Line 3766:                 $orwhere['serial'] = $search;",
                "// vulnerable line: 3767: }",
                "// Line 3768:             if ($DB->fieldExists($post['table'], \"otherserial\")) {",
                "// Line 3769:                 $orwhere['otherserial'] = $search;",
                "// vulnerable line: 3770: }",
                "// Line 3771:             $where[] = ['OR' => $orwhere];",
                "// vulnerable line: 3772: }",
                "// Line 3773: ",
                "// Line 3774:        // If software or plugins : filter to display only the objects that are allowed to be visible in Helpdesk",
                "// Line 3775:         $filterHelpdesk = in_array($post['itemtype'], $CFG_GLPI[\"helpdesk_visible_types\"]);",
                "// Line 3776: ",
                "// vulnerable line: 3777: if (",
                "// Line 3778:             isset($post['context'])",
                "// Line 3779:             && $post['context'] == \"impact\"",
                "// Line 3780:             && Impact::isEnabled($post['itemtype'])",
                "// Line 3781:         ) {",
                "// Line 3782:             $filterHelpdesk = false;",
                "// vulnerable line: 3783: }",
                "// Line 3784: ",
                "// Line 3785:         if ($filterHelpdesk) {",
                "// Line 3786:             $where['is_helpdesk_visible'] = 1;",
                "// vulnerable line: 3787: }",
                "// Line 3788: ",
                "// Line 3789:         if ($item->isEntityAssign()) {",
                "// Line 3790:             if (isset($post[\"entity_restrict\"]) && ($post[\"entity_restrict\"] >= 0)) {",
                "// vulnerable line: 3791: $entity = $post[\"entity_restrict\"];",
                "// Line 3792:             } else {",
                "// Line 3793:                 $entity = '';",
                "// vulnerable line: 3794: }",
                "// Line 3795: ",
                "// Line 3796:            // allow opening ticket on recursive object (printer, software, ...)",
                "// Line 3797:             $recursive = $item->maybeRecursive();",
                "// Line 3798:             $where     = $where + getEntitiesRestrictCriteria($post['table'], '', $entity, $recursive);",
                "// vulnerable line: 3799: }",
                "// Line 3800: ",
                "// Line 3801:         if (!isset($post['page'])) {",
                "// Line 3802:             $post['page']       = 1;",
                "// Line 3803:             $post['page_limit'] = $CFG_GLPI['dropdown_max'];",
                "// vulnerable line: 3804: }",
                "// Line 3805: ",
                "// Line 3806:         $start = intval(($post['page'] - 1) * $post['page_limit']);",
                "// Line 3807:         $limit = intval($post['page_limit']);",
                "// Line 3808: ",
                "// Line 3809:         $iterator = $DB->request([",
                "// Line 3810:             'FROM'   => $post['table'],",
                "// Line 3811:             'WHERE'  => $where,",
                "// Line 3812:             'ORDER'  => $item->getNameField(),",
                "// Line 3813:             'LIMIT'  => $limit,",
                "// Line 3814:             'START'  => $start",
                "// Line 3815:         ]);",
                "// Line 3816: ",
                "// Line 3817:         $results = [];",
                "// Line 3818: ",
                "// Line 3819:        // Display first if no search",
                "// Line 3820:         if ($post['page'] == 1 && empty($post['searchText'])) {",
                "// Line 3821:             $results[] = [",
                "// Line 3822:                 'id' => 0,",
                "// Line 3823:                 'text' => Dropdown::EMPTY_VALUE",
                "// Line 3824:             ];",
                "// vulnerable line: 3825: }",
                "// Line 3826:         $count = 0;",
                "// Line 3827:         if (count($iterator)) {",
                "// Line 3828:             foreach ($iterator as $data) {",
                "// Line 3829:                 $output = $data[$item->getNameField()];",
                "// Line 3830: ",
                "// Line 3831:                 if (isset($data['contact']) && !empty($data['contact'])) {",
                "// Line 3832:                     $output = sprintf(__('%1$s - %2$s'), $output, $data['contact']);",
                "// vulnerable line: 3833: }",
                "// Line 3834:                 if (isset($data['serial']) && !empty($data['serial'])) {",
                "// Line 3835:                     $output = sprintf(__('%1$s - %2$s'), $output, $data['serial']);",
                "// vulnerable line: 3836: }",
                "// Line 3837:                 if (isset($data['otherserial']) && !empty($data['otherserial'])) {",
                "// Line 3838:                     $output = sprintf(__('%1$s - %2$s'), $output, $data['otherserial']);",
                "// vulnerable line: 3839: }",
                "// Line 3840: ",
                "// vulnerable line: 3841: if (",
                "// Line 3842:                     empty($output)",
                "// Line 3843:                     || $_SESSION['glpiis_ids_visible']",
                "// Line 3844:                 ) {",
                "// Line 3845:                     $output = sprintf(__('%1$s (%2$s)'), $output, $data['id']);",
                "// vulnerable line: 3846: }",
                "// Line 3847: ",
                "// Line 3848:                 $results[] = [",
                "// Line 3849:                     'id' => $data['id'],",
                "// Line 3850:                     'text' => $output",
                "// Line 3851:                 ];",
                "// Line 3852:                 $count++;",
                "// vulnerable line: 3853: }",
                "// vulnerable line: 3854: }",
                "// Line 3855: ",
                "// Line 3856:         $ret['count']   = $count;",
                "// Line 3857:         $ret['results'] = $results;",
                "// Line 3858: ",
                "// Line 3859:         return ($json === true) ? json_encode($ret) : $ret;",
                "// vulnerable line: 3860: }",
                "// Line 3861: ",
                "// Line 3862:     /**",
                "// Line 3863:      * Get dropdown number",
                "// Line 3864:      *",
                "// Line 3865:      * @param array   $post Posted values",
                "// Line 3866:      * @param boolean $json Encode to JSON, default to true",
                "// Line 3867:      *",
                "// Line 3868:      * @return string|array",
                "// Line 3869:      */",
                "// Line 3870:     public static function getDropdownNumber($post, $json = true)",
                "// Line 3871:     {",
                "// Line 3872:         /** @var array $CFG_GLPI */",
                "// Line 3873:         global $CFG_GLPI;",
                "// Line 3874: ",
                "// Line 3875:         $used = [];",
                "// Line 3876: ",
                "// Line 3877:         if (isset($post['used'])) {",
                "// Line 3878:             $used = $post['used'];",
                "// vulnerable line: 3879: }",
                "// Line 3880: ",
                "// Line 3881:         if (!isset($post['value'])) {",
                "// Line 3882:             $post['value'] = 0;",
                "// vulnerable line: 3883: }",
                "// Line 3884: ",
                "// Line 3885:         if (!isset($post['page'])) {",
                "// Line 3886:             $post['page']       = 1;",
                "// Line 3887:             $post['page_limit'] = $CFG_GLPI['dropdown_max'];",
                "// vulnerable line: 3888: }",
                "// Line 3889: ",
                "// Line 3890:         if (isset($post['toadd'])) {",
                "// Line 3891:             $toadd = $post['toadd'];",
                "// Line 3892:         } else {",
                "// Line 3893:             $toadd = [];",
                "// vulnerable line: 3894: }",
                "// Line 3895: ",
                "// Line 3896:         $data = [];",
                "// Line 3897:        // Count real items returned",
                "// Line 3898:         $count = 0;",
                "// Line 3899: ",
                "// Line 3900:         if ($post['page'] == 1) {",
                "// Line 3901:             if (count($toadd)) {",
                "// Line 3902:                 foreach ($toadd as $key => $val) {",
                "// Line 3903:                     $data[] = ['id' => $key,",
                "// Line 3904:                         'text' => (string)stripslashes($val)",
                "// Line 3905:                     ];",
                "// vulnerable line: 3906: }",
                "// vulnerable line: 3907: }",
                "// vulnerable line: 3908: }",
                "// Line 3909: ",
                "// Line 3910:         $values = [];",
                "// Line 3911: ",
                "// Line 3912:         if (!isset($post['min'])) {",
                "// Line 3913:             $post['min'] = 1;",
                "// vulnerable line: 3914: }",
                "// Line 3915: ",
                "// Line 3916:         if (!isset($post['step'])) {",
                "// Line 3917:             $post['step'] = 1;",
                "// vulnerable line: 3918: }",
                "// Line 3919: ",
                "// Line 3920:         if (!isset($post['max'])) {",
                "// Line 3921:            //limit max entries to avoid loop issues",
                "// Line 3922:             $post['max'] = $CFG_GLPI['dropdown_max'] * $post['step'];",
                "// vulnerable line: 3923: }",
                "// Line 3924: ",
                "// Line 3925:         for ($i = $post['min']; $i <= $post['max']; $i += $post['step']) {",
                "// Line 3926:             if (!empty($post['searchText']) && strstr($i, $post['searchText']) || empty($post['searchText'])) {",
                "// Line 3927:                 if (!in_array($i, $used)) {",
                "// Line 3928:                     $values[\"$i\"] = $i;",
                "// vulnerable line: 3929: }",
                "// vulnerable line: 3930: }",
                "// vulnerable line: 3931: }",
                "// Line 3932: ",
                "// Line 3933:         if (count($values)) {",
                "// Line 3934:             $start  = ($post['page'] - 1) * $post['page_limit'];",
                "// Line 3935:             $tosend = array_splice($values, $start, $post['page_limit']);",
                "// Line 3936:             foreach ($tosend as $i) {",
                "// Line 3937:                 $txt = $i;",
                "// Line 3938:                 if (isset($post['unit'])) {",
                "// Line 3939:                     $decimals = Toolbox::isFloat($i) ? Toolbox::getDecimalNumbers($post['step']) : 0;",
                "// Line 3940:                     $txt = Dropdown::getValueWithUnit($i, $post['unit'], $decimals);",
                "// vulnerable line: 3941: }",
                "// Line 3942:                 $data[] = ['id' => $i,",
                "// Line 3943:                     'text' => (string)$txt",
                "// Line 3944:                 ];",
                "// Line 3945:                 $count++;",
                "// vulnerable line: 3946: }",
                "// Line 3947:         } else {",
                "// Line 3948:             if (!isset($toadd[-1])) {",
                "// Line 3949:                 $value = -1;",
                "// Line 3950:                 if (isset($post['min']) && $value < $post['min']) {",
                "// Line 3951:                     $value = $post['min'];",
                "// Line 3952:                 } else if (isset($post['max']) && $value > $post['max']) {",
                "// Line 3953:                     $value = $post['max'];",
                "// vulnerable line: 3954: }",
                "// Line 3955: ",
                "// Line 3956:                 $txt = $value;",
                "// Line 3957:                 if (isset($post['unit'])) {",
                "// Line 3958:                     $decimals = Toolbox::isFloat($value) ? Toolbox::getDecimalNumbers($post['step']) : 0;",
                "// Line 3959:                     $txt = Dropdown::getValueWithUnit($value, $post['unit'], $decimals);",
                "// vulnerable line: 3960: }",
                "// Line 3961:                 $data[] = [",
                "// Line 3962:                     'id' => $value,",
                "// Line 3963:                     'text' => (string)stripslashes($txt)",
                "// Line 3964:                 ];",
                "// Line 3965:                 $count++;",
                "// vulnerable line: 3966: }",
                "// vulnerable line: 3967: }",
                "// Line 3968: ",
                "// Line 3969:         $ret['results'] = $data;",
                "// Line 3970:         $ret['count']   = $count;",
                "// Line 3971: ",
                "// Line 3972:         return ($json === true) ? json_encode($ret) : $ret;",
                "// vulnerable line: 3973: }",
                "// Line 3974: ",
                "// Line 3975:     /**",
                "// Line 3976:      * Get dropdown users",
                "// Line 3977:      *",
                "// Line 3978:      * @param array   $post Posted values",
                "// Line 3979:      * @param boolean $json Encode to JSON, default to true",
                "// Line 3980:      *",
                "// Line 3981:      * @return string|array",
                "// Line 3982:      */",
                "// Line 3983:     public static function getDropdownUsers($post, $json = true)",
                "// Line 3984:     {",
                "// Line 3985:         /** @var array $CFG_GLPI */",
                "// Line 3986:         global $CFG_GLPI;",
                "// Line 3987: ",
                "// Line 3988:        // check if asked itemtype is the one originaly requested by the form",
                "// Line 3989:         if (!Session::validateIDOR($post + ['itemtype' => 'User', 'right' => ($post['right'] ?? \"\")])) {",
                "// Line 3990:             return;",
                "// vulnerable line: 3991: }",
                "// Line 3992: ",
                "// Line 3993:         if (!isset($post['right'])) {",
                "// Line 3994:             $post['right'] = \"all\";",
                "// vulnerable line: 3995: }",
                "// Line 3996: ",
                "// Line 3997:        // Default view : Nobody",
                "// Line 3998:         if (!isset($post['all'])) {",
                "// Line 3999:             $post['all'] = 0;",
                "// vulnerable line: 4000: }",
                "// Line 4001: ",
                "// Line 4002:         if (!isset($post['display_emptychoice'])) {",
                "// Line 4003:             $post['display_emptychoice'] = 1;",
                "// vulnerable line: 4004: }",
                "// Line 4005: ",
                "// Line 4006:         $used = [];",
                "// Line 4007: ",
                "// Line 4008:         if (isset($post['used'])) {",
                "// Line 4009:             $used = $post['used'];",
                "// vulnerable line: 4010: }",
                "// Line 4011: ",
                "// Line 4012:         if (!isset($post['value'])) {",
                "// Line 4013:             $post['value'] = 0;",
                "// vulnerable line: 4014: }",
                "// Line 4015: ",
                "// Line 4016:         if (!isset($post['page'])) {",
                "// Line 4017:             $post['page']       = 1;",
                "// Line 4018:             $post['page_limit'] = $CFG_GLPI['dropdown_max'];",
                "// vulnerable line: 4019: }",
                "// Line 4020: ",
                "// Line 4021:         if (isset($post['_one_id']) && $post['_one_id'] > 0) {",
                "// Line 4022:             $user = new User();",
                "// Line 4023:             $user->getFromDB($post['_one_id']);",
                "// Line 4024:             $result = [$user->fields];",
                "// Line 4025:         } else {",
                "// Line 4026:             $entity_restrict = -1;",
                "// Line 4027:             if (isset($post['entity_restrict'])) {",
                "// Line 4028:                 $entity_restrict = Toolbox::jsonDecode($post['entity_restrict']);",
                "// vulnerable line: 4029: }",
                "// Line 4030: ",
                "// Line 4031:             $start  = intval(($post['page'] - 1) * $post['page_limit']);",
                "// Line 4032:             $searchText = (isset($post['searchText']) ? $post['searchText'] : null);",
                "// Line 4033:             $inactive_deleted = isset($post['inactive_deleted']) ? $post['inactive_deleted'] : 0;",
                "// Line 4034:             $with_no_right = isset($post['with_no_right']) ? $post['with_no_right'] : 0;",
                "// Line 4035:             $result = User::getSqlSearchResult(",
                "// Line 4036:                 false,",
                "// Line 4037:                 $post['right'],",
                "// Line 4038:                 $entity_restrict,",
                "// Line 4039:                 $post['value'],",
                "// Line 4040:                 $used,",
                "// Line 4041:                 $searchText,",
                "// Line 4042:                 $start,",
                "// Line 4043:                 (int)$post['page_limit'],",
                "// Line 4044:                 $inactive_deleted,",
                "// Line 4045:                 $with_no_right",
                "// Line 4046:             );",
                "// vulnerable line: 4047: }",
                "// Line 4048: ",
                "// Line 4049:         $users = [];",
                "// Line 4050: ",
                "// Line 4051:        // Count real items returned",
                "// Line 4052:         $count = 0;",
                "// Line 4053:         $logins = [];",
                "// Line 4054:         if (count($result)) {",
                "// Line 4055:             foreach ($result as $data) {",
                "// Line 4056:                 $users[$data[\"id\"]] = formatUserName(",
                "// Line 4057:                     $data[\"id\"],",
                "// Line 4058:                     $data[\"name\"],",
                "// Line 4059:                     $data[\"realname\"],",
                "// Line 4060:                     $data[\"firstname\"]",
                "// Line 4061:                 );",
                "// Line 4062:                 $logins[$data[\"id\"]] = $data[\"name\"];",
                "// vulnerable line: 4063: }",
                "// vulnerable line: 4064: }",
                "// Line 4065: ",
                "// Line 4066:         $results = [];",
                "// Line 4067: ",
                "// Line 4068:        // Display first if empty search",
                "// Line 4069:         if ($post['page'] == 1 && empty($post['searchText'])) {",
                "// Line 4070:             if ($post['all'] == 0 && $post['display_emptychoice']) {",
                "// Line 4071:                 $results[] = [",
                "// Line 4072:                     'id' => 0,",
                "// Line 4073:                     'text' => Dropdown::EMPTY_VALUE",
                "// Line 4074:                 ];",
                "// Line 4075:             } else if ($post['all'] == 1) {",
                "// Line 4076:                 $results[] = [",
                "// Line 4077:                     'id' => 0,",
                "// Line 4078:                     'text' => __('All')",
                "// Line 4079:                 ];",
                "// vulnerable line: 4080: }",
                "// vulnerable line: 4081: }",
                "// Line 4082: ",
                "// Line 4083:         foreach ($post['toadd'] ?? [] as $toadd) {",
                "// Line 4084:             $results[] = $toadd;",
                "// Line 4085:             $count++;",
                "// vulnerable line: 4086: }",
                "// Line 4087: ",
                "// Line 4088:         if (count($users)) {",
                "// Line 4089:             foreach ($users as $ID => $output) {",
                "// Line 4090:                 $title = sprintf(__('%1$s - %2$s'), $output, $logins[$ID]);",
                "// Line 4091: ",
                "// Line 4092:                 $results[] = [",
                "// Line 4093:                     'id' => $ID,",
                "// Line 4094:                     'text' => $output,",
                "// Line 4095:                     'title' => $title",
                "// Line 4096:                 ];",
                "// Line 4097:                 $count++;",
                "// vulnerable line: 4098: }",
                "// vulnerable line: 4099: }",
                "// Line 4100: ",
                "// Line 4101:         $ret['results'] = $results;",
                "// Line 4102:         $ret['count']   = $count;",
                "// Line 4103: ",
                "// Line 4104:         return ($json === true) ? json_encode($ret) : $ret;",
                "// vulnerable line: 4105: }",
                "// Line 4106: ",
                "// Line 4107: ",
                "// Line 4108:     public static function getDropdownActors($post, $json = true)",
                "// Line 4109:     {",
                "// Line 4110:         /** @var array $CFG_GLPI */",
                "// Line 4111:         global $CFG_GLPI;",
                "// Line 4112: ",
                "// Line 4113:         if (!Session::validateIDOR($post)) {",
                "// Line 4114:             return;",
                "// vulnerable line: 4115: }",
                "// Line 4116: ",
                "// Line 4117:         $defaults = [",
                "// Line 4118:             'actortype'          => 'requester',",
                "// Line 4119:             'users_right'        => 'all',",
                "// Line 4120:             'used'               => [],",
                "// Line 4121:             'value'              => 0,",
                "// Line 4122:             'page'               => 1,",
                "// Line 4123:             'inactive_deleted'   => 0,",
                "// Line 4124:             'searchText'         => null,",
                "// Line 4125:             'itiltemplate_class' => 'TicketTemplate',",
                "// Line 4126:             'itiltemplates_id'   => 0,",
                "// Line 4127:             'returned_itemtypes' => ['User', 'Group', 'Supplier'],",
                "// Line 4128:             'page_limit'         => $CFG_GLPI['dropdown_max'],",
                "// Line 4129:         ];",
                "// Line 4130:         $post = array_merge($defaults, $post);",
                "// Line 4131: ",
                "// Line 4132:         $entity_restrict = -1;",
                "// Line 4133:         if (isset($post['entity_restrict'])) {",
                "// Line 4134:             $entity_restrict = Toolbox::jsonDecode($post['entity_restrict']);",
                "// vulnerable line: 4135: }",
                "// Line 4136: ",
                "// Line 4137:        // prevent instanciation of bad classes",
                "// Line 4138:         if (!is_subclass_of($post['itiltemplate_class'], 'ITILTemplate')) {",
                "// Line 4139:             return false;",
                "// vulnerable line: 4140: }",
                "// Line 4141:         $template = new $post['itiltemplate_class']();",
                "// Line 4142:         $template->getFromDBWithData((int) $post['itiltemplates_id']);",
                "// Line 4143: ",
                "// Line 4144:         $results = [];",
                "// Line 4145: ",
                "// vulnerable line: 4146: if (",
                "// Line 4147:             !$template->isHiddenField(\"_users_id_{$post['actortype']}\")",
                "// Line 4148:             && in_array('User', $post['returned_itemtypes'])",
                "// Line 4149:         ) {",
                "// Line 4150:             $users_iterator = User::getSqlSearchResult(",
                "// Line 4151:                 false,",
                "// Line 4152:                 $post['users_right'],",
                "// Line 4153:                 $entity_restrict,",
                "// Line 4154:                 $post['value'],",
                "// Line 4155:                 $post['used'],",
                "// Line 4156:                 $post['searchText'],",
                "// Line 4164:                 $results[] = [",
                "// Line 4165:                     'id'                => \"User_$ID\",",
                "// Line 4166:                     'text'              => $text,",
                "// Line 4167:                     'title'             => sprintf(__('%1$s - %2$s'), $text, $user['name']),",
                "// Line 4168:                     'itemtype'          => \"User\",",
                "// Line 4169:                     'items_id'          => $ID,",
                "// Line 4170:                     'use_notification'  => strlen($user['default_email'] ?? \"\") > 0 ? 1 : 0,",
                "// Line 4171:                     'default_email'     => $user['default_email'],",
                "// Line 4172:                     'alternative_email' => '',",
                "// Line 4173:                 ];",
                "// vulnerable line: 4174: }",
                "// vulnerable line: 4175: }",
                "// Line 4176: ",
                "// vulnerable line: 4177: if (",
                "// Line 4178:             !$template->isHiddenField(\"_groups_id_{$post['actortype']}\")",
                "// Line 4179:             && in_array('Group', $post['returned_itemtypes'])",
                "// Line 4180:         ) {",
                "// Line 4181:             $cond = ['is_requester' => 1];",
                "// Line 4182:             if ($post[\"actortype\"] == 'assign') {",
                "// Line 4183:                 $cond = ['is_assign' => 1];",
                "// vulnerable line: 4184: }",
                "// Line 4185:             if ($post[\"actortype\"] == 'observer') {",
                "// Line 4186:                 $cond = ['is_watcher' => 1];",
                "// vulnerable line: 4187: }",
                "// Line 4188:             $post['condition'] = static::addNewCondition($cond);",
                "// Line 4189: ",
                "// Line 4190:             // Bypass checks, idor token validation has already been made earlier in method",
                "// Line 4191:             $group_idor = Session::getNewIDORToken('Group', ['entity_restrict' => $entity_restrict, 'condition' => $post['condition']]);",
                "// Line 4192: ",
                "// Line 4193:             $groups = Dropdown::getDropdownValue([",
                "// Line 4194:                 'itemtype'            => 'Group',",
                "// Line 4195:                 '_idor_token'         => $group_idor,",
                "// Line 4196:                 'display_emptychoice' => false,",
                "// Line 4197:                 'searchText'          => $post['searchText'],",
                "// Line 4198:                 'entity_restrict'     => $entity_restrict,",
                "// Line 4199:                 'condition'           => $post['condition'],",
                "// Line 4200:             ], false);",
                "// Line 4201:             foreach ($groups['results'] as $group) {",
                "// Line 4202:                 if (isset($group['children'])) {",
                "// Line 4203:                     foreach ($group['children'] as &$children) {",
                "// Line 4204:                         $children['items_id'] = $children['id'];",
                "// Line 4205:                         $children['id']       = \"Group_\" . $children['id'];",
                "// Line 4206:                         $children['itemtype'] = \"Group\";",
                "// vulnerable line: 4207: }",
                "// vulnerable line: 4208: }",
                "// Line 4209: ",
                "// Line 4210:                 $results[] = $group;",
                "// vulnerable line: 4211: }",
                "// vulnerable line: 4212: }",
                "// Line 4213: ",
                "// Line 4214:        // extract entities from groups (present in special `text` key)",
                "// Line 4215:         $possible_entities = array_column($results, \"text\");",
                "// Line 4216: ",
                "// vulnerable line: 4217: if (",
                "// Line 4218:             $post[\"actortype\"] == 'assign'",
                "// Line 4219:             && !$template->isHiddenField(\"_suppliers_id_{$post['actortype']}\")",
                "// Line 4220:             && in_array('Supplier', $post['returned_itemtypes'])",
                "// Line 4221:         ) {",
                "// Line 4222:             // Bypass checks, idor token validation has already been made earlier in method",
                "// Line 4223:             $supplier_idor = Session::getNewIDORToken('Group', ['entity_restrict' => $entity_restrict]);",
                "// Line 4224: ",
                "// Line 4225:             $suppliers    = Dropdown::getDropdownValue([",
                "// Line 4226:                 'itemtype'            => 'Supplier',",
                "// Line 4227:                 '_idor_token'         => $supplier_idor,",
                "// Line 4234:                     foreach ($supplier['children'] as &$children) {",
                "// Line 4235:                         $supplier_obj = new Supplier();",
                "// Line 4236:                         $supplier_obj->getFromDB($children['id']);",
                "// Line 4237: ",
                "// Line 4238:                         $children['items_id']          = $children['id'];",
                "// Line 4239:                         $children['id']                = \"Supplier_\" . $children['id'];",
                "// Line 4240:                         $children['itemtype']          = \"Supplier\";",
                "// Line 4241:                         $children['use_notification']  = strlen($supplier_obj->fields['email']) > 0 ? 1 : 0;",
                "// Line 4242:                         $children['default_email']     = $supplier_obj->fields['email'];",
                "// Line 4243:                         $children['alternative_email'] = '';",
                "// vulnerable line: 4244: }",
                "// vulnerable line: 4245: }",
                "// Line 4246: ",
                "// Line 4247:                 // if the entity is already present in groups result, append data to its children",
                "// Line 4248:                 $entity = $supplier['text'];",
                "// Line 4249:                 if ($entity_index = array_search($entity, $possible_entities)) {",
                "// Line 4250:                     if ($results[$entity_index]['itemtype'] == \"Entity\") {",
                "// Line 4251:                         $results[$entity_index]['children'] = array_merge($results[$entity_index]['children'], $supplier['children']);",
                "// vulnerable line: 4252: }",
                "// Line 4253:                 } else {",
                "// Line 4254:                  // otherwise create a new entry",
                "// Line 4255:                     $results[] = $supplier;",
                "// vulnerable line: 4256: }",
                "// vulnerable line: 4257: }",
                "// vulnerable line: 4258: }",
                "// Line 4259: ",
                "// Line 4260:         // permits hooks to alter actors list",
                "// Line 4261:         $hook_results = Plugin::doHookFunction(Hooks::FILTER_ACTORS, [",
                "// Line 4262:             'actors' => $results,",
                "// Line 4263:             'params' => $post,",
                "// Line 4264:         ]);",
                "// Line 4265: ",
                "// Line 4266:         $results = $hook_results['actors'] ?? [];",
                "// Line 4267:         $total_results = count($results);",
                "// Line 4268: ",
                "// Line 4270:         $results = array_slice($results, $start, $post['page_limit']);",
                "// Line 4271: ",
                "// Line 4272:         $return = [",
                "// Line 4273:             'results' => $results,",
                "// Line 4274:             'count'   => count($results),",
                "// Line 4275:         ];",
                "// Line 4276:         if (count($results) >= $post['page_limit']) {",
                "// Line 4277:             $return['pagination'] = [",
                "// Line 4278:                 'more' => true,",
                "// Line 4279:             ];",
                "// vulnerable line: 4280: }",
                "// Line 4281: ",
                "// Line 4282:         return ($json === true)",
                "// Line 4283:          ? json_encode($return)",
                "// Line 4284:          : $return;",
                "// vulnerable line: 4285: }",
                "// vulnerable line: 4286: }"
            ]
        },
        {
            "filename_of_changes": "Item_Ticket.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "NetworkPortInstantiation.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1032:                 echo \"entity_sons options is not available with entity option as array\";",
                "// Line 1033:             } else {",
                "// Line 1034:                 $p['entity'] = getSonsOf('glpi_entities', $p['entity']);",
                "// Line 1035:             }",
                "// Line 1036:         }",
                "// Line 1037: ",
                "// Line 1038:         echo \"<input type='hidden' name='NetworkPortConnect_networkports_id_1'value='$ID'>\";",
                "// Line 1039:         $rand = Dropdown::showItemTypes('NetworkPortConnect_itemtype', $CFG_GLPI[\"networkport_types\"]);",
                "// Line 1040: ",
                "// Line 1041:         $params = ['itemtype'           => '__VALUE__',",
                "// vulnerable line: 1042: 'entity_restrict'    => $p['entity'],",
                "// Line 1043:             'networkports_id'    => $ID,",
                "// Line 1044:             'comments'           => $p['comments'],",
                "// Line 1045:             'myname'             => $p['name'],",
                "// Line 1046:             'instantiation_type' => get_called_class()",
                "// Line 1047:         ];",
                "// Line 1048: ",
                "// Line 1049:         Ajax::updateItemOnSelectEvent(",
                "// Line 1050:             \"dropdown_NetworkPortConnect_itemtype$rand\",",
                "// Line 1051:             \"show_\" . $p['name'] . \"$rand\",",
                "// Line 1052:             $CFG_GLPI[\"root_doc\"] ."
            ]
        },
        {
            "filename_of_changes": "User.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "dropdownAllItems.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "dropdownConnect.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 45:     exit();",
                "// Line 46: }",
                "// Line 47: ",
                "// Line 48: $fromitem->checkGlobal(UPDATE);",
                "// Line 49: ",
                "// Line 50: $used = $_POST[\"used\"] ?? [];",
                "// Line 51: Computer_Item::dropdownConnect(",
                "// Line 52:     $_POST[\"itemtype\"],",
                "// Line 53:     $_POST['fromtype'],",
                "// Line 54:     $_POST['myname'],",
                "// vulnerable line: 55: $_POST[\"entity_restrict\"],",
                "// Line 56:     $_POST[\"onlyglobal\"],",
                "// Line 57:     $used",
                "// Line 58: );"
            ]
        },
        {
            "filename_of_changes": "dropdownItilActors.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 58:                 $right = 'all';",
                "// Line 59:                 // Only steal or own ticket whit empty assign",
                "// Line 60:                 if ($_POST[\"actortype\"] == 'assign') {",
                "// Line 61:                     $right = \"own_ticket\";",
                "// Line 62:                     if (!$item->canAssign()) {",
                "// Line 63:                         $right = 'id';",
                "// Line 64:                     }",
                "// Line 65:                 }",
                "// Line 66: ",
                "// Line 67:                 $options = ['name'        => '_itil_' . $_POST[\"actortype\"] . '[users_id]',",
                "// vulnerable line: 68: 'entity'      => $_POST['entity_restrict'],",
                "// Line 69:                     'right'       => $right,",
                "// Line 70:                     'rand'        => $rand,",
                "// Line 71:                     'ldap_import' => true",
                "// Line 72:                 ];",
                "// Line 73: ",
                "// Line 74:                 if ($CFG_GLPI[\"notifications_mailing\"]) {",
                "// Line 75:                     $paramscomment = ['value' => '__VALUE__',",
                "// Line 76:                         'allow_email' => $withemail,",
                "// Line 77:                         'field' => \"_itil_\" . $_POST[\"actortype\"],",
                "// Line 78:                         'use_notification' => $_POST[\"use_notif\"]",
                "// Line 140:                 $cond = ['is_requester' => 1];",
                "// Line 141:                 if ($_POST[\"actortype\"] == 'assign') {",
                "// Line 142:                     $cond = ['is_assign' => 1];",
                "// Line 143:                 }",
                "// Line 144:                 if ($_POST[\"actortype\"] == 'observer') {",
                "// Line 145:                     $cond = ['is_watcher' => 1];",
                "// Line 146:                 }",
                "// Line 147: ",
                "// Line 148:                 $param = [",
                "// Line 149:                     'name'      => '_itil_' . $_POST[\"actortype\"] . '[groups_id]',",
                "// vulnerable line: 150: 'entity'    => $_POST['entity_restrict'],",
                "// Line 151:                     'condition' => $cond,",
                "// Line 152:                     'rand'      => $rand",
                "// Line 153:                 ];",
                "// Line 154:                 if (",
                "// Line 155:                     ($_POST[\"itemtype\"] == 'Ticket')",
                "// Line 156:                     && ($_POST[\"actortype\"] == 'assign')",
                "// Line 157:                 ) {",
                "// Line 158:                     $param['toupdate'] = ['value_fieldname' => 'value',",
                "// Line 159:                         'to_update'       => \"countgroupassign_$rand\",",
                "// Line 160:                         'url'             => $CFG_GLPI[\"root_doc\"] .",
                "// Line 172:                     && ($_POST[\"actortype\"] == 'assign')",
                "// Line 173:                 ) {",
                "// Line 174:                     echo \"<br><span id='countgroupassign_$rand'>\";",
                "// Line 175:                     echo \"</span>\";",
                "// Line 176:                 }",
                "// Line 177: ",
                "// Line 178:                 break;",
                "// Line 179: ",
                "// Line 180:             case \"supplier\":",
                "// Line 181:                 $options = ['name'      => '_itil_' . $_POST[\"actortype\"] . '[suppliers_id]',",
                "// vulnerable line: 182: 'entity'    => $_POST['entity_restrict'],",
                "// Line 183:                     'rand'      => $rand",
                "// Line 184:                 ];",
                "// Line 185:                 if ($CFG_GLPI[\"notifications_mailing\"]) {",
                "// Line 186:                     $paramscomment = ['value'       => '__VALUE__',",
                "// Line 187:                         'allow_email' => $withemail,",
                "// Line 188:                         'field'       => '_itil_' . $_POST[\"actortype\"],",
                "// Line 189:                         'typefield'   => \"supplier\",",
                "// Line 190:                         'use_notification' => $_POST[\"use_notif\"]",
                "// Line 191:                     ];",
                "// Line 192:                    // Fix rand value"
            ]
        },
        {
            "filename_of_changes": "dropdownProjectTaskTicket.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 44: Session::checkLoginUser();",
                "// Line 45: ",
                "// Line 46: if (isset($_POST[\"projects_id\"])) {",
                "// Line 47:     $condition = ['glpi_projecttasks.projectstates_id' => ['<>', 3]];",
                "// Line 48: ",
                "// Line 49:     if ($_POST[\"projects_id\"] > 0) {",
                "// Line 50:         $condition['glpi_projecttasks.projects_id'] = $_POST['projects_id'];",
                "// Line 51:     }",
                "// Line 52: ",
                "// Line 53:     $p = ['itemtype'     => ProjectTask::getType(),",
                "// vulnerable line: 54: 'entity_restrict' => $_POST['entity_restrict'],",
                "// Line 55:         'myname'          => $_POST[\"myname\"],",
                "// Line 56:         'condition'       => $condition,",
                "// Line 57:         'rand'            => $_POST[\"rand\"]",
                "// Line 58:     ];",
                "// Line 59: ",
                "// Line 60:     if (isset($_POST[\"used\"]) && !empty($_POST[\"used\"])) {",
                "// Line 61:         if (isset($_POST[\"used\"])) {",
                "// Line 62:             $p[\"used\"] = $_POST[\"used\"];",
                "// Line 63:         }",
                "// Line 64:     }"
            ]
        },
        {
            "filename_of_changes": "dropdownSoftwareLicense.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 49:     if (!isset($_POST['value'])) {",
                "// Line 50:         $_POST['value'] = 0;",
                "// Line 51:     }",
                "// Line 52: ",
                "// Line 53:    // Make a select box",
                "// Line 54:     $iterator = $DB->request([",
                "// Line 55:         'DISTINCT'  => true,",
                "// Line 56:         'FROM'      => 'glpi_softwarelicenses',",
                "// Line 57:         'WHERE'     => [",
                "// Line 58:             'glpi_softwarelicenses.softwares_id'   => (int)$_POST['softwares_id']",
                "// vulnerable line: 59: ] + getEntitiesRestrictCriteria('glpi_softwarelicenses', 'entities_id', $_POST['entity_restrict'], true),",
                "// Line 60:         'ORDERBY'   => 'name'",
                "// Line 61:     ]);",
                "// Line 62:     $number = count($iterator);",
                "// Line 63: ",
                "// Line 64:     $values = [];",
                "// Line 65:     if ($number) {",
                "// Line 66:         foreach ($iterator as $data) {",
                "// Line 67:             $ID     = $data['id'];",
                "// Line 68:             $output = $data['name'];",
                "// Line 69: "
            ]
        },
        {
            "filename_of_changes": "dropdownTicketCategories.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 34:  */",
                "// Line 35: ",
                "// Line 36: if (strpos($_SERVER['PHP_SELF'], \"dropdownTicketCategories.php\")) {",
                "// Line 37:     include('../inc/includes.php');",
                "// Line 38:     header(\"Content-Type: text/html; charset=UTF-8\");",
                "// Line 39:     Html::header_nocache();",
                "// Line 40: } else if (!defined('GLPI_ROOT')) {",
                "// Line 41:     die(\"Sorry. You can't access this file directly\");",
                "// Line 42: }",
                "// Line 43: ",
                "// vulnerable line: 44: $opt = ['entity' => $_POST[\"entity_restrict\"]];",
                "// Line 45: $condition  = [];",
                "// Line 46: ",
                "// Line 47: if (Session::getCurrentInterface() == \"helpdesk\") {",
                "// Line 48:     $condition['is_helpdeskvisible'] = 1;",
                "// Line 49: }",
                "// Line 50: ",
                "// Line 51: $currentcateg = new ITILCategory();",
                "// Line 52: $currentcateg->getFromDB($_POST['value']);",
                "// Line 53: ",
                "// Line 54: if ($_POST[\"type\"]) {"
            ]
        },
        {
            "filename_of_changes": "dropdownTrackingDeviceType.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 69: ",
                "// Line 70:     // Message for post-only",
                "// Line 71:     if (!isset($_POST[\"admin\"]) || ($_POST[\"admin\"] == 0)) {",
                "// Line 72:         echo \"<span class='text-muted'>\" .",
                "// Line 73:          __('Enter the first letters (user, item name, serial or asset number)')",
                "// Line 74:          . \"</span>\";",
                "// Line 75:     }",
                "// Line 76:     $field_id = Html::cleanId(\"dropdown_\" . $_POST['myname'] . $rand);",
                "// Line 77:     $p = [",
                "// Line 78:         'itemtype'            => $itemtype,",
                "// vulnerable line: 79: 'entity_restrict'     => $_POST['entity_restrict'],",
                "// Line 80:         'table'               => $table,",
                "// Line 81:         'multiple'            => (int) ($_POST[\"multiple\"] ?? 0) !== 0,",
                "// Line 82:         'myname'              => $_POST[\"myname\"],",
                "// Line 83:         'rand'                => $_POST[\"rand\"],",
                "// Line 84:         'width'               => 'calc(100% - 25px)',",
                "// Line 85:         '_idor_token'         => Session::getNewIDORToken($itemtype, [",
                "// vulnerable line: 86: 'entity_restrict' => $_POST['entity_restrict'],",
                "// Line 87:         ]),",
                "// Line 88:     ];",
                "// Line 89: ",
                "// Line 90:     if (isset($_POST[\"used\"]) && !empty($_POST[\"used\"])) {",
                "// Line 91:         if (isset($_POST[\"used\"][$itemtype])) {",
                "// Line 92:             $p[\"used\"] = $_POST[\"used\"][$itemtype];",
                "// Line 93:         }",
                "// Line 94:     }",
                "// Line 95: ",
                "// Line 96:    // Add context if defined"
            ]
        },
        {
            "filename_of_changes": "updateTrackingDeviceType.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 33:  * ---------------------------------------------------------------------",
                "// Line 34:  */",
                "// Line 35: ",
                "// Line 36: $AJAX_INCLUDE = 1;",
                "// Line 37: include('../inc/includes.php');",
                "// Line 38: ",
                "// Line 39: header(\"Content-Type: text/html; charset=UTF-8\");",
                "// Line 40: Html::header_nocache();",
                "// Line 41: ",
                "// Line 42: Session::checkRight(\"ticket\", UPDATE);",
                "// vulnerable line: 43: Item_Ticket::dropdownMyDevices($_POST[\"userID\"], $_POST[\"entity_restrict\"]);",
                "// Line 44: ",
                "// Line 45: Html::ajaxFooter();"
            ]
        }
    ]
}