{
    "cve_id": "CVE-2024-35242",
    "cve_description": "Composer is a dependency manager for PHP. On the 2.x branch prior to versions 2.2.24 and 2.7.7, the `composer install` command running inside a git/hg repository which has specially crafted branch names can lead to command injection. This requires cloning untrusted repositories. Patches are available in version 2.2.24 for 2.2 LTS or 2.7.7 for mainline. As a workaround, avoid cloning potentially compromised repositories.\n",
    "cve_publish_date": "2024-06-10T22:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Merge pull request from GHSA-v9qv-c7wm-wgmf",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "VersionGuesser.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "8",
            "number_of_lines_deleted_vulnerable_to_cve": "7",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: <?php declare(strict_types=1);",
                "// Line 2: ",
                "// Line 3: /*",
                "// Line 4:  * This file is part of Composer.",
                "// vulnerable line: 5: *",
                "// Line 6:  * (c) Nils Adermann <naderman@naderman.de>",
                "// Line 7:  *     Jordi Boggiano <j.boggiano@seld.be>",
                "// vulnerable line: 8: *",
                "// Line 9:  * For the full copyright and license information, please view the LICENSE",
                "// Line 10:  * file that was distributed with this source code.",
                "// Line 11:  */",
                "// Line 12: ",
                "// Line 13: namespace Composer\\Package\\Version;",
                "// Line 14: ",
                "// Line 15: use Composer\\Config;",
                "// Line 16: use Composer\\Pcre\\Preg;",
                "// Line 17: use Composer\\Repository\\Vcs\\HgDriver;",
                "// Line 18: use Composer\\IOullIO;",
                "// Line 20: use Composertil\\Git as GitUtil;",
                "// Line 21: use Composertil\\HttpDownloader;",
                "// Line 22: use Composertil\\Platform;",
                "// Line 23: use Composertil\\ProcessExecutor;",
                "// Line 24: use Composertil\\Svn as SvnUtil;",
                "// Line 25: use React\\Promise\\CancellablePromiseInterface;",
                "// Line 26: use Symfony\\Component\\Process\\Process;",
                "// Line 27: ",
                "// Line 28: /**",
                "// Line 29:  * Try to guess the current version number based on different VCS configuration.",
                "// vulnerable line: 30: *",
                "// Line 31:  * @author Jordi Boggiano <j.boggiano@seld.be>",
                "// Line 32:  * @author Samuel Roze <samuel.roze@gmail.com>",
                "// vulnerable line: 33: *",
                "// Line 34:  * @phpstan-type Version array{version: string, commit: string|null, pretty_version: string|null}|array{version: string, commit: string|null, pretty_version: string|null, feature_version: string|null, feature_pretty_version: string|null}",
                "// Line 35:  */",
                "// Line 36: class VersionGuesser",
                "// Line 37: {",
                "// Line 38:     /**",
                "// Line 39:      * @var Config",
                "// Line 40:      */",
                "// Line 41:     private $config;",
                "// Line 42: ",
                "// Line 43:     /**",
                "// Line 53:     public function __construct(Config $config, ProcessExecutor $process, SemverVersionParser $versionParser)",
                "// Line 54:     {",
                "// Line 55:         $this->config = $config;",
                "// Line 56:         $this->process = $process;",
                "// Line 57:         $this->versionParser = $versionParser;",
                "// Line 58:     }",
                "// Line 59: ",
                "// Line 60:     /**",
                "// Line 61:      * @param array<string, mixed> $packageConfig",
                "// Line 62:      * @param string               $path Path to guess into",
                "// vulnerable line: 63: *",
                "// Line 64:      * @phpstan-return Version|null",
                "// Line 65:      */",
                "// Line 66:     public function guessVersion(array $packageConfig, string $path): ?array",
                "// Line 67:     {",
                "// Line 68:         if (!function_exists('proc_open')) {",
                "// Line 69:             return null;",
                "// Line 70:         }",
                "// Line 71: ",
                "// Line 72:         // bypass version guessing in bash completions as it takes time to create",
                "// Line 73:         // new processes and the root version is usually not that important",
                "// Line 93:         $versionData = $this->guessSvnVersion($packageConfig, $path);",
                "// Line 94:         if (null !== $versionData && null !== $versionData['version']) {",
                "// Line 95:             return $this->postprocess($versionData);",
                "// Line 96:         }",
                "// Line 97: ",
                "// Line 98:         return null;",
                "// Line 99:     }",
                "// Line 100: ",
                "// Line 101:     /**",
                "// Line 102:      * @phpstan-param Version $versionData",
                "// vulnerable line: 103: *",
                "// Line 104:      * @phpstan-return Version",
                "// Line 105:      */",
                "// Line 106:     private function postprocess(array $versionData): array",
                "// Line 107:     {",
                "// Line 108:         if (!empty($versionData['feature_version']) && $versionData['feature_version'] === $versionData['version'] && $versionData['feature_pretty_version'] === $versionData['pretty_version']) {",
                "// Line 109:             unset($versionData['feature_version'], $versionData['feature_pretty_version']);",
                "// Line 110:         }",
                "// Line 111: ",
                "// Line 112:         if ('-dev' === substr($versionData['version'], -4) && Preg::isMatch('{\\.9{7}}', $versionData['version'])) {",
                "// Line 113:             $versionData['pretty_version'] = Preg::replace('{(\\.9{7})+}', '.x', $versionData['version']);",
                "// Line 115: ",
                "// Line 116:         if (!empty($versionData['feature_version']) && '-dev' === substr($versionData['feature_version'], -4) && Preg::isMatch('{\\.9{7}}', $versionData['feature_version'])) {",
                "// Line 117:             $versionData['feature_pretty_version'] = Preg::replace('{(\\.9{7})+}', '.x', $versionData['feature_version']);",
                "// Line 118:         }",
                "// Line 119: ",
                "// Line 120:         return $versionData;",
                "// Line 121:     }",
                "// Line 122: ",
                "// Line 123:     /**",
                "// Line 124:      * @param array<string, mixed> $packageConfig",
                "// vulnerable line: 125: *",
                "// Line 126:      * @return array{version: string|null, commit: string|null, pretty_version: string|null, feature_version?: string|null, feature_pretty_version?: string|null}",
                "// Line 127:      */",
                "// Line 128:     private function guessGitVersion(array $packageConfig, string $path): array",
                "// Line 129:     {",
                "// Line 130:         GitUtil::cleanEnv();",
                "// Line 131:         $commit = null;",
                "// Line 132:         $version = null;",
                "// Line 133:         $prettyVersion = null;",
                "// Line 134:         $featureVersion = null;",
                "// Line 135:         $featurePrettyVersion = null;",
                "// Line 166:                         $branches[] = $match[1];",
                "// Line 167:                     }",
                "// Line 168:                 }",
                "// Line 169:             }",
                "// Line 170: ",
                "// Line 171:             if ($isFeatureBranch) {",
                "// Line 172:                 $featureVersion = $version;",
                "// Line 173:                 $featurePrettyVersion = $prettyVersion;",
                "// Line 174: ",
                "// Line 175:                 // try to find the best (nearest) version branch to assume this feature's version",
                "// vulnerable line: 176: $result = $this->guessFeatureVersion($packageConfig, $version, $branches, 'git rev-list %candidate%..%branch%', $path);",
                "// Line 177:                 $version = $result['version'];",
                "// Line 178:                 $prettyVersion = $result['pretty_version'];",
                "// Line 179:             }",
                "// Line 180:         }",
                "// Line 181: ",
                "// Line 182:         if (!$version || $isDetached) {",
                "// Line 183:             $result = $this->versionFromGitTags($path);",
                "// Line 184:             if ($result) {",
                "// Line 185:                 $version = $result['version'];",
                "// Line 186:                 $prettyVersion = $result['pretty_version'];",
                "// Line 216:                 return ['version' => $version, 'pretty_version' => trim($output)];",
                "// Line 217:             } catch (\\Exception $e) {",
                "// Line 218:             }",
                "// Line 219:         }",
                "// Line 220: ",
                "// Line 221:         return null;",
                "// Line 222:     }",
                "// Line 223: ",
                "// Line 224:     /**",
                "// Line 225:      * @param array<string, mixed> $packageConfig",
                "// vulnerable line: 226: *",
                "// Line 227:      * @return array{version: string|null, commit: ''|null, pretty_version: string|null, feature_version?: string|null, feature_pretty_version?: string|null}|null",
                "// Line 228:      */",
                "// Line 229:     private function guessHgVersion(array $packageConfig, string $path): ?array",
                "// Line 230:     {",
                "// Line 231:         // try to fetch current version from hg branch",
                "// Line 232:         if (0 === $this->process->execute('hg branch', $output, $path)) {",
                "// Line 233:             $branch = trim($output);",
                "// Line 234:             $version = $this->versionParser->normalizeBranch($branch);",
                "// Line 235:             $isFeatureBranch = 0 === strpos($version, 'dev-');",
                "// Line 236: ",
                "// Line 255:             $result['feature_pretty_version'] = $version;",
                "// Line 256: ",
                "// Line 257:             return $result;",
                "// Line 258:         }",
                "// Line 259: ",
                "// Line 260:         return null;",
                "// Line 261:     }",
                "// Line 262: ",
                "// Line 263:     /**",
                "// Line 264:      * @param array<string, mixed>     $packageConfig",
                "// vulnerable line: 265: * @param string[]                 $branches",
                "// vulnerable line: 266: *",
                "// vulnerable line: 267: * @phpstan-param non-empty-string $scmCmdline",
                "// vulnerable line: 268: *",
                "// Line 269:      * @return array{version: string|null, pretty_version: string|null}",
                "// Line 270:      */",
                "// vulnerable line: 271: private function guessFeatureVersion(array $packageConfig, ?string $version, array $branches, string $scmCmdline, string $path): array",
                "// Line 272:     {",
                "// Line 273:         $prettyVersion = $version;",
                "// Line 274: ",
                "// Line 275:         // ignore feature branches if they have no branch-alias or self.version is used",
                "// Line 276:         // and find the branch they came from to use as a version instead",
                "// Line 277:         if (!isset($packageConfig['extra']['branch-alias'][$version])",
                "// Line 278:             || strpos(json_encode($packageConfig), '\"self.version\"')",
                "// Line 279:         ) {",
                "// Line 280:             $branch = Preg::replace('{^dev-}', '', $version);",
                "// Line 281:             $length = PHP_INT_MAX;",
                "// Line 303:             $this->process->setMaxJobs(30);",
                "// Line 304:             try {",
                "// Line 305:                 foreach ($branches as $candidate) {",
                "// Line 306:                     $candidateVersion = Preg::replace('{^remotes/\\S+/}', '', $candidate);",
                "// Line 307: ",
                "// Line 308:                     // do not compare against itself or other feature branches",
                "// Line 309:                     if ($candidate === $branch || $this->isFeatureBranch($packageConfig, $candidateVersion)) {",
                "// Line 310:                         continue;",
                "// Line 311:                     }",
                "// Line 312: ",
                "// vulnerable line: 313: $cmdLine = str_replace(['%candidate%', '%branch%'], [$candidate, $branch], $scmCmdline);",
                "// Line 314:                     $promises[] = $this->process->executeAsync($cmdLine, $path)->then(function (Process $process) use (&$length, &$version, &$prettyVersion, $candidateVersion, &$promises): void {",
                "// Line 315:                         if (!$process->isSuccessful()) {",
                "// Line 316:                             return;",
                "// Line 317:                         }",
                "// Line 318: ",
                "// Line 319:                         $output = $process->getOutput();",
                "// Line 320:                         if (strlen($output) < $length) {",
                "// Line 321:                             $length = strlen($output);",
                "// Line 322:                             $version = $this->versionParser->normalizeBranch($candidateVersion);",
                "// Line 323:                             $prettyVersion = 'dev-' . $candidateVersion;",
                "// Line 376:                 $prettyVersion = trim($output);",
                "// Line 377:             } catch (\\Exception $e) {",
                "// Line 378:             }",
                "// Line 379:         }",
                "// Line 380: ",
                "// Line 381:         return ['version' => $version, 'commit' => '', 'pretty_version' => $prettyVersion];",
                "// Line 382:     }",
                "// Line 383: ",
                "// Line 384:     /**",
                "// Line 385:      * @param array<string, mixed> $packageConfig",
                "// vulnerable line: 386: *",
                "// Line 387:      * @return array{version: string, commit: '', pretty_version: string}|null",
                "// Line 388:      */",
                "// Line 389:     private function guessSvnVersion(array $packageConfig, string $path): ?array",
                "// Line 390:     {",
                "// Line 391:         SvnUtil::cleanEnv();",
                "// Line 392: ",
                "// Line 393:         // try to fetch current version from svn",
                "// Line 394:         if (0 === $this->process->execute('svn info --xml', $output, $path)) {",
                "// Line 395:             $trunkPath = isset($packageConfig['trunk-path']) ? preg_quote($packageConfig['trunk-path'], '#') : 'trunk';",
                "// Line 396:             $branchesPath = isset($packageConfig['branches-path']) ? preg_quote($packageConfig['branches-path'], '#') : 'branches';"
            ]
        },
        {
            "filename_of_changes": "VersionGuesserTest.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 116: ",
                "// Line 117:         $process = $this->getProcessExecutorMock();",
                "// Line 118:         $process->expects([",
                "// Line 119:             [",
                "// Line 120:                 'cmd' => ['git', 'branch', '-a', '--no-color', '--no-abbrev', '-v'],",
                "// Line 121:                 'stdout' => \"  arbitrary $commitHash Commit message",
                "// Line 122: * feature $anotherCommitHash Another message",
                "// Line 123: \",",
                "// Line 124:             ],",
                "// Line 125:             [",
                "// vulnerable line: 126: 'cmd' => 'git rev-list arbitrary..feature',",
                "// Line 127:                 'stdout' => \"$anotherCommitHash",
                "// Line 128: \",",
                "// Line 129:             ],",
                "// Line 130:         ], true);",
                "// Line 131: ",
                "// Line 132:         $config = new Config;",
                "// Line 133:         $config->merge(['repositories' => ['packagist' => false]]);",
                "// Line 134:         $guesser = new VersionGuesser($config, $process, new VersionParser());",
                "// Line 135:         $versionArray = $guesser->guessVersion(['version' => 'self.version', 'non-feature-branches' => ['arbitrary']], 'dummy/path');",
                "// Line 136: ",
                "// Line 149: ",
                "// Line 150:         $process = $this->getProcessExecutorMock();",
                "// Line 151:         $process->expects([",
                "// Line 152:             [",
                "// Line 153:                 'cmd' => ['git', 'branch', '-a', '--no-color', '--no-abbrev', '-v'],",
                "// Line 154:                 'stdout' => \"  latest-testing $commitHash Commit message",
                "// Line 155: * feature $anotherCommitHash Another message",
                "// Line 156: \",",
                "// Line 157:             ],",
                "// Line 158:             [",
                "// vulnerable line: 159: 'cmd' => 'git rev-list latest-testing..feature',",
                "// Line 160:                 'stdout' => \"$anotherCommitHash",
                "// Line 161: \",",
                "// Line 162:             ],",
                "// Line 163:         ], true);",
                "// Line 164: ",
                "// Line 165:         $config = new Config;",
                "// Line 166:         $config->merge(['repositories' => ['packagist' => false]]);",
                "// Line 167:         $guesser = new VersionGuesser($config, $process, new VersionParser());",
                "// Line 168:         $versionArray = $guesser->guessVersion(['version' => 'self.version', 'non-feature-branches' => ['latest-.*']], 'dummy/path');",
                "// Line 169: ",
                "// Line 367:         $process = $this->getProcessExecutorMock();",
                "// Line 368:         $process->expects([",
                "// Line 369:             [",
                "// Line 370:                 'cmd' => ['git', 'branch', '-a', '--no-color', '--no-abbrev', '-v'],",
                "// Line 371:                 'stdout' => \"* feature-branch 03a15d220da53c52eddd5f32ffca64a7b3801bea Commit message",
                "// Line 372: \".",
                "// Line 373:                         \"remotes/origin/1.5 03a15d220da53c52eddd5f32ffca64a7b3801bea Commit message",
                "// Line 374: \",",
                "// Line 375:             ],",
                "// Line 376:             [",
                "// vulnerable line: 377: 'cmd' => 'git rev-list remotes/origin/1.5..feature-branch',",
                "// Line 378:                 'stdout' => \"",
                "// Line 379: \",",
                "// Line 380:             ],",
                "// Line 381:         ], true);",
                "// Line 382: ",
                "// Line 383:         $config = new Config;",
                "// Line 384:         $config->merge(['repositories' => ['packagist' => false]]);",
                "// Line 385:         $guesser = new VersionGuesser($config, $process, new VersionParser());",
                "// Line 386:         $versionData = $guesser->guessVersion(['version' => 'self.version'], 'dummy/path');",
                "// Line 387:         self::assertIsArray($versionData);"
            ]
        }
    ]
}