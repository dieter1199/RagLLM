{
    "cve_id": "CVE-2024-29026",
    "cve_description": "Owncast is an open source, self-hosted, decentralized, single user live video streaming and chat server. In versions 0.1.2 and prior, a lenient CORS policy allows attackers to make a cross origin request, reading privileged information. This can be used to leak the admin password. Commit 9215d9ba0f29d62201d3feea9e77dcd274581624 fixes this issue.",
    "cve_publish_date": "2024-03-20T22:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fix(auth): limit admin cors access to only localhost:3000",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "auth.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "5",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 18: type UserAccessTokenHandlerFunc func(user.User, http.ResponseWriter, *http.Request)",
                "// Line 19: ",
                "// Line 20: // RequireAdminAuth wraps a handler requiring HTTP basic auth for it using the given",
                "// Line 21: // the stream key as the password and and a hardcoded \"admin\" for username.",
                "// Line 22: func RequireAdminAuth(handler http.HandlerFunc) http.HandlerFunc {",
                "// Line 23:     return func(w http.ResponseWriter, r *http.Request) {",
                "// Line 24:         username := \"admin\"",
                "// Line 25:         password := data.GetAdminPassword()",
                "// Line 26:         realm := \"Owncast Authenticated Request\"",
                "// Line 27: ",
                "// vulnerable line: 28: // The following line is kind of a work around.",
                "// vulnerable line: 29: // If you want HTTP Basic Auth + Cors it requires _explicit_ origins to be provided in the",
                "// vulnerable line: 30: // Access-Control-Allow-Origin header.  So we just pull out the origin header and specify it.",
                "// vulnerable line: 31: // If we want to lock down admin APIs to not be CORS accessible for anywhere, this is where we would do that.",
                "// vulnerable line: 32: w.Header().Set(\"Access-Control-Allow-Origin\", r.Header.Get(\"Origin\"))",
                "// Line 33:         w.Header().Set(\"Access-Control-Allow-Credentials\", \"true\")",
                "// Line 34:         w.Header().Set(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept, Authorization\")",
                "// Line 35: ",
                "// Line 36:         // For request needing CORS, send a 204.",
                "// Line 37:         if r.Method == \"OPTIONS\" {",
                "// Line 38:             w.WriteHeader(http.StatusNoContent)",
                "// Line 39:             return",
                "// Line 40:         }",
                "// Line 41: ",
                "// Line 42:         user, pass, ok := r.BasicAuth()"
            ]
        }
    ]
}