{
    "cve_id": "CVE-2023-46046",
    "cve_description": "An issue in MiniZinc before 2.8.0 allows a NULL pointer dereference via ti_expr in a crafted .mzn file. NOTE: this is disputed because there is no common libminizinc use case in which an unattended process is supposed to run forever to process a series of atttacker-controlled .mzn files.",
    "cve_publish_date": "2024-03-27T05:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Fix missing nullptr check in ti_expr in the parser\n\nResolves #730 on GitHub",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "parser.yxx",
            "code_language": "C++",
            "number_of_lines_added_for_mitigation": "22",
            "number_of_lines_deleted_vulnerable_to_cve": "16",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 558:       }",
                "// Line 559: ",
                "// Line 560: enum_init :",
                "// Line 561:       enum_construct",
                "// Line 562:       {",
                "// Line 563:         $$ = new std::vector<Expression*>({$1});",
                "// Line 564:       }",
                "// Line 565:     | enum_init MZN_PLUSPLUS enum_construct",
                "// Line 566:       {",
                "// Line 567:         $$ = $1;",
                "// vulnerable line: 568: if ($$) {",
                "// Line 569:           $$->push_back($3);",
                "// Line 570:         }",
                "// Line 571:       }",
                "// Line 572: ",
                "// Line 573: enum_construct :",
                "// Line 574:       '{' enum_id_list comma_or_none '}'",
                "// Line 575:       {",
                "// Line 576:         $$ = new SetLit(@$, *$2);",
                "// Line 577:         delete $2;",
                "// Line 578:       }",
                "// Line 842:       ti_expr",
                "// Line 843:       { $$=new vector<TypeInst*>(); $$->push_back($1); }",
                "// Line 844:     | ti_expr_list_head ',' ti_expr",
                "// Line 845:       { $$=$1; if ($1 && $3) $1->push_back($3); }",
                "// Line 846: ",
                "// Line 847: ti_expr :",
                "// Line 848:       base_ti_expr",
                "// Line 849:     | MZN_ARRAY MZN_LEFT_BRACKET ti_expr_list MZN_RIGHT_BRACKET MZN_OF base_ti_expr",
                "// Line 850:       {",
                "// Line 851:         $$ = $6;",
                "// vulnerable line: 852: if ($$ && $3) $$->setRanges(*$3);",
                "// Line 853:         delete $3;",
                "// Line 854:       }",
                "// Line 855:     | MZN_LIST MZN_OF base_ti_expr",
                "// Line 856:       {",
                "// Line 857:         $$ = $3;",
                "// Line 858:         std::vector<TypeInst*> ti(1);",
                "// Line 859:         ti[0] = new TypeInst(@$,Type::parint());",
                "// vulnerable line: 860: if ($$) $$->setRanges(ti);",
                "// Line 861:       }",
                "// Line 862:     | ti_expr MZN_PLUSPLUS base_ti_expr",
                "// Line 863:       {",
                "// Line 864:         $$ = $1;",
                "// vulnerable line: 865: Type tt = Expression::type($$);",
                "// vulnerable line: 866: tt.dim(0);",
                "// vulnerable line: 867: TypeInst* lhs = new TypeInst(@$, tt, $1->domain());",
                "// vulnerable line: 868: BinOp* bop = new BinOp(@$, lhs, BOT_PLUSPLUS, $3);",
                "// vulnerable line: 869: bop->type(tt);",
                "// vulnerable line: 870: $$->domain(bop);",
                "// Line 871:       }",
                "// Line 872: ",
                "// Line 873: base_ti_expr :",
                "// Line 874:       base_ti_expr_tail",
                "// Line 875:       { $$ = $1;",
                "// Line 876:       }",
                "// Line 877:     | MZN_OPT base_ti_expr_tail",
                "// Line 878:       { $$ = $2;",
                "// vulnerable line: 879: if ($$) {",
                "// vulnerable line: 880: Type tt = Expression::type($$);",
                "// Line 881:           tt.ot(Type::OT_OPTIONAL);",
                "// Line 882:           tt.otExplicit(true);",
                "// Line 883:           $$->type(tt);",
                "// Line 884:         }",
                "// Line 885:       }",
                "// Line 886:     | MZN_PAR opt_opt base_ti_expr_tail",
                "// Line 887:       { $$ = $3;",
                "// vulnerable line: 888: if ($$) {",
                "// vulnerable line: 889: Type tt = Expression::type($$);",
                "// Line 890:           tt.tiExplicit(true);",
                "// Line 891:           if ($2) {",
                "// Line 892:             tt.ot(Type::OT_OPTIONAL);",
                "// Line 893:             tt.otExplicit(true);",
                "// Line 894:           }",
                "// Line 895:           $$->type(tt);",
                "// Line 896:         }",
                "// Line 897:       }",
                "// Line 898:     | MZN_VAR opt_opt base_ti_expr_tail",
                "// Line 899:       { $$ = $3;",
                "// vulnerable line: 900: Type tt = Expression::type($$);",
                "// vulnerable line: 901: if ($$) {",
                "// Line 902:           tt.ti(Type::TI_VAR);",
                "// Line 903:           tt.tiExplicit(true);",
                "// Line 904:           if ($2) {",
                "// Line 905:             tt.ot(Type::OT_OPTIONAL);",
                "// Line 906:             tt.otExplicit(true);",
                "// Line 907:           }",
                "// Line 908:           $$->type(tt);",
                "// Line 909:         }",
                "// Line 910:       }",
                "// Line 911:     | MZN_SET MZN_OF base_ti_expr_tail",
                "// Line 912:       { $$ = $3;",
                "// vulnerable line: 913: if ($$) {",
                "// vulnerable line: 914: Type tt = Expression::type($$);",
                "// Line 915:           tt.st(Type::ST_SET);",
                "// Line 916:           $$->type(tt);",
                "// Line 917:         }",
                "// Line 918:       }",
                "// Line 919:     | MZN_OPT MZN_SET MZN_OF base_ti_expr_tail",
                "// Line 920:       { $$ = $4;",
                "// vulnerable line: 921: if ($$) {",
                "// vulnerable line: 922: Type tt = Expression::type($$);",
                "// Line 923:           tt.st(Type::ST_SET);",
                "// Line 924:           tt.ot(Type::OT_OPTIONAL);",
                "// Line 925:           tt.otExplicit(true);",
                "// Line 926:           $$->type(tt);",
                "// Line 927:         }",
                "// Line 928:       }",
                "// Line 929:     | MZN_PAR opt_opt MZN_SET MZN_OF base_ti_expr_tail",
                "// Line 930:       { $$ = $5;",
                "// vulnerable line: 931: if ($$) {",
                "// vulnerable line: 932: Type tt = Expression::type($$);",
                "// Line 933:           tt.tiExplicit(true);",
                "// Line 934:           tt.st(Type::ST_SET);",
                "// Line 935:           if ($2) {",
                "// Line 936:             tt.ot(Type::OT_OPTIONAL);",
                "// Line 937:             tt.otExplicit(true);",
                "// Line 938:           }",
                "// Line 939:           $$->type(tt);",
                "// Line 940:         }",
                "// Line 941:       }",
                "// Line 942:     | MZN_VAR opt_opt MZN_SET MZN_OF base_ti_expr_tail",
                "// Line 943:       { $$ = $5;",
                "// vulnerable line: 944: if ($$) {",
                "// vulnerable line: 945: Type tt = Expression::type($$);",
                "// Line 946:           tt.ti(Type::TI_VAR);",
                "// Line 947:           tt.tiExplicit(true);",
                "// Line 948:           tt.st(Type::ST_SET);",
                "// Line 949:           if ($2) {",
                "// Line 950:             tt.ot(Type::OT_OPTIONAL);",
                "// Line 951:             tt.otExplicit(true);",
                "// Line 952:           }",
                "// Line 953:           $$->type(tt);",
                "// Line 954:         }",
                "// Line 955:       }",
                "// Line 1863: ",
                "// Line 1864: simple_array_literal_2d_indexed_list_row: simple_array_literal_2d_indexed_list_row_head comma_or_none",
                "// Line 1865: ",
                "// Line 1866: simple_array_literal_2d_indexed_list_row_head :",
                "// Line 1867:       expr",
                "// Line 1868:       { $$=new std::pair<std::vector<MiniZinc::Expression*>,std::vector<MiniZinc::Expression*>>();",
                "// Line 1869:         $$->second.push_back($1);",
                "// Line 1870:       }",
                "// Line 1871:     | simple_array_literal_2d_indexed_list_row_head ':' expr",
                "// Line 1872:       { $$=$1;",
                "// vulnerable line: 1873: if ($$) {",
                "// Line 1874:           if ($$->second.size() != 1) {",
                "// Line 1875:             yyerror(&@$,parm,\"invalid array literal, mixing indexes and values\");",
                "// Line 1876:           }",
                "// Line 1877:           $$->first.push_back($$->second.back());",
                "// Line 1878:           $$->second.pop_back();",
                "// Line 1879:           $$->second.push_back($3);",
                "// Line 1880:         }",
                "// Line 1881:       }",
                "// Line 1882:     | simple_array_literal_2d_indexed_list_row_head ',' expr",
                "// Line 1883:       { $$=$1;",
                "// vulnerable line: 1884: if ($$) {",
                "// Line 1885:           if ($$->second.empty()) {",
                "// Line 1886:             yyerror(&@$,parm,\"invalid array literal, mixing indexes and values\");",
                "// Line 1887:           }",
                "// Line 1888:           $$->second.push_back($3);",
                "// Line 1889:         }",
                "// Line 1890:       }",
                "// Line 1891: ",
                "// Line 1892: simple_array_comp :",
                "// Line 1893:       MZN_LEFT_BRACKET expr ':' expr '|' comp_tail MZN_RIGHT_BRACKET",
                "// Line 1894:       { if ($2 && $6) {"
            ]
        }
    ]
}