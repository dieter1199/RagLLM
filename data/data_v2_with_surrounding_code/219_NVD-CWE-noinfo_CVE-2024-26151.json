{
    "cve_id": "CVE-2024-26151",
    "cve_description": "The `mjml` PyPI package, found at the `FelixSchwarz/mjml-python` GitHub repo, is an unofficial Python port of MJML, a markup language created by Mailjet. All users of `FelixSchwarz/mjml-python` who insert untrusted data into mjml templates unless that data is checked in a very strict manner. User input like `&lt;script&gt;` would be rendered as `<script>` in the final HTML output. The attacker must be able to control some data which is later injected in an mjml template which is then send out as email to other users. The attacker could control contents of email messages sent through the platform. The problem has been fixed in version 0.11.0 of this library. Versions before 0.10.0 are not affected by this security issue. As a workaround, ensure that potentially untrusted user input does not contain any sequences which could be rendered as HTML.",
    "cve_publish_date": "2024-02-22T19:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Fix CSS child selectors; don't load remote stylesheets",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "mjml2html.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 108:             is_comment = not isinstance(tagName, str)",
                "// Line 109:             if is_comment:",
                "// Line 110:                 # XML comment: <cyfunction Comment at 0xâ€¦>",
                "// Line 111:                 # (this needs to be extended when \"keepComments\" should be implemented)",
                "// Line 112:                 return None",
                "// Line 113:             attributes = _mjml.attrs",
                "// Line 114:             children = [child for child in _mjml]",
                "// Line 115:             classes = ignore_empty(attributes.get('mj-class', '').split(' '))",
                "// Line 116: ",
                "// Line 117:             # upstream parses text contents (+ comments) in mjml-parser-xml/index.js",
                "// vulnerable line: 118: content = _mjml.decode_contents()",
                "// Line 119: ",
                "// Line 120:             attributesClasses = {}",
                "// Line 121:             for css_class in classes:",
                "// Line 122:                 mjClassValues = globalDatas.classes.get(css_class)",
                "// Line 123:                 if mjClassValues:",
                "// Line 124:                     attributesClasses.update(mjClassValues)",
                "// Line 125: ",
                "// Line 126:             parent_mj_classes = ignore_empty(parentMjClass.split(' '))",
                "// Line 127:             def default_attr_classes(value):",
                "// Line 128:                 return globalDatas.classesDefault.get(value, {}).get(tagName, {})",
                "// Line 205:     globalDatas.headRaw = processing(mjHead, headHelpers)",
                "// Line 206:     content = processing(mjBody, bodyHelpers, applyAttributes)",
                "// Line 207: ",
                "// Line 208:     if globalDatas.htmlAttributes:",
                "// Line 209:         contentSoup = BeautifulSoup(content, 'html.parser')",
                "// Line 210:         for selector, data in globalDatas.htmlAttributes.items():",
                "// Line 211:             for attrName, value in data.items():",
                "// Line 212:                 for element in contentSoup.select(selector):",
                "// Line 213:                     element[attrName] = value or ''",
                "// Line 214: ",
                "// vulnerable line: 215: content = contentSoup.decode_contents()",
                "// Line 216: ",
                "// Line 217:     content = skeleton(",
                "// Line 218:         content=content,",
                "// Line 219:         # upstream just passes this extra key to skeleton() as JavaScript",
                "// Line 220:         # won't complain about additional parameters.",
                "// Line 221:         **omit(globalDatas, ('classesDefault', 'htmlAttributes')),",
                "// Line 222:     )",
                "// Line 223:     # LATER: upstream has also beautify",
                "// Line 224:     # LATER: upstream has also minify",
                "// Line 225: "
            ]
        }
    ]
}