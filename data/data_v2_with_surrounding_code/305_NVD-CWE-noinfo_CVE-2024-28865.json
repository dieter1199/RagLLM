{
    "cve_id": "CVE-2024-28865",
    "cve_description": "django-wiki is a wiki system for Django. Installations of django-wiki prior to version 0.10.1 are vulnerable to maliciously crafted article content that can cause severe use of server CPU through a regular expression loop. Version 0.10.1 fixes this issue. As a workaround, close off access to create and edit articles by anonymous users.",
    "cve_publish_date": "2024-03-18T22:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Merge pull request from GHSA-wj85-w4f4-xh8h (#1350)\n\n* ReDos: Apply `re.escape` to unsafe variable `keyword` before passing to `re.compile`\r\n\r\n* Replace ReDos-vulnerable regex with the one from upstream Python-Markdown\r\n\r\n* ReDos backtracking fix for macro plugin\r\n\r\n* Add release note for GHSA-wj85-w4f4-xh8h\r\n\r\n* Bump release date\r\n\r\n* Bump version",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "codehilite.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "14",
            "number_of_lines_deleted_vulnerable_to_cve": "8",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 28: ",
                "// Line 29: ",
                "// Line 30: class WikiFencedBlockPreprocessor(Preprocessor):",
                "// Line 31:     \"\"\"",
                "// Line 32:     This is a replacement of markdown.extensions.fenced_code which will",
                "// Line 33:     directly and without configuration options invoke the vanilla CodeHilite",
                "// Line 34:     extension.",
                "// Line 35:     \"\"\"",
                "// Line 36: ",
                "// Line 37:     FENCED_BLOCK_RE = re.compile(",
                "// vulnerable line: 38: r\"\"\"",
                "// vulnerable line: 39: (?P<fence>^(?:~{3,}|`{3,}))[ ]*         # Opening ``` or ~~~",
                "// vulnerable line: 40: (\\{?\\.?(?P<lang>[a-zA-Z0-9_+-]*))?[ ]*  # Optional {, and lang",
                "// vulnerable line: 41: # Optional highlight lines, single- or double-quote-delimited",
                "// vulnerable line: 42: (hl_lines=(?P<quot>\"|')(?P<hl_lines>.*?)(?P=quot))?[ ]*",
                "// Line 43: }?[ ]*",
                "// Line 44:                                 # Optional closing }",
                "// Line 45: (?P<code>.*?)(?<=",
                "// Line 46: )",
                "// vulnerable line: 47: (?P=fence)[ ]*$\"\"\",",
                "// Line 48:         re.MULTILINE | re.DOTALL | re.VERBOSE,",
                "// Line 49:     )",
                "// Line 50:     CODE_WRAP = \"<pre>%s</pre>\"",
                "// Line 51: ",
                "// Line 52:     def __init__(self, md):",
                "// Line 53:         super().__init__(md)",
                "// Line 54: ",
                "// Line 55:         self.checked_for_codehilite = False",
                "// Line 56:         self.codehilite_conf = {}",
                "// Line 57: "
            ]
        },
        {
            "filename_of_changes": "macro.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "7",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 4: from django.template.loader import render_to_string",
                "// Line 5: from django.utils.translation import gettext as _",
                "// Line 6: from wiki.core.markdown import add_to_registry",
                "// Line 7: from wiki.plugins.macros import settings",
                "// Line 8: from wiki.plugins.macros.mdx import toc",
                "// Line 9: ",
                "// Line 10: # See:",
                "// Line 11: # http://stackoverflow.com/questions/430759/regex-for-managing-escaped-characters-for-items-like-string-literals",
                "// Line 12: re_sq_short = r\"'([^'\\]*(?:\\.[^'\\]*)*)'\"",
                "// Line 13: ",
                "// vulnerable line: 14: MACRO_RE = r\"(\\[(?P<macro>\\w+)(?P<kwargs>\\s\\w+\\:.+)*\\])\"",
                "// Line 15: KWARG_RE = re.compile(",
                "// Line 16:     r\"\\s*(?P<arg>\\w+)(:(?P<value>([^']+|%s)))?\" % re_sq_short, re.IGNORECASE",
                "// Line 17: )",
                "// Line 18: ",
                "// Line 19: ",
                "// Line 20: class MacroExtension(markdown.Extension):",
                "// Line 21: ",
                "// Line 22:     \"\"\"Macro plugin markdown extension for django-wiki.\"\"\"",
                "// Line 23: ",
                "// Line 24:     def extendMarkdown(self, md):"
            ]
        },
        {
            "filename_of_changes": "wiki_tags.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 122:         except ValueError:",
                "// Line 123:             match_end = len(content)",
                "// Line 124:         all_before = clean_text(content[:match_start])",
                "// Line 125:         match = content[match_start:match_end]",
                "// Line 126:         all_after = clean_text(content[match_end:])",
                "// Line 127:         before_words = all_before[-max_words // 2 :]",
                "// Line 128:         after_words = all_after[: max_words - len(before_words)]",
                "// Line 129:         before = \" \".join(before_words)",
                "// Line 130:         after = \" \".join(after_words)",
                "// Line 131:         html = (\"%s %s %s\" % (before, striptags(match), after)).strip()",
                "// vulnerable line: 132: kw_p = re.compile(r\"(\\S*%s\\S*)\" % keyword, re.IGNORECASE)",
                "// Line 133:         html = kw_p.sub(r\"<strong>\u0001</strong>\", html)",
                "// Line 134: ",
                "// Line 135:         return mark_safe(html)",
                "// Line 136: ",
                "// Line 137:     return \" \".join(clean_text(content)[:max_words])",
                "// Line 138: ",
                "// Line 139: ",
                "// Line 140: @register.filter",
                "// Line 141: def can_read(obj, user):",
                "// Line 142:     \"\"\""
            ]
        }
    ]
}