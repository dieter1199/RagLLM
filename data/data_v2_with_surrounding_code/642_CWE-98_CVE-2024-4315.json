{
    "cve_id": "CVE-2024-4315",
    "cve_description": "parisneo/lollms version 9.5 is vulnerable to Local File Inclusion (LFI) attacks due to insufficient path sanitization. The `sanitize_path_from_endpoint` function fails to properly sanitize Windows-style paths (backward slash `\\`), allowing attackers to perform directory traversal attacks on Windows systems. This vulnerability can be exploited through various routes, including `personalities` and `/del_preset`, to read or delete any file on the Windows filesystem, compromising the system's availability.",
    "cve_publish_date": "2024-06-12T01:15Z",
    "cwe_id": "CWE-98",
    "cwe_name": "Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')",
    "cwe_description": "The PHP application receives input from an upstream component, but it does not restrict or incorrectly restricts the input before its usage in \"require,\" \"include,\" or similar functions.",
    "commit_message": "updated security",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "security.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "12",
            "number_of_lines_deleted_vulnerable_to_cve": "9",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 99: ",
                "// Line 100: class InvalidFilePathError(Exception):",
                "// Line 101:     pass",
                "// Line 102: ",
                "// Line 103: ",
                "// Line 104: def sanitize_path(path: str, allow_absolute_path: bool = False, error_text=\"Absolute database path detected\", exception_text=\"Detected an attempt of path traversal or command injection. Are you kidding me?\"):",
                "// Line 105:     \"\"\"",
                "// Line 106:     Sanitize a given file path by checking for potentially dangerous patterns and unauthorized characters.",
                "// Line 107: ",
                "// Line 108:     Args:",
                "// vulnerable line: 109: -----",
                "// Line 110:     path (str): The file path to sanitize.",
                "// Line 111:     allow_absolute_path (bool, optional): Whether to allow absolute paths. Default is False.",
                "// Line 112:     error_text (str, optional): The error message to display if an absolute path is detected. Default is \"Absolute database path detected\".",
                "// Line 113:     exception_text (str, optional): The exception message to display if a path traversal, command injection, or unauthorized character is detected. Default is \"Detected an attempt of path traversal or command injection. Are you kidding me?\".",
                "// Line 114: ",
                "// Line 115:     Raises:",
                "// Line 116:     ------",
                "// Line 117:     HTTPException: If an absolute path, path traversal, command injection, or unauthorized character is detected.",
                "// Line 118: ",
                "// Line 119:     Returns:",
                "// Line 120:     -------",
                "// Line 121:     str: The sanitized file path.",
                "// Line 122: ",
                "// vulnerable line: 123: Note:",
                "// vulnerable line: 124: -----",
                "// Line 125:     This function checks for patterns like \"....\", multiple forward slashes, and command injection attempts like $(whoami). It also checks for unauthorized punctuation characters, excluding the dot (.) character.",
                "// Line 126:     \"\"\"    ",
                "// Line 127:     if not allow_absolute_path and path.strip().startswith(\"/\"):",
                "// vulnerable line: 128: raise HTTPException(status_code=400, detail=exception_text)",
                "// Line 129: ",
                "// Line 130:     if path is None:",
                "// Line 131:         return path",
                "// Line 132: ",
                "// Line 133:     # Regular expression to detect patterns like \"....\", multiple forward slashes, and command injection attempts like $(whoami)",
                "// Line 134:     suspicious_patterns = re.compile(r'(\\.\\.+)|(/+/)|(\\$\\(.*\\))')",
                "// Line 135: ",
                "// Line 136:     if suspicious_patterns.search(str(path)) or ((not allow_absolute_path) and Path(path).is_absolute()):",
                "// vulnerable line: 137: ASCIIColors.error(error_text)",
                "// vulnerable line: 138: raise HTTPException(status_code=400, detail=exception_text)",
                "// Line 139: ",
                "// Line 140:     # Detect if any unauthorized characters, excluding the dot character, are present in the path",
                "// Line 141:     unauthorized_chars = set('!\"#$%&'()*+,:;<=>?@[]^`{|}~')",
                "// Line 142:     if any(char in unauthorized_chars for char in path):",
                "// vulnerable line: 143: raise HTTPException(status_code=400, detail=exception_text)",
                "// Line 144: ",
                "// Line 145:     if not allow_absolute_path:",
                "// Line 146:         path = path.lstrip('/')",
                "// Line 147: ",
                "// Line 148:     return path",
                "// Line 149: ",
                "// Line 150: ",
                "// Line 151: def sanitize_path_from_endpoint(path: str, error_text: str = \"A suspected LFI attack detected. The path sent to the server has suspicious elements in it!\", exception_text: str = \"Invalid path!\") -> str:",
                "// Line 152:     \"\"\"",
                "// vulnerable line: 153: Sanitize a given file path from an endpoint by checking for potentially dangerous patterns and unauthorized characters.",
                "// Line 154: ",
                "// Line 155:     Args:",
                "// vulnerable line: 156: -----",
                "// Line 157:     path (str): The file path to sanitize.",
                "// vulnerable line: 158: error_text (str, optional): The error message to display if a path traversal or unauthorized character is detected. Default is \"A suspected LFI attack detected. The path sent to the server has suspicious elements in it!\".",
                "// vulnerable line: 159: exception_text (str, optional): The exception message to display if an absolute path or invalid character is detected. Default is \"Invalid path!\".",
                "// Line 160: ",
                "// Line 161:     Raises:",
                "// Line 162:     ------",
                "// Line 163:     HTTPException: If an absolute path, path traversal, or unauthorized character is detected.",
                "// Line 164: ",
                "// Line 165:     Returns:",
                "// Line 166:     -------",
                "// Line 167:     str: The sanitized file path.",
                "// Line 168: ",
                "// vulnerable line: 169: Note:",
                "// vulnerable line: 170: -----",
                "// vulnerable line: 171: This function checks for patterns like \"....\" and multiple forward slashes. It also checks for unauthorized punctuation characters, excluding the dot (.) character.",
                "// Line 172:     \"\"\"",
                "// Line 173: ",
                "// Line 174:     if path is None:",
                "// Line 175:         return path",
                "// Line 176: ",
                "// Line 177:     if path.strip().startswith(\"/\"):",
                "// vulnerable line: 178: raise HTTPException(status_code=400, detail=exception_text)",
                "// Line 179: ",
                "// Line 180:     # Regular expression to detect patterns like \"....\" and multiple forward slashes",
                "// Line 181:     suspicious_patterns = re.compile(r'(\\.\\.+)|(/+/)')",
                "// Line 182: ",
                "// Line 183:     # Detect if any unauthorized characters, excluding the dot character, are present in the path",
                "// Line 184:     unauthorized_chars = set('!\"#$%&'()*+,:;<=>?@[]^`{|}~')",
                "// Line 185:     if any(char in unauthorized_chars for char in path):",
                "// vulnerable line: 186: raise HTTPException(status_code=400, detail=exception_text)",
                "// Line 187: ",
                "// Line 188:     if suspicious_patterns.search(path) or Path(path).is_absolute():",
                "// vulnerable line: 189: ASCIIColors.error(error_text)",
                "// vulnerable line: 190: raise HTTPException(status_code=400, detail=exception_text)",
                "// Line 191: ",
                "// Line 192:     path = path.lstrip('/')",
                "// Line 193:     return path",
                "// Line 194: ",
                "// Line 195: ",
                "// Line 196: def forbid_remote_access(lollmsElfServer, exception_text = \"This functionality is forbidden if the server is exposed\"):",
                "// Line 197:     if not lollmsElfServer.config.force_accept_remote_access and lollmsElfServer.config.host!=\"localhost\" and lollmsElfServer.config.host!=\"127.0.0.1\":",
                "// Line 198:         raise Exception(exception_text)",
                "// Line 199: ",
                "// Line 200: def validate_path(path, allowed_paths:List[str|Path]):"
            ]
        }
    ]
}