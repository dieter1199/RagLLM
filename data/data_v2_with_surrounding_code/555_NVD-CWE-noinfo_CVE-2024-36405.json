{
    "cve_id": "CVE-2024-36405",
    "cve_description": "liboqs is a C-language cryptographic library that provides implementations of post-quantum cryptography algorithms. A control-flow timing lean has been identified in the reference implementation of the Kyber key encapsulation mechanism when it is compiled with Clang 15-18 for `-Os`, `-O1`, and other compilation options. A proof-of-concept local attack on the reference implementation leaks the entire ML-KEM 512 secret key in ~10 minutes using end-to-end decapsulation timing measurements. The issue has been fixed in version 0.10.1. As a possible workaround, some compiler options may produce vectorized code that does not leak secret information, however relying on these compiler options as a workaround may not be reliable.",
    "cve_publish_date": "2024-06-10T13:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Fixed secret-dependent branch in poly_frommsg introduced by recent versions of clang with some flags (Thanks to Antoon Purnal for pointing this out!)",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "poly.c",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 159: * Name:        poly_frommsg",
                "// Line 160: *",
                "// Line 161: * Description: Convert 32-byte message to polynomial",
                "// Line 162: *",
                "// Line 163: * Arguments:   - poly *r: pointer to output polynomial",
                "// Line 164: *              - const uint8_t *msg: pointer to input message",
                "// Line 165: **************************************************/",
                "// Line 166: void poly_frommsg(poly *r, const uint8_t msg[KYBER_INDCPA_MSGBYTES])",
                "// Line 167: {",
                "// Line 168:   unsigned int i,j;",
                "// vulnerable line: 169: int16_t mask;",
                "// Line 170: ",
                "// Line 171: #if (KYBER_INDCPA_MSGBYTES != KYBER_N/8)",
                "// Line 172: #error \"KYBER_INDCPA_MSGBYTES must be equal to KYBER_N/8 bytes!\"",
                "// Line 173: #endif",
                "// Line 174: ",
                "// Line 175:   for(i=0;i<KYBER_N/8;i++) {",
                "// Line 176:     for(j=0;j<8;j++) {",
                "// vulnerable line: 177: mask = -(int16_t)((msg[i] >> j)&1);",
                "// vulnerable line: 178: r->coeffs[8*i+j] = mask & ((KYBER_Q+1)/2);",
                "// Line 179:     }",
                "// Line 180:   }",
                "// Line 181: }",
                "// Line 182: ",
                "// Line 183: /*************************************************",
                "// Line 184: * Name:        poly_tomsg",
                "// Line 185: *",
                "// Line 186: * Description: Convert polynomial to 32-byte message",
                "// Line 187: *",
                "// Line 188: * Arguments:   - uint8_t *msg: pointer to output message"
            ]
        },
        {
            "filename_of_changes": "verify.c",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "7",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "verify.h",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        }
    ]
}