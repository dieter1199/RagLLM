{
    "cve_id": "CVE-2024-24749",
    "cve_description": "GeoServer is an open source server that allows users to share and edit geospatial data. Prior to versions 2.23.5 and 2.24.3, if GeoServer is deployed in the Windows operating system using an Apache Tomcat web application server, it is possible to bypass existing input validation in the GeoWebCache ByteStreamController class and read arbitrary classpath resources with specific file name extensions. If GeoServer is also deployed as a web archive using the data directory embedded in the `geoserver.war` file (rather than an external data directory), it will likely be possible to read specific resources to gain administrator privileges. However, it is very unlikely that production environments will be using the embedded data directory since, depending on how GeoServer is deployed, it will be erased and re-installed (which would also reset to the default password) either every time the server restarts or every time a new GeoServer WAR is installed and is therefore difficult to maintain. An external data directory will always be used if GeoServer is running in standalone mode (via an installer or a binary). Versions 2.23.5 and 2.24.3 contain a patch for the issue. Some workarounds are available. One may change from a Windows environment to a Linux environment; or change from Apache Tomcat to Jetty application server. One may also disable anonymous access to the embeded GeoWebCache administration and status pages.",
    "cve_publish_date": "2024-07-01T14:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "[GWC-1210] Improve input validation in ByteStreamController (#1211)",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "ByteStreamController.java",
            "code_language": "Java",
            "number_of_lines_added_for_mitigation": "13",
            "number_of_lines_deleted_vulnerable_to_cve": "14",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 10:  * <p>You should have received a copy of the GNU Lesser General Public License along with this",
                "// Line 11:  * program. If not, see <http://www.gnu.org/licenses/>.",
                "// Line 12:  *",
                "// Line 13:  * @author David Vick, Boundless, Copyright 2017",
                "// Line 14:  *     <p>File was reworked from ByteStreamerRestlet.java",
                "// Line 15:  */",
                "// Line 16: package org.geowebcache.rest.controller;",
                "// Line 17: ",
                "// Line 18: import java.io.IOException;",
                "// Line 19: import java.io.InputStream;",
                "// vulnerable line: 20: import java.io.UnsupportedEncodingException;",
                "// Line 21: import java.net.URL;",
                "// Line 22: import java.net.URLDecoder;",
                "// Line 23: import java.util.List;",
                "// Line 24: import java.util.logging.Logger;",
                "// Line 25: import java.util.regex.Pattern;",
                "// Line 26: import javax.servlet.ServletOutputStream;",
                "// Line 27: import javax.servlet.http.HttpServletRequest;",
                "// Line 28: import javax.servlet.http.HttpServletResponse;",
                "// Line 29: import org.geotools.util.logging.Logging;",
                "// Line 30: import org.geowebcache.GeoWebCacheExtensions;",
                "// Line 55:                 if (bundle == null) {",
                "// Line 56:                     List<WebResourceBundle> result =",
                "// Line 57:                             GeoWebCacheExtensions.extensions(WebResourceBundle.class);",
                "// Line 58:                     if (result.isEmpty()) {",
                "// Line 59:                         bundle = DEFAULT_BUNDLE;",
                "// Line 60:                     } else {",
                "// Line 61:                         if (result.size() > 1) {",
                "// Line 62:                             log.warning(",
                "// Line 63:                                     \"Multiple web resource bundles present, using \"",
                "// Line 64:                                             + result.get(0).getClass().getName());",
                "// vulnerable line: 65: }",
                "// Line 66:                         bundle = result.get(0);",
                "// vulnerable line: 67: }",
                "// vulnerable line: 68: }",
                "// vulnerable line: 69: }",
                "// vulnerable line: 70: }",
                "// Line 71:         URL resource = bundle.apply(path);",
                "// Line 72:         if (resource == null && bundle != DEFAULT_BUNDLE) {",
                "// Line 73:             resource = DEFAULT_BUNDLE.apply(path);",
                "// vulnerable line: 74: }",
                "// Line 75:         return resource;",
                "// vulnerable line: 76: }",
                "// Line 77: ",
                "// Line 78:     static final Pattern UNSAFE_RESOURCE = Pattern.compile(\"^/|/\\.\\./|^\\.\\./|\\.class$\");",
                "// Line 79: ",
                "// Line 80:     // \"gwc/rest/web/openlayers3/ol.js\" -> openlayers3/ol.js",
                "// Line 81:     // \"/rest/web/openlayers3/ol.js\" -> openlayers3/ol.js",
                "// vulnerable line: 82: String getFileName(HttpServletRequest request) {",
                "// vulnerable line: 83: String path = request.getPathInfo();",
                "// vulnerable line: 84: if (path.indexOf(\"/rest/web\") != 0) {",
                "// vulnerable line: 85: path = path.substring(path.indexOf(\"/rest/web\"));",
                "// vulnerable line: 86: }",
                "// vulnerable line: 87: return path.substring(\"/rest/web/\".length());",
                "// vulnerable line: 88: }",
                "// Line 89: ",
                "// Line 90:     @RequestMapping(value = \"/web/**\", method = RequestMethod.GET)",
                "// vulnerable line: 91: ResponseEntity<?> doGet(HttpServletRequest request, HttpServletResponse response) {",
                "// vulnerable line: 92: final String filename;",
                "// vulnerable line: 93: try {",
                "// vulnerable line: 94: filename = URLDecoder.decode(getFileName(request), \"UTF-8\");",
                "// vulnerable line: 95: } catch (UnsupportedEncodingException e1) {",
                "// vulnerable line: 96: throw new IllegalStateException(",
                "// vulnerable line: 97: \"Could not decode encoding UTF-8\", e1); // Should never happen",
                "// vulnerable line: 98: }",
                "// Line 99: ",
                "// Line 100:         // Just to make sure we don't allow access to arbitrary resources",
                "// Line 101:         if (UNSAFE_RESOURCE.matcher(filename).find()) {",
                "// Line 102:             return new ResponseEntity<>(HttpStatus.FORBIDDEN);",
                "// vulnerable line: 103: }",
                "// Line 104: ",
                "// Line 105:         URL resource = getResource(filename);",
                "// Line 106:         if (resource == null) {",
                "// Line 107:             return new ResponseEntity<>(HttpStatus.NOT_FOUND);",
                "// vulnerable line: 108: }",
                "// Line 109: ",
                "// Line 110:         String[] filenameParts = filename.split(\"\\.\");",
                "// Line 111:         String extension = filenameParts[filenameParts.length - 1];",
                "// Line 112: ",
                "// Line 113:         MimeType mime = null;",
                "// vulnerable line: 114: try {",
                "// Line 115:             mime = MimeType.createFromExtension(extension);",
                "// Line 116:         } catch (MimeException e) {",
                "// Line 117:             return new ResponseEntity<Object>(",
                "// Line 118:                     \"Unable to create MimeType for \" + extension, HttpStatus.INTERNAL_SERVER_ERROR);",
                "// vulnerable line: 119: }",
                "// Line 120: ",
                "// Line 121:         // TODO write ByteArrayOutputStream ResponseEntity",
                "// Line 122: ",
                "// Line 123:         response.setContentType(mime.getFormat());",
                "// Line 124:         try (InputStream inputStream = resource.openStream();",
                "// Line 125:                 ServletOutputStream outputStream = response.getOutputStream(); ) {",
                "// Line 126:             StreamUtils.copy(inputStream, outputStream);",
                "// Line 127:         } catch (IOException e) {",
                "// Line 128:             return new ResponseEntity<Object>(\"Internal error\", HttpStatus.INTERNAL_SERVER_ERROR);",
                "// vulnerable line: 129: }",
                "// Line 130: ",
                "// Line 131:         return new ResponseEntity<>(HttpStatus.OK);",
                "// vulnerable line: 132: }",
                "// vulnerable line: 133: }"
            ]
        },
        {
            "filename_of_changes": "ByteStreamControllerTest.java",
            "code_language": "Java",
            "number_of_lines_added_for_mitigation": "16",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        }
    ]
}