{
    "cve_id": "CVE-2024-27088",
    "cve_description": "es5-ext contains ECMAScript 5 extensions. Passing functions with very long names or complex default argument names into `function#copy` or `function#toStringTokens` may cause the script to stall. The vulnerability is patched in v0.10.63.",
    "cve_publish_date": "2024-02-26T17:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fix: Do not rely on problematic regex\n\nAddresses #201",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "copy.js",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "7",
            "number_of_lines_deleted_vulnerable_to_cve": "6",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: \"use strict\";",
                "// Line 2: ",
                "// Line 3: var mixin         = require(\"../../object/mixin\")",
                "// vulnerable line: 4: , validFunction = require(\"../valid-function\")",
                "// Line 5:   , re            = /^\\s*function\\s*([\u0000-')-￿]+)*\\s*\\(([\u0000-(*-￿]*)\\)\\s*\\{/;",
                "// Line 6: ",
                "// Line 7: module.exports = function () {",
                "// vulnerable line: 8: var match = String(validFunction(this)).match(re), fn;",
                "// Line 9: ",
                "// Line 10:     // eslint-disable-next-line no-new-func",
                "// vulnerable line: 11: fn = new Function(",
                "// Line 12:         \"fn\",",
                "// Line 13:         \"return function \" +",
                "// vulnerable line: 14: match[1].trim() +",
                "// Line 15:             \"(\" +",
                "// vulnerable line: 16: match[2] +",
                "// Line 17:             \") { return fn.apply(this, arguments); };\"",
                "// Line 18:     )(this);",
                "// Line 19:     try { mixin(fn, this); }",
                "// Line 20:     catch (ignore) {}",
                "// Line 21:     return fn;",
                "// Line 22: };"
            ]
        }
    ]
}