{
    "cve_id": "CVE-2024-29036",
    "cve_description": "Saleor Storefront is software for building e-commerce experiences. Prior to commit 579241e75a5eb332ccf26e0bcdd54befa33f4783, when any user authenticates in the storefront, anonymous users are able to access their data. The session is leaked through cache and can be accessed by anyone. Users should upgrade to a version that incorporates commit 579241e75a5eb332ccf26e0bcdd54befa33f4783 or later to receive a patch. A possible workaround is to temporarily disable authentication by changing the usage of `createSaleorAuthClient()`.",
    "cve_publish_date": "2024-03-20T21:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Update README",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "README.md",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "10",
            "number_of_lines_deleted_vulnerable_to_cve": "8",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 35: ### Next.js App Router",
                "// Line 36: ",
                "// Line 37: Next.js 13+ App Router is the recommended way to use the Saleor Auth SDK. It is the easiest to set up and provides the best user experience.",
                "// Line 38: ",
                "// Line 39: In order to use Saleor Auth SDK in React Server Components, the client needs to be created in the following way:",
                "// Line 40: ",
                "// Line 41: ```ts",
                "// Line 42: import { createSaleorAuthClient } from \"@saleor/auth-sdk\";",
                "// Line 43: import { getNextServerCookiesStorage } from \"@saleor/auth-sdk/next/server\";",
                "// Line 44: ",
                "// vulnerable line: 45: const nextServerCookiesStorage = getNextServerCookiesStorage();",
                "// vulnerable line: 46: const saleorAuthClient = createSaleorAuthClient({",
                "// vulnerable line: 47: saleorApiUrl: \"…\",",
                "// vulnerable line: 48: refreshTokenStorage: nextServerCookiesStorage,",
                "// vulnerable line: 49: accessTokenStorage: nextServerCookiesStorage,",
                "// vulnerable line: 50: });",
                "// Line 51: ```",
                "// Line 52: ",
                "// Line 53: Logging in can be implemented via Server Actions:",
                "// Line 54: ",
                "// Line 55: ```tsx",
                "// Line 56: <form",
                "// Line 57:   className=\"bg-white shadow-md rounded p-8\"",
                "// Line 58:   action={async (formData) => {",
                "// Line 59:     \"use server\";",
                "// Line 60: ",
                "// vulnerable line: 61: await saleorAuthClient.signIn(",
                "// Line 62:       {",
                "// Line 63:         email: formData.get(\"email\").toString(),",
                "// Line 64:         password: formData.get(\"password\").toString(),",
                "// Line 65:       },",
                "// Line 66:       { cache: \"no-store\" },",
                "// Line 67:     );",
                "// Line 68:   }}",
                "// Line 69: >",
                "// Line 70:   {/* … rest of the form … */}",
                "// Line 71: </form>",
                "// Line 72: ```",
                "// Line 73: ",
                "// Line 74: Then, you can use `saleorAuthClient.fetchWithAuth` directly for any queries and mutations.",
                "// Line 75: ",
                "// vulnerable line: 76: For a full working example see the [Saleor Auth SDK example](https://github.com/saleor/example-auth-sdk/blob/5babda35969c35f423680b47d1446466b18b2461/app/ssr/page.tsx).",
                "// Line 77: ",
                "// Line 78: ### Next.js Pages Router with [Apollo Client](https://www.apollographql.com/docs/react/)",
                "// Line 79: ",
                "// Line 80: <details>",
                "// Line 81:   <summary>Step-by-step video tutorial</summary>",
                "// Line 82: ",
                "// Line 83: Check the following [step-by-step video](https://www.youtube.com/watch?v=XY1t8JiPwk0) guide on how to set this up.",
                "// Line 84: [![Saleor Auth with Next.js](https://img.youtube.com/vi/t6nxBk7JHCw/0.jpg)](https://www.youtube.com/watch?v=XY1t8JiPwk0)",
                "// Line 85: ",
                "// Line 86: </details>",
                "// Line 103: ",
                "// Line 104: const saleorApiUrl = \"<your Saleor API URL>\";",
                "// Line 105: ",
                "// Line 106: // Saleor Client",
                "// Line 107: const saleorAuthClient = createSaleorAuthClient({ saleorApiUrl });",
                "// Line 108: ",
                "// Line 109: // Apollo Client",
                "// Line 110: const httpLink = createHttpLink({",
                "// Line 111:   uri: saleorApiUrl,",
                "// Line 112:   fetch: saleorAuthClient.fetchWithAuth,",
                "// vulnerable line: 113: });",
                "// Line 114: ",
                "// Line 115: export const apolloClient = new ApolloClient({",
                "// Line 116:   link: httpLink,",
                "// Line 117:   cache: new InMemoryCache(),",
                "// vulnerable line: 118: });",
                "// Line 119: ",
                "// Line 120: export default function App({ Component, pageProps }: AppProps) {",
                "// Line 121:   useAuthChange({",
                "// Line 122:     saleorApiUrl,",
                "// Line 123:     onSignedOut: () => apolloClient.resetStore(),",
                "// Line 124:     onSignedIn: () => {",
                "// Line 125:       apolloClient.refetchQueries({ include: \"all\" });",
                "// Line 126:     },",
                "// vulnerable line: 127: });",
                "// Line 128: ",
                "// Line 129:   return (",
                "// Line 130:     <SaleorAuthProvider client={saleorAuthClient}>",
                "// Line 131:       <ApolloProvider client={apolloClient}>",
                "// Line 132:         <Component {...pageProps} />",
                "// Line 133:       </ApolloProvider>",
                "// Line 134:     </SaleorAuthProvider>",
                "// Line 135:   );",
                "// Line 136: }",
                "// Line 137: ```",
                "// Line 162:   const { signIn, signOut } = useSaleorAuthContext();",
                "// Line 163: ",
                "// Line 164:   const { data: currentUser, loading } = useQuery(CurrentUserDocument);",
                "// Line 165: ",
                "// Line 166:   const submitHandler = async (event: FormEvent<HTMLFormElement>) => {",
                "// Line 167:     event.preventDefault();",
                "// Line 168: ",
                "// Line 169:     const result = await signIn({",
                "// Line 170:       email: \"admin@example.com\",",
                "// Line 171:       password: \"admin\",",
                "// vulnerable line: 172: });",
                "// Line 173: ",
                "// Line 174:     if (result.data.tokenCreate.errors) {",
                "// Line 175:       // handle errors",
                "// Line 176:     }",
                "// Line 177:   };",
                "// Line 178: ",
                "// Line 179:   if (loading) {",
                "// Line 180:     return <div>Loading...</div>;",
                "// Line 181:   }",
                "// Line 182: ",
                "// Line 225: ",
                "// Line 226: const saleorApiUrl = \"<your Saleor API URL>\";",
                "// Line 227: ",
                "// Line 228: const saleorAuthClient = createSaleorAuthClient({ saleorApiUrl });",
                "// Line 229: ",
                "// Line 230: const makeUrqlClient = () =>",
                "// Line 231:   createClient({",
                "// Line 232:     url: saleorApiUrl,",
                "// Line 233:     fetch: saleorAuthClient.fetchWithAuth,",
                "// Line 234:     exchanges: [cacheExchange, fetchExchange],",
                "// vulnerable line: 235: });",
                "// Line 236: ",
                "// Line 237: export default function App({ Component, pageProps }: AppProps) {",
                "// Line 238:   // https://github.com/urql-graphql/urql/issues/297#issuecomment-504782794",
                "// Line 239:   const [urqlClient, setUrqlClient] = useState<Client>(makeUrqlClient());",
                "// Line 240: ",
                "// Line 241:   useAuthChange({",
                "// Line 242:     saleorApiUrl,",
                "// Line 243:     onSignedOut: () => setUrqlClient(makeUrqlClient()),",
                "// Line 244:     onSignedIn: () => setUrqlClient(makeUrqlClient()),",
                "// vulnerable line: 245: });",
                "// Line 246: ",
                "// Line 247:   return (",
                "// Line 248:     <SaleorAuthProvider client={saleorAuthClient}>",
                "// Line 249:       <Provider value={urqlClient}>",
                "// Line 250:         <Component {...pageProps} />",
                "// Line 251:       </Provider>",
                "// Line 252:     </SaleorAuthProvider>",
                "// Line 253:   );",
                "// Line 254: }",
                "// Line 255: ```",
                "// Line 275:     }",
                "// Line 276:   }",
                "// Line 277: `;",
                "// Line 278: ",
                "// Line 279: export default function LoginPage() {",
                "// Line 280:   const { signIn, signOut } = useSaleorAuthContext();",
                "// Line 281: ",
                "// Line 282:   const [{ data: currentUser, fetching: loading }] = useQuery({",
                "// Line 283:     query: CurrentUserDocument,",
                "// Line 284:     pause: isAuthenticating,",
                "// vulnerable line: 285: });",
                "// Line 286: ",
                "// Line 287:   const submitHandler = async (event: FormEvent<HTMLFormElement>) => {",
                "// Line 288:     event.preventDefault();",
                "// Line 289: ",
                "// Line 290:     const result = await signIn({",
                "// Line 291:       email: \"admin@example.com\",",
                "// Line 292:       password: \"admin\",",
                "// vulnerable line: 293: });",
                "// Line 294: ",
                "// Line 295:     if (result.data.tokenCreate.errors) {",
                "// Line 296:       // handle errors",
                "// Line 297:     }",
                "// Line 298:   };",
                "// Line 299: ",
                "// Line 300:   if (loading) {",
                "// Line 301:     return <div>Loading...</div>;",
                "// Line 302:   }",
                "// Line 303: ",
                "// Line 349:         email",
                "// Line 350:         firstName",
                "// Line 351:         lastName",
                "// Line 352:       }",
                "// Line 353:     }",
                "// Line 354:   `);",
                "// Line 355:   const { authURL, loading: isLoadingExternalAuth } = useSaleorExternalAuth({",
                "// Line 356:     saleorApiUrl,",
                "// Line 357:     provider: ExternalProvider.OpenIDConnect,",
                "// Line 358:     redirectURL: \"<your Next.js app>/api/auth/callback\",",
                "// vulnerable line: 359: });",
                "// Line 360: ",
                "// Line 361:   const { signOut } = useSaleorAuthContext();",
                "// Line 362: ",
                "// Line 363:   if (isLoadingExternalAuth || isLoadingCurrentUser) {",
                "// Line 364:     return <div>Loading...</div>;",
                "// Line 365:   }",
                "// Line 366: ",
                "// Line 367:   if (data?.me) {",
                "// Line 368:     return (",
                "// Line 369:       <div>",
                "// Line 400: ",
                "// Line 401: The `SaleorAuthClient` class provides you with a reset password method. If the reset password mutation is successful, it will log you in automatically, just like after a regular sign-in. The [`onSignIn` method of `useAuthChange` hook](#how-do-i-tell-my-graphql-client-to-refresh-queries-on-signin--signout) will also be triggered.",
                "// Line 402: ",
                "// Line 403: ```javascript",
                "// Line 404: const { resetPassword } = useSaleorAuthContext();",
                "// Line 405: ",
                "// Line 406: const response = await resetPassword({",
                "// Line 407:   email: \"example@mail.com\",",
                "// Line 408:   password: \"newPassword\",",
                "// Line 409:   token: \"apiToken\",",
                "// vulnerable line: 410: });",
                "// Line 411: ```"
            ]
        }
    ]
}