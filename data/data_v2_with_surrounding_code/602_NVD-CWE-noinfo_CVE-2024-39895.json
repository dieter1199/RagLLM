{
    "cve_id": "CVE-2024-39895",
    "cve_description": "Directus is a real-time API and App dashboard for managing SQL database content. A denial of service (DoS) attack by field duplication in GraphQL is a type of attack where an attacker exploits the flexibility of GraphQL to overwhelm a server by requesting the same field multiple times in a single query. This can cause the server to perform redundant computations and consume excessive resources, leading to a denial of service for legitimate users. Request to the endpoint /graphql are sent when visualizing graphs generated at a dashboard. By modifying the data sent and duplicating many times the fields a DoS attack is possible. This vulnerability is fixed in 10.12.0.",
    "cve_publish_date": "2024-07-08T17:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Merge pull request from GHSA-7hmh-pfrp-vcx4\n\n* Add gql parser limit\n\n* Add changeset\n\n* Format docs\n\n---------\n\nCo-authored-by: Pascal Jufer <pascal-jufer@bluewin.ch>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "graphql.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "6",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 35:         query = req.body.query || null;",
                "// Line 36:         variables = req.body.variables || null;",
                "// Line 37:         operationName = req.body.operationName || null;",
                "// Line 38:     }",
                "// Line 39: ",
                "// Line 40:     if (query === null) {",
                "// Line 41:         throw new InvalidPayloadError({ reason: 'Must provide query string' });",
                "// Line 42:     }",
                "// Line 43: ",
                "// Line 44:     try {",
                "// vulnerable line: 45: document = parse(new Source(query));",
                "// Line 46:     } catch (err: any) {",
                "// Line 47:         throw new GraphQLValidationError({",
                "// Line 48:             errors: [err],",
                "// Line 49:         });",
                "// Line 50:     }",
                "// Line 51: ",
                "// Line 52:     const operationAST = getOperationAST(document, operationName);",
                "// Line 53: ",
                "// Line 54:     // Mutations can't happen through GET requests",
                "// Line 55:     if (req.method === 'GET' && operationAST?.operation !== 'query') {"
            ]
        }
    ]
}