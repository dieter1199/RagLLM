{
    "cve_id": "CVE-2021-47208",
    "cve_description": "The Mojolicious module before 9.11 for Perl has a bug in format detection that can potentially be exploited for denial of service.",
    "cve_publish_date": "2024-04-08T00:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Flip format detection to fix a security issue (closes #1736)",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "Changes",
            "code_language": "Perl",
            "number_of_lines_added_for_mitigation": "15",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: ",
                "// vulnerable line: 2: 9.11  2021-03-18",
                "// Line 3:   - Improved Mojo::UserAgent to include \"Content-Length: 0\" with non-GET requests for better compatibility with broken",
                "// Line 4:     web servers.",
                "// Line 5: ",
                "// Line 6: 9.10  2021-03-14",
                "// Line 7:   - Fixed top-level --help and -h options in Mojolicious::Commands.",
                "// Line 8: ",
                "// Line 9: 9.09  2021-03-13",
                "// Line 10:   - Added comma_separated filter to Mojolicious::Validator.",
                "// Line 11:   - Fixed built-in templates to be a bit more responsive.",
                "// Line 12:   - Fixed filter list handling in Mojolicious::Validator::Validation."
            ]
        },
        {
            "filename_of_changes": "Lite.pm",
            "code_language": "Perl",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 293: Generate route with L<Mojolicious::Routes::Route/\"put\">, matching only C<PUT> requests. See",
                "// Line 294: L<Mojolicious::Guides::Tutorial> and L<Mojolicious::Guides::Routing> for more information.",
                "// Line 295: ",
                "// Line 296: =head2 under",
                "// Line 297: ",
                "// Line 298:   my $route = under sub ($c) {...};",
                "// Line 299:   my $route = under '/:foo' => sub ($c) {...};",
                "// Line 300:   my $route = under '/:foo' => {foo => 'bar'};",
                "// Line 301:   my $route = under '/:foo' => [foo => qr/\\w+/];",
                "// Line 302:   my $route = under '/:foo' => (agent => qr/Firefox/);",
                "// vulnerable line: 303: my $route = under [format => 0];",
                "// Line 304: ",
                "// Line 305: Generate nested route with L<Mojolicious::Routes::Route/\"under\">, to which all following routes are automatically",
                "// Line 306: appended. See L<Mojolicious::Guides::Tutorial> and L<Mojolicious::Guides::Routing> for more information.",
                "// Line 307: ",
                "// Line 308: =head2 websocket",
                "// Line 309: ",
                "// Line 310:   my $route = websocket '/:foo' => sub ($c) {...};",
                "// Line 311:   my $route = websocket '/:foo' => sub ($c) {...} => 'name';",
                "// Line 312:   my $route = websocket '/:foo' => {foo => 'bar'} => sub ($c) {...};",
                "// Line 313:   my $route = websocket '/:foo' => [foo => qr/\\w+/] => sub ($c) {...};"
            ]
        },
        {
            "filename_of_changes": "Match.pm",
            "code_language": "Perl",
            "number_of_lines_added_for_mitigation": "13",
            "number_of_lines_deleted_vulnerable_to_cve": "9",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 6: has [qw(endpoint root)];",
                "// Line 7: has position => 0;",
                "// Line 8: has stack    => sub { [] };",
                "// Line 9: ",
                "// Line 10: sub find { $_[0]->_match($_[0]->root, $_[1], $_[2]) }",
                "// Line 11: ",
                "// Line 12: sub path_for {",
                "// Line 13:   my ($self, $name, %values) = (shift, Mojo::Util::_options(@_));",
                "// Line 14: ",
                "// Line 15:   # Current route",
                "// vulnerable line: 16: my $route;",
                "// vulnerable line: 17: if (!$name || $name eq 'current') { return {} unless $route = $self->endpoint }",
                "// Line 18: ",
                "// Line 19:   # Find endpoint",
                "// Line 20:   else { return {path => $name} unless $route = $self->root->lookup($name) }",
                "// Line 21: ",
                "// Line 22:   # Merge values (clear format)",
                "// vulnerable line: 23: my $captures = $self->stack->[-1] // {};",
                "// vulnerable line: 24: %values = (%$captures, format => undef, %values);",
                "// vulnerable line: 25: my $pattern = $route->pattern;",
                "// vulnerable line: 26: $values{format} //= defined $captures->{format} ? $captures->{format} : $pattern->defaults->{format}",
                "// vulnerable line: 27: if $pattern->constraints->{format};",
                "// Line 28: ",
                "// vulnerable line: 29: my $path = $route->render(\\%values);",
                "// Line 30:   return {path => $path, websocket => $route->has_websocket};",
                "// Line 31: }",
                "// Line 32: ",
                "// Line 33: sub _match {",
                "// Line 34:   my ($self, $r, $c, $options) = @_;",
                "// Line 35: ",
                "// Line 36:   # Pattern",
                "// Line 37:   my $path    = $options->{path};",
                "// Line 38:   my $partial = $r->partial;",
                "// Line 39:   my $detect  = (my $endpoint = $r->is_endpoint) && !$partial;"
            ]
        },
        {
            "filename_of_changes": "MojoliciousTest.pm",
            "code_language": "Perl",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 109:   # /test8 (controller class)",
                "// Line 110:   $r->any('/test8')->to(controller => 'Foo::Bar', action => 'test');",
                "// Line 111: ",
                "// Line 112:   # /test9 (controller in development namespace)",
                "// Line 113:   $r->any('/test9')->to('bar#index');",
                "// Line 114: ",
                "// Line 115:   # /test10 (controller in both namespaces)",
                "// Line 116:   $r->any('/test10')->to('baz#index');",
                "// Line 117: ",
                "// Line 118:   # /withblock (template with blocks)",
                "// vulnerable line: 119: $r->any('/withblock')->to('foo#withBlock');",
                "// Line 120: ",
                "// Line 121:   # /staged (authentication with intermediate destination)",
                "// Line 122:   my $b = $r->any('/staged')->inline(1)->to('foo#stage1', return => 1);",
                "// Line 123:   $b->any->to(action => 'stage2');",
                "// Line 124: ",
                "// Line 125:   # /suspended (suspended intermediate destination)",
                "// Line 126:   $r->any('/suspended')->inline(1)->to('foo#suspended')->any->inline(1)->to('foo#suspended')->any->to('foo#fun');",
                "// Line 127: ",
                "// Line 128:   # /longpoll (long polling)",
                "// Line 129:   $r->any('/longpoll')->to('foo#longpoll');"
            ]
        },
        {
            "filename_of_changes": "Pattern.pm",
            "code_language": "Perl",
            "number_of_lines_added_for_mitigation": "8",
            "number_of_lines_deleted_vulnerable_to_cve": "8",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 118:       exists $defaults->{$value->[0]} ? ($part .= '?') : ($optional = 0);",
                "// Line 119:     }",
                "// Line 120: ",
                "// Line 121:     $block = $part . $block;",
                "// Line 122:   }",
                "// Line 123: ",
                "// Line 124:   # Not rooted with a slash",
                "// Line 125:   $regex = $block . $regex if $block;",
                "// Line 126: ",
                "// Line 127:   # Format",
                "// vulnerable line: 128: $regex .= _compile_format($constraints->{format}, $defaults->{format}) if $detect;",
                "// Line 129: ",
                "// Line 130:   $self->regex(qr/^$regex/ps);",
                "// Line 131: }",
                "// Line 132: ",
                "// Line 133: sub _compile_format {",
                "// vulnerable line: 134: my ($format, $default) = @_;",
                "// Line 135: ",
                "// vulnerable line: 136: # Default regex",
                "// vulnerable line: 137: return '/?(?:\\.([^/]+))?$' unless defined $format;",
                "// Line 138: ",
                "// Line 139:   # No regex",
                "// Line 140:   return '' unless $format;",
                "// Line 141: ",
                "// Line 142:   # Compile custom regex",
                "// Line 143:   my $regex = '\\.' . _compile_req($format);",
                "// vulnerable line: 144: return $default ? \"/?(?:$regex)?\\$\" : \"/?$regex\\$\";",
                "// Line 145: }",
                "// Line 146: ",
                "// Line 147: sub _compile_req {",
                "// Line 148:   my $req = shift;",
                "// Line 149:   return \"($req)\" if ref $req ne 'ARRAY';",
                "// Line 150:   return '(' . join('|', map {quotemeta} reverse sort @$req) . ')';",
                "// Line 151: }",
                "// Line 152: ",
                "// Line 153: sub _tokenize {",
                "// Line 154:   my ($self, $pattern) = @_;",
                "// Line 337:   my $captures = $pattern->match_partial(\\$path);",
                "// Line 338:   my $captures = $pattern->match_partial(\\$path, 1);",
                "// Line 339: ",
                "// Line 340: Match pattern against path and remove matching parts, format detection is disabled by default.",
                "// Line 341: ",
                "// Line 342: =head2 new",
                "// Line 343: ",
                "// Line 344:   my $pattern = Mojolicious::Routes::Pattern->new;",
                "// Line 345:   my $pattern = Mojolicious::Routes::Pattern->new('/users/:id');",
                "// Line 346:   my $pattern = Mojolicious::Routes::Pattern->new('/user/:id', id => qr/\\d+/);",
                "// vulnerable line: 347: my $pattern = Mojolicious::Routes::Pattern->new(format => 0);",
                "// Line 348: ",
                "// Line 349: Construct a new L<Mojolicious::Routes::Pattern> object and L</\"parse\"> pattern if necessary.",
                "// Line 350: ",
                "// Line 351: =head2 parse",
                "// Line 352: ",
                "// Line 353:   $pattern = $pattern->parse('/user/:id');",
                "// Line 354:   $pattern = $pattern->parse('/user/:id', id=> qr/\\d+/);",
                "// vulnerable line: 355: $pattern = $pattern->parse(format => 0);",
                "// Line 356: ",
                "// Line 357: Parse pattern.",
                "// Line 358: ",
                "// Line 359: =head2 render",
                "// Line 360: ",
                "// Line 361:   my $path = $pattern->render({id => 24});",
                "// Line 362:   my $path = $pattern->render({id => 24}, 1);",
                "// Line 363: ",
                "// Line 364: Render pattern into a path with parameters, format rendering is disabled by default.",
                "// Line 365: "
            ]
        },
        {
            "filename_of_changes": "Route.pm",
            "code_language": "Perl",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 214:   return {%auto, %custom};",
                "// Line 215: }",
                "// Line 216: ",
                "// Line 217: sub _route {",
                "// Line 218:   my $self = shift;",
                "// Line 219: ",
                "// Line 220:   my $route = $self->add_child(__PACKAGE__->new->parse(@_))->children->[-1];",
                "// Line 221:   croak qq{Route pattern \"@{[$route->pattern->unparsed]}\" contains a reserved stash value}",
                "// Line 222:     if grep { $self->is_reserved($_) } @{$route->pattern->placeholders};",
                "// Line 223:   my $format = $self->pattern->constraints->{format};",
                "// vulnerable line: 224: $route->pattern->constraints->{format} //= 0 if defined $format && !$format;",
                "// Line 225: ",
                "// Line 226:   return $route;",
                "// Line 227: }",
                "// Line 228: ",
                "// Line 229: 1;",
                "// Line 230: ",
                "// Line 231: =encoding utf8",
                "// Line 232: ",
                "// Line 233: =head1 NAME",
                "// Line 234: ",
                "// Line 454: (except for the HTTP methods to match, which are implied). See L<Mojolicious::Guides::Tutorial> and",
                "// Line 455: L<Mojolicious::Guides::Routing> for more information.",
                "// Line 456: ",
                "// Line 457:   # Route with destination",
                "// Line 458:   $r->options('/user')->to('user#overview');",
                "// Line 459: ",
                "// Line 460: =head2 parse",
                "// Line 461: ",
                "// Line 462:   $r = $r->parse('/user/:id');",
                "// Line 463:   $r = $r->parse('/user/:id', id => qr/\\d+/);",
                "// vulnerable line: 464: $r = $r->parse(format => 0);",
                "// Line 465: ",
                "// Line 466: Parse pattern.",
                "// Line 467: ",
                "// Line 468: =head2 patch",
                "// Line 469: ",
                "// Line 470:   my $route = $r->patch;",
                "// Line 471:   my $route = $r->patch('/:foo');",
                "// Line 472:   my $route = $r->patch('/:foo' => sub ($c) {...});",
                "// Line 473:   my $route = $r->patch('/:foo' => sub ($c) {...} => 'name');",
                "// Line 474:   my $route = $r->patch('/:foo' => {foo => 'bar'} => sub ($c) {...});",
                "// Line 582: ",
                "// Line 583: Stringify the whole route.",
                "// Line 584: ",
                "// Line 585: =head2 under",
                "// Line 586: ",
                "// Line 587:   my $route = $r->under(sub ($c) {...});",
                "// Line 588:   my $route = $r->under('/:foo' => sub ($c) {...});",
                "// Line 589:   my $route = $r->under('/:foo' => {foo => 'bar'});",
                "// Line 590:   my $route = $r->under('/:foo' => [foo => qr/\\w+/]);",
                "// Line 591:   my $route = $r->under('/:foo' => (agent => qr/Firefox/));",
                "// vulnerable line: 592: my $route = $r->under([format => 0]);",
                "// Line 593: ",
                "// Line 594: Generate L<Mojolicious::Routes::Route> object for a nested route with its own intermediate destination, takes the same",
                "// Line 595: arguments as L</\"any\"> (except for the HTTP methods to match, which are not available). See",
                "// Line 596: L<Mojolicious::Guides::Tutorial> and L<Mojolicious::Guides::Routing> for more information.",
                "// Line 597: ",
                "// Line 598:   # Longer version",
                "// Line 599:   $r->any('/:foo' => sub ($c) {...})->inline(1);",
                "// Line 600: ",
                "// Line 601:   # Intermediate destination and prefix shared between two routes",
                "// Line 602:   my $auth = $r->under('/user')->to('user#auth');"
            ]
        },
        {
            "filename_of_changes": "Routing.pod",
            "code_language": "Perl",
            "number_of_lines_added_for_mitigation": "10",
            "number_of_lines_deleted_vulnerable_to_cve": "27",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 545: ",
                "// Line 546: Every destination is just a snapshot of the stash at the time the route matched, and only the C<format> value is shared",
                "// Line 547: by all of them. For a little more power you can introspect the preceding and succeeding destinations with",
                "// Line 548: L<Mojolicious::Controller/\"match\">.",
                "// Line 549: ",
                "// Line 550:   # Action of the fourth dispatch cycle",
                "// Line 551:   my $action = $c->match->stack->[3]{action};",
                "// Line 552: ",
                "// Line 553: =head2 Formats",
                "// Line 554: ",
                "// vulnerable line: 555: File extensions like C<.html> and C<.txt> at the end of a route are automatically detected and stored in the stash",
                "// vulnerable line: 556: value C<format>.",
                "// Line 557: ",
                "// vulnerable line: 558: # /foo      -> {controller => 'foo', action => 'bar'}",
                "// vulnerable line: 559: # /foo.html -> {controller => 'foo', action => 'bar', format => 'html'}",
                "// vulnerable line: 560: # /foo.txt  -> {controller => 'foo', action => 'bar', format => 'txt'}",
                "// vulnerable line: 561: $r->get('/foo')->to('foo#bar');",
                "// Line 562: ",
                "// vulnerable line: 563: This for example, allows multiple templates in different formats to share the same action code. Restrictive",
                "// vulnerable line: 564: placeholders can also be used to limit the allowed formats.",
                "// Line 565: ",
                "// Line 566:   # /foo.txt -> undef",
                "// Line 567:   # /foo.rss -> {controller => 'foo', action => 'bar', format => 'rss'}",
                "// Line 568:   # /foo.xml -> {controller => 'foo', action => 'bar', format => 'xml'}",
                "// Line 569:   $r->get('/foo' => [format => ['rss', 'xml']])->to('foo#bar');",
                "// Line 570: ",
                "// Line 571: A C<format> value can also be passed to L<Mojolicious::Controller/\"url_for\">.",
                "// Line 572: ",
                "// Line 573:   # /foo/23.txt -> {controller => 'foo', action => 'bar', id => 23, format => 'txt'}",
                "// Line 574:   $r->get('/foo/:id')->to('foo#bar')->name('baz');",
                "// Line 575: ",
                "// Line 576:   # Generate URL \"/foo/24.txt\" for route \"baz\"",
                "// Line 577:   my $url = $c->url_for('baz', id => 24, format => 'txt');",
                "// Line 578: ",
                "// vulnerable line: 579: Or you can just disable format detection with a special type of restrictive placeholder, which gets inherited by nested",
                "// vulnerable line: 580: routes, and then re-enable it on demand.",
                "// Line 581: ",
                "// vulnerable line: 582: # /foo      -> {controller => 'foo', action => 'bar'}",
                "// vulnerable line: 583: # /foo.html -> undef",
                "// vulnerable line: 584: $r->get('/foo' => [format => 0])->to('foo#bar');",
                "// Line 585: ",
                "// vulnerable line: 586: # /foo      -> {controller => 'foo', action => 'bar'}",
                "// vulnerable line: 587: # /foo.html -> undef",
                "// vulnerable line: 588: # /baz      -> undef",
                "// vulnerable line: 589: # /baz.txt  -> {controller => 'baz', action => 'yada', format => 'txt'}",
                "// vulnerable line: 590: # /baz.html -> {controller => 'baz', action => 'yada', format => 'html'}",
                "// vulnerable line: 591: # /baz.xml  -> undef",
                "// vulnerable line: 592: my $inactive = $r->under([format => 0]);",
                "// vulnerable line: 593: $inactive->get('/foo')->to('foo#bar');",
                "// vulnerable line: 594: $inactive->get('/baz' => [format => ['txt', 'html']])->to('baz#yada');",
                "// Line 595: ",
                "// Line 596: =head2 WebSockets",
                "// Line 597: ",
                "// Line 598: With the method L<Mojolicious::Routes::Route/\"websocket\"> you can restrict access to WebSocket handshakes, which are",
                "// Line 599: normal C<GET> requests with some additional information.",
                "// Line 600: ",
                "// Line 601:   # /echo (WebSocket handshake)",
                "// Line 602:   $r->websocket('/echo')->to('foo#echo');",
                "// Line 603: ",
                "// Line 604:   # Controller"
            ]
        },
        {
            "filename_of_changes": "Tutorial.pod",
            "code_language": "Perl",
            "number_of_lines_added_for_mitigation": "8",
            "number_of_lines_deleted_vulnerable_to_cve": "25",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 21: are automatically enabled and a few L<functions|Mojolicious::Lite/\"FUNCTIONS\"> imported, when you use",
                "// Line 22: L<Mojolicious::Lite>, turning your script into a full featured web application.",
                "// Line 23: ",
                "// Line 24:   #!/usr/bin/env perl",
                "// Line 25:   use Mojolicious::Lite -signatures;",
                "// Line 26: ",
                "// Line 27:   get '/' => sub ($c) {",
                "// Line 28:     $c->render(text => 'Hello World!');",
                "// Line 29:   };",
                "// Line 30: ",
                "// vulnerable line: 31: app->start;",
                "// Line 32: ",
                "// Line 33: With L<Mojolicious::Command::Author::generate::lite_app> there is also a helper command to generate a small example",
                "// Line 34: application.",
                "// Line 35: ",
                "// Line 36:   $ mojo generate lite-app myapp.pl",
                "// Line 37: ",
                "// Line 38: =head2 Commands",
                "// Line 39: ",
                "// Line 40: Many different L<commands|Mojolicious::Commands/\"COMMANDS\"> are automatically available from the command line. CGI and",
                "// Line 41: L<PSGI> environments can even be detected and will usually just work without commands.",
                "// Line 52:   $ ./myapp.pl get /",
                "// Line 53:   Hello World!",
                "// Line 54: ",
                "// Line 55:   $ ./myapp.pl",
                "// Line 56:   ...List of available commands (or automatically detected environment)...",
                "// Line 57: ",
                "// Line 58: A call to L<Mojolicious/\"start\"> (C<app-E<gt>start>), which starts the command system, should be the last expression in",
                "// Line 59: your application, because its return value can be significant.",
                "// Line 60: ",
                "// Line 61:   # Use @ARGV to pick a command",
                "// vulnerable line: 62: app->start;",
                "// Line 63: ",
                "// Line 64:   # Start the \"daemon\" command",
                "// Line 65:   app->start('daemon', '-l', 'http://*:8080');",
                "// Line 66: ",
                "// Line 67: =head2 Reloading",
                "// Line 68: ",
                "// Line 69: Your application will automatically reload itself if you start it with the L<morbo> development web server, so you",
                "// Line 70: don't have to restart the server after every change.",
                "// Line 71: ",
                "// Line 72:   $ morbo ./myapp.pl",
                "// Line 80: if they match the path part of the request URL. The first argument passed to all actions (C<$c>) is a",
                "// Line 81: L<Mojolicious::Controller> object, containing both the HTTP request and response.",
                "// Line 82: ",
                "// Line 83:   use Mojolicious::Lite -signatures;",
                "// Line 84: ",
                "// Line 85:   # Route leading to an action that renders some text",
                "// Line 86:   get '/foo' => sub ($c) {",
                "// Line 87:     $c->render(text => 'Hello World!');",
                "// Line 88:   };",
                "// Line 89: ",
                "// vulnerable line: 90: app->start;",
                "// Line 91: ",
                "// Line 92: Response content is often generated by actions with L<Mojolicious::Controller/\"render\">, but more about that later.",
                "// Line 93: ",
                "// Line 94: =head2 GET/POST parameters",
                "// Line 95: ",
                "// Line 96: All C<GET> and C<POST> parameters sent with the request are accessible via L<Mojolicious::Controller/\"param\">.",
                "// Line 97: ",
                "// Line 98:   use Mojolicious::Lite -signatures;",
                "// Line 99: ",
                "// Line 100:   # /foo?user=sri",
                "// Line 101:   get '/foo' => sub ($c) {",
                "// Line 102:     my $user = $c->param('user');",
                "// Line 103:     $c->render(text => \"Hello $user.\");",
                "// Line 104:   };",
                "// Line 105: ",
                "// vulnerable line: 106: app->start;",
                "// Line 107: ",
                "// Line 108: =head2 Stash and templates",
                "// Line 109: ",
                "// Line 110: The L<Mojolicious::Controller/\"stash\"> is used to pass data to templates, which can be inlined in the C<DATA> section.",
                "// Line 111: A few stash values like C<template>, C<text> and C<data> are reserved and will be used by",
                "// Line 112: L<Mojolicious::Controller/\"render\"> to decide how a response should be generated.",
                "// Line 113: ",
                "// Line 114:   use Mojolicious::Lite -signatures;",
                "// Line 115: ",
                "// Line 116:   # Route leading to an action that renders a template",
                "// Line 117:   get '/foo' => sub ($c) {",
                "// Line 118:     $c->stash(one => 23);",
                "// Line 119:     $c->render(template => 'magic', two => 24);",
                "// Line 120:   };",
                "// Line 121: ",
                "// vulnerable line: 122: app->start;",
                "// Line 123:   __DATA__",
                "// Line 124: ",
                "// Line 125:   @@ magic.html.ep",
                "// Line 126:   The magic numbers are <%= $one %> and <%= $two %>.",
                "// Line 127: ",
                "// Line 128: For more information about templates see also L<Mojolicious::Guides::Rendering/\"Embedded Perl\">.",
                "// Line 129: ",
                "// Line 130: =head2 HTTP",
                "// Line 131: ",
                "// Line 132: L<Mojolicious::Controller/\"req\"> and L<Mojolicious::Controller/\"res\"> give you full access to all HTTP features and",
                "// Line 140:     my $ua   = $c->req->headers->user_agent;",
                "// Line 141:     $c->render(text => \"Request by $ua reached $host.\");",
                "// Line 142:   };",
                "// Line 143: ",
                "// Line 144:   # Echo the request body and send custom header with response",
                "// Line 145:   post '/echo' => sub ($c) {",
                "// Line 146:     $c->res->headers->header('X-Bender' => 'Bite my shiny metal ass!');",
                "// Line 147:     $c->render(data => $c->req->body);",
                "// Line 148:   };",
                "// Line 149: ",
                "// vulnerable line: 150: app->start;",
                "// Line 151: ",
                "// Line 152: You can test the more advanced examples right from the command line with L<Mojolicious::Command::get>.",
                "// Line 153: ",
                "// Line 154:   $ ./myapp.pl get -v -M POST -c 'test' /echo",
                "// Line 155: ",
                "// Line 156: =head2 JSON",
                "// Line 157: ",
                "// Line 158: JSON is the most commonly used data-interchange format for web services. L<Mojolicious> loves JSON and comes with the",
                "// Line 159: possibly fastest pure-Perl implementation L<Mojo::JSON> built right in, which is accessible through",
                "// Line 160: L<Mojo::Message/\"json\"> as well as the reserved stash value C<json>.",
                "// Line 161: ",
                "// Line 162:   use Mojolicious::Lite -signatures;",
                "// Line 163: ",
                "// Line 164:   # Modify the received JSON document and return it",
                "// Line 165:   put '/reverse' => sub ($c) {",
                "// Line 166:     my $hash = $c->req->json;",
                "// Line 167:     $hash->{message} = reverse $hash->{message};",
                "// Line 168:     $c->render(json => $hash);",
                "// Line 169:   };",
                "// Line 170: ",
                "// vulnerable line: 171: app->start;",
                "// Line 172: ",
                "// Line 173: You can send JSON documents from the command line with L<Mojolicious::Command::get>.",
                "// Line 174: ",
                "// Line 175:   $ ./myapp.pl get -M PUT -c '{\"message\":\"Hello Mojo!\"}' /reverse",
                "// Line 176: ",
                "// Line 177: =head2 Built-in C<exception> and C<not_found> pages",
                "// Line 178: ",
                "// Line 179: During development you will encounter these pages whenever you make a mistake, they are gorgeous and contain a lot of",
                "// Line 180: valuable information that will aid you in debugging your application.",
                "// Line 181: ",
                "// Line 182:   use Mojolicious::Lite -signatures;",
                "// Line 183: ",
                "// Line 184:   # Not found (404)",
                "// Line 185:   get '/missing' => sub ($c) {",
                "// Line 186:     $c->render(template => 'does_not_exist');",
                "// Line 187:   };",
                "// Line 188: ",
                "// Line 189:   # Exception (500)",
                "// Line 190:   get '/dies' => sub { die 'Intentional error' };",
                "// Line 191: ",
                "// vulnerable line: 192: app->start;",
                "// Line 193: ",
                "// Line 194: You can even use CSS selectors with L<Mojolicious::Command::get> to extract only the information you're actually",
                "// Line 195: interested in.",
                "// Line 196: ",
                "// Line 197:   $ ./myapp.pl get /dies '#error'",
                "// Line 198: ",
                "// Line 199: And don't worry about revealing too much information on these pages, they are only available during development, and",
                "// Line 200: will be replaced automatically with pages that don't reveal any sensitive information in a production environment.",
                "// Line 201: ",
                "// Line 202: =head2 Route names",
                "// Line 208:   use Mojolicious::Lite -signatures;",
                "// Line 209: ",
                "// Line 210:   # Render the template \"index.html.ep\"",
                "// Line 211:   get '/' => sub ($c) {",
                "// Line 212:     $c->render;",
                "// Line 213:   } => 'index';",
                "// Line 214: ",
                "// Line 215:   # Render the template \"hello.html.ep\"",
                "// Line 216:   get '/hello';",
                "// Line 217: ",
                "// vulnerable line: 218: app->start;",
                "// Line 219:   __DATA__",
                "// Line 220: ",
                "// Line 221:   @@ index.html.ep",
                "// Line 222:   <%= link_to Hello  => 'hello' %>.",
                "// Line 223:   <%= link_to Reload => 'index' %>.",
                "// Line 224: ",
                "// Line 225:   @@ hello.html.ep",
                "// Line 226:   Hello World!",
                "// Line 227: ",
                "// Line 228: Nameless routes get an automatically generated one assigned that is simply equal to the route itself without non-word",
                "// Line 229: characters.",
                "// Line 230: ",
                "// Line 231: =head2 Layouts",
                "// Line 232: ",
                "// Line 233: Templates can have layouts too, you just select one with the helper L<Mojolicious::Plugin::DefaultHelpers/\"layout\"> and",
                "// Line 234: place the result of the current template with the helper L<Mojolicious::Plugin::DefaultHelpers/\"content\">.",
                "// Line 235: ",
                "// vulnerable line: 236: use Mojolicious::Lite;",
                "// Line 237: ",
                "// Line 238:   get '/with_layout';",
                "// Line 239: ",
                "// vulnerable line: 240: app->start;",
                "// Line 241:   __DATA__",
                "// Line 242: ",
                "// Line 243:   @@ with_layout.html.ep",
                "// Line 244:   % title 'Green';",
                "// Line 245:   % layout 'green';",
                "// Line 246:   Hello World!",
                "// Line 247: ",
                "// Line 248:   @@ layouts/green.html.ep",
                "// Line 249:   <!DOCTYPE html>",
                "// Line 250:   <html>",
                "// Line 253:   </html>",
                "// Line 254: ",
                "// Line 255: The stash or helpers like L<Mojolicious::Plugin::DefaultHelpers/\"title\"> can be used to pass additional data to the",
                "// Line 256: layout.",
                "// Line 257: ",
                "// Line 258: =head2 Blocks",
                "// Line 259: ",
                "// Line 260: Template blocks can be used like normal Perl functions and are always delimited by the C<begin> and C<end> keywords,",
                "// Line 261: they are the foundation for many helpers.",
                "// Line 262: ",
                "// vulnerable line: 263: use Mojolicious::Lite;",
                "// Line 264: ",
                "// Line 265:   get '/with_block' => 'block';",
                "// Line 266: ",
                "// vulnerable line: 267: app->start;",
                "// Line 268:   __DATA__",
                "// Line 269: ",
                "// Line 270:   @@ block.html.ep",
                "// Line 271:   % my $link = begin",
                "// Line 272:     % my ($url, $name) = @_;",
                "// Line 273:     Try <%= link_to $url => begin %><%= $name %><% end %>.",
                "// Line 274:   % end",
                "// Line 275:   <!DOCTYPE html>",
                "// Line 276:   <html>",
                "// Line 277:     <head><title>Sebastians frameworks</title></head>",
                "// Line 294:     my $ip    = $c->tx->remote_address;",
                "// Line 295:     return \"$agent ($ip)\";",
                "// Line 296:   };",
                "// Line 297: ",
                "// Line 298:   # Use helper in action and template",
                "// Line 299:   get '/secret' => sub ($c) {",
                "// Line 300:     my $user = $c->whois;",
                "// Line 301:     $c->app->log->debug(\"Request from $user\");",
                "// Line 302:   };",
                "// Line 303: ",
                "// vulnerable line: 304: app->start;",
                "// Line 305:   __DATA__",
                "// Line 306: ",
                "// Line 307:   @@ secret.html.ep",
                "// Line 308:   We know who you are <%= whois %>.",
                "// Line 309: ",
                "// Line 310: A list of all built-in ones can be found in L<Mojolicious::Plugin::DefaultHelpers> and",
                "// Line 311: L<Mojolicious::Plugin::TagHelpers>.",
                "// Line 312: ",
                "// Line 313: =head2 Plugins",
                "// Line 314: ",
                "// Line 315: Plugins are application extensions that help with code sharing and organization. You can load a plugin with the keyword",
                "// Line 316: L<Mojolicious::Lite/\"plugin\">, which can omit the C<Mojolicious::Plugin::> part of the name, and optionally provide",
                "// Line 317: configuration for the plugin.",
                "// Line 318: ",
                "// vulnerable line: 319: use Mojolicious::Lite;",
                "// Line 320: ",
                "// Line 321:   plugin Config => {file => '/etc/myapp.conf', default => {foo => 'bar'}};",
                "// Line 322: ",
                "// Line 323:   # Return configured foo value, or default if no configuration file",
                "// Line 324:   get '/foo' => sub ($c) {",
                "// Line 325:     my $foo = $c->app->config('foo');",
                "// Line 326:     $c->render(json => {foo => $foo});",
                "// Line 327:   };",
                "// Line 328: ",
                "// vulnerable line: 329: app->start;",
                "// Line 330: ",
                "// Line 331: L<Mojolicious::Plugin::Config> is a built-in plugin which can populate L<Mojolicious/\"config\"> using a config file.",
                "// Line 332: Plugins can also set up routes, hooks, handlers, or even load other plugins. A list of built-in plugins can be found at",
                "// Line 333: L<Mojolicious::Plugins/\"PLUGINS\">, and many more are available from",
                "// Line 334: L<CPAN|https://metacpan.org/search?q=Mojolicious+Plugin>.",
                "// Line 335: ",
                "// Line 336: =head2 Placeholders",
                "// Line 337: ",
                "// Line 338: Route placeholders allow capturing parts of a request path until a C</> or C<.> separator occurs, similar to the",
                "// Line 339: regular expression C<([^/.]+)>. Results are accessible via L<Mojolicious::Controller/\"stash\"> and",
                "// Line 348:     $c->render(text => \"Our :bar placeholder matched $bar\");",
                "// Line 349:   };",
                "// Line 350: ",
                "// Line 351:   # /testsomething/foo",
                "// Line 352:   # /test123something/foo",
                "// Line 353:   get '/<:bar>something/foo' => sub ($c) {",
                "// Line 354:     my $bar = $c->param('bar');",
                "// Line 355:     $c->render(text => \"Our :bar placeholder matched $bar\");",
                "// Line 356:   };",
                "// Line 357: ",
                "// vulnerable line: 358: app->start;",
                "// Line 359: ",
                "// Line 360: To separate them from the surrounding text, you can surround your placeholders with C<E<lt>> and C<E<gt>>, which also",
                "// Line 361: makes the colon prefix optional.",
                "// Line 362: ",
                "// Line 363: =head2 Relaxed Placeholders",
                "// Line 364: ",
                "// Line 365: Relaxed placeholders allow matching of everything until a C</> occurs, similar to the regular expression C<([^/]+)>.",
                "// Line 366: ",
                "// vulnerable line: 367: use Mojolicious::Lite;",
                "// Line 368: ",
                "// Line 369:   # /hello/test",
                "// Line 370:   # /hello/test.html",
                "// Line 371:   get '/hello/#you' => 'groovy';",
                "// Line 372: ",
                "// vulnerable line: 373: app->start;",
                "// Line 374:   __DATA__",
                "// Line 375: ",
                "// Line 376:   @@ groovy.html.ep",
                "// Line 377:   Your name is <%= $you %>.",
                "// Line 378: ",
                "// Line 379: =head2 Wildcard placeholders",
                "// Line 380: ",
                "// Line 381: Wildcard placeholders allow matching absolutely everything, including C</> and C<.>, similar to the regular expression",
                "// Line 382: C<(.+)>.",
                "// Line 383: ",
                "// vulnerable line: 384: use Mojolicious::Lite;",
                "// Line 385: ",
                "// Line 386:   # /hello/test",
                "// Line 387:   # /hello/test123",
                "// Line 388:   # /hello/test.123/test/123",
                "// Line 389:   get '/hello/*you' => 'groovy';",
                "// Line 390: ",
                "// vulnerable line: 391: app->start;",
                "// Line 392:   __DATA__",
                "// Line 393: ",
                "// Line 394:   @@ groovy.html.ep",
                "// Line 395:   Your name is <%= $you %>.",
                "// Line 396: ",
                "// Line 397: =head2 HTTP methods",
                "// Line 398: ",
                "// Line 399: Routes can be restricted to specific request methods with different keywords like L<Mojolicious::Lite/\"get\"> and",
                "// Line 400: L<Mojolicious::Lite/\"any\">.",
                "// Line 401: ",
                "// Line 402:   use Mojolicious::Lite -signatures;",
                "// Line 403: ",
                "// Line 404:   # GET /hello",
                "// vulnerable line: 405: get '/hello' => sub ($c) {",
                "// Line 406:     $c->render(text => 'Hello World!');",
                "// Line 407:   };",
                "// Line 408: ",
                "// Line 409:   # PUT /hello",
                "// Line 410:   put '/hello' => sub ($c) {",
                "// Line 411:     my $size = length $c->req->body;",
                "// Line 412:     $c->render(text => \"You uploaded $size bytes to /hello.\");",
                "// Line 413:   };",
                "// Line 414: ",
                "// Line 415:   # GET|POST|PATCH /bye",
                "// Line 416:   any ['GET', 'POST', 'PATCH'] => '/bye' => sub ($c) {",
                "// Line 417:     $c->render(text => 'Bye World!');",
                "// Line 418:   };",
                "// Line 419: ",
                "// Line 420:   # * /whatever",
                "// Line 421:   any '/whatever' => sub ($c) {",
                "// Line 422:     my $method = $c->req->method;",
                "// Line 423:     $c->render(text => \"You called /whatever with $method.\");",
                "// Line 424:   };",
                "// Line 425: ",
                "// vulnerable line: 426: app->start;",
                "// Line 427: ",
                "// Line 428: =head2 Optional placeholders",
                "// Line 429: ",
                "// Line 430: All placeholders require a value, but by assigning them default values you can make capturing optional.",
                "// Line 431: ",
                "// Line 432:   use Mojolicious::Lite -signatures;",
                "// Line 433: ",
                "// vulnerable line: 434: # /hello",
                "// Line 435:   # /hello/Sara",
                "// Line 436:   get '/hello/:name' => {name => 'Sebastian', day => 'Monday'} => sub ($c) {",
                "// Line 437:     $c->render(template => 'groovy', format => 'txt');",
                "// Line 438:   };",
                "// Line 439: ",
                "// vulnerable line: 440: app->start;",
                "// Line 441:   __DATA__",
                "// Line 442: ",
                "// Line 443:   @@ groovy.txt.ep",
                "// Line 444:   My name is <%= $name %> and it is <%= $day %>.",
                "// Line 445: ",
                "// Line 446: Default values that don't belong to a placeholder simply get merged into the stash all the time.",
                "// Line 447: ",
                "// Line 448: =head2 Restrictive placeholders",
                "// Line 449: ",
                "// Line 450: A very easy way to make placeholders more restrictive are alternatives, you just make a list of possible values.",
                "// Line 451: ",
                "// Line 452:   use Mojolicious::Lite -signatures;",
                "// Line 453: ",
                "// Line 454:   # /test",
                "// Line 455:   # /123",
                "// Line 456:   any '/:foo' => [foo => ['test', '123']] => sub ($c) {",
                "// Line 457:     my $foo = $c->param('foo');",
                "// Line 458:     $c->render(text => \"Our :foo placeholder matched $foo\");",
                "// Line 459:   };",
                "// Line 460: ",
                "// vulnerable line: 461: app->start;",
                "// Line 462: ",
                "// Line 463: All placeholders get compiled to a regular expression internally, this process can also be customized. Just make sure",
                "// Line 464: not to use C<^> and C<$>, or capturing groups C<(...)>, non-capturing groups C<(?:...)> are fine though.",
                "// Line 465: ",
                "// Line 466:   use Mojolicious::Lite -signatures;",
                "// Line 467: ",
                "// Line 468:   # /1",
                "// Line 469:   # /123",
                "// Line 470:   any '/:bar' => [bar => qr/\\d+/] => sub ($c) {",
                "// Line 471:     my $bar = $c->param('bar');",
                "// Line 472:     $c->render(text => \"Our :bar placeholder matched $bar\");",
                "// Line 473:   };",
                "// Line 474: ",
                "// vulnerable line: 475: app->start;",
                "// Line 476: ",
                "// Line 477: You can take a closer look at all the generated regular expressions with the command L<Mojolicious::Command::routes>.",
                "// Line 478: ",
                "// Line 479:   $ ./myapp.pl routes -v",
                "// Line 480: ",
                "// Line 481: =head2 Under",
                "// Line 482: ",
                "// Line 483: Authentication and code shared between multiple routes can be realized easily with routes generated by",
                "// Line 484: L<Mojolicious::Lite/\"under\">. All following routes are only evaluated if the callback returned a true value.",
                "// Line 485: ",
                "// Line 493:     return 1 if $name eq 'Bender';",
                "// Line 494: ",
                "// Line 495:     # Not authenticated",
                "// Line 496:     $c->render(template => 'denied');",
                "// Line 497:     return undef;",
                "// Line 498:   };",
                "// Line 499: ",
                "// Line 500:   # Only reached when authenticated",
                "// Line 501:   get '/' => 'index';",
                "// Line 502: ",
                "// vulnerable line: 503: app->start;",
                "// Line 504:   __DATA__",
                "// Line 505: ",
                "// Line 506:   @@ denied.html.ep",
                "// Line 507:   You are not Bender, permission denied.",
                "// Line 508: ",
                "// Line 509:   @@ index.html.ep",
                "// Line 510:   Hi Bender.",
                "// Line 511: ",
                "// Line 512: Prefixing multiple routes is another good use for it.",
                "// Line 513: ",
                "// vulnerable line: 514: use Mojolicious::Lite;",
                "// Line 515: ",
                "// vulnerable line: 516: # /foo",
                "// Line 517:   under '/foo';",
                "// Line 518: ",
                "// Line 519:   # /foo/bar",
                "// Line 520:   get '/bar' => {text => 'foo bar'};",
                "// Line 521: ",
                "// Line 522:   # /foo/baz",
                "// Line 523:   get '/baz' => {text => 'foo baz'};",
                "// Line 524: ",
                "// Line 525:   # / (reset)",
                "// Line 526:   under '/' => {msg => 'whatever'};",
                "// Line 527: ",
                "// Line 528:   # /bar",
                "// Line 529:   get '/bar' => {inline => '<%= $msg %> works'};",
                "// Line 530: ",
                "// vulnerable line: 531: app->start;",
                "// Line 532: ",
                "// Line 533: You can also group related routes with L<Mojolicious::Lite/\"group\">, which allows nesting of routes generated with",
                "// Line 534: L<Mojolicious::Lite/\"under\">.",
                "// Line 535: ",
                "// Line 536:   use Mojolicious::Lite -signatures;",
                "// Line 537: ",
                "// Line 538:   # Global logic shared by all routes",
                "// Line 539:   under sub ($c) {",
                "// Line 540:     return 1 if $c->req->headers->header('X-Bender');",
                "// Line 541:     $c->render(text => \"You're not Bender.\");",
                "// Line 552:       return undef;",
                "// Line 553:     };",
                "// Line 554: ",
                "// Line 555:     # GET /admin/dashboard",
                "// Line 556:     get '/dashboard' => {text => 'Nothing to see here yet.'};",
                "// Line 557:   };",
                "// Line 558: ",
                "// Line 559:   # GET /welcome",
                "// Line 560:   get '/welcome' => {text => 'Hi Bender.'};",
                "// Line 561: ",
                "// vulnerable line: 562: app->start;",
                "// Line 563: ",
                "// Line 564: =head2 Formats",
                "// Line 565: ",
                "// Line 566: Formats can be automatically detected from file extensions like C<.html>, they are used to find the right template and",
                "// vulnerable line: 567: generate the correct C<Content-Type> header.",
                "// Line 568: ",
                "// Line 569:   use Mojolicious::Lite -signatures;",
                "// Line 570: ",
                "// vulnerable line: 571: # /detection",
                "// Line 572:   # /detection.html",
                "// Line 573:   # /detection.txt",
                "// vulnerable line: 574: get '/detection' => sub ($c) {",
                "// Line 575:     $c->render(template => 'detected');",
                "// Line 576:   };",
                "// Line 577: ",
                "// vulnerable line: 578: app->start;",
                "// Line 579:   __DATA__",
                "// Line 580: ",
                "// Line 581:   @@ detected.html.ep",
                "// Line 582:   <!DOCTYPE html>",
                "// Line 583:   <html>",
                "// Line 584:     <head><title>Detected</title></head>",
                "// Line 585:     <body>HTML was detected.</body>",
                "// Line 586:   </html>",
                "// Line 587: ",
                "// Line 588:   @@ detected.txt.ep",
                "// Line 589:   TXT was detected.",
                "// Line 590: ",
                "// vulnerable line: 591: The default format is C<html>, and restrictive placeholders can be used to limit possible values.",
                "// Line 592: ",
                "// Line 593:   use Mojolicious::Lite -signatures;",
                "// Line 594: ",
                "// Line 595:   # /hello.json",
                "// Line 596:   # /hello.txt",
                "// vulnerable line: 597: get '/hello' => [format => ['json', 'txt']] => sub ($c) {",
                "// vulnerable line: 598: return $c->render(json => {hello => 'world'})",
                "// vulnerable line: 599: if $c->stash('format') eq 'json';",
                "// Line 600:     $c->render(text => 'hello world');",
                "// Line 601:   };",
                "// Line 602: ",
                "// vulnerable line: 603: app->start;",
                "// Line 604: ",
                "// vulnerable line: 605: Or you can just disable format detection with a special type of restrictive placeholder.",
                "// Line 606: ",
                "// vulnerable line: 607: use Mojolicious::Lite;",
                "// Line 608: ",
                "// vulnerable line: 609: # /hello",
                "// vulnerable line: 610: get '/hello' => [format => 0] => {text => 'No format detection.'};",
                "// Line 611: ",
                "// vulnerable line: 612: # Disable detection and allow the following routes to re-enable it on demand",
                "// vulnerable line: 613: under [format => 0];",
                "// Line 614: ",
                "// vulnerable line: 615: # /foo",
                "// vulnerable line: 616: get '/foo' => {text => 'No format detection again.'};",
                "// Line 617: ",
                "// vulnerable line: 618: # /bar.txt",
                "// vulnerable line: 619: get '/bar' => [format => 'txt'] => {text => ' Just one format.'};",
                "// Line 620: ",
                "// vulnerable line: 621: app->start;",
                "// Line 622: ",
                "// Line 623: =head2 Content negotiation",
                "// Line 624: ",
                "// Line 625: For resources with different representations and that require truly RESTful content negotiation you can also use",
                "// Line 626: L<Mojolicious::Plugin::DefaultHelpers/\"respond_to\">.",
                "// Line 627: ",
                "// Line 628:   use Mojolicious::Lite -signatures;",
                "// Line 629: ",
                "// Line 630:   # /hello (Accept: application/json)",
                "// Line 631:   # /hello (Accept: application/xml)",
                "// Line 632:   # /hello.json",
                "// Line 633:   # /hello.xml",
                "// Line 634:   # /hello?format=json",
                "// Line 635:   # /hello?format=xml",
                "// vulnerable line: 636: get '/hello' => sub ($c) {",
                "// Line 637:     $c->respond_to(",
                "// Line 638:       json => {json => {hello => 'world'}},",
                "// Line 639:       xml  => {text => '<hello>world</hello>'},",
                "// Line 640:       any  => {data => '', status => 204}",
                "// Line 641:     );",
                "// Line 642:   };",
                "// Line 643: ",
                "// vulnerable line: 644: app->start;",
                "// Line 645: ",
                "// Line 646: MIME type mappings can be extended or changed easily with L<Mojolicious/\"types\">.",
                "// Line 647: ",
                "// Line 648:   app->types->type(rdf => 'application/rdf+xml');",
                "// Line 649: ",
                "// Line 650: =head2 Static files",
                "// Line 651: ",
                "// Line 652: Similar to templates, but with only a single file extension and optional Base64 encoding, static files can be inlined",
                "// Line 653: in the C<DATA> section and are served automatically.",
                "// Line 654: ",
                "// vulnerable line: 655: use Mojolicious::Lite;",
                "// Line 656: ",
                "// vulnerable line: 657: app->start;",
                "// Line 658:   __DATA__",
                "// Line 659: ",
                "// Line 660:   @@ something.js",
                "// Line 661:   alert('hello!');",
                "// Line 662: ",
                "// Line 663:   @@ test.txt (base64)",
                "// Line 664:   dGVzdCAxMjMKbGFsYWxh",
                "// Line 665: ",
                "// Line 666: External static files are not limited to a single file extension and will be served automatically from a C<public>",
                "// Line 667: directory if it exists.",
                "// Line 685: ",
                "// Line 686: They have a higher precedence than templates in the C<DATA> section.",
                "// Line 687: ",
                "// Line 688:   use Mojolicious::Lite -signatures;",
                "// Line 689: ",
                "// Line 690:   # Render template \"templates/foo/bar.html.ep\"",
                "// Line 691:   any '/external' => sub ($c) {",
                "// Line 692:     $c->render(template => 'foo/bar');",
                "// Line 693:   };",
                "// Line 694: ",
                "// vulnerable line: 695: app->start;",
                "// Line 696: ",
                "// Line 697: =head2 Home",
                "// Line 698: ",
                "// Line 699: You can use L<Mojolicious/\"home\"> to interact with the directory your application considers its home. This is the",
                "// Line 700: directory it will search for C<public> and C<templates> directories, but you can use it to store all sorts of",
                "// Line 701: application specific data.",
                "// Line 702: ",
                "// Line 703:   $ mkdir cache",
                "// Line 704:   $ echo 'Hello World!' > cache/hello.txt",
                "// Line 705: ",
                "// Line 735:   # Internet Explorer",
                "// Line 736:   get '/foo' => (agent => qr/Internet Explorer/) => sub ($c) {",
                "// Line 737:     $c->render(text => 'Dude, you really need to upgrade to Firefox.');",
                "// Line 738:   };",
                "// Line 739: ",
                "// Line 740:   # http://mojolicious.org/bar",
                "// Line 741:   get '/bar' => (host => 'mojolicious.org') => sub ($c) {",
                "// Line 742:     $c->render(text => 'Hello Mojolicious.');",
                "// Line 743:   };",
                "// Line 744: ",
                "// vulnerable line: 745: app->start;",
                "// Line 746: ",
                "// Line 747: =head2 Sessions",
                "// Line 748: ",
                "// Line 749: Cookie-based sessions just work out of the box, as soon as you start using them through the helper",
                "// Line 750: L<Mojolicious::Plugin::DefaultHelpers/\"session\">. Just be aware that all session data gets serialized with",
                "// Line 751: L<Mojo::JSON> and stored client-side, with a cryptographic signature to prevent tampering.",
                "// Line 752: ",
                "// Line 753:   use Mojolicious::Lite -signatures;",
                "// Line 754: ",
                "// Line 755:   # Access session data in action and template",
                "// Line 756:   get '/counter' => sub ($c) {",
                "// Line 757:     $c->session->{counter}++;",
                "// Line 758:   };",
                "// Line 759: ",
                "// vulnerable line: 760: app->start;",
                "// Line 761:   __DATA__",
                "// Line 762: ",
                "// Line 763:   @@ counter.html.ep",
                "// Line 764:   Counter: <%= session 'counter' %>",
                "// Line 765: ",
                "// Line 766: Note that you should use custom L<Mojolicious/\"secrets\"> to make signed cookies really tamper resistant.",
                "// Line 767: ",
                "// Line 768:   app->secrets(['My secret passphrase here']);",
                "// Line 769: ",
                "// Line 770: =head2 File uploads",
                "// Line 785:     # Check file size",
                "// Line 786:     return $c->render(text => 'File is too big.', status => 200) if $c->req->is_limit_exceeded;",
                "// Line 787: ",
                "// Line 788:     # Process uploaded file",
                "// Line 789:     return $c->redirect_to('form') unless my $example = $c->param('example');",
                "// Line 790:     my $size = $example->size;",
                "// Line 791:     my $name = $example->filename;",
                "// Line 792:     $c->render(text => \"Thanks for uploading $size byte file $name.\");",
                "// Line 793:   };",
                "// Line 794: ",
                "// vulnerable line: 795: app->start;",
                "// Line 796:   __DATA__",
                "// Line 797: ",
                "// Line 798:   @@ form.html.ep",
                "// Line 799:   <!DOCTYPE html>",
                "// Line 800:   <html>",
                "// Line 801:     <head><title>Upload</title></head>",
                "// Line 802:     <body>",
                "// Line 803:       %= form_for upload => (enctype => 'multipart/form-data') => begin",
                "// Line 804:         %= file_field 'example'",
                "// Line 805:         %= submit_button 'Upload'",
                "// Line 840:     my $mojo = $c->ua->get_p('https://mojolicious.org');",
                "// Line 841:     my $cpan = $c->ua->get_p('https://metacpan.org');",
                "// Line 842:     Mojo::Promise->all($mojo, $cpan)->then(sub ($mojo, $cpan) {",
                "// Line 843:       $c->render(json => {",
                "// Line 844:         mojo => $mojo->[0]->result->dom->at('title')->text,",
                "// Line 845:         cpan => $cpan->[0]->result->dom->at('title')->text",
                "// Line 846:       });",
                "// Line 847:     })->wait;",
                "// Line 848:   };",
                "// Line 849: ",
                "// vulnerable line: 850: app->start;",
                "// Line 851: ",
                "// Line 852: For more information about the user agent see also L<Mojolicious::Guides::Cookbook/\"USER AGENT\">.",
                "// Line 853: ",
                "// Line 854: =head2 WebSockets",
                "// Line 855: ",
                "// Line 856: WebSocket applications have never been this simple before. Just receive messages by subscribing to events such as",
                "// Line 857: L<Mojo::Transaction::WebSocket/\"json\"> with L<Mojolicious::Controller/\"on\"> and return them with",
                "// Line 858: L<Mojolicious::Controller/\"send\">.",
                "// Line 859: ",
                "// Line 860:   use Mojolicious::Lite -signatures;",
                "// Line 861: ",
                "// Line 862:   websocket '/echo' => sub ($c) {",
                "// Line 863:     $c->on(json => sub ($c, $hash) {",
                "// Line 864:       $hash->{msg} = \"echo: $hash->{msg}\";",
                "// Line 865:       $c->send({json => $hash});",
                "// Line 866:     });",
                "// Line 867:   };",
                "// Line 868: ",
                "// Line 869:   get '/' => 'index';",
                "// Line 870: ",
                "// vulnerable line: 871: app->start;",
                "// Line 872:   __DATA__",
                "// Line 873: ",
                "// Line 874:   @@ index.html.ep",
                "// Line 875:   <!DOCTYPE html>",
                "// Line 876:   <html>",
                "// Line 877:     <head>",
                "// Line 878:       <title>Echo</title>",
                "// Line 879:       <script>",
                "// Line 880:         var ws = new WebSocket('<%= url_for('echo')->to_abs %>');",
                "// Line 881:         ws.onmessage = function (event) {",
                "// Line 900: ",
                "// Line 901:   # Prepare mode specific message during startup",
                "// Line 902:   my $msg = app->mode eq 'development' ? 'Development!' : 'Something else!';",
                "// Line 903: ",
                "// Line 904:   get '/' => sub ($c) {",
                "// Line 905:     $c->app->log->debug('Rendering mode specific message');",
                "// Line 906:     $c->render(text => $msg);",
                "// Line 907:   };",
                "// Line 908: ",
                "// Line 909:   app->log->debug('Starting application');",
                "// vulnerable line: 910: app->start;",
                "// Line 911: ",
                "// Line 912: The default operating mode will usually be C<development> and can be changed with command line options or the",
                "// Line 913: C<MOJO_MODE> and C<PLACK_ENV> environment variables. A mode other than C<development> will raise the log level from",
                "// Line 914: C<debug> to C<info>. All messages will be written to C<STDERR> by default.",
                "// Line 915: ",
                "// Line 916:   $ ./myapp.pl daemon -m production",
                "// Line 917: ",
                "// Line 918: Mode changes also affect a few other aspects of the framework, such as the built-in C<exception> and C<not_found>",
                "// Line 919: pages. Once you switch modes from C<development> to C<production>, no sensitive information will be revealed on those",
                "// Line 920: pages anymore."
            ]
        },
        {
            "filename_of_changes": "charset_lite_app.t",
            "code_language": "Perl",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 20: ",
                "// Line 21: # UTF-8 text renderer",
                "// Line 22: app->renderer->add_handler(",
                "// Line 23:   test => sub {",
                "// Line 24:     my ($renderer, $c, $output, $options) = @_;",
                "// Line 25:     delete $options->{encoding};",
                "// Line 26:     $$output = b($c->stash->{test})->encode('UTF-8')->to_string;",
                "// Line 27:   }",
                "// Line 28: );",
                "// Line 29: ",
                "// vulnerable line: 30: get '/' => 'index';",
                "// Line 31: ",
                "// Line 32: post '/' => sub {",
                "// Line 33:   my $c = shift;",
                "// Line 34:   $c->render(text => \"foo: \" . $c->param('foo'));",
                "// Line 35: };",
                "// Line 36: ",
                "// Line 37: post '/data' => sub {",
                "// Line 38:   my $c = shift;",
                "// Line 39:   $c->render(data => $c->req->body, format => 'bin');",
                "// Line 40: };"
            ]
        },
        {
            "filename_of_changes": "exception_lite_app.t",
            "code_language": "Perl",
            "number_of_lines_added_for_mitigation": "5",
            "number_of_lines_deleted_vulnerable_to_cve": "5",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 46:   my $level = $c->param('level');",
                "// Line 47:   my $msg   = $c->param('message');",
                "// Line 48:   $c->app->log->$level($msg);",
                "// Line 49:   $c->render(text => \"$level: $msg\");",
                "// Line 50: };",
                "// Line 51: ",
                "// Line 52: get '/custom_exception' => sub { die Mojo::Base->new };",
                "// Line 53: ",
                "// Line 54: get '/dead_template';",
                "// Line 55: ",
                "// vulnerable line: 56: get '/dead_template_too';",
                "// Line 57: ",
                "// vulnerable line: 58: get '/dead_handler' => {handler => 'dead'};",
                "// Line 59: ",
                "// vulnerable line: 60: get '/dead_action_epl' => {handler => 'epl'} => sub {",
                "// Line 61:   die \"dead action epl!",
                "// Line 62: \";",
                "// Line 63: };",
                "// Line 64: ",
                "// Line 65: get '/dead_included_template';",
                "// Line 66: ",
                "// Line 67: get '/dead_template_with_layout';",
                "// Line 68: ",
                "// Line 69: get '/dead_action' => sub { die \"dead action!",
                "// Line 70: \" };",
                "// Line 73:   eval { die 'double dead action!' };",
                "// Line 74:   die $@;",
                "// Line 75: };",
                "// Line 76: ",
                "// Line 77: get '/trapped' => sub {",
                "// Line 78:   my $c = shift;",
                "// Line 79:   eval { die {foo => 'bar'} };",
                "// Line 80:   $c->render(text => $@->{foo} || 'failed');",
                "// Line 81: };",
                "// Line 82: ",
                "// vulnerable line: 83: get '/missing_template' => {exception => 'whatever'};",
                "// Line 84: ",
                "// Line 85: get '/missing_template/too' => sub {",
                "// Line 86:   my $c = shift;",
                "// Line 87:   $c->render('does_not_exist');",
                "// Line 88: };",
                "// Line 89: ",
                "// Line 90: get '/missing_helper' => sub { shift->missing_helper };",
                "// Line 91: ",
                "// Line 92: # Dummy exception object",
                "// Line 93: package MyException;"
            ]
        },
        {
            "filename_of_changes": "group_lite_app.t",
            "code_language": "Perl",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 155: group {",
                "// Line 156: ",
                "// Line 157:   # Check \"ok\" parameter",
                "// Line 158:   under sub {",
                "// Line 159:     my $c = shift;",
                "// Line 160:     return 1 if $c->req->param('ok');",
                "// Line 161:     $c->render(text => \"You're not ok.\");",
                "// Line 162:     return !!0;",
                "// Line 163:   };",
                "// Line 164: ",
                "// vulnerable line: 165: get '/authgroup' => {text => \"You're ok.\"};",
                "// Line 166: };",
                "// Line 167: ",
                "// Line 168: get '/noauthgroup' => {inline => 'Whatever <%= $foo %>.'};",
                "// Line 169: ",
                "// Line 170: # Disable format detection",
                "// Line 171: under [format => 0];",
                "// Line 172: ",
                "// Line 173: get '/no_format' => {text => 'No format detection.'};",
                "// Line 174: ",
                "// Line 175: get '/some_formats' => [format => [qw(txt json)]] => {text => 'Some format detection.'};"
            ]
        },
        {
            "filename_of_changes": "layouted_lite_app.t",
            "code_language": "Perl",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 94: get '/content_for';",
                "// Line 95: ",
                "// Line 96: get '/content_with';",
                "// Line 97: ",
                "// Line 98: get '/inline' => {inline => '<%= \"inline!\" %>'};",
                "// Line 99: ",
                "// Line 100: get '/inline/again' => {inline => 0};",
                "// Line 101: ",
                "// Line 102: get '/data' => {data => 0};",
                "// Line 103: ",
                "// vulnerable line: 104: get '/variants' => {layout => 'variants'} => sub {",
                "// Line 105:   my $c = shift;",
                "// Line 106:   $c->stash->{variant} = $c->param('device');",
                "// Line 107:   $c->render('variants');",
                "// Line 108: };",
                "// Line 109: ",
                "// Line 110: my $t = Test::Mojo->new;",
                "// Line 111: ",
                "// Line 112: subtest '\"0\" content reassignment' => sub {",
                "// Line 113:   my $c = $t->app->build_controller;",
                "// Line 114:   $c->content(foo => '0');"
            ]
        },
        {
            "filename_of_changes": "lite_app.t",
            "code_language": "Perl",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "4",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 71: get '/uni/aäb' => sub {",
                "// Line 72:   my $c = shift;",
                "// Line 73:   $c->render(text => $c->url_for);",
                "// Line 74: };",
                "// Line 75: ",
                "// Line 76: get '/unicode/:0' => sub {",
                "// Line 77:   my $c = shift;",
                "// Line 78:   $c->render(text => $c->param('0') . $c->url_for);",
                "// Line 79: };",
                "// Line 80: ",
                "// vulnerable line: 81: get '/' => 'root';",
                "// Line 82: ",
                "// Line 83: get '/alternatives/:char' => [char => [qw(☃ ♥)]] => sub {",
                "// Line 84:   my $c = shift;",
                "// Line 85:   $c->render(text => $c->url_for);",
                "// Line 86: };",
                "// Line 87: ",
                "// Line 88: get '/optional/:middle/placeholder' => {middle => 'none', inline => '<%= $middle %>-<%= url_for =%>'};",
                "// Line 89: ",
                "// Line 90: get '/optional/:param' => {param => undef, inline => '%= param(\"param\") // \"undef\"'};",
                "// Line 91: ",
                "// Line 128: get '/custom_name' => 'auto_name';",
                "// Line 129: ",
                "// Line 130: get '/inline/exception' => sub { shift->render(inline => '% die;') };",
                "// Line 131: ",
                "// Line 132: get '/data/exception' => 'dies';",
                "// Line 133: ",
                "// Line 134: get '/template/exception' => 'dies_too';",
                "// Line 135: ",
                "// Line 136: get '/with-format' => {format => 'html'} => 'with-format';",
                "// Line 137: ",
                "// vulnerable line: 138: get '/without-format' => 'without-format';",
                "// Line 139: ",
                "// Line 140: any '/json_too' => {json => {hello => 'world'}};",
                "// Line 141: ",
                "// Line 142: get '/null/:null' => sub {",
                "// Line 143:   my $c = shift;",
                "// Line 144:   $c->render(text => $c->param('null'));",
                "// Line 145: };",
                "// Line 146: ",
                "// Line 147: get '/action_template' => {controller => 'foo'} => sub {",
                "// Line 148:   my $c = shift;",
                "// Line 194:   my $c = shift;",
                "// Line 195:   $c->on(finish => sub { shift->stash->{finished} -= 1 });",
                "// Line 196:   $c->stash->{finished} = 2;",
                "// Line 197:   $c->render(text => 'so far so good!');",
                "// Line 198: };",
                "// Line 199: ",
                "// Line 200: get '/привет/мир' => sub { shift->render(text => 'привет мир') };",
                "// Line 201: ",
                "// Line 202: get '/root.html' => 'root_path';",
                "// Line 203: ",
                "// vulnerable line: 204: get '/root' => sub { shift->render(text => 'root fallback!') };",
                "// Line 205: ",
                "// vulnerable line: 206: get '/template.txt' => {template => 'template', format => 'txt'};",
                "// Line 207: ",
                "// Line 208: get ':number' => [number => qr/0/] => sub {",
                "// Line 209:   my $c   = shift;",
                "// Line 210:   my $url = $c->req->url->to_abs;",
                "// Line 211:   $c->res->headers->header('X-Original' => $c->tx->original_remote_address);",
                "// Line 212:   my $address = $c->tx->remote_address;",
                "// Line 213:   my $num     = $c->param('number');",
                "// Line 214:   $c->render(text => \"$url-$address-$num\");",
                "// Line 215: };",
                "// Line 216: "
            ]
        },
        {
            "filename_of_changes": "pattern.t",
            "code_language": "Perl",
            "number_of_lines_added_for_mitigation": "6",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "restful_lite_app.t",
            "code_language": "Perl",
            "number_of_lines_added_for_mitigation": "5",
            "number_of_lines_deleted_vulnerable_to_cve": "5",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: use Mojo::Base -strict;",
                "// Line 2: ",
                "// Line 3: BEGIN { $ENV{MOJO_REACTOR} = 'Mojo::Reactor::Poll' }",
                "// Line 4: ",
                "// Line 5: use Test::Mojo;",
                "// Line 6: use Test::More;",
                "// Line 7: use Mojo::JSON qw(false true);",
                "// Line 8: use Mojolicious::Lite;",
                "// Line 9: ",
                "// vulnerable line: 10: any [qw(POST PUT)] => '/json/echo' => sub {",
                "// Line 11:   my $c = shift;",
                "// Line 12:   $c->respond_to(json => {json => $c->req->json});",
                "// Line 13: };",
                "// Line 14: ",
                "// vulnerable line: 15: get '/accepts' => sub {",
                "// Line 16:   my $c = shift;",
                "// Line 17:   $c->render(json => {best => $c->accepts('html', 'json', 'txt')});",
                "// Line 18: };",
                "// Line 19: ",
                "// vulnerable line: 20: get '/wants_json' => sub {",
                "// Line 21:   my $c = shift;",
                "// Line 22:   $c->render(json => {wants_json => $c->accepts('', 'json') ? \u0001 : \u0000});",
                "// Line 23: };",
                "// Line 24: ",
                "// Line 25: under '/rest';",
                "// Line 26: ",
                "// vulnerable line: 27: get sub {",
                "// Line 28:   my $c = shift;",
                "// Line 29:   $c->respond_to(",
                "// Line 30:     json => sub { $c->render(json => {just => 'works'}) },",
                "// Line 31:     html => sub { $c->render(data => '<html><body>works') },",
                "// Line 32:     xml  => sub { $c->render(data => '<just>works</just>') }",
                "// Line 33:   );",
                "// Line 34: };",
                "// Line 35: ",
                "// vulnerable line: 36: post sub {",
                "// Line 37:   my $c = shift;",
                "// Line 38:   $c->respond_to(",
                "// Line 39:     json => {json => {just => 'works too'}},",
                "// Line 40:     html => {text => '<html><body>works too'},",
                "// Line 41:     xml  => {data => '<just>works too</just>'},",
                "// Line 42:     any  => {text => 'works too', status => 201}",
                "// Line 43:   );",
                "// Line 44: };",
                "// Line 45: ",
                "// Line 46: my $t = Test::Mojo->new;"
            ]
        },
        {
            "filename_of_changes": "routes.t",
            "code_language": "Perl",
            "number_of_lines_added_for_mitigation": "28",
            "number_of_lines_deleted_vulnerable_to_cve": "24",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 29: # /alternatives3/foo",
                "// Line 30: # /alternatives3/foobar",
                "// Line 31: $r->any('/alternatives3/:foo', [foo => [qw(foo foobar)]]);",
                "// Line 32: ",
                "// Line 33: # /alternatives4/foo",
                "// Line 34: # /alternatives4/foo.bar",
                "// Line 35: $r->any('/alternatives4/:foo', [foo => [qw(foo foo.bar)]]);",
                "// Line 36: ",
                "// Line 37: # /optional/*",
                "// Line 38: # /optional/*/*",
                "// vulnerable line: 39: $r->any('/optional/:foo/:bar')->to(bar => 'test');",
                "// Line 40: ",
                "// Line 41: # /optional2",
                "// Line 42: # /optional2/*",
                "// Line 43: # /optional2/*/*",
                "// vulnerable line: 44: $r->any('/optional2/:foo')->to(foo => 'one')->any('/:bar')->to(bar => 'two');",
                "// Line 45: ",
                "// Line 46: # /*/test",
                "// Line 47: my $test = $r->any('/:testcase/test')->to(action => 'test');",
                "// Line 48: ",
                "// Line 49: # /*/test/edit",
                "// Line 50: $test->any('/edit')->to(action => 'edit')->name('test_edit');",
                "// Line 51: ",
                "// Line 52: # /*/testedit",
                "// Line 53: $r->any('/:testcase/testedit')->to(action => 'testedit');",
                "// Line 54: ",
                "// Line 79: # /wildcards/2/*",
                "// Line 80: $r->any('/wildcards/2/*wildcard')->to(testcase => 'card', action => 'wild');",
                "// Line 81: ",
                "// Line 82: # /wildcards/3/*/foo",
                "// Line 83: $r->any('/wildcards/3/<*wildcard>/foo')->to(testcase => 'very', action => 'dangerous');",
                "// Line 84: ",
                "// Line 85: # /wildcards/4/*/foo",
                "// Line 86: $r->any('/wildcards/4/*wildcard/foo')->to(testcase => 'somewhat', action => 'dangerous');",
                "// Line 87: ",
                "// Line 88: # /format",
                "// vulnerable line: 89: # /format.html",
                "// vulnerable line: 90: $r->any('/format')->to(testcase => 'hello')->to(action => 'you', format => 'html');",
                "// Line 91: ",
                "// Line 92: # /format2.txt",
                "// Line 93: $r->any('/format2', [format => qr/txt/])->to(testcase => 'we', action => 'howdy');",
                "// Line 94: ",
                "// Line 95: # /format3.txt",
                "// Line 96: # /format3.text",
                "// Line 97: $r->any('/format3', [format => [qw(txt text)]])->to(testcase => 'we', action => 'cheers');",
                "// Line 98: ",
                "// Line 99: # /format4",
                "// Line 100: # /format4.html",
                "// Line 112: ",
                "// Line 113: # /type/23",
                "// Line 114: # /type/24",
                "// Line 115: $r->add_type(my_num => [23, 24]);",
                "// Line 116: $r->any('/type/<id:my_num>')->to('foo#bar');",
                "// Line 117: ",
                "// Line 118: # /articles/1/edit",
                "// Line 119: # /articles/1/delete",
                "// Line 120: my $inline = $r->any('/articles/:id')->inline(1)->to(testcase => 'articles', action => 'load', format => 'html');",
                "// Line 121: $inline->any('/edit')->to(testcase => 'articles', action => 'edit');",
                "// vulnerable line: 122: $inline->any('/delete')->to(testcase => 'articles', action => 'delete', format => undef)->name('articles_delete');",
                "// Line 123: ",
                "// Line 124: # GET /method/get",
                "// vulnerable line: 125: $r->any('/method/get')->methods('GET')->to(testcase => 'method', action => 'get');",
                "// Line 126: ",
                "// Line 127: # POST /method/post",
                "// Line 128: $r->any('/method/post')->methods('post')->to(testcase => 'method', action => 'post');",
                "// Line 129: ",
                "// Line 130: # POST|GET /method/post_get",
                "// Line 131: $r->any('/method/post_get')->methods(qw(POST get))->to(testcase => 'method', action => 'post_get');",
                "// Line 132: ",
                "// Line 133: # /simple/form",
                "// Line 134: $r->any('/simple/form')->to('test-test#test');",
                "// Line 135: ",
                "// Line 136: # /regex/alternatives/*",
                "// Line 137: $r->any('/regex/alternatives/:alternatives', [alternatives => qr/foo|bar|baz/])",
                "// Line 138:   ->to(testcase => 'regex', action => 'alternatives');",
                "// Line 139: ",
                "// Line 140: # /versioned/1.0/test",
                "// Line 141: # /versioned/1.0/test.xml",
                "// Line 142: # /versioned/2.4/test",
                "// Line 143: # /versioned/2.4/test.xml",
                "// Line 144: my $versioned = $r->any('/versioned');",
                "// vulnerable line: 145: $versioned->any('/1.0')->to(testcase => 'bar')->any('/test')->to(action => 'baz');",
                "// vulnerable line: 146: $versioned->any('/2.4')->to(testcase => 'foo')->any('/test')->to(action => 'bar');",
                "// Line 147: ",
                "// Line 148: # /versioned/too/1.0",
                "// Line 149: my $too = $r->any('/versioned/too')->to('too#');",
                "// Line 150: $too->any('/1.0')->to('#foo');",
                "// Line 151: $too->any('/2.0', [format => 0])->to('#bar');",
                "// Line 152: ",
                "// Line 153: # /multi/foo.bar",
                "// Line 154: my $multi = $r->any('/multi');",
                "// Line 155: $multi->any('/foo.bar', [format => 0])->to('just#works');",
                "// Line 156: $multi->any('/bar.baz')->to('works#too', format => 'xml');",
                "// Line 157: ",
                "// Line 158: # /nodetect",
                "// Line 159: # /nodetect2.txt",
                "// Line 160: # /nodetect2.html",
                "// vulnerable line: 161: my $inactive = $r->any('/', [format => 0]);",
                "// Line 162: $inactive->any('/nodetect')->to('foo#none');",
                "// Line 163: $inactive->any('/nodetect2', [format => ['txt', 'html']])->to('bar#hyper');",
                "// Line 164: ",
                "// Line 165: # /target/first",
                "// Line 166: # /target/second",
                "// Line 167: # /target/second.xml",
                "// Line 168: # /source/third",
                "// Line 169: # /source/third.xml",
                "// Line 170: my $source = $r->any('/source')->to('source#');",
                "// Line 171: my $first  = $source->any('/', [format => 0])->any('/first')->to('#first');",
                "// vulnerable line: 172: $source->any('/second')->to('#second');",
                "// vulnerable line: 173: my $third  = $source->any('/third')->to('#third');",
                "// Line 174: my $target = $r->remove->any('/target')->to('target#');",
                "// Line 175: my $second = $r->find('second');",
                "// Line 176: is $second->render({}), '/source/second', 'right result';",
                "// Line 177: $second->remove;",
                "// Line 178: is $second->render({}), '/second', 'right result';",
                "// Line 179: $target->add_child($first)->add_child($second);",
                "// Line 180: is $second->render({}), '/target/second', 'right result';",
                "// Line 181: ",
                "// Line 182: # /websocket",
                "// Line 183: $r->websocket('/websocket' => {testcase => 'ws'})->any('/')->to(action => 'just')->any->to(works => 1);",
                "// Line 184: ",
                "// Line 185: # /slash",
                "// vulnerable line: 186: $r->any('/slash')->to(testcase => 'just')->any('/')->to(action => 'slash');",
                "// Line 187: ",
                "// Line 188: # /missing/*/name",
                "// Line 189: # /missing/too",
                "// Line 190: # /missing/too/test",
                "// Line 191: $r->any('/missing/:/name')->to('missing#placeholder');",
                "// Line 192: $r->any('/missing/*/name')->to('missing#wildcard');",
                "// Line 193: $r->any('/missing/too/*', ['' => ['test']])->to('missing#too', '' => 'missing');",
                "// Line 194: ",
                "// Line 195: # /partial/*",
                "// Line 196: $r->any('/partial')->partial(1)->to('foo#bar');",
                "// Line 233: $m->find($c => {method => 'GET', path => '/does_not_exist'});",
                "// Line 234: is $m->root,         $r, 'right root';",
                "// Line 235: is $m->endpoint,     undef, 'no endpoint';",
                "// Line 236: is_deeply $m->stack, [], 'empty stack';",
                "// Line 237: ",
                "// Line 238: # Introspect",
                "// Line 239: is $r->find('very_clean')->to_string,      '/clean',               'right pattern';",
                "// Line 240: is $r->find('0')->to_string,               '/0',                   'right pattern';",
                "// Line 241: is $r->find('test_edit')->to_string,       '/:testcase/test/edit', 'right pattern';",
                "// Line 242: is $r->find('articles_delete')->to_string, '/articles/:id/delete', 'right pattern';",
                "// vulnerable line: 243: is $r->find('nodetect')->pattern->constraints->{format}, 0, 'right value';",
                "// Line 244: is $r->find('nodetect')->to->{controller}, 'foo', 'right testcase';",
                "// Line 245: ",
                "// Line 246: # Null route",
                "// Line 247: $m = Mojolicious::Routes::Match->new(root => $r);",
                "// Line 248: $m->find($c => {method => 'GET', path => '/0'});",
                "// Line 249: is_deeply $m->stack, [{null => 1}], 'right strucutre';",
                "// Line 250: is $m->path_for->{path}, '/0', 'right path';",
                "// Line 251: ",
                "// Line 252: # Alternatives with default",
                "// Line 253: $m = Mojolicious::Routes::Match->new(root => $r);",
                "// Line 389: is $m->path_for('articles_delete', format => undef)->{path}, '/articles/1/delete', 'right path';",
                "// Line 390: is $m->path_for('articles_delete')->{path}, '/articles/1/delete', 'right path';",
                "// Line 391: is $m->path_for('articles_delete', id => 12)->{path}, '/articles/12/delete', 'right path';",
                "// Line 392: $m = Mojolicious::Routes::Match->new(root => $r);",
                "// Line 393: $m->find($c => {method => 'GET', path => '/articles/1/delete'});",
                "// Line 394: @stack = (",
                "// Line 395:   {testcase => 'articles', action => 'load',   id => 1, format => 'html'},",
                "// Line 396:   {testcase => 'articles', action => 'delete', id => 1, format => undef}",
                "// Line 397: );",
                "// Line 398: is_deeply $m->stack, \\@stack, 'right structure';",
                "// vulnerable line: 399: is $m->path_for->{path}, '/articles/1/delete', 'right path';",
                "// Line 400: $m = Mojolicious::Routes::Match->new(root => $r);",
                "// Line 401: $m->find($c => {method => 'GET', path => '/articles/1/delete.json'});",
                "// Line 402: @stack = (",
                "// Line 403:   {testcase => 'articles', action => 'load',   id => 1, format => 'json'},",
                "// Line 404:   {testcase => 'articles', action => 'delete', id => 1, format => 'json'}",
                "// Line 405: );",
                "// Line 406: is_deeply $m->stack, \\@stack, 'right structure';",
                "// vulnerable line: 407: is $m->path_for->{path}, '/articles/1/delete', 'right path';",
                "// Line 408: ",
                "// Line 409: # Root",
                "// Line 410: $m = Mojolicious::Routes::Match->new(root => $r);",
                "// Line 411: $m->find($c => {method => 'GET', path => '/'});",
                "// Line 412: is_deeply $m->stack, [{testcase => 'hello', action => 'world'}], 'right structure';",
                "// Line 413: is $m->path_for->{path}, '/', 'right path';",
                "// Line 414: ",
                "// Line 415: # Path and captures",
                "// Line 416: $m = Mojolicious::Routes::Match->new(root => $r);",
                "// Line 417: $m->find($c => {method => 'GET', path => '/foo/test/edit'});",
                "// Line 604: is_deeply $m->stack, [{controller => 'foo', action => 'bar', id => 24}], 'right structure';",
                "// Line 605: is $m->path_for->{path}, '/type/24', 'right path';",
                "// Line 606: $m = Mojolicious::Routes::Match->new(root => $r);",
                "// Line 607: $m->find($c => {method => 'GET', path => '/type/25'});",
                "// Line 608: is_deeply $m->stack, [], 'empty stack';",
                "// Line 609: ",
                "// Line 610: # Request methods",
                "// Line 611: $m = Mojolicious::Routes::Match->new(root => $r);",
                "// Line 612: $m->find($c => {method => 'GET', path => '/method/get.html'});",
                "// Line 613: is_deeply $m->stack, [{testcase => 'method', action => 'get', format => 'html'}], 'right structure';",
                "// vulnerable line: 614: is $m->path_for->{path}, '/method/get', 'right path';",
                "// Line 615: is $m->endpoint->suggested_method, 'GET', 'right method';",
                "// Line 616: $m = Mojolicious::Routes::Match->new(root => $r);",
                "// Line 617: $m->find($c => {method => 'POST', path => '/method/post'});",
                "// Line 618: is_deeply $m->stack, [{testcase => 'method', action => 'post'}], 'right structure';",
                "// Line 619: is $m->path_for->{path}, '/method/post', 'right path';",
                "// Line 620: is $m->endpoint->suggested_method, 'POST', 'right method';",
                "// Line 621: $m = Mojolicious::Routes::Match->new(root => $r);",
                "// Line 622: $m->find($c => {method => 'GET', path => '/method/post_get'});",
                "// Line 623: is_deeply $m->stack, [{testcase => 'method', action => 'post_get'}], 'right structure';",
                "// Line 624: is $m->path_for->{path}, '/method/post_get', 'right path';",
                "// Line 658: $m->find($c => {method => 'GET', path => '/regex/alternatives/baz'});",
                "// Line 659: is_deeply $m->stack, [{testcase => 'regex', action => 'alternatives', alternatives => 'baz'}], 'right structure';",
                "// Line 660: is $m->path_for->{path}, '/regex/alternatives/baz', 'right path';",
                "// Line 661: $m = Mojolicious::Routes::Match->new(root => $r);",
                "// Line 662: $m->find($c => {method => 'GET', path => '/regex/alternatives/yada'});",
                "// Line 663: is_deeply $m->stack, [], 'empty stack';",
                "// Line 664: ",
                "// Line 665: # Route with version",
                "// Line 666: $m = Mojolicious::Routes::Match->new(root => $r);",
                "// Line 667: $m->find($c => {method => 'GET', path => '/versioned/1.0/test'});",
                "// vulnerable line: 668: is_deeply $m->stack, [{testcase => 'bar', action => 'baz'}], 'right structure';",
                "// vulnerable line: 669: is $m->path_for->{path}, '/versioned/1.0/test', 'right path';",
                "// Line 670: $m = Mojolicious::Routes::Match->new(root => $r);",
                "// Line 671: $m->find($c => {method => 'GET', path => '/versioned/1.0/test.xml'});",
                "// Line 672: is_deeply $m->stack, [{testcase => 'bar', action => 'baz', format => 'xml'}], 'right structure';",
                "// vulnerable line: 673: is $m->path_for->{path}, '/versioned/1.0/test', 'right path';",
                "// Line 674: $m = Mojolicious::Routes::Match->new(root => $r);",
                "// Line 675: $m->find($c => {method => 'GET', path => '/versioned/2.4/test'});",
                "// vulnerable line: 676: is_deeply $m->stack, [{testcase => 'foo', action => 'bar'}], 'right structure';",
                "// vulnerable line: 677: is $m->path_for->{path}, '/versioned/2.4/test', 'right path';",
                "// Line 678: $m = Mojolicious::Routes::Match->new(root => $r);",
                "// Line 679: $m->find($c => {method => 'GET', path => '/versioned/2.4/test.xml'});",
                "// Line 680: is_deeply $m->stack, [{testcase => 'foo', action => 'bar', format => 'xml'}], 'right structure';",
                "// vulnerable line: 681: is $m->path_for->{path}, '/versioned/2.4/test', 'right path';",
                "// Line 682: $m = Mojolicious::Routes::Match->new(root => $r);",
                "// Line 683: $m->find($c => {method => 'GET', path => '/versioned/3.0/test'});",
                "// Line 684: is_deeply $m->stack, [], 'empty stack';",
                "// Line 685: $m = Mojolicious::Routes::Match->new(root => $r);",
                "// Line 686: $m->find($c => {method => 'GET', path => '/versioned/3.4/test'});",
                "// Line 687: is_deeply $m->stack, [], 'empty stack';",
                "// Line 688: $m = Mojolicious::Routes::Match->new(root => $r);",
                "// Line 689: $m->find($c => {method => 'GET', path => '/versioned/0.3/test'});",
                "// Line 690: is_deeply $m->stack, [], 'empty stack';",
                "// Line 691: ",
                "// Line 741: is_deeply $m->stack, [{controller => 'target', action => 'first'}], 'right structure';",
                "// Line 742: is $m->path_for->{path}, '/target/first', 'right path';",
                "// Line 743: $m = Mojolicious::Routes::Match->new(root => $r);",
                "// Line 744: $m->find($c => {method => 'GET', path => '/target/first.xml'});",
                "// Line 745: is_deeply $m->stack, [], 'empty stack';",
                "// Line 746: $m = Mojolicious::Routes::Match->new(root => $r);",
                "// Line 747: $m->find($c => {method => 'GET', path => '/source/first'});",
                "// Line 748: is_deeply $m->stack, [], 'empty stack';",
                "// Line 749: $m = Mojolicious::Routes::Match->new(root => $r);",
                "// Line 750: $m->find($c => {method => 'GET', path => '/target/second'});",
                "// vulnerable line: 751: is_deeply $m->stack, [{controller => 'target', action => 'second'}], 'right structure';",
                "// vulnerable line: 752: is $m->path_for->{path}, '/target/second', 'right path';",
                "// Line 753: $m = Mojolicious::Routes::Match->new(root => $r);",
                "// Line 754: $m->find($c => {method => 'GET', path => '/target/second.xml'});",
                "// Line 755: is_deeply $m->stack, [{controller => 'target', action => 'second', format => 'xml'}], 'right structure';",
                "// vulnerable line: 756: is $m->path_for->{path}, '/target/second', 'right path';",
                "// Line 757: $m = Mojolicious::Routes::Match->new(root => $r);",
                "// Line 758: $m->find($c => {method => 'GET', path => '/source/second'});",
                "// Line 759: is_deeply $m->stack, [], 'empty stack';",
                "// Line 760: $m = Mojolicious::Routes::Match->new(root => $r);",
                "// Line 761: $m->find($c => {method => 'GET', path => '/source/third'});",
                "// vulnerable line: 762: is_deeply $m->stack, [{controller => 'source', action => 'third'}], 'right structure';",
                "// vulnerable line: 763: is $m->path_for->{path}, '/source/third', 'right path';",
                "// Line 764: $m = Mojolicious::Routes::Match->new(root => $r);",
                "// Line 765: $m->find($c => {method => 'GET', path => '/source/third.xml'});",
                "// Line 766: is_deeply $m->stack, [{controller => 'source', action => 'third', format => 'xml'}], 'right structure';",
                "// vulnerable line: 767: is $m->path_for->{path}, '/source/third', 'right path';",
                "// Line 768: $m = Mojolicious::Routes::Match->new(root => $r);",
                "// Line 769: $m->find($c => {method => 'GET', path => '/target/third'});",
                "// Line 770: is_deeply $m->stack, [], 'empty stack';",
                "// Line 771: ",
                "// Line 772: # WebSocket",
                "// Line 773: $m = Mojolicious::Routes::Match->new(root => $r);",
                "// Line 774: $m->find($c => {method => 'GET', path => '/websocket'});",
                "// Line 775: is_deeply $m->stack, [], 'empty stack';",
                "// Line 776: $m->find($c => {method => 'GET', path => '/websocket', websocket => 1});",
                "// Line 777: is_deeply $m->stack, [{testcase => 'ws', action => 'just', works => 1}], 'right structure';",
                "// Line 778: is $m->path_for->{path}, '/websocket', 'right path';",
                "// Line 779: ok $m->path_for->{websocket}, 'is a websocket';",
                "// Line 780: ",
                "// Line 781: # Just a slash with a format after a path",
                "// Line 782: $m = Mojolicious::Routes::Match->new(root => $r);",
                "// Line 783: $m->find($c => {method => 'GET', path => '/slash.txt'});",
                "// Line 784: is_deeply $m->stack, [{testcase => 'just', action => 'slash', format => 'txt'}], 'right structure';",
                "// vulnerable line: 785: is $m->path_for->{path}, '/slash', 'right path';",
                "// Line 786: ok !$m->path_for->{websocket}, 'not a websocket';",
                "// Line 787: is $m->path_for(format => 'html')->{path}, '/slash.html', 'right path';",
                "// Line 788: ",
                "// Line 789: # Nameless placeholder",
                "// Line 790: $m = Mojolicious::Routes::Match->new(root => $r);",
                "// Line 791: $m->find($c => {method => 'GET', path => '/missing/foo/name'});",
                "// Line 792: is_deeply $m->stack, [{controller => 'missing', action => 'placeholder', '' => 'foo'}], 'right structure';",
                "// Line 793: is $m->path_for->{path}, '/missing/foo/name', 'right path';",
                "// Line 794: is $m->path_for('' => 'bar')->{path}, '/missing/bar/name', 'right path';",
                "// Line 795: $m = Mojolicious::Routes::Match->new(root => $r);"
            ]
        },
        {
            "filename_of_changes": "twinkle_lite_app.t",
            "code_language": "Perl",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 44:   };",
                "// Line 45:   is $config->{foo},  'bar', 'right value';",
                "// Line 46:   is $config->{test}, 23,    'right value';",
                "// Line 47:   is app->defaults('foo_test'), 24, 'right value';",
                "// Line 48: };",
                "// Line 49: ",
                "// Line 50: get '/' => {name => '<sebastian>'} => 'index';",
                "// Line 51: ",
                "// Line 52: get '/advanced' => 'advanced';",
                "// Line 53: ",
                "// vulnerable line: 54: get '/rest' => sub {",
                "// Line 55:   shift->respond_to(foo => {text => 'foo works!'}, html => {text => 'html works!'})",
                "// Line 56:     ->res->headers->header('X-Rest' => 1);",
                "// Line 57: };",
                "// Line 58: ",
                "// Line 59: get '/dead' => sub {die};",
                "// Line 60: ",
                "// Line 61: my $t = Test::Mojo->new;",
                "// Line 62: ",
                "// Line 63: subtest 'Basic template with \"twinkle\" syntax and \"ep\" layout' => sub {",
                "// Line 64:   $t->get_ok('/')->status_is(200)->header_is('X-Append' => 'bar')"
            ]
        }
    ]
}