{
    "cve_id": "CVE-2024-34360",
    "cve_description": "go-spacemesh is a Go implementation of the Spacemesh protocol full node. Nodes can publish activations transactions (ATXs) which reference the incorrect previous ATX of the Smesher that created the ATX. ATXs are expected to form a single chain from the newest to the first ATX ever published by an identity. Allowing Smeshers to reference an earlier (but not the latest) ATX as previous breaks this protocol rule and can serve as an attack vector where Nodes are rewarded for holding their PoST data for less than one epoch but still being eligible for rewards. This vulnerability is fixed in go-spacemesh 1.5.2-hotfix1 and Spacemesh API 1.37.1.",
    "cve_publish_date": "2024-05-14T15:38Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Verify that previous ATX points to correct ATX when handling incoming ATXs (#27)\n\n---------\n\nCo-authored-by: Bartosz Różański <bartek.roza@gmail.com>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "config.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "distributed_post_verification_test.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "12",
            "number_of_lines_deleted_vulnerable_to_cve": "6",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 255: ",
                "// Line 256:             select {",
                "// Line 257:             case <-publishCtx.Done():",
                "// Line 258:                 return nil",
                "// Line 259:             case <-time.After(10 * time.Second):",
                "// Line 260:             }",
                "// Line 261:         }",
                "// Line 262:     })",
                "// Line 263: ",
                "// Line 264:     // 5. Wait for POST malfeasance proof",
                "// vulnerable line: 265: logger.Info(\"waiting for malfeasance proof\")",
                "// vulnerable line: 266: err = malfeasanceStream(ctx, cl.Client(0), logger, func(malfeasance *pb.MalfeasanceStreamResponse) (bool, error) {",
                "// Line 267:         stopPublishing()",
                "// Line 268:         logger.Info(\"malfeasance proof received\")",
                "// vulnerable line: 269: require.Equal(t, malfeasance.GetProof().GetSmesherId().Id, signer.NodeID().Bytes())",
                "// vulnerable line: 270: require.Equal(t, pb.MalfeasanceProof_MALFEASANCE_POST_INDEX, malfeasance.GetProof().GetKind())",
                "// Line 271: ",
                "// Line 272:         var proof mwire.MalfeasanceProof",
                "// vulnerable line: 273: require.NoError(t, codec.Decode(malfeasance.Proof.Proof, &proof))",
                "// Line 274:         require.Equal(t, mwire.InvalidPostIndex, proof.Proof.Type)",
                "// Line 275:         invalidPostProof := proof.Proof.Data.(*mwire.InvalidPostIndexProof)",
                "// Line 276:         logger.Sugar().Infow(\"malfeasance post proof\", \"proof\", invalidPostProof)",
                "// Line 277:         invalidAtx := invalidPostProof.Atx",
                "// Line 278:         require.Equal(t, atx.PublishEpoch, invalidAtx.Publish)",
                "// Line 279:         require.Equal(t, atx.SmesherID, invalidAtx.SmesherID)",
                "// Line 280:         require.Equal(t, atx.ID().Hash32(), invalidAtx.HashInnerBytes())",
                "// Line 281: ",
                "// Line 282:         meta := &shared.ProofMetadata{",
                "// Line 283:             NodeId:          invalidAtx.NodeID.Bytes(),",
                "// Line 284:             CommitmentAtxId: invalidAtx.CommitmentATX.Bytes(),",
                "// Line 285:             NumUnits:        invalidAtx.NumUnits,",
                "// Line 286:             Challenge:       invalidAtx.NIPost.PostMetadata.Challenge,",
                "// Line 287:             LabelsPerUnit:   invalidAtx.NIPost.PostMetadata.LabelsPerUnit,",
                "// Line 288:         }",
                "// vulnerable line: 289: err = verifier.Verify(ctx, (*shared.Proof)(invalidAtx.NIPost.Post), meta)",
                "// Line 290:         var invalidIdxError *verifying.ErrInvalidIndex",
                "// Line 291:         require.ErrorAs(t, err, &invalidIdxError)",
                "// Line 292:         return false, nil",
                "// Line 293:     })",
                "// Line 294:     require.NoError(t, err)",
                "// Line 295: }"
            ]
        },
        {
            "filename_of_changes": "events.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "go.mod",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "go.sum",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 548: github.com/smartystreets/assertions v0.0.0-20180927180507-b2de0cb4f26d/go.mod h1:OnSkiWE9lh6wB0YB77sQom3nweQdgAjqCqsofrRNTgc=",
                "// Line 549: github.com/smartystreets/assertions v1.2.0 h1:42S6lae5dvLc7BrLu/0ugRtcFVjoJNMC/N3yZFZkDFs=",
                "// Line 550: github.com/smartystreets/assertions v1.2.0/go.mod h1:tcbTF8ujkAEcZ8TElKY+i30BzYlVhC/LOxJk7iOWnoo=",
                "// Line 551: github.com/smartystreets/goconvey v0.0.0-20181108003508-044398e4856c/go.mod h1:XDJAKZRPZ1CvBcN2aX5YOUTYGHki24fSF0Iv48Ibg0s=",
                "// Line 552: github.com/smartystreets/goconvey v1.7.2 h1:9RBaZCeXEQ3UselpuwUQHltGVXvdwm6cv1hgR6gDIPg=",
                "// Line 553: github.com/smartystreets/goconvey v1.7.2/go.mod h1:Vw0tHAZW6lzCRk3xgdin6fKYcG+G3Pg9vgXWeJpQFMM=",
                "// Line 554: github.com/sourcegraph/annotate v0.0.0-20160123013949-f4cad6c6324d/go.mod h1:UdhH50NIW0fCiwBSr0co2m7BnFLdv4fQTgdqdJTHFeE=",
                "// Line 555: github.com/sourcegraph/conc v0.3.0 h1:OQTbbt6P72L20UqAkXXuLOj79LfEanQ+YQFNpLA9ySo=",
                "// Line 556: github.com/sourcegraph/conc v0.3.0/go.mod h1:Sdozi7LEKbFPqYX2/J+iBAM6HpqSLTASQIKqDmF7Mt0=",
                "// Line 557: github.com/sourcegraph/syntaxhighlight v0.0.0-20170531221838-bd320f5d308e/go.mod h1:HuIsMU8RRBOtsCgI77wP899iHVBQpCmg4ErYMZB+2IA=",
                "// vulnerable line: 558: github.com/spacemeshos/api/release/go v1.37.0 h1:bN6AhSMVSmAShGxUYKwFBfzY3U1XtHezpDjt20dHjBM=",
                "// vulnerable line: 559: github.com/spacemeshos/api/release/go v1.37.0/go.mod h1:Ed7SdL2YgqNg2SeShEAonW3GTPuuaGzsY5i4bgziCRo=",
                "// Line 560: github.com/spacemeshos/economics v0.1.3 h1:ACkq3mTebIky4Zwbs9SeSSRZrUCjU/Zk0wq9Z0BTh2A=",
                "// Line 561: github.com/spacemeshos/economics v0.1.3/go.mod h1:FH7u0FzTIm6Kpk+X5HOZDvpkgNYBKclmH86rVwYaDAo=",
                "// Line 562: github.com/spacemeshos/fixed v0.1.1 h1:N1y4SUpq1EV+IdJrWJwUCt1oBFzeru/VKVcBsvPc2Fk=",
                "// Line 563: github.com/spacemeshos/fixed v0.1.1/go.mod h1:B/moObha9wGnwljZP+w/dYAwzv097aL9VV8Oyv2cM/E=",
                "// Line 564: github.com/spacemeshos/go-scale v1.2.0 h1:ZlA2L1ILym2gmyJUwUdLTiyP1ZIG0U4xE9nFVFLi83M=",
                "// Line 565: github.com/spacemeshos/go-scale v1.2.0/go.mod h1:HV6e3/X5h9u2aFpYKJxt7PY/fBuLBegEKWgeZJ+/5jE=",
                "// Line 566: github.com/spacemeshos/merkle-tree v0.2.3 h1:zGEgOR9nxAzJr0EWjD39QFngwFEOxfxMloEJZtAysas=",
                "// Line 567: github.com/spacemeshos/merkle-tree v0.2.3/go.mod h1:VomOcQ5pCBXz7goiWMP5hReyqOfDXGSKbrH2GB9Htww=",
                "// Line 568: github.com/spacemeshos/poet v0.10.2 h1:FVb0xgCFcjZyIGBQ92SlOZVx4KCmlCRRL4JSHL6LMGU=",
                "// Line 569: github.com/spacemeshos/poet v0.10.2/go.mod h1:73ROEXGladw3RbvhAk0sIGi/ttfpo+ASUBRvnBK55N8="
            ]
        },
        {
            "filename_of_changes": "hashes.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "identities.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 100:     // Get total count in the same select statement to avoid the need for transaction",
                "// Line 101:     if _, err := db.Exec(",
                "// Line 102:         \"select (select count(*) from identities where proof is not null) as total, \"+",
                "// Line 103:             \"pubkey from identities where proof is not null\", nil, dec); err != nil {",
                "// Line 104:         return fmt.Errorf(\"get malicious identities: %w\", err)",
                "// Line 105:     }",
                "// Line 106: ",
                "// Line 107:     return callbackErr",
                "// Line 108: }",
                "// Line 109: ",
                "// vulnerable line: 110: // GetMalicious retrives malicious node IDs from the database.",
                "// Line 111: func GetMalicious(db sql.Executor) (nids []types.NodeID, err error) {",
                "// Line 112:     if err = IterateMalicious(db, func(total int, nid types.NodeID) error {",
                "// Line 113:         if nids == nil {",
                "// Line 114:             nids = make([]types.NodeID, 0, total)",
                "// Line 115:         }",
                "// Line 116:         nids = append(nids, nid)",
                "// Line 117:         return nil",
                "// Line 118:     }); err != nil {",
                "// Line 119:         return nil, err",
                "// Line 120:     }"
            ]
        },
        {
            "filename_of_changes": "layer.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 11:     \"github.com/spacemeshos/go-spacemesh/log\"",
                "// Line 12: )",
                "// Line 13: ",
                "// Line 14: var (",
                "// Line 15:     layersPerEpoch uint32",
                "// Line 16:     // effectiveGenesis marks when actual proposals would start being created in the network. It takes into account",
                "// Line 17:     // the first genesis epoch and the following epoch in which ATXs are published.",
                "// Line 18:     effectiveGenesis uint32",
                "// Line 19: ",
                "// Line 20:     // EmptyLayerHash is the layer hash for an empty layer.",
                "// vulnerable line: 21: EmptyLayerHash = Hash32{}",
                "// Line 22: )",
                "// Line 23: ",
                "// Line 24: // SetLayersPerEpoch sets global parameter of layers per epoch, all conversions from layer to epoch use this param.",
                "// Line 25: func SetLayersPerEpoch(layers uint32) {",
                "// Line 26:     atomic.StoreUint32(&layersPerEpoch, layers)",
                "// Line 27:     SetEffectiveGenesis(layers*2 - 1)",
                "// Line 28: }",
                "// Line 29: ",
                "// Line 30: func SetEffectiveGenesis(layer uint32) {",
                "// Line 31:     atomic.StoreUint32(&effectiveGenesis, layer)"
            ]
        },
        {
            "filename_of_changes": "mainnet.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 66:     hare3conf.Enable = true",
                "// Line 67:     hare3conf.EnableLayer = 35117",
                "// Line 68:     return Config{",
                "// Line 69:         BaseConfig: BaseConfig{",
                "// Line 70:             DataDirParent:         defaultDataDir,",
                "// Line 71:             FileLock:              filepath.Join(os.TempDir(), \"spacemesh.lock\"),",
                "// Line 72:             MetricsPort:           1010,",
                "// Line 73:             DatabaseConnections:   16,",
                "// Line 74:             DatabasePruneInterval: 30 * time.Minute,",
                "// Line 75:             DatabaseVacuumState:   15,",
                "// vulnerable line: 76: PruneActivesetsFrom:   12, // starting from epoch 13 activesets below 12 will be pruned",
                "// Line 77:             NetworkHRP:            \"sm\",",
                "// Line 78: ",
                "// Line 79:             LayerDuration:  5 * time.Minute,",
                "// Line 80:             LayerAvgSize:   50,",
                "// Line 81:             LayersPerEpoch: 4032,",
                "// Line 82: ",
                "// Line 83:             TxsPerProposal: 700,       // https://github.com/spacemeshos/go-spacemesh/issues/4559",
                "// Line 84:             BlockGasLimit:  100107000, // 3000 of spends",
                "// Line 85: ",
                "// Line 86:             OptFilterThreshold: 90,"
            ]
        },
        {
            "filename_of_changes": "metrics.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 36:         \"number of invalid malfeasance proofs\",",
                "// Line 37:         []string{",
                "// Line 38:             typeLabel,",
                "// Line 39:         },",
                "// Line 40:     )",
                "// Line 41: ",
                "// Line 42:     numInvalidProofsATX       = numInvalidProofs.WithLabelValues(multiATXs)",
                "// Line 43:     numInvalidProofsBallot    = numInvalidProofs.WithLabelValues(multiBallots)",
                "// Line 44:     numInvalidProofsHare      = numInvalidProofs.WithLabelValues(hareEquivocate)",
                "// Line 45:     numInvalidProofsPostIndex = numInvalidProofs.WithLabelValues(invalidPostIndex)",
                "// vulnerable line: 46: numMalformed              = numInvalidProofs.WithLabelValues(\"mal\")",
                "// Line 47: )"
            ]
        },
        {
            "filename_of_changes": "root.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "wire_v1.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "14",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        }
    ]
}