{
    "cve_id": "CVE-2024-2035",
    "cve_description": "An improper authorization vulnerability exists in the zenml-io/zenml repository, specifically within the API PUT /api/v1/users/id endpoint. This vulnerability allows any authenticated user to modify the information of other users, including changing the `active` status of user accounts to false, effectively deactivating them. This issue affects version 0.55.3 and was fixed in version 0.56.2. The impact of this vulnerability is significant as it allows for the deactivation of admin accounts, potentially disrupting the functionality and security of the application.",
    "cve_publish_date": "2024-06-06T19:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Add admin users notion (#2494)\n\n* add admin users to OSS\r\n\r\n* skip missing methods\r\n\r\n* increase readability\r\n\r\n* doc string\r\n\r\n* lint\r\n\r\n* lint\r\n\r\n* missing arg\r\n\r\n* add some edge-cases\r\n\r\n* wip commit to carve out clean_client changes\r\n\r\n* revert irrelevant changes\r\n\r\n* revert irrelevant changes\r\n\r\n* rework tests to run on rest\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: Alex Strick van Linschoten <strickvl@users.noreply.github.com>\r\nCo-authored-by: Stefan Nica <stefan@zenml.io>\r\n\r\n* polish test cases\r\n\r\n* fix branching\r\n\r\n* admin user mgmt CLI/Client\r\n\r\n* close activation vulnerability\r\n\r\n* revert rbac changes\r\n\r\n* verify admin permissions in endpoints\r\n\r\n* add `is_admin` to external users\r\n\r\n* only reg users will be migrated as admins\r\n\r\n* default is always admin\r\n\r\n* extend tests\r\n\r\n* lint\r\n\r\n* default `is_admin` None\r\n\r\n* Auto-update of Starter template\r\n\r\n* review suggestions\r\n\r\n* review suggestions\r\n\r\n* calm down linter\r\n\r\n* Update src/zenml/cli/user_management.py\r\n\r\nCo-authored-by: coderabbitai[bot] <136622811+coderabbitai[bot]@users.noreply.github.com>\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: Alex Strick van Linschoten <strickvl@users.noreply.github.com>\r\n\r\n* review suggestion\r\n\r\n---------\r\n\r\nCo-authored-by: Alex Strick van Linschoten <strickvl@users.noreply.github.com>\r\nCo-authored-by: Stefan Nica <stefan@zenml.io>\r\nCo-authored-by: GitHub Actions <actions@github.com>\r\nCo-authored-by: coderabbitai[bot] <136622811+coderabbitai[bot]@users.noreply.github.com>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "auth.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "client.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "13",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 695:         \"\"\"Create a new user.",
                "// Line 696: ",
                "// Line 697:         Args:",
                "// Line 698:             name: The name of the user.",
                "// Line 699:             password: The password of the user. If not provided, the user will",
                "// Line 700:                 be created with empty password.",
                "// Line 701: ",
                "// Line 702:         Returns:",
                "// Line 703:             The model of the created user.",
                "// Line 704:         \"\"\"",
                "// vulnerable line: 705: user = UserRequest(name=name, password=password or None)",
                "// Line 706:         user.active = (",
                "// Line 707:             password != \"\" if self.zen_store.type != StoreType.REST else True",
                "// Line 708:         )",
                "// Line 709:         created_user = self.zen_store.create_user(user=user)",
                "// Line 710: ",
                "// Line 711:         return created_user",
                "// Line 712: ",
                "// Line 713:     def get_user(",
                "// Line 714:         self,",
                "// Line 715:         name_id_or_prefix: Union[str, UUID],"
            ]
        },
        {
            "filename_of_changes": "conftest.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "endpoint_utils.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 52:     if isinstance(request_model, UserScopedRequest):",
                "// Line 53:         auth_context = get_auth_context()",
                "// Line 54:         assert auth_context",
                "// Line 55: ",
                "// Line 56:         if request_model.user != auth_context.user.id:",
                "// Line 57:             raise IllegalOperationError(",
                "// Line 58:                 f\"Not allowed to create resource '{resource_type}' for a \"",
                "// Line 59:                 \"different user.\"",
                "// Line 60:             )",
                "// Line 61: ",
                "// vulnerable line: 62: verify_permission(resource_type=resource_type, action=Action.CREATE)",
                "// Line 63:     return create_method(request_model)",
                "// Line 64: ",
                "// Line 65: ",
                "// Line 66: def verify_permissions_and_get_entity(",
                "// Line 67:     id: UUIDOrStr,",
                "// Line 68:     get_method: Callable[[UUIDOrStr], AnyResponse],",
                "// Line 69:     **get_method_kwargs: Any,",
                "// Line 70: ) -> AnyResponse:",
                "// Line 71:     \"\"\"Verify permissions and fetch an entity.",
                "// Line 72: "
            ]
        },
        {
            "filename_of_changes": "external_user.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "service_account.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "sql_zen_store.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "9",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "test_user_models.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "6",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 19: from zenml.constants import STR_FIELD_MAX_LENGTH",
                "// Line 20: from zenml.models import UserRequest",
                "// Line 21: ",
                "// Line 22: UUID_BASE_STRING = \"00000000-0000-0000-0000-000000000000\"",
                "// Line 23: ",
                "// Line 24: ",
                "// Line 25: def test_user_request_model_fails_with_long_password():",
                "// Line 26:     \"\"\"Test that the user request model fails with long passwords.\"\"\"",
                "// Line 27:     long_password = \"a\" * (STR_FIELD_MAX_LENGTH + 1)",
                "// Line 28:     with pytest.raises(ValidationError):",
                "// vulnerable line: 29: UserRequest(",
                "// vulnerable line: 30: password=long_password,",
                "// vulnerable line: 31: )",
                "// Line 32: ",
                "// Line 33: ",
                "// Line 34: def test_user_request_model_fails_with_long_activation_token():",
                "// Line 35:     \"\"\"Test that the user request model fails with long activation tokens.\"\"\"",
                "// Line 36:     long_token = \"a\" * (STR_FIELD_MAX_LENGTH + 1)",
                "// Line 37:     with pytest.raises(ValidationError):",
                "// vulnerable line: 38: UserRequest(",
                "// vulnerable line: 39: activation_token=long_token,",
                "// vulnerable line: 40: )"
            ]
        },
        {
            "filename_of_changes": "user_schemas.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "utils.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 226: def verify_permission_for_model(model: AnyResponse, action: Action) -> None:",
                "// Line 227:     \"\"\"Verifies if a user has permission to perform an action on a model.",
                "// Line 228: ",
                "// Line 229:     Args:",
                "// Line 230:         model: The model the user wants to perform the action on.",
                "// Line 231:         action: The action the user wants to perform.",
                "// Line 232:     \"\"\"",
                "// Line 233:     batch_verify_permissions_for_models(models=[model], action=action)",
                "// Line 234: ",
                "// Line 235: ",
                "// vulnerable line: 236: def batch_verify_permissions(resources: Set[Resource], action: Action) -> None:",
                "// Line 237:     \"\"\"Batch permission verification.",
                "// Line 238: ",
                "// Line 239:     Args:",
                "// Line 240:         resources: The resources the user wants to perform the action on.",
                "// Line 241:         action: The action the user wants to perform.",
                "// Line 242: ",
                "// Line 243:     Raises:",
                "// Line 244:         IllegalOperationError: If the user is not allowed to perform the action.",
                "// Line 245:         RuntimeError: If the permission verification failed unexpectedly.",
                "// Line 246:     \"\"\""
            ]
        },
        {
            "filename_of_changes": "utils.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "7",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 204:         if inactive and password is None:",
                "// Line 205:             self.password = None",
                "// Line 206:         else:",
                "// Line 207:             self.password = password or random_str(32)",
                "// Line 208:         self.existing_user = existing_user",
                "// Line 209:         self.delete = delete",
                "// Line 210: ",
                "// Line 211:     def __enter__(self):",
                "// Line 212:         if not self.existing_user:",
                "// Line 213:             new_user = UserRequest(",
                "// vulnerable line: 214: name=self.user_name, password=self.password, active=True",
                "// Line 215:             )",
                "// Line 216:             self.created_user = self.store.create_user(new_user)",
                "// Line 217:         else:",
                "// Line 218:             self.created_user = self.store.get_user(self.user_name)",
                "// Line 219: ",
                "// Line 220:         if self.login or self.existing_user:",
                "// Line 221:             self.original_config = GlobalConfiguration.get_instance()",
                "// Line 222:             self.original_client = Client.get_instance()",
                "// Line 223: ",
                "// Line 224:             GlobalConfiguration._reset_instance()",
                "// Line 1004:             conditional_entity.cleanup()",
                "// Line 1005: ",
                "// Line 1006: ",
                "// Line 1007: workspace_crud_test_config = CrudTestConfig(",
                "// Line 1008:     create_model=WorkspaceRequest(name=sample_name(\"sample_workspace\")),",
                "// Line 1009:     update_model=WorkspaceUpdate(name=sample_name(\"updated_sample_workspace\")),",
                "// Line 1010:     filter_model=WorkspaceFilter,",
                "// Line 1011:     entity_name=\"workspace\",",
                "// Line 1012: )",
                "// Line 1013: user_crud_test_config = CrudTestConfig(",
                "// vulnerable line: 1014: create_model=UserRequest(name=sample_name(\"sample_user\")),",
                "// Line 1015:     update_model=UserUpdate(name=sample_name(\"updated_sample_user\")),",
                "// Line 1016:     filter_model=UserFilter,",
                "// Line 1017:     entity_name=\"user\",",
                "// Line 1018: )",
                "// Line 1019: flavor_crud_test_config = CrudTestConfig(",
                "// Line 1020:     create_model=FlavorRequest(",
                "// Line 1021:         name=sample_name(\"sample_flavor\"),",
                "// Line 1022:         type=StackComponentType.ORCHESTRATOR,",
                "// Line 1023:         integration=\"\",",
                "// Line 1024:         source=\"\","
            ]
        }
    ]
}