{
    "cve_id": "CVE-2024-22423",
    "cve_description": "yt-dlp is a youtube-dl fork with additional features and fixes. The patch that addressed CVE-2023-40581 attempted to prevent RCE when using `--exec` with `%q` by replacing double quotes with two double quotes. However, this escaping is not sufficient, and still allows expansion of environment variables. Support for output template expansion in `--exec`, along with this vulnerable behavior, was added to `yt-dlp` in version 2021.04.11. yt-dlp version 2024.04.09 fixes this issue by properly escaping `%`. It replaces them with `%%cd:~,%`, a variable that expands to nothing, leaving only the leading percent. It is recommended to upgrade yt-dlp to version 2024.04.09 as soon as possible. Also, always be careful when using `--exec`, because while this specific vulnerability has been patched, using unvalidated input in shell commands is inherently dangerous. For Windows users who are not able to upgrade, avoid using any output template expansion in `--exec` other than `{}` (filepath); if expansion in `--exec` is needed, verify the fields you are using do not contain `\"`, `|` or `&`; and/or instead of using `--exec`, write the info json and load the fields from it instead.",
    "cve_publish_date": "2024-04-09T18:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "[core] Prevent RCE when using `--exec` with `%q` (CVE-2023-40581)\n\nThe shell escape function is now using `\"\"` instead of `\\\"`. `utils.Popen` has been patched to properly quote commands.\n\nPrior to this fix using `--exec` together with `%q` when on Windows could cause remote code to execute. See https://github.com/yt-dlp/yt-dlp/security/advisories/GHSA-42h4-v29r-42qg for reference.\n\nAuthored by: Grub4K",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "__init__.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "_utils.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "16",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 820:         def _fix(key):",
                "// Line 821:             orig = env.get(f'{key}_ORIG')",
                "// Line 822:             if orig is None:",
                "// Line 823:                 env.pop(key, None)",
                "// Line 824:             else:",
                "// Line 825:                 env[key] = orig",
                "// Line 826: ",
                "// Line 827:         _fix('LD_LIBRARY_PATH')  # Linux",
                "// Line 828:         _fix('DYLD_LIBRARY_PATH')  # macOS",
                "// Line 829: ",
                "// vulnerable line: 830: def __init__(self, *args, env=None, text=False, **kwargs):",
                "// Line 831:         if env is None:",
                "// Line 832:             env = os.environ.copy()",
                "// Line 833:         self._fix_pyinstaller_ld_path(env)",
                "// Line 834: ",
                "// Line 835:         self.__text_mode = kwargs.get('encoding') or kwargs.get('errors') or text or kwargs.get('universal_newlines')",
                "// Line 836:         if text is True:",
                "// Line 837:             kwargs['universal_newlines'] = True  # For 3.6 compatibility",
                "// Line 838:             kwargs.setdefault('encoding', 'utf-8')",
                "// Line 839:             kwargs.setdefault('errors', 'replace')",
                "// vulnerable line: 840: super().__init__(*args, env=env, **kwargs, startupinfo=self._startupinfo)",
                "// Line 841: ",
                "// Line 842:     def communicate_or_kill(self, *args, **kwargs):",
                "// Line 843:         try:",
                "// Line 844:             return self.communicate(*args, **kwargs)",
                "// Line 845:         except BaseException:  # Including KeyboardInterrupt",
                "// Line 846:             self.kill(timeout=None)",
                "// Line 847:             raise",
                "// Line 848: ",
                "// Line 849:     def kill(self, *, timeout=0):",
                "// Line 850:         super().kill()"
            ]
        },
        {
            "filename_of_changes": "exec.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "5",
            "number_of_lines_deleted_vulnerable_to_cve": "7",
            "Code_with_highlighted_vulnerability_lines": [
                "// vulnerable line: 1: import subprocess",
                "// Line 2: ",
                "// Line 3: from .common import PostProcessor",
                "// Line 4: from ..compat import compat_shlex_quote",
                "// vulnerable line: 5: from ..utils import PostProcessingError, encodeArgument, variadic",
                "// Line 6: ",
                "// Line 7: ",
                "// Line 8: class ExecPP(PostProcessor):",
                "// Line 9: ",
                "// Line 10:     def __init__(self, downloader, exec_cmd):",
                "// Line 11:         PostProcessor.__init__(self, downloader)",
                "// Line 12:         self.exec_cmd = variadic(exec_cmd)",
                "// Line 13: ",
                "// Line 14:     def parse_cmd(self, cmd, info):",
                "// Line 15:         tmpl, tmpl_dict = self._downloader.prepare_outtmpl(cmd, info)",
                "// Line 20:         # If video, and no replacements are found, replace {} for backard compatibility",
                "// Line 21:         if filepath:",
                "// Line 22:             if '{}' not in cmd:",
                "// Line 23:                 cmd += ' {}'",
                "// Line 24:             cmd = cmd.replace('{}', compat_shlex_quote(filepath))",
                "// Line 25:         return cmd",
                "// Line 26: ",
                "// Line 27:     def run(self, info):",
                "// Line 28:         for tmpl in self.exec_cmd:",
                "// Line 29:             cmd = self.parse_cmd(tmpl, info)",
                "// vulnerable line: 30: self.to_screen('Executing command: %s' % cmd)",
                "// vulnerable line: 31: retCode = subprocess.call(encodeArgument(cmd), shell=True)",
                "// vulnerable line: 32: if retCode != 0:",
                "// vulnerable line: 33: raise PostProcessingError('Command returned error code %d' % retCode)",
                "// Line 34:         return [], info",
                "// Line 35: ",
                "// Line 36: ",
                "// Line 37: # Deprecated",
                "// Line 38: class ExecAfterDownloadPP(ExecPP):",
                "// Line 39:     def __init__(self, *args, **kwargs):",
                "// Line 40:         super().__init__(*args, **kwargs)",
                "// Line 41:         self.deprecation_warning(",
                "// Line 42:             'yt_dlp.postprocessor.ExecAfterDownloadPP is deprecated '",
                "// Line 43:             'and may be removed in a future version. Use yt_dlp.postprocessor.ExecPP instead')"
            ]
        },
        {
            "filename_of_changes": "test_YoutubeDL.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 781:         test('%(title5)#U', 'áéí 𝐀')",
                "// Line 782:         test('%(title5)+U', 'áéí A')",
                "// Line 783:         test('%(title5)+#U', 'áéí A')",
                "// Line 784:         test('%(height)D', '1k')",
                "// Line 785:         test('%(filesize)#D', '1Ki')",
                "// Line 786:         test('%(height)5.2D', ' 1.08k')",
                "// Line 787:         test('%(title4)#S', 'foo_bar_test')",
                "// Line 788:         test('%(title4).10S', ('foo ＂bar＂ ', 'foo ＂bar＂' + ('#' if compat_os_name == 'nt' else ' ')))",
                "// Line 789:         if compat_os_name == 'nt':",
                "// Line 790:             test('%(title4)q', ('\"foo \"bar\" test\"', \"＂foo ⧹＂bar⧹＂ test＂\"))",
                "// vulnerable line: 791: test('%(formats.:.id)#q', ('\"id 1\" \"id 2\" \"id 3\"', '＂id 1＂ ＂id 2＂ ＂id 3＂'))",
                "// vulnerable line: 792: test('%(formats.0.id)#q', ('\"id 1\"', '＂id 1＂'))",
                "// Line 793:         else:",
                "// Line 794:             test('%(title4)q', (''foo \"bar\" test'', ''foo ＂bar＂ test''))",
                "// Line 795:             test('%(formats.:.id)#q', \"'id 1' 'id 2' 'id 3'\")",
                "// Line 796:             test('%(formats.0.id)#q', \"'id 1'\")",
                "// Line 797: ",
                "// Line 798:         # Internal formatting",
                "// Line 799:         test('%(timestamp-1000>%H-%M-%S)s', '11-43-20')",
                "// Line 800:         test('%(title|%)s %(title|%%)s', '% %%')",
                "// Line 801:         test('%(id+1-height+3)05d', '00158')",
                "// Line 802:         test('%(width+100)05d', 'NA')"
            ]
        },
        {
            "filename_of_changes": "test_utils.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "16",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        }
    ]
}