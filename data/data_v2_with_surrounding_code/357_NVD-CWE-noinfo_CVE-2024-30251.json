{
    "cve_id": "CVE-2024-30251",
    "cve_description": "aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. In affected versions an attacker can send a specially crafted POST (multipart/form-data) request. When the aiohttp server processes it, the server will enter an infinite loop and be unable to process any further requests. An attacker can stop the application from serving requests after sending a single request. This issue has been addressed in version 3.9.4. Users are advised to upgrade. Users unable to upgrade may manually apply a patch to their systems. Please see the linked GHSA for instructions.",
    "cve_publish_date": "2024-05-02T14:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Fix handling of multipart/form-data (#8280) (#8302)\n\nhttps://datatracker.ietf.org/doc/html/rfc7578\r\n(cherry picked from commit 7d0be3fee540a3d4161ac7dc76422f1f5ea60104)",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "formdata.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "11",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 74:                     \"content_type must be an instance of str. \" \"Got: %s\" % content_type",
                "// Line 75:                 )",
                "// Line 76:             headers[hdrs.CONTENT_TYPE] = content_type",
                "// Line 77:             self._is_multipart = True",
                "// Line 78:         if content_transfer_encoding is not None:",
                "// Line 79:             if not isinstance(content_transfer_encoding, str):",
                "// Line 80:                 raise TypeError(",
                "// Line 81:                     \"content_transfer_encoding must be an instance\"",
                "// Line 82:                     \" of str. Got: %s\" % content_transfer_encoding",
                "// Line 83:                 )",
                "// vulnerable line: 84: headers[hdrs.CONTENT_TRANSFER_ENCODING] = content_transfer_encoding",
                "// Line 85:             self._is_multipart = True",
                "// Line 86: ",
                "// Line 87:         self._fields.append((type_options, headers, value))",
                "// Line 88: ",
                "// Line 89:     def add_fields(self, *fields: Any) -> None:",
                "// Line 90:         to_add = list(fields)",
                "// Line 91: ",
                "// Line 92:         while to_add:",
                "// Line 93:             rec = to_add.pop(0)",
                "// Line 94: "
            ]
        },
        {
            "filename_of_changes": "test_web_functional.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "5",
            "number_of_lines_deleted_vulnerable_to_cve": "22",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 40: def here():",
                "// Line 41:     return pathlib.Path(__file__).parent",
                "// Line 42: ",
                "// Line 43: ",
                "// Line 44: @pytest.fixture",
                "// Line 45: def fname(here):",
                "// Line 46:     return here / \"conftest.py\"",
                "// Line 47: ",
                "// Line 48: ",
                "// Line 49: def new_dummy_form():",
                "// vulnerable line: 50: form = FormData()",
                "// vulnerable line: 51: form.add_field(\"name\", b\"123\", content_transfer_encoding=\"base64\")",
                "// Line 52:     return form",
                "// Line 53: ",
                "// Line 54: ",
                "// Line 55: async def test_simple_get(aiohttp_client) -> None:",
                "// vulnerable line: 56: async def handler(request):",
                "// Line 57:         body = await request.read()",
                "// Line 58:         assert b\"\" == body",
                "// Line 59:         return web.Response(body=b\"OK\")",
                "// Line 60: ",
                "// vulnerable line: 61: app = web.Application()",
                "// Line 62:     app.router.add_get(\"/\", handler)",
                "// vulnerable line: 63: client = await aiohttp_client(app)",
                "// Line 64: ",
                "// Line 65:     resp = await client.get(\"/\")",
                "// vulnerable line: 66: assert 200 == resp.status",
                "// Line 67:     txt = await resp.text()",
                "// Line 68:     assert \"OK\" == txt",
                "// Line 69: ",
                "// vulnerable line: 70: await resp.release()",
                "// Line 71: ",
                "// Line 72: ",
                "// Line 73: async def test_simple_get_with_text(aiohttp_client) -> None:",
                "// vulnerable line: 74: async def handler(request):",
                "// Line 75:         body = await request.read()",
                "// Line 76:         assert b\"\" == body",
                "// Line 77:         return web.Response(text=\"OK\", headers={\"content-type\": \"text/plain\"})",
                "// Line 78: ",
                "// vulnerable line: 79: app = web.Application()",
                "// Line 80:     app.router.add_get(\"/\", handler)",
                "// vulnerable line: 81: client = await aiohttp_client(app)",
                "// Line 82: ",
                "// Line 83:     resp = await client.get(\"/\")",
                "// vulnerable line: 84: assert 200 == resp.status",
                "// Line 85:     txt = await resp.text()",
                "// Line 86:     assert \"OK\" == txt",
                "// Line 87: ",
                "// vulnerable line: 88: await resp.release()",
                "// Line 89: ",
                "// Line 90: ",
                "// Line 91: async def test_handler_returns_not_response(aiohttp_server, aiohttp_client) -> None:",
                "// Line 92:     asyncio.get_event_loop().set_debug(True)",
                "// Line 93:     logger = mock.Mock()",
                "// Line 94: ",
                "// vulnerable line: 95: async def handler(request):",
                "// Line 96:         return \"abc\"",
                "// Line 97: ",
                "// vulnerable line: 98: app = web.Application()",
                "// Line 99:     app.router.add_get(\"/\", handler)",
                "// Line 100:     server = await aiohttp_server(app, logger=logger)",
                "// Line 101:     client = await aiohttp_client(server)",
                "// Line 102: ",
                "// Line 103:     with pytest.raises(aiohttp.ServerDisconnectedError):",
                "// Line 104:         await client.get(\"/\")",
                "// Line 105: ",
                "// Line 106:     logger.exception.assert_called_with(",
                "// Line 107:         \"Unhandled runtime exception\", exc_info=mock.ANY",
                "// Line 108:     )",
                "// Line 109: ",
                "// Line 110: ",
                "// Line 111: async def test_handler_returns_none(aiohttp_server, aiohttp_client) -> None:",
                "// Line 112:     asyncio.get_event_loop().set_debug(True)",
                "// Line 113:     logger = mock.Mock()",
                "// Line 114: ",
                "// vulnerable line: 115: async def handler(request):",
                "// Line 116:         return None",
                "// Line 117: ",
                "// vulnerable line: 118: app = web.Application()",
                "// Line 119:     app.router.add_get(\"/\", handler)",
                "// Line 120:     server = await aiohttp_server(app, logger=logger)",
                "// Line 121:     client = await aiohttp_client(server)",
                "// Line 122: ",
                "// Line 123:     with pytest.raises(aiohttp.ServerDisconnectedError):",
                "// Line 124:         await client.get(\"/\")",
                "// Line 125: ",
                "// Line 126:     # Actual error text is placed in exc_info",
                "// Line 127:     logger.exception.assert_called_with(",
                "// Line 128:         \"Unhandled runtime exception\", exc_info=mock.ANY",
                "// Line 129:     )",
                "// Line 130: ",
                "// Line 131: ",
                "// Line 132: async def test_head_returns_empty_body(aiohttp_client) -> None:",
                "// vulnerable line: 133: async def handler(request):",
                "// Line 134:         return web.Response(body=b\"test\")",
                "// Line 135: ",
                "// vulnerable line: 136: app = web.Application()",
                "// Line 137:     app.router.add_head(\"/\", handler)",
                "// Line 138:     client = await aiohttp_client(app, version=HttpVersion11)",
                "// Line 139: ",
                "// Line 140:     resp = await client.head(\"/\")",
                "// vulnerable line: 141: assert 200 == resp.status",
                "// Line 142:     txt = await resp.text()",
                "// Line 143:     assert \"\" == txt",
                "// Line 144:     # The Content-Length header should be set to 4 which is",
                "// Line 145:     # the length of the response body if it would have been",
                "// Line 146:     # returned by a GET request.",
                "// Line 147:     assert resp.headers[\"Content-Length\"] == \"4\"",
                "// Line 148: ",
                "// Line 149: ",
                "// Line 150: async def test_response_before_complete(aiohttp_client: Any) -> None:",
                "// vulnerable line: 151: async def handler(request):",
                "// Line 152:         return web.Response(body=b\"OK\")",
                "// Line 153: ",
                "// vulnerable line: 154: app = web.Application()",
                "// vulnerable line: 155: app.router.add_post(\"/\", handler)",
                "// vulnerable line: 156: client = await aiohttp_client(app)",
                "// Line 157: ",
                "// Line 158:     data = b\"0\" * 1024 * 1024",
                "// Line 159: ",
                "// Line 160:     resp = await client.post(\"/\", data=data)",
                "// vulnerable line: 161: assert 200 == resp.status",
                "// Line 162:     text = await resp.text()",
                "// Line 163:     assert \"OK\" == text",
                "// Line 164: ",
                "// vulnerable line: 165: await resp.release()",
                "// Line 166: ",
                "// Line 167: ",
                "// Line 168: async def test_post_form(aiohttp_client) -> None:",
                "// vulnerable line: 169: async def handler(request):",
                "// vulnerable line: 170: data = await request.post()",
                "// Line 171:         assert {\"a\": \"1\", \"b\": \"2\", \"c\": \"\"} == data",
                "// Line 172:         return web.Response(body=b\"OK\")",
                "// Line 173: ",
                "// vulnerable line: 174: app = web.Application()",
                "// vulnerable line: 175: app.router.add_post(\"/\", handler)",
                "// vulnerable line: 176: client = await aiohttp_client(app)",
                "// Line 177: ",
                "// Line 178:     resp = await client.post(\"/\", data={\"a\": 1, \"b\": 2, \"c\": \"\"})",
                "// vulnerable line: 179: assert 200 == resp.status",
                "// Line 180:     txt = await resp.text()",
                "// Line 181:     assert \"OK\" == txt",
                "// Line 182: ",
                "// vulnerable line: 183: await resp.release()",
                "// Line 184: ",
                "// Line 185: ",
                "// Line 186: async def test_post_text(aiohttp_client) -> None:",
                "// vulnerable line: 187: async def handler(request):",
                "// Line 188:         data = await request.text()",
                "// Line 189:         assert \"русский\" == data",
                "// Line 190:         data2 = await request.text()",
                "// Line 191:         assert data == data2",
                "// Line 192:         return web.Response(text=data)",
                "// Line 193: ",
                "// vulnerable line: 194: app = web.Application()",
                "// vulnerable line: 195: app.router.add_post(\"/\", handler)",
                "// vulnerable line: 196: client = await aiohttp_client(app)",
                "// Line 197: ",
                "// Line 198:     resp = await client.post(\"/\", data=\"русский\")",
                "// vulnerable line: 199: assert 200 == resp.status",
                "// Line 200:     txt = await resp.text()",
                "// Line 201:     assert \"русский\" == txt",
                "// Line 202: ",
                "// vulnerable line: 203: await resp.release()",
                "// Line 204: ",
                "// Line 205: ",
                "// Line 206: async def test_post_json(aiohttp_client) -> None:",
                "// Line 207: ",
                "// Line 208:     dct = {\"key\": \"текст\"}",
                "// Line 209: ",
                "// vulnerable line: 210: async def handler(request):",
                "// Line 211:         data = await request.json()",
                "// Line 212:         assert dct == data",
                "// Line 213:         data2 = await request.json(loads=json.loads)",
                "// Line 214:         assert data == data2",
                "// Line 215:         resp = web.Response()",
                "// Line 216:         resp.content_type = \"application/json\"",
                "// Line 217:         resp.body = json.dumps(data).encode(\"utf8\")",
                "// Line 218:         return resp",
                "// Line 219: ",
                "// vulnerable line: 220: app = web.Application()",
                "// vulnerable line: 221: app.router.add_post(\"/\", handler)",
                "// vulnerable line: 222: client = await aiohttp_client(app)",
                "// Line 223: ",
                "// Line 224:     headers = {\"Content-Type\": \"application/json\"}",
                "// Line 225:     resp = await client.post(\"/\", data=json.dumps(dct), headers=headers)",
                "// vulnerable line: 226: assert 200 == resp.status",
                "// Line 227:     data = await resp.json()",
                "// Line 228:     assert dct == data",
                "// Line 229: ",
                "// vulnerable line: 230: await resp.release()",
                "// Line 231: ",
                "// Line 232: ",
                "// Line 233: async def test_multipart(aiohttp_client) -> None:",
                "// Line 234:     with multipart.MultipartWriter() as writer:",
                "// Line 235:         writer.append(\"test\")",
                "// Line 236:         writer.append_json({\"passed\": True})",
                "// Line 237: ",
                "// vulnerable line: 238: async def handler(request):",
                "// Line 239:         reader = await request.multipart()",
                "// Line 240:         assert isinstance(reader, multipart.MultipartReader)",
                "// Line 241: ",
                "// Line 242:         part = await reader.next()",
                "// Line 243:         assert isinstance(part, multipart.BodyPartReader)",
                "// Line 244:         thing = await part.text()",
                "// Line 245:         assert thing == \"test\"",
                "// Line 246: ",
                "// Line 247:         part = await reader.next()",
                "// Line 248:         assert isinstance(part, multipart.BodyPartReader)",
                "// Line 249:         assert part.headers[\"Content-Type\"] == \"application/json\"",
                "// Line 250:         thing = await part.json()",
                "// Line 251:         assert thing == {\"passed\": True}",
                "// Line 252: ",
                "// Line 253:         resp = web.Response()",
                "// Line 254:         resp.content_type = \"application/json\"",
                "// Line 255:         resp.body = b\"\"",
                "// Line 256:         return resp",
                "// Line 257: ",
                "// vulnerable line: 258: app = web.Application()",
                "// vulnerable line: 259: app.router.add_post(\"/\", handler)",
                "// vulnerable line: 260: client = await aiohttp_client(app)",
                "// Line 261: ",
                "// Line 262:     resp = await client.post(\"/\", data=writer)",
                "// vulnerable line: 263: assert 200 == resp.status",
                "// vulnerable line: 264: await resp.release()",
                "// Line 265: ",
                "// Line 266: ",
                "// Line 267: async def test_multipart_empty(aiohttp_client) -> None:",
                "// Line 268:     with multipart.MultipartWriter() as writer:",
                "// Line 269:         pass",
                "// Line 270: ",
                "// vulnerable line: 271: async def handler(request):",
                "// Line 272:         reader = await request.multipart()",
                "// Line 273:         assert isinstance(reader, multipart.MultipartReader)",
                "// Line 274:         async for part in reader:",
                "// Line 275:             assert False, f\"Unexpected part found in reader: {part!r}\"",
                "// vulnerable line: 276: return web.Response()",
                "// Line 277: ",
                "// vulnerable line: 278: app = web.Application()",
                "// vulnerable line: 279: app.router.add_post(\"/\", handler)",
                "// vulnerable line: 280: client = await aiohttp_client(app)",
                "// Line 281: ",
                "// Line 282:     resp = await client.post(\"/\", data=writer)",
                "// vulnerable line: 283: assert 200 == resp.status",
                "// vulnerable line: 284: await resp.release()",
                "// Line 285: ",
                "// Line 286: ",
                "// Line 287: async def test_multipart_content_transfer_encoding(aiohttp_client) -> None:",
                "// Line 288:     # For issue #1168",
                "// Line 289:     with multipart.MultipartWriter() as writer:",
                "// Line 290:         writer.append(b\"\u0000\" * 10, headers={\"Content-Transfer-Encoding\": \"binary\"})",
                "// Line 291: ",
                "// vulnerable line: 292: async def handler(request):",
                "// Line 293:         reader = await request.multipart()",
                "// Line 294:         assert isinstance(reader, multipart.MultipartReader)",
                "// Line 295: ",
                "// Line 296:         part = await reader.next()",
                "// Line 297:         assert isinstance(part, multipart.BodyPartReader)",
                "// Line 298:         assert part.headers[\"Content-Transfer-Encoding\"] == \"binary\"",
                "// Line 299:         thing = await part.read()",
                "// Line 300:         assert thing == b\"\u0000\" * 10",
                "// Line 301: ",
                "// Line 302:         resp = web.Response()",
                "// Line 303:         resp.content_type = \"application/json\"",
                "// Line 304:         resp.body = b\"\"",
                "// Line 305:         return resp",
                "// Line 306: ",
                "// vulnerable line: 307: app = web.Application()",
                "// vulnerable line: 308: app.router.add_post(\"/\", handler)",
                "// vulnerable line: 309: client = await aiohttp_client(app)",
                "// Line 310: ",
                "// Line 311:     resp = await client.post(\"/\", data=writer)",
                "// vulnerable line: 312: assert 200 == resp.status",
                "// vulnerable line: 313: await resp.release()",
                "// Line 314: ",
                "// Line 315: ",
                "// Line 316: async def test_render_redirect(aiohttp_client) -> None:",
                "// vulnerable line: 317: async def handler(request):",
                "// Line 318:         raise web.HTTPMovedPermanently(location=\"/path\")",
                "// Line 319: ",
                "// vulnerable line: 320: app = web.Application()",
                "// Line 321:     app.router.add_get(\"/\", handler)",
                "// vulnerable line: 322: client = await aiohttp_client(app)",
                "// Line 323: ",
                "// Line 324:     resp = await client.get(\"/\", allow_redirects=False)",
                "// Line 325:     assert 301 == resp.status",
                "// Line 326:     txt = await resp.text()",
                "// Line 327:     assert \"301: Moved Permanently\" == txt",
                "// Line 328:     assert \"/path\" == resp.headers[\"location\"]",
                "// Line 329: ",
                "// vulnerable line: 330: await resp.release()",
                "// Line 331: ",
                "// Line 332: ",
                "// Line 333: async def test_post_single_file(aiohttp_client) -> None:",
                "// Line 334: ",
                "// Line 335:     here = pathlib.Path(__file__).parent",
                "// Line 336: ",
                "// Line 337:     def check_file(fs):",
                "// Line 338:         fullname = here / fs.filename",
                "// Line 339:         with fullname.open(\"rb\") as f:",
                "// Line 340:             test_data = f.read()",
                "// Line 341:             data = fs.file.read()",
                "// Line 342:             assert test_data == data",
                "// Line 343: ",
                "// vulnerable line: 344: async def handler(request):",
                "// vulnerable line: 345: data = await request.post()",
                "// Line 346:         assert [\"data.unknown_mime_type\"] == list(data.keys())",
                "// Line 347:         for fs in data.values():",
                "// Line 348:             check_file(fs)",
                "// Line 349:             fs.file.close()",
                "// Line 350:         resp = web.Response(body=b\"OK\")",
                "// Line 351:         return resp",
                "// Line 352: ",
                "// vulnerable line: 353: app = web.Application()",
                "// vulnerable line: 354: app.router.add_post(\"/\", handler)",
                "// vulnerable line: 355: client = await aiohttp_client(app)",
                "// Line 356: ",
                "// Line 357:     fname = here / \"data.unknown_mime_type\"",
                "// Line 358: ",
                "// Line 359:     with fname.open(\"rb\") as fd:",
                "// Line 360:         resp = await client.post(\"/\", data=[fd])",
                "// vulnerable line: 361: assert 200 == resp.status",
                "// Line 362: ",
                "// vulnerable line: 363: await resp.release()",
                "// Line 364: ",
                "// Line 365: ",
                "// Line 366: async def test_files_upload_with_same_key(aiohttp_client) -> None:",
                "// vulnerable line: 367: async def handler(request):",
                "// vulnerable line: 368: data = await request.post()",
                "// Line 369:         files = data.getall(\"file\")",
                "// Line 370:         file_names = set()",
                "// Line 371:         for _file in files:",
                "// Line 372:             assert not _file.file.closed",
                "// Line 373:             if _file.filename == \"test1.jpeg\":",
                "// Line 374:                 assert _file.file.read() == b\"binary data 1\"",
                "// Line 375:             if _file.filename == \"test2.jpeg\":",
                "// Line 376:                 assert _file.file.read() == b\"binary data 2\"",
                "// Line 377:             file_names.add(_file.filename)",
                "// Line 378:             _file.file.close()",
                "// Line 379:         assert len(files) == 2",
                "// Line 380:         assert file_names == {\"test1.jpeg\", \"test2.jpeg\"}",
                "// Line 381:         resp = web.Response(body=b\"OK\")",
                "// Line 382:         return resp",
                "// Line 383: ",
                "// vulnerable line: 384: app = web.Application()",
                "// vulnerable line: 385: app.router.add_post(\"/\", handler)",
                "// vulnerable line: 386: client = await aiohttp_client(app)",
                "// Line 387: ",
                "// Line 388:     data = FormData()",
                "// Line 389:     data.add_field(",
                "// Line 390:         \"file\", b\"binary data 1\", content_type=\"image/jpeg\", filename=\"test1.jpeg\"",
                "// Line 391:     )",
                "// Line 392:     data.add_field(",
                "// Line 393:         \"file\", b\"binary data 2\", content_type=\"image/jpeg\", filename=\"test2.jpeg\"",
                "// Line 394:     )",
                "// Line 395:     resp = await client.post(\"/\", data=data)",
                "// vulnerable line: 396: assert 200 == resp.status",
                "// Line 397: ",
                "// vulnerable line: 398: await resp.release()",
                "// Line 399: ",
                "// Line 400: ",
                "// Line 401: async def test_post_files(aiohttp_client) -> None:",
                "// Line 402: ",
                "// Line 403:     here = pathlib.Path(__file__).parent",
                "// Line 404: ",
                "// Line 405:     def check_file(fs):",
                "// Line 406:         fullname = here / fs.filename",
                "// Line 407:         with fullname.open(\"rb\") as f:",
                "// Line 408:             test_data = f.read()",
                "// Line 409:             data = fs.file.read()",
                "// Line 410:             assert test_data == data",
                "// Line 411: ",
                "// vulnerable line: 412: async def handler(request):",
                "// vulnerable line: 413: data = await request.post()",
                "// Line 414:         assert [\"data.unknown_mime_type\", \"conftest.py\"] == list(data.keys())",
                "// Line 415:         for fs in data.values():",
                "// Line 416:             check_file(fs)",
                "// Line 417:             fs.file.close()",
                "// Line 418:         resp = web.Response(body=b\"OK\")",
                "// Line 419:         return resp",
                "// Line 420: ",
                "// vulnerable line: 421: app = web.Application()",
                "// vulnerable line: 422: app.router.add_post(\"/\", handler)",
                "// vulnerable line: 423: client = await aiohttp_client(app)",
                "// Line 424: ",
                "// Line 425:     with (here / \"data.unknown_mime_type\").open(\"rb\") as f1:",
                "// Line 426:         with (here / \"conftest.py\").open(\"rb\") as f2:",
                "// Line 427:             resp = await client.post(\"/\", data=[f1, f2])",
                "// vulnerable line: 428: assert 200 == resp.status",
                "// Line 429: ",
                "// vulnerable line: 430: await resp.release()",
                "// Line 431: ",
                "// Line 432: ",
                "// Line 433: async def test_release_post_data(aiohttp_client) -> None:",
                "// vulnerable line: 434: async def handler(request):",
                "// Line 435:         await request.release()",
                "// Line 436:         chunk = await request.content.readany()",
                "// Line 437:         assert chunk == b\"\"",
                "// vulnerable line: 438: return web.Response()",
                "// Line 439: ",
                "// vulnerable line: 440: app = web.Application()",
                "// vulnerable line: 441: app.router.add_post(\"/\", handler)",
                "// vulnerable line: 442: client = await aiohttp_client(app)",
                "// Line 443: ",
                "// Line 444:     resp = await client.post(\"/\", data=\"post text\")",
                "// vulnerable line: 445: assert 200 == resp.status",
                "// Line 446: ",
                "// vulnerable line: 447: await resp.release()",
                "// Line 448: ",
                "// Line 449: ",
                "// vulnerable line: 450: async def test_POST_DATA_with_content_transfer_encoding(aiohttp_client) -> None:",
                "// vulnerable line: 451: async def handler(request):",
                "// vulnerable line: 452: data = await request.post()",
                "// vulnerable line: 453: assert b\"123\" == data[\"name\"]",
                "// vulnerable line: 454: return web.Response()",
                "// Line 455: ",
                "// vulnerable line: 456: app = web.Application()",
                "// vulnerable line: 457: app.router.add_post(\"/\", handler)",
                "// vulnerable line: 458: client = await aiohttp_client(app)",
                "// Line 459: ",
                "// vulnerable line: 460: form = FormData()",
                "// vulnerable line: 461: form.add_field(\"name\", b\"123\", content_transfer_encoding=\"base64\")",
                "// Line 462: ",
                "// vulnerable line: 463: resp = await client.post(\"/\", data=form)",
                "// vulnerable line: 464: assert 200 == resp.status",
                "// Line 465: ",
                "// vulnerable line: 466: await resp.release()",
                "// Line 467: ",
                "// Line 468: ",
                "// Line 469: async def test_post_form_with_duplicate_keys(aiohttp_client) -> None:",
                "// vulnerable line: 470: async def handler(request):",
                "// vulnerable line: 471: data = await request.post()",
                "// Line 472:         lst = list(data.items())",
                "// Line 473:         assert [(\"a\", \"1\"), (\"a\", \"2\")] == lst",
                "// vulnerable line: 474: return web.Response()",
                "// Line 475: ",
                "// vulnerable line: 476: app = web.Application()",
                "// vulnerable line: 477: app.router.add_post(\"/\", handler)",
                "// vulnerable line: 478: client = await aiohttp_client(app)",
                "// Line 479: ",
                "// Line 480:     resp = await client.post(\"/\", data=MultiDict([(\"a\", 1), (\"a\", 2)]))",
                "// vulnerable line: 481: assert 200 == resp.status",
                "// Line 482: ",
                "// vulnerable line: 483: await resp.release()",
                "// Line 484: ",
                "// Line 485: ",
                "// Line 486: def test_repr_for_application() -> None:",
                "// vulnerable line: 487: app = web.Application()",
                "// Line 488:     assert f\"<Application 0x{id(app):x}>\" == repr(app)",
                "// Line 489: ",
                "// Line 490: ",
                "// Line 491: async def test_expect_default_handler_unknown(aiohttp_client) -> None:",
                "// Line 492:     # Test default Expect handler for unknown Expect value.",
                "// Line 493: ",
                "// Line 494:     # A server that does not understand or is unable to comply with any of",
                "// Line 495:     # the expectation values in the Expect field of a request MUST respond",
                "// Line 496:     # with appropriate error status. The server MUST respond with a 417",
                "// Line 497:     # (Expectation Failed) status if any of the expectations cannot be met",
                "// Line 498:     # or, if there are other problems with the request, some other 4xx",
                "// Line 499:     # status.",
                "// Line 500: ",
                "// Line 501:     # http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.20",
                "// vulnerable line: 502: async def handler(request):",
                "// Line 503:         await request.post()",
                "// Line 504:         pytest.xfail(",
                "// Line 505:             \"Handler should not proceed to this point in case of \"",
                "// Line 506:             \"unknown Expect header\"",
                "// Line 507:         )",
                "// Line 508: ",
                "// vulnerable line: 509: app = web.Application()",
                "// vulnerable line: 510: app.router.add_post(\"/\", handler)",
                "// vulnerable line: 511: client = await aiohttp_client(app)",
                "// Line 512: ",
                "// Line 513:     resp = await client.post(\"/\", headers={\"Expect\": \"SPAM\"})",
                "// Line 514:     assert 417 == resp.status",
                "// Line 515: ",
                "// vulnerable line: 516: await resp.release()",
                "// Line 517: ",
                "// Line 518: ",
                "// Line 519: async def test_100_continue(aiohttp_client) -> None:",
                "// vulnerable line: 520: async def handler(request):",
                "// vulnerable line: 521: data = await request.post()",
                "// vulnerable line: 522: assert b\"123\" == data[\"name\"]",
                "// vulnerable line: 523: return web.Response()",
                "// Line 524: ",
                "// vulnerable line: 525: form = FormData()",
                "// vulnerable line: 526: form.add_field(\"name\", b\"123\", content_transfer_encoding=\"base64\")",
                "// Line 527: ",
                "// vulnerable line: 528: app = web.Application()",
                "// vulnerable line: 529: app.router.add_post(\"/\", handler)",
                "// vulnerable line: 530: client = await aiohttp_client(app)",
                "// Line 531: ",
                "// Line 532:     resp = await client.post(\"/\", data=form, expect100=True)",
                "// vulnerable line: 533: assert 200 == resp.status",
                "// Line 534: ",
                "// vulnerable line: 535: await resp.release()",
                "// Line 536: ",
                "// Line 537: ",
                "// Line 538: async def test_100_continue_custom(aiohttp_client) -> None:",
                "// Line 539: ",
                "// Line 540:     expect_received = False",
                "// Line 541: ",
                "// vulnerable line: 542: async def handler(request):",
                "// vulnerable line: 543: data = await request.post()",
                "// vulnerable line: 544: assert b\"123\" == data[\"name\"]",
                "// vulnerable line: 545: return web.Response()",
                "// Line 546: ",
                "// Line 547:     async def expect_handler(request):",
                "// Line 548:         nonlocal expect_received",
                "// Line 549:         expect_received = True",
                "// Line 550:         if request.version == HttpVersion11:",
                "// Line 551:             await request.writer.write(b\"HTTP/1.1 100 Continue",
                "// Line 552: ",
                "// Line 553: \")",
                "// Line 554: ",
                "// vulnerable line: 555: app = web.Application()",
                "// Line 556:     app.router.add_post(\"/\", handler, expect_handler=expect_handler)",
                "// vulnerable line: 557: client = await aiohttp_client(app)",
                "// Line 558: ",
                "// Line 559:     resp = await client.post(\"/\", data=new_dummy_form(), expect100=True)",
                "// vulnerable line: 560: assert 200 == resp.status",
                "// Line 561:     assert expect_received",
                "// Line 562: ",
                "// vulnerable line: 563: await resp.release()",
                "// Line 564: ",
                "// Line 565: ",
                "// Line 566: async def test_100_continue_custom_response(aiohttp_client) -> None:",
                "// vulnerable line: 567: async def handler(request):",
                "// vulnerable line: 568: data = await request.post()",
                "// Line 569:         assert b\"123\", data[\"name\"]",
                "// vulnerable line: 570: return web.Response()",
                "// Line 571: ",
                "// Line 572:     async def expect_handler(request):",
                "// Line 573:         if request.version == HttpVersion11:",
                "// Line 574:             if auth_err:",
                "// Line 575:                 raise web.HTTPForbidden()",
                "// Line 576: ",
                "// Line 577:             await request.writer.write(b\"HTTP/1.1 100 Continue",
                "// Line 578: ",
                "// Line 579: \")",
                "// Line 580: ",
                "// vulnerable line: 581: app = web.Application()",
                "// Line 582:     app.router.add_post(\"/\", handler, expect_handler=expect_handler)",
                "// vulnerable line: 583: client = await aiohttp_client(app)",
                "// Line 584: ",
                "// Line 585:     auth_err = False",
                "// Line 586:     resp = await client.post(\"/\", data=new_dummy_form(), expect100=True)",
                "// vulnerable line: 587: assert 200 == resp.status",
                "// vulnerable line: 588: await resp.release()",
                "// Line 589: ",
                "// Line 590:     auth_err = True",
                "// Line 591:     resp = await client.post(\"/\", data=new_dummy_form(), expect100=True)",
                "// Line 592:     assert 403 == resp.status",
                "// vulnerable line: 593: await resp.release()",
                "// Line 594: ",
                "// Line 595: ",
                "// Line 596: async def test_expect_handler_custom_response(aiohttp_client) -> None:",
                "// Line 597:     cache = {\"foo\": \"bar\"}",
                "// Line 598: ",
                "// Line 599:     async def handler(request: web.Request) -> web.Response:",
                "// Line 600:         return web.Response(text=\"handler\")",
                "// Line 601: ",
                "// Line 602:     async def expect_handler(request: web.Request) -> Optional[web.Response]:",
                "// Line 603:         k = request.headers.get(\"X-Key\")",
                "// Line 604:         cached_value = cache.get(k)",
                "// Line 605:         if cached_value:",
                "// Line 606:             return web.Response(text=cached_value)",
                "// Line 607: ",
                "// vulnerable line: 608: app = web.Application()",
                "// Line 609:     # expect_handler is only typed on add_route().",
                "// Line 610:     app.router.add_route(\"POST\", \"/\", handler, expect_handler=expect_handler)",
                "// vulnerable line: 611: client = await aiohttp_client(app)",
                "// Line 612: ",
                "// Line 613:     async with client.post(\"/\", expect100=True, headers={\"X-Key\": \"foo\"}) as resp:",
                "// Line 614:         assert resp.status == 200",
                "// Line 615:         assert await resp.text() == \"bar\"",
                "// Line 616: ",
                "// Line 617:     async with client.post(\"/\", expect100=True, headers={\"X-Key\": \"spam\"}) as resp:",
                "// Line 618:         assert resp.status == 200",
                "// Line 619:         assert await resp.text() == \"handler\"",
                "// Line 620: ",
                "// Line 621: ",
                "// Line 622: async def test_100_continue_for_not_found(aiohttp_client) -> None:",
                "// Line 623: ",
                "// vulnerable line: 624: app = web.Application()",
                "// vulnerable line: 625: client = await aiohttp_client(app)",
                "// Line 626: ",
                "// Line 627:     resp = await client.post(\"/not_found\", data=\"data\", expect100=True)",
                "// Line 628:     assert 404 == resp.status",
                "// Line 629: ",
                "// vulnerable line: 630: await resp.release()",
                "// Line 631: ",
                "// Line 632: ",
                "// Line 633: async def test_100_continue_for_not_allowed(aiohttp_client) -> None:",
                "// vulnerable line: 634: async def handler(request):",
                "// vulnerable line: 635: return web.Response()",
                "// Line 636: ",
                "// vulnerable line: 637: app = web.Application()",
                "// vulnerable line: 638: app.router.add_post(\"/\", handler)",
                "// vulnerable line: 639: client = await aiohttp_client(app)",
                "// Line 640: ",
                "// Line 641:     resp = await client.get(\"/\", expect100=True)",
                "// Line 642:     assert 405 == resp.status",
                "// Line 643: ",
                "// vulnerable line: 644: await resp.release()",
                "// Line 645: ",
                "// Line 646: ",
                "// Line 647: async def test_http11_keep_alive_default(aiohttp_client) -> None:",
                "// vulnerable line: 648: async def handler(request):",
                "// vulnerable line: 649: return web.Response()",
                "// Line 650: ",
                "// vulnerable line: 651: app = web.Application()",
                "// Line 652:     app.router.add_get(\"/\", handler)",
                "// Line 653:     client = await aiohttp_client(app, version=HttpVersion11)",
                "// Line 654: ",
                "// Line 655:     resp = await client.get(\"/\")",
                "// vulnerable line: 656: assert 200 == resp.status",
                "// Line 657:     assert resp.version == HttpVersion11",
                "// Line 658:     assert \"Connection\" not in resp.headers",
                "// Line 659: ",
                "// vulnerable line: 660: await resp.release()",
                "// Line 661: ",
                "// Line 662: ",
                "// Line 663: @pytest.mark.xfail",
                "// Line 664: async def test_http10_keep_alive_default(aiohttp_client) -> None:",
                "// vulnerable line: 665: async def handler(request):",
                "// vulnerable line: 666: return web.Response()",
                "// Line 667: ",
                "// vulnerable line: 668: app = web.Application()",
                "// Line 669:     app.router.add_get(\"/\", handler)",
                "// Line 670:     client = await aiohttp_client(app, version=HttpVersion10)",
                "// Line 671: ",
                "// Line 672:     resp = await client.get(\"/\")",
                "// vulnerable line: 673: assert 200 == resp.status",
                "// Line 674:     assert resp.version == HttpVersion10",
                "// Line 675:     assert resp.headers[\"Connection\"] == \"keep-alive\"",
                "// Line 676: ",
                "// vulnerable line: 677: await resp.release()",
                "// Line 678: ",
                "// Line 679: ",
                "// Line 680: async def test_http10_keep_alive_with_headers_close(aiohttp_client) -> None:",
                "// vulnerable line: 681: async def handler(request):",
                "// Line 682:         await request.read()",
                "// Line 683:         return web.Response(body=b\"OK\")",
                "// Line 684: ",
                "// vulnerable line: 685: app = web.Application()",
                "// Line 686:     app.router.add_get(\"/\", handler)",
                "// Line 687:     client = await aiohttp_client(app, version=HttpVersion10)",
                "// Line 688: ",
                "// Line 689:     headers = {\"Connection\": \"close\"}",
                "// Line 690:     resp = await client.get(\"/\", headers=headers)",
                "// vulnerable line: 691: assert 200 == resp.status",
                "// Line 692:     assert resp.version == HttpVersion10",
                "// Line 693:     assert \"Connection\" not in resp.headers",
                "// Line 694: ",
                "// vulnerable line: 695: await resp.release()",
                "// Line 696: ",
                "// Line 697: ",
                "// Line 698: async def test_http10_keep_alive_with_headers(aiohttp_client) -> None:",
                "// vulnerable line: 699: async def handler(request):",
                "// Line 700:         await request.read()",
                "// Line 701:         return web.Response(body=b\"OK\")",
                "// Line 702: ",
                "// vulnerable line: 703: app = web.Application()",
                "// Line 704:     app.router.add_get(\"/\", handler)",
                "// Line 705:     client = await aiohttp_client(app, version=HttpVersion10)",
                "// Line 706: ",
                "// Line 707:     headers = {\"Connection\": \"keep-alive\"}",
                "// Line 708:     resp = await client.get(\"/\", headers=headers)",
                "// vulnerable line: 709: assert 200 == resp.status",
                "// Line 710:     assert resp.version == HttpVersion10",
                "// Line 711:     assert resp.headers[\"Connection\"] == \"keep-alive\"",
                "// Line 712: ",
                "// vulnerable line: 713: await resp.release()",
                "// Line 714: ",
                "// Line 715: ",
                "// Line 716: async def test_upload_file(aiohttp_client) -> None:",
                "// Line 717: ",
                "// Line 718:     here = pathlib.Path(__file__).parent",
                "// Line 719:     fname = here / \"aiohttp.png\"",
                "// Line 720:     with fname.open(\"rb\") as f:",
                "// Line 721:         data = f.read()",
                "// Line 722: ",
                "// vulnerable line: 723: async def handler(request):",
                "// Line 724:         form = await request.post()",
                "// Line 725:         raw_data = form[\"file\"].file.read()",
                "// Line 726:         form[\"file\"].file.close()",
                "// Line 727:         assert data == raw_data",
                "// vulnerable line: 728: return web.Response()",
                "// Line 729: ",
                "// vulnerable line: 730: app = web.Application()",
                "// vulnerable line: 731: app.router.add_post(\"/\", handler)",
                "// vulnerable line: 732: client = await aiohttp_client(app)",
                "// Line 733: ",
                "// vulnerable line: 734: resp = await client.post(\"/\", data={\"file\": data})",
                "// vulnerable line: 735: assert 200 == resp.status",
                "// Line 736: ",
                "// vulnerable line: 737: await resp.release()",
                "// Line 738: ",
                "// Line 739: ",
                "// Line 740: async def test_upload_file_object(aiohttp_client) -> None:",
                "// Line 741:     here = pathlib.Path(__file__).parent",
                "// Line 742:     fname = here / \"aiohttp.png\"",
                "// Line 743:     with fname.open(\"rb\") as f:",
                "// Line 744:         data = f.read()",
                "// Line 745: ",
                "// vulnerable line: 746: async def handler(request):",
                "// Line 747:         form = await request.post()",
                "// Line 748:         raw_data = form[\"file\"].file.read()",
                "// Line 749:         form[\"file\"].file.close()",
                "// Line 750:         assert data == raw_data",
                "// vulnerable line: 751: return web.Response()",
                "// Line 752: ",
                "// vulnerable line: 753: app = web.Application()",
                "// vulnerable line: 754: app.router.add_post(\"/\", handler)",
                "// vulnerable line: 755: client = await aiohttp_client(app)",
                "// Line 756: ",
                "// Line 757:     with fname.open(\"rb\") as f:",
                "// Line 758:         resp = await client.post(\"/\", data={\"file\": f})",
                "// vulnerable line: 759: assert 200 == resp.status",
                "// Line 760: ",
                "// vulnerable line: 761: await resp.release()",
                "// Line 762: ",
                "// Line 763: ",
                "// Line 764: @pytest.mark.parametrize(",
                "// Line 765:     \"method\", [\"get\", \"post\", \"options\", \"post\", \"put\", \"patch\", \"delete\"]",
                "// Line 766: )",
                "// Line 767: async def test_empty_content_for_query_without_body(method, aiohttp_client) -> None:",
                "// vulnerable line: 768: async def handler(request):",
                "// Line 769:         assert not request.body_exists",
                "// Line 770:         assert not request.can_read_body",
                "// Line 771:         with pytest.warns(DeprecationWarning):",
                "// Line 772:             assert not request.has_body",
                "// vulnerable line: 773: return web.Response()",
                "// Line 774: ",
                "// vulnerable line: 775: app = web.Application()",
                "// Line 776:     app.router.add_route(method, \"/\", handler)",
                "// vulnerable line: 777: client = await aiohttp_client(app)",
                "// Line 778: ",
                "// Line 779:     resp = await client.request(method, \"/\")",
                "// vulnerable line: 780: assert 200 == resp.status",
                "// Line 781: ",
                "// Line 782: ",
                "// Line 783: async def test_empty_content_for_query_with_body(aiohttp_client) -> None:",
                "// vulnerable line: 784: async def handler(request):",
                "// Line 785:         assert request.body_exists",
                "// Line 786:         assert request.can_read_body",
                "// Line 787:         with pytest.warns(DeprecationWarning):",
                "// Line 788:             assert request.has_body",
                "// Line 789:         body = await request.read()",
                "// Line 790:         return web.Response(body=body)",
                "// Line 791: ",
                "// vulnerable line: 792: app = web.Application()",
                "// vulnerable line: 793: app.router.add_post(\"/\", handler)",
                "// vulnerable line: 794: client = await aiohttp_client(app)",
                "// Line 795: ",
                "// Line 796:     resp = await client.post(\"/\", data=b\"data\")",
                "// vulnerable line: 797: assert 200 == resp.status",
                "// Line 798: ",
                "// vulnerable line: 799: await resp.release()",
                "// Line 800: ",
                "// Line 801: ",
                "// Line 802: async def test_get_with_empty_arg(aiohttp_client) -> None:",
                "// vulnerable line: 803: async def handler(request):",
                "// Line 804:         assert \"arg\" in request.query",
                "// Line 805:         assert \"\" == request.query[\"arg\"]",
                "// vulnerable line: 806: return web.Response()",
                "// Line 807: ",
                "// vulnerable line: 808: app = web.Application()",
                "// Line 809:     app.router.add_get(\"/\", handler)",
                "// vulnerable line: 810: client = await aiohttp_client(app)",
                "// Line 811: ",
                "// Line 812:     resp = await client.get(\"/?arg\")",
                "// vulnerable line: 813: assert 200 == resp.status",
                "// Line 814: ",
                "// vulnerable line: 815: await resp.release()",
                "// Line 816: ",
                "// Line 817: ",
                "// Line 818: async def test_large_header(aiohttp_client) -> None:",
                "// vulnerable line: 819: async def handler(request):",
                "// vulnerable line: 820: return web.Response()",
                "// Line 821: ",
                "// vulnerable line: 822: app = web.Application()",
                "// Line 823:     app.router.add_get(\"/\", handler)",
                "// vulnerable line: 824: client = await aiohttp_client(app)",
                "// Line 825: ",
                "// Line 826:     headers = {\"Long-Header\": \"ab\" * 8129}",
                "// Line 827:     resp = await client.get(\"/\", headers=headers)",
                "// Line 828:     assert 400 == resp.status",
                "// Line 829: ",
                "// vulnerable line: 830: await resp.release()",
                "// Line 831: ",
                "// Line 832: ",
                "// Line 833: async def test_large_header_allowed(aiohttp_client, aiohttp_server) -> None:",
                "// vulnerable line: 834: async def handler(request):",
                "// vulnerable line: 835: return web.Response()",
                "// Line 836: ",
                "// vulnerable line: 837: app = web.Application()",
                "// vulnerable line: 838: app.router.add_post(\"/\", handler)",
                "// Line 839:     server = await aiohttp_server(app, max_field_size=81920)",
                "// Line 840:     client = await aiohttp_client(server)",
                "// Line 841: ",
                "// Line 842:     headers = {\"Long-Header\": \"ab\" * 8129}",
                "// Line 843:     resp = await client.post(\"/\", headers=headers)",
                "// vulnerable line: 844: assert 200 == resp.status",
                "// Line 845: ",
                "// vulnerable line: 846: await resp.release()",
                "// Line 847: ",
                "// Line 848: ",
                "// Line 849: async def test_get_with_empty_arg_with_equal(aiohttp_client) -> None:",
                "// vulnerable line: 850: async def handler(request):",
                "// Line 851:         assert \"arg\" in request.query",
                "// Line 852:         assert \"\" == request.query[\"arg\"]",
                "// vulnerable line: 853: return web.Response()",
                "// Line 854: ",
                "// vulnerable line: 855: app = web.Application()",
                "// Line 856:     app.router.add_get(\"/\", handler)",
                "// vulnerable line: 857: client = await aiohttp_client(app)",
                "// Line 858: ",
                "// Line 859:     resp = await client.get(\"/?arg=\")",
                "// vulnerable line: 860: assert 200 == resp.status",
                "// Line 861: ",
                "// vulnerable line: 862: await resp.release()",
                "// Line 863: ",
                "// Line 864: ",
                "// Line 865: async def test_response_with_async_gen(aiohttp_client, fname) -> None:",
                "// Line 866: ",
                "// Line 867:     with fname.open(\"rb\") as f:",
                "// Line 868:         data = f.read()",
                "// Line 869: ",
                "// Line 870:     data_size = len(data)",
                "// Line 871: ",
                "// Line 872:     async def stream(f_name):",
                "// Line 873:         with f_name.open(\"rb\") as f:",
                "// Line 874:             data = f.read(100)",
                "// Line 875:             while data:",
                "// Line 876:                 yield data",
                "// Line 877:                 data = f.read(100)",
                "// Line 878: ",
                "// vulnerable line: 879: async def handler(request):",
                "// Line 880:         headers = {\"Content-Length\": str(data_size)}",
                "// Line 881:         return web.Response(body=stream(fname), headers=headers)",
                "// Line 882: ",
                "// vulnerable line: 883: app = web.Application()",
                "// Line 884:     app.router.add_get(\"/\", handler)",
                "// vulnerable line: 885: client = await aiohttp_client(app)",
                "// Line 886: ",
                "// Line 887:     resp = await client.get(\"/\")",
                "// vulnerable line: 888: assert 200 == resp.status",
                "// Line 889:     resp_data = await resp.read()",
                "// Line 890:     assert resp_data == data",
                "// Line 891:     assert resp.headers.get(\"Content-Length\") == str(len(resp_data))",
                "// Line 892: ",
                "// vulnerable line: 893: await resp.release()",
                "// Line 894: ",
                "// Line 895: ",
                "// Line 896: async def test_response_with_streamer(aiohttp_client, fname) -> None:",
                "// Line 897: ",
                "// Line 898:     with fname.open(\"rb\") as f:",
                "// Line 899:         data = f.read()",
                "// Line 900: ",
                "// Line 901:     data_size = len(data)",
                "// Line 902: ",
                "// Line 903:     with pytest.warns(DeprecationWarning):",
                "// Line 904: ",
                "// Line 905:         @aiohttp.streamer",
                "// Line 906:         async def stream(writer, f_name):",
                "// Line 907:             with f_name.open(\"rb\") as f:",
                "// Line 908:                 data = f.read(100)",
                "// Line 909:                 while data:",
                "// Line 910:                     await writer.write(data)",
                "// Line 911:                     data = f.read(100)",
                "// Line 912: ",
                "// vulnerable line: 913: async def handler(request):",
                "// Line 914:         headers = {\"Content-Length\": str(data_size)}",
                "// Line 915:         return web.Response(body=stream(fname), headers=headers)",
                "// Line 916: ",
                "// vulnerable line: 917: app = web.Application()",
                "// Line 918:     app.router.add_get(\"/\", handler)",
                "// vulnerable line: 919: client = await aiohttp_client(app)",
                "// Line 920: ",
                "// Line 921:     resp = await client.get(\"/\")",
                "// vulnerable line: 922: assert 200 == resp.status",
                "// Line 923:     resp_data = await resp.read()",
                "// Line 924:     assert resp_data == data",
                "// Line 925:     assert resp.headers.get(\"Content-Length\") == str(len(resp_data))",
                "// Line 926: ",
                "// Line 927: ",
                "// Line 928: async def test_response_with_async_gen_no_params(aiohttp_client, fname) -> None:",
                "// Line 929: ",
                "// Line 930:     with fname.open(\"rb\") as f:",
                "// Line 931:         data = f.read()",
                "// Line 932: ",
                "// Line 933:     data_size = len(data)",
                "// Line 934: ",
                "// Line 935:     async def stream():",
                "// Line 936:         with fname.open(\"rb\") as f:",
                "// Line 937:             data = f.read(100)",
                "// Line 938:             while data:",
                "// Line 939:                 yield data",
                "// Line 940:                 data = f.read(100)",
                "// Line 941: ",
                "// vulnerable line: 942: async def handler(request):",
                "// Line 943:         headers = {\"Content-Length\": str(data_size)}",
                "// Line 944:         return web.Response(body=stream(), headers=headers)",
                "// Line 945: ",
                "// vulnerable line: 946: app = web.Application()",
                "// Line 947:     app.router.add_get(\"/\", handler)",
                "// vulnerable line: 948: client = await aiohttp_client(app)",
                "// Line 949: ",
                "// Line 950:     resp = await client.get(\"/\")",
                "// vulnerable line: 951: assert 200 == resp.status",
                "// Line 952:     resp_data = await resp.read()",
                "// Line 953:     assert resp_data == data",
                "// Line 954:     assert resp.headers.get(\"Content-Length\") == str(len(resp_data))",
                "// Line 955: ",
                "// vulnerable line: 956: await resp.release()",
                "// Line 957: ",
                "// Line 958: ",
                "// Line 959: async def test_response_with_streamer_no_params(aiohttp_client, fname) -> None:",
                "// Line 960: ",
                "// Line 961:     with fname.open(\"rb\") as f:",
                "// Line 962:         data = f.read()",
                "// Line 963: ",
                "// Line 964:     data_size = len(data)",
                "// Line 965: ",
                "// Line 966:     with pytest.warns(DeprecationWarning):",
                "// Line 967: ",
                "// Line 968:         @aiohttp.streamer",
                "// Line 969:         async def stream(writer):",
                "// Line 970:             with fname.open(\"rb\") as f:",
                "// Line 971:                 data = f.read(100)",
                "// Line 972:                 while data:",
                "// Line 973:                     await writer.write(data)",
                "// Line 974:                     data = f.read(100)",
                "// Line 975: ",
                "// vulnerable line: 976: async def handler(request):",
                "// Line 977:         headers = {\"Content-Length\": str(data_size)}",
                "// Line 978:         return web.Response(body=stream, headers=headers)",
                "// Line 979: ",
                "// vulnerable line: 980: app = web.Application()",
                "// Line 981:     app.router.add_get(\"/\", handler)",
                "// vulnerable line: 982: client = await aiohttp_client(app)",
                "// Line 983: ",
                "// Line 984:     resp = await client.get(\"/\")",
                "// vulnerable line: 985: assert 200 == resp.status",
                "// Line 986:     resp_data = await resp.read()",
                "// Line 987:     assert resp_data == data",
                "// Line 988:     assert resp.headers.get(\"Content-Length\") == str(len(resp_data))",
                "// Line 989: ",
                "// Line 990: ",
                "// Line 991: async def test_response_with_file(aiohttp_client, fname) -> None:",
                "// Line 992:     outer_file_descriptor = None",
                "// Line 993: ",
                "// Line 994:     with fname.open(\"rb\") as f:",
                "// Line 995:         data = f.read()",
                "// Line 996: ",
                "// vulnerable line: 997: async def handler(request):",
                "// Line 998:         nonlocal outer_file_descriptor",
                "// Line 999:         outer_file_descriptor = fname.open(\"rb\")",
                "// Line 1000:         return web.Response(body=outer_file_descriptor)",
                "// Line 1001: ",
                "// vulnerable line: 1002: app = web.Application()",
                "// Line 1003:     app.router.add_get(\"/\", handler)",
                "// vulnerable line: 1004: client = await aiohttp_client(app)",
                "// Line 1005: ",
                "// Line 1006:     resp = await client.get(\"/\")",
                "// vulnerable line: 1007: assert 200 == resp.status",
                "// Line 1008:     resp_data = await resp.read()",
                "// Line 1009:     expected_content_disposition = 'attachment; filename=\"conftest.py\"'",
                "// Line 1010:     assert resp_data == data",
                "// Line 1011:     assert resp.headers.get(\"Content-Type\") in (",
                "// Line 1012:         \"application/octet-stream\",",
                "// Line 1013:         \"text/x-python\",",
                "// Line 1014:         \"text/plain\",",
                "// Line 1015:     )",
                "// Line 1016:     assert resp.headers.get(\"Content-Length\") == str(len(resp_data))",
                "// Line 1017:     assert resp.headers.get(\"Content-Disposition\") == expected_content_disposition",
                "// Line 1018: ",
                "// vulnerable line: 1019: await resp.release()",
                "// Line 1020: ",
                "// Line 1021:     outer_file_descriptor.close()",
                "// Line 1022: ",
                "// Line 1023: ",
                "// Line 1024: async def test_response_with_file_ctype(aiohttp_client, fname) -> None:",
                "// Line 1025:     outer_file_descriptor = None",
                "// Line 1026: ",
                "// Line 1027:     with fname.open(\"rb\") as f:",
                "// Line 1028:         data = f.read()",
                "// Line 1029: ",
                "// vulnerable line: 1030: async def handler(request):",
                "// Line 1031:         nonlocal outer_file_descriptor",
                "// Line 1032:         outer_file_descriptor = fname.open(\"rb\")",
                "// Line 1033: ",
                "// Line 1034:         return web.Response(",
                "// Line 1035:             body=outer_file_descriptor, headers={\"content-type\": \"text/binary\"}",
                "// Line 1036:         )",
                "// Line 1037: ",
                "// vulnerable line: 1038: app = web.Application()",
                "// Line 1039:     app.router.add_get(\"/\", handler)",
                "// vulnerable line: 1040: client = await aiohttp_client(app)",
                "// Line 1041: ",
                "// Line 1042:     resp = await client.get(\"/\")",
                "// vulnerable line: 1043: assert 200 == resp.status",
                "// Line 1044:     resp_data = await resp.read()",
                "// Line 1045:     expected_content_disposition = 'attachment; filename=\"conftest.py\"'",
                "// Line 1046:     assert resp_data == data",
                "// Line 1047:     assert resp.headers.get(\"Content-Type\") == \"text/binary\"",
                "// Line 1048:     assert resp.headers.get(\"Content-Length\") == str(len(resp_data))",
                "// Line 1049:     assert resp.headers.get(\"Content-Disposition\") == expected_content_disposition",
                "// Line 1050: ",
                "// vulnerable line: 1051: await resp.release()",
                "// Line 1052: ",
                "// Line 1053:     outer_file_descriptor.close()",
                "// Line 1054: ",
                "// Line 1055: ",
                "// Line 1056: async def test_response_with_payload_disp(aiohttp_client, fname) -> None:",
                "// Line 1057:     outer_file_descriptor = None",
                "// Line 1058: ",
                "// Line 1059:     with fname.open(\"rb\") as f:",
                "// Line 1060:         data = f.read()",
                "// Line 1061: ",
                "// vulnerable line: 1062: async def handler(request):",
                "// Line 1063:         nonlocal outer_file_descriptor",
                "// Line 1064:         outer_file_descriptor = fname.open(\"rb\")",
                "// Line 1065:         pl = aiohttp.get_payload(outer_file_descriptor)",
                "// Line 1066:         pl.set_content_disposition(\"inline\", filename=\"test.txt\")",
                "// Line 1067:         return web.Response(body=pl, headers={\"content-type\": \"text/binary\"})",
                "// Line 1068: ",
                "// vulnerable line: 1069: app = web.Application()",
                "// Line 1070:     app.router.add_get(\"/\", handler)",
                "// vulnerable line: 1071: client = await aiohttp_client(app)",
                "// Line 1072: ",
                "// Line 1073:     resp = await client.get(\"/\")",
                "// vulnerable line: 1074: assert 200 == resp.status",
                "// Line 1075:     resp_data = await resp.read()",
                "// Line 1076:     assert resp_data == data",
                "// Line 1077:     assert resp.headers.get(\"Content-Type\") == \"text/binary\"",
                "// Line 1078:     assert resp.headers.get(\"Content-Length\") == str(len(resp_data))",
                "// Line 1079:     assert resp.headers.get(\"Content-Disposition\") == 'inline; filename=\"test.txt\"'",
                "// Line 1080: ",
                "// vulnerable line: 1081: await resp.release()",
                "// Line 1082: ",
                "// Line 1083:     outer_file_descriptor.close()",
                "// Line 1084: ",
                "// Line 1085: ",
                "// Line 1086: async def test_response_with_payload_stringio(aiohttp_client, fname) -> None:",
                "// vulnerable line: 1087: async def handler(request):",
                "// Line 1088:         return web.Response(body=io.StringIO(\"test\"))",
                "// Line 1089: ",
                "// vulnerable line: 1090: app = web.Application()",
                "// Line 1091:     app.router.add_get(\"/\", handler)",
                "// vulnerable line: 1092: client = await aiohttp_client(app)",
                "// Line 1093: ",
                "// Line 1094:     resp = await client.get(\"/\")",
                "// vulnerable line: 1095: assert 200 == resp.status",
                "// Line 1096:     resp_data = await resp.read()",
                "// Line 1097:     assert resp_data == b\"test\"",
                "// Line 1098: ",
                "// vulnerable line: 1099: await resp.release()",
                "// Line 1100: ",
                "// Line 1101: ",
                "// Line 1102: @pytest.mark.parametrize(",
                "// Line 1103:     \"compressor,encoding\",",
                "// Line 1104:     [",
                "// Line 1105:         (zlib.compressobj(wbits=16 + zlib.MAX_WBITS), \"gzip\"),",
                "// Line 1106:         (zlib.compressobj(wbits=zlib.MAX_WBITS), \"deflate\"),",
                "// Line 1107:         # Actually, wrong compression format, but",
                "// Line 1108:         # should be supported for some legacy cases.",
                "// Line 1109:         (zlib.compressobj(wbits=-zlib.MAX_WBITS), \"deflate\"),",
                "// Line 1110:     ],",
                "// Line 1111: )",
                "// Line 1112: async def test_response_with_precompressed_body(",
                "// Line 1113:     aiohttp_client, compressor, encoding",
                "// Line 1114: ) -> None:",
                "// vulnerable line: 1115: async def handler(request):",
                "// Line 1116:         headers = {\"Content-Encoding\": encoding}",
                "// Line 1117:         data = compressor.compress(b\"mydata\") + compressor.flush()",
                "// Line 1118:         return web.Response(body=data, headers=headers)",
                "// Line 1119: ",
                "// vulnerable line: 1120: app = web.Application()",
                "// Line 1121:     app.router.add_get(\"/\", handler)",
                "// vulnerable line: 1122: client = await aiohttp_client(app)",
                "// Line 1123: ",
                "// Line 1124:     resp = await client.get(\"/\")",
                "// vulnerable line: 1125: assert 200 == resp.status",
                "// Line 1126:     data = await resp.read()",
                "// Line 1127:     assert b\"mydata\" == data",
                "// Line 1128:     assert resp.headers.get(\"Content-Encoding\") == encoding",
                "// Line 1129: ",
                "// vulnerable line: 1130: await resp.release()",
                "// Line 1131: ",
                "// Line 1132: ",
                "// Line 1133: async def test_response_with_precompressed_body_brotli(aiohttp_client) -> None:",
                "// vulnerable line: 1134: async def handler(request):",
                "// Line 1135:         headers = {\"Content-Encoding\": \"br\"}",
                "// Line 1136:         return web.Response(body=brotli.compress(b\"mydata\"), headers=headers)",
                "// Line 1137: ",
                "// vulnerable line: 1138: app = web.Application()",
                "// Line 1139:     app.router.add_get(\"/\", handler)",
                "// vulnerable line: 1140: client = await aiohttp_client(app)",
                "// Line 1141: ",
                "// Line 1142:     resp = await client.get(\"/\")",
                "// vulnerable line: 1143: assert 200 == resp.status",
                "// Line 1144:     data = await resp.read()",
                "// Line 1145:     assert b\"mydata\" == data",
                "// Line 1146:     assert resp.headers.get(\"Content-Encoding\") == \"br\"",
                "// Line 1147: ",
                "// vulnerable line: 1148: await resp.release()",
                "// Line 1149: ",
                "// Line 1150: ",
                "// Line 1151: async def test_bad_request_payload(aiohttp_client) -> None:",
                "// vulnerable line: 1152: async def handler(request):",
                "// Line 1153:         assert request.method == \"POST\"",
                "// Line 1154: ",
                "// Line 1155:         with pytest.raises(aiohttp.web.RequestPayloadError):",
                "// Line 1156:             await request.content.read()",
                "// Line 1157: ",
                "// vulnerable line: 1158: return web.Response()",
                "// Line 1159: ",
                "// vulnerable line: 1160: app = web.Application()",
                "// vulnerable line: 1161: app.router.add_post(\"/\", handler)",
                "// vulnerable line: 1162: client = await aiohttp_client(app)",
                "// Line 1163: ",
                "// Line 1164:     resp = await client.post(\"/\", data=b\"test\", headers={\"content-encoding\": \"gzip\"})",
                "// vulnerable line: 1165: assert 200 == resp.status",
                "// Line 1166: ",
                "// vulnerable line: 1167: await resp.release()",
                "// Line 1168: ",
                "// Line 1169: ",
                "// Line 1170: async def test_stream_response_multiple_chunks(aiohttp_client) -> None:",
                "// vulnerable line: 1171: async def handler(request):",
                "// Line 1172:         resp = web.StreamResponse()",
                "// Line 1173:         resp.enable_chunked_encoding()",
                "// Line 1174:         await resp.prepare(request)",
                "// Line 1175:         await resp.write(b\"x\")",
                "// Line 1176:         await resp.write(b\"y\")",
                "// Line 1177:         await resp.write(b\"z\")",
                "// Line 1178:         return resp",
                "// Line 1179: ",
                "// vulnerable line: 1180: app = web.Application()",
                "// Line 1181:     app.router.add_get(\"/\", handler)",
                "// vulnerable line: 1182: client = await aiohttp_client(app)",
                "// Line 1183: ",
                "// Line 1184:     resp = await client.get(\"/\")",
                "// vulnerable line: 1185: assert 200 == resp.status",
                "// Line 1186:     data = await resp.read()",
                "// Line 1187:     assert b\"xyz\" == data",
                "// Line 1188: ",
                "// vulnerable line: 1189: await resp.release()",
                "// Line 1190: ",
                "// Line 1191: ",
                "// Line 1192: async def test_start_without_routes(aiohttp_client) -> None:",
                "// Line 1193: ",
                "// vulnerable line: 1194: app = web.Application()",
                "// vulnerable line: 1195: client = await aiohttp_client(app)",
                "// Line 1196: ",
                "// Line 1197:     resp = await client.get(\"/\")",
                "// Line 1198:     assert 404 == resp.status",
                "// Line 1199: ",
                "// vulnerable line: 1200: await resp.release()",
                "// Line 1201: ",
                "// Line 1202: ",
                "// Line 1203: async def test_requests_count(aiohttp_client) -> None:",
                "// vulnerable line: 1204: async def handler(request):",
                "// vulnerable line: 1205: return web.Response()",
                "// Line 1206: ",
                "// vulnerable line: 1207: app = web.Application()",
                "// Line 1208:     app.router.add_get(\"/\", handler)",
                "// vulnerable line: 1209: client = await aiohttp_client(app)",
                "// Line 1210:     assert client.server.handler.requests_count == 0",
                "// Line 1211: ",
                "// Line 1212:     resp = await client.get(\"/\")",
                "// vulnerable line: 1213: assert 200 == resp.status",
                "// Line 1214:     assert client.server.handler.requests_count == 1",
                "// vulnerable line: 1215: await resp.release()",
                "// Line 1216: ",
                "// Line 1217:     resp = await client.get(\"/\")",
                "// vulnerable line: 1218: assert 200 == resp.status",
                "// Line 1219:     assert client.server.handler.requests_count == 2",
                "// vulnerable line: 1220: await resp.release()",
                "// Line 1221: ",
                "// Line 1222:     resp = await client.get(\"/\")",
                "// vulnerable line: 1223: assert 200 == resp.status",
                "// Line 1224:     assert client.server.handler.requests_count == 3",
                "// vulnerable line: 1225: await resp.release()",
                "// Line 1226: ",
                "// Line 1227: ",
                "// Line 1228: async def test_redirect_url(aiohttp_client) -> None:",
                "// Line 1229:     async def redirector(request):",
                "// Line 1230:         raise web.HTTPFound(location=URL(\"/redirected\"))",
                "// Line 1231: ",
                "// Line 1232:     async def redirected(request):",
                "// vulnerable line: 1233: return web.Response()",
                "// Line 1234: ",
                "// vulnerable line: 1235: app = web.Application()",
                "// Line 1236:     app.router.add_get(\"/redirector\", redirector)",
                "// Line 1237:     app.router.add_get(\"/redirected\", redirected)",
                "// Line 1238: ",
                "// vulnerable line: 1239: client = await aiohttp_client(app)",
                "// Line 1240:     resp = await client.get(\"/redirector\")",
                "// Line 1241:     assert resp.status == 200",
                "// Line 1242: ",
                "// vulnerable line: 1243: await resp.release()",
                "// Line 1244: ",
                "// Line 1245: ",
                "// Line 1246: async def test_simple_subapp(aiohttp_client) -> None:",
                "// vulnerable line: 1247: async def handler(request):",
                "// Line 1248:         return web.Response(text=\"OK\")",
                "// Line 1249: ",
                "// vulnerable line: 1250: app = web.Application()",
                "// Line 1251:     subapp = web.Application()",
                "// Line 1252:     subapp.router.add_get(\"/to\", handler)",
                "// Line 1253:     app.add_subapp(\"/path\", subapp)",
                "// Line 1254: ",
                "// vulnerable line: 1255: client = await aiohttp_client(app)",
                "// Line 1256:     resp = await client.get(\"/path/to\")",
                "// Line 1257:     assert resp.status == 200",
                "// Line 1258:     txt = await resp.text()",
                "// Line 1259:     assert \"OK\" == txt",
                "// Line 1260: ",
                "// vulnerable line: 1261: await resp.release()",
                "// Line 1262: ",
                "// Line 1263: ",
                "// Line 1264: async def test_subapp_reverse_url(aiohttp_client) -> None:",
                "// vulnerable line: 1265: async def handler(request):",
                "// Line 1266:         raise web.HTTPMovedPermanently(location=subapp.router[\"name\"].url_for())",
                "// Line 1267: ",
                "// Line 1268:     async def handler2(request):",
                "// Line 1269:         return web.Response(text=\"OK\")",
                "// Line 1270: ",
                "// vulnerable line: 1271: app = web.Application()",
                "// Line 1272:     subapp = web.Application()",
                "// Line 1273:     subapp.router.add_get(\"/to\", handler)",
                "// Line 1274:     subapp.router.add_get(\"/final\", handler2, name=\"name\")",
                "// Line 1275:     app.add_subapp(\"/path\", subapp)",
                "// Line 1276: ",
                "// vulnerable line: 1277: client = await aiohttp_client(app)",
                "// Line 1278:     resp = await client.get(\"/path/to\")",
                "// Line 1279:     assert resp.status == 200",
                "// Line 1280:     txt = await resp.text()",
                "// Line 1281:     assert \"OK\" == txt",
                "// Line 1282:     assert resp.url.path == \"/path/final\"",
                "// Line 1283: ",
                "// vulnerable line: 1284: await resp.release()",
                "// Line 1285: ",
                "// Line 1286: ",
                "// Line 1287: async def test_subapp_reverse_variable_url(aiohttp_client) -> None:",
                "// vulnerable line: 1288: async def handler(request):",
                "// Line 1289:         raise web.HTTPMovedPermanently(",
                "// Line 1290:             location=subapp.router[\"name\"].url_for(part=\"final\")",
                "// Line 1291:         )",
                "// Line 1292: ",
                "// Line 1293:     async def handler2(request):",
                "// Line 1294:         return web.Response(text=\"OK\")",
                "// Line 1295: ",
                "// vulnerable line: 1296: app = web.Application()",
                "// Line 1297:     subapp = web.Application()",
                "// Line 1298:     subapp.router.add_get(\"/to\", handler)",
                "// Line 1299:     subapp.router.add_get(\"/{part}\", handler2, name=\"name\")",
                "// Line 1300:     app.add_subapp(\"/path\", subapp)",
                "// Line 1301: ",
                "// vulnerable line: 1302: client = await aiohttp_client(app)",
                "// Line 1303:     resp = await client.get(\"/path/to\")",
                "// Line 1304:     assert resp.status == 200",
                "// Line 1305:     txt = await resp.text()",
                "// Line 1306:     assert \"OK\" == txt",
                "// Line 1307:     assert resp.url.path == \"/path/final\"",
                "// Line 1308: ",
                "// vulnerable line: 1309: await resp.release()",
                "// Line 1310: ",
                "// Line 1311: ",
                "// Line 1312: async def test_subapp_reverse_static_url(aiohttp_client) -> None:",
                "// Line 1313:     fname = \"aiohttp.png\"",
                "// Line 1314: ",
                "// vulnerable line: 1315: async def handler(request):",
                "// Line 1316:         raise web.HTTPMovedPermanently(",
                "// Line 1317:             location=subapp.router[\"name\"].url_for(filename=fname)",
                "// Line 1318:         )",
                "// Line 1319: ",
                "// vulnerable line: 1320: app = web.Application()",
                "// Line 1321:     subapp = web.Application()",
                "// Line 1322:     subapp.router.add_get(\"/to\", handler)",
                "// Line 1323:     here = pathlib.Path(__file__).parent",
                "// Line 1324:     subapp.router.add_static(\"/static\", here, name=\"name\")",
                "// Line 1325:     app.add_subapp(\"/path\", subapp)",
                "// Line 1326: ",
                "// vulnerable line: 1327: client = await aiohttp_client(app)",
                "// Line 1328:     resp = await client.get(\"/path/to\")",
                "// Line 1329:     assert resp.url.path == \"/path/static/\" + fname",
                "// Line 1330:     assert resp.status == 200",
                "// Line 1331:     body = await resp.read()",
                "// Line 1332: ",
                "// vulnerable line: 1333: await resp.release()",
                "// Line 1334: ",
                "// Line 1335:     with (here / fname).open(\"rb\") as f:",
                "// Line 1336:         assert body == f.read()",
                "// Line 1337: ",
                "// Line 1338: ",
                "// Line 1339: async def test_subapp_app(aiohttp_client) -> None:",
                "// vulnerable line: 1340: async def handler(request):",
                "// Line 1341:         assert request.app is subapp",
                "// Line 1342:         return web.Response(text=\"OK\")",
                "// Line 1343: ",
                "// vulnerable line: 1344: app = web.Application()",
                "// Line 1345:     subapp = web.Application()",
                "// Line 1346:     subapp.router.add_get(\"/to\", handler)",
                "// Line 1347:     app.add_subapp(\"/path/\", subapp)",
                "// Line 1348: ",
                "// vulnerable line: 1349: client = await aiohttp_client(app)",
                "// Line 1350:     resp = await client.get(\"/path/to\")",
                "// Line 1351:     assert resp.status == 200",
                "// Line 1352:     txt = await resp.text()",
                "// Line 1353:     assert \"OK\" == txt",
                "// Line 1354: ",
                "// vulnerable line: 1355: await resp.release()",
                "// Line 1356: ",
                "// Line 1357: ",
                "// Line 1358: async def test_subapp_not_found(aiohttp_client) -> None:",
                "// vulnerable line: 1359: async def handler(request):",
                "// Line 1360:         return web.Response(text=\"OK\")",
                "// Line 1361: ",
                "// vulnerable line: 1362: app = web.Application()",
                "// Line 1363:     subapp = web.Application()",
                "// Line 1364:     subapp.router.add_get(\"/to\", handler)",
                "// Line 1365:     app.add_subapp(\"/path/\", subapp)",
                "// Line 1366: ",
                "// vulnerable line: 1367: client = await aiohttp_client(app)",
                "// Line 1368:     resp = await client.get(\"/path/other\")",
                "// Line 1369:     assert resp.status == 404",
                "// Line 1370: ",
                "// vulnerable line: 1371: await resp.release()",
                "// Line 1372: ",
                "// Line 1373: ",
                "// Line 1374: async def test_subapp_not_found2(aiohttp_client) -> None:",
                "// vulnerable line: 1375: async def handler(request):",
                "// Line 1376:         return web.Response(text=\"OK\")",
                "// Line 1377: ",
                "// vulnerable line: 1378: app = web.Application()",
                "// Line 1379:     subapp = web.Application()",
                "// Line 1380:     subapp.router.add_get(\"/to\", handler)",
                "// Line 1381:     app.add_subapp(\"/path/\", subapp)",
                "// Line 1382: ",
                "// vulnerable line: 1383: client = await aiohttp_client(app)",
                "// Line 1384:     resp = await client.get(\"/invalid/other\")",
                "// Line 1385:     assert resp.status == 404",
                "// Line 1386: ",
                "// vulnerable line: 1387: await resp.release()",
                "// Line 1388: ",
                "// Line 1389: ",
                "// Line 1390: async def test_subapp_not_allowed(aiohttp_client) -> None:",
                "// vulnerable line: 1391: async def handler(request):",
                "// Line 1392:         return web.Response(text=\"OK\")",
                "// Line 1393: ",
                "// vulnerable line: 1394: app = web.Application()",
                "// Line 1395:     subapp = web.Application()",
                "// Line 1396:     subapp.router.add_get(\"/to\", handler)",
                "// Line 1397:     app.add_subapp(\"/path/\", subapp)",
                "// Line 1398: ",
                "// vulnerable line: 1399: client = await aiohttp_client(app)",
                "// Line 1400:     resp = await client.post(\"/path/to\")",
                "// Line 1401:     assert resp.status == 405",
                "// Line 1402:     assert resp.headers[\"Allow\"] == \"GET,HEAD\"",
                "// Line 1403: ",
                "// vulnerable line: 1404: await resp.release()",
                "// Line 1405: ",
                "// Line 1406: ",
                "// Line 1407: async def test_subapp_cannot_add_app_in_handler(aiohttp_client) -> None:",
                "// vulnerable line: 1408: async def handler(request):",
                "// Line 1409:         request.match_info.add_app(app)",
                "// Line 1410:         return web.Response(text=\"OK\")",
                "// Line 1411: ",
                "// vulnerable line: 1412: app = web.Application()",
                "// Line 1413:     subapp = web.Application()",
                "// Line 1414:     subapp.router.add_get(\"/to\", handler)",
                "// Line 1415:     app.add_subapp(\"/path/\", subapp)",
                "// Line 1416: ",
                "// vulnerable line: 1417: client = await aiohttp_client(app)",
                "// Line 1418:     resp = await client.get(\"/path/to\")",
                "// Line 1419:     assert resp.status == 500",
                "// Line 1420: ",
                "// vulnerable line: 1421: await resp.release()",
                "// Line 1422: ",
                "// Line 1423: ",
                "// Line 1424: async def test_subapp_middlewares(aiohttp_client) -> None:",
                "// Line 1425:     order = []",
                "// Line 1426: ",
                "// vulnerable line: 1427: async def handler(request):",
                "// Line 1428:         return web.Response(text=\"OK\")",
                "// Line 1429: ",
                "// Line 1430:     async def middleware_factory(app, handler: Handler):",
                "// Line 1431:         async def middleware(request):",
                "// Line 1432:             order.append((1, app))",
                "// Line 1433:             resp = await handler(request)",
                "// vulnerable line: 1434: assert 200 == resp.status",
                "// Line 1435:             order.append((2, app))",
                "// Line 1436:             return resp",
                "// Line 1437: ",
                "// Line 1438:         return middleware",
                "// Line 1439: ",
                "// Line 1440:     app = web.Application(middlewares=[middleware_factory])",
                "// Line 1441:     subapp1 = web.Application(middlewares=[middleware_factory])",
                "// Line 1442:     subapp2 = web.Application(middlewares=[middleware_factory])",
                "// Line 1443:     subapp2.router.add_get(\"/to\", handler)",
                "// Line 1444:     with pytest.warns(DeprecationWarning):",
                "// Line 1445:         subapp1.add_subapp(\"/b/\", subapp2)",
                "// Line 1446:         app.add_subapp(\"/a/\", subapp1)",
                "// vulnerable line: 1447: client = await aiohttp_client(app)",
                "// Line 1448: ",
                "// Line 1449:     resp = await client.get(\"/a/b/to\")",
                "// Line 1450:     assert resp.status == 200",
                "// Line 1451:     assert [",
                "// Line 1452:         (1, app),",
                "// Line 1453:         (1, subapp1),",
                "// Line 1454:         (1, subapp2),",
                "// Line 1455:         (2, subapp2),",
                "// Line 1456:         (2, subapp1),",
                "// Line 1457:         (2, app),",
                "// Line 1458:     ] == order",
                "// Line 1459: ",
                "// vulnerable line: 1460: await resp.release()",
                "// Line 1461: ",
                "// Line 1462: ",
                "// Line 1463: async def test_subapp_on_response_prepare(aiohttp_client) -> None:",
                "// Line 1464:     order = []",
                "// Line 1465: ",
                "// vulnerable line: 1466: async def handler(request):",
                "// Line 1467:         return web.Response(text=\"OK\")",
                "// Line 1468: ",
                "// Line 1469:     def make_signal(app):",
                "// Line 1470:         async def on_response(request, response):",
                "// Line 1471:             order.append(app)",
                "// Line 1472: ",
                "// Line 1473:         return on_response",
                "// Line 1474: ",
                "// vulnerable line: 1475: app = web.Application()",
                "// Line 1476:     app.on_response_prepare.append(make_signal(app))",
                "// Line 1477:     subapp1 = web.Application()",
                "// Line 1478:     subapp1.on_response_prepare.append(make_signal(subapp1))",
                "// Line 1479:     subapp2 = web.Application()",
                "// Line 1480:     subapp2.on_response_prepare.append(make_signal(subapp2))",
                "// Line 1481:     subapp2.router.add_get(\"/to\", handler)",
                "// Line 1482:     subapp1.add_subapp(\"/b/\", subapp2)",
                "// Line 1483:     app.add_subapp(\"/a/\", subapp1)",
                "// Line 1484: ",
                "// vulnerable line: 1485: client = await aiohttp_client(app)",
                "// Line 1486:     resp = await client.get(\"/a/b/to\")",
                "// Line 1487:     assert resp.status == 200",
                "// Line 1488:     assert [app, subapp1, subapp2] == order",
                "// Line 1489: ",
                "// vulnerable line: 1490: await resp.release()",
                "// Line 1491: ",
                "// Line 1492: ",
                "// Line 1493: async def test_subapp_on_startup(aiohttp_server) -> None:",
                "// Line 1494:     order = []",
                "// Line 1495: ",
                "// Line 1496:     async def on_signal(app):",
                "// Line 1497:         order.append(app)",
                "// Line 1498: ",
                "// vulnerable line: 1499: app = web.Application()",
                "// Line 1500:     app.on_startup.append(on_signal)",
                "// Line 1501:     subapp1 = web.Application()",
                "// Line 1502:     subapp1.on_startup.append(on_signal)",
                "// Line 1503:     subapp2 = web.Application()",
                "// Line 1504:     subapp2.on_startup.append(on_signal)",
                "// Line 1505:     subapp1.add_subapp(\"/b/\", subapp2)",
                "// Line 1506:     app.add_subapp(\"/a/\", subapp1)",
                "// Line 1507: ",
                "// Line 1508:     await aiohttp_server(app)",
                "// Line 1509: ",
                "// Line 1510:     assert [app, subapp1, subapp2] == order",
                "// Line 1511: ",
                "// Line 1512: ",
                "// Line 1513: async def test_subapp_on_shutdown(aiohttp_server) -> None:",
                "// Line 1514:     order = []",
                "// Line 1515: ",
                "// Line 1516:     async def on_signal(app):",
                "// Line 1517:         order.append(app)",
                "// Line 1518: ",
                "// vulnerable line: 1519: app = web.Application()",
                "// Line 1520:     app.on_shutdown.append(on_signal)",
                "// Line 1521:     subapp1 = web.Application()",
                "// Line 1522:     subapp1.on_shutdown.append(on_signal)",
                "// Line 1523:     subapp2 = web.Application()",
                "// Line 1524:     subapp2.on_shutdown.append(on_signal)",
                "// Line 1525:     subapp1.add_subapp(\"/b/\", subapp2)",
                "// Line 1526:     app.add_subapp(\"/a/\", subapp1)",
                "// Line 1527: ",
                "// Line 1528:     server = await aiohttp_server(app)",
                "// Line 1529:     await server.close()",
                "// Line 1530: ",
                "// Line 1531:     assert [app, subapp1, subapp2] == order",
                "// Line 1532: ",
                "// Line 1533: ",
                "// Line 1534: async def test_subapp_on_cleanup(aiohttp_server) -> None:",
                "// Line 1535:     order = []",
                "// Line 1536: ",
                "// Line 1537:     async def on_signal(app):",
                "// Line 1538:         order.append(app)",
                "// Line 1539: ",
                "// vulnerable line: 1540: app = web.Application()",
                "// Line 1541:     app.on_cleanup.append(on_signal)",
                "// Line 1542:     subapp1 = web.Application()",
                "// Line 1543:     subapp1.on_cleanup.append(on_signal)",
                "// Line 1544:     subapp2 = web.Application()",
                "// Line 1545:     subapp2.on_cleanup.append(on_signal)",
                "// Line 1546:     subapp1.add_subapp(\"/b/\", subapp2)",
                "// Line 1547:     app.add_subapp(\"/a/\", subapp1)",
                "// Line 1548: ",
                "// Line 1549:     server = await aiohttp_server(app)",
                "// Line 1550:     await server.close()",
                "// Line 1570: ",
                "// Line 1571:     def show_app_context(appname):",
                "// Line 1572:         @web.middleware",
                "// Line 1573:         async def middleware(request, handler: Handler):",
                "// Line 1574:             values.append(f\"{appname}: {request.app[my_value]}\")",
                "// Line 1575:             return await handler(request)",
                "// Line 1576: ",
                "// Line 1577:         return middleware",
                "// Line 1578: ",
                "// Line 1579:     def make_handler(appname):",
                "// vulnerable line: 1580: async def handler(request):",
                "// Line 1581:             values.append(f\"{appname}: {request.app[my_value]}\")",
                "// Line 1582:             return web.Response(text=\"Ok\")",
                "// Line 1583: ",
                "// Line 1584:         return handler",
                "// Line 1585: ",
                "// vulnerable line: 1586: app = web.Application()",
                "// Line 1587:     my_value = web.AppKey(\"my_value\", str)",
                "// Line 1588:     app[my_value] = \"root\"",
                "// Line 1589:     if \"A\" in middlewares:",
                "// Line 1590:         app.middlewares.append(show_app_context(\"A\"))",
                "// Line 1591:     app.router.add_get(\"/\", make_handler(\"B\"))",
                "// Line 1592: ",
                "// Line 1593:     subapp = web.Application()",
                "// Line 1594:     subapp[my_value] = \"sub\"",
                "// Line 1595:     if \"C\" in middlewares:",
                "// Line 1596:         subapp.middlewares.append(show_app_context(\"C\"))",
                "// Line 1597:     subapp.router.add_get(\"/\", make_handler(\"D\"))",
                "// Line 1598:     app.add_subapp(\"/sub/\", subapp)",
                "// Line 1599: ",
                "// vulnerable line: 1600: client = await aiohttp_client(app)",
                "// Line 1601:     resp = await client.get(route)",
                "// vulnerable line: 1602: assert 200 == resp.status",
                "// Line 1603:     assert \"Ok\" == await resp.text()",
                "// Line 1604:     assert expected == values",
                "// Line 1605: ",
                "// vulnerable line: 1606: await resp.release()",
                "// Line 1607: ",
                "// Line 1608: ",
                "// Line 1609: async def test_custom_date_header(aiohttp_client) -> None:",
                "// vulnerable line: 1610: async def handler(request):",
                "// Line 1611:         return web.Response(headers={\"Date\": \"Sun, 30 Oct 2016 03:13:52 GMT\"})",
                "// Line 1612: ",
                "// vulnerable line: 1613: app = web.Application()",
                "// Line 1614:     app.router.add_get(\"/\", handler)",
                "// vulnerable line: 1615: client = await aiohttp_client(app)",
                "// Line 1616: ",
                "// Line 1617:     resp = await client.get(\"/\")",
                "// vulnerable line: 1618: assert 200 == resp.status",
                "// Line 1619:     assert resp.headers[\"Date\"] == \"Sun, 30 Oct 2016 03:13:52 GMT\"",
                "// Line 1620: ",
                "// vulnerable line: 1621: await resp.release()",
                "// Line 1622: ",
                "// Line 1623: ",
                "// Line 1624: async def test_response_prepared_with_clone(aiohttp_client) -> None:",
                "// vulnerable line: 1625: async def handler(request):",
                "// Line 1626:         cloned = request.clone()",
                "// Line 1627:         resp = web.StreamResponse()",
                "// Line 1628:         await resp.prepare(cloned)",
                "// Line 1629:         return resp",
                "// Line 1630: ",
                "// vulnerable line: 1631: app = web.Application()",
                "// Line 1632:     app.router.add_get(\"/\", handler)",
                "// vulnerable line: 1633: client = await aiohttp_client(app)",
                "// Line 1634: ",
                "// Line 1635:     resp = await client.get(\"/\")",
                "// vulnerable line: 1636: assert 200 == resp.status",
                "// Line 1637: ",
                "// vulnerable line: 1638: await resp.release()",
                "// Line 1639: ",
                "// Line 1640: ",
                "// Line 1641: async def test_app_max_client_size(aiohttp_client) -> None:",
                "// vulnerable line: 1642: async def handler(request):",
                "// Line 1643:         await request.post()",
                "// Line 1644:         return web.Response(body=b\"ok\")",
                "// Line 1645: ",
                "// Line 1646:     max_size = 1024**2",
                "// vulnerable line: 1647: app = web.Application()",
                "// vulnerable line: 1648: app.router.add_post(\"/\", handler)",
                "// vulnerable line: 1649: client = await aiohttp_client(app)",
                "// Line 1650:     data = {\"long_string\": max_size * \"x\" + \"xxx\"}",
                "// Line 1651:     with pytest.warns(ResourceWarning):",
                "// Line 1652:         resp = await client.post(\"/\", data=data)",
                "// Line 1653:     assert 413 == resp.status",
                "// Line 1654:     resp_text = await resp.text()",
                "// Line 1655:     assert (",
                "// Line 1656:         \"Maximum request body size 1048576 exceeded, \" \"actual body size\" in resp_text",
                "// Line 1657:     )",
                "// Line 1658:     # Maximum request body size X exceeded, actual body size X",
                "// Line 1659:     body_size = int(resp_text.split()[-1])",
                "// Line 1660:     assert body_size >= max_size",
                "// Line 1661: ",
                "// vulnerable line: 1662: await resp.release()",
                "// Line 1663: ",
                "// Line 1664: ",
                "// Line 1665: async def test_app_max_client_size_adjusted(aiohttp_client) -> None:",
                "// vulnerable line: 1666: async def handler(request):",
                "// Line 1667:         await request.post()",
                "// Line 1668:         return web.Response(body=b\"ok\")",
                "// Line 1669: ",
                "// Line 1670:     default_max_size = 1024**2",
                "// Line 1671:     custom_max_size = default_max_size * 2",
                "// Line 1672:     app = web.Application(client_max_size=custom_max_size)",
                "// vulnerable line: 1673: app.router.add_post(\"/\", handler)",
                "// vulnerable line: 1674: client = await aiohttp_client(app)",
                "// Line 1675:     data = {\"long_string\": default_max_size * \"x\" + \"xxx\"}",
                "// Line 1676: ",
                "// Line 1677:     with pytest.warns(ResourceWarning):",
                "// Line 1678:         resp = await client.post(\"/\", data=data)",
                "// vulnerable line: 1679: assert 200 == resp.status",
                "// Line 1680:     resp_text = await resp.text()",
                "// Line 1681:     assert \"ok\" == resp_text",
                "// vulnerable line: 1682: await resp.release()",
                "// Line 1683: ",
                "// Line 1684:     too_large_data = {\"log_string\": custom_max_size * \"x\" + \"xxx\"}",
                "// Line 1685:     with pytest.warns(ResourceWarning):",
                "// Line 1686:         resp = await client.post(\"/\", data=too_large_data)",
                "// Line 1687:     assert 413 == resp.status",
                "// Line 1688:     resp_text = await resp.text()",
                "// Line 1689:     assert (",
                "// Line 1690:         \"Maximum request body size 2097152 exceeded, \" \"actual body size\" in resp_text",
                "// Line 1691:     )",
                "// Line 1692:     # Maximum request body size X exceeded, actual body size X",
                "// Line 1693:     body_size = int(resp_text.split()[-1])",
                "// Line 1694:     assert body_size >= custom_max_size",
                "// Line 1695: ",
                "// vulnerable line: 1696: await resp.release()",
                "// Line 1697: ",
                "// Line 1698: ",
                "// Line 1699: async def test_app_max_client_size_none(aiohttp_client) -> None:",
                "// vulnerable line: 1700: async def handler(request):",
                "// Line 1701:         await request.post()",
                "// Line 1702:         return web.Response(body=b\"ok\")",
                "// Line 1703: ",
                "// Line 1704:     default_max_size = 1024**2",
                "// Line 1705:     custom_max_size = None",
                "// Line 1706:     app = web.Application(client_max_size=custom_max_size)",
                "// vulnerable line: 1707: app.router.add_post(\"/\", handler)",
                "// vulnerable line: 1708: client = await aiohttp_client(app)",
                "// Line 1709: ",
                "// Line 1710:     data = {\"long_string\": default_max_size * \"x\" + \"xxx\"}",
                "// Line 1711:     with pytest.warns(ResourceWarning):",
                "// Line 1712:         resp = await client.post(\"/\", data=data)",
                "// vulnerable line: 1713: assert 200 == resp.status",
                "// Line 1714:     resp_text = await resp.text()",
                "// Line 1715:     assert \"ok\" == resp_text",
                "// vulnerable line: 1716: await resp.release()",
                "// Line 1717: ",
                "// Line 1718:     too_large_data = {\"log_string\": default_max_size * 2 * \"x\"}",
                "// Line 1719:     with pytest.warns(ResourceWarning):",
                "// Line 1720:         resp = await client.post(\"/\", data=too_large_data)",
                "// vulnerable line: 1721: assert 200 == resp.status",
                "// Line 1722:     resp_text = await resp.text()",
                "// Line 1723:     assert resp_text == \"ok\"",
                "// vulnerable line: 1724: await resp.release()",
                "// Line 1725: ",
                "// Line 1726: ",
                "// Line 1727: async def test_post_max_client_size(aiohttp_client) -> None:",
                "// vulnerable line: 1728: async def handler(request):",
                "// Line 1729:         await request.post()",
                "// vulnerable line: 1730: return web.Response()",
                "// Line 1731: ",
                "// Line 1732:     app = web.Application(client_max_size=10)",
                "// vulnerable line: 1733: app.router.add_post(\"/\", handler)",
                "// vulnerable line: 1734: client = await aiohttp_client(app)",
                "// Line 1735: ",
                "// Line 1736:     with io.BytesIO(b\"test\") as file_handle:",
                "// Line 1737:         data = {\"long_string\": 1024 * \"x\", \"file\": file_handle}",
                "// Line 1738:         resp = await client.post(\"/\", data=data)",
                "// Line 1739: ",
                "// Line 1740:         assert 413 == resp.status",
                "// Line 1741:         resp_text = await resp.text()",
                "// Line 1742:         assert (",
                "// Line 1743:             \"Maximum request body size 10 exceeded, \"",
                "// Line 1744:             \"actual body size 1024\" in resp_text",
                "// Line 1745:         )",
                "// Line 1746:         data[\"file\"].close()",
                "// Line 1747: ",
                "// vulnerable line: 1748: await resp.release()",
                "// Line 1749: ",
                "// Line 1750: ",
                "// Line 1751: async def test_post_max_client_size_for_file(aiohttp_client) -> None:",
                "// vulnerable line: 1752: async def handler(request):",
                "// Line 1753:         await request.post()",
                "// vulnerable line: 1754: return web.Response()",
                "// Line 1755: ",
                "// Line 1756:     app = web.Application(client_max_size=2)",
                "// vulnerable line: 1757: app.router.add_post(\"/\", handler)",
                "// vulnerable line: 1758: client = await aiohttp_client(app)",
                "// Line 1759: ",
                "// Line 1760:     with io.BytesIO(b\"test\") as file_handle:",
                "// Line 1761:         data = {\"file\": file_handle}",
                "// Line 1762:         resp = await client.post(\"/\", data=data)",
                "// Line 1763: ",
                "// Line 1764:     assert 413 == resp.status",
                "// Line 1765: ",
                "// vulnerable line: 1766: await resp.release()",
                "// Line 1767: ",
                "// Line 1768: ",
                "// Line 1769: async def test_response_with_bodypart(aiohttp_client) -> None:",
                "// vulnerable line: 1770: async def handler(request):",
                "// Line 1771:         reader = await request.multipart()",
                "// Line 1772:         part = await reader.next()",
                "// Line 1773:         return web.Response(body=part)",
                "// Line 1774: ",
                "// Line 1775:     app = web.Application(client_max_size=2)",
                "// vulnerable line: 1776: app.router.add_post(\"/\", handler)",
                "// vulnerable line: 1777: client = await aiohttp_client(app)",
                "// Line 1778: ",
                "// Line 1779:     with io.BytesIO(b\"test\") as file_handle:",
                "// Line 1780:         data = {\"file\": file_handle}",
                "// Line 1781:         resp = await client.post(\"/\", data=data)",
                "// Line 1782: ",
                "// vulnerable line: 1783: assert 200 == resp.status",
                "// Line 1784:         body = await resp.read()",
                "// Line 1785:         assert body == b\"test\"",
                "// Line 1786: ",
                "// Line 1787:         disp = multipart.parse_content_disposition(resp.headers[\"content-disposition\"])",
                "// Line 1788:         assert disp == (\"attachment\", {\"name\": \"file\", \"filename\": \"file\"})",
                "// Line 1789: ",
                "// vulnerable line: 1790: await resp.release()",
                "// Line 1791: ",
                "// Line 1792: ",
                "// Line 1793: async def test_response_with_bodypart_named(aiohttp_client, tmp_path) -> None:",
                "// vulnerable line: 1794: async def handler(request):",
                "// Line 1795:         reader = await request.multipart()",
                "// Line 1796:         part = await reader.next()",
                "// Line 1797:         return web.Response(body=part)",
                "// Line 1798: ",
                "// Line 1799:     app = web.Application(client_max_size=2)",
                "// vulnerable line: 1800: app.router.add_post(\"/\", handler)",
                "// vulnerable line: 1801: client = await aiohttp_client(app)",
                "// Line 1802: ",
                "// Line 1803:     f = tmp_path / \"foobar.txt\"",
                "// Line 1804:     f.write_text(\"test\", encoding=\"utf8\")",
                "// Line 1805:     with f.open(\"rb\") as fd:",
                "// Line 1806:         data = {\"file\": fd}",
                "// Line 1807:         resp = await client.post(\"/\", data=data)",
                "// Line 1808: ",
                "// vulnerable line: 1809: assert 200 == resp.status",
                "// Line 1810:         body = await resp.read()",
                "// Line 1811:     assert body == b\"test\"",
                "// Line 1812: ",
                "// Line 1813:     disp = multipart.parse_content_disposition(resp.headers[\"content-disposition\"])",
                "// Line 1814:     assert disp == (\"attachment\", {\"name\": \"file\", \"filename\": \"foobar.txt\"})",
                "// Line 1815: ",
                "// vulnerable line: 1816: await resp.release()",
                "// Line 1817: ",
                "// Line 1818: ",
                "// Line 1819: async def test_response_with_bodypart_invalid_name(aiohttp_client) -> None:",
                "// vulnerable line: 1820: async def handler(request):",
                "// Line 1821:         reader = await request.multipart()",
                "// Line 1822:         part = await reader.next()",
                "// Line 1823:         return web.Response(body=part)",
                "// Line 1824: ",
                "// Line 1825:     app = web.Application(client_max_size=2)",
                "// vulnerable line: 1826: app.router.add_post(\"/\", handler)",
                "// vulnerable line: 1827: client = await aiohttp_client(app)",
                "// Line 1828: ",
                "// Line 1829:     with aiohttp.MultipartWriter() as mpwriter:",
                "// Line 1830:         mpwriter.append(b\"test\")",
                "// Line 1831:         resp = await client.post(\"/\", data=mpwriter)",
                "// Line 1832: ",
                "// vulnerable line: 1833: assert 200 == resp.status",
                "// Line 1834:     body = await resp.read()",
                "// Line 1835:     assert body == b\"test\"",
                "// Line 1836: ",
                "// Line 1837:     assert \"content-disposition\" not in resp.headers",
                "// Line 1838: ",
                "// vulnerable line: 1839: await resp.release()",
                "// Line 1840: ",
                "// Line 1841: ",
                "// Line 1842: async def test_request_clone(aiohttp_client) -> None:",
                "// vulnerable line: 1843: async def handler(request):",
                "// Line 1844:         r2 = request.clone(method=\"POST\")",
                "// Line 1845:         assert r2.method == \"POST\"",
                "// Line 1846:         assert r2.match_info is request.match_info",
                "// vulnerable line: 1847: return web.Response()",
                "// Line 1848: ",
                "// vulnerable line: 1849: app = web.Application()",
                "// Line 1850:     app.router.add_get(\"/\", handler)",
                "// vulnerable line: 1851: client = await aiohttp_client(app)",
                "// Line 1852: ",
                "// Line 1853:     resp = await client.get(\"/\")",
                "// vulnerable line: 1854: assert 200 == resp.status",
                "// vulnerable line: 1855: await resp.release()",
                "// Line 1856: ",
                "// Line 1857: ",
                "// Line 1858: async def test_await(aiohttp_server) -> None:",
                "// vulnerable line: 1859: async def handler(request):",
                "// Line 1860:         resp = web.StreamResponse(headers={\"content-length\": str(4)})",
                "// Line 1861:         await resp.prepare(request)",
                "// Line 1862:         with pytest.deprecated_call(",
                "// Line 1863:             match=r\"^drain method is deprecated, use await resp\\.write\\(\\)$\",",
                "// Line 1864:         ):",
                "// Line 1865:             await resp.drain()",
                "// Line 1866:         await asyncio.sleep(0.01)",
                "// Line 1867:         await resp.write(b\"test\")",
                "// Line 1868:         await asyncio.sleep(0.01)",
                "// Line 1869:         await resp.write_eof()",
                "// Line 1870:         return resp",
                "// Line 1871: ",
                "// vulnerable line: 1872: app = web.Application()",
                "// Line 1873:     app.router.add_route(\"GET\", \"/\", handler)",
                "// Line 1874:     server = await aiohttp_server(app)",
                "// Line 1875: ",
                "// Line 1876:     async with aiohttp.ClientSession() as session:",
                "// Line 1877:         resp = await session.get(server.make_url(\"/\"))",
                "// Line 1878:         assert resp.status == 200",
                "// Line 1879:         assert resp.connection is not None",
                "// Line 1880:         await resp.read()",
                "// vulnerable line: 1881: await resp.release()",
                "// Line 1882:         assert resp.connection is None",
                "// Line 1883: ",
                "// Line 1884: ",
                "// Line 1885: async def test_response_context_manager(aiohttp_server) -> None:",
                "// vulnerable line: 1886: async def handler(request):",
                "// vulnerable line: 1887: return web.Response()",
                "// Line 1888: ",
                "// vulnerable line: 1889: app = web.Application()",
                "// Line 1890:     app.router.add_route(\"GET\", \"/\", handler)",
                "// Line 1891:     server = await aiohttp_server(app)",
                "// Line 1892:     session = aiohttp.ClientSession()",
                "// Line 1893:     resp = await session.get(server.make_url(\"/\"))",
                "// Line 1894:     async with resp:",
                "// Line 1895:         assert resp.status == 200",
                "// Line 1896:     assert resp.connection is None",
                "// Line 1897: ",
                "// Line 1898:     await session.close()",
                "// Line 1899: ",
                "// Line 1900: ",
                "// Line 1901: async def test_response_context_manager_error(aiohttp_server) -> None:",
                "// vulnerable line: 1902: async def handler(request):",
                "// Line 1903:         return web.Response(text=\"some text\")",
                "// Line 1904: ",
                "// vulnerable line: 1905: app = web.Application()",
                "// Line 1906:     app.router.add_route(\"GET\", \"/\", handler)",
                "// Line 1907:     server = await aiohttp_server(app)",
                "// Line 1908:     session = aiohttp.ClientSession()",
                "// Line 1909:     cm = session.get(server.make_url(\"/\"))",
                "// Line 1910:     resp = await cm",
                "// Line 1911:     with pytest.raises(RuntimeError):",
                "// Line 1912:         async with resp:",
                "// Line 1913:             assert resp.status == 200",
                "// Line 1914:             resp.content.set_exception(RuntimeError())",
                "// Line 1915:             await resp.read()",
                "// Line 1916:     assert resp.closed",
                "// Line 1917: ",
                "// Line 1918:     assert len(session._connector._conns) == 1",
                "// Line 1919: ",
                "// Line 1920:     await session.close()",
                "// Line 1921: ",
                "// Line 1922: ",
                "// Line 1923: async def aiohttp_client_api_context_manager(aiohttp_server):",
                "// vulnerable line: 1924: async def handler(request):",
                "// vulnerable line: 1925: return web.Response()",
                "// Line 1926: ",
                "// vulnerable line: 1927: app = web.Application()",
                "// Line 1928:     app.router.add_route(\"GET\", \"/\", handler)",
                "// Line 1929:     server = await aiohttp_server(app)",
                "// Line 1930: ",
                "// Line 1931:     async with aiohttp.ClientSession() as session:",
                "// Line 1932:         async with session.get(server.make_url(\"/\")) as resp:",
                "// Line 1933:             assert resp.status == 200",
                "// Line 1934:             assert resp.connection is None",
                "// Line 1935:     assert resp.connection is None",
                "// Line 1936: ",
                "// Line 1937: ",
                "// Line 1938: async def test_context_manager_close_on_release(aiohttp_server, mocker) -> None:",
                "// vulnerable line: 1939: async def handler(request):",
                "// Line 1940:         resp = web.StreamResponse()",
                "// Line 1941:         await resp.prepare(request)",
                "// Line 1942:         with pytest.deprecated_call(",
                "// Line 1943:             match=r\"^drain method is deprecated, use await resp\\.write\\(\\)$\",",
                "// Line 1944:         ):",
                "// Line 1945:             await resp.drain()",
                "// Line 1946:         await asyncio.sleep(10)",
                "// Line 1947:         return resp",
                "// Line 1948: ",
                "// vulnerable line: 1949: app = web.Application()",
                "// Line 1950:     app.router.add_route(\"GET\", \"/\", handler)",
                "// Line 1951:     server = await aiohttp_server(app)",
                "// Line 1952: ",
                "// Line 1953:     async with aiohttp.ClientSession() as session:",
                "// Line 1954:         resp = await session.get(server.make_url(\"/\"))",
                "// Line 1955:         proto = resp.connection._protocol",
                "// Line 1956:         mocker.spy(proto, \"close\")",
                "// Line 1957:         async with resp:",
                "// Line 1958:             assert resp.status == 200",
                "// Line 1959:             assert resp.connection is not None",
                "// Line 1960:         assert resp.connection is None",
                "// Line 1961:         assert proto.close.called",
                "// Line 1962: ",
                "// Line 1963:         await resp.release()  # Trigger handler completion",
                "// Line 1964: ",
                "// Line 1965: ",
                "// Line 1966: async def test_iter_any(aiohttp_server) -> None:",
                "// Line 1967: ",
                "// Line 1968:     data = b\"0123456789\" * 1024",
                "// Line 1969: ",
                "// vulnerable line: 1970: async def handler(request):",
                "// Line 1971:         buf = []",
                "// Line 1972:         async for raw in request.content.iter_any():",
                "// Line 1973:             buf.append(raw)",
                "// Line 1974:         assert b\"\".join(buf) == data",
                "// vulnerable line: 1975: return web.Response()",
                "// Line 1976: ",
                "// vulnerable line: 1977: app = web.Application()",
                "// Line 1978:     app.router.add_route(\"POST\", \"/\", handler)",
                "// Line 1979:     server = await aiohttp_server(app)",
                "// Line 1980: ",
                "// Line 1981:     async with aiohttp.ClientSession() as session:",
                "// Line 1982:         async with session.post(server.make_url(\"/\"), data=data) as resp:",
                "// Line 1983:             assert resp.status == 200",
                "// Line 1984: ",
                "// Line 1985: ",
                "// Line 1986: async def test_request_tracing(aiohttp_server) -> None:",
                "// Line 1987: ",
                "// Line 1990:     on_dns_resolvehost_start = mock.Mock(side_effect=make_mocked_coro(mock.Mock()))",
                "// Line 1991:     on_dns_resolvehost_end = mock.Mock(side_effect=make_mocked_coro(mock.Mock()))",
                "// Line 1992:     on_request_redirect = mock.Mock(side_effect=make_mocked_coro(mock.Mock()))",
                "// Line 1993:     on_connection_create_start = mock.Mock(side_effect=make_mocked_coro(mock.Mock()))",
                "// Line 1994:     on_connection_create_end = mock.Mock(side_effect=make_mocked_coro(mock.Mock()))",
                "// Line 1995: ",
                "// Line 1996:     async def redirector(request):",
                "// Line 1997:         raise web.HTTPFound(location=URL(\"/redirected\"))",
                "// Line 1998: ",
                "// Line 1999:     async def redirected(request):",
                "// vulnerable line: 2000: return web.Response()",
                "// Line 2001: ",
                "// Line 2002:     trace_config = TraceConfig()",
                "// Line 2003: ",
                "// Line 2004:     trace_config.on_request_start.append(on_request_start)",
                "// Line 2005:     trace_config.on_request_end.append(on_request_end)",
                "// Line 2006:     trace_config.on_request_redirect.append(on_request_redirect)",
                "// Line 2007:     trace_config.on_connection_create_start.append(on_connection_create_start)",
                "// Line 2008:     trace_config.on_connection_create_end.append(on_connection_create_end)",
                "// Line 2009:     trace_config.on_dns_resolvehost_start.append(on_dns_resolvehost_start)",
                "// Line 2010:     trace_config.on_dns_resolvehost_end.append(on_dns_resolvehost_end)",
                "// Line 2011: ",
                "// vulnerable line: 2012: app = web.Application()",
                "// Line 2013:     app.router.add_get(\"/redirector\", redirector)",
                "// Line 2014:     app.router.add_get(\"/redirected\", redirected)",
                "// Line 2015:     server = await aiohttp_server(app)",
                "// Line 2016: ",
                "// Line 2017:     class FakeResolver:",
                "// Line 2018:         _LOCAL_HOST = {0: \"127.0.0.1\", socket.AF_INET: \"127.0.0.1\"}",
                "// Line 2019: ",
                "// Line 2020:         def __init__(self, fakes):",
                "// Line 2021:             # fakes -- dns -> port dict",
                "// Line 2022:             self._fakes = fakes",
                "// Line 2045:     resp = await client.get(\"http://example.com/redirector\", data=\"foo\")",
                "// Line 2046: ",
                "// Line 2047:     assert on_request_start.called",
                "// Line 2048:     assert on_request_end.called",
                "// Line 2049:     assert on_dns_resolvehost_start.called",
                "// Line 2050:     assert on_dns_resolvehost_end.called",
                "// Line 2051:     assert on_request_redirect.called",
                "// Line 2052:     assert on_connection_create_start.called",
                "// Line 2053:     assert on_connection_create_end.called",
                "// Line 2054: ",
                "// vulnerable line: 2055: await resp.release()",
                "// Line 2056:     await client.close()",
                "// Line 2057: ",
                "// Line 2058: ",
                "// Line 2059: async def test_return_http_exception_deprecated(aiohttp_client) -> None:",
                "// vulnerable line: 2060: async def handler(request):",
                "// Line 2061:         return web.HTTPForbidden()",
                "// Line 2062: ",
                "// vulnerable line: 2063: app = web.Application()",
                "// Line 2064:     app.router.add_route(\"GET\", \"/\", handler)",
                "// vulnerable line: 2065: client = await aiohttp_client(app)",
                "// Line 2066: ",
                "// Line 2067:     with pytest.warns(DeprecationWarning):",
                "// Line 2068:         await client.get(\"/\")",
                "// Line 2069: ",
                "// Line 2070: ",
                "// Line 2071: async def test_request_path(aiohttp_client) -> None:",
                "// vulnerable line: 2072: async def handler(request):",
                "// Line 2073:         assert request.path_qs == \"/path%20to?a=1\"",
                "// Line 2074:         assert request.path == \"/path to\"",
                "// Line 2075:         assert request.raw_path == \"/path%20to?a=1\"",
                "// Line 2076:         return web.Response(body=b\"OK\")",
                "// Line 2077: ",
                "// vulnerable line: 2078: app = web.Application()",
                "// Line 2079:     app.router.add_get(\"/path to\", handler)",
                "// vulnerable line: 2080: client = await aiohttp_client(app)",
                "// Line 2081: ",
                "// Line 2082:     resp = await client.get(\"/path to\", params={\"a\": \"1\"})",
                "// vulnerable line: 2083: assert 200 == resp.status",
                "// Line 2084:     txt = await resp.text()",
                "// Line 2085:     assert \"OK\" == txt",
                "// vulnerable line: 2086: await resp.release()",
                "// Line 2087: ",
                "// Line 2088: ",
                "// Line 2089: async def test_app_add_routes(aiohttp_client) -> None:",
                "// vulnerable line: 2090: async def handler(request):",
                "// vulnerable line: 2091: return web.Response()",
                "// Line 2092: ",
                "// vulnerable line: 2093: app = web.Application()",
                "// Line 2094:     app.add_routes([web.get(\"/get\", handler)])",
                "// Line 2095: ",
                "// vulnerable line: 2096: client = await aiohttp_client(app)",
                "// Line 2097:     resp = await client.get(\"/get\")",
                "// Line 2098:     assert resp.status == 200",
                "// vulnerable line: 2099: await resp.release()",
                "// Line 2100: ",
                "// Line 2101: ",
                "// Line 2102: async def test_request_headers_type(aiohttp_client) -> None:",
                "// vulnerable line: 2103: async def handler(request):",
                "// Line 2104:         assert isinstance(request.headers, CIMultiDictProxy)",
                "// vulnerable line: 2105: return web.Response()",
                "// Line 2106: ",
                "// vulnerable line: 2107: app = web.Application()",
                "// Line 2108:     app.add_routes([web.get(\"/get\", handler)])",
                "// Line 2109: ",
                "// vulnerable line: 2110: client = await aiohttp_client(app)",
                "// Line 2111:     resp = await client.get(\"/get\")",
                "// Line 2112:     assert resp.status == 200",
                "// vulnerable line: 2113: await resp.release()",
                "// Line 2114: ",
                "// Line 2115: ",
                "// Line 2116: async def test_signal_on_error_handler(aiohttp_client) -> None:",
                "// Line 2117:     async def on_prepare(request, response):",
                "// Line 2118:         response.headers[\"X-Custom\"] = \"val\"",
                "// Line 2119: ",
                "// vulnerable line: 2120: app = web.Application()",
                "// Line 2121:     app.on_response_prepare.append(on_prepare)",
                "// Line 2122: ",
                "// vulnerable line: 2123: client = await aiohttp_client(app)",
                "// Line 2124:     resp = await client.get(\"/\")",
                "// Line 2125:     assert resp.status == 404",
                "// Line 2126:     assert resp.headers[\"X-Custom\"] == \"val\"",
                "// vulnerable line: 2127: await resp.release()",
                "// Line 2128: ",
                "// Line 2129: ",
                "// Line 2130: @pytest.mark.skipif(",
                "// Line 2131:     \"HttpRequestParserC\" not in dir(aiohttp.http_parser),",
                "// Line 2132:     reason=\"C based HTTP parser not available\",",
                "// Line 2133: )",
                "// Line 2134: async def test_bad_method_for_c_http_parser_not_hangs(aiohttp_client) -> None:",
                "// vulnerable line: 2135: app = web.Application()",
                "// Line 2136:     timeout = aiohttp.ClientTimeout(sock_read=0.2)",
                "// Line 2137:     client = await aiohttp_client(app, timeout=timeout)",
                "// Line 2138:     resp = await client.request(\"GET1\", \"/\")",
                "// Line 2139:     assert 400 == resp.status",
                "// Line 2140: ",
                "// Line 2141: ",
                "// Line 2142: async def test_read_bufsize(aiohttp_client) -> None:",
                "// vulnerable line: 2143: async def handler(request):",
                "// Line 2144:         ret = request.content.get_read_buffer_limits()",
                "// Line 2145:         data = await request.text()  # read posted data",
                "// Line 2146:         return web.Response(text=f\"{data} {ret!r}\")",
                "// Line 2147: ",
                "// Line 2148:     app = web.Application(handler_args={\"read_bufsize\": 2})",
                "// vulnerable line: 2149: app.router.add_post(\"/\", handler)",
                "// Line 2150: ",
                "// vulnerable line: 2151: client = await aiohttp_client(app)",
                "// Line 2152:     resp = await client.post(\"/\", data=b\"data\")",
                "// Line 2153:     assert resp.status == 200",
                "// Line 2154:     assert await resp.text() == \"data (2, 4)\"",
                "// vulnerable line: 2155: await resp.release()",
                "// Line 2156: ",
                "// Line 2157: ",
                "// Line 2158: @pytest.mark.parametrize(",
                "// Line 2159:     \"auto_decompress,len_of\", [(True, \"uncompressed\"), (False, \"compressed\")]",
                "// Line 2160: )",
                "// Line 2161: async def test_auto_decompress(",
                "// Line 2162:     aiohttp_client,",
                "// Line 2163:     auto_decompress,",
                "// Line 2164:     len_of,",
                "// Line 2165: ) -> None:",
                "// vulnerable line: 2166: async def handler(request):",
                "// Line 2167:         data = await request.read()",
                "// Line 2168:         return web.Response(text=str(len(data)))",
                "// Line 2169: ",
                "// Line 2170:     app = web.Application(handler_args={\"auto_decompress\": auto_decompress})",
                "// vulnerable line: 2171: app.router.add_post(\"/\", handler)",
                "// Line 2172: ",
                "// vulnerable line: 2173: client = await aiohttp_client(app)",
                "// Line 2174:     uncompressed = b\"dataaaaaaaaaaaaaaaaaaaaaaaaa\"",
                "// Line 2175:     compressor = zlib.compressobj(wbits=16 + zlib.MAX_WBITS)",
                "// Line 2176:     compressed = compressor.compress(uncompressed) + compressor.flush()",
                "// Line 2177:     assert len(compressed) != len(uncompressed)",
                "// Line 2178:     headers = {\"content-encoding\": \"gzip\"}",
                "// Line 2179:     resp = await client.post(\"/\", data=compressed, headers=headers)",
                "// Line 2180:     assert resp.status == 200",
                "// Line 2181:     assert await resp.text() == str(len(locals()[len_of]))",
                "// vulnerable line: 2182: await resp.release()",
                "// Line 2183: ",
                "// Line 2184: ",
                "// Line 2185: @pytest.mark.parametrize(",
                "// Line 2186:     \"status\",",
                "// Line 2187:     [101, 204],",
                "// Line 2188: )",
                "// Line 2189: async def test_response_101_204_no_content_length_http11(",
                "// Line 2190:     status, aiohttp_client",
                "// Line 2191: ) -> None:",
                "// Line 2192:     async def handler(_):",
                "// Line 2193:         return web.Response(status=status)",
                "// Line 2194: ",
                "// vulnerable line: 2195: app = web.Application()",
                "// Line 2196:     app.router.add_get(\"/\", handler)",
                "// Line 2197:     client = await aiohttp_client(app, version=\"1.1\")",
                "// Line 2198:     resp = await client.get(\"/\")",
                "// Line 2199:     assert CONTENT_LENGTH not in resp.headers",
                "// Line 2200:     assert TRANSFER_ENCODING not in resp.headers",
                "// vulnerable line: 2201: await resp.release()",
                "// Line 2202: ",
                "// Line 2203: ",
                "// Line 2204: async def test_stream_response_headers_204(aiohttp_client):",
                "// Line 2205:     async def handler(_):",
                "// Line 2206:         return web.StreamResponse(status=204)",
                "// Line 2207: ",
                "// vulnerable line: 2208: app = web.Application()",
                "// Line 2209:     app.router.add_get(\"/\", handler)",
                "// vulnerable line: 2210: client = await aiohttp_client(app)",
                "// Line 2211:     resp = await client.get(\"/\")",
                "// Line 2212:     assert CONTENT_TYPE not in resp.headers",
                "// Line 2213:     assert TRANSFER_ENCODING not in resp.headers",
                "// vulnerable line: 2214: await resp.release()",
                "// Line 2215: ",
                "// Line 2216: ",
                "// Line 2217: async def test_httpfound_cookies_302(aiohttp_client: Any) -> None:",
                "// Line 2218:     async def handler(_):",
                "// Line 2219:         resp = web.HTTPFound(\"/\")",
                "// Line 2220:         resp.set_cookie(\"my-cookie\", \"cookie-value\")",
                "// Line 2221:         raise resp",
                "// Line 2222: ",
                "// vulnerable line: 2223: app = web.Application()",
                "// Line 2224:     app.router.add_get(\"/\", handler)",
                "// vulnerable line: 2225: client = await aiohttp_client(app)",
                "// Line 2226: ",
                "// Line 2227:     resp = await client.get(\"/\", allow_redirects=False)",
                "// Line 2228:     assert \"my-cookie\" in resp.cookies",
                "// vulnerable line: 2229: await resp.release()",
                "// Line 2230: ",
                "// Line 2231: ",
                "// Line 2232: @pytest.mark.parametrize(\"status\", (101, 204, 304))",
                "// Line 2233: @pytest.mark.parametrize(\"version\", (HttpVersion10, HttpVersion11))",
                "// Line 2234: async def test_no_body_for_1xx_204_304_responses(",
                "// Line 2235:     aiohttp_client: Any, status: int, version: HttpVersion",
                "// Line 2236: ) -> None:",
                "// Line 2237:     \"\"\"Test no body is present for for 1xx, 204, and 304 responses.\"\"\"",
                "// Line 2238: ",
                "// Line 2239:     async def handler(_):",
                "// Line 2240:         return web.Response(status=status, body=b\"should not get to client\")",
                "// Line 2241: ",
                "// vulnerable line: 2242: app = web.Application()",
                "// Line 2243:     app.router.add_get(\"/\", handler)",
                "// Line 2244:     client = await aiohttp_client(app, version=version)",
                "// Line 2245:     resp = await client.get(\"/\")",
                "// Line 2246:     assert CONTENT_TYPE not in resp.headers",
                "// Line 2247:     assert TRANSFER_ENCODING not in resp.headers",
                "// Line 2248:     await resp.read() == b\"\"",
                "// vulnerable line: 2249: await resp.release()"
            ]
        }
    ]
}