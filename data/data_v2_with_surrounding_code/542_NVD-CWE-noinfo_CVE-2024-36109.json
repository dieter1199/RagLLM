{
    "cve_id": "CVE-2024-36109",
    "cve_description": "CoCalc is web-based software that enables collaboration in research, teaching, and scientific publishing. In affected versions the markdown parser allows `<script>` tags to be included which execute when published. This issue has been addressed in commit `419862a9c9879c`. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "cve_publish_date": "2024-05-28T19:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fix XSS with Markdown on share server vulnerability\n\n- https://github.com/sagemathinc/cocalc/security/advisories/GHSA-8w44-hggw-p5rf\n- this removes some math rendering support and may cause \"user\n  frustration\", but it is worth it and the right thing to do.",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "html-ssr.tsx",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "8",
            "number_of_lines_deleted_vulnerable_to_cve": "12",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 34:   // - stripIgnoreTagBody - completely get rid of dangerous HTML",
                "// Line 35:   //   (otherwise user sees weird mangled style code, when seeing",
                "// Line 36:   //   nothing would be better).",
                "// Line 37:   // - whiteList - we need iframes, though we lock them down as",
                "// Line 38:   //   much as possible, while still supporting 3d graphics.",
                "// Line 39:   return {",
                "// Line 40:     stripIgnoreTagBody: true,",
                "// Line 41:     whiteList: {",
                "// Line 42:       ...whiteList,",
                "// Line 43:       iframe: [\"src\", \"srcdoc\", \"width\", \"height\"],",
                "// vulnerable line: 44: script: [\"type\"],",
                "// Line 45:       html: [],",
                "// Line 46:     },",
                "// Line 47:     safeAttrValue: (tag, name, value) => {",
                "// Line 48:       if (tag == \"iframe\" && name == \"srcdoc\") {",
                "// Line 49:         // important not to mangle this or it won't work.",
                "// Line 50:         return value;",
                "// vulnerable line: 51: }",
                "// vulnerable line: 52: if (tag == \"script\" && name == \"type\") {",
                "// vulnerable line: 53: if (value.toLowerCase().startsWith(\"math/tex\")) {",
                "// vulnerable line: 54: if (value.includes(\"display\")) {",
                "// vulnerable line: 55: return \"math/tex; mode=display\";",
                "// vulnerable line: 56: } else {",
                "// vulnerable line: 57: return \"math/tex\";",
                "// vulnerable line: 58: }",
                "// vulnerable line: 59: }",
                "// vulnerable line: 60: return \"\";",
                "// vulnerable line: 61: }",
                "// Line 62:       if (urlTransform && URL_TAGS.includes(name)) {",
                "// Line 63:         // use the url transform",
                "// Line 64:         return urlTransform(value, tag, name) ?? value;",
                "// vulnerable line: 65: }",
                "// Line 66:       // fallback to the builtin version",
                "// Line 67:       return safeAttrValue(tag, name, value, false as any);",
                "// Line 68:     },",
                "// Line 69:   };",
                "// vulnerable line: 70: }",
                "// Line 71: ",
                "// Line 72: export default function HTML({",
                "// Line 73:   value,",
                "// Line 74:   style,",
                "// Line 75:   inline,",
                "// Line 76: }: {",
                "// Line 77:   value: string;",
                "// Line 78:   style?: React.CSSProperties;",
                "// Line 79:   inline?: boolean;",
                "// Line 80: }) {",
                "// Line 81:   const { urlTransform, AnchorTagComponent, noSanitize, MathComponent } =",
                "// Line 82:     useFileContext();",
                "// Line 83:   if (!noSanitize) {",
                "// Line 84:     value = stripXSS(value, getXSSOptions(urlTransform));",
                "// vulnerable line: 85: }",
                "// Line 86:   if (value.trimLeft().startsWith(\"<html>\")) {",
                "// Line 87:     // Sage output formulas are wrapped in \"<html>\" for some stupid reason, which",
                "// Line 88:     // probably originates with a ridiculous design choice that Tom Boothby or I",
                "// Line 89:     // made in 2006 related to \"wiki\" formatting in Sage notebooks.  If we don't strip",
                "// Line 90:     // this, then htmlReactParser just deletes the whole documents, since html is",
                "// Line 91:     // not a valid tag inside the DOM.  We do this in a really minimally flexible way",
                "// Line 92:     // to reduce the chances to 0 that we apply this when we shouldn't.",
                "// Line 93:     value = value.trim().slice(\"<html>\".length, -\"</html>\".length);",
                "// vulnerable line: 94: }",
                "// Line 95:   let options: any = {};",
                "// Line 96:   options.replace = (domNode) => {",
                "// Line 97:     // console.log(\"domNode = \", domNode);",
                "// Line 98:     if (!/^[a-zA-Z]+[0-9]?$/.test(domNode.name)) {",
                "// Line 99:       // Without this, if user gives html input that is a malformed tag then all of React",
                "// Line 100:       // completely crashes, which is not desirable for us.  On the other hand, I prefer not",
                "// Line 101:       // to always completely sanitize input, since that can do a lot we don't want to do",
                "// Line 102:       // and may be expensive. See",
                "// Line 103:       //   https://github.com/remarkablemark/html-react-parser/issues/60#issuecomment-398588573",
                "// Line 104:       return React.createElement(React.Fragment);",
                "// vulnerable line: 105: }",
                "// Line 106:     if (domNode instanceof Text) {",
                "// Line 107:       if (hasAncestor(domNode, MATH_SKIP_TAGS)) {",
                "// Line 108:         // Do NOT convert Text to math inside a pre/code tree environment.",
                "// Line 109:         return;",
                "// vulnerable line: 110: }",
                "// Line 111:       const { data } = domNode;",
                "// Line 112:       if (MathComponent != null) {",
                "// Line 113:         return <MathComponent data={decodeHTML(data)} />;",
                "// vulnerable line: 114: }",
                "// Line 115:       return <DefaultMath data={decodeHTML(data)} />;",
                "// vulnerable line: 116: }",
                "// Line 117: ",
                "// Line 118:     if (!(domNode instanceof Element)) return;",
                "// Line 119: ",
                "// Line 120:     const { name, children, attribs } = domNode;",
                "// Line 121: ",
                "// Line 122:     if (name == \"script\") {",
                "// Line 123:       const type = domNode.attribs?.type?.toLowerCase();",
                "// Line 124:       if (type?.startsWith(\"math/tex\")) {",
                "// Line 125:         const child = domNode.children?.[0];",
                "// Line 126:         if (child instanceof Text && child.data) {",
                "// Line 127:           let data = \"$\" + decodeHTML(child.data) + \"$\";",
                "// Line 128:           if (type.includes(\"display\")) {",
                "// Line 129:             data = \"$\" + data + \"$\";",
                "// vulnerable line: 130: }",
                "// Line 131:           if (MathComponent != null) {",
                "// Line 132:             return <MathComponent data={data} />;",
                "// vulnerable line: 133: }",
                "// Line 134:           return <DefaultMath data={data} />;",
                "// vulnerable line: 135: }",
                "// vulnerable line: 136: }",
                "// vulnerable line: 137: }",
                "// Line 138: ",
                "// Line 139:     if (AnchorTagComponent != null && name == \"a\") {",
                "// Line 140:       return (",
                "// Line 141:         <AnchorTagComponent {...attribs}>",
                "// Line 142:           {domToReact(children, options)}",
                "// Line 143:         </AnchorTagComponent>",
                "// Line 144:       );",
                "// vulnerable line: 145: }",
                "// Line 146:     if (name == \"iframe\") {",
                "// Line 147:       // We sandbox and minimize what we allow.  Don't",
                "// Line 148:       // use {...attribs} due to srcDoc vs srcdoc.",
                "// Line 149:       // We don't allow setting the style, since that leads",
                "// Line 150:       // to a lot of attacks (i.e., making the iframe move in a",
                "// Line 151:       // sneaky way).  We have to allow-same-origin or scripts",
                "// Line 152:       // won't work at all, which is one of the main uses for",
                "// Line 153:       // iframes.  A good test is 3d graphics in Sage kernel",
                "// Line 154:       // Jupyter notebooks.",
                "// Line 155:       // TODO: Except this is a security issue, since",
                "// Line 157:       // possible to remove a lot of sandboxing.",
                "// Line 158:       return (",
                "// Line 159:         <iframe",
                "// Line 160:           src={attribs.src}",
                "// Line 161:           srcDoc={attribs.srcdoc}",
                "// Line 162:           width={attribs.width}",
                "// Line 163:           height={attribs.height}",
                "// Line 164:           sandbox=\"allow-forms allow-scripts allow-same-origin\"",
                "// Line 165:         />",
                "// Line 166:       );",
                "// vulnerable line: 167: }",
                "// Line 168: ",
                "// Line 169:     if (noSanitize && urlTransform != null && attribs != null) {",
                "// Line 170:       // since we did not sanitize the HTML (which also does urlTransform),",
                "// Line 171:       // we have to do the urlTransform here instead.",
                "// Line 172:       for (const tag of URL_TAGS) {",
                "// Line 173:         if (attribs[tag] != null) {",
                "// Line 174:           const x = urlTransform(attribs[tag]);",
                "// Line 175:           if (x != null) {",
                "// Line 176:             const props = attributesToProps(attribs);",
                "// Line 177:             props[tag] = x;",
                "// Line 178:             return React.createElement(",
                "// Line 179:               name,",
                "// Line 180:               props,",
                "// Line 181:               children && children?.length > 0",
                "// Line 182:                 ? domToReact(children, options)",
                "// vulnerable line: 183: : undefined",
                "// Line 184:             );",
                "// vulnerable line: 185: }",
                "// vulnerable line: 186: }",
                "// vulnerable line: 187: }",
                "// vulnerable line: 188: }",
                "// Line 189:   };",
                "// Line 190:   if (inline) {",
                "// Line 191:     return <span style={style}>{htmlReactParser(value, options)}</span>;",
                "// vulnerable line: 192: } else {",
                "// Line 193:     return <div style={style}>{htmlReactParser(value, options)}</div>;",
                "// vulnerable line: 194: }",
                "// vulnerable line: 195: }",
                "// Line 196: ",
                "// Line 197: function hasAncestor(domNode, tags: Set<string>): boolean {",
                "// Line 198:   const { parent } = domNode;",
                "// Line 199:   if (!(parent instanceof Element)) return false;",
                "// Line 200:   if (tags.has(parent.name)) return true;",
                "// Line 201:   return hasAncestor(parent, tags);",
                "// vulnerable line: 202: }"
            ]
        }
    ]
}