{
    "cve_id": "CVE-2024-25117",
    "cve_description": "php-svg-lib is a scalable vector graphics (SVG) file parsing/rendering library. Prior to version 0.5.2, php-svg-lib fails to validate that font-family doesn't contain a PHAR url, which might leads to RCE on PHP < 8.0, and doesn't validate if external references are allowed. This might leads to bypass of restrictions or RCE on projects that are using it, if they do not strictly revalidate the fontName that is passed by php-svg-lib. The `Style::fromAttributes(`), or the `Style::parseCssStyle()` should check the content of the `font-family` and prevents it to use a PHAR url, to avoid passing an invalid and dangerous `fontName` value to other libraries. The same check as done in the `Style::fromStyleSheets` might be reused. Libraries using this library as a dependency might be vulnerable to some bypass of restrictions, or even remote code execution, if they do not double check the value of the `fontName` that is passed by php-svg-lib. Version 0.5.2 contains a fix for this issue.",
    "cve_publish_date": "2024-02-21T17:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Update resource validation logic\n\nThe previous logic did not validate the font-family when set by attribute. To accommodate style validation across all sources the Style class now accepts the Document during construction so that it has access to the allowExternalReferences property regardless of style source.",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "AbstractTag.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 112:     }",
                "// Line 113: ",
                "// Line 114:     /**",
                "// Line 115:      * Make a style object from the tag and its attributes",
                "// Line 116:      *",
                "// Line 117:      * @param array $attributes",
                "// Line 118:      *",
                "// Line 119:      * @return Style",
                "// Line 120:      */",
                "// Line 121:     protected function makeStyle($attributes) {",
                "// vulnerable line: 122: $style = new Style();",
                "// Line 123:         $style->inherit($this);",
                "// Line 124:         $style->fromStyleSheets($this, $attributes);",
                "// Line 125:         $style->fromAttributes($attributes);",
                "// Line 126: ",
                "// Line 127:         return $style;",
                "// Line 128:     }",
                "// Line 129: ",
                "// Line 130:     protected function applyTransform($attributes)",
                "// Line 131:     {",
                "// Line 132: "
            ]
        },
        {
            "filename_of_changes": "Document.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 195:      * @return \\Sabberworm\\CSS\\CSSList\\Document[]",
                "// Line 196:      */",
                "// Line 197:     public function getStyleSheets() {",
                "// Line 198:         return $this->styleSheets;",
                "// Line 199:     }",
                "// Line 200: ",
                "// Line 201:     protected function before($attributes)",
                "// Line 202:     {",
                "// Line 203:         $surface = $this->getSurface();",
                "// Line 204: ",
                "// vulnerable line: 205: $style = new DefaultStyle();",
                "// Line 206:         $style->inherit($this);",
                "// Line 207:         $style->fromAttributes($attributes);",
                "// Line 208: ",
                "// Line 209:         $this->setStyle($style);",
                "// Line 210: ",
                "// Line 211:         $surface->setStyle($style);",
                "// Line 212:     }",
                "// Line 213: ",
                "// Line 214:     public function render(SurfaceInterface $surface)",
                "// Line 215:     {"
            ]
        },
        {
            "filename_of_changes": "Image.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "8",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 51:         if (isset($attributes['xlink:href'])) {",
                "// Line 52:             $this->href = $attributes['xlink:href'];",
                "// Line 53:         }",
                "// Line 54: ",
                "// Line 55:         if (isset($attributes['href'])) {",
                "// Line 56:             $this->href = $attributes['href'];",
                "// Line 57:         }",
                "// Line 58: ",
                "// Line 59:         $this->document->getSurface()->transform(1, 0, 0, -1, 0, $height);",
                "// Line 60: ",
                "// vulnerable line: 61: if (\\strtolower(\\substr($this->href, 0, 7)) === \"phar://\" || ($this->document->allowExternalReferences === false && \\strtolower(\\substr($this->href, 0, 5) !== \"data:\"))) {",
                "// vulnerable line: 62: return;",
                "// Line 63:         }",
                "// Line 64: ",
                "// Line 65:         $this->document->getSurface()->drawImage($this->href, $this->x, $this->y, $this->width, $this->height);",
                "// Line 66:     }",
                "// Line 67: ",
                "// Line 68:     protected function after()",
                "// Line 69:     {",
                "// Line 70:         $this->document->getSurface()->restore();",
                "// Line 71:     }",
                "// Line 72: } "
            ]
        },
        {
            "filename_of_changes": "Style.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "17",
            "number_of_lines_deleted_vulnerable_to_cve": "10",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 62:             'stroke-miterlimit' => array('strokeMiterlimit', self::TYPE_NUMBER),",
                "// Line 63:             'stroke-opacity'    => array('strokeOpacity', self::TYPE_NUMBER),",
                "// Line 64:             'stroke-width'      => array('strokeWidth', self::TYPE_NUMBER),",
                "// Line 65: ",
                "// Line 66:             'font-family'       => array('fontFamily', self::TYPE_NAME),",
                "// Line 67:             'font-size'         => array('fontSize', self::TYPE_NUMBER),",
                "// Line 68:             'font-weight'       => array('fontWeight', self::TYPE_NAME),",
                "// Line 69:             'font-style'        => array('fontStyle', self::TYPE_NAME),",
                "// Line 70:             'text-anchor'       => array('textAnchor', self::TYPE_NAME),",
                "// Line 71:         );",
                "// vulnerable line: 72: }",
                "// Line 73: ",
                "// Line 74:     /**",
                "// Line 75:      * @param $attributes",
                "// Line 76:      *",
                "// Line 77:      * @return Style",
                "// Line 78:      */",
                "// Line 79:     public function fromAttributes($attributes)",
                "// Line 80:     {",
                "// Line 81:         $this->fillStyles($attributes);",
                "// Line 82: ",
                "// Line 83:         if (isset($attributes[\"style\"])) {",
                "// Line 84:             $styles = self::parseCssStyle($attributes[\"style\"]);",
                "// Line 85:             $this->fillStyles($styles);",
                "// vulnerable line: 86: }",
                "// vulnerable line: 87: }",
                "// Line 88: ",
                "// Line 89:     public function inherit(AbstractTag $tag) {",
                "// Line 90:         $group = $tag->getParentGroup();",
                "// Line 91:         if ($group) {",
                "// Line 92:             $parent_style = $group->getStyle();",
                "// Line 93:             $this->_parentStyle = $parent_style;",
                "// Line 94:             foreach ($parent_style as $_key => $_value) {",
                "// Line 95:                 if ($_value !== null) {",
                "// Line 96:                     $this->$_key = $_value;",
                "// vulnerable line: 97: }",
                "// vulnerable line: 98: }",
                "// vulnerable line: 99: }",
                "// vulnerable line: 100: }",
                "// Line 101: ",
                "// Line 102:     public function fromStyleSheets(AbstractTag $tag, $attributes) {",
                "// Line 103:         $class = isset($attributes[\"class\"]) ? preg_split('/\\s+/', trim($attributes[\"class\"])) : null;",
                "// Line 104: ",
                "// Line 105:         $stylesheets = $tag->getDocument()->getStyleSheets();",
                "// Line 106: ",
                "// Line 107:         $styles = array();",
                "// Line 108: ",
                "// Line 109:         foreach ($stylesheets as $_sc) {",
                "// Line 110: ",
                "// Line 115:                 foreach ($_decl->getSelectors() as $_selector) {",
                "// Line 116:                     $_selector = $_selector->getSelector();",
                "// Line 117: ",
                "// Line 118:                     // Match class name",
                "// Line 119:                     if ($class !== null) {",
                "// Line 120:                         foreach ($class as $_class) {",
                "// Line 121:                             if ($_selector === \".$_class\") {",
                "// Line 122:                                 /** @var \\Sabberworm\\CSS\\Rule\\Rule $_rule */",
                "// Line 123:                                 foreach ($_decl->getRules() as $_rule) {",
                "// Line 124:                                     $styles[$_rule->getRule()] = $_rule->getValue() . \"\";",
                "// vulnerable line: 125: }",
                "// Line 126: ",
                "// Line 127:                                 break 2;",
                "// vulnerable line: 128: }",
                "// vulnerable line: 129: }",
                "// vulnerable line: 130: }",
                "// Line 131: ",
                "// Line 132:                     // Match tag name",
                "// Line 133:                     if ($_selector === $tag->tagName) {",
                "// Line 134:                         /** @var \\Sabberworm\\CSS\\Rule\\Rule $_rule */",
                "// Line 135:                         foreach ($_decl->getRules() as $_rule) {",
                "// Line 136:                             $styles[$_rule->getRule()] = $_rule->getValue() . \"\";",
                "// vulnerable line: 137: }",
                "// Line 138: ",
                "// Line 139:                         break;",
                "// vulnerable line: 140: }",
                "// vulnerable line: 141: }",
                "// Line 142: ",
                "// vulnerable line: 143: if (",
                "// Line 144:                     \u0007rray_key_exists(\"font-family\", $styles)",
                "// vulnerable line: 145: && (",
                "// vulnerable line: 146: \\strtolower(\\substr($this->href, 0, 7)) === \"phar://\"",
                "// vulnerable line: 147: || ($this->document->allowExternalReferences === false && \\strtolower(\\substr($this->href, 0, 5)) !== \"data:\")",
                "// vulnerable line: 148: )",
                "// vulnerable line: 149: ) {",
                "// vulnerable line: 150: unset($style[\"font-family\"]);",
                "// vulnerable line: 151: }",
                "// vulnerable line: 152: }",
                "// vulnerable line: 153: }",
                "// Line 154: ",
                "// Line 155:         $this->fillStyles($styles);",
                "// vulnerable line: 156: }",
                "// Line 157: ",
                "// Line 158:     protected function fillStyles($styles)",
                "// Line 159:     {",
                "// Line 160:         $style_map = $this->getStyleMap();",
                "// Line 161:         foreach ($style_map as $from => $spec) {",
                "// Line 162:             if (isset($styles[$from])) {",
                "// Line 163:                 list($to, $type) = $spec;",
                "// Line 164:                 $value = null;",
                "// Line 165:                 switch ($type) {",
                "// Line 166:                     case self::TYPE_COLOR:",
                "// Line 167:                         $value = self::parseColor($styles[$from]);",
                "// Line 168:                         if ($value === \"currentcolor\") {",
                "// Line 169:                             if ($type === \"color\") {",
                "// Line 170:                                 $value = $this->_parentStyle->color;",
                "// Line 171:                             } else {",
                "// Line 172:                                 $value = $this->color;",
                "// vulnerable line: 173: }",
                "// vulnerable line: 174: }",
                "// Line 175:                         if ($value !== null && $value[3] !== 1 && array_key_exists(\"{$from}-opacity\", $style_map) === true) {",
                "// Line 176:                             $styles[\"{$from}-opacity\"] = $value[3];",
                "// vulnerable line: 177: }",
                "// Line 178:                         break;",
                "// Line 179: ",
                "// Line 180:                     case self::TYPE_NUMBER:",
                "// Line 181:                         $value = ($styles[$from] === null) ? null : (float)$styles[$from];",
                "// Line 182:                         break;",
                "// Line 183: ",
                "// Line 184:                     default:",
                "// Line 185:                         $value = $styles[$from];",
                "// vulnerable line: 186: }",
                "// Line 187: ",
                "// Line 188:                 if ($value !== null) {",
                "// Line 189:                     $this->$to = $value;",
                "// vulnerable line: 190: }",
                "// vulnerable line: 191: }",
                "// vulnerable line: 192: }",
                "// vulnerable line: 193: }",
                "// Line 194: ",
                "// Line 195:     static function parseColor($color)",
                "// Line 196:     {",
                "// Line 197:         $color = strtolower(trim($color));",
                "// Line 198: ",
                "// Line 199:         $parts = preg_split('/[^,]\\s+/', $color, 2);",
                "// Line 200: ",
                "// Line 201:         if (count($parts) == 2) {",
                "// Line 202:             $color = $parts[1];",
                "// Line 203:         } else {",
                "// Line 204:             $color = $parts[0];",
                "// vulnerable line: 205: }",
                "// Line 206: ",
                "// Line 207:         if ($color === \"none\") {",
                "// Line 208:             return \"none\";",
                "// vulnerable line: 209: }",
                "// Line 210: ",
                "// Line 211:         if ($color === \"currentcolor\") {",
                "// Line 212:             return \"currentcolor\";",
                "// vulnerable line: 213: }",
                "// Line 214: ",
                "// Line 215:         // SVG color name",
                "// Line 216:         if (isset(self::$colorNames[$color])) {",
                "// Line 217:             return self::parseHexColor(self::$colorNames[$color]);",
                "// vulnerable line: 218: }",
                "// Line 219: ",
                "// Line 220:         // Hex color",
                "// Line 221:         if ($color[0] === \"#\") {",
                "// Line 222:             return self::parseHexColor($color);",
                "// vulnerable line: 223: }",
                "// Line 224: ",
                "// Line 225:         // RGB color",
                "// Line 226:         if (strpos($color, \"rgb\") !== false) {",
                "// Line 227:             return self::getQuad($color);",
                "// vulnerable line: 228: }",
                "// Line 229: ",
                "// Line 230:         // RGB color",
                "// Line 231:         if (strpos($color, \"hsl\") !== false) {",
                "// Line 232:             $quad = self::getQuad($color, true);",
                "// Line 233: ",
                "// Line 234:             if ($quad == null) {",
                "// Line 235:                 return null;",
                "// vulnerable line: 236: }",
                "// Line 237: ",
                "// Line 238:             list($h, $s, $l, $a) = $quad;",
                "// Line 239: ",
                "// Line 240:             $r = $l;",
                "// Line 241:             $g = $l;",
                "// Line 242:             $b = $l;",
                "// Line 243:             $v = ($l <= 0.5) ? ($l * (1.0 + $s)) : ($l + $s - $l * $s);",
                "// Line 244:             if ($v > 0) {",
                "// Line 245:                 $m = $l + $l - $v;",
                "// Line 246:                 $sv = ($v - $m) / $v;",
                "// Line 275:                     case 4:",
                "// Line 276:                         $r = $mid1;",
                "// Line 277:                         $g = $m;",
                "// Line 278:                         $b = $v;",
                "// Line 279:                         break;",
                "// Line 280:                     case 5:",
                "// Line 281:                         $r = $v;",
                "// Line 282:                         $g = $m;",
                "// Line 283:                         $b = $mid2;",
                "// Line 284:                         break;",
                "// vulnerable line: 285: }",
                "// vulnerable line: 286: }",
                "// Line 287:             $a = $a * 255;",
                "// Line 288: ",
                "// Line 289:             return array(",
                "// Line 290:                 $r * 255.0,",
                "// Line 291:                 $g * 255.0,",
                "// Line 292:                 $b * 255.0,",
                "// Line 293:                 $a",
                "// Line 294:             );",
                "// vulnerable line: 295: }",
                "// Line 296: ",
                "// Line 297:         // Gradient",
                "// Line 298:         if (strpos($color, \"url(#\") !== false) {",
                "// Line 299:             $i = strpos($color, \"(\");",
                "// Line 300:             $j = strpos($color, \")\");",
                "// Line 301: ",
                "// Line 302:             // Bad url format",
                "// Line 303:             if ($i === false || $j === false) {",
                "// Line 304:                 return null;",
                "// vulnerable line: 305: }",
                "// Line 306: ",
                "// Line 307:             return trim(substr($color, $i + 1, $j - $i - 1));",
                "// vulnerable line: 308: }",
                "// Line 309: ",
                "// Line 310:         return null;",
                "// vulnerable line: 311: }",
                "// Line 312: ",
                "// Line 313:     static function getQuad($color, $percent = false) {",
                "// Line 314:         $i = strpos($color, \"(\");",
                "// Line 315:         $j = strpos($color, \")\");",
                "// Line 316: ",
                "// Line 317:         // Bad color value",
                "// Line 318:         if ($i === false || $j === false) {",
                "// Line 319:             return null;",
                "// vulnerable line: 320: }",
                "// Line 321: ",
                "// Line 322:         $quad = preg_split(\"/\\s*[,\\/]\\s*/\", trim(substr($color, $i + 1, $j - $i - 1)));",
                "// Line 323:         if (!isset($quad[3])) {",
                "// Line 324:             $quad[3] = 1;",
                "// vulnerable line: 325: }",
                "// Line 326: ",
                "// Line 327:         if (count($quad) != 3 && count($quad) != 4) {",
                "// Line 328:             return null;",
                "// vulnerable line: 329: }",
                "// Line 330: ",
                "// Line 331:         foreach (array_keys($quad) as $c) {",
                "// Line 332:             $quad[$c] = trim($quad[$c]);",
                "// Line 333: ",
                "// Line 334:             if ($percent) {",
                "// Line 335:                 if ($quad[$c][strlen($quad[$c]) - 1] === \"%\") {",
                "// Line 336:                     $quad[$c] = floatval($quad[$c]) / 100;",
                "// Line 337:                 } else {",
                "// Line 338:                     $quad[$c] = $quad[$c] / 255;",
                "// vulnerable line: 339: }",
                "// Line 340:             } else {",
                "// Line 341:                 if ($quad[$c][strlen($quad[$c]) - 1] === \"%\") {",
                "// Line 342:                     $quad[$c] = round(floatval($quad[$c]) * 2.55);",
                "// vulnerable line: 343: }",
                "// vulnerable line: 344: }",
                "// vulnerable line: 345: }",
                "// Line 346: ",
                "// Line 347:         return $quad;",
                "// vulnerable line: 348: }",
                "// Line 349: ",
                "// Line 350:     static function parseHexColor($hex)",
                "// Line 351:     {",
                "// Line 352:         $c = array(0, 0, 0, 1);",
                "// Line 353: ",
                "// Line 354:         // #FFFFFF",
                "// Line 355:         if (isset($hex[6])) {",
                "// Line 356:             $c[0] = hexdec(substr($hex, 1, 2));",
                "// Line 357:             $c[1] = hexdec(substr($hex, 3, 2));",
                "// Line 358:             $c[2] = hexdec(substr($hex, 5, 2));",
                "// Line 359: ",
                "// Line 360:             if (isset($hex[7])) {",
                "// Line 361:                 $alpha = substr($hex, 7, 2);",
                "// Line 362:                 if (ctype_xdigit($alpha)) {",
                "// Line 363:                     $c[3] = round(hexdec($alpha)/255, 2);",
                "// vulnerable line: 364: }",
                "// vulnerable line: 365: }",
                "// Line 366:         } else {",
                "// Line 367:             $c[0] = hexdec($hex[1] . $hex[1]);",
                "// Line 368:             $c[1] = hexdec($hex[2] . $hex[2]);",
                "// Line 369:             $c[2] = hexdec($hex[3] . $hex[3]);",
                "// Line 370: ",
                "// Line 371:             if (isset($hex[4])) {",
                "// Line 372:                 if (ctype_xdigit($hex[4])) {",
                "// Line 373:                     $c[3] = round(hexdec($hex[4] . $hex[4])/255, 2);",
                "// vulnerable line: 374: }",
                "// vulnerable line: 375: }",
                "// vulnerable line: 376: }",
                "// Line 377: ",
                "// Line 378:         return $c;",
                "// vulnerable line: 379: }",
                "// Line 380: ",
                "// Line 381:     /**",
                "// Line 382:      * Simple CSS parser",
                "// Line 383:      *",
                "// Line 384:      * @param $style",
                "// Line 385:      *",
                "// Line 386:      * @return array",
                "// Line 387:      */",
                "// Line 388:     static function parseCssStyle($style)",
                "// Line 389:     {",
                "// Line 390:         $matches = array();",
                "// Line 391:         preg_match_all(\"/([a-z-]+)\\s*:\\s*([^;$]+)/si\", $style, $matches, PREG_SET_ORDER);",
                "// Line 392: ",
                "// Line 393:         $styles = array();",
                "// Line 394:         foreach ($matches as $match) {",
                "// Line 395:             $styles[$match[1]] = $match[2];",
                "// vulnerable line: 396: }",
                "// Line 397: ",
                "// Line 398:         return $styles;",
                "// vulnerable line: 399: }",
                "// Line 400: ",
                "// Line 401:     static $colorNames = array(",
                "// Line 402:         'antiquewhite'         => '#FAEBD7',",
                "// Line 403:         'aqua'                 => '#00FFFF',",
                "// Line 404:         'aquamarine'           => '#7FFFD4',",
                "// Line 405:         'beige'                => '#F5F5DC',",
                "// Line 406:         'black'                => '#000000',",
                "// Line 407:         'blue'                 => '#0000FF',",
                "// Line 408:         'brown'                => '#A52A2A',",
                "// Line 409:         'cadetblue'            => '#5F9EA0',",
                "// Line 541:         'seashell'             => '#fff5ee',",
                "// Line 542:         'slateblue'            => '#6a5acd',",
                "// Line 543:         'slategrey'            => '#708090',",
                "// Line 544:         'snow'                 => '#fffafa',",
                "// Line 545:         'tomato'               => '#ff6347',",
                "// Line 546:         'violet'               => '#ee82ee',",
                "// Line 547:         'wheat'                => '#f5deb3',",
                "// Line 548:         'whitesmoke'           => '#f5f5f5',",
                "// Line 549:         'yellowgreen'          => '#9acd32',",
                "// Line 550:     );",
                "// vulnerable line: 551: }"
            ]
        }
    ]
}