{
    "cve_id": "CVE-2024-29034",
    "cve_description": "CarrierWave is a solution for file uploads for Rails, Sinatra and other Ruby web frameworks. The vulnerability CVE-2023-49090 wasn't fully addressed. This vulnerability is caused by the fact that when uploading to object storage, including Amazon S3, it is possible to set a Content-Type value that is interpreted by browsers to be different from what's allowed by `content_type_allowlist`, by providing multiple values separated by commas. This bypassed value can be used to cause XSS. Upgrade to 3.0.7 or 2.2.6.\n",
    "cve_publish_date": "2024-03-24T20:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Fix Content-Type allowlist bypass vulnerability remained\n\nRefs. https://github.com/carrierwaveuploader/carrierwave/security/advisories/GHSA-vfmv-jfc5-pjjw",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "content_type_allowlist_spec.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "0",
            "number_of_lines_deleted_vulnerable_to_cve": "16",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 3: describe CarrierWave::Uploader do",
                "// Line 4:   let(:uploader_class) { Class.new(CarrierWave::Uploader::Base) }",
                "// Line 5:   let(:uploader) { uploader_class.new }",
                "// Line 6:   let(:ruby_file) { File.open(file_path('ruby.gif')) }",
                "// Line 7:   let(:bork_file) { File.open(file_path('bork.txt')) }",
                "// Line 8:   let(:vector_file) { File.open(file_path('ruby.svg')) }",
                "// Line 9: ",
                "// Line 10:   after { FileUtils.rm_rf(public_path) }",
                "// Line 11: ",
                "// Line 12:   describe '#cache!' do",
                "// vulnerable line: 13: before do",
                "// Line 14:       allow(CarrierWave).to receive(:generate_cache_id).and_return('1369894322-345-1234-2255')",
                "// vulnerable line: 15: end",
                "// Line 16: ",
                "// Line 17:     context \"when there is no allowlist\" do",
                "// Line 18:       it \"does not raise an integrity error\" do",
                "// Line 19:         allow(uploader).to receive(:content_type_allowlist).and_return(nil)",
                "// Line 20: ",
                "// Line 21:         expect { uploader.cache!(ruby_file) }.not_to raise_error",
                "// vulnerable line: 22: end",
                "// vulnerable line: 23: end",
                "// Line 24: ",
                "// Line 25:     context \"when there is an allowlist\" do",
                "// Line 26:       context \"when the allowlist is an array of values\" do",
                "// Line 27:         it \"does not raise an integrity error when the file has an allowlisted content type\" do",
                "// Line 28:           allow(uploader).to receive(:content_type_allowlist).and_return(['image/png'])",
                "// Line 29: ",
                "// Line 30:           expect { uploader.cache!(ruby_file) }.not_to raise_error",
                "// vulnerable line: 31: end",
                "// Line 32: ",
                "// Line 33:         it \"accepts content types with a + symbol\" do",
                "// Line 34:           allow(uploader).to receive(:content_type_allowlist).and_return(['image/svg+xml'])",
                "// Line 35: ",
                "// Line 36:           expect { uploader.cache!(vector_file) }.not_to raise_error",
                "// vulnerable line: 37: end",
                "// Line 38: ",
                "// Line 39:         it \"accepts a list of content types with mixed regular expressions and strings\" do",
                "// Line 40:           allow(uploader).to receive(:content_type_allowlist).and_return(['application/pdf', %r{image/}])",
                "// Line 41: ",
                "// Line 42:           expect { uploader.cache!(ruby_file) }.not_to raise_error",
                "// vulnerable line: 43: end",
                "// Line 44: ",
                "// Line 45:         it \"raises an integrity error the file has not an allowlisted content type\" do",
                "// Line 46:           allow(uploader).to receive(:content_type_allowlist).and_return(['image/gif'])",
                "// Line 47: ",
                "// vulnerable line: 48: expect { uploader.cache!(bork_file) }.to raise_error(CarrierWave::IntegrityError)",
                "// vulnerable line: 49: end",
                "// Line 50: ",
                "// Line 51:         it \"accepts content types as regular expressions\" do",
                "// Line 52:           allow(uploader).to receive(:content_type_allowlist).and_return([/image\\//])",
                "// Line 53: ",
                "// vulnerable line: 54: expect { uploader.cache!(bork_file) }.to raise_error(CarrierWave::IntegrityError)",
                "// vulnerable line: 55: end",
                "// Line 56: ",
                "// Line 57:         it \"raises an integrity error which lists the allowed content types\" do",
                "// Line 58:           allow(uploader).to receive(:content_type_allowlist).and_return(['image/gif', 'image/jpg'])",
                "// Line 59: ",
                "// Line 60:           expect { uploader.cache!(bork_file) }.to raise_error(CarrierWave::IntegrityError, %r{(?:image/gif|image/jpg)})",
                "// vulnerable line: 61: end",
                "// vulnerable line: 62: end",
                "// Line 63: ",
                "// Line 64:       context \"when the allowlist is a single value\" do",
                "// Line 65:         let(:test_file) { File.open(file_path('test.jpeg')) }",
                "// Line 66: ",
                "// Line 67:         it \"accepts a single content type string value\" do",
                "// Line 68:           allow(uploader).to receive(:content_type_allowlist).and_return('image/png')",
                "// Line 69: ",
                "// Line 70:           expect { uploader.cache!(ruby_file) }.not_to raise_error",
                "// vulnerable line: 71: end",
                "// Line 72: ",
                "// Line 73:         it \"accepts a single content type regular expression value\" do",
                "// Line 74:           allow(uploader).to receive(:content_type_allowlist).and_return(/image\\//)",
                "// Line 75: ",
                "// Line 76:           expect { uploader.cache!(ruby_file) }.not_to raise_error",
                "// vulnerable line: 77: end",
                "// vulnerable line: 78: end",
                "// Line 79: ",
                "// Line 80:       context \"with a crafted content type\" do",
                "// vulnerable line: 81: before do",
                "// Line 82:           allow(bork_file).to receive(:content_type).and_return('text/plain; image/png')",
                "// Line 83:           allow(uploader).to receive(:content_type_allowlist).and_return('image/png')",
                "// vulnerable line: 84: end",
                "// Line 85: ",
                "// Line 86:         it \"does not allow spoofing\" do",
                "// vulnerable line: 87: expect { uploader.cache!(bork_file) }.to raise_error(CarrierWave::IntegrityError)",
                "// vulnerable line: 88: end",
                "// vulnerable line: 89: end",
                "// Line 90: ",
                "// vulnerable line: 91: context \"when the allowlist contains charset\" do",
                "// vulnerable line: 92: before do",
                "// vulnerable line: 93: allow(uploader).to receive(:content_type_allowlist).and_return(%r{text/plain;\\s*charset=utf-8})",
                "// vulnerable line: 94: end",
                "// Line 95: ",
                "// vulnerable line: 96: it \"accepts the content with allowed charset\" do",
                "// vulnerable line: 97: allow(bork_file).to receive(:content_type).and_return('text/plain; charset=utf-8')",
                "// vulnerable line: 98: expect { uploader.cache!(bork_file) }.not_to raise_error",
                "// vulnerable line: 99: end",
                "// Line 100: ",
                "// vulnerable line: 101: it \"rejects the content without charset\" do",
                "// vulnerable line: 102: allow(bork_file).to receive(:content_type).and_return('text/plain')",
                "// vulnerable line: 103: expect { uploader.cache!(bork_file) }.to raise_error(CarrierWave::IntegrityError)",
                "// vulnerable line: 104: end",
                "// vulnerable line: 105: end",
                "// vulnerable line: 106: end",
                "// Line 107: ",
                "// Line 108:     context \"when there is a whitelist\" do",
                "// Line 109:       it \"uses the whitelist but shows deprecation\" do",
                "// Line 110:         allow(uploader).to receive(:content_type_whitelist).and_return(['image/gif'])",
                "// Line 111: ",
                "// Line 112:         expect(ActiveSupport::Deprecation).to receive(:warn).with('#content_type_whitelist is deprecated, use #content_type_allowlist instead.')",
                "// Line 113:         expect {",
                "// Line 114:           uploader.cache!(bork_file)",
                "// Line 115:         }.to raise_error(CarrierWave::IntegrityError)",
                "// vulnerable line: 116: end",
                "// Line 117: ",
                "// Line 118:       it \"looks for content_type_allowlist first for I18n translation\" do",
                "// Line 119:         allow(uploader).to receive(:content_type_allowlist).and_return(['image/gif'])",
                "// Line 120: ",
                "// Line 121:         change_locale_and_store_translations(:nl, :errors => {",
                "// Line 122:           :messages => {",
                "// Line 123:             :content_type_whitelist_error => \"this will not be used\",",
                "// Line 124:             :content_type_allowlist_error => \"Het is niet toegestaan om %{content_type} bestanden te uploaden\"",
                "// Line 125:           }",
                "// Line 126:         }) do",
                "// Line 127:           expect {",
                "// Line 128:             uploader.cache!(bork_file)",
                "// Line 129:           }.to raise_error(CarrierWave::IntegrityError, 'Het is niet toegestaan om text/plain bestanden te uploaden')",
                "// vulnerable line: 130: end",
                "// vulnerable line: 131: end",
                "// vulnerable line: 132: end",
                "// vulnerable line: 133: end",
                "// vulnerable line: 134: end"
            ]
        },
        {
            "filename_of_changes": "sanitized_file.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 300:       name = File.basename(name)",
                "// Line 301:       name = name.gsub(sanitize_regexp, \"_\")",
                "// Line 302:       name = \"_#{name}\" if name =~ /\\A\\.+\\z/",
                "// Line 303:       name = \"unnamed\" if name.size.zero?",
                "// Line 304:       name.mb_chars.to_s",
                "// Line 305:     end",
                "// Line 306: ",
                "// Line 307:     def declared_content_type",
                "// Line 308:       @declared_content_type ||",
                "// Line 309:         if @file.respond_to?(:content_type) && @file.content_type",
                "// vulnerable line: 310: @file.content_type.to_s.chomp",
                "// Line 311:         end",
                "// Line 312:     end",
                "// Line 313: ",
                "// Line 314:     # Guess content type from its file extension. Limit what to be returned to prevent spoofing.",
                "// Line 315:     def guessed_safe_content_type",
                "// Line 316:       return unless path",
                "// Line 317: ",
                "// Line 318:       type = Marcel::Magic.by_path(original_filename).to_s",
                "// Line 319:       type if type.start_with?('text/') || type.start_with?('application/json')",
                "// Line 320:     end"
            ]
        },
        {
            "filename_of_changes": "sanitized_file_spec.rb",
            "code_language": "Ruby",
            "number_of_lines_added_for_mitigation": "27",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        }
    ]
}