{
    "cve_id": "CVE-2024-23346",
    "cve_description": "Pymatgen (Python Materials Genomics) is an open-source Python library for materials analysis. A critical security vulnerability exists in the `JonesFaithfulTransformation.from_transformation_str()` method within the `pymatgen` library prior to version 2024.2.20. This method insecurely utilizes `eval()` for processing input, enabling execution of arbitrary code when parsing untrusted input. Version 2024.2.20 fixes this issue.",
    "cve_publish_date": "2024-02-21T17:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Update `JonesFaithfulTransformation` to use sympy\n\nSigned-off-by: Matthew Horton <mkhorton@users.noreply.github.com>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "settings.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "18",
            "number_of_lines_deleted_vulnerable_to_cve": "8",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 97:         try:",
                "// Line 98:             a, b, c = np.eye(3)",
                "// Line 99:             b_change, o_shift = transformation_string.split(\";\")",
                "// Line 100:             basis_change = b_change.split(\",\")",
                "// Line 101:             origin_shift = o_shift.split(\",\")",
                "// Line 102:             # add implicit multiplication symbols",
                "// Line 103:             basis_change = [",
                "// Line 104:                 re.sub(r\"(?<=\\w|\\))(?=\\() | (?<=\\))(?=\\w) | (?<=(\\d|a|b|c))(?=([abc]))\", r\"*\", string, flags=re.X)",
                "// Line 105:                 for string in basis_change",
                "// Line 106:             ]",
                "// vulnerable line: 107: # should be fine to use eval here but be mindful for security",
                "// vulnerable line: 108: # reasons",
                "// vulnerable line: 109: # see http://lybniz2.sourceforge.net/safeeval.html",
                "// vulnerable line: 110: # could replace with regex? or sympy expression?",
                "// vulnerable line: 111: P = np.array([eval(x, {\"__builtins__\": None}, {\"a\": a, \"b\": b, \"c\": c}) for x in basis_change])",
                "// vulnerable line: 112: P = P.transpose()  # by convention",
                "// Line 113:             p = [float(Fraction(x)) for x in origin_shift]",
                "// Line 114:             return P, p",
                "// vulnerable line: 115: except Exception:",
                "// vulnerable line: 116: raise ValueError(\"Failed to parse transformation string.\")",
                "// Line 117: ",
                "// Line 118:     @property",
                "// Line 119:     def P(self) -> list[list[float]]:",
                "// Line 120:         \"\"\"Transformation matrix.\"\"\"",
                "// Line 121:         return self._P",
                "// Line 122: ",
                "// Line 123:     @property",
                "// Line 124:     def p(self) -> list[float]:",
                "// Line 125:         \"\"\"Translation vector.\"\"\"",
                "// Line 126:         return self._p"
            ]
        }
    ]
}