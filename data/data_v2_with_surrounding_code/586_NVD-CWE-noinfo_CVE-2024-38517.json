{
    "cve_id": "CVE-2024-38517",
    "cve_description": "Tencent RapidJSON is vulnerable to privilege escalation due to an integer underflow in the `GenericReader::ParseNumber()` function of `include/rapidjson/reader.h` when parsing JSON text from a stream. An attacker needs to send the victim a crafted file which needs to be opened; this triggers the integer underflow vulnerability (when the file is parsed), leading to elevation of privilege.",
    "cve_publish_date": "2024-07-09T19:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Prevent int underflow when parsing exponents\n\nWhen parsing negative exponents, the current implementation takes\nprecautions for |exp| to not underflow int.\n\nBut that is not sufficient: later on [1], |exp + expFrac| is also\nstored to an int - so we must ensure that the sum stays within int\nrepresentable values.\n\nUpdate the exp clamping logic to take expFrac into account.\n\n[1] https://github.com/Tencent/rapidjson/blob/master/include/rapidjson/reader.h#L1690",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "reader.h",
            "code_language": "C++",
            "number_of_lines_added_for_mitigation": "10",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1666:             if (Consume(s, '+'))",
                "// Line 1667:                 ;",
                "// Line 1668:             else if (Consume(s, '-'))",
                "// Line 1669:                 expMinus = true;",
                "// Line 1670: ",
                "// Line 1671:             if (RAPIDJSON_LIKELY(s.Peek() >= '0' && s.Peek() <= '9')) {",
                "// Line 1672:                 exp = static_cast<int>(s.Take() - '0');",
                "// Line 1673:                 if (expMinus) {",
                "// Line 1674:                     while (RAPIDJSON_LIKELY(s.Peek() >= '0' && s.Peek() <= '9')) {",
                "// Line 1675:                         exp = exp * 10 + static_cast<int>(s.Take() - '0');",
                "// vulnerable line: 1676: if (exp >= 214748364) {                         // Issue #313: prevent overflow exponent",
                "// Line 1677:                             while (RAPIDJSON_UNLIKELY(s.Peek() >= '0' && s.Peek() <= '9'))  // Consume the rest of exponent",
                "// Line 1678:                                 s.Take();",
                "// Line 1679:                         }",
                "// Line 1680:                     }",
                "// Line 1681:                 }",
                "// Line 1682:                 else {  // positive exp",
                "// Line 1683:                     int maxExp = 308 - expFrac;",
                "// Line 1684:                     while (RAPIDJSON_LIKELY(s.Peek() >= '0' && s.Peek() <= '9')) {",
                "// Line 1685:                         exp = exp * 10 + static_cast<int>(s.Take() - '0');",
                "// Line 1686:                         if (RAPIDJSON_UNLIKELY(exp > maxExp))"
            ]
        },
        {
            "filename_of_changes": "readertest.cpp",
            "code_language": "C++",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        }
    ]
}