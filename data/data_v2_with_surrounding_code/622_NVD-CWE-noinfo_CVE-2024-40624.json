{
    "cve_id": "CVE-2024-40624",
    "cve_description": "TorrentPier is an open source BitTorrent Public/Private tracker engine, written in php. In `torrentpier/library/includes/functions.php`, `get_tracks()` uses the unsafe native PHP serialization format to deserialize user-controlled cookies. One can use phpggc and the chain Guzzle/FW1 to write PHP code to an arbitrary file, and execute commands on the system. For instance, the cookie bb_t will be deserialized when browsing to viewforum.php. This issue has been addressed in commit `ed37e6e52` which is expected to be included in release version 2.4.4. Users are advised to upgrade as soon as the new release is available. There are no known workarounds for this vulnerability.",
    "cve_publish_date": "2024-07-15T20:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Merge commit from fork",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "User.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 446:         }",
                "// Line 447: ",
                "// Line 448:         return [];",
                "// Line 449:     }",
                "// Line 450: ",
                "// Line 451:     /**",
                "// Line 452:      * Initialize sessiondata stored in cookies",
                "// Line 453:      */",
                "// Line 454:     public function get_sessiondata()",
                "// Line 455:     {",
                "// vulnerable line: 456: $sd_resv = !empty($_COOKIE[COOKIE_DATA]) ? unserialize($_COOKIE[COOKIE_DATA], ['allowed_classes' => false]) : [];",
                "// Line 457: ",
                "// Line 458:         // autologin_id",
                "// Line 459:         if (!empty($sd_resv['uk']) && verify_id($sd_resv['uk'], LOGIN_KEY_LENGTH)) {",
                "// Line 460:             $this->sessiondata['uk'] = $sd_resv['uk'];",
                "// Line 461:         }",
                "// Line 462:         // user_id",
                "// Line 463:         if (!empty($sd_resv['uid'])) {",
                "// Line 464:             $this->sessiondata['uid'] = (int)$sd_resv['uid'];",
                "// Line 465:         }",
                "// Line 466:         // sid",
                "// Line 479:         if ($user_id == GUEST_UID) {",
                "// Line 480:             $delete_cookies = [COOKIE_DATA, 'torhelp'];",
                "// Line 481: ",
                "// Line 482:             foreach ($delete_cookies as $cookie) {",
                "// Line 483:                 if (isset($_COOKIE[$cookie])) {",
                "// Line 484:                     bb_setcookie($cookie, null);",
                "// Line 485:                 }",
                "// Line 486:             }",
                "// Line 487:         } else {",
                "// Line 488:             $c_sdata_resv = !empty($_COOKIE[COOKIE_DATA]) ? $_COOKIE[COOKIE_DATA] : null;",
                "// vulnerable line: 489: $c_sdata_curr = ($this->sessiondata) ? serialize($this->sessiondata) : '';",
                "// Line 490: ",
                "// Line 491:             if ($c_sdata_curr !== $c_sdata_resv) {",
                "// Line 492:                 bb_setcookie(COOKIE_DATA, $c_sdata_curr, httponly: true);",
                "// Line 493:             }",
                "// Line 494:         }",
                "// Line 495:     }",
                "// Line 496: ",
                "// Line 497:     /**",
                "// Line 498:      * Verify autologin_id",
                "// Line 499:      *"
            ]
        },
        {
            "filename_of_changes": "functions.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "4",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 33: }",
                "// Line 34: ",
                "// Line 35: function delete_avatar($user_id, $avatar_ext_id)",
                "// Line 36: {",
                "// Line 37:     $avatar_file = $avatar_ext_id ? get_avatar_path($user_id, $avatar_ext_id) : false;",
                "// Line 38:     return ($avatar_file && is_file($avatar_file) && unlink($avatar_file));",
                "// Line 39: }",
                "// Line 40: ",
                "// Line 41: function get_tracks($type)",
                "// Line 42: {",
                "// vulnerable line: 43: static $pattern = '#^a:\\d+:{[i:;\\d]+}$#';",
                "// Line 44: ",
                "// Line 45:     switch ($type) {",
                "// Line 46:         case 'topic':",
                "// Line 47:             $c_name = COOKIE_TOPIC;",
                "// Line 48:             break;",
                "// Line 49:         case 'forum':",
                "// Line 50:             $c_name = COOKIE_FORUM;",
                "// Line 51:             break;",
                "// Line 52:         case 'pm':",
                "// Line 53:             $c_name = COOKIE_PM;",
                "// Line 54:             break;",
                "// Line 55:         default:",
                "// Line 56:             trigger_error(__FUNCTION__ . \": invalid type '$type'\", E_USER_ERROR);",
                "// Line 57:     }",
                "// vulnerable line: 58: $tracks = !empty($_COOKIE[$c_name]) ? @unserialize($_COOKIE[$c_name]) : false;",
                "// Line 59:     return $tracks ?: [];",
                "// Line 60: }",
                "// Line 61: ",
                "// Line 62: /**",
                "// Line 63:  * Returns array with all banned users",
                "// Line 64:  *",
                "// Line 65:  * @param bool $return_as_names",
                "// Line 66:  * @return array",
                "// Line 67:  */",
                "// Line 68: function get_banned_users(bool $return_as_names = false): array",
                "// Line 106:     $overflow = count($tracking_topics) + count($tracking_forums) - COOKIE_MAX_TRACKS;",
                "// Line 107: ",
                "// Line 108:     if ($overflow > 0) {",
                "// Line 109:         arsort($tracking_ary);",
                "// Line 110:         for ($i = 0; $i < $overflow; $i++) {",
                "// Line 111:             array_pop($tracking_ary);",
                "// Line 112:         }",
                "// Line 113:     }",
                "// Line 114: ",
                "// Line 115:     if (array_diff($tracking_ary, $prev_tracking_ary)) {",
                "// vulnerable line: 116: bb_setcookie($cookie_name, serialize($tracking_ary));",
                "// Line 117:     }",
                "// Line 118: }",
                "// Line 119: ",
                "// Line 120: function get_last_read($topic_id = 0, $forum_id = 0)",
                "// Line 121: {",
                "// Line 122:     global $tracking_topics, $tracking_forums, $user;",
                "// Line 123: ",
                "// Line 124:     $t = $tracking_topics[$topic_id] ?? 0;",
                "// Line 125:     $f = $tracking_forums[$forum_id] ?? 0;",
                "// Line 126:     return max($t, $f, $user->data['user_lastvisit']);"
            ]
        }
    ]
}