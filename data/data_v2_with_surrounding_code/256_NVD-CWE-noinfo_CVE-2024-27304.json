{
    "cve_id": "CVE-2024-27304",
    "cve_description": "pgx is a PostgreSQL driver and toolkit for Go. SQL injection can occur if an attacker can cause a single query or bind message to exceed 4 GB in size. An integer overflow in the calculated message size can cause the one large message to be sent as multiple messages under the attacker's control. The problem is resolved in v4.18.2 and v5.5.4. As a workaround, reject user input large enough to cause a single query or bind message to exceed 4 GB in size.",
    "cve_publish_date": "2024-03-06T19:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Backport fixes from pgx v5\n\nCheck for overflow on uint16 sizes in pgproto3\n\nDo not allow protocol messages larger than ~1GB\n\nThe PostgreSQL server will reject messages greater than ~1 GB anyway.\nHowever, worse than that is that a message that is larger than 4 GB\ncould wrap the 32-bit integer message size and be interpreted by the\nserver as multiple messages. This could allow a malicious client to\ninject arbitrary protocol messages.\n\nhttps://github.com/jackc/pgx/security/advisories/GHSA-mrww-27vc-gghv",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "authentication_cleartext_password.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "4",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 28:     authType := binary.BigEndian.Uint32(src)",
                "// Line 29: ",
                "// Line 30:     if authType != AuthTypeCleartextPassword {",
                "// Line 31:         return errors.New(\"bad auth type\")",
                "// Line 32:     }",
                "// Line 33: ",
                "// Line 34:     return nil",
                "// Line 35: }",
                "// Line 36: ",
                "// Line 37: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 38: func (src *AuthenticationCleartextPassword) Encode(dst []byte) []byte {",
                "// vulnerable line: 39: dst = append(dst, 'R')",
                "// vulnerable line: 40: dst = pgio.AppendInt32(dst, 8)",
                "// Line 41:     dst = pgio.AppendUint32(dst, AuthTypeCleartextPassword)",
                "// vulnerable line: 42: return dst",
                "// Line 43: }",
                "// Line 44: ",
                "// Line 45: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 46: func (src AuthenticationCleartextPassword) MarshalJSON() ([]byte, error) {",
                "// Line 47:     return json.Marshal(struct {",
                "// Line 48:         Type string",
                "// Line 49:     }{",
                "// Line 50:         Type: \"AuthenticationCleartextPassword\",",
                "// Line 51:     })",
                "// Line 52: }"
            ]
        },
        {
            "filename_of_changes": "authentication_gss.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "4",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 19:     }",
                "// Line 20: ",
                "// Line 21:     authType := binary.BigEndian.Uint32(src)",
                "// Line 22: ",
                "// Line 23:     if authType != AuthTypeGSS {",
                "// Line 24:         return errors.New(\"bad auth type\")",
                "// Line 25:     }",
                "// Line 26:     return nil",
                "// Line 27: }",
                "// Line 28: ",
                "// vulnerable line: 29: func (a *AuthenticationGSS) Encode(dst []byte) []byte {",
                "// vulnerable line: 30: dst = append(dst, 'R')",
                "// vulnerable line: 31: dst = pgio.AppendInt32(dst, 4)",
                "// Line 32:     dst = pgio.AppendUint32(dst, AuthTypeGSS)",
                "// vulnerable line: 33: return dst",
                "// Line 34: }",
                "// Line 35: ",
                "// Line 36: func (a *AuthenticationGSS) MarshalJSON() ([]byte, error) {",
                "// Line 37:     return json.Marshal(struct {",
                "// Line 38:         Type string",
                "// Line 39:         Data []byte",
                "// Line 40:     }{",
                "// Line 41:         Type: \"AuthenticationGSS\",",
                "// Line 42:     })",
                "// Line 43: }"
            ]
        },
        {
            "filename_of_changes": "authentication_gss_continue.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "4",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 23:     authType := binary.BigEndian.Uint32(src)",
                "// Line 24: ",
                "// Line 25:     if authType != AuthTypeGSSCont {",
                "// Line 26:         return errors.New(\"bad auth type\")",
                "// Line 27:     }",
                "// Line 28: ",
                "// Line 29:     a.Data = src[4:]",
                "// Line 30:     return nil",
                "// Line 31: }",
                "// Line 32: ",
                "// vulnerable line: 33: func (a *AuthenticationGSSContinue) Encode(dst []byte) []byte {",
                "// vulnerable line: 34: dst = append(dst, 'R')",
                "// vulnerable line: 35: dst = pgio.AppendInt32(dst, int32(len(a.Data))+8)",
                "// Line 36:     dst = pgio.AppendUint32(dst, AuthTypeGSSCont)",
                "// Line 37:     dst = append(dst, a.Data...)",
                "// vulnerable line: 38: return dst",
                "// Line 39: }",
                "// Line 40: ",
                "// Line 41: func (a *AuthenticationGSSContinue) MarshalJSON() ([]byte, error) {",
                "// Line 42:     return json.Marshal(struct {",
                "// Line 43:         Type string",
                "// Line 44:         Data []byte",
                "// Line 45:     }{",
                "// Line 46:         Type: \"AuthenticationGSSContinue\",",
                "// Line 47:         Data: a.Data,",
                "// Line 48:     })"
            ]
        },
        {
            "filename_of_changes": "authentication_md5_password.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "4",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 31:     if authType != AuthTypeMD5Password {",
                "// Line 32:         return errors.New(\"bad auth type\")",
                "// Line 33:     }",
                "// Line 34: ",
                "// Line 35:     copy(dst.Salt[:], src[4:8])",
                "// Line 36: ",
                "// Line 37:     return nil",
                "// Line 38: }",
                "// Line 39: ",
                "// Line 40: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 41: func (src *AuthenticationMD5Password) Encode(dst []byte) []byte {",
                "// vulnerable line: 42: dst = append(dst, 'R')",
                "// vulnerable line: 43: dst = pgio.AppendInt32(dst, 12)",
                "// Line 44:     dst = pgio.AppendUint32(dst, AuthTypeMD5Password)",
                "// Line 45:     dst = append(dst, src.Salt[:]...)",
                "// vulnerable line: 46: return dst",
                "// Line 47: }",
                "// Line 48: ",
                "// Line 49: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 50: func (src AuthenticationMD5Password) MarshalJSON() ([]byte, error) {",
                "// Line 51:     return json.Marshal(struct {",
                "// Line 52:         Type string",
                "// Line 53:         Salt [4]byte",
                "// Line 54:     }{",
                "// Line 55:         Type: \"AuthenticationMD5Password\",",
                "// Line 56:         Salt: src.Salt,"
            ]
        },
        {
            "filename_of_changes": "authentication_ok.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "4",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 28:     authType := binary.BigEndian.Uint32(src)",
                "// Line 29: ",
                "// Line 30:     if authType != AuthTypeOk {",
                "// Line 31:         return errors.New(\"bad auth type\")",
                "// Line 32:     }",
                "// Line 33: ",
                "// Line 34:     return nil",
                "// Line 35: }",
                "// Line 36: ",
                "// Line 37: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 38: func (src *AuthenticationOk) Encode(dst []byte) []byte {",
                "// vulnerable line: 39: dst = append(dst, 'R')",
                "// vulnerable line: 40: dst = pgio.AppendInt32(dst, 8)",
                "// Line 41:     dst = pgio.AppendUint32(dst, AuthTypeOk)",
                "// vulnerable line: 42: return dst",
                "// Line 43: }",
                "// Line 44: ",
                "// Line 45: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 46: func (src AuthenticationOk) MarshalJSON() ([]byte, error) {",
                "// Line 47:     return json.Marshal(struct {",
                "// Line 48:         Type string",
                "// Line 49:     }{",
                "// Line 50:         Type: \"AuthenticationOK\",",
                "// Line 51:     })",
                "// Line 52: }"
            ]
        },
        {
            "filename_of_changes": "authentication_sasl.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "7",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 39:         if idx > 0 {",
                "// Line 40:             dst.AuthMechanisms = append(dst.AuthMechanisms, string(authMechanisms[:idx]))",
                "// Line 41:             authMechanisms = authMechanisms[idx+1:]",
                "// Line 42:         }",
                "// Line 43:     }",
                "// Line 44: ",
                "// Line 45:     return nil",
                "// Line 46: }",
                "// Line 47: ",
                "// Line 48: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 49: func (src *AuthenticationSASL) Encode(dst []byte) []byte {",
                "// vulnerable line: 50: dst = append(dst, 'R')",
                "// vulnerable line: 51: sp := len(dst)",
                "// vulnerable line: 52: dst = pgio.AppendInt32(dst, -1)",
                "// Line 53:     dst = pgio.AppendUint32(dst, AuthTypeSASL)",
                "// Line 54: ",
                "// Line 55:     for _, s := range src.AuthMechanisms {",
                "// Line 56:         dst = append(dst, []byte(s)...)",
                "// Line 57:         dst = append(dst, 0)",
                "// Line 58:     }",
                "// Line 59:     dst = append(dst, 0)",
                "// Line 60: ",
                "// vulnerable line: 61: pgio.SetInt32(dst[sp:], int32(len(dst[sp:])))",
                "// Line 62: ",
                "// vulnerable line: 63: return dst",
                "// Line 64: }",
                "// Line 65: ",
                "// Line 66: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 67: func (src AuthenticationSASL) MarshalJSON() ([]byte, error) {",
                "// Line 68:     return json.Marshal(struct {",
                "// Line 69:         Type           string",
                "// Line 70:         AuthMechanisms []string",
                "// Line 71:     }{",
                "// Line 72:         Type:           \"AuthenticationSASL\",",
                "// Line 73:         AuthMechanisms: src.AuthMechanisms,"
            ]
        },
        {
            "filename_of_changes": "authentication_sasl_continue.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "9",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 31:     if authType != AuthTypeSASLContinue {",
                "// Line 32:         return errors.New(\"bad auth type\")",
                "// Line 33:     }",
                "// Line 34: ",
                "// Line 35:     dst.Data = src[4:]",
                "// Line 36: ",
                "// Line 37:     return nil",
                "// Line 38: }",
                "// Line 39: ",
                "// Line 40: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 41: func (src *AuthenticationSASLContinue) Encode(dst []byte) []byte {",
                "// vulnerable line: 42: dst = append(dst, 'R')",
                "// vulnerable line: 43: sp := len(dst)",
                "// vulnerable line: 44: dst = pgio.AppendInt32(dst, -1)",
                "// Line 45:     dst = pgio.AppendUint32(dst, AuthTypeSASLContinue)",
                "// Line 46: ",
                "// Line 47:     dst = append(dst, src.Data...)",
                "// Line 48: ",
                "// vulnerable line: 49: pgio.SetInt32(dst[sp:], int32(len(dst[sp:])))",
                "// Line 50: ",
                "// vulnerable line: 51: return dst",
                "// Line 52: }",
                "// Line 53: ",
                "// Line 54: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 55: func (src AuthenticationSASLContinue) MarshalJSON() ([]byte, error) {",
                "// Line 56:     return json.Marshal(struct {",
                "// Line 57:         Type string",
                "// Line 58:         Data string",
                "// Line 59:     }{",
                "// Line 60:         Type: \"AuthenticationSASLContinue\",",
                "// Line 61:         Data: string(src.Data),"
            ]
        },
        {
            "filename_of_changes": "authentication_sasl_final.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "9",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 31:     if authType != AuthTypeSASLFinal {",
                "// Line 32:         return errors.New(\"bad auth type\")",
                "// Line 33:     }",
                "// Line 34: ",
                "// Line 35:     dst.Data = src[4:]",
                "// Line 36: ",
                "// Line 37:     return nil",
                "// Line 38: }",
                "// Line 39: ",
                "// Line 40: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 41: func (src *AuthenticationSASLFinal) Encode(dst []byte) []byte {",
                "// vulnerable line: 42: dst = append(dst, 'R')",
                "// vulnerable line: 43: sp := len(dst)",
                "// vulnerable line: 44: dst = pgio.AppendInt32(dst, -1)",
                "// Line 45:     dst = pgio.AppendUint32(dst, AuthTypeSASLFinal)",
                "// Line 46: ",
                "// Line 47:     dst = append(dst, src.Data...)",
                "// Line 48: ",
                "// vulnerable line: 49: pgio.SetInt32(dst[sp:], int32(len(dst[sp:])))",
                "// Line 50: ",
                "// vulnerable line: 51: return dst",
                "// Line 52: }",
                "// Line 53: ",
                "// Line 54: // MarshalJSON implements encoding/json.Unmarshaler.",
                "// Line 55: func (src AuthenticationSASLFinal) MarshalJSON() ([]byte, error) {",
                "// Line 56:     return json.Marshal(struct {",
                "// Line 57:         Type string",
                "// Line 58:         Data string",
                "// Line 59:     }{",
                "// Line 60:         Type: \"AuthenticationSASLFinal\",",
                "// Line 61:         Data: string(src.Data),"
            ]
        },
        {
            "filename_of_changes": "backend.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "10",
            "number_of_lines_deleted_vulnerable_to_cve": "5",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 42:     maxStartupPacketLen = 10000 // maxStartupPacketLen is MAX_STARTUP_PACKET_LENGTH from PG source.",
                "// Line 43: )",
                "// Line 44: ",
                "// Line 45: // NewBackend creates a new Backend.",
                "// Line 46: func NewBackend(cr ChunkReader, w io.Writer) *Backend {",
                "// Line 47:     return &Backend{cr: cr, w: w}",
                "// Line 48: }",
                "// Line 49: ",
                "// Line 50: // Send sends a message to the frontend.",
                "// Line 51: func (b *Backend) Send(msg BackendMessage) error {",
                "// vulnerable line: 52: _, err := b.w.Write(msg.Encode(nil))",
                "// Line 53:     return err",
                "// Line 54: }",
                "// Line 55: ",
                "// Line 56: // ReceiveStartupMessage receives the initial connection message. This method is used of the normal Receive method",
                "// Line 57: // because the initial connection message is \"special\" and does not include the message type as the first byte. This",
                "// Line 58: // will return either a StartupMessage, SSLRequest, GSSEncRequest, or CancelRequest.",
                "// Line 59: func (b *Backend) ReceiveStartupMessage() (FrontendMessage, error) {",
                "// Line 60:     buf, err := b.cr.Next(4)",
                "// Line 61:     if err != nil {",
                "// Line 62:         return nil, err",
                "// Line 177: ",
                "// Line 178:     err = msg.Decode(msgBody)",
                "// Line 179:     return msg, err",
                "// Line 180: }",
                "// Line 181: ",
                "// Line 182: // SetAuthType sets the authentication type in the backend.",
                "// Line 183: // Since multiple message types can start with 'p', SetAuthType allows",
                "// Line 184: // contextual identification of FrontendMessages. For example, in the",
                "// Line 185: // PG message flow documentation for PasswordMessage:",
                "// Line 186: //",
                "// vulnerable line: 187: //         Byte1('p')",
                "// Line 188: //",
                "// vulnerable line: 189: //      Identifies the message as a password response. Note that this is also used for",
                "// vulnerable line: 190: //        GSSAPI, SSPI and SASL response messages. The exact message type can be deduced from",
                "// vulnerable line: 191: //        the context.",
                "// Line 192: //",
                "// Line 193: // Since the Frontend does not know about the state of a backend, it is important",
                "// Line 194: // to call SetAuthType() after an authentication request is received by the Frontend.",
                "// Line 195: func (b *Backend) SetAuthType(authType uint32) error {",
                "// Line 196:     switch authType {",
                "// Line 197:     case AuthTypeOk,",
                "// Line 198:         AuthTypeCleartextPassword,",
                "// Line 199:         AuthTypeMD5Password,",
                "// Line 200:         AuthTypeSCMCreds,",
                "// Line 201:         AuthTypeGSS,"
            ]
        },
        {
            "filename_of_changes": "backend_key_data.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "4",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 22:         return &invalidMessageLenErr{messageType: \"BackendKeyData\", expectedLen: 8, actualLen: len(src)}",
                "// Line 23:     }",
                "// Line 24: ",
                "// Line 25:     dst.ProcessID = binary.BigEndian.Uint32(src[:4])",
                "// Line 26:     dst.SecretKey = binary.BigEndian.Uint32(src[4:])",
                "// Line 27: ",
                "// Line 28:     return nil",
                "// Line 29: }",
                "// Line 30: ",
                "// Line 31: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 32: func (src *BackendKeyData) Encode(dst []byte) []byte {",
                "// vulnerable line: 33: dst = append(dst, 'K')",
                "// vulnerable line: 34: dst = pgio.AppendUint32(dst, 12)",
                "// Line 35:     dst = pgio.AppendUint32(dst, src.ProcessID)",
                "// Line 36:     dst = pgio.AppendUint32(dst, src.SecretKey)",
                "// vulnerable line: 37: return dst",
                "// Line 38: }",
                "// Line 39: ",
                "// Line 40: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 41: func (src BackendKeyData) MarshalJSON() ([]byte, error) {",
                "// Line 42:     return json.Marshal(struct {",
                "// Line 43:         Type      string",
                "// Line 44:         ProcessID uint32",
                "// Line 45:         SecretKey uint32",
                "// Line 46:     }{",
                "// Line 47:         Type:      \"BackendKeyData\","
            ]
        },
        {
            "filename_of_changes": "backend_test.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 44:     server.push([]byte{'Q', 0, 0, 0, 6})",
                "// Line 45: ",
                "// Line 46:     backend := pgproto3.NewBackend(pgproto3.NewChunkReader(server), nil)",
                "// Line 47: ",
                "// Line 48:     // Receive regular msg",
                "// Line 49:     msg, err := backend.Receive()",
                "// Line 50:     assert.Nil(t, msg)",
                "// Line 51:     assert.Equal(t, io.ErrUnexpectedEOF, err)",
                "// Line 52: ",
                "// Line 53:     // Receive StartupMessage msg",
                "// vulnerable line: 54: dst := []byte{}",
                "// Line 55:     dst = pgio.AppendUint32(dst, 1000) // tell the backend we expect 1000 bytes to be read",
                "// Line 56:     dst = pgio.AppendUint32(dst, 1)    // only send 1 byte",
                "// Line 57:     server.push(dst)",
                "// Line 58: ",
                "// Line 59:     msg, err = backend.ReceiveStartupMessage()",
                "// Line 60:     assert.Nil(t, msg)",
                "// Line 61:     assert.Equal(t, io.ErrUnexpectedEOF, err)",
                "// Line 62: }",
                "// Line 63: ",
                "// Line 64: func TestStartupMessage(t *testing.T) {",
                "// Line 65:     t.Parallel()",
                "// Line 66: ",
                "// Line 67:     t.Run(\"valid StartupMessage\", func(t *testing.T) {",
                "// Line 68:         want := &pgproto3.StartupMessage{",
                "// Line 69:             ProtocolVersion: pgproto3.ProtocolVersionNumber,",
                "// Line 70:             Parameters: map[string]string{",
                "// Line 71:                 \"username\": \"tester\",",
                "// Line 72:             },",
                "// Line 73:         }",
                "// vulnerable line: 74: dst := []byte{}",
                "// vulnerable line: 75: dst = want.Encode(dst)",
                "// Line 76: ",
                "// Line 77:         server := &interruptReader{}",
                "// Line 78:         server.push(dst)",
                "// Line 79: ",
                "// Line 80:         backend := pgproto3.NewBackend(pgproto3.NewChunkReader(server), nil)",
                "// Line 81: ",
                "// Line 82:         msg, err := backend.ReceiveStartupMessage()",
                "// Line 83:         require.NoError(t, err)",
                "// Line 84:         require.Equal(t, want, msg)",
                "// Line 85:     })",
                "// Line 98:                 packetLen: 10005,",
                "// Line 99:             },",
                "// Line 100:             {",
                "// Line 101:                 name:      \"short packet length\",",
                "// Line 102:                 packetLen: 3,",
                "// Line 103:             },",
                "// Line 104:         }",
                "// Line 105:         for _, tt := range tests {",
                "// Line 106:             t.Run(tt.name, func(t *testing.T) {",
                "// Line 107:                 server := &interruptReader{}",
                "// vulnerable line: 108: dst := []byte{}",
                "// Line 109:                 dst = pgio.AppendUint32(dst, tt.packetLen)",
                "// Line 110:                 dst = pgio.AppendUint32(dst, pgproto3.ProtocolVersionNumber)",
                "// Line 111:                 server.push(dst)",
                "// Line 112: ",
                "// Line 113:                 backend := pgproto3.NewBackend(pgproto3.NewChunkReader(server), nil)",
                "// Line 114: ",
                "// Line 115:                 msg, err := backend.ReceiveStartupMessage()",
                "// Line 116:                 require.Error(t, err)",
                "// Line 117:                 require.Nil(t, msg)",
                "// Line 118:                 require.Contains(t, err.Error(), wantErr)"
            ]
        },
        {
            "filename_of_changes": "bind.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "14",
            "number_of_lines_deleted_vulnerable_to_cve": "7",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 101:     }",
                "// Line 102:     for i := 0; i < resultFormatCodeCount; i++ {",
                "// Line 103:         dst.ResultFormatCodes[i] = int16(binary.BigEndian.Uint16(src[rp:]))",
                "// Line 104:         rp += 2",
                "// Line 105:     }",
                "// Line 106: ",
                "// Line 107:     return nil",
                "// Line 108: }",
                "// Line 109: ",
                "// Line 110: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 111: func (src *Bind) Encode(dst []byte) []byte {",
                "// vulnerable line: 112: dst = append(dst, 'B')",
                "// vulnerable line: 113: sp := len(dst)",
                "// vulnerable line: 114: dst = pgio.AppendInt32(dst, -1)",
                "// Line 115: ",
                "// Line 116:     dst = append(dst, src.DestinationPortal...)",
                "// Line 117:     dst = append(dst, 0)",
                "// Line 118:     dst = append(dst, src.PreparedStatement...)",
                "// Line 119:     dst = append(dst, 0)",
                "// Line 120: ",
                "// Line 121:     dst = pgio.AppendUint16(dst, uint16(len(src.ParameterFormatCodes)))",
                "// Line 122:     for _, fc := range src.ParameterFormatCodes {",
                "// Line 123:         dst = pgio.AppendInt16(dst, fc)",
                "// Line 124:     }",
                "// Line 125: ",
                "// Line 126:     dst = pgio.AppendUint16(dst, uint16(len(src.Parameters)))",
                "// Line 127:     for _, p := range src.Parameters {",
                "// Line 128:         if p == nil {",
                "// vulnerable line: 129: dst = pgio.AppendInt32(dst, -1)",
                "// Line 130:             continue",
                "// Line 131:         }",
                "// Line 132: ",
                "// Line 133:         dst = pgio.AppendInt32(dst, int32(len(p)))",
                "// Line 134:         dst = append(dst, p...)",
                "// Line 135:     }",
                "// Line 136: ",
                "// Line 137:     dst = pgio.AppendUint16(dst, uint16(len(src.ResultFormatCodes)))",
                "// Line 138:     for _, fc := range src.ResultFormatCodes {",
                "// Line 139:         dst = pgio.AppendInt16(dst, fc)",
                "// Line 140:     }",
                "// Line 141: ",
                "// vulnerable line: 142: pgio.SetInt32(dst[sp:], int32(len(dst[sp:])))",
                "// Line 143: ",
                "// vulnerable line: 144: return dst",
                "// Line 145: }",
                "// Line 146: ",
                "// Line 147: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 148: func (src Bind) MarshalJSON() ([]byte, error) {",
                "// Line 149:     formattedParameters := make([]map[string]string, len(src.Parameters))",
                "// Line 150:     for i, p := range src.Parameters {",
                "// Line 151:         if p == nil {",
                "// Line 152:             continue",
                "// Line 153:         }",
                "// Line 154: "
            ]
        },
        {
            "filename_of_changes": "bind_complete.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 13: // type identifier and 4 byte message length.",
                "// Line 14: func (dst *BindComplete) Decode(src []byte) error {",
                "// Line 15:     if len(src) != 0 {",
                "// Line 16:         return &invalidMessageLenErr{messageType: \"BindComplete\", expectedLen: 0, actualLen: len(src)}",
                "// Line 17:     }",
                "// Line 18: ",
                "// Line 19:     return nil",
                "// Line 20: }",
                "// Line 21: ",
                "// Line 22: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 23: func (src *BindComplete) Encode(dst []byte) []byte {",
                "// vulnerable line: 24: return append(dst, '2', 0, 0, 0, 4)",
                "// Line 25: }",
                "// Line 26: ",
                "// Line 27: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 28: func (src BindComplete) MarshalJSON() ([]byte, error) {",
                "// Line 29:     return json.Marshal(struct {",
                "// Line 30:         Type string",
                "// Line 31:     }{",
                "// Line 32:         Type: \"BindComplete\",",
                "// Line 33:     })",
                "// Line 34: }"
            ]
        },
        {
            "filename_of_changes": "bind_test.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "20",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "cancel_request.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 29:         return errors.New(\"bad cancel request code\")",
                "// Line 30:     }",
                "// Line 31: ",
                "// Line 32:     dst.ProcessID = binary.BigEndian.Uint32(src[4:])",
                "// Line 33:     dst.SecretKey = binary.BigEndian.Uint32(src[8:])",
                "// Line 34: ",
                "// Line 35:     return nil",
                "// Line 36: }",
                "// Line 37: ",
                "// Line 38: // Encode encodes src into dst. dst will include the 4 byte message length.",
                "// vulnerable line: 39: func (src *CancelRequest) Encode(dst []byte) []byte {",
                "// Line 40:     dst = pgio.AppendInt32(dst, 16)",
                "// Line 41:     dst = pgio.AppendInt32(dst, cancelRequestCode)",
                "// Line 42:     dst = pgio.AppendUint32(dst, src.ProcessID)",
                "// Line 43:     dst = pgio.AppendUint32(dst, src.SecretKey)",
                "// vulnerable line: 44: return dst",
                "// Line 45: }",
                "// Line 46: ",
                "// Line 47: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 48: func (src CancelRequest) MarshalJSON() ([]byte, error) {",
                "// Line 49:     return json.Marshal(struct {",
                "// Line 50:         Type      string",
                "// Line 51:         ProcessID uint32",
                "// Line 52:         SecretKey uint32",
                "// Line 53:     }{",
                "// Line 54:         Type:      \"CancelRequest\","
            ]
        },
        {
            "filename_of_changes": "close.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "11",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: package pgproto3",
                "// Line 2: ",
                "// Line 3: import (",
                "// Line 4:     \"bytes\"",
                "// Line 5:     \"encoding/json\"",
                "// Line 6:     \"errors\"",
                "// Line 7: ",
                "// vulnerable line: 8: \"github.com/jackc/pgio\"",
                "// Line 9: )",
                "// Line 10: ",
                "// Line 11: type Close struct {",
                "// Line 12:     ObjectType byte // 'S' = prepared statement, 'P' = portal",
                "// Line 13:     Name       string",
                "// Line 14: }",
                "// Line 15: ",
                "// Line 16: // Frontend identifies this message as sendable by a PostgreSQL frontend.",
                "// Line 17: func (*Close) Frontend() {}",
                "// Line 18: ",
                "// Line 30:     if idx != len(src[rp:])-1 {",
                "// Line 31:         return &invalidMessageFormatErr{messageType: \"Close\"}",
                "// Line 32:     }",
                "// Line 33: ",
                "// Line 34:     dst.Name = string(src[rp : len(src)-1])",
                "// Line 35: ",
                "// Line 36:     return nil",
                "// Line 37: }",
                "// Line 38: ",
                "// Line 39: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 40: func (src *Close) Encode(dst []byte) []byte {",
                "// vulnerable line: 41: dst = append(dst, 'C')",
                "// vulnerable line: 42: sp := len(dst)",
                "// vulnerable line: 43: dst = pgio.AppendInt32(dst, -1)",
                "// Line 44: ",
                "// Line 45:     dst = append(dst, src.ObjectType)",
                "// Line 46:     dst = append(dst, src.Name...)",
                "// Line 47:     dst = append(dst, 0)",
                "// Line 48: ",
                "// vulnerable line: 49: pgio.SetInt32(dst[sp:], int32(len(dst[sp:])))",
                "// Line 50: ",
                "// vulnerable line: 51: return dst",
                "// Line 52: }",
                "// Line 53: ",
                "// Line 54: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 55: func (src Close) MarshalJSON() ([]byte, error) {",
                "// Line 56:     return json.Marshal(struct {",
                "// Line 57:         Type       string",
                "// Line 58:         ObjectType string",
                "// Line 59:         Name       string",
                "// Line 60:     }{",
                "// Line 61:         Type:       \"Close\","
            ]
        },
        {
            "filename_of_changes": "close_complete.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 13: // type identifier and 4 byte message length.",
                "// Line 14: func (dst *CloseComplete) Decode(src []byte) error {",
                "// Line 15:     if len(src) != 0 {",
                "// Line 16:         return &invalidMessageLenErr{messageType: \"CloseComplete\", expectedLen: 0, actualLen: len(src)}",
                "// Line 17:     }",
                "// Line 18: ",
                "// Line 19:     return nil",
                "// Line 20: }",
                "// Line 21: ",
                "// Line 22: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 23: func (src *CloseComplete) Encode(dst []byte) []byte {",
                "// vulnerable line: 24: return append(dst, '3', 0, 0, 0, 4)",
                "// Line 25: }",
                "// Line 26: ",
                "// Line 27: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 28: func (src CloseComplete) MarshalJSON() ([]byte, error) {",
                "// Line 29:     return json.Marshal(struct {",
                "// Line 30:         Type string",
                "// Line 31:     }{",
                "// Line 32:         Type: \"CloseComplete\",",
                "// Line 33:     })",
                "// Line 34: }"
            ]
        },
        {
            "filename_of_changes": "command_complete.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "11",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: package pgproto3",
                "// Line 2: ",
                "// Line 3: import (",
                "// Line 4:     \"bytes\"",
                "// Line 5:     \"encoding/json\"",
                "// Line 6: ",
                "// vulnerable line: 7: \"github.com/jackc/pgio\"",
                "// Line 8: )",
                "// Line 9: ",
                "// Line 10: type CommandComplete struct {",
                "// Line 11:     CommandTag []byte",
                "// Line 12: }",
                "// Line 13: ",
                "// Line 14: // Backend identifies this message as sendable by the PostgreSQL backend.",
                "// Line 15: func (*CommandComplete) Backend() {}",
                "// Line 16: ",
                "// Line 17: // Decode decodes src into dst. src must contain the complete message with the exception of the initial 1 byte message",
                "// Line 21:     if idx != len(src)-1 {",
                "// Line 22:         return &invalidMessageFormatErr{messageType: \"CommandComplete\"}",
                "// Line 23:     }",
                "// Line 24: ",
                "// Line 25:     dst.CommandTag = src[:idx]",
                "// Line 26: ",
                "// Line 27:     return nil",
                "// Line 28: }",
                "// Line 29: ",
                "// Line 30: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 31: func (src *CommandComplete) Encode(dst []byte) []byte {",
                "// vulnerable line: 32: dst = append(dst, 'C')",
                "// vulnerable line: 33: sp := len(dst)",
                "// vulnerable line: 34: dst = pgio.AppendInt32(dst, -1)",
                "// Line 35: ",
                "// Line 36:     dst = append(dst, src.CommandTag...)",
                "// Line 37:     dst = append(dst, 0)",
                "// Line 38: ",
                "// vulnerable line: 39: pgio.SetInt32(dst[sp:], int32(len(dst[sp:])))",
                "// Line 40: ",
                "// vulnerable line: 41: return dst",
                "// Line 42: }",
                "// Line 43: ",
                "// Line 44: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 45: func (src CommandComplete) MarshalJSON() ([]byte, error) {",
                "// Line 46:     return json.Marshal(struct {",
                "// Line 47:         Type       string",
                "// Line 48:         CommandTag string",
                "// Line 49:     }{",
                "// Line 50:         Type:       \"CommandComplete\",",
                "// Line 51:         CommandTag: string(src.CommandTag),"
            ]
        },
        {
            "filename_of_changes": "copy_both_response.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "7",
            "number_of_lines_deleted_vulnerable_to_cve": "7",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 37:     for i := 0; i < columnCount; i++ {",
                "// Line 38:         columnFormatCodes[i] = binary.BigEndian.Uint16(buf.Next(2))",
                "// Line 39:     }",
                "// Line 40: ",
                "// Line 41:     *dst = CopyBothResponse{OverallFormat: overallFormat, ColumnFormatCodes: columnFormatCodes}",
                "// Line 42: ",
                "// Line 43:     return nil",
                "// Line 44: }",
                "// Line 45: ",
                "// Line 46: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 47: func (src *CopyBothResponse) Encode(dst []byte) []byte {",
                "// vulnerable line: 48: dst = append(dst, 'W')",
                "// vulnerable line: 49: sp := len(dst)",
                "// vulnerable line: 50: dst = pgio.AppendInt32(dst, -1)",
                "// Line 51:     dst = append(dst, src.OverallFormat)",
                "// Line 52:     dst = pgio.AppendUint16(dst, uint16(len(src.ColumnFormatCodes)))",
                "// Line 53:     for _, fc := range src.ColumnFormatCodes {",
                "// Line 54:         dst = pgio.AppendUint16(dst, fc)",
                "// Line 55:     }",
                "// Line 56: ",
                "// vulnerable line: 57: pgio.SetInt32(dst[sp:], int32(len(dst[sp:])))",
                "// Line 58: ",
                "// vulnerable line: 59: return dst",
                "// Line 60: }",
                "// Line 61: ",
                "// Line 62: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 63: func (src CopyBothResponse) MarshalJSON() ([]byte, error) {",
                "// Line 64:     return json.Marshal(struct {",
                "// Line 65:         Type              string",
                "// Line 66:         ColumnFormatCodes []uint16",
                "// Line 67:     }{",
                "// Line 68:         Type:              \"CopyBothResponse\",",
                "// Line 69:         ColumnFormatCodes: src.ColumnFormatCodes,"
            ]
        },
        {
            "filename_of_changes": "copy_both_response_test.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 6:     \"github.com/jackc/pgproto3/v2\"",
                "// Line 7:     \"github.com/stretchr/testify/assert\"",
                "// Line 8: )",
                "// Line 9: ",
                "// Line 10: func TestEncodeDecode(t *testing.T) {",
                "// Line 11:     srcBytes := []byte{'W', 0x00, 0x00, 0x00, 0x0b, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01}",
                "// Line 12:     dstResp := pgproto3.CopyBothResponse{}",
                "// Line 13:     err := dstResp.Decode(srcBytes[5:])",
                "// Line 14:     assert.NoError(t, err, \"No errors on decode\")",
                "// Line 15:     dstBytes := []byte{}",
                "// vulnerable line: 16: dstBytes = dstResp.Encode(dstBytes)",
                "// Line 17:     assert.EqualValues(t, srcBytes, dstBytes, \"Expecting src & dest bytes to match\")",
                "// Line 18: }"
            ]
        },
        {
            "filename_of_changes": "copy_data.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "6",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: package pgproto3",
                "// Line 2: ",
                "// Line 3: import (",
                "// Line 4:     \"encoding/hex\"",
                "// Line 5:     \"encoding/json\"",
                "// Line 6: ",
                "// vulnerable line: 7: \"github.com/jackc/pgio\"",
                "// Line 8: )",
                "// Line 9: ",
                "// Line 10: type CopyData struct {",
                "// Line 11:     Data []byte",
                "// Line 12: }",
                "// Line 13: ",
                "// Line 14: // Backend identifies this message as sendable by the PostgreSQL backend.",
                "// Line 15: func (*CopyData) Backend() {}",
                "// Line 16: ",
                "// Line 17: // Frontend identifies this message as sendable by a PostgreSQL frontend.",
                "// Line 18: func (*CopyData) Frontend() {}",
                "// Line 19: ",
                "// Line 20: // Decode decodes src into dst. src must contain the complete message with the exception of the initial 1 byte message",
                "// Line 21: // type identifier and 4 byte message length.",
                "// Line 22: func (dst *CopyData) Decode(src []byte) error {",
                "// Line 23:     dst.Data = src",
                "// Line 24:     return nil",
                "// Line 25: }",
                "// Line 26: ",
                "// Line 27: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 28: func (src *CopyData) Encode(dst []byte) []byte {",
                "// vulnerable line: 29: dst = append(dst, 'd')",
                "// vulnerable line: 30: dst = pgio.AppendInt32(dst, int32(4+len(src.Data)))",
                "// Line 31:     dst = append(dst, src.Data...)",
                "// vulnerable line: 32: return dst",
                "// Line 33: }",
                "// Line 34: ",
                "// Line 35: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 36: func (src CopyData) MarshalJSON() ([]byte, error) {",
                "// Line 37:     return json.Marshal(struct {",
                "// Line 38:         Type string",
                "// Line 39:         Data string",
                "// Line 40:     }{",
                "// Line 41:         Type: \"CopyData\",",
                "// Line 42:         Data: hex.EncodeToString(src.Data),"
            ]
        },
        {
            "filename_of_changes": "copy_done.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 17: // type identifier and 4 byte message length.",
                "// Line 18: func (dst *CopyDone) Decode(src []byte) error {",
                "// Line 19:     if len(src) != 0 {",
                "// Line 20:         return &invalidMessageLenErr{messageType: \"CopyDone\", expectedLen: 0, actualLen: len(src)}",
                "// Line 21:     }",
                "// Line 22: ",
                "// Line 23:     return nil",
                "// Line 24: }",
                "// Line 25: ",
                "// Line 26: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 27: func (src *CopyDone) Encode(dst []byte) []byte {",
                "// vulnerable line: 28: return append(dst, 'c', 0, 0, 0, 4)",
                "// Line 29: }",
                "// Line 30: ",
                "// Line 31: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 32: func (src CopyDone) MarshalJSON() ([]byte, error) {",
                "// Line 33:     return json.Marshal(struct {",
                "// Line 34:         Type string",
                "// Line 35:     }{",
                "// Line 36:         Type: \"CopyDone\",",
                "// Line 37:     })",
                "// Line 38: }"
            ]
        },
        {
            "filename_of_changes": "copy_fail.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "11",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: package pgproto3",
                "// Line 2: ",
                "// Line 3: import (",
                "// Line 4:     \"bytes\"",
                "// Line 5:     \"encoding/json\"",
                "// Line 6: ",
                "// vulnerable line: 7: \"github.com/jackc/pgio\"",
                "// Line 8: )",
                "// Line 9: ",
                "// Line 10: type CopyFail struct {",
                "// Line 11:     Message string",
                "// Line 12: }",
                "// Line 13: ",
                "// Line 14: // Frontend identifies this message as sendable by a PostgreSQL frontend.",
                "// Line 15: func (*CopyFail) Frontend() {}",
                "// Line 16: ",
                "// Line 17: // Decode decodes src into dst. src must contain the complete message with the exception of the initial 1 byte message",
                "// Line 21:     if idx != len(src)-1 {",
                "// Line 22:         return &invalidMessageFormatErr{messageType: \"CopyFail\"}",
                "// Line 23:     }",
                "// Line 24: ",
                "// Line 25:     dst.Message = string(src[:idx])",
                "// Line 26: ",
                "// Line 27:     return nil",
                "// Line 28: }",
                "// Line 29: ",
                "// Line 30: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 31: func (src *CopyFail) Encode(dst []byte) []byte {",
                "// vulnerable line: 32: dst = append(dst, 'f')",
                "// vulnerable line: 33: sp := len(dst)",
                "// vulnerable line: 34: dst = pgio.AppendInt32(dst, -1)",
                "// Line 35: ",
                "// Line 36:     dst = append(dst, src.Message...)",
                "// Line 37:     dst = append(dst, 0)",
                "// Line 38: ",
                "// vulnerable line: 39: pgio.SetInt32(dst[sp:], int32(len(dst[sp:])))",
                "// Line 40: ",
                "// vulnerable line: 41: return dst",
                "// Line 42: }",
                "// Line 43: ",
                "// Line 44: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 45: func (src CopyFail) MarshalJSON() ([]byte, error) {",
                "// Line 46:     return json.Marshal(struct {",
                "// Line 47:         Type    string",
                "// Line 48:         Message string",
                "// Line 49:     }{",
                "// Line 50:         Type:    \"CopyFail\",",
                "// Line 51:         Message: src.Message,"
            ]
        },
        {
            "filename_of_changes": "copy_in_response.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "7",
            "number_of_lines_deleted_vulnerable_to_cve": "7",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 37:     for i := 0; i < columnCount; i++ {",
                "// Line 38:         columnFormatCodes[i] = binary.BigEndian.Uint16(buf.Next(2))",
                "// Line 39:     }",
                "// Line 40: ",
                "// Line 41:     *dst = CopyInResponse{OverallFormat: overallFormat, ColumnFormatCodes: columnFormatCodes}",
                "// Line 42: ",
                "// Line 43:     return nil",
                "// Line 44: }",
                "// Line 45: ",
                "// Line 46: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 47: func (src *CopyInResponse) Encode(dst []byte) []byte {",
                "// vulnerable line: 48: dst = append(dst, 'G')",
                "// vulnerable line: 49: sp := len(dst)",
                "// vulnerable line: 50: dst = pgio.AppendInt32(dst, -1)",
                "// Line 51: ",
                "// Line 52:     dst = append(dst, src.OverallFormat)",
                "// Line 53:     dst = pgio.AppendUint16(dst, uint16(len(src.ColumnFormatCodes)))",
                "// Line 54:     for _, fc := range src.ColumnFormatCodes {",
                "// Line 55:         dst = pgio.AppendUint16(dst, fc)",
                "// Line 56:     }",
                "// Line 57: ",
                "// vulnerable line: 58: pgio.SetInt32(dst[sp:], int32(len(dst[sp:])))",
                "// Line 59: ",
                "// vulnerable line: 60: return dst",
                "// Line 61: }",
                "// Line 62: ",
                "// Line 63: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 64: func (src CopyInResponse) MarshalJSON() ([]byte, error) {",
                "// Line 65:     return json.Marshal(struct {",
                "// Line 66:         Type              string",
                "// Line 67:         ColumnFormatCodes []uint16",
                "// Line 68:     }{",
                "// Line 69:         Type:              \"CopyInResponse\",",
                "// Line 70:         ColumnFormatCodes: src.ColumnFormatCodes,"
            ]
        },
        {
            "filename_of_changes": "copy_out_response.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "7",
            "number_of_lines_deleted_vulnerable_to_cve": "7",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 36:     for i := 0; i < columnCount; i++ {",
                "// Line 37:         columnFormatCodes[i] = binary.BigEndian.Uint16(buf.Next(2))",
                "// Line 38:     }",
                "// Line 39: ",
                "// Line 40:     *dst = CopyOutResponse{OverallFormat: overallFormat, ColumnFormatCodes: columnFormatCodes}",
                "// Line 41: ",
                "// Line 42:     return nil",
                "// Line 43: }",
                "// Line 44: ",
                "// Line 45: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 46: func (src *CopyOutResponse) Encode(dst []byte) []byte {",
                "// vulnerable line: 47: dst = append(dst, 'H')",
                "// vulnerable line: 48: sp := len(dst)",
                "// vulnerable line: 49: dst = pgio.AppendInt32(dst, -1)",
                "// Line 50: ",
                "// Line 51:     dst = append(dst, src.OverallFormat)",
                "// Line 52: ",
                "// Line 53:     dst = pgio.AppendUint16(dst, uint16(len(src.ColumnFormatCodes)))",
                "// Line 54:     for _, fc := range src.ColumnFormatCodes {",
                "// Line 55:         dst = pgio.AppendUint16(dst, fc)",
                "// Line 56:     }",
                "// Line 57: ",
                "// vulnerable line: 58: pgio.SetInt32(dst[sp:], int32(len(dst[sp:])))",
                "// Line 59: ",
                "// vulnerable line: 60: return dst",
                "// Line 61: }",
                "// Line 62: ",
                "// Line 63: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 64: func (src CopyOutResponse) MarshalJSON() ([]byte, error) {",
                "// Line 65:     return json.Marshal(struct {",
                "// Line 66:         Type              string",
                "// Line 67:         ColumnFormatCodes []uint16",
                "// Line 68:     }{",
                "// Line 69:         Type:              \"CopyOutResponse\",",
                "// Line 70:         ColumnFormatCodes: src.ColumnFormatCodes,"
            ]
        },
        {
            "filename_of_changes": "data_row.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "8",
            "number_of_lines_deleted_vulnerable_to_cve": "7",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 56: ",
                "// Line 57:             dst.Values[i] = src[rp : rp+msgSize : rp+msgSize]",
                "// Line 58:             rp += msgSize",
                "// Line 59:         }",
                "// Line 60:     }",
                "// Line 61: ",
                "// Line 62:     return nil",
                "// Line 63: }",
                "// Line 64: ",
                "// Line 65: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 66: func (src *DataRow) Encode(dst []byte) []byte {",
                "// vulnerable line: 67: dst = append(dst, 'D')",
                "// vulnerable line: 68: sp := len(dst)",
                "// vulnerable line: 69: dst = pgio.AppendInt32(dst, -1)",
                "// Line 70: ",
                "// Line 71:     dst = pgio.AppendUint16(dst, uint16(len(src.Values)))",
                "// Line 72:     for _, v := range src.Values {",
                "// Line 73:         if v == nil {",
                "// vulnerable line: 74: dst = pgio.AppendInt32(dst, -1)",
                "// Line 75:             continue",
                "// Line 76:         }",
                "// Line 77: ",
                "// Line 78:         dst = pgio.AppendInt32(dst, int32(len(v)))",
                "// Line 79:         dst = append(dst, v...)",
                "// Line 80:     }",
                "// Line 81: ",
                "// vulnerable line: 82: pgio.SetInt32(dst[sp:], int32(len(dst[sp:])))",
                "// Line 83: ",
                "// vulnerable line: 84: return dst",
                "// Line 85: }",
                "// Line 86: ",
                "// Line 87: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 88: func (src DataRow) MarshalJSON() ([]byte, error) {",
                "// Line 89:     formattedValues := make([]map[string]string, len(src.Values))",
                "// Line 90:     for i, v := range src.Values {",
                "// Line 91:         if v == nil {",
                "// Line 92:             continue",
                "// Line 93:         }",
                "// Line 94: "
            ]
        },
        {
            "filename_of_changes": "describe.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "11",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: package pgproto3",
                "// Line 2: ",
                "// Line 3: import (",
                "// Line 4:     \"bytes\"",
                "// Line 5:     \"encoding/json\"",
                "// Line 6:     \"errors\"",
                "// Line 7: ",
                "// vulnerable line: 8: \"github.com/jackc/pgio\"",
                "// Line 9: )",
                "// Line 10: ",
                "// Line 11: type Describe struct {",
                "// Line 12:     ObjectType byte // 'S' = prepared statement, 'P' = portal",
                "// Line 13:     Name       string",
                "// Line 14: }",
                "// Line 15: ",
                "// Line 16: // Frontend identifies this message as sendable by a PostgreSQL frontend.",
                "// Line 17: func (*Describe) Frontend() {}",
                "// Line 18: ",
                "// Line 30:     if idx != len(src[rp:])-1 {",
                "// Line 31:         return &invalidMessageFormatErr{messageType: \"Describe\"}",
                "// Line 32:     }",
                "// Line 33: ",
                "// Line 34:     dst.Name = string(src[rp : len(src)-1])",
                "// Line 35: ",
                "// Line 36:     return nil",
                "// Line 37: }",
                "// Line 38: ",
                "// Line 39: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 40: func (src *Describe) Encode(dst []byte) []byte {",
                "// vulnerable line: 41: dst = append(dst, 'D')",
                "// vulnerable line: 42: sp := len(dst)",
                "// vulnerable line: 43: dst = pgio.AppendInt32(dst, -1)",
                "// Line 44: ",
                "// Line 45:     dst = append(dst, src.ObjectType)",
                "// Line 46:     dst = append(dst, src.Name...)",
                "// Line 47:     dst = append(dst, 0)",
                "// Line 48: ",
                "// vulnerable line: 49: pgio.SetInt32(dst[sp:], int32(len(dst[sp:])))",
                "// Line 50: ",
                "// vulnerable line: 51: return dst",
                "// Line 52: }",
                "// Line 53: ",
                "// Line 54: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 55: func (src Describe) MarshalJSON() ([]byte, error) {",
                "// Line 56:     return json.Marshal(struct {",
                "// Line 57:         Type       string",
                "// Line 58:         ObjectType string",
                "// Line 59:         Name       string",
                "// Line 60:     }{",
                "// Line 61:         Type:       \"Describe\","
            ]
        },
        {
            "filename_of_changes": "empty_query_response.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 13: // type identifier and 4 byte message length.",
                "// Line 14: func (dst *EmptyQueryResponse) Decode(src []byte) error {",
                "// Line 15:     if len(src) != 0 {",
                "// Line 16:         return &invalidMessageLenErr{messageType: \"EmptyQueryResponse\", expectedLen: 0, actualLen: len(src)}",
                "// Line 17:     }",
                "// Line 18: ",
                "// Line 19:     return nil",
                "// Line 20: }",
                "// Line 21: ",
                "// Line 22: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 23: func (src *EmptyQueryResponse) Encode(dst []byte) []byte {",
                "// vulnerable line: 24: return append(dst, 'I', 0, 0, 0, 4)",
                "// Line 25: }",
                "// Line 26: ",
                "// Line 27: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 28: func (src EmptyQueryResponse) MarshalJSON() ([]byte, error) {",
                "// Line 29:     return json.Marshal(struct {",
                "// Line 30:         Type string",
                "// Line 31:     }{",
                "// Line 32:         Type: \"EmptyQueryResponse\",",
                "// Line 33:     })",
                "// Line 34: }"
            ]
        },
        {
            "filename_of_changes": "execute.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "10",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 29: ",
                "// Line 30:     if buf.Len() < 4 {",
                "// Line 31:         return &invalidMessageFormatErr{messageType: \"Execute\"}",
                "// Line 32:     }",
                "// Line 33:     dst.MaxRows = binary.BigEndian.Uint32(buf.Next(4))",
                "// Line 34: ",
                "// Line 35:     return nil",
                "// Line 36: }",
                "// Line 37: ",
                "// Line 38: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 39: func (src *Execute) Encode(dst []byte) []byte {",
                "// vulnerable line: 40: dst = append(dst, 'E')",
                "// vulnerable line: 41: sp := len(dst)",
                "// vulnerable line: 42: dst = pgio.AppendInt32(dst, -1)",
                "// Line 43: ",
                "// Line 44:     dst = append(dst, src.Portal...)",
                "// Line 45:     dst = append(dst, 0)",
                "// Line 46: ",
                "// Line 47:     dst = pgio.AppendUint32(dst, src.MaxRows)",
                "// Line 48: ",
                "// vulnerable line: 49: pgio.SetInt32(dst[sp:], int32(len(dst[sp:])))",
                "// Line 50: ",
                "// vulnerable line: 51: return dst",
                "// Line 52: }",
                "// Line 53: ",
                "// Line 54: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 55: func (src Execute) MarshalJSON() ([]byte, error) {",
                "// Line 56:     return json.Marshal(struct {",
                "// Line 57:         Type    string",
                "// Line 58:         Portal  string",
                "// Line 59:         MaxRows uint32",
                "// Line 60:     }{",
                "// Line 61:         Type:    \"Execute\","
            ]
        },
        {
            "filename_of_changes": "flush.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 13: // type identifier and 4 byte message length.",
                "// Line 14: func (dst *Flush) Decode(src []byte) error {",
                "// Line 15:     if len(src) != 0 {",
                "// Line 16:         return &invalidMessageLenErr{messageType: \"Flush\", expectedLen: 0, actualLen: len(src)}",
                "// Line 17:     }",
                "// Line 18: ",
                "// Line 19:     return nil",
                "// Line 20: }",
                "// Line 21: ",
                "// Line 22: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 23: func (src *Flush) Encode(dst []byte) []byte {",
                "// vulnerable line: 24: return append(dst, 'H', 0, 0, 0, 4)",
                "// Line 25: }",
                "// Line 26: ",
                "// Line 27: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 28: func (src Flush) MarshalJSON() ([]byte, error) {",
                "// Line 29:     return json.Marshal(struct {",
                "// Line 30:         Type string",
                "// Line 31:     }{",
                "// Line 32:         Type: \"Flush\",",
                "// Line 33:     })",
                "// Line 34: }"
            ]
        },
        {
            "filename_of_changes": "frontend.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "5",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 50:     authType   uint32",
                "// Line 51: }",
                "// Line 52: ",
                "// Line 53: // NewFrontend creates a new Frontend.",
                "// Line 54: func NewFrontend(cr ChunkReader, w io.Writer) *Frontend {",
                "// Line 55:     return &Frontend{cr: cr, w: w}",
                "// Line 56: }",
                "// Line 57: ",
                "// Line 58: // Send sends a message to the backend.",
                "// Line 59: func (f *Frontend) Send(msg FrontendMessage) error {",
                "// vulnerable line: 60: _, err := f.w.Write(msg.Encode(nil))",
                "// Line 61:     return err",
                "// Line 62: }",
                "// Line 63: ",
                "// Line 64: func translateEOFtoErrUnexpectedEOF(err error) error {",
                "// Line 65:     if err == io.EOF {",
                "// Line 66:         return io.ErrUnexpectedEOF",
                "// Line 67:     }",
                "// Line 68:     return err",
                "// Line 69: }",
                "// Line 70: "
            ]
        },
        {
            "filename_of_changes": "function_call.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "14",
            "number_of_lines_deleted_vulnerable_to_cve": "6",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 63:     // The format code for the function result. Must presently be zero (text) or one (binary).",
                "// Line 64:     resultFormatCode := binary.BigEndian.Uint16(src[rp:])",
                "// Line 65:     if resultFormatCode != 0 && resultFormatCode != 1 {",
                "// Line 66:         return &invalidMessageFormatErr{messageType: \"FunctionCall\"}",
                "// Line 67:     }",
                "// Line 68:     dst.ResultFormatCode = resultFormatCode",
                "// Line 69:     return nil",
                "// Line 70: }",
                "// Line 71: ",
                "// Line 72: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 73: func (src *FunctionCall) Encode(dst []byte) []byte {",
                "// vulnerable line: 74: dst = append(dst, 'F')",
                "// vulnerable line: 75: sp := len(dst)",
                "// vulnerable line: 76: dst = pgio.AppendUint32(dst, 0) // Unknown length, set it at the end",
                "// Line 77:     dst = pgio.AppendUint32(dst, src.Function)",
                "// Line 78:     dst = pgio.AppendUint16(dst, uint16(len(src.ArgFormatCodes)))",
                "// Line 79:     for _, argFormatCode := range src.ArgFormatCodes {",
                "// Line 80:         dst = pgio.AppendUint16(dst, argFormatCode)",
                "// Line 81:     }",
                "// Line 82:     dst = pgio.AppendUint16(dst, uint16(len(src.Arguments)))",
                "// Line 83:     for _, argument := range src.Arguments {",
                "// Line 84:         if argument == nil {",
                "// Line 85:             dst = pgio.AppendInt32(dst, -1)",
                "// Line 86:         } else {",
                "// Line 87:             dst = pgio.AppendInt32(dst, int32(len(argument)))",
                "// Line 88:             dst = append(dst, argument...)",
                "// Line 89:         }",
                "// Line 90:     }",
                "// Line 91:     dst = pgio.AppendUint16(dst, src.ResultFormatCode)",
                "// vulnerable line: 92: pgio.SetInt32(dst[sp:], int32(len(dst[sp:])))",
                "// vulnerable line: 93: return dst",
                "// Line 94: }"
            ]
        },
        {
            "filename_of_changes": "function_call_response.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "7",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 32: ",
                "// Line 33:     if len(src[rp:]) != resultSize {",
                "// Line 34:         return &invalidMessageFormatErr{messageType: \"FunctionCallResponse\"}",
                "// Line 35:     }",
                "// Line 36: ",
                "// Line 37:     dst.Result = src[rp:]",
                "// Line 38:     return nil",
                "// Line 39: }",
                "// Line 40: ",
                "// Line 41: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 42: func (src *FunctionCallResponse) Encode(dst []byte) []byte {",
                "// vulnerable line: 43: dst = append(dst, 'V')",
                "// vulnerable line: 44: sp := len(dst)",
                "// vulnerable line: 45: dst = pgio.AppendInt32(dst, -1)",
                "// Line 46: ",
                "// Line 47:     if src.Result == nil {",
                "// vulnerable line: 48: dst = pgio.AppendInt32(dst, -1)",
                "// Line 49:     } else {",
                "// Line 50:         dst = pgio.AppendInt32(dst, int32(len(src.Result)))",
                "// Line 51:         dst = append(dst, src.Result...)",
                "// Line 52:     }",
                "// Line 53: ",
                "// vulnerable line: 54: pgio.SetInt32(dst[sp:], int32(len(dst[sp:])))",
                "// Line 55: ",
                "// vulnerable line: 56: return dst",
                "// Line 57: }",
                "// Line 58: ",
                "// Line 59: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 60: func (src FunctionCallResponse) MarshalJSON() ([]byte, error) {",
                "// Line 61:     var formattedValue map[string]string",
                "// Line 62:     var hasNonPrintable bool",
                "// Line 63:     for _, b := range src.Result {",
                "// Line 64:         if b < 32 {",
                "// Line 65:             hasNonPrintable = true",
                "// Line 66:             break"
            ]
        },
        {
            "filename_of_changes": "function_call_test.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "5",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 23:         {\"invalid result format code\", fields{uint32(123), []uint16{1, 1, 0, 1}, [][]byte{[]byte(\"foo\"), []byte(\"bar\"), []byte(\"baz\")}, uint16(2)}, true},",
                "// Line 24:     }",
                "// Line 25:     for _, tt := range tests {",
                "// Line 26:         t.Run(tt.name, func(t *testing.T) {",
                "// Line 27:             src := &FunctionCall{",
                "// Line 28:                 Function:         tt.fields.Function,",
                "// Line 29:                 ArgFormatCodes:   tt.fields.ArgFormatCodes,",
                "// Line 30:                 Arguments:        tt.fields.Arguments,",
                "// Line 31:                 ResultFormatCode: tt.fields.ResultFormatCode,",
                "// Line 32:             }",
                "// vulnerable line: 33: encoded := src.Encode([]byte{})",
                "// Line 34:             dst := &FunctionCall{}",
                "// Line 35:             // Check the header",
                "// Line 36:             msgTypeCode := encoded[0]",
                "// Line 37:             if msgTypeCode != 'F' {",
                "// Line 38:                 t.Errorf(\"msgTypeCode %v should be 'F'\", msgTypeCode)",
                "// Line 39:                 return",
                "// Line 40:             }",
                "// Line 41:             // Check length, does not include type code character",
                "// Line 42:             l := binary.BigEndian.Uint32(encoded[1:5])",
                "// Line 43:             if int(l) != (len(encoded) - 1) {",
                "// Line 44:                 t.Errorf(\"Incorrect message length, got = %v, wanted = %v\", l, len(encoded))",
                "// Line 45:             }",
                "// Line 46:             // Check decoding works as expected",
                "// vulnerable line: 47: err := dst.Decode(encoded[5:])",
                "// Line 48:             if err != nil {",
                "// Line 49:                 if !tt.wantErr {",
                "// Line 50:                     t.Errorf(\"FunctionCall.Decode() error = %v, wantErr %v\", err, tt.wantErr)",
                "// Line 51:                 }",
                "// Line 52:                 return",
                "// Line 53:             }",
                "// Line 54: ",
                "// Line 55:             if !reflect.DeepEqual(src, dst) {",
                "// Line 56:                 t.Error(\"difference after encode / decode cycle\")",
                "// Line 57:                 t.Errorf(\"src = %v\", src)"
            ]
        },
        {
            "filename_of_changes": "gss_enc_request.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 24:     requestCode := binary.BigEndian.Uint32(src)",
                "// Line 25: ",
                "// Line 26:     if requestCode != gssEncReqNumber {",
                "// Line 27:         return errors.New(\"bad gss encoding request code\")",
                "// Line 28:     }",
                "// Line 29: ",
                "// Line 30:     return nil",
                "// Line 31: }",
                "// Line 32: ",
                "// Line 33: // Encode encodes src into dst. dst will include the 4 byte message length.",
                "// vulnerable line: 34: func (src *GSSEncRequest) Encode(dst []byte) []byte {",
                "// Line 35:     dst = pgio.AppendInt32(dst, 8)",
                "// Line 36:     dst = pgio.AppendInt32(dst, gssEncReqNumber)",
                "// vulnerable line: 37: return dst",
                "// Line 38: }",
                "// Line 39: ",
                "// Line 40: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 41: func (src GSSEncRequest) MarshalJSON() ([]byte, error) {",
                "// Line 42:     return json.Marshal(struct {",
                "// Line 43:         Type            string",
                "// Line 44:         ProtocolVersion uint32",
                "// Line 45:         Parameters      map[string]string",
                "// Line 46:     }{",
                "// Line 47:         Type: \"GSSEncRequest\","
            ]
        },
        {
            "filename_of_changes": "gss_response.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "5",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: package pgproto3",
                "// Line 2: ",
                "// Line 3: import (",
                "// Line 4:     \"encoding/json\"",
                "// vulnerable line: 5: \"github.com/jackc/pgio\"",
                "// Line 6: )",
                "// Line 7: ",
                "// Line 8: type GSSResponse struct {",
                "// Line 9:     Data []byte",
                "// Line 10: }",
                "// Line 11: ",
                "// Line 12: // Frontend identifies this message as sendable by a PostgreSQL frontend.",
                "// Line 13: func (g *GSSResponse) Frontend() {}",
                "// Line 14: ",
                "// Line 15: func (g *GSSResponse) Decode(data []byte) error {",
                "// Line 16:     g.Data = data",
                "// Line 17:     return nil",
                "// Line 18: }",
                "// Line 19: ",
                "// vulnerable line: 20: func (g *GSSResponse) Encode(dst []byte) []byte {",
                "// vulnerable line: 21: dst = append(dst, 'p')",
                "// vulnerable line: 22: dst = pgio.AppendInt32(dst, int32(4+len(g.Data)))",
                "// Line 23:     dst = append(dst, g.Data...)",
                "// vulnerable line: 24: return dst",
                "// Line 25: }",
                "// Line 26: ",
                "// Line 27: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 28: func (g *GSSResponse) MarshalJSON() ([]byte, error) {",
                "// Line 29:     return json.Marshal(struct {",
                "// Line 30:         Type string",
                "// Line 31:         Data []byte",
                "// Line 32:     }{",
                "// Line 33:         Type: \"GSSResponse\",",
                "// Line 34:         Data: g.Data,"
            ]
        },
        {
            "filename_of_changes": "no_data.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 13: // type identifier and 4 byte message length.",
                "// Line 14: func (dst *NoData) Decode(src []byte) error {",
                "// Line 15:     if len(src) != 0 {",
                "// Line 16:         return &invalidMessageLenErr{messageType: \"NoData\", expectedLen: 0, actualLen: len(src)}",
                "// Line 17:     }",
                "// Line 18: ",
                "// Line 19:     return nil",
                "// Line 20: }",
                "// Line 21: ",
                "// Line 22: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 23: func (src *NoData) Encode(dst []byte) []byte {",
                "// vulnerable line: 24: return append(dst, 'n', 0, 0, 0, 4)",
                "// Line 25: }",
                "// Line 26: ",
                "// Line 27: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 28: func (src NoData) MarshalJSON() ([]byte, error) {",
                "// Line 29:     return json.Marshal(struct {",
                "// Line 30:         Type string",
                "// Line 31:     }{",
                "// Line 32:         Type: \"NoData\",",
                "// Line 33:     })",
                "// Line 34: }"
            ]
        },
        {
            "filename_of_changes": "notice_response.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 5: // Backend identifies this message as sendable by the PostgreSQL backend.",
                "// Line 6: func (*NoticeResponse) Backend() {}",
                "// Line 7: ",
                "// Line 8: // Decode decodes src into dst. src must contain the complete message with the exception of the initial 1 byte message",
                "// Line 9: // type identifier and 4 byte message length.",
                "// Line 10: func (dst *NoticeResponse) Decode(src []byte) error {",
                "// Line 11:     return (*ErrorResponse)(dst).Decode(src)",
                "// Line 12: }",
                "// Line 13: ",
                "// Line 14: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 15: func (src *NoticeResponse) Encode(dst []byte) []byte {",
                "// vulnerable line: 16: return append(dst, (*ErrorResponse)(src).marshalBinary('N')...)",
                "// Line 17: }"
            ]
        },
        {
            "filename_of_changes": "notification_response.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "9",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 34:     if err != nil {",
                "// Line 35:         return err",
                "// Line 36:     }",
                "// Line 37:     payload := string(b[:len(b)-1])",
                "// Line 38: ",
                "// Line 39:     *dst = NotificationResponse{PID: pid, Channel: channel, Payload: payload}",
                "// Line 40:     return nil",
                "// Line 41: }",
                "// Line 42: ",
                "// Line 43: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 44: func (src *NotificationResponse) Encode(dst []byte) []byte {",
                "// vulnerable line: 45: dst = append(dst, 'A')",
                "// vulnerable line: 46: sp := len(dst)",
                "// vulnerable line: 47: dst = pgio.AppendInt32(dst, -1)",
                "// Line 48: ",
                "// Line 49:     dst = pgio.AppendUint32(dst, src.PID)",
                "// Line 50:     dst = append(dst, src.Channel...)",
                "// Line 51:     dst = append(dst, 0)",
                "// Line 52:     dst = append(dst, src.Payload...)",
                "// Line 53:     dst = append(dst, 0)",
                "// Line 54: ",
                "// vulnerable line: 55: pgio.SetInt32(dst[sp:], int32(len(dst[sp:])))",
                "// Line 56: ",
                "// vulnerable line: 57: return dst",
                "// Line 58: }",
                "// Line 59: ",
                "// Line 60: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 61: func (src NotificationResponse) MarshalJSON() ([]byte, error) {",
                "// Line 62:     return json.Marshal(struct {",
                "// Line 63:         Type    string",
                "// Line 64:         PID     uint32",
                "// Line 65:         Channel string",
                "// Line 66:         Payload string",
                "// Line 67:     }{"
            ]
        },
        {
            "filename_of_changes": "parameter_description.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "8",
            "number_of_lines_deleted_vulnerable_to_cve": "7",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 32:     *dst = ParameterDescription{ParameterOIDs: make([]uint32, parameterCount)}",
                "// Line 33: ",
                "// Line 34:     for i := 0; i < parameterCount; i++ {",
                "// Line 35:         dst.ParameterOIDs[i] = binary.BigEndian.Uint32(buf.Next(4))",
                "// Line 36:     }",
                "// Line 37: ",
                "// Line 38:     return nil",
                "// Line 39: }",
                "// Line 40: ",
                "// Line 41: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 42: func (src *ParameterDescription) Encode(dst []byte) []byte {",
                "// vulnerable line: 43: dst = append(dst, 't')",
                "// vulnerable line: 44: sp := len(dst)",
                "// vulnerable line: 45: dst = pgio.AppendInt32(dst, -1)",
                "// Line 46: ",
                "// Line 47:     dst = pgio.AppendUint16(dst, uint16(len(src.ParameterOIDs)))",
                "// Line 48:     for _, oid := range src.ParameterOIDs {",
                "// Line 49:         dst = pgio.AppendUint32(dst, oid)",
                "// Line 50:     }",
                "// Line 51: ",
                "// vulnerable line: 52: pgio.SetInt32(dst[sp:], int32(len(dst[sp:])))",
                "// Line 53: ",
                "// vulnerable line: 54: return dst",
                "// Line 55: }",
                "// Line 56: ",
                "// Line 57: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 58: func (src ParameterDescription) MarshalJSON() ([]byte, error) {",
                "// Line 59:     return json.Marshal(struct {",
                "// Line 60:         Type          string",
                "// Line 61:         ParameterOIDs []uint32",
                "// Line 62:     }{",
                "// Line 63:         Type:          \"ParameterDescription\",",
                "// Line 64:         ParameterOIDs: src.ParameterOIDs,"
            ]
        },
        {
            "filename_of_changes": "parameter_status.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "11",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: package pgproto3",
                "// Line 2: ",
                "// Line 3: import (",
                "// Line 4:     \"bytes\"",
                "// Line 5:     \"encoding/json\"",
                "// Line 6: ",
                "// vulnerable line: 7: \"github.com/jackc/pgio\"",
                "// Line 8: )",
                "// Line 9: ",
                "// Line 10: type ParameterStatus struct {",
                "// Line 11:     Name  string",
                "// Line 12:     Value string",
                "// Line 13: }",
                "// Line 14: ",
                "// Line 15: // Backend identifies this message as sendable by the PostgreSQL backend.",
                "// Line 16: func (*ParameterStatus) Backend() {}",
                "// Line 17: ",
                "// Line 30:     if err != nil {",
                "// Line 31:         return err",
                "// Line 32:     }",
                "// Line 33:     value := string(b[:len(b)-1])",
                "// Line 34: ",
                "// Line 35:     *dst = ParameterStatus{Name: name, Value: value}",
                "// Line 36:     return nil",
                "// Line 37: }",
                "// Line 38: ",
                "// Line 39: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 40: func (src *ParameterStatus) Encode(dst []byte) []byte {",
                "// vulnerable line: 41: dst = append(dst, 'S')",
                "// vulnerable line: 42: sp := len(dst)",
                "// vulnerable line: 43: dst = pgio.AppendInt32(dst, -1)",
                "// Line 44: ",
                "// Line 45:     dst = append(dst, src.Name...)",
                "// Line 46:     dst = append(dst, 0)",
                "// Line 47:     dst = append(dst, src.Value...)",
                "// Line 48:     dst = append(dst, 0)",
                "// Line 49: ",
                "// vulnerable line: 50: pgio.SetInt32(dst[sp:], int32(len(dst[sp:])))",
                "// Line 51: ",
                "// vulnerable line: 52: return dst",
                "// Line 53: }",
                "// Line 54: ",
                "// Line 55: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 56: func (ps ParameterStatus) MarshalJSON() ([]byte, error) {",
                "// Line 57:     return json.Marshal(struct {",
                "// Line 58:         Type  string",
                "// Line 59:         Name  string",
                "// Line 60:         Value string",
                "// Line 61:     }{",
                "// Line 62:         Type:  \"ParameterStatus\","
            ]
        },
        {
            "filename_of_changes": "parse.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "8",
            "number_of_lines_deleted_vulnerable_to_cve": "7",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 45:         if buf.Len() < 4 {",
                "// Line 46:             return &invalidMessageFormatErr{messageType: \"Parse\"}",
                "// Line 47:         }",
                "// Line 48:         dst.ParameterOIDs = append(dst.ParameterOIDs, binary.BigEndian.Uint32(buf.Next(4)))",
                "// Line 49:     }",
                "// Line 50: ",
                "// Line 51:     return nil",
                "// Line 52: }",
                "// Line 53: ",
                "// Line 54: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 55: func (src *Parse) Encode(dst []byte) []byte {",
                "// vulnerable line: 56: dst = append(dst, 'P')",
                "// vulnerable line: 57: sp := len(dst)",
                "// vulnerable line: 58: dst = pgio.AppendInt32(dst, -1)",
                "// Line 59: ",
                "// Line 60:     dst = append(dst, src.Name...)",
                "// Line 61:     dst = append(dst, 0)",
                "// Line 62:     dst = append(dst, src.Query...)",
                "// Line 63:     dst = append(dst, 0)",
                "// Line 64: ",
                "// Line 65:     dst = pgio.AppendUint16(dst, uint16(len(src.ParameterOIDs)))",
                "// Line 66:     for _, oid := range src.ParameterOIDs {",
                "// Line 67:         dst = pgio.AppendUint32(dst, oid)",
                "// Line 68:     }",
                "// Line 69: ",
                "// vulnerable line: 70: pgio.SetInt32(dst[sp:], int32(len(dst[sp:])))",
                "// Line 71: ",
                "// vulnerable line: 72: return dst",
                "// Line 73: }",
                "// Line 74: ",
                "// Line 75: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 76: func (src Parse) MarshalJSON() ([]byte, error) {",
                "// Line 77:     return json.Marshal(struct {",
                "// Line 78:         Type          string",
                "// Line 79:         Name          string",
                "// Line 80:         Query         string",
                "// Line 81:         ParameterOIDs []uint32",
                "// Line 82:     }{"
            ]
        },
        {
            "filename_of_changes": "parse_complete.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 13: // type identifier and 4 byte message length.",
                "// Line 14: func (dst *ParseComplete) Decode(src []byte) error {",
                "// Line 15:     if len(src) != 0 {",
                "// Line 16:         return &invalidMessageLenErr{messageType: \"ParseComplete\", expectedLen: 0, actualLen: len(src)}",
                "// Line 17:     }",
                "// Line 18: ",
                "// Line 19:     return nil",
                "// Line 20: }",
                "// Line 21: ",
                "// Line 22: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 23: func (src *ParseComplete) Encode(dst []byte) []byte {",
                "// vulnerable line: 24: return append(dst, '1', 0, 0, 0, 4)",
                "// Line 25: }",
                "// Line 26: ",
                "// Line 27: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 28: func (src ParseComplete) MarshalJSON() ([]byte, error) {",
                "// Line 29:     return json.Marshal(struct {",
                "// Line 30:         Type string",
                "// Line 31:     }{",
                "// Line 32:         Type: \"ParseComplete\",",
                "// Line 33:     })",
                "// Line 34: }"
            ]
        },
        {
            "filename_of_changes": "password_message.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "8",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: package pgproto3",
                "// Line 2: ",
                "// Line 3: import (",
                "// Line 4:     \"bytes\"",
                "// Line 5:     \"encoding/json\"",
                "// Line 6: ",
                "// vulnerable line: 7: \"github.com/jackc/pgio\"",
                "// Line 8: )",
                "// Line 9: ",
                "// Line 10: type PasswordMessage struct {",
                "// Line 11:     Password string",
                "// Line 12: }",
                "// Line 13: ",
                "// Line 14: // Frontend identifies this message as sendable by a PostgreSQL frontend.",
                "// Line 15: func (*PasswordMessage) Frontend() {}",
                "// Line 16: ",
                "// Line 17: // Frontend identifies this message as an authentication response.",
                "// Line 25:     b, err := buf.ReadBytes(0)",
                "// Line 26:     if err != nil {",
                "// Line 27:         return err",
                "// Line 28:     }",
                "// Line 29:     dst.Password = string(b[:len(b)-1])",
                "// Line 30: ",
                "// Line 31:     return nil",
                "// Line 32: }",
                "// Line 33: ",
                "// Line 34: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 35: func (src *PasswordMessage) Encode(dst []byte) []byte {",
                "// vulnerable line: 36: dst = append(dst, 'p')",
                "// vulnerable line: 37: dst = pgio.AppendInt32(dst, int32(4+len(src.Password)+1))",
                "// Line 38: ",
                "// Line 39:     dst = append(dst, src.Password...)",
                "// Line 40:     dst = append(dst, 0)",
                "// Line 41: ",
                "// vulnerable line: 42: return dst",
                "// Line 43: }",
                "// Line 44: ",
                "// Line 45: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 46: func (src PasswordMessage) MarshalJSON() ([]byte, error) {",
                "// Line 47:     return json.Marshal(struct {",
                "// Line 48:         Type     string",
                "// Line 49:         Password string",
                "// Line 50:     }{",
                "// Line 51:         Type:     \"PasswordMessage\",",
                "// Line 52:         Password: src.Password,"
            ]
        },
        {
            "filename_of_changes": "pgproto3.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "27",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 7: )",
                "// Line 8: ",
                "// Line 9: // Message is the interface implemented by an object that can decode and encode",
                "// Line 10: // a particular PostgreSQL message.",
                "// Line 11: type Message interface {",
                "// Line 12:     // Decode is allowed and expected to retain a reference to data after",
                "// Line 13:     // returning (unlike encoding.BinaryUnmarshaler).",
                "// Line 14:     Decode(data []byte) error",
                "// Line 15: ",
                "// Line 16:     // Encode appends itself to dst and returns the new buffer.",
                "// vulnerable line: 17: Encode(dst []byte) []byte",
                "// Line 18: }",
                "// Line 19: ",
                "// Line 20: type FrontendMessage interface {",
                "// Line 21:     Message",
                "// Line 22:     Frontend() // no-op method to distinguish frontend from backend methods",
                "// Line 23: }",
                "// Line 24: ",
                "// Line 25: type BackendMessage interface {",
                "// Line 26:     Message",
                "// Line 27:     Backend() // no-op method to distinguish frontend from backend methods"
            ]
        },
        {
            "filename_of_changes": "portal_suspended.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 13: // type identifier and 4 byte message length.",
                "// Line 14: func (dst *PortalSuspended) Decode(src []byte) error {",
                "// Line 15:     if len(src) != 0 {",
                "// Line 16:         return &invalidMessageLenErr{messageType: \"PortalSuspended\", expectedLen: 0, actualLen: len(src)}",
                "// Line 17:     }",
                "// Line 18: ",
                "// Line 19:     return nil",
                "// Line 20: }",
                "// Line 21: ",
                "// Line 22: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 23: func (src *PortalSuspended) Encode(dst []byte) []byte {",
                "// vulnerable line: 24: return append(dst, 's', 0, 0, 0, 4)",
                "// Line 25: }",
                "// Line 26: ",
                "// Line 27: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 28: func (src PortalSuspended) MarshalJSON() ([]byte, error) {",
                "// Line 29:     return json.Marshal(struct {",
                "// Line 30:         Type string",
                "// Line 31:     }{",
                "// Line 32:         Type: \"PortalSuspended\",",
                "// Line 33:     })",
                "// Line 34: }"
            ]
        },
        {
            "filename_of_changes": "query.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "8",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: package pgproto3",
                "// Line 2: ",
                "// Line 3: import (",
                "// Line 4:     \"bytes\"",
                "// Line 5:     \"encoding/json\"",
                "// Line 6: ",
                "// vulnerable line: 7: \"github.com/jackc/pgio\"",
                "// Line 8: )",
                "// Line 9: ",
                "// Line 10: type Query struct {",
                "// Line 11:     String string",
                "// Line 12: }",
                "// Line 13: ",
                "// Line 14: // Frontend identifies this message as sendable by a PostgreSQL frontend.",
                "// Line 15: func (*Query) Frontend() {}",
                "// Line 16: ",
                "// Line 17: // Decode decodes src into dst. src must contain the complete message with the exception of the initial 1 byte message",
                "// Line 21:     if i != len(src)-1 {",
                "// Line 22:         return &invalidMessageFormatErr{messageType: \"Query\"}",
                "// Line 23:     }",
                "// Line 24: ",
                "// Line 25:     dst.String = string(src[:i])",
                "// Line 26: ",
                "// Line 27:     return nil",
                "// Line 28: }",
                "// Line 29: ",
                "// Line 30: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 31: func (src *Query) Encode(dst []byte) []byte {",
                "// vulnerable line: 32: dst = append(dst, 'Q')",
                "// vulnerable line: 33: dst = pgio.AppendInt32(dst, int32(4+len(src.String)+1))",
                "// Line 34: ",
                "// Line 35:     dst = append(dst, src.String...)",
                "// Line 36:     dst = append(dst, 0)",
                "// Line 37: ",
                "// vulnerable line: 38: return dst",
                "// Line 39: }",
                "// Line 40: ",
                "// Line 41: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 42: func (src Query) MarshalJSON() ([]byte, error) {",
                "// Line 43:     return json.Marshal(struct {",
                "// Line 44:         Type   string",
                "// Line 45:         String string",
                "// Line 46:     }{",
                "// Line 47:         Type:   \"Query\",",
                "// Line 48:         String: src.String,"
            ]
        },
        {
            "filename_of_changes": "query_test.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "20",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "ready_for_query.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 18:     if len(src) != 1 {",
                "// Line 19:         return &invalidMessageLenErr{messageType: \"ReadyForQuery\", expectedLen: 1, actualLen: len(src)}",
                "// Line 20:     }",
                "// Line 21: ",
                "// Line 22:     dst.TxStatus = src[0]",
                "// Line 23: ",
                "// Line 24:     return nil",
                "// Line 25: }",
                "// Line 26: ",
                "// Line 27: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 28: func (src *ReadyForQuery) Encode(dst []byte) []byte {",
                "// vulnerable line: 29: return append(dst, 'Z', 0, 0, 0, 5, src.TxStatus)",
                "// Line 30: }",
                "// Line 31: ",
                "// Line 32: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 33: func (src ReadyForQuery) MarshalJSON() ([]byte, error) {",
                "// Line 34:     return json.Marshal(struct {",
                "// Line 35:         Type     string",
                "// Line 36:         TxStatus string",
                "// Line 37:     }{",
                "// Line 38:         Type:     \"ReadyForQuery\",",
                "// Line 39:         TxStatus: string(src.TxStatus),"
            ]
        },
        {
            "filename_of_changes": "row_description.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "8",
            "number_of_lines_deleted_vulnerable_to_cve": "7",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 92:         fd.Format = int16(binary.BigEndian.Uint16(src[rp:]))",
                "// Line 93:         rp += 2",
                "// Line 94: ",
                "// Line 95:         dst.Fields = append(dst.Fields, fd)",
                "// Line 96:     }",
                "// Line 97: ",
                "// Line 98:     return nil",
                "// Line 99: }",
                "// Line 100: ",
                "// Line 101: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 102: func (src *RowDescription) Encode(dst []byte) []byte {",
                "// vulnerable line: 103: dst = append(dst, 'T')",
                "// vulnerable line: 104: sp := len(dst)",
                "// vulnerable line: 105: dst = pgio.AppendInt32(dst, -1)",
                "// Line 106: ",
                "// Line 107:     dst = pgio.AppendUint16(dst, uint16(len(src.Fields)))",
                "// Line 108:     for _, fd := range src.Fields {",
                "// Line 109:         dst = append(dst, fd.Name...)",
                "// Line 110:         dst = append(dst, 0)",
                "// Line 111: ",
                "// Line 112:         dst = pgio.AppendUint32(dst, fd.TableOID)",
                "// Line 113:         dst = pgio.AppendUint16(dst, fd.TableAttributeNumber)",
                "// Line 114:         dst = pgio.AppendUint32(dst, fd.DataTypeOID)",
                "// Line 115:         dst = pgio.AppendInt16(dst, fd.DataTypeSize)",
                "// Line 116:         dst = pgio.AppendInt32(dst, fd.TypeModifier)",
                "// Line 117:         dst = pgio.AppendInt16(dst, fd.Format)",
                "// Line 118:     }",
                "// Line 119: ",
                "// vulnerable line: 120: pgio.SetInt32(dst[sp:], int32(len(dst[sp:])))",
                "// Line 121: ",
                "// vulnerable line: 122: return dst",
                "// Line 123: }",
                "// Line 124: ",
                "// Line 125: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 126: func (src RowDescription) MarshalJSON() ([]byte, error) {",
                "// Line 127:     return json.Marshal(struct {",
                "// Line 128:         Type   string",
                "// Line 129:         Fields []FieldDescription",
                "// Line 130:     }{",
                "// Line 131:         Type:   \"RowDescription\",",
                "// Line 132:         Fields: src.Fields,"
            ]
        },
        {
            "filename_of_changes": "sasl_initial_response.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "7",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 31:     dst.AuthMechanism = string(src[rp:idx])",
                "// Line 32:     rp = idx + 1",
                "// Line 33: ",
                "// Line 34:     rp += 4 // The rest of the message is data so we can just skip the size",
                "// Line 35:     dst.Data = src[rp:]",
                "// Line 36: ",
                "// Line 37:     return nil",
                "// Line 38: }",
                "// Line 39: ",
                "// Line 40: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 41: func (src *SASLInitialResponse) Encode(dst []byte) []byte {",
                "// vulnerable line: 42: dst = append(dst, 'p')",
                "// vulnerable line: 43: sp := len(dst)",
                "// vulnerable line: 44: dst = pgio.AppendInt32(dst, -1)",
                "// Line 45: ",
                "// Line 46:     dst = append(dst, []byte(src.AuthMechanism)...)",
                "// Line 47:     dst = append(dst, 0)",
                "// Line 48: ",
                "// Line 49:     dst = pgio.AppendInt32(dst, int32(len(src.Data)))",
                "// Line 50:     dst = append(dst, src.Data...)",
                "// Line 51: ",
                "// vulnerable line: 52: pgio.SetInt32(dst[sp:], int32(len(dst[sp:])))",
                "// Line 53: ",
                "// vulnerable line: 54: return dst",
                "// Line 55: }",
                "// Line 56: ",
                "// Line 57: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 58: func (src SASLInitialResponse) MarshalJSON() ([]byte, error) {",
                "// Line 59:     return json.Marshal(struct {",
                "// Line 60:         Type          string",
                "// Line 61:         AuthMechanism string",
                "// Line 62:         Data          string",
                "// Line 63:     }{",
                "// Line 64:         Type:          \"SASLInitialResponse\","
            ]
        },
        {
            "filename_of_changes": "sasl_response.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "8",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1: package pgproto3",
                "// Line 2: ",
                "// Line 3: import (",
                "// Line 4:     \"encoding/json\"",
                "// Line 5: ",
                "// vulnerable line: 6: \"github.com/jackc/pgio\"",
                "// Line 7: )",
                "// Line 8: ",
                "// Line 9: type SASLResponse struct {",
                "// Line 10:     Data []byte",
                "// Line 11: }",
                "// Line 12: ",
                "// Line 13: // Frontend identifies this message as sendable by a PostgreSQL frontend.",
                "// Line 14: func (*SASLResponse) Frontend() {}",
                "// Line 15: ",
                "// Line 16: // Decode decodes src into dst. src must contain the complete message with the exception of the initial 1 byte message",
                "// Line 17: // type identifier and 4 byte message length.",
                "// Line 18: func (dst *SASLResponse) Decode(src []byte) error {",
                "// Line 19:     *dst = SASLResponse{Data: src}",
                "// Line 20:     return nil",
                "// Line 21: }",
                "// Line 22: ",
                "// Line 23: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 24: func (src *SASLResponse) Encode(dst []byte) []byte {",
                "// vulnerable line: 25: dst = append(dst, 'p')",
                "// vulnerable line: 26: dst = pgio.AppendInt32(dst, int32(4+len(src.Data)))",
                "// Line 27: ",
                "// Line 28:     dst = append(dst, src.Data...)",
                "// Line 29: ",
                "// vulnerable line: 30: return dst",
                "// Line 31: }",
                "// Line 32: ",
                "// Line 33: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 34: func (src SASLResponse) MarshalJSON() ([]byte, error) {",
                "// Line 35:     return json.Marshal(struct {",
                "// Line 36:         Type string",
                "// Line 37:         Data string",
                "// Line 38:     }{",
                "// Line 39:         Type: \"SASLResponse\",",
                "// Line 40:         Data: string(src.Data),"
            ]
        },
        {
            "filename_of_changes": "server.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "14",
            "number_of_lines_deleted_vulnerable_to_cve": "7",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 39:             return fmt.Errorf(\"error receiving message: %w\", err)",
                "// Line 40:         }",
                "// Line 41: ",
                "// Line 42:         switch msg.(type) {",
                "// Line 43:         case *pgproto3.Query:",
                "// Line 44:             response, err := p.responder()",
                "// Line 45:             if err != nil {",
                "// Line 46:                 return fmt.Errorf(\"error generating query response: %w\", err)",
                "// Line 47:             }",
                "// Line 48: ",
                "// vulnerable line: 49: buf := (&pgproto3.RowDescription{Fields: []pgproto3.FieldDescription{",
                "// Line 50:                 {",
                "// Line 51:                     Name:                 []byte(\"fortune\"),",
                "// Line 52:                     TableOID:             0,",
                "// Line 53:                     TableAttributeNumber: 0,",
                "// Line 54:                     DataTypeOID:          25,",
                "// Line 55:                     DataTypeSize:         -1,",
                "// Line 56:                     TypeModifier:         -1,",
                "// Line 57:                     Format:               0,",
                "// Line 58:                 },",
                "// vulnerable line: 59: }}).Encode(nil)",
                "// vulnerable line: 60: buf = (&pgproto3.DataRow{Values: [][]byte{response}}).Encode(buf)",
                "// vulnerable line: 61: buf = (&pgproto3.CommandComplete{CommandTag: []byte(\"SELECT 1\")}).Encode(buf)",
                "// vulnerable line: 62: buf = (&pgproto3.ReadyForQuery{TxStatus: 'I'}).Encode(buf)",
                "// Line 63:             _, err = p.conn.Write(buf)",
                "// Line 64:             if err != nil {",
                "// Line 65:                 return fmt.Errorf(\"error writing query response: %w\", err)",
                "// Line 66:             }",
                "// Line 67:         case *pgproto3.Terminate:",
                "// Line 68:             return nil",
                "// Line 69:         default:",
                "// Line 70:             return fmt.Errorf(\"received message other than Query from client: %#v\", msg)",
                "// Line 71:         }",
                "// Line 72:     }",
                "// Line 73: }",
                "// Line 74: ",
                "// Line 75: func (p *PgFortuneBackend) handleStartup() error {",
                "// Line 76:     startupMessage, err := p.backend.ReceiveStartupMessage()",
                "// Line 77:     if err != nil {",
                "// Line 78:         return fmt.Errorf(\"error receiving startup message: %w\", err)",
                "// Line 79:     }",
                "// Line 80: ",
                "// Line 81:     switch startupMessage.(type) {",
                "// Line 82:     case *pgproto3.StartupMessage:",
                "// vulnerable line: 83: buf := (&pgproto3.AuthenticationOk{}).Encode(nil)",
                "// vulnerable line: 84: buf = (&pgproto3.ReadyForQuery{TxStatus: 'I'}).Encode(buf)",
                "// Line 85:         _, err = p.conn.Write(buf)",
                "// Line 86:         if err != nil {",
                "// Line 87:             return fmt.Errorf(\"error sending ready for query: %w\", err)",
                "// Line 88:         }",
                "// Line 89:     case *pgproto3.SSLRequest:",
                "// Line 90:         _, err = p.conn.Write([]byte(\"N\"))",
                "// Line 91:         if err != nil {",
                "// Line 92:             return fmt.Errorf(\"error sending deny SSL request: %w\", err)",
                "// Line 93:         }",
                "// Line 94:         return p.handleStartup()"
            ]
        },
        {
            "filename_of_changes": "ssl_request.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 24:     requestCode := binary.BigEndian.Uint32(src)",
                "// Line 25: ",
                "// Line 26:     if requestCode != sslRequestNumber {",
                "// Line 27:         return errors.New(\"bad ssl request code\")",
                "// Line 28:     }",
                "// Line 29: ",
                "// Line 30:     return nil",
                "// Line 31: }",
                "// Line 32: ",
                "// Line 33: // Encode encodes src into dst. dst will include the 4 byte message length.",
                "// vulnerable line: 34: func (src *SSLRequest) Encode(dst []byte) []byte {",
                "// Line 35:     dst = pgio.AppendInt32(dst, 8)",
                "// Line 36:     dst = pgio.AppendInt32(dst, sslRequestNumber)",
                "// vulnerable line: 37: return dst",
                "// Line 38: }",
                "// Line 39: ",
                "// Line 40: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 41: func (src SSLRequest) MarshalJSON() ([]byte, error) {",
                "// Line 42:     return json.Marshal(struct {",
                "// Line 43:         Type            string",
                "// Line 44:         ProtocolVersion uint32",
                "// Line 45:         Parameters      map[string]string",
                "// Line 46:     }{",
                "// Line 47:         Type: \"SSLRequest\","
            ]
        },
        {
            "filename_of_changes": "startup_message.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "4",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 57:                 return fmt.Errorf(\"Bad startup message last byte. Expected 0, got %d\", src[rp])",
                "// Line 58:             }",
                "// Line 59:             break",
                "// Line 60:         }",
                "// Line 61:     }",
                "// Line 62: ",
                "// Line 63:     return nil",
                "// Line 64: }",
                "// Line 65: ",
                "// Line 66: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 67: func (src *StartupMessage) Encode(dst []byte) []byte {",
                "// Line 68:     sp := len(dst)",
                "// Line 69:     dst = pgio.AppendInt32(dst, -1)",
                "// Line 70: ",
                "// Line 71:     dst = pgio.AppendUint32(dst, src.ProtocolVersion)",
                "// Line 72:     for k, v := range src.Parameters {",
                "// Line 73:         dst = append(dst, k...)",
                "// Line 74:         dst = append(dst, 0)",
                "// Line 75:         dst = append(dst, v...)",
                "// Line 76:         dst = append(dst, 0)",
                "// Line 77:     }",
                "// Line 78:     dst = append(dst, 0)",
                "// Line 79: ",
                "// vulnerable line: 80: pgio.SetInt32(dst[sp:], int32(len(dst[sp:])))",
                "// Line 81: ",
                "// vulnerable line: 82: return dst",
                "// Line 83: }",
                "// Line 84: ",
                "// Line 85: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 86: func (src StartupMessage) MarshalJSON() ([]byte, error) {",
                "// Line 87:     return json.Marshal(struct {",
                "// Line 88:         Type            string",
                "// Line 89:         ProtocolVersion uint32",
                "// Line 90:         Parameters      map[string]string",
                "// Line 91:     }{",
                "// Line 92:         Type:            \"StartupMessage\","
            ]
        },
        {
            "filename_of_changes": "sync.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 13: // type identifier and 4 byte message length.",
                "// Line 14: func (dst *Sync) Decode(src []byte) error {",
                "// Line 15:     if len(src) != 0 {",
                "// Line 16:         return &invalidMessageLenErr{messageType: \"Sync\", expectedLen: 0, actualLen: len(src)}",
                "// Line 17:     }",
                "// Line 18: ",
                "// Line 19:     return nil",
                "// Line 20: }",
                "// Line 21: ",
                "// Line 22: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 23: func (src *Sync) Encode(dst []byte) []byte {",
                "// vulnerable line: 24: return append(dst, 'S', 0, 0, 0, 4)",
                "// Line 25: }",
                "// Line 26: ",
                "// Line 27: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 28: func (src Sync) MarshalJSON() ([]byte, error) {",
                "// Line 29:     return json.Marshal(struct {",
                "// Line 30:         Type string",
                "// Line 31:     }{",
                "// Line 32:         Type: \"Sync\",",
                "// Line 33:     })",
                "// Line 34: }"
            ]
        },
        {
            "filename_of_changes": "terminate.go",
            "code_language": "Go",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 13: // type identifier and 4 byte message length.",
                "// Line 14: func (dst *Terminate) Decode(src []byte) error {",
                "// Line 15:     if len(src) != 0 {",
                "// Line 16:         return &invalidMessageLenErr{messageType: \"Terminate\", expectedLen: 0, actualLen: len(src)}",
                "// Line 17:     }",
                "// Line 18: ",
                "// Line 19:     return nil",
                "// Line 20: }",
                "// Line 21: ",
                "// Line 22: // Encode encodes src into dst. dst will include the 1 byte message type identifier and the 4 byte message length.",
                "// vulnerable line: 23: func (src *Terminate) Encode(dst []byte) []byte {",
                "// vulnerable line: 24: return append(dst, 'X', 0, 0, 0, 4)",
                "// Line 25: }",
                "// Line 26: ",
                "// Line 27: // MarshalJSON implements encoding/json.Marshaler.",
                "// Line 28: func (src Terminate) MarshalJSON() ([]byte, error) {",
                "// Line 29:     return json.Marshal(struct {",
                "// Line 30:         Type string",
                "// Line 31:     }{",
                "// Line 32:         Type: \"Terminate\",",
                "// Line 33:     })",
                "// Line 34: }"
            ]
        }
    ]
}