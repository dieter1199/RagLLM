{
    "cve_id": "CVE-2024-35236",
    "cve_description": "Audiobookshelf is a self-hosted audiobook and podcast server. Prior to version 2.10.0, opening an ebook with malicious scripts inside leads to code execution inside the browsing context. Attacking a user with high privileges (upload, creation of libraries) can lead to remote code execution (RCE) in the worst case. This was tested on version 2.9.0 on Windows, but an arbitrary file write is powerful enough as is and should easily lead to RCE on Linux, too. Version 2.10.0 contains a patch for the vulnerability.",
    "cve_publish_date": "2024-05-27T17:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Update:Disable epubs from running scripts by default, add library setting to enable it GHSA-7j99-76cj-q9pg",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "EpubReader.vue",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 309:         openAs: 'epub',",
                "// Line 310:         requestHeaders: {",
                "// Line 311:           Authorization: `Bearer ${this.userToken}`",
                "// Line 312:         }",
                "// Line 313:       })",
                "// Line 314: ",
                "// Line 315:       /** @type {ePub.Rendition} */",
                "// Line 316:       reader.rendition = reader.book.renderTo('viewer', {",
                "// Line 317:         width: this.readerWidth,",
                "// Line 318:         height: this.readerHeight * 0.8,",
                "// vulnerable line: 319: allowScriptedContent: true,",
                "// Line 320:         spread: 'auto',",
                "// Line 321:         snap: true,",
                "// Line 322:         manager: 'continuous',",
                "// Line 323:         flow: 'paginated'",
                "// Line 324:       })",
                "// Line 325: ",
                "// Line 326:       // load saved progress",
                "// Line 327:       reader.rendition.display(this.savedEbookLocation || reader.book.locations.start)",
                "// Line 328: ",
                "// Line 329:       reader.rendition.on('rendered', () => {"
            ]
        },
        {
            "filename_of_changes": "LibrarySettings.js",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 60:           hasUpdates = true",
                "// Line 61:         }",
                "// Line 62:       } else if (this[key] !== payload[key]) {",
                "// Line 63:         this[key] = payload[key]",
                "// Line 64:         hasUpdates = true",
                "// Line 65:       }",
                "// Line 66:     }",
                "// Line 67:     return hasUpdates",
                "// Line 68:   }",
                "// Line 69: }",
                "// vulnerable line: 70: module.exports = LibrarySettings"
            ]
        },
        {
            "filename_of_changes": "bg.json",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "bn.json",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "cs.json",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "et.json",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "fr.json",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "gu.json",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "he.json",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "hi.json",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "hr.json",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "hu.json",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "libraries.js",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "29",
            "number_of_lines_deleted_vulnerable_to_cve": "25",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 9:   issues: 0,",
                "// Line 10:   folderLastUpdate: 0,",
                "// Line 11:   filterData: null,",
                "// Line 12:   numUserPlaylists: 0,",
                "// Line 13:   collections: [],",
                "// Line 14:   userPlaylists: [],",
                "// Line 15:   ereaderDevices: []",
                "// Line 16: })",
                "// Line 17: ",
                "// Line 18: export const getters = {",
                "// vulnerable line: 19: getCurrentLibrary: state => {",
                "// vulnerable line: 20: return state.libraries.find(lib => lib.id === state.currentLibraryId)",
                "// Line 21:   },",
                "// Line 22:   getCurrentLibraryName: (state, getters) => {",
                "// Line 23:     var currentLibrary = getters.getCurrentLibrary",
                "// Line 24:     if (!currentLibrary) return ''",
                "// Line 25:     return currentLibrary.name",
                "// Line 26:   },",
                "// Line 27:   getCurrentLibraryMediaType: (state, getters) => {",
                "// Line 28:     if (!getters.getCurrentLibrary) return null",
                "// Line 29:     return getters.getCurrentLibrary.mediaType",
                "// Line 30:   },",
                "// vulnerable line: 31: getSortedLibraries: state => () => {",
                "// vulnerable line: 32: return state.libraries.map(lib => ({ ...lib })).sort((a, b) => a.displayOrder - b.displayOrder)",
                "// Line 33:   },",
                "// vulnerable line: 34: getLibraryProvider: state => libraryId => {",
                "// vulnerable line: 35: var library = state.libraries.find(l => l.id === libraryId)",
                "// Line 36:     if (!library) return null",
                "// Line 37:     return library.provider",
                "// Line 38:   },",
                "// Line 39:   getNextAccessibleLibrary: (state, getters, rootState, rootGetters) => {",
                "// Line 40:     var librariesSorted = getters['getSortedLibraries']()",
                "// Line 41:     if (!librariesSorted.length) return null",
                "// Line 42: ",
                "// Line 43:     var canAccessAllLibraries = rootGetters['user/getUserCanAccessAllLibraries']",
                "// Line 44:     var userAccessibleLibraries = rootGetters['user/getLibrariesAccessible']",
                "// Line 45:     if (canAccessAllLibraries) return librariesSorted[0]",
                "// Line 53:     if (!getters.getCurrentLibrary) return null",
                "// Line 54:     return getters.getCurrentLibrary.settings",
                "// Line 55:   },",
                "// Line 56:   getBookCoverAspectRatio: (state, getters) => {",
                "// Line 57:     if (!getters.getCurrentLibrarySettings || isNaN(getters.getCurrentLibrarySettings.coverAspectRatio)) return 1",
                "// Line 58:     return getters.getCurrentLibrarySettings.coverAspectRatio === Constants.BookCoverAspectRatio.STANDARD ? 1.6 : 1",
                "// Line 59:   },",
                "// Line 60:   getLibraryIsAudiobooksOnly: (state, getters) => {",
                "// Line 61:     return !!getters.getCurrentLibrarySettings?.audiobooksOnly",
                "// Line 62:   },",
                "// vulnerable line: 63: getCollection: state => id => {",
                "// vulnerable line: 64: return state.collections.find(c => c.id === id)",
                "// Line 65:   },",
                "// vulnerable line: 66: getPlaylist: state => id => {",
                "// vulnerable line: 67: return state.userPlaylists.find(p => p.id === id)",
                "// vulnerable line: 68: }",
                "// vulnerable line: 69: }",
                "// Line 70: ",
                "// Line 71: export const actions = {",
                "// Line 72:   requestLibraryScan({ state, commit }, { libraryId, force }) {",
                "// Line 73:     return this.$axios.$post(`/api/libraries/${libraryId}/scan?force=${force ? 1 : 0}`)",
                "// Line 74:   },",
                "// Line 75:   loadFolders({ state, commit }) {",
                "// Line 76:     if (state.folders.length) {",
                "// Line 77:       const lastCheck = Date.now() - state.folderLastUpdate",
                "// vulnerable line: 78: if (lastCheck < 1000 * 5) { // 5 seconds",
                "// Line 79:         // Folders up to date",
                "// Line 80:         return state.folders",
                "// vulnerable line: 81: }",
                "// vulnerable line: 82: }",
                "// Line 83:     commit('setFoldersLastUpdate')",
                "// Line 84: ",
                "// Line 85:     return this.$axios",
                "// Line 86:       .$get('/api/filesystem')",
                "// Line 87:       .then((res) => {",
                "// Line 88:         commit('setFolders', res.directories)",
                "// Line 89:         return res.directories",
                "// Line 90:       })",
                "// Line 91:       .catch((error) => {",
                "// Line 92:         console.error('Failed to load dirs', error)",
                "// Line 93:         commit('setFolders', [])",
                "// Line 94:         return []",
                "// Line 95:       })",
                "// Line 96:   },",
                "// Line 97:   fetch({ state, dispatch, commit, rootState, rootGetters }, libraryId) {",
                "// Line 98:     if (!rootState.user || !rootState.user.user) {",
                "// Line 99:       console.error('libraries/fetch - User not set')",
                "// Line 100:       return false",
                "// vulnerable line: 101: }",
                "// Line 102: ",
                "// Line 103:     var canUserAccessLibrary = rootGetters['user/getCanAccessLibrary'](libraryId)",
                "// Line 104:     if (!canUserAccessLibrary) {",
                "// Line 105:       console.warn('Access not allowed to library')",
                "// Line 106:       return false",
                "// vulnerable line: 107: }",
                "// Line 108: ",
                "// Line 109:     const libraryChanging = state.currentLibraryId !== libraryId",
                "// Line 110:     return this.$axios",
                "// Line 111:       .$get(`/api/libraries/${libraryId}?include=filterdata`)",
                "// Line 112:       .then((data) => {",
                "// Line 113:         const library = data.library",
                "// Line 114:         const filterData = data.filterdata",
                "// Line 115:         const issues = data.issues || 0",
                "// Line 116:         const customMetadataProviders = data.customMetadataProviders || []",
                "// Line 117:         const numUserPlaylists = data.numUserPlaylists",
                "// Line 118: ",
                "// Line 119:         dispatch('user/checkUpdateLibrarySortFilter', library.mediaType, { root: true })",
                "// Line 120: ",
                "// Line 121:         if (libraryChanging) {",
                "// Line 122:           commit('setCollections', [])",
                "// Line 123:           commit('setUserPlaylists', [])",
                "// vulnerable line: 124: }",
                "// Line 125: ",
                "// Line 126:         commit('addUpdate', library)",
                "// Line 127:         commit('setLibraryIssues', issues)",
                "// Line 128:         commit('setLibraryFilterData', filterData)",
                "// Line 129:         commit('setNumUserPlaylists', numUserPlaylists)",
                "// Line 130:         commit('scanners/setCustomMetadataProviders', customMetadataProviders, { root: true })",
                "// Line 131: ",
                "// Line 132:         commit('setCurrentLibrary', libraryId)",
                "// Line 133:         return data",
                "// Line 134:       })",
                "// Line 135:       .catch((error) => {",
                "// Line 136:         console.error('Failed', error)",
                "// Line 137:         return false",
                "// Line 138:       })",
                "// Line 139:   },",
                "// Line 140:   // Return true if calling load",
                "// Line 141:   load({ state, commit, rootState }) {",
                "// Line 142:     if (!rootState.user || !rootState.user.user) {",
                "// Line 143:       console.error('libraries/load - User not set')",
                "// Line 144:       return false",
                "// vulnerable line: 145: }",
                "// Line 146: ",
                "// Line 147:     // Don't load again if already loaded in the last 5 minutes",
                "// Line 148:     var lastLoadDiff = Date.now() - state.lastLoad",
                "// Line 149:     if (lastLoadDiff < 5 * 60 * 1000) {",
                "// Line 150:       // Already up to date",
                "// Line 151:       return false",
                "// vulnerable line: 152: }",
                "// Line 153: ",
                "// Line 154:     this.$axios",
                "// Line 155:       .$get(`/api/libraries`)",
                "// Line 156:       .then((data) => {",
                "// Line 157:         commit('set', data.libraries)",
                "// Line 158:         commit('setLastLoad')",
                "// Line 159:       })",
                "// Line 160:       .catch((error) => {",
                "// Line 161:         console.error('Failed', error)",
                "// Line 162:         commit('set', [])",
                "// Line 163:       })",
                "// Line 164:     return true",
                "// Line 165:   },",
                "// Line 166:   loadLibraryFilterData({ state, commit, rootState }) {",
                "// Line 167:     if (!rootState.user || !rootState.user.user) {",
                "// Line 168:       console.error('libraries/loadLibraryFilterData - User not set')",
                "// Line 169:       return false",
                "// vulnerable line: 170: }",
                "// Line 171: ",
                "// Line 172:     this.$axios",
                "// Line 173:       .$get(`/api/libraries/${state.currentLibraryId}/filterdata`)",
                "// Line 174:       .then((data) => {",
                "// Line 175:         commit('setLibraryFilterData', data)",
                "// Line 176:       })",
                "// Line 177:       .catch((error) => {",
                "// Line 178:         console.error('Failed', error)",
                "// Line 179:         commit('setLibraryFilterData', null)",
                "// Line 180:       })",
                "// vulnerable line: 181: }",
                "// vulnerable line: 182: }",
                "// Line 183: ",
                "// Line 184: export const mutations = {",
                "// Line 185:   setFolders(state, folders) {",
                "// Line 186:     state.folders = folders",
                "// Line 187:   },",
                "// Line 188:   setFoldersLastUpdate(state) {",
                "// Line 189:     state.folderLastUpdate = Date.now()",
                "// Line 190:   },",
                "// Line 191:   setLastLoad(state) {",
                "// Line 192:     state.lastLoad = Date.now()",
                "// Line 197:   setCurrentLibrary(state, val) {",
                "// Line 198:     state.currentLibraryId = val",
                "// Line 199:   },",
                "// Line 200:   set(state, libraries) {",
                "// Line 201:     state.libraries = libraries",
                "// Line 202:     state.listeners.forEach((listener) => {",
                "// Line 203:       listener.meth()",
                "// Line 204:     })",
                "// Line 205:   },",
                "// Line 206:   addUpdate(state, library) {",
                "// vulnerable line: 207: var index = state.libraries.findIndex(a => a.id === library.id)",
                "// Line 208:     if (index >= 0) {",
                "// Line 209:       state.libraries.splice(index, 1, library)",
                "// Line 210:     } else {",
                "// Line 211:       state.libraries.push(library)",
                "// vulnerable line: 212: }",
                "// Line 213: ",
                "// Line 214:     state.listeners.forEach((listener) => {",
                "// Line 215:       listener.meth()",
                "// Line 216:     })",
                "// Line 217:   },",
                "// Line 218:   remove(state, library) {",
                "// vulnerable line: 219: state.libraries = state.libraries.filter(a => a.id !== library.id)",
                "// Line 220: ",
                "// Line 221:     state.listeners.forEach((listener) => {",
                "// Line 222:       listener.meth()",
                "// Line 223:     })",
                "// Line 224:   },",
                "// Line 225:   addListener(state, listener) {",
                "// vulnerable line: 226: var index = state.listeners.findIndex(l => l.id === listener.id)",
                "// Line 227:     if (index >= 0) state.listeners.splice(index, 1, listener)",
                "// Line 228:     else state.listeners.push(listener)",
                "// Line 229:   },",
                "// Line 230:   removeListener(state, listenerId) {",
                "// vulnerable line: 231: state.listeners = state.listeners.filter(l => l.id !== listenerId)",
                "// Line 232:   },",
                "// Line 233:   setLibraryFilterData(state, filterData) {",
                "// Line 234:     state.filterData = filterData",
                "// Line 235:   },",
                "// Line 236:   setNumUserPlaylists(state, numUserPlaylists) {",
                "// Line 237:     state.numUserPlaylists = numUserPlaylists",
                "// Line 238:   },",
                "// Line 239:   removeSeriesFromFilterData(state, seriesId) {",
                "// Line 240:     if (!seriesId || !state.filterData) return",
                "// vulnerable line: 241: state.filterData.series = state.filterData.series.filter(se => se.id !== seriesId)",
                "// Line 242:   },",
                "// Line 243:   updateFilterDataWithItem(state, libraryItem) {",
                "// Line 244:     if (!libraryItem || !state.filterData) return",
                "// Line 245:     if (state.currentLibraryId !== libraryItem.libraryId) return",
                "// Line 246:     /*",
                "// Line 247:     structure of filterData:",
                "// Line 248:     {",
                "// Line 249:       authors: [],",
                "// Line 250:       genres: [],",
                "// Line 251:       tags: [],",
                "// Line 252:       series: [],",
                "// Line 253:       narrators: [],",
                "// Line 254:       languages: [],",
                "// Line 255:       publishers: []",
                "// vulnerable line: 256: }",
                "// Line 257:     */",
                "// Line 258:     const mediaMetadata = libraryItem.media.metadata",
                "// Line 259: ",
                "// Line 260:     // Add/update book authors",
                "// Line 261:     if (mediaMetadata.authors?.length) {",
                "// Line 262:       mediaMetadata.authors.forEach((author) => {",
                "// vulnerable line: 263: const indexOf = state.filterData.authors.findIndex(au => au.id === author.id)",
                "// Line 264:         if (indexOf >= 0) {",
                "// Line 265:           state.filterData.authors.splice(indexOf, 1, author)",
                "// Line 266:         } else {",
                "// Line 267:           state.filterData.authors.push(author)",
                "// vulnerable line: 268: state.filterData.authors.sort((a, b) => (a.name || '').localeCompare((b.name || '')))",
                "// vulnerable line: 269: }",
                "// Line 270:       })",
                "// vulnerable line: 271: }",
                "// Line 272: ",
                "// Line 273:     // Add/update series",
                "// Line 274:     if (mediaMetadata.series?.length) {",
                "// Line 275:       mediaMetadata.series.forEach((series) => {",
                "// vulnerable line: 276: const indexOf = state.filterData.series.findIndex(se => se.id === series.id)",
                "// Line 277:         if (indexOf >= 0) {",
                "// Line 278:           state.filterData.series.splice(indexOf, 1, { id: series.id, name: series.name })",
                "// Line 279:         } else {",
                "// Line 280:           state.filterData.series.push({ id: series.id, name: series.name })",
                "// vulnerable line: 281: state.filterData.series.sort((a, b) => (a.name || '').localeCompare((b.name || '')))",
                "// vulnerable line: 282: }",
                "// Line 283:       })",
                "// vulnerable line: 284: }",
                "// Line 285: ",
                "// Line 286:     // Add genres",
                "// Line 287:     if (mediaMetadata.genres?.length) {",
                "// Line 288:       mediaMetadata.genres.forEach((genre) => {",
                "// Line 289:         if (!state.filterData.genres.includes(genre)) {",
                "// Line 290:           state.filterData.genres.push(genre)",
                "// Line 291:           state.filterData.genres.sort((a, b) => a.localeCompare(b))",
                "// vulnerable line: 292: }",
                "// Line 293:       })",
                "// vulnerable line: 294: }",
                "// Line 295: ",
                "// Line 296:     // Add tags",
                "// Line 297:     if (libraryItem.media.tags?.length) {",
                "// Line 298:       libraryItem.media.tags.forEach((tag) => {",
                "// Line 299:         if (!state.filterData.tags.includes(tag)) {",
                "// Line 300:           state.filterData.tags.push(tag)",
                "// Line 301:           state.filterData.tags.sort((a, b) => a.localeCompare(b))",
                "// vulnerable line: 302: }",
                "// Line 303:       })",
                "// vulnerable line: 304: }",
                "// Line 305: ",
                "// Line 306:     // Add narrators",
                "// Line 307:     if (mediaMetadata.narrators?.length) {",
                "// Line 308:       mediaMetadata.narrators.forEach((narrator) => {",
                "// Line 309:         if (!state.filterData.narrators.includes(narrator)) {",
                "// Line 310:           state.filterData.narrators.push(narrator)",
                "// Line 311:           state.filterData.narrators.sort((a, b) => a.localeCompare(b))",
                "// vulnerable line: 312: }",
                "// Line 313:       })",
                "// vulnerable line: 314: }",
                "// Line 315: ",
                "// Line 316:     // Add publishers",
                "// Line 317:     if (mediaMetadata.publisher && !state.filterData.publishers.includes(mediaMetadata.publisher)) {",
                "// Line 318:       state.filterData.publishers.push(mediaMetadata.publisher)",
                "// Line 319:       state.filterData.publishers.sort((a, b) => a.localeCompare(b))",
                "// vulnerable line: 320: }",
                "// Line 321: ",
                "// Line 322:     // Add language",
                "// Line 323:     if (mediaMetadata.language && !state.filterData.languages.includes(mediaMetadata.language)) {",
                "// Line 324:       state.filterData.languages.push(mediaMetadata.language)",
                "// Line 325:       state.filterData.languages.sort((a, b) => a.localeCompare(b))",
                "// vulnerable line: 326: }",
                "// Line 327:   },",
                "// Line 328:   setCollections(state, collections) {",
                "// Line 329:     state.collections = collections",
                "// Line 330:   },",
                "// Line 331:   addUpdateCollection(state, collection) {",
                "// vulnerable line: 332: var index = state.collections.findIndex(c => c.id === collection.id)",
                "// Line 333:     if (index >= 0) {",
                "// Line 334:       state.collections.splice(index, 1, collection)",
                "// Line 335:     } else {",
                "// Line 336:       state.collections.push(collection)",
                "// vulnerable line: 337: }",
                "// Line 338:   },",
                "// Line 339:   removeCollection(state, collection) {",
                "// vulnerable line: 340: state.collections = state.collections.filter(c => c.id !== collection.id)",
                "// Line 341:   },",
                "// Line 342:   setUserPlaylists(state, playlists) {",
                "// Line 343:     state.userPlaylists = playlists",
                "// Line 344:     state.numUserPlaylists = playlists.length",
                "// Line 345:   },",
                "// Line 346:   addUpdateUserPlaylist(state, playlist) {",
                "// vulnerable line: 347: const index = state.userPlaylists.findIndex(p => p.id === playlist.id)",
                "// Line 348:     if (index >= 0) {",
                "// Line 349:       state.userPlaylists.splice(index, 1, playlist)",
                "// Line 350:     } else {",
                "// Line 351:       state.userPlaylists.push(playlist)",
                "// Line 352:       state.numUserPlaylists++",
                "// vulnerable line: 353: }",
                "// Line 354:   },",
                "// Line 355:   removeUserPlaylist(state, playlist) {",
                "// vulnerable line: 356: state.userPlaylists = state.userPlaylists.filter(p => p.id !== playlist.id)",
                "// Line 357:     state.numUserPlaylists = state.userPlaylists.length",
                "// Line 358:   },",
                "// Line 359:   setEReaderDevices(state, ereaderDevices) {",
                "// Line 360:     state.ereaderDevices = ereaderDevices",
                "// vulnerable line: 361: }",
                "// vulnerable line: 362: }"
            ]
        },
        {
            "filename_of_changes": "lt.json",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "nl.json",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "no.json",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "pl.json",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "ru.json",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "sv.json",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "uk.json",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "zh-cn.json",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "zh-tw.json",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        }
    ]
}