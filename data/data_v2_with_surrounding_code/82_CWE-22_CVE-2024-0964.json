{
    "cve_id": "CVE-2024-0964",
    "cve_description": "A local file include could be remotely triggered in Gradio due to a vulnerable user-supplied JSON value in an API request.",
    "cve_publish_date": "2024-02-05T23:15Z",
    "cwe_id": "CWE-22",
    "cwe_name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
    "cwe_description": "The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
    "commit_message": "Fix api event drops (#6556)\n\n* changes\r\n\r\n* changes\r\n\r\n* add changeset\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changs\r\n\r\n* chagnes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes~git push\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* change\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n---------\r\n\r\nCo-authored-by: gradio-pr-bot <gradio-pr-bot@users.noreply.github.com>\r\nCo-authored-by: Ubuntu <ubuntu@ip-172-31-25-241.us-west-2.compute.internal>\r\nCo-authored-by: Abubakar Abid <abubakar@huggingface.co>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "benchmark_queue.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 100:     data = {\"fn_to_hit\": data[\"fn_to_hit\"].to_list(), \"duration\": data[\"duration\"].to_list()}                ",
                "// Line 101:     return data",
                "// Line 102: ",
                "// Line 103: ",
                "// Line 104: if __name__ == \"__main__\":",
                "// Line 105:     parser = argparse.ArgumentParser(description=\"Upload a demo to a space\")",
                "// Line 106:     parser.add_argument(\"-n\", \"--n_jobs\", type=int, help=\"number of jobs\", default=100, required=False)",
                "// Line 107:     parser.add_argument(\"-o\", \"--output\", type=str, help=\"path to write output to\", required=False)     ",
                "// Line 108:     args = parser.parse_args()",
                "// Line 109: ",
                "// vulnerable line: 110: host = f\"{demo.local_url.replace('http', 'ws')}queue/join\"",
                "// Line 111:     data = asyncio.run(main(host, n_results=args.n_jobs))",
                "// Line 112:     data = dict(zip(data[\"fn_to_hit\"], data[\"duration\"]))",
                "// Line 113:     ",
                "// Line 114:     print(data)",
                "// Line 115:     ",
                "// Line 116:     if args.output:",
                "// Line 117:         print(\"Writing results to:\", args.output)",
                "// Line 118:         json.dump(data, open(args.output, \"w\"))"
            ]
        },
        {
            "filename_of_changes": "blocks.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "9",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1580:             \"js\": self.js,",
                "// Line 1581:             \"head\": self.head,",
                "// Line 1582:             \"title\": self.title or \"Gradio\",",
                "// Line 1583:             \"space_id\": self.space_id,",
                "// Line 1584:             \"enable_queue\": True,  # launch attributes",
                "// Line 1585:             \"show_error\": getattr(self, \"show_error\", False),",
                "// Line 1586:             \"show_api\": self.show_api,",
                "// Line 1587:             \"is_colab\": utils.colab_check(),",
                "// Line 1588:             \"stylesheets\": self.stylesheets,",
                "// Line 1589:             \"theme\": self.theme.name,",
                "// vulnerable line: 1590: \"protocol\": \"sse\",",
                "// Line 1591:         }",
                "// Line 1592: ",
                "// Line 1593:         def get_layout(block):",
                "// Line 1594:             if not isinstance(block, BlockContext):",
                "// Line 1595:                 return {\"id\": block._id}",
                "// Line 1596:             children_layout = []",
                "// Line 1597:             for child in block.children:",
                "// Line 1598:                 children_layout.append(get_layout(child))",
                "// Line 1599:             return {\"id\": block._id, \"children\": children_layout}",
                "// Line 1600: ",
                "// Line 2172:             data = {\"integration\": analytics_integration}",
                "// Line 2173:             analytics.integration_analytics(data)",
                "// Line 2174: ",
                "// Line 2175:     def close(self, verbose: bool = True) -> None:",
                "// Line 2176:         \"\"\"",
                "// Line 2177:         Closes the Interface that was launched and frees the port.",
                "// Line 2178:         \"\"\"",
                "// Line 2179:         try:",
                "// Line 2180:             if wasm_utils.IS_WASM:",
                "// Line 2181:                 # NOTE:",
                "// vulnerable line: 2182: # Normally, queue-related async tasks (e.g. continuous events created by `gr.Blocks.load(..., every=interval)`, whose async tasks are started at the `/queue/join` endpoint function)",
                "// Line 2183:                 # are running in an event loop in the server thread,",
                "// Line 2184:                 # so they will be cancelled by `self.server.close()` below.",
                "// Line 2185:                 # However, in the Wasm env, we don't have the `server` and",
                "// Line 2186:                 # all async tasks are running in the same event loop, `pyodide.webloop.WebLoop` in the main thread,",
                "// Line 2187:                 # so we have to cancel them explicitly so that these tasks won't run after a new app is launched.",
                "// Line 2188:                 self._queue._cancel_asyncio_tasks()",
                "// Line 2189:                 self.server_app._cancel_asyncio_tasks()",
                "// Line 2190:             self._queue.close()",
                "// Line 2191:             if self.server:",
                "// Line 2192:                 self.server.close()"
            ]
        },
        {
            "filename_of_changes": "test_client.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "11",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "test_queueing.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "6",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 11:     def test_single_request(self, connect):",
                "// Line 12:         with gr.Blocks() as demo:",
                "// Line 13:             name = gr.Textbox()",
                "// Line 14:             output = gr.Textbox()",
                "// Line 15: ",
                "// Line 16:             def greet(x):",
                "// Line 17:                 return f\"Hello, {x}!\"",
                "// Line 18: ",
                "// Line 19:             name.submit(greet, name, output)",
                "// Line 20: ",
                "// vulnerable line: 21: demo.launch(prevent_thread_lock=True)",
                "// Line 22: ",
                "// Line 23:         with connect(demo) as client:",
                "// Line 24:             job = client.submit(\"x\", fn_index=0)",
                "// Line 25:             assert job.result() == \"Hello, x!\"",
                "// Line 26: ",
                "// Line 27:     def test_all_status_messages(self, connect):",
                "// Line 28:         with gr.Blocks() as demo:",
                "// Line 29:             name = gr.Textbox()",
                "// Line 30:             output = gr.Textbox()",
                "// Line 31: ",
                "// Line 32:             def greet(x):",
                "// vulnerable line: 33: time.sleep(2)",
                "// Line 34:                 return f\"Hello, {x}!\"",
                "// Line 35: ",
                "// Line 36:             name.submit(greet, name, output, concurrency_limit=2)",
                "// Line 37: ",
                "// Line 38:         app, local_url, _ = demo.launch(prevent_thread_lock=True)",
                "// Line 39:         test_client = TestClient(app)",
                "// Line 40:         client = grc.Client(local_url)",
                "// Line 41: ",
                "// Line 42:         client.submit(\"a\", fn_index=0)",
                "// Line 43:         job2 = client.submit(\"b\", fn_index=0)",
                "// Line 85:     def test_default_concurrency_limits(self, default_concurrency_limit, statuses):",
                "// Line 86:         with gr.Blocks() as demo:",
                "// Line 87:             a = gr.Number()",
                "// Line 88:             b = gr.Number()",
                "// Line 89:             output = gr.Number()",
                "// Line 90: ",
                "// Line 91:             add_btn = gr.Button(\"Add\")",
                "// Line 92: ",
                "// Line 93:             @add_btn.click(inputs=[a, b], outputs=output)",
                "// Line 94:             def add(x, y):",
                "// vulnerable line: 95: time.sleep(2)",
                "// Line 96:                 return x + y",
                "// Line 97: ",
                "// Line 98:         demo.queue(default_concurrency_limit=default_concurrency_limit)",
                "// Line 99:         _, local_url, _ = demo.launch(",
                "// Line 100:             prevent_thread_lock=True,",
                "// Line 101:         )",
                "// Line 102:         client = grc.Client(local_url)",
                "// Line 103: ",
                "// Line 104:         add_job_1 = client.submit(1, 1, fn_index=0)",
                "// Line 105:         add_job_2 = client.submit(1, 1, fn_index=0)",
                "// Line 106:         add_job_3 = client.submit(1, 1, fn_index=0)",
                "// Line 107: ",
                "// vulnerable line: 108: time.sleep(1)",
                "// Line 109: ",
                "// Line 110:         add_job_statuses = [add_job_1.status(), add_job_2.status(), add_job_3.status()]",
                "// Line 111:         assert sorted([s.code.value for s in add_job_statuses]) == statuses",
                "// Line 112: ",
                "// Line 113:     def test_concurrency_limits(self, connect):",
                "// Line 114:         with gr.Blocks() as demo:",
                "// Line 115:             a = gr.Number()",
                "// Line 116:             b = gr.Number()",
                "// Line 117:             output = gr.Number()",
                "// Line 118: ",
                "// Line 119:             add_btn = gr.Button(\"Add\")",
                "// Line 120: ",
                "// Line 121:             @add_btn.click(inputs=[a, b], outputs=output, concurrency_limit=2)",
                "// Line 122:             def add(x, y):",
                "// vulnerable line: 123: time.sleep(2)",
                "// Line 124:                 return x + y",
                "// Line 125: ",
                "// Line 126:             sub_btn = gr.Button(\"Subtract\")",
                "// Line 127: ",
                "// Line 128:             @sub_btn.click(inputs=[a, b], outputs=output, concurrency_limit=None)",
                "// Line 129:             def sub(x, y):",
                "// vulnerable line: 130: time.sleep(2)",
                "// Line 131:                 return x - y",
                "// Line 132: ",
                "// Line 133:             mul_btn = gr.Button(\"Multiply\")",
                "// Line 134: ",
                "// Line 135:             @mul_btn.click(",
                "// Line 136:                 inputs=[a, b],",
                "// Line 137:                 outputs=output,",
                "// Line 138:                 concurrency_limit=2,",
                "// Line 139:                 concurrency_id=\"muldiv\",",
                "// Line 140:             )",
                "// Line 141:             def mul(x, y):",
                "// vulnerable line: 142: time.sleep(2)",
                "// Line 143:                 return x * y",
                "// Line 144: ",
                "// Line 145:             div_btn = gr.Button(\"Divide\")",
                "// Line 146: ",
                "// Line 147:             @div_btn.click(",
                "// Line 148:                 inputs=[a, b],",
                "// Line 149:                 outputs=output,",
                "// Line 150:                 concurrency_limit=2,",
                "// Line 151:                 concurrency_id=\"muldiv\",",
                "// Line 152:             )",
                "// Line 153:             def div(x, y):",
                "// vulnerable line: 154: time.sleep(2)",
                "// Line 155:                 return x / y",
                "// Line 156: ",
                "// Line 157:         with connect(demo) as client:",
                "// Line 158:             add_job_1 = client.submit(1, 1, fn_index=0)",
                "// Line 159:             add_job_2 = client.submit(1, 1, fn_index=0)",
                "// Line 160:             add_job_3 = client.submit(1, 1, fn_index=0)",
                "// Line 161:             sub_job_1 = client.submit(1, 1, fn_index=1)",
                "// Line 162:             sub_job_2 = client.submit(1, 1, fn_index=1)",
                "// vulnerable line: 163: sub_job_3 = client.submit(1, 1, fn_index=1)",
                "// vulnerable line: 164: sub_job_3 = client.submit(1, 1, fn_index=1)",
                "// Line 165:             mul_job_1 = client.submit(1, 1, fn_index=2)",
                "// Line 166:             div_job_1 = client.submit(1, 1, fn_index=3)",
                "// Line 167:             mul_job_2 = client.submit(1, 1, fn_index=2)",
                "// Line 168: ",
                "// vulnerable line: 169: time.sleep(1)",
                "// Line 170: ",
                "// Line 171:             add_job_statuses = [",
                "// Line 172:                 add_job_1.status(),",
                "// Line 173:                 add_job_2.status(),",
                "// Line 174:                 add_job_3.status(),",
                "// Line 175:             ]",
                "// Line 176:             assert sorted([s.code.value for s in add_job_statuses]) == [",
                "// Line 177:                 \"IN_QUEUE\",",
                "// Line 178:                 \"PROCESSING\",",
                "// Line 179:                 \"PROCESSING\","
            ]
        },
        {
            "filename_of_changes": "utils.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "19",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        }
    ]
}