{
    "cve_id": "CVE-2022-4968",
    "cve_description": "netplan leaks the private key of wireguard to local users. Versions after 1.0 are not affected.",
    "cve_publish_date": "2024-06-07T01:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "libnetplan: use more restrictive file permissions\n\nA new util.c:_netplan_g_string_free_to_file_with_permissions() was added\nand accepts the owner, group and file mode as arguments. When these\nproperties can't be set, when the generator is called by a non-root user\nfor example, it will not hard-fail. This function is called by unit\ntests where we can't set the owner to a privileged account for example.\n\nWhen generating backend files, use more restrictive permissions:\n\nnetworkd related files will be owned by root:systemd-network and have\nmode 0640.\n\nservice unit files will be owned by root:root and have mode 0640.\nudevd files will be owned by root:root with mode 0640.\n\nwpa_supplicant and Network Manager files will continue with the existing\npermissions.\n\nAutopkgtests will check if the permissions are set as expected when\ncalling the generator.\n\nThis fix addresses CVE-2022-4968",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "test_auth.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 219:   private_key_passwd=\"d3cryptPr1v4t3K3y\"",
                "// Line 220:   phase2=\"auth=MSCHAPV2\"",
                "// Line 221: }",
                "// Line 222: ''')",
                "// Line 223:             self.assertEqual(stat.S_IMODE(os.fstat(f.fileno()).st_mode), 0o600)",
                "// Line 224:         self.assertTrue(os.path.isfile(os.path.join(",
                "// Line 225:             self.workdir.name, 'run/systemd/system/netplan-wpa-eth0.service')))",
                "// Line 226: ",
                "// Line 227:         with open(os.path.join(self.workdir.name, 'run/systemd/system/netplan-wpa-eth0.service')) as f:",
                "// Line 228:             self.assertEqual(f.read(), SD_WPA % {'iface': 'eth0', 'drivers': 'wired'})",
                "// vulnerable line: 229: self.assertEqual(stat.S_IMODE(os.fstat(f.fileno()).st_mode), 0o644)",
                "// Line 230:         self.assertTrue(os.path.islink(os.path.join(",
                "// Line 231:             self.workdir.name, 'run/systemd/system/systemd-networkd.service.wants/netplan-wpa-eth0.service')))",
                "// Line 232: ",
                "// Line 233: ",
                "// Line 234: class TestNetworkManager(TestBase):",
                "// Line 235: ",
                "// Line 236:     def test_auth_wifi_detailed(self):",
                "// Line 237:         self.generate('''network:",
                "// Line 238:   version: 2",
                "// Line 239:   renderer: NetworkManager"
            ]
        },
        {
            "filename_of_changes": "test_wifis.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "1",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 140:   psk=\"s0s3kr1t\"",
                "// Line 141: }",
                "// Line 142: ''', new_config)",
                "// Line 143:             self.assertIn('country=DE",
                "// Line 144: ', new_config)",
                "// Line 145:             self.assertEqual(stat.S_IMODE(os.fstat(f.fileno()).st_mode), 0o600)",
                "// Line 146:         self.assertTrue(os.path.isfile(os.path.join(",
                "// Line 147:             self.workdir.name, 'run/systemd/system/netplan-wpa-wl0.service')))",
                "// Line 148:         with open(os.path.join(self.workdir.name, 'run/systemd/system/netplan-wpa-wl0.service')) as f:",
                "// Line 149:             self.assertEqual(f.read(), SD_WPA % {'iface': 'wl0', 'drivers': 'nl80211,wext'})",
                "// vulnerable line: 150: self.assertEqual(stat.S_IMODE(os.fstat(f.fileno()).st_mode), 0o644)",
                "// Line 151:         self.assertTrue(os.path.islink(os.path.join(",
                "// Line 152:             self.workdir.name, 'run/systemd/system/systemd-networkd.service.wants/netplan-wpa-wl0.service')))",
                "// Line 153: ",
                "// Line 154:     def test_wifi_route(self):",
                "// Line 155:         self.generate('''network:",
                "// Line 156:   version: 2",
                "// Line 157:   wifis:",
                "// Line 158:     wl0:",
                "// Line 159:       access-points:",
                "// Line 160:         workplace:"
            ]
        }
    ]
}