{
    "cve_id": "CVE-2024-37167",
    "cve_description": "Tuleap is an Open Source Suite to improve management of software developments and collaboration. Users are able to see backlog items that they should not see. This issue has been patched in Tuleap Community Edition version 15.9.99.97.",
    "cve_publish_date": "2024-06-25T20:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fix: request #38297 Permissions of the backlog items are not verified\n\nChange-Id: I5ea5e5cb4e5d320e77cb174fda9c598fd4604963",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "AgileDashboard_Milestone_Backlog_BacklogItemCollectionFactoryTest.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "BacklogItemCollectionFactory.class.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "25",
            "number_of_lines_deleted_vulnerable_to_cve": "10",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 178:         $item_collection = $backlog->getOpenClosedUnplannedArtifacts($user, $sub_milestone_ids);",
                "// Line 179:         return $this->buildBacklogItemCollection($item_collection, $user, $milestone, $redirection_url);",
                "// Line 180:     }",
                "// Line 181: ",
                "// Line 182:     private function buildBacklogItemCollection(",
                "// Line 183:         AgileDashboard_Milestone_Backlog_DescendantItemsCollection $item_collection,",
                "// Line 184:         PFUser $user,",
                "// Line 185:         Planning_Milestone $milestone,",
                "// Line 186:         ?string $redirection_url,",
                "// Line 187:     ): AgileDashboard_Milestone_Backlog_IBacklogItemCollection {",
                "// vulnerable line: 188: $artifacts        = [];",
                "// vulnerable line: 189: $backlog_item_ids = [];",
                "// Line 190: ",
                "// vulnerable line: 191: foreach ($item_collection as $artifact) {",
                "// Line 192:             $artifacts[$artifact->getId()] = $artifact;",
                "// vulnerable line: 193: $backlog_item_ids[]            = $artifact->getId();",
                "// Line 194:         }",
                "// Line 195: ",
                "// Line 196:         $parents   = $this->getParentArtifacts($milestone, $user, $backlog_item_ids);",
                "// Line 197:         $semantics = $this->getArtifactsSemantics($user, $milestone, $backlog_item_ids, $artifacts);",
                "// Line 198: ",
                "// Line 199:         $collection = $this->backlog_item_builder->getCollection();",
                "// Line 200:         foreach ($artifacts as $artifact) {",
                "// Line 201:             $artifact_id = $artifact->getId();",
                "// Line 202: ",
                "// Line 203:             if (! isset($semantics[$artifact_id]) || ! isset($semantics[$artifact_id][Tracker_Semantic_Status::NAME])) {",
                "// Line 227:         return $collection;",
                "// Line 228:     }",
                "// Line 229: ",
                "// Line 230:     public function getUnplannedOpenCollection(",
                "// Line 231:         PFUser $user,",
                "// Line 232:         Planning_Milestone $milestone,",
                "// Line 233:         AgileDashboard_Milestone_Backlog_Backlog $backlog,",
                "// Line 234:         $redirect_to_self,",
                "// Line 235:     ): AgileDashboard_Milestone_Backlog_IBacklogItemCollection {",
                "// Line 236:         $artifacts         = [];",
                "// vulnerable line: 237: $backlog_item_ids  = [];",
                "// Line 238:         $sub_milestone_ids = $this->getSubmilestoneIds($user, $milestone);",
                "// Line 239: ",
                "// Line 240:         $item_collection = $backlog->getOpenUnplannedArtifacts($user, $sub_milestone_ids);",
                "// vulnerable line: 241: foreach ($item_collection as $artifact) {",
                "// Line 242:             $artifacts[$artifact->getId()] = $artifact;",
                "// vulnerable line: 243: $backlog_item_ids[]            = $artifact->getId();",
                "// Line 244:         }",
                "// Line 245: ",
                "// Line 246:         $collection = $this->buildTopBacklogCollection(",
                "// Line 247:             $user,",
                "// Line 248:             $milestone,",
                "// Line 249:             $redirect_to_self,",
                "// vulnerable line: 250: $backlog_item_ids,",
                "// Line 251:             $artifacts",
                "// Line 252:         );",
                "// Line 253:         $collection->setTotalAvaialableSize($item_collection->getTotalAvaialableSize());",
                "// Line 254: ",
                "// Line 255:         return $collection;",
                "// Line 256:     }",
                "// Line 257: ",
                "// Line 258:     public function getInconsistentCollection(",
                "// Line 259:         PFUser $user,",
                "// Line 260:         Planning_Milestone $milestone,",
                "// Line 308:         $this->open_closed_and_inconsistent_collection[$id] = $this->backlog_item_builder->getCollection();",
                "// Line 309:         $this->todo_collection[$id]                         = $this->backlog_item_builder->getCollection();",
                "// Line 310:         $this->done_collection[$id]                         = $this->backlog_item_builder->getCollection();",
                "// Line 311:         $this->inconsistent_collection[$id]                 = $this->backlog_item_builder->getCollection();",
                "// Line 312:         $artifacts                                          = [];",
                "// Line 313:         $backlog_item_ids                                   = [];",
                "// Line 314: ",
                "// Line 315:         $items_collection = $backlog->getArtifacts($user);",
                "// Line 316:         foreach ($items_collection as $artifact) {",
                "// Line 317:             $artifacts[$artifact->getId()] = $artifact;",
                "// vulnerable line: 318: $backlog_item_ids[]            = $artifact->getId();",
                "// Line 319:         }",
                "// Line 320: ",
                "// Line 321:         $parents   = $this->getParentArtifacts($milestone, $user, $backlog_item_ids);",
                "// Line 322:         $semantics = $this->getArtifactsSemantics($user, $milestone, $backlog_item_ids, $artifacts);",
                "// Line 323:         $planned   = $this->getPlannedArtifactIds($user, $milestone);",
                "// Line 324: ",
                "// Line 325:         foreach ($artifacts as $artifact) {",
                "// Line 326:             $this->pushItem(",
                "// Line 327:                 $milestone,",
                "// Line 328:                 $artifact,",
                "// Line 706:         int $limit,",
                "// Line 707:         int $offset,",
                "// Line 708:     ): AgileDashboard_Milestone_Backlog_IBacklogItemCollection {",
                "// Line 709:         $rows                  = $this->artifacts_in_explicit_backlog_dao->getOpenTopBacklogItemsForProjectSortedByRank(",
                "// Line 710:             (int) $milestone->getGroupId(),",
                "// Line 711:             $limit,",
                "// Line 712:             $offset",
                "// Line 713:         );",
                "// Line 714:         $collection_total_size = $this->artifacts_in_explicit_backlog_dao->foundRows();",
                "// Line 715: ",
                "// vulnerable line: 716: $backlog_item_ids = [];",
                "// vulnerable line: 717: $artifacts        = [];",
                "// Line 718:         foreach ($rows as $row) {",
                "// Line 719:             $artifact = $this->artifact_factory->getArtifactById($row['artifact_id']);",
                "// Line 720:             if ($artifact === null) {",
                "// Line 721:                 continue;",
                "// Line 722:             }",
                "// Line 723:             $artifacts[$artifact->getId()] = $artifact;",
                "// vulnerable line: 724: $backlog_item_ids[]            = $artifact->getId();",
                "// Line 725:         }",
                "// Line 726: ",
                "// Line 727:         $collection = $this->buildTopBacklogCollection(",
                "// Line 728:             $user,",
                "// Line 729:             $milestone,",
                "// Line 730:             $redirect_to_self,",
                "// vulnerable line: 731: $backlog_item_ids,",
                "// Line 732:             $artifacts",
                "// Line 733:         );",
                "// Line 734:         $collection->setTotalAvaialableSize($collection_total_size);",
                "// Line 735: ",
                "// Line 736:         return $collection;",
                "// Line 737:     }",
                "// Line 738: ",
                "// Line 739:     private function buildTopBacklogCollection(",
                "// Line 740:         PFUser $user,",
                "// Line 741:         Planning_Milestone $milestone,",
                "// Line 742:         ?string $redirection_url,",
                "// vulnerable line: 743: array $backlog_item_ids,",
                "// Line 744:         array $open_artifacts,",
                "// Line 745:     ): AgileDashboard_Milestone_Backlog_IBacklogItemCollection {",
                "// Line 746:         $parents   = $this->getParentArtifacts($milestone, $user, $backlog_item_ids);",
                "// Line 747:         $semantics = $this->getArtifactsSemantics($user, $milestone, $backlog_item_ids, $open_artifacts);",
                "// Line 748: ",
                "// Line 749:         if (empty($backlog_item_ids)) {",
                "// Line 750:             $children = 0;",
                "// Line 751:         } else {",
                "// Line 752:             $children = $this->artifact_factory->getChildrenCount($backlog_item_ids);",
                "// Line 753:         }",
                "// Line 754: ",
                "// Line 755:         $collection = $this->backlog_item_builder->getCollection();",
                "// vulnerable line: 756: foreach ($open_artifacts as $artifact) {",
                "// Line 757:             $artifact_id = $artifact->getId();",
                "// Line 758: ",
                "// Line 759:             if (! isset($semantics[$artifact_id])) {",
                "// Line 760:                 continue;",
                "// Line 761:             }",
                "// Line 762: ",
                "// Line 763:             $artifact->setTitle($this->artifact_factory->getTitleFromRowAsText($semantics[$artifact_id]));",
                "// Line 764: ",
                "// Line 765:             $backlog_item = $this->backlog_item_builder->getItem($artifact, $redirection_url, false);",
                "// Line 766:             $backlog_item->setStatus($artifact->getStatus(), Tracker_Semantic_Status::OPEN);"
            ]
        },
        {
            "filename_of_changes": "ContentForMiletoneProvider.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 69:             new AgileDashboard_Milestone_Backlog_BacklogItemCollectionFactory(",
                "// Line 70:                 new AgileDashboard_BacklogItemDao(),",
                "// Line 71:                 $tracker_artifact_factory,",
                "// Line 72:                 $milestone_factory,",
                "// Line 73:                 $planning_factory,",
                "// Line 74:                 new AgileDashboard_Milestone_Backlog_BacklogItemBuilder(),",
                "// Line 75:                 new RemainingEffortValueRetriever(",
                "// Line 76:                     Tracker_FormElementFactory::instance()",
                "// Line 77:                 ),",
                "// Line 78:                 new ArtifactsInExplicitBacklogDao(),",
                "// vulnerable line: 79: new Tracker_Artifact_PriorityDao()",
                "// Line 80:             )",
                "// Line 81:         );",
                "// Line 82:     }",
                "// Line 83: ",
                "// Line 84:     public function getContent(",
                "// Line 85:         \\Planning_Milestone $milestone,",
                "// Line 86:         \\PFUser $user,",
                "// Line 87:         int $limit,",
                "// Line 88:         int $offset,",
                "// Line 89:     ): AgileDashboard_Milestone_Backlog_IBacklogItemCollection {"
            ]
        },
        {
            "filename_of_changes": "MilestoneResource.class.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 157:         );",
                "// Line 158: ",
                "// Line 159:         $this->backlog_item_collection_factory = new AgileDashboard_Milestone_Backlog_BacklogItemCollectionFactory(",
                "// Line 160:             new AgileDashboard_BacklogItemDao(),",
                "// Line 161:             $this->tracker_artifact_factory,",
                "// Line 162:             $this->milestone_factory,",
                "// Line 163:             $planning_factory,",
                "// Line 164:             new AgileDashboard_Milestone_Backlog_BacklogItemBuilder(),",
                "// Line 165:             new RemainingEffortValueRetriever(Tracker_FormElementFactory::instance()),",
                "// Line 166:             new ArtifactsInExplicitBacklogDao(),",
                "// vulnerable line: 167: new Tracker_Artifact_PriorityDao()",
                "// Line 168:         );",
                "// Line 169: ",
                "// Line 170:         $this->milestone_validator = new MilestoneResourceValidator(",
                "// Line 171:             $planning_factory,",
                "// Line 172:             $this->tracker_artifact_factory,",
                "// Line 173:             $this->backlog_factory,",
                "// Line 174:             $this->milestone_factory,",
                "// Line 175:             $this->backlog_item_collection_factory,",
                "// Line 176:         );",
                "// Line 177: "
            ]
        },
        {
            "filename_of_changes": "Pane.class.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 218:         $backlog_item_collection_factory = new AgileDashboard_Milestone_Backlog_BacklogItemCollectionFactory(",
                "// Line 219:             new AgileDashboard_BacklogItemDao(),",
                "// Line 220:             $this->artifact_factory,",
                "// Line 221:             $this->milestone_factory,",
                "// Line 222:             $this->planning_factory,",
                "// Line 223:             new AgileDashboard_Milestone_Backlog_BacklogItemBuilder(),",
                "// Line 224:             new RemainingEffortValueRetriever(",
                "// Line 225:                 $this->tracker_form_element_factory",
                "// Line 226:             ),",
                "// Line 227:             new ArtifactsInExplicitBacklogDao(),",
                "// vulnerable line: 228: new Tracker_Artifact_PriorityDao()",
                "// Line 229:         );",
                "// Line 230: ",
                "// Line 231:         $backlog_factory = new AgileDashboard_Milestone_Backlog_BacklogFactory(",
                "// Line 232:             new AgileDashboard_BacklogItemDao(),",
                "// Line 233:             $this->artifact_factory,",
                "// Line 234:             $this->planning_factory,",
                "// Line 235:         );",
                "// Line 236: ",
                "// Line 237:         return $backlog_item_collection_factory->getOpenAndClosedCollection(",
                "// Line 238:             $this->user_manager->getCurrentUser(),"
            ]
        },
        {
            "filename_of_changes": "ProjectBacklogResource.class.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 117:         $backlog_item_collection_factory = new AgileDashboard_Milestone_Backlog_BacklogItemCollectionFactory(",
                "// Line 118:             new AgileDashboard_BacklogItemDao(),",
                "// Line 119:             $tracker_artifact_factory,",
                "// Line 120:             $this->milestone_factory,",
                "// Line 121:             $this->planning_factory,",
                "// Line 122:             new AgileDashboard_Milestone_Backlog_BacklogItemBuilder(),",
                "// Line 123:             new RemainingEffortValueRetriever(",
                "// Line 124:                 $tracker_form_element_factory",
                "// Line 125:             ),",
                "// Line 126:             new ArtifactsInExplicitBacklogDao(),",
                "// vulnerable line: 127: new Tracker_Artifact_PriorityDao()",
                "// Line 128:         );",
                "// Line 129: ",
                "// Line 130:         $this->milestone_validator = new MilestoneResourceValidator(",
                "// Line 131:             $this->planning_factory,",
                "// Line 132:             $tracker_artifact_factory,",
                "// Line 133:             $backlog_factory,",
                "// Line 134:             $this->milestone_factory,",
                "// Line 135:             $backlog_item_collection_factory,",
                "// Line 136:         );",
                "// Line 137: "
            ]
        },
        {
            "filename_of_changes": "ProjectBacklogResource.class.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 87:         $this->backlog_item_collection_factory = new AgileDashboard_Milestone_Backlog_BacklogItemCollectionFactory(",
                "// Line 88:             new AgileDashboard_BacklogItemDao(),",
                "// Line 89:             $tracker_artifact_factory,",
                "// Line 90:             $this->milestone_factory,",
                "// Line 91:             $this->planning_factory,",
                "// Line 92:             new AgileDashboard_Milestone_Backlog_BacklogItemBuilder(),",
                "// Line 93:             new RemainingEffortValueRetriever(",
                "// Line 94:                 $tracker_form_element_factory",
                "// Line 95:             ),",
                "// Line 96:             new ArtifactsInExplicitBacklogDao(),",
                "// vulnerable line: 97: new \\Tracker_Artifact_PriorityDao()",
                "// Line 98:         );",
                "// Line 99: ",
                "// Line 100:         $this->parent_tracker_retriever = new ParentTrackerRetriever($this->planning_factory);",
                "// Line 101:     }",
                "// Line 102: ",
                "// Line 103:     /**",
                "// Line 104:      * Get the backlog with the items that can be planned in a top-milestone of a given project",
                "// Line 105:      */",
                "// Line 106:     public function get(PFUser $user, Project $project, $limit, $offset)",
                "// Line 107:     {"
            ]
        },
        {
            "filename_of_changes": "ProjectMilestonesPresenterBuilder.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 162:                 $planning_factory,",
                "// Line 163:             ),",
                "// Line 164:             new AgileDashboard_Milestone_Backlog_BacklogItemCollectionFactory(",
                "// Line 165:                 new AgileDashboard_BacklogItemDao(),",
                "// Line 166:                 $artifact_factory,",
                "// Line 167:                 $milestone_factory,",
                "// Line 168:                 $planning_factory,",
                "// Line 169:                 new AgileDashboard_Milestone_Backlog_BacklogItemBuilder(),",
                "// Line 170:                 new RemainingEffortValueRetriever(Tracker_FormElementFactory::instance()),",
                "// Line 171:                 new ArtifactsInExplicitBacklogDao(),",
                "// vulnerable line: 172: new Tracker_Artifact_PriorityDao()",
                "// Line 173:             ),",
                "// Line 174:             $milestone_factory,",
                "// Line 175:             new ExplicitBacklogDao(),",
                "// Line 176:             new ArtifactsInExplicitBacklogDao(),",
                "// Line 177:             $semantic_timeframe_builder,",
                "// Line 178:             new CountElementsModeChecker(new ProjectsCountModeDao()),",
                "// Line 179:             new ProjectAccessChecker(",
                "// Line 180:                 new RestrictedUserCanAccessProjectVerifier(),",
                "// Line 181:                 \\EventManager::instance()",
                "// Line 182:             )"
            ]
        },
        {
            "filename_of_changes": "TrackersPermissionsRetriever.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "0",
            "number_of_lines_deleted_vulnerable_to_cve": "4",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 53:     public const FEATURE_FLAG = 'new_tracker_permissions_check';",
                "// Line 54: ",
                "// Line 55:     public function __construct(",
                "// Line 56:         private SearchUserGroupsPermissionOnFields $fields_dao,",
                "// Line 57:         private SearchUserGroupsPermissionOnTrackers $trackers_dao,",
                "// Line 58:         private SearchUserGroupsPermissionOnArtifacts $artifacts_dao,",
                "// Line 59:         private CheckUserCanAccessProject $project_access,",
                "// Line 60:         private EventDispatcherInterface $dispatcher,",
                "// Line 61:         private RetrieveUserById $user_manager,",
                "// Line 62:     ) {",
                "// vulnerable line: 63: }",
                "// Line 64: ",
                "// Line 65:     public static function build(): self",
                "// Line 66:     {",
                "// Line 67:         $dao = new TrackersPermissionsDao();",
                "// Line 68: ",
                "// Line 69:         return new self($dao, $dao, $dao, new URLVerification(), EventManager::instance(), UserManager::instance());",
                "// vulnerable line: 70: }",
                "// Line 71: ",
                "// Line 72:     public static function isEnabled(): bool",
                "// Line 73:     {",
                "// Line 74:         return (int) ForgeConfig::getFeatureFlag(self::FEATURE_FLAG) === 1;",
                "// vulnerable line: 75: }",
                "// Line 76: ",
                "// Line 77:     public function retrieveUserPermissionOnFields(PFUser $user, array $fields, FieldPermissionType $permission): UserPermissionsOnItems",
                "// Line 78:     {",
                "// Line 79:         if ($fields === []) {",
                "// Line 80:             return new UserPermissionsOnItems($user, $permission, [], []);",
                "// vulnerable line: 81: }",
                "// Line 82: ",
                "// Line 83:         if (",
                "// Line 84:             $user instanceof Tracker_Workflow_WorkflowUser",
                "// Line 85:             || $user instanceof TuleapFunctionsUser",
                "// Line 86:             || ($permission === FieldPermissionType::PERMISSION_READ && $user instanceof Tracker_UserWithReadAllPermission)",
                "// Line 87:         ) {",
                "// Line 88:             return new UserPermissionsOnItems($user, $permission, $fields, []);",
                "// vulnerable line: 89: }",
                "// Line 90: ",
                "// Line 91:         $results = $this->fields_dao->searchUserGroupsPermissionOnFields(",
                "// Line 92:             $this->getUserUGroupsFromFields($user, $fields),",
                "// Line 93:             array_map(static fn(Tracker_FormElement $element) => $element->getId(), $fields),",
                "// Line 94:             $permission->value",
                "// Line 95:         );",
                "// Line 96: ",
                "// Line 97:         $allowed     = [];",
                "// Line 98:         $not_allowed = [];",
                "// Line 99:         foreach ($fields as $field) {",
                "// Line 100:             if (in_array($field->getId(), $results)) {",
                "// Line 101:                 $allowed[] = $field;",
                "// Line 102:             } else {",
                "// Line 103:                 $not_allowed[] = $field;",
                "// vulnerable line: 104: }",
                "// vulnerable line: 105: }",
                "// Line 106: ",
                "// Line 107:         return new UserPermissionsOnItems($user, $permission, $allowed, $not_allowed);",
                "// vulnerable line: 108: }",
                "// Line 109: ",
                "// Line 110:     public function retrieveUserPermissionOnTrackers(PFUser $user, array $trackers, TrackerPermissionType $permission): UserPermissionsOnItems",
                "// Line 111:     {",
                "// vulnerable line: 112: if (! self::isEnabled()) {",
                "// vulnerable line: 113: throw new LogicException('Trackers permissions on tracker are disabled by feature flag.');",
                "// vulnerable line: 114: }",
                "// Line 115: ",
                "// Line 116:         if ($trackers === []) {",
                "// Line 117:             return new UserPermissionsOnItems($user, $permission, [], []);",
                "// vulnerable line: 118: }",
                "// Line 119: ",
                "// Line 120:         return match ($permission) {",
                "// Line 121:             TrackerPermissionType::PERMISSION_VIEW   => $this->buildTrackerViewPermissions($user, $trackers),",
                "// Line 122:             TrackerPermissionType::PERMISSION_SUBMIT => $this->buildTrackerSubmitPermissions($user, $trackers),",
                "// Line 123:         };",
                "// vulnerable line: 124: }",
                "// Line 125: ",
                "// Line 126:     /**",
                "// Line 127:      * @param Tracker[] $trackers",
                "// Line 128:      * @return UserPermissionsOnItems<Tracker, TrackerPermissionType>",
                "// Line 129:      */",
                "// Line 130:     private function buildTrackerViewPermissions(PFUser $user, array $trackers): UserPermissionsOnItems",
                "// Line 131:     {",
                "// Line 132:         $results = $this->trackers_dao->searchUserGroupsViewPermissionOnTrackers(",
                "// Line 133:             $this->getUserUGroupsFromTrackers($user, $trackers),",
                "// Line 134:             array_map(static fn(Tracker $tracker) => $tracker->getId(), $trackers)",
                "// Line 137:         $allowed     = [];",
                "// Line 138:         $not_allowed = [];",
                "// Line 139:         foreach ($trackers as $tracker) {",
                "// Line 140:             if (",
                "// Line 141:                 (in_array($tracker->getId(), $results, true) || $tracker->userIsAdmin($user))",
                "// Line 142:                 && $this->userCanAccessProject($user, $tracker->getProject())",
                "// Line 143:             ) {",
                "// Line 144:                 $allowed[] = $tracker;",
                "// Line 145:             } else {",
                "// Line 146:                 $not_allowed[] = $tracker;",
                "// vulnerable line: 147: }",
                "// vulnerable line: 148: }",
                "// Line 149: ",
                "// Line 150:         return new UserPermissionsOnItems($user, TrackerPermissionType::PERMISSION_VIEW, $allowed, $not_allowed);",
                "// vulnerable line: 151: }",
                "// Line 152: ",
                "// Line 153:     /**",
                "// Line 154:      * @param Tracker[] $trackers",
                "// Line 155:      * @return UserPermissionsOnItems<Tracker, TrackerPermissionType>",
                "// Line 156:      */",
                "// Line 157:     private function buildTrackerSubmitPermissions(PFUser $user, array $trackers): UserPermissionsOnItems",
                "// Line 158:     {",
                "// Line 159:         if ($user->isAnonymous()) {",
                "// Line 160:             return new UserPermissionsOnItems($user, TrackerPermissionType::PERMISSION_SUBMIT, [], $trackers);",
                "// vulnerable line: 161: }",
                "// Line 162: ",
                "// Line 163:         $results = $this->trackers_dao->searchUserGroupsSubmitPermissionOnTrackers(",
                "// Line 164:             $this->getUserUGroupsFromTrackers($user, $trackers),",
                "// Line 165:             array_map(static fn(Tracker $tracker) => $tracker->getId(), $trackers)",
                "// Line 166:         );",
                "// Line 167: ",
                "// Line 168:         $allowed     = [];",
                "// Line 169:         $not_allowed = [];",
                "// Line 170:         foreach ($trackers as $tracker) {",
                "// Line 171:             if ($this->canUserSubmitArtifactFromTracker($user, $tracker, $results)) {",
                "// Line 172:                 $allowed[] = $tracker;",
                "// Line 173:             } else {",
                "// Line 174:                 $not_allowed[] = $tracker;",
                "// vulnerable line: 175: }",
                "// vulnerable line: 176: }",
                "// Line 177: ",
                "// Line 178:         return new UserPermissionsOnItems($user, TrackerPermissionType::PERMISSION_SUBMIT, $allowed, $not_allowed);",
                "// vulnerable line: 179: }",
                "// Line 180: ",
                "// Line 181:     /**",
                "// Line 182:      * @param int[] $allowed_trackers",
                "// Line 183:      */",
                "// Line 184:     private function canUserSubmitArtifactFromTracker(PFUser $user, Tracker $tracker, array $allowed_trackers): bool",
                "// Line 185:     {",
                "// Line 186:         $project_access = $this->userCanAccessProject($user, $tracker->getProject());",
                "// Line 187:         if (",
                "// Line 188:             in_array($tracker->getId(), $allowed_trackers, true)",
                "// Line 189:             && $this->dispatcher->dispatch(new CanSubmitNewArtifact($user, $tracker))->canSubmitNewArtifact()",
                "// Line 190:             && $project_access",
                "// Line 191:         ) {",
                "// Line 192:             return true;",
                "// vulnerable line: 193: }",
                "// Line 194: ",
                "// Line 195:         if ($tracker->userIsAdmin($user) && $project_access) {",
                "// Line 196:             return true;",
                "// vulnerable line: 197: }",
                "// Line 198: ",
                "// Line 199:         return false;",
                "// vulnerable line: 200: }",
                "// Line 201: ",
                "// Line 202:     public function retrieveUserPermissionOnArtifacts(PFUser $user, array $artifacts, ArtifactPermissionType $permission): UserPermissionsOnItems",
                "// Line 203:     {",
                "// vulnerable line: 204: if (! self::isEnabled()) {",
                "// vulnerable line: 205: throw new LogicException('Trackers permissions on tracker are disabled by feature flag.');",
                "// vulnerable line: 206: }",
                "// Line 207: ",
                "// Line 208:         if ($artifacts === []) {",
                "// Line 209:             return new UserPermissionsOnItems($user, $permission, [], []);",
                "// vulnerable line: 210: }",
                "// Line 211: ",
                "// Line 212:         if ($permission === ArtifactPermissionType::PERMISSION_UPDATE && $user->isAnonymous()) {",
                "// Line 213:             return new UserPermissionsOnItems($user, $permission, [], $artifacts);",
                "// vulnerable line: 214: }",
                "// Line 215: ",
                "// Line 216:         $results = $this->artifacts_dao->searchUserGroupsViewPermissionOnArtifacts(",
                "// Line 217:             $this->getUserUGroupsFromArtifacts($user, $artifacts),",
                "// Line 218:             array_map(static fn(Artifact $artifact) => $artifact->getId(), $artifacts)",
                "// Line 219:         );",
                "// Line 220: ",
                "// Line 221:         $allowed     = [];",
                "// Line 222:         $not_allowed = [];",
                "// Line 223:         foreach ($artifacts as $artifact) {",
                "// Line 224:             if (",
                "// Line 225:                 (in_array($artifact->getId(), $results) && $this->userHavePermissionOnTracker($user, $artifact))",
                "// Line 226:                 || $artifact->getTracker()->userIsAdmin($user)",
                "// Line 227:             ) {",
                "// Line 228:                 $allowed[] = $artifact;",
                "// Line 229:             } else {",
                "// Line 230:                 $not_allowed[] = $artifact;",
                "// vulnerable line: 231: }",
                "// vulnerable line: 232: }",
                "// Line 233: ",
                "// Line 234:         return new UserPermissionsOnItems($user, $permission, $allowed, $not_allowed);",
                "// vulnerable line: 235: }",
                "// Line 236: ",
                "// Line 237:     /**",
                "// Line 238:      * @param Tracker_FormElement[] $fields",
                "// Line 239:      * @return int[]",
                "// Line 240:      */",
                "// Line 241:     private function getUserUGroupsFromFields(PFUser $user, array $fields): array",
                "// Line 242:     {",
                "// Line 243:         $ugroups_id = [];",
                "// Line 244:         foreach ($fields as $field) {",
                "// Line 245:             $project_id = (int) $field->getTracker()->getProject()->getID();",
                "// Line 246:             $ugroups_id = array_merge($ugroups_id, $user->getUgroups($project_id, ['project_id' => $project_id]));",
                "// vulnerable line: 247: }",
                "// Line 248: ",
                "// Line 249:         return array_map(static fn(int|string $id) => (int) $id, $ugroups_id);",
                "// vulnerable line: 250: }",
                "// Line 251: ",
                "// Line 252:     /**",
                "// Line 253:      * @param Tracker[] $trackers",
                "// Line 254:      * @return int[]",
                "// Line 255:      */",
                "// Line 256:     private function getUserUGroupsFromTrackers(PFUser $user, array $trackers): array",
                "// Line 257:     {",
                "// Line 258:         $ugroups_id = [];",
                "// Line 259:         foreach ($trackers as $tracker) {",
                "// Line 260:             $project_id = (int) $tracker->getProject()->getID();",
                "// Line 261:             $ugroups_id = array_merge($ugroups_id, $user->getUgroups($project_id, ['project_id' => $project_id]));",
                "// vulnerable line: 262: }",
                "// Line 263: ",
                "// Line 264:         return array_map(static fn(int|string $id) => (int) $id, $ugroups_id);",
                "// vulnerable line: 265: }",
                "// Line 266: ",
                "// Line 267:     /**",
                "// Line 268:      * @param Artifact[] $artifacts",
                "// Line 269:      * @return int[]",
                "// Line 270:      */",
                "// Line 271:     private function getUserUGroupsFromArtifacts(PFUser $user, array $artifacts): array",
                "// Line 272:     {",
                "// Line 273:         $ugroups_id = [];",
                "// Line 274:         foreach ($artifacts as $artifact) {",
                "// Line 275:             $project_id = (int) $artifact->getTracker()->getProject()->getID();",
                "// Line 276:             $ugroups_id = array_merge($ugroups_id, $user->getUgroups($project_id, ['project_id' => $project_id]));",
                "// vulnerable line: 277: }",
                "// Line 278: ",
                "// Line 279:         return array_map(static fn(int|string $id) => (int) $id, $ugroups_id);",
                "// vulnerable line: 280: }",
                "// Line 281: ",
                "// Line 282:     private function userCanAccessProject(PFUser $user, Project $project): bool",
                "// Line 283:     {",
                "// Line 284:         try {",
                "// Line 285:             return $this->project_access->userCanAccessProject($user, $project);",
                "// Line 286:         } catch (Project_AccessException) {",
                "// Line 287:             return false;",
                "// vulnerable line: 288: }",
                "// vulnerable line: 289: }",
                "// Line 290: ",
                "// Line 291:     private function userHavePermissionOnTracker(PFUser $user, Artifact $artifact): bool",
                "// Line 292:     {",
                "// Line 293:         $tracker     = $artifact->getTracker();",
                "// Line 294:         $permissions = $tracker->getAuthorizedUgroupsByPermissionType();",
                "// Line 295: ",
                "// Line 296:         foreach ($permissions as $permission_type => $ugroups) {",
                "// Line 297:             switch ($permission_type) {",
                "// Line 298:                 case Tracker::PERMISSION_FULL:",
                "// Line 299:                     foreach ($ugroups as $ugroup) {",
                "// Line 300:                         if ($user->isMemberOfUGroup($ugroup, (int) $tracker->getGroupId())) {",
                "// Line 301:                             return true;",
                "// vulnerable line: 302: }",
                "// vulnerable line: 303: }",
                "// Line 304:                     break;",
                "// Line 305: ",
                "// Line 306:                 case Tracker::PERMISSION_SUBMITTER:",
                "// Line 307:                     foreach ($ugroups as $ugroup) {",
                "// Line 308:                         if ($user->isMemberOfUGroup($ugroup, (int) $tracker->getGroupId())) {",
                "// Line 309:                             // check that submitter is also a member",
                "// Line 310:                             $submitter = $artifact->getSubmittedByUser();",
                "// Line 311:                             if ($submitter->isMemberOfUGroup($ugroup, (int) $tracker->getGroupId())) {",
                "// Line 312:                                 return true;",
                "// vulnerable line: 313: }",
                "// vulnerable line: 314: }",
                "// vulnerable line: 315: }",
                "// Line 316:                     break;",
                "// Line 317: ",
                "// Line 318:                 case Tracker::PERMISSION_ASSIGNEE:",
                "// Line 319:                     foreach ($ugroups as $ugroup) {",
                "// Line 320:                         if ($user->isMemberOfUGroup($ugroup, (int) $tracker->getGroupId())) {",
                "// Line 321:                             // check that one of the assignees is also a member",
                "// Line 322:                             $permission_assignee = new Tracker_Permission_PermissionRetrieveAssignee($this->user_manager);",
                "// Line 323:                             foreach ($permission_assignee->getAssignees($artifact) as $assignee) {",
                "// Line 324:                                 if ($assignee->isMemberOfUGroup($ugroup, (int) $tracker->getGroupId())) {",
                "// Line 325:                                     return true;",
                "// vulnerable line: 326: }",
                "// vulnerable line: 327: }",
                "// vulnerable line: 328: }",
                "// vulnerable line: 329: }",
                "// Line 330:                     break;",
                "// Line 331: ",
                "// Line 332:                 case Tracker::PERMISSION_SUBMITTER_ONLY:",
                "// Line 333:                     foreach ($ugroups as $ugroup) {",
                "// Line 334:                         if (",
                "// Line 335:                             $user->isMemberOfUGroup($ugroup, (int) $tracker->getGroupId())",
                "// Line 336:                             && $user->getId() === $artifact->getSubmittedBy()",
                "// Line 337:                         ) {",
                "// Line 338:                             return true;",
                "// vulnerable line: 339: }",
                "// vulnerable line: 340: }",
                "// Line 341:                     break;",
                "// vulnerable line: 342: }",
                "// vulnerable line: 343: }",
                "// Line 344: ",
                "// Line 345:         return false;",
                "// vulnerable line: 346: }",
                "// vulnerable line: 347: }"
            ]
        }
    ]
}