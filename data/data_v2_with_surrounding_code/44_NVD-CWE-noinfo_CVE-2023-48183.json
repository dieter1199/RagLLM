{
    "cve_id": "CVE-2023-48183",
    "cve_description": "QuickJS before c4cdd61 has a build_for_in_iterator NULL pointer dereference because of an erroneous lexical scope of \"this\" with eval.",
    "cve_publish_date": "2024-04-23T07:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fixed lexical scope of 'this' with eval (github issue #192)",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "quickjs.c",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "7",
            "number_of_lines_deleted_vulnerable_to_cve": "6",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1:         for(i = 0; i < fd->arg_count; i++) {",
                "// Line 2:                 vd = &fd->args[i];",
                "// Line 3:                 if (vd->var_name != JS_ATOM_NULL) {",
                "// Line 4:                     get_closure_var(ctx, s, fd,",
                "// vulnerable line: 5: TRUE, i, vd->var_name, FALSE, FALSE,",
                "// vulnerable line: 6: JS_VAR_NORMAL);",
                "// Line 7:                 }",
                "// Line 8:             }",
                "// Line 9:             for(i = 0; i < fd->var_count; i++) {",
                "// Line 10:                 vd = &fd->vars[i];",
                "// Line 11:                 /* do not close top level last result */",
                "// Line 12:                 if (vd->scope_level == 0 &&",
                "// Line 13:                     vd->var_name != JS_ATOM__ret_ &&",
                "// Line 14:                     vd->var_name != JS_ATOM_NULL) {",
                "// Line 15:                     get_closure_var(ctx, s, fd,",
                "// vulnerable line: 16: FALSE, i, vd->var_name, FALSE, FALSE,",
                "// vulnerable line: 17: JS_VAR_NORMAL);",
                "// Line 18:                 }",
                "// Line 19:             }",
                "// Line 20:         } else {",
                "// Line 21:             for(i = 0; i < fd->var_count; i++) {",
                "// Line 22:                 vd = &fd->vars[i];",
                "// Line 23:                 /* do not close top level last result */",
                "// Line 24:                 if (vd->scope_level == 0 && is_var_in_arg_scope(vd)) {",
                "// Line 25:                     get_closure_var(ctx, s, fd,",
                "// vulnerable line: 26: FALSE, i, vd->var_name, FALSE, FALSE,",
                "// vulnerable line: 27: JS_VAR_NORMAL);",
                "// Line 28:                 }",
                "// Line 29:             }",
                "// Line 30:         }",
                "// Line 31:         if (fd->is_eval) {",
                "// Line 32:             int idx;",
                "// Line 33:             /* add direct eval variables (we are necessarily at the",
                "// Line 34:                top level) */",
                "// Line 35:             for (idx = 0; idx < fd->closure_var_count; idx++) {",
                "// Line 36:                 JSClosureVar *cv = &fd->closure_var[idx];",
                "// Line 37:                 get_closure_var2(ctx, s, fd,"
            ]
        }
    ]
}