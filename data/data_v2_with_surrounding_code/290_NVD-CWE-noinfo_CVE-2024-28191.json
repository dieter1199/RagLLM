{
    "cve_id": "CVE-2024-28191",
    "cve_description": "Contao is an open source content management system. Starting in version 4.0.0 and prior to version 4.13.40 and 5.3.4, it is possible to inject insert tags in frontend forms if the output is structured in a very specific way. Contao versions 4.13.40 and 5.3.4 have a patch for this issue. As a workaround, do not output user data from frontend forms next to each other, always separate them by at least one character.",
    "cve_publish_date": "2024-04-09T14:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Merge pull request from GHSA-747v-52c4-8vj8\n\nCo-authored-by: Leo Feyer <1192057+leofeyer@users.noreply.github.com>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "Input.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 1056:         if (\\is_array($varValue))",
                "// Line 1057:         {",
                "// Line 1058:             foreach ($varValue as $k=>$v)",
                "// Line 1059:             {",
                "// Line 1060:                 $varValue[$k] = static::encodeInsertTags($v);",
                "// Line 1061:             }",
                "// Line 1062: ",
                "// Line 1063:             return $varValue;",
                "// Line 1064:         }",
                "// Line 1065: ",
                "// vulnerable line: 1066: return str_replace(array('{{', '}}'), array('&#123;&#123;', '&#125;&#125;'), (string) $varValue);",
                "// Line 1067:     }",
                "// Line 1068: ",
                "// Line 1069:     /**",
                "// Line 1070:      * Fallback to the session form data if there is no post data",
                "// Line 1071:      *",
                "// Line 1072:      * @param string $strKey The variable name",
                "// Line 1073:      *",
                "// Line 1074:      * @return mixed The variable value",
                "// Line 1075:      */",
                "// Line 1076:     public static function findGet($strKey)"
            ]
        },
        {
            "filename_of_changes": "InputTest.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "8",
            "number_of_lines_deleted_vulnerable_to_cve": "6",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 161: ",
                "// Line 162:         $this->assertSame($expected, Input::postHtml('decoded', true));",
                "// Line 163:         $this->assertSame($expectedEncoded, Input::postHtml('encoded'));",
                "// Line 164:     }",
                "// Line 165: ",
                "// Line 166:     /**",
                "// Line 167:      * @group legacy",
                "// Line 168:      */",
                "// Line 169:     public function testEncodesInsertTags(): void",
                "// Line 170:     {",
                "// vulnerable line: 171: $source = '{{ foo }}';",
                "// vulnerable line: 172: $encoded = '&#123;&#123; foo &#125;&#125;';",
                "// Line 173: ",
                "// Line 174:         $_GET = $_POST = $_COOKIE = [",
                "// Line 175:             'key' => $source,",
                "// Line 176:             $source => 'value',",
                "// Line 177:         ];",
                "// Line 178: ",
                "// Line 179:         Input::initialize();",
                "// Line 180: ",
                "// Line 181:         // Insert tags do not get encoded in keys",
                "// Line 182:         $this->assertSame($source, array_keys($_GET)[1]);",
                "// Line 342:  Dow Jones, Apple ",
                "// Line 343:  T-Mobile\",",
                "// Line 344:         ];",
                "// Line 345:     }",
                "// Line 346: ",
                "// Line 347:     /**",
                "// Line 348:      * @dataProvider encodeNoneModeProvider",
                "// Line 349:      *",
                "// Line 350:      * @group legacy",
                "// Line 351:      */",
                "// vulnerable line: 352: public function testEncodeNoneMode(string $source, string $expected, string|null $expectedEncoded = null): void",
                "// Line 353:     {",
                "// Line 354:         $expectedEncoded ??= $expected;",
                "// Line 355: ",
                "// Line 356:         $this->assertSame($expected, Input::encodeInput($source, InputEncodingMode::encodeNone, false));",
                "// Line 357:         $this->assertSame($expectedEncoded, Input::encodeInput($source, InputEncodingMode::encodeNone));",
                "// Line 358:         $this->assertSame($expected.$expected, Input::encodeInput($source.$source, InputEncodingMode::encodeNone, false));",
                "// vulnerable line: 359: $this->assertSame($expectedEncoded.$expectedEncoded, Input::encodeInput($source.$source, InputEncodingMode::encodeNone));",
                "// Line 360: ",
                "// Line 361:         System::getContainer()->set('request_stack', $stack = new RequestStack());",
                "// Line 362:         $stack->push(new Request([], ['key' => $source]));",
                "// Line 363: ",
                "// Line 364:         $this->assertSame($expectedEncoded, Input::postRaw('key'));",
                "// Line 365: ",
                "// Line 366:         $stack->pop();",
                "// Line 367:         $_POST = ['key' => $source];",
                "// Line 368: ",
                "// Line 369:         $this->expectDeprecation('%sGetting data from $_POST%shas been deprecated%s');",
                "// Line 380: b",
                "// Line 381: c",
                "// Line 382: ",
                "// Line 383: d",
                "// Line 384: e\", \"a",
                "// Line 385: b",
                "// Line 386: c",
                "// Line 387: ",
                "// Line 388: d",
                "// Line 389: e\"];",
                "// vulnerable line: 390: yield ['{}', '{}'];",
                "// Line 391:         yield ['{{}}', '{{}}', '&#123;&#123;&#125;&#125;'];",
                "// vulnerable line: 392: yield ['{{{}}}', '{{{}}}', '&#123;&#123;{&#125;&#125;}'];",
                "// Line 393:         yield ['{{{{}}}}', '{{{{}}}}', '&#123;&#123;&#123;&#123;&#125;&#125;&#125;&#125;'];",
                "// Line 394:         yield [\"\u0000\", \"{FFFD}\"];",
                "// Line 395:         yield [\"\", \"{FFFD}\"];",
                "// Line 396:         yield [\"ÿ\", \"{FFFD}\"];",
                "// Line 397:         yield [\"Â\", \"{FFFD}\"];",
                "// Line 398:         yield [\"Â\", \"Â\"];",
                "// Line 399:         yield [\"ß¿\", \"ß¿\"];",
                "// Line 400:         yield [\"à \", \"{FFFD}\"];",
                "// Line 401:         yield [\"à \", \"à \"];",
                "// Line 402:         yield [\"ï¿¿\", \"ï¿¿\"];"
            ]
        },
        {
            "filename_of_changes": "SimpleTokenParser.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "2",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 103:         // Replace tokens",
                "// Line 104:         return preg_replace_callback(",
                "// Line 105:             '/##([^#=!<>\\s][^=!<>\\s]*?)##/',",
                "// Line 106:             function (array $matches) use ($data) {",
                "// Line 107:                 if (!\u0007rray_key_exists($matches[1], $data)) {",
                "// Line 108:                     $this->logger?->log(LogLevel::INFO, sprintf('Tried to parse unknown simple token \"%s\".', $matches[1]));",
                "// Line 109: ",
                "// Line 110:                     return '##'.$matches[1].'##';",
                "// Line 111:                 }",
                "// Line 112: ",
                "// vulnerable line: 113: return $data[$matches[1]];",
                "// Line 114:             },",
                "// Line 115:             $subject,",
                "// Line 116:         );",
                "// Line 117:     }",
                "// Line 118: ",
                "// Line 119:     private function evaluateExpression(string $expression, array $data): bool",
                "// Line 120:     {",
                "// Line 121:         $unmatchedVariables = array_diff($this->getVariables($expression), array_keys($data));",
                "// Line 122: ",
                "// Line 123:         if ($unmatchedVariables) {"
            ]
        }
    ]
}