{
    "cve_id": "CVE-2024-31987",
    "cve_description": "XWiki Platform is a generic wiki platform. Starting in version 6.4-milestone-1 and prior to versions 4.10.19, 15.5.4, and 15.10-rc-1, any user who can edit any page like their profile can create a custom skin with a template override that is executed with programming right, thus allowing remote code execution. This has been patched in XWiki 14.10.19, 15.5.4 and 15.10RC1. No known workarounds are available except for upgrading.",
    "cve_publish_date": "2024-04-10T21:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "XWIKI-21478: Improve rights check of template macros",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "XWikiVelocityManager.java",
            "code_language": "Java",
            "number_of_lines_added_for_mitigation": "21",
            "number_of_lines_deleted_vulnerable_to_cve": "9",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 66:  * @version $Id$",
                "// Line 67:  * @since 15.9RC1",
                "// Line 68:  */",
                "// Line 69: @Component",
                "// Line 70: @Singleton",
                "// Line 71: public class XWikiVelocityManager extends DefaultVelocityManager implements Initializable",
                "// Line 72: {",
                "// Line 73:     private static final String VELOCITYENGINE_CACHEKEY_NAME = \"velocity.engine.key\";",
                "// Line 74: ",
                "// Line 75:     private static final List<Event> EVENTS =",
                "// vulnerable line: 76: Arrays.<Event>asList(new TemplateUpdatedEvent(), new TemplateDeletedEvent());",
                "// Line 77: ",
                "// Line 78:     /**",
                "// Line 79:      * Used to access the current {@link XWikiContext}.",
                "// Line 80:      */",
                "// Line 81:     @Inject",
                "// Line 82:     private Provider<XWikiContext> xcontextProvider;",
                "// Line 83: ",
                "// Line 84:     /**",
                "// Line 85:      * Accessing it trough {@link Provider} since {@link TemplateManager} depends on {@link VelocityManager}.",
                "// Line 86:      */",
                "// Line 92: ",
                "// Line 93:     @Inject",
                "// Line 94:     private ObservationManager observation;",
                "// Line 95: ",
                "// Line 96:     @Inject",
                "// Line 97:     private Environment environment;",
                "// Line 98: ",
                "// Line 99:     @Inject",
                "// Line 100:     private Logger logger;",
                "// Line 101: ",
                "// vulnerable line: 102: private Map<String, VelocityEngine> velocityEngines = new ConcurrentHashMap<>();",
                "// Line 103: ",
                "// Line 104:     @Override",
                "// Line 105:     public void initialize() throws InitializationException",
                "// Line 106:     {",
                "// Line 107:         super.initialize();",
                "// Line 108: ",
                "// Line 109:         this.observation.addListener(new EventListener()",
                "// Line 110:         {",
                "// Line 111:             @Override",
                "// Line 112:             public void onEvent(Event event, Object source, Object data)",
                "// Line 113:             {",
                "// Line 114:                 if (event instanceof TemplateEvent) {",
                "// Line 115:                     TemplateEvent templateEvent = (TemplateEvent) event;",
                "// Line 116: ",
                "// vulnerable line: 117: velocityEngines.remove(templateEvent.getId());",
                "// Line 118:                 }",
                "// Line 119:             }",
                "// Line 120: ",
                "// Line 121:             @Override",
                "// Line 122:             public String getName()",
                "// Line 123:             {",
                "// Line 124:                 return XWikiVelocityManager.class.getName();",
                "// Line 125:             }",
                "// Line 126: ",
                "// Line 127:             @Override",
                "// Line 170:             if (templateCache != null) {",
                "// Line 171:                 templateCache.put(currentSkin.getId(), template);",
                "// Line 172:             }",
                "// Line 173:         }",
                "// Line 174: ",
                "// Line 175:         return template;",
                "// Line 176:     }",
                "// Line 177: ",
                "// Line 178:     /**",
                "// Line 179:      * @return the Velocity Engine corresponding to the current execution context. More specifically returns the",
                "// vulnerable line: 180: *         Velocity Engine for the current skin since each skin has its own Velocity Engine so that each skin can",
                "// vulnerable line: 181: *         have global velocimacros defined",
                "// Line 182:      * @throws XWikiVelocityException in case of an error while creating a Velocity Engine",
                "// Line 183:      */",
                "// Line 184:     @Override",
                "// Line 185:     public VelocityEngine getVelocityEngine() throws XWikiVelocityException",
                "// Line 186:     {",
                "// Line 187:         // Note: For improved performance we cache the Velocity Engines in order not to",
                "// Line 188:         // recreate them all the time. The key we use is the location to the skin's macro.vm",
                "// Line 189:         // file since caching on the skin would create more Engines than needed (some skins",
                "// Line 190:         // don't have a macros.vm file and some skins inherit from others).",
                "// Line 191: ",
                "// Line 241:         try (InputStream stream = this.environment.getResourceAsStream(\"/templates/macros.vm\")) {",
                "// Line 242:             if (stream != null) {",
                "// Line 243:                 try (InputStreamReader reader = new InputStreamReader(stream)) {",
                "// Line 244:                     VelocityTemplate mainMacros = compile(\"\", reader);",
                "// Line 245: ",
                "// Line 246:                     velocityEngine.addGlobalMacros(mainMacros.getMacros());",
                "// Line 247:                 }",
                "// Line 248:             }",
                "// Line 249:         }",
                "// Line 250: ",
                "// vulnerable line: 251: // Inject skin macros",
                "// vulnerable line: 252: if (skinMacrosTemplate != null) {",
                "// vulnerable line: 253: VelocityTemplate skinMacros = compile(\"\", new StringReader(skinMacrosTemplate.getContent().getContent()));",
                "// Line 254: ",
                "// Line 255:             velocityEngine.addGlobalMacros(skinMacros.getMacros());",
                "// Line 256:         }",
                "// Line 257:     }",
                "// Line 258: }"
            ]
        }
    ]
}