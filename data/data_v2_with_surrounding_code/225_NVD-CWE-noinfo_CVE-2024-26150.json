{
    "cve_id": "CVE-2024-26150",
    "cve_description": "`@backstage/backend-common` is a common functionality library for backends for Backstage, an open platform for building developer portals. In `@backstage/backend-common` prior to versions 0.21.1, 0.20.2, and 0.19.10, paths checks with the `resolveSafeChildPath` utility were not exhaustive enough, leading to risk of path traversal vulnerabilities if symlinks can be injected by attackers. This issue is patched in `@backstage/backend-common` versions 0.21.1, 0.20.2, and 0.19.10.",
    "cve_publish_date": "2024-02-23T16:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fix: make sure to construct the target from the resolved base path too\n\nSigned-off-by: blam <ben@blam.sh>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "paths.test.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 34:     });",
                "// Line 35: ",
                "// Line 36:     it('should throw an error if the path is outside of the base path', () => {",
                "// Line 37:       expect(() =>",
                "// Line 38:         resolveSafeChildPath(workspacePath, secondDirectory.path),",
                "// Line 39:       ).toThrow(",
                "// Line 40:         'Relative path is not allowed to refer to a directory outside its parent',",
                "// Line 41:       );",
                "// Line 42:     });",
                "// Line 43: ",
                "// vulnerable line: 44: it('should resolve to the full path if the target is inside the directory', () => {",
                "// Line 45:       expect(resolveSafeChildPath(workspacePath, './README.md')).toEqual(",
                "// vulnerable line: 46: `${workspacePath}/README.md`,",
                "// Line 47:       );",
                "// Line 48:     });",
                "// Line 49: ",
                "// Line 50:     it('should throw an error if the path is a symlink to a directory outside of the base path', () => {",
                "// Line 51:       mockDir.addContent({",
                "// Line 52:         [`${workspacePath}/symlink`]: ({ symlink }) =>",
                "// Line 53:           symlink(secondDirectory.path),",
                "// Line 54:       });",
                "// Line 55: ",
                "// Line 56:       expect(() =>"
            ]
        },
        {
            "filename_of_changes": "paths.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 56:  * Resolves a target path from a base path while guaranteeing that the result is",
                "// Line 57:  * a path that point to or within the base path. This is useful for resolving",
                "// Line 58:  * paths from user input, as it otherwise opens up for vulnerabilities.",
                "// Line 59:  *",
                "// Line 60:  * @public",
                "// Line 61:  * @param base - The base directory to resolve the path from.",
                "// Line 62:  * @param path - The target path, relative or absolute",
                "// Line 63:  * @returns A path that is guaranteed to point to or within the base path.",
                "// Line 64:  */",
                "// Line 65: export function resolveSafeChildPath(base: string, path: string): string {",
                "// vulnerable line: 66: const targetPath = resolvePath(base, path);",
                "// Line 67: ",
                "// vulnerable line: 68: if (!isChildPath(resolveRealPath(base), resolveRealPath(targetPath))) {",
                "// Line 69:     throw new NotAllowedError(",
                "// Line 70:       'Relative path is not allowed to refer to a directory outside its parent',",
                "// Line 71:     );",
                "// Line 72:   }",
                "// Line 73: ",
                "// Line 74:   return targetPath;",
                "// Line 75: }",
                "// Line 76: ",
                "// Line 77: function resolveRealPath(path: string): string {",
                "// Line 78:   try {"
            ]
        }
    ]
}