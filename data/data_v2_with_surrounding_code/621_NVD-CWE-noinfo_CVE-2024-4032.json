{
    "cve_id": "CVE-2024-4032",
    "cve_description": "The “ipaddress” module contained incorrect information about whether certain IPv4 and IPv6 addresses were designated as “globally reachable” or “private”. This affected the is_private and is_global properties of the ipaddress.IPv4Address, ipaddress.IPv4Network, ipaddress.IPv6Address, and ipaddress.IPv6Network classes, where values wouldn’t be returned in accordance with the latest information from the IANA Special-Purpose Address Registries.\n\nCPython 3.12.4 and 3.13.0a6 contain updated information from these registries and thus have the intended behavior.",
    "cve_publish_date": "2024-06-17T15:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "GH-113171: Fix \"private\" (non-global) IP address ranges (GH-113179)\n\n* GH-113171: Fix \"private\" (really non-global) IP address ranges\r\n\r\nThe _private_networks variables, used by various is_private\r\nimplementations, were missing some ranges and at the same time had\r\noverly strict ranges (where there are more specific ranges considered\r\nglobally reachable by the IANA registries).\r\n\r\nThis patch updates the ranges with what was missing or otherwise\r\nincorrect.\r\n\r\nI left 100.64.0.0/10 alone, for now, as it's been made special in [1]\r\nand I'm not sure if we want to undo that as I don't quite understand the\r\nmotivation behind it.\r\n\r\nThe _address_exclude_many() call returns 8 networks for IPv4, 121\r\nnetworks for IPv6.\r\n\r\n[1] https://github.com/python/cpython/issues/61602",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "test_ipaddress.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "20",
            "number_of_lines_deleted_vulnerable_to_cve": "1",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 2322:         self.assertEqual(True, ipaddress.ip_network(\"240.0.0.0/4\").is_private)",
                "// Line 2323:         self.assertEqual(True, ipaddress.ip_network(\"255.255.255.255/32\").is_private)",
                "// Line 2324: ",
                "// Line 2325:         self.assertEqual(False, ipaddress.ip_network(\"::/0\").is_private)",
                "// Line 2326:         self.assertEqual(False, ipaddress.ip_network(\"::ff/128\").is_private)",
                "// Line 2327: ",
                "// Line 2328:         self.assertEqual(True, ipaddress.ip_network(\"::1/128\").is_private)",
                "// Line 2329:         self.assertEqual(True, ipaddress.ip_network(\"::/128\").is_private)",
                "// Line 2330:         self.assertEqual(True, ipaddress.ip_network(\"::ffff:0:0/96\").is_private)",
                "// Line 2331:         self.assertEqual(True, ipaddress.ip_network(\"100::/64\").is_private)",
                "// vulnerable line: 2332: self.assertEqual(True, ipaddress.ip_network(\"2001::/23\").is_private)",
                "// Line 2333:         self.assertEqual(True, ipaddress.ip_network(\"2001:2::/48\").is_private)",
                "// Line 2334:         self.assertEqual(True, ipaddress.ip_network(\"2001:db8::/32\").is_private)",
                "// Line 2335:         self.assertEqual(True, ipaddress.ip_network(\"2001:10::/28\").is_private)",
                "// Line 2336:         self.assertEqual(True, ipaddress.ip_network(\"fc00::/7\").is_private)",
                "// Line 2337:         self.assertEqual(True, ipaddress.ip_network(\"fe80::/10\").is_private)",
                "// Line 2338: ",
                "// Line 2339:     def testReservedIpv6(self):",
                "// Line 2340: ",
                "// Line 2341:         self.assertEqual(True, ipaddress.ip_network('ffff::').is_multicast)",
                "// Line 2342:         self.assertEqual(True, ipaddress.ip_network(2**128 - 1).is_multicast)"
            ]
        }
    ]
}