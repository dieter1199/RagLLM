{
    "cve_id": "CVE-2024-30248",
    "cve_description": "Piccolo Admin is an admin interface/content management system for Python, built on top of Piccolo. Piccolo's admin panel allows media files to be uploaded. As a default, SVG is an allowed file type for upload. An attacker can upload an SVG which when loaded can allow arbitrary access to the admin page. This vulnerability was patched in version 1.3.2.",
    "cve_publish_date": "2024-04-02T15:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Merge pull request from GHSA-pmww-v6c9-7p83\n\n* feat: add csp headers on media routes\n\n* feat: use CSPMiddleware instead\n\n* chore: bump piccolo API version\n\n---------\n\nCo-authored-by: skelmis <ethanmkh2@gmail.com>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "endpoints.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "11",
            "number_of_lines_deleted_vulnerable_to_cve": "4",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 556:                         \"visible_column_names\": visible_column_names,",
                "// Line 557:                         \"visible_filter_names\": visible_filter_names,",
                "// Line 558:                         \"rich_text_columns\": rich_text_columns_names,",
                "// Line 559:                         \"media_columns\": media_columns_names,",
                "// Line 560:                         \"link_column_name\": link_column_name,",
                "// Line 561:                         \"order_by\": tuple(i.to_dict() for i in order_by),",
                "// Line 562:                         \"time_resolution\": time_resolution,",
                "// Line 563:                     },",
                "// Line 564:                     validators=validators,",
                "// Line 565:                     hooks=table_config.hooks,",
                "// vulnerable line: 566: ),",
                "// Line 567:                 fastapi_kwargs=FastAPIKwargs(",
                "// Line 568:                     all_routes={",
                "// Line 569:                         \"tags\": [f\"{table_class._meta.tablename.capitalize()}\"]",
                "// Line 570:                     },",
                "// vulnerable line: 571: ),",
                "// Line 572:             )",
                "// Line 573: ",
                "// Line 574:         private_app.add_api_route(",
                "// Line 575:             path=\"/tables/\",",
                "// Line 576:             endpoint=self.get_table_list,  # type: ignore",
                "// Line 577:             methods=[\"GET\"],",
                "// Line 578:             response_model=t.List[str],",
                "// Line 579:             tags=[\"Tables\"],",
                "// Line 580:         )",
                "// Line 581: ",
                "// Line 630:             tags=[\"User\"],",
                "// Line 631:             response_model=UserResponseModel,",
                "// Line 632:         )",
                "// Line 633: ",
                "// Line 634:         private_app.add_route(",
                "// Line 635:             path=\"/change-password/\",",
                "// Line 636:             route=change_password(",
                "// Line 637:                 login_url=\"./../../public/login/\",",
                "// Line 638:                 session_table=session_table,",
                "// Line 639:                 read_only=read_only,",
                "// vulnerable line: 640: ),",
                "// Line 641:             methods=[\"POST\"],",
                "// Line 642:         )",
                "// Line 643: ",
                "// Line 644:         #######################################################################",
                "// Line 645:         # Media",
                "// Line 646: ",
                "// Line 647:         private_app.add_api_route(",
                "// Line 648:             path=\"/media/\",",
                "// Line 649:             endpoint=self.store_file,  # type: ignore",
                "// Line 650:             methods=[\"POST\"],",
                "// Line 661:         )",
                "// Line 662: ",
                "// Line 663:         for table_config in self.table_configs:",
                "// Line 664:             if table_config.media_columns:",
                "// Line 665:                 for (",
                "// Line 666:                     column,",
                "// Line 667:                     media_storage,",
                "// Line 668:                 ) in table_config.media_columns.items():",
                "// Line 669:                     if isinstance(media_storage, LocalMediaStorage):",
                "// Line 670:                         private_app.mount(",
                "// vulnerable line: 671: path=f\"/media-files/{column._meta.table._meta.tablename}/{column._meta.name}/\",  # noqa: E501",
                "// vulnerable line: 672: app=StaticFiles(",
                "// vulnerable line: 673: directory=media_storage.media_path",
                "// vulnerable line: 674: ),",
                "// Line 675:                         )",
                "// Line 676: ",
                "// Line 677:         #######################################################################",
                "// Line 678: ",
                "// Line 679:         public_app = FastAPI(",
                "// Line 680:             redoc_url=None,",
                "// Line 681:             docs_url=None,",
                "// Line 682:             debug=debug,",
                "// Line 683:             exception_handlers={500: log_error},",
                "// Line 684:         )",
                "// Line 692:         public_app.mount(",
                "// Line 693:             path=\"/login/\",",
                "// Line 694:             app=RateLimitingMiddleware(",
                "// Line 695:                 app=session_login(",
                "// Line 696:                     auth_table=self.auth_table,",
                "// Line 697:                     session_table=session_table,",
                "// Line 698:                     session_expiry=session_expiry,",
                "// Line 699:                     max_session_expiry=max_session_expiry,",
                "// Line 700:                     redirect_to=None,",
                "// Line 701:                     production=production,",
                "// vulnerable line: 702: ),",
                "// Line 703:                 provider=rate_limit_provider,",
                "// vulnerable line: 704: ),",
                "// Line 705:         )",
                "// Line 706: ",
                "// Line 707:         public_app.add_route(",
                "// Line 708:             path=\"/logout/\",",
                "// Line 709:             route=session_logout(session_table=session_table),",
                "// Line 710:             methods=[\"POST\"],",
                "// Line 711:         )",
                "// Line 712: ",
                "// Line 713:         # We make the meta endpoint available without auth, because it contains",
                "// Line 714:         # the site name.",
                "// Line 744:             app=StaticFiles(directory=os.path.join(ASSET_PATH, \"assets\")),",
                "// Line 745:         )",
                "// Line 746: ",
                "// Line 747:         auth_middleware = partial(",
                "// Line 748:             AuthenticationMiddleware,",
                "// Line 749:             backend=SessionsAuthBackend(",
                "// Line 750:                 auth_table=auth_table,",
                "// Line 751:                 session_table=session_table,",
                "// Line 752:                 admin_only=True,",
                "// Line 753:                 increase_expiry=increase_expiry,",
                "// vulnerable line: 754: ),",
                "// Line 755:             on_error=handle_auth_exception,",
                "// Line 756:         )",
                "// Line 757: ",
                "// Line 758:         self.mount(path=\"/api\", app=auth_middleware(private_app))",
                "// Line 759:         self.mount(path=\"/public\", app=public_app)",
                "// Line 760: ",
                "// Line 761:     async def get_root(self, request: Request) -> HTMLResponse:",
                "// Line 762:         return HTMLResponse(self.template)",
                "// Line 763: ",
                "// Line 764:     ###########################################################################",
                "// Line 850:             )",
                "// Line 851: ",
                "// Line 852:         media_storage = self._get_media_storage(",
                "// Line 853:             table_name=model.table_name, column_name=model.column_name",
                "// Line 854:         )",
                "// Line 855:         file_url = await media_storage.generate_file_url(",
                "// Line 856:             file_key=model.file_key,",
                "// Line 857:             root_url=(",
                "// Line 858:                 f\"./api/media-files/{model.table_name}\"",
                "// Line 859:                 f\"/{model.column_name}/\"",
                "// vulnerable line: 860: ),",
                "// Line 861:             user=request.user.user,",
                "// Line 862:         )",
                "// Line 863:         return GenerateFileURLResponseModel(file_url=file_url)",
                "// Line 864: ",
                "// Line 865:     ###########################################################################",
                "// Line 866: ",
                "// Line 867:     def get_user(self, request: Request) -> UserResponseModel:",
                "// Line 868:         return UserResponseModel(",
                "// Line 869:             username=request.user.display_name,",
                "// Line 870:             user_id=str(request.user.user_id),"
            ]
        }
    ]
}