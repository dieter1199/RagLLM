{
    "cve_id": "CVE-2024-31999",
    "cve_description": "@festify/secure-session creates a secure stateless cookie session for Fastify. At the end of the request handling, it will encrypt all data in the session with a secret key and attach the ciphertext as a cookie value with the defined cookie name. After that, the session on the server side is destroyed. When an encrypted cookie with matching session name is provided with subsequent requests, it will decrypt the ciphertext to get the data. The plugin then creates a new session with the data in the ciphertext. Thus theoretically the web instance is still accessing the data from a server-side session, but technically that session is generated solely from a user provided cookie (which is assumed to be non-craftable because it is encrypted with a secret key not known to the user). The issue exists in the session removal process. In the delete function of the code, when the session is deleted, it is marked for deletion. However, if an attacker could gain access to the cookie, they could keep using it forever. Version 7.3.0 contains a patch for the issue. As a workaround, one may include a \"last update\" field in the session, and treat \"old sessions\" as expired.",
    "cve_publish_date": "2024-04-10T22:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Merge pull request from GHSA-9wwp-q7wq-jx35\n\n* Add anti session theft provisions\n\nSigned-off-by: Matteo Collina <hello@matteocollina.com>\n\n* Update README.md\n\nCo-authored-by: James Sumners <321201+jsumners@users.noreply.github.com>\nSigned-off-by: Matteo Collina <matteo.collina@gmail.com>\n\n* Apply suggestions from code review\n\nSigned-off-by: Manuel Spigolon <behemoth89@gmail.com>\n\n---------\n\nSigned-off-by: Matteo Collina <hello@matteocollina.com>\nSigned-off-by: Matteo Collina <matteo.collina@gmail.com>\nSigned-off-by: Manuel Spigolon <behemoth89@gmail.com>\nCo-authored-by: James Sumners <321201+jsumners@users.noreply.github.com>\nCo-authored-by: Manuel Spigolon <behemoth89@gmail.com>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "index.js",
            "code_language": "JavaScript",
            "number_of_lines_added_for_mitigation": "26",
            "number_of_lines_deleted_vulnerable_to_cve": "4",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 113:       key = [key]",
                "// Line 114:     }",
                "// Line 115: ",
                "// Line 116:     // just to add something to the shape",
                "// Line 117:     // TODO verify if it helps the perf",
                "// Line 118:     fastify.decorateRequest(sessionName, null)",
                "// Line 119: ",
                "// Line 120:     sessionNames.set(sessionName, {",
                "// Line 121:       cookieName,",
                "// Line 122:       cookieOptions,",
                "// vulnerable line: 123: key",
                "// Line 124:     })",
                "// Line 125: ",
                "// Line 126:     if (!defaultSessionName) {",
                "// Line 127:       defaultSessionName = sessionName",
                "// Line 128:     }",
                "// Line 129:   }",
                "// Line 130: ",
                "// Line 131:   fastify.decorate('decodeSecureSession', (cookie, log = fastify.log, sessionName = defaultSessionName) => {",
                "// Line 132:     if (cookie === undefined) {",
                "// Line 133:       // there is no cookie",
                "// Line 134:       log.trace('@fastify/secure-session: there is no cookie, creating an empty session')",
                "// Line 135:       return null",
                "// Line 136:     }",
                "// Line 137: ",
                "// Line 138:     if (!sessionNames.has(sessionName)) {",
                "// Line 139:       throw new Error('Unknown session key.')",
                "// Line 140:     }",
                "// Line 141: ",
                "// vulnerable line: 142: const { key } = sessionNames.get(sessionName)",
                "// Line 143: ",
                "// Line 144:     // do not use destructuring or it will deopt",
                "// Line 145:     const split = cookie.split(';')",
                "// Line 146:     const cyphertextB64 = split[0]",
                "// Line 147:     const nonceB64 = split[1]",
                "// Line 148: ",
                "// Line 149:     if (split.length <= 1) {",
                "// Line 150:       // the cookie is malformed",
                "// Line 151:       log.debug('@fastify/secure-session: the cookie is malformed, creating an empty session')",
                "// Line 152:       return null",
                "// Line 189:     return session",
                "// Line 190:   })",
                "// Line 191: ",
                "// Line 192:   fastify.decorate('createSecureSession', (data) => new Proxy(new Session(data), sessionProxyHandler))",
                "// Line 193: ",
                "// Line 194:   fastify.decorate('encodeSecureSession', (session, sessionName = defaultSessionName) => {",
                "// Line 195:     if (!sessionNames.has(sessionName)) {",
                "// Line 196:       throw new Error('Unknown session key.')",
                "// Line 197:     }",
                "// Line 198: ",
                "// vulnerable line: 199: const { key } = sessionNames.get(sessionName)",
                "// Line 200: ",
                "// Line 201:     const nonce = genNonce()",
                "// Line 202:     const msg = Buffer.from(JSON.stringify(session[kObj]))",
                "// Line 203: ",
                "// Line 204:     const cipher = Buffer.allocUnsafe(msg.length + sodium.crypto_secretbox_MACBYTES)",
                "// Line 205:     sodium.crypto_secretbox_easy(cipher, msg, nonce, key[0])",
                "// Line 206: ",
                "// Line 207:     return cipher.toString('base64') + ';' + nonce.toString('base64')",
                "// Line 208:   })",
                "// Line 209: ",
                "// Line 221:   next()",
                "// Line 222: ",
                "// Line 223:   function addHooks (fastify, options, next) {",
                "// Line 224:     // the hooks must be registered after @fastify/cookie hooks",
                "// Line 225: ",
                "// Line 226:     fastify.addHook('onRequest', (request, reply, next) => {",
                "// Line 227:       for (const [sessionName, { cookieName }] of sessionNames.entries()) {",
                "// Line 228:         const cookie = request.cookies[cookieName]",
                "// Line 229:         const result = fastify.decodeSecureSession(cookie, request.log, sessionName)",
                "// Line 230: ",
                "// vulnerable line: 231: request[sessionName] = new Proxy((result || new Session({})), sessionProxyHandler)",
                "// Line 232:       }",
                "// Line 233: ",
                "// Line 234:       next()",
                "// Line 235:     })",
                "// Line 236: ",
                "// Line 237:     fastify.addHook('onSend', (request, reply, payload, next) => {",
                "// Line 238:       for (const [sessionName, { cookieName, cookieOptions }] of sessionNames.entries()) {",
                "// Line 239:         const session = request[sessionName]",
                "// Line 240: ",
                "// Line 241:         if (!session || !session.changed) {",
                "// Line 289:   delete () {",
                "// Line 290:     this.changed = true",
                "// Line 291:     this.deleted = true",
                "// Line 292:   }",
                "// Line 293: ",
                "// Line 294:   options (opts) {",
                "// Line 295:     this[kCookieOptions] = opts",
                "// Line 296:   }",
                "// Line 297: ",
                "// Line 298:   data () {",
                "// vulnerable line: 299: return this[kObj]",
                "// Line 300:   }",
                "// Line 301: ",
                "// Line 302:   touch () {",
                "// Line 303:     this.changed = true",
                "// Line 304:   }",
                "// Line 305: }",
                "// Line 306: ",
                "// Line 307: function genNonce () {",
                "// Line 308:   const buf = Buffer.allocUnsafe(sodium.crypto_secretbox_NONCEBYTES)",
                "// Line 309:   sodium.randombytes_buf(buf)"
            ]
        }
    ]
}