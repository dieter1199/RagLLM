{
    "cve_id": "CVE-2024-36128",
    "cve_description": "Directus is a real-time API and App dashboard for managing SQL database content. Prior to 10.11.2, providing a non-numeric length value to the random string generation utility will create a memory issue breaking the capability to generate random strings platform wide. This creates a denial of service situation where logged in sessions can no longer be refreshed as sessions depend on the capability to generate a random session ID. This vulnerability is fixed in 10.11.2.",
    "cve_publish_date": "2024-06-03T15:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Fix #22572 Invalid query for random string (#22573)\n\n* Fix #22572 Invalid query for random string\r\n\r\n* Add changeset\r\n\r\n* Run prettier\r\n\r\n* Fix unit tests warnings\r\n\r\n* redo validation with Joi\r\n\r\n* make validation on object level\r\n\r\ndocuments itself and is cleaner to expand on\r\n\r\n* Update changeset\r\n\r\n* Allow integer only\r\n\r\n* Require min value of 1\r\n\r\n* Report as query error, ignore unknown queries\r\n\r\n---------\r\n\r\nCo-authored-by: Daniel Biegler <DanielBiegler@users.noreply.github.com>\r\nCo-authored-by: Pascal Jufer <pascal-jufer@bluewin.ch>",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "index.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 2529:                 },",
                "// Line 2530:             },",
                "// Line 2531:             utils_random_string: {",
                "// Line 2532:                 type: GraphQLString,",
                "// Line 2533:                 args: {",
                "// Line 2534:                     length: GraphQLInt,",
                "// Line 2535:                 },",
                "// Line 2536:                 resolve: async (_, args) => {",
                "// Line 2537:                     const { nanoid } = await import('nanoid');",
                "// Line 2538: ",
                "// vulnerable line: 2539: if (args['length'] && Number(args['length']) > 500) {",
                "// vulnerable line: 2540: throw new InvalidPayloadError({ reason: `\"length\" can't be more than 500 characters` });",
                "// Line 2541:                     }",
                "// Line 2542: ",
                "// vulnerable line: 2543: return nanoid(args['length'] ? Number(args['length']) : 32);",
                "// Line 2544:                 },",
                "// Line 2545:             },",
                "// Line 2546:             utils_hash_generate: {",
                "// Line 2547:                 type: GraphQLString,",
                "// Line 2548:                 args: {",
                "// Line 2549:                     string: new GraphQLNonNull(GraphQLString),",
                "// Line 2550:                 },",
                "// Line 2551:                 resolve: async (_, args) => {",
                "// Line 2552:                     return await generateHash(args['string']);",
                "// Line 2553:                 },"
            ]
        },
        {
            "filename_of_changes": "utils.ts",
            "code_language": "TypeScript",
            "number_of_lines_added_for_mitigation": "7",
            "number_of_lines_deleted_vulnerable_to_cve": "5",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 12: import { generateHash } from '../utils/generate-hash.js';",
                "// Line 13: import { sanitizeQuery } from '../utils/sanitize-query.js';",
                "// Line 14: ",
                "// Line 15: const router = Router();",
                "// Line 16: ",
                "// Line 17: router.get(",
                "// Line 18:     '/random/string',",
                "// Line 19:     asyncHandler(async (req, res) => {",
                "// Line 20:         const { nanoid } = await import('nanoid');",
                "// Line 21: ",
                "// vulnerable line: 22: if (req.query && req.query['length'] && Number(req.query['length']) > 500) {",
                "// vulnerable line: 23: throw new InvalidQueryError({ reason: `\"length\" can't be more than 500 characters` });",
                "// vulnerable line: 24: }",
                "// Line 25: ",
                "// vulnerable line: 26: const string = nanoid(req.query?.['length'] ? Number(req.query['length']) : 32);",
                "// Line 27: ",
                "// vulnerable line: 28: return res.json({ data: string });",
                "// Line 29:     }),",
                "// Line 30: );",
                "// Line 31: ",
                "// Line 32: router.post(",
                "// Line 33:     '/hash/generate',",
                "// Line 34:     asyncHandler(async (req, res) => {",
                "// Line 35:         if (!req.body?.string) {",
                "// Line 36:             throw new InvalidPayloadError({ reason: `\"string\" is required` });",
                "// vulnerable line: 37: }",
                "// Line 38: ",
                "// Line 39:         const hash = await generateHash(req.body.string);",
                "// Line 40: ",
                "// Line 41:         return res.json({ data: hash });",
                "// Line 42:     }),",
                "// Line 43: );",
                "// Line 44: ",
                "// Line 45: router.post(",
                "// Line 46:     '/hash/verify',",
                "// Line 47:     asyncHandler(async (req, res) => {",
                "// Line 48:         if (!req.body?.string) {",
                "// Line 49:             throw new InvalidPayloadError({ reason: `\"string\" is required` });",
                "// vulnerable line: 50: }",
                "// Line 51: ",
                "// Line 52:         if (!req.body?.hash) {",
                "// Line 53:             throw new InvalidPayloadError({ reason: `\"hash\" is required` });",
                "// vulnerable line: 54: }",
                "// Line 55: ",
                "// Line 56:         const result = await argon2.verify(req.body.hash, req.body.string);",
                "// Line 57: ",
                "// Line 58:         return res.json({ data: result });",
                "// Line 59:     }),",
                "// Line 60: );",
                "// Line 61: ",
                "// Line 62: const SortSchema = Joi.object({",
                "// Line 63:     item: Joi.alternatives(Joi.string(), Joi.number()).required(),",
                "// Line 64:     to: Joi.alternatives(Joi.string(), Joi.number()).required(),",
                "// Line 95:     }),",
                "// Line 96:     respond,",
                "// Line 97: );",
                "// Line 98: ",
                "// Line 99: router.post(",
                "// Line 100:     '/import/:collection',",
                "// Line 101:     collectionExists,",
                "// Line 102:     asyncHandler(async (req, res, next) => {",
                "// Line 103:         if (req.is('multipart/form-data') === false) {",
                "// Line 104:             throw new UnsupportedMediaTypeError({ mediaType: req.headers['content-type']!, where: 'Content-Type header' });",
                "// vulnerable line: 105: }",
                "// Line 106: ",
                "// Line 107:         const service = new ImportService({",
                "// Line 108:             accountability: req.accountability,",
                "// Line 109:             schema: req.schema,",
                "// Line 110:         });",
                "// Line 111: ",
                "// Line 112:         let headers;",
                "// Line 113: ",
                "// Line 114:         if (req.headers['content-type']) {",
                "// Line 115:             headers = req.headers;",
                "// Line 116:         } else {",
                "// Line 117:             headers = {",
                "// Line 118:                 ...req.headers,",
                "// Line 119:                 'content-type': 'application/octet-stream',",
                "// Line 120:             };",
                "// vulnerable line: 121: }",
                "// Line 122: ",
                "// Line 123:         const busboy = Busboy({ headers });",
                "// Line 124: ",
                "// Line 125:         busboy.on('file', async (_fieldname, fileStream, { mimeType }) => {",
                "// Line 126:             try {",
                "// Line 127:                 await service.import(req.params['collection']!, mimeType, fileStream);",
                "// Line 128:             } catch (err: any) {",
                "// Line 129:                 return next(err);",
                "// vulnerable line: 130: }",
                "// Line 131: ",
                "// Line 132:             return res.status(200).end();",
                "// Line 133:         });",
                "// Line 134: ",
                "// Line 135:         busboy.on('error', (err: Error) => next(err));",
                "// Line 136: ",
                "// Line 137:         req.pipe(busboy);",
                "// Line 138:     }),",
                "// Line 139: );",
                "// Line 140: ",
                "// Line 141: router.post(",
                "// Line 142:     '/export/:collection',",
                "// Line 143:     collectionExists,",
                "// Line 144:     asyncHandler(async (req, _res, next) => {",
                "// Line 145:         if (!req.body.query) {",
                "// Line 146:             throw new InvalidPayloadError({ reason: `\"query\" is required` });",
                "// vulnerable line: 147: }",
                "// Line 148: ",
                "// Line 149:         if (!req.body.format) {",
                "// Line 150:             throw new InvalidPayloadError({ reason: `\"format\" is required` });",
                "// vulnerable line: 151: }",
                "// Line 152: ",
                "// Line 153:         const service = new ExportService({",
                "// Line 154:             accountability: req.accountability,",
                "// Line 155:             schema: req.schema,",
                "// Line 156:         });",
                "// Line 157: ",
                "// Line 158:         const sanitizedQuery = sanitizeQuery(req.body.query, req.accountability ?? null);",
                "// Line 159: ",
                "// Line 160:         // We're not awaiting this, as it's supposed to run async in the background",
                "// Line 161:         service.exportToFile(req.params['collection']!, sanitizedQuery, req.body.format, {"
            ]
        }
    ]
}