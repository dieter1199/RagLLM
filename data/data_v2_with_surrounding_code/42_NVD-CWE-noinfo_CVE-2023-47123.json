{
    "cve_id": "CVE-2023-47123",
    "cve_description": "iTop is an IT service management platform.  By filling malicious code in an object friendlyname / complementary name, an XSS attack can be performed when this object will displayed as an n:n relation item in another object. This vulnerability is fixed in 3.1.1 and 3.2.0.",
    "cve_publish_date": "2024-04-15T18:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "NÂ°6917 - Security hardening",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "ObjectRepository.php",
            "code_language": "PHP",
            "number_of_lines_added_for_mitigation": "10",
            "number_of_lines_deleted_vulnerable_to_cve": "8",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 31: {",
                "// Line 32:     /**",
                "// Line 33:      * Search.",
                "// Line 34:      *",
                "// Line 35:      * @param string $sObjectClass Object class to search",
                "// Line 36:      * @param array $aFieldsToLoad Additional fields to load",
                "// Line 37:      * @param string $sSearch Friendly name search string",
                "// Line 38:      *",
                "// Line 39:      * @return array|null",
                "// Line 40:      */",
                "// vulnerable line: 41: static public function Search(string $sObjectClass, array $aFieldsToLoad, string $sSearch): ?array",
                "// Line 42:     {",
                "// Line 43:         try {",
                "// Line 44: ",
                "// Line 45:             // Create db search",
                "// Line 46:             $oDbObjectSearch = new DBObjectSearch($sObjectClass);",
                "// Line 47:             $oDbObjectSearch->SetShowObsoleteData(utils::ShowObsoleteData());",
                "// Line 48: ",
                "// Line 49:             // Add a friendly name search condition",
                "// Line 50:             $oDbObjectSearch->AddCondition('friendlyname', $sSearch, 'Contains');",
                "// Line 51: ",
                "// Line 75:      * SearchFromOql.",
                "// Line 76:      *",
                "// Line 77:      * @param string $sObjectClass Object class to search",
                "// Line 78:      * @param array $aFieldsToLoad Additional fields to load",
                "// Line 79:      * @param string $sOql Oql expression",
                "// Line 80:      * @param string $sSearch Friendly name search string",
                "// Line 81:      * @param DBObject|null $oThisObject This object reference for oql",
                "// Line 82:      *",
                "// Line 83:      * @return array|null",
                "// Line 84:      */",
                "// vulnerable line: 85: static public function SearchFromOql(string $sObjectClass, array $aFieldsToLoad, string $sOql, string $sSearch, DBObject $oThisObject = null): ?array",
                "// Line 86:     {",
                "// Line 87:         try {",
                "// Line 88: ",
                "// Line 89:             // Create db search",
                "// Line 90:             $oDbObjectSearch = DBSearch::FromOQL($sOql);",
                "// Line 91:             $oDbObjectSearch->SetShowObsoleteData(utils::ShowObsoleteData());",
                "// Line 92:             $oDbObjectSearch->AddCondition('friendlyname', $sSearch, 'Contains');",
                "// Line 93: ",
                "// Line 94:             // Create db set from db search",
                "// Line 95:             $oDbObjectSet = new DBObjectSet($oDbObjectSearch, [], ['this' => $oThisObject]);",
                "// Line 110:      *",
                "// Line 111:      * @param iDBObjectSetIterator $oDbObjectSet Db object set",
                "// Line 112:      * @param string $sObjectClass Object class",
                "// Line 113:      * @param array $aFieldsToLoad Additional fields to load",
                "// Line 114:      *",
                "// Line 115:      * @return array",
                "// Line 116:      * @throws \\ArchivedObjectException",
                "// Line 117:      * @throws \\CoreException",
                "// Line 118:      * @throws \\DictExceptionMissingString",
                "// Line 119:      */",
                "// vulnerable line: 120: static private function DBSetToObjectArray(iDBObjectSetIterator $oDbObjectSet, string $sObjectClass, array $aFieldsToLoad): array",
                "// Line 121:     {",
                "// Line 122:         // Retrieve friendly name complementary specification",
                "// Line 123:         $aComplementAttributeSpec = MetaModel::GetNameSpec($sObjectClass, FriendlyNameType::COMPLEMENTARY);",
                "// Line 124: ",
                "// Line 125:         // Retrieve image attribute code",
                "// Line 126:         $sObjectImageAttCode = MetaModel::GetImageAttributeCode($sObjectClass);",
                "// Line 127: ",
                "// Line 128:         // Prepare fields to load",
                "// Line 129:         $aDefaultFieldsToLoad = ObjectRepository::GetDefaultFieldsToLoad($aComplementAttributeSpec, $sObjectImageAttCode);",
                "// Line 130:         $aFieldsToLoad = array_merge($aDefaultFieldsToLoad, $aFieldsToLoad);",
                "// Line 151:     /**",
                "// Line 152:      * GetDefaultFieldsToLoad.",
                "// Line 153:      *",
                "// Line 154:      * Return attributes to load for any objects.",
                "// Line 155:      *",
                "// Line 156:      * @param array $aComplementAttributeSpec Friendly name complementary spec",
                "// Line 157:      * @param string $sObjectImageAttCode Image attribute code",
                "// Line 158:      *",
                "// Line 159:      * @return mixed",
                "// Line 160:      */",
                "// vulnerable line: 161: static public function GetDefaultFieldsToLoad(array $aComplementAttributeSpec, string $sObjectImageAttCode)",
                "// Line 162:     {",
                "// Line 163:         // Friendly name complementary fields",
                "// Line 164:         $aFieldsToLoad = $aComplementAttributeSpec[1];",
                "// Line 165: ",
                "// Line 166:         // Image attribute",
                "// Line 167:         if (!empty($sObjectImageAttCode)) {",
                "// Line 168:             $aFieldsToLoad[] = $sObjectImageAttCode;",
                "// Line 169:         }",
                "// Line 170: ",
                "// Line 171:         // Add friendly name",
                "// Line 178:      * ComputeOthersData.",
                "// Line 179:      *",
                "// Line 180:      * @param DBObject $oDbObject Db object",
                "// Line 181:      * @param string $sClass Object class",
                "// Line 182:      * @param array $aData Object data to fill",
                "// Line 183:      * @param array $aComplementAttributeSpec Friendly name complementary spec",
                "// Line 184:      * @param string $sObjectImageAttCode Image attribute code",
                "// Line 185:      *",
                "// Line 186:      * @return array",
                "// Line 187:      */",
                "// vulnerable line: 188: static public function ComputeOthersData(DBObject $oDbObject, string $sClass, array $aData, array $aComplementAttributeSpec, string $sObjectImageAttCode): array",
                "// Line 189:     {",
                "// Line 190:         try {",
                "// Line 191: ",
                "// Line 192:             // object class",
                "// Line 193:             $aData['class_name'] = get_class($oDbObject);",
                "// Line 194: ",
                "// Line 195:             // Obsolescence flag",
                "// Line 196:             $aData['obsolescence_flag'] = $oDbObject->IsObsolete();",
                "// Line 197: ",
                "// Line 198:             // Additional fields",
                "// Line 199:             if (count($aComplementAttributeSpec[1]) > 0) {",
                "// Line 200:                 $aData['has_additional_field'] = true;",
                "// Line 201:                 $aArguments = [];",
                "// Line 202:                 foreach ($aComplementAttributeSpec[1] as $sAdditionalField) {",
                "// Line 203:                     $aArguments[] = $oDbObject->Get($sAdditionalField);",
                "// Line 204:                 }",
                "// Line 205:                 $aData['additional_field'] = vsprintf($aComplementAttributeSpec[0], $aArguments);",
                "// vulnerable line: 206: $aData['full_description'] = \"{$aData['friendlyname']}<br><i><small>{$aData['additional_field']}</small></i>\";",
                "// Line 207:             } else {",
                "// vulnerable line: 208: $aData['full_description'] = $aData['friendlyname'];",
                "// Line 209:             }",
                "// Line 210: ",
                "// Line 211:             // Image",
                "// Line 212:             if (!empty($sObjectImageAttCode)) {",
                "// Line 213:                 $aData['has_image'] = true;",
                "// Line 214:                 /** @var \\ormDocument $oImage */",
                "// Line 215:                 $oImage = $oDbObject->Get($sObjectImageAttCode);",
                "// Line 216:                 if (!$oImage->IsEmpty()) {",
                "// Line 217:                     $aData['picture_url'] = \"url('{$oImage->GetDisplayURL($sClass, $oDbObject->GetKey(), $sObjectImageAttCode)}')\";",
                "// Line 218:                     $aData['initials'] = '';",
                "// Line 301:     }",
                "// Line 302: ",
                "// Line 303: ",
                "// Line 304:     /**",
                "// Line 305:      * DeleteFromOql.",
                "// Line 306:      *",
                "// Line 307:      * @param string $sOql OQL expression",
                "// Line 308:      *",
                "// Line 309:      * @return bool",
                "// Line 310:      */",
                "// vulnerable line: 311: static public function DeleteFromOql(string $sOql): bool",
                "// Line 312:     {",
                "// Line 313:         try {",
                "// Line 314: ",
                "// Line 315:             // Create db search",
                "// Line 316:             $oDbObjectSearch = DBSearch::FromOQL($sOql);",
                "// Line 317: ",
                "// Line 318:             // Create db set from db search",
                "// Line 319:             $oDbObjectSet = new DBObjectSet($oDbObjectSearch);",
                "// Line 320: ",
                "// Line 321:             // Delete objects"
            ]
        }
    ]
}