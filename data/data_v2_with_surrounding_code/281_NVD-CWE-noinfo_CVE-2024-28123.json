{
    "cve_id": "CVE-2024-28123",
    "cve_description": "Wasmi is an efficient and lightweight WebAssembly interpreter with a focus on constrained and embedded systems. In the WASMI Interpreter, an Out-of-bounds Buffer Write will arise if the host calls or resumes a Wasm function with more parameters than the default limit (128), as it will surpass the stack value. This doesnâ€™t affect calls from Wasm to Wasm, only from host to Wasm. This vulnerability was patched in version 0.31.1.\n",
    "cve_publish_date": "2024-03-21T02:52Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fix bug in wasmi executor",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "mod.rs",
            "code_language": "Rust",
            "number_of_lines_added_for_mitigation": "6",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 640:         &mut self,",
                "// Line 641:         mut ctx: StoreContextMut<T>,",
                "// Line 642:         func: &Func,",
                "// Line 643:         params: impl CallParams,",
                "// Line 644:         results: Results,",
                "// Line 645:     ) -> Result<<Results as CallResults>::Results, TaggedTrap>",
                "// Line 646:     where",
                "// Line 647:         Results: CallResults,",
                "// Line 648:     {",
                "// Line 649:         self.stack.reset();",
                "// vulnerable line: 650: self.stack.values.extend(params.call_params());",
                "// Line 651:         match ctx.as_context().store.inner.resolve_func(func) {",
                "// Line 652:             FuncEntity::Wasm(wasm_func) => {",
                "// Line 653:                 self.stack",
                "// Line 654:                     .prepare_wasm_call(wasm_func, &self.res.code_map)?;",
                "// Line 655:                 self.execute_wasm_func(ctx.as_context_mut())?;",
                "// Line 656:             }",
                "// Line 657:             FuncEntity::Host(host_func) => {",
                "// Line 658:                 let host_func = *host_func;",
                "// Line 659:                 self.stack.call_host_as_root(",
                "// Line 660:                     ctx.as_context_mut(),",
                "// Line 682:         host_func: Func,",
                "// Line 683:         params: impl CallParams,",
                "// Line 684:         results: Results,",
                "// Line 685:     ) -> Result<<Results as CallResults>::Results, TaggedTrap>",
                "// Line 686:     where",
                "// Line 687:         Results: CallResults,",
                "// Line 688:     {",
                "// Line 689:         self.stack",
                "// Line 690:             .values",
                "// Line 691:             .drop(host_func.ty(ctx.as_context()).params().len());",
                "// vulnerable line: 692: self.stack.values.extend(params.call_params());",
                "// Line 693:         assert!(",
                "// Line 694:             self.stack.frames.peek().is_some(),",
                "// Line 695:             \"a frame must be on the call stack upon resumption\"",
                "// Line 696:         );",
                "// Line 697:         self.execute_wasm_func(ctx.as_context_mut())?;",
                "// Line 698:         let results = self.write_results_back(results);",
                "// Line 699:         Ok(results)",
                "// Line 700:     }",
                "// Line 701: ",
                "// Line 702:     /// Writes the results of the function execution back into the `results` buffer."
            ]
        }
    ]
}