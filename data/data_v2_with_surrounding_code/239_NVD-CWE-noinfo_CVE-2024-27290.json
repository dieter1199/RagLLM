{
    "cve_id": "CVE-2024-27290",
    "cve_description": "Docassemble is an expert system for guided interviews and document assembly. Prior to 1.4.97, a user could type HTML into a field, including the field for the user's name, and then that HTML could be displayed on the screen as HTML. The vulnerability has been patched in version 1.4.97 of the master branch.",
    "cve_publish_date": "2024-03-21T02:52Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fixed security issues; added pdftk option; added development site is protected Configuration directive; altered error message display so that end users will not see certain types of error messages, but they will be displayed in the log",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "develop.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "23",
            "number_of_lines_deleted_vulnerable_to_cve": "22",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 30:         raise ValidationError(word('Version number does not conform to PEP 440'))",
                "// Line 31: ",
                "// Line 32: ",
                "// Line 33: def validate_package_name(form, field):  # pylint: disable=unused-argument",
                "// Line 34:     if re.search(r'[^A-Za-z0-9]', field.data):",
                "// Line 35:         raise ValidationError(word('Valid characters are: A-Z, a-z, 0-9'))",
                "// Line 36: ",
                "// Line 37: ",
                "// Line 38: class CreatePackageForm(FlaskForm):",
                "// Line 39:     name = StringField(word('Package name'), validators=[",
                "// vulnerable line: 40: validators.DataRequired(word('Package name is required')), validate_name])",
                "// Line 41:     submit = SubmitField(word('Get template'))",
                "// Line 42: ",
                "// Line 43: ",
                "// Line 44: class CreatePlaygroundPackageForm(FlaskForm):",
                "// Line 45:     name = SelectField(word('Package'), validators=[",
                "// vulnerable line: 46: validators.DataRequired(word('Package name is required')), validate_name])",
                "// Line 47:     submit = SubmitField(word('Get package'))",
                "// Line 48: ",
                "// Line 49: ",
                "// Line 50: class UpdatePackageForm(FlaskForm):",
                "// vulnerable line: 51: giturl = StringField(word('GitHub URL'))",
                "// vulnerable line: 52: gitbranch = SelectField(word('GitHub Branch'))",
                "// Line 53:     zipfile = FileField(word('Zip File'))",
                "// vulnerable line: 54: pippackage = StringField(word('Package on PyPI'))",
                "// Line 55:     submit = SubmitField(word('Update'))",
                "// Line 56: ",
                "// Line 57: ",
                "// Line 58: class ConfigForm(FlaskForm):",
                "// Line 59:     config_content = TextAreaField(word('Configuration YAML'))",
                "// Line 60:     submit = SubmitField(word('Save'))",
                "// Line 61:     cancel = SubmitField(word('Cancel'))",
                "// Line 62: ",
                "// Line 63: ",
                "// Line 64: class PlaygroundForm(FlaskForm):",
                "// Line 65:     status = StringField('Status')",
                "// Line 66:     original_playground_name = StringField(word('Original Name'))",
                "// vulnerable line: 67: playground_name = StringField(word('Name'), [validators.Length(min=1, max=255)])",
                "// Line 68:     playground_content = TextAreaField(word('Playground YAML'))",
                "// Line 69:     search_term = StringField(word('Search'))",
                "// Line 70:     submit = SubmitField(word('Save'))",
                "// Line 71:     run = SubmitField(word('Save and Run'))",
                "// Line 72:     delete = SubmitField(word('Delete'))",
                "// Line 73: ",
                "// Line 74: ",
                "// Line 75: class PlaygroundUploadForm(FlaskForm):",
                "// Line 76:     uploadfile = FileField(word('File to upload'))",
                "// Line 77: ",
                "// Line 100: class PlaygroundFilesForm(FlaskForm):",
                "// Line 101:     purpose = StringField('Purpose')",
                "// Line 102:     section = StringField(word('Section'))",
                "// Line 103:     uploadfile = FileField(word('File to upload'))",
                "// Line 104:     submit = SubmitField(word('Upload'))",
                "// Line 105: ",
                "// Line 106: ",
                "// Line 107: class PlaygroundFilesEditForm(FlaskForm):",
                "// Line 108:     purpose = StringField('Purpose')",
                "// Line 109:     section = StringField(word('Section'))",
                "// vulnerable line: 110: original_file_name = StringField(word('Original Name'))",
                "// vulnerable line: 111: file_name = StringField(word('Name'), [validators.Length(min=1, max=255)])",
                "// Line 112:     search_term = StringField(word('Search'))",
                "// Line 113:     file_content = TextAreaField(word('File Text'))",
                "// Line 114:     active_file = StringField(word('Active File'))",
                "// Line 115:     submit = SubmitField(word('Save'))",
                "// Line 116:     delete = SubmitField(word('Delete'))",
                "// Line 117: ",
                "// Line 118: ",
                "// Line 119: class RenameProject(FlaskForm):",
                "// Line 120:     name = StringField(word('New Name'), validators=[",
                "// vulnerable line: 121: validators.DataRequired(word('Project name is required')), validate_project_name])",
                "// Line 122:     submit = SubmitField(word('Rename'))",
                "// Line 123: ",
                "// Line 124: ",
                "// Line 125: class DeleteProject(FlaskForm):",
                "// Line 126:     submit = SubmitField(word('Delete'))",
                "// Line 127: ",
                "// Line 128: ",
                "// Line 129: class NewProject(FlaskForm):",
                "// Line 130:     name = StringField(word('Name'), validators=[",
                "// vulnerable line: 131: validators.DataRequired(word('Project name is required')), validate_project_name])",
                "// Line 132:     submit = SubmitField(word('Save'))",
                "// Line 133: ",
                "// Line 134: ",
                "// Line 135: class PullPlaygroundPackage(FlaskForm):",
                "// vulnerable line: 136: github_url = StringField(word('GitHub URL'))",
                "// vulnerable line: 137: github_branch = SelectField(word('GitHub Branch'))",
                "// vulnerable line: 138: pypi = StringField(word('PyPI package'))",
                "// Line 139:     pull = SubmitField(word('Pull'))",
                "// Line 140:     cancel = SubmitField(word('Cancel'))",
                "// Line 141: ",
                "// Line 142: ",
                "// Line 143: class PlaygroundPackagesForm(FlaskForm):",
                "// vulnerable line: 144: original_file_name = StringField(word('Original Name'))",
                "// Line 145:     file_name = StringField(word('Package Name'), validators=[validators.Length(min=1, max=50),",
                "// Line 146:                                                               validators.DataRequired(word('Package Name is required')),",
                "// vulnerable line: 147: validate_package_name])",
                "// vulnerable line: 148: license = StringField(word('License'), default='The MIT License (MIT)', validators=[validators.Length(min=0, max=255)])",
                "// vulnerable line: 149: author_name = StringField(word('Author Name'), validators=[validators.Length(min=0, max=255)])",
                "// vulnerable line: 150: author_email = StringField(word('Author E-mail'), validators=[validators.Length(min=0, max=255)])",
                "// vulnerable line: 151: description = StringField(word('Description'), validators=[validators.Length(min=0, max=255)], default=\"A docassemble extension.\")",
                "// vulnerable line: 152: version = StringField(word('Version'), validators=[validators.Length(min=0, max=255), validate_package_version], default=\"0.0.1\")",
                "// vulnerable line: 153: url = StringField(word('URL'), validators=[validators.Length(min=0, max=255)], default=\"\")",
                "// Line 154:     dependencies = SelectMultipleField(word('Dependencies'))",
                "// Line 155:     interview_files = SelectMultipleField(word('Interview files'))",
                "// Line 156:     template_files = SelectMultipleField(word('Template files'))",
                "// Line 157:     module_files = SelectMultipleField(word('Modules'))",
                "// Line 158:     static_files = SelectMultipleField(word('Static files'))",
                "// Line 159:     sources_files = SelectMultipleField(word('Source files'))",
                "// Line 160:     readme = TextAreaField(word('README file'), default='')",
                "// Line 161:     github_branch = NonValidatingSelectField(word('Branch'))",
                "// vulnerable line: 162: github_branch_new = StringField(word('Name of new branch'))",
                "// Line 163:     commit_message = StringField(word('Commit message'), default=\"\")",
                "// Line 164:     pypi_also = BooleanField(word('Publish on PyPI also'))",
                "// Line 165:     install_also = BooleanField(word('Install package on this server also'))",
                "// Line 166:     submit = SubmitField(word('Save'))",
                "// Line 167:     download = SubmitField(word('Download'))",
                "// Line 168:     install = SubmitField(word('Install'))",
                "// Line 169:     pypi = SubmitField(word('PyPI'))",
                "// Line 170:     github = SubmitField(word('GitHub'))",
                "// Line 171:     cancel = SubmitField(word('Cancel'))",
                "// Line 172:     delete = SubmitField(word('Delete'))",
                "// Line 215: ",
                "// Line 216: ",
                "// Line 217: class FunctionFileForm(FlaskForm):",
                "// Line 218:     pass",
                "// Line 219: ",
                "// Line 220: ",
                "// Line 221: class APIKey(FlaskForm):",
                "// Line 222:     action = HiddenField()",
                "// Line 223:     key = HiddenField()",
                "// Line 224:     security = HiddenField()",
                "// vulnerable line: 225: name = StringField(word('Name'), validators=[validators.Length(min=1, max=255)])",
                "// Line 226:     method = SelectField(word('Security Method'))",
                "// Line 227:     permissions = SelectMultipleField(word('Limited Permissions'))",
                "// Line 228:     submit = SubmitField(word('Create'))",
                "// Line 229:     delete = SubmitField(word('Delete'))",
                "// Line 230: ",
                "// Line 231:     def validate(self, extra_validators=None):",
                "// Line 232:         rv = FlaskForm.validate(self, extra_validators=extra_validators)",
                "// Line 233:         if not rv:",
                "// Line 234:             return False",
                "// Line 235:         if self.action.data not in ('edit', 'new'):"
            ]
        },
        {
            "filename_of_changes": "error.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        },
        {
            "filename_of_changes": "pandoc.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "21",
            "number_of_lines_deleted_vulnerable_to_cve": "3",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 10: import random",
                "// Line 11: import mimetypes",
                "// Line 12: import urllib.request",
                "// Line 13: import docassemble.base.filter",
                "// Line 14: import docassemble.base.functions",
                "// Line 15: from docassemble.base.config import daconfig",
                "// Line 16: from docassemble.base.logger import logmessage",
                "// Line 17: from docassemble.base.pdfa import pdf_to_pdfa",
                "// Line 18: from docassemble.base.pdftk import pdf_encrypt",
                "// Line 19: from docassemble.base.error import DAError, DAException",
                "// vulnerable line: 20: import convertapi",
                "// vulnerable line: 21: import requests",
                "// vulnerable line: 22: from pikepdf import Pdf",
                "// Line 23: ",
                "// Line 24: style_find = re.compile(r'{\\s*(\\s([1-9])[^\\}]+)\\sbasedon[^\\}]+heading ([0-9])', flags=re.DOTALL)",
                "// Line 25: PANDOC_PATH = daconfig.get('pandoc', 'pandoc')",
                "// Line 26: ",
                "// Line 27: ",
                "// Line 28: def copy_if_different(source, destination):",
                "// Line 29:     if (not os.path.isfile(destination)) or filecmp.cmp(source, destination) is False:",
                "// Line 30:         shutil.copyfile(source, destination)",
                "// Line 31: ",
                "// Line 32: "
            ]
        },
        {
            "filename_of_changes": "pdftk.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "9",
            "number_of_lines_deleted_vulnerable_to_cve": "4",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 153:                     recursively_add_fields(kids, id_to_page, outfields, prefix=prefix + '.' + name, parent_ft=field_type)",
                "// Line 154:         else:",
                "// Line 155:             if prefix != '' and name is not None:",
                "// Line 156:                 outfields.append((prefix + '.' + name, default, pageno, rect, field_type, export_value))",
                "// Line 157:             elif prefix == '':",
                "// Line 158:                 outfields.append((name, default, pageno, rect, field_type, export_value))",
                "// Line 159:             else:",
                "// Line 160:                 outfields.append((prefix, default, pageno, rect, field_type, export_value))",
                "// Line 161: ",
                "// Line 162: ",
                "// vulnerable line: 163: def fill_template(template, data_strings=None, data_names=None, hidden=None, readonly=None, images=None, pdf_url=None, editable=True, pdfa=False, password=None, owner_password=None, template_password=None, default_export_value=None, replacement_font=None):",
                "// Line 164:     if data_strings is None:",
                "// Line 165:         data_strings = []",
                "// Line 166:     if data_names is None:",
                "// Line 167:         data_names = []",
                "// Line 168:     if hidden is None:",
                "// Line 169:         hidden = []",
                "// Line 170:     if readonly is None:",
                "// Line 171:         readonly = []",
                "// Line 172:     if images is None:",
                "// Line 173:         images = []",
                "// Line 212:                         elif export_val == 'yes':",
                "// Line 213:                             val = 'no'",
                "// Line 214:                         else:",
                "// Line 215:                             val = 'No'",
                "// Line 216:             new_data_strings.append((key, val))",
                "// Line 217:         data_strings = new_data_strings",
                "// Line 218:     data_dict = {}",
                "// Line 219:     for key, val in data_strings:",
                "// Line 220:         data_dict[key] = val",
                "// Line 221:     pdf_file = tempfile.NamedTemporaryFile(prefix=\"datemp\", mode=\"wb\", suffix=\".pdf\", delete=False)",
                "// vulnerable line: 222: if pdfa or not editable:",
                "// Line 223:         fdf = Xfdf(pdf_url, data_dict)",
                "// Line 224:         # fdf = fdfgen.forge_fdf(pdf_url, data_strings, data_names, hidden, readonly)",
                "// Line 225:         fdf_file = tempfile.NamedTemporaryFile(prefix=\"datemp\", mode=\"wb\", suffix=\".xfdf\", delete=False)",
                "// Line 226:         # fdf_file.write(fdf)",
                "// Line 227:         fdf_file.close()",
                "// Line 228:         fdf.write_xfdf(fdf_file.name)",
                "// Line 229:         if template_password is not None:",
                "// Line 230:             template_file = tempfile.NamedTemporaryFile(prefix=\"datemp\", mode=\"wb\", suffix=\".pdf\", delete=False)",
                "// Line 231:             qpdf_subprocess_arguments = [QPDF_PATH, '--decrypt', '--password=' + template_password, template, template_file.name]",
                "// Line 232:             try:",
                "// Line 244:             else:",
                "// Line 245:                 logmessage(\"Warning: the rendering font feature requires system version 1.4.73 or later\")",
                "// Line 246:                 font_arguments = []",
                "// Line 247:         else:",
                "// Line 248:             font_arguments = DEFAULT_FONT_ARGUMENTS",
                "// Line 249:         subprocess_arguments = [PDFTK_PATH, template, 'fill_form', fdf_file.name, 'output', pdf_file.name] + font_arguments",
                "// Line 250:         # logmessage(\"Arguments are \" + str(subprocess_arguments))",
                "// Line 251:         if len(images) > 0:",
                "// Line 252:             subprocess_arguments.append('need_appearances')",
                "// Line 253:         else:",
                "// vulnerable line: 254: subprocess_arguments.append('flatten')",
                "// Line 255:         completed_process = None",
                "// Line 256:         try:",
                "// Line 257:             completed_process = subprocess.run(subprocess_arguments, timeout=600, check=False, capture_output=True)",
                "// Line 258:             result = completed_process.returncode",
                "// Line 259:         except subprocess.TimeoutExpired:",
                "// Line 260:             result = 1",
                "// Line 261:             logmessage(\"fill_template: call to pdftk fill_form took too long\")",
                "// Line 262:         if result != 0:",
                "// Line 263:             logmessage(\"Failed to fill PDF form \" + str(template))",
                "// Line 264:             pdftk_error_msg = (f\": {completed_process.stderr}\") if completed_process else \"\"",
                "// Line 265:             raise DAError(\"Call to pdftk failed for template \" + str(template) + \" where arguments were \" + \" \".join(subprocess_arguments) + pdftk_error_msg)",
                "// Line 266:         if len(images) > 0:",
                "// Line 267:             temp_pdf_file = tempfile.NamedTemporaryFile(prefix=\"datemp\", mode=\"wb\", suffix=\".pdf\", delete=False)",
                "// Line 268:             shutil.copyfile(pdf_file.name, temp_pdf_file.name)",
                "// Line 269:             pdf = Pdf.open(temp_pdf_file.name)",
                "// Line 270:     else:",
                "// Line 271:         if template_password:",
                "// Line 272:             pdf = Pdf.open(template, password=template_password)",
                "// Line 273:         else:",
                "// Line 274:             pdf = Pdf.open(template)",
                "// vulnerable line: 275: pdf.Root.AcroForm.NeedAppearances = True",
                "// Line 276:         for page in pdf.pages:",
                "// Line 277:             if not hasattr(page, 'Annots'):",
                "// Line 278:                 continue",
                "// Line 279:             for the_annot in page.Annots:",
                "// Line 280:                 for field, value in data_dict.items():",
                "// Line 281:                     annot = the_annot",
                "// Line 282:                     annot_kid = None",
                "// Line 283:                     while not (hasattr(annot, \"FT\") and hasattr(annot, \"T\")) and hasattr(annot, 'Parent'):",
                "// Line 284:                         annot_kid = annot",
                "// Line 285:                         annot = annot.Parent"
            ]
        },
        {
            "filename_of_changes": "server.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "27",
            "number_of_lines_deleted_vulnerable_to_cve": "11",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 42: ",
                "// Line 43: import docassemble.base.config",
                "// Line 44: if not docassemble.base.config.loaded:",
                "// Line 45:     docassemble.base.config.load()",
                "// Line 46: from docassemble.base.config import daconfig, hostname, in_celery, in_cron, DEBUG_BOOT, START_TIME, boot_log",
                "// Line 47: ",
                "// Line 48: import docassemble.webapp.setup",
                "// Line 49: from docassemble.webapp.setup import da_version",
                "// Line 50: import docassemble.base.astparser",
                "// Line 51: from docassemble.webapp.api_key import encrypt_api_key",
                "// vulnerable line: 52: from docassemble.base.error import DAError, DAErrorNoEndpoint, DAErrorMissingVariable, DAErrorCompileError, DAValidationError, DAException, DANotFoundError, DAInvalidFilename",
                "// Line 53: import docassemble.base.functions",
                "// Line 54: from docassemble.base.functions import get_default_timezone, ReturnValue, word",
                "// Line 55: import docassemble.base.DA",
                "// Line 56: from docassemble.base.generate_key import random_string, random_lower_string, random_alphanumeric, random_digits",
                "// Line 57: import docassemble.base.interview_cache",
                "// Line 58: from docassemble.base.logger import logmessage",
                "// Line 59: from docassemble.base.pandoc import word_to_markdown, convertible_mimetypes, convertible_extensions",
                "// Line 60: import docassemble.base.parse",
                "// Line 61: import docassemble.base.pdftk",
                "// Line 62: from docassemble.base.standardformatter import as_html, as_sms, get_choices_with_abb",
                "// Line 5927: ",
                "// Line 5928: ",
                "// Line 5929: @app.route('/github_oauth_callback', methods=['POST', 'GET'])",
                "// Line 5930: @login_required",
                "// Line 5931: @roles_required(['admin', 'developer'])",
                "// Line 5932: def github_oauth_callback():",
                "// Line 5933:     if not app.config['ENABLE_PLAYGROUND']:",
                "// Line 5934:         return ('File not found', 404)",
                "// Line 5935:     setup_translation()",
                "// Line 5936:     failed = False",
                "// vulnerable line: 5937: do_redirect = False",
                "// Line 5938:     if not app.config['USE_GITHUB']:",
                "// Line 5939:         logmessage('github_oauth_callback: server does not use github')",
                "// Line 5940:         failed = True",
                "// Line 5941:     elif 'github_next' not in session:",
                "// Line 5942:         logmessage('github_oauth_callback: next not in session')",
                "// Line 5943:         failed = True",
                "// Line 5944:     if failed is False:",
                "// Line 5945:         github_next = json.loads(session['github_next'])",
                "// Line 5946:         del session['github_next']",
                "// Line 5947:         if 'code' not in request.args or 'state' not in request.args:",
                "// Line 5948:             logmessage('github_oauth_callback: code and state not in args')",
                "// Line 5949:             failed = True",
                "// vulnerable line: 5950: do_redirect = True",
                "// Line 5951:         elif request.args['state'] != github_next['state']:",
                "// Line 5952:             logmessage('github_oauth_callback: state did not match')",
                "// Line 5953:             failed = True",
                "// Line 5954:     if failed:",
                "// Line 5955:         r.delete('da:github:userid:' + str(current_user.id))",
                "// Line 5956:         r.delete('da:using_github:userid:' + str(current_user.id))",
                "// vulnerable line: 5957: if do_redirect:",
                "// Line 5958:             flash(word(\"There was a problem connecting to GitHub. Please check your GitHub configuration and try again.\"), 'danger')",
                "// Line 5959:             return redirect(url_for('github_menu'))",
                "// Line 5960:         return ('File not found', 404)",
                "// Line 5961:     flow = get_github_flow()",
                "// Line 5962:     credentials = flow.step2_exchange(request.args['code'])",
                "// Line 5963:     storage = RedisCredStorage(oauth_app='github')",
                "// Line 5964:     storage.put(credentials)",
                "// Line 5965:     return redirect(github_next['path'], **github_next['arguments'])",
                "// Line 5966: ",
                "// Line 5967: ",
                "// Line 8357:                 exec(the_question.validation_code, user_dict)",
                "// Line 8358:             except Exception as validation_error:",
                "// Line 8359:                 the_error_message = str(validation_error)",
                "// Line 8360:                 logmessage(\"index: exception during validation: \" + the_error_message)",
                "// Line 8361:                 if the_error_message == '':",
                "// Line 8362:                     the_error_message = word(\"Please enter a valid value.\")",
                "// Line 8363:                 if isinstance(validation_error, DAValidationError) and isinstance(validation_error.field, str):",
                "// Line 8364:                     the_field = validation_error.field",
                "// Line 8365:                     logmessage(\"field is \" + the_field)",
                "// Line 8366:                     if the_field not in key_to_orig_key:",
                "// vulnerable line: 8367: for item in key_to_orig_key.keys():",
                "// Line 8368:                             if item.startswith(the_field + '['):",
                "// Line 8369:                                 the_field = item",
                "// Line 8370:                                 break",
                "// Line 8371:                     if the_field in key_to_orig_key:",
                "// Line 8372:                         field_error[key_to_orig_key[the_field]] = the_error_message",
                "// Line 8373:                     else:",
                "// Line 8374:                         error_messages.append((\"error\", the_error_message))",
                "// Line 8375:                 else:",
                "// Line 8376:                     error_messages.append((\"error\", the_error_message))",
                "// Line 8377:                 validated = False",
                "// Line 11007:             $(event.target).parents(\".file-caption-main\").find(\"input.dafile\").click();",
                "// Line 11008:           }",
                "// Line 11009:           event.preventDefault();",
                "// Line 11010:           return false;",
                "// Line 11011:         }",
                "// Line 11012:       }",
                "// Line 11013:       function daDisableIfNotHidden(query, value){",
                "// Line 11014:         $(query).each(function(){",
                "// Line 11015:           var showIfParent = $(this).parents('.dashowif,.dajsshowif');",
                "// Line 11016:           if (!(showIfParent.length && ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(\":visible\")))){",
                "// vulnerable line: 11017: if ($(this).hasClass('combobox')){",
                "// Line 11018:               if (value){",
                "// Line 11019:                 daComboBoxes[$(this).attr('id')].disable();",
                "// Line 11020:               }",
                "// Line 11021:               else {",
                "// Line 11022:                 daComboBoxes[$(this).attr('id')].enable();",
                "// Line 11023:               }",
                "// Line 11024:             }",
                "// Line 11025:             else if ($(this).hasClass('dafile')){",
                "// Line 11026:               if (value){",
                "// Line 11027:                 $(this).data(\"fileinput\").disable();",
                "// Line 14213:       }",
                "// Line 14214:       function daHideSpinner(){",
                "// Line 14215:         $(\"#daSpinner\").remove();",
                "// Line 14216:         daShowingSpinner = false;",
                "// Line 14217:         daSpinnerTimeout = null;",
                "// Line 14218:       }",
                "// Line 14219:       function daDisableIfNotHidden(query, value){",
                "// Line 14220:         $(query).each(function(){",
                "// Line 14221:           var showIfParent = $(this).parents('.dashowif, .dajsshowif');",
                "// Line 14222:           if (!(showIfParent.length && ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(\":visible\")))){",
                "// vulnerable line: 14223: if ($(this).hasClass('combobox')){",
                "// Line 14224:               if (value){",
                "// Line 14225:                 daComboBoxes[$(this).attr('id')].disable();",
                "// Line 14226:               }",
                "// Line 14227:               else {",
                "// Line 14228:                 daComboBoxes[$(this).attr('id')].enable();",
                "// Line 14229:               }",
                "// Line 14230:             }",
                "// Line 14231:             else if ($(this).hasClass('dafile')){",
                "// Line 14232:               if (value){",
                "// Line 14233:                 $(this).data(\"fileinput\").disable();",
                "// Line 23386: ",
                "// Line 23387: ",
                "// Line 23388: @app.errorhandler(Exception)",
                "// Line 23389: def server_error(the_error):",
                "// Line 23390:     setup_translation()",
                "// Line 23391:     if hasattr(the_error, 'interview') and the_error.interview.debug and hasattr(the_error, 'interview_status'):",
                "// Line 23392:         the_history = get_history(the_error.interview, the_error.interview_status)",
                "// Line 23393:     else:",
                "// Line 23394:         the_history = None",
                "// Line 23395:     the_vars = None",
                "// vulnerable line: 23396: if isinstance(the_error, (DAError, DANotFoundError, DAInvalidFilename)):",
                "// Line 23397:         errmess = str(the_error)",
                "// Line 23398:         the_trace = None",
                "// Line 23399:         logmessage(errmess)",
                "// Line 23400:     elif isinstance(the_error, TemplateError):",
                "// Line 23401:         errmess = str(the_error)",
                "// Line 23402:         if hasattr(the_error, 'name') and the_error.name is not None:",
                "// Line 23403:             errmess += \"",
                "// Line 23404: Name: \" + str(the_error.name)",
                "// Line 23405:         if hasattr(the_error, 'filename') and the_error.filename is not None:",
                "// Line 23406:             errmess += \"",
                "// Line 23648:     </script>\"\"\"  # noqa: W605",
                "// Line 23649:     error_notification(the_error, message=errmess, history=the_history, trace=the_trace, the_request=request, the_vars=the_vars)",
                "// Line 23650:     if (request.path.endswith('/interview') or request.path.endswith('/start') or request.path.endswith('/run')) and docassemble.base.functions.interview_path() is not None:",
                "// Line 23651:         try:",
                "// Line 23652:             release_lock(docassemble.base.functions.this_thread.current_info['session'], docassemble.base.functions.this_thread.current_info['yaml_filename'])",
                "// Line 23653:         except:",
                "// Line 23654:             pass",
                "// Line 23655:         if 'in error' not in session and docassemble.base.functions.this_thread.interview is not None and 'error action' in docassemble.base.functions.this_thread.interview.consolidated_metadata:",
                "// Line 23656:             session['in error'] = True",
                "// Line 23657:             return index(action_argument={'action': docassemble.base.functions.this_thread.interview.consolidated_metadata['error action'], 'arguments': {'error_message': orig_errmess, 'error_history': the_history, 'error_trace': the_trace}}, refer=['error'])",
                "// vulnerable line: 23658: show_debug = not bool((not DEBUG) and isinstance(the_error, (DAError, DAInvalidFilename)))",
                "// Line 23659:     if int(int(error_code)/100) == 4:",
                "// Line 23660:         show_debug = False",
                "// Line 23661:     if error_code == 404:",
                "// Line 23662:         the_template = 'pages/404.html'",
                "// Line 23663:     else:",
                "// Line 23664:         the_template = 'pages/501.html'",
                "// Line 23665:     try:",
                "// Line 23666:         yaml_filename = docassemble.base.functions.interview_path()",
                "// Line 23667:     except:",
                "// Line 23668:         yaml_filename = None"
            ]
        },
        {
            "filename_of_changes": "validators.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "10",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        }
    ]
}