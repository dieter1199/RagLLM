{
    "cve_id": "CVE-2024-32879",
    "cve_description": "Python Social Auth is a social authentication/registration mechanism. Prior to version 5.4.1, due to default case-insensitive collation in MySQL or MariaDB databases, third-party authentication user IDs are not case-sensitive and could cause different IDs to match. This issue has been addressed by a fix released in version 5.4.1. An immediate workaround would be to change collation of the affected field.",
    "cve_publish_date": "2024-04-24T20:15Z",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "models: make sure uid is compared case-sensitive\n\nThe database collation might vary, so use safer comparing in Python.",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "models.py",
            "code_language": "Python",
            "number_of_lines_added_for_mitigation": "9",
            "number_of_lines_deleted_vulnerable_to_cve": "5",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 47:     objects = UserSocialAuthManager()",
                "// Line 48: ",
                "// Line 49:     def __str__(self):",
                "// Line 50:         return str(self.user)",
                "// Line 51: ",
                "// Line 52:     class Meta:",
                "// Line 53:         app_label = \"social_django\"",
                "// Line 54:         abstract = True",
                "// Line 55: ",
                "// Line 56:     @classmethod",
                "// vulnerable line: 57: def get_social_auth(cls, provider, uid):",
                "// vulnerable line: 58: try:",
                "// vulnerable line: 59: return cls.objects.select_related(\"user\").get(provider=provider, uid=uid)",
                "// vulnerable line: 60: except cls.DoesNotExist:",
                "// vulnerable line: 61: return None",
                "// Line 62: ",
                "// Line 63:     @classmethod",
                "// Line 64:     def username_max_length(cls):",
                "// Line 65:         username_field = cls.username_field()",
                "// Line 66:         field = cls.user_model()._meta.get_field(username_field)",
                "// Line 67:         return field.max_length",
                "// Line 68: ",
                "// Line 69:     @classmethod",
                "// Line 70:     def user_model(cls):",
                "// Line 71:         return cls._meta.get_field(\"user\").remote_field.model"
            ]
        }
    ]
}