{
    "cve_id": "CVE-2024-24806",
    "cve_description": "libuv is a multi-platform support library with a focus on asynchronous I/O. The `uv_getaddrinfo` function in `src/unix/getaddrinfo.c` (and its windows counterpart `src/win/getaddrinfo.c`), truncates hostnames to 256 characters before calling `getaddrinfo`. This behavior can be exploited to create addresses like `0x00007f000001`, which are considered valid by `getaddrinfo` and could allow an attacker to craft payloads that resolve to unintended IP addresses, bypassing developer checks. The vulnerability arises due to how the `hostname_ascii` variable (with a length of 256 bytes) is handled in `uv_getaddrinfo` and subsequently in `uv__idna_toascii`. When the hostname exceeds 256 characters, it gets truncated without a terminating null byte. As a result attackers may be able to access internal APIs or for websites (similar to MySpace) that allows users to have `username.example.com` pages. Internal services that crawl or cache these user pages can be exposed to SSRF attacks if a malicious user chooses a long vulnerable username. This issue has been addressed in release version 1.48.0. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
    "cve_publish_date": "2024-02-07T22:15Z",
    "cwe_id": "CWE-918",
    "cwe_name": "Server-Side Request Forgery (SSRF)",
    "cwe_description": "The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.",
    "commit_message": "fix: always zero-terminate idna output\n\nFixes: https://github.com/libuv/libuv/security/advisories/GHSA-f74f-cvh7-c6q6",
    "type_of_change": "Modification",
    "changes": [
        {
            "filename_of_changes": "idna.c",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "3",
            "number_of_lines_deleted_vulnerable_to_cve": "2",
            "Code_with_highlighted_vulnerability_lines": [
                "// Line 336:       if (c != 0x3002)  /* 。 */",
                "// Line 337:         if (c != 0xFF0E)  /* ． */",
                "// Line 338:           if (c != 0xFF61)  /* ｡ */",
                "// Line 339:             continue;",
                "// Line 340: ",
                "// Line 341:     rc = uv__idna_toascii_label(s, st, &d, de);",
                "// Line 342: ",
                "// Line 343:     if (rc < 0)",
                "// Line 344:       return rc;",
                "// Line 345: ",
                "// vulnerable line: 346: if (d < de)",
                "// Line 347:       *d++ = '.';",
                "// Line 348: ",
                "// Line 349:     s = si;",
                "// Line 350:   }",
                "// Line 351: ",
                "// Line 352:   if (s < se) {",
                "// Line 353:     rc = uv__idna_toascii_label(s, se, &d, de);",
                "// Line 354: ",
                "// Line 355:     if (rc < 0)",
                "// Line 356:       return rc;",
                "// Line 357:   }",
                "// Line 358: ",
                "// vulnerable line: 359: if (d < de)",
                "// Line 360:     *d++ = '\u0000';",
                "// Line 361: ",
                "// Line 362:   return d - ds;  /* Number of bytes written. */",
                "// Line 363: }",
                "// Line 364: ",
                "// Line 365: ",
                "// Line 366: ssize_t uv_wtf8_length_as_utf16(const char* source_ptr) {",
                "// Line 367:   size_t w_target_len = 0;",
                "// Line 368:   int32_t code_point;",
                "// Line 369: "
            ]
        },
        {
            "filename_of_changes": "test-idna.c",
            "code_language": "C",
            "number_of_lines_added_for_mitigation": "4",
            "number_of_lines_deleted_vulnerable_to_cve": "0",
            "Code_with_highlighted_vulnerability_lines": []
        }
    ]
}