const FieldID& activeUnionMemberId(const void* object, ptrdiff_t offset) {
return *reinterpret_cast<const FieldID*>(
offset + static_cast<const char*>(object));
const auto* fieldInfo = findFieldInfo(iprot, readState, structInfo);
// Found it.
if (fieldInfo) {
void* unionVal = getMember(*fieldInfo, object);
// Default construct and placement new into the member union.
structInfo.unionExt->initMember[fieldInfo - structInfo.fieldInfos](
unionVal);
read(iprot, *fieldInfo->typeInfo, readState, unionVal);
const_cast<FieldID&>(activeUnionMemberId(
object, structInfo.unionExt->unionTypeOffset)) = fieldInfo->id;
const auto& unionId =
activeUnionMemberId(object, structInfo.unionExt->unionTypeOffset);
unionId,
if (found < end && found->id == unionId) {