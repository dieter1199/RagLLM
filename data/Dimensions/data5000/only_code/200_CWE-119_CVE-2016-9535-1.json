static void horAcc8(TIFF* tif, uint8* cp0, tmsize_t cc);
static void horAcc16(TIFF* tif, uint8* cp0, tmsize_t cc);
static void horAcc32(TIFF* tif, uint8* cp0, tmsize_t cc);
static void swabHorAcc16(TIFF* tif, uint8* cp0, tmsize_t cc);
static void swabHorAcc32(TIFF* tif, uint8* cp0, tmsize_t cc);
static void horDiff8(TIFF* tif, uint8* cp0, tmsize_t cc);
static void horDiff16(TIFF* tif, uint8* cp0, tmsize_t cc);
static void horDiff32(TIFF* tif, uint8* cp0, tmsize_t cc);
static void swabHorDiff16(TIFF* tif, uint8* cp0, tmsize_t cc);
static void swabHorDiff32(TIFF* tif, uint8* cp0, tmsize_t cc);
static void fpAcc(TIFF* tif, uint8* cp0, tmsize_t cc);
static void fpDiff(TIFF* tif, uint8* cp0, tmsize_t cc);
static void
assert((cc%stride)==0);
static void
horAcc16(tif, cp0, cc);
static void
assert((cc%(2*stride))==0);
static void
horAcc32(tif, cp0, cc);
static void
assert((cc%(4*stride))==0);
static void
assert((cc%(bps*stride))==0);
return;
(*sp->decodepfunc)(tif, op0, occ0);
return 1;
assert((occ0%rowsize)==0);
(*sp->decodepfunc)(tif, op0, rowsize);
static void
assert((cc%stride)==0);
static void
assert((cc%(2*stride))==0);
static void
horDiff16(tif, cp0, cc);
static void
assert((cc%(4*stride))==0);
static void
horDiff32(tif, cp0, cc);
static void
assert((cc%(bps*stride))==0);
return;
(*sp->encodepfunc)(tif, bp, cc);
assert((cc0%rowsize)==0);
