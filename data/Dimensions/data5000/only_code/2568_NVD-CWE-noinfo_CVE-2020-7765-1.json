import { assert } from 'chai';
assert.strictEqual(deepCopy(true), true);
assert.strictEqual(deepCopy(123), 123);
assert.strictEqual(deepCopy('abc'), 'abc');
assert.deepEqual(deepCopy(d), d);
assert.deepEqual(deepCopy({}), {});
assert.deepEqual(deepCopy({ a: 123 }), { a: 123 });
assert.deepEqual(deepCopy({ a: { b: 123 } }), { a: { b: 123 } });
assert.deepEqual(deepCopy([]), []);
assert.deepEqual(deepCopy([123, 456]), [123, 456]);
assert.deepEqual(deepCopy([123, [456]]), [123, [456]]);
assert.strictEqual(deepExtend(1, true), true);
assert.strictEqual(deepExtend(undefined, 123), 123);
assert.strictEqual(deepExtend('was', 'abc'), 'abc');
assert.deepEqual(deepExtend(new Date(), d), d);
assert.deepEqual(deepExtend({ old: 123 }, {}), { old: 123 });
assert.deepEqual(deepExtend({ old: 123 }, { s: 'hello' }), {
assert.deepEqual(
deepExtend({ old: 123, a: { c: 'in-old' } }, { a: { b: 123 } }),
{ old: 123, a: { b: 123, c: 'in-old' } }
);
assert.deepEqual(deepExtend([1], []), []);
assert.deepEqual(deepExtend([1], [123, 456]), [123, 456]);
assert.deepEqual(deepExtend([1], [123, [456]]), [123, [456]]);
assert.deepEqual(deepExtend(o1, o2), { a: [2] });
assert.deepEqual(o1, { a: [2] });
assert.deepEqual(b, [, , , '3']);
assert.deepEqual({ a: source }, target);
assert.strictEqual(source, target.a);