* Copyright (C) 2010-2020 Oryx Embedded SARL. All rights reserved.
* @version 2.0.0
TRACE_DEBUG("CIDER=0x%04" PRIX16 "\r\n", ksz8851ReadReg(interface, KSZ8851_REG_CIDER));
TRACE_DEBUG("PHY1ILR=0x%04" PRIX16 "\r\n", ksz8851ReadReg(interface, KSZ8851_REG_PHY1ILR));
TRACE_DEBUG("PHY1IHR=0x%04" PRIX16 "\r\n", ksz8851ReadReg(interface, KSZ8851_REG_PHY1IHR));
if(ksz8851ReadReg(interface, KSZ8851_REG_CIDER) != KSZ8851_REV_A3_ID)
ksz8851WriteReg(interface, KSZ8851_REG_MARH, htons(interface->macAddr.w[0]));
ksz8851WriteReg(interface, KSZ8851_REG_MARM, htons(interface->macAddr.w[1]));
ksz8851WriteReg(interface, KSZ8851_REG_MARL, htons(interface->macAddr.w[2]));
//Packets shorter than 64 bytes are padded and the CRC is automatically generated
ksz8851WriteReg(interface, KSZ8851_REG_TXCR, TXCR_TXFCE | TXCR_TXPE | TXCR_TXCE);
ksz8851WriteReg(interface, KSZ8851_REG_TXFDPR, TXFDPR_TXFPAI);
ksz8851WriteReg(interface, KSZ8851_REG_RXCR1,
RXCR1_RXPAFMA | RXCR1_RXFCE | RXCR1_RXBE | RXCR1_RXME | RXCR1_RXUE);
ksz8851WriteReg(interface, KSZ8851_REG_RXCR2,
RXCR2_SRDBL2 | RXCR2_IUFFP | RXCR2_RXIUFCEZ);
ksz8851WriteReg(interface, KSZ8851_REG_RXQCR, RXQCR_RXFCTE | RXQCR_ADRFE);
ksz8851WriteReg(interface, KSZ8851_REG_RXFDPR, RXFDPR_RXFPAI);
ksz8851WriteReg(interface, KSZ8851_REG_RXFCTR, 1);
ksz8851ClearBit(interface, KSZ8851_REG_P1CR, P1CR_FORCE_DUPLEX);
ksz8851SetBit(interface, KSZ8851_REG_P1CR, P1CR_RESTART_AN);
ksz8851SetBit(interface, KSZ8851_REG_ISR, ISR_LCIS | ISR_TXIS |
ISR_RXIS | ISR_RXOIS | ISR_TXPSIS | ISR_RXPSIS | ISR_TXSAIS |
ISR_RXWFDIS | ISR_RXMPDIS | ISR_LDIS | ISR_EDIS | ISR_SPIBEIS);
ksz8851SetBit(interface, KSZ8851_REG_IER, IER_LCIE | IER_TXIE | IER_RXIE);
ksz8851SetBit(interface, KSZ8851_REG_TXCR, TXCR_TXE);
ksz8851SetBit(interface, KSZ8851_REG_RXCR1, RXCR1_RXE);
ier = ksz8851ReadReg(interface, KSZ8851_REG_IER);
ksz8851WriteReg(interface, KSZ8851_REG_IER, 0);
isr = ksz8851ReadReg(interface, KSZ8851_REG_ISR);
if((isr & ISR_LCIS) != 0)
ier &= ~IER_LCIE;
if((isr & ISR_TXIS) != 0)
ksz8851WriteReg(interface, KSZ8851_REG_ISR, ISR_TXIS);
n = ksz8851ReadReg(interface, KSZ8851_REG_TXMIR) & TXMIR_TXMA_MASK;
if((isr & ISR_RXIS) != 0)
ier &= ~IER_RXIE;
ksz8851WriteReg(interface, KSZ8851_REG_IER, ier);
status = ksz8851ReadReg(interface, KSZ8851_REG_ISR);
if((status & ISR_LCIS) != 0)
ksz8851WriteReg(interface, KSZ8851_REG_ISR, ISR_LCIS);
status = ksz8851ReadReg(interface, KSZ8851_REG_P1SR);
if((status & P1SR_LINK_GOOD) != 0)
if((status & P1SR_OPERATION_SPEED) != 0)
if((status & P1SR_OPERATION_DUPLEX) != 0)
if((status & ISR_RXIS) != 0)
ksz8851WriteReg(interface, KSZ8851_REG_ISR, ISR_RXIS);
frameCount = MSB(ksz8851ReadReg(interface, KSZ8851_REG_RXFCTR));
ksz8851SetBit(interface, KSZ8851_REG_IER, IER_LCIE | IER_RXIE);
n = ksz8851ReadReg(interface, KSZ8851_REG_TXMIR) & TXMIR_TXMA_MASK;
header.controlWord = htole16(TX_CTRL_TXIC | (context->frameId++ & TX_CTRL_TXFID));
ksz8851SetBit(interface, KSZ8851_REG_RXQCR, RXQCR_SDA);
ksz8851ClearBit(interface, KSZ8851_REG_RXQCR, RXQCR_SDA);
ksz8851SetBit(interface, KSZ8851_REG_TXQCR, TXQCR_METFE);
n = ksz8851ReadReg(interface, KSZ8851_REG_TXMIR) & TXMIR_TXMA_MASK;
status = ksz8851ReadReg(interface, KSZ8851_REG_RXFHSR);
if((status & RXFHSR_RXFV) != 0)
if((status & (RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE)) == 0)
n = ksz8851ReadReg(interface, KSZ8851_REG_RXFHBCR) & RXFHBCR_RXBC_MASK;
ksz8851WriteReg(interface, KSZ8851_REG_RXFDPR, RXFDPR_RXFPAI);
ksz8851SetBit(interface, KSZ8851_REG_RXQCR, RXQCR_SDA);
ksz8851ClearBit(interface, KSZ8851_REG_RXQCR, RXQCR_SDA);
ksz8851SetBit(interface, KSZ8851_REG_RXQCR, RXQCR_RRXEF);
ksz8851WriteReg(interface, KSZ8851_REG_MAHTR0, hashTable[0]);
ksz8851WriteReg(interface, KSZ8851_REG_MAHTR1, hashTable[1]);
ksz8851WriteReg(interface, KSZ8851_REG_MAHTR2, hashTable[2]);
ksz8851WriteReg(interface, KSZ8851_REG_MAHTR3, hashTable[3]);
TRACE_DEBUG("  MAHTR0 = %04" PRIX16 "\r\n", ksz8851ReadReg(interface, KSZ8851_REG_MAHTR0));
TRACE_DEBUG("  MAHTR1 = %04" PRIX16 "\r\n", ksz8851ReadReg(interface, KSZ8851_REG_MAHTR1));
TRACE_DEBUG("  MAHTR2 = %04" PRIX16 "\r\n", ksz8851ReadReg(interface, KSZ8851_REG_MAHTR2));
TRACE_DEBUG("  MAHTR3 = %04" PRIX16 "\r\n", ksz8851ReadReg(interface, KSZ8851_REG_MAHTR3));