import java.util.Collections;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;
import org.torpedoquery.jpa.internal.Condition;
public class LikeCondition implements Condition {
private final String toMatch;
private final Type type;
private final Selector selector;
* @param type
*            a
*            {@link org.torpedoquery.jpa.internal.conditions.LikeCondition.Type}
*            object.
* @param selector
*            a {@link org.torpedoquery.jpa.internal.Selector} object.
* @param toMatch
*            a {@link java.lang.String} object.
public LikeCondition(Type type, Selector selector, String toMatch) {
this.type = type;
this.selector = selector;
this.toMatch = toMatch;
/** {@inheritDoc} */
public String createQueryFragment(AtomicInteger incrementor) {
return selector.createQueryFragment(incrementor) + " " + getLike() + " '" + type.wrap(toMatch) + "' ";
}
/**
* <p>
* getLike.
* </p>
*
* @return a {@link java.lang.String} object.
*/
protected String getLike() {
/** {@inheritDoc} */
@Override
public List<Parameter> getParameters() {
return Collections.emptyList();
}
