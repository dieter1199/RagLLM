{
    "cve_id": "CVE-2018-14774",
    "cve_description": "An issue was discovered in HttpKernel in Symfony 2.7.0 through 2.7.48, 2.8.0 through 2.8.43, 3.3.0 through 3.3.17, 3.4.0 through 3.4.13, 4.0.0 through 4.0.13, and 4.1.0 through 4.1.2. When using HttpCache, the values of the X-Forwarded-Host headers are implicitly set as trusted while this should be forbidden, leading to potential host header injection.",
    "cve_publish_date": "2018-08-03",
    "cwe_id": "CWE-20",
    "cwe_name": "Improper Input Validation",
    "cwe_description": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.",
    "commit_message": "[HttpKernel] fix trusted headers management in HttpCache and InlineFragmentRenderer",
    "type_of_change": "Modification",
    "filename_of_changes": "InlineFragmentRenderer.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "2",
    "number_of_lines_deleted_vulnerable_to_cve": "27",
    "vulnerable_lines": [
        "// Line_Reference 79:             return $this->kernel->handle($subRequest, HttpKernelInterface::SUB_REQUEST, false);",
        "// Line_Reference 112:         // Override the arguments to emulate a sub-request.",
        "// Line_Reference 113:         // Sub-request object will point to localhost as client ip and real client ip",
        "// Line_Reference 114:         // will be included into trusted header for client ip",
        "// Line_Reference 115:         try {",
        "// Line_Reference 116:             if ($trustedHeaderName = Request::getTrustedHeaderName(Request::HEADER_CLIENT_IP)) {",
        "// Line_Reference 117:                 $currentXForwardedFor = $request->headers->get($trustedHeaderName, '');",
        "// Line_Reference 118: ",
        "// Line_Reference 119:                 $server['HTTP_'.$trustedHeaderName] = ($currentXForwardedFor ? $currentXForwardedFor.', ' : '').$request->getClientIp();",
        "// Line_Reference 120:             }",
        "// Line_Reference 121:         } catch (\\InvalidArgumentException $e) {",
        "// Line_Reference 122:             // Do nothing",
        "// Line_Reference 123:         }",
        "// Line_Reference 124: ",
        "// Line_Reference 125:         $server['REMOTE_ADDR'] = $this->resolveTrustedProxy();",
        "// Line_Reference 126: ",
        "// Line_Reference 142:     private function resolveTrustedProxy()",
        "// Line_Reference 143:     {",
        "// Line_Reference 144:         if (!$trustedProxies = Request::getTrustedProxies()) {",
        "// Line_Reference 145:             return '127.0.0.1';",
        "// Line_Reference 146:         }",
        "// Line_Reference 147: ",
        "// Line_Reference 148:         $firstTrustedProxy = reset($trustedProxies);",
        "// Line_Reference 149: ",
        "// Line_Reference 150:         return false !== ($i = strpos($firstTrustedProxy, '/')) ? substr($firstTrustedProxy, 0, $i) : $firstTrustedProxy;",
        "// Line_Reference 151:     }",
        "// Line_Reference 152: "
    ]
}
