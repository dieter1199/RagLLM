{
    "cve_id": "CVE-2021-21306",
    "cve_description": "Marked is an open-source markdown parser and compiler (npm package \"marked\"). In marked from version 1.1.1 and before version 2.0.0, there is a Regular expression Denial of Service vulnerability. This vulnerability can affect anyone who runs user generated code through marked. This vulnerability is fixed in version 2.0.0.",
    "cve_publish_date": "2021-02-08",
    "cwe_id": "CWE-400",
    "cwe_name": "Uncontrolled Resource Consumption",
    "cwe_description": "The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.",
    "commit_message": "fix: Total rework of Emphasis/Strong (#1864)\n\nBREAKING CHANGE: `em` and `strong` tokenizers have been merged into one `emStrong` tokenizer",
    "type_of_change": "Modification",
    "filename_of_changes": "marked.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "75",
    "number_of_lines_deleted_vulnerable_to_cve": "78",
    "vulnerable_lines": [
        "// Line_Reference 940:     _proto.strong = function strong(src, maskedSrc, prevChar) {",
        "// Line_Reference 945:       var match = this.rules.inline.strong.start.exec(src);",
        "// Line_Reference 947:       if (match && (!match[1] || match[1] && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar)))) {",
        "// Line_Reference 948:         maskedSrc = maskedSrc.slice(-1 * src.length);",
        "// Line_Reference 949:         var endReg = match[0] === '**' ? this.rules.inline.strong.endAst : this.rules.inline.strong.endUnd;",
        "// Line_Reference 951:         var cap;",
        "// Line_Reference 954:           cap = this.rules.inline.strong.middle.exec(maskedSrc.slice(0, match.index + 3));",
        "// Line_Reference 955: ",
        "// Line_Reference 956:           if (cap) {",
        "// Line_Reference 957:             return {",
        "// Line_Reference 958:               type: 'strong',",
        "// Line_Reference 959:               raw: src.slice(0, cap[0].length),",
        "// Line_Reference 960:               text: src.slice(2, cap[0].length - 2)",
        "// Line_Reference 961:             };",
        "// Line_Reference 963:         }",
        "// Line_Reference 964:       }",
        "// Line_Reference 965:     };",
        "// Line_Reference 967:     _proto.em = function em(src, maskedSrc, prevChar) {",
        "// Line_Reference 968:       if (prevChar === void 0) {",
        "// Line_Reference 969:         prevChar = '';",
        "// Line_Reference 970:       }",
        "// Line_Reference 971: ",
        "// Line_Reference 972:       var match = this.rules.inline.em.start.exec(src);",
        "// Line_Reference 973: ",
        "// Line_Reference 974:       if (match && (!match[1] || match[1] && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar)))) {",
        "// Line_Reference 975:         maskedSrc = maskedSrc.slice(-1 * src.length);",
        "// Line_Reference 976:         var endReg = match[0] === '*' ? this.rules.inline.em.endAst : this.rules.inline.em.endUnd;",
        "// Line_Reference 977:         endReg.lastIndex = 0;",
        "// Line_Reference 978:         var cap;",
        "// Line_Reference 980:         while ((match = endReg.exec(maskedSrc)) != null) {",
        "// Line_Reference 981:           cap = this.rules.inline.em.middle.exec(maskedSrc.slice(0, match.index + 2));",
        "// Line_Reference 983:           if (cap) {",
        "// Line_Reference 986:               raw: src.slice(0, cap[0].length),",
        "// Line_Reference 987:               text: src.slice(1, cap[0].length - 1)",
        "// Line_Reference 1236:     strong: {",
        "// Line_Reference 1237:       start: /^(?:(\\*\\*(?=[*punctuation]))|\\*\\*)(?![\\s])|__/,",
        "// Line_Reference 1238:       // (1) returns if starts w/ punctuation",
        "// Line_Reference 1239:       middle: /^\\*\\*(?:(?:(?!overlapSkip)(?:[^*]|\\\\\\*)|overlapSkip)|\\*(?:(?!overlapSkip)(?:[^*]|\\\\\\*)|overlapSkip)*?\\*)+?\\*\\*$|^__(?![\\s])((?:(?:(?!overlapSkip)(?:[^_]|\\\\_)|overlapSkip)|_(?:(?!overlapSkip)(?:[^_]|\\\\_)|overlapSkip)*?_)+?)__$/,",
        "// Line_Reference 1240:       endAst: /[^punctuation\\s]\\*\\*(?!\\*)|[punctuation]\\*\\*(?!\\*)(?:(?=[punctuation_\\s]|$))/,",
        "// Line_Reference 1241:       // last char can't be punct, or final * must also be followed by punct (or endline)",
        "// Line_Reference 1242:       endUnd: /[^\\s]__(?!_)(?:(?=[punctuation*\\s])|$)/ // last char can't be a space, and final _ must preceed punct or \\s (or endline)",
        "// Line_Reference 1243: ",
        "// Line_Reference 1244:     },",
        "// Line_Reference 1245:     em: {",
        "// Line_Reference 1246:       start: /^(?:(\\*(?=[punctuation]))|\\*)(?![*\\s])|_/,",
        "// Line_Reference 1247:       // (1) returns if starts w/ punctuation",
        "// Line_Reference 1248:       middle: /^\\*(?:(?:(?!overlapSkip)(?:[^*]|\\\\\\*)|overlapSkip)|\\*(?:(?!overlapSkip)(?:[^*]|\\\\\\*)|overlapSkip)*?\\*)+?\\*$|^_(?![_\\s])(?:(?:(?!overlapSkip)(?:[^_]|\\\\_)|overlapSkip)|_(?:(?!overlapSkip)(?:[^_]|\\\\_)|overlapSkip)*?_)+?_$/,",
        "// Line_Reference 1249:       endAst: /[^punctuation\\s]\\*(?!\\*)|[punctuation]\\*(?!\\*)(?:(?=[punctuation_\\s]|$))/,",
        "// Line_Reference 1250:       // last char can't be punct, or final * must also be followed by punct (or endline)",
        "// Line_Reference 1251:       endUnd: /[^\\s]_(?!_)(?:(?=[punctuation*\\s])|$)/ // last char can't be a space, and final _ must preceed punct or \\s (or endline)",
        "// Line_Reference 1257:     text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*]|\\b_|$)|[^ ](?= {2,}\\n)))/,",
        "// Line_Reference 1258:     punctuation: /^([\\s*punctuation])/",
        "// Line_Reference 1259:   }; // list of punctuation marks from common mark spec",
        "// Line_Reference 1260:   // without * and _ to workaround cases with double emphasis",
        "// Line_Reference 1265:   inline._blockSkip = '\\\\[[^\\\\]]*?\\\\]\\\\([^\\\\)]*?\\\\)|`[^`]*?`|<[^>]*?>';",
        "// Line_Reference 1266:   inline._overlapSkip = '__[^_]*?__|\\\\*\\\\*\\\\[^\\\\*\\\\]*?\\\\*\\\\*';",
        "// Line_Reference 1268:   inline.em.start = edit$1(inline.em.start).replace(/punctuation/g, inline._punctuation).getRegex();",
        "// Line_Reference 1269:   inline.em.middle = edit$1(inline.em.middle).replace(/punctuation/g, inline._punctuation).replace(/overlapSkip/g, inline._overlapSkip).getRegex();",
        "// Line_Reference 1270:   inline.em.endAst = edit$1(inline.em.endAst, 'g').replace(/punctuation/g, inline._punctuation).getRegex();",
        "// Line_Reference 1271:   inline.em.endUnd = edit$1(inline.em.endUnd, 'g').replace(/punctuation/g, inline._punctuation).getRegex();",
        "// Line_Reference 1272:   inline.strong.start = edit$1(inline.strong.start).replace(/punctuation/g, inline._punctuation).getRegex();",
        "// Line_Reference 1273:   inline.strong.middle = edit$1(inline.strong.middle).replace(/punctuation/g, inline._punctuation).replace(/overlapSkip/g, inline._overlapSkip).getRegex();",
        "// Line_Reference 1274:   inline.strong.endAst = edit$1(inline.strong.endAst, 'g').replace(/punctuation/g, inline._punctuation).getRegex();",
        "// Line_Reference 1275:   inline.strong.endUnd = edit$1(inline.strong.endUnd, 'g').replace(/punctuation/g, inline._punctuation).getRegex();",
        "// Line_Reference 1276:   inline.blockSkip = edit$1(inline._blockSkip, 'g').getRegex();",
        "// Line_Reference 1277:   inline.overlapSkip = edit$1(inline._overlapSkip, 'g').getRegex();",
        "// Line_Reference 1325:     text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@))|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@))/",
        "// Line_Reference 1784:         } // strong",
        "// Line_Reference 1787:         if (token = this.tokenizer.strong(src, maskedSrc, prevChar)) {",
        "// Line_Reference 1788:           src = src.substring(token.raw.length);",
        "// Line_Reference 1789:           token.tokens = this.inlineTokens(token.text, [], inLink, inRawBlock);",
        "// Line_Reference 1790:           tokens.push(token);",
        "// Line_Reference 1791:           continue;",
        "// Line_Reference 1792:         } // em",
        "// Line_Reference 1793: ",
        "// Line_Reference 1794: ",
        "// Line_Reference 1795:         if (token = this.tokenizer.em(src, maskedSrc, prevChar)) {",
        "// Line_Reference 1841:           prevChar = token.raw.slice(-1);"
    ]
}
