{
    "cve_id": "CVE-2020-19498",
    "cve_description": "Floating point exception in function Fraction in libheif 1.4.0, allows attackers to cause a Denial of Service or possibly other unspecified impacts.",
    "cve_publish_date": "2021-07-21",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "force fraction to a limited resolution to finally solve those pesky numerical edge cases",
    "type_of_change": "Modification",
    "filename_of_changes": "box.cc",
    "code_language": "C++",
    "number_of_lines_added_for_mitigation": "8",
    "number_of_lines_deleted_vulnerable_to_cve": "42",
    "vulnerable_lines": [
        "// Line_Reference 43: static int32_t gcd(int a, int b)",
        "// Line_Reference 44: {",
        "// Line_Reference 45:   if (a == 0 && b == 0) {",
        "// Line_Reference 46:     return 1;",
        "// Line_Reference 47:   }",
        "// Line_Reference 48: ",
        "// Line_Reference 49:   if (a == 0) return b;",
        "// Line_Reference 50:   if (b == 0) return a;",
        "// Line_Reference 51: ",
        "// Line_Reference 52:   int32_t h;",
        "// Line_Reference 53: ",
        "// Line_Reference 54:   do {",
        "// Line_Reference 55:     h = a % b;",
        "// Line_Reference 56:     a = b;",
        "// Line_Reference 57:     b = h;",
        "// Line_Reference 58:   } while (b != 0);",
        "// Line_Reference 59: ",
        "// Line_Reference 60:   return a;",
        "// Line_Reference 61: }",
        "// Line_Reference 62: ",
        "// Line_Reference 63: ",
        "// Line_Reference 66:   int32_t g = gcd(num, den);",
        "// Line_Reference 67: ",
        "// Line_Reference 68:   // these strange tests are for catching the case that we divide -2147483648 by -1,",
        "// Line_Reference 69:   // which would exceed the maximum positive value by one.",
        "// Line_Reference 70: ",
        "// Line_Reference 71:   if (num == std::numeric_limits<int32_t>::min() && g == -1) {",
        "// Line_Reference 72:     num++;",
        "// Line_Reference 73:   }",
        "// Line_Reference 74: ",
        "// Line_Reference 75:   if (den == std::numeric_limits<int32_t>::min() && g == -1) {",
        "// Line_Reference 76:     den++;",
        "// Line_Reference 77:   }",
        "// Line_Reference 78: ",
        "// Line_Reference 79: ",
        "// Line_Reference 80:   numerator = num / g;",
        "// Line_Reference 81:   denominator = den / g;",
        "// Line_Reference 82: ",
        "// Line_Reference 83: ",
        "// Line_Reference 88:   while (denominator > MAX_FRACTION_DENOMINATOR) {",
        "// Line_Reference 89:     numerator >>= 1;",
        "// Line_Reference 90:     denominator >>= 1;"
    ]
}
