{
    "cve_id": "CVE-2020-8929",
    "cve_description": "A mis-handling of invalid unicode characters in the Java implementation of Tink versions prior to 1.5 allows an attacker to change the ID part of a ciphertext, which result in the creation of a second ciphertext that can decrypt to the same plaintext. This can be a problem with encrypting deterministic AEAD with a single key, and rely on a unique ciphertext-per-plaintext.",
    "cve_publish_date": "2020-10-19",
    "cwe_id": "NVD-CWE-Other",
    "cwe_name": "Other",
    "cwe_description": "NVD is only using a subset of CWE for mapping instead of the entire CWE, and the weakness type is not covered by that subset.",
    "commit_message": "Fixing ciphertext malleability issue in Java caused by storing the ciphertext prefix in a hashmap keyed by UTF8 encoded strings, instead of byte arrays, leading to the ability to retrieve keys with IDs that happen to be invalid Unicode strings with a changed ID.\n\nPiperOrigin-RevId: 336763863",
    "type_of_change": "Modification",
    "filename_of_changes": "PrimitiveSetTest.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "44",
    "number_of_lines_deleted_vulnerable_to_cve": "13",
    "vulnerable_lines": [
        "// Line_Reference 28: import java.nio.charset.Charset;",
        "// Line_Reference 39:   private static final Charset UTF_8 = Charset.forName(\"UTF-8\");",
        "// Line_Reference 94:     assertEquals(3, pset.getAll().size());",
        "// Line_Reference 97:     assertEquals(1, entries.size());",
        "// Line_Reference 100:         DummyMac1.class.getSimpleName(),",
        "// Line_Reference 101:         new String(entry.getPrimitive().computeMac(null), \"UTF-8\"));",
        "// Line_Reference 108:     assertEquals(1, entries.size());",
        "// Line_Reference 112:         new String(entry.getPrimitive().computeMac(null), \"UTF-8\"));",
        "// Line_Reference 114:     assertEquals(0, entry.getIdentifier().length);",
        "// Line_Reference 119:     assertEquals(1, entries.size());",
        "// Line_Reference 122:         DummyMac1.class.getSimpleName(),",
        "// Line_Reference 123:         new String(entry.getPrimitive().computeMac(null), \"UTF-8\"));",
        "// Line_Reference 132:         new String(entry.getPrimitive().computeMac(null), \"UTF-8\"));"
    ]
}
