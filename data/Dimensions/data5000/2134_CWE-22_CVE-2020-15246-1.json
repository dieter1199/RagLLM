{
    "cve_id": "CVE-2020-15246",
    "cve_description": "October is a free, open-source, self-hosted CMS platform based on the Laravel PHP Framework. In October CMS from version 1.0.421 and before version 1.0.469, an attacker can read local files on an October CMS server via a specially crafted request. Issue has been patched in Build 469 (v1.0.469) and v1.1.0.",
    "cve_publish_date": "2020-11-23",
    "cwe_id": "CWE-22",
    "cwe_name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
    "cwe_description": "The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
    "commit_message": "Security fixes for v1.0.469\n\nTemporarily disables SVG uploads\nImproves path validation in FileDatasource & reorgs / cleans up Halcyon Builder\nAdds XSS filtering to SystemException messages (related https://github.com/octobercms/library/commit/c16fefde03080fe2b3937e565d9cdf7b70291384#diff-4915b631d3234e0c5232490be34effe4)",
    "type_of_change": "Modification",
    "filename_of_changes": "Builder.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "95",
    "number_of_lines_deleted_vulnerable_to_cve": "95",
    "vulnerable_lines": [
        "// Line_Reference 145:      * Switches mode to select a single template by its name.",
        "// Line_Reference 147:      * @param  string  $fileName",
        "// Line_Reference 148:      * @return $this",
        "// Line_Reference 150:     public function whereFileName($fileName)",
        "// Line_Reference 152:         $this->selectSingle = $this->model->getFileNameParts($fileName);",
        "// Line_Reference 153: ",
        "// Line_Reference 154:         return $this;",
        "// Line_Reference 158:      * Set the directory name which the query is targeting.",
        "// Line_Reference 160:      * @param  string  $dirName",
        "// Line_Reference 161:      * @return $this",
        "// Line_Reference 163:     public function from($dirName)",
        "// Line_Reference 165:         $this->from = $dirName;",
        "// Line_Reference 167:         return $this;",
        "// Line_Reference 171:      * Set the \"offset\" value of the query.",
        "// Line_Reference 176:     public function offset($value)",
        "// Line_Reference 178:         $this->offset = max(0, $value);",
        "// Line_Reference 184:      * Alias to set the \"offset\" value of the query.",
        "// Line_Reference 189:     public function skip($value)",
        "// Line_Reference 191:         return $this->offset($value);",
        "// Line_Reference 195:      * Set the \"limit\" value of the query.",
        "// Line_Reference 200:     public function limit($value)",
        "// Line_Reference 202:         if ($value >= 0) {",
        "// Line_Reference 203:             $this->limit = $value;",
        "// Line_Reference 204:         }",
        "// Line_Reference 210:      * Alias to set the \"limit\" value of the query.",
        "// Line_Reference 215:     public function take($value)",
        "// Line_Reference 217:         return $this->limit($value);",
        "// Line_Reference 242:      * Execute the query as a \"select\" statement.",
        "// Line_Reference 243:      *",
        "// Line_Reference 244:      * @param  array  $columns",
        "// Line_Reference 245:      * @return \\October\\Rain\\Halcyon\\Collection|static[]",
        "// Line_Reference 246:      */",
        "// Line_Reference 247:     public function get($columns = ['*'])",
        "// Line_Reference 248:     {",
        "// Line_Reference 249:         if (!is_null($this->cacheMinutes)) {",
        "// Line_Reference 250:             $results = $this->getCached($columns);",
        "// Line_Reference 251:         }",
        "// Line_Reference 252:         else {",
        "// Line_Reference 253:             $results = $this->getFresh($columns);",
        "// Line_Reference 254:         }",
        "// Line_Reference 255: ",
        "// Line_Reference 256:         $models = $this->getModels($results ?: []);",
        "// Line_Reference 257: ",
        "// Line_Reference 258:         return $this->model->newCollection($models);",
        "// Line_Reference 259:     }",
        "// Line_Reference 260: ",
        "// Line_Reference 261:     /**",
        "// Line_Reference 262:      * Get an array with the values of a given column.",
        "// Line_Reference 264:      * @param  string  $column",
        "// Line_Reference 265:      * @param  string  $key",
        "// Line_Reference 266:      * @return array",
        "// Line_Reference 268:     public function lists($column, $key = null)",
        "// Line_Reference 270:         $select = is_null($key) ? [$column] : [$column, $key];",
        "// Line_Reference 271: ",
        "// Line_Reference 272:         if (!is_null($this->cacheMinutes)) {",
        "// Line_Reference 273:             $results = $this->getCached($select);",
        "// Line_Reference 274:         }",
        "// Line_Reference 275:         else {",
        "// Line_Reference 276:             $results = $this->getFresh($select);",
        "// Line_Reference 277:         }",
        "// Line_Reference 279:         $collection = new Collection($results);",
        "// Line_Reference 281:         return $collection->lists($column, $key);",
        "// Line_Reference 324:      * Set a model instance for the model being queried.",
        "// Line_Reference 326:      * @param  \\October\\Rain\\Halcyon\\Model  $model",
        "// Line_Reference 327:      * @return $this",
        "// Line_Reference 329:     public function setModel(Model $model)",
        "// Line_Reference 331:         $this->model = $model;",
        "// Line_Reference 332: ",
        "// Line_Reference 333:         $this->extensions = $this->model->getAllowedExtensions();",
        "// Line_Reference 334: ",
        "// Line_Reference 335:         $this->from($this->model->getObjectTypeDirName());",
        "// Line_Reference 337:         return $this;",
        "// Line_Reference 338:     }",
        "// Line_Reference 340:     /**",
        "// Line_Reference 341:      * Get the compiled file content representation of the query.",
        "// Line_Reference 342:      *",
        "// Line_Reference 343:      * @return string",
        "// Line_Reference 344:      */",
        "// Line_Reference 345:     public function toCompiled()",
        "// Line_Reference 346:     {",
        "// Line_Reference 347:         return $this->processor->processUpdate($this, []);",
        "// Line_Reference 411:      * @param  string  $fileName",
        "// Line_Reference 414:     public function delete($fileName = null)",
        "// Line_Reference 471:     /**",
        "// Line_Reference 472:      * Get the model instance being queried.",
        "// Line_Reference 473:      *",
        "// Line_Reference 474:      * @return \\October\\Rain\\Halcyon\\Model",
        "// Line_Reference 475:      */",
        "// Line_Reference 476:     public function getModel()",
        "// Line_Reference 477:     {",
        "// Line_Reference 478:         return $this->model;",
        "// Line_Reference 479:     }",
        "// Line_Reference 480: ",
        "// Line_Reference 781:      * @return mixed",
        "// Line_Reference 782:      *"
    ]
}
