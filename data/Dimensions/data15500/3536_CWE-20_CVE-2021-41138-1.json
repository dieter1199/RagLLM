{
    "cve_id": "CVE-2021-41138",
    "cve_description": "Frontier is Substrate's Ethereum compatibility layer. In the newly introduced signed Frontier-specific extrinsic for `pallet-ethereum`, a large part of transaction validation logic was only called in transaction pool validation, but not in block execution. Malicious validators can take advantage of this to put invalid transactions into a block. The attack is limited in that the signature is always validated, and the majority of the validation is done again in the subsequent `pallet-evm` execution logic. However, do note that a chain ID replay attack was possible. In addition, spamming attacks are of main concerns, while they are limited by Substrate block size limits and other factors. The issue is patched in commit `146bb48849e5393004be5c88beefe76fdf009aba`.",
    "cve_publish_date": "2021-10-13",
    "cwe_id": "CWE-20",
    "cwe_name": "Improper Input Validation",
    "cwe_description": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.",
    "commit_message": "Fix security issue: transaction validity controls must be executed in STF (#495)\n\n* add security tests\r\n\r\n* add pre_dispatch phase to fiy security issues\r\n\r\n* Revert frame-evm changes\r\n\r\n* keeping *_self_contained aligned\r\n\r\n* remove unused default impl",
    "type_of_change": "Modification",
    "filename_of_changes": "lib.rs",
    "code_language": "Rust",
    "number_of_lines_added_for_mitigation": "138",
    "number_of_lines_deleted_vulnerable_to_cve": "73",
    "vulnerable_lines": [
        "// Line_Reference 121: \tpub fn validate_self_contained(&self, origin: &H160) -> Option<TransactionValidity> {",
        "// Line_Reference 123: \t\t\tlet validate = || {",
        "// Line_Reference 124: \t\t\t\t// We must ensure a transaction can pay the cost of its data bytes.",
        "// Line_Reference 125: \t\t\t\t// If it can't it should not be included in a block.",
        "// Line_Reference 126: \t\t\t\tlet mut gasometer = evm::gasometer::Gasometer::new(",
        "// Line_Reference 127: \t\t\t\t\ttransaction.gas_limit.low_u64(),",
        "// Line_Reference 128: \t\t\t\t\t<T as pallet_evm::Config>::config(),",
        "// Line_Reference 129: \t\t\t\t);",
        "// Line_Reference 130: \t\t\t\tlet transaction_cost = match transaction.action {",
        "// Line_Reference 131: \t\t\t\t\tTransactionAction::Call(_) => {",
        "// Line_Reference 132: \t\t\t\t\t\tevm::gasometer::call_transaction_cost(&transaction.input)",
        "// Line_Reference 133: \t\t\t\t\t}",
        "// Line_Reference 134: \t\t\t\t\tTransactionAction::Create => {",
        "// Line_Reference 135: \t\t\t\t\t\tevm::gasometer::create_transaction_cost(&transaction.input)",
        "// Line_Reference 136: \t\t\t\t\t}",
        "// Line_Reference 137: \t\t\t\t};",
        "// Line_Reference 138: \t\t\t\tif gasometer.record_transaction(transaction_cost).is_err() {",
        "// Line_Reference 139: \t\t\t\t\treturn InvalidTransaction::Custom(",
        "// Line_Reference 140: \t\t\t\t\t\tTransactionValidationError::InvalidGasLimit as u8,",
        "// Line_Reference 141: \t\t\t\t\t)",
        "// Line_Reference 142: \t\t\t\t\t.into();",
        "// Line_Reference 143: \t\t\t\t}",
        "// Line_Reference 144: ",
        "// Line_Reference 145: \t\t\t\tif let Some(chain_id) = transaction.signature.chain_id() {",
        "// Line_Reference 146: \t\t\t\t\tif chain_id != T::ChainId::get() {",
        "// Line_Reference 147: \t\t\t\t\t\treturn InvalidTransaction::Custom(",
        "// Line_Reference 148: \t\t\t\t\t\t\tTransactionValidationError::InvalidChainId as u8,",
        "// Line_Reference 149: \t\t\t\t\t\t)",
        "// Line_Reference 150: \t\t\t\t\t\t.into();",
        "// Line_Reference 151: \t\t\t\t\t}",
        "// Line_Reference 152: \t\t\t\t}",
        "// Line_Reference 153: ",
        "// Line_Reference 154: \t\t\t\tif transaction.gas_limit >= T::BlockGasLimit::get() {",
        "// Line_Reference 155: \t\t\t\t\treturn InvalidTransaction::Custom(",
        "// Line_Reference 156: \t\t\t\t\t\tTransactionValidationError::InvalidGasLimit as u8,",
        "// Line_Reference 157: \t\t\t\t\t)",
        "// Line_Reference 158: \t\t\t\t\t.into();",
        "// Line_Reference 159: \t\t\t\t}",
        "// Line_Reference 160: ",
        "// Line_Reference 161: \t\t\t\tlet account_data = pallet_evm::Pallet::<T>::account_basic(&origin);",
        "// Line_Reference 162: ",
        "// Line_Reference 163: \t\t\t\tif transaction.nonce < account_data.nonce {",
        "// Line_Reference 164: \t\t\t\t\treturn InvalidTransaction::Stale.into();",
        "// Line_Reference 165: \t\t\t\t}",
        "// Line_Reference 166: ",
        "// Line_Reference 167: \t\t\t\tlet fee = transaction.gas_price.saturating_mul(transaction.gas_limit);",
        "// Line_Reference 168: \t\t\t\tlet total_payment = transaction.value.saturating_add(fee);",
        "// Line_Reference 169: \t\t\t\tif account_data.balance < total_payment {",
        "// Line_Reference 170: \t\t\t\t\treturn InvalidTransaction::Payment.into();",
        "// Line_Reference 171: \t\t\t\t}",
        "// Line_Reference 172: ",
        "// Line_Reference 173: \t\t\t\tlet min_gas_price = T::FeeCalculator::min_gas_price();",
        "// Line_Reference 174: ",
        "// Line_Reference 175: \t\t\t\tif transaction.gas_price < min_gas_price {",
        "// Line_Reference 176: \t\t\t\t\treturn InvalidTransaction::Payment.into();",
        "// Line_Reference 177: \t\t\t\t}",
        "// Line_Reference 178: ",
        "// Line_Reference 179: \t\t\t\tlet mut builder = ValidTransactionBuilder::default()",
        "// Line_Reference 180: \t\t\t\t\t.and_provides((origin, transaction.nonce))",
        "// Line_Reference 181: \t\t\t\t\t.priority(transaction.gas_price.unique_saturated_into());",
        "// Line_Reference 182: ",
        "// Line_Reference 183: \t\t\t\tif transaction.nonce > account_data.nonce {",
        "// Line_Reference 184: \t\t\t\t\tif let Some(prev_nonce) = transaction.nonce.checked_sub(1.into()) {",
        "// Line_Reference 185: \t\t\t\t\t\tbuilder = builder.and_requires((origin, prev_nonce))",
        "// Line_Reference 186: \t\t\t\t\t}",
        "// Line_Reference 187: \t\t\t\t}",
        "// Line_Reference 188: ",
        "// Line_Reference 189: \t\t\t\tbuilder.build()",
        "// Line_Reference 190: \t\t\t};",
        "// Line_Reference 192: \t\t\tSome(validate())",
        "// Line_Reference 262: \t\t\t\t\tSelf::do_transact(source, transaction).expect(",
        "// Line_Reference 290: \t\t\tSelf::do_transact(source, transaction)",
        "// Line_Reference 421: \tfn do_transact(source: H160, transaction: Transaction) -> DispatchResultWithPostInfo {"
    ]
}
