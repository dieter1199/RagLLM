{
    "cve_id": "CVE-2022-41912",
    "cve_description": "The crewjam/saml go library prior to version 0.4.9 is vulnerable to an authentication bypass when processing SAML responses containing multiple Assertion elements. This issue has been corrected in version 0.4.9. There are no workarounds other than upgrading to a fixed version.",
    "cve_publish_date": "2022-11-28",
    "cwe_id": "CWE-287",
    "cwe_name": "Improper Authentication",
    "cwe_description": "When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.",
    "commit_message": "Merge pull request from GHSA-j2jp-wvqg-wc2g\n\n* add test case (courtesy of fwilhelm)\n\n* fix",
    "type_of_change": "Modification",
    "filename_of_changes": "service_provider_test.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "60",
    "number_of_lines_deleted_vulnerable_to_cve": "19",
    "vulnerable_lines": [
        "// Line_Reference 988: \tbytes, _ := addSignatureToDocument(test.responseDom()).WriteToBytes()",
        "// Line_Reference 1090: \treq := http.Request{PostForm: url.Values{}}",
        "// Line_Reference 1091: \treq.PostForm.Set(\"SAMLResponse\", base64.StdEncoding.EncodeToString(test.SamlResponse))",
        "// Line_Reference 1092: \ts.IDPMetadata.IDPSSODescriptors[0].KeyDescriptors[0].KeyInfo.X509Data.X509Certificates[0].Data = \"invalid\"",
        "// Line_Reference 1093: \t_, err = s.ParseResponse(&req, []string{\"id-9e61753d64e928af5a7a341a97f420c9\"})",
        "// Line_Reference 1094: \tassertionBuf := []byte(err.(*InvalidResponseError).Response)",
        "// Line_Reference 1237: \t// Because this permutation contains an unsigned assertion as child of the response",
        "// Line_Reference 1238: \tassert.Check(t, is.Error(err.(*InvalidResponseError).PrivateErr,",
        "// Line_Reference 1239: \t\t\"either the Response or Assertion must be signed\"))",
        "// Line_Reference 1265: \t// Because this permutation contains an unsigned assertion as child of the response",
        "// Line_Reference 1266: \tassert.Check(t, is.Error(err.(*InvalidResponseError).PrivateErr,",
        "// Line_Reference 1267: \t\t\"either the Response or Assertion must be signed\"))",
        "// Line_Reference 1294: \t\t\"cannot validate signature on Response: Missing signature referencing the top-level element\"))",
        "// Line_Reference 1321: \t\t\"cannot validate signature on Response: Missing signature referencing the top-level element\"))",
        "// Line_Reference 1352: \t\t\"cannot validate signature on Response: Signature could not be verified\"))",
        "// Line_Reference 1383: \t\t\"cannot validate signature on Response: Signature could not be verified\"))",
        "// Line_Reference 1414: \t\t\"cannot validate signature on Response: Missing signature referencing the top-level element\"))",
        "// Line_Reference 1752: \t\t\"cannot validate signature on Response: Cert is not valid at this time\"))",
        "// Line_Reference 1772: \t\t\"failed to decrypt response: certificate does not match provided key\"))"
    ]
}
