{
    "cve_id": "CVE-2020-11020",
    "cve_description": "Faye (NPM, RubyGem) versions greater than 0.5.0 and before 1.0.4, 1.1.3 and 1.2.5, has the potential for authentication bypass in the extension system. The vulnerability allows any client to bypass checks put in place by server-side extensions, by appending extra segments to the message channel. It is patched in versions 1.0.4, 1.1.3 and 1.2.5.",
    "cve_publish_date": "2020-04-29",
    "cwe_id": "CWE-287",
    "cwe_name": "Improper Authentication",
    "cwe_description": "When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.",
    "commit_message": "Strict meta channel recognition in server\n\nThis addresses a security vulnerability affecting user-added extensions\nthat implement access control for channels. These extensions typically\nwork by checking incoming messages whose channel is `/meta/subscribe`\nand then performing some authentication routine before allowing the\nmessage through.\n\nHowever, the Server parses channels in a way that means any channel\nnamespaced under `/meta/subscribe` will also work as a subscription\nrequest. For example if the client sends a message to the channel\n`/meta/subscribe/x`, that will bypass most authentication extensions but\nwill still be interpreted by the server as a subscription request, and\nthe client will be subscribed to the requested channel. The client has\nthus bypassed the user's access control policy.\n\nHere we prevent this by using a strict equality check; only messages\nwhose channel is exactly `/meta/subscribe` will be interpreted as\nsubscription requests. The same pattern is applied to all other meta\nchannels.",
    "type_of_change": "Modification",
    "filename_of_changes": "server.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "14",
    "number_of_lines_deleted_vulnerable_to_cve": "4",
    "vulnerable_lines": [
        "// Line_Reference 16:   META_METHODS: ['handshake', 'connect', 'disconnect', 'subscribe', 'unsubscribe'],",
        "// Line_Reference 17: ",
        "// Line_Reference 123:     var method = Channel.parse(message.channel)[1],",
        "// Line_Reference 126:     if (array.indexOf(this.META_METHODS, method) < 0) {"
    ]
}
