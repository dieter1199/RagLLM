{
    "cve_id": "CVE-2021-3692",
    "cve_description": "yii2 is vulnerable to Use of Predictable Algorithm in Random Number Generator",
    "cve_publish_date": "2021-08-10",
    "cwe_id": "CWE-330",
    "cwe_name": "Use of Insufficiently Random Values",
    "cwe_description": "The product uses insufficiently random numbers or values in a security context that depends on unpredictable numbers.",
    "commit_message": "Fix #18817: Use `paragonie/random_compat` for random bytes and int generation",
    "type_of_change": "Modification",
    "filename_of_changes": "SecurityTest.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "2",
    "number_of_lines_deleted_vulnerable_to_cve": "189",
    "vulnerable_lines": [
        "// Line_Reference 8: namespace yii\\base {",
        "// Line_Reference 9: ",
        "// Line_Reference 10:     /**",
        "// Line_Reference 11:      * emulate availability of functions, to test different branches of Security class",
        "// Line_Reference 12:      * where different execution paths are chosen based on calling function_exists.",
        "// Line_Reference 13:      *",
        "// Line_Reference 14:      * This function overrides function_exists from the root namespace in yii\\base.",
        "// Line_Reference 15:      * @param string $name",
        "// Line_Reference 16:      */",
        "// Line_Reference 17:     function function_exists($name)",
        "// Line_Reference 18:     {",
        "// Line_Reference 19:         if (isset(\\yiiunit\\framework\\base\\SecurityTest::$functions[$name])) {",
        "// Line_Reference 20:             return \\yiiunit\\framework\\base\\SecurityTest::$functions[$name];",
        "// Line_Reference 21:         }",
        "// Line_Reference 22: ",
        "// Line_Reference 23:         return \\function_exists($name);",
        "// Line_Reference 24:     }",
        "// Line_Reference 25:     /**",
        "// Line_Reference 26:      * Emulate chunked reading of fread(), to test different branches of Security class",
        "// Line_Reference 27:      * where different execution paths are chosen based on the return value of fopen/fread.",
        "// Line_Reference 28:      *",
        "// Line_Reference 29:      * This function overrides fopen and fread from the root namespace in yii\\base.",
        "// Line_Reference 30:      * @param string $filename",
        "// Line_Reference 31:      * @param mixed $mode",
        "// Line_Reference 32:      */",
        "// Line_Reference 33:     function fopen($filename, $mode)",
        "// Line_Reference 34:     {",
        "// Line_Reference 35:         if (\\yiiunit\\framework\\base\\SecurityTest::$fopen !== null) {",
        "// Line_Reference 36:             return \\yiiunit\\framework\\base\\SecurityTest::$fopen;",
        "// Line_Reference 37:         }",
        "// Line_Reference 38: ",
        "// Line_Reference 39:         return \\fopen($filename, $mode);",
        "// Line_Reference 40:     }",
        "// Line_Reference 41:     function fread($handle, $length)",
        "// Line_Reference 42:     {",
        "// Line_Reference 43:         if (\\yiiunit\\framework\\base\\SecurityTest::$fread !== null) {",
        "// Line_Reference 44:             return \\yiiunit\\framework\\base\\SecurityTest::$fread;",
        "// Line_Reference 45:         }",
        "// Line_Reference 46:         if (\\yiiunit\\framework\\base\\SecurityTest::$fopen !== null) {",
        "// Line_Reference 47:             return $length < 8 ? \\str_repeat('s', $length) : 'test1234';",
        "// Line_Reference 48:         }",
        "// Line_Reference 49: ",
        "// Line_Reference 50:         return \\fread($handle, $length);",
        "// Line_Reference 51:     }",
        "// Line_Reference 52: } // closing namespace yii\\base;",
        "// Line_Reference 53: ",
        "// Line_Reference 54: namespace yiiunit\\framework\\base {",
        "// Line_Reference 66:     /**",
        "// Line_Reference 67:      * @var array set of functions for which a fake return value for `function_exists()` is provided.",
        "// Line_Reference 68:      */",
        "// Line_Reference 69:     public static $functions = [];",
        "// Line_Reference 70:     /**",
        "// Line_Reference 71:      * @var resource|false|null fake return value for fopen() in \\yii\\base namespace. Normal behavior if this is null.",
        "// Line_Reference 72:      */",
        "// Line_Reference 73:     public static $fopen;",
        "// Line_Reference 74:     public static $fread;",
        "// Line_Reference 75: ",
        "// Line_Reference 83:         static::$functions = [];",
        "// Line_Reference 84:         static::$fopen = null;",
        "// Line_Reference 85:         static::$fread = null;",
        "// Line_Reference 91:     protected function tearDown()",
        "// Line_Reference 92:     {",
        "// Line_Reference 93:         static::$functions = [];",
        "// Line_Reference 94:         static::$fopen = null;",
        "// Line_Reference 95:         static::$fread = null;",
        "// Line_Reference 96:         parent::tearDown();",
        "// Line_Reference 97:     }",
        "// Line_Reference 98: ",
        "// Line_Reference 99:     private function isWindows()",
        "// Line_Reference 100:     {",
        "// Line_Reference 101:         return DIRECTORY_SEPARATOR !== '/';",
        "// Line_Reference 102:     }",
        "// Line_Reference 103: ",
        "// Line_Reference 896:     /**",
        "// Line_Reference 897:      * Test the case where opening /dev/urandom fails.",
        "// Line_Reference 898:      */",
        "// Line_Reference 899:     public function testRandomKeyNoOptions()",
        "// Line_Reference 900:     {",
        "// Line_Reference 901:         static::$functions = ['random_bytes' => false, 'openssl_random_pseudo_bytes' => false, 'mcrypt_create_iv' => false];",
        "// Line_Reference 902:         static::$fopen = false;",
        "// Line_Reference 903:         $this->expectException('yii\\base\\Exception');",
        "// Line_Reference 904:         $this->expectExceptionMessage('Unable to generate a random key');",
        "// Line_Reference 905: ",
        "// Line_Reference 906:         $this->security->generateRandomKey(42);",
        "// Line_Reference 907:     }",
        "// Line_Reference 908: ",
        "// Line_Reference 909:     /**",
        "// Line_Reference 910:      * Test the case where reading from /dev/urandom fails.",
        "// Line_Reference 911:      */",
        "// Line_Reference 912:     public function testRandomKeyFreadFailure()",
        "// Line_Reference 913:     {",
        "// Line_Reference 914:         static::$functions = ['random_bytes' => false, 'openssl_random_pseudo_bytes' => false, 'mcrypt_create_iv' => false];",
        "// Line_Reference 915:         static::$fread = false;",
        "// Line_Reference 916:         $this->expectException('yii\\base\\Exception');",
        "// Line_Reference 917:         $this->expectExceptionMessage('Unable to generate a random key');",
        "// Line_Reference 918: ",
        "// Line_Reference 919:         $this->security->generateRandomKey(42);",
        "// Line_Reference 920:     }",
        "// Line_Reference 921: ",
        "// Line_Reference 922:     /**",
        "// Line_Reference 923:      * returns a set of different combinations of functions available.",
        "// Line_Reference 924:      */",
        "// Line_Reference 925:     public function randomKeyVariants()",
        "// Line_Reference 927:         return [",
        "// Line_Reference 928:             [['random_bytes' => true,  'openssl_random_pseudo_bytes' => true,  'mcrypt_create_iv' => true]],",
        "// Line_Reference 929:             [['random_bytes' => true,  'openssl_random_pseudo_bytes' => true,  'mcrypt_create_iv' => false]],",
        "// Line_Reference 930:             [['random_bytes' => true,  'openssl_random_pseudo_bytes' => false, 'mcrypt_create_iv' => true]],",
        "// Line_Reference 931:             [['random_bytes' => true,  'openssl_random_pseudo_bytes' => false, 'mcrypt_create_iv' => false]],",
        "// Line_Reference 932:             [['random_bytes' => false, 'openssl_random_pseudo_bytes' => true,  'mcrypt_create_iv' => true]],",
        "// Line_Reference 933:             [['random_bytes' => false, 'openssl_random_pseudo_bytes' => true,  'mcrypt_create_iv' => false]],",
        "// Line_Reference 934:             [['random_bytes' => false, 'openssl_random_pseudo_bytes' => false, 'mcrypt_create_iv' => true]],",
        "// Line_Reference 935:             [['random_bytes' => false, 'openssl_random_pseudo_bytes' => false, 'mcrypt_create_iv' => false]],",
        "// Line_Reference 936:         ];",
        "// Line_Reference 937:     }",
        "// Line_Reference 938: ",
        "// Line_Reference 939:     /**",
        "// Line_Reference 940:      * @dataProvider randomKeyVariants",
        "// Line_Reference 941:      * @param array $functions",
        "// Line_Reference 942:      */",
        "// Line_Reference 943:     public function testGenerateRandomKey($functions)",
        "// Line_Reference 944:     {",
        "// Line_Reference 945:         foreach ($functions as $fun => $available) {",
        "// Line_Reference 946:             if ($available && !\\function_exists($fun)) {",
        "// Line_Reference 947:                 $this->markTestSkipped(\"Can not test generateRandomKey() branch that includes $fun, because it is not available on your system.\");",
        "// Line_Reference 948:             }",
        "// Line_Reference 949:         }",
        "// Line_Reference 950:         // there is no /dev/urandom on windows so we expect this to fail",
        "// Line_Reference 951:         if ($this->isWindows() && $functions['random_bytes'] === false && $functions['openssl_random_pseudo_bytes'] === false && $functions['mcrypt_create_iv'] === false) {",
        "// Line_Reference 952:             $this->expectException('yii\\base\\Exception');",
        "// Line_Reference 953:             $this->expectExceptionMessage('Unable to generate a random key');",
        "// Line_Reference 954:         }",
        "// Line_Reference 955:         // Function mcrypt_create_iv() is deprecated since PHP 7.1",
        "// Line_Reference 956:         if (version_compare(PHP_VERSION, '7.1.0alpha', '>=') && $functions['random_bytes'] === false && $functions['mcrypt_create_iv'] === true) {",
        "// Line_Reference 957:             if ($functions['openssl_random_pseudo_bytes'] === false) {",
        "// Line_Reference 958:                 $this->markTestSkipped('Function mcrypt_create_iv() is deprecated as of PHP 7.1');",
        "// Line_Reference 959:             } elseif (!$this->security->shouldUseLibreSSL() && !$this->isWindows()) {",
        "// Line_Reference 960:                 $this->markTestSkipped('Function openssl_random_pseudo_bytes need LibreSSL version >=2.1.5 or Windows system on server');",
        "// Line_Reference 961:             }",
        "// Line_Reference 962:         }",
        "// Line_Reference 963: ",
        "// Line_Reference 964:         static::$functions = $functions;",
        "// Line_Reference 965: ",
        "// Line_Reference 988: ",
        "// Line_Reference 989:         // force /dev/urandom reading loop to deal with chunked data",
        "// Line_Reference 990:         // the above test may have read everything in one run.",
        "// Line_Reference 991:         // not sure if this can happen in real life but if it does",
        "// Line_Reference 992:         // we should be prepared",
        "// Line_Reference 993:         static::$fopen = fopen('php://memory', 'rwb');",
        "// Line_Reference 994:         $length = 1024 * 1024;",
        "// Line_Reference 995:         $key1 = $this->security->generateRandomKey($length);",
        "// Line_Reference 996:         $this->assertInternalType('string', $key1);",
        "// Line_Reference 997:         $this->assertEquals($length, strlen($key1));",
        "// Line_Reference 1013:     public function testGenerateRandomKeySpeed()",
        "// Line_Reference 1014:     {",
        "// Line_Reference 1015:         self::markTestSkipped('Comment markTestSkipped in testGenerateRandomKeySpeed() in order to get RNG benchmark.');",
        "// Line_Reference 1016:         $tests = [",
        "// Line_Reference 1017:             \"function_exists('random_bytes')\",",
        "// Line_Reference 1018:             \"defined('OPENSSL_VERSION_TEXT') ? OPENSSL_VERSION_TEXT : null\",",
        "// Line_Reference 1019:             'PHP_VERSION_ID',",
        "// Line_Reference 1020:             'PHP_OS',",
        "// Line_Reference 1021:             \"function_exists('mcrypt_create_iv') ? bin2hex(mcrypt_create_iv(4, MCRYPT_DEV_URANDOM)) : null\",",
        "// Line_Reference 1022:             'DIRECTORY_SEPARATOR',",
        "// Line_Reference 1023:             \"ini_get('open_basedir')\",",
        "// Line_Reference 1024:         ];",
        "// Line_Reference 1025:         if ($this->isWindows()) {",
        "// Line_Reference 1026:             $tests[] = \"sprintf('%o', lstat(PHP_OS === 'FreeBSD' ? '/dev/random' : '/dev/urandom')['mode'] & 0170000)\";",
        "// Line_Reference 1027:             $tests[] = \"bin2hex(file_get_contents(PHP_OS === 'FreeBSD' ? '/dev/random' : '/dev/urandom', false, null, 0, 8))\";",
        "// Line_Reference 1028:         }",
        "// Line_Reference 1029:         foreach ($tests as $i => $test) {",
        "// Line_Reference 1030:             $result = eval('return ' . $test . ';');",
        "// Line_Reference 1031:             fwrite(STDERR, sprintf(\"%2d %s ==> %s\\n\", $i + 1, $test, var_export($result, true)));",
        "// Line_Reference 1032:         }",
        "// Line_Reference 1033: ",
        "// Line_Reference 1034:         foreach ([16, 2000, 262144] as $block) {",
        "// Line_Reference 1035:             $security = new Security();",
        "// Line_Reference 1036:             foreach (range(1, 10) as $nth) {",
        "// Line_Reference 1037:                 $this->randTime($security, 1, $block, \"Call $nth\");",
        "// Line_Reference 1038:             }",
        "// Line_Reference 1039:             unset($security);",
        "// Line_Reference 1040:         }",
        "// Line_Reference 1041: ",
        "// Line_Reference 1042:         $security = new Security();",
        "// Line_Reference 1043:         $this->randTime($security, 10000, 16, 'Rate test');",
        "// Line_Reference 1044: ",
        "// Line_Reference 1045:         $security = new Security();",
        "// Line_Reference 1046:         $this->randTime($security, 10000, 5000, 'Rate test');",
        "// Line_Reference 1047:     }",
        "// Line_Reference 1048: ",
        "// Line_Reference 1308: } // closing namespace yiiunit\\framework\\base;"
    ]
}
