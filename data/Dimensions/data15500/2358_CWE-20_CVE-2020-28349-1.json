{
    "cve_id": "CVE-2020-28349",
    "cve_description": "An inaccurate frame deduplication process in ChirpStack Network Server 3.9.0 allows a malicious gateway to perform uplink Denial of Service via malformed frequency attributes in CollectAndCallOnceCollect in internal/uplink/collect.go. NOTE: the vendor's position is that there are no \"guarantees that allowing untrusted LoRa gateways to the network should still result in a secure network.",
    "cve_publish_date": "2020-11-09",
    "cwe_id": "CWE-20",
    "cwe_name": "Improper Input Validation",
    "cwe_description": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.",
    "commit_message": "Improve uplink de-duplication.\n\nThis removes the de-duplication at the MQTT backend. Some MQTT brokers\nprovide shared subscription options in which case this additional\nde-duplication is not needed.\n\nFor MQTT brokers that do not support shared subscriptions, the\ncollectAndCallOnce function will still filter out duplicated uplinks.\n\nBy adding the TXInfo object (hex encoded) to the de-duplication key,\nuplink messages received on multiple channels will be handled\nseparately as they will result in different de-duplication keys.",
    "type_of_change": "Modification",
    "filename_of_changes": "backend.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "0",
    "number_of_lines_deleted_vulnerable_to_cve": "15",
    "vulnerable_lines": [
        "// Line_Reference 8: \t\"encoding/hex\"",
        "// Line_Reference 252: \t// Since with MQTT all subscribers will receive the uplink messages sent",
        "// Line_Reference 253: \t// by all the gateways, the first instance receiving the message must lock it,",
        "// Line_Reference 254: \t// so that other instances can ignore the same message (from the same gw).",
        "// Line_Reference 255: \tkey := fmt.Sprintf(\"lora:ns:uplink:lock:%s:%d:%d:%d:%s\", gatewayID, uplinkFrame.TxInfo.Frequency, uplinkFrame.RxInfo.Board, uplinkFrame.RxInfo.Antenna, hex.EncodeToString(uplinkFrame.PhyPayload))",
        "// Line_Reference 256: \tif locked, err := b.isLocked(key); err != nil || locked {",
        "// Line_Reference 257: \t\tif err != nil {",
        "// Line_Reference 258: \t\t\tlog.WithError(err).WithFields(log.Fields{",
        "// Line_Reference 259: \t\t\t\t\"uplink_id\": uplinkID,",
        "// Line_Reference 260: \t\t\t\t\"key\":       key,",
        "// Line_Reference 261: \t\t\t}).Error(\"gateway/mqtt: acquire lock error\")",
        "// Line_Reference 262: \t\t}",
        "// Line_Reference 263: \t\treturn",
        "// Line_Reference 264: \t}",
        "// Line_Reference 265: "
    ]
}
