{
    "cve_id": "CVE-2022-39309",
    "cve_description": "GoCD is a continuous delivery server. GoCD helps you automate and streamline the build-test-release cycle for continuous delivery of your product. GoCD versions prior to 21.1.0 leak the symmetric key used to encrypt/decrypt any secure variables/secrets in GoCD configuration to authenticated agents. A malicious/compromised agent may then expose that key from memory, and potentially allow an attacker the ability to decrypt secrets intended for other agents/environments if they also are able to obtain access to encrypted configuration values from the GoCD server. This issue is fixed in GoCD version 21.1.0. There are currently no known workarounds.",
    "cve_publish_date": "2022-10-14",
    "cwe_id": "CWE-668",
    "cwe_name": "Exposure of Resource to Wrong Sphere",
    "cwe_description": "The product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource.",
    "commit_message": "SCMMaterial changes #000\n\n* SCMMaterial unlike SCMMaterialConfig objects are used for polling,\n  they do not need to encrypt the password. Hence removing the\n  encryptedPassword attribute.",
    "type_of_change": "Modification",
    "filename_of_changes": "P4MaterialTest.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "0",
    "number_of_lines_deleted_vulnerable_to_cve": "25",
    "vulnerable_lines": [
        "// Line_Reference 100:     @Test",
        "// Line_Reference 101:     void shouldEncryptP4Password() throws Exception {",
        "// Line_Reference 102:         GoCipher mockGoCipher = mock(GoCipher.class);",
        "// Line_Reference 103:         when(mockGoCipher.encrypt(\"password\")).thenReturn(\"encrypted\");",
        "// Line_Reference 104: ",
        "// Line_Reference 105:         P4Material p4Material = new P4Material(\"example.com:1818\", \"view\", mockGoCipher);",
        "// Line_Reference 106:         p4Material.setPassword(\"password\");",
        "// Line_Reference 107:         p4Material.ensureEncrypted();",
        "// Line_Reference 108: ",
        "// Line_Reference 109:         assertThat(p4Material.getEncryptedPassword()).isEqualTo(\"encrypted\");",
        "// Line_Reference 110:         assertThat(p4Material.getPassword()).isNull();",
        "// Line_Reference 111:     }",
        "// Line_Reference 112: ",
        "// Line_Reference 113:     @Test",
        "// Line_Reference 114:     void shouldDecryptP4Password() throws Exception {",
        "// Line_Reference 115:         GoCipher mockGoCipher = mock(GoCipher.class);",
        "// Line_Reference 116:         when(mockGoCipher.decrypt(\"encrypted\")).thenReturn(\"password\");",
        "// Line_Reference 117: ",
        "// Line_Reference 118:         P4Material p4Material = new P4Material(\"example.com:1818\", \"view\", mockGoCipher);",
        "// Line_Reference 119:         ReflectionUtil.setField(p4Material, \"encryptedPassword\", \"encrypted\");",
        "// Line_Reference 120:         p4Material.getPassword();",
        "// Line_Reference 121: ",
        "// Line_Reference 122:         assertThat(p4Material.getPassword()).isEqualTo(\"password\");",
        "// Line_Reference 123:     }",
        "// Line_Reference 124: "
    ]
}
