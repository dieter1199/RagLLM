{
    "cve_id": "CVE-2019-11813",
    "cve_description": "An issue was discovered in app/View/Elements/Events/View/value_field.ctp in MISP before 2.4.107. There is persistent XSS via link type attributes with javascript:// links.",
    "cve_publish_date": "2019-05-08",
    "cwe_id": "CWE-79",
    "cwe_name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
    "cwe_description": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
    "commit_message": "fix: [security] Fix persistent xss via link type attributes containing javascript:// links\n\n- low impact as it requires user interaction to trigger\n\n- as reported by Jo√£o Lucas Melo Brasio from Elytron Security S.A. (https://elytronsecurity.com)",
    "type_of_change": "Modification",
    "filename_of_changes": "value_field.ctp",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "53",
    "number_of_lines_deleted_vulnerable_to_cve": "51",
    "vulnerable_lines": [
        "// Line_Reference 2:   $sigDisplay = $object['value'];",
        "// Line_Reference 3:   if ('attachment' == $object['type'] || 'malware-sample' == $object['type'] ) {",
        "// Line_Reference 4:     if ($object['type'] == 'attachment' && isset($object['image'])) {",
        "// Line_Reference 5:         if (extension_loaded('gd')) {",
        "// Line_Reference 6:             $img = '<it class=\"fa fa-spin fa-spinner\" style=\"font-size: large; left: 50%; top: 50%;\"></it>';",
        "// Line_Reference 7:             $img .= '<img class=\"screenshot screenshot-collapsed useCursorPointer img-rounded hidden\" src=\"' . $baseurl . '/attributes/viewPicture/' . h($object['id']) . '/1' . '\" title=\"' . h($object['value']) . '\" onload=\"$(this).show(200); $(this).parent().find(\\'.fa-spinner\\').remove();\"/>';",
        "// Line_Reference 8:             echo $img;",
        "// Line_Reference 10:             $extension = explode('.', $object['value']);",
        "// Line_Reference 11:             $extension = end($extension);",
        "// Line_Reference 12:             $uri = 'data:image/' . strtolower(h($extension)) . ';base64,' . h($object['image']);",
        "// Line_Reference 13:             echo '<img class=\"screenshot screenshot-collapsed useCursorPointer\" src=\"' . $uri . '\" title=\"' . h($object['value']) . '\" />';",
        "// Line_Reference 16:       $filenameHash = explode('|', h($object['value']));",
        "// Line_Reference 17:       if (strrpos($filenameHash[0], '\\\\')) {",
        "// Line_Reference 18:         $filepath = substr($filenameHash[0], 0, strrpos($filenameHash[0], '\\\\'));",
        "// Line_Reference 19:         $filename = substr($filenameHash[0], strrpos($filenameHash[0], '\\\\'));",
        "// Line_Reference 20:         echo h($filepath);",
        "// Line_Reference 21:         echo '<a href=\"' . $baseurl . '/attributes/download/' . h($object['id']) . '\" class=\"' . $linkClass . '\">' . h($filename) . '</a>';",
        "// Line_Reference 22:       } else {",
        "// Line_Reference 23:         echo '<a href=\"' . $baseurl . '/attributes/download/' . h($object['id']) . '\" class=\"' . $linkClass . '\">' . h($filenameHash[0]) . '</a>';",
        "// Line_Reference 24:       }",
        "// Line_Reference 25:       if (isset($filenameHash[1])) echo '<br />' . $filenameHash[1];",
        "// Line_Reference 27:   } else if (strpos($object['type'], '|') !== false) {",
        "// Line_Reference 28:     $separator = in_array($object['type'], array('ip-dst|port', 'ip-src|port')) ? ':' : '<br />';",
        "// Line_Reference 29:     $value_pieces = explode('|', $object['value']);",
        "// Line_Reference 30:     foreach ($value_pieces as $k => $v) {",
        "// Line_Reference 31:       $value_pieces[$k] = h($v);",
        "// Line_Reference 32:     }",
        "// Line_Reference 33:     $object['value'] = implode($separator, $value_pieces);",
        "// Line_Reference 34:     echo ($object['value']);",
        "// Line_Reference 35:   } else if ('vulnerability' == $object['type']) {",
        "// Line_Reference 36:     $cveUrl = (is_null(Configure::read('MISP.cveurl'))) ? \"http://www.google.com/search?q=\" : Configure::read('MISP.cveurl');",
        "// Line_Reference 37:     echo $this->Html->link($sigDisplay, $cveUrl . $sigDisplay, array('target' => '_blank', 'class' => $linkClass));",
        "// Line_Reference 38:   } else if ('link' == $object['type']) {",
        "// Line_Reference 39:     echo $this->Html->link($sigDisplay, $sigDisplay, array('class' => $linkClass));",
        "// Line_Reference 40:   } else if ('cortex' == $object['type']) {",
        "// Line_Reference 41:     echo '<div class=\"cortex-json\" data-cortex-json=\"' . h($object['value']) . '\">Cortex object</div>';",
        "// Line_Reference 42:   } else if ('text' == $object['type']) {",
        "// Line_Reference 43:     if (($object['category'] == 'Internal reference' || $object['category'] == 'External analysis') && preg_match('/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}/i', $object['value'])) {",
        "// Line_Reference 44:       echo '<a href=\"' . $baseurl . '/events/view/' . h($object['value']) . '\" class=\"' . $linkClass . '\">' . h($object['value']) . '</a>';",
        "// Line_Reference 45:     } else {",
        "// Line_Reference 46:       $sigDisplay = str_replace(\"\\r\", '', h($sigDisplay));",
        "// Line_Reference 47:       $sigDisplay = str_replace(\" \", '&nbsp;', $sigDisplay);",
        "// Line_Reference 48:       echo $sigDisplay;",
        "// Line_Reference 50:   } else if ('hex' == $object['type']) {",
        "// Line_Reference 51:     $sigDisplay = str_replace(\"\\r\", '', $sigDisplay);",
        "// Line_Reference 52:     echo '<span class=\"hex-value\" title=\"' . __('Hexadecimal representation') . '\">' . h($sigDisplay) . '</span>&nbsp;<span role=\"button\" tabindex=\"0\" aria-label=\"' . __('Switch to binary representation') . '\" class=\"icon-repeat hex-value-convert useCursorPointer\" title=\"' . __('Switch to binary representation') . '\"></span>';",
        "// Line_Reference 53:   } else {",
        "// Line_Reference 54:     $sigDisplay = str_replace(\"\\r\", '', $sigDisplay);",
        "// Line_Reference 55:     echo h($sigDisplay);",
        "// Line_Reference 56:   }",
        "// Line_Reference 57:   if (isset($object['validationIssue'])) echo ' <span class=\"fa fa-exclamation-triangle\" title=\"' . __('Warning, this doesn\\'t seem to be a legitimate ') . strtoupper(h($object['type'])) . __(' value') . '\">&nbsp;</span>';"
    ]
}
