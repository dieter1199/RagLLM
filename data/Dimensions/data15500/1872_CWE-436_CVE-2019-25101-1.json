{
    "cve_id": "CVE-2019-25101",
    "cve_description": "A vulnerability classified as critical has been found in OnShift TurboGears 1.0.11.10. This affects an unknown part of the file turbogears/controllers.py of the component HTTP Header Handler. The manipulation leads to http response splitting. It is possible to initiate the attack remotely. Upgrading to version 1.0.11.11 is able to address this issue. The patch is named f68bbaba47f4474e1da553aa51564a73e1d92a84. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-220059.",
    "cve_publish_date": "2023-02-04",
    "cwe_id": "CWE-436",
    "cwe_name": "Interpretation Conflict",
    "cwe_description": "Product A handles inputs or steps differently than Product B, which causes A to perform incorrect actions based on its perception of B's state.",
    "commit_message": "SWAT-20: Remove header injection vulnerability on redirect\n\nThere was a Header Injection issue (remember HTTP is a text protocol and new\nlines matter).  Basically you could inject a header or even the text with\ncertain parameters.  Typically, this failed on redirects because of the location\nheader.  We now throw an exception if the redirect url includes a new line or\ncarriage return.  Neither of these are valid (though you can presumably escape\nthem).",
    "type_of_change": "Modification",
    "filename_of_changes": "controllers.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "64",
    "number_of_lines_deleted_vulnerable_to_cve": "55",
    "vulnerable_lines": [
        "// Line_Reference 328:     @keyparam exclude_from_memory_profiling allows to exclude individual end points from memory profiling. Can be",
        "// Line_Reference 605: def get_server_name():",
        "// Line_Reference 606:     \"\"\"Return name of the server this application runs on.",
        "// Line_Reference 607: ",
        "// Line_Reference 608:     Respects 'Host' and 'X-Forwarded-Host' header.",
        "// Line_Reference 609: ",
        "// Line_Reference 610:     See the docstring of the 'absolute_url' function for more information.",
        "// Line_Reference 611: ",
        "// Line_Reference 612:     \"\"\"",
        "// Line_Reference 613:     get = config.get",
        "// Line_Reference 614:     h = request.headers",
        "// Line_Reference 615:     host = get('tg.url_domain') or h.get('X-Forwarded-Host', h.get('Host'))",
        "// Line_Reference 616:     if not host:",
        "// Line_Reference 617:         host = '%s:%s' % (get('server.socket_host', 'localhost'),",
        "// Line_Reference 618:             get('server.socket_port', 8080))",
        "// Line_Reference 619:     return host",
        "// Line_Reference 620: ",
        "// Line_Reference 621: ",
        "// Line_Reference 622: def absolute_url(tgpath='/', params=None, **kw):",
        "// Line_Reference 623:     \"\"\"Return absolute URL (including schema and host to this server).",
        "// Line_Reference 624: ",
        "// Line_Reference 625:     Tries to account for 'Host' header and reverse proxying",
        "// Line_Reference 626:     ('X-Forwarded-Host').",
        "// Line_Reference 627: ",
        "// Line_Reference 628:     The host name is determined this way:",
        "// Line_Reference 629: ",
        "// Line_Reference 630:     * If the config setting 'tg.url_domain' is set and non-null, use this value.",
        "// Line_Reference 631:     * Else, if the 'base_url_filter.use_x_forwarded_host' config setting is",
        "// Line_Reference 632:       True, use the value from the 'Host' or 'X-Forwarded-Host' request header.",
        "// Line_Reference 633:     * Else, if config setting 'base_url_filter.on' is True and",
        "// Line_Reference 634:       'base_url_filter.base_url' is non-null, use its value for the host AND",
        "// Line_Reference 635:       scheme part of the URL.",
        "// Line_Reference 636:     * As a last fallback, use the value of 'server.socket_host' and",
        "// Line_Reference 637:       'server.socket_port' config settings (defaults to 'localhost:8080').",
        "// Line_Reference 638: ",
        "// Line_Reference 639:     The URL scheme ('http' or 'http') used is determined in the following way:",
        "// Line_Reference 640: ",
        "// Line_Reference 641:     * If 'base_url_filter.base_url' is used, use the scheme from this URL.",
        "// Line_Reference 642:     * If there is a 'X-Use-SSL' request header, use 'https'.",
        "// Line_Reference 643:     * Else, if the config setting 'tg.url_scheme' is set, use its value.",
        "// Line_Reference 644:     * Else, use the value of 'cherrypy.request.scheme'.",
        "// Line_Reference 645: ",
        "// Line_Reference 646:     \"\"\"",
        "// Line_Reference 647:     get = config.get",
        "// Line_Reference 648:     use_xfh = get('base_url_filter.use_x_forwarded_host', False)",
        "// Line_Reference 649:     if request.headers.get('X-Use-SSL'):",
        "// Line_Reference 650:         scheme = 'https'",
        "// Line_Reference 651:     else:",
        "// Line_Reference 652:         scheme = get('tg.url_scheme')",
        "// Line_Reference 653:     if not scheme:",
        "// Line_Reference 654:         scheme = request.scheme",
        "// Line_Reference 655:     base_url = '%s://%s' % (scheme, get_server_name())",
        "// Line_Reference 656:     if get('base_url_filter.on', False) and not use_xfh:",
        "// Line_Reference 657:         base_url = get('base_url_filter.base_url').rstrip('/')",
        "// Line_Reference 658:     return '%s%s' % (base_url, url(tgpath, params, **kw))"
    ]
}
