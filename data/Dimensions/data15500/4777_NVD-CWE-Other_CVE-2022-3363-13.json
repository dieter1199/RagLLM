{
    "cve_id": "CVE-2022-3363",
    "cve_description": "Business Logic Errors in GitHub repository ikus060/rdiffweb prior to 2.5.0a7.",
    "cve_publish_date": "2022-10-26",
    "cwe_id": "NVD-CWE-Other",
    "cwe_name": "Other",
    "cwe_description": "NVD is only using a subset of CWE for mapping instead of the entire CWE, and the weakness type is not covered by that subset.",
    "commit_message": "Send email notification when enabling or disabling MFA",
    "type_of_change": "Modification",
    "filename_of_changes": "test_page_prefs_mfa.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "37",
    "number_of_lines_deleted_vulnerable_to_cve": "33",
    "vulnerable_lines": [
        "// Line_Reference 18: from unittest.mock import MagicMock",
        "// Line_Reference 46:         self.listener = MagicMock()",
        "// Line_Reference 47:         cherrypy.engine.subscribe('queue_mail', self.listener.queue_email, priority=50)",
        "// Line_Reference 48:         try:",
        "// Line_Reference 49:             self.getPage(\"/mfa/\")",
        "// Line_Reference 50:             self.assertStatus(200)",
        "// Line_Reference 51:             self.assertInBody(\"A new verification code has been sent to your email.\")",
        "// Line_Reference 52:             # Extract code from email between <strong> and </strong>",
        "// Line_Reference 53:             self.listener.queue_email.assert_called_once()",
        "// Line_Reference 54:             message = self.listener.queue_email.call_args[1]['message']",
        "// Line_Reference 55:             code = message.split('<strong>', 1)[1].split('</strong>')[0]",
        "// Line_Reference 56:             # Login to MFA",
        "// Line_Reference 57:             self.getPage(\"/mfa/\", method='POST', body={'code': code, 'submit': '1'})",
        "// Line_Reference 58:             self.assertStatus(303)",
        "// Line_Reference 59:         finally:",
        "// Line_Reference 60:             cherrypy.engine.unsubscribe('queue_mail', self.listener.queue_email)",
        "// Line_Reference 64:         # Register an email listeer to capture email send",
        "// Line_Reference 65:         self.listener = MagicMock()",
        "// Line_Reference 66:         cherrypy.engine.subscribe('queue_mail', self.listener.queue_email, priority=50)",
        "// Line_Reference 68:         try:",
        "// Line_Reference 69:             self.getPage(\"/prefs/mfa\", method='POST', body={action: '1'})",
        "// Line_Reference 70:             self.assertStatus(200)",
        "// Line_Reference 71:             self.assertInBody(\"A new verification code has been sent to your email.\")",
        "// Line_Reference 72:             # Extract code from email between <strong> and </strong>",
        "// Line_Reference 73:             self.listener.queue_email.assert_called_once()",
        "// Line_Reference 74:             message = self.listener.queue_email.call_args[1]['message']",
        "// Line_Reference 75:             return message.split('<strong>', 1)[1].split('</strong>')[0]",
        "// Line_Reference 76:         finally:",
        "// Line_Reference 77:             cherrypy.engine.unsubscribe('queue_mail', self.listener.queue_email)",
        "// Line_Reference 87:             ('enable_mfa', UserObject.DISABLED_MFA, UserObject.ENABLED_MFA),",
        "// Line_Reference 88:             ('disable_mfa', UserObject.ENABLED_MFA, UserObject.DISABLED_MFA),",
        "// Line_Reference 91:     def test_with_valid_code(self, action, initial_mfa, expected_mfa):",
        "// Line_Reference 102:         # Then no email get sent"
    ]
}
