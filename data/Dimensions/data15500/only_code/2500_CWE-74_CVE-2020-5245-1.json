import static org.assertj.core.api.Assertions.assertThat;
import javax.annotation.concurrent.NotThreadSafe;
import javax.validation.Validator;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
@BeforeEach @AfterEach
col.addViolation(FAILED+"subclass");
}
col.addViolation(FAILED+"subclass");
}
}
col.addViolation(FAILED + "2");
col.addViolation(FAILED + "3");
public void failingExample() throws Exception {
.containsExactlyInAnyOrder(FAILED_RESULT);
.isEmpty();
public void subClassExample() throws Exception {
.containsExactlyInAnyOrder(
FAILED_RESULT,
FAILED_RESULT+"subclass"
);
.isEmpty();
public void annotatedSubClassExample() throws Exception {
.containsExactlyInAnyOrder(
FAILED_RESULT,
FAILED_RESULT+"subclass"
);
.isEmpty();
public void overridingSubClassExample() throws Exception {
.isEmpty();
.isEmpty();
public void correctExample() throws Exception {
.isEmpty();
.isEmpty();
public void multipleTestingOfSameClass() throws Exception {
.isEmpty();
.isEmpty();
.isEmpty();
public void testDirectContextUsage() throws Exception {
.containsExactlyInAnyOrder(FAILED_RESULT);
.isEmpty();
public void complexExample() throws Exception {
.containsExactlyInAnyOrder(
FAILED_RESULT + "1",
FAILED_RESULT + "2",
FAILED_RESULT + "3"
);
.isEmpty();
.isEmpty();
.containsExactlyInAnyOrder(
new LoggingEvent(
Level.ERROR,
"The method {} is annotated with @SelfValidation but does not have a single parameter of type {}",
InvalidExample.class.getMethod("validateFailAdditionalParameters", ViolationCollector.class, int.class),
ViolationCollector.class
),
new LoggingEvent(
Level.ERROR,
"The method {} is annotated with @SelfValidation but does not return void. It is ignored",
InvalidExample.class.getMethod("validateFailReturn", ViolationCollector.class)
),
new LoggingEvent(
Level.ERROR,
"The method {} is annotated with @SelfValidation but is not public",
InvalidExample.class.getDeclaredMethod("validateFailPrivate", ViolationCollector.class)
)
);
public void giveWarningIfNoValidationMethods() throws Exception {
.isEmpty();
.containsExactlyInAnyOrder(
new LoggingEvent(
Level.WARN,
"The class {} is annotated with @SelfValidating but contains no valid methods that are annotated with @SelfValidation",
NoValidations.class
)
