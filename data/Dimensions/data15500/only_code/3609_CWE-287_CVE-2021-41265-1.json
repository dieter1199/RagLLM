from flask import request
from ..api import BaseApi, safe
from ..const import (
API_SECURITY_ACCESS_TOKEN_KEY,
API_SECURITY_PASSWORD_KEY,
API_SECURITY_PROVIDER_DB,
API_SECURITY_PROVIDER_KEY,
API_SECURITY_PROVIDER_LDAP,
API_SECURITY_REFRESH_KEY,
API_SECURITY_REFRESH_TOKEN_KEY,
API_SECURITY_USERNAME_KEY,
API_SECURITY_VERSION,
)
from ..views import expose
def login(self):
username = request.json.get(API_SECURITY_USERNAME_KEY, None)
password = request.json.get(API_SECURITY_PASSWORD_KEY, None)
provider = request.json.get(API_SECURITY_PROVIDER_KEY, None)
refresh = request.json.get(API_SECURITY_REFRESH_KEY, False)
if not username or not password or not provider:
return self.response_400(message="Missing required parameter")
if provider == API_SECURITY_PROVIDER_DB:
user = self.appbuilder.sm.auth_user_db(username, password)
elif provider == API_SECURITY_PROVIDER_LDAP:
user = self.appbuilder.sm.auth_user_ldap(username, password)
else:
return self.response_400(
message="Provider {} not supported".format(provider)
if refresh:
resp[API_SECURITY_REFRESH_TOKEN_KEY] = create_refresh_token(
identity=user.id
)
def refresh(self):
