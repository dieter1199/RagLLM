var $userID='';
var $validated=FALSE;
function __construct($userid){
$this->browser=(!empty($_SERVER['HTTP_USER_AGENT'])) ? $_SERVER['HTTP_USER_AGENT'] : $_ENV['HTTP_USER_AGENT'];
$this->ip=(!empty($_SERVER['REMOTE_ADDR'])) ? $_SERVER['REMOTE_ADDR'] : getenv('REMOTE_ADDR');
$this->session_id=session_id();
$this->userID=$userid;
function isStaff(){
return FALSE;
return FALSE;
function getSessionId(){
function getIP(){
function getBrowser(){
function refreshSession(){
//nothing to do...clients need to worry about it.
}
return($token);
@list($hash,$expire,$ip)=explode(":",$htoken);
global $cfg;
$token = rawurldecode($htoken);
#check if we got what we expected....
if($token && !strstr($token,":"))
return FALSE;
#get the goodies
list($hash,$expire,$ip)=explode(":",$token);
#Make sure the session hash is valid
if((md5($expire . SESSION_SECRET . $this->userID)!=$hash)){
return FALSE;
}
#is it expired??
if($maxidletime && ((time()-$expire)>$maxidletime)){
return FALSE;
}
if($checkip && strcmp($ip, MD5($this->ip)))
return FALSE;
$this->validated=TRUE;
return TRUE;
return FALSE;
class ClientSession extends EndUser {
function __construct($user) {
parent::__construct($user);
$this->token = &$_SESSION[':token']['client'];
// XXX: Change the key to user-id
$this->session= new UserSession($user->getId());
}
function getSessionUser() {
return $this->user;
}
function isValid(){
global $_SESSION,$cfg;
if(!$this->getId() || $this->session->getSessionId()!=session_id())
return false;
return $this->session->isvalidSession($this->token,$cfg->getClientTimeout(),false)?true:false;
}
function refreshSession($force=false){
global $cfg;
//TODO: separate expire time from hash??
osTicketSession::renewCookie($time, $cfg->getClientSessionTimeout());
function getIP(){
class StaffSession extends Staff {
var $session;
var $token;
if ($staff = parent::lookup($var)) {
$staff->token = &$_SESSION[':token']['staff'];
$staff->session= new UserSession($staff->getId());
if (!isset($_SESSION['_auth']['staff']['2fa']))
return false;
return true;
}
function isValid(){
global $cfg;
if(!$this->getId() || $this->session->getSessionId()!=session_id())
return false;
if ($this->is2FAPending())
return false;
return $this->session->isvalidSession($this->token,$cfg->getStaffTimeout(),$cfg->enableStaffIPBinding())?true:false;
}
function refreshSession($force=false){
global $cfg;
$time = $this->session->getLastUpdate($this->token);
// Deadband session token updates to once / 30-seconds
if (!$force && time() - $time < 30)
return;
$this->token=$this->getSessionToken();
osTicketSession::renewCookie($time, $cfg->getStaffSessionTimeout());
}
function getSession() {
return $this->session;
}
function getSessionToken() {
return $this->session->sessionToken();
function getIP(){
return $this->session->getIP();
