void AverageEvalFloat(TfLiteContext* context, TfLiteNode* node,
TfLitePoolParams* params, OpData* data,
const TfLiteTensor* input, TfLiteTensor* output) {
#define TF_LITE_AVERAGE_POOL(type)                                       \
tflite::PoolParams op_params;                                          \
op_params.stride_height = params->stride_height;                       \
op_params.stride_width = params->stride_width;                         \
op_params.filter_height = params->filter_height;                       \
op_params.filter_width = params->filter_width;                         \
op_params.padding_values.height = data->padding.height;                \
op_params.padding_values.width = data->padding.width;                  \
op_params.float_activation_min = activation_min;                       \
op_params.float_activation_max = activation_max;                       \
type::AveragePool(op_params, GetTensorShape(input),                    \
GetTensorData<float>(input), GetTensorShape(output), \
GetTensorData<float>(output))
void AverageEvalQuantizedUint8(TfLiteContext* context, TfLiteNode* node,
TfLitePoolParams* params, OpData* data,
const TfLiteTensor* input,
TfLiteTensor* output) {
#define TF_LITE_AVERAGE_POOL(type)                                         \
tflite::PoolParams op_params;                                            \
op_params.stride_height = params->stride_height;                         \
op_params.stride_width = params->stride_width;                           \
op_params.filter_height = params->filter_height;                         \
op_params.filter_width = params->filter_width;                           \
op_params.padding_values.height = data->padding.height;                  \
op_params.padding_values.width = data->padding.width;                    \
op_params.quantized_activation_min = activation_min;                     \
op_params.quantized_activation_max = activation_max;                     \
type::AveragePool(op_params, GetTensorShape(input),                      \
GetTensorData<uint8_t>(input), GetTensorShape(output), \
GetTensorData<uint8_t>(output))
void AverageEvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
TfLitePoolParams* params, OpData* data,
const TfLiteTensor* input, TfLiteTensor* output) {
#define TF_LITE_AVERAGE_POOL(type)                                        \
tflite::PoolParams op_params;                                           \
op_params.stride_height = params->stride_height;                        \
op_params.stride_width = params->stride_width;                          \
op_params.filter_height = params->filter_height;                        \
op_params.filter_width = params->filter_width;                          \
op_params.padding_values.height = data->padding.height;                 \
op_params.padding_values.width = data->padding.width;                   \
op_params.quantized_activation_min = activation_min;                    \
op_params.quantized_activation_max = activation_max;                    \
type::AveragePool(op_params, GetTensorShape(input),                     \
GetTensorData<int8_t>(input), GetTensorShape(output), \
GetTensorData<int8_t>(output))
void AverageEvalQuantizedInt16(TfLiteContext* context, TfLiteNode* node,
TfLitePoolParams* params, OpData* data,
const TfLiteTensor* input,
TfLiteTensor* output) {
#define TF_LITE_AVERAGE_POOL(type)                                         \
tflite::PoolParams op_params;                                            \
op_params.stride_height = params->stride_height;                         \
op_params.stride_width = params->stride_width;                           \
op_params.filter_height = params->filter_height;                         \
op_params.filter_width = params->filter_width;                           \
op_params.padding_values.height = data->padding.height;                  \
op_params.padding_values.width = data->padding.width;                    \
op_params.quantized_activation_min = activation_min;                     \
op_params.quantized_activation_max = activation_max;                     \
type::AveragePool(op_params, GetTensorShape(input),                      \
GetTensorData<int16_t>(input), GetTensorShape(output), \
GetTensorData<int16_t>(output))
AverageEvalFloat<kernel_type>(context, node, params, data, input, output);
break;
AverageEvalQuantizedUint8<kernel_type>(context, node, params, data, input,
output);
break;
AverageEvalQuantizedInt8<kernel_type>(context, node, params, data, input,
output);
break;
AverageEvalQuantizedInt16<kernel_type>(context, node, params, data, input,
output);
break;