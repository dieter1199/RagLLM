if err := svc.authz.Authorize(ctx, &fleet.User{}, fleet.ActionRead); err != nil {
if err := svc.authz.Authorize(ctx, &fleet.User{ID: id}, fleet.ActionRead); err != nil {
return nil, err
return svc.ds.UserByID(ctx, id)
if err := svc.authz.Authorize(ctx, &fleet.User{}, fleet.ActionRead); err != nil {
return nil, err
}
return nil, ctxerr.New(ctx, "Cannot edit global role as a team member")
return nil, ctxerr.New(ctx, "Cannot modify teams in that way")
if err := svc.authz.Authorize(ctx, &fleet.User{ID: id}, fleet.ActionWrite); err != nil {
// If the user is of the right global role, then they can modify the teams
if currentUser.GlobalRole != nil && (*currentUser.GlobalRole == fleet.RoleAdmin || *currentUser.GlobalRole == fleet.RoleMaintainer) {
// otherwise, gather the resulting teams
resultingTeams := make(map[uint]string)
resultingTeams[team.ID] = team.Role
// and see which ones were removed or changed from the original
if resultingTeams[team.ID] != team.Role {
// then gather the teams the current user is admin for
// and let's check that the teams that were either removed or changed are also teams this user is an admin of
