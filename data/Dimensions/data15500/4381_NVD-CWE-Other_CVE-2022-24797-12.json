{
    "cve_id": "CVE-2022-24797",
    "cve_description": "Pomerium is an identity-aware access proxy. In distributed service mode, Pomerium's Authenticate service exposes pprof debug and prometheus metrics handlers to untrusted traffic. This can leak potentially sensitive environmental information or lead to limited denial of service conditions. This issue is patched in version v0.17.1 Workarounds: Block access to `/debug` and `/metrics` paths on the authenticate service. This can be done with any L7 proxy, including Pomerium's own proxy service.",
    "cve_publish_date": "2022-03-31",
    "cwe_id": "NVD-CWE-Other",
    "cwe_name": "Other",
    "cwe_description": "NVD is only using a subset of CWE for mapping instead of the entire CWE, and the weakness type is not covered by that subset.",
    "commit_message": "authenticate: fix debug and metrics endpoints (#3212)",
    "type_of_change": "Modification",
    "filename_of_changes": "server.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "59",
    "number_of_lines_deleted_vulnerable_to_cve": "23",
    "vulnerable_lines": [
        "// Line_Reference 53: \tGRPCListener net.Listener",
        "// Line_Reference 54: \tGRPCServer   *grpc.Server",
        "// Line_Reference 55: \tHTTPListener net.Listener",
        "// Line_Reference 56: \tHTTPRouter   *mux.Router",
        "// Line_Reference 57: \tBuilder      *envoyconfig.Builder",
        "// Line_Reference 178: \thsrv := (&http.Server{",
        "// Line_Reference 179: \t\tBaseContext: func(li net.Listener) context.Context {",
        "// Line_Reference 180: \t\t\treturn ctx",
        "// Line_Reference 181: \t\t},",
        "// Line_Reference 182: \t\tHandler: srv.HTTPRouter,",
        "// Line_Reference 183: \t})",
        "// Line_Reference 185: \t// start the HTTP server",
        "// Line_Reference 186: \teg.Go(func() error {",
        "// Line_Reference 187: \t\tlog.Info(ctx).Str(\"addr\", srv.HTTPListener.Addr().String()).Msg(\"starting control-plane HTTP server\")",
        "// Line_Reference 188: \t\treturn hsrv.Serve(srv.HTTPListener)",
        "// Line_Reference 189: \t})",
        "// Line_Reference 191: \t// gracefully stop the HTTP server on context cancellation",
        "// Line_Reference 192: \teg.Go(func() error {",
        "// Line_Reference 193: \t\t<-ctx.Done()",
        "// Line_Reference 195: \t\tctx, cleanup := context.WithTimeout(ctx, time.Second*5)",
        "// Line_Reference 196: \t\tdefer cleanup()",
        "// Line_Reference 198: \t\treturn hsrv.Shutdown(ctx)",
        "// Line_Reference 199: \t})"
    ]
}
