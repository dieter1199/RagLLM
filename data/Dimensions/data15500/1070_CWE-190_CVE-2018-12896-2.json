{
    "cve_id": "CVE-2018-12896",
    "cve_description": "An issue was discovered in the Linux kernel through 4.17.3. An Integer Overflow in kernel/time/posix-timers.c in the POSIX timer code is caused by the way the overrun accounting works. Depending on interval and expiry time values, the overrun can be larger than INT_MAX, but the accounting is int based. This basically makes the accounting values, which are visible to user space via timer_getoverrun(2) and siginfo::si_overrun, random. For example, a local user can cause a denial of service (signed integer overflow) via crafted mmap, futex, timer_create, and timer_settime system calls.",
    "cve_publish_date": "2018-07-02",
    "cwe_id": "CWE-190",
    "cwe_name": "Integer Overflow or Wraparound",
    "cwe_description": "The product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number.",
    "commit_message": "posix-timers: Sanitize overrun handling\n\nThe posix timer overrun handling is broken because the forwarding functions\ncan return a huge number of overruns which does not fit in an int. As a\nconsequence timer_getoverrun(2) and siginfo::si_overrun can turn into\nrandom number generators.\n\nThe k_clock::timer_forward() callbacks return a 64 bit value now. Make\nk_itimer::ti_overrun[_last] 64bit as well, so the kernel internal\naccounting is correct. 3Remove the temporary (int) casts.\n\nAdd a helper function which clamps the overrun value returned to user space\nvia timer_getoverrun(2) or siginfo::si_overrun limited to a positive value\nbetween 0 and INT_MAX. INT_MAX is an indicator for user space that the\noverrun value has been clamped.\n\nReported-by: Team OWL337 <icytxw@gmail.com>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nAcked-by: John Stultz <john.stultz@linaro.org>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Michael Kerrisk <mtk.manpages@gmail.com>\nLink: https://lkml.kernel.org/r/20180626132705.018623573@linutronix.de",
    "type_of_change": "Modification",
    "filename_of_changes": "posix-timers.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "20",
    "number_of_lines_deleted_vulnerable_to_cve": "11",
    "vulnerable_lines": [
        "// Line_Reference 293: \ttimr->it_overrun += (unsigned int) hrtimer_forward(timer,",
        "// Line_Reference 294: \t\t\t\t\t\ttimer->base->get_time(),",
        "// Line_Reference 295: \t\t\t\t\t\ttimr->it_interval);",
        "// Line_Reference 324: \t\ttimr->it_overrun = -1;",
        "// Line_Reference 327: \t\tinfo->si_overrun += timr->it_overrun_last;",
        "// Line_Reference 421: \t\t\ttimr->it_overrun += (unsigned int)",
        "// Line_Reference 422: \t\t\t\thrtimer_forward(timer, now,",
        "// Line_Reference 423: \t\t\t\t\t\ttimr->it_interval);",
        "// Line_Reference 527: \tnew_timer->it_overrun = -1;",
        "// Line_Reference 705: \t\ttimr->it_overrun += (int)kc->timer_forward(timr, now);",
        "// Line_Reference 794: \toverrun = timr->it_overrun_last;"
    ]
}
