{
    "cve_id": "CVE-2016-9754",
    "cve_description": "The ring_buffer_resize function in kernel/trace/ring_buffer.c in the profiling subsystem in the Linux kernel before 4.6.1 mishandles certain integer calculations, which allows local users to gain privileges by writing to the /sys/kernel/debug/tracing/buffer_size_kb file.",
    "cve_publish_date": "2017-01-05",
    "cwe_id": "CWE-190",
    "cwe_name": "Integer Overflow or Wraparound",
    "cwe_description": "The product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number.",
    "commit_message": "ring-buffer: Prevent overflow of size in ring_buffer_resize()\n\nIf the size passed to ring_buffer_resize() is greater than MAX_LONG - BUF_PAGE_SIZE\nthen the DIV_ROUND_UP() will return zero.\n\nHere's the details:\n\n  # echo 18014398509481980 > /sys/kernel/debug/tracing/buffer_size_kb\n\ntracing_entries_write() processes this and converts kb to bytes.\n\n 18014398509481980 << 10 = 18446744073709547520\n\nand this is passed to ring_buffer_resize() as unsigned long size.\n\n size = DIV_ROUND_UP(size, BUF_PAGE_SIZE);\n\nWhere DIV_ROUND_UP(a, b) is (a + b - 1)/b\n\nBUF_PAGE_SIZE is 4080 and here\n\n 18446744073709547520 + 4080 - 1 = 18446744073709551599\n\nwhere 18446744073709551599 is still smaller than 2^64\n\n 2^64 - 18446744073709551599 = 17\n\nBut now 18446744073709551599 / 4080 = 4521260802379792\n\nand size = size * 4080 = 18446744073709551360\n\nThis is checked to make sure its still greater than 2 * 4080,\nwhich it is.\n\nThen we convert to the number of buffer pages needed.\n\n nr_page = DIV_ROUND_UP(size, BUF_PAGE_SIZE)\n\nbut this time size is 18446744073709551360 and\n\n 2^64 - (18446744073709551360 + 4080 - 1) = -3823\n\nThus it overflows and the resulting number is less than 4080, which makes\n\n  3823 / 4080 = 0\n\nan nr_pages is set to this. As we already checked against the minimum that\nnr_pages may be, this causes the logic to fail as well, and we crash the\nkernel.\n\nThere's no reason to have the two DIV_ROUND_UP() (that's just result of\nhistorical code changes), clean up the code and fix this bug.\n\nCc: stable@vger.kernel.org # 3.5+\nFixes: 83f40318dab00 (\"ring-buffer: Make removal of ring buffer pages atomic\")\nSigned-off-by: Steven Rostedt <rostedt@goodmis.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "ring_buffer.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "4",
    "number_of_lines_deleted_vulnerable_to_cve": "5",
    "vulnerable_lines": [
        "// Line_Reference 1660: \tsize = DIV_ROUND_UP(size, BUF_PAGE_SIZE);",
        "// Line_Reference 1661: \tsize *= BUF_PAGE_SIZE;",
        "// Line_Reference 1664: \tif (size < BUF_PAGE_SIZE * 2)",
        "// Line_Reference 1665: \t\tsize = BUF_PAGE_SIZE * 2;",
        "// Line_Reference 1667: \tnr_pages = DIV_ROUND_UP(size, BUF_PAGE_SIZE);"
    ]
}
