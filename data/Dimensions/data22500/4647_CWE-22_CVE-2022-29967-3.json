{
    "cve_id": "CVE-2022-29967",
    "cve_description": "static_compressed_inmemory_website_callback.c in Glewlwyd through 2.6.2 allows directory traversal.",
    "cve_publish_date": "2022-04-29",
    "cwe_id": "CWE-22",
    "cwe_name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
    "cwe_description": "The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
    "commit_message": "Fix file access check for directory traversal, and fix call for callback_static_file_uncompressed if header not set",
    "type_of_change": "Modification",
    "filename_of_changes": "static_compressed_inmemory_website_callback.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "135",
    "number_of_lines_deleted_vulnerable_to_cve": "119",
    "vulnerable_lines": [
        "// Line_Reference 7:  * Version 20220425",
        "// Line_Reference 161:   char * file_requested, * file_path, * url_dup_save;",
        "// Line_Reference 189:     f = fopen (file_path, \"rb\");",
        "// Line_Reference 190:     if (f) {",
        "// Line_Reference 191:       fseek (f, 0, SEEK_END);",
        "// Line_Reference 192:       length = ftell (f);",
        "// Line_Reference 193:       fseek (f, 0, SEEK_SET);",
        "// Line_Reference 194: ",
        "// Line_Reference 195:       content_type = u_map_get_case(&((struct _u_compressed_inmemory_website_config *)user_data)->mime_types, get_filename_ext(file_requested));",
        "// Line_Reference 196:       if (content_type == NULL) {",
        "// Line_Reference 197:         content_type = u_map_get(&((struct _u_compressed_inmemory_website_config *)user_data)->mime_types, \"*\");",
        "// Line_Reference 198:         y_log_message(Y_LOG_LEVEL_WARNING, \"Static File Server - Unknown mime type for extension %s\", get_filename_ext(file_requested));",
        "// Line_Reference 199:       }",
        "// Line_Reference 200:       u_map_put(response->map_header, \"Content-Type\", content_type);",
        "// Line_Reference 201:       u_map_copy_into(response->map_header, &((struct _u_compressed_inmemory_website_config *)user_data)->map_header);",
        "// Line_Reference 202: ",
        "// Line_Reference 203:       if (ulfius_set_stream_response(response, 200, callback_static_file_uncompressed_stream, callback_static_file_uncompressed_stream_free, length, CHUNK, f) != U_OK) {",
        "// Line_Reference 204:         y_log_message(Y_LOG_LEVEL_ERROR, \"Static File Server - Error ulfius_set_stream_response\");",
        "// Line_Reference 205:       }",
        "// Line_Reference 206:     } else {",
        "// Line_Reference 207:       if (((struct _u_compressed_inmemory_website_config *)user_data)->redirect_on_404 == NULL) {",
        "// Line_Reference 208:         ret = U_CALLBACK_IGNORE;",
        "// Line_Reference 210:         ulfius_add_header_to_response(response, \"Location\", ((struct _u_compressed_inmemory_website_config *)user_data)->redirect_on_404);",
        "// Line_Reference 211:         response->status = 302;",
        "// Line_Reference 215:     o_free(url_dup_save);",
        "// Line_Reference 293:   char * file_requested, * file_path, * url_dup_save, * data_zip = NULL;",
        "// Line_Reference 331: ",
        "// Line_Reference 336: ",
        "// Line_Reference 346: ",
        "// Line_Reference 356:             if (!pthread_mutex_lock(&config->lock)) {",
        "// Line_Reference 357:               f = fopen (file_path, \"rb\");",
        "// Line_Reference 358:               if (f) {",
        "// Line_Reference 359:                 content_type = u_map_get_case(&config->mime_types, get_filename_ext(file_requested));",
        "// Line_Reference 360:                 if (content_type == NULL) {",
        "// Line_Reference 361:                   content_type = u_map_get(&config->mime_types, \"*\");",
        "// Line_Reference 362:                   y_log_message(Y_LOG_LEVEL_WARNING, \"Static File Server - Unknown mime type for extension %s\", get_filename_ext(file_requested));",
        "// Line_Reference 363:                 }",
        "// Line_Reference 364:                 if (!string_array_has_value((const char **)config->mime_types_compressed, content_type)) {",
        "// Line_Reference 365:                   compress_mode = U_COMPRESS_NONE;",
        "// Line_Reference 366:                 }",
        "// Line_Reference 367: ",
        "// Line_Reference 368:                 u_map_put(response->map_header, \"Content-Type\", content_type);",
        "// Line_Reference 369:                 u_map_copy_into(response->map_header, &config->map_header);",
        "// Line_Reference 370: ",
        "// Line_Reference 371:                 fseek (f, 0, SEEK_END);",
        "// Line_Reference 372:                 offset = length = ftell (f);",
        "// Line_Reference 373:                 fseek (f, 0, SEEK_SET);",
        "// Line_Reference 374: ",
        "// Line_Reference 375:                 if (length) {",
        "// Line_Reference 376:                   if ((file_content_orig = file_content = o_malloc(length)) != NULL && (data_zip = o_malloc((2*length)+20)) != NULL) {",
        "// Line_Reference 377:                     defstream.zalloc = u_zalloc;",
        "// Line_Reference 378:                     defstream.zfree = u_zfree;",
        "// Line_Reference 379:                     defstream.opaque = Z_NULL;",
        "// Line_Reference 380:                     defstream.avail_in = (uInt)length;",
        "// Line_Reference 381:                     defstream.next_in = (Bytef *)file_content;",
        "// Line_Reference 382:                     while ((read_length = fread(file_content, sizeof(char), offset, f))) {",
        "// Line_Reference 383:                       file_content += read_length;",
        "// Line_Reference 384:                       offset -= read_length;",
        "// Line_Reference 385:                     }",
        "// Line_Reference 386: ",
        "// Line_Reference 387:                     if (compress_mode == U_COMPRESS_GZIP) {",
        "// Line_Reference 388:                       if (deflateInit2(&defstream,",
        "// Line_Reference 389:                                        Z_DEFAULT_COMPRESSION,",
        "// Line_Reference 390:                                        Z_DEFLATED,",
        "// Line_Reference 391:                                        U_GZIP_WINDOW_BITS | U_GZIP_ENCODING,",
        "// Line_Reference 392:                                        8,",
        "// Line_Reference 393:                                        Z_DEFAULT_STRATEGY) != Z_OK) {",
        "// Line_Reference 394:                         y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error deflateInit (gzip)\");",
        "// Line_Reference 395:                         ret = U_CALLBACK_ERROR;",
        "// Line_Reference 396:                       }",
        "// Line_Reference 397:                     } else {",
        "// Line_Reference 398:                       if (deflateInit(&defstream, Z_BEST_COMPRESSION) != Z_OK) {",
        "// Line_Reference 399:                         y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error deflateInit (deflate)\");",
        "// Line_Reference 400:                         ret = U_CALLBACK_ERROR;",
        "// Line_Reference 402:                     }",
        "// Line_Reference 403:                     if (ret == U_CALLBACK_CONTINUE) {",
        "// Line_Reference 404:                       do {",
        "// Line_Reference 405:                         if ((data_zip = o_realloc(data_zip, data_zip_len+_U_W_BLOCK_SIZE)) != NULL) {",
        "// Line_Reference 406:                           defstream.avail_out = _U_W_BLOCK_SIZE;",
        "// Line_Reference 407:                           defstream.next_out = ((Bytef *)data_zip)+data_zip_len;",
        "// Line_Reference 408:                           switch ((res = deflate(&defstream, Z_FINISH))) {",
        "// Line_Reference 409:                             case Z_OK:",
        "// Line_Reference 410:                             case Z_STREAM_END:",
        "// Line_Reference 411:                             case Z_BUF_ERROR:",
        "// Line_Reference 412:                               break;",
        "// Line_Reference 413:                             default:",
        "// Line_Reference 414:                               y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error deflate %d\", res);",
        "// Line_Reference 415:                               ret = U_CALLBACK_ERROR;",
        "// Line_Reference 416:                               break;",
        "// Line_Reference 417:                           }",
        "// Line_Reference 418:                           data_zip_len += _U_W_BLOCK_SIZE - defstream.avail_out;",
        "// Line_Reference 419:                         } else {",
        "// Line_Reference 420:                           y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error allocating resources for data_zip\");",
        "// Line_Reference 423:                       } while (U_CALLBACK_CONTINUE == ret && defstream.avail_out == 0);",
        "// Line_Reference 424: ",
        "// Line_Reference 426:                         if (compress_mode == U_COMPRESS_GZIP) {",
        "// Line_Reference 427:                           if (config->allow_cache_compressed) {",
        "// Line_Reference 428:                             u_map_put_binary(&config->gzip_files, file_requested, data_zip, 0, defstream.total_out);",
        "// Line_Reference 430:                           ulfius_set_binary_body_response(response, 200, u_map_get(&config->gzip_files, file_requested), u_map_get_length(&config->gzip_files, file_requested));",
        "// Line_Reference 431:                         } else {",
        "// Line_Reference 432:                           if (config->allow_cache_compressed) {",
        "// Line_Reference 433:                             u_map_put_binary(&config->deflate_files, file_requested, data_zip, 0, defstream.total_out);",
        "// Line_Reference 435:                           ulfius_set_binary_body_response(response, 200, u_map_get(&config->deflate_files, file_requested), u_map_get_length(&config->deflate_files, file_requested));",
        "// Line_Reference 437:                         u_map_put(response->map_header, U_CONTENT_HEADER, compress_mode==U_COMPRESS_GZIP?U_ACCEPT_GZIP:U_ACCEPT_DEFLATE);",
        "// Line_Reference 440:                     deflateEnd(&defstream);",
        "// Line_Reference 441:                     o_free(data_zip);",
        "// Line_Reference 443:                     y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error allocating resource for file_content or data_zip\");",
        "// Line_Reference 444:                     ret = U_CALLBACK_ERROR;",
        "// Line_Reference 446:                   o_free(file_content_orig);",
        "// Line_Reference 448:                 fclose(f);",
        "// Line_Reference 450:                 if (((struct _u_compressed_inmemory_website_config *)user_data)->redirect_on_404 == NULL) {",
        "// Line_Reference 451:                   ret = U_CALLBACK_IGNORE;",
        "// Line_Reference 452:                 } else {",
        "// Line_Reference 453:                   ulfius_add_header_to_response(response, \"Location\", ((struct _u_compressed_inmemory_website_config *)user_data)->redirect_on_404);",
        "// Line_Reference 454:                   response->status = 302;",
        "// Line_Reference 455:                 }",
        "// Line_Reference 457:               pthread_mutex_unlock(&config->lock);",
        "// Line_Reference 459:               y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error pthread_lock_mutex\");",
        "// Line_Reference 460:               ret = U_CALLBACK_ERROR;"
    ]
}
