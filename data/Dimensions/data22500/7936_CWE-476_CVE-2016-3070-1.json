{
    "cve_id": "CVE-2016-3070",
    "cve_description": "The trace_writeback_dirty_page implementation in include/trace/events/writeback.h in the Linux kernel before 4.4 improperly interacts with mm/migrate.c, which allows local users to cause a denial of service (NULL pointer dereference and system crash) or possibly have unspecified other impact by triggering a certain page move.",
    "cve_publish_date": "2016-08-06",
    "cwe_id": "CWE-476",
    "cwe_name": "NULL Pointer Dereference",
    "cwe_description": "The product dereferences a pointer that it expects to be valid but is NULL.",
    "commit_message": "mm: migrate dirty page without clear_page_dirty_for_io etc\n\nclear_page_dirty_for_io() has accumulated writeback and memcg subtleties\nsince v2.6.16 first introduced page migration; and the set_page_dirty()\nwhich completed its migration of PageDirty, later had to be moderated to\n__set_page_dirty_nobuffers(); then PageSwapBacked had to skip that too.\n\nNo actual problems seen with this procedure recently, but if you look into\nwhat the clear_page_dirty_for_io(page)+set_page_dirty(newpage) is actually\nachieving, it turns out to be nothing more than moving the PageDirty flag,\nand its NR_FILE_DIRTY stat from one zone to another.\n\nIt would be good to avoid a pile of irrelevant decrementations and\nincrementations, and improper event counting, and unnecessary descent of\nthe radix_tree under tree_lock (to set the PAGECACHE_TAG_DIRTY which\nradix_tree_replace_slot() left in place anyway).\n\nDo the NR_FILE_DIRTY movement, like the other stats movements, while\ninterrupts still disabled in migrate_page_move_mapping(); and don't even\nbother if the zone is the same.  Do the PageDirty movement there under\ntree_lock too, where old page is frozen and newpage not yet visible:\nbearing in mind that as soon as newpage becomes visible in radix_tree, an\nun-page-locked set_page_dirty() might interfere (or perhaps that's just\nnot possible: anything doing so should already hold an additional\nreference to the old page, preventing its migration; but play safe).\n\nBut we do still need to transfer PageDirty in migrate_page_copy(), for\nthose who don't go the mapping route through migrate_page_move_mapping().\n\nSigned-off-by: Hugh Dickins <hughd@google.com>\nCc: Christoph Lameter <cl@linux.com>\nCc: \"Kirill A. Shutemov\" <kirill.shutemov@linux.intel.com>\nCc: Rik van Riel <riel@redhat.com>\nCc: Vlastimil Babka <vbabka@suse.cz>\nCc: Davidlohr Bueso <dave@stgolabs.net>\nCc: Oleg Nesterov <oleg@redhat.com>\nCc: Sasha Levin <sasha.levin@oracle.com>\nCc: Dmitry Vyukov <dvyukov@google.com>\nCc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "migrate.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "31",
    "number_of_lines_deleted_vulnerable_to_cve": "20",
    "vulnerable_lines": [
        "// Line_Reference 400: \t__dec_zone_page_state(page, NR_FILE_PAGES);",
        "// Line_Reference 401: \t__inc_zone_page_state(newpage, NR_FILE_PAGES);",
        "// Line_Reference 402: \tif (!PageSwapCache(page) && PageSwapBacked(page)) {",
        "// Line_Reference 403: \t\t__dec_zone_page_state(page, NR_SHMEM);",
        "// Line_Reference 404: \t\t__inc_zone_page_state(newpage, NR_SHMEM);",
        "// Line_Reference 406: \tspin_unlock_irq(&mapping->tree_lock);",
        "// Line_Reference 527: \tif (PageDirty(page)) {",
        "// Line_Reference 528: \t\tclear_page_dirty_for_io(page);",
        "// Line_Reference 529: \t\t/*",
        "// Line_Reference 530: \t\t * Want to mark the page and the radix tree as dirty, and",
        "// Line_Reference 531: \t\t * redo the accounting that clear_page_dirty_for_io undid,",
        "// Line_Reference 532: \t\t * but we can't use set_page_dirty because that function",
        "// Line_Reference 533: \t\t * is actually a signal that all of the page has become dirty.",
        "// Line_Reference 534: \t\t * Whereas only part of our page may be dirty.",
        "// Line_Reference 535: \t\t */",
        "// Line_Reference 536: \t\tif (PageSwapBacked(page))",
        "// Line_Reference 537: \t\t\tSetPageDirty(newpage);",
        "// Line_Reference 538: \t\telse",
        "// Line_Reference 539: \t\t\t__set_page_dirty_nobuffers(newpage);",
        "// Line_Reference 540:  \t}"
    ]
}
