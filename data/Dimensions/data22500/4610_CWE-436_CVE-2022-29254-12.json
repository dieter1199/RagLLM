{
    "cve_id": "CVE-2022-29254",
    "cve_description": "silverstripe-omnipay is a SilverStripe integration with Omnipay PHP payments library. For a subset of Omnipay gateways (those that use intermediary states like `isNotification()` or `isRedirect()`), if the payment identifier or success URL is exposed it is possible for payments to be prematurely marked as completed without payment being taken. This is mitigated by the fact that most payment gateways hide this information from users, however some issuing banks offer flawed 3DSecure implementations that may inadvertently expose this data. The following versions have been patched to fix this issue: `2.5.2`, `3.0.2`, `3.1.4`, and `3.2.1`. There are no known workarounds for this vulnerability.",
    "cve_publish_date": "2022-06-09",
    "cwe_id": "CWE-436",
    "cwe_name": "Interpretation Conflict",
    "cwe_description": "Product A handles inputs or steps differently than Product B, which causes A to perform incorrect actions based on its perception of B's state.",
    "commit_message": "[CVE-2022-29254] Add extra validation on payment completion",
    "type_of_change": "Modification",
    "filename_of_changes": "PurchaseService.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "20",
    "number_of_lines_deleted_vulnerable_to_cve": "18",
    "vulnerable_lines": [
        "// Line_Reference 8: use SilverStripe\\Omnipay\\Model\\Message;",
        "// Line_Reference 46:         $this->createMessage(Message\\PurchaseRequest::class, $request);",
        "// Line_Reference 51:             $this->createMessage(Message\\PurchaseError::class, $e);",
        "// Line_Reference 65:                 $serviceResponse->isRedirect() ? Message\\PurchaseRedirectResponse::class : Message\\AwaitingPurchaseResponse::class,",
        "// Line_Reference 69:             $this->createMessage(Message\\PurchaseError::class, $response);",
        "// Line_Reference 70:         } else {",
        "// Line_Reference 108:         $this->createMessage(Message\\CompletePurchaseRequest::class, $request);",
        "// Line_Reference 113:             $this->createMessage(Message\\CompletePurchaseError::class, $e);",
        "// Line_Reference 118:         if ($serviceResponse->isError()) {",
        "// Line_Reference 119:             $this->createMessage(Message\\CompletePurchaseError::class, $response);",
        "// Line_Reference 120:             return $serviceResponse;",
        "// Line_Reference 121:         }",
        "// Line_Reference 123:         // only update payment status if we're not waiting for a notification",
        "// Line_Reference 124:         if (!$serviceResponse->isAwaitingNotification()) {",
        "// Line_Reference 125:             $this->markCompleted('Captured', $serviceResponse, $response);",
        "// Line_Reference 126:         } else {",
        "// Line_Reference 130: ",
        "// Line_Reference 137:         $this->createMessage(Message\\PurchasedResponse::class, $gatewayMessage);"
    ]
}
