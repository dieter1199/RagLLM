{
    "cve_id": "CVE-2022-36066",
    "cve_description": "Discourse is an open source discussion platform. In versions prior to 2.8.9 on the `stable` branch and prior to 2.9.0.beta10 on the `beta` and `tests-passed` branches, admins can upload a maliciously crafted Zip or Gzip Tar archive to write files at arbitrary locations and trigger remote code execution. The problem is patched in version 2.8.9 on the `stable` branch and version 2.9.0.beta10 on the `beta` and `tests-passed` branches. There are no known workarounds.",
    "cve_publish_date": "2022-09-29",
    "cwe_id": "CWE-434",
    "cwe_name": "Unrestricted Upload of File with Dangerous Type",
    "cwe_description": "The product allows the upload or transfer of dangerous file types that are automatically processed within its environment.",
    "commit_message": "SECURITY: Prevent arbitrary file write when decompressing files (#18421)\n\n* SECURITY: Prevent arbitrary file write when decompressing files\r\n* FIX: Allow decompressing files into symlinked directories\r\n\r\nCo-authored-by: OsamaSayegh <asooomaasoooma90@gmail.com>\r\nCo-authored-by: Gerhard Schlager <gerhard.schlager@discourse.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "strategy.rb",
    "code_language": "Ruby",
    "number_of_lines_added_for_mitigation": "12",
    "number_of_lines_deleted_vulnerable_to_cve": "15",
    "vulnerable_lines": [
        "// Line_Reference 12:     def decompress(dest_path, compressed_file_path, max_size, allow_non_root_folder: false)",
        "// Line_Reference 19:           entry_path = build_entry_path(",
        "// Line_Reference 20:             compressed_file, sanitize_path(dest_path),",
        "// Line_Reference 21:             sanitized_compressed_file_path, entry,",
        "// Line_Reference 22:             allow_non_root_folder",
        "// Line_Reference 23:           )",
        "// Line_Reference 35:     def strip_directory(from, to, relative: false)",
        "// Line_Reference 36:       sanitized_from = sanitize_path(from) rescue nil",
        "// Line_Reference 37:       sanitized_to = sanitize_path(to) rescue nil",
        "// Line_Reference 38:       return unless sanitized_from && sanitized_to",
        "// Line_Reference 39: ",
        "// Line_Reference 40:       glob_path = relative ? \"#{sanitized_from}/*/*\" : \"#{sanitized_from}/**\"",
        "// Line_Reference 41:       FileUtils.mv(Dir.glob(glob_path), sanitized_to) if File.directory?(sanitized_from)",
        "// Line_Reference 42:     end",
        "// Line_Reference 43: "
    ]
}
