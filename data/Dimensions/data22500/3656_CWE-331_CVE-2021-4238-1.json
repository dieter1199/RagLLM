{
    "cve_id": "CVE-2021-4238",
    "cve_description": "Randomly-generated alphanumeric strings contain significantly less entropy than expected. The RandomAlphaNumeric and CryptoRandomAlphaNumeric functions always return strings containing at least one digit from 0 to 9. This significantly reduces the amount of entropy in short strings generated by these functions.",
    "cve_publish_date": "2022-12-27",
    "cwe_id": "CWE-331",
    "cwe_name": "Insufficient Entropy",
    "cwe_description": "The product uses an algorithm or scheme that produces insufficient entropy, leaving patterns or clusters of values that are more likely to occur than others.",
    "commit_message": "Remove unnecessary checks on a value that is already definitely an alphanum\n\nSigned-off-by: Matt Butcher <matt.butcher@microsoft.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "cryptorandomstringutils.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "2",
    "number_of_lines_deleted_vulnerable_to_cve": "19",
    "vulnerable_lines": [
        "// Line_Reference 24: \t\"regexp\"",
        "// Line_Reference 105: \tRandomString, err := CryptoRandom(count, 0, 0, true, true)",
        "// Line_Reference 106: \tif err != nil {",
        "// Line_Reference 107: \t\treturn \"\", fmt.Errorf(\"Error: %s\", err)",
        "// Line_Reference 108: \t}",
        "// Line_Reference 109: \tmatch, err := regexp.MatchString(\"([0-9]+)\", RandomString)",
        "// Line_Reference 110: \tif err != nil {",
        "// Line_Reference 111: \t\tpanic(err)",
        "// Line_Reference 112: \t}",
        "// Line_Reference 113: ",
        "// Line_Reference 114: \tif !match {",
        "// Line_Reference 115: \t\t//Get the position between 0 and the length of the string-1  to insert a random number",
        "// Line_Reference 116: \t\tposition := getCryptoRandomInt(count)",
        "// Line_Reference 117: \t\t//Insert a random number between [0-9] in the position",
        "// Line_Reference 118: \t\tRandomString = RandomString[:position] + string('0' + getCryptoRandomInt(10)) + RandomString[position + 1:]",
        "// Line_Reference 119: \t\treturn RandomString, err",
        "// Line_Reference 120: \t}",
        "// Line_Reference 121: \treturn RandomString, err",
        "// Line_Reference 207: \t\t\tch = chars[getCryptoRandomInt(gap) + int64(start)]"
    ]
}
