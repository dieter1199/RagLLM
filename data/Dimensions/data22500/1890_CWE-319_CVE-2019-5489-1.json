{
    "cve_id": "CVE-2019-5489",
    "cve_description": "The mincore() implementation in mm/mincore.c in the Linux kernel through 4.19.13 allowed local attackers to observe page cache access patterns of other processes on the same system, potentially allowing sniffing of secret information. (Fixing this affects the output of the fincore program.) Limited remote exploitation may be possible, as demonstrated by latency differences in accessing public files from an Apache HTTP Server.",
    "cve_publish_date": "2019-01-07",
    "cwe_id": "CWE-319",
    "cwe_name": "Cleartext Transmission of Sensitive Information",
    "cwe_description": "The product transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.",
    "commit_message": "Change mincore() to count \"mapped\" pages rather than \"cached\" pages\n\nThe semantics of what \"in core\" means for the mincore() system call are\nsomewhat unclear, but Linux has always (since 2.3.52, which is when\nmincore() was initially done) treated it as \"page is available in page\ncache\" rather than \"page is mapped in the mapping\".\n\nThe problem with that traditional semantic is that it exposes a lot of\nsystem cache state that it really probably shouldn't, and that users\nshouldn't really even care about.\n\nSo let's try to avoid that information leak by simply changing the\nsemantics to be that mincore() counts actual mapped pages, not pages\nthat might be cheaply mapped if they were faulted (note the \"might be\"\npart of the old semantics: being in the cache doesn't actually guarantee\nthat you can access them without IO anyway, since things like network\nfilesystems may have to revalidate the cache before use).\n\nIn many ways the old semantics were somewhat insane even aside from the\ninformation leak issue.  From the very beginning (and that beginning is\na long time ago: 2.3.52 was released in March 2000, I think), the code\nhad a comment saying\n\n  Later we can get more picky about what \"in core\" means precisely.\n\nand this is that \"later\".  Admittedly it is much later than is really\ncomfortable.\n\nNOTE! This is a real semantic change, and it is for example known to\nchange the output of \"fincore\", since that program literally does a\nmmmap without populating it, and then doing \"mincore()\" on that mapping\nthat doesn't actually have any pages in it.\n\nI'm hoping that nobody actually has any workflow that cares, and the\ninfo leak is real.\n\nWe may have to do something different if it turns out that people have\nvalid reasons to want the old semantics, and if we can limit the\ninformation leak sanely.\n\nCc: Kevin Easton <kevin@guarana.org>\nCc: Jiri Kosina <jikos@kernel.org>\nCc: Masatake YAMATO <yamato@redhat.com>\nCc: Andrew Morton <akpm@linux-foundation.org>\nCc: Greg KH <gregkh@linuxfoundation.org>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Michal Hocko <mhocko@suse.com>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "mincore.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "13",
    "number_of_lines_deleted_vulnerable_to_cve": "81",
    "vulnerable_lines": [
        "// Line_Reference 45: /*",
        "// Line_Reference 46:  * Later we can get more picky about what \"in core\" means precisely.",
        "// Line_Reference 47:  * For now, simply check to see if the page is in the page cache,",
        "// Line_Reference 48:  * and is up to date; i.e. that no page-in operation would be required",
        "// Line_Reference 49:  * at this time if an application were to map and access this page.",
        "// Line_Reference 50:  */",
        "// Line_Reference 51: static unsigned char mincore_page(struct address_space *mapping, pgoff_t pgoff)",
        "// Line_Reference 52: {",
        "// Line_Reference 53: \tunsigned char present = 0;",
        "// Line_Reference 54: \tstruct page *page;",
        "// Line_Reference 55: ",
        "// Line_Reference 56: \t/*",
        "// Line_Reference 57: \t * When tmpfs swaps out a page from a file, any process mapping that",
        "// Line_Reference 58: \t * file will not get a swp_entry_t in its pte, but rather it is like",
        "// Line_Reference 59: \t * any other file mapping (ie. marked !present and faulted in with",
        "// Line_Reference 60: \t * tmpfs's .fault). So swapped out tmpfs mappings are tested here.",
        "// Line_Reference 61: \t */",
        "// Line_Reference 62: #ifdef CONFIG_SWAP",
        "// Line_Reference 63: \tif (shmem_mapping(mapping)) {",
        "// Line_Reference 64: \t\tpage = find_get_entry(mapping, pgoff);",
        "// Line_Reference 65: \t\t/*",
        "// Line_Reference 66: \t\t * shmem/tmpfs may return swap: account for swapcache",
        "// Line_Reference 67: \t\t * page too.",
        "// Line_Reference 68: \t\t */",
        "// Line_Reference 69: \t\tif (xa_is_value(page)) {",
        "// Line_Reference 70: \t\t\tswp_entry_t swp = radix_to_swp_entry(page);",
        "// Line_Reference 71: \t\t\tpage = find_get_page(swap_address_space(swp),",
        "// Line_Reference 72: \t\t\t\t\t     swp_offset(swp));",
        "// Line_Reference 73: \t\t}",
        "// Line_Reference 74: \t} else",
        "// Line_Reference 75: \t\tpage = find_get_page(mapping, pgoff);",
        "// Line_Reference 76: #else",
        "// Line_Reference 77: \tpage = find_get_page(mapping, pgoff);",
        "// Line_Reference 78: #endif",
        "// Line_Reference 79: \tif (page) {",
        "// Line_Reference 80: \t\tpresent = PageUptodate(page);",
        "// Line_Reference 81: \t\tput_page(page);",
        "// Line_Reference 82: \t}",
        "// Line_Reference 83: ",
        "// Line_Reference 84: \treturn present;",
        "// Line_Reference 85: }",
        "// Line_Reference 86: ",
        "// Line_Reference 87: static int __mincore_unmapped_range(unsigned long addr, unsigned long end,",
        "// Line_Reference 88: \t\t\t\tstruct vm_area_struct *vma, unsigned char *vec)",
        "// Line_Reference 89: {",
        "// Line_Reference 90: \tunsigned long nr = (end - addr) >> PAGE_SHIFT;",
        "// Line_Reference 91: \tint i;",
        "// Line_Reference 92: ",
        "// Line_Reference 93: \tif (vma->vm_file) {",
        "// Line_Reference 94: \t\tpgoff_t pgoff;",
        "// Line_Reference 95: ",
        "// Line_Reference 96: \t\tpgoff = linear_page_index(vma, addr);",
        "// Line_Reference 97: \t\tfor (i = 0; i < nr; i++, pgoff++)",
        "// Line_Reference 98: \t\t\tvec[i] = mincore_page(vma->vm_file->f_mapping, pgoff);",
        "// Line_Reference 99: \t} else {",
        "// Line_Reference 100: \t\tfor (i = 0; i < nr; i++)",
        "// Line_Reference 101: \t\t\tvec[i] = 0;",
        "// Line_Reference 102: \t}",
        "// Line_Reference 103: \treturn nr;",
        "// Line_Reference 104: }",
        "// Line_Reference 105: ",
        "// Line_Reference 109: \twalk->private += __mincore_unmapped_range(addr, end,",
        "// Line_Reference 110: \t\t\t\t\t\t  walk->vma, walk->private);",
        "// Line_Reference 131: \t\t__mincore_unmapped_range(addr, end, vma, vec);",
        "// Line_Reference 140: \t\t\t__mincore_unmapped_range(addr, addr + PAGE_SIZE,",
        "// Line_Reference 141: \t\t\t\t\t\t vma, vec);",
        "// Line_Reference 147: \t\t\tif (non_swap_entry(entry)) {",
        "// Line_Reference 148: \t\t\t\t/*",
        "// Line_Reference 149: \t\t\t\t * migration or hwpoison entries are always",
        "// Line_Reference 150: \t\t\t\t * uptodate",
        "// Line_Reference 151: \t\t\t\t */",
        "// Line_Reference 152: \t\t\t\t*vec = 1;",
        "// Line_Reference 153: \t\t\t} else {",
        "// Line_Reference 154: #ifdef CONFIG_SWAP",
        "// Line_Reference 155: \t\t\t\t*vec = mincore_page(swap_address_space(entry),",
        "// Line_Reference 156: \t\t\t\t\t\t    swp_offset(entry));",
        "// Line_Reference 157: #else",
        "// Line_Reference 158: \t\t\t\tWARN_ON(1);",
        "// Line_Reference 159: \t\t\t\t*vec = 1;",
        "// Line_Reference 160: #endif",
        "// Line_Reference 161: \t\t\t}"
    ]
}
