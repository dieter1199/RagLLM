{
    "cve_id": "CVE-2023-6507",
    "cve_description": "An issue was found in CPython 3.12.0 `subprocess` module on POSIX platforms. The issue was fixed in CPython 3.12.1 and does not affect other stable releases.\n\nWhen using the `extra_groups=` parameter with an empty list as a value (ie `extra_groups=[]`) the logic regressed to not call `setgroups(0, NULL)` before calling `exec()`, thus not dropping the original processes' groups before starting the new process. There is no issue when the parameter isn't used or when any value is used besides an empty list.\n\nThis issue only impacts CPython processes run with sufficient privilege to make the `setgroups` system call (typically `root`).\n\n",
    "cve_publish_date": "2023-12-08",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "gh-112334: Restore subprocess's use of `vfork()` & fix `extra_groups=[]` behavior (#112617)\n\nRestore `subprocess`'s intended use of `vfork()` by default for performance on Linux;\r\nalso fixes the behavior of `extra_groups=[]` which was unintentionally broken in 3.12.0:\r\n\r\nFixed a performance regression in 3.12's :mod:`subprocess` on Linux where it\r\nwould no longer use the fast-path ``vfork()`` system call when it could have\r\ndue to a logic bug, instead falling back to the safe but slower ``fork()``.\r\n\r\nAlso fixed a security bug introduced in 3.12.0.  If a value of ``extra_groups=[]``\r\nwas passed to :mod:`subprocess.Popen` or related APIs, the underlying\r\n``setgroups(0, NULL)`` system call to clear the groups list would not be made\r\nin the child process prior to ``exec()``.\r\n\r\nThe security issue was identified via code inspection in the process of\r\nfixing the first bug.  Thanks to @vain for the detailed report and\r\nanalysis in the initial bug on Github.\r\n\r\nCo-authored-by: Serhiy Storchaka <storchaka@gmail.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "test_subprocess.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "17",
    "number_of_lines_deleted_vulnerable_to_cve": "21",
    "vulnerable_lines": [
        "// Line_Reference 2070:         perm_error = False",
        "// Line_Reference 2080:         except OSError as ex:",
        "// Line_Reference 2081:             if ex.errno != errno.EPERM:",
        "// Line_Reference 2082:                 raise",
        "// Line_Reference 2083:             perm_error = True",
        "// Line_Reference 2084: ",
        "// Line_Reference 2095:             if perm_error:",
        "// Line_Reference 2096:                 self.assertEqual(set(child_groups), set(parent_groups))",
        "// Line_Reference 2097:             else:",
        "// Line_Reference 2098:                 self.assertEqual(set(desired_gids), set(child_groups))",
        "// Line_Reference 2100:         # make sure we bomb on negative values",
        "// Line_Reference 2109:         if grp is None:",
        "// Line_Reference 2110:             with self.assertRaises(ValueError):",
        "// Line_Reference 2111:                 subprocess.check_call(ZERO_RETURN_CMD,",
        "// Line_Reference 2112:                                       extra_groups=[name_group])",
        "// Line_Reference 2113: ",
        "// Line_Reference 2114:     @unittest.skipIf(hasattr(os, 'setgroups'), 'setgroups() available on platform')",
        "// Line_Reference 2115:     def test_extra_groups_error(self):",
        "// Line_Reference 2116:         with self.assertRaises(ValueError):",
        "// Line_Reference 2117:             subprocess.check_call(ZERO_RETURN_CMD, extra_groups=[])",
        "// Line_Reference 2118: "
    ]
}
