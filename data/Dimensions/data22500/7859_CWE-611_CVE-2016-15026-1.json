{
    "cve_id": "CVE-2016-15026",
    "cve_description": "A vulnerability was found in 3breadt dd-plist 1.17 and classified as problematic. Affected by this issue is some unknown functionality. The manipulation leads to xml external entity reference. An attack has to be approached locally. Upgrading to version 1.18 is able to address this issue. The patch is identified as 8c954e8d9f6f6863729e50105a8abf3f87fff74c. It is recommended to upgrade the affected component. VDB-221486 is the identifier assigned to this vulnerability.",
    "cve_publish_date": "2023-02-20",
    "cwe_id": "CWE-611",
    "cwe_name": "Improper Restriction of XML External Entity Reference",
    "cwe_description": "The product processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output.",
    "commit_message": "1) Take steps to guard against external XXE attacks (except, note that <!DOCTYPE> cannot be disabled in XML plists).\n2) Resolve the actual PLIST DTD from inside the JAR file itself, and prevent resolution of other external XML resources.\n3) Make XMLPlistParser.getDocBuilder public",
    "type_of_change": "Modification",
    "filename_of_changes": "XMLPropertyListParser.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "54",
    "number_of_lines_deleted_vulnerable_to_cve": "47",
    "vulnerable_lines": [
        "// Line_Reference 47: ",
        "// Line_Reference 48:     private static DocumentBuilderFactory docBuilderFactory = null;",
        "// Line_Reference 49: ",
        "// Line_Reference 50:     /**",
        "// Line_Reference 51:      * Instantiation is prohibited by outside classes.",
        "// Line_Reference 52:      */",
        "// Line_Reference 53:     protected XMLPropertyListParser() {",
        "// Line_Reference 54:         /** empty **/",
        "// Line_Reference 55:     }",
        "// Line_Reference 56: ",
        "// Line_Reference 57:     /**",
        "// Line_Reference 58:      * Initialize the document builder factory so that it can be reused and does not need to",
        "// Line_Reference 59:      * be reinitialized for each parse action.",
        "// Line_Reference 60:      */",
        "// Line_Reference 61:     private static synchronized void initDocBuilderFactory() {",
        "// Line_Reference 62:         docBuilderFactory = DocumentBuilderFactory.newInstance();",
        "// Line_Reference 63:         docBuilderFactory.setIgnoringComments(true);",
        "// Line_Reference 64:         docBuilderFactory.setCoalescing(true);",
        "// Line_Reference 75:     private static synchronized DocumentBuilder getDocBuilder() throws ParserConfigurationException {",
        "// Line_Reference 76:         if (docBuilderFactory == null)",
        "// Line_Reference 77:             initDocBuilderFactory();",
        "// Line_Reference 78:         DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();",
        "// Line_Reference 79:         docBuilder.setEntityResolver(new EntityResolver() {",
        "// Line_Reference 80:             public InputSource resolveEntity(String publicId, String systemId) {",
        "// Line_Reference 81:                 if (\"-//Apple Computer//DTD PLIST 1.0//EN\".equals(publicId) || // older publicId",
        "// Line_Reference 82:                         \"-//Apple//DTD PLIST 1.0//EN\".equals(publicId)) { // newer publicId",
        "// Line_Reference 83:                     // return a dummy, zero length DTD so we don't have to fetch",
        "// Line_Reference 84:                     // it from the network.",
        "// Line_Reference 85:                     return new InputSource(new ByteArrayInputStream(new byte[0]));",
        "// Line_Reference 86:                 }",
        "// Line_Reference 87:                 return null;",
        "// Line_Reference 88:             }",
        "// Line_Reference 89:         });",
        "// Line_Reference 90:         return docBuilder;",
        "// Line_Reference 106:     public static NSObject parse(File f) throws ParserConfigurationException, IOException, SAXException, PropertyListFormatException, ParseException {",
        "// Line_Reference 107:         DocumentBuilder docBuilder = getDocBuilder();",
        "// Line_Reference 108: ",
        "// Line_Reference 109:         Document doc = docBuilder.parse(f);",
        "// Line_Reference 111:         return parse(doc);",
        "// Line_Reference 126:     public static NSObject parse(final byte[] bytes) throws ParserConfigurationException, ParseException, SAXException, PropertyListFormatException, IOException {",
        "// Line_Reference 127:         ByteArrayInputStream bis = new ByteArrayInputStream(bytes);",
        "// Line_Reference 128:         return parse(bis);",
        "// Line_Reference 144:     public static NSObject parse(InputStream is) throws ParserConfigurationException, IOException, SAXException, PropertyListFormatException, ParseException {",
        "// Line_Reference 145:         DocumentBuilder docBuilder = getDocBuilder();",
        "// Line_Reference 146: ",
        "// Line_Reference 147:         Document doc = docBuilder.parse(is);",
        "// Line_Reference 149:         return parse(doc);"
    ]
}
