{
    "cve_id": "CVE-2024-3153",
    "cve_description": "mintplex-labs/anything-llm is affected by an uncontrolled resource consumption vulnerability in its upload file endpoint, leading to a denial of service (DOS) condition. Specifically, the server can be shut down by sending an invalid upload request. An attacker with the ability to upload documents can exploit this vulnerability to cause a DOS condition by manipulating the upload request.",
    "cve_publish_date": "2024-06-06",
    "cwe_id": "CWE-400",
    "cwe_name": "Uncontrolled Resource Consumption",
    "cwe_description": "The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.",
    "commit_message": "Handle no-mutli-part form data error (#1004)",
    "type_of_change": "Modification",
    "filename_of_changes": "multer.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "100",
    "number_of_lines_deleted_vulnerable_to_cve": "57",
    "vulnerable_lines": [
        "// Line_Reference 6: function setupMulter() {",
        "// Line_Reference 7:   // Handle File uploads for auto-uploading.",
        "// Line_Reference 8:   const storage = multer.diskStorage({",
        "// Line_Reference 9:     destination: function (_, __, cb) {",
        "// Line_Reference 10:       const uploadOutput =",
        "// Line_Reference 11:         process.env.NODE_ENV === \"development\"",
        "// Line_Reference 12:           ? path.resolve(__dirname, `../../../collector/hotdir`)",
        "// Line_Reference 13:           : path.resolve(process.env.STORAGE_DIR, `../../collector/hotdir`);",
        "// Line_Reference 14:       cb(null, uploadOutput);",
        "// Line_Reference 15:     },",
        "// Line_Reference 16:     filename: function (_, file, cb) {",
        "// Line_Reference 17:       file.originalname = Buffer.from(file.originalname, \"latin1\").toString(",
        "// Line_Reference 18:         \"utf8\"",
        "// Line_Reference 19:       );",
        "// Line_Reference 20:       cb(null, file.originalname);",
        "// Line_Reference 21:     },",
        "// Line_Reference 22:   });",
        "// Line_Reference 24:   return { handleUploads: multer({ storage }) };",
        "// Line_Reference 25: }",
        "// Line_Reference 27: function setupLogoUploads() {",
        "// Line_Reference 28:   // Handle Logo uploads.",
        "// Line_Reference 29:   const storage = multer.diskStorage({",
        "// Line_Reference 30:     destination: function (_, __, cb) {",
        "// Line_Reference 31:       const uploadOutput =",
        "// Line_Reference 32:         process.env.NODE_ENV === \"development\"",
        "// Line_Reference 33:           ? path.resolve(__dirname, `../../storage/assets`)",
        "// Line_Reference 34:           : path.resolve(process.env.STORAGE_DIR, \"assets\");",
        "// Line_Reference 35:       fs.mkdirSync(uploadOutput, { recursive: true });",
        "// Line_Reference 36:       return cb(null, uploadOutput);",
        "// Line_Reference 37:     },",
        "// Line_Reference 38:     filename: function (_, file, cb) {",
        "// Line_Reference 39:       file.originalname = Buffer.from(file.originalname, \"latin1\").toString(",
        "// Line_Reference 40:         \"utf8\"",
        "// Line_Reference 41:       );",
        "// Line_Reference 42:       cb(null, file.originalname);",
        "// Line_Reference 43:     },",
        "// Line_Reference 44:   });",
        "// Line_Reference 46:   return { handleLogoUploads: multer({ storage }) };",
        "// Line_Reference 49: function setupPfpUploads() {",
        "// Line_Reference 50:   const storage = multer.diskStorage({",
        "// Line_Reference 51:     destination: function (_, __, cb) {",
        "// Line_Reference 52:       const uploadOutput =",
        "// Line_Reference 53:         process.env.NODE_ENV === \"development\"",
        "// Line_Reference 54:           ? path.resolve(__dirname, `../../storage/assets/pfp`)",
        "// Line_Reference 55:           : path.resolve(process.env.STORAGE_DIR, \"assets/pfp\");",
        "// Line_Reference 56:       fs.mkdirSync(uploadOutput, { recursive: true });",
        "// Line_Reference 57:       return cb(null, uploadOutput);",
        "// Line_Reference 58:     },",
        "// Line_Reference 59:     filename: function (req, file, cb) {",
        "// Line_Reference 60:       const randomFileName = `${v4()}${path.extname(file.originalname)}`;",
        "// Line_Reference 61:       req.randomFileName = randomFileName;",
        "// Line_Reference 62:       cb(null, randomFileName);",
        "// Line_Reference 63:     },",
        "// Line_Reference 66:   return { handlePfpUploads: multer({ storage }) };",
        "// Line_Reference 70:   setupMulter,",
        "// Line_Reference 71:   setupLogoUploads,",
        "// Line_Reference 72:   setupPfpUploads,"
    ]
}
