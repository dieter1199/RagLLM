{
    "cve_id": "CVE-2017-6346",
    "cve_description": "Race condition in net/packet/af_packet.c in the Linux kernel before 4.9.13 allows local users to cause a denial of service (use-after-free) or possibly have unspecified other impact via a multithreaded application that makes PACKET_FANOUT setsockopt system calls.",
    "cve_publish_date": "2017-03-01",
    "cwe_id": "CWE-362",
    "cwe_name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
    "cwe_description": "The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.",
    "commit_message": "packet: fix races in fanout_add()\n\nMultiple threads can call fanout_add() at the same time.\n\nWe need to grab fanout_mutex earlier to avoid races that could\nlead to one thread freeing po->rollover that was set by another thread.\n\nDo the same in fanout_release(), for peace of mind, and to help us\nfinding lockdep issues earlier.\n\nFixes: dc99f600698d (\"packet: Add fanout support.\")\nFixes: 0648ab70afe6 (\"packet: rollover prepare: per-socket state\")\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nCc: Willem de Bruijn <willemb@google.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "type_of_change": "Modification",
    "filename_of_changes": "af_packet.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "30",
    "number_of_lines_deleted_vulnerable_to_cve": "25",
    "vulnerable_lines": [
        "// Line_Reference 1645: \t\treturn -EINVAL;",
        "// Line_Reference 1648: \t\treturn -EALREADY;",
        "// Line_Reference 1652: \t\tpo->rollover = kzalloc(sizeof(*po->rollover), GFP_KERNEL);",
        "// Line_Reference 1653: \t\tif (!po->rollover)",
        "// Line_Reference 1654: \t\t\treturn -ENOMEM;",
        "// Line_Reference 1655: \t\tatomic_long_set(&po->rollover->num, 0);",
        "// Line_Reference 1656: \t\tatomic_long_set(&po->rollover->num_huge, 0);",
        "// Line_Reference 1657: \t\tatomic_long_set(&po->rollover->num_failed, 0);",
        "// Line_Reference 1660: \tmutex_lock(&fanout_mutex);",
        "// Line_Reference 1707: \tmutex_unlock(&fanout_mutex);",
        "// Line_Reference 1708: \tif (err) {",
        "// Line_Reference 1709: \t\tkfree(po->rollover);",
        "// Line_Reference 1720: \tf = po->fanout;",
        "// Line_Reference 1721: \tif (!f)",
        "// Line_Reference 1722: \t\treturn;",
        "// Line_Reference 1723: ",
        "// Line_Reference 1725: \tpo->fanout = NULL;",
        "// Line_Reference 1727: \tif (atomic_dec_and_test(&f->sk_ref)) {",
        "// Line_Reference 1728: \t\tlist_del(&f->list);",
        "// Line_Reference 1729: \t\tdev_remove_pack(&f->prot_hook);",
        "// Line_Reference 1730: \t\tfanout_release_data(f);",
        "// Line_Reference 1731: \t\tkfree(f);",
        "// Line_Reference 1734: ",
        "// Line_Reference 1735: \tif (po->rollover)",
        "// Line_Reference 1736: \t\tkfree_rcu(po->rollover, rcu);"
    ]
}
