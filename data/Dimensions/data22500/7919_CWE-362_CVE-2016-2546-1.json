{
    "cve_id": "CVE-2016-2546",
    "cve_description": "sound/core/timer.c in the Linux kernel before 4.4.1 uses an incorrect type of mutex, which allows local users to cause a denial of service (race condition, use-after-free, and system crash) via a crafted ioctl call.",
    "cve_publish_date": "2016-04-27",
    "cwe_id": "CWE-362",
    "cwe_name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
    "cwe_description": "The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.",
    "commit_message": "ALSA: timer: Fix race among timer ioctls\n\nALSA timer ioctls have an open race and this may lead to a\nuse-after-free of timer instance object.  A simplistic fix is to make\neach ioctl exclusive.  We have already tread_sem for controlling the\ntread, and extend this as a global mutex to be applied to each ioctl.\n\nThe downside is, of course, the worse concurrency.  But these ioctls\naren't to be parallel accessible, in anyway, so it should be fine to\nserialize there.\n\nReported-by: Dmitry Vyukov <dvyukov@google.com>\nTested-by: Dmitry Vyukov <dvyukov@google.com>\nCc: <stable@vger.kernel.org>\nSigned-off-by: Takashi Iwai <tiwai@suse.de>",
    "type_of_change": "Modification",
    "filename_of_changes": "timer.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "19",
    "number_of_lines_deleted_vulnerable_to_cve": "13",
    "vulnerable_lines": [
        "// Line_Reference 76: \tstruct mutex tread_sem;",
        "// Line_Reference 1256: \tmutex_init(&tu->tread_sem);",
        "// Line_Reference 1515: \tmutex_lock(&tu->tread_sem);",
        "// Line_Reference 1559:       \tmutex_unlock(&tu->tread_sem);",
        "// Line_Reference 1772: static long snd_timer_user_ioctl(struct file *file, unsigned int cmd,",
        "// Line_Reference 1789: \t\tmutex_lock(&tu->tread_sem);",
        "// Line_Reference 1790: \t\tif (tu->timeri)\t{\t/* too late */",
        "// Line_Reference 1791: \t\t\tmutex_unlock(&tu->tread_sem);",
        "// Line_Reference 1793: \t\t}",
        "// Line_Reference 1794: \t\tif (get_user(xarg, p)) {",
        "// Line_Reference 1795: \t\t\tmutex_unlock(&tu->tread_sem);",
        "// Line_Reference 1797: \t\t}",
        "// Line_Reference 1799: \t\tmutex_unlock(&tu->tread_sem);"
    ]
}
