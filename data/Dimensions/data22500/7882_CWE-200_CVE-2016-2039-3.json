{
    "cve_id": "CVE-2016-2039",
    "cve_description": "libraries/session.inc.php in phpMyAdmin 4.0.x before 4.0.10.13, 4.4.x before 4.4.15.3, and 4.5.x before 4.5.4 does not properly generate CSRF token values, which allows remote attackers to bypass intended access restrictions by predicting a value.",
    "cve_publish_date": "2016-02-20",
    "cwe_id": "CWE-200",
    "cwe_name": "Exposure of Sensitive Information to an Unauthorized Actor",
    "cwe_description": "The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.",
    "commit_message": "Update phpseclib to 2.0.1\n\nNew version uses PHP 7.0 random_bytes to generate cryptographically secure\npseudo-random bytes.\n\nSigned-off-by: Michal Čihař <michal@cihar.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "Rijndael.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "63",
    "number_of_lines_deleted_vulnerable_to_cve": "162",
    "vulnerable_lines": [
        "// Line_Reference 10:  * If {@link \\phpseclib\\Crypt\\Rijndael::setBlockLength() setBlockLength()} isn't called, it'll be assumed to be 128 bits.  If",
        "// Line_Reference 11:  * {@link \\phpseclib\\Crypt\\Rijndael::setKeyLength() setKeyLength()} isn't called, it'll be calculated from",
        "// Line_Reference 12:  * {@link \\phpseclib\\Crypt\\Rijndael::setKey() setKey()}.  ie. if the key is 128-bits, the key length will be 128-bits.  If it's",
        "// Line_Reference 14:  * {@link \\phpseclib\\Crypt\\Rijndael::setKey() setKey()} is called, again, at which point, it'll be recalculated.",
        "// Line_Reference 68:     /**",
        "// Line_Reference 69:      * The default password key_size used by setPassword()",
        "// Line_Reference 70:      *",
        "// Line_Reference 71:      * @see \\phpseclib\\Crypt\\Base::password_key_size",
        "// Line_Reference 72:      * @see \\phpseclib\\Crypt\\Base::setPassword()",
        "// Line_Reference 73:      * @var Integer",
        "// Line_Reference 74:      * @access private",
        "// Line_Reference 75:      */",
        "// Line_Reference 76:     var $password_key_size = 16;",
        "// Line_Reference 77: ",
        "// Line_Reference 81:      * Mcrypt is useable for 128/192/256-bit $block_size/$key_size. For 160/224 not.",
        "// Line_Reference 83:      * or not for the current $block_size/$key_size.",
        "// Line_Reference 88:      * @see isValidEngine()",
        "// Line_Reference 89:      * @var String",
        "// Line_Reference 99:      * @var String",
        "// Line_Reference 104:     /**",
        "// Line_Reference 105:      * Has the key length explicitly been set or should it be derived from the key, itself?",
        "// Line_Reference 106:      *",
        "// Line_Reference 107:      * @see setKeyLength()",
        "// Line_Reference 108:      * @var Boolean",
        "// Line_Reference 109:      * @access private",
        "// Line_Reference 110:      */",
        "// Line_Reference 111:     var $explicit_key_length = false;",
        "// Line_Reference 112: ",
        "// Line_Reference 116:      * @see _setup()",
        "// Line_Reference 117:      * @var Array",
        "// Line_Reference 125:      * @see _setup()",
        "// Line_Reference 126:      * @var Array",
        "// Line_Reference 134:      * @see setBlockLength()",
        "// Line_Reference 135:      * @var Integer",
        "// Line_Reference 145:      * The Key Length",
        "// Line_Reference 147:      * @see setKeyLength()",
        "// Line_Reference 148:      * @var Integer",
        "// Line_Reference 151:      *    because the encryption / decryption / key schedule creation requires this number and not $key_size.  We could",
        "// Line_Reference 152:      *    derive this from $key_size or vice versa, but that'd mean we'd have to do multiple shift operations, so in lieu",
        "// Line_Reference 155:     var $key_size = 16;",
        "// Line_Reference 160:      * @see setKeyLength()",
        "// Line_Reference 161:      * @var Integer",
        "// Line_Reference 170:      * @var Integer",
        "// Line_Reference 179:      * @var Array",
        "// Line_Reference 187:      * @var Array",
        "// Line_Reference 193:      * Default Constructor.",
        "// Line_Reference 194:      *",
        "// Line_Reference 195:      * Determines whether or not the mcrypt extension should be used.",
        "// Line_Reference 196:      *",
        "// Line_Reference 197:      * $mode could be:",
        "// Line_Reference 198:      *",
        "// Line_Reference 199:      * - \\phpseclib\\Crypt\\Base::MODE_ECB",
        "// Line_Reference 200:      *",
        "// Line_Reference 201:      * - \\phpseclib\\Crypt\\Base::MODE_CBC",
        "// Line_Reference 202:      *",
        "// Line_Reference 203:      * - \\phpseclib\\Crypt\\Base::MODE_CTR",
        "// Line_Reference 204:      *",
        "// Line_Reference 205:      * - \\phpseclib\\Crypt\\Base::MODE_CFB",
        "// Line_Reference 206:      *",
        "// Line_Reference 207:      * - \\phpseclib\\Crypt\\Base::MODE_OFB",
        "// Line_Reference 208:      *",
        "// Line_Reference 209:      * If not explictly set, \\phpseclib\\Crypt\\Base::MODE_CBC will be used.",
        "// Line_Reference 210:      *",
        "// Line_Reference 211:      * @see \\phpseclib\\Crypt\\Base::Crypt_Base()",
        "// Line_Reference 212:      * @param optional Integer $mode",
        "// Line_Reference 213:      * @access public",
        "// Line_Reference 214: ",
        "// Line_Reference 215:     /**",
        "// Line_Reference 216:      * Sets the key.",
        "// Line_Reference 217:      *",
        "// Line_Reference 218:      * Keys can be of any length.  Rijndael, itself, requires the use of a key that's between 128-bits and 256-bits long and",
        "// Line_Reference 219:      * whose length is a multiple of 32.  If the key is less than 256-bits and the key length isn't set, we round the length",
        "// Line_Reference 220:      * up to the closest valid key length, padding $key with null bytes.  If the key is more than 256-bits, we trim the",
        "// Line_Reference 221:      * excess bits.",
        "// Line_Reference 222:      *",
        "// Line_Reference 223:      * If the key is not explicitly set, it'll be assumed to be all null bytes.",
        "// Line_Reference 224:      *",
        "// Line_Reference 225:      * Note: 160/224-bit keys must explicitly set by setKeyLength(), otherwise they will be round/pad up to 192/256 bits.",
        "// Line_Reference 226:      *",
        "// Line_Reference 227:      * @see \\phpseclib\\Crypt\\Base:setKey()",
        "// Line_Reference 228:      * @see setKeyLength()",
        "// Line_Reference 229:      * @access public",
        "// Line_Reference 230:      * @param String $key",
        "// Line_Reference 231:      */",
        "// Line_Reference 232:     function setKey($key)",
        "// Line_Reference 233:     {",
        "// Line_Reference 234:         if (!$this->explicit_key_length) {",
        "// Line_Reference 235:             $length = strlen($key);",
        "// Line_Reference 236:             switch (true) {",
        "// Line_Reference 237:                 case $length <= 16:",
        "// Line_Reference 238:                     $this->key_size = 16;",
        "// Line_Reference 239:                     break;",
        "// Line_Reference 240:                 case $length <= 20:",
        "// Line_Reference 241:                     $this->key_size = 20;",
        "// Line_Reference 242:                     break;",
        "// Line_Reference 243:                 case $length <= 24:",
        "// Line_Reference 244:                     $this->key_size = 24;",
        "// Line_Reference 245:                     break;",
        "// Line_Reference 246:                 case $length <= 28:",
        "// Line_Reference 247:                     $this->key_size = 28;",
        "// Line_Reference 248:                     break;",
        "// Line_Reference 249:                 default:",
        "// Line_Reference 250:                     $this->key_size = 32;",
        "// Line_Reference 251:             }",
        "// Line_Reference 252:         }",
        "// Line_Reference 253:         parent::setKey($key);",
        "// Line_Reference 254:     }",
        "// Line_Reference 255: ",
        "// Line_Reference 256:     /**",
        "// Line_Reference 257:      * Sets the key length",
        "// Line_Reference 274:      * @param Integer $length",
        "// Line_Reference 279:             case $length == 160:",
        "// Line_Reference 280:                 $this->key_size = 20;",
        "// Line_Reference 281:                 break;",
        "// Line_Reference 282:             case $length == 224:",
        "// Line_Reference 283:                 $this->key_size = 28;",
        "// Line_Reference 284:                 break;",
        "// Line_Reference 286:                 $this->key_size = 16;",
        "// Line_Reference 289:                 $this->key_size = 24;",
        "// Line_Reference 292:                 $this->key_size = 32;",
        "// Line_Reference 295:         $this->explicit_key_length = true;",
        "// Line_Reference 296:         $this->changed = true;",
        "// Line_Reference 297:         $this->_setEngine();",
        "// Line_Reference 307:      * @param Integer $length",
        "// Line_Reference 328:      * @see \\phpseclib\\Crypt\\Base::Crypt_Base()",
        "// Line_Reference 329:      * @param Integer $engine",
        "// Line_Reference 331:      * @return Boolean",
        "// Line_Reference 340:                 $this->cipher_name_openssl_ecb = 'aes-' . ($this->key_size << 3) . '-ecb';",
        "// Line_Reference 341:                 $this->cipher_name_openssl = 'aes-' . ($this->key_size << 3) . '-' . $this->_openssl_translate_mode();",
        "// Line_Reference 345:                 if ($this->key_size % 8) { // is it a 160/224-bit key?",
        "// Line_Reference 354:     /**",
        "// Line_Reference 355:      * Setup the \\phpseclib\\Crypt\\Base::ENGINE_MCRYPT $engine",
        "// Line_Reference 356:      *",
        "// Line_Reference 357:      * @see \\phpseclib\\Crypt\\Base::_setupMcrypt()",
        "// Line_Reference 358:      * @access private",
        "// Line_Reference 359:      */",
        "// Line_Reference 360:     function _setupMcrypt()",
        "// Line_Reference 361:     {",
        "// Line_Reference 362:         $this->key = str_pad(substr($this->key, 0, $this->key_size), $this->key_size, \"\\0\");",
        "// Line_Reference 363:         parent::_setupMcrypt();",
        "// Line_Reference 364:     }",
        "// Line_Reference 365: ",
        "// Line_Reference 370:      * @param String $in",
        "// Line_Reference 371:      * @return String",
        "// Line_Reference 471:      * @param String $in",
        "// Line_Reference 472:      * @return String",
        "// Line_Reference 576:         $this->key = str_pad(substr($this->key, 0, $this->key_size), $this->key_size, \"\\0\");",
        "// Line_Reference 577: ",
        "// Line_Reference 578:         if (isset($this->kl['key']) && $this->key === $this->kl['key'] && $this->key_size === $this->kl['key_size'] && $this->block_size === $this->kl['block_size']) {",
        "// Line_Reference 582:         $this->kl = array('key' => $this->key, 'key_size' => $this->key_size, 'block_size' => $this->block_size);",
        "// Line_Reference 584:         $this->Nk = $this->key_size >> 2;",
        "// Line_Reference 676:      * @param Integer $word",
        "// Line_Reference 682:             list(,,,, $sbox) = $this->_getTables();",
        "// Line_Reference 694:      * @see Crypt_Rijndael:_encryptBlock()",
        "// Line_Reference 695:      * @see Crypt_Rijndael:_setupInlineCrypt()",
        "// Line_Reference 696:      * @see Crypt_Rijndael:_subWord()",
        "// Line_Reference 698:      * @return Array &$tables",
        "// Line_Reference 783:      * @see Crypt_Rijndael:_decryptBlock()",
        "// Line_Reference 784:      * @see Crypt_Rijndael:_setupInlineCrypt()",
        "// Line_Reference 785:      * @see Crypt_Rijndael:_setupKey()",
        "// Line_Reference 787:      * @return Array &$tables",
        "// Line_Reference 881:         $gen_hi_opt_code = (bool)( count($lambda_functions) < 10 );"
    ]
}
