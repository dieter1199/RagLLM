{
    "cve_id": "CVE-2014-9765",
    "cve_description": "Buffer overflow in the main_get_appheader function in xdelta3-main.h in xdelta3 before 3.0.9 allows remote attackers to execute arbitrary code via a crafted input file.",
    "cve_publish_date": "2016-04-19",
    "cwe_id": "CWE-119",
    "cwe_name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
    "cwe_description": "The product performs operations on a memory buffer, but it reads from or writes to a memory location outside the buffer's intended boundary. This may result in read or write operations on unexpected memory locations that could be linked to other variables, data structures, or internal program data.",
    "commit_message": "Add appheader tests; fix buffer overflow in main_get_appheader",
    "type_of_change": "Modification",
    "filename_of_changes": "xdelta3-test.h",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "105",
    "number_of_lines_deleted_vulnerable_to_cve": "26",
    "vulnerable_lines": [
        "// Line_Reference 2:  * 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012.",
        "// Line_Reference 57: \t(1812433253UL * (mt->mt_buffer_[i-1] ^",
        "// Line_Reference 72:       y = (mt->mt_buffer_[kk] & UPPER_MASK) |",
        "// Line_Reference 74:       mt->mt_buffer_[kk] = mt->mt_buffer_[kk + MT_IA] ^",
        "// Line_Reference 78:       y = (mt->mt_buffer_[kk] & UPPER_MASK) |",
        "// Line_Reference 80:       mt->mt_buffer_[kk] = mt->mt_buffer_[kk + (MT_IA - MT_LEN)] ^",
        "// Line_Reference 83:     y = (mt->mt_buffer_[MT_LEN - 1] & UPPER_MASK) |",
        "// Line_Reference 85:     mt->mt_buffer_[MT_LEN - 1] = mt->mt_buffer_[MT_IA - 1] ^",
        "// Line_Reference 169:       return XD3_INTERNAL;",
        "// Line_Reference 260:   usize_t ts = (mt_random (&static_mtrand) % TEST_FILE_MEAN) + TEST_FILE_MEAN / 2;",
        "// Line_Reference 261:   usize_t ss = (mt_random (&static_mtrand) % TEST_FILE_MEAN) + TEST_FILE_MEAN / 2;",
        "// Line_Reference 412: \t      XPR(NT \"byte %u (read %u @ %\"Q\"u) %d != %d\\n\",",
        "// Line_Reference 424:     if (diffs != 0)",
        "// Line_Reference 432: test_save_copy (const char *origname)",
        "// Line_Reference 437:   snprintf_func (buf, TESTBUFSIZE, \"cp -f %s %s\", origname, TEST_COPY_FILE);",
        "// Line_Reference 502:   if ((ret = xd3_read_uint32_t (stream, & inp, max, & rval)) !=",
        "// Line_Reference 1657:   for (i = 0; i < (2 << 20); i += 256)",
        "// Line_Reference 1661:       for (j = 0; j < 256; j++)",
        "// Line_Reference 1686:   if ((ret = test_streaming (stream,",
        "// Line_Reference 1687: \t\t\t     buf,",
        "// Line_Reference 1688: \t\t\t     buf + (1 << 20),",
        "// Line_Reference 1689: \t\t\t     buf + (2 << 20),",
        "// Line_Reference 1690: \t\t\t     1 << 12)))",
        "// Line_Reference 1892:   snprintf_func (ecmd, TESTBUFSIZE, \"%s %s -f %s %s %s %s %s %s %s\",",
        "// Line_Reference 1913: \t    !change_apphead ? \"\" :",
        "// Line_Reference 2606: \t  snprintf_func (rptr, rbuf+TESTBUFSIZE-rptr, \"%d/%d\","
    ]
}
