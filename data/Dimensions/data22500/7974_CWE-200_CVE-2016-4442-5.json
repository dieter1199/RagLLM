{
    "cve_id": "CVE-2016-4442",
    "cve_description": "The rack-mini-profiler gem before 0.10.1 for Ruby allows remote attackers to obtain sensitive information about allocated strings and objects by leveraging incorrect ordering of security checks.",
    "cve_publish_date": "2017-05-02",
    "cwe_id": "CWE-200",
    "cwe_name": "Exposure of Sensitive Information to an Unauthorized Actor",
    "cwe_description": "The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.",
    "commit_message": "FEATURE: perform security checks earlier in the pipeline\n\nThis avoids needing to discard results and ensures no areas of mini profiler\ncan execute prior to a request being authorized\n\nauthorization token lasts for 30 minutes and is cycled after that",
    "type_of_change": "Modification",
    "filename_of_changes": "profiler.rb",
    "code_language": "Ruby",
    "number_of_lines_added_for_mitigation": "21",
    "number_of_lines_deleted_vulnerable_to_cve": "34",
    "vulnerable_lines": [
        "// Line_Reference 152:       client_settings = ClientSettings.new(env)",
        "// Line_Reference 165:       has_profiling_cookie = client_settings.has_cookie?",
        "// Line_Reference 166: ",
        "// Line_Reference 167:       if skip_it || (@config.authorization_mode == :whitelist && !has_profiling_cookie)",
        "// Line_Reference 168:         status,headers,body = @app.call(env)",
        "// Line_Reference 169:         if !skip_it && @config.authorization_mode == :whitelist && !has_profiling_cookie && MiniProfiler.request_authorized?",
        "// Line_Reference 170:           client_settings.write!(headers)",
        "// Line_Reference 171:         end",
        "// Line_Reference 172:         return [status,headers,body]",
        "// Line_Reference 176:       return serve_html(env) if path.start_with? @config.base_url_path",
        "// Line_Reference 184:       if query_string =~ /pp=enable/ && (@config.authorization_mode != :whitelist || MiniProfiler.request_authorized?)",
        "// Line_Reference 192:         client_settings.write!(headers)",
        "// Line_Reference 193:         return [status,headers,body]",
        "// Line_Reference 201:         return Rack::MiniProfiler::GCProfiler.new.profile_gc(@app, env)",
        "// Line_Reference 218:         return text_result(result.string)",
        "// Line_Reference 222:       MiniProfiler.deauthorize_request if @config.authorization_mode == :whitelist",
        "// Line_Reference 241:       start = Time.now",
        "// Line_Reference 284:         client_settings.write!(headers)",
        "// Line_Reference 292:         # this is non-obvious, don't kill the profiling cookie on errors or short requests",
        "// Line_Reference 293:         # this ensures that stuff that never reaches the rails stack does not kill profiling",
        "// Line_Reference 294:         if status.to_i >= 200 && status.to_i < 300 && ((Time.now - start) > 0.1)",
        "// Line_Reference 295:           client_settings.discard_cookie!(headers)",
        "// Line_Reference 296:         end",
        "// Line_Reference 300:       return [status,headers,body] if skip_it",
        "// Line_Reference 305:         return dump_exceptions exceptions",
        "// Line_Reference 310:         return dump_env env",
        "// Line_Reference 315:         return analyze_memory",
        "// Line_Reference 320:         return help(client_settings, env)",
        "// Line_Reference 329:         return self.flamegraph(flamegraph)",
        "// Line_Reference 340:           client_settings.write!(headers)",
        "// Line_Reference 342:           return result if result",
        "// Line_Reference 350:       client_settings.write!(headers)",
        "// Line_Reference 351:       [status, headers, body]",
        "// Line_Reference 546:       client_settings.write!(headers)"
    ]
}
