{
    "cve_id": "CVE-2015-8952",
    "cve_description": "The mbcache feature in the ext2 and ext4 filesystem implementations in the Linux kernel before 4.6 mishandles xattr block caching, which allows local users to cause a denial of service (soft lockup) via filesystem operations in environments that use many attributes, as demonstrated by Ceph and Samba.",
    "cve_publish_date": "2016-10-16",
    "cwe_id": "CWE-19",
    "cwe_name": "Data Processing Errors",
    "cwe_description": "Weaknesses in this category are typically found in functionality that processes data. Data processing is the manipulation of input to retrieve or save information.",
    "commit_message": "ext4: convert to mbcache2\n\nThe conversion is generally straightforward. The only tricky part is\nthat xattr block corresponding to found mbcache entry can get freed\nbefore we get buffer lock for that block. So we have to check whether\nthe entry is still valid after getting buffer lock.\n\nSigned-off-by: Jan Kara <jack@suse.cz>\nSigned-off-by: Theodore Ts'o <tytso@mit.edu>",
    "type_of_change": "Modification",
    "filename_of_changes": "xattr.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "67",
    "number_of_lines_deleted_vulnerable_to_cve": "69",
    "vulnerable_lines": [
        "// Line_Reference 56: #include <linux/mbcache.h>",
        "// Line_Reference 81: static void ext4_xattr_cache_insert(struct mb_cache *, struct buffer_head *);",
        "// Line_Reference 84: \t\t\t\t\t\t struct mb_cache_entry **);",
        "// Line_Reference 279: \tstruct mb_cache *ext4_mb_cache = EXT4_GET_MB_CACHE(inode);",
        "// Line_Reference 431: \tstruct mb_cache *ext4_mb_cache = EXT4_GET_MB_CACHE(inode);",
        "// Line_Reference 548: \tstruct mb_cache_entry *ce = NULL;",
        "// Line_Reference 550: \tstruct mb_cache *ext4_mb_cache = EXT4_GET_MB_CACHE(inode);",
        "// Line_Reference 552: \tce = mb_cache_entry_get(ext4_mb_cache, bh->b_bdev, bh->b_blocknr);",
        "// Line_Reference 561: \t\tif (ce)",
        "// Line_Reference 562: \t\t\tmb_cache_entry_free(ce);",
        "// Line_Reference 570: \t\tif (ce)",
        "// Line_Reference 571: \t\t\tmb_cache_entry_release(ce);",
        "// Line_Reference 784: \tstruct mb_cache_entry *ce = NULL;",
        "// Line_Reference 786: \tstruct mb_cache *ext4_mb_cache = EXT4_GET_MB_CACHE(inode);",
        "// Line_Reference 793: \t\tce = mb_cache_entry_get(ext4_mb_cache, bs->bh->b_bdev,",
        "// Line_Reference 794: \t\t\t\t\tbs->bh->b_blocknr);",
        "// Line_Reference 802: \t\t\tif (ce) {",
        "// Line_Reference 803: \t\t\t\tmb_cache_entry_free(ce);",
        "// Line_Reference 804: \t\t\t\tce = NULL;",
        "// Line_Reference 805: \t\t\t}",
        "// Line_Reference 829: \t\t\tif (ce) {",
        "// Line_Reference 830: \t\t\t\tmb_cache_entry_release(ce);",
        "// Line_Reference 831: \t\t\t\tce = NULL;",
        "// Line_Reference 832: \t\t\t}",
        "// Line_Reference 897: \t\t\tmb_cache_entry_release(ce);",
        "// Line_Reference 962: \t\tmb_cache_entry_release(ce);",
        "// Line_Reference 1514: /*",
        "// Line_Reference 1515:  * ext4_xattr_put_super()",
        "// Line_Reference 1516:  *",
        "// Line_Reference 1517:  * This is called when a file system is unmounted.",
        "// Line_Reference 1518:  */",
        "// Line_Reference 1519: void",
        "// Line_Reference 1520: ext4_xattr_put_super(struct super_block *sb)",
        "// Line_Reference 1521: {",
        "// Line_Reference 1522: \tmb_cache_shrink(sb->s_bdev);",
        "// Line_Reference 1523: }",
        "// Line_Reference 1524: ",
        "// Line_Reference 1534: ext4_xattr_cache_insert(struct mb_cache *ext4_mb_cache, struct buffer_head *bh)",
        "// Line_Reference 1537: \tstruct mb_cache_entry *ce;",
        "// Line_Reference 1540: \tce = mb_cache_entry_alloc(ext4_mb_cache, GFP_NOFS);",
        "// Line_Reference 1541: \tif (!ce) {",
        "// Line_Reference 1542: \t\tea_bdebug(bh, \"out of memory\");",
        "// Line_Reference 1543: \t\treturn;",
        "// Line_Reference 1544: \t}",
        "// Line_Reference 1545: \terror = mb_cache_entry_insert(ce, bh->b_bdev, bh->b_blocknr, hash);",
        "// Line_Reference 1547: \t\tmb_cache_entry_free(ce);",
        "// Line_Reference 1548: \t\tif (error == -EBUSY) {",
        "// Line_Reference 1550: \t\t\terror = 0;",
        "// Line_Reference 1551: \t\t}",
        "// Line_Reference 1552: \t} else {",
        "// Line_Reference 1554: \t\tmb_cache_entry_release(ce);",
        "// Line_Reference 1555: \t}",
        "// Line_Reference 1608: \t\t      struct mb_cache_entry **pce)",
        "// Line_Reference 1611: \tstruct mb_cache_entry *ce;",
        "// Line_Reference 1612: \tstruct mb_cache *ext4_mb_cache = EXT4_GET_MB_CACHE(inode);",
        "// Line_Reference 1617: again:",
        "// Line_Reference 1618: \tce = mb_cache_entry_find_first(ext4_mb_cache, inode->i_sb->s_bdev,",
        "// Line_Reference 1619: \t\t\t\t       hash);",
        "// Line_Reference 1623: \t\tif (IS_ERR(ce)) {",
        "// Line_Reference 1624: \t\t\tif (PTR_ERR(ce) == -EAGAIN)",
        "// Line_Reference 1625: \t\t\t\tgoto again;",
        "// Line_Reference 1626: \t\t\tbreak;",
        "// Line_Reference 1627: \t\t}",
        "// Line_Reference 1643: \t\tce = mb_cache_entry_find_next(ce, inode->i_sb->s_bdev, hash);",
        "// Line_Reference 1718: struct mb_cache *",
        "// Line_Reference 1719: ext4_xattr_create_cache(char *name)",
        "// Line_Reference 1721: \treturn mb_cache_create(name, HASH_BUCKET_BITS);",
        "// Line_Reference 1724: void ext4_xattr_destroy_cache(struct mb_cache *cache)",
        "// Line_Reference 1727: \t\tmb_cache_destroy(cache);"
    ]
}
