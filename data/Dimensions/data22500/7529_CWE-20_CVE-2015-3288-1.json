{
    "cve_id": "CVE-2015-3288",
    "cve_description": "mm/memory.c in the Linux kernel before 4.1.4 mishandles anonymous pages, which allows local users to gain privileges or cause a denial of service (page tainting) via a crafted application that triggers writing to page zero.",
    "cve_publish_date": "2016-10-16",
    "cwe_id": "CWE-20",
    "cwe_name": "Improper Input Validation",
    "cwe_description": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.",
    "commit_message": "mm: avoid setting up anonymous pages into file mapping\n\nReading page fault handler code I've noticed that under right\ncircumstances kernel would map anonymous pages into file mappings: if\nthe VMA doesn't have vm_ops->fault() and the VMA wasn't fully populated\non ->mmap(), kernel would handle page fault to not populated pte with\ndo_anonymous_page().\n\nLet's change page fault handler to use do_anonymous_page() only on\nanonymous VMA (->vm_ops == NULL) and make sure that the VMA is not\nshared.\n\nFor file mappings without vm_ops->fault() or shred VMA without vm_ops,\npage fault on pte_none() entry would lead to SIGBUS.\n\nSigned-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>\nAcked-by: Oleg Nesterov <oleg@redhat.com>\nCc: Andrew Morton <akpm@linux-foundation.org>\nCc: Willy Tarreau <w@1wt.eu>\nCc: stable@vger.kernel.org\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "memory.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "13",
    "number_of_lines_deleted_vulnerable_to_cve": "7",
    "vulnerable_lines": [
        "// Line_Reference 3247: \t\t\tif (vma->vm_ops) {",
        "// Line_Reference 3248: \t\t\t\tif (likely(vma->vm_ops->fault))",
        "// Line_Reference 3249: \t\t\t\t\treturn do_fault(mm, vma, address, pte,",
        "// Line_Reference 3250: \t\t\t\t\t\t\tpmd, flags, entry);",
        "// Line_Reference 3251: \t\t\t}",
        "// Line_Reference 3252: \t\t\treturn do_anonymous_page(mm, vma, address,",
        "// Line_Reference 3253: \t\t\t\t\t\t pte, pmd, flags);"
    ]
}
