{
    "cve_id": "CVE-2022-45962",
    "cve_description": "Open Solutions for Education, Inc openSIS Community Edition v8.0 and earlier is vulnerable to SQL Injection via CalendarModal.php.",
    "cve_publish_date": "2023-02-13",
    "cwe_id": "CWE-89",
    "cwe_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
    "cwe_description": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.",
    "commit_message": "Version 9.0 release\n\nOlder version shifted to branch: Version_8.0",
    "type_of_change": "ModificationType.ADD",
    "filename_of_changes": "Calculation.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "16",
    "number_of_lines_deleted_vulnerable_to_cve": "16",
    "vulnerable_lines": [
        "// Line_Reference 2025: \t\t\tif ((strlen($value) > 0) && ($value{0} == '\"') && (substr($value,-1) == '\"')) {",
        "// Line_Reference 2133: \t\tif ((strlen($formula) == 0) || ($formula{0} != '=')) return array();",
        "// Line_Reference 2189: \t\tif ($formula{0} != '=') return self::_wrapResult($formula);",
        "// Line_Reference 2482: \t\t\t\t} elseif ($value{0} == '#') {",
        "// Line_Reference 2605: \t\t\t$opCharacter = $formula{$index};\t//\tGet the first character of the value at the current index position",
        "// Line_Reference 2607: \t\t\tif ((in_array($opCharacter, $comparisonOperators)) && (strlen($formula) > $index) && (in_array($formula{$index+1}, $comparisonOperators))) {",
        "// Line_Reference 2608: \t\t\t\t$opCharacter .= $formula{++$index};",
        "// Line_Reference 2835: \t\t\twhile (($formula{$index} == \"\\n\") || ($formula{$index} == \"\\r\")) {",
        "// Line_Reference 2838: \t\t\tif ($formula{$index} == ' ') {",
        "// Line_Reference 2839: \t\t\t\twhile ($formula{$index} == ' ') {",
        "// Line_Reference 2861: \t\t\tif ($opCharacter['value'] == '(') return $this->_raiseFormulaError(\"Formula Error: Expecting ')'\");\t// if there are any opening braces on the stack, then braces were unbalanced",
        "// Line_Reference 3223: \t\t\t\t} elseif ((is_numeric($token)) || (is_bool($token)) || (is_null($token)) || ($token == '') || ($token{0} == '\"') || ($token{0} == '#')) {",
        "// Line_Reference 3258: \t\t\tif ($operand > '' && $operand{0} == '\"') { $operand = self::_unwrapResult($operand); }",
        "// Line_Reference 3262: \t\t\t\tif ($operand > '' && $operand{0} == '#') {",
        "// Line_Reference 3315: \t\tif (is_string($operand1) && $operand1 > '' && $operand1{0} == '\"') { $operand1 = self::_unwrapResult($operand1); }",
        "// Line_Reference 3316: \t\tif (is_string($operand2) && $operand2 > '' && $operand2{0} == '\"') { $operand2 = self::_unwrapResult($operand2); }"
    ]
}
