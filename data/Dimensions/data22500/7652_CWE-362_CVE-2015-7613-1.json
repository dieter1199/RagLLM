{
    "cve_id": "CVE-2015-7613",
    "cve_description": "Race condition in the IPC object implementation in the Linux kernel through 4.2.3 allows local users to gain privileges by triggering an ipc_addid call that leads to uid and gid comparisons against uninitialized data, related to msg.c, shm.c, and util.c.",
    "cve_publish_date": "2015-10-19",
    "cwe_id": "CWE-362",
    "cwe_name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
    "cwe_description": "The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.",
    "commit_message": "Initialize msg/shm IPC objects before doing ipc_addid()\n\nAs reported by Dmitry Vyukov, we really shouldn't do ipc_addid() before\nhaving initialized the IPC object state.  Yes, we initialize the IPC\nobject in a locked state, but with all the lockless RCU lookup work,\nthat IPC object lock no longer means that the state cannot be seen.\n\nWe already did this for the IPC semaphore code (see commit e8577d1f0329:\n\"ipc/sem.c: fully initialize sem_array before making it visible\") but we\nclearly forgot about msg and shm.\n\nReported-by: Dmitry Vyukov <dvyukov@google.com>\nCc: Manfred Spraul <manfred@colorfullife.com>\nCc: Davidlohr Bueso <dbueso@suse.de>\nCc: stable@vger.kernel.org\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "msg.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "7",
    "number_of_lines_deleted_vulnerable_to_cve": "7",
    "vulnerable_lines": [
        "// Line_Reference 140: \t/* ipc_addid() locks msq upon success. */",
        "// Line_Reference 141: \tid = ipc_addid(&msg_ids(ns), &msq->q_perm, ns->msg_ctlmni);",
        "// Line_Reference 142: \tif (id < 0) {",
        "// Line_Reference 143: \t\tipc_rcu_putref(msq, msg_rcu_free);",
        "// Line_Reference 144: \t\treturn id;",
        "// Line_Reference 145: \t}",
        "// Line_Reference 146: "
    ]
}
