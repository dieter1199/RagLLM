{
    "cve_id": "CVE-2024-34360",
    "cve_description": "go-spacemesh is a Go implementation of the Spacemesh protocol full node. Nodes can publish activations transactions (ATXs) which reference the incorrect previous ATX of the Smesher that created the ATX. ATXs are expected to form a single chain from the newest to the first ATX ever published by an identity. Allowing Smeshers to reference an earlier (but not the latest) ATX as previous breaks this protocol rule and can serve as an attack vector where Nodes are rewarded for holding their PoST data for less than one epoch but still being eligible for rewards. This vulnerability is fixed in go-spacemesh 1.5.2-hotfix1 and Spacemesh API 1.37.1.",
    "cve_publish_date": "2024-05-14",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Verify that previous ATX points to correct ATX when handling incoming ATXs (#27)\n\n---------\n\nCo-authored-by: Bartosz Różański <bartek.roza@gmail.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "atxs_test.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "54",
    "number_of_lines_deleted_vulnerable_to_cve": "29",
    "vulnerable_lines": [
        "// Line_Reference 501: func TestForIDsByEpochEarlyStop(t *testing.T) {",
        "// Line_Reference 502: \tdb := sql.InMemory()",
        "// Line_Reference 503: ",
        "// Line_Reference 504: \te1 := types.EpochID(1)",
        "// Line_Reference 505: \tm := make(map[types.ATXID]struct{})",
        "// Line_Reference 506: \tfor i := 0; i < 4; i++ {",
        "// Line_Reference 507: \t\tsig, err := signing.NewEdSigner()",
        "// Line_Reference 508: \t\trequire.NoError(t, err)",
        "// Line_Reference 509: \t\tatx, err := newAtx(sig, withPublishEpoch(e1))",
        "// Line_Reference 510: \t\trequire.NoError(t, err)",
        "// Line_Reference 511: \t\trequire.NoError(t, atxs.Add(db, atx))",
        "// Line_Reference 512: \t\tm[atx.ID()] = struct{}{}",
        "// Line_Reference 513: \t}",
        "// Line_Reference 514: ",
        "// Line_Reference 515: \tn := 0",
        "// Line_Reference 516: \terr := atxs.IterateIDsByEpoch(db, e1, func(total int, id types.ATXID) error {",
        "// Line_Reference 517: \t\trequire.Equal(t, 4, total)",
        "// Line_Reference 518: \t\tdelete(m, id)",
        "// Line_Reference 519: \t\tn++",
        "// Line_Reference 520: \t\tif n >= 2 {",
        "// Line_Reference 521: \t\t\treturn errors.New(\"test error\")",
        "// Line_Reference 522: \t\t}",
        "// Line_Reference 523: \t\treturn nil",
        "// Line_Reference 524: \t})",
        "// Line_Reference 525: \trequire.ErrorContains(t, err, \"test error\")",
        "// Line_Reference 526: \trequire.Equal(t, 2, n)",
        "// Line_Reference 527: \trequire.Len(t, m, 2)",
        "// Line_Reference 528: }",
        "// Line_Reference 529: "
    ]
}
