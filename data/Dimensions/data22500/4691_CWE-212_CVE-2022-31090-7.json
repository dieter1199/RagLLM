{
    "cve_id": "CVE-2022-31090",
    "cve_description": "Guzzle, an extensible PHP HTTP client. `Authorization` headers on requests are sensitive information. In affected versions when using our Curl handler, it is possible to use the `CURLOPT_HTTPAUTH` option to specify an `Authorization` header. On making a request which responds with a redirect to a URI with a different origin (change in host, scheme or port), if we choose to follow it, we should remove the `CURLOPT_HTTPAUTH` option before continuing, stopping curl from appending the `Authorization` header to the new request. Affected Guzzle 7 users should upgrade to Guzzle 7.4.5 as soon as possible. Affected users using any earlier series of Guzzle should upgrade to Guzzle 6.5.8 or 7.4.5. Note that a partial fix was implemented in Guzzle 7.4.2, where a change in host would trigger removal of the curl-added Authorization header, however this earlier fix did not cover change in scheme or change in port. If you do not require or expect redirects to be followed, one should simply disable redirects all together. Alternatively, one can specify to use the Guzzle steam handler backend, rather than curl.",
    "cve_publish_date": "2022-06-27",
    "cwe_id": "CWE-212",
    "cwe_name": "Improper Removal of Sensitive Information Before Storage or Transfer",
    "cwe_description": "The product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.",
    "commit_message": "Release 7.4.5 (#3043)",
    "type_of_change": "Modification",
    "filename_of_changes": "RedirectMiddleware.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "4",
    "number_of_lines_deleted_vulnerable_to_cve": "29",
    "vulnerable_lines": [
        "// Line_Reference 91:         // If authorization is handled by curl, unset it if host is different.",
        "// Line_Reference 92:         if ($request->getUri()->getHost() !== $nextRequest->getUri()->getHost()",
        "// Line_Reference 93:             && defined('\\CURLOPT_HTTPAUTH')",
        "// Line_Reference 94:         ) {",
        "// Line_Reference 201:         // Remove Authorization and Cookie headers if required.",
        "// Line_Reference 202:         if (self::shouldStripSensitiveHeaders($request->getUri(), $modify['uri'])) {",
        "// Line_Reference 210:     /**",
        "// Line_Reference 211:      * Determine if we should strip sensitive headers from the request.",
        "// Line_Reference 212:      *",
        "// Line_Reference 213:      * We return true if either of the following conditions are true:",
        "// Line_Reference 214:      *",
        "// Line_Reference 215:      * 1. the host is different;",
        "// Line_Reference 216:      * 2. the scheme has changed, and now is non-https.",
        "// Line_Reference 217:      */",
        "// Line_Reference 218:     private static function shouldStripSensitiveHeaders(",
        "// Line_Reference 219:         UriInterface $originalUri,",
        "// Line_Reference 220:         UriInterface $modifiedUri",
        "// Line_Reference 221:     ): bool {",
        "// Line_Reference 222:         if (\\strcasecmp($originalUri->getHost(), $modifiedUri->getHost()) !== 0) {",
        "// Line_Reference 223:             return true;",
        "// Line_Reference 224:         }",
        "// Line_Reference 225: ",
        "// Line_Reference 226:         if ($originalUri->getScheme() !== $modifiedUri->getScheme() && 'https' !== $modifiedUri->getScheme()) {",
        "// Line_Reference 227:             return true;",
        "// Line_Reference 228:         }",
        "// Line_Reference 229: ",
        "// Line_Reference 230:         return false;",
        "// Line_Reference 231:     }",
        "// Line_Reference 232: "
    ]
}
