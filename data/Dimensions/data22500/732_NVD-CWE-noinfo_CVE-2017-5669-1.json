{
    "cve_id": "CVE-2017-5669",
    "cve_description": "The do_shmat function in ipc/shm.c in the Linux kernel through 4.9.12 does not restrict the address calculated by a certain rounding operation, which allows local users to map page zero, and consequently bypass a protection mechanism that exists for the mmap system call, by making crafted shmget and shmat system calls in a privileged context.",
    "cve_publish_date": "2017-02-24",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "ipc/shm: Fix shmat mmap nil-page protection\n\nThe issue is described here, with a nice testcase:\n\n    https://bugzilla.kernel.org/show_bug.cgi?id=192931\n\nThe problem is that shmat() calls do_mmap_pgoff() with MAP_FIXED, and\nthe address rounded down to 0.  For the regular mmap case, the\nprotection mentioned above is that the kernel gets to generate the\naddress -- arch_get_unmapped_area() will always check for MAP_FIXED and\nreturn that address.  So by the time we do security_mmap_addr(0) things\nget funky for shmat().\n\nThe testcase itself shows that while a regular user crashes, root will\nnot have a problem attaching a nil-page.  There are two possible fixes\nto this.  The first, and which this patch does, is to simply allow root\nto crash as well -- this is also regular mmap behavior, ie when hacking\nup the testcase and adding mmap(...  |MAP_FIXED).  While this approach\nis the safer option, the second alternative is to ignore SHM_RND if the\nrounded address is 0, thus only having MAP_SHARED flags.  This makes the\nbehavior of shmat() identical to the mmap() case.  The downside of this\nis obviously user visible, but does make sense in that it maintains\nsemantics after the round-down wrt 0 address and mmap.\n\nPasses shm related ltp tests.\n\nLink: http://lkml.kernel.org/r/1486050195-18629-1-git-send-email-dave@stgolabs.net\nSigned-off-by: Davidlohr Bueso <dbueso@suse.de>\nReported-by: Gareth Evans <gareth.evans@contextis.co.uk>\nCc: Manfred Spraul <manfred@colorfullife.com>\nCc: Michael Kerrisk <mtk.manpages@googlemail.com>\nCc: <stable@vger.kernel.org>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "shm.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "9",
    "number_of_lines_deleted_vulnerable_to_cve": "4",
    "vulnerable_lines": [
        "// Line_Reference 1094: long do_shmat(int shmid, char __user *shmaddr, int shmflg, ulong *raddr,",
        "// Line_Reference 1095: \t      unsigned long shmlba)",
        "// Line_Reference 1116: \t\t\tif (shmflg & SHM_RND)",
        "// Line_Reference 1117: \t\t\t\taddr &= ~(shmlba - 1);\t   /* round down */"
    ]
}
