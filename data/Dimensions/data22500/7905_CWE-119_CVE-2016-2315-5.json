{
    "cve_id": "CVE-2016-2315",
    "cve_description": "revision.c in git before 2.7.4 uses an incorrect integer data type, which allows remote attackers to execute arbitrary code via a (1) long filename or (2) many nested trees, leading to a heap-based buffer overflow.",
    "cve_publish_date": "2016-04-08",
    "cwe_id": "CWE-119",
    "cwe_name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
    "cwe_description": "The product performs operations on a memory buffer, but it reads from or writes to a memory location outside the buffer's intended boundary. This may result in read or write operations on unexpected memory locations that could be linked to other variables, data structures, or internal program data.",
    "commit_message": "list-objects: pass full pathname to callbacks\n\nWhen we find a blob at \"a/b/c\", we currently pass this to\nour show_object_fn callbacks as two components: \"a/b/\" and\n\"c\". Callbacks which want the full value then call\npath_name(), which concatenates the two. But this is an\ninefficient interface; the path is a strbuf, and we could\nsimply append \"c\" to it temporarily, then roll back the\nlength, without creating a new copy.\n\nSo we could improve this by teaching the callsites of\npath_name() this trick (and there are only 3). But we can\nalso notice that no callback actually cares about the\nbroken-down representation, and simply pass each callback\nthe full path \"a/b/c\" as a string. The callback code becomes\neven simpler, then, as we do not have to worry about freeing\nan allocated buffer, nor rolling back our modification to\nthe strbuf.\n\nThis is theoretically less efficient, as some callbacks\nwould not bother to format the final path component. But in\npractice this is not measurable. Since we use the same\nstrbuf over and over, our work to grow it is amortized, and\nwe really only pay to memcpy a few bytes.\n\nSigned-off-by: Jeff King <peff@peff.net>\nSigned-off-by: Junio C Hamano <gitster@pobox.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "pack-objects.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "2",
    "number_of_lines_deleted_vulnerable_to_cve": "13",
    "vulnerable_lines": [
        "// Line_Reference 2287: static void show_object(struct object *obj,",
        "// Line_Reference 2288: \t\t\tstruct strbuf *path, const char *last,",
        "// Line_Reference 2289: \t\t\tvoid *data)",
        "// Line_Reference 2291: \tchar *name = path_name(path, last);",
        "// Line_Reference 2292: ",
        "// Line_Reference 2296: ",
        "// Line_Reference 2297: \t/*",
        "// Line_Reference 2298: \t * We will have generated the hash from the name,",
        "// Line_Reference 2299: \t * but not saved a pointer to it - we can free it",
        "// Line_Reference 2300: \t */",
        "// Line_Reference 2301: \tfree((char *)name);",
        "// Line_Reference 2483: \t\t\t\t struct strbuf *path,",
        "// Line_Reference 2484: \t\t\t\t const char *last,"
    ]
}
