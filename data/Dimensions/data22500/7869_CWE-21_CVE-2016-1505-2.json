{
    "cve_id": "CVE-2016-1505",
    "cve_description": "The filesystem storage backend in Radicale before 1.1 on Windows allows remote attackers to read or write to arbitrary files via a crafted path, as demonstrated by /c:/file/ignore.",
    "cve_publish_date": "2016-02-03",
    "cwe_id": "CWE-21",
    "cwe_name": "DEPRECATED: Pathname Traversal and Equivalence Errors",
    "cwe_description": "This category has been deprecated. It was originally used for organizing weaknesses involving file names, which enabled access to files outside of a restricted directory (path traversal) or to perform operations on files that would otherwise be restricted (path equivalence). Consider using either the File Handling Issues category (CWE-1219) or the class Use of Incorrectly-Resolved Name or Reference (CWE-706).",
    "commit_message": "Convert paths safely to file system paths\nWith the old implementation on Windows a path like\n\"/c:/file/ignore\" got converted to \"c:\\file\" and\nallowed access to files outside of FOLDER",
    "type_of_change": "Modification",
    "filename_of_changes": "multifilesystem.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "22",
    "number_of_lines_deleted_vulnerable_to_cve": "16",
    "vulnerable_lines": [
        "// Line_Reference 38:         if not os.path.exists(self._path):",
        "// Line_Reference 39:             os.makedirs(self._path)",
        "// Line_Reference 55:             path = os.path.join(self._path, name)",
        "// Line_Reference 56:             with filesystem.open(path, \"w\") as fd:",
        "// Line_Reference 60:         shutil.rmtree(self._path)",
        "// Line_Reference 64:         if os.path.exists(os.path.join(self._path, name)):",
        "// Line_Reference 65:             os.remove(os.path.join(self._path, name))",
        "// Line_Reference 73:             filenames = os.listdir(self._path)",
        "// Line_Reference 76:                             % (self._path, e))",
        "// Line_Reference 80:             path = os.path.join(self._path, filename)",
        "// Line_Reference 93:         path = os.path.join(filesystem.FOLDER, path.replace(\"/\", os.sep))",
        "// Line_Reference 94:         return os.path.isdir(path) and not os.path.exists(path + \".props\")",
        "// Line_Reference 98:         path = os.path.join(filesystem.FOLDER, path.replace(\"/\", os.sep))",
        "// Line_Reference 99:         return os.path.isdir(path) and os.path.exists(path + \".props\")",
        "// Line_Reference 104:             os.path.getmtime(os.path.join(self._path, filename))",
        "// Line_Reference 105:             for filename in os.listdir(self._path)] or [0])"
    ]
}
