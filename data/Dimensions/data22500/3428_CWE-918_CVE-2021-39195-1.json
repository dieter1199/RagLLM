{
    "cve_id": "CVE-2021-39195",
    "cve_description": "Misskey is an open source, decentralized microblogging platform. In affected versions a Server-Side Request Forgery vulnerability exists in \"Upload from URL\" and remote attachment handling. This could result in the disclosure of non-public information within the internal network. This has been fixed in 12.90.0. However, if you are using a proxy, you will need to take additional measures. As a workaround this exploit may be avoided by appropriately restricting access to private networks from the host where the application is running.",
    "cve_publish_date": "2021-09-07",
    "cwe_id": "CWE-918",
    "cwe_name": "Server-Side Request Forgery (SSRF)",
    "cwe_description": "The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.",
    "commit_message": "Tune download (#2)\n\n* s2-2\r\n\r\n* allowedPrivateNetworks\r\n\r\n* style\r\n\r\n* Proxyの間にあると誤解しそうなのでconfigの記述順を変更\r\n\r\n* Fix error handler",
    "type_of_change": "Modification",
    "filename_of_changes": "download-url.ts",
    "code_language": "TypeScript",
    "number_of_lines_added_for_mitigation": "49",
    "number_of_lines_deleted_vulnerable_to_cve": "18",
    "vulnerable_lines": [
        "// Line_Reference 4: import { URL } from 'url';",
        "// Line_Reference 5: import fetch from 'node-fetch';",
        "// Line_Reference 6: import { getAgentByUrl } from './fetch';",
        "// Line_Reference 7: import { AbortController } from 'abort-controller';",
        "// Line_Reference 18: \tconst controller = new AbortController();",
        "// Line_Reference 19: \tsetTimeout(() => {",
        "// Line_Reference 20: \t\tcontroller.abort();",
        "// Line_Reference 21: \t}, 60 * 1000);",
        "// Line_Reference 23: \tconst response = await fetch(new URL(url).href, {",
        "// Line_Reference 27: \t\ttimeout: 10 * 1000,",
        "// Line_Reference 28: \t\tsignal: controller.signal,",
        "// Line_Reference 29: \t\tagent: getAgentByUrl,",
        "// Line_Reference 32: \tif (!response.ok) {",
        "// Line_Reference 33: \t\tlogger.error(`Got ${response.status} (${url})`);",
        "// Line_Reference 34: \t\tthrow response.status;",
        "// Line_Reference 35: \t}",
        "// Line_Reference 36: ",
        "// Line_Reference 37: \tawait pipeline(response.body, fs.createWriteStream(path));"
    ]
}
