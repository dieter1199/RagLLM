{
    "cve_id": "CVE-2021-29541",
    "cve_description": "TensorFlow is an end-to-end open source platform for machine learning. An attacker can trigger a dereference of a null pointer in `tf.raw_ops.StringNGrams`. This is because the implementation(https://github.com/tensorflow/tensorflow/blob/1cdd4da14282210cc759e468d9781741ac7d01bf/tensorflow/core/kernels/string_ngrams_op.cc#L67-L74) does not fully validate the `data_splits` argument. This would result in `ngrams_data`(https://github.com/tensorflow/tensorflow/blob/1cdd4da14282210cc759e468d9781741ac7d01bf/tensorflow/core/kernels/string_ngrams_op.cc#L106-L110) to be a null pointer when the output would be computed to have 0 or negative size. Later writes to the output tensor would then cause a null pointer dereference. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.",
    "cve_publish_date": "2021-05-14",
    "cwe_id": "CWE-476",
    "cwe_name": "NULL Pointer Dereference",
    "cwe_description": "The product dereferences a pointer that it expects to be valid but is NULL.",
    "commit_message": "Enhance validation of ngram op and handle case of 0 tokens.\n\nPiperOrigin-RevId: 369940178\nChange-Id: Ia82f42c09d14efe76e7dc013505b832a42282f0b",
    "type_of_change": "Modification",
    "filename_of_changes": "string_ngrams_op.cc",
    "code_language": "C++",
    "number_of_lines_added_for_mitigation": "41",
    "number_of_lines_deleted_vulnerable_to_cve": "11",
    "vulnerable_lines": [
        "// Line_Reference 64:     // Validate that the splits are valid indices into data",
        "// Line_Reference 67:     for (int i = 0; i < splits_vec_size; ++i) {",
        "// Line_Reference 68:       bool valid_splits = splits_vec(i) >= 0;",
        "// Line_Reference 69:       valid_splits = valid_splits && (splits_vec(i) <= input_data_size);",
        "// Line_Reference 70:       OP_REQUIRES(",
        "// Line_Reference 71:           context, valid_splits,",
        "// Line_Reference 72:           errors::InvalidArgument(\"Invalid split value \", splits_vec(i),",
        "// Line_Reference 73:                                   \", must be in [0,\", input_data_size, \"]\"));",
        "// Line_Reference 181:       ngram->append(data[data_start_index + num_tokens - 1]);",
        "// Line_Reference 182:       for (int n = 0; n < right_padding; ++n) {",
        "// Line_Reference 183:         ngram->append(separator_);"
    ]
}
