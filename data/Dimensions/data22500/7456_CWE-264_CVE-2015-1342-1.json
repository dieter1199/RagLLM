{
    "cve_id": "CVE-2015-1342",
    "cve_description": "LXCFS before 0.12 does not properly enforce directory escapes, which might allow local users to gain privileges by (1) querying or (2) updating a cgroup.",
    "cve_publish_date": "2015-12-07",
    "cwe_id": "CWE-264",
    "cwe_name": "Permissions, Privileges, and Access Controls",
    "cwe_description": "Weaknesses in this category are related to the management of permissions, privileges, and other security features that are used to perform access control.",
    "commit_message": "Fix checking of parent directories\n\nTaken from the justification in the launchpad bug:\n\nTo a task in freezer cgroup /a/b/c/d, it should appear that there are no\ncgroups other than its descendents. Since this is a filesystem, we must have\nthe parent directories, but each parent cgroup should only contain the child\nwhich the task can see.\n\nSo, when this task looks at /a/b, it should see only directory 'c' and no\nfiles. Attempt to create /a/b/x should result in -EPERM, whether /a/b/x already\nexists or not. Attempts to query /a/b/x should result in -ENOENT whether /a/b/x\nexists or not. Opening /a/b/tasks should result in -ENOENT.\n\nThe caller_may_see_dir checks specifically whether a task may see a cgroup\ndirectory - i.e. /a/b/x if opening /a/b/x/tasks, and /a/b/c/d if doing\nopendir('/a/b/c/d').\n\ncaller_is_in_ancestor() will return true if the caller in /a/b/c/d looks at\n/a/b/c/d/e. If the caller is in a child cgroup of the queried one - i.e. if the\ntask in /a/b/c/d queries /a/b, then *nextcg will container the next (the only)\ndirectory which he can see in the path - 'c'.\n\nBeyond this, regular DAC permissions should apply, with the\nroot-in-user-namespace privilege over its mapped uids being respected. The\nfc_may_access check does this check for both directories and files.\n\nThis is CVE-2015-1342 (LP: #1508481)\n\nSigned-off-by: Serge Hallyn <serge.hallyn@ubuntu.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "lxcfs.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "94",
    "number_of_lines_deleted_vulnerable_to_cve": "43",
    "vulnerable_lines": [
        "// Line_Reference 381: \tchar fnam[PROCLEN];",
        "// Line_Reference 382: \tFILE *f;",
        "// Line_Reference 384: \tchar *line = NULL;",
        "// Line_Reference 385: \tsize_t len = 0;",
        "// Line_Reference 386: \tint ret;",
        "// Line_Reference 388: \tret = snprintf(fnam, PROCLEN, \"/proc/%d/cgroup\", pid);",
        "// Line_Reference 389: \tif (ret < 0 || ret >= PROCLEN)",
        "// Line_Reference 390: \t\treturn false;",
        "// Line_Reference 391: \tif (!(f = fopen(fnam, \"r\")))",
        "// Line_Reference 394: \twhile (getline(&line, &len, f) != -1) {",
        "// Line_Reference 395: \t\tchar *c1, *c2, *linecmp;",
        "// Line_Reference 396: \t\tif (!line[0])",
        "// Line_Reference 397: \t\t\tcontinue;",
        "// Line_Reference 398: \t\tc1 = strchr(line, ':');",
        "// Line_Reference 399: \t\tif (!c1)",
        "// Line_Reference 400: \t\t\tgoto out;",
        "// Line_Reference 401: \t\tc1++;",
        "// Line_Reference 402: \t\tc2 = strchr(c1, ':');",
        "// Line_Reference 403: \t\tif (!c2)",
        "// Line_Reference 404: \t\t\tgoto out;",
        "// Line_Reference 405: \t\t*c2 = '\\0';",
        "// Line_Reference 406: \t\tif (strcmp(c1, contrl) != 0)",
        "// Line_Reference 407: \t\t\tcontinue;",
        "// Line_Reference 408: \t\tc2++;",
        "// Line_Reference 409: \t\tstripnewline(c2);",
        "// Line_Reference 410: \t\tprune_init_slice(c2);",
        "// Line_Reference 411: \t\t/*",
        "// Line_Reference 412: \t\t * callers pass in '/' for root cgroup, otherwise they pass",
        "// Line_Reference 413: \t\t * in a cgroup without leading '/'",
        "// Line_Reference 414: \t\t */",
        "// Line_Reference 415: \t\tlinecmp = *cg == '/' ? c2 : c2+1;",
        "// Line_Reference 416: \t\tif (strncmp(linecmp, cg, strlen(linecmp)) != 0) {",
        "// Line_Reference 417: \t\t\tif (nextcg)",
        "// Line_Reference 418: \t\t\t\t*nextcg = get_next_cgroup_dir(linecmp, cg);",
        "// Line_Reference 419: \t\t\tgoto out;",
        "// Line_Reference 426: \tfclose(f);",
        "// Line_Reference 427: \tfree(line);",
        "// Line_Reference 633: \tif (cgroup && !fc_may_access(fc, controller, cgroup, NULL, O_RDONLY)) {",
        "// Line_Reference 634: \t\treturn -EACCES;",
        "// Line_Reference 1566: \tchar *fpath = NULL, *path1, *cgdir = NULL, *controller;",
        "// Line_Reference 1608: \tchar *fpath = NULL, *cgdir = NULL, *controller;",
        "// Line_Reference 1629: \tfprintf(stderr, \"rmdir: verifying access to %s:%s (req path %s)\\n\",",
        "// Line_Reference 1630: \t\t\tcontroller, cgdir, path);"
    ]
}
