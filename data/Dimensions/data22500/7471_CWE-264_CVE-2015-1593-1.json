{
    "cve_id": "CVE-2015-1593",
    "cve_description": "The stack randomization feature in the Linux kernel before 3.19.1 on 64-bit platforms uses incorrect data types for the results of bitwise left-shift operations, which makes it easier for attackers to bypass the ASLR protection mechanism by predicting the address of the top of the stack, related to the randomize_stack_top function in fs/binfmt_elf.c and the stack_maxrandom_size function in arch/x86/mm/mmap.c.",
    "cve_publish_date": "2015-03-16",
    "cwe_id": "CWE-264",
    "cwe_name": "Permissions, Privileges, and Access Controls",
    "cwe_description": "Weaknesses in this category are related to the management of permissions, privileges, and other security features that are used to perform access control.",
    "commit_message": "x86, mm/ASLR: Fix stack randomization on 64-bit systems\n\nThe issue is that the stack for processes is not properly randomized on\n64 bit architectures due to an integer overflow.\n\nThe affected function is randomize_stack_top() in file\n\"fs/binfmt_elf.c\":\n\n  static unsigned long randomize_stack_top(unsigned long stack_top)\n  {\n           unsigned int random_variable = 0;\n\n           if ((current->flags & PF_RANDOMIZE) &&\n                   !(current->personality & ADDR_NO_RANDOMIZE)) {\n                   random_variable = get_random_int() & STACK_RND_MASK;\n                   random_variable <<= PAGE_SHIFT;\n           }\n           return PAGE_ALIGN(stack_top) + random_variable;\n           return PAGE_ALIGN(stack_top) - random_variable;\n  }\n\nNote that, it declares the \"random_variable\" variable as \"unsigned int\".\nSince the result of the shifting operation between STACK_RND_MASK (which\nis 0x3fffff on x86_64, 22 bits) and PAGE_SHIFT (which is 12 on x86_64):\n\n\t  random_variable <<= PAGE_SHIFT;\n\nthen the two leftmost bits are dropped when storing the result in the\n\"random_variable\". This variable shall be at least 34 bits long to hold\nthe (22+12) result.\n\nThese two dropped bits have an impact on the entropy of process stack.\nConcretely, the total stack entropy is reduced by four: from 2^28 to\n2^30 (One fourth of expected entropy).\n\nThis patch restores back the entropy by correcting the types involved\nin the operations in the functions randomize_stack_top() and\nstack_maxrandom_size().\n\nThe successful fix can be tested with:\n\n  $ for i in `seq 1 10`; do cat /proc/self/maps | grep stack; done\n  7ffeda566000-7ffeda587000 rw-p 00000000 00:00 0                          [stack]\n  7fff5a332000-7fff5a353000 rw-p 00000000 00:00 0                          [stack]\n  7ffcdb7a1000-7ffcdb7c2000 rw-p 00000000 00:00 0                          [stack]\n  7ffd5e2c4000-7ffd5e2e5000 rw-p 00000000 00:00 0                          [stack]\n  ...\n\nOnce corrected, the leading bytes should be between 7ffc and 7fff,\nrather than always being 7fff.\n\nSigned-off-by: Hector Marco-Gisbert <hecmargi@upv.es>\nSigned-off-by: Ismael Ripoll <iripoll@upv.es>\n[ Rebased, fixed 80 char bugs, cleaned up commit message, added test example and CVE ]\nSigned-off-by: Kees Cook <keescook@chromium.org>\nCc: <stable@vger.kernel.org>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Andrew Morton <akpm@linux-foundation.org>\nCc: Al Viro <viro@zeniv.linux.org.uk>\nFixes: CVE-2015-1593\nLink: http://lkml.kernel.org/r/20150214173350.GA18393@www.outflux.net\nSigned-off-by: Borislav Petkov <bp@suse.de>",
    "type_of_change": "Modification",
    "filename_of_changes": "binfmt_elf.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "3",
    "number_of_lines_deleted_vulnerable_to_cve": "2",
    "vulnerable_lines": [
        "// Line_Reference 648: \tunsigned int random_variable = 0;",
        "// Line_Reference 652: \t\trandom_variable = get_random_int() & STACK_RND_MASK;"
    ]
}
