{
    "cve_id": "CVE-2015-8967",
    "cve_description": "arch/arm64/kernel/sys.c in the Linux kernel before 4.0 allows local users to bypass the \"strict page permissions\" protection mechanism and modify the system-call table, and consequently gain privileges, by leveraging write access.",
    "cve_publish_date": "2016-12-08",
    "cwe_id": "CWE-264",
    "cwe_name": "Permissions, Privileges, and Access Controls",
    "cwe_description": "Weaknesses in this category are related to the management of permissions, privileges, and other security features that are used to perform access control.",
    "commit_message": "arm64: make sys_call_table const\n\nAs with x86, mark the sys_call_table const such that it will be placed\nin the .rodata section. This will cause attempts to modify the table\n(accidental or deliberate) to fail when strict page permissions are in\nplace. In the absence of strict page permissions, there should be no\nfunctional change.\n\nSigned-off-by: Mark Rutland <mark.rutland@arm.com>\nAcked-by: Will Deacon <will.deacon@arm.com>\nSigned-off-by: Catalin Marinas <catalin.marinas@arm.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "sys.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "1",
    "number_of_lines_deleted_vulnerable_to_cve": "1",
    "vulnerable_lines": [
        "// Line_Reference 52: void *sys_call_table[__NR_syscalls] __aligned(4096) = {"
    ]
}
