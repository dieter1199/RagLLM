{
    "cve_id": "CVE-2012-6536",
    "cve_description": "net/xfrm/xfrm_user.c in the Linux kernel before 3.6 does not verify that the actual Netlink message length is consistent with a certain header field, which allows local users to obtain sensitive information from kernel heap memory by leveraging the CAP_NET_ADMIN capability and providing a (1) new or (2) updated state.",
    "cve_publish_date": "2013-03-15",
    "cwe_id": "CWE-200",
    "cwe_name": "Exposure of Sensitive Information to an Unauthorized Actor",
    "cwe_description": "The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.",
    "commit_message": "xfrm_user: ensure user supplied esn replay window is valid\n\nThe current code fails to ensure that the netlink message actually\ncontains as many bytes as the header indicates. If a user creates a new\nstate or updates an existing one but does not supply the bytes for the\nwhole ESN replay window, the kernel copies random heap bytes into the\nreplay bitmap, the ones happen to follow the XFRMA_REPLAY_ESN_VAL\nnetlink attribute. This leads to following issues:\n\n1. The replay window has random bits set confusing the replay handling\n   code later on.\n\n2. A malicious user could use this flaw to leak up to ~3.5kB of heap\n   memory when she has access to the XFRM netlink interface (requires\n   CAP_NET_ADMIN).\n\nKnown users of the ESN replay window are strongSwan and Steffen's\niproute2 patch (<http://patchwork.ozlabs.org/patch/85962/>). The latter\nuses the interface with a bitmap supplied while the former does not.\nstrongSwan is therefore prone to run into issue 1.\n\nTo fix both issues without breaking existing userland allow using the\nXFRMA_REPLAY_ESN_VAL netlink attribute with either an empty bitmap or a\nfully specified one. For the former case we initialize the in-kernel\nbitmap with zero, for the latter we copy the user supplied bitmap. For\nstate updates the full bitmap must be supplied.\n\nTo prevent overflows in the bitmap length calculation the maximum size\nof bmp_len is limited to 128 by this patch -- resulting in a maximum\nreplay window of 4096 packets. This should be sufficient for all real\nlife scenarios (RFC 4303 recommends a default replay window size of 64).\n\nCc: Steffen Klassert <steffen.klassert@secunet.com>\nCc: Martin Willi <martin@revosec.ch>\nCc: Ben Hutchings <bhutchings@solarflare.com>\nSigned-off-by: Mathias Krause <minipli@googlemail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "type_of_change": "Modification",
    "filename_of_changes": "xfrm_user.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "25",
    "number_of_lines_deleted_vulnerable_to_cve": "6",
    "vulnerable_lines": [
        "// Line_Reference 127: \tif ((p->flags & XFRM_STATE_ESN) && !rt)",
        "// Line_Reference 128: \t\treturn -EINVAL;",
        "// Line_Reference 379: \tif (xfrm_replay_state_esn_len(replay_esn) !=",
        "// Line_Reference 380: \t\t\txfrm_replay_state_esn_len(up))",
        "// Line_Reference 397: \tp = kmemdup(up, xfrm_replay_state_esn_len(up), GFP_KERNEL);",
        "// Line_Reference 401: \tpp = kmemdup(up, xfrm_replay_state_esn_len(up), GFP_KERNEL);"
    ]
}
