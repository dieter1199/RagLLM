{
    "cve_id": "CVE-2020-7698",
    "cve_description": "This affects the package Gerapy from 0 and before 0.9.3. The input being passed to Popen, via the project_configure endpoint, isnâ€™t being sanitized.",
    "cve_publish_date": "2020-07-29",
    "cwe_id": "CWE-78",
    "cwe_name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
    "cwe_description": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
    "commit_message": "to b1",
    "type_of_change": "Modification",
    "filename_of_changes": "views.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "47",
    "number_of_lines_deleted_vulnerable_to_cve": "63",
    "vulnerable_lines": [
        "// Line_Reference 637:         try:",
        "// Line_Reference 638:             result = scrapyd.list_jobs(project_name)",
        "// Line_Reference 639:             jobs = []",
        "// Line_Reference 640:             statuses = ['pending', 'running', 'finished']",
        "// Line_Reference 641:             for status in statuses:",
        "// Line_Reference 642:                 for job in result.get(status):",
        "// Line_Reference 643:                     job['status'] = status",
        "// Line_Reference 644:                     jobs.append(job)",
        "// Line_Reference 645:             return JsonResponse(jobs)",
        "// Line_Reference 646:         except ConnectionError:",
        "// Line_Reference 647:             return JsonResponse({'message': 'Connect Error'}, status=500)",
        "// Line_Reference 666:         try:",
        "// Line_Reference 667:             # get last 1000 bytes of log",
        "// Line_Reference 668:             response = requests.get(url, timeout=5, headers={",
        "// Line_Reference 669:                 'Range': 'bytes=-1000'",
        "// Line_Reference 670:             }, auth=(client.username, client.password) if client.auth else None)",
        "// Line_Reference 671:             # Get encoding",
        "// Line_Reference 672:             encoding = response.apparent_encoding",
        "// Line_Reference 673:             # log not found",
        "// Line_Reference 674:             if response.status_code == 404:",
        "// Line_Reference 675:                 return JsonResponse({'message': 'Log Not Found'}, status=404)",
        "// Line_Reference 676:             # bytes to string",
        "// Line_Reference 677:             text = response.content.decode(encoding, errors='replace')",
        "// Line_Reference 678:             return HttpResponse(text)",
        "// Line_Reference 679:         except requests.ConnectionError:",
        "// Line_Reference 680:             return JsonResponse({'message': 'Load Log Error'}, status=500)",
        "// Line_Reference 696:         try:",
        "// Line_Reference 697:             scrapyd = get_scrapyd(client)",
        "// Line_Reference 698:             result = scrapyd.cancel(project_name, job_id)",
        "// Line_Reference 699:             return JsonResponse(result)",
        "// Line_Reference 700:         except ConnectionError:",
        "// Line_Reference 701:             return JsonResponse({'message': 'Connect Error'})",
        "// Line_Reference 709:         try:",
        "// Line_Reference 710:             scrapyd = get_scrapyd(client)",
        "// Line_Reference 711:             result = scrapyd.delete_version(project=project, version=version)",
        "// Line_Reference 712:             return JsonResponse(result)",
        "// Line_Reference 713:         except ConnectionError:",
        "// Line_Reference 714:             return JsonResponse({'message': 'Connect Error'})",
        "// Line_Reference 722:         try:",
        "// Line_Reference 723:             scrapyd = get_scrapyd(client)",
        "// Line_Reference 724:             result = scrapyd.delete_project(project=project)",
        "// Line_Reference 725:             return JsonResponse(result)",
        "// Line_Reference 726:         except ConnectionError:",
        "// Line_Reference 727:             return JsonResponse({'message': 'Connect Error'})",
        "// Line_Reference 832:         try:",
        "// Line_Reference 833:             # delete job from DjangoJob",
        "// Line_Reference 834:             task = Task.objects.get(id=task_id)",
        "// Line_Reference 835:             clients = clients_of_task(task)",
        "// Line_Reference 836:             for client in clients:",
        "// Line_Reference 837:                 job_id = get_job_id(client, task)",
        "// Line_Reference 838:                 DjangoJob.objects.filter(name=job_id).delete()",
        "// Line_Reference 839:             # delete task",
        "// Line_Reference 840:             Task.objects.filter(id=task_id).delete()",
        "// Line_Reference 841:             return JsonResponse({'result': '1'})",
        "// Line_Reference 842:         except:",
        "// Line_Reference 843:             return JsonResponse({'result': '0'})",
        "// Line_Reference 918:         try:",
        "// Line_Reference 919:             response = requests.get(url, timeout=5)",
        "// Line_Reference 920:             response.encoding = response.apparent_encoding",
        "// Line_Reference 921:             html = process_html(response.text)",
        "// Line_Reference 922:             return HttpResponse(html)",
        "// Line_Reference 923:         except Exception as e:",
        "// Line_Reference 924:             return JsonResponse({'message': e.args}, status=500)"
    ]
}
