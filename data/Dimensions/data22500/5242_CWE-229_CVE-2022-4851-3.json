{
    "cve_id": "CVE-2022-4851",
    "cve_description": "Improper Handling of Values in GitHub repository usememos/memos prior to 0.9.1.",
    "cve_publish_date": "2022-12-29",
    "cwe_id": "CWE-229",
    "cwe_name": "Improper Handling of Values",
    "cwe_description": "The product does not properly handle when the expected number of values for parameters, fields, or arguments is not provided in input, or if those values are undefined.",
    "commit_message": "fix: access control (#870)",
    "type_of_change": "Modification",
    "filename_of_changes": "memo.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "170",
    "number_of_lines_deleted_vulnerable_to_cve": "155",
    "vulnerable_lines": [
        "// Line_Reference 27: \t\tmemoCreate := &api.MemoCreate{",
        "// Line_Reference 28: \t\t\tCreatorID: userID,",
        "// Line_Reference 29: \t\t}",
        "// Line_Reference 101: \t\tmemoFind := &api.MemoFind{",
        "// Line_Reference 102: \t\t\tID:        &memoID,",
        "// Line_Reference 103: \t\t\tCreatorID: &userID,",
        "// Line_Reference 104: \t\t}",
        "// Line_Reference 105: \t\tif _, err := s.Store.FindMemo(ctx, memoFind); err != nil {",
        "// Line_Reference 118: \t\tmemo, err := s.Store.PatchMemo(ctx, memoPatch)",
        "// Line_Reference 176: \t\t\tcontentSearch := \"#\" + tag + \" \"",
        "// Line_Reference 232: \tg.GET(\"/memo/amount\", func(c echo.Context) error {",
        "// Line_Reference 233: \t\tctx := c.Request().Context()",
        "// Line_Reference 234: \t\tnormalRowStatus := api.Normal",
        "// Line_Reference 235: \t\tmemoFind := &api.MemoFind{",
        "// Line_Reference 236: \t\t\tRowStatus: &normalRowStatus,",
        "// Line_Reference 237: \t\t}",
        "// Line_Reference 238: \t\tif userID, err := strconv.Atoi(c.QueryParam(\"userId\")); err == nil {",
        "// Line_Reference 239: \t\t\tmemoFind.CreatorID = &userID",
        "// Line_Reference 240: \t\t}",
        "// Line_Reference 241: ",
        "// Line_Reference 242: \t\tmemoList, err := s.Store.FindMemoList(ctx, memoFind)",
        "// Line_Reference 243: \t\tif err != nil {",
        "// Line_Reference 244: \t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, \"Failed to find memo list\").SetInternal(err)",
        "// Line_Reference 245: \t\t}",
        "// Line_Reference 246: ",
        "// Line_Reference 247: \t\tc.Response().Header().Set(echo.HeaderContentType, echo.MIMEApplicationJSONCharsetUTF8)",
        "// Line_Reference 248: \t\tif err := json.NewEncoder(c.Response().Writer).Encode(composeResponse(len(memoList))); err != nil {",
        "// Line_Reference 249: \t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, \"Failed to encode memo amount\").SetInternal(err)",
        "// Line_Reference 250: \t\t}",
        "// Line_Reference 251: \t\treturn nil",
        "// Line_Reference 252: \t})",
        "// Line_Reference 253: ",
        "// Line_Reference 254: \tg.GET(\"/memo/stats\", func(c echo.Context) error {",
        "// Line_Reference 255: \t\tctx := c.Request().Context()",
        "// Line_Reference 256: \t\tnormalStatus := api.Normal",
        "// Line_Reference 257: \t\tmemoFind := &api.MemoFind{",
        "// Line_Reference 258: \t\t\tRowStatus: &normalStatus,",
        "// Line_Reference 259: \t\t}",
        "// Line_Reference 260: \t\tif creatorID, err := strconv.Atoi(c.QueryParam(\"creatorId\")); err == nil {",
        "// Line_Reference 261: \t\t\tmemoFind.CreatorID = &creatorID",
        "// Line_Reference 262: \t\t}",
        "// Line_Reference 263: \t\tif memoFind.CreatorID == nil {",
        "// Line_Reference 264: \t\t\treturn echo.NewHTTPError(http.StatusBadRequest, \"Missing user id to find memo\")",
        "// Line_Reference 265: \t\t}",
        "// Line_Reference 266: ",
        "// Line_Reference 267: \t\tcurrentUserID, ok := c.Get(getUserIDContextKey()).(int)",
        "// Line_Reference 268: \t\tif !ok {",
        "// Line_Reference 269: \t\t\tmemoFind.VisibilityList = []api.Visibility{api.Public}",
        "// Line_Reference 270: \t\t} else {",
        "// Line_Reference 271: \t\t\tif *memoFind.CreatorID != currentUserID {",
        "// Line_Reference 272: \t\t\t\tmemoFind.VisibilityList = []api.Visibility{api.Public, api.Protected}",
        "// Line_Reference 273: \t\t\t} else {",
        "// Line_Reference 274: \t\t\t\tmemoFind.VisibilityList = []api.Visibility{api.Public, api.Protected, api.Private}",
        "// Line_Reference 275: \t\t\t}",
        "// Line_Reference 276: \t\t}",
        "// Line_Reference 277: ",
        "// Line_Reference 278: \t\tlist, err := s.Store.FindMemoList(ctx, memoFind)",
        "// Line_Reference 279: \t\tif err != nil {",
        "// Line_Reference 280: \t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, \"Failed to fetch memo list\").SetInternal(err)",
        "// Line_Reference 281: \t\t}",
        "// Line_Reference 282: ",
        "// Line_Reference 283: \t\tdisplayTsList := []int64{}",
        "// Line_Reference 284: \t\tfor _, memo := range list {",
        "// Line_Reference 285: \t\t\tdisplayTsList = append(displayTsList, memo.DisplayTs)",
        "// Line_Reference 286: \t\t}",
        "// Line_Reference 287: ",
        "// Line_Reference 288: \t\tc.Response().Header().Set(echo.HeaderContentType, echo.MIMEApplicationJSONCharsetUTF8)",
        "// Line_Reference 289: \t\tif err := json.NewEncoder(c.Response().Writer).Encode(composeResponse(displayTsList)); err != nil {",
        "// Line_Reference 290: \t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, \"Failed to encode memo stats response\").SetInternal(err)",
        "// Line_Reference 291: \t\t}",
        "// Line_Reference 292: \t\treturn nil",
        "// Line_Reference 293: \t})",
        "// Line_Reference 294: ",
        "// Line_Reference 295: \tg.GET(\"/memo/all\", func(c echo.Context) error {",
        "// Line_Reference 296: \t\tctx := c.Request().Context()",
        "// Line_Reference 297: \t\tmemoFind := &api.MemoFind{}",
        "// Line_Reference 298: ",
        "// Line_Reference 299: \t\t_, ok := c.Get(getUserIDContextKey()).(int)",
        "// Line_Reference 300: \t\tif !ok {",
        "// Line_Reference 301: \t\t\tmemoFind.VisibilityList = []api.Visibility{api.Public}",
        "// Line_Reference 302: \t\t} else {",
        "// Line_Reference 303: \t\t\tmemoFind.VisibilityList = []api.Visibility{api.Public, api.Protected}",
        "// Line_Reference 304: \t\t}",
        "// Line_Reference 305: ",
        "// Line_Reference 306: \t\tpinnedStr := c.QueryParam(\"pinned\")",
        "// Line_Reference 307: \t\tif pinnedStr != \"\" {",
        "// Line_Reference 308: \t\t\tpinned := pinnedStr == \"true\"",
        "// Line_Reference 309: \t\t\tmemoFind.Pinned = &pinned",
        "// Line_Reference 310: \t\t}",
        "// Line_Reference 311: \t\ttag := c.QueryParam(\"tag\")",
        "// Line_Reference 312: \t\tif tag != \"\" {",
        "// Line_Reference 313: \t\t\tcontentSearch := \"#\" + tag + \" \"",
        "// Line_Reference 314: \t\t\tmemoFind.ContentSearch = &contentSearch",
        "// Line_Reference 315: \t\t}",
        "// Line_Reference 316: \t\tvisibilityListStr := c.QueryParam(\"visibility\")",
        "// Line_Reference 317: \t\tif visibilityListStr != \"\" {",
        "// Line_Reference 318: \t\t\tvisibilityList := []api.Visibility{}",
        "// Line_Reference 319: \t\t\tfor _, visibility := range strings.Split(visibilityListStr, \",\") {",
        "// Line_Reference 320: \t\t\t\tvisibilityList = append(visibilityList, api.Visibility(visibility))",
        "// Line_Reference 321: \t\t\t}",
        "// Line_Reference 322: \t\t\tmemoFind.VisibilityList = visibilityList",
        "// Line_Reference 323: \t\t}",
        "// Line_Reference 324: \t\tif limit, err := strconv.Atoi(c.QueryParam(\"limit\")); err == nil {",
        "// Line_Reference 325: \t\t\tmemoFind.Limit = limit",
        "// Line_Reference 326: \t\t}",
        "// Line_Reference 327: \t\tif offset, err := strconv.Atoi(c.QueryParam(\"offset\")); err == nil {",
        "// Line_Reference 328: \t\t\tmemoFind.Offset = offset",
        "// Line_Reference 329: \t\t}",
        "// Line_Reference 330: ",
        "// Line_Reference 331: \t\t// Only fetch normal status memos.",
        "// Line_Reference 332: \t\tnormalStatus := api.Normal",
        "// Line_Reference 333: \t\tmemoFind.RowStatus = &normalStatus",
        "// Line_Reference 334: ",
        "// Line_Reference 335: \t\tlist, err := s.Store.FindMemoList(ctx, memoFind)",
        "// Line_Reference 336: \t\tif err != nil {",
        "// Line_Reference 337: \t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, \"Failed to fetch all memo list\").SetInternal(err)",
        "// Line_Reference 338: \t\t}",
        "// Line_Reference 339: ",
        "// Line_Reference 340: \t\tsort.Slice(list, func(i, j int) bool {",
        "// Line_Reference 341: \t\t\treturn list[i].DisplayTs > list[j].DisplayTs",
        "// Line_Reference 342: \t\t})",
        "// Line_Reference 343: ",
        "// Line_Reference 344: \t\tif memoFind.Limit != 0 {",
        "// Line_Reference 345: \t\t\tlist = list[memoFind.Offset:common.Min(len(list), memoFind.Offset+memoFind.Limit)]",
        "// Line_Reference 346: \t\t}",
        "// Line_Reference 347: ",
        "// Line_Reference 348: \t\tc.Response().Header().Set(echo.HeaderContentType, echo.MIMEApplicationJSONCharsetUTF8)",
        "// Line_Reference 349: \t\tif err := json.NewEncoder(c.Response().Writer).Encode(composeResponse(list)); err != nil {",
        "// Line_Reference 350: \t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, \"Failed to encode all memo list response\").SetInternal(err)",
        "// Line_Reference 351: \t\t}",
        "// Line_Reference 352: \t\treturn nil",
        "// Line_Reference 353: \t})",
        "// Line_Reference 354: ",
        "// Line_Reference 403: \t\tmemoOrganizerUpsert := &api.MemoOrganizerUpsert{",
        "// Line_Reference 404: \t\t\tMemoID: memoID,",
        "// Line_Reference 405: \t\t\tUserID: userID,",
        "// Line_Reference 406: \t\t}",
        "// Line_Reference 443: \t\t\tMemoID:    memoID,",
        "// Line_Reference 491: \tg.DELETE(\"/memo/:memoId/resource/:resourceId\", func(c echo.Context) error {",
        "// Line_Reference 493: \t\tmemoID, err := strconv.Atoi(c.Param(\"memoId\"))",
        "// Line_Reference 495: \t\t\treturn echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf(\"Memo ID is not a number: %s\", c.Param(\"memoId\"))).SetInternal(err)",
        "// Line_Reference 497: \t\tresourceID, err := strconv.Atoi(c.Param(\"resourceId\"))",
        "// Line_Reference 499: \t\t\treturn echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf(\"Resource ID is not a number: %s\", c.Param(\"resourceId\"))).SetInternal(err)",
        "// Line_Reference 502: \t\tmemoResourceDelete := &api.MemoResourceDelete{",
        "// Line_Reference 503: \t\t\tMemoID:     &memoID,",
        "// Line_Reference 504: \t\t\tResourceID: &resourceID,",
        "// Line_Reference 506: \t\tif err := s.Store.DeleteMemoResource(ctx, memoResourceDelete); err != nil {",
        "// Line_Reference 507: \t\t\treturn echo.NewHTTPError(http.StatusInternalServerError, \"Failed to fetch resource list\").SetInternal(err)",
        "// Line_Reference 510: \t\treturn c.JSON(http.StatusOK, true)",
        "// Line_Reference 519: ",
        "// Line_Reference 525: \t\tmemoFind := &api.MemoFind{",
        "// Line_Reference 526: \t\t\tID:        &memoID,",
        "// Line_Reference 527: \t\t\tCreatorID: &userID,",
        "// Line_Reference 528: \t\t}",
        "// Line_Reference 529: \t\tif _, err := s.Store.FindMemo(ctx, memoFind); err != nil {"
    ]
}
