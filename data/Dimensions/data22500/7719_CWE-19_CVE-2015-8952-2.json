{
    "cve_id": "CVE-2015-8952",
    "cve_description": "The mbcache feature in the ext2 and ext4 filesystem implementations in the Linux kernel before 4.6 mishandles xattr block caching, which allows local users to cause a denial of service (soft lockup) via filesystem operations in environments that use many attributes, as demonstrated by Ceph and Samba.",
    "cve_publish_date": "2016-10-16",
    "cwe_id": "CWE-19",
    "cwe_name": "Data Processing Errors",
    "cwe_description": "Weaknesses in this category are typically found in functionality that processes data. Data processing is the manipulation of input to retrieve or save information.",
    "commit_message": "ext2: convert to mbcache2\n\nThe conversion is generally straightforward. We convert filesystem from\na global cache to per-fs one. Similarly to ext4 the tricky part is that\nxattr block corresponding to found mbcache entry can get freed before we\nget buffer lock for that block. So we have to check whether the entry is\nstill valid after getting the buffer lock.\n\nSigned-off-by: Jan Kara <jack@suse.cz>\nSigned-off-by: Theodore Ts'o <tytso@mit.edu>",
    "type_of_change": "Modification",
    "filename_of_changes": "xattr.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "67",
    "number_of_lines_deleted_vulnerable_to_cve": "76",
    "vulnerable_lines": [
        "// Line_Reference 59: #include <linux/mbcache.h>",
        "// Line_Reference 93: static int ext2_xattr_cache_insert(struct buffer_head *);",
        "// Line_Reference 99: static struct mb_cache *ext2_xattr_cache;",
        "// Line_Reference 100: ",
        "// Line_Reference 199: \tif (ext2_xattr_cache_insert(bh))",
        "// Line_Reference 212: \tif (ext2_xattr_cache_insert(bh))",
        "// Line_Reference 284: \tif (ext2_xattr_cache_insert(bh))",
        "// Line_Reference 486: \t\tstruct mb_cache_entry *ce;",
        "// Line_Reference 487: ",
        "// Line_Reference 489: \t\tce = mb_cache_entry_get(ext2_xattr_cache, bh->b_bdev,",
        "// Line_Reference 490: \t\t\t\t\tbh->b_blocknr);",
        "// Line_Reference 494: \t\t\tif (ce)",
        "// Line_Reference 495: \t\t\t\tmb_cache_entry_free(ce);",
        "// Line_Reference 500: \t\t\tif (ce)",
        "// Line_Reference 501: \t\t\t\tmb_cache_entry_release(ce);",
        "// Line_Reference 656: \t\t\text2_xattr_cache_insert(new_bh);",
        "// Line_Reference 677: \t\t\text2_xattr_cache_insert(new_bh);",
        "// Line_Reference 710: \t\tstruct mb_cache_entry *ce;",
        "// Line_Reference 711: ",
        "// Line_Reference 716: \t\tce = mb_cache_entry_get(ext2_xattr_cache, old_bh->b_bdev,",
        "// Line_Reference 717: \t\t\t\t\told_bh->b_blocknr);",
        "// Line_Reference 721: \t\t\tif (ce)",
        "// Line_Reference 722: \t\t\t\tmb_cache_entry_free(ce);",
        "// Line_Reference 733: \t\t\tif (ce)",
        "// Line_Reference 734: \t\t\t\tmb_cache_entry_release(ce);",
        "// Line_Reference 760: \tstruct mb_cache_entry *ce;",
        "// Line_Reference 780: \tce = mb_cache_entry_get(ext2_xattr_cache, bh->b_bdev, bh->b_blocknr);",
        "// Line_Reference 783: \t\tif (ce)",
        "// Line_Reference 784: \t\t\tmb_cache_entry_free(ce);",
        "// Line_Reference 791: \t\tif (ce)",
        "// Line_Reference 792: \t\t\tmb_cache_entry_release(ce);",
        "// Line_Reference 808: /*",
        "// Line_Reference 809:  * ext2_xattr_put_super()",
        "// Line_Reference 810:  *",
        "// Line_Reference 811:  * This is called when a file system is unmounted.",
        "// Line_Reference 812:  */",
        "// Line_Reference 813: void",
        "// Line_Reference 814: ext2_xattr_put_super(struct super_block *sb)",
        "// Line_Reference 815: {",
        "// Line_Reference 816: \tmb_cache_shrink(sb->s_bdev);",
        "// Line_Reference 817: }",
        "// Line_Reference 818: ",
        "// Line_Reference 819: ",
        "// Line_Reference 829: ext2_xattr_cache_insert(struct buffer_head *bh)",
        "// Line_Reference 832: \tstruct mb_cache_entry *ce;",
        "// Line_Reference 835: \tce = mb_cache_entry_alloc(ext2_xattr_cache, GFP_NOFS);",
        "// Line_Reference 836: \tif (!ce)",
        "// Line_Reference 837: \t\treturn -ENOMEM;",
        "// Line_Reference 838: \terror = mb_cache_entry_insert(ce, bh->b_bdev, bh->b_blocknr, hash);",
        "// Line_Reference 840: \t\tmb_cache_entry_free(ce);",
        "// Line_Reference 846: \t} else {",
        "// Line_Reference 847: \t\tea_bdebug(bh, \"inserting [%x] (%d cache entries)\", (int)hash,",
        "// Line_Reference 848: \t\t\t  atomic_read(&ext2_xattr_cache->c_entry_count));",
        "// Line_Reference 849: \t\tmb_cache_entry_release(ce);",
        "// Line_Reference 850: \t}",
        "// Line_Reference 906: \tstruct mb_cache_entry *ce;",
        "// Line_Reference 912: \tce = mb_cache_entry_find_first(ext2_xattr_cache, inode->i_sb->s_bdev,",
        "// Line_Reference 913: \t\t\t\t       hash);",
        "// Line_Reference 917: \t\tif (IS_ERR(ce)) {",
        "// Line_Reference 918: \t\t\tif (PTR_ERR(ce) == -EAGAIN)",
        "// Line_Reference 919: \t\t\t\tgoto again;",
        "// Line_Reference 920: \t\t\tbreak;",
        "// Line_Reference 921: \t\t}",
        "// Line_Reference 922: ",
        "// Line_Reference 930: \t\t\tif (le32_to_cpu(HDR(bh)->h_refcount) >",
        "// Line_Reference 939: \t\t\t\tmb_cache_entry_release(ce);",
        "// Line_Reference 945: \t\tce = mb_cache_entry_find_next(ce, inode->i_sb->s_bdev, hash);",
        "// Line_Reference 1018: int __init",
        "// Line_Reference 1019: init_ext2_xattr(void)",
        "// Line_Reference 1021: \text2_xattr_cache = mb_cache_create(\"ext2_xattr\", 6);",
        "// Line_Reference 1022: \tif (!ext2_xattr_cache)",
        "// Line_Reference 1023: \t\treturn -ENOMEM;",
        "// Line_Reference 1024: \treturn 0;",
        "// Line_Reference 1027: void",
        "// Line_Reference 1028: exit_ext2_xattr(void)",
        "// Line_Reference 1030: \tmb_cache_destroy(ext2_xattr_cache);"
    ]
}
