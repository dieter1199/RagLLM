{
    "cve_id": "CVE-2017-16994",
    "cve_description": "The walk_hugetlb_range function in mm/pagewalk.c in the Linux kernel before 4.14.2 mishandles holes in hugetlb ranges, which allows local users to obtain sensitive information from uninitialized kernel memory via crafted use of the mincore() system call.",
    "cve_publish_date": "2017-11-27",
    "cwe_id": "CWE-200",
    "cwe_name": "Exposure of Sensitive Information to an Unauthorized Actor",
    "cwe_description": "The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.",
    "commit_message": "mm/pagewalk.c: report holes in hugetlb ranges\n\nThis matters at least for the mincore syscall, which will otherwise copy\nuninitialized memory from the page allocator to userspace.  It is\nprobably also a correctness error for /proc/$pid/pagemap, but I haven't\ntested that.\n\nRemoving the `walk->hugetlb_entry` condition in walk_hugetlb_range() has\nno effect because the caller already checks for that.\n\nThis only reports holes in hugetlb ranges to callers who have specified\na hugetlb_entry callback.\n\nThis issue was found using an AFL-based fuzzer.\n\nv2:\n - don't crash on ->pte_hole==NULL (Andrew Morton)\n - add Cc stable (Andrew Morton)\n\nFixes: 1e25a271c8ac (\"mincore: apply page table walker on do_mincore()\")\nSigned-off-by: Jann Horn <jannh@google.com>\nCc: <stable@vger.kernel.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "pagewalk.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "5",
    "number_of_lines_deleted_vulnerable_to_cve": "1",
    "vulnerable_lines": [
        "// Line_Reference 191: \t\tif (pte && walk->hugetlb_entry)"
    ]
}
