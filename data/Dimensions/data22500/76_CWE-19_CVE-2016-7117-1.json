{
    "cve_id": "CVE-2016-7117",
    "cve_description": "Use-after-free vulnerability in the __sys_recvmmsg function in net/socket.c in the Linux kernel before 4.5.2 allows remote attackers to execute arbitrary code via vectors involving a recvmmsg system call that is mishandled during error processing.",
    "cve_publish_date": "2016-10-10",
    "cwe_id": "CWE-19",
    "cwe_name": "Data Processing Errors",
    "cwe_description": "Weaknesses in this category are typically found in functionality that processes data. Data processing is the manipulation of input to retrieve or save information.",
    "commit_message": "net: Fix use after free in the recvmmsg exit path\n\nThe syzkaller fuzzer hit the following use-after-free:\n\n  Call Trace:\n   [<ffffffff8175ea0e>] __asan_report_load8_noabort+0x3e/0x40 mm/kasan/report.c:295\n   [<ffffffff851cc31a>] __sys_recvmmsg+0x6fa/0x7f0 net/socket.c:2261\n   [<     inline     >] SYSC_recvmmsg net/socket.c:2281\n   [<ffffffff851cc57f>] SyS_recvmmsg+0x16f/0x180 net/socket.c:2270\n   [<ffffffff86332bb6>] entry_SYSCALL_64_fastpath+0x16/0x7a\n  arch/x86/entry/entry_64.S:185\n\nAnd, as Dmitry rightly assessed, that is because we can drop the\nreference and then touch it when the underlying recvmsg calls return\nsome packets and then hit an error, which will make recvmmsg to set\nsock->sk->sk_err, oops, fix it.\n\nReported-and-Tested-by: Dmitry Vyukov <dvyukov@google.com>\nCc: Alexander Potapenko <glider@google.com>\nCc: Eric Dumazet <edumazet@google.com>\nCc: Kostya Serebryany <kcc@google.com>\nCc: Sasha Levin <sasha.levin@oracle.com>\nFixes: a2e2725541fa (\"net: Introduce recvmmsg socket syscall\")\nhttp://lkml.kernel.org/r/20160122211644.GC2470@redhat.com\nSigned-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "type_of_change": "Modification",
    "filename_of_changes": "socket.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "19",
    "number_of_lines_deleted_vulnerable_to_cve": "19",
    "vulnerable_lines": [
        "// Line_Reference 2247: out_put:",
        "// Line_Reference 2248: \tfput_light(sock->file, fput_needed);",
        "// Line_Reference 2249: ",
        "// Line_Reference 2251: \t\treturn datagrams;",
        "// Line_Reference 2253: \tif (datagrams != 0) {",
        "// Line_Reference 2255: \t\t * We may return less entries than requested (vlen) if the",
        "// Line_Reference 2256: \t\t * sock is non block and there aren't enough datagrams...",
        "// Line_Reference 2258: \t\tif (err != -EAGAIN) {",
        "// Line_Reference 2259: \t\t\t/*",
        "// Line_Reference 2260: \t\t\t * ... or  if recvmsg returns an error after we",
        "// Line_Reference 2261: \t\t\t * received some datagrams, where we record the",
        "// Line_Reference 2262: \t\t\t * error to return on the next call or if the",
        "// Line_Reference 2263: \t\t\t * app asks about it using getsockopt(SO_ERROR).",
        "// Line_Reference 2264: \t\t\t */",
        "// Line_Reference 2265: \t\t\tsock->sk->sk_err = -err;",
        "// Line_Reference 2266: \t\t}",
        "// Line_Reference 2267: ",
        "// Line_Reference 2268: \t\treturn datagrams;",
        "// Line_Reference 2271: \treturn err;"
    ]
}
