{
    "cve_id": "CVE-2016-8649",
    "cve_description": "lxc-attach in LXC before 1.0.9 and 2.x before 2.0.6 allows an attacker inside of an unprivileged container to use an inherited file descriptor, of the host's /proc, to access the rest of the host's filesystem via the openat() family of syscalls.",
    "cve_publish_date": "2017-05-01",
    "cwe_id": "CWE-264",
    "cwe_name": "Permissions, Privileges, and Access Controls",
    "cwe_description": "Weaknesses in this category are related to the management of permissions, privileges, and other security features that are used to perform access control.",
    "commit_message": "attach: do not send procfd to attached process\n\nSo far, we opened a file descriptor refering to proc on the host inside the\nhost namespace and handed that fd to the attached process in\nattach_child_main(). This was done to ensure that LSM labels were correctly\nsetup. However, by exploiting a potential kernel bug, ptrace could be used to\nprevent the file descriptor from being closed which in turn could be used by an\nunprivileged container to gain access to the host namespace. Aside from this\nneeding an upstream kernel fix, we should make sure that we don't pass the fd\nfor proc itself to the attached process. However, we cannot completely prevent\nthis, as the attached process needs to be able to change its apparmor profile\nby writing to /proc/self/attr/exec or /proc/self/attr/current. To minimize the\nattack surface, we only send the fd for /proc/self/attr/exec or\n/proc/self/attr/current to the attached process. To do this we introduce a\nlittle more IPC between the child and parent:\n\n\t * IPC mechanism: (X is receiver)\n\t *   initial process        intermediate          attached\n\t *        X           <---  send pid of\n\t *                          attached proc,\n\t *                          then exit\n\t *    send 0 ------------------------------------>    X\n\t *                                              [do initialization]\n\t *        X  <------------------------------------  send 1\n\t *   [add to cgroup, ...]\n\t *    send 2 ------------------------------------>    X\n\t *\t\t\t\t\t\t[set LXC_ATTACH_NO_NEW_PRIVS]\n\t *        X  <------------------------------------  send 3\n\t *   [open LSM label fd]\n\t *    send 4 ------------------------------------>    X\n\t *   \t\t\t\t\t\t[set LSM label]\n\t *   close socket                                 close socket\n\t *                                                run program\n\nThe attached child tells the parent when it is ready to have its LSM labels set\nup. The parent then opens an approriate fd for the child PID to\n/proc/<pid>/attr/exec or /proc/<pid>/attr/current and sends it via SCM_RIGHTS\nto the child. The child can then set its LSM laben. Both sides then close the\nsocket fds and the child execs the requested process.\n\nSigned-off-by: Christian Brauner <christian.brauner@canonical.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "attach.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "134",
    "number_of_lines_deleted_vulnerable_to_cve": "50",
    "vulnerable_lines": [
        "// Line_Reference 87: int lsm_set_label_at(int procfd, int on_exec, char* lsm_label) {",
        "// Line_Reference 89: \tint ret = 0;",
        "// Line_Reference 91: \tchar* command = NULL;",
        "// Line_Reference 96: \t\tgoto out;",
        "// Line_Reference 99: \t\tgoto out;",
        "// Line_Reference 106: \t\tlabelfd = openat(procfd, \"self/attr/exec\", O_RDWR);",
        "// Line_Reference 107: \t}",
        "// Line_Reference 108: \telse {",
        "// Line_Reference 109: \t\tlabelfd = openat(procfd, \"self/attr/current\", O_RDWR);",
        "// Line_Reference 114: \t\tret = -1;",
        "// Line_Reference 115: \t\tgoto out;",
        "// Line_Reference 124: \t\t\tret = -1;",
        "// Line_Reference 131: \t\t\tret = -1;",
        "// Line_Reference 135: \t\tif (write(labelfd, command, size + 1) < 0) {",
        "// Line_Reference 136: \t\t\tSYSERROR(\"Unable to set LSM label\");",
        "// Line_Reference 137: \t\t\tret = -1;",
        "// Line_Reference 140: \t}",
        "// Line_Reference 141: \telse if (strcmp(name, \"SELinux\") == 0) {",
        "// Line_Reference 142: \t\tif (write(labelfd, lsm_label, strlen(lsm_label) + 1) < 0) {",
        "// Line_Reference 144: \t\t\tret = -1;",
        "// Line_Reference 147: \t}",
        "// Line_Reference 148: \telse {",
        "// Line_Reference 150: \t\tret = -1;",
        "// Line_Reference 157: \tif (labelfd != -1)",
        "// Line_Reference 158: \t\tclose(labelfd);",
        "// Line_Reference 160: \treturn ret;",
        "// Line_Reference 649: \tint procfd;",
        "// Line_Reference 747: \tint procfd;",
        "// Line_Reference 914: \t\t\t\tERROR(\"error using IPC to receive notification from attached process (1)\");",
        "// Line_Reference 922: \t\t\tERROR(\"error using IPC to notify attached process for initialization (2)\");",
        "// Line_Reference 969: \tprocfd = open(\"/proc\", O_DIRECTORY | O_RDONLY);",
        "// Line_Reference 970: \tif (procfd < 0) {",
        "// Line_Reference 971: \t\tSYSERROR(\"Unable to open /proc\");",
        "// Line_Reference 972: \t\tshutdown(ipc_sockets[1], SHUT_RDWR);",
        "// Line_Reference 973: \t\trexit(-1);",
        "// Line_Reference 974: \t}",
        "// Line_Reference 975: ",
        "// Line_Reference 1004: \t\t\t.procfd = procfd",
        "// Line_Reference 1042: \tint procfd = payload->procfd;",
        "// Line_Reference 1063: \t\tERROR(\"error using IPC to receive notification from initial process (0)\");",
        "// Line_Reference 1162: \t\tERROR(\"error using IPC to notify initial process for initialization (1)\");",
        "// Line_Reference 1174: \t\tERROR(\"error using IPC to receive final notification from initial process (2)\");",
        "// Line_Reference 1179: \tshutdown(ipc_socket, SHUT_RDWR);",
        "// Line_Reference 1180: \tclose(ipc_socket);",
        "// Line_Reference 1181: ",
        "// Line_Reference 1195: \t/* set new apparmor profile/selinux context */",
        "// Line_Reference 1200: \t\tif (lsm_set_label_at(procfd, on_exec, init_ctx->lsm_label) < 0) {",
        "// Line_Reference 1248: \t/* we don't need proc anymore */",
        "// Line_Reference 1249: \tclose(procfd);",
        "// Line_Reference 1250: "
    ]
}
