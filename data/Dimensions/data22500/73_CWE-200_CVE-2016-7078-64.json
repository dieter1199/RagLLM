{
    "cve_id": "CVE-2016-7078",
    "cve_description": "foreman before version 1.15.0 is vulnerable to an information leak through organizations and locations feature. When a user is assigned _no_ organizations/locations, they are able to view all resources instead of none (mirroring an administrator's view). The user's actions are still limited by their assigned permissions, e.g. to control viewing, editing and deletion.",
    "cve_publish_date": "2018-09-10",
    "cwe_id": "CWE-200",
    "cwe_name": "Exposure of Sensitive Information to an Unauthorized Actor",
    "cwe_description": "The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.",
    "commit_message": "Fixes #16982 - Scope properly when no taxonomies are set\n\nThe default scope for hosts and other objects did not restrict\nproperly by taxonomies. An user without organizations or\nlocations, could do anything it's permissions allow to.\nThe list of hosts was unrestricted and showed hosts in\nany location or organization.\n\nThis is fixed to work so that:\n\nUsers without taxonomies, when set to 'any context' cannot see\nanything (at all)\n\nUsers with taxonomies, when set to 'any context' can see\neverything within all of their taxonomies context (including\nchildren taxonomies).\n\nAdmins set to 'any context' can see everything - regardless\nof whether it has a taxonomy or not.\n\nUsers or admins set to some organization/location scope\ncan only see stuff within scope.",
    "type_of_change": "Modification",
    "filename_of_changes": "taxonomix.rb",
    "code_language": "Ruby",
    "number_of_lines_added_for_mitigation": "44",
    "number_of_lines_deleted_vulnerable_to_cve": "24",
    "vulnerable_lines": [
        "// Line_Reference 6:     taxonomy_join_table = :taxable_taxonomies",
        "// Line_Reference 7:     has_many taxonomy_join_table.to_sym, :dependent => :destroy, :as => :taxable",
        "// Line_Reference 9:              :through => taxonomy_join_table, :source => :taxonomy,",
        "// Line_Reference 12:              :through => taxonomy_join_table, :source => :taxonomy,",
        "// Line_Reference 34:       scope = block_given? ? yield : where('1=1')",
        "// Line_Reference 72:       if SETTINGS[:locations_enabled] && loc.present?",
        "// Line_Reference 73:         inner_ids_loc = if Location.ignore?(self.to_s)",
        "// Line_Reference 74:                           self.unscoped.pluck(\"#{table_name}.id\")",
        "// Line_Reference 75:                         else",
        "// Line_Reference 76:                           inner_select(loc, inner_method)",
        "// Line_Reference 77:                         end",
        "// Line_Reference 79:       if SETTINGS[:organizations_enabled] && org.present?",
        "// Line_Reference 80:         inner_ids_org = if Organization.ignore?(self.to_s)",
        "// Line_Reference 81:                           self.unscoped.pluck(\"#{table_name}.id\")",
        "// Line_Reference 82:                         else",
        "// Line_Reference 83:                           inner_select(org, inner_method)",
        "// Line_Reference 84:                         end",
        "// Line_Reference 85:       end",
        "// Line_Reference 86:       inner_ids   = inner_ids_loc & inner_ids_org if (inner_ids_loc && inner_ids_org)",
        "// Line_Reference 87:       inner_ids ||= inner_ids_loc if inner_ids_loc",
        "// Line_Reference 88:       inner_ids ||= inner_ids_org if inner_ids_org",
        "// Line_Reference 89:       # In the case of users we want the taxonomy scope to get both the users of the taxonomy and admins.",
        "// Line_Reference 90:       inner_ids.concat(admin_ids) if inner_ids && self == User",
        "// Line_Reference 91:       inner_ids"
    ]
}
