{
    "cve_id": "CVE-2016-7078",
    "cve_description": "foreman before version 1.15.0 is vulnerable to an information leak through organizations and locations feature. When a user is assigned _no_ organizations/locations, they are able to view all resources instead of none (mirroring an administrator's view). The user's actions are still limited by their assigned permissions, e.g. to control viewing, editing and deletion.",
    "cve_publish_date": "2018-09-10",
    "cwe_id": "CWE-200",
    "cwe_name": "Exposure of Sensitive Information to an Unauthorized Actor",
    "cwe_description": "The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.",
    "commit_message": "Fixes #16982 - Scope properly when no taxonomies are set\n\nThe default scope for hosts and other objects did not restrict\nproperly by taxonomies. An user without organizations or\nlocations, could do anything it's permissions allow to.\nThe list of hosts was unrestricted and showed hosts in\nany location or organization.\n\nThis is fixed to work so that:\n\nUsers without taxonomies, when set to 'any context' cannot see\nanything (at all)\n\nUsers with taxonomies, when set to 'any context' can see\neverything within all of their taxonomies context (including\nchildren taxonomies).\n\nAdmins set to 'any context' can see everything - regardless\nof whether it has a taxonomy or not.\n\nUsers or admins set to some organization/location scope\ncan only see stuff within scope.",
    "type_of_change": "Modification",
    "filename_of_changes": "hosts_controller_test.rb",
    "code_language": "Ruby",
    "number_of_lines_added_for_mitigation": "31",
    "number_of_lines_deleted_vulnerable_to_cve": "18",
    "vulnerable_lines": [
        "// Line_Reference 66:     assert_difference 'Host.count' do",
        "// Line_Reference 94:     assert_difference 'Host.count' do",
        "// Line_Reference 144:     assert_difference('Host.count', -1) do",
        "// Line_Reference 385:     hosts.map! {|h| Host.find(h.id)}",
        "// Line_Reference 386:     hosts.each { |host| assert_equal hostgroup, host.hostgroup }",
        "// Line_Reference 405:       host = Host.find_by_name name",
        "// Line_Reference 406:       assert_not_nil host",
        "// Line_Reference 407:       assert_equal host.hostgroup, hostgroup",
        "// Line_Reference 426:     assert_equal environments(:global_puppetmaster), Host.find(@host1.id).environment",
        "// Line_Reference 427:     assert_equal environments(:global_puppetmaster), Host.find(@host2.id).environment",
        "// Line_Reference 452:     assert Host.find(@host1.id).environment == hostgroup.environment",
        "// Line_Reference 453:     assert Host.find(@host2.id).environment == hostgroup.environment",
        "// Line_Reference 464:     assert_equal users(:one).id_and_type, Host.find(@host1.id).is_owned_by",
        "// Line_Reference 465:     assert_equal users(:one).id_and_type, Host.find(@host2.id).is_owned_by",
        "// Line_Reference 555:         assert_equal proxy, host.reload.puppet_ca_proxy",
        "// Line_Reference 647:     host = Host.first",
        "// Line_Reference 934:     assert_difference \"location.hosts.count\", (Host.count - cnt_hosts_location) do",
        "// Line_Reference 1005:     assert_difference \"organization.hosts.count\", (Host.count - cnt_hosts_organization) do"
    ]
}
