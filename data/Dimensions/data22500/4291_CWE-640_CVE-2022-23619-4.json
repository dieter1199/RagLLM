{
    "cve_id": "CVE-2022-23619",
    "cve_description": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. In affected versions it's possible to guess if a user has an account on the wiki by using the \"Forgot your password\" form, even if the wiki is closed to guest users. This problem has been patched on XWiki 12.10.9, 13.4.1 and 13.6RC1. Users are advised yo update. There are no known workarounds for this issue.",
    "cve_publish_date": "2022-02-09",
    "cwe_id": "CWE-640",
    "cwe_name": "Weak Password Recovery Mechanism for Forgotten Password",
    "cwe_description": "The product contains a mechanism for users to recover or change their passwords without knowing the original password, but the mechanism is weak.",
    "commit_message": "XWIKI-18787: Authentication API does not return proper results (#1651)\n\n  * Refactor a bit the Authentication API to be more sound\r\n  * Fix related tests\r\n  * Fix missing escape",
    "type_of_change": "Modification",
    "filename_of_changes": "DefaultResetPasswordManagerTest.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "32",
    "number_of_lines_deleted_vulnerable_to_cve": "32",
    "vulnerable_lines": [
        "// Line_Reference 148:             new DefaultResetPasswordRequestResponse(this.userReference, email,",
        "// Line_Reference 149:                 verificationCode);",
        "// Line_Reference 156:     void requestResetPasswordUnexistingUser()",
        "// Line_Reference 160:         String exceptionMessage = \"User [user:Foobar] doesn't exist\";",
        "// Line_Reference 161:         when(this.localizationManager.getTranslationPlain(\"xe.admin.passwordReset.error.noUser\",",
        "// Line_Reference 162:             \"user:Foobar\")).thenReturn(exceptionMessage);",
        "// Line_Reference 163:         ResetPasswordException resetPasswordException = assertThrows(ResetPasswordException.class,",
        "// Line_Reference 164:             () -> this.resetPasswordManager.requestResetPassword(this.userReference));",
        "// Line_Reference 165:         assertEquals(exceptionMessage, resetPasswordException.getMessage());",
        "// Line_Reference 183:         String exceptionMessage = \"User has no email address.\";",
        "// Line_Reference 184:         when(this.localizationManager.getTranslationPlain(\"xe.admin.passwordReset.error.noEmail\"))",
        "// Line_Reference 185:             .thenReturn(exceptionMessage);",
        "// Line_Reference 186:         ResetPasswordException resetPasswordException = assertThrows(ResetPasswordException.class,",
        "// Line_Reference 187:             () -> this.resetPasswordManager.requestResetPassword(this.userReference));",
        "// Line_Reference 188:         assertEquals(exceptionMessage, resetPasswordException.getMessage());",
        "// Line_Reference 235:             new DefaultResetPasswordRequestResponse(this.userReference, email,",
        "// Line_Reference 236:                 verificationCode);",
        "// Line_Reference 269:             new DefaultResetPasswordRequestResponse(this.userReference, email,",
        "// Line_Reference 270:                 newVerificationCode);",
        "// Line_Reference 277:     void checkVerificationCodeUnexistingUser()",
        "// Line_Reference 281:         String exceptionMessage = \"User [user:Foobar] doesn't exist\";",
        "// Line_Reference 282:         when(this.localizationManager.getTranslationPlain(\"xe.admin.passwordReset.error.noUser\",",
        "// Line_Reference 283:             \"user:Foobar\")).thenReturn(exceptionMessage);",
        "// Line_Reference 284:         ResetPasswordException resetPasswordException = assertThrows(ResetPasswordException.class,",
        "// Line_Reference 285:             () -> this.resetPasswordManager.checkVerificationCode(this.userReference, \"some code\"));",
        "// Line_Reference 286:         assertEquals(exceptionMessage, resetPasswordException.getMessage());",
        "// Line_Reference 361:         String exceptionMessage = \"User [user:Foobar] doesn't exist\";",
        "// Line_Reference 362:         when(this.localizationManager.getTranslationPlain(\"xe.admin.passwordReset.error.noUser\",",
        "// Line_Reference 363:             \"user:Foobar\")).thenReturn(exceptionMessage);",
        "// Line_Reference 364:         ResetPasswordException resetPasswordException = assertThrows(ResetPasswordException.class,",
        "// Line_Reference 365:             () -> this.resetPasswordManager.resetPassword(this.userReference, \"some password\"));",
        "// Line_Reference 366:         assertEquals(exceptionMessage, resetPasswordException.getMessage());"
    ]
}
