{
    "cve_id": "CVE-2018-10756",
    "cve_description": "Use-after-free in libtransmission/variant.c in Transmission before 3.00 allows remote attackers to cause a denial of service (crash) or possibly execute arbitrary code via a crafted torrent file.",
    "cve_publish_date": "2020-05-15",
    "cwe_id": "CWE-416",
    "cwe_name": "Use After Free",
    "cwe_description": "The product reuses or references memory after it has been freed. At some point afterward, the memory may be allocated again and saved in another pointer, while the original pointer references a location somewhere within the new allocation. Any operations using the original pointer are no longer valid because the memory \"belongs\" to the code that operates on the new pointer.",
    "commit_message": "CVE-2018-10756: Fix heap-use-after-free in tr_variantWalk\n\nIn libtransmission/variant.c, function tr_variantWalk, when the variant\nstack is reallocated, a pointer to the previously allocated memory\nregion is kept. This address is later accessed (heap use-after-free)\nwhile walking back down the stack, causing the application to crash.\nThe application can be any application which uses libtransmission, such\nas transmission-daemon, transmission-gtk, transmission-show, etc.\n\nReported-by: Tom Richards <tom@tomrichards.net>",
    "type_of_change": "Modification",
    "filename_of_changes": "variant.c",
    "code_language": "C++",
    "number_of_lines_added_for_mitigation": "14",
    "number_of_lines_deleted_vulnerable_to_cve": "8",
    "vulnerable_lines": [
        "// Line_Reference 761:     tr_variant sorted;",
        "// Line_Reference 786:         tr_variantInitDict(&node->sorted, n);",
        "// Line_Reference 790:             node->sorted.val.l.vals[i] = *tmp[i].val;",
        "// Line_Reference 793:         node->sorted.val.l.count = n;",
        "// Line_Reference 797:         node->v = &node->sorted;",
        "// Line_Reference 801:         node->v = v;",
        "// Line_Reference 807:     if (node->v == &node->sorted)",
        "// Line_Reference 809:         tr_free(node->sorted.val.l.vals);"
    ]
}
