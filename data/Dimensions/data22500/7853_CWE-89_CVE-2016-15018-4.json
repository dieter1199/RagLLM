{
    "cve_id": "CVE-2016-15018",
    "cve_description": "A vulnerability was found in krail-jpa up to 0.9.1. It has been classified as critical. This affects an unknown part. The manipulation leads to sql injection. Upgrading to version 0.9.2 is able to address this issue. The identifier of the patch is c1e848665492e21ef6cc9be443205e36b9a1f6be. It is recommended to upgrade the affected component. The identifier VDB-218373 was assigned to this vulnerability.",
    "cve_publish_date": "2023-01-15",
    "cwe_id": "CWE-89",
    "cwe_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
    "cwe_description": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.",
    "commit_message": "Fix #18 SQLInjection vulnerability cleared\n\nPattern and Option DAOs re-written to a common key-value base class.  Using composite primary key in place of surrogate key.",
    "type_of_change": "Modification",
    "filename_of_changes": "DefaultJpaOptionDao.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "34",
    "number_of_lines_deleted_vulnerable_to_cve": "84",
    "vulnerable_lines": [
        "// Line_Reference 16: import com.google.common.base.Preconditions;",
        "// Line_Reference 26: import uk.q3c.krail.core.user.opt.OptionException;",
        "// Line_Reference 31: import uk.q3c.krail.jpa.persist.DefaultJpaDao_LongInt;",
        "// Line_Reference 34: import javax.persistence.EntityManager;",
        "// Line_Reference 35: import javax.persistence.Query;",
        "// Line_Reference 36: import javax.persistence.TypedQuery;",
        "// Line_Reference 44:  * Converts {@link OptionCacheKey} to {@link OptionEntity_LongInt} for persistence.",
        "// Line_Reference 54: public class DefaultOptionJpaDao_LongInt extends DefaultJpaDao_LongInt implements OptionJpaDao_LongInt {",
        "// Line_Reference 60:     protected DefaultOptionJpaDao_LongInt(EntityManagerProvider entityManagerProvider, OptionStringConverter optionStringConverter) {",
        "// Line_Reference 61:         super(entityManagerProvider);",
        "// Line_Reference 65:     @Override",
        "// Line_Reference 66:     @Transactional",
        "// Line_Reference 67:     @Nonnull",
        "// Line_Reference 68:     public <V> Object write(@Nonnull OptionCacheKey cacheKey, @Nonnull Optional<V> value) {",
        "// Line_Reference 69:         checkRankOption(cacheKey, SPECIFIC_RANK);",
        "// Line_Reference 70:         Preconditions.checkArgument(value.isPresent(), \"Value must be non-empty\");",
        "// Line_Reference 71:         EntityManager entityManager = getEntityManager();",
        "// Line_Reference 72:         // is there an existing entity (bearing in mind that the id field is not the same as the key field",
        "// Line_Reference 73:         String stringValue = optionStringConverter.convertValueToString(value.get());",
        "// Line_Reference 76:         Optional<OptionEntity_LongInt> existingEntity = find(cacheKey);",
        "// Line_Reference 77:         if (existingEntity.isPresent()) {",
        "// Line_Reference 78:             OptionEntity_LongInt existing = existingEntity.get();",
        "// Line_Reference 79:             existing",
        "// Line_Reference 80:                           .setValue(stringValue);",
        "// Line_Reference 81:             entityManager.persist(existingEntity.get());",
        "// Line_Reference 82:             return existing;",
        "// Line_Reference 83:         } else {",
        "// Line_Reference 84:             //noinspection ConstantConditions",
        "// Line_Reference 85:             final OptionEntity_LongInt entity = new OptionEntity_LongInt(cacheKey, stringValue);",
        "// Line_Reference 86:             entityManager.persist(entity);",
        "// Line_Reference 87:             return entity;",
        "// Line_Reference 88:         }",
        "// Line_Reference 89: ",
        "// Line_Reference 90:     }",
        "// Line_Reference 91: ",
        "// Line_Reference 92:     @Transactional",
        "// Line_Reference 93:     @Nonnull",
        "// Line_Reference 94:     public Optional<OptionEntity_LongInt> find(@Nonnull OptionCacheKey cacheKey) {",
        "// Line_Reference 95:         checkRankOption(cacheKey, SPECIFIC_RANK);",
        "// Line_Reference 96: ",
        "// Line_Reference 97:         Select select = selectSingleRank(cacheKey);",
        "// Line_Reference 98: ",
        "// Line_Reference 99:         TypedQuery<OptionEntity_LongInt> query = getEntityManager().createQuery(select.statement(), OptionEntity_LongInt.class);",
        "// Line_Reference 100:         List<OptionEntity_LongInt> results = query.getResultList();",
        "// Line_Reference 101:         if (results.isEmpty()) {",
        "// Line_Reference 102:             return Optional.empty();",
        "// Line_Reference 103:         } else {",
        "// Line_Reference 104:             if (results.size() > 1) {",
        "// Line_Reference 105:                 throw new OptionException(\"Multiple values for one cache key found, cacheKey =  \" + cacheKey);",
        "// Line_Reference 106:             }",
        "// Line_Reference 107:             return Optional.of(results.get(0));",
        "// Line_Reference 108:         }",
        "// Line_Reference 109:     }",
        "// Line_Reference 110: ",
        "// Line_Reference 112:         return new Select().from(entityName(OptionEntity_LongInt.class))",
        "// Line_Reference 120:     @Transactional",
        "// Line_Reference 121:     @Nonnull",
        "// Line_Reference 122:     @Override",
        "// Line_Reference 123:     public Optional<?> deleteValue(@Nonnull OptionCacheKey cacheKey) {",
        "// Line_Reference 124:         checkRankOption(cacheKey, SPECIFIC_RANK);",
        "// Line_Reference 125:         final Optional<OptionEntity_LongInt> entity = find(cacheKey);",
        "// Line_Reference 126:         if (entity.isPresent()) {",
        "// Line_Reference 127:             String entityValue = entity.get()",
        "// Line_Reference 128:                                        .getValue();",
        "// Line_Reference 129:             delete(entity.get());",
        "// Line_Reference 130:             return Optional.of(entityValue);",
        "// Line_Reference 131:         } else {",
        "// Line_Reference 132:             return Optional.empty();",
        "// Line_Reference 133:         }",
        "// Line_Reference 134:     }",
        "// Line_Reference 135: ",
        "// Line_Reference 172:         final Optional<OptionEntity_LongInt> optionalEntity = find(cacheKey);",
        "// Line_Reference 173:         if (optionalEntity.isPresent()) {",
        "// Line_Reference 174: ",
        "// Line_Reference 175:             String value = optionalEntity.get()",
        "// Line_Reference 176:                                          .getValue();",
        "// Line_Reference 177: ",
        "// Line_Reference 178:             return Optional.of(optionStringConverter.convertStringToValue(cacheKey, value));",
        "// Line_Reference 179:         } else {",
        "// Line_Reference 180:             return Optional.empty();",
        "// Line_Reference 181:         }",
        "// Line_Reference 202:         final Query query = getEntityManager().createQuery(\"DELETE FROM \" + entityName(OptionEntity_LongInt.class));",
        "// Line_Reference 203:         return query.executeUpdate();",
        "// Line_Reference 211:         return super.count(OptionEntity_LongInt.class);"
    ]
}
