{
    "cve_id": "CVE-2022-3439",
    "cve_description": "Allocation of Resources Without Limits or Throttling in GitHub repository ikus060/rdiffweb prior to 2.5.0.",
    "cve_publish_date": "2022-10-14",
    "cwe_id": "CWE-770",
    "cwe_name": "Allocation of Resources Without Limits or Throttling",
    "cwe_description": "The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.",
    "commit_message": "Improve ratelimit implementation",
    "type_of_change": "Modification",
    "filename_of_changes": "ratelimit.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "54",
    "number_of_lines_deleted_vulnerable_to_cve": "23",
    "vulnerable_lines": [
        "// Line_Reference 2: # rdiffweb, A web interface to rdiff-backup repositories",
        "// Line_Reference 3: # Copyright (C) 2012-2021 rdiffweb contributors",
        "// Line_Reference 36:     def get_and_increment(self, token, delay):",
        "// Line_Reference 42:             tracker = tracker._replace(hits=tracker.hits + 1)",
        "// Line_Reference 100:         except (IOError, EOFError):",
        "// Line_Reference 114: def check_ratelimit(delay=60, anonymous_limit=0, registered_limit=0, rate_exceed_status=429, debug=False, **conf):",
        "// Line_Reference 116:     Verify the ratelimit. By default return a 429 HTTP error code (Too Many Request).",
        "// Line_Reference 118:     Usage:",
        "// Line_Reference 120:     @cherrypy.tools.ratelimit(on=True, anonymous_limit=5, registered_limit=50, storage_class=FileRateLimit, storage_path='/tmp')",
        "// Line_Reference 121:     def index(self):",
        "// Line_Reference 122:         pass",
        "// Line_Reference 123:     \"\"\"",
        "// Line_Reference 126:     datastore = getattr(cherrypy, '_ratelimit_datastore', None)",
        "// Line_Reference 131:         cherrypy._ratelimit_datastore = datastore",
        "// Line_Reference 134:     token = cherrypy.request.login or cherrypy.request.remote.ip",
        "// Line_Reference 135: ",
        "// Line_Reference 136:     # Get the real limit depending of user login.",
        "// Line_Reference 137:     limit = registered_limit if cherrypy.request.login else anonymous_limit",
        "// Line_Reference 138:     if limit is None or limit <= 0:",
        "// Line_Reference 139:         return",
        "// Line_Reference 142:     hits = datastore.get_and_increment(token, delay)",
        "// Line_Reference 145:             'check and increase rate limit for token %s, limit %s, hits %s' % (token, limit, hits), 'TOOLS.RATELIMIT'",
        "// Line_Reference 150:         raise cherrypy.HTTPError(rate_exceed_status)"
    ]
}
