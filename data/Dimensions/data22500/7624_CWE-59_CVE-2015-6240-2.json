{
    "cve_id": "CVE-2015-6240",
    "cve_description": "The chroot, jail, and zone connection plugins in ansible before 1.9.2 allow local users to escape a restricted environment via a symlink attack.",
    "cve_publish_date": "2017-06-07",
    "cwe_id": "CWE-59",
    "cwe_name": "Improper Link Resolution Before File Access ('Link Following')",
    "cwe_description": "The product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.",
    "commit_message": "Fix problem with jail and zone connection plugins and symlinks from within the jail/zone.",
    "type_of_change": "Modification",
    "filename_of_changes": "zone.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "47",
    "number_of_lines_deleted_vulnerable_to_cve": "30",
    "vulnerable_lines": [
        "// Line_Reference 26: import shutil",
        "// Line_Reference 28: from subprocess import Popen,PIPE",
        "// Line_Reference 47:         #stdout, stderr = p.communicate()",
        "// Line_Reference 105:     def exec_command(self, cmd, tmp_path, become_user=None, sudoable=False, executable=None, in_data=None):",
        "// Line_Reference 106:         ''' run a command on the zone '''",
        "// Line_Reference 115:         if executable == '/bin/sh':",
        "// Line_Reference 116:           executable = None",
        "// Line_Reference 122:                              stdin=subprocess.PIPE,",
        "// Line_Reference 128:     def _normalize_path(self, path, prefix):",
        "// Line_Reference 129:         if not path.startswith(os.path.sep):",
        "// Line_Reference 130:             path = os.path.join(os.path.sep, path)",
        "// Line_Reference 131:         normpath = os.path.normpath(path)",
        "// Line_Reference 132:         return os.path.join(prefix, normpath[1:])",
        "// Line_Reference 133: ",
        "// Line_Reference 134:     def _copy_file(self, in_path, out_path):",
        "// Line_Reference 135:         if not os.path.exists(in_path):",
        "// Line_Reference 136:             raise errors.AnsibleFileNotFound(\"file or module does not exist: %s\" % in_path)",
        "// Line_Reference 137:         try:",
        "// Line_Reference 138:             shutil.copyfile(in_path, out_path)",
        "// Line_Reference 139:         except shutil.Error:",
        "// Line_Reference 140:             traceback.print_exc()",
        "// Line_Reference 141:             raise errors.AnsibleError(\"failed to copy: %s and %s are the same\" % (in_path, out_path))",
        "// Line_Reference 142:         except IOError:",
        "// Line_Reference 143:             traceback.print_exc()",
        "// Line_Reference 144:             raise errors.AnsibleError(\"failed to transfer file to %s\" % out_path)",
        "// Line_Reference 145: ",
        "// Line_Reference 149:         out_path = self._normalize_path(out_path, self.get_zone_path())",
        "// Line_Reference 152:         self._copy_file(in_path, out_path)",
        "// Line_Reference 157:         in_path = self._normalize_path(in_path, self.get_zone_path())",
        "// Line_Reference 160:         self._copy_file(in_path, out_path)"
    ]
}
