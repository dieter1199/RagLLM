{
    "cve_id": "CVE-2022-23619",
    "cve_description": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. In affected versions it's possible to guess if a user has an account on the wiki by using the \"Forgot your password\" form, even if the wiki is closed to guest users. This problem has been patched on XWiki 12.10.9, 13.4.1 and 13.6RC1. Users are advised yo update. There are no known workarounds for this issue.",
    "cve_publish_date": "2022-02-09",
    "cwe_id": "CWE-640",
    "cwe_name": "Weak Password Recovery Mechanism for Forgotten Password",
    "cwe_description": "The product contains a mechanism for users to recover or change their passwords without knowing the original password, but the mechanism is weak.",
    "commit_message": "XWIKI-18787: Authentication API does not return proper results (#1651)\n\n  * Refactor a bit the Authentication API to be more sound\r\n  * Fix related tests\r\n  * Fix missing escape",
    "type_of_change": "Modification",
    "filename_of_changes": "DefaultResetPasswordManager.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "145",
    "number_of_lines_deleted_vulnerable_to_cve": "138",
    "vulnerable_lines": [
        "// Line_Reference 113:     private void checkUserReference(UserReference userReference) throws ResetPasswordException",
        "// Line_Reference 114:     {",
        "// Line_Reference 115:         if (!this.userManager.exists(userReference)) {",
        "// Line_Reference 116:             String exceptionMessage =",
        "// Line_Reference 117:                 this.localizationManager.getTranslationPlain(\"xe.admin.passwordReset.error.noUser\",",
        "// Line_Reference 118:                     userReference.toString());",
        "// Line_Reference 119:             throw new ResetPasswordException(exceptionMessage);",
        "// Line_Reference 120:         }",
        "// Line_Reference 132:         this.checkUserReference(userReference);",
        "// Line_Reference 133: ",
        "// Line_Reference 134:         UserProperties userProperties = this.userPropertiesResolver.resolve(userReference);",
        "// Line_Reference 135:         InternetAddress email = userProperties.getEmail();",
        "// Line_Reference 136: ",
        "// Line_Reference 137:         if (email == null) {",
        "// Line_Reference 138:             String exceptionMessage =",
        "// Line_Reference 139:                 this.localizationManager.getTranslationPlain(\"xe.admin.passwordReset.error.noEmail\");",
        "// Line_Reference 140:             throw new ResetPasswordException(exceptionMessage);",
        "// Line_Reference 141:         }",
        "// Line_Reference 142: ",
        "// Line_Reference 143:         DocumentUserReference documentUserReference = (DocumentUserReference) userReference;",
        "// Line_Reference 144:         DocumentReference reference = documentUserReference.getReference();",
        "// Line_Reference 145:         XWikiContext context = this.contextProvider.get();",
        "// Line_Reference 146: ",
        "// Line_Reference 147:         try {",
        "// Line_Reference 148:             XWikiDocument userDocument = context.getWiki().getDocument(reference, context);",
        "// Line_Reference 149: ",
        "// Line_Reference 150:             if (userDocument.getXObject(LDAP_CLASS_REFERENCE) != null) {",
        "// Line_Reference 151:                 String exceptionMessage =",
        "// Line_Reference 152:                     this.localizationManager.getTranslationPlain(\"xe.admin.passwordReset.error.ldapUser\",",
        "// Line_Reference 153:                         userReference.toString());",
        "// Line_Reference 154:                 throw new ResetPasswordException(exceptionMessage);",
        "// Line_Reference 156: ",
        "// Line_Reference 157:             BaseObject xObject = userDocument.getXObject(RESET_PASSWORD_REQUEST_CLASS_REFERENCE, true, context);",
        "// Line_Reference 158:             String verificationCode = context.getWiki().generateRandomString(30);",
        "// Line_Reference 159:             xObject.set(VERIFICATION_PROPERTY, verificationCode, context);",
        "// Line_Reference 160: ",
        "// Line_Reference 161:             String saveComment =",
        "// Line_Reference 162:                 this.localizationManager.getTranslationPlain(\"xe.admin.passwordReset.versionComment\");",
        "// Line_Reference 163:             context.getWiki().saveDocument(userDocument, saveComment, true, context);",
        "// Line_Reference 164: ",
        "// Line_Reference 165:             return new DefaultResetPasswordRequestResponse(userReference, email, verificationCode);",
        "// Line_Reference 166:         } catch (XWikiException e) {",
        "// Line_Reference 167:             throw new ResetPasswordException(\"Error when reading user document to perform reset password request.\", e);",
        "// Line_Reference 175:         AuthenticationResourceReference resourceReference =",
        "// Line_Reference 176:             new AuthenticationResourceReference(AuthenticationAction.RESET_PASSWORD);",
        "// Line_Reference 177: ",
        "// Line_Reference 178:         UserReference userReference = requestResponse.getUserReference();",
        "// Line_Reference 179:         UserProperties userProperties = this.userPropertiesResolver.resolve(userReference);",
        "// Line_Reference 180:         String serializedUserReference = this.referenceSerializer.serialize(userReference);",
        "// Line_Reference 181: ",
        "// Line_Reference 182:         // FIXME: this should be provided as part of the User API.",
        "// Line_Reference 183:         String formattedName = \"\";",
        "// Line_Reference 184:         if (!StringUtils.isBlank(userProperties.getFirstName())) {",
        "// Line_Reference 185:             formattedName += userProperties.getFirstName();",
        "// Line_Reference 186:         }",
        "// Line_Reference 187:         if (!StringUtils.isBlank(userProperties.getLastName())) {",
        "// Line_Reference 188:             if (!StringUtils.isBlank(formattedName)) {",
        "// Line_Reference 189:                 formattedName += \" \";",
        "// Line_Reference 191:             formattedName += userProperties.getLastName();",
        "// Line_Reference 192:         }",
        "// Line_Reference 193:         if (StringUtils.isBlank(formattedName)) {",
        "// Line_Reference 194:             formattedName = serializedUserReference;",
        "// Line_Reference 195:         }",
        "// Line_Reference 196:         resourceReference.addParameter(\"u\", serializedUserReference);",
        "// Line_Reference 197:         resourceReference.addParameter(\"v\", requestResponse.getVerificationCode());",
        "// Line_Reference 198: ",
        "// Line_Reference 199:         XWikiContext context = contextProvider.get();",
        "// Line_Reference 200: ",
        "// Line_Reference 201:         ExtendedURL extendedURL = null;",
        "// Line_Reference 202:         try {",
        "// Line_Reference 203:             extendedURL = this.resourceReferenceSerializer.serialize(resourceReference);",
        "// Line_Reference 204:             extendedURL = this.urlNormalizer.normalize(extendedURL);",
        "// Line_Reference 205:             URL serverURL = context.getURLFactory().getServerURL(context);",
        "// Line_Reference 206:             URL externalVerificationURL = new URL(serverURL, extendedURL.serialize());",
        "// Line_Reference 207: ",
        "// Line_Reference 208:             this.resetPasswordMailSenderProvider.get()",
        "// Line_Reference 209:                 .sendResetPasswordEmail(formattedName, requestResponse.getUserEmail(), externalVerificationURL);",
        "// Line_Reference 210:         } catch (SerializeResourceReferenceException | UnsupportedResourceReferenceException | MalformedURLException e)",
        "// Line_Reference 211:         {",
        "// Line_Reference 212:             throw new ResetPasswordException(\"Error when processing information for creating the email.\", e);",
        "// Line_Reference 220:         this.checkUserReference(userReference);",
        "// Line_Reference 221:         XWikiContext context = this.contextProvider.get();",
        "// Line_Reference 222: ",
        "// Line_Reference 223:         UserProperties userProperties = this.userPropertiesResolver.resolve(userReference);",
        "// Line_Reference 224:         InternetAddress email = userProperties.getEmail();",
        "// Line_Reference 225: ",
        "// Line_Reference 226:         DocumentUserReference documentUserReference = (DocumentUserReference) userReference;",
        "// Line_Reference 227:         DocumentReference reference = documentUserReference.getReference();",
        "// Line_Reference 228:         String exceptionMessage =",
        "// Line_Reference 229:             this.localizationManager.getTranslationPlain(\"xe.admin.passwordReset.step2.error.wrongParameters\",",
        "// Line_Reference 230:                 userReference.toString());",
        "// Line_Reference 231: ",
        "// Line_Reference 232:         try {",
        "// Line_Reference 233:             XWikiDocument userDocument = context.getWiki().getDocument(reference, context);",
        "// Line_Reference 234:             BaseObject xObject = userDocument.getXObject(RESET_PASSWORD_REQUEST_CLASS_REFERENCE);",
        "// Line_Reference 235:             if (xObject == null) {",
        "// Line_Reference 236:                 throw new ResetPasswordException(exceptionMessage);",
        "// Line_Reference 237:             }",
        "// Line_Reference 239:             String storedVerificationCode = xObject.getStringValue(VERIFICATION_PROPERTY);",
        "// Line_Reference 240:             BaseClass xClass = xObject.getXClass(context);",
        "// Line_Reference 241:             PropertyInterface verification = xClass.get(VERIFICATION_PROPERTY);",
        "// Line_Reference 242:             if (!(verification instanceof PasswordClass)) {",
        "// Line_Reference 243:                 throw new ResetPasswordException(\"Bad definition of ResetPassword XClass.\");",
        "// Line_Reference 244:             }",
        "// Line_Reference 245:             PasswordClass passwordClass = (PasswordClass) verification;",
        "// Line_Reference 246:             String equivalentPassword =",
        "// Line_Reference 247:                 passwordClass.getEquivalentPassword(storedVerificationCode, verificationCode);",
        "// Line_Reference 248: ",
        "// Line_Reference 249:             // We ensure to reset the verification code before checking if it's correct to avoid any bruteforce attack.",
        "// Line_Reference 250:             String newVerificationCode = context.getWiki().generateRandomString(30);",
        "// Line_Reference 251:             xObject.set(VERIFICATION_PROPERTY, newVerificationCode, context);",
        "// Line_Reference 252:             String saveComment = this.localizationManager",
        "// Line_Reference 253:                 .getTranslationPlain(\"xe.admin.passwordReset.step2.versionComment.changeValidationKey\");",
        "// Line_Reference 254:             context.getWiki().saveDocument(userDocument, saveComment, true, context);",
        "// Line_Reference 255: ",
        "// Line_Reference 256:             if (!storedVerificationCode.equals(equivalentPassword)) {",
        "// Line_Reference 257:                 throw new ResetPasswordException(exceptionMessage);",
        "// Line_Reference 258:             }",
        "// Line_Reference 260:             return new DefaultResetPasswordRequestResponse(userReference, email, newVerificationCode);",
        "// Line_Reference 261:         } catch (XWikiException e) {",
        "// Line_Reference 262:             throw new ResetPasswordException(\"Cannot open user document to check verification code.\", e);",
        "// Line_Reference 270:         this.checkUserReference(userReference);",
        "// Line_Reference 271:         XWikiContext context = this.contextProvider.get();",
        "// Line_Reference 272: ",
        "// Line_Reference 273:         DocumentUserReference documentUserReference = (DocumentUserReference) userReference;",
        "// Line_Reference 274:         DocumentReference reference = documentUserReference.getReference();",
        "// Line_Reference 275: ",
        "// Line_Reference 276:         try {",
        "// Line_Reference 277:             XWikiDocument userDocument = context.getWiki().getDocument(reference, context);",
        "// Line_Reference 278:             userDocument.removeXObjects(RESET_PASSWORD_REQUEST_CLASS_REFERENCE);",
        "// Line_Reference 279:             BaseObject userXObject = userDocument.getXObject(USER_CLASS_REFERENCE);",
        "// Line_Reference 280:             userXObject.setStringValue(\"password\", newPassword);",
        "// Line_Reference 281: ",
        "// Line_Reference 282:             String saveComment = this.localizationManager.getTranslationPlain(",
        "// Line_Reference 283:                 \"xe.admin.passwordReset.step2.versionComment.passwordReset\");",
        "// Line_Reference 284:             context.getWiki().saveDocument(userDocument, saveComment, true, context);",
        "// Line_Reference 285:         } catch (XWikiException e) {",
        "// Line_Reference 286:             throw new ResetPasswordException(\"Cannot open user document to perform reset password.\", e);"
    ]
}
