{
    "cve_id": "CVE-2016-7078",
    "cve_description": "foreman before version 1.15.0 is vulnerable to an information leak through organizations and locations feature. When a user is assigned _no_ organizations/locations, they are able to view all resources instead of none (mirroring an administrator's view). The user's actions are still limited by their assigned permissions, e.g. to control viewing, editing and deletion.",
    "cve_publish_date": "2018-09-10",
    "cwe_id": "CWE-200",
    "cwe_name": "Exposure of Sensitive Information to an Unauthorized Actor",
    "cwe_description": "The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.",
    "commit_message": "Fixes #16982 - Scope properly when no taxonomies are set\n\nThe default scope for hosts and other objects did not restrict\nproperly by taxonomies. An user without organizations or\nlocations, could do anything it's permissions allow to.\nThe list of hosts was unrestricted and showed hosts in\nany location or organization.\n\nThis is fixed to work so that:\n\nUsers without taxonomies, when set to 'any context' cannot see\nanything (at all)\n\nUsers with taxonomies, when set to 'any context' can see\neverything within all of their taxonomies context (including\nchildren taxonomies).\n\nAdmins set to 'any context' can see everything - regardless\nof whether it has a taxonomy or not.\n\nUsers or admins set to some organization/location scope\ncan only see stuff within scope.",
    "type_of_change": "Modification",
    "filename_of_changes": "taxonomix_test.rb",
    "code_language": "Ruby",
    "number_of_lines_added_for_mitigation": "104",
    "number_of_lines_deleted_vulnerable_to_cve": "44",
    "vulnerable_lines": [
        "// Line_Reference 73:       user = FactoryGirl.create(:user, :organizations => [@org, org2])",
        "// Line_Reference 165:   test \".taxable_ids can work with empty array returning nil\" do",
        "// Line_Reference 166:     dummy_class = @dummy.class",
        "// Line_Reference 167:     assert_nil dummy_class.taxable_ids([], [])",
        "// Line_Reference 168:   end",
        "// Line_Reference 170:   test \".taxable_ids (and .inner_select) can work with array of taxonomies\" do",
        "// Line_Reference 171:     loc1 = FactoryGirl.create(:location)",
        "// Line_Reference 172:     loc2 = FactoryGirl.create(:location, :parent_id => loc1.id)",
        "// Line_Reference 173:     loc3 = FactoryGirl.create(:location, :parent_id => loc2.id)",
        "// Line_Reference 174:     loc4 = FactoryGirl.create(:location)",
        "// Line_Reference 175:     org = FactoryGirl.create(:organization)",
        "// Line_Reference 176:     env1 = FactoryGirl.create(:environment, :organizations => [org], :locations => [loc2])",
        "// Line_Reference 177:     env2 = FactoryGirl.create(:environment, :organizations => [org])",
        "// Line_Reference 178:     env3 = FactoryGirl.create(:environment, :locations => [loc2])",
        "// Line_Reference 179:     env4 = FactoryGirl.create(:environment, :locations => [loc4])",
        "// Line_Reference 180:     env5 = FactoryGirl.create(:environment, :locations => [loc1])",
        "// Line_Reference 181:     env6 = FactoryGirl.create(:environment, :locations => [loc3])",
        "// Line_Reference 182: ",
        "// Line_Reference 183:     taxable_ids = Environment.taxable_ids([loc2, loc4], org, :subtree_ids)",
        "// Line_Reference 184:     visible = [ env1 ]",
        "// Line_Reference 185:     invisible = [ env2, env3, env4, env5, env6 ]",
        "// Line_Reference 186:     visible.each { |env| assert_includes taxable_ids, env.id }",
        "// Line_Reference 187:     invisible.each { |env| refute_includes taxable_ids, env.id }",
        "// Line_Reference 188: ",
        "// Line_Reference 189:     taxable_ids = Environment.taxable_ids([], org, :subtree_ids)",
        "// Line_Reference 190:     visible = [ env1, env2 ]",
        "// Line_Reference 191:     invisible = [ env3, env4, env5, env6 ]",
        "// Line_Reference 192:     visible.each { |env| assert_includes taxable_ids, env.id }",
        "// Line_Reference 193:     invisible.each { |env| refute_includes taxable_ids, env.id }",
        "// Line_Reference 194: ",
        "// Line_Reference 195:     taxable_ids = Environment.taxable_ids(loc2, [], :subtree_ids)",
        "// Line_Reference 196:     visible = [ env1, env3, env5, env6 ]",
        "// Line_Reference 197:     invisible = [ env2, env4 ]",
        "// Line_Reference 198:     visible.each { |env| assert_includes taxable_ids, env.id }",
        "// Line_Reference 199:     invisible.each { |env| refute_includes taxable_ids, env.id }",
        "// Line_Reference 200: ",
        "// Line_Reference 201:     taxable_ids = Environment.taxable_ids([loc2, loc4], [], :subtree_ids)",
        "// Line_Reference 202:     visible = [ env1, env3, env4, env5, env6 ]",
        "// Line_Reference 203:     invisible = [ env2 ]",
        "// Line_Reference 204:     visible.each { |env| assert_includes taxable_ids, env.id }",
        "// Line_Reference 205:     invisible.each { |env| refute_includes taxable_ids, env.id }",
        "// Line_Reference 282:     used_organizations = user.used_organization_ids",
        "// Line_Reference 283:     assert_empty used_organizations",
        "// Line_Reference 284:     assert_equal used_organizations.count, 0"
    ]
}
