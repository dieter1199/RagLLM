{
    "cve_id": "CVE-2013-2035",
    "cve_description": "Race condition in hawtjni-runtime/src/main/java/org/fusesource/hawtjni/runtime/Library.java in HawtJNI before 1.8, when a custom library path is not specified, allows local users to execute arbitrary Java code by overwriting a temporary JAR file with a predictable name in /tmp.",
    "cve_publish_date": "2013-08-28",
    "cwe_id": "CWE-94",
    "cwe_name": "Improper Control of Generation of Code ('Code Injection')",
    "cwe_description": "The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.",
    "commit_message": "Simplify shared lib extraction.",
    "type_of_change": "Modification",
    "filename_of_changes": "Library.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "29",
    "number_of_lines_deleted_vulnerable_to_cve": "50",
    "vulnerable_lines": [
        "// Line_Reference 12: import java.io.File;",
        "// Line_Reference 13: import java.io.FileOutputStream;",
        "// Line_Reference 14: import java.io.IOException;",
        "// Line_Reference 15: import java.io.InputStream;",
        "// Line_Reference 209: ",
        "// Line_Reference 214: ",
        "// Line_Reference 217:                 File target = file(customPath, map(libName));",
        "// Line_Reference 218:                 if( extract(errors, resource, target) ) {",
        "// Line_Reference 227:             File target = file(customPath, map(libName));",
        "// Line_Reference 228:             if( extract(errors, resource, target) ) {",
        "// Line_Reference 262:     private boolean extract(ArrayList<String> errors, URL source, File target) {",
        "// Line_Reference 263:         FileOutputStream os = null;",
        "// Line_Reference 264:         InputStream is = null;",
        "// Line_Reference 265:         boolean extracting = false;",
        "// Line_Reference 267:             if (!target.exists() || isStale(source, target) ) {",
        "// Line_Reference 272:                     extracting = true;",
        "// Line_Reference 277:                     os.close();",
        "// Line_Reference 278:                     is.close();",
        "// Line_Reference 283:             try {",
        "// Line_Reference 284:                 if (os != null)",
        "// Line_Reference 285:                     os.close();",
        "// Line_Reference 286:             } catch (IOException e1) {",
        "// Line_Reference 287:             }",
        "// Line_Reference 288:             try {",
        "// Line_Reference 289:                 if (is != null)",
        "// Line_Reference 290:                     is.close();",
        "// Line_Reference 291:             } catch (IOException e1) {",
        "// Line_Reference 292:             }",
        "// Line_Reference 293:             if (extracting && target.exists())",
        "// Line_Reference 296:             return false;",
        "// Line_Reference 298:         return true;",
        "// Line_Reference 301:     private boolean isStale(URL source, File target) {",
        "// Line_Reference 302: ",
        "// Line_Reference 303:         if( source.getProtocol().equals(\"jar\") ) {",
        "// Line_Reference 304:             // unwrap the jar protocol...",
        "// Line_Reference 306:                 String parts[] = source.getFile().split(Pattern.quote(\"!\"));",
        "// Line_Reference 307:                 source = new URL(parts[0]);",
        "// Line_Reference 308:             } catch (MalformedURLException e) {",
        "// Line_Reference 309:                 return false;",
        "// Line_Reference 310:             }",
        "// Line_Reference 311:         }",
        "// Line_Reference 312: ",
        "// Line_Reference 313:         File sourceFile=null;",
        "// Line_Reference 314:         if( source.getProtocol().equals(\"file\") ) {",
        "// Line_Reference 315:             sourceFile = new File(source.getFile());",
        "// Line_Reference 316:         }",
        "// Line_Reference 317:         if( sourceFile!=null && sourceFile.exists() ) {",
        "// Line_Reference 318:             if( sourceFile.lastModified() > target.lastModified() ) {",
        "// Line_Reference 319:                 return true;",
        "// Line_Reference 322:         return false;"
    ]
}
