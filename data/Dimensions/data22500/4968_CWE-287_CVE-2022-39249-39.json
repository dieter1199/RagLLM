{
    "cve_id": "CVE-2022-39249",
    "cve_description": "Matrix Javascript SDK is the Matrix Client-Server SDK for JavaScript. Prior to version 19.7.0, an attacker cooperating with a malicious homeserver can construct messages appearing to have come from another person. Such messages will be marked with a grey shield on some platforms, but this may be missing in others. This attack is possible due to the matrix-js-sdk implementing a too permissive key forwarding strategy on the receiving end. Starting with version 19.7.0, the default policy for accepting key forwards has been made more strict in the matrix-js-sdk. matrix-js-sdk will now only accept forwarded keys in response to previously issued requests and only from own, verified devices. The SDK now sets a `trusted` flag on the decrypted message upon decryption, based on whether the key used to decrypt the message was received from a trusted source. Clients need to ensure that messages decrypted with a key with `trusted = false` are decorated appropriately, for example, by showing a warning for such messages. This attack requires coordination between a malicious homeserver and an attacker, and those who trust your homeservers do not need a workaround.",
    "cve_publish_date": "2022-09-28",
    "cwe_id": "CWE-287",
    "cwe_name": "Improper Authentication",
    "cwe_description": "When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.",
    "commit_message": "Resolve multiple CVEs\n\nCVE-2022-39249\nCVE-2022-39250\nCVE-2022-39251\nCVE-2022-39236",
    "type_of_change": "Modification",
    "filename_of_changes": "OlmDevice.ts",
    "code_language": "TypeScript",
    "number_of_lines_added_for_mitigation": "51",
    "number_of_lines_deleted_vulnerable_to_cve": "14",
    "vulnerable_lines": [
        "// Line_Reference 1104:         extraSessionData: Record<string, any> = {},",
        "// Line_Reference 1136:                                 if (existingSession.first_known_index()",
        "// Line_Reference 1137:                                     <= session.first_known_index()",
        "// Line_Reference 1138:                                     && !(existingSession.first_known_index() == session.first_known_index()",
        "// Line_Reference 1139:                                         && !extraSessionData.untrusted",
        "// Line_Reference 1140:                                         && existingSessionData.untrusted)) {",
        "// Line_Reference 1141:                                     // existing session has lower index (i.e. can",
        "// Line_Reference 1142:                                     // decrypt more), or they have the same index and",
        "// Line_Reference 1143:                                     // the new sessions trust does not win over the old",
        "// Line_Reference 1144:                                     // sessions trust, so keep it",
        "// Line_Reference 1145:                                     logger.log(`Keeping existing megolm session ${sessionId}`);",
        "// Line_Reference 1146:                                     return;",
        "// Line_Reference 1433:                             \"forwarding_curve25519_key_chain\":",
        "// Line_Reference 1434:                                 sessionData.forwardingCurve25519KeyChain || [],"
    ]
}
