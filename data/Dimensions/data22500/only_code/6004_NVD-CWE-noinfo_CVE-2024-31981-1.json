import org.apache.commons.lang3.exception.ExceptionUtils;
import org.xwiki.velocity.XWikiVelocityException;
private static DocumentReferenceResolver<String> referenceResolver =
private static EntityReferenceSerializer<String> referenceSerializer =
private static DocumentAccessBridge dab = Utils.getComponent(DocumentAccessBridge.class);
private static VelocityManager velocityManager = Utils.getComponent(VelocityManager.class);
private static XMLReaderFactory xmlReaderFactory = Utils.getComponent(XMLReaderFactory.class);
private Environment environment = Utils.getComponent((Type) Environment.class);
private XSLFORenderer xslFORenderer = Utils.getComponent(XSLFORenderer.class, "fop");
List<HTMLFilter> filters = new ArrayList<HTMLFilter>(config.getFilters());
this.xslFORenderer.render(new ByteArrayInputStream(xmlfo.getBytes("UTF-8")), out, type.getMimeType());
XMLReader xmlReader = xmlReaderFactory.createXMLReader();
templateReference = referenceResolver.resolve(pdftemplate);
templateReference = dab.getCurrentDocumentReference();
String currentWiki = dab.getCurrentDocumentReference().getRoot().getName();
String result = (String) dab.getProperty(templateReference, classReference, propertyName);
if (StringUtils.isBlank(result)) {
String templateName = referenceSerializer.serialize(templateReference);
StringWriter writer = new StringWriter();
VelocityContext vcontext = velocityManager.getVelocityContext();
velocityManager.getVelocityEngine().evaluate(vcontext, writer, templateName, result);
result = writer.toString();
} catch (XWikiVelocityException e) {
LOGGER.warn("Error applying Velocity to the [{}] property of the [{}] document. Using the property's value "
+ "without applying Velocity.", propertyName, templateName, ExceptionUtils.getRootCauseMessage(e));