unsigned int maxw, maxh, max, i;
maxw = (unsigned int)img->comps[0].w; maxh = (unsigned int)img->comps[0].h;
d0 = r = (int*)malloc(sizeof(int) * (size_t)max);
d1 = g = (int*)malloc(sizeof(int) * (size_t)max);
d2 = b = (int*)malloc(sizeof(int) * (size_t)max);
if(r) free(r);
if(g) free(g);
if(b) free(b);
unsigned int maxw, maxh, max;
unsigned int i, j;
maxw = (unsigned int)img->comps[0].w; maxh = (unsigned int)img->comps[0].h;
d0 = r = (int*)malloc(sizeof(int) * (size_t)max);
d1 = g = (int*)malloc(sizeof(int) * (size_t)max);
d2 = b = (int*)malloc(sizeof(int) * (size_t)max);
for(j=0U; j < (maxw & ~(unsigned int)1U); j += 2U)
if (j < maxw) {
#if defined(USE_JPWL) || defined(USE_MJ2)
img->comps[1].w = maxw; img->comps[1].h = maxh;
img->comps[2].w = maxw; img->comps[2].h = maxh;
#else
img->comps[1].w = (OPJ_UINT32)maxw; img->comps[1].h = (OPJ_UINT32)maxh;
img->comps[2].w = (OPJ_UINT32)maxw; img->comps[2].h = (OPJ_UINT32)maxh;
#endif
img->comps[1].dx = img->comps[0].dx;
img->comps[2].dx = img->comps[0].dx;
img->comps[1].dy = img->comps[0].dy;
img->comps[2].dy = img->comps[0].dy;
if(r) free(r);
if(g) free(g);
if(b) free(b);
unsigned int maxw, maxh, max;
unsigned int i, j;
maxw = (unsigned int)img->comps[0].w; maxh = (unsigned int)img->comps[0].h;
d0 = r = (int*)malloc(sizeof(int) * (size_t)max);
d1 = g = (int*)malloc(sizeof(int) * (size_t)max);
d2 = b = (int*)malloc(sizeof(int) * (size_t)max);
if(r == NULL || g == NULL || b == NULL) goto fails;
for(i=0U; i < (maxh & ~(unsigned int)1U); i += 2U)
for(j=0; j < (maxw & ~(unsigned int)1U); j += 2U)
if(j < maxw)
if(i < maxh)
for(j=0U; j < (maxw & ~(unsigned int)1U); j += 2U)
#if defined(USE_JPWL) || defined(USE_MJ2)
img->comps[1].w = maxw; img->comps[1].h = maxh;
img->comps[2].w = maxw; img->comps[2].h = maxh;
#else
img->comps[1].w = (OPJ_UINT32)maxw; img->comps[1].h = (OPJ_UINT32)maxh;
img->comps[2].w = (OPJ_UINT32)maxw; img->comps[2].h = (OPJ_UINT32)maxh;
#endif
img->comps[1].dx = img->comps[0].dx;
img->comps[2].dx = img->comps[0].dx;
img->comps[1].dy = img->comps[0].dy;
img->comps[2].dy = img->comps[0].dy;
if(r) free(r);
if(g) free(g);
if(b) free(b);
img->color_space = OPJ_CLRSPC_SRGB;
