import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
File target = file(customPath, map(libName));
if( extract(errors, resource, target) ) {
File target = file(customPath, map(libName));
if( extract(errors, resource, target) ) {
private boolean extract(ArrayList<String> errors, URL source, File target) {
FileOutputStream os = null;
InputStream is = null;
boolean extracting = false;
if (!target.exists() || isStale(source, target) ) {
extracting = true;
os.close();
is.close();
try {
if (os != null)
os.close();
} catch (IOException e1) {
}
try {
if (is != null)
is.close();
} catch (IOException e1) {
}
if (extracting && target.exists())
return false;
return true;
private boolean isStale(URL source, File target) {
if( source.getProtocol().equals("jar") ) {
// unwrap the jar protocol...
String parts[] = source.getFile().split(Pattern.quote("!"));
source = new URL(parts[0]);
} catch (MalformedURLException e) {
return false;
}
}
File sourceFile=null;
if( source.getProtocol().equals("file") ) {
sourceFile = new File(source.getFile());
}
if( sourceFile!=null && sourceFile.exists() ) {
if( sourceFile.lastModified() > target.lastModified() ) {
return true;
return false;
