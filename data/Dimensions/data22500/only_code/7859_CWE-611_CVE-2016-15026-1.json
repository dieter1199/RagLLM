private static DocumentBuilderFactory docBuilderFactory = null;
/**
* Instantiation is prohibited by outside classes.
*/
protected XMLPropertyListParser() {
/** empty **/
}
/**
* Initialize the document builder factory so that it can be reused and does not need to
* be reinitialized for each parse action.
*/
private static synchronized void initDocBuilderFactory() {
docBuilderFactory = DocumentBuilderFactory.newInstance();
docBuilderFactory.setIgnoringComments(true);
docBuilderFactory.setCoalescing(true);
private static synchronized DocumentBuilder getDocBuilder() throws ParserConfigurationException {
if (docBuilderFactory == null)
initDocBuilderFactory();
DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
docBuilder.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
if ("-//Apple Computer//DTD PLIST 1.0//EN".equals(publicId) || // older publicId
"-//Apple//DTD PLIST 1.0//EN".equals(publicId)) { // newer publicId
// return a dummy, zero length DTD so we don't have to fetch
// it from the network.
return new InputSource(new ByteArrayInputStream(new byte[0]));
}
return null;
}
});
return docBuilder;
public static NSObject parse(File f) throws ParserConfigurationException, IOException, SAXException, PropertyListFormatException, ParseException {
DocumentBuilder docBuilder = getDocBuilder();
Document doc = docBuilder.parse(f);
return parse(doc);
public static NSObject parse(final byte[] bytes) throws ParserConfigurationException, ParseException, SAXException, PropertyListFormatException, IOException {
ByteArrayInputStream bis = new ByteArrayInputStream(bytes);
return parse(bis);
public static NSObject parse(InputStream is) throws ParserConfigurationException, IOException, SAXException, PropertyListFormatException, ParseException {
DocumentBuilder docBuilder = getDocBuilder();
Document doc = docBuilder.parse(is);
return parse(doc);
