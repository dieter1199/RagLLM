"sync/atomic"
// defer os.RemoveAll(tmpDir)
rfs.reset()
fs := New(filepath.Join(tmpDir, "/server"), 0, []string{})
func getFileContent(file *os.File) string {
f, err := os.Create(filepath.Join(rfs.root, "/server", p))
f.Write(c)
f.Close()
return os.Stat(filepath.Join(rfs.root, "/server", p))
}
func (rfs *rootFs) reset() {
if err := os.RemoveAll(filepath.Join(rfs.root, "/server")); err != nil {
if !os.IsNotExist(err) {
panic(err)
}
}
if err := os.Mkdir(filepath.Join(rfs.root, "/server"), 0o755); err != nil {
panic(err)
}
g.Assert(IsErrorCode(err, ErrNotExist)).IsTrue()
rfs.reset()
fs, rfs := NewFs()
g.Assert(atomic.LoadInt64(&fs.diskUsed)).Equal(int64(0))
err := fs.Writefile("test.txt", r)
g.Assert(atomic.LoadInt64(&fs.diskUsed)).Equal(r.Size())
err := fs.Writefile("/some/nested/test.txt", r)
err := fs.Writefile("some/../foo/bar/test.txt", r)
err := fs.Writefile("/some/../foo/../../test.txt", r)
g.Assert(IsErrorCode(err, ErrCodePathResolution)).IsTrue()
atomic.StoreInt64(&fs.diskLimit, 1024)
err = fs.Writefile("test.txt", r)
err := fs.Writefile("test.txt", r)
err = fs.Writefile("test.txt", r)
rfs.reset()
atomic.StoreInt64(&fs.diskUsed, 0)
atomic.StoreInt64(&fs.diskLimit, 0)
g.Assert(IsErrorCode(err, ErrCodePathResolution)).IsTrue()
g.Assert(atomic.LoadInt64(&fs.diskUsed)).Equal(int64(0))
rfs.reset()
g.Assert(errors.Is(err, os.ErrExist)).IsTrue()
g.Assert(errors.Is(err, os.ErrExist)).IsTrue()
err := fs.Rename("source.txt", "/")
g.Assert(errors.Is(err, os.ErrExist)).IsTrue()
g.Assert(IsErrorCode(err, ErrCodePathResolution)).IsTrue()
g.Assert(IsErrorCode(err, ErrCodePathResolution)).IsTrue()
g.Assert(errors.Is(err, os.ErrNotExist)).IsTrue()
g.Assert(errors.Is(err, os.ErrNotExist)).IsTrue()
g.Assert(errors.Is(err, os.ErrNotExist)).IsTrue()
rfs.reset()
atomic.StoreInt64(&fs.diskUsed, int64(utf8.RuneCountInString("test content")))
g.Assert(errors.Is(err, os.ErrNotExist)).IsTrue()
g.Assert(IsErrorCode(err, ErrCodePathResolution)).IsTrue()
err := os.MkdirAll(filepath.Join(rfs.root, "/nested/in/dir"), 0o755)
g.Assert(IsErrorCode(err, ErrCodePathResolution)).IsTrue()
g.Assert(IsErrorCode(err, ErrCodePathResolution)).IsTrue()
err := os.Mkdir(filepath.Join(rfs.root, "/server/dir"), 0o755)
g.Assert(errors.Is(err, os.ErrNotExist)).IsTrue()
atomic.StoreInt64(&fs.diskLimit, 2)
g.Assert(IsErrorCode(err, ErrCodeDiskSpace)).IsTrue()
g.Assert(atomic.LoadInt64(&fs.diskUsed)).Equal(int64(utf8.RuneCountInString("test content")) * 3)
rfs.reset()
atomic.StoreInt64(&fs.diskUsed, 0)
atomic.StoreInt64(&fs.diskLimit, 0)
atomic.StoreInt64(&fs.diskUsed, int64(utf8.RuneCountInString("test content")))
g.Assert(IsErrorCode(err, ErrCodePathResolution)).IsTrue()
g.Assert(err.Error()).Equal("cannot delete root server directory")
g.Assert(errors.Is(err, os.ErrNotExist)).IsTrue()
g.Assert(atomic.LoadInt64(&fs.diskUsed)).Equal(int64(0))
atomic.StoreInt64(&fs.diskUsed, int64(utf8.RuneCountInString("test content")*3))
g.Assert(atomic.LoadInt64(&fs.diskUsed)).Equal(int64(0))
g.Assert(errors.Is(err, os.ErrNotExist)).IsTrue()
g.Assert(IsErrorCode(err, ErrCodePathResolution)).IsTrue()
g.Assert(IsErrorCode(err, ErrCodePathResolution)).IsTrue()
rfs.reset()
atomic.StoreInt64(&fs.diskUsed, 0)
atomic.StoreInt64(&fs.diskLimit, 0)
