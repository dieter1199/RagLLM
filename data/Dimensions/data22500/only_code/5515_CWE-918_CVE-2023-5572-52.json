import { isAuthenticated, isEnabled } from "#lib/middleware";
import { procedure, router } from "#lib/trpc";
Extension,
ContextObject,
getContentPiecesCollection,
FullContentPieceWithAdditionalData
import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
import * as errors from "#lib/errors";
import { zodId } from "#lib";
type ExtensionEvent =
| { action: "delete"; data: { id: string } }
| { action: "create"; data: Extension & { id: string } }
| { action: "update"; data: { id: string; config: ContextObject } };
const publishEvent = createEventPublisher<ExtensionEvent>((workspaceId) => {
return `extensions:${workspaceId}`;
});
const publishContentPieceEvent = createEventPublisher<{
action: "update";
userId: string;
data: Partial<FullContentPieceWithAdditionalData> & { id: string };
}>((contentGroupId) => {
return `contentPieces:${contentGroupId}`;
});
return createEventSubscription<ExtensionEvent>(ctx, `extensions:${ctx.auth.workspaceId}`);
publishEvent(ctx, `${ctx.auth.workspaceId}`, {
publishEvent(ctx, `${ctx.auth.workspaceId}`, {
publishEvent(ctx, `${ctx.auth.workspaceId}`, {
