var (
ErrCycleDetected = errors.New("a cycle has been detected")
)
if errors.Is(result.err, ErrCycleDetected) {
continue
}
}, err
if errors.Is(result.err, ErrCycleDetected) {
return &ResolveCheckResponse{
Allowed: false,
ResolutionMetadata: &ResolveCheckResponseMetadata{
DatastoreQueryCount: dbReads,
},
}, nil
}
if !result.resp.GetAllowed() {
}, err
if errors.Is(baseResult.err, ErrCycleDetected) {
return &ResolveCheckResponse{
Allowed: false,
ResolutionMetadata: &ResolveCheckResponseMetadata{
DatastoreQueryCount: dbReads,
},
}, nil
}
if !errors.Is(subResult.err, ErrCycleDetected) {
subErr = subResult.err
}
if baseErr != nil && subErr != nil {
return &ResolveCheckResponse{
Allowed: false,
ResolutionMetadata: &ResolveCheckResponseMetadata{
DatastoreQueryCount: 0,
},
}, errors.Join(baseErr, subErr)
return resp, err
resp, err := union(ctx, c.concurrencyLimit, c.checkRewrite(ctx, req, rel.GetRewrite()))
return response, err
return response, err
return response, err
response := &ResolveCheckResponse{
Allowed: false,
ResolutionMetadata: &ResolveCheckResponseMetadata{
DatastoreQueryCount: req.GetRequestMetadata().DatastoreQueryCount + 1,
},
}
return response, err
return response, err
