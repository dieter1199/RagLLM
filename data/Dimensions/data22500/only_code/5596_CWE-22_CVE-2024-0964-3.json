self.sse_url = urllib.parse.urljoin(self.src, utils.SSE_URL)
self.sse_data_url = urllib.parse.urljoin(self.src, utils.SSE_DATA_URL)
if auth is not None:
self._login(auth)
self.config = self._get_config()
protocol = self.config.get("protocol")
endpoint_class = Endpoint if protocol == "sse" else EndpointV3Compatibility
endpoint_class(self, fn_index, dependency)
if self.endpoints[inferred_fn_index].protocol in ("ws", "sse"):
def __init__(self, client: Client, fn_index: int, dependency: dict):
self.protocol = "sse"
result = utils.synchronize_async(self._sse_fn, data, hash_data, helper)
async def _sse_fn(self, data: dict, hash_data: dict, helper: Communicator):
return await utils.get_pred_from_sse(
sse_url=self.client.sse_url,
sse_data_url=self.client.sse_data_url,
headers=self.client.headers,
cookies=self.client.cookies,
def __init__(self, client: Client, fn_index: int, dependency: dict):