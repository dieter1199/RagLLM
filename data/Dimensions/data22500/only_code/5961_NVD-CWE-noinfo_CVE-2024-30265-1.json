from pathlib import Path
from jupyter_server.utils import url_path_join, url_escape
from jupyter_server.base.handlers import JupyterHandler
from jupyter_server.services.kernels.handlers import KernelHandler, MainKernelHandler, ZMQChannelsHandler
from jupyter_client.jsonutil import date_default
import nbformat
from nbconvert.preprocessors.execute import executenb
from nbconvert import HTMLExporter
ROOT = Path(os.path.dirname(__file__))
DEFAULT_STATIC_ROOT = ROOT / 'static'
TEMPLATE_ROOT = ROOT / 'templates'
class VoilaHandler(JupyterHandler):
def initialize(self, notebook=None, strip_sources=False):
self.notebook = notebook
self.strip_sources = strip_sources
@tornado.web.authenticated
@tornado.gen.coroutine
def get(self):
# Ignore requested kernel name and make use of the one specified in the notebook.
kernel_name = self.notebook.metadata.get('kernelspec', {}).get('name', self.kernel_manager.default_kernel_name)
# Launch kernel and execute notebook.
kernel_id = yield tornado.gen.maybe_future(self.kernel_manager.start_kernel(kernel_name=kernel_name))
km = self.kernel_manager.get_kernel(kernel_id)
result = executenb(self.notebook, km=km)
# render notebook to html
resources = dict(kernel_id=kernel_id)
html, resources = HTMLExporter(template_file=str(TEMPLATE_ROOT / 'voila.tpl'), exclude_input=self.strip_sources,
exclude_output_prompt=self.strip_sources, exclude_input_prompt=self.strip_sources
).from_notebook_node(result, resources=resources)
# Compose reply
self.set_header('Content-Type', 'text/html')
self.write(html)
notebook_filename:
str(DEFAULT_STATIC_ROOT),
'strip_sources': 'Voila.strip_sources'
try:
notebook_filename = self.extra_args[0]
except IndexError:
self.log.critical('Bad command line parameters.')
self.log.critical('Missing NOTEBOOK_FILENAME parameter.')
self.log.critical('Run `voila --help` for help on command line parameters.')
exit(1)
self.notebook_filename = notebook_filename
notebook = nbformat.read(self.notebook_filename, as_version=4)
(
r'/',
VoilaHandler,
{
'notebook': notebook,
'strip_sources': self.strip_sources
}
),
r"/static/(.*)",
allow_remote_access=True
