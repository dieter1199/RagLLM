client_settings = ClientSettings.new(env)
has_profiling_cookie = client_settings.has_cookie?
if skip_it || (@config.authorization_mode == :whitelist && !has_profiling_cookie)
status,headers,body = @app.call(env)
if !skip_it && @config.authorization_mode == :whitelist && !has_profiling_cookie && MiniProfiler.request_authorized?
client_settings.write!(headers)
end
return [status,headers,body]
return serve_html(env) if path.start_with? @config.base_url_path
if query_string =~ /pp=enable/ && (@config.authorization_mode != :whitelist || MiniProfiler.request_authorized?)
client_settings.write!(headers)
return [status,headers,body]
return Rack::MiniProfiler::GCProfiler.new.profile_gc(@app, env)
return text_result(result.string)
MiniProfiler.deauthorize_request if @config.authorization_mode == :whitelist
start = Time.now
client_settings.write!(headers)
# this is non-obvious, don't kill the profiling cookie on errors or short requests
# this ensures that stuff that never reaches the rails stack does not kill profiling
if status.to_i >= 200 && status.to_i < 300 && ((Time.now - start) > 0.1)
client_settings.discard_cookie!(headers)
end
return [status,headers,body] if skip_it
return dump_exceptions exceptions
return dump_env env
return analyze_memory
return help(client_settings, env)
return self.flamegraph(flamegraph)
client_settings.write!(headers)
return result if result
client_settings.write!(headers)
[status, headers, body]
client_settings.write!(headers)
