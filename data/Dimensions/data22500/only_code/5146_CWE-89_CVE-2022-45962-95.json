//  echo '<pre>';
//  print_r($_REQUEST);
//  echo '</pre>';
//  echo '<pre>';
//  print_r($columns);
//  echo '</pre>';
if((isset($_REQUEST['values'][$id]['TITLE']) && $_REQUEST['values'][$id]['TITLE'] != $exist_pr[1]['TITLE']) || (isset($_REQUEST['values'][$id]['SHORT_NAME']) && $_REQUEST['values'][$id]['SHORT_NAME'] != $exist_pr[1]['SHORT_NAME']) || (isset($_REQUEST['values'][$id]['SORT_ORDER']) && $_REQUEST['values'][$id]['SORT_ORDER'] != $exist_pr[1]['SORT_ORDER']) || (isset($_REQUEST['values'][$id]['START_TIME']) && strtotime($_REQUEST['values'][$id]['START_TIME']) != strtotime($exist_pr[1]['START_TIME'])) || (isset($_REQUEST['values'][$id]['END_TIME']) && strtotime($_REQUEST['values'][$id]['END_TIME']) != strtotime($exist_pr[1]['END_TIME'])) || (isset($_REQUEST['values'][$id]['IGNORE_SCHEDULING']) && $_REQUEST['values'][$id]['IGNORE_SCHEDULING'] != $exist_pr[1]['IGNORE_SCHEDULING']) || (isset($_REQUEST['values'][$id]['ATTENDANCE']) && $_REQUEST['values'][$id]['ATTENDANCE'] != $exist_pr[1]['ATTENDANCE'])){
$sql = 'UPDATE school_periods SET ';
$title_change = '';
foreach ($columns as $column => $value) {
$value = trim(paramlib_validation($column, $value));
if ($column == 'ignore_scheduling' && $value == '') {
$sql .= $column . '=NULL';
$go = true;
} elseif ($column == 'ATTENDANCE') {
if ($value == '') {
$per_attn_check = DBGet(DBQuery('SELECT COUNT(*) AS TOTAL FROM course_period_var WHERE PERIOD_ID=' . $id . ' AND DOES_ATTENDANCE=\'Y\''));
if ($per_attn_check[1]['TOTAL'] > 0) {
$err = _cannotModifyUsedForAttendanceAsPeriodIsAssociated;
$go = false;
} else {
$sql .= $column . '=\'' . str_replace("'", "''", str_replace("\'", "'", $value)) . '\',';
$go = true;
}
} elseif (strtolower($column) == 'start_time' || strtolower($column) == 'end_time') {
$checker = DBGet(DBQuery('SELECT COUNT(1) as TOTAL FROM schedule s,course_period_var cp WHERE cp.COURSE_PERIOD_ID=s.COURSE_PERIOD_ID AND (s.END_DATE>\'' . date('Y-m-d') . '\' OR s.END_DATE IS NULL) AND cp.PERIOD_ID=\'' . $id . '\' '));
if ($checker[1]['TOTAL'] == 0) {
$sql .= $column . '=\'' . str_replace("'", "'", str_replace("\'", "'", $value)) . '\',';
$go = true;
} else {
$check_for_change=DBGet(DBQuery('SELECT COUNT(*) AS REC_EX FROM school_periods WHERE PERIOD_ID='.$id.' AND '.$column.'=\''.$value.'\'' ));
if($check_for_change[1]['REC_EX']==0){
$err = _cannotModifyStartTimeOrEndTimeAsPeriodIsAssociated;
$go = false;
}
} else {
if ($column == 'TITLE' && !isset($_REQUEST['values'][$id]['SHORT_NAME'])) {
$exist_pr_title = DBGet(DBQuery('SELECT count(PERIOD_ID) AS TOT FROM  school_periods WHERE title=\'' . $value . '\' AND SHORT_NAME=\'' . $exist_pr[1]['SHORT_NAME'] . '\' AND SYEAR= \'' . UserSyear() . '\' AND SCHOOL_ID=\'' . UserSchool() . '\' AND period_id<>\'' . $id . '\''));
if ($exist_pr_title[1]['TOT'] > 0) {
$not_up = 1;
}
if ($column == 'SHORT_NAME' && !isset($_REQUEST['values'][$id]['TITLE'])) {
$exist_pr_title = DBGet(DBQuery('SELECT count(PERIOD_ID) AS TOT FROM  school_periods WHERE title=\'' . $exist_pr[1]['TITLE'] . '\' AND SHORT_NAME=\'' . $value . '\' AND SYEAR= \'' . UserSyear() . '\' AND SCHOOL_ID=\'' . UserSchool() . '\' AND period_id<>\'' . $id . '\''));
if ($exist_pr_title[1]['TOT'] > 0) {
$not_up = 1;
}
if ($column == 'TITLE') {
$title_change = str_replace("'", "''", str_replace("\'", "'", $value));
}
$sql .= $column . '=\'' . str_replace("'", "''", str_replace("\'", "'", $value)) . '\',';
$go = true;
}
$sql = substr($sql, 0, -1) . ' WHERE PERIOD_ID=\'' . $id . '\'';
$sql = str_replace('&amp;', "", $sql);
$sql = str_replace('&quot', "", $sql);
$sql = str_replace('&#039;', "", $sql);
$sql = str_replace('&lt;', "", $sql);
$sql = str_replace('&gt;', "", $sql);
if ($go && $not_up != 1) {
DBQuery($sql);
if ($title_change != '') {
$check_for_cps = DBGet(DBQuery('SELECT COURSE_PERIOD_ID,TITLE FROM course_periods WHERE COURSE_PERIOD_ID=' . $id));
foreach ($check_for_cps as $cpi => $cpd) {
$old_title = explode('-', $cpd['TITLE']);
$old_title[0] = $title_change;
$old_title = implode(' - ', $old_title);
$old_title = str_replace("'", "''", str_replace("\'", "''", $old_title));
DBQuery('UPDATE course_periods SET TITLE=\'' . $old_title . '\' WHERE COURSE_PERIOD_ID=' . $cpd['COURSE_PERIOD_ID']);
}
if ($not_up == 1) {
$err_msg = _alreadyAPeriodIsCreatedWithSameTitleOrShortname;
}
# -------------------------- Length Update Start -------------------------- #
$sql_get_length = 'SELECT start_time, end_time from school_periods WHERE period_id=\'' . $id . '\'';
$row_get_length = DBGet(DBQuery($sql_get_length));
$start_time = strtotime(date('m/d/Y') . ' ' . $row_get_length[1]['START_TIME']);
$end_time = strtotime(date('m/d/Y') . ' ' . $row_get_length[1]['END_TIME']);
if ($start_time > $end_time)
$end_time = strtotime(date('m/d/Y') . ' ' . $row_get_length[1]['END_TIME']) + 86400;
$length = ($end_time - $start_time) / 60;
$sql_length_update = 'UPDATE school_periods set length = ' . $length . ' where period_id=\'' . $id . '\'';
$res_length_update = DBQuery($sql_length_update);
# --------------------------- Length Update End --------------------------- #
}
else {
$end_time[$i] = strtotime($periods[$i]['END_TIME']);
if (in_array(strtoupper(str_replace(' ', '', $columns['TITLE'])), $p_title) || in_array(strtoupper(str_replace(' ', '', $columns['SHORT_NAME'])), $shortname)) {
//                    $sql_end_ex = 'SELECT TITLE,SHORT_NAME,SORT_ORDER,START_TIME,END_TIME FROM  school_periods WHERE SYEAR= \'' . UserSyear() . '\' AND SCHOOL_ID=\'' . UserSchool() . '\' AND END_TIME=\'' . $columns['START_TIME'] . ':00\'';
//                    $sql_end_ex_count = DBGET(DBQuery($sql_end_ex));
//                    if (count($sql_end_ex_count) > 0) {
//                        $err = " End time of a period cannot be same with another period start time.";
//                        break;
//                    } else {
$sql = 'INSERT INTO school_periods ';
$fields = 'SCHOOL_ID,SYEAR,';
$values = '\'' . UserSchool() . '\',\'' . UserSyear() . '\',';
$go = 0;
if ($columns['START_TIME'] == $columns['END_TIME']) {
$err_msg = _startTimeAndEndTimeCanNotBeSame;
break;
}
foreach ($columns as $column => $value) {
if (trim($value)) {
$value = trim(paramlib_validation($column, $value));
$fields .= $column . ',';
$values .= '\'' . str_replace("'", "''", str_replace("\'", "'", $value)) . '\',';
$go = true;
}
$sql .= '(' . substr($fields, 0, -1) . ') values(' . substr($values, 0, -1) . ')';
if ($go) {
DBQuery($sql);
}
# ----------------------------- Length Calculate start --------------------- #
$p_id = DBGet(DBQuery('SELECT max(PERIOD_ID) AS period_id FROM school_periods WHERE SYEAR=\'' . UserSyear() . '\' AND SCHOOL_ID=\'' . UserSchool() . '\''));
$period_id = $p_id[1]['PERIOD_ID'];
$time_chk = DBGet(DBQuery('SELECT START_TIME,END_TIME FROM school_periods WHERE PERIOD_ID=\'' . $period_id . '\' AND SYEAR=\'' . UserSyear() . '\' AND SCHOOL_ID=\'' . UserSchool() . '\''));
$start_tm_chk = $time_chk[1]['START_TIME'];
$end_tm_chk = $time_chk[1]['END_TIME'];
$start_time = strtotime(date('m/d/Y') . ' ' . $start_tm_chk);
$end_time = strtotime(date('m/d/Y') . ' ' . $end_tm_chk);
if ($start_time > $end_time)
$end_time = strtotime(date('m/d/Y') . ' ' . $end_tm_chk) + 86400;
$length = ($end_time - $start_time) / 60;
$sql_up = 'update school_periods set length = ' . $length . ' where period_id=\'' . $period_id . '\' and syear=\'' . UserSyear() . '\' and school_id=\'' . UserSchool() . '\'';
$res_up = DBQuery($sql_up);
# -------------------------------------------------------------------------- #
DrawBC(""._schoolSetup." <i class=\"icon-arrow-right13\"></i> " . ProgramTitle());
$prd_id = paramlib_validation($colmn = PERIOD_ID, $_REQUEST[id]);
UnableDeletePrompt( _cannotDeleteBecauseCoursePeriodsAreCreatedOnThisPeriod.'.');
$columns = array('TITLE' =>_title, 'SHORT_NAME' =>_shortName, 'SORT_ORDER' =>_sortOrder, 'START_TIME' =>_startTime, 'END_TIME' =>_endTime, 'LENGTH' => _length.'<div></div>('._minutes.')', 'ATTENDANCE' => _usedFor.' <div></div>'._attendance, 'IGNORE_SCHEDULING' => _ignoreFor.' <div></div>'._scheduling);
echo '<button type="button" class="close" data-dismiss="alert"><span>Ã—</span><span class="sr-only">'._close.'</span></button>' . $err_msg . '</div>';
array_push($period_id_arr, $td[PERIOD_ID]);
echo "<FORM name=F1 id=F1 action=Modules.php?modname=" . strip_tags(trim($_REQUEST[modname])) . "&modfunc=update method=POST>";
ListOutputPeriod($periods_RET, $columns, period, periods, $link);
$maxPeriodId = $maxPeriodId[1][MAXPERIODID];
function _makeTextInput($value, $name) {
function _makeTextInputMod($value, $name) {
function _makeTextInputMod2($value, $name) {
function _makeCheckboxInput($value, $name) {
return '<div class="text-center">'.CheckboxInputSwitch($value, 'values[' . $id . '][' . $name . ']', '', '', ($id == 'new' ? true : false), 'Yes', 'No', '', 'switch-success').'</div>';
function _makeTimeInput($value, $name) {
//    if ($id != 'new' && $value) {
//
//
//        return '<DIV id=time' . $id . '><div onclick=\'addHTML("<TABLE><TR><TD>' . str_replace('"', '\"', SelectInput($hour, 'values[' . $id . '][START_HOUR]', '', $hour_options, false, 'style="width: 60px;"', false)) . '</TD><TD>' . str_replace('"', '\"', SelectInput($fn_min_s, 'values[' . $id . '][START_MINUTE]', '', $minute_options, false, 'style="width: 60px;"', false)) . '</TD><TD>' . str_replace('"', '\"', SelectInput($f_ampm_s, 'values[' . $id . '][START_M]', '', array('AM' => 'AM', 'PM' => 'PM'), false, 'style="width: 60px;"', false)) . '</TD></TR></TABLE>","time' . $id . '",true);\'>' . $value . '</div></DIV>';
//    }
//    else
//        return '<TABLE cellspacing=0 cellpadding=0><TR><TD>' . SelectInput($hour, 'values[' . $id . '][START_HOUR]', '', $hour_options, 'N/A', '', false) . '</TD><TD>' . SelectInput($fn_min_s, 'values[' . $id . '][START_MINUTE]', '', $minute_options, 'N/A', '', false) . '</TD><TD>' . SelectInput($f_ampm_s, 'values[' . $id . '][START_M]', '', array('AM' => 'AM', 'PM' => 'PM'), 'N/A', '', false) . '</TD></TR></TABLE>';
if($id!='new')
return TextInput_time($hour.':'.$fn_min_s.' '.$f_ampm_s, 'values[' . $id . '][START_TIME]', '', $extra);
return TextInput_time('', 'values[' . $id . '][START_TIME]', '', $extra);
}
function _makeTimeInputEnd($value, $name) {
//    if ($id != 'new' && $value)
//        return '<DIV id=etime' . $id . '><div onclick=\'addHTML("<TABLE><TR><TD>' . str_replace('"', '\"', SelectInput($hour, 'values[' . $id . '][END_HOUR]', '', $hour_options, false, '', false)) . '</TD><TD>' . str_replace('"', '\"', SelectInput($fn_min, 'values[' . $id . '][END_MINUTE]', '', $minute_options, false, '', false)) . '</TD><TD>' . str_replace('"', '\"', SelectInput($f_ampm, 'values[' . $id . '][END_M]', '', array('AM' => 'AM', 'PM' => 'PM'), false, '', false)) . '</TD></TR></TABLE>","etime' . $id . '",true);\'>' . $value . '</div></DIV>';
//    else
//        return '<TABLE cellspacing=0 cellpadding=0><TR><TD>' . SelectInput($hour, 'values[' . $id . '][END_HOUR]', '', $hour_options, 'N/A', '', false) . '</TD><TD>' . SelectInput($fn_min, 'values[' . $id . '][END_MINUTE]', '', $minute_options, 'N/A', '', false) . '</TD><TD>' . SelectInput($f_ampm, 'values[' . $id . '][END_M]', '', array('AM' => 'AM', 'PM' => 'PM'), 'N/A', '', false) . '</TD></TR></TABLE>';
if($id!='new')
return TextInput_time($hour.':'.$fn_min.' '.$f_ampm, 'values[' . $id . '][END_TIME]', '', $extra);
return TextInput_time('', 'values[' . $id . '][END_TIME]', '', $extra);
}
?>
