let mut visitor = QueryHashVisitor::new(schema, executable);
fn hash(schema: &str, query: &str) -> String {
let schema = Schema::parse(schema, "schema.graphql")
let mut visitor = QueryHashVisitor::new(&schema, &exec);
hex::encode(visitor.finish())
fn hash_subgraph_query(schema: &str, query: &str) -> String {
let schema = Valid::assume_valid(Schema::parse(schema, "schema.graphql").unwrap());
let mut visitor = QueryHashVisitor::new(&schema, &exec);
assert_eq!(hash(schema1, query), hash(schema2, query));
assert_ne!(hash(schema1, query), hash(schema2, query));
assert_eq!(hash(schema1, query), hash(schema2, query));
assert_ne!(
hash(schema1, "query { me { id name } }"),
hash(schema1, "query { me { name id } }")
);
assert_eq!(hash(schema1, query), hash(schema2, query));
assert_ne!(hash(schema1, query), hash(schema2, query));
assert_ne!(hash(schema1, query), hash(schema2, query));
assert_eq!(hash(schema1, query), hash(schema2, query));
assert_ne!(hash(schema1, query), hash(schema2, query));
assert_ne!(hash(schema1, query), hash(schema2, query));
assert_ne!(hash(schema1, query), hash(schema2, query));
assert_ne!(hash(schema1, query), hash(schema2, query));
assert_ne!(hash(schema1, query), hash(schema2, query));
assert_ne!(hash(schema1, query), hash(schema2, query));
assert_ne!(hash(schema1, query), hash(schema2, query));
assert_ne!(hash(schema1, query), hash(schema2, query));
assert_ne!(hash(schema1, query), hash(schema2, query));
assert_ne!(hash(schema1, query), hash(schema2, query));
assert_ne!(hash(schema1, query), hash(schema2, query));