func UpdateMetaDataInRxInfoSet(ctx context.Context, db sqlx.Queryer, rxInfo []*gw.UplinkRXInfo) error {
for i := range rxInfo {
id := helpers.GetGatewayID(rxInfo[i])
log.WithFields(log.Fields{
"ctx_id":     ctx.Value(logging.ContextIDKey),
"gateway_id": id,
}).WithError(err).Error("get gateway error")
rxInfo[i].Location = &common.Location{
if int(rxInfo[i].Board) < len(g.Boards) {
board = g.Boards[int(rxInfo[i].Board)]
if rxInfo[i].FineTimestampType == gw.FineTimestampType_ENCRYPTED && board.FPGAID != nil {
tsInfo := rxInfo[i].GetEncryptedFineTimestamp()
if tsInfo == nil {
log.WithFields(log.Fields{
"ctx_id":     ctx.Value(logging.ContextIDKey),
"gateway_id": id,
}).Error("encrypted_fine_timestamp must not be nil")
continue
}
if rxInfo[i].FineTimestampType == gw.FineTimestampType_ENCRYPTED && board.FineTimestampKey != nil {
tsInfo := rxInfo[i].GetEncryptedFineTimestamp()
if tsInfo == nil {
log.WithFields(log.Fields{
"ctx_id":     ctx.Value(logging.ContextIDKey),
"gateway_id": id,
}).Error("encrypted_fine_timestamp must not be nil")
continue
}
if rxInfo[i].Time == nil {
log.WithFields(log.Fields{
"ctx_id":     ctx.Value(logging.ContextIDKey),
"gateway_id": id,
}).Error("time must not be nil")
continue
}
rxTime, err := ptypes.Timestamp(rxInfo[i].Time)
rxInfo[i].FineTimestampType = gw.FineTimestampType_PLAIN
rxInfo[i].FineTimestamp = &gw.UplinkRXInfo_PlainFineTimestamp{
return nil
