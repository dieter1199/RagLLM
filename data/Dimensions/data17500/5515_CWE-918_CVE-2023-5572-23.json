{
    "cve_id": "CVE-2023-5572",
    "cve_description": "Server-Side Request Forgery (SSRF) in GitHub repository vriteio/vrite prior to 0.3.0.",
    "cve_publish_date": "2023-10-13",
    "cwe_id": "CWE-918",
    "cwe_name": "Server-Side Request Forgery (SSRF)",
    "cwe_description": "The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.",
    "commit_message": "Vrite v0.3 (#45)\n\n- Replace wrapper with element;\r\n- Add XML-like syntax for elements;\r\n- Redesign editor block menus;\r\n- Add MDX extension;\r\n- Allow CORS API access;\r\n- Restructure @vrite/backend;",
    "type_of_change": "Modification",
    "filename_of_changes": "app.ts",
    "code_language": "TypeScript",
    "number_of_lines_added_for_mitigation": "2",
    "number_of_lines_deleted_vulnerable_to_cve": "54",
    "vulnerable_lines": [
        "// Line_Reference 1: import { appRouter, errors, publicPlugin, trpcPlugin } from \"@vrite/backend\";",
        "// Line_Reference 8: import { processAuth } from \"@vrite/backend/src/lib/auth\";",
        "// Line_Reference 18:     return reply.view(\"index.html\", {",
        "// Line_Reference 54:   fastify.get<{ Querystring: { url: string } }>(\"/proxy*\", async (request, reply) => {",
        "// Line_Reference 55:     const filterOutRegex =",
        "// Line_Reference 56:       /(localhost|\\b(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)(?::\\d{0,4})?\\b)/;",
        "// Line_Reference 57: ",
        "// Line_Reference 58:     if (request.headers.origin) {",
        "// Line_Reference 59:       reply.header(\"Access-Control-Allow-Origin\", fastify.config.PUBLIC_APP_URL);",
        "// Line_Reference 60:       reply.header(\"Access-Control-Allow-Methods\", \"GET\");",
        "// Line_Reference 61:       reply.header(",
        "// Line_Reference 62:         \"Access-Control-Allow-Headers\",",
        "// Line_Reference 63:         request.headers[\"access-control-request-headers\"]",
        "// Line_Reference 64:       );",
        "// Line_Reference 65:     } else if (",
        "// Line_Reference 66:       fastify.config.NODE_ENV !== \"development\" &&",
        "// Line_Reference 67:       !fastify.config.PUBLIC_APP_URL.includes(\"localhost\")",
        "// Line_Reference 68:     ) {",
        "// Line_Reference 69:       // Prevent proxy abuse in production",
        "// Line_Reference 70:       return reply.status(400).send(\"Invalid Origin\");",
        "// Line_Reference 71:     }",
        "// Line_Reference 72: ",
        "// Line_Reference 73:     if (",
        "// Line_Reference 74:       filterOutRegex.test(request.query.url) &&",
        "// Line_Reference 75:       !request.query.url.includes(fastify.config.PUBLIC_ASSETS_URL)",
        "// Line_Reference 76:     ) {",
        "// Line_Reference 77:       return reply.status(400).send(\"Invalid URL\");",
        "// Line_Reference 78:     }",
        "// Line_Reference 79: ",
        "// Line_Reference 80:     if (request.method === \"OPTIONS\") {",
        "// Line_Reference 81:       // CORS Preflight",
        "// Line_Reference 82:       reply.send();",
        "// Line_Reference 83:     } else {",
        "// Line_Reference 84:       const targetURL = request.query.url;",
        "// Line_Reference 85: ",
        "// Line_Reference 86:       try {",
        "// Line_Reference 87:         const response = await axios.get(targetURL, {",
        "// Line_Reference 88:           responseType: \"arraybuffer\"",
        "// Line_Reference 89:         });",
        "// Line_Reference 90: ",
        "// Line_Reference 91:         if (!`${response.headers[\"content-type\"]}`.includes(\"image\")) {",
        "// Line_Reference 92:           return reply.status(400).send(\"Invalid Content-Type\");",
        "// Line_Reference 93:         }",
        "// Line_Reference 94: ",
        "// Line_Reference 95:         reply.header(\"content-type\", response.headers[\"content-type\"]);",
        "// Line_Reference 96:         reply.send(Buffer.from(response.data, \"binary\"));",
        "// Line_Reference 97:       } catch (error) {",
        "// Line_Reference 98:         // eslint-disable-next-line no-console",
        "// Line_Reference 99:         console.error(error);",
        "// Line_Reference 100: ",
        "// Line_Reference 101:         return reply.status(500).send(\"Could not fetch\");",
        "// Line_Reference 102:       }",
        "// Line_Reference 103:     }",
        "// Line_Reference 104:   });"
    ]
}
