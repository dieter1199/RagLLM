{
    "cve_id": "CVE-2021-41275",
    "cve_description": "spree_auth_devise is an open source library which provides authentication and authorization services for use with the Spree storefront framework by using an underlying Devise authentication framework. In affected versions spree_auth_devise is subject to a CSRF vulnerability that allows user account takeover. All applications using any version of the frontend component of spree_auth_devise are affected if protect_from_forgery method is both: Executed whether as: A before_action callback (the default). A prepend_before_action (option prepend: true given) before the :load_object hook in Spree::UserController (most likely order to find). Configured to use :null_session or :reset_session strategies (:null_session is the default in case the no strategy is given, but rails --new generated skeleton use :exception). Users are advised to update their spree_auth_devise gem. For users unable to update it may be possible to change your strategy to :exception. Please see the linked GHSA for more workaround details. ### Impact CSRF vulnerability that allows user account takeover. All applications using any version of the frontend component of `spree_auth_devise` are affected if `protect_from_forgery` method is both: * Executed whether as: * A before_action callback (the default) * A prepend_before_action (option prepend: true given) before the :load_object hook in Spree::UserController (most likely order to find). * Configured to use :null_session or :reset_session strategies (:null_session is the default in case the no strategy is given, but rails --new generated skeleton use :exception). That means that applications that haven't been configured differently from what it's generated with Rails aren't affected. Thanks @waiting-for-dev for reporting and providing a patch ?? ### Patches Spree 4.3 users should update to spree_auth_devise 4.4.1 Spree 4.2 users should update to spree_auth_devise 4.2.1 ### Workarounds If possible, change your strategy to :exception: ```ruby class ApplicationController < ActionController::Base protect_from_forgery with: :exception end ``` Add the following to`config/application.rb `to at least run the `:exception` strategy on the affected controller: ```ruby config.after_initialize do Spree::UsersController.protect_from_forgery with: :exception end ``` ### References https://github.com/solidusio/solidus_auth_devise/security/advisories/GHSA-xm34-v85h-9pg2",
    "cve_publish_date": "2021-11-17",
    "cwe_id": "CWE-352",
    "cwe_name": "Cross-Site Request Forgery (CSRF)",
    "cwe_description": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",
    "commit_message": "[PATCH] Fix account takeover through CSRF attack\n\nThis commit fixes an account takeover vulnerability when [Rails\n`protect_from_forgery`](https://api.rubyonrails.org/classes/ActionController/RequestForgeryProtection/ClassMethods.html)\nmethod is both:\n\n- Executed whether as:\n  - A `before_action` callback (the default)\n  - A `prepend_before_action` (option `prepend: true`) before the\n  `:load_object` hook in `Spree::UsersController` (most likely order to\n  find).\n\n- Configured to use `:null_session` or `:reset_session`\n  strategies (`:null_session` is the default in case the no strategy is\n  given, but `rails --new` generated skeleton use `:exception`).\n\nBefore this commit, the user was fetched in a `prepend_before_action`\nhook named `:load_object`. I.e., the user was loaded into an instance\nvariable before touching the session as a safety countermeasure. As the\nrequest went forward, `#update` was called on that instance variable.\n\nThe `:exception` strategy prevented the issue as, even if the user was\nstill fetched, the request was aborted before the update phase. On the\nother hand, prepending `:protect_from_forgery` after the `:load_object`\nhook (not very likely, as `ApplicationController` is loaded in\nthe first place and it's the most likely place to have that definition)\nwiped the session before trying to fetch the user from it.\n\nWe could have fixed the most likely issue by just using a\n`before_action` for `:load_object`, but it's safer not to rely on the\norder of callbacks at all.",
    "type_of_change": "ModificationType.ADD",
    "filename_of_changes": "users_controller.rb",
    "code_language": "Ruby",
    "number_of_lines_added_for_mitigation": "6",
    "number_of_lines_deleted_vulnerable_to_cve": "1",
    "vulnerable_lines": [
        "// Line_Reference 3:   prepend_before_action :load_object, only: [:show, :edit, :update]"
    ]
}
