{
    "cve_id": "CVE-2023-1665",
    "cve_description": "Improper Restriction of Excessive Authentication Attempts in GitHub repository linagora/twake prior to 0.0.0.",
    "cve_publish_date": "2023-03-27",
    "cwe_id": "CWE-307",
    "cwe_name": "Improper Restriction of Excessive Authentication Attempts",
    "cwe_description": "The product does not implement sufficient measures to prevent multiple failed authentication attempts within a short time frame, making it more susceptible to brute force attacks.",
    "commit_message": "ðŸ›  Fix drive migration (#2784)\n\n* ðŸ›  Fix Drive migration\r\n\r\n* Move timeout",
    "type_of_change": "Modification",
    "filename_of_changes": "drive-migrator-service.ts",
    "code_language": "TypeScript",
    "number_of_lines_added_for_mitigation": "150",
    "number_of_lines_deleted_vulnerable_to_cve": "140",
    "vulnerable_lines": [
        "// Line_Reference 162:       const migrationRecord = await this.phpDriveService.getMigrationRecord(",
        "// Line_Reference 163:         item.id,",
        "// Line_Reference 164:         context.company.id,",
        "// Line_Reference 165:       );",
        "// Line_Reference 167:       const newDriveItem = getDefaultDriveItem(",
        "// Line_Reference 168:         {",
        "// Line_Reference 169:           name: item.name || item.id,",
        "// Line_Reference 170:           extension: item.extension,",
        "// Line_Reference 171:           added: item.added.toString(),",
        "// Line_Reference 172:           content_keywords:",
        "// Line_Reference 173:             item.content_keywords && item.content_keywords.length",
        "// Line_Reference 174:               ? item.content_keywords.join(\",\")",
        "// Line_Reference 175:               : \"\",",
        "// Line_Reference 176:           creator: item.creator || context.user.id,",
        "// Line_Reference 177:           is_directory: item.isdirectory,",
        "// Line_Reference 178:           is_in_trash: item.isintrash,",
        "// Line_Reference 179:           description: item.description,",
        "// Line_Reference 180:           tags: item.tags || [],",
        "// Line_Reference 181:           parent_id: parentId,",
        "// Line_Reference 182:           company_id: context.company.id,",
        "// Line_Reference 183:           access_info: access,",
        "// Line_Reference 184:         },",
        "// Line_Reference 185:         context,",
        "// Line_Reference 186:       );",
        "// Line_Reference 188:       if (migrationRecord && migrationRecord.company_id === context.company.id) {",
        "// Line_Reference 189:         console.debug(`${item.id} is already migrated`);",
        "// Line_Reference 190:       } else {",
        "// Line_Reference 191:         await this.nodeRepository.save(newDriveItem);",
        "// Line_Reference 192:       }",
        "// Line_Reference 194:       if (item.isdirectory) {",
        "// Line_Reference 195:         const newParentId =",
        "// Line_Reference 196:           migrationRecord && migrationRecord.company_id === context.company.id",
        "// Line_Reference 197:             ? migrationRecord.new_id",
        "// Line_Reference 198:             : newDriveItem.id;",
        "// Line_Reference 199: ",
        "// Line_Reference 200:         let page: Pagination = { limitStr: \"100\" };",
        "// Line_Reference 201: ",
        "// Line_Reference 202:         do {",
        "// Line_Reference 203:           const directoryChildren = await this.phpDriveService.listDirectory(",
        "// Line_Reference 204:             page,",
        "// Line_Reference 205:             item.id,",
        "// Line_Reference 206:             context.workspace_id,",
        "// Line_Reference 207:           );",
        "// Line_Reference 208:           page = directoryChildren.nextPage as Pagination;",
        "// Line_Reference 209: ",
        "// Line_Reference 210:           for (const child of directoryChildren.getEntities()) {",
        "// Line_Reference 211:             try {",
        "// Line_Reference 212:               await this.migrateDriveFile(child, newParentId, access, context);",
        "// Line_Reference 213:             } catch (error) {",
        "// Line_Reference 214:               logger.error(`Failed to migrate drive item ${child.id}`);",
        "// Line_Reference 215:               console.error(`Failed to migrate drive item ${child.id}`);",
        "// Line_Reference 218:         } while (page.page_token);",
        "// Line_Reference 219:       } else {",
        "// Line_Reference 220:         let versionPage: Pagination = { limitStr: \"100\" };",
        "// Line_Reference 221:         if (",
        "// Line_Reference 222:           migrationRecord &&",
        "// Line_Reference 223:           migrationRecord.item_id === item.id &&",
        "// Line_Reference 224:           migrationRecord.company_id === context.company.id",
        "// Line_Reference 225:         ) {",
        "// Line_Reference 226:           logger.info(`item is already migrated - ${item.id} - skipping`);",
        "// Line_Reference 227:           console.log(`item is already migrated - ${item.id} - skipping`);",
        "// Line_Reference 228:           return;",
        "// Line_Reference 229:         }",
        "// Line_Reference 231:         const mime = mimes[item.extension];",
        "// Line_Reference 232: ",
        "// Line_Reference 233:         let createdVersions = 0;",
        "// Line_Reference 234: ",
        "// Line_Reference 235:         do {",
        "// Line_Reference 236:           const itemVersions = await this.phpDriveService.listItemVersions(",
        "// Line_Reference 237:             versionPage,",
        "// Line_Reference 238:             item.id,",
        "// Line_Reference 239:             context,",
        "// Line_Reference 240:           );",
        "// Line_Reference 241:           versionPage = itemVersions.nextPage as Pagination;",
        "// Line_Reference 242: ",
        "// Line_Reference 243:           for (const version of itemVersions.getEntities()) {",
        "// Line_Reference 244:             try {",
        "// Line_Reference 245:               const newVersion = getDefaultDriveItemVersion(",
        "// Line_Reference 246:                 {",
        "// Line_Reference 247:                   creator_id: version.creator_id || context.user.id,",
        "// Line_Reference 248:                   data: version.data,",
        "// Line_Reference 249:                   date_added: +version.date_added,",
        "// Line_Reference 250:                   drive_item_id: newDriveItem.id,",
        "// Line_Reference 251:                   file_size: version.file_size,",
        "// Line_Reference 252:                   filename: version.filename,",
        "// Line_Reference 253:                   key: version.key,",
        "// Line_Reference 254:                   provider: version.provider,",
        "// Line_Reference 255:                   realname: version.realname,",
        "// Line_Reference 256:                   mode: version.mode,",
        "// Line_Reference 257:                 },",
        "// Line_Reference 258:                 context,",
        "// Line_Reference 259:               );",
        "// Line_Reference 260: ",
        "// Line_Reference 261:               logger.info(",
        "// Line_Reference 262:                 `Migrating version ${version.id} of item ${item.id}... (downloading then uploading...)`,",
        "// Line_Reference 263:               );",
        "// Line_Reference 264:               const file = await this.phpDriveService.migrate(",
        "// Line_Reference 265:                 version.file_id,",
        "// Line_Reference 266:                 item.workspace_id,",
        "// Line_Reference 267:                 version.id,",
        "// Line_Reference 268:                 {",
        "// Line_Reference 269:                   filename: version.filename,",
        "// Line_Reference 270:                   userId: version.creator_id || context.user.id,",
        "// Line_Reference 271:                   totalSize: version.file_size,",
        "// Line_Reference 272:                   waitForThumbnail: true,",
        "// Line_Reference 273:                   chunkNumber: 1,",
        "// Line_Reference 274:                   totalChunks: 1,",
        "// Line_Reference 275:                   type: mime,",
        "// Line_Reference 276:                 },",
        "// Line_Reference 277:                 context,",
        "// Line_Reference 278:               );",
        "// Line_Reference 279: ",
        "// Line_Reference 280:               if (!file) {",
        "// Line_Reference 281:                 throw Error(\"cannot download file version\");",
        "// Line_Reference 283: ",
        "// Line_Reference 284:               newVersion.file_metadata = {",
        "// Line_Reference 285:                 external_id: file.id,",
        "// Line_Reference 286:                 mime: file.metadata.mime,",
        "// Line_Reference 287:                 name: file.metadata.name || version.filename,",
        "// Line_Reference 288:                 size: file.upload_data.size || version.file_size,",
        "// Line_Reference 289:               };",
        "// Line_Reference 290: ",
        "// Line_Reference 291:               await globalResolver.services.documents.documents.createVersion(",
        "// Line_Reference 292:                 newDriveItem.id,",
        "// Line_Reference 293:                 newVersion,",
        "// Line_Reference 294:                 context,",
        "// Line_Reference 295:               );",
        "// Line_Reference 296: ",
        "// Line_Reference 297:               createdVersions++;",
        "// Line_Reference 298:             } catch (error) {",
        "// Line_Reference 299:               logger.error(`Failed to migrate version ${version.id} for drive item ${item.id}`);",
        "// Line_Reference 300:               console.error(`Failed to migrate version ${version.id} for drive item ${item.id}`);",
        "// Line_Reference 303:         } while (versionPage.page_token);",
        "// Line_Reference 305:         if (createdVersions === 0) {",
        "// Line_Reference 306:           await this.nodeRepository.remove(newDriveItem);",
        "// Line_Reference 307:           return;",
        "// Line_Reference 309:       }",
        "// Line_Reference 311:       if (!migrationRecord) {",
        "// Line_Reference 312:         await this.phpDriveService.markAsMigrated(item.id, newDriveItem.id, context.company.id);",
        "// Line_Reference 313:       }"
    ]
}
