using AgentInterface.Api.ScreenShare;
using AgentInterface.Api.ScreenShare.DesktopDuplication;
using AgentInterface.Api.Win32;
var stream = RunningAsService
? new Thread(GetScreenAgentFrame) { IsBackground = true }
: new Thread(GetScreenFrame) { IsBackground = true };
private void GetScreenAgentFrame()
{
try
{
while (_client != null && _client.IsConnected && _authClient != null &&
!_authClient.ShutDownScreenShare)
{
try
{
var image = AgentClient.GetCleanFrame();
if (image != null)
{
if (image.UsingGpu)
{
SendGpuFrame(image.FinishedRegions);
}
else
{
SendPolledFrame(image.ScreenImage, image.Bounds);
}
}
}
catch (Exception e)
{
//  Console.WriteLine(e.Message + " " + e.StackTrace);
}
}
Console.WriteLine("Screen Share Died");
}
catch (Exception)
{
}
}
if (RunningAsService)
{
HandleAgentFullFrame();
}
else
{
HandleFullFrame();
}
if (!ScreenShareService.Streams.ContainsKey(_authClient)) return;
if (RunningAsService)
{
AgentClient.HandleRightMouseUp();
}
else
{
new InputSimulator().Mouse.RightButtonUp();
}
if (!ScreenShareService.Streams.ContainsKey(_authClient)) return;
if (RunningAsService)
{
AgentClient.HandleRightMouseDown();
}
else
{
new InputSimulator().Mouse.RightButtonDown();
}
}
private void HandleAgentFullFrame()
{
try
{
var fullFrameData = AgentClient.GetFullFrame();
if (fullFrameData?.ScreenImage == null) throw new InvalidOperationException("Frame was null");
var bounds = fullFrameData.Bounds;
var image = ScreenData.ImageToByteArray(fullFrameData.ScreenImage);
var frameData = new
{
screenBounds = new
{
top = bounds.Top,
bottom = bounds.Bottom,
left = bounds.Left,
right = bounds.Right,
height = bounds.Height,
width = bounds.Width,
x = bounds.X,
y = bounds.Y,
empty = bounds.IsEmpty,
location = bounds.Location,
size = bounds.Size
},
frameData = image.Select(b => (int)b).ToArray()
};
_builder.WriteMessage(frameData);
}
catch (Exception ex)
{
var data = new
{
frameFailed = true,
message = ex.Message
};
Console.WriteLine(ex.Message + "Fuck");
_builder.WriteMessage(data);
}
if (!ScreenShareService.Streams.ContainsKey(_authClient)) return;
if (RunningAsService)
{
AgentClient.HandleKeyUp(codes);
}
else
foreach (var code in codes)
{
var virtualKey = (VirtualKeyCode)code;
new InputSimulator().Keyboard.KeyUp(virtualKey);
}
if (!ScreenShareService.Streams.ContainsKey(_authClient)) return;
if (RunningAsService)
AgentClient.HandleKeyDown(codes);
}
else
{
foreach (var code in codes)
{
var virtualKey = (VirtualKeyCode)code;
new InputSimulator().Keyboard.KeyDown(virtualKey);
}
if (!ScreenShareService.Streams.ContainsKey(_authClient)) return;
if (RunningAsService)
{
AgentClient.ScrollMouse(positive);
}
else
{
new InputSimulator().Mouse.VerticalScroll(direction);
}
if (!ScreenShareService.Streams.ContainsKey(_authClient)) return;
if (RunningAsService)
{
AgentClient.MoveMouse(x, y);
}
else
{
var bounds = Display.GetWindowRectangle();
x = checked((int)Math.Round(x * (65535 / (double)bounds.Width)));
y = checked((int)Math.Round(y * (65535 / (double)bounds.Height)));
new InputSimulator().Mouse.MoveMouseTo(x, y);
}
Console.WriteLine("Error moving mouse");
if (ScreenShareService.Streams.ContainsKey(_authClient))
{
if (RunningAsService)
{
AgentClient.HandleRightClick();
}
else
{
new InputSimulator().Mouse.RightButtonClick();
}
}
if (ScreenShareService.Streams.ContainsKey(_authClient))
{
if (RunningAsService)
{
AgentClient.HandleLeftMouseUp();
}
else
{
new InputSimulator().Mouse.LeftButtonUp();
}
}
if (ScreenShareService.Streams.ContainsKey(_authClient))
{
if (RunningAsService)
{
AgentClient.HandleLeftMouseDown();
}
else
{
new InputSimulator().Mouse.LeftButtonDown();
}
}
