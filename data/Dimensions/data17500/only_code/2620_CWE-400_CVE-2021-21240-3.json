handler = tests.http_reflect_with_auth(
allow_scheme="basic", allow_credentials=(("joe", password),)
)
handler = tests.http_reflect_with_auth(
allow_scheme="basic", allow_credentials=(("joe", password),)
)
handler = tests.http_reflect_with_auth(
allow_scheme="basic", allow_credentials=allowed
)
handler = tests.http_reflect_with_auth(
allow_scheme="digest", allow_credentials=(("joe", password),)
)
allow_scheme="digest",
allow_credentials=(("joe", password),),
out_renew_nonce=grenew_nonce,
info = httplib2._parse_www_authenticate(response1, "authentication-info")
assert info.get("digest", {}).get("nc") == "00000001", info
info2 = httplib2._parse_www_authenticate(response2, "authentication-info")
assert info2.get("digest", {}).get("nc") == "00000002", info2
info3 = httplib2._parse_www_authenticate(response3, "authentication-info")
assert info3.get("digest", {}).get("nc") == "00000001", info3
info = httplib2._parse_www_authenticate(
requests[0][1].headers, "www-authenticate"
)
info2 = httplib2._parse_www_authenticate(
requests[2][1].headers, "www-authenticate"
)
{
"www-authenticate": 'Test realm="test realm" , foo=foo ,bar="bar", baz=baz,qux=qux'
},
{
"test": {
"realm": "test realm",
"foo": "foo",
"bar": "bar",
"baz": "baz",
"qux": "qux",
}
},
(
{"www-authenticate": 'Test realm="a \\"test\\" realm"'},
{"test": {"realm": 'a "test" realm'}},
),
(
{"www-authenticate": 'Basic realm="me", algorithm="MD5"'},
{"basic": {"realm": "me", "algorithm": "MD5"}},
),
(
{"www-authenticate": 'Basic realm="me", algorithm=MD5'},
{"basic": {"realm": "me", "algorithm": "MD5"}},
),
(
{"www-authenticate": 'Basic realm="me",other="fred" '},
{"basic": {"realm": "me", "other": "fred"}},
),
{
"www-authenticate": 'Digest realm="digest1", qop="auth,auth-int", nonce="7102dd2", opaque="e9517f"'
},
{
"digest": {
"realm": "digest1",
"qop": "auth,auth-int",
"nonce": "7102dd2",
"opaque": "e9517f",
}
},
# multiple schema choice
{
"www-authenticate": 'Digest realm="multi-d", nonce="8b11d0f6", opaque="cc069c" Basic realm="multi-b" '
},
{
"digest": {"realm": "multi-d", "nonce": "8b11d0f6", "opaque": "cc069c"},
"basic": {"realm": "multi-b"},
},
# FIXME
# comma between schemas (glue for multiple headers with same name)
# ({'www-authenticate': 'Digest realm="2-comma-d", qop="auth-int", nonce="c0c8ff1", Basic realm="2-comma-b"'},
#  {'digest': {'realm': '2-comma-d', 'qop': 'auth-int', 'nonce': 'c0c8ff1'},
#   'basic': {'realm': '2-comma-b'}}),
# FIXME
# ({'www-authenticate': 'Digest realm="com3d", Basic realm="com3b", WSSE realm="com3w", profile="token"'},
#  {'digest': {'realm': 'com3d'}, 'basic': {'realm': 'com3b'}, 'wsse': {'realm': 'com3w', profile': 'token'}}),
{
"www-authenticate": 'Digest realm="myrealm", nonce="KBAA=3", algorithm=MD5, qop="auth", stale=true'
},
{
"digest": {
"realm": "myrealm",
"nonce": "KBAA=3",
"algorithm": "MD5",
"qop": "auth",
"stale": "true",
}
},
assert httplib2._parse_www_authenticate(headers) == info
def test_parse_www_authenticate_malformed():
with tests.assert_raises(httplib2.MalformedHeader):
httplib2._parse_www_authenticate(
{
"www-authenticate": 'OAuth "Facebook Platform" "invalid_token" "Invalid OAuth access token."'
}
)
response = {
"www-authenticate": 'Digest realm="myrealm", nonce="KBAA=35", algorithm=MD5, qop="auth"'
}
d = httplib2.DigestAuthentication(
credentials, host, request_uri, headers, response, content, None
)
'nonce="KBAA=35", uri="/test/digest/"'
+ ', algorithm=MD5, response="de6d4a123b80801d0e94550411b6283f", '
"www-authenticate": 'Digest realm="myrealm", nonce="30352fd", algorithm=MD5, '
'qop="auth", opaque="atestopaque"'
d = httplib2.DigestAuthentication(
credentials, host, request_uri, headers, response, content, None
)
response["www-authenticate"] = (
'Digest realm="myrealm", nonce="bd669f", '
'algorithm=MD5, qop="auth", stale=true'
)
d = httplib2.DigestAuthentication(
credentials, host, request_uri, headers, response, content, None
)
response["www-authenticate"] = (
'Digest realm="myrealm", nonce="barney", '
'algorithm=MD5, qop="auth", stale=true'
)
d = httplib2.DigestAuthentication(
credentials, host, request_uri, headers, response, content, None
)