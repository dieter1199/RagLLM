const supportBigNumbers =
options.supportBigNumbers || config.supportBigNumbers;
const bigNumberStrings = options.bigNumberStrings || config.bigNumberStrings;
string: function(encoding = field.encoding) {
console.warn(`typeCast: JSON column "${field.name}" is interpreted as BINARY by default, recommended to manually set utf8 encoding: \`field.string("utf8")\``);
buffer: function() {
geometry: function() {
}
parserFn('(function () {')(
'return class TextRow {'
);
parserFn("this.packet = packet;");
parserFn("const result = {};");
for (let i=0; i < fields.length; i++) {
for (let i=0; i < resultTablesArray.length; i++) {
fields[i].table + options.nestTables + fields[i].name
options
parserFn(`${lvalue} = options.typeCast(this.wrap${i}, function() { return ${readCode} });`);
}  else {
parserFn.toString()
return parserFn.toFunction({wrap});