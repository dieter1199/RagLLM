return get(name, Integer.class);
return getFirst(name, String.class);
return getFirst(HttpHeaders.CONTENT_TYPE, MediaType.class);
Optional<Long> optional = getFirst(HttpHeaders.CONTENT_LENGTH, Long.class);
.flatMap(s -> ConversionService.SHARED.convert(s, MediaType.class).map(Stream::of).orElse(Stream.empty()))
return getFirst(CONNECTION, String.class).map(val -> val.equalsIgnoreCase("keep-alive")).orElse(false);