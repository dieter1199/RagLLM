import { procedure, router } from "#lib/trpc";
import { AuthenticatedContext, isAuthenticated } from "#lib/middleware";
import { generateSalt, hashValue } from "#lib/hash";
import { UnderscoreID, zodId } from "#lib/mongo";
import { Token, FullToken, getTokensCollection, token } from "#database/tokens";
import * as errors from "#lib/errors";
import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
type TokenEvent =
| {
action: "create";
data: Token;
}
| { action: "update"; data: Partial<Token> & { id: string } }
| { action: "delete"; data: { id: string } };
const publishEvent = createEventPublisher<TokenEvent>((workspaceId) => `tokens:${workspaceId}`);
publishEvent(ctx, `${ctx.auth.workspaceId}`, {
publishEvent(ctx, `${ctx.auth.workspaceId}`, {
publishEvent(ctx, `${ctx.auth.workspaceId}`, {
return createEventSubscription<TokenEvent>(ctx, `tokens:${ctx.auth.workspaceId}`);
