{
    "cve_id": "CVE-2021-41116",
    "cve_description": "Composer is an open source dependency manager for the PHP language. In affected versions windows users running Composer to install untrusted dependencies are subject to command injection and should upgrade their composer version. Other OSs and WSL are not affected. The issue has been resolved in composer versions 1.10.23 and 2.1.9. There are no workarounds for this issue.",
    "cve_publish_date": "2021-10-05",
    "cwe_id": "CWE-77",
    "cwe_name": "Improper Neutralization of Special Elements used in a Command ('Command Injection')",
    "cwe_description": "The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.",
    "commit_message": "Fix escaping issues on Windows which could lead to command injection, fixes GHSA-frqg-7g38-6gcf",
    "type_of_change": "Modification",
    "filename_of_changes": "ProcessExecutor.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "14",
    "number_of_lines_deleted_vulnerable_to_cve": "33",
    "vulnerable_lines": [
        "// Line_Reference 158:      * Copy of ProcessUtils::escapeArgument() that is deprecated in Symfony 3.3 and removed in Symfony 4.",
        "// Line_Reference 166:         //Fix for PHP bug #43784 escapeshellarg removes % from given string",
        "// Line_Reference 167:         //Fix for PHP bug #49446 escapeshellarg doesn't work on Windows",
        "// Line_Reference 168:         //@see https://bugs.php.net/bug.php?id=43784",
        "// Line_Reference 169:         //@see https://bugs.php.net/bug.php?id=49446",
        "// Line_Reference 170:         if ('\\\\' === DIRECTORY_SEPARATOR) {",
        "// Line_Reference 171:             if ((string) $argument === '') {",
        "// Line_Reference 172:                 return escapeshellarg($argument);",
        "// Line_Reference 173:             }",
        "// Line_Reference 174: ",
        "// Line_Reference 175:             $escapedArgument = '';",
        "// Line_Reference 176:             $quote = false;",
        "// Line_Reference 177:             foreach (preg_split('/(\")/', $argument, -1, PREG_SPLIT_NO_EMPTY | PREG_SPLIT_DELIM_CAPTURE) as $part) {",
        "// Line_Reference 178:                 if ('\"' === $part) {",
        "// Line_Reference 179:                     $escapedArgument .= '\\\\\"';",
        "// Line_Reference 180:                 } elseif (self::isSurroundedBy($part, '%')) {",
        "// Line_Reference 181:                     // Avoid environment variable expansion",
        "// Line_Reference 182:                     $escapedArgument .= '^%\"'.substr($part, 1, -1).'\"^%';",
        "// Line_Reference 183:                 } else {",
        "// Line_Reference 184:                     // escape trailing backslash",
        "// Line_Reference 185:                     if ('\\\\' === substr($part, -1)) {",
        "// Line_Reference 186:                         $part .= '\\\\';",
        "// Line_Reference 187:                     }",
        "// Line_Reference 188:                     $quote = true;",
        "// Line_Reference 189:                     $escapedArgument .= $part;",
        "// Line_Reference 190:                 }",
        "// Line_Reference 191:             }",
        "// Line_Reference 192:             if ($quote) {",
        "// Line_Reference 193:                 $escapedArgument = '\"'.$escapedArgument.'\"';",
        "// Line_Reference 194:             }",
        "// Line_Reference 195: ",
        "// Line_Reference 196:             return $escapedArgument;",
        "// Line_Reference 199:         return \"'\".str_replace(\"'\", \"'\\\\''\", $argument).\"'\";"
    ]
}
