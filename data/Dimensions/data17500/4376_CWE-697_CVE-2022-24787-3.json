{
    "cve_id": "CVE-2022-24787",
    "cve_description": "Vyper is a Pythonic Smart Contract Language for the Ethereum Virtual Machine. In version 0.3.1 and prior, bytestrings can have dirty bytes in them, resulting in the word-for-word comparisons giving incorrect results. Even without dirty nonzero bytes, two bytestrings can compare to equal if one ends with `\"\\x00\"` because there is no comparison of the length. A patch is available and expected to be part of the 0.3.2 release. There are currently no known workarounds.",
    "cve_publish_date": "2022-04-04",
    "cwe_id": "CWE-697",
    "cwe_name": "Incorrect Comparison",
    "cwe_description": "The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.",
    "commit_message": "Merge pull request from GHSA-7vrm-3jc8-5wwm\n\n* add more tests for string comparison\n\nexplicitly test the codepath with <= 32 bytes\n\n* refactor keccak256 helper a bit\n\n* fix bytestring equality\n\nexisting bytestring equality checks do not check length equality or for\ndirty bytes.",
    "type_of_change": "Modification",
    "filename_of_changes": "keccak256_helper.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "20",
    "number_of_lines_deleted_vulnerable_to_cve": "21",
    "vulnerable_lines": [
        "// Line_Reference 3: from vyper.codegen.core import ensure_in_memory",
        "// Line_Reference 24: def keccak256_helper(expr, ir_arg, context):",
        "// Line_Reference 25:     sub = ir_arg  # TODO get rid of useless variable",
        "// Line_Reference 26:     _check_byteslike(sub.typ, expr)",
        "// Line_Reference 30:     if isinstance(sub, bytes):",
        "// Line_Reference 31:         return IRnode.from_list(bytes_to_int(keccak256(sub)), typ=BaseType(\"bytes32\"))",
        "// Line_Reference 34:     if is_base_type(sub.typ, \"bytes32\"):",
        "// Line_Reference 38:                 [\"mstore\", MemoryPositions.FREE_VAR_SPACE, sub],",
        "// Line_Reference 45:     sub = ensure_in_memory(sub, context)",
        "// Line_Reference 46: ",
        "// Line_Reference 47:     return IRnode.from_list(",
        "// Line_Reference 48:         [",
        "// Line_Reference 49:             \"with\",",
        "// Line_Reference 50:             \"_buf\",",
        "// Line_Reference 51:             sub,",
        "// Line_Reference 52:             [\"sha3\", [\"add\", \"_buf\", 32], [\"mload\", \"_buf\"]],",
        "// Line_Reference 53:         ],",
        "// Line_Reference 54:         typ=BaseType(\"bytes32\"),",
        "// Line_Reference 55:         annotation=\"keccak256\",",
        "// Line_Reference 56:         add_gas_estimate=_gas_bound(ceil(sub.typ.maxlen / 32)),",
        "// Line_Reference 57:     )"
    ]
}
