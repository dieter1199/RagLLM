{
    "cve_id": "CVE-2023-6395",
    "cve_description": "The Mock software contains a vulnerability wherein an attacker could potentially exploit privilege escalation, enabling the execution of arbitrary code with root user privileges. This weakness stems from the absence of proper sandboxing during the expansion and execution of Jinja2 templates, which may be included in certain configuration parameters. While the Mock documentation advises treating users added to the mock group as privileged, certain build systems invoking mock on behalf of users might inadvertently permit less privileged users to define configuration tags. These tags could then be passed as parameters to mock during execution, potentially leading to the utilization of Jinja2 templates for remote privilege escalation and the execution of arbitrary code as the root user on the build server.",
    "cve_publish_date": "2024-01-16",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Make the TemplatedDictionary objects picklable\n\nThe jinja2 SandboxedEnvironment objects are not guaranteed to be\npickle-serializable (even though they practically are).  So let's rather\nstore the environment elsewhere than in the TemplatedDictionary object\nitself to keep it serializable.\n\nNb. TemplatedDictionary is just a wrapper around dict, which is quite\ncommonly subject of (de)serialization (e.g. Mock, the main user of\ntemplated-dictionary library does that through the\nconcurrent.futures.ProcessPoolExecutor logic).\n\nIt would be disadvantageous to introduce additional internal arguments\ninto the object itself (considering we already have the __jinja_expand\ninternal).\n\nHaving a per-application shared environment is kind of expected anyway\n(and even more optimal):\n\n    https://jinja.palletsprojects.com/en/3.0.x/api/#basics\n\nNote that this fix is mostly needed for the RHEL 8 environment with\njinja2 v2.10.1; newer versions made the environments (namely the\nincluded filters) picklable: https://github.com/pallets/jinja/pull/1613",
    "type_of_change": "Modification",
    "filename_of_changes": "__init__.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "2",
    "number_of_lines_deleted_vulnerable_to_cve": "3",
    "vulnerable_lines": [
        "// Line_Reference 22:         self.sandbox = sandbox.SandboxedEnvironment(keep_trailing_newline=True)",
        "// Line_Reference 23: ",
        "// Line_Reference 85:             value = _to_native(self.sandbox.from_string(value).render(self.__dict__, func=lambda:None))"
    ]
}
