{
    "cve_id": "CVE-2021-4231",
    "cve_description": "A vulnerability was found in Angular up to 11.0.4/11.1.0-next.2. It has been classified as problematic. Affected is the handling of comments. The manipulation leads to cross site scripting. It is possible to launch the attack remotely but it might require an authentication first. Upgrading to version 11.0.5 and 11.1.0-next.3 is able to address this issue. The name of the patch is ba8da742e3b243e8f43d4c63aa842b44e14f2b09. It is recommended to upgrade the affected component.",
    "cve_publish_date": "2022-05-26",
    "cwe_id": "CWE-79",
    "cwe_name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
    "cwe_description": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
    "commit_message": "fix(core): fix possible XSS attack in development through SSR (#40525)\n\nThis is a follow up fix for\nhttps://github.com/angular/angular/pull/40136/commits/894286dd0c92b5af223364237e63798e18b14f58.\n\nIt turns out that comments can be closed in several ways:\n- `<!-->`\n- `<!-- -->`\n- `<!-- --!>`\n\nAll of the above are valid ways to close comment per:\nhttps://html.spec.whatwg.org/multipage/syntax.html#comments\n\nThe new fix surrounds `<` and `>` with zero width space so that it\nrenders in the same way, but it prevents the comment to be closed eagerly.\n\nPR Close #40525",
    "type_of_change": "Modification",
    "filename_of_changes": "security_spec.ts",
    "code_language": "TypeScript",
    "number_of_lines_added_for_mitigation": "27",
    "number_of_lines_deleted_vulnerable_to_cve": "18",
    "vulnerable_lines": [
        "// Line_Reference 14:   it('should not be possible to do XSS through comment reflect data', () => {",
        "// Line_Reference 15:     @Component({template: `<div><span *ngIf=\"xssValue\"></span><div>`})",
        "// Line_Reference 16:     class XSSComp {",
        "// Line_Reference 17:       xssValue: string = '--> --><script>\"evil\"</script>';",
        "// Line_Reference 18:     }",
        "// Line_Reference 20:     TestBed.configureTestingModule({declarations: [XSSComp]});",
        "// Line_Reference 21:     const fixture = TestBed.createComponent(XSSComp);",
        "// Line_Reference 22:     fixture.detectChanges();",
        "// Line_Reference 23:     const div = fixture.nativeElement.querySelector('div') as HTMLElement;",
        "// Line_Reference 24:     // Serialize into a string to mimic SSR serialization.",
        "// Line_Reference 25:     const html = div.innerHTML;",
        "// Line_Reference 26:     // This must be escaped or we have XSS.",
        "// Line_Reference 27:     expect(html).not.toContain('--><script');",
        "// Line_Reference 28:     // Now parse it back into DOM (from string)",
        "// Line_Reference 29:     div.innerHTML = html;",
        "// Line_Reference 30:     // Verify that we did not accidentally deserialize the `<script>`",
        "// Line_Reference 31:     const script = div.querySelector('script');",
        "// Line_Reference 32:     expect(script).toBeFalsy();"
    ]
}
