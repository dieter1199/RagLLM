{
    "cve_id": "CVE-2019-10910",
    "cve_description": "In Symfony before 2.7.51, 2.8.x before 2.8.50, 3.x before 3.4.26, 4.x before 4.1.12, and 4.2.x before 4.2.7, when service ids allow user input, this could allow for SQL Injection and remote code execution. This is related to symfony/dependency-injection.",
    "cve_publish_date": "2019-05-16",
    "cwe_id": "CWE-89",
    "cwe_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
    "cwe_description": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.",
    "commit_message": "[DI] Check service IDs are valid",
    "type_of_change": "Modification",
    "filename_of_changes": "PhpDumper.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "19",
    "number_of_lines_deleted_vulnerable_to_cve": "14",
    "vulnerable_lines": [
        "// Line_Reference 486:             $instantiation = \"\\$this->services['$id'] = \".($isSimpleInstance ? '' : '$instance');",
        "// Line_Reference 696:             $code .= $this->getProxyDumper()->getProxyFactoryCode($definition, $id, sprintf($factoryCode, $methodName));",
        "// Line_Reference 770:         if (isset($this->%s['%s'])) {",
        "// Line_Reference 771:             return $this->%1$s['%2$s'];",
        "// Line_Reference 777:             $id",
        "// Line_Reference 1533:             $conditions[] = sprintf(\"isset(\\$this->services['%s'])\", $service);",
        "// Line_Reference 1540:             $conditions[] = sprintf(\"\\$this->has('%s')\", $service);",
        "// Line_Reference 1788:                 return sprintf(\"\\$this->parameters['%s']\", $name);",
        "// Line_Reference 1792:         return sprintf(\"\\$this->getParameter('%s')\", $name);",
        "// Line_Reference 1816:                 $code = sprintf('$this->get(\\'%s\\'%s)', $id, null !== $reference ? ', '.$reference->getInvalidBehavior() : '');",
        "// Line_Reference 1825:                     $code = sprintf('$this->services[\\'%s\\'] = %s', $id, $code);",
        "// Line_Reference 1836:             $code = sprintf('$this->get(\\'%s\\', /* ContainerInterface::NULL_ON_INVALID_REFERENCE */ %d)', $id, ContainerInterface::NULL_ON_INVALID_REFERENCE);",
        "// Line_Reference 1838:             $code = sprintf('$this->get(\\'%s\\')', $id);",
        "// Line_Reference 1843:         return \"\\${(\\$_ = isset(\\$this->services['$id']) ? \\$this->services['$id'] : $code) && false ?: '_'}\";"
    ]
}
