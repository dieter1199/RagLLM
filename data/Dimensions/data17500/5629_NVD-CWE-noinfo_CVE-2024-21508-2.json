{
    "cve_id": "CVE-2024-21508",
    "cve_description": "Versions of the package mysql2 before 3.9.4 are vulnerable to Remote Code Execution (RCE) via the readCodeFor function due to improper validation of the supportBigNumbers and bigNumberStrings values.",
    "cve_publish_date": "2024-04-11",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fix(security): improve supportBigNumbers and bigNumberStrings sanitization (#2572)\n\nFixes a potential RCE attack vulnerability reported by Vsevolod Kokorin (Slonser) of Solidlab",
    "type_of_change": "Modification",
    "filename_of_changes": "text_parser.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "26",
    "number_of_lines_deleted_vulnerable_to_cve": "21",
    "vulnerable_lines": [
        "// Line_Reference 15:   const supportBigNumbers =",
        "// Line_Reference 16:     options.supportBigNumbers || config.supportBigNumbers;",
        "// Line_Reference 17:   const bigNumberStrings = options.bigNumberStrings || config.bigNumberStrings;",
        "// Line_Reference 88:       string: function(encoding = field.encoding) {",
        "// Line_Reference 93:           console.warn(`typeCast: JSON column \"${field.name}\" is interpreted as BINARY by default, recommended to manually set utf8 encoding: \\`field.string(\"utf8\")\\``);",
        "// Line_Reference 98:       buffer: function() {",
        "// Line_Reference 101:       geometry: function() {",
        "// Line_Reference 103:       }",
        "// Line_Reference 112:   parserFn('(function () {')(",
        "// Line_Reference 113:     'return class TextRow {'",
        "// Line_Reference 114:   );",
        "// Line_Reference 130:   parserFn(\"this.packet = packet;\");",
        "// Line_Reference 134:     parserFn(\"const result = {};\");",
        "// Line_Reference 141:     for (let i=0; i < fields.length; i++) {",
        "// Line_Reference 145:     for (let i=0; i < resultTablesArray.length; i++) {",
        "// Line_Reference 157:         fields[i].table + options.nestTables + fields[i].name",
        "// Line_Reference 175:         options",
        "// Line_Reference 178:         parserFn(`${lvalue} = options.typeCast(this.wrap${i}, function() { return ${readCode} });`);",
        "// Line_Reference 179:       }  else {",
        "// Line_Reference 196:       parserFn.toString()",
        "// Line_Reference 200:     return parserFn.toFunction({wrap});"
    ]
}
