{
    "cve_id": "CVE-2021-39432",
    "cve_description": "diplib v3.0.0 is vulnerable to Double Free.",
    "cve_publish_date": "2022-11-04",
    "cwe_id": "CWE-415",
    "cwe_name": "Double Free",
    "cwe_description": "The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations.",
    "commit_message": "Fixed error handling in `dip::ImageReadJPEG()`, `dip::ImageWriteJPEG()`, etc. Fixes #80.",
    "type_of_change": "Modification",
    "filename_of_changes": "jpeg.cpp",
    "code_language": "C++",
    "number_of_lines_added_for_mitigation": "32",
    "number_of_lines_deleted_vulnerable_to_cve": "26",
    "vulnerable_lines": [
        "// Line_Reference 27: #include <setjmp.h>",
        "// Line_Reference 28: ",
        "// Line_Reference 29: namespace dip {",
        "// Line_Reference 30: ",
        "// Line_Reference 31: namespace {",
        "// Line_Reference 35:    struct jpeg_error_mgr pub;   // \"public\" fields",
        "// Line_Reference 36:    jmp_buf setjmp_buffer;      // for return to caller",
        "// Line_Reference 40: void my_error_exit( j_common_ptr cinfo ) {",
        "// Line_Reference 42:    my_error_ptr myerr = reinterpret_cast<my_error_ptr>(cinfo->err);",
        "// Line_Reference 47: void my_output_message( j_common_ptr ) {} // Don't do anything with messages!",
        "// Line_Reference 51:       JpegInput( String filename ) : filename_( std::move( filename )) {",
        "// Line_Reference 69:          if( setjmp( jerr_.setjmp_buffer )) {",
        "// Line_Reference 70:             // If we get here, the JPEG code has signaled an error.",
        "// Line_Reference 71:             DIP_THROW_RUNTIME( \"Error reading JPEG file.\" );",
        "// Line_Reference 72:          }",
        "// Line_Reference 105:       explicit JpegOutput( String const& filename ) {",
        "// Line_Reference 118:          if( setjmp( jerr_.setjmp_buffer )) {",
        "// Line_Reference 119:             // If we get here, the JPEG code has signaled an error.",
        "// Line_Reference 120:             DIP_THROW_RUNTIME( \"Error writing JPEG file.\" );",
        "// Line_Reference 121:          }",
        "// Line_Reference 181:    JpegInput jpeg( filename );",
        "// Line_Reference 226:    JpegInput jpeg( filename );",
        "// Line_Reference 233:       JpegInput jpeg( filename );",
        "// Line_Reference 247:    jpegLevel = clamp< dip::uint >( jpegLevel, 1, 100 );",
        "// Line_Reference 250:    JpegOutput jpeg( filename );",
        "// Line_Reference 259:    jpeg_set_quality( jpeg.cinfoptr(), static_cast< int >( jpegLevel ), FALSE );"
    ]
}
