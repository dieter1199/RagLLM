{
    "cve_id": "CVE-2021-43114",
    "cve_description": "FORT Validator versions prior to 1.5.2 will crash if an RPKI CA publishes an X.509 EE certificate. This will lead to RTR clients such as BGP routers to lose access to the RPKI VRP data set, effectively disabling Route Origin Validation.",
    "cve_publish_date": "2021-11-09",
    "cwe_id": "NVD-CWE-Other",
    "cwe_name": "Other",
    "cwe_description": "NVD is only using a subset of CWE for mapping instead of the entire CWE, and the weakness type is not covered by that subset.",
    "commit_message": "RRDP Notification: Optimize delta parse\n\nIt was allocating the deltas array twice, for seemingly no reason.\nAlso, the array slots were pointers, and the two arrays pointed to\ndifferent instances of the same objects. For seemingly no reason.\n\nNow there's only one array, and it stores the objects directly.\n\nAlso adds relevant unit tests.",
    "type_of_change": "Modification",
    "filename_of_changes": "rrdp_objects.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "73",
    "number_of_lines_deleted_vulnerable_to_cve": "191",
    "vulnerable_lines": [
        "// Line_Reference 8: /*",
        "// Line_Reference 9:  * List of deltas inside an update notification file.",
        "// Line_Reference 10:  *",
        "// Line_Reference 11:  * The structure functions are extended and will have the following meaning:",
        "// Line_Reference 12:  *   - capacity : is the size of the array, must be set before using the array",
        "// Line_Reference 13:  *                and can't be modified.",
        "// Line_Reference 14:  *   - len      : number of elements set in the array.",
        "// Line_Reference 15:  *",
        "// Line_Reference 16:  * This struct is a diff version of array_list, utilized to store only the",
        "// Line_Reference 17:  * amount of deltas that may be needed and validate that an update notification",
        "// Line_Reference 18:  * file has a contiguous set of deltas.",
        "// Line_Reference 19:  */",
        "// Line_Reference 20: struct deltas_head {",
        "// Line_Reference 21: \t/** Unidimensional array. Initialized lazily. */",
        "// Line_Reference 22: \tstruct delta_head **array;",
        "// Line_Reference 23: \t/** Number of elements in @array. */",
        "// Line_Reference 24: \tsize_t len;",
        "// Line_Reference 25: \t/** Actual allocated slots in @array. */",
        "// Line_Reference 26: \tsize_t capacity;",
        "// Line_Reference 27: };",
        "// Line_Reference 46: \tdata->uri = NULL;",
        "// Line_Reference 56: int",
        "// Line_Reference 57: delta_head_create(struct delta_head **result)",
        "// Line_Reference 58: {",
        "// Line_Reference 59: \tstruct delta_head *tmp;",
        "// Line_Reference 60: ",
        "// Line_Reference 61: \ttmp = malloc(sizeof(struct delta_head));",
        "// Line_Reference 62: \tif (tmp == NULL)",
        "// Line_Reference 63: \t\treturn pr_enomem();",
        "// Line_Reference 64: ",
        "// Line_Reference 65: \tdoc_data_init(&tmp->doc_data);",
        "// Line_Reference 66: ",
        "// Line_Reference 67: \t*result = tmp;",
        "// Line_Reference 68: \treturn 0;",
        "// Line_Reference 69: }",
        "// Line_Reference 70: ",
        "// Line_Reference 71: void",
        "// Line_Reference 72: delta_head_destroy(struct delta_head *delta_head)",
        "// Line_Reference 73: {",
        "// Line_Reference 74: \tif (delta_head) {",
        "// Line_Reference 75: \t\tdoc_data_cleanup(&delta_head->doc_data);",
        "// Line_Reference 76: \t\tfree(delta_head);",
        "// Line_Reference 77: \t}",
        "// Line_Reference 78: }",
        "// Line_Reference 79: ",
        "// Line_Reference 80: static void",
        "// Line_Reference 81: deltas_head_init(struct deltas_head *list)",
        "// Line_Reference 82: {",
        "// Line_Reference 83: \tlist->array = NULL;",
        "// Line_Reference 84: \tlist->len = 0;",
        "// Line_Reference 85: \tlist->capacity = 0;",
        "// Line_Reference 86: }",
        "// Line_Reference 87: ",
        "// Line_Reference 88: static void",
        "// Line_Reference 89: deltas_head_cleanup(struct deltas_head *list)",
        "// Line_Reference 90: {",
        "// Line_Reference 91: \tsize_t i;",
        "// Line_Reference 92: ",
        "// Line_Reference 93: \tfor (i = 0; i < list->capacity; i++)",
        "// Line_Reference 94: \t\tdelta_head_destroy(list->array[i]);",
        "// Line_Reference 95: \tif (list->array)",
        "// Line_Reference 96: \t\tfree(list->array);",
        "// Line_Reference 97: }",
        "// Line_Reference 98: ",
        "// Line_Reference 99: static int",
        "// Line_Reference 100: deltas_head_create(struct deltas_head **deltas)",
        "// Line_Reference 101: {",
        "// Line_Reference 102: \tstruct deltas_head *tmp;",
        "// Line_Reference 103: ",
        "// Line_Reference 104: \ttmp = malloc(sizeof(struct deltas_head));",
        "// Line_Reference 105: \tif (tmp == NULL)",
        "// Line_Reference 106: \t\treturn pr_enomem();",
        "// Line_Reference 107: ",
        "// Line_Reference 108: \tdeltas_head_init(tmp);",
        "// Line_Reference 109: ",
        "// Line_Reference 110: \t*deltas = tmp;",
        "// Line_Reference 111: \treturn 0;",
        "// Line_Reference 112: }",
        "// Line_Reference 113: ",
        "// Line_Reference 114: static void",
        "// Line_Reference 115: deltas_head_destroy(struct deltas_head *deltas)",
        "// Line_Reference 116: {",
        "// Line_Reference 117: \tdeltas_head_cleanup(deltas);",
        "// Line_Reference 118: \tfree(deltas);",
        "// Line_Reference 119: }",
        "// Line_Reference 120: ",
        "// Line_Reference 121: int",
        "// Line_Reference 122: deltas_head_set_size(struct deltas_head *deltas, size_t capacity)",
        "// Line_Reference 123: {",
        "// Line_Reference 124: \tsize_t i;",
        "// Line_Reference 125: ",
        "// Line_Reference 126: \tif (deltas->array != NULL)",
        "// Line_Reference 127: \t\tpr_crit(\"Size of this list can't be modified\");",
        "// Line_Reference 128: ",
        "// Line_Reference 129: \tdeltas->capacity = capacity;",
        "// Line_Reference 130: \tif (capacity == 0)",
        "// Line_Reference 131: \t\treturn 0; /* Ok, list can have 0 elements */",
        "// Line_Reference 132: ",
        "// Line_Reference 133: \tdeltas->array = malloc(deltas->capacity",
        "// Line_Reference 134: \t    * sizeof(struct delta_head *));",
        "// Line_Reference 135: \tif (deltas->array == NULL)",
        "// Line_Reference 136: \t\treturn pr_enomem();",
        "// Line_Reference 137: ",
        "// Line_Reference 138: \t/* Point all elements to NULL */",
        "// Line_Reference 139: \tfor (i = 0; i < deltas->capacity; i++)",
        "// Line_Reference 140: \t\tdeltas->array[i] = NULL;",
        "// Line_Reference 141: ",
        "// Line_Reference 142: \treturn 0;",
        "// Line_Reference 143: }",
        "// Line_Reference 144: ",
        "// Line_Reference 145: /*",
        "// Line_Reference 146:  * A new delta_head will be allocated at its corresponding position inside",
        "// Line_Reference 147:  * @deltas (also its URI and HASH will be allocated). The position is calculated",
        "// Line_Reference 148:  * using the difference between @max_serial and @serial.",
        "// Line_Reference 149:  *",
        "// Line_Reference 150:  * The following errors can be returned due to a wrong @position:",
        "// Line_Reference 151:  *   -EEXIST: There's already an element at @position.",
        "// Line_Reference 152:  *   -EINVAL: @position can't be inside @deltas list, meaning that such element",
        "// Line_Reference 153:  *            isn't part of a contiguous list.",
        "// Line_Reference 154:  *",
        "// Line_Reference 155:  * Don't forget to call deltas_head_set_size() before this!!",
        "// Line_Reference 156:  */",
        "// Line_Reference 157: int",
        "// Line_Reference 158: deltas_head_add(struct deltas_head *deltas, unsigned long max_serial,",
        "// Line_Reference 159:     unsigned long serial, char *uri, unsigned char *hash, size_t hash_len)",
        "// Line_Reference 160: {",
        "// Line_Reference 161: \tstruct delta_head *elem;",
        "// Line_Reference 162: \tsize_t position;",
        "// Line_Reference 163: \tint error;",
        "// Line_Reference 164: ",
        "// Line_Reference 165: \tposition = deltas->capacity - 1 - (max_serial - serial);",
        "// Line_Reference 166: \tif (position < 0 || position > deltas->capacity - 1)",
        "// Line_Reference 167: \t\treturn -EINVAL;",
        "// Line_Reference 168: ",
        "// Line_Reference 169: \tif (deltas->array[position] != NULL)",
        "// Line_Reference 170: \t\treturn -EEXIST;",
        "// Line_Reference 171: ",
        "// Line_Reference 172: \telem = NULL;",
        "// Line_Reference 173: \terror = delta_head_create(&elem);",
        "// Line_Reference 174: \tif (error)",
        "// Line_Reference 175: \t\treturn error;",
        "// Line_Reference 176: ",
        "// Line_Reference 177: \telem->serial = serial;",
        "// Line_Reference 178: ",
        "// Line_Reference 179: \telem->doc_data.uri = strdup(uri);",
        "// Line_Reference 180: \tif (elem->doc_data.uri == NULL) {",
        "// Line_Reference 181: \t\tfree(elem);",
        "// Line_Reference 182: \t\treturn pr_enomem();",
        "// Line_Reference 183: \t}",
        "// Line_Reference 184: ",
        "// Line_Reference 185: \telem->doc_data.hash_len = hash_len;",
        "// Line_Reference 186: \telem->doc_data.hash = malloc(hash_len);",
        "// Line_Reference 187: \tif (elem->doc_data.hash == NULL) {",
        "// Line_Reference 188: \t\tfree(elem->doc_data.uri);",
        "// Line_Reference 189: \t\tfree(elem);",
        "// Line_Reference 190: \t\treturn pr_enomem();",
        "// Line_Reference 191: \t}",
        "// Line_Reference 192: \tmemcpy(elem->doc_data.hash, hash, hash_len);",
        "// Line_Reference 193: ",
        "// Line_Reference 194: \tdeltas->array[position] = elem;",
        "// Line_Reference 195: \tdeltas->len++;",
        "// Line_Reference 196: ",
        "// Line_Reference 197: \treturn 0;",
        "// Line_Reference 198: }",
        "// Line_Reference 199: ",
        "// Line_Reference 200: /* Are all expected values set? */",
        "// Line_Reference 201: bool",
        "// Line_Reference 202: deltas_head_values_set(struct deltas_head *deltas)",
        "// Line_Reference 203: {",
        "// Line_Reference 204: \treturn deltas->len == deltas->capacity;",
        "// Line_Reference 205: }",
        "// Line_Reference 206: ",
        "// Line_Reference 226: \t\terror = cb(deltas->array[index], arg);",
        "// Line_Reference 235: update_notification_create(struct update_notification **file)",
        "// Line_Reference 237: \tstruct update_notification *tmp;",
        "// Line_Reference 238: \tstruct deltas_head *list;",
        "// Line_Reference 241: \ttmp = malloc(sizeof(struct update_notification));",
        "// Line_Reference 242: \tif (tmp == NULL)",
        "// Line_Reference 243: \t\treturn pr_enomem();",
        "// Line_Reference 245: \tlist = NULL;",
        "// Line_Reference 246: \terror = deltas_head_create(&list);",
        "// Line_Reference 247: \tif (error) {",
        "// Line_Reference 248: \t\tfree(tmp);",
        "// Line_Reference 249: \t\treturn error;",
        "// Line_Reference 250: \t}",
        "// Line_Reference 251: \ttmp->deltas_list = list;",
        "// Line_Reference 252: \ttmp->uri = NULL;",
        "// Line_Reference 254: \tglobal_data_init(&tmp->global_data);",
        "// Line_Reference 255: \tdoc_data_init(&tmp->snapshot);",
        "// Line_Reference 257: \t*file = tmp;",
        "// Line_Reference 266: \tdeltas_head_destroy(file->deltas_list);"
    ]
}
