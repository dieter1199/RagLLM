{
    "cve_id": "CVE-2022-39302",
    "cve_description": "Ree6 is a moderation bot. This vulnerability would allow other server owners to create configurations such as \"Better-Audit-Logging\" which contain a channel from another server as a target. This would mean you could send log messages to another Guild channel and bypass raid and webhook protections. A specifically crafted log message could allow spamming and mass advertisements. This issue has been patched in version 1.9.9. There are currently no known workarounds.",
    "cve_publish_date": "2022-10-14",
    "cwe_id": "CWE-863",
    "cwe_name": "Incorrect Authorization",
    "cwe_description": "The product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. This allows attackers to bypass intended access restrictions.",
    "commit_message": "Removed News-Channel.\nFixed Cross-Server Channel Exploit.\nFixed Temporal-Voice setup.",
    "type_of_change": "Modification",
    "filename_of_changes": "SQLWorker.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "0",
    "number_of_lines_deleted_vulnerable_to_cve": "53",
    "vulnerable_lines": [
        "// Line_Reference 355:     //region News",
        "// Line_Reference 356: ",
        "// Line_Reference 357:     /**",
        "// Line_Reference 358:      * Get the NewsWebhooks data.",
        "// Line_Reference 359:      *",
        "// Line_Reference 360:      * @param guildId the ID of the Guild.",
        "// Line_Reference 361:      * @return {@link WebhookNews} with all the needed data.",
        "// Line_Reference 362:      */",
        "// Line_Reference 363:     public WebhookNews getNewsWebhook(String guildId) {",
        "// Line_Reference 364:         SQLResponse sqlResponse = getEntity(WebhookNews.class, \"SELECT * FROM NewsWebhooks WHERE GID=?\", guildId);",
        "// Line_Reference 365:         return sqlResponse.isSuccess() ? (WebhookNews) sqlResponse.getEntity() : null;",
        "// Line_Reference 366:     }",
        "// Line_Reference 367: ",
        "// Line_Reference 368:     /**",
        "// Line_Reference 369:      * Set the NewsWebhooks in our Database.",
        "// Line_Reference 370:      *",
        "// Line_Reference 371:      * @param guildId   the ID of the Guild.",
        "// Line_Reference 372:      * @param webhookId the ID of the Webhook.",
        "// Line_Reference 373:      * @param authToken the Auth-token to verify the access.",
        "// Line_Reference 374:      */",
        "// Line_Reference 375:     public void setNewsWebhook(String guildId, String webhookId, String authToken) {",
        "// Line_Reference 376: ",
        "// Line_Reference 377:         // Check if there is already a Webhook set.",
        "// Line_Reference 378:         if (isNewsSetup(guildId)) {",
        "// Line_Reference 379:             // Get the Guild from the ID.",
        "// Line_Reference 380:             Guild guild = BotWorker.getShardManager().getGuildById(guildId);",
        "// Line_Reference 381: ",
        "// Line_Reference 382:             if (guild != null) {",
        "// Line_Reference 383:                 Webhook webhookEntity = getNewsWebhook(guildId);",
        "// Line_Reference 384:                 // Delete the existing Webhook.",
        "// Line_Reference 385:                 guild.retrieveWebhooks().queue(webhooks -> webhooks.stream().filter(webhook -> webhook.getToken() != null).filter(webhook -> webhook.getId().equalsIgnoreCase(webhookEntity.getChannelId()) && webhook.getToken().equalsIgnoreCase(webhookEntity.getToken())).forEach(webhook -> webhook.delete().queue()));",
        "// Line_Reference 386:             }",
        "// Line_Reference 387: ",
        "// Line_Reference 388:             // Delete the entry.",
        "// Line_Reference 389:             sqlConnector.querySQL(\"DELETE FROM NewsWebhooks WHERE GID=?\", guildId);",
        "// Line_Reference 390:         }",
        "// Line_Reference 391: ",
        "// Line_Reference 392:         saveEntity(new WebhookNews(guildId, webhookId, authToken));",
        "// Line_Reference 393: ",
        "// Line_Reference 394:     }",
        "// Line_Reference 395: ",
        "// Line_Reference 396:     /**",
        "// Line_Reference 397:      * Check if the News Webhook has been set in our Database for this Server.",
        "// Line_Reference 398:      *",
        "// Line_Reference 399:      * @param guildId the ID of the Guild.",
        "// Line_Reference 400:      * @return {@link Boolean} if true, it has been set | if false, it hasn't been set.",
        "// Line_Reference 401:      */",
        "// Line_Reference 402:     public boolean isNewsSetup(String guildId) {",
        "// Line_Reference 403:         return getEntity(WebhookNews.class, \"SELECT * FROM NewsWebhooks WHERE GID=?\", guildId).isSuccess();",
        "// Line_Reference 404:     }",
        "// Line_Reference 405: ",
        "// Line_Reference 406:     //endregion",
        "// Line_Reference 407: "
    ]
}
