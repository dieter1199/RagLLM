{
    "cve_id": "CVE-2020-26117",
    "cve_description": "In rfb/CSecurityTLS.cxx and rfb/CSecurityTLS.java in TigerVNC before 1.11.0, viewers mishandle TLS certificate exceptions. They store the certificates as authorities, meaning that the owner of a certificate could impersonate any server after a client had added an exception.",
    "cve_publish_date": "2020-09-27",
    "cwe_id": "CWE-295",
    "cwe_name": "Improper Certificate Validation",
    "cwe_description": "The product does not validate, or incorrectly validates, a certificate.",
    "commit_message": "Properly store certificate exceptions\n\nThe previous method stored the certificates as authorities, meaning that\nthe owner of that certificate could impersonate any server it wanted\nafter a client had added an exception.\n\nHandle this more properly by only storing exceptions for specific\nhostname/certificate combinations, the same way browsers or SSH does\nthings.",
    "type_of_change": "Modification",
    "filename_of_changes": "CSecurityTLS.cxx",
    "code_language": "C++",
    "number_of_lines_added_for_mitigation": "73",
    "number_of_lines_deleted_vulnerable_to_cve": "90",
    "vulnerable_lines": [
        "// Line_Reference 253:     /* Load previously saved certs */",
        "// Line_Reference 254:     char *homeDir = NULL;",
        "// Line_Reference 255:     int err;",
        "// Line_Reference 256:     if (getvnchomedir(&homeDir) == -1)",
        "// Line_Reference 257:       vlog.error(\"Could not obtain VNC home directory path\");",
        "// Line_Reference 258:     else {",
        "// Line_Reference 259:       CharArray caSave(strlen(homeDir) + 19 + 1);",
        "// Line_Reference 260:       sprintf(caSave.buf, \"%sx509_savedcerts.pem\", homeDir);",
        "// Line_Reference 261:       delete [] homeDir;",
        "// Line_Reference 262: ",
        "// Line_Reference 263:       err = gnutls_certificate_set_x509_trust_file(cert_cred, caSave.buf,",
        "// Line_Reference 264:                                                    GNUTLS_X509_FMT_PEM);",
        "// Line_Reference 265:       if (err < 0)",
        "// Line_Reference 266:         vlog.debug(\"Failed to load saved server certificates from %s\", caSave.buf);",
        "// Line_Reference 267:     }",
        "// Line_Reference 268: ",
        "// Line_Reference 336:     char buf[255];",
        "// Line_Reference 338:     snprintf(buf, sizeof(buf), \"Hostname (%s) does not match any certificate, \"",
        "// Line_Reference 339: \t\t\t       \"do you want to continue?\", client->getServerName());",
        "// Line_Reference 340:     buf[sizeof(buf) - 1] = '\\0';",
        "// Line_Reference 341:     if (!msg->showMsgBox(UserMsgBox::M_YESNO, \"hostname mismatch\", buf))",
        "// Line_Reference 342:       throw AuthFailureException(\"hostname mismatch\");",
        "// Line_Reference 367:   vlog.debug(\"Saved server certificates don't match\");",
        "// Line_Reference 369:   if (gnutls_x509_crt_print(crt, GNUTLS_CRT_PRINT_ONELINE, &info)) {",
        "// Line_Reference 370:     /*",
        "// Line_Reference 371:      * GNUTLS doesn't correctly export gnutls_free symbol which is",
        "// Line_Reference 372:      * a function pointer. Linking with Visual Studio 2008 Express will",
        "// Line_Reference 373:      * fail when you call gnutls_free().",
        "// Line_Reference 374:      */",
        "// Line_Reference 375: #if WIN32",
        "// Line_Reference 376:     free(info.data);",
        "// Line_Reference 377: #else",
        "// Line_Reference 378:     gnutls_free(info.data);",
        "// Line_Reference 379: #endif",
        "// Line_Reference 380:     throw AuthFailureException(\"Could not find certificate to display\");",
        "// Line_Reference 383:   size_t out_size = 0;",
        "// Line_Reference 384:   char *out_buf = NULL;",
        "// Line_Reference 385:   char *certinfo = NULL;",
        "// Line_Reference 386:   int len = 0;",
        "// Line_Reference 387: ",
        "// Line_Reference 388:   vlog.debug(\"certificate issuer unknown\");",
        "// Line_Reference 389: ",
        "// Line_Reference 390:   len = snprintf(NULL, 0, \"This certificate has been signed by an unknown \"",
        "// Line_Reference 391:                           \"authority:\\n\\n%s\\n\\nDo you want to save it and \"",
        "// Line_Reference 392:                           \"continue?\\n \", info.data);",
        "// Line_Reference 393:   if (len < 0)",
        "// Line_Reference 394:     throw AuthFailureException(\"certificate decoding error\");",
        "// Line_Reference 395: ",
        "// Line_Reference 396:   vlog.debug(\"%s\", info.data);",
        "// Line_Reference 397: ",
        "// Line_Reference 398:   certinfo = new char[len];",
        "// Line_Reference 399: ",
        "// Line_Reference 400:   snprintf(certinfo, len, \"This certificate has been signed by an unknown \"",
        "// Line_Reference 401:                           \"authority:\\n\\n%s\\n\\nDo you want to save it and \"",
        "// Line_Reference 402:                           \"continue? \", info.data);",
        "// Line_Reference 404:   for (int i = 0; i < len - 1; i++)",
        "// Line_Reference 405:     if (certinfo[i] == ',' && certinfo[i + 1] == ' ')",
        "// Line_Reference 406:       certinfo[i] = '\\n';",
        "// Line_Reference 408:   if (!msg->showMsgBox(UserMsgBox::M_YESNO, \"certificate issuer unknown\",",
        "// Line_Reference 409: \t\t       certinfo)) {",
        "// Line_Reference 410:     delete [] certinfo;",
        "// Line_Reference 411:     throw AuthFailureException(\"certificate issuer unknown\");",
        "// Line_Reference 414:   delete [] certinfo;",
        "// Line_Reference 415: ",
        "// Line_Reference 416:   if (gnutls_x509_crt_export(crt, GNUTLS_X509_FMT_PEM, NULL, &out_size)",
        "// Line_Reference 417:       != GNUTLS_E_SHORT_MEMORY_BUFFER)",
        "// Line_Reference 418:     throw AuthFailureException(\"certificate issuer unknown, and certificate \"",
        "// Line_Reference 419:                                \"export failed\");",
        "// Line_Reference 421:   // Save cert",
        "// Line_Reference 422:   out_buf =  new char[out_size];",
        "// Line_Reference 424:   if (gnutls_x509_crt_export(crt, GNUTLS_X509_FMT_PEM, out_buf, &out_size) < 0)",
        "// Line_Reference 425:     throw AuthFailureException(\"certificate issuer unknown, and certificate \"",
        "// Line_Reference 426:                                \"export failed\");",
        "// Line_Reference 428:   char *homeDir = NULL;",
        "// Line_Reference 429:   if (getvnchomedir(&homeDir) == -1)",
        "// Line_Reference 430:     vlog.error(\"Could not obtain VNC home directory path\");",
        "// Line_Reference 431:   else {",
        "// Line_Reference 432:     FILE *f;",
        "// Line_Reference 433:     CharArray caSave(strlen(homeDir) + 1 + 19);",
        "// Line_Reference 434:     sprintf(caSave.buf, \"%sx509_savedcerts.pem\", homeDir);",
        "// Line_Reference 435:     delete [] homeDir;",
        "// Line_Reference 436:     f = fopen(caSave.buf, \"a+\");",
        "// Line_Reference 437:     if (!f)",
        "// Line_Reference 438:       msg->showMsgBox(UserMsgBox::M_OK, \"certificate save failed\",",
        "// Line_Reference 439:                       \"Could not save the certificate\");",
        "// Line_Reference 440:     else {",
        "// Line_Reference 441:       fprintf(f, \"%s\\n\", out_buf);",
        "// Line_Reference 442:       fclose(f);",
        "// Line_Reference 443:     }",
        "// Line_Reference 446:   delete [] out_buf;"
    ]
}
