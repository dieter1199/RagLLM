{
    "cve_id": "CVE-2019-18933",
    "cve_description": "In Zulip Server versions from 1.7.0 to before 2.0.7, a bug in the new user signup process meant that users who registered their account using social authentication (e.g., GitHub or Google SSO) in an organization that also allows password authentication could have their personal API key stolen by an unprivileged attacker, allowing nearly full access to the user's account.",
    "cve_publish_date": "2019-11-21",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "CVE-2019-18933: Fix insecure account creation via social authentication.\n\nA bug in Zulip's new user signup process meant that users who\nregistered their account using social authentication (e.g. GitHub or\nGoogle SSO) in an organization that also allows password\nauthentication could have their personal API key stolen by an\nunprivileged attacker, allowing nearly full access to the user's\naccount.\n\nZulip versions between 1.7.0 and 2.0.6 were affected.\n\nThis commit fixes the original bug and also contains a database\nmigration to fix any users with corrupt `password` fields in the\ndatabase as a result of the bug.\n\nOut of an abundance of caution (and to protect the users of any\ninstallations that delay applying this commit), the migration also\nresets the API keys of any users where Zulip's logs cannot prove the\nuser's API key was not previously stolen via this bug.  Resetting\nthose API keys will be inconvenient for users:\n\n* Users of the Zulip mobile and terminal apps whose API keys are reset\n  will be logged out and need to login again.\n* Users using their personal API keys for any other reason will need\n  to re-fetch their personal API key.\n\nWe discovered this bug internally and don't believe it was disclosed\nprior to our publishing it through this commit.  Because the algorithm\nfor determining which users might have been affected is very\nconservative, many users who were never at risk will have their API\nkeys reset by this migration.\n\nTo avoid this on self-hosted installations that have always used\ne.g. LDAP authentication, we skip resetting API keys on installations\nthat don't have password authentication enabled.  System\nadministrators on installations that used to have email authentication\nenabled, but no longer do, should temporarily enable EmailAuthBackend\nbefore applying this migration.\n\nThe migration also records which users had their passwords or API keys\nreset in the usual RealmAuditLog table.",
    "type_of_change": "ModificationType.ADD",
    "filename_of_changes": "users.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "1",
    "number_of_lines_deleted_vulnerable_to_cve": "1",
    "vulnerable_lines": [
        "// Line_Reference 331:     bot_profile = do_create_user(email=email, password='',"
    ]
}
