{
    "cve_id": "CVE-2021-25912",
    "cve_description": "Prototype pollution vulnerability in 'dotty' versions 0.0.1 through 0.1.0 allows attackers to cause a denial of service and may lead to remote code execution.",
    "cve_publish_date": "2021-02-02",
    "cwe_id": "CWE-1321",
    "cwe_name": "Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')",
    "cwe_description": "The product receives input from an upstream component that specifies attributes that are to be initialized or updated in an object, but it does not properly control modifications of attributes of the object prototype.",
    "commit_message": "Fix prototype pollution (#26)",
    "type_of_change": "Modification",
    "filename_of_changes": "search-test.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "192",
    "number_of_lines_deleted_vulnerable_to_cve": "181",
    "vulnerable_lines": [
        "// Line_Reference 2:     vows = require(\"vows\"),",
        "// Line_Reference 3:     assert = require(\"assert\");",
        "// Line_Reference 5: vows.describe(\"search\").addBatch({",
        "// Line_Reference 6:   \"A simple path\": {",
        "// Line_Reference 7:     \"as a string\": {",
        "// Line_Reference 8:       topic: dotty.search({\"a\": \"b\"}, \"a\"),",
        "// Line_Reference 9:       \"should return an array\": function(res) {",
        "// Line_Reference 10:         assert.isArray(res);",
        "// Line_Reference 11:       },",
        "// Line_Reference 12:       \"should return one value\": function(res) {",
        "// Line_Reference 13:         assert.equal(res.length, 1);",
        "// Line_Reference 14:       },",
        "// Line_Reference 15:       \"should return the correct value\": function(res) {",
        "// Line_Reference 16:         assert.equal(res[0], \"b\");",
        "// Line_Reference 17:       },",
        "// Line_Reference 18:     },",
        "// Line_Reference 19:     \"as an array\": {",
        "// Line_Reference 20:       topic: dotty.search({\"a\": \"b\"}, [\"a\"]),",
        "// Line_Reference 21:       \"should return an array\": function(res) {",
        "// Line_Reference 22:         assert.isArray(res);",
        "// Line_Reference 23:       },",
        "// Line_Reference 24:       \"should return one value\": function(res) {",
        "// Line_Reference 25:         assert.equal(res.length, 1);",
        "// Line_Reference 26:       },",
        "// Line_Reference 27:       \"should return the correct value\": function(res) {",
        "// Line_Reference 28:         assert.equal(res[0], \"b\");",
        "// Line_Reference 29:       },",
        "// Line_Reference 30:     },",
        "// Line_Reference 31:     \"as an array with a regex\": {",
        "// Line_Reference 32:       topic: dotty.search({\"a\": \"b\"}, [/a/]),",
        "// Line_Reference 33:       \"should return an array\": function(res) {",
        "// Line_Reference 34:         assert.isArray(res);",
        "// Line_Reference 35:       },",
        "// Line_Reference 36:       \"should return one value\": function(res) {",
        "// Line_Reference 37:         assert.equal(res.length, 1);",
        "// Line_Reference 38:       },",
        "// Line_Reference 39:       \"should return the correct value\": function(res) {",
        "// Line_Reference 40:         assert.equal(res[0], \"b\");",
        "// Line_Reference 41:       },",
        "// Line_Reference 42:     },",
        "// Line_Reference 43:   },",
        "// Line_Reference 44:   \"A two-level path\": {",
        "// Line_Reference 45:     \"as a string\": {",
        "// Line_Reference 46:       topic: dotty.search({\"a\": {\"b\": \"c\"}}, \"a.b\"),",
        "// Line_Reference 47:       \"should return an array\": function(res) {",
        "// Line_Reference 48:         assert.isArray(res);",
        "// Line_Reference 49:       },",
        "// Line_Reference 50:       \"should return one value\": function(res) {",
        "// Line_Reference 51:         assert.equal(res.length, 1);",
        "// Line_Reference 52:       },",
        "// Line_Reference 53:       \"should return the correct value\": function(res) {",
        "// Line_Reference 54:         assert.equal(res[0], \"c\");",
        "// Line_Reference 55:       },",
        "// Line_Reference 56:     },",
        "// Line_Reference 57:     \"as an array\": {",
        "// Line_Reference 58:       topic: dotty.search({\"a\": {\"b\": \"c\"}}, [\"a\", \"b\"]),",
        "// Line_Reference 59:       \"should return an array\": function(res) {",
        "// Line_Reference 60:         assert.isArray(res);",
        "// Line_Reference 61:       },",
        "// Line_Reference 62:       \"should return one value\": function(res) {",
        "// Line_Reference 63:         assert.equal(res.length, 1);",
        "// Line_Reference 64:       },",
        "// Line_Reference 65:       \"should return the correct value\": function(res) {",
        "// Line_Reference 66:         assert.equal(res[0], \"c\");",
        "// Line_Reference 69:     \"as an array with regexes\": {",
        "// Line_Reference 70:       topic: dotty.search({\"a\": {\"b\": \"c\"}}, [/a/, /b/]),",
        "// Line_Reference 71:       \"should return an array\": function(res) {",
        "// Line_Reference 72:         assert.isArray(res);",
        "// Line_Reference 73:       },",
        "// Line_Reference 74:       \"should return one value\": function(res) {",
        "// Line_Reference 75:         assert.equal(res.length, 1);",
        "// Line_Reference 76:       },",
        "// Line_Reference 77:       \"should return the correct value\": function(res) {",
        "// Line_Reference 78:         assert.equal(res[0], \"c\");",
        "// Line_Reference 81:   },",
        "// Line_Reference 82:   \"A two-level path matching two values\": {",
        "// Line_Reference 83:     \"as a string\": {",
        "// Line_Reference 84:       topic: dotty.search({\"a\": {\"b\": \"c\", \"d\": \"e\"}}, \"a.*\"),",
        "// Line_Reference 85:       \"should return an array\": function(res) {",
        "// Line_Reference 86:         assert.isArray(res);",
        "// Line_Reference 87:       },",
        "// Line_Reference 88:       \"should return two values\": function(res) {",
        "// Line_Reference 89:         assert.equal(res.length, 2);",
        "// Line_Reference 90:       },",
        "// Line_Reference 91:       \"should return the correct value\": function(res) {",
        "// Line_Reference 92:         assert.equal(res[0], \"c\");",
        "// Line_Reference 93:         assert.equal(res[1], \"e\");",
        "// Line_Reference 96:     \"as an array\": {",
        "// Line_Reference 97:       topic: dotty.search({\"a\": {\"b\": \"c\", \"d\": \"e\"}}, [\"a\", \"*\"]),",
        "// Line_Reference 98:       \"should return an array\": function(res) {",
        "// Line_Reference 99:         assert.isArray(res);",
        "// Line_Reference 100:       },",
        "// Line_Reference 101:       \"should return two values\": function(res) {",
        "// Line_Reference 102:         assert.equal(res.length, 2);",
        "// Line_Reference 103:       },",
        "// Line_Reference 104:       \"should return the correct values\": function(res) {",
        "// Line_Reference 105:         assert.equal(res[0], \"c\");",
        "// Line_Reference 106:         assert.equal(res[1], \"e\");",
        "// Line_Reference 109:     \"as an array with regexes\": {",
        "// Line_Reference 110:       topic: dotty.search({\"a\": {\"b\": \"c\", \"d\": \"e\"}}, [/a/, /.*/]),",
        "// Line_Reference 111:       \"should return an array\": function(res) {",
        "// Line_Reference 112:         assert.isArray(res);",
        "// Line_Reference 113:       },",
        "// Line_Reference 114:       \"should return two values\": function(res) {",
        "// Line_Reference 115:         assert.equal(res.length, 2);",
        "// Line_Reference 116:       },",
        "// Line_Reference 117:       \"should return the correct values\": function(res) {",
        "// Line_Reference 118:         assert.equal(res[0], \"c\");",
        "// Line_Reference 119:         assert.equal(res[1], \"e\");",
        "// Line_Reference 120:       },",
        "// Line_Reference 121:     },",
        "// Line_Reference 122:   },",
        "// Line_Reference 123:   \"A three-level mixed path matching two values\": {",
        "// Line_Reference 124:     \"as a string\": {",
        "// Line_Reference 125:       topic: dotty.search({\"a\": {\"b\": {\"x\": \"y\"}, \"c\": {\"x\": \"z\"}}}, \"a.*.x\"),",
        "// Line_Reference 126:       \"should return an array\": function(res) {",
        "// Line_Reference 127:         assert.isArray(res);",
        "// Line_Reference 128:       },",
        "// Line_Reference 129:       \"should return two values\": function(res) {",
        "// Line_Reference 130:         assert.equal(res.length, 2);",
        "// Line_Reference 131:       },",
        "// Line_Reference 132:       \"should return the correct value\": function(res) {",
        "// Line_Reference 133:         assert.equal(res[0], \"y\");",
        "// Line_Reference 134:         assert.equal(res[1], \"z\");",
        "// Line_Reference 135:       },",
        "// Line_Reference 136:     },",
        "// Line_Reference 137:     \"as an array\": {",
        "// Line_Reference 138:       topic: dotty.search({\"a\": {\"b\": {\"x\": \"y\"}, \"c\": {\"x\": \"z\"}}}, [\"a\", \"*\", \"x\"]),",
        "// Line_Reference 139:       \"should return an array\": function(res) {",
        "// Line_Reference 140:         assert.isArray(res);",
        "// Line_Reference 141:       },",
        "// Line_Reference 142:       \"should return two values\": function(res) {",
        "// Line_Reference 143:         assert.equal(res.length, 2);",
        "// Line_Reference 144:       },",
        "// Line_Reference 145:       \"should return the correct values\": function(res) {",
        "// Line_Reference 146:         assert.equal(res[0], \"y\");",
        "// Line_Reference 147:         assert.equal(res[1], \"z\");",
        "// Line_Reference 148:       },",
        "// Line_Reference 149:     },",
        "// Line_Reference 150:     \"as an array with regexes\": {",
        "// Line_Reference 151:       topic: dotty.search({\"a\": {\"b\": {\"x\": \"y\"}, \"c\": {\"x\": \"z\"}}}, [/a/, /.*/, /x/]),",
        "// Line_Reference 152:       \"should return an array\": function(res) {",
        "// Line_Reference 153:         assert.isArray(res);",
        "// Line_Reference 154:       },",
        "// Line_Reference 155:       \"should return two values\": function(res) {",
        "// Line_Reference 156:         assert.equal(res.length, 2);",
        "// Line_Reference 157:       },",
        "// Line_Reference 158:       \"should return the correct values\": function(res) {",
        "// Line_Reference 159:         assert.equal(res[0], \"y\");",
        "// Line_Reference 160:         assert.equal(res[1], \"z\");",
        "// Line_Reference 161:       },",
        "// Line_Reference 162:     },",
        "// Line_Reference 163:   },",
        "// Line_Reference 164:   \"An unresolved path\": {",
        "// Line_Reference 165:     \"as a string\": {",
        "// Line_Reference 166:       topic: dotty.search({\"a\": {\"b\": \"c\"}}, \"a.x\"),",
        "// Line_Reference 167:       \"should return an array\": function(res) {",
        "// Line_Reference 168:         assert.isArray(res);",
        "// Line_Reference 169:       },",
        "// Line_Reference 170:       \"should return zero values\": function(res) {",
        "// Line_Reference 171:         assert.equal(res.length, 0);",
        "// Line_Reference 172:       },",
        "// Line_Reference 173:     },",
        "// Line_Reference 174:     \"as an array\": {",
        "// Line_Reference 175:       topic: dotty.search({\"a\": {\"b\": \"c\"}}, [\"a\", \"x\"]),",
        "// Line_Reference 176:       \"should return an array\": function(res) {",
        "// Line_Reference 177:         assert.isArray(res);",
        "// Line_Reference 178:       },",
        "// Line_Reference 179:       \"should return zero values\": function(res) {",
        "// Line_Reference 180:         assert.equal(res.length, 0);",
        "// Line_Reference 181:       },",
        "// Line_Reference 182:     },",
        "// Line_Reference 183:     \"as an array with regexes\": {",
        "// Line_Reference 184:       topic: dotty.search({\"a\": {\"b\": \"c\"}}, [/a/, /x/]),",
        "// Line_Reference 185:       \"should return an array\": function(res) {",
        "// Line_Reference 186:         assert.isArray(res);",
        "// Line_Reference 187:       },",
        "// Line_Reference 188:       \"should return zero values\": function(res) {",
        "// Line_Reference 189:         assert.equal(res.length, 0);",
        "// Line_Reference 192:   },",
        "// Line_Reference 193: }).export(module);"
    ]
}
