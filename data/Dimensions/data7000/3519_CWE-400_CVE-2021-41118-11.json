{
    "cve_id": "CVE-2021-41118",
    "cve_description": "The DynamicPageList3 extension is a reporting tool for MediaWiki, listing category members and intersections with various formats and details. In affected versions unsanitised input of regular expression date within the parameters of the DPL parser function, allowed for the possibility of ReDoS (Regex Denial of Service). This has been resolved in version 3.3.6. If you are unable to update you may also set `$wgDplSettings['functionalRichness'] = 0;` or disable DynamicPageList3 to mitigate.",
    "cve_publish_date": "2021-10-04",
    "cwe_id": "CWE-400",
    "cwe_name": "Uncontrolled Resource Consumption",
    "cwe_description": "The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.",
    "commit_message": "Major cleanup (#57)",
    "type_of_change": "Modification",
    "filename_of_changes": "LST.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "176",
    "number_of_lines_deleted_vulnerable_to_cve": "83",
    "vulnerable_lines": [
        "// Line_Reference 34: \t##############################################################",
        "// Line_Reference 41: \t * @param $parser Parser",
        "// Line_Reference 58: \t * @param $parser Parser",
        "// Line_Reference 60: \t * @return bool",
        "// Line_Reference 75: \tprivate static function parse( $parser, $title, $text, $part1, $skiphead = 0, $recursionCheck = true, $maxLength = -1, $link = '', $trim = false, $skipPattern = [] ) {",
        "// Line_Reference 87: \t\t\t//Handle recursion here, so we can break cycles.",
        "// Line_Reference 89: \t\t\t\t$text = $parser->preprocess( $text, $parser->mTitle, $parser->mOptions );",
        "// Line_Reference 102: \t\t\treturn \"[[\" . $title->getPrefixedText() . \"]]\" . \"<!-- WARNING: LST loop detected -->\";",
        "// Line_Reference 106: \t##############################################################",
        "// Line_Reference 117: \t * @return string HTML output",
        "// Line_Reference 123: \t///Generate a regex to match the section(s) we're interested in.",
        "// Line_Reference 125: \t\t$any    = false;",
        "// Line_Reference 146: \t\t$ws = \"(?:\\s+[^>]+)?\"; //was like $ws=\"\\s*\"",
        "// Line_Reference 153: \t * Count skipped headings, so parser (as of r18218) can skip them, to",
        "// Line_Reference 154: \t * prevent wrong heading links (see bug 6563).",
        "// Line_Reference 157: \t * @param int $limit Cutoff point in the text to stop searching",
        "// Line_Reference 158: \t * @return int Number of matches",
        "// Line_Reference 159: \t * @private",
        "// Line_Reference 180: \t\t$title = \\Title::newFromText( $page );",
        "// Line_Reference 189: \t\t//if article doesn't exist, return a red link.",
        "// Line_Reference 198: \t///section inclusion - include all matching sections",
        "// Line_Reference 211: \t\t\t$piece = self::parse( $parser, $title, $piece, \"#lst:${page}|${sec}\", 0, $recursionCheck, $trim, $skipPattern );",
        "// Line_Reference 228: \t * @param  $lim     limit of character count for the result",
        "// Line_Reference 229: \t * @param  $text    the wikitext to be truncated",
        "// Line_Reference 230: \t * @param  $link    an optional link which will be appended to the text if it was truncatedt",
        "// Line_Reference 231: \t * @return the truncated text;",
        "// Line_Reference 252: \t\t$brackets  = 0;",
        "// Line_Reference 254: \t\t$n0        = -1;",
        "// Line_Reference 255: \t\t$nb        = 0;",
        "// Line_Reference 296: \t\t\t$matches   = [];",
        "// Line_Reference 298: \t\t\t$tags      = [",
        "// Line_Reference 343: \t\t/* throw away comments */",
        "// Line_Reference 348: \t//section inclusion - include all matching sections (return array)",
        "// Line_Reference 351: \t\t$n              = 0;",
        "// Line_Reference 352: \t\t$output[$n]     = '';",
        "// Line_Reference 353: \t\t$nr             = 0;",
        "// Line_Reference 365: \t\t\t$sec     = substr( $sec, 1 );",
        "// Line_Reference 369: \t\t\t//Generate a regex to match the === classical heading section(s) === we're",
        "// Line_Reference 373: \t\t\t\t$begin_off = 0;",
        "// Line_Reference 374: \t\t\t\t$head_len  = 6;",
        "// Line_Reference 384: \t\t\t\t\t$mata           = [];",
        "// Line_Reference 386: \t\t\t\t\t$begin_off      = $m[$no_parenthesis][1];",
        "// Line_Reference 387: \t\t\t\t\t$head_len       = strlen( $m[1][0] );",
        "// Line_Reference 388: \t\t\t\t\t$headLine       = trim( $m[0][0], \"\\n =\\t\" );",
        "// Line_Reference 409: \t\t\t\t$piece     = substr( $text, 0, $m[1][1] - 1 );",
        "// Line_Reference 410: \t\t\t\t$output[0] = self::parse( $parser, $title, $piece, \"#lsth:${page}|${sec}\", 0, $recursionCheck, $maxLength, $link, $trim, $skipPattern );",
        "// Line_Reference 418: \t\t\t\t//if $to is supplied, try and match it.  If we don't match, just ignore it.",
        "// Line_Reference 455: \t\t\t\t$piece          = substr( $text, $begin_off );",
        "// Line_Reference 467: \t\t\t\t//$sectionHeading[$n]=preg_replace(\"/^=+\\s*/\",\"\",$m[0][0]);",
        "// Line_Reference 468: \t\t\t\t//$sectionHeading[$n]=preg_replace(\"/\\s*=+\\s*$/\",\"\",$sectionHeading[$n]);",
        "// Line_Reference 470: \t\t\t\t// $sectionHeading[$n] = '';",
        "// Line_Reference 476: \t\t\t\t$output[0] = self::parse( $parser, $title, $piece, \"#lsth:${page}|${sec}\", $nhead, $recursionCheck, $maxLength, $link, $trim, $skipPattern );",
        "// Line_Reference 482: \t\t\t\t\t$output[0] = self::parse( $parser, $title, $piece, \"#lsth:${page}|${sec}\", $nhead, $recursionCheck, $maxLength, $link, $trim, $skipPattern );",
        "// Line_Reference 487: \t\t\t\t$output[$n++] = self::parse( $parser, $title, $piece, \"#lsth:${page}|${sec}\", $nhead, $recursionCheck, $maxLength, $link, $trim, $skipPattern );",
        "// Line_Reference 500: \t\t$page  = $article->mTitle->getPrefixedText();",
        "// Line_Reference 501: \t\t$date  = $article->myDate;",
        "// Line_Reference 502: \t\t$user  = $article->mUserLink;",
        "// Line_Reference 503: \t\t$title = \\Title::newFromText( $page );",
        "// Line_Reference 504: \t\t/* get text and throw away html comments */",
        "// Line_Reference 509: \t\t\t$template1       = substr( $template1, 1 );",
        "// Line_Reference 510: \t\t\t$template2       = substr( $template2, 1 );",
        "// Line_Reference 513: \t\t\t$text2           = preg_replace( \"/\\{\\{\\s*#(\" . $template1 . ')(\\s*[:}])/i', '°³²|%PFUNC%=\\1\\2|', $text );",
        "// Line_Reference 514: \t\t\t$tCalls          = preg_split( '/°³²/', ' ' . $text2 );",
        "// Line_Reference 522: \t\t\t$template1       = substr( $template1, 1 );",
        "// Line_Reference 523: \t\t\t$template2       = substr( $template2, 1 );",
        "// Line_Reference 526: \t\t\t$text2           = preg_replace( '/\\<\\s*(' . $template1 . ')\\s*\\>/i', '°³²|%TAG%=\\1|%TAGBODY%=', $text );",
        "// Line_Reference 527: \t\t\t$tCalls          = preg_split( '/°³²/', ' ' . $text2 );",
        "// Line_Reference 539: \t\t\t$tCalls  = preg_split( '/\\{\\{\\s*(Template:|' . $nsNames[10] . ':)?' . self::spaceOrUnderscore( preg_quote( $template1, '/' ) ) . '\\s*[|}]/i', ' ' . $text );",
        "// Line_Reference 552: \t\t$output      = [];",
        "// Line_Reference 576: \t\t\t\t$output[0] = $parser->preprocess( '{{' . $defaultTemplate . '|%PAGE%=' . $page . '|%TITLE%=' . $title->getText() . '|%DATE%=' . $date . '|%USER%=' . $user . '}}', $parser->mTitle, $parser->mOptions );",
        "// Line_Reference 583: \t\t$n         = -2;",
        "// Line_Reference 595: \t\t\t\t$cbrackets    = 0;",
        "// Line_Reference 597: \t\t\t\t$size         = strlen( $templateCall );",
        "// Line_Reference 611: \t\t\t\t\t\t\t$argChain   = $invocation . '|%PAGE%=' . $page . '|%TITLE%=' . $title->getText();",
        "// Line_Reference 616: \t\t\t\t\t\t\t$output[++$n] = $parser->preprocess( $argChain, $parser->mTitle, $parser->mOptions );",
        "// Line_Reference 623: \t\t\t\t$cbrackets    = 2;",
        "// Line_Reference 625: \t\t\t\t$size         = strlen( $templateCall );",
        "// Line_Reference 626: \t\t\t\t$parms        = [];",
        "// Line_Reference 627: \t\t\t\t$parm         = '';",
        "// Line_Reference 628: \t\t\t\t$hasParm      = false;",
        "// Line_Reference 641: \t\t\t\t\t\t$parm    = '';",
        "// Line_Reference 649: \t\t\t\t\t\tarray_splice( $parms, 0, 1 ); // remove artifact;",
        "// Line_Reference 654: \t\t\t\t\t\t\t$second       = false;"
    ]
}
