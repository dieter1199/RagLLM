use Elabftw\Models\Users;
// INIT APP OBJECT
$Auth = new Auth($App);
if ($Auth->needAuth()) {
try {
// this will throw an UnauthorizedException if we don't have a valid auth
$AuthResponse = $Auth->tryAuth();
$LoginHelper = new LoginHelper($AuthResponse, $App->Session);
$LoginHelper->login(false);
} catch (UnauthorizedException $e) {
// KICK USER TO LOGOUT PAGE THAT WILL REDIRECT TO LOGIN PAGE
// maybe we clicked an email link and we want to be redirected to the page upon successful login
// so we store the url in a cookie expiring in 5 minutes to redirect to it after login
// don't store a redirect cookie if we have been logged out and the redirect is to a controller page
if (!stripos($App->Request->getRequestUri(), 'controllers')) {
$cookieOptions = array(
'expires' => time() + 300,
'path' => '/',
'domain' => '',
'secure' => true,
'httponly' => true,
'samesite' => 'Strict',
);
setcookie('redirect', $App->Request->getRequestUri(), $cookieOptions);
}
// used by ajax requests to detect a timed out session
header('X-Elab-Need-Auth: 1');
// don't send a GET app/logout.php if it's an ajax call because it messes up the jquery ajax
if ($App->Request->headers->get('X-Requested-With') !== 'XMLHttpRequest') {
// NO DON'T USE  THE FULL URL HERE BECAUSE IF SERVER IS HTTP it will fail badly
header('Location: app/logout.php?keep_redirect=1');
exit;
}
throw new UnauthorizedException(_('Your session expired.'));
}
// load the Users with a userid if we are auth and not anon
if ($App->Session->has('is_auth') && $App->Session->get('userid') !== 0) {
$App->loadUser(new Users(
$App->Session->get('userid'),
$App->Session->get('team'),
));
}
// ANONYMOUS
if ($App->Session->get('is_anon') === 1) {
// anon user only has access to a subset of pages
$allowedPages = array('index.php', 'experiments.php', 'database.php', 'search.php', 'make.php');
if (!in_array(basename($App->Request->getScriptName()), $allowedPages, true)) {
throw new ImproperActionException('Anonymous user cannot access this page');
}
$Users = new Users();
$Users->userData['team'] = $App->Session->get('team');
$App->loadUser($Users);
// create a fake Users object with default data for anon user
$App->Users->userData['team'] = $App->Session->get('team');
$App->Users->userData['limit_nb'] = 15;
$App->Users->userData['anon'] = true;
$App->Users->userData['fullname'] = 'Anon Ymous';
$App->Users->userData['is_admin'] = 0;
$App->Users->userData['is_sysadmin'] = 0;
$App->Users->userData['show_team'] = 1;
$App->Users->userData['show_team_templates'] = 0;
$App->Users->userData['show_public'] = 0;
$App->Users->userData['lang'] = $App->Config->configArr['lang'];
$App->Users->userData['use_isodate'] = '0';
// START i18n
// get the lang
if ($App->Session->has('is_auth') && $App->Session->get('userid') !== 0) {
// set lang based on user pref
$locale = $App->Users->userData['lang'] . '.utf8';
} else {
// load server configured lang if logged out
$locale = $App->Config->configArr['lang'] . '.utf8';
// configure gettext
$domain = 'messages';
putenv("LC_ALL=$locale");
setlocale(LC_ALL, $locale);
bindtextdomain($domain, dirname(__DIR__, 2) . '/src/langs');
textdomain($domain);
// END i18n
} catch (UnauthorizedException $e) {
// do nothing here, controller will display the error
