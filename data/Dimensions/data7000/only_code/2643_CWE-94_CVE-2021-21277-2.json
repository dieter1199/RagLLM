function angularInit(element, bootstrap) {
var appElement,
module,
config = {};
// The element `element` has priority over any other element.
forEach(ngAttrPrefixes, function (prefix) {
var name = prefix + "app";
if (!appElement && element.hasAttribute && element.hasAttribute(name)) {
appElement = element;
module = element.getAttribute(name);
}
});
forEach(ngAttrPrefixes, function (prefix) {
var name = prefix + "app";
var candidate;
if (
!appElement &&
(candidate = element.querySelector("[" + name.replace(":", "\\:") + "]"))
) {
appElement = candidate;
module = candidate.getAttribute(name);
}
});
if (appElement) {
if (!isAutoBootstrapAllowed) {
window.console.error(
"Angular: disabling automatic bootstrap. <script> protocol indicates " +
"an extension, document.location.href does not match."
);
return;
}
config.strictDi = getNgAttribute(appElement, "strict-di") !== null;
bootstrap(appElement, module ? [module] : [], config);
}
}
this.lazyAssign(intoId, this.computedMember("i", ast.watchId)),
member = self.computedMember(left, right);
member = self.nonComputedMember(left, ast.property.name);
x + ".call(" + [left.context].concat(args).join(",") + ")";
self.assign(self.member(intoId, left, property.computed), right);
computedMember: function (left, right) {
