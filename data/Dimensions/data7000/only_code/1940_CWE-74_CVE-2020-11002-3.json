import java.util.regex.Matcher;
import java.util.regex.Pattern;
private static final Pattern ESCAPE_PATTERN = Pattern.compile("\\$\\{");
private ConstraintValidatorContext context;
public ViolationCollector(ConstraintValidatorContext context) {
this.context = context;
* @param message the message of the violation (any EL expression will be escaped and not parsed)
String messageTemplate = escapeEl(message);
context.buildConstraintViolationWithTemplate(messageTemplate)
* @param message      the message of the violation (any EL expression will be escaped and not parsed)
String messageTemplate = escapeEl(message);
context.buildConstraintViolationWithTemplate(messageTemplate)
String messageTemplate = escapeEl(message);
context.buildConstraintViolationWithTemplate(messageTemplate)
* @param message      the message of the violation (any EL expression will be escaped and not parsed)
String messageTemplate = escapeEl(message);
@Nullable
private String escapeEl(@Nullable String s) {
if (s == null || s.isEmpty()) {
return s;
}
final Matcher m = ESCAPE_PATTERN.matcher(s);
final StringBuffer sb = new StringBuffer(s.length() + 16);
while (m.find()) {
m.appendReplacement(sb, "\\\\\\${");
m.appendTail(sb);
return sb.toString();
return context;
