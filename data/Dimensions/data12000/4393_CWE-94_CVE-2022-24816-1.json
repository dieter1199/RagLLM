{
    "cve_id": "CVE-2022-24816",
    "cve_description": "JAI-EXT is an open-source project which aims to extend the Java Advanced Imaging (JAI) API. Programs allowing Jiffle script to be provided via network request can lead to a Remote Code Execution as the Jiffle script is compiled into Java code via Janino, and executed. In particular, this affects the downstream GeoServer project. Version 1.2.22 will contain a patch that disables the ability to inject malicious code into the resulting script. Users unable to upgrade may negate the ability to compile Jiffle scripts from the final application, by removing janino-x.y.z.jar from the classpath.",
    "cve_publish_date": "2022-04-13",
    "cwe_id": "CWE-94",
    "cwe_name": "Improper Control of Generation of Code ('Code Injection')",
    "cwe_description": "The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.",
    "commit_message": "Validate Jiffle input variable names according to grammar, escape javadocs when including Jiffle sources in output",
    "type_of_change": "Modification",
    "filename_of_changes": "Jiffle.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "30",
    "number_of_lines_deleted_vulnerable_to_cve": "14",
    "vulnerable_lines": [
        "// Line_Reference 131:     private static Pattern BLOCK_COMMENT_STRIPPER = Pattern.compile(\"(?:/\\\\*(?:[^*]|(?:\\\\*+[^*/]))*\\\\*+/)\");",
        "// Line_Reference 275: ",
        "// Line_Reference 484:         return createRuntimeInstance(model, getRuntimeBaseClass(model), false);",
        "// Line_Reference 515:         return (T) createRuntimeInstance(model, baseClass, false);",
        "// Line_Reference 561:             throw new it.geosolutions.jaiext.jiffle.JiffleException(\"Runtime source error for source: \" + runtimeSource, ex);",
        "// Line_Reference 616:     private String createRuntimeSource(RuntimeModel model, String baseClassName, boolean scriptInDocs) {",
        "// Line_Reference 618:             throw new RuntimeException(\"Do no know how to clean the block comments yet\");",
        "// Line_Reference 620: ",
        "// Line_Reference 621:         SourceWriter writer = new SourceWriter(model);",
        "// Line_Reference 622:         writer.setScript(stripComments(theScript));",
        "// Line_Reference 628:     private String stripComments(String theScript) {",
        "// Line_Reference 629:         return BLOCK_COMMENT_STRIPPER.matcher(theScript).replaceAll(\"\");",
        "// Line_Reference 630:     }",
        "// Line_Reference 631: "
    ]
}
