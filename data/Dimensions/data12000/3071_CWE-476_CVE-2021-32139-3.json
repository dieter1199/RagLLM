{
    "cve_id": "CVE-2021-32139",
    "cve_description": "The gf_isom_vp_config_get function in GPAC 1.0.1 allows attackers to cause a denial of service (NULL pointer dereference) via a crafted file in the MP4Box command.",
    "cve_publish_date": "2021-09-13",
    "cwe_id": "CWE-476",
    "cwe_name": "NULL Pointer Dereference",
    "cwe_description": "The product dereferences a pointer that it expects to be valid but is NULL.",
    "commit_message": "fixed #1768",
    "type_of_change": "Modification",
    "filename_of_changes": "tx3g.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "73",
    "number_of_lines_deleted_vulnerable_to_cve": "41",
    "vulnerable_lines": [
        "// Line_Reference 36: \tBool is_qt_text = GF_FALSE;",
        "// Line_Reference 37: \tGF_Tx3gSampleEntryBox *txt;",
        "// Line_Reference 38: ",
        "// Line_Reference 58: \t\tis_qt_text = GF_TRUE;",
        "// Line_Reference 66: \t(*out_desc)->back_color = txt->back_color;",
        "// Line_Reference 67: \t(*out_desc)->default_pos = txt->default_box;",
        "// Line_Reference 68: \t(*out_desc)->default_style = txt->default_style;",
        "// Line_Reference 69: \t(*out_desc)->displayFlags = txt->displayFlags;",
        "// Line_Reference 70: \t(*out_desc)->vert_justif = txt->vertical_justification;",
        "// Line_Reference 71: \t(*out_desc)->horiz_justif = txt->horizontal_justification;",
        "// Line_Reference 72: \tif (is_qt_text) {",
        "// Line_Reference 73: \t\tGF_TextSampleEntryBox *qt_txt = (GF_TextSampleEntryBox *) txt;",
        "// Line_Reference 698: static void gf_isom_write_tx3g(GF_Tx3gSampleEntryBox *a, GF_BitStream *bs, u32 sidx, u32 sidx_offset)",
        "// Line_Reference 701: \tBool is_qt_text = (a->type==GF_ISOM_BOX_TYPE_TEXT) ? GF_TRUE : GF_FALSE;",
        "// Line_Reference 714: \tif (is_qt_text) {",
        "// Line_Reference 715: \t\tGF_TextSampleEntryBox *qt = (GF_TextSampleEntryBox *)a;",
        "// Line_Reference 716: \t\tif (qt->textName) {",
        "// Line_Reference 717: \t\t\tqt_fontname = qt->textName;",
        "// Line_Reference 718: \t\t\tfount_count = 1;",
        "// Line_Reference 719: \t\t}",
        "// Line_Reference 720: \t} else {",
        "// Line_Reference 721: \t\tif (a->font_table) {",
        "// Line_Reference 722: \t\t\tfount_count = a->font_table->entry_count;",
        "// Line_Reference 723: \t\t\tfor (j=0; j<fount_count; j++) {",
        "// Line_Reference 724: \t\t\t\tsize += 3;",
        "// Line_Reference 725: \t\t\t\tif (a->font_table->fonts[j].fontName) size += (u32) strlen(a->font_table->fonts[j].fontName);",
        "// Line_Reference 726: \t\t\t}",
        "// Line_Reference 731: \tgf_bs_write_u32(bs, a->type);",
        "// Line_Reference 732: \tgf_bs_write_data(bs, a->reserved, 6);",
        "// Line_Reference 733: \tgf_bs_write_u16(bs, a->dataReferenceIndex);",
        "// Line_Reference 734: \tgf_bs_write_u32(bs, a->displayFlags);",
        "// Line_Reference 735: \tgf_bs_write_u8(bs, a->horizontal_justification);",
        "// Line_Reference 736: \tgf_bs_write_u8(bs, a->vertical_justification);",
        "// Line_Reference 737: \tgpp_write_rgba(bs, a->back_color);",
        "// Line_Reference 738: \tgpp_write_box(bs, &a->default_box);",
        "// Line_Reference 739: \tgpp_write_style(bs, &a->default_style);",
        "// Line_Reference 747: \t\tif (is_qt_text) {",
        "// Line_Reference 757: \t\t\tgf_bs_write_u16(bs, a->font_table->fonts[j].fontID);",
        "// Line_Reference 758: \t\t\tif (a->font_table->fonts[j].fontName) {",
        "// Line_Reference 759: \t\t\t\tu32 len = (u32) strlen(a->font_table->fonts[j].fontName);",
        "// Line_Reference 761: \t\t\t\tgf_bs_write_data(bs, a->font_table->fonts[j].fontName, len);"
    ]
}
