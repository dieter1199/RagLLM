{
    "cve_id": "CVE-2021-39199",
    "cve_description": "remark-html is an open source nodejs library which compiles Markdown to HTML. In affected versions the documentation of remark-html has mentioned that it was safe by default. In practice the default was never safe and had to be opted into. That is, user input was not sanitized. This means arbitrary HTML can be passed through leading to potential XSS attacks. The problem has been patched in 13.0.2 and 14.0.1: `remark-html` is now safe by default, and the implementation matches the documentation. On older affected versions, pass `sanitize: true` if you cannot update.",
    "cve_publish_date": "2021-09-07",
    "cwe_id": "CWE-79",
    "cwe_name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
    "cwe_description": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
    "commit_message": "Fix to sanitize by default\n\nThe docs have always said `remark-html` is safe by default.\nIt wasnâ€™t and this patches that.\n\nIf you do want to be unsafe, use `remark-html` with `sanitize: false`:\n\n```diff\n  -.use(remarkHtml)\n  +.use(remarkHtml, {sanitize: false})\n```",
    "type_of_change": "Modification",
    "filename_of_changes": "index.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "28",
    "number_of_lines_deleted_vulnerable_to_cve": "25",
    "vulnerable_lines": [
        "// Line_Reference 44:   let processor = remark().use(remarkHtml)",
        "// Line_Reference 48:     processor.stringify({type: 'alpha'}),",
        "// Line_Reference 54:     processor.stringify({",
        "// Line_Reference 64:     processor.stringify({",
        "// Line_Reference 78:   processor = remark().use(remarkHtml, {",
        "// Line_Reference 94:     processor.processSync('paragraph text').toString(),",
        "// Line_Reference 99:   processor = remark()",
        "// Line_Reference 109:     .use(remarkHtml)",
        "// Line_Reference 112:     processor.processSync('![hello](example.jpg \"overwritten\")').toString(),",
        "// Line_Reference 117:   processor = remark()",
        "// Line_Reference 125:     .use(remarkHtml)",
        "// Line_Reference 128:     processor.processSync('**Bold!**').toString(),",
        "// Line_Reference 133:   processor = remark()",
        "// Line_Reference 152:     .use(remarkHtml)",
        "// Line_Reference 155:     processor.processSync('`var`').toString(),",
        "// Line_Reference 160:   processor = remark()",
        "// Line_Reference 182:     processor.processSync('`var`').toString(),",
        "// Line_Reference 187:   processor = remark()",
        "// Line_Reference 196:     .use(remarkHtml)",
        "// Line_Reference 199:     processor.processSync('```js\\nvar\\n```\\n').toString(),",
        "// Line_Reference 209:     '<h2>Hello <span>world</span></h2>\\n',",
        "// Line_Reference 210:     'should be `sanitation: false` by default'",
        "// Line_Reference 227:     '<h2>Hello <span>world</span></h2>\\n',",
        "// Line_Reference 297:       .use(remarkHtml)",
        "// Line_Reference 340:       .use(remarkHtml)"
    ]
}
