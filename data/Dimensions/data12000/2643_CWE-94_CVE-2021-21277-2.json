{
    "cve_id": "CVE-2021-21277",
    "cve_description": "angular-expressions is \"angular's nicest part extracted as a standalone module for the browser and node\". In angular-expressions before version 1.1.2 there is a vulnerability which allows Remote Code Execution if you call \"expressions.compile(userControlledInput)\" where \"userControlledInput\" is text that comes from user input. The security of the package could be bypassed by using a more complex payload, using a \".constructor.constructor\" technique. In terms of impact: If running angular-expressions in the browser, an attacker could run any browser script when the application code calls expressions.compile(userControlledInput). If running angular-expressions on the server, an attacker could run any Javascript expression, thus gaining Remote Code Execution. This is fixed in version 1.1.2 of angular-expressions A temporary workaround might be either to disable user-controlled input that will be fed into angular-expressions in your application or allow only following characters in the userControlledInput.",
    "cve_publish_date": "2021-02-01",
    "cwe_id": "CWE-94",
    "cwe_name": "Improper Control of Generation of Code ('Code Injection')",
    "cwe_description": "The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.",
    "commit_message": "Fix Security Vulnerability by using hasOwnProperty defensively",
    "type_of_change": "Modification",
    "filename_of_changes": "parse.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "57",
    "number_of_lines_deleted_vulnerable_to_cve": "44",
    "vulnerable_lines": [
        "// Line_Reference 1697: function angularInit(element, bootstrap) {",
        "// Line_Reference 1698: \tvar appElement,",
        "// Line_Reference 1699: \t\tmodule,",
        "// Line_Reference 1700: \t\tconfig = {};",
        "// Line_Reference 1701: ",
        "// Line_Reference 1702: \t// The element `element` has priority over any other element.",
        "// Line_Reference 1703: \tforEach(ngAttrPrefixes, function (prefix) {",
        "// Line_Reference 1704: \t\tvar name = prefix + \"app\";",
        "// Line_Reference 1705: ",
        "// Line_Reference 1706: \t\tif (!appElement && element.hasAttribute && element.hasAttribute(name)) {",
        "// Line_Reference 1707: \t\t\tappElement = element;",
        "// Line_Reference 1708: \t\t\tmodule = element.getAttribute(name);",
        "// Line_Reference 1709: \t\t}",
        "// Line_Reference 1710: \t});",
        "// Line_Reference 1711: \tforEach(ngAttrPrefixes, function (prefix) {",
        "// Line_Reference 1712: \t\tvar name = prefix + \"app\";",
        "// Line_Reference 1713: \t\tvar candidate;",
        "// Line_Reference 1714: ",
        "// Line_Reference 1715: \t\tif (",
        "// Line_Reference 1716: \t\t\t!appElement &&",
        "// Line_Reference 1717: \t\t\t(candidate = element.querySelector(\"[\" + name.replace(\":\", \"\\\\:\") + \"]\"))",
        "// Line_Reference 1718: \t\t) {",
        "// Line_Reference 1719: \t\t\tappElement = candidate;",
        "// Line_Reference 1720: \t\t\tmodule = candidate.getAttribute(name);",
        "// Line_Reference 1721: \t\t}",
        "// Line_Reference 1722: \t});",
        "// Line_Reference 1723: \tif (appElement) {",
        "// Line_Reference 1724: \t\tif (!isAutoBootstrapAllowed) {",
        "// Line_Reference 1725: \t\t\twindow.console.error(",
        "// Line_Reference 1726: \t\t\t\t\"Angular: disabling automatic bootstrap. <script> protocol indicates \" +",
        "// Line_Reference 1727: \t\t\t\t\t\"an extension, document.location.href does not match.\"",
        "// Line_Reference 1728: \t\t\t);",
        "// Line_Reference 1729: \t\t\treturn;",
        "// Line_Reference 1730: \t\t}",
        "// Line_Reference 1731: \t\tconfig.strictDi = getNgAttribute(appElement, \"strict-di\") !== null;",
        "// Line_Reference 1732: \t\tbootstrap(appElement, module ? [module] : [], config);",
        "// Line_Reference 1733: \t}",
        "// Line_Reference 1734: }",
        "// Line_Reference 3235: \t\t\t\tthis.lazyAssign(intoId, this.computedMember(\"i\", ast.watchId)),",
        "// Line_Reference 3361: \t\t\t\t\t\t\tmember = self.computedMember(left, right);",
        "// Line_Reference 3363: \t\t\t\t\t\t\tmember = self.nonComputedMember(left, ast.property.name);",
        "// Line_Reference 3450: \t\t\t\t\t\t\t\t\t\tx + \".call(\" + [left.context].concat(args).join(\",\") + \")\";",
        "// Line_Reference 3535: \t\t\t\t\t\tself.assign(self.member(intoId, left, property.computed), right);",
        "// Line_Reference 3669: \tcomputedMember: function (left, right) {"
    ]
}
