{
    "cve_id": "CVE-2022-31052",
    "cve_description": "Synapse is an open source home server implementation for the Matrix chat network. In versions prior to 1.61.1 URL previews of some web pages can exhaust the available stack space for the Synapse process due to unbounded recursion. This is sometimes recoverable and leads to an error for the request causing the problem, but in other cases the Synapse process may crash altogether. It is possible to exploit this maliciously, either by malicious users on the homeserver, or by remote users sending URLs that a local user's client may automatically request a URL preview for. Remote users are not able to exploit this directly, because the URL preview endpoint is authenticated. Deployments with `url_preview_enabled: false` set in configuration are not affected. Deployments with `url_preview_enabled: true` set in configuration **are** affected. Deployments with no configuration value set for `url_preview_enabled` are not affected, because the default is `false`. Administrators of homeservers with URL previews enabled are advised to upgrade to v1.61.1 or higher. Users unable to upgrade should set `url_preview_enabled` to false.",
    "cve_publish_date": "2022-06-28",
    "cwe_id": "CWE-674",
    "cwe_name": "Uncontrolled Recursion",
    "cwe_description": "The product does not properly control the amount of recursion that takes place,  consuming excessive resources, such as allocated memory or the program stack.",
    "commit_message": "Merge pull request from GHSA-22p3-qrh9-cx32\n\n* Make _iterate_over_text easier to read by using simple data structures\n\n* Prefer a set of tags to ignore\n\nIn my tests, it's 4x faster to check for containment in a set of this size\n\n* Add a stack size limit to _iterate_over_text\n\n* Continue accepting the case where there is no body element\n\n* Use an early return instead for None\n\nCo-authored-by: Richard van der Hoff <richard@matrix.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "preview_html.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "39",
    "number_of_lines_deleted_vulnerable_to_cve": "24",
    "vulnerable_lines": [
        "// Line_Reference 15: import itertools",
        "// Line_Reference 18: from typing import TYPE_CHECKING, Dict, Generator, Iterable, Optional, Set, Union",
        "// Line_Reference 279:     TAGS_TO_REMOVE = (",
        "// Line_Reference 294:     )",
        "// Line_Reference 300:         for el in _iterate_over_text(tree.find(\"body\"), *TAGS_TO_REMOVE)",
        "// Line_Reference 306:     tree: \"etree.Element\", *tags_to_ignore: Union[str, \"etree.Comment\"]",
        "// Line_Reference 311:     # This is basically a stack that we extend using itertools.chain.",
        "// Line_Reference 312:     # This will either consist of an element to iterate over *or* a string",
        "// Line_Reference 314:     elements = iter([tree])",
        "// Line_Reference 315:     while True:",
        "// Line_Reference 316:         el = next(elements, None)",
        "// Line_Reference 317:         if el is None:",
        "// Line_Reference 318:             return",
        "// Line_Reference 332:             # We add to the stack all the elements children, interspersed with",
        "// Line_Reference 333:             # each child's tail text (if it exists). The tail text of a node",
        "// Line_Reference 334:             # is text that comes *after* the node, so we always include it even",
        "// Line_Reference 335:             # if we ignore the child node.",
        "// Line_Reference 336:             elements = itertools.chain(",
        "// Line_Reference 337:                 itertools.chain.from_iterable(  # Basically a flatmap",
        "// Line_Reference 338:                     [child, child.tail] if child.tail else [child]",
        "// Line_Reference 339:                     for child in el.iterchildren()",
        "// Line_Reference 340:                 ),",
        "// Line_Reference 341:                 elements,",
        "// Line_Reference 342:             )"
    ]
}
