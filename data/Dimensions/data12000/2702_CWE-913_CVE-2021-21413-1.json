{
    "cve_id": "CVE-2021-21413",
    "cve_description": "isolated-vm is a library for nodejs which gives you access to v8's Isolate interface. Versions of isolated-vm before v4.0.0 have API pitfalls which may make it easy for implementers to expose supposed secure isolates to the permissions of the main nodejs isolate. Reference objects allow access to the underlying reference's full prototype chain. In an environment where the implementer has exposed a Reference instance to an attacker they would be able to use it to acquire a Reference to the nodejs context's Function object. Similar application-specific attacks could be possible by modifying the local prototype of other API objects. Access to NativeModule objects could allow an attacker to load and run native code from anywhere on the filesystem. If combined with, for example, a file upload API this would allow for arbitrary code execution. This is addressed in v4.0.0 through a series of related changes.",
    "cve_publish_date": "2021-03-30",
    "cwe_id": "CWE-913",
    "cwe_name": "Improper Control of Dynamically-Managed Code Resources",
    "cwe_description": "The product does not properly restrict reading from or writing to dynamically-managed code resources such as variables, objects, classes, attributes, functions, or executable instructions or statements.",
    "commit_message": "Don't invoke accessors or proxies via Reference functions",
    "type_of_change": "Modification",
    "filename_of_changes": "reference_handle.cc",
    "code_language": "C++",
    "number_of_lines_added_for_mitigation": "112",
    "number_of_lines_deleted_vulnerable_to_cve": "82",
    "vulnerable_lines": [
        "// Line_Reference 130: \tauto inherit = ReadOption<bool>(options, StringTable::Get().inheritUnsafe, false);",
        "// Line_Reference 429:  * Get a property from this reference, returned as another reference",
        "// Line_Reference 431: class GetRunner : public ThreePhaseTask {",
        "// Line_Reference 433: \t\tGetRunner(",
        "// Line_Reference 434: \t\t\tconst ReferenceHandle& that,",
        "// Line_Reference 435: \t\t\tLocal<Value> key_handle,",
        "// Line_Reference 436: \t\t\tMaybeLocal<Object> maybe_options,",
        "// Line_Reference 437: \t\t\tbool inherit",
        "// Line_Reference 438: \t\t) :",
        "// Line_Reference 439: \t\t\t\tcontext{that.context},",
        "// Line_Reference 440: \t\t\t\treference{that.reference},",
        "// Line_Reference 441: \t\t\t\toptions{maybe_options, inherit ?",
        "// Line_Reference 442: \t\t\t\t\tTransferOptions::Type::DeepReference : TransferOptions::Type::Reference},",
        "// Line_Reference 443: \t\t\t\tinherit{inherit} {",
        "// Line_Reference 444: \t\t\tthat.CheckDisposed();",
        "// Line_Reference 445: \t\t\tkey = ExternalCopy::CopyIfPrimitive(key_handle);",
        "// Line_Reference 446: \t\t\tif (!key) {",
        "// Line_Reference 452: \t\t\tLocal<Context> context_handle = Deref(context);",
        "// Line_Reference 453: \t\t\tContext::Scope context_scope{context_handle};",
        "// Line_Reference 454: \t\t\tLocal<Value> key_inner = key->CopyInto();",
        "// Line_Reference 455: \t\t\tLocal<Object> object = Local<Object>::Cast(Deref(reference));",
        "// Line_Reference 456: \t\t\tbool allow = [&]() {",
        "// Line_Reference 457: \t\t\t\tif (!inherit) {",
        "// Line_Reference 458: \t\t\t\t\tif (key_inner->IsName()) {",
        "// Line_Reference 459: \t\t\t\t\t\treturn Unmaybe(object->HasRealNamedProperty(context_handle, key_inner.As<Name>()));",
        "// Line_Reference 460: \t\t\t\t\t} else if (key_inner->IsNumber()) {",
        "// Line_Reference 461: \t\t\t\t\t\treturn Unmaybe(object->HasRealIndexedProperty(context_handle, HandleCast<uint32_t>(key_inner)));",
        "// Line_Reference 462: \t\t\t\t\t} else {",
        "// Line_Reference 463: \t\t\t\t\t\treturn false;",
        "// Line_Reference 464: \t\t\t\t\t}",
        "// Line_Reference 466: \t\t\t\treturn true;",
        "// Line_Reference 467: \t\t\t}();",
        "// Line_Reference 468: \t\t\tLocal<Value> value = allow ?",
        "// Line_Reference 469: \t\t\t\tUnmaybe(object->Get(context_handle, key_inner)) :",
        "// Line_Reference 470: \t\t\t\tUndefined(Isolate::GetCurrent()).As<Value>();",
        "// Line_Reference 471: \t\t\tret = TransferOut(value, options);",
        "// Line_Reference 479: \t\tunique_ptr<ExternalCopy> key;",
        "// Line_Reference 480: \t\tRemoteHandle<Context> context;",
        "// Line_Reference 481: \t\tRemoteHandle<Value> reference;",
        "// Line_Reference 488: \treturn ThreePhaseTask::Run<async, GetRunner>(*isolate, *this, key_handle, maybe_options, inherit);",
        "// Line_Reference 494: class DeleteRunner : public ThreePhaseTask {",
        "// Line_Reference 497: \t\t\t\tkey{ExternalCopy::CopyIfPrimitive(key_handle)},",
        "// Line_Reference 498: \t\t\t\tcontext{that.context},",
        "// Line_Reference 499: \t\t\t\treference{that.reference} {",
        "// Line_Reference 500: \t\t\tthat.CheckDisposed();",
        "// Line_Reference 501: \t\t\tif (!key) {",
        "// Line_Reference 502: \t\t\t\tthrow RuntimeTypeError(\"Invalid `key`\");",
        "// Line_Reference 503: \t\t\t}",
        "// Line_Reference 504: \t\t}",
        "// Line_Reference 507: \t\t\tLocal<Context> context_handle = Deref(context);",
        "// Line_Reference 508: \t\t\tContext::Scope context_scope{context_handle};",
        "// Line_Reference 509: \t\t\tLocal<Object> object = Local<Object>::Cast(Deref(reference));",
        "// Line_Reference 510: \t\t\tresult = Unmaybe(object->Delete(context_handle, key->CopyInto()));",
        "// Line_Reference 514: \t\t\treturn Boolean::New(Isolate::GetCurrent(), result);",
        "// Line_Reference 516: ",
        "// Line_Reference 517: \tprivate:",
        "// Line_Reference 518: \t\tunique_ptr<ExternalCopy> key;",
        "// Line_Reference 519: \t\tRemoteHandle<Context> context;",
        "// Line_Reference 520: \t\tRemoteHandle<Value> reference;",
        "// Line_Reference 521: \t\tbool result = false;",
        "// Line_Reference 531: class SetRunner : public ThreePhaseTask {",
        "// Line_Reference 539: \t\t\t\tkey{ExternalCopy::CopyIfPrimitive(key_handle)},",
        "// Line_Reference 540: \t\t\t\tval{TransferOut(val_handle, TransferOptions{maybe_options})},",
        "// Line_Reference 541: \t\t\t\tcontext{that.context},",
        "// Line_Reference 542: \t\t\t\treference{that.reference} {",
        "// Line_Reference 543: \t\t\tthat.CheckDisposed();",
        "// Line_Reference 544: \t\t\tif (!key) {",
        "// Line_Reference 545: \t\t\t\tthrow RuntimeTypeError(\"Invalid `key`\");",
        "// Line_Reference 546: \t\t\t}",
        "// Line_Reference 547: \t\t}",
        "// Line_Reference 550: \t\t\tLocal<Context> context_handle = Deref(context);",
        "// Line_Reference 551: \t\t\tContext::Scope context_scope{context_handle};",
        "// Line_Reference 552: \t\t\tLocal<Value> key_inner = key->CopyInto();",
        "// Line_Reference 553: \t\t\tLocal<Object> object = Local<Object>::Cast(Deref(reference));",
        "// Line_Reference 555: \t\t\tUnmaybe(object->Delete(context_handle, key_inner));",
        "// Line_Reference 556: \t\t\tLocal<Value> val_inner = val->TransferIn();",
        "// Line_Reference 557: \t\t\tdid_set = Unmaybe(object->Set(context_handle, key_inner, val_inner));",
        "// Line_Reference 561: \t\t\treturn Boolean::New(Isolate::GetCurrent(), did_set);",
        "// Line_Reference 565: \t\tunique_ptr<ExternalCopy> key;",
        "// Line_Reference 567: \t\tRemoteHandle<Context> context;",
        "// Line_Reference 568: \t\tRemoteHandle<Value> reference;",
        "// Line_Reference 569: \t\tbool did_set = false;"
    ]
}
