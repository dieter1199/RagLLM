{
    "cve_id": "CVE-2022-23627",
    "cve_description": "ArchiSteamFarm (ASF) is a C# application with primary purpose of idling Steam cards from multiple accounts simultaneously. Due to a bug in ASF code, introduced in version V5.2.2.2, the program didn't adequately verify effective access of the user sending proxy (i.e. `[Bots]`) commands. In particular, a proxy-like command sent to bot `A` targeting bot `B` has incorrectly verified user's access against bot `A` - instead of bot `B`, to which the command was originally designated. This in result allowed access to resources beyond those configured, being a security threat affecting confidentiality of other bot instances. A successful attack exploiting this bug requires a significant access granted explicitly by original owner of the ASF process prior to that, as attacker has to control at least a single bot in the process to make use of this inadequate access verification loophole. The issue is patched in ASF V5.2.2.5, V5.2.3.2 and future versions. Users are advised to update as soon as possible.",
    "cve_publish_date": "2022-02-08",
    "cwe_id": "CWE-863",
    "cwe_name": "Incorrect Authorization",
    "cwe_description": "The product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. This allows attackers to bypass intended access restrictions.",
    "commit_message": "Fix permissions when proxifying commands (#2509)\n\n* Fix permissions when proxifying commands\r\n\r\n* Version bump",
    "type_of_change": "Modification",
    "filename_of_changes": "Commands.cs",
    "code_language": "C#",
    "number_of_lines_added_for_mitigation": "153",
    "number_of_lines_deleted_vulnerable_to_cve": "130",
    "vulnerable_lines": [
        "// Line_Reference 140: \t\t\t\t\t\treturn await ResponseStatus(access, SharedInfo.ASF).ConfigureAwait(false);",
        "// Line_Reference 165: \t\t\t\t\t\treturn await Response2FA(access, Utilities.GetArgsAsText(args, 1, \",\")).ConfigureAwait(false);",
        "// Line_Reference 167: \t\t\t\t\t\treturn await Response2FAConfirm(access, Utilities.GetArgsAsText(args, 1, \",\"), false).ConfigureAwait(false);",
        "// Line_Reference 169: \t\t\t\t\t\treturn await Response2FAConfirm(access, Utilities.GetArgsAsText(args, 1, \",\"), true).ConfigureAwait(false);",
        "// Line_Reference 171: \t\t\t\t\t\treturn await ResponseAddLicense(access, args[1], Utilities.GetArgsAsText(args, 2, \",\")).ConfigureAwait(false);",
        "// Line_Reference 175: \t\t\t\t\t\treturn await ResponseWalletBalance(access, Utilities.GetArgsAsText(args, 1, \",\")).ConfigureAwait(false);",
        "// Line_Reference 177: \t\t\t\t\t\treturn await ResponseBackgroundGamesRedeemer(access, Utilities.GetArgsAsText(args, 1, \",\")).ConfigureAwait(false);",
        "// Line_Reference 181: \t\t\t\t\t\treturn await ResponseFarm(access, Utilities.GetArgsAsText(args, 1, \",\")).ConfigureAwait(false);",
        "// Line_Reference 183: \t\t\t\t\t\treturn await ResponseFarmingBlacklist(access, Utilities.GetArgsAsText(args, 1, \",\")).ConfigureAwait(false);",
        "// Line_Reference 185: \t\t\t\t\t\treturn await ResponseFarmingBlacklistAdd(access, args[1], Utilities.GetArgsAsText(args, 2, \",\")).ConfigureAwait(false);",
        "// Line_Reference 189: \t\t\t\t\t\treturn await ResponseFarmingBlacklistRemove(access, args[1], Utilities.GetArgsAsText(args, 2, \",\")).ConfigureAwait(false);",
        "// Line_Reference 193: \t\t\t\t\t\treturn await ResponseFarmingQueue(access, Utilities.GetArgsAsText(args, 1, \",\")).ConfigureAwait(false);",
        "// Line_Reference 195: \t\t\t\t\t\treturn await ResponseFarmingQueueAdd(access, args[1], Utilities.GetArgsAsText(args, 2, \",\")).ConfigureAwait(false);",
        "// Line_Reference 199: \t\t\t\t\t\treturn await ResponseFarmingQueueRemove(access, args[1], Utilities.GetArgsAsText(args, 2, \",\")).ConfigureAwait(false);",
        "// Line_Reference 205: \t\t\t\t\t\treturn await ResponseInput(access, args[1], args[2], Utilities.GetArgsAsText(message, 3)).ConfigureAwait(false);",
        "// Line_Reference 209: \t\t\t\t\t\treturn await ResponseLevel(access, Utilities.GetArgsAsText(args, 1, \",\")).ConfigureAwait(false);",
        "// Line_Reference 211: \t\t\t\t\t\treturn await ResponseLoot(access, Utilities.GetArgsAsText(args, 1, \",\")).ConfigureAwait(false);",
        "// Line_Reference 213: \t\t\t\t\t\treturn await ResponseAdvancedLoot(access, args[1], args[2], Utilities.GetArgsAsText(message, 3)).ConfigureAwait(false);",
        "// Line_Reference 217: \t\t\t\t\t\treturn await ResponseLootByRealAppIDs(access, args[1], Utilities.GetArgsAsText(args, 2, \",\")).ConfigureAwait(false);",
        "// Line_Reference 219: \t\t\t\t\t\treturn await ResponseLootByRealAppIDs(access, args[1]).ConfigureAwait(false);",
        "// Line_Reference 221: \t\t\t\t\t\treturn await ResponseLootByRealAppIDs(access, args[1], Utilities.GetArgsAsText(args, 2, \",\"), true).ConfigureAwait(false);",
        "// Line_Reference 225: \t\t\t\t\t\treturn await ResponseMatchActivelyBlacklist(access, Utilities.GetArgsAsText(args, 1, \",\")).ConfigureAwait(false);",
        "// Line_Reference 227: \t\t\t\t\t\treturn await ResponseMatchActivelyBlacklistAdd(access, args[1], Utilities.GetArgsAsText(args, 2, \",\")).ConfigureAwait(false);",
        "// Line_Reference 231: \t\t\t\t\t\treturn await ResponseMatchActivelyBlacklistRemove(access, args[1], Utilities.GetArgsAsText(args, 2, \",\")).ConfigureAwait(false);",
        "// Line_Reference 235: \t\t\t\t\t\treturn await ResponseNickname(access, args[1], Utilities.GetArgsAsText(message, 2)).ConfigureAwait(false);",
        "// Line_Reference 239: \t\t\t\t\t\treturn await ResponseOwns(access, SharedInfo.ASF, Utilities.GetArgsAsText(message, 1)).ConfigureAwait(false);",
        "// Line_Reference 241: \t\t\t\t\t\treturn await ResponseOwns(access, args[1], Utilities.GetArgsAsText(message, 2)).ConfigureAwait(false);",
        "// Line_Reference 245: \t\t\t\t\t\treturn await ResponsePause(access, Utilities.GetArgsAsText(args, 1, \",\"), true).ConfigureAwait(false);",
        "// Line_Reference 247: \t\t\t\t\t\treturn await ResponsePause(access, Utilities.GetArgsAsText(args, 1, \",\"), false).ConfigureAwait(false);",
        "// Line_Reference 249: \t\t\t\t\t\treturn await ResponsePause(access, args[1], true, Utilities.GetArgsAsText(message, 2)).ConfigureAwait(false);",
        "// Line_Reference 253: \t\t\t\t\t\treturn await ResponsePlay(access, args[1], Utilities.GetArgsAsText(message, 2)).ConfigureAwait(false);",
        "// Line_Reference 257: \t\t\t\t\t\treturn await ResponsePointsBalance(access, Utilities.GetArgsAsText(args, 1, \",\")).ConfigureAwait(false);",
        "// Line_Reference 259: \t\t\t\t\t\treturn await ResponsePrivacy(access, args[1], Utilities.GetArgsAsText(args, 2, \",\")).ConfigureAwait(false);",
        "// Line_Reference 264: \t\t\t\t\t\treturn await ResponseRedeem(access, args[1], Utilities.GetArgsAsText(args, 2, \",\"), steamID).ConfigureAwait(false);",
        "// Line_Reference 275: \t\t\t\t\t\treturn await ResponseReset(access, Utilities.GetArgsAsText(args, 1, \",\")).ConfigureAwait(false);",
        "// Line_Reference 277: \t\t\t\t\t\treturn await ResponseResume(access, Utilities.GetArgsAsText(args, 1, \",\")).ConfigureAwait(false);",
        "// Line_Reference 279: \t\t\t\t\t\treturn await ResponseStart(access, Utilities.GetArgsAsText(args, 1, \",\")).ConfigureAwait(false);",
        "// Line_Reference 281: \t\t\t\t\t\treturn await ResponseStatus(access, Utilities.GetArgsAsText(args, 1, \",\")).ConfigureAwait(false);",
        "// Line_Reference 283: \t\t\t\t\t\treturn await ResponseStop(access, Utilities.GetArgsAsText(args, 1, \",\")).ConfigureAwait(false);",
        "// Line_Reference 285: \t\t\t\t\t\treturn await ResponseTradingBlacklist(access, Utilities.GetArgsAsText(args, 1, \",\")).ConfigureAwait(false);",
        "// Line_Reference 287: \t\t\t\t\t\treturn await ResponseTradingBlacklistAdd(access, args[1], Utilities.GetArgsAsText(args, 2, \",\")).ConfigureAwait(false);",
        "// Line_Reference 291: \t\t\t\t\t\treturn await ResponseTradingBlacklistRemove(access, args[1], Utilities.GetArgsAsText(args, 2, \",\")).ConfigureAwait(false);",
        "// Line_Reference 295: \t\t\t\t\t\treturn await ResponseTransfer(access, args[1], Utilities.GetArgsAsText(message, 2)).ConfigureAwait(false);",
        "// Line_Reference 299: \t\t\t\t\t\treturn await ResponseAdvancedTransfer(access, args[1], args[2], args[3], Utilities.GetArgsAsText(message, 4)).ConfigureAwait(false);",
        "// Line_Reference 303: \t\t\t\t\t\treturn await ResponseTransferByRealAppIDs(access, args[1], args[2], Utilities.GetArgsAsText(message, 3)).ConfigureAwait(false);",
        "// Line_Reference 305: \t\t\t\t\t\treturn await ResponseTransferByRealAppIDs(access, args[1], args[2]).ConfigureAwait(false);",
        "// Line_Reference 307: \t\t\t\t\t\treturn await ResponseTransferByRealAppIDs(access, args[1], args[2], Utilities.GetArgsAsText(message, 3), true).ConfigureAwait(false);",
        "// Line_Reference 311: \t\t\t\t\t\treturn await ResponseUnpackBoosters(access, Utilities.GetArgsAsText(args, 1, \",\")).ConfigureAwait(false);",
        "// Line_Reference 521: \tprivate static async Task<string?> Response2FA(EAccess access, string botNames) {",
        "// Line_Reference 536: \t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.Response2FA(access))).ConfigureAwait(false);",
        "// Line_Reference 565: \tprivate static async Task<string?> Response2FAConfirm(EAccess access, string botNames, bool confirm) {",
        "// Line_Reference 580: \t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.Response2FAConfirm(access, confirm))).ConfigureAwait(false);",
        "// Line_Reference 659: \tprivate static async Task<string?> ResponseAddLicense(EAccess access, string botNames, string query) {",
        "// Line_Reference 678: \t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseAddLicense(access, query))).ConfigureAwait(false);",
        "// Line_Reference 719: \tprivate static async Task<string?> ResponseAdvancedLoot(EAccess access, string botNames, string appID, string contextID) {",
        "// Line_Reference 742: \t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseAdvancedLoot(access, appID, contextID))).ConfigureAwait(false);",
        "// Line_Reference 857: \t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseAdvancedRedeem(access, options, keys, steamID))).ConfigureAwait(false);",
        "// Line_Reference 930: \tprivate static async Task<string?> ResponseAdvancedTransfer(EAccess access, string botNames, string targetAppID, string targetContextID, string botNameTo) {",
        "// Line_Reference 971: \t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseAdvancedTransfer(access, appID, contextID, targetBot))).ConfigureAwait(false);",
        "// Line_Reference 992: \tprivate static async Task<string?> ResponseBackgroundGamesRedeemer(EAccess access, string botNames) {",
        "// Line_Reference 1007: \t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseBackgroundGamesRedeemer(access)))).ConfigureAwait(false);",
        "// Line_Reference 1076: \tprivate static async Task<string?> ResponseFarm(EAccess access, string botNames) {",
        "// Line_Reference 1091: \t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseFarm(access))).ConfigureAwait(false);",
        "// Line_Reference 1106: \tprivate static async Task<string?> ResponseFarmingBlacklist(EAccess access, string botNames) {",
        "// Line_Reference 1121: \t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseFarmingBlacklist(access)))).ConfigureAwait(false);",
        "// Line_Reference 1173: \tprivate static async Task<string?> ResponseFarmingBlacklistAdd(EAccess access, string botNames, string targetAppIDs) {",
        "// Line_Reference 1192: \t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseFarmingBlacklistAdd(access, targetAppIDs)))).ConfigureAwait(false);",
        "// Line_Reference 1239: \tprivate static async Task<string?> ResponseFarmingBlacklistRemove(EAccess access, string botNames, string targetAppIDs) {",
        "// Line_Reference 1258: \t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseFarmingBlacklistRemove(access, targetAppIDs)))).ConfigureAwait(false);",
        "// Line_Reference 1273: \tprivate static async Task<string?> ResponseFarmingQueue(EAccess access, string botNames) {",
        "// Line_Reference 1288: \t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseFarmingQueue(access)))).ConfigureAwait(false);",
        "// Line_Reference 1347: \tprivate static async Task<string?> ResponseFarmingQueueAdd(EAccess access, string botNames, string targetAppIDs) {",
        "// Line_Reference 1366: \t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseFarmingQueueAdd(access, targetAppIDs)))).ConfigureAwait(false);",
        "// Line_Reference 1418: \tprivate static async Task<string?> ResponseFarmingQueueRemove(EAccess access, string botNames, string targetAppIDs) {",
        "// Line_Reference 1437: \t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseFarmingQueueRemove(access, targetAppIDs)))).ConfigureAwait(false);",
        "// Line_Reference 1510: \tprivate static async Task<string?> ResponseInput(EAccess access, string botNames, string propertyName, string inputValue) {",
        "// Line_Reference 1533: \t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseInput(access, propertyName, inputValue)))).ConfigureAwait(false);",
        "// Line_Reference 1558: \tprivate static async Task<string?> ResponseLevel(EAccess access, string botNames) {",
        "// Line_Reference 1573: \t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseLevel(access))).ConfigureAwait(false);",
        "// Line_Reference 1602: \tprivate static async Task<string?> ResponseLoot(EAccess access, string botNames) {",
        "// Line_Reference 1617: \t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseLoot(access))).ConfigureAwait(false);",
        "// Line_Reference 1624: \tprivate async Task<string?> ResponseLootByRealAppIDs(EAccess access, string realAppIDsText, bool exclude = false) {",
        "// Line_Reference 1666: \tprivate static async Task<string?> ResponseLootByRealAppIDs(EAccess access, string botNames, string realAppIDsText, bool exclude = false) {",
        "// Line_Reference 1685: \t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseLootByRealAppIDs(access, realAppIDsText, exclude))).ConfigureAwait(false);",
        "// Line_Reference 1700: \tprivate static async Task<string?> ResponseMatchActivelyBlacklist(EAccess access, string botNames) {",
        "// Line_Reference 1715: \t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseMatchActivelyBlacklist(access)))).ConfigureAwait(false);",
        "// Line_Reference 1754: \tprivate static async Task<string?> ResponseMatchActivelyBlacklistAdd(EAccess access, string botNames, string targetAppIDs) {",
        "// Line_Reference 1773: \t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseMatchActivelyBlacklistAdd(access, targetAppIDs)))).ConfigureAwait(false);",
        "// Line_Reference 1812: \tprivate static async Task<string?> ResponseMatchActivelyBlacklistRemove(EAccess access, string botNames, string targetAppIDs) {",
        "// Line_Reference 1831: \t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseMatchActivelyBlacklistRemove(access, targetAppIDs)))).ConfigureAwait(false);",
        "// Line_Reference 1860: \tprivate static async Task<string?> ResponseNickname(EAccess access, string botNames, string nickname) {",
        "// Line_Reference 1879: \t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseNickname(access, nickname)))).ConfigureAwait(false);",
        "// Line_Reference 2038: \tprivate static async Task<string?> ResponseOwns(EAccess access, string botNames, string query) {",
        "// Line_Reference 2057: \t\tIList<(string? Response, Dictionary<string, string>? OwnedGames)> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseOwns(access, query))).ConfigureAwait(false);",
        "// Line_Reference 2110: \tprivate static async Task<string?> ResponsePause(EAccess access, string botNames, bool permanent, string? resumeInSecondsText = null) {",
        "// Line_Reference 2125: \t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponsePause(access, permanent, resumeInSecondsText))).ConfigureAwait(false);",
        "// Line_Reference 2203: \tprivate static async Task<string?> ResponsePlay(EAccess access, string botNames, string targetGameIDs) {",
        "// Line_Reference 2222: \t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponsePlay(access, targetGameIDs))).ConfigureAwait(false);",
        "// Line_Reference 2247: \tprivate static async Task<string?> ResponsePointsBalance(EAccess access, string botNames) {",
        "// Line_Reference 2262: \t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponsePointsBalance(access))).ConfigureAwait(false);",
        "// Line_Reference 2403: \tprivate static async Task<string?> ResponsePrivacy(EAccess access, string botNames, string privacySettingsText) {",
        "// Line_Reference 2422: \t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponsePrivacy(access, privacySettingsText))).ConfigureAwait(false);",
        "// Line_Reference 2688: \tprivate static async Task<string?> ResponseRedeem(EAccess access, string botNames, string keysText, ulong steamID = 0, ERedeemFlags redeemFlags = ERedeemFlags.None) {",
        "// Line_Reference 2707: \t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseRedeem(access, keysText, steamID, redeemFlags))).ConfigureAwait(false);",
        "// Line_Reference 2732: \tprivate static async Task<string?> ResponseReset(EAccess access, string botNames) {",
        "// Line_Reference 2747: \t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseReset(access))).ConfigureAwait(false);",
        "// Line_Reference 2782: \tprivate static async Task<string?> ResponseResume(EAccess access, string botNames) {",
        "// Line_Reference 2797: \t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseResume(access)))).ConfigureAwait(false);",
        "// Line_Reference 2818: \tprivate static async Task<string?> ResponseStart(EAccess access, string botNames) {",
        "// Line_Reference 2833: \t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseStart(access)))).ConfigureAwait(false);",
        "// Line_Reference 2897: \tprivate static async Task<string?> ResponseStatus(EAccess access, string botNames) {",
        "// Line_Reference 2912: \t\tIList<(string? Response, Bot Bot)> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseStatus(access)))).ConfigureAwait(false);",
        "// Line_Reference 2941: \tprivate static async Task<string?> ResponseStop(EAccess access, string botNames) {",
        "// Line_Reference 2956: \t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseStop(access)))).ConfigureAwait(false);",
        "// Line_Reference 2971: \tprivate static async Task<string?> ResponseTradingBlacklist(EAccess access, string botNames) {",
        "// Line_Reference 2986: \t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseTradingBlacklist(access)))).ConfigureAwait(false);",
        "// Line_Reference 3025: \tprivate static async Task<string?> ResponseTradingBlacklistAdd(EAccess access, string botNames, string targetSteamIDs) {",
        "// Line_Reference 3044: \t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseTradingBlacklistAdd(access, targetSteamIDs)))).ConfigureAwait(false);",
        "// Line_Reference 3083: \tprivate static async Task<string?> ResponseTradingBlacklistRemove(EAccess access, string botNames, string targetSteamIDs) {",
        "// Line_Reference 3102: \t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseTradingBlacklistRemove(access, targetSteamIDs)))).ConfigureAwait(false);",
        "// Line_Reference 3149: \tprivate static async Task<string?> ResponseTransfer(EAccess access, string botNames, string botNameTo) {",
        "// Line_Reference 3168: \t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseTransfer(access, botNameTo))).ConfigureAwait(false);",
        "// Line_Reference 3175: \tprivate async Task<string?> ResponseTransferByRealAppIDs(EAccess access, IReadOnlyCollection<uint> realAppIDs, Bot targetBot, bool exclude = false) {",
        "// Line_Reference 3211: \tprivate async Task<string?> ResponseTransferByRealAppIDs(EAccess access, string realAppIDsText, string botNameTo, bool exclude = false) {",
        "// Line_Reference 3253: \tprivate static async Task<string?> ResponseTransferByRealAppIDs(EAccess access, string botNames, string realAppIDsText, string botNameTo, bool exclude = false) {",
        "// Line_Reference 3298: \t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseTransferByRealAppIDs(access, realAppIDs, targetBot, exclude))).ConfigureAwait(false);",
        "// Line_Reference 3349: \tprivate static async Task<string?> ResponseUnpackBoosters(EAccess access, string botNames) {",
        "// Line_Reference 3364: \t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => bot.Commands.ResponseUnpackBoosters(access))).ConfigureAwait(false);",
        "// Line_Reference 3405: \tprivate static async Task<string?> ResponseWalletBalance(EAccess access, string botNames) {",
        "// Line_Reference 3420: \t\tIList<string?> results = await Utilities.InParallel(bots.Select(bot => Task.Run(() => bot.Commands.ResponseWalletBalance(access)))).ConfigureAwait(false);"
    ]
}
