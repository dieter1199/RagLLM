import io.netty.buffer.{ByteBufInputStream, ByteBufOutputStream}
import java.io.{ObjectInputStream, ObjectOutputStream}
private def encodeMsg[M <: Message](m: Message, p: PacketBuffer): Unit = {
val writer = new ObjectOutputStream(new ByteBufOutputStream(p))
writer.writeObject(m)
}
private def decodeMsg[M <: Message](p: PacketBuffer): M = {
val reader = new ObjectInputStream(new ByteBufInputStream(p))
reader.readObject().asInstanceOf[M]
def regServerHandler[M <: Message](id: Int, cls: Class[M])(handler: (M, NetworkEvent.Context) => Unit): Unit = {
channel.registerMessage[M](id, cls, (m, p) => encodeMsg[M](m, p), m => decodeMsg(m),
def regServerContainerHandler[M <: Message, C <: Container](id: Int, cls: Class[M], cont: Class[C])(handler: (M, C, NetworkEvent.Context) => Unit): Unit = {
regServerHandler(id, cls) { (msg, ctx) =>
def regClientHandler[M <: Message](id: Int, cls: Class[M])(handler: M => Unit): Unit = {
channel.registerMessage[M](id, cls, (m, p) => encodeMsg[M](m, p), m => decodeMsg(m),
