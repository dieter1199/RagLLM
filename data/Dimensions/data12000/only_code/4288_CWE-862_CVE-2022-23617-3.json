import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import com.xpn.xwiki.test.MockitoOldcoreRule;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
public class CreateActionTest
@Rule
public MockitoOldcoreRule oldcore = new MockitoOldcoreRule();
@Before
public void setUp() throws Exception
context = oldcore.getXWikiContext();
Utils.setComponentManager(oldcore.getMocker());
oldcore.getMocker().registerMockComponent((Type) QueryManager.class, "secure");
mockTemplateProvidersQuery = mock(Query.class);
when(mockSecureQueryManager.createQuery(any(), any())).thenReturn(mockTemplateProvidersQuery);
when(mockTemplateProvidersQuery.execute()).thenReturn(Collections.emptyList());
when(oldcore.getMockContextualAuthorizationManager().hasAccess(any(Right.class), any(EntityReference.class)))
.thenReturn(true);
oldcore.getMocker().registerMockComponent(DocumentReference.TYPE_PROVIDER);
mockURLFactory = mock(XWikiURLFactory.class);
context.setURLFactory(mockURLFactory);
action = new CreateAction();
mockRequest = mock(XWikiRequest.class);
context.setRequest(mockRequest);
mockResponse = mock(XWikiResponse.class);
context.setResponse(mockResponse);
when(mockRequest.get("type")).thenReturn("plain");
public void newDocumentFromURL() throws Exception
public void newDocumentButNonTerminalFromURL() throws Exception
public void newDocumentFromURLWhenNoType() throws Exception
public void newDocumentWebHomeTopLevelFromURL() throws Exception
public void newDocumentWebHomeFromURL() throws Exception
public void newDocumentWebHomeButTerminalFromURL() throws Exception
public void newDocumentWebHomeTopLevelSpaceButTerminalFromURL() throws Exception
verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(),
any(), any(XWikiContext.class));
public void existingDocumentFromUINoName() throws Exception
verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(),
any(), any(XWikiContext.class));
public void existingDocumentFromUI() throws Exception
public void existingDocumentFromUICheckEscaping() throws Exception
public void existingDocumentTerminalFromUI() throws Exception
public void existingDocumentTerminalFromUICheckEscaping() throws Exception
public void existingDocumentTerminalFromUIButAlreadyExisting() throws Exception
verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(),
any(), any(XWikiContext.class));
public void notExistingDocumentFromUIButNameTooLong() throws Exception
verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(),
any(), any(XWikiContext.class));
public void notExistingDocumentFromUIButSpaceTooLong() throws Exception
verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(),
any(), any(XWikiContext.class));
public void existingDocumentFromUITopLevelDocument() throws Exception
public void existingDocumentFromUIDeprecated() throws Exception
public void existingDocumentFromUIDeprecatedCheckEscaping() throws Exception
public void existingDocumentNonTerminalFromUIDeprecated() throws Exception
public void existingDocumentNonTerminalFromUIDeprecatedIgnoringPage() throws Exception
public void existingDocumentNonTerminalFromUIDeprecatedCheckEscaping() throws Exception
public void existingDocumentFromUITemplateProviderExistingButNoneSelected() throws Exception
new DocumentReference("xwiki", Arrays.asList("XWiki"), "MyTemplateProvider"), Collections.EMPTY_LIST);
verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(),
any(), any(XWikiContext.class));
public void existingDocumentFromUITemplateProviderSpecified() throws Exception
new DocumentReference("xwiki", Arrays.asList("XWiki"), "MyTemplateProvider"), Collections.EMPTY_LIST);
public void existingDocumentFromUITemplateProviderSpecifiedRestrictionExists() throws Exception
public void existingDocumentFromUITemplateProviderSpecifiedRestrictionExistsOnParentSpace() throws Exception
public void existingDocumentFromUITemplateProviderSpecifiedButNotAllowed() throws Exception
verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(),
any(), any(XWikiContext.class));
public void newDocumentFromURLTemplateProviderSpecifiedButNotAllowed() throws Exception
verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(),
any(), any(XWikiContext.class));
public void newDocumentWebHomeFromURLTemplateProviderSpecifiedButNotAllowed() throws Exception
verify(mockURLFactory, never()).createURL(any(), any(), any(), any(), any(),
any(), any(XWikiContext.class));
public void newDocumentWebHomeFromURLTemplateProviderSpecifiedTerminal() throws Exception
new DocumentReference("xwiki", Arrays.asList("XWiki"), "MyTemplateProvider"), Collections.EMPTY_LIST, true);
public void newDocumentWebHomeFromURLTemplateProviderSpecifiedTerminalOverriddenFromUIToNonTerminal()
throws Exception
new DocumentReference("xwiki", Arrays.asList("XWiki"), "MyTemplateProvider"), Collections.EMPTY_LIST, true);
public void newDocumentFromURLTemplateProviderSpecifiedNonTerminal() throws Exception
new DocumentReference("xwiki", Arrays.asList("XWiki"), "MyTemplateProvider"), Collections.EMPTY_LIST,
public void newDocumentFromURLTemplateProviderSpecifiedNonTerminalButOverriddenFromUITerminal() throws Exception
new DocumentReference("xwiki", Arrays.asList("XWiki"), "MyTemplateProvider"), Collections.EMPTY_LIST,
public void existingDocumentFromUITemplateSpecified() throws Exception
public void existingDocumentFromUITemplateProviderSpecifiedTerminal() throws Exception
new DocumentReference("xwiki", Arrays.asList("XWiki"), "MyTemplateProvider"), Collections.EMPTY_LIST, true);
public void existingDocumentFromUITemplateProviderSpecifiedTerminalOverridenFromUIToNonTerminal() throws Exception
new DocumentReference("xwiki", Arrays.asList("XWiki"), "MyTemplateProvider"), Collections.EMPTY_LIST, true);
public void existingDocumentFromUITemplateProviderSpecifiedNonTerminal() throws Exception
new DocumentReference("xwiki", Arrays.asList("XWiki"), "MyTemplateProvider"), Collections.EMPTY_LIST,
public void existingDocumentFromUITemplateProviderSpecifiedNonTerminalOverridenFromUIToTerminal() throws Exception
new DocumentReference("xwiki", Arrays.asList("XWiki"), "MyTemplateProvider"), Collections.EMPTY_LIST,
public void newDocumentWebHomeFromURLTemplateProviderSpecifiedButOldPageType() throws Exception
new DocumentReference("xwiki", Arrays.asList("XWiki"), "MyTemplateProvider"), Collections.EMPTY_LIST, null,
public void newDocumentWebHomeFromURLTemplateProviderSpecifiedButOldPageTypeButOverriddenFromUIToNonTerminal()
new DocumentReference("xwiki", Arrays.asList("XWiki"), "MyTemplateProvider"), Collections.EMPTY_LIST, null,
public void existingDocumentFromUITemplateProviderSpecifiedButOldSpaceType() throws Exception
new DocumentReference("xwiki", Arrays.asList("XWiki"), "MyTemplateProvider"), Collections.EMPTY_LIST, null,
public void existingDocumentFromUITemplateProviderSpecifiedButOldSpaceTypeButOverridenFromUIToTerminal()
throws Exception
new DocumentReference("xwiki", Arrays.asList("XWiki"), "MyTemplateProvider"), Collections.EMPTY_LIST, null,
public void newDocumentWebHomeFromURLTemplateProviderSpecifiedWithSaveAndEdit() throws Exception
when(mockRequest.getParameter("spaceReference")).thenReturn("X");
when(mockRequest.getParameter("name")).thenReturn("Y");
when(mockRequest.getParameter("title")).thenReturn("Yippee");
when(mockRequest.getParameter("templateprovider")).thenReturn(templateProviderFullName);
