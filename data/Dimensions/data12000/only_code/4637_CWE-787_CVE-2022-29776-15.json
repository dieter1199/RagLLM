for (i=0; i < p->colors; i++)		/* Multiply out XYZ colorspace */
for (i=0; i < p->colors; i++) {		/* Normalize cam_rgb so that */
dcr_pseudoinverse (cam_rgb, inverse, p->colors);
p->tiff_ifd[i].width * p->tiff_ifd[i].height / SQR(p->tiff_ifd[i].bps+1) >
(int)(p->thumb_width *       p->thumb_height / SQR(p->thumb_misc+1))) {
end = dcr_ftell(p->obj_) + size;
