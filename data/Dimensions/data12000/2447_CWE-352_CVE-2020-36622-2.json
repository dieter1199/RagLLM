{
    "cve_id": "CVE-2020-36622",
    "cve_description": "A vulnerability was found in sah-comp bienlein and classified as problematic. This issue affects some unknown processing. The manipulation leads to cross-site request forgery. The attack may be initiated remotely. The name of the patch is d7836a4f2b241e4745ede194f0f6fb47199cab6b. It is recommended to apply a patch to fix this issue. The identifier VDB-216473 was assigned to this vulnerability.",
    "cve_publish_date": "2022-12-21",
    "cwe_id": "CWE-352",
    "cwe_name": "Cross-Site Request Forgery (CSRF)",
    "cwe_description": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",
    "commit_message": "Added CSRF prevention",
    "type_of_change": "Modification",
    "filename_of_changes": "Criteria.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "174",
    "number_of_lines_deleted_vulnerable_to_cve": "159",
    "vulnerable_lines": [
        "// Line_Reference 26:  \t\t'like' => '%1$s like ?',",
        "// Line_Reference 27:  \t\t'notlike' => '%1$s not like ?',",
        "// Line_Reference 28:  \t\t'eq' => '%1$s = ?',",
        "// Line_Reference 29:  \t\t'neq' => '%1$s != ?',",
        "// Line_Reference 30:  \t\t'bw' => '%1$s like ?',",
        "// Line_Reference 31:  \t\t'ew' => '%1$s like ?',",
        "// Line_Reference 32:  \t\t'lt' => '%1$s < ?',",
        "// Line_Reference 33:  \t\t'gt' => '%1$s > ?',",
        "// Line_Reference 34:  \t    'in' => '%1$s in (%2$s)'",
        "// Line_Reference 35:  \t\t//'between' => __('filter_op_between'),",
        "// Line_Reference 36:  \t\t//'istrue' => __('filter_op_istrue'),",
        "// Line_Reference 37:  \t\t//'isfalse' => __('filter_op_isfalse')",
        "// Line_Reference 38:  \t);",
        "// Line_Reference 61:      /**",
        "// Line_Reference 62:       * Container for characters that have to be escaped for usage with SQL.",
        "// Line_Reference 63:       *",
        "// Line_Reference 64:       * @var array",
        "// Line_Reference 65:       */",
        "// Line_Reference 66:      public $pat = array('%', '_');",
        "// Line_Reference 67: ",
        "// Line_Reference 68:      /**",
        "// Line_Reference 69:       * Container for escaped charaters.",
        "// Line_Reference 70:       *",
        "// Line_Reference 71:       * @var array",
        "// Line_Reference 72:       */",
        "// Line_Reference 73:      public $rep = array('\\%', '\\_');",
        "// Line_Reference 74: ",
        "// Line_Reference 75:      /**",
        "// Line_Reference 76:       * Prepares a value according to its tag and returns it.",
        "// Line_Reference 77:       *",
        "// Line_Reference 78:       * @param string the value to convert",
        "// Line_Reference 79:       * @return mixed",
        "// Line_Reference 80:       */",
        "// Line_Reference 81:      public function convertToText($value)",
        "// Line_Reference 82:      {",
        "// Line_Reference 83:          return $value;",
        "// Line_Reference 84:      }",
        "// Line_Reference 85: ",
        "// Line_Reference 86:      /**",
        "// Line_Reference 87:       * Prepares a value according to its tag and returns it.",
        "// Line_Reference 88:       *",
        "// Line_Reference 89:       * @param string the value to convert",
        "// Line_Reference 90:       * @return mixed",
        "// Line_Reference 91:       */",
        "// Line_Reference 92:      public function convertToNumber($value)",
        "// Line_Reference 93:      {",
        "// Line_Reference 94:          return (float)str_replace(',', '.', $value);",
        "// Line_Reference 95:          //return $value;",
        "// Line_Reference 96:      }",
        "// Line_Reference 97: ",
        "// Line_Reference 98:      /**",
        "// Line_Reference 99:       * Prepares a value according to its tag and returns it.",
        "// Line_Reference 100:       *",
        "// Line_Reference 101:       * @param string the value to convert",
        "// Line_Reference 102:       * @return mixed",
        "// Line_Reference 103:       */",
        "// Line_Reference 104:      public function convertToEmail($value)",
        "// Line_Reference 105:      {",
        "// Line_Reference 106:          return $value;",
        "// Line_Reference 107:      }",
        "// Line_Reference 108: ",
        "// Line_Reference 109:      /**",
        "// Line_Reference 110:       * Prepares a value according to its tag and returns it.",
        "// Line_Reference 111:       *",
        "// Line_Reference 112:       * @param string the value to convert",
        "// Line_Reference 113:       * @return mixed",
        "// Line_Reference 114:       */",
        "// Line_Reference 115:      public function convertToTextarea($value)",
        "// Line_Reference 116:      {",
        "// Line_Reference 117:          return $value;",
        "// Line_Reference 118:      }",
        "// Line_Reference 119: ",
        "// Line_Reference 120:      /**",
        "// Line_Reference 121:       * Prepares a value according to its tag and returns it.",
        "// Line_Reference 122:       *",
        "// Line_Reference 123:       * @param string the value to convert",
        "// Line_Reference 124:       * @return mixed",
        "// Line_Reference 125:       */",
        "// Line_Reference 126:      public function convertToIn($value)",
        "// Line_Reference 127:      {",
        "// Line_Reference 128:          return $value;",
        "// Line_Reference 129:      }",
        "// Line_Reference 130: ",
        "// Line_Reference 131:      /**",
        "// Line_Reference 132:       * Prepares a value according to its tag and returns it.",
        "// Line_Reference 133:       *",
        "// Line_Reference 134:       * @param string the value to convert",
        "// Line_Reference 135:       * @return mixed",
        "// Line_Reference 136:       */",
        "// Line_Reference 137:      public function convertToBool($value)",
        "// Line_Reference 138:      {",
        "// Line_Reference 139:          return $value;",
        "// Line_Reference 140:      }",
        "// Line_Reference 141: ",
        "// Line_Reference 142:      /**",
        "// Line_Reference 143:       * Prepares a value according to its tag and returns it.",
        "// Line_Reference 144:       *",
        "// Line_Reference 145:       * @param string the value to convert",
        "// Line_Reference 146:       * @return mixed",
        "// Line_Reference 147:       */",
        "// Line_Reference 148:      public function convertToSelect($value)",
        "// Line_Reference 149:      {",
        "// Line_Reference 150:          return $value;",
        "// Line_Reference 151:      }",
        "// Line_Reference 152: ",
        "// Line_Reference 153:      /**",
        "// Line_Reference 154:       * Returns a mysql datetime string.",
        "// Line_Reference 155:       *",
        "// Line_Reference 156:       * @param string the value to convert",
        "// Line_Reference 157:       * @return string",
        "// Line_Reference 158:       */",
        "// Line_Reference 159:      public function convertToDatetime($value)",
        "// Line_Reference 160:      {",
        "// Line_Reference 161:          return date('Y-m-d H:i:s', strtotime($value));",
        "// Line_Reference 162:      }",
        "// Line_Reference 163: ",
        "// Line_Reference 164:      /**",
        "// Line_Reference 165:       * Returns a mysql date string.",
        "// Line_Reference 166:       *",
        "// Line_Reference 167:       * @param string the value to convert",
        "// Line_Reference 168:       * @return string",
        "// Line_Reference 169:       */",
        "// Line_Reference 170:      public function convertToDate($value)",
        "// Line_Reference 171:      {",
        "// Line_Reference 172:          return date('Y-m-d', strtotime($value));",
        "// Line_Reference 173:      }",
        "// Line_Reference 174: ",
        "// Line_Reference 186:         if ( ! isset($this->map[$this->bean->op])) throw new Exception('Filter operator has no template');",
        "// Line_Reference 191: ",
        "// Line_Reference 202:     \tswitch ($this->bean->op) {",
        "// Line_Reference 203:     \t\tcase 'like':",
        "// Line_Reference 204:     \t\t\t$value = '%'.str_replace($this->pat, $this->rep, $this->bean->value).'%';",
        "// Line_Reference 205:     \t\t\tbreak;",
        "// Line_Reference 206:     \t\tcase 'notlike':",
        "// Line_Reference 207:     \t\t\t$value = '%'.str_replace($this->pat, $this->rep, $this->bean->value).'%';",
        "// Line_Reference 208:     \t\t\tbreak;",
        "// Line_Reference 209:     \t\tcase 'bw':",
        "// Line_Reference 210:     \t\t\t$value = str_replace($this->pat, $this->rep, $this->bean->value).'%';",
        "// Line_Reference 211:     \t\t\tbreak;",
        "// Line_Reference 212:     \t\tcase 'ew':",
        "// Line_Reference 213:     \t\t\t$value = '%'.str_replace($this->pat, $this->rep, $this->bean->value);",
        "// Line_Reference 214:     \t\t\tbreak;",
        "// Line_Reference 215:     \t\tcase 'in':",
        "// Line_Reference 216:     \t\t    $_sharedSubName = 'shared'.ucfirst(strtolower($this->bean->substitute));",
        "// Line_Reference 217:     \t\t    $ids = array_keys($this->bean->{$_sharedSubName});",
        "// Line_Reference 218:     \t\t    $value = implode(', ', $ids);",
        "// Line_Reference 219:     \t\t    $add_to_filter_values = false;",
        "// Line_Reference 220:     \t\t    break;",
        "// Line_Reference 221:     \t\tdefault:",
        "// Line_Reference 222:     \t\t\t$value = $this->bean->value;",
        "// Line_Reference 223:     \t}",
        "// Line_Reference 224:     \tif ($add_to_filter_values) {",
        "// Line_Reference 225:     \t    $converter = 'convertTo' . ucfirst(strtolower($this->bean->tag));",
        "// Line_Reference 226:     \t    $filter->filter_values[] = $this->$converter($value);",
        "// Line_Reference 227:     \t}",
        "// Line_Reference 228:     \treturn $value;",
        "// Line_Reference 230: ",
        "// Line_Reference 238:         if (isset($this->operators[$this->bean->tag])) return $this->operators[$this->bean->tag];",
        "// Line_Reference 241: "
    ]
}
