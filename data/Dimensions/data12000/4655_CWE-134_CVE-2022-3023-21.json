{
    "cve_id": "CVE-2022-3023",
    "cve_description": "Use of Externally-Controlled Format String in GitHub repository pingcap/tidb prior to 6.4.0, 6.1.3.",
    "cve_publish_date": "2022-11-04",
    "cwe_id": "CWE-134",
    "cwe_name": "Use of Externally-Controlled Format String",
    "cwe_description": "The product uses a function that accepts a format string as an argument, but the format string originates from an external source.",
    "commit_message": "*: don't use DSN to avoid some security problems (#38342)",
    "type_of_change": "Modification",
    "filename_of_changes": "util.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "28",
    "number_of_lines_deleted_vulnerable_to_cve": "23",
    "vulnerable_lines": [
        "// Line_Reference 26: \t\"net/url\"",
        "// Line_Reference 61: func (param *MySQLConnectParam) ToDSN() string {",
        "// Line_Reference 62: \thostPort := net.JoinHostPort(param.Host, strconv.Itoa(param.Port))",
        "// Line_Reference 63: \tdsn := fmt.Sprintf(\"%s:%s@tcp(%s)/?charset=utf8mb4&sql_mode='%s'&maxAllowedPacket=%d&tls=%s\",",
        "// Line_Reference 64: \t\tparam.User, param.Password, hostPort,",
        "// Line_Reference 65: \t\tparam.SQLMode, param.MaxAllowedPacket, param.TLS)",
        "// Line_Reference 68: \t\tdsn += fmt.Sprintf(\"&%s='%s'\", k, url.QueryEscape(v))",
        "// Line_Reference 70: ",
        "// Line_Reference 71: \treturn dsn",
        "// Line_Reference 74: func tryConnectMySQL(dsn string) (*sql.DB, error) {",
        "// Line_Reference 75: \tdriverName := \"mysql\"",
        "// Line_Reference 76: \tfailpoint.Inject(\"MockMySQLDriver\", func(val failpoint.Value) {",
        "// Line_Reference 77: \t\tdriverName = val.(string)",
        "// Line_Reference 79: \tdb, err := sql.Open(driverName, dsn)",
        "// Line_Reference 92: func ConnectMySQL(dsn string) (*sql.DB, error) {",
        "// Line_Reference 93: \tcfg, err := mysql.ParseDSN(dsn)",
        "// Line_Reference 94: \tif err != nil {",
        "// Line_Reference 95: \t\treturn nil, errors.Trace(err)",
        "// Line_Reference 96: \t}",
        "// Line_Reference 98: \tdb, firstErr := tryConnectMySQL(dsn)",
        "// Line_Reference 107: \t\t\tdb, err = tryConnectMySQL(cfg.FormatDSN())",
        "// Line_Reference 109: \t\t\t\treturn db, nil",
        "// Line_Reference 118: \tdb, err := ConnectMySQL(param.ToDSN())"
    ]
}
