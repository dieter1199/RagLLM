{
    "cve_id": "CVE-2024-27102",
    "cve_description": "Wings is the server control plane for Pterodactyl Panel. This vulnerability impacts anyone running the affected versions of Wings. The vulnerability can potentially be used to access files and directories on the host system. The full scope of impact is exactly unknown, but reading files outside of a server's base directory (sandbox root) is possible. In order to use this exploit, an attacker must have an existing \"server\" allocated and controlled by Wings. Details on the exploitation of this vulnerability are embargoed until March 27th, 2024 at 18:00 UTC. In order to mitigate this vulnerability, a full rewrite of the entire server filesystem was necessary. Because of this, the size of the patch is massive, however effort was made to reduce the amount of breaking changes. Users are advised to update to version 1.11.9. There are no known workarounds for this vulnerability.",
    "cve_publish_date": "2024-03-13",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "server(filesystem): rebuild everything imaginable\n\nThis wonderfully large commit replaces basically everything under the\n`server/filesystem` package, re-implementing essentially everything.\n\nThis is related to\nhttps://github.com/pterodactyl/wings/security/advisories/GHSA-494h-9924-xww9\n\nIf any vulnerabilities related to symlinks persist after this commit, I\nwill be very upset.\n\nSigned-off-by: Matthew Penner <me@matthewp.io>",
    "type_of_change": "Modification",
    "filename_of_changes": "path_test.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "35",
    "number_of_lines_deleted_vulnerable_to_cve": "108",
    "vulnerable_lines": [
        "// Line_Reference 24: func TestFilesystem_SafePath(t *testing.T) {",
        "// Line_Reference 25: \tg := Goblin(t)",
        "// Line_Reference 26: \tfs, rfs := NewFs()",
        "// Line_Reference 27: \tprefix := filepath.Join(rfs.root, \"/server\")",
        "// Line_Reference 28: ",
        "// Line_Reference 29: \tg.Describe(\"SafePath\", func() {",
        "// Line_Reference 30: \t\tg.It(\"returns a cleaned path to a given file\", func() {",
        "// Line_Reference 31: \t\t\tp, err := fs.SafePath(\"test.txt\")",
        "// Line_Reference 32: \t\t\tg.Assert(err).IsNil()",
        "// Line_Reference 33: \t\t\tg.Assert(p).Equal(prefix + \"/test.txt\")",
        "// Line_Reference 34: ",
        "// Line_Reference 35: \t\t\tp, err = fs.SafePath(\"/test.txt\")",
        "// Line_Reference 36: \t\t\tg.Assert(err).IsNil()",
        "// Line_Reference 37: \t\t\tg.Assert(p).Equal(prefix + \"/test.txt\")",
        "// Line_Reference 38: ",
        "// Line_Reference 39: \t\t\tp, err = fs.SafePath(\"./test.txt\")",
        "// Line_Reference 40: \t\t\tg.Assert(err).IsNil()",
        "// Line_Reference 41: \t\t\tg.Assert(p).Equal(prefix + \"/test.txt\")",
        "// Line_Reference 42: ",
        "// Line_Reference 43: \t\t\tp, err = fs.SafePath(\"/foo/../test.txt\")",
        "// Line_Reference 44: \t\t\tg.Assert(err).IsNil()",
        "// Line_Reference 45: \t\t\tg.Assert(p).Equal(prefix + \"/test.txt\")",
        "// Line_Reference 46: ",
        "// Line_Reference 47: \t\t\tp, err = fs.SafePath(\"/foo/bar\")",
        "// Line_Reference 48: \t\t\tg.Assert(err).IsNil()",
        "// Line_Reference 49: \t\t\tg.Assert(p).Equal(prefix + \"/foo/bar\")",
        "// Line_Reference 50: \t\t})",
        "// Line_Reference 51: ",
        "// Line_Reference 52: \t\tg.It(\"handles root directory access\", func() {",
        "// Line_Reference 53: \t\t\tp, err := fs.SafePath(\"/\")",
        "// Line_Reference 54: \t\t\tg.Assert(err).IsNil()",
        "// Line_Reference 55: \t\t\tg.Assert(p).Equal(prefix)",
        "// Line_Reference 56: ",
        "// Line_Reference 57: \t\t\tp, err = fs.SafePath(\"\")",
        "// Line_Reference 58: \t\t\tg.Assert(err).IsNil()",
        "// Line_Reference 59: \t\t\tg.Assert(p).Equal(prefix)",
        "// Line_Reference 60: \t\t})",
        "// Line_Reference 61: ",
        "// Line_Reference 62: \t\tg.It(\"removes trailing slashes from paths\", func() {",
        "// Line_Reference 63: \t\t\tp, err := fs.SafePath(\"/foo/bar/\")",
        "// Line_Reference 64: \t\t\tg.Assert(err).IsNil()",
        "// Line_Reference 65: \t\t\tg.Assert(p).Equal(prefix + \"/foo/bar\")",
        "// Line_Reference 66: \t\t})",
        "// Line_Reference 67: ",
        "// Line_Reference 68: \t\tg.It(\"handles deeply nested directories that do not exist\", func() {",
        "// Line_Reference 69: \t\t\tp, err := fs.SafePath(\"/foo/bar/baz/quaz/../../ducks/testing.txt\")",
        "// Line_Reference 70: \t\t\tg.Assert(err).IsNil()",
        "// Line_Reference 71: \t\t\tg.Assert(p).Equal(prefix + \"/foo/bar/ducks/testing.txt\")",
        "// Line_Reference 72: \t\t})",
        "// Line_Reference 73: ",
        "// Line_Reference 74: \t\tg.It(\"blocks access to files outside the root directory\", func() {",
        "// Line_Reference 75: \t\t\tp, err := fs.SafePath(\"../test.txt\")",
        "// Line_Reference 76: \t\t\tg.Assert(err).IsNotNil()",
        "// Line_Reference 77: \t\t\tg.Assert(IsErrorCode(err, ErrCodePathResolution)).IsTrue()",
        "// Line_Reference 78: \t\t\tg.Assert(p).Equal(\"\")",
        "// Line_Reference 79: ",
        "// Line_Reference 80: \t\t\tp, err = fs.SafePath(\"/../test.txt\")",
        "// Line_Reference 81: \t\t\tg.Assert(err).IsNotNil()",
        "// Line_Reference 82: \t\t\tg.Assert(IsErrorCode(err, ErrCodePathResolution)).IsTrue()",
        "// Line_Reference 83: \t\t\tg.Assert(p).Equal(\"\")",
        "// Line_Reference 84: ",
        "// Line_Reference 85: \t\t\tp, err = fs.SafePath(\"./foo/../../test.txt\")",
        "// Line_Reference 86: \t\t\tg.Assert(err).IsNotNil()",
        "// Line_Reference 87: \t\t\tg.Assert(IsErrorCode(err, ErrCodePathResolution)).IsTrue()",
        "// Line_Reference 88: \t\t\tg.Assert(p).Equal(\"\")",
        "// Line_Reference 89: ",
        "// Line_Reference 90: \t\t\tp, err = fs.SafePath(\"..\")",
        "// Line_Reference 91: \t\t\tg.Assert(err).IsNotNil()",
        "// Line_Reference 92: \t\t\tg.Assert(IsErrorCode(err, ErrCodePathResolution)).IsTrue()",
        "// Line_Reference 93: \t\t\tg.Assert(p).Equal(\"\")",
        "// Line_Reference 94: \t\t})",
        "// Line_Reference 95: \t})",
        "// Line_Reference 96: }",
        "// Line_Reference 97: ",
        "// Line_Reference 136: \t\t\tg.Assert(IsErrorCode(err, ErrCodePathResolution)).IsTrue()",
        "// Line_Reference 144: \t\t\tg.Assert(IsErrorCode(err, ErrCodePathResolution)).IsTrue()",
        "// Line_Reference 152: \t\t\tg.Assert(IsErrorCode(err, ErrCodePathResolution)).IsTrue()",
        "// Line_Reference 160: \t\t\tg.Assert(IsErrorCode(err, ErrCodePathResolution)).IsTrue()",
        "// Line_Reference 168: \t\t\tg.Assert(IsErrorCode(err, ErrCodePathResolution)).IsTrue()",
        "// Line_Reference 174: \t\t\tg.Assert(IsErrorCode(err, ErrCodePathResolution)).IsTrue()",
        "// Line_Reference 180: \t\t\tg.Assert(IsErrorCode(err, ErrCodePathResolution)).IsTrue()",
        "// Line_Reference 185: \t\tg.It(\"cannot rename a file symlinked outside the directory root\", func() {",
        "// Line_Reference 186: \t\t\terr := fs.Rename(\"symlinked.txt\", \"foo.txt\")",
        "// Line_Reference 187: \t\t\tg.Assert(err).IsNotNil()",
        "// Line_Reference 188: \t\t\tg.Assert(IsErrorCode(err, ErrCodePathResolution)).IsTrue()",
        "// Line_Reference 191: \t\tg.It(\"cannot rename a symlinked directory outside the root\", func() {",
        "// Line_Reference 192: \t\t\terr := fs.Rename(\"external_dir\", \"foo\")",
        "// Line_Reference 193: \t\t\tg.Assert(err).IsNotNil()",
        "// Line_Reference 194: \t\t\tg.Assert(IsErrorCode(err, ErrCodePathResolution)).IsTrue()",
        "// Line_Reference 198: \t\t\trfs.CreateServerFileFromString(\"my_file.txt\", \"internal content\")",
        "// Line_Reference 200: \t\t\terr := fs.Rename(\"my_file.txt\", \"external_dir/my_file.txt\")",
        "// Line_Reference 201: \t\t\tg.Assert(err).IsNotNil()",
        "// Line_Reference 202: \t\t\tg.Assert(IsErrorCode(err, ErrCodePathResolution)).IsTrue()",
        "// Line_Reference 203: \t\t})",
        "// Line_Reference 204: \t})",
        "// Line_Reference 206: \tg.Describe(\"Chown\", func() {",
        "// Line_Reference 207: \t\tg.It(\"cannot chown a file symlinked outside the directory root\", func() {",
        "// Line_Reference 208: \t\t\terr := fs.Chown(\"symlinked.txt\")",
        "// Line_Reference 209: \t\t\tg.Assert(err).IsNotNil()",
        "// Line_Reference 210: \t\t\tg.Assert(IsErrorCode(err, ErrCodePathResolution)).IsTrue()",
        "// Line_Reference 211: \t\t})",
        "// Line_Reference 213: \t\tg.It(\"cannot chown a directory symlinked outside the directory root\", func() {",
        "// Line_Reference 214: \t\t\terr := fs.Chown(\"external_dir\")",
        "// Line_Reference 215: \t\t\tg.Assert(err).IsNotNil()",
        "// Line_Reference 216: \t\t\tg.Assert(IsErrorCode(err, ErrCodePathResolution)).IsTrue()",
        "// Line_Reference 224: \t\t\tg.Assert(IsErrorCode(err, ErrCodePathResolution)).IsTrue()",
        "// Line_Reference 238: \t\t\tg.Assert(errors.Is(err, os.ErrNotExist)).IsTrue()",
        "// Line_Reference 242: \trfs.reset()"
    ]
}
