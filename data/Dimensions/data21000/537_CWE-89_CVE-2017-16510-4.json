{
    "cve_id": "CVE-2017-16510",
    "cve_description": "WordPress before 4.8.3 is affected by an issue where $wpdb->prepare() can create unexpected and unsafe queries leading to potential SQL injection (SQLi) in plugins and themes, as demonstrated by a \"double prepare\" approach, a different vulnerability than CVE-2017-14723.",
    "cve_publish_date": "2017-11-02",
    "cwe_id": "CWE-89",
    "cwe_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
    "cwe_description": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.",
    "commit_message": "Database: Restore numbered placeholders in `wpdb::prepare()`.\n\n[41496] removed support for numbered placeholders in queries send through `wpdb::prepare()`, which, despite being undocumented, were quite commonly used.\n\nThis change restores support for numbered placeholders (as well as a subset of placeholder formatting), while also adding extra checks to ensure the correct number of arguments are being passed to `wpdb::prepare()`, given the number of placeholders.\n\nSee #41925.\n\n\nBuilt from https://develop.svn.wordpress.org/trunk@42056\n\n\ngit-svn-id: http://core.svn.wordpress.org/trunk@41885 1a063a9b-81f0-0310-95a4-ce76da25c4cd",
    "type_of_change": "Modification",
    "filename_of_changes": "wp-db.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "131",
    "number_of_lines_deleted_vulnerable_to_cve": "34",
    "vulnerable_lines": [
        "// Line_Reference 1109: \t\t\t\treturn mysqli_real_escape_string( $this->dbh, $string );",
        "// Line_Reference 1111: \t\t\t\treturn mysql_real_escape_string( $string, $this->dbh );",
        "// Line_Reference 1113: \t\t}",
        "// Line_Reference 1114: ",
        "// Line_Reference 1115: \t\t$class = get_class( $this );",
        "// Line_Reference 1116: \t\tif ( function_exists( '__' ) ) {",
        "// Line_Reference 1117: \t\t\t/* translators: %s: database access abstraction class, usually wpdb or a class extending wpdb */",
        "// Line_Reference 1118: \t\t\t_doing_it_wrong( $class, sprintf( __( '%s must set a database connection for use with escaping.' ), $class ), '3.6.0' );",
        "// Line_Reference 1120: \t\t\t_doing_it_wrong( $class, sprintf( '%s must set a database connection for use with escaping.', $class ), '3.6.0' );",
        "// Line_Reference 1122: \t\treturn addslashes( $string );",
        "// Line_Reference 1208: \t * This method DOES NOT support sign, padding, alignment, width or precision specifiers.",
        "// Line_Reference 1209: \t * This method DOES NOT support argument numbering or swapping.",
        "// Line_Reference 1210: \t *",
        "// Line_Reference 1211: \t * Arguments may be passed as individual arguments to the method, or as a single array containing all arguments. A combination",
        "// Line_Reference 1228: \t\tif ( is_null( $query ) )",
        "// Line_Reference 1240: \t\t// If args were passed as an array (as in vsprintf), move them up",
        "// Line_Reference 1252: \t\t$query = str_replace( \"'%s'\", '%s', $query ); // in case someone mistakenly already singlequoted it",
        "// Line_Reference 1253: \t\t$query = str_replace( '\"%s\"', '%s', $query ); // doublequote unquoting",
        "// Line_Reference 1254: \t\t$query = preg_replace( '|(?<!%)%f|' , '%F', $query ); // Force floats to be locale unaware",
        "// Line_Reference 1255: \t\t$query = preg_replace( '|(?<!%)%s|', \"'%s'\", $query ); // quote the strings, avoiding escaped strings like %%s",
        "// Line_Reference 1256: \t\t$query = preg_replace( '/%(?:%|$|([^dsF]))/', '%%\\\\1', $query ); // escape any unescaped percents",
        "// Line_Reference 1258: \t\t// Count the number of valid placeholders in the query",
        "// Line_Reference 1259: \t\t$placeholders = preg_match_all( '/(^|[^%]|(%%)+)%[sdF]/', $query, $matches );",
        "// Line_Reference 1261: \t\tif ( count ( $args ) !== $placeholders ) {",
        "// Line_Reference 1262: \t\t\twp_load_translations_early();",
        "// Line_Reference 1263: \t\t\t_doing_it_wrong( 'wpdb::prepare',",
        "// Line_Reference 1264: \t\t\t\t/* translators: 1: number of placeholders, 2: number of arguments passed */",
        "// Line_Reference 1265: \t\t\t\tsprintf( __( 'The query does not contain the correct number of placeholders (%1$d) for the number of arguments passed (%2$d).' ),",
        "// Line_Reference 1266: \t\t\t\t\t$placeholders,",
        "// Line_Reference 1267: \t\t\t\t\tcount( $args ) ),",
        "// Line_Reference 1268: \t\t\t\t'4.9.0'",
        "// Line_Reference 1269: \t\t\t);",
        "// Line_Reference 1273: \t\treturn @vsprintf( $query, $args );",
        "// Line_Reference 2067: "
    ]
}
