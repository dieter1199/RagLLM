{
    "cve_id": "CVE-2018-8099",
    "cve_description": "Incorrect returning of an error code in the index.c:read_entry() function leads to a double free in libgit2 before v0.26.2, which allows an attacker to cause a denial of service via a crafted repository index file.",
    "cve_publish_date": "2018-03-14",
    "cwe_id": "CWE-415",
    "cwe_name": "Double Free",
    "cwe_description": "The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations.",
    "commit_message": "index: convert `read_entry` to return entry size via an out-param\n\nThe function `read_entry` does not conform to our usual coding style of\nreturning stuff via the out parameter and to use the return value for\nreporting errors. Due to most of our code conforming to that pattern, it\nhas become quite natural for us to actually return `-1` in case there is\nany error, which has also slipped in with commit 5625d86b9 (index:\nsupport index v4, 2016-05-17). As the function returns an `size_t` only,\nthough, the return value is wrapped around, causing the caller of\n`read_tree` to continue with an invalid index entry. Ultimately, this\ncan lead to a double-free.\n\nImprove code and fix the bug by converting the function to return the\nindex entry size via an out parameter and only using the return value to\nindicate errors.\n\nReported-by: Krishna Ram Prakash R <krp@gtux.in>\nReported-by: Vivek Parikh <viv0411.parikh@gmail.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "index.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "13",
    "number_of_lines_deleted_vulnerable_to_cve": "9",
    "vulnerable_lines": [
        "// Line_Reference 2302: static size_t read_entry(",
        "// Line_Reference 2317: \t\treturn 0;",
        "// Line_Reference 2359: \t\t\t\treturn 0;",
        "// Line_Reference 2390: \t\treturn 0;",
        "// Line_Reference 2394: \t\treturn 0;",
        "// Line_Reference 2398: \treturn entry_size;",
        "// Line_Reference 2502: \t\tsize_t entry_size = read_entry(&entry, index, buffer, buffer_size, last);",
        "// Line_Reference 2504: \t\t/* 0 bytes read means an object corruption */",
        "// Line_Reference 2505: \t\tif (entry_size == 0) {"
    ]
}
