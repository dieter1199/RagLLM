{
    "cve_id": "CVE-2019-7308",
    "cve_description": "kernel/bpf/verifier.c in the Linux kernel before 4.20.6 performs undesirable out-of-bounds speculation on pointer arithmetic in various cases, including cases of different branches with different state or limits to sanitize, leading to side-channel attacks.",
    "cve_publish_date": "2019-02-01",
    "cwe_id": "CWE-189",
    "cwe_name": "Numeric Errors",
    "cwe_description": "Weaknesses in this category are related to improper calculation or conversion of numbers.",
    "commit_message": "bpf: fix sanitation of alu op with pointer / scalar type from different paths\n\nWhile 979d63d50c0c (\"bpf: prevent out of bounds speculation on pointer\narithmetic\") took care of rejecting alu op on pointer when e.g. pointer\ncame from two different map values with different map properties such as\nvalue size, Jann reported that a case was not covered yet when a given\nalu op is used in both \"ptr_reg += reg\" and \"numeric_reg += reg\" from\ndifferent branches where we would incorrectly try to sanitize based\non the pointer's limit. Catch this corner case and reject the program\ninstead.\n\nFixes: 979d63d50c0c (\"bpf: prevent out of bounds speculation on pointer arithmetic\")\nReported-by: Jann Horn <jannh@google.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nAcked-by: Alexei Starovoitov <ast@kernel.org>\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "verifier.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "48",
    "number_of_lines_deleted_vulnerable_to_cve": "13",
    "vulnerable_lines": [
        "// Line_Reference 3120: \tif (env->allow_ptr_leaks || BPF_SRC(insn->code) == BPF_K)",
        "// Line_Reference 3136: ",
        "// Line_Reference 3137: \t/* If we arrived here from different branches with different",
        "// Line_Reference 3138: \t * limits to sanitize, then this won't work.",
        "// Line_Reference 3139: \t */",
        "// Line_Reference 3140: \tif (aux->alu_state &&",
        "// Line_Reference 3141: \t    (aux->alu_state != alu_state ||",
        "// Line_Reference 3142: \t     aux->alu_limit != alu_limit))",
        "// Line_Reference 3144: ",
        "// Line_Reference 3145: \t/* Corresponding fixup done in fixup_bpf_calls(). */",
        "// Line_Reference 3146: \taux->alu_state = alu_state;",
        "// Line_Reference 3147: \taux->alu_limit = alu_limit;",
        "// Line_Reference 3148: "
    ]
}
