{
    "cve_id": "CVE-2017-18261",
    "cve_description": "The arch_timer_reg_read_stable macro in arch/arm64/include/asm/arch_timer.h in the Linux kernel before 4.13 allows local users to cause a denial of service (infinite recursion) by writing to a file under /sys/kernel/debug in certain circumstances, as demonstrated by a scenario involving debugfs, ftrace, PREEMPT_TRACER, and FUNCTION_GRAPH_TRACER.",
    "cve_publish_date": "2018-04-19",
    "cwe_id": "CWE-835",
    "cwe_name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
    "cwe_description": "The product contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop.",
    "commit_message": "clocksource/drivers/arm_arch_timer: Avoid infinite recursion when ftrace is enabled\n\nOn platforms with an arch timer erratum workaround, it's possible for\narch_timer_reg_read_stable() to recurse into itself when certain\ntracing options are enabled, leading to stack overflows and related\nproblems.\n\nFor example, when PREEMPT_TRACER and FUNCTION_GRAPH_TRACER are\nselected, it's possible to trigger this with:\n\n$ mount -t debugfs nodev /sys/kernel/debug/\n$ echo function_graph > /sys/kernel/debug/tracing/current_tracer\n\nThe problem is that in such cases, preempt_disable() instrumentation\nattempts to acquire a timestamp via trace_clock(), resulting in a call\nback to arch_timer_reg_read_stable(), and hence recursion.\n\nThis patch changes arch_timer_reg_read_stable() to use\npreempt_{disable,enable}_notrace(), which avoids this.\n\nThis problem is similar to the fixed by upstream commit 96b3d28bf4\n(\"sched/clock: Prevent tracing recursion in sched_clock_cpu()\").\n\nFixes: 6acc71ccac71 (\"arm64: arch_timer: Allows a CPU-specific erratum to only affect a subset of CPUs\")\nSigned-off-by: Ding Tianhong <dingtianhong@huawei.com>\nAcked-by: Mark Rutland <mark.rutland@arm.com>\nAcked-by: Marc Zyngier <marc.zyngier@arm.com>\nSigned-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "arch_timer.h",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "2",
    "number_of_lines_deleted_vulnerable_to_cve": "2",
    "vulnerable_lines": [
        "// Line_Reference 68: \t\tpreempt_disable();\t\t\t\t\t\\",
        "// Line_Reference 74: \t\tpreempt_enable();\t\t\t\t\t\\"
    ]
}
