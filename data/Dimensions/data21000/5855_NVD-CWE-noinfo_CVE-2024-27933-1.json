{
    "cve_id": "CVE-2024-27933",
    "cve_description": "Deno is a JavaScript, TypeScript, and WebAssembly runtime. In version 1.39.0, use of raw file descriptors in `op_node_ipc_pipe()` leads to premature close of arbitrary file descriptors, allowing standard input to be re-opened as a different resource resulting in permission prompt bypass. Node child_process IPC relies on the JS side to pass the raw IPC file descriptor to `op_node_ipc_pipe()`, which returns a `IpcJsonStreamResource` ID associated with the file descriptor. On closing the resource, the raw file descriptor is closed together.\n\nUse of raw file descriptors in `op_node_ipc_pipe()` leads to premature close of arbitrary file descriptors. This allow standard input (fd 0) to be closed and re-opened for a different resource, which allows a silent permission prompt bypass. This is exploitable by an attacker controlling the code executed inside a Deno runtime to obtain arbitrary code execution on the host machine regardless of permissions.\n\nThis bug is known to be exploitable. There is a working exploit that achieves arbitrary code execution by bypassing prompts from zero permissions, additionally abusing the fact that Cache API lacks filesystem permission checks. The attack can be conducted silently as stderr can also be closed, suppressing all prompt outputs.\n\nVersion 1.39.1 fixes the bug.\n",
    "cve_publish_date": "2024-03-21",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fix(node): child_process IPC on Windows (#21597)\n\nThis PR implements the child_process IPC pipe between parent and child.\r\nThe implementation uses Windows named pipes created by parent and passes\r\nthe inheritable file handle to the child.\r\n\r\nI've also replace parts of the initial implementation which passed the\r\nraw parent fd to JS with resource ids instead. This way no file handle\r\nis exposed to the JS land (both parent and child).\r\n\r\n`IpcJsonStreamResource` can stream upto 800MB/s of JSON data on Win 11\r\nAMD Ryzen 7 16GB (without `memchr` vectorization)",
    "type_of_change": "Modification",
    "filename_of_changes": "ipc.rs",
    "code_language": "Rust",
    "number_of_lines_added_for_mitigation": "110",
    "number_of_lines_deleted_vulnerable_to_cve": "70",
    "vulnerable_lines": [
        "// Line_Reference 3: #[cfg(unix)]",
        "// Line_Reference 4: pub use unix::*;",
        "// Line_Reference 6: #[cfg(windows)]",
        "// Line_Reference 7: pub use windows::*;",
        "// Line_Reference 9: pub struct ChildPipeFd(pub i32);",
        "// Line_Reference 10: ",
        "// Line_Reference 11: #[cfg(unix)]",
        "// Line_Reference 12: mod unix {",
        "// Line_Reference 42:   #[op2(fast)]",
        "// Line_Reference 43:   #[smi]",
        "// Line_Reference 44:   pub fn op_node_ipc_pipe(",
        "// Line_Reference 45:     state: &mut OpState,",
        "// Line_Reference 46:     #[smi] fd: i32,",
        "// Line_Reference 47:   ) -> Result<ResourceId, AnyError> {",
        "// Line_Reference 48:     Ok(state.resource_table.add(IpcJsonStreamResource::new(fd)?))",
        "// Line_Reference 49:   }",
        "// Line_Reference 100:   struct IpcJsonStreamResource {",
        "// Line_Reference 113:     fn new(stream: RawFd) -> Result<Self, std::io::Error> {",
        "// Line_Reference 114:       // Safety: The fd is part of a pair of connected sockets create by child process",
        "// Line_Reference 115:       // implementation.",
        "// Line_Reference 116:       let unix_stream = UnixStream::from_std(unsafe {",
        "// Line_Reference 117:         std::os::unix::net::UnixStream::from_raw_fd(stream)",
        "// Line_Reference 118:       })?;",
        "// Line_Reference 119:       let (read_half, write_half) = unix_stream.into_split();",
        "// Line_Reference 128:     fn from_unix_stream(stream: UnixStream) -> Self {",
        "// Line_Reference 255: ",
        "// Line_Reference 378:       let (fd1, mut fd2) = tokio::net::UnixStream::pair()?;",
        "// Line_Reference 392:       let ipc = Rc::new(IpcJsonStreamResource::from_unix_stream(fd1));",
        "// Line_Reference 393: ",
        "// Line_Reference 419:       let (fd1, mut fd2) = tokio::net::UnixStream::pair()?;",
        "// Line_Reference 424:         let mut buf = [0u8; 1024];",
        "// Line_Reference 425:         let n = fd2.read(&mut buf).await?;",
        "// Line_Reference 426:         assert_eq!(&buf[..n], b\"\\\"hello\\\"\\n\");",
        "// Line_Reference 431:       /* Similar to how ops would use the resource */",
        "// Line_Reference 432:       let ipc = Rc::new(IpcJsonStreamResource::from_unix_stream(fd1));",
        "// Line_Reference 433: ",
        "// Line_Reference 447:       let (fd1, mut fd2) = tokio::net::UnixStream::pair()?;",
        "// Line_Reference 452:         let mut buf = [0u8; 1024];",
        "// Line_Reference 453:         let n = fd2.read(&mut buf).await?;",
        "// Line_Reference 454:         assert_eq!(&buf[..n], b\"\\\"hello\\\"\\n\\\"world\\\"\\n\");",
        "// Line_Reference 459:       let ipc = Rc::new(IpcJsonStreamResource::from_unix_stream(fd1));",
        "// Line_Reference 474:       let (fd1, mut fd2) = tokio::net::UnixStream::pair()?;",
        "// Line_Reference 480:       let ipc = Rc::new(IpcJsonStreamResource::from_unix_stream(fd1));",
        "// Line_Reference 502: ",
        "// Line_Reference 503: #[cfg(windows)]",
        "// Line_Reference 504: mod windows {",
        "// Line_Reference 505:   use deno_core::error::AnyError;",
        "// Line_Reference 506:   use deno_core::op2;",
        "// Line_Reference 507: ",
        "// Line_Reference 508:   #[op2(fast)]",
        "// Line_Reference 509:   pub fn op_node_ipc_pipe() -> Result<(), AnyError> {",
        "// Line_Reference 510:     Err(deno_core::error::not_supported())",
        "// Line_Reference 511:   }",
        "// Line_Reference 512: ",
        "// Line_Reference 513:   #[op2(fast)]",
        "// Line_Reference 514:   #[smi]",
        "// Line_Reference 515:   pub fn op_node_child_ipc_pipe() -> Result<i32, AnyError> {",
        "// Line_Reference 516:     Ok(-1)",
        "// Line_Reference 517:   }",
        "// Line_Reference 518: ",
        "// Line_Reference 519:   #[op2(async)]",
        "// Line_Reference 520:   pub async fn op_node_ipc_write() -> Result<(), AnyError> {",
        "// Line_Reference 521:     Err(deno_core::error::not_supported())",
        "// Line_Reference 522:   }",
        "// Line_Reference 523: ",
        "// Line_Reference 524:   #[op2(async)]",
        "// Line_Reference 525:   pub async fn op_node_ipc_read() -> Result<(), AnyError> {",
        "// Line_Reference 526:     Err(deno_core::error::not_supported())",
        "// Line_Reference 527:   }",
        "// Line_Reference 528: }"
    ]
}
