{
    "cve_id": "CVE-2014-6262",
    "cve_description": "Multiple format string vulnerabilities in the python module in RRDtool, as used in Zenoss Core before 4.2.5 and other products, allow remote attackers to execute arbitrary code or cause a denial of service (application crash) via a crafted third argument to the rrdtool.graph function, aka ZEN-15415, a related issue to CVE-2013-2131.",
    "cve_publish_date": "2020-02-12",
    "cwe_id": "CWE-134",
    "cwe_name": "Use of Externally-Controlled Format String",
    "cwe_description": "The product uses a function that accepts a format string as an argument, but the format string originates from an external source.",
    "commit_message": "a proper fix to the bad_format checking misery\n\nConflicts:\n\n\tsrc/rrd_graph.c",
    "type_of_change": "Modification",
    "filename_of_changes": "rrd_graph.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "32",
    "number_of_lines_deleted_vulnerable_to_cve": "101",
    "vulnerable_lines": [
        "// Line_Reference 1677:                 } else if (bad_format(im->gdes[i].format)) {",
        "// Line_Reference 1678:                     rrd_set_error",
        "// Line_Reference 1679:                         (\"bad format for PRINT in '%s'\", im->gdes[i].format);",
        "// Line_Reference 1700:                     if (bad_format(im->gdes[i].format)) {",
        "// Line_Reference 1701:                         rrd_set_error",
        "// Line_Reference 1702:                             (\"bad format for GPRINT in '%s'\",",
        "// Line_Reference 1703:                              im->gdes[i].format);",
        "// Line_Reference 1704:                         return -1;",
        "// Line_Reference 4175: ",
        "// Line_Reference 4246:             rrd_set_error(\"bad format for imginfo\");",
        "// Line_Reference 4720:             if (bad_format(optarg)){",
        "// Line_Reference 4721:                 rrd_set_error(\"use either %le or %lf formats\");",
        "// Line_Reference 4731:             if (bad_format(optarg)){",
        "// Line_Reference 4732:                 rrd_set_error(\"use either %le or %lf formats\");",
        "// Line_Reference 5070: int bad_format(",
        "// Line_Reference 5071:     char *fmt)",
        "// Line_Reference 5072: {",
        "// Line_Reference 5073:     char     *ptr;",
        "// Line_Reference 5074:     int       n = 0;",
        "// Line_Reference 5075: ",
        "// Line_Reference 5076:     ptr = fmt;",
        "// Line_Reference 5077:     while (*ptr != '\\0')",
        "// Line_Reference 5078:         if (*ptr++ == '%') {",
        "// Line_Reference 5079: ",
        "// Line_Reference 5080:             /* line cannot end with percent char */",
        "// Line_Reference 5081:             if (*ptr == '\\0')",
        "// Line_Reference 5082:                 return 1;",
        "// Line_Reference 5083:             /* '%s', '%S' and '%%' are allowed */",
        "// Line_Reference 5084:             if (*ptr == 's' || *ptr == 'S' || *ptr == '%')",
        "// Line_Reference 5085:                 ptr++;",
        "// Line_Reference 5086:             /* %c is allowed (but use only with vdef!) */",
        "// Line_Reference 5087:             else if (*ptr == 'c') {",
        "// Line_Reference 5088:                 ptr++;",
        "// Line_Reference 5089:                 n = 1;",
        "// Line_Reference 5090:             }",
        "// Line_Reference 5091: ",
        "// Line_Reference 5092:             /* or else '% 6.2lf' and such are allowed */",
        "// Line_Reference 5093:             else {",
        "// Line_Reference 5094:                 /* optional padding character */",
        "// Line_Reference 5095:                 if (*ptr == ' ' || *ptr == '+' || *ptr == '-')",
        "// Line_Reference 5096:                     ptr++;",
        "// Line_Reference 5097:                 /* This should take care of 'm.n' with all three optional */",
        "// Line_Reference 5098:                 while (*ptr >= '0' && *ptr <= '9')",
        "// Line_Reference 5099:                     ptr++;",
        "// Line_Reference 5100:                 if (*ptr == '.')",
        "// Line_Reference 5101:                     ptr++;",
        "// Line_Reference 5102:                 while (*ptr >= '0' && *ptr <= '9')",
        "// Line_Reference 5103:                     ptr++;",
        "// Line_Reference 5104:                 /* Either 'le', 'lf' or 'lg' must follow here */",
        "// Line_Reference 5105:                 if (*ptr++ != 'l')",
        "// Line_Reference 5106:                     return 1;",
        "// Line_Reference 5107:                 if (*ptr == 'e' || *ptr == 'f' || *ptr == 'g')",
        "// Line_Reference 5108:                     ptr++;",
        "// Line_Reference 5109:                 else",
        "// Line_Reference 5110:                     return 1;",
        "// Line_Reference 5111:                 n++;",
        "// Line_Reference 5112:             }",
        "// Line_Reference 5113:         }",
        "// Line_Reference 5114: ",
        "// Line_Reference 5115:     return (n != 1);",
        "// Line_Reference 5119: int bad_format_imginfo(",
        "// Line_Reference 5120:     char *fmt)",
        "// Line_Reference 5121: {",
        "// Line_Reference 5122:     char     *ptr;",
        "// Line_Reference 5123:     int       n = 0;",
        "// Line_Reference 5124: ",
        "// Line_Reference 5125:     ptr = fmt;",
        "// Line_Reference 5126:     while (*ptr != '\\0')",
        "// Line_Reference 5127:         if (*ptr++ == '%') {",
        "// Line_Reference 5128: ",
        "// Line_Reference 5129:             /* line cannot end with percent char */",
        "// Line_Reference 5130:             if (*ptr == '\\0')",
        "// Line_Reference 5131:                 return 1;",
        "// Line_Reference 5132:             /* '%%' is allowed */",
        "// Line_Reference 5133:             if (*ptr == '%')",
        "// Line_Reference 5134:                 ptr++;",
        "// Line_Reference 5135:             /* '%s', '%S' are allowed */",
        "// Line_Reference 5136:             else if (*ptr == 's' || *ptr == 'S') {",
        "// Line_Reference 5137:                 n = 1;",
        "// Line_Reference 5138:                 ptr++;",
        "// Line_Reference 5139:             }",
        "// Line_Reference 5140: ",
        "// Line_Reference 5141:             /* or else '% 4lu' and such are allowed */",
        "// Line_Reference 5142:             else {",
        "// Line_Reference 5143:                 /* optional padding character */",
        "// Line_Reference 5144:                 if (*ptr == ' ')",
        "// Line_Reference 5145:                     ptr++;",
        "// Line_Reference 5146:                 /* This should take care of 'm' */",
        "// Line_Reference 5147:                 while (*ptr >= '0' && *ptr <= '9')",
        "// Line_Reference 5148:                     ptr++;",
        "// Line_Reference 5149:                 /* 'lu' must follow here */",
        "// Line_Reference 5150:                 if (*ptr++ != 'l')",
        "// Line_Reference 5151:                     return 1;",
        "// Line_Reference 5152:                 if (*ptr == 'u')",
        "// Line_Reference 5153:                     ptr++;",
        "// Line_Reference 5154:                 else",
        "// Line_Reference 5155:                     return 1;",
        "// Line_Reference 5156:                 n++;",
        "// Line_Reference 5157:             }",
        "// Line_Reference 5158:         }",
        "// Line_Reference 5160:     return (n != 3);"
    ]
}
