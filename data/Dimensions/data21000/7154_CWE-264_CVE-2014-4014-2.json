{
    "cve_id": "CVE-2014-4014",
    "cve_description": "The capabilities implementation in the Linux kernel before 3.14.8 does not properly consider that namespaces are inapplicable to inodes, which allows local users to bypass intended chmod restrictions by first creating a user namespace, as demonstrated by setting the setgid bit on a file with group ownership of root.",
    "cve_publish_date": "2014-06-23",
    "cwe_id": "CWE-264",
    "cwe_name": "Permissions, Privileges, and Access Controls",
    "cwe_description": "Weaknesses in this category are related to the management of permissions, privileges, and other security features that are used to perform access control.",
    "commit_message": "fs,userns: Change inode_capable to capable_wrt_inode_uidgid\n\nThe kernel has no concept of capabilities with respect to inodes; inodes\nexist independently of namespaces.  For example, inode_capable(inode,\nCAP_LINUX_IMMUTABLE) would be nonsense.\n\nThis patch changes inode_capable to check for uid and gid mappings and\nrenames it to capable_wrt_inode_uidgid, which should make it more\nobvious what it does.\n\nFixes CVE-2014-4014.\n\nCc: Theodore Ts'o <tytso@mit.edu>\nCc: Serge Hallyn <serge.hallyn@ubuntu.com>\nCc: \"Eric W. Biederman\" <ebiederm@xmission.com>\nCc: Dave Chinner <david@fromorbit.com>\nCc: stable@vger.kernel.org\nSigned-off-by: Andy Lutomirski <luto@amacapital.net>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "capability.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "8",
    "number_of_lines_deleted_vulnerable_to_cve": "12",
    "vulnerable_lines": [
        "// Line_Reference 427:  * inode_capable - Check superior capability over inode",
        "// Line_Reference 431:  * Return true if the current task has the given superior capability",
        "// Line_Reference 432:  * targeted at it's own user namespace and that the given inode is owned",
        "// Line_Reference 433:  * by the current user namespace or a child namespace.",
        "// Line_Reference 434:  *",
        "// Line_Reference 435:  * Currently we check to see if an inode is owned by the current",
        "// Line_Reference 436:  * user namespace by seeing if the inode's owner maps into the",
        "// Line_Reference 437:  * current user namespace.",
        "// Line_Reference 438:  *",
        "// Line_Reference 440: bool inode_capable(const struct inode *inode, int cap)",
        "// Line_Reference 444: \treturn ns_capable(ns, cap) && kuid_has_mapping(ns, inode->i_uid);",
        "// Line_Reference 446: EXPORT_SYMBOL(inode_capable);"
    ]
}
