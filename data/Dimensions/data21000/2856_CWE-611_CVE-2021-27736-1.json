{
    "cve_id": "CVE-2021-27736",
    "cve_description": "FusionAuth fusionauth-samlv2 before 0.5.4 allows XXE attacks via a forged AuthnRequest or LogoutRequest because parseFromBytes uses javax.xml.parsers.DocumentBuilderFactory unsafely.",
    "cve_publish_date": "2021-04-22",
    "cwe_id": "CWE-611",
    "cwe_name": "Improper Restriction of XML External Entity Reference",
    "cwe_description": "The product processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output.",
    "commit_message": "Refactor utility methods into SAMLTools, add tests.",
    "type_of_change": "Modification",
    "filename_of_changes": "DefaultSAMLv2Service.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "17",
    "number_of_lines_deleted_vulnerable_to_cve": "192",
    "vulnerable_lines": [
        "// Line_Reference 18: import javax.xml.bind.JAXBContext;",
        "// Line_Reference 20: import javax.xml.bind.JAXBException;",
        "// Line_Reference 21: import javax.xml.bind.Marshaller;",
        "// Line_Reference 22: import javax.xml.bind.Unmarshaller;",
        "// Line_Reference 40: import javax.xml.datatype.XMLGregorianCalendar;",
        "// Line_Reference 41: import javax.xml.parsers.DocumentBuilder;",
        "// Line_Reference 42: import javax.xml.parsers.DocumentBuilderFactory;",
        "// Line_Reference 43: import javax.xml.parsers.ParserConfigurationException;",
        "// Line_Reference 44: import javax.xml.transform.Transformer;",
        "// Line_Reference 46: import javax.xml.transform.TransformerFactory;",
        "// Line_Reference 47: import javax.xml.transform.dom.DOMSource;",
        "// Line_Reference 48: import javax.xml.transform.stream.StreamResult;",
        "// Line_Reference 49: import java.io.ByteArrayInputStream;",
        "// Line_Reference 50: import java.io.ByteArrayOutputStream;",
        "// Line_Reference 51: import java.io.IOException;",
        "// Line_Reference 52: import java.io.StringWriter;",
        "// Line_Reference 62: import java.security.cert.CertificateException;",
        "// Line_Reference 63: import java.security.cert.CertificateFactory;",
        "// Line_Reference 78: import java.util.zip.DataFormatException;",
        "// Line_Reference 79: import java.util.zip.Deflater;",
        "// Line_Reference 80: import java.util.zip.Inflater;",
        "// Line_Reference 92: import io.fusionauth.samlv2.domain.NameID;",
        "// Line_Reference 139: import org.xml.sax.SAXException;",
        "// Line_Reference 414:     Document document = parseFromBytes(metaDataXML.getBytes(StandardCharsets.UTF_8));",
        "// Line_Reference 453:                                        .map(this::toCertificate)",
        "// Line_Reference 535:     Document document = parseFromBytes(decodedResponse);",
        "// Line_Reference 616:               List<String> values = attributeValues.stream().map(this::attributeToString).collect(Collectors.toList());",
        "// Line_Reference 649:   private String attributeToString(Object attribute) {",
        "// Line_Reference 650:     if (attribute == null) {",
        "// Line_Reference 651:       return null;",
        "// Line_Reference 652:     }",
        "// Line_Reference 653: ",
        "// Line_Reference 654:     if (attribute instanceof Number) {",
        "// Line_Reference 655:       return attribute.toString();",
        "// Line_Reference 656:     } else if (attribute instanceof String) {",
        "// Line_Reference 657:       return (String) attribute;",
        "// Line_Reference 658:     } else if (attribute instanceof Element) {",
        "// Line_Reference 659:       return ((Element) attribute).getTextContent();",
        "// Line_Reference 660:     } else {",
        "// Line_Reference 661:       logger.warn(\"This library currently doesn't handle attributes of type [\" + attribute.getClass() + \"]\");",
        "// Line_Reference 662:     }",
        "// Line_Reference 663: ",
        "// Line_Reference 664:     return null;",
        "// Line_Reference 665:   }",
        "// Line_Reference 666: ",
        "// Line_Reference 690:       String encodedResult = deflateAndEncode(xml);",
        "// Line_Reference 714:   private ZonedDateTime convertToZonedDateTime(XMLGregorianCalendar cal) {",
        "// Line_Reference 715:     return cal != null ? cal.toGregorianCalendar().toZonedDateTime() : null;",
        "// Line_Reference 716:   }",
        "// Line_Reference 717: ",
        "// Line_Reference 718:   private byte[] decodeAndInflate(String encodedRequest) throws SAMLException {",
        "// Line_Reference 719:     byte[] bytes = Base64.getMimeDecoder().decode(encodedRequest);",
        "// Line_Reference 720:     Inflater inflater = new Inflater(true);",
        "// Line_Reference 721:     inflater.setInput(bytes);",
        "// Line_Reference 722:     inflater.finished();",
        "// Line_Reference 723: ",
        "// Line_Reference 724:     try {",
        "// Line_Reference 725:       ByteArrayOutputStream baos = new ByteArrayOutputStream();",
        "// Line_Reference 726:       byte[] result = new byte[bytes.length];",
        "// Line_Reference 727:       while (!inflater.finished()) {",
        "// Line_Reference 728:         int length = inflater.inflate(result);",
        "// Line_Reference 729:         if (length > 0) {",
        "// Line_Reference 730:           baos.write(result, 0, length);",
        "// Line_Reference 731:         }",
        "// Line_Reference 732:       }",
        "// Line_Reference 733: ",
        "// Line_Reference 734:       return baos.toByteArray();",
        "// Line_Reference 735:     } catch (DataFormatException e) {",
        "// Line_Reference 736:       throw new SAMLException(\"Invalid AuthnRequest. Inflating the bytes failed.\", e);",
        "// Line_Reference 737:     }",
        "// Line_Reference 738:   }",
        "// Line_Reference 739: ",
        "// Line_Reference 740:   private String deflateAndEncode(byte[] result) {",
        "// Line_Reference 741:     Deflater deflater = new Deflater(Deflater.DEFLATED, true);",
        "// Line_Reference 742:     deflater.setInput(result);",
        "// Line_Reference 743:     deflater.finish();",
        "// Line_Reference 744:     byte[] deflatedResult = new byte[result.length];",
        "// Line_Reference 745:     int length = deflater.deflate(deflatedResult);",
        "// Line_Reference 746:     deflater.end();",
        "// Line_Reference 747:     byte[] src = Arrays.copyOf(deflatedResult, length);",
        "// Line_Reference 748:     return Base64.getEncoder().encodeToString(src);",
        "// Line_Reference 749:   }",
        "// Line_Reference 750: ",
        "// Line_Reference 769:   private <T> byte[] marshallToBytes(JAXBElement<T> object, Class<T> type) throws SAMLException {",
        "// Line_Reference 770:     try {",
        "// Line_Reference 771:       JAXBContext context = JAXBContext.newInstance(type);",
        "// Line_Reference 772:       Marshaller marshaller = context.createMarshaller();",
        "// Line_Reference 773:       ByteArrayOutputStream baos = new ByteArrayOutputStream();",
        "// Line_Reference 774:       marshaller.marshal(object, baos);",
        "// Line_Reference 775:       return baos.toByteArray();",
        "// Line_Reference 776:     } catch (JAXBException e) {",
        "// Line_Reference 777:       throw new SAMLException(\"Unable to marshallRequest JAXB SAML object to bytes.\", e);",
        "// Line_Reference 778:     }",
        "// Line_Reference 779:   }",
        "// Line_Reference 780: ",
        "// Line_Reference 781:   @SuppressWarnings(\"SameParameterValue\")",
        "// Line_Reference 782:   private <T> Document marshallToDocument(JAXBElement<T> object, Class<T> type) throws SAMLException {",
        "// Line_Reference 783:     try {",
        "// Line_Reference 784:       JAXBContext context = JAXBContext.newInstance(type);",
        "// Line_Reference 785:       Marshaller marshaller = context.createMarshaller();",
        "// Line_Reference 786:       DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();",
        "// Line_Reference 787:       dbf.setNamespaceAware(true);",
        "// Line_Reference 788:       DocumentBuilder db = dbf.newDocumentBuilder();",
        "// Line_Reference 789:       Document document = db.newDocument();",
        "// Line_Reference 790:       marshaller.marshal(object, document);",
        "// Line_Reference 791:       return document;",
        "// Line_Reference 792:     } catch (JAXBException | ParserConfigurationException e) {",
        "// Line_Reference 793:       throw new SAMLException(\"Unable to marshallRequest JAXB SAML object to DOM.\", e);",
        "// Line_Reference 794:     }",
        "// Line_Reference 795:   }",
        "// Line_Reference 796: ",
        "// Line_Reference 797:   private String marshallToString(Document document) throws TransformerException {",
        "// Line_Reference 798:     StringWriter sw = new StringWriter();",
        "// Line_Reference 799:     TransformerFactory tf = TransformerFactory.newInstance();",
        "// Line_Reference 800:     Transformer transformer = tf.newTransformer();",
        "// Line_Reference 801:     transformer.transform(new DOMSource(document), new StreamResult(sw));",
        "// Line_Reference 802:     return sw.toString();",
        "// Line_Reference 803:   }",
        "// Line_Reference 804: ",
        "// Line_Reference 821:   private Document parseFromBytes(byte[] bytes) throws SAMLException {",
        "// Line_Reference 822:     DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();",
        "// Line_Reference 823:     documentBuilderFactory.setNamespaceAware(true);",
        "// Line_Reference 824:     try {",
        "// Line_Reference 825:       DocumentBuilder builder = documentBuilderFactory.newDocumentBuilder();",
        "// Line_Reference 826:       return builder.parse(new ByteArrayInputStream(bytes));",
        "// Line_Reference 827:     } catch (ParserConfigurationException | SAXException | IOException e) {",
        "// Line_Reference 828:       throw new SAMLException(\"Unable to parse SAML v2.0 authentication response\", e);",
        "// Line_Reference 829:     }",
        "// Line_Reference 830:   }",
        "// Line_Reference 831: ",
        "// Line_Reference 832:   private NameID parseNameId(NameIDType element) {",
        "// Line_Reference 833:     NameID nameId = new NameID();",
        "// Line_Reference 834:     nameId.format = NameIDFormat.fromSAMLFormat(element.getFormat());",
        "// Line_Reference 835:     nameId.id = element.getValue();",
        "// Line_Reference 836:     return nameId;",
        "// Line_Reference 837:   }",
        "// Line_Reference 838: ",
        "// Line_Reference 846:     result.document = parseFromBytes(xmlBytes);",
        "// Line_Reference 910:   private Certificate toCertificate(KeyDescriptorType keyDescriptorType) {",
        "// Line_Reference 911:     try {",
        "// Line_Reference 912:       List<Object> keyData = keyDescriptorType.getKeyInfo().getContent();",
        "// Line_Reference 913:       for (Object keyDatum : keyData) {",
        "// Line_Reference 914:         if (keyDatum instanceof JAXBElement<?>) {",
        "// Line_Reference 915:           JAXBElement<?> element = (JAXBElement<?>) keyDatum;",
        "// Line_Reference 916:           if (element.getDeclaredType() == X509DataType.class) {",
        "// Line_Reference 917:             X509DataType cert = (X509DataType) element.getValue();",
        "// Line_Reference 918:             List<Object> certData = cert.getX509IssuerSerialOrX509SKIOrX509SubjectName();",
        "// Line_Reference 919:             for (Object certDatum : certData) {",
        "// Line_Reference 920:               element = (JAXBElement<?>) certDatum;",
        "// Line_Reference 921:               if (element.getName().getLocalPart().equals(\"X509Certificate\")) {",
        "// Line_Reference 922:                 byte[] certBytes = (byte[]) element.getValue();",
        "// Line_Reference 923:                 CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");",
        "// Line_Reference 924:                 return cf.generateCertificate(new ByteArrayInputStream(certBytes));",
        "// Line_Reference 925:               }",
        "// Line_Reference 926:             }",
        "// Line_Reference 927:           }",
        "// Line_Reference 928:         }",
        "// Line_Reference 929:       }",
        "// Line_Reference 930: ",
        "// Line_Reference 931:       return null;",
        "// Line_Reference 932:     } catch (CertificateException e) {",
        "// Line_Reference 933:       throw new IllegalArgumentException(e);",
        "// Line_Reference 934:     }",
        "// Line_Reference 935:   }",
        "// Line_Reference 936: ",
        "// Line_Reference 937:   private XMLGregorianCalendar toXMLGregorianCalendar(ZonedDateTime instant) {",
        "// Line_Reference 938:     if (instant == null) {",
        "// Line_Reference 939:       return null;",
        "// Line_Reference 940:     }",
        "// Line_Reference 941: ",
        "// Line_Reference 942:     return new XMLGregorianCalendarImpl(GregorianCalendar.from(instant));",
        "// Line_Reference 943:   }",
        "// Line_Reference 944: ",
        "// Line_Reference 945:   private ZonedDateTime toZonedDateTime(XMLGregorianCalendar instant) {",
        "// Line_Reference 946:     if (instant == null) {",
        "// Line_Reference 947:       return null;",
        "// Line_Reference 948:     }",
        "// Line_Reference 949: ",
        "// Line_Reference 950:     return instant.toGregorianCalendar().toZonedDateTime();",
        "// Line_Reference 951:   }",
        "// Line_Reference 952: ",
        "// Line_Reference 953:   private <T> T unmarshallFromDocument(Document document, Class<T> type) throws SAMLException {",
        "// Line_Reference 954:     try {",
        "// Line_Reference 955:       JAXBContext context = JAXBContext.newInstance(type);",
        "// Line_Reference 956:       Unmarshaller unmarshaller = context.createUnmarshaller();",
        "// Line_Reference 957:       JAXBElement<T> element = unmarshaller.unmarshal(document, type);",
        "// Line_Reference 958:       return element.getValue();",
        "// Line_Reference 959:     } catch (JAXBException e) {",
        "// Line_Reference 960:       throw new SAMLException(\"Unable to unmarshall SAML response\", e);",
        "// Line_Reference 961:     }",
        "// Line_Reference 962:   }",
        "// Line_Reference 963: "
    ]
}
