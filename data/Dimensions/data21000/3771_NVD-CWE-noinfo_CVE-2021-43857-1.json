{
    "cve_id": "CVE-2021-43857",
    "cve_description": "Gerapy is a distributed crawler management framework. Gerapy prior to version 0.9.8 is vulnerable to remote code execution, and this issue is patched in version 0.9.8.",
    "cve_publish_date": "2021-12-27",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fix remote execute",
    "type_of_change": "Modification",
    "filename_of_changes": "views.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "56",
    "number_of_lines_deleted_vulnerable_to_cve": "40",
    "vulnerable_lines": [
        "// Line_Reference 5: import json, os, requests, time, pytz, pymongo",
        "// Line_Reference 176:         spiders = [{'name': spider, 'id': index + 1} for index, spider in enumerate(spiders)]",
        "// Line_Reference 245:         project['configuration'] = json.loads(project['configuration']) if project['configuration'] else None",
        "// Line_Reference 247: ",
        "// Line_Reference 252:         configuration = json.dumps(data.get('configuration'), ensure_ascii=False)",
        "// Line_Reference 254: ",
        "// Line_Reference 256:         project_name = re.sub('[\\!\\@\\#\\$\\;\\&\\*\\~\\\"\\'\\{\\}\\]\\[\\-\\+\\%\\^]+', '', project_name)",
        "// Line_Reference 258:         cmd = ' '.join(['gerapy', 'generate', project_name])",
        "// Line_Reference 259:         p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE)",
        "// Line_Reference 261: ",
        "// Line_Reference 297:         path = join(os.path.abspath(join(os.getcwd(), PROJECTS_FOLDER)), data['name'])",
        "// Line_Reference 337:         cmd = 'git clone {address} {target}'.format(address=address, target=join(PROJECTS_FOLDER, Path(address).stem))",
        "// Line_Reference 339:         p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE)",
        "// Line_Reference 342:         if stderr: logger.error(stderr)",
        "// Line_Reference 396:                 deployed_at = timezone.datetime.fromtimestamp(int(version), tz=pytz.timezone(TIME_ZONE))",
        "// Line_Reference 399:             deploy, result = Deploy.objects.update_or_create(client=client, project=project, deployed_at=deployed_at)",
        "// Line_Reference 449: ",
        "// Line_Reference 473: ",
        "// Line_Reference 486:             Project(name=project_name, description=description, built_at=built_at, egg=egg).save()",
        "// Line_Reference 529: ",
        "// Line_Reference 530:         args_cmd = ' '.join(",
        "// Line_Reference 531:             ['--{arg} {value}'.format(arg=arg, value=value) for arg, value in args.items()])",
        "// Line_Reference 532:         logger.debug('args cmd %s', args_cmd)",
        "// Line_Reference 533:         cmd = 'gerapy parse {args_cmd} {project_path} {spider_name}'.format(",
        "// Line_Reference 534:             args_cmd=args_cmd,",
        "// Line_Reference 535:             project_path=project_path,",
        "// Line_Reference 536:             spider_name=spider_name",
        "// Line_Reference 537:         )",
        "// Line_Reference 539:         p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)",
        "// Line_Reference 648: ",
        "// Line_Reference 666:         url = log_url(client.ip, client.port, project_name, spider_name, job_id)",
        "// Line_Reference 768:         data['configuration'] = json.dumps(data['configuration'], ensure_ascii=False)",
        "// Line_Reference 788:                                    configuration=json.dumps(data.get('configuration'), ensure_ascii=False),",
        "// Line_Reference 806:         data['configuration'] = json.dumps(data.get('configuration'), ensure_ascii=False)",
        "// Line_Reference 826:             DjangoJob.objects.filter(name=job_id).delete()",
        "// Line_Reference 830: ",
        "// Line_Reference 878:             jobs = DjangoJob.objects.filter(name=job_id)",
        "// Line_Reference 881:             if not jobs: continue",
        "// Line_Reference 882:             job = DjangoJob.objects.get(name=job_id)",
        "// Line_Reference 883:             executions = serialize('json', DjangoJobExecution.objects.filter(job=job))"
    ]
}
