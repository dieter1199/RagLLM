{
    "cve_id": "CVE-2024-23820",
    "cve_description": "OpenFGA, an authorization/permission engine, is vulnerable to a denial of service attack in versions prior to 1.4.3. In some scenarios that depend on the model and tuples used, a call to `ListObjects` may not  release memory properly. So when a sufficiently high number of those calls are executed, the OpenFGA server can create an `out of memory` error and terminate. Version 1.4.3 contains a patch for this issue.",
    "cve_publish_date": "2024-01-26",
    "cwe_id": "CWE-401",
    "cwe_name": "Missing Release of Memory after Effective Lifetime",
    "cwe_description": "The product does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory.",
    "commit_message": "fix: handle ReverseExpand channel closure correctly (#1315)",
    "type_of_change": "Modification",
    "filename_of_changes": "list_objects.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "111",
    "number_of_lines_deleted_vulnerable_to_cve": "113",
    "vulnerable_lines": [
        "// Line_Reference 221: \t\treverseExpandQuery := reverseexpand.NewReverseExpandQuery(q.datastore, typesys,",
        "// Line_Reference 235: \t\t\treverseExpandQuery.Execute(cancelCtx, &reverseexpand.ReverseExpandRequest{",
        "// Line_Reference 253: \t\tfor res := range reverseExpandResultsChan {",
        "// Line_Reference 254: \t\t\tif res.Err != nil {",
        "// Line_Reference 255: \t\t\t\terr := res.Err",
        "// Line_Reference 256: ",
        "// Line_Reference 257: \t\t\t\tif errors.Is(err, graph.ErrResolutionDepthExceeded) || errors.Is(err, graph.ErrCycleDetected) {",
        "// Line_Reference 258: \t\t\t\t\terr = serverErrors.AuthorizationModelResolutionTooComplex",
        "// Line_Reference 261: \t\t\t\tresultsChan <- ListObjectsResult{Err: err}",
        "// Line_Reference 262: \t\t\t\tbreak",
        "// Line_Reference 263: \t\t\t}",
        "// Line_Reference 264: ",
        "// Line_Reference 265: \t\t\tif !(maxResults == 0) && objectsFound.Load() >= maxResults {",
        "// Line_Reference 266: \t\t\t\tbreak",
        "// Line_Reference 267: \t\t\t}",
        "// Line_Reference 269: \t\t\tif res.ResultStatus == reverseexpand.NoFurtherEvalStatus {",
        "// Line_Reference 270: \t\t\t\tnoFurtherEvalRequiredCounter.Inc()",
        "// Line_Reference 271: \t\t\t\ttrySendObject(res.Object, &objectsFound, maxResults, resultsChan)",
        "// Line_Reference 272: \t\t\t\tcontinue",
        "// Line_Reference 273: \t\t\t}",
        "// Line_Reference 275: \t\t\tfurtherEvalRequiredCounter.Inc()",
        "// Line_Reference 276: ",
        "// Line_Reference 277: \t\t\twg.Add(1)",
        "// Line_Reference 278: \t\t\tgo func(res *reverseexpand.ReverseExpandResult) {",
        "// Line_Reference 279: \t\t\t\tdefer func() {",
        "// Line_Reference 280: \t\t\t\t\t<-concurrencyLimiterCh",
        "// Line_Reference 281: \t\t\t\t\twg.Done()",
        "// Line_Reference 282: \t\t\t\t}()",
        "// Line_Reference 283: ",
        "// Line_Reference 284: \t\t\t\tconcurrencyLimiterCh <- struct{}{}",
        "// Line_Reference 285: ",
        "// Line_Reference 286: \t\t\t\tresp, err := checkResolver.ResolveCheck(ctx, &graph.ResolveCheckRequest{",
        "// Line_Reference 287: \t\t\t\t\tStoreID:              req.GetStoreId(),",
        "// Line_Reference 288: \t\t\t\t\tAuthorizationModelID: req.GetAuthorizationModelId(),",
        "// Line_Reference 289: \t\t\t\t\tTupleKey:             tuple.NewTupleKey(res.Object, req.GetRelation(), req.GetUser()),",
        "// Line_Reference 290: \t\t\t\t\tContextualTuples:     req.GetContextualTuples().GetTupleKeys(),",
        "// Line_Reference 291: \t\t\t\t\tContext:              req.GetContext(),",
        "// Line_Reference 292: \t\t\t\t\tResolutionMetadata: &graph.ResolutionMetadata{",
        "// Line_Reference 293: \t\t\t\t\t\tDepth: q.resolveNodeLimit,",
        "// Line_Reference 294: \t\t\t\t\t},",
        "// Line_Reference 295: \t\t\t\t})",
        "// Line_Reference 296: \t\t\t\tif err != nil {",
        "// Line_Reference 297: \t\t\t\t\tif errors.Is(err, graph.ErrResolutionDepthExceeded) || errors.Is(err, graph.ErrCycleDetected) {",
        "// Line_Reference 298: \t\t\t\t\t\tresultsChan <- ListObjectsResult{Err: serverErrors.AuthorizationModelResolutionTooComplex}",
        "// Line_Reference 302: \t\t\t\t\tresultsChan <- ListObjectsResult{Err: err}",
        "// Line_Reference 303: \t\t\t\t\treturn",
        "// Line_Reference 304: \t\t\t\t}",
        "// Line_Reference 305: \t\t\t\tatomic.AddUint32(resolutionMetadata.QueryCount, resp.GetResolutionMetadata().DatastoreQueryCount)",
        "// Line_Reference 307: \t\t\t\tif resp.Allowed {",
        "// Line_Reference 308: \t\t\t\t\ttrySendObject(res.Object, &objectsFound, maxResults, resultsChan)",
        "// Line_Reference 310: \t\t\t}(res)",
        "// Line_Reference 361: \tfor {",
        "// Line_Reference 362: \t\tselect {",
        "// Line_Reference 363: \t\tcase <-timeoutCtx.Done():",
        "// Line_Reference 364: \t\t\tq.logger.WarnWithContext(",
        "// Line_Reference 365: \t\t\t\tctx, fmt.Sprintf(\"list objects timeout after %s\", q.listObjectsDeadline.String()),",
        "// Line_Reference 366: \t\t\t)",
        "// Line_Reference 367: \t\t\treturn &ListObjectsResponse{",
        "// Line_Reference 368: \t\t\t\tObjects:            objects,",
        "// Line_Reference 369: \t\t\t\tResolutionMetadata: *resolutionMetadata,",
        "// Line_Reference 370: \t\t\t}, nil",
        "// Line_Reference 371: ",
        "// Line_Reference 372: \t\tcase result, channelOpen := <-resultsChan:",
        "// Line_Reference 373: \t\t\tif result.Err != nil {",
        "// Line_Reference 374: \t\t\t\tif errors.Is(result.Err, serverErrors.AuthorizationModelResolutionTooComplex) {",
        "// Line_Reference 375: \t\t\t\t\treturn nil, result.Err",
        "// Line_Reference 376: \t\t\t\t}",
        "// Line_Reference 378: \t\t\t\tif errors.Is(result.Err, condition.ErrEvaluationFailed) {",
        "// Line_Reference 379: \t\t\t\t\terrs = multierror.Append(errs, result.Err)",
        "// Line_Reference 380: \t\t\t\t\tcontinue",
        "// Line_Reference 381: \t\t\t\t}",
        "// Line_Reference 382: ",
        "// Line_Reference 383: \t\t\t\tif errors.Is(result.Err, context.Canceled) || errors.Is(result.Err, context.DeadlineExceeded) {",
        "// Line_Reference 384: \t\t\t\t\tcontinue",
        "// Line_Reference 385: \t\t\t\t}",
        "// Line_Reference 386: ",
        "// Line_Reference 387: \t\t\t\treturn nil, serverErrors.HandleError(\"\", result.Err)",
        "// Line_Reference 390: \t\t\tif !channelOpen {",
        "// Line_Reference 391: \t\t\t\tif len(objects) < int(maxResults) && errs.ErrorOrNil() != nil {",
        "// Line_Reference 392: \t\t\t\t\treturn nil, errs",
        "// Line_Reference 393: \t\t\t\t}",
        "// Line_Reference 395: \t\t\t\treturn &ListObjectsResponse{",
        "// Line_Reference 396: \t\t\t\t\tObjects:            objects,",
        "// Line_Reference 397: \t\t\t\t\tResolutionMetadata: *resolutionMetadata,",
        "// Line_Reference 398: \t\t\t\t}, nil",
        "// Line_Reference 400: \t\t\tobjects = append(objects, result.ObjectID)",
        "// Line_Reference 427: \tfor {",
        "// Line_Reference 428: \t\tselect {",
        "// Line_Reference 429: \t\tcase <-timeoutCtx.Done():",
        "// Line_Reference 430: \t\t\tq.logger.WarnWithContext(",
        "// Line_Reference 431: \t\t\t\tctx, fmt.Sprintf(\"list objects timeout after %s\", q.listObjectsDeadline.String()),",
        "// Line_Reference 432: \t\t\t)",
        "// Line_Reference 433: \t\t\treturn resolutionMetadata, nil",
        "// Line_Reference 434: ",
        "// Line_Reference 435: \t\tcase result, channelOpen := <-resultsChan:",
        "// Line_Reference 436: \t\t\tif !channelOpen {",
        "// Line_Reference 437: \t\t\t\t// Channel closed! No more results.",
        "// Line_Reference 438: \t\t\t\treturn resolutionMetadata, nil",
        "// Line_Reference 441: \t\t\tif result.Err != nil {",
        "// Line_Reference 442: \t\t\t\tif errors.Is(result.Err, serverErrors.AuthorizationModelResolutionTooComplex) {",
        "// Line_Reference 443: \t\t\t\t\treturn nil, result.Err",
        "// Line_Reference 444: \t\t\t\t}",
        "// Line_Reference 445: ",
        "// Line_Reference 446: \t\t\t\tif errors.Is(result.Err, condition.ErrEvaluationFailed) {",
        "// Line_Reference 447: \t\t\t\t\treturn nil, serverErrors.ValidationError(result.Err)",
        "// Line_Reference 448: \t\t\t\t}",
        "// Line_Reference 449: ",
        "// Line_Reference 450: \t\t\t\treturn nil, serverErrors.HandleError(\"\", result.Err)",
        "// Line_Reference 453: \t\t\tif err := srv.Send(&openfgav1.StreamedListObjectsResponse{",
        "// Line_Reference 454: \t\t\t\tObject: result.ObjectID,",
        "// Line_Reference 455: \t\t\t}); err != nil {",
        "// Line_Reference 456: \t\t\t\treturn nil, serverErrors.NewInternalError(\"\", err)",
        "// Line_Reference 457: \t\t\t}"
    ]
}
