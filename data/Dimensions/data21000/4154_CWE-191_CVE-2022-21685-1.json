{
    "cve_id": "CVE-2022-21685",
    "cve_description": "Frontier is Substrate's Ethereum compatibility layer. Prior to commit number `8a93fdc6c9f4eb1d2f2a11b7ff1d12d70bf5a664`, a bug in Frontier's MODEXP precompile implementation can cause an integer underflow in certain conditions. This will cause a node crash for debug builds. For release builds (and production WebAssembly binaries), the impact is limited as it can only cause a normal EVM out-of-gas. Users who do not use MODEXP precompile in their runtime are not impacted. A patch is available in pull request #549.",
    "cve_publish_date": "2022-01-14",
    "cwe_id": "CWE-191",
    "cwe_name": "Integer Underflow (Wrap or Wraparound)",
    "cwe_description": "The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.",
    "commit_message": "Handle 0 exponent with fudged length correctly in ModExp (#549)\n\n* Handle 0 exponent with fudged length correctly in ModExp\r\n\r\n* cargo fmt\r\n\r\n* Revert to following EIP-2565 strictly, subtract after adding terms to prevent underflow\r\n\r\n* Update frame/evm/precompile/modexp/src/lib.rs\r\n\r\nClean up test case\r\n\r\nCo-authored-by: Wei Tang <accounts@that.world>\r\n\r\n* More revert\r\n\r\n* cargo fmt\r\n\r\n* Prefer expect to match\r\n\r\nCo-authored-by: Wei Tang <accounts@that.world>",
    "type_of_change": "Modification",
    "filename_of_changes": "lib.rs",
    "code_language": "Rust",
    "number_of_lines_added_for_mitigation": "51",
    "number_of_lines_deleted_vulnerable_to_cve": "5",
    "vulnerable_lines": [
        "// Line_Reference 50: \t\t// TODO: prevent/handle overflow",
        "// Line_Reference 67: \t\t\t\t(8 * (exp_length - 32)) + ((exponent.bitand(max_256_bit_uint)).bits() - 1);",
        "// Line_Reference 92: // NOTE: input sizes are arbitrarily large (up to 256 bits), with the expectation",
        "// Line_Reference 136: \t\t\t\texit_status: ExitError::Other(\"unreasonably large exponent length\".into()),",
        "// Line_Reference 165: \t\t\t// TODO: we could technically avoid reading base first..."
    ]
}
