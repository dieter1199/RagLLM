{
    "cve_id": "CVE-2021-43816",
    "cve_description": "containerd is an open source container runtime. On installations using SELinux, such as EL8 (CentOS, RHEL), Fedora, or SUSE MicroOS, with containerd since v1.5.0-beta.0 as the backing container runtime interface (CRI), an unprivileged pod scheduled to the node may bind mount, via hostPath volume, any privileged, regular file on disk for complete read/write access (sans delete). Such is achieved by placing the in-container location of the hostPath volume mount at either `/etc/hosts`, `/etc/hostname`, or `/etc/resolv.conf`. These locations are being relabeled indiscriminately to match the container process-label which effectively elevates permissions for savvy containers that would not normally be able to access privileged host files. This issue has been resolved in version 1.5.9. Users are advised to upgrade as soon as possible.",
    "cve_publish_date": "2022-01-05",
    "cwe_id": "CWE-281",
    "cwe_name": "Improper Preservation of Permissions",
    "cwe_description": "The product does not preserve permissions or incorrectly preserves permissions when copying, restoring, or sharing objects, which can cause them to have less restrictive permissions than intended.",
    "commit_message": "Revert \"[cri] label etc files for selinux containers\"\n\nThis reverts commit a731039238c62be081eb8c31525b988415745eea.",
    "type_of_change": "Modification",
    "filename_of_changes": "spec_linux.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "0",
    "number_of_lines_deleted_vulnerable_to_cve": "24",
    "vulnerable_lines": [
        "// Line_Reference 228: const (",
        "// Line_Reference 229: \tetcHosts       = \"/etc/hosts\"",
        "// Line_Reference 230: \tetcHostname    = \"/etc/hostname\"",
        "// Line_Reference 231: \tresolvConfPath = \"/etc/resolv.conf\"",
        "// Line_Reference 232: )",
        "// Line_Reference 233: ",
        "// Line_Reference 234: // WithRelabeledContainerMounts relabels the default container mounts for files in /etc",
        "// Line_Reference 235: func WithRelabeledContainerMounts(mountLabel string) oci.SpecOpts {",
        "// Line_Reference 236: \treturn func(ctx context.Context, client oci.Client, _ *containers.Container, s *runtimespec.Spec) (err error) {",
        "// Line_Reference 237: \t\tif mountLabel == \"\" {",
        "// Line_Reference 238: \t\t\treturn nil",
        "// Line_Reference 239: \t\t}",
        "// Line_Reference 240: \t\tfor _, m := range s.Mounts {",
        "// Line_Reference 241: \t\t\tswitch m.Destination {",
        "// Line_Reference 242: \t\t\tcase etcHosts, etcHostname, resolvConfPath:",
        "// Line_Reference 243: \t\t\t\tif err := label.Relabel(m.Source, mountLabel, false); err != nil {",
        "// Line_Reference 244: \t\t\t\t\treturn err",
        "// Line_Reference 245: \t\t\t\t}",
        "// Line_Reference 246: \t\t\t}",
        "// Line_Reference 247: \t\t}",
        "// Line_Reference 248: \t\treturn nil",
        "// Line_Reference 249: \t}",
        "// Line_Reference 250: }",
        "// Line_Reference 251: "
    ]
}
