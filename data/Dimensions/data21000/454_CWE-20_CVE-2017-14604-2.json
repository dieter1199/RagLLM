{
    "cve_id": "CVE-2017-14604",
    "cve_description": "GNOME Nautilus before 3.23.90 allows attackers to spoof a file type by using the .desktop file extension, as demonstrated by an attack in which a .desktop file's Name field ends in .pdf but this file's Exec field launches a malicious \"sh -c\" command. In other words, Nautilus provides no UI indication that a file actually has the potentially unsafe .desktop extension; instead, the UI only shows the .pdf extension. One (slightly) mitigating factor is that an attack requires the .desktop file to have execute permission. The solution is to ask the user to confirm that the file is supposed to be treated as a .desktop file, and then remember the user's answer in the metadata::trusted field.",
    "cve_publish_date": "2017-09-20",
    "cwe_id": "CWE-20",
    "cwe_name": "Improper Input Validation",
    "cwe_description": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.",
    "commit_message": "mime-actions: use file metadata for trusting desktop files\n\nCurrently we only trust desktop files that have the executable bit\nset, and don't replace the displayed icon or the displayed name until\nit's trusted, which prevents for running random programs by a malicious\ndesktop file.\n\nHowever, the executable permission is preserved if the desktop file\ncomes from a compressed file.\n\nTo prevent this, add a metadata::trusted metadata to the file once the\nuser acknowledges the file as trusted. This adds metadata to the file,\nwhich cannot be added unless it has access to the computer.\n\nAlso remove the SHEBANG \"trusted\" content we were putting inside the\ndesktop file, since that doesn't add more security since it can come\nwith the file itself.\n\nhttps://bugzilla.gnome.org/show_bug.cgi?id=777991",
    "type_of_change": "Modification",
    "filename_of_changes": "nautilus-file-operations.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "31",
    "number_of_lines_deleted_vulnerable_to_cve": "122",
    "vulnerable_lines": [
        "// Line_Reference 238: mark_desktop_file_trusted (CommonJob    *common,",
        "// Line_Reference 239:                            GCancellable *cancellable,",
        "// Line_Reference 240:                            GFile        *file,",
        "// Line_Reference 241:                            gboolean      interactive);",
        "// Line_Reference 5293:             mark_desktop_file_trusted (job,",
        "// Line_Reference 5294:                                        job->cancellable,",
        "// Line_Reference 5295:                                        dest,",
        "// Line_Reference 5296:                                        FALSE);",
        "// Line_Reference 7890: mark_trusted_task_done (GObject      *source_object,",
        "// Line_Reference 7891:                         GAsyncResult *res,",
        "// Line_Reference 7892:                         gpointer      user_data)",
        "// Line_Reference 7910: mark_desktop_file_trusted (CommonJob    *common,",
        "// Line_Reference 7911:                            GCancellable *cancellable,",
        "// Line_Reference 7912:                            GFile        *file,",
        "// Line_Reference 7913:                            gboolean      interactive)",
        "// Line_Reference 7915:     char *contents, *new_contents;",
        "// Line_Reference 7916:     gsize length, new_length;",
        "// Line_Reference 7923:     error = NULL;",
        "// Line_Reference 7924:     if (!g_file_load_contents (file,",
        "// Line_Reference 7925:                                cancellable,",
        "// Line_Reference 7926:                                &contents, &length,",
        "// Line_Reference 7927:                                NULL, &error))",
        "// Line_Reference 7928:     {",
        "// Line_Reference 7929:         if (interactive)",
        "// Line_Reference 7930:         {",
        "// Line_Reference 7931:             response = run_error (common,",
        "// Line_Reference 7932:                                   g_strdup (_(\"Unable to mark launcher trusted (executable)\")),",
        "// Line_Reference 7933:                                   error->message,",
        "// Line_Reference 7934:                                   NULL,",
        "// Line_Reference 7935:                                   FALSE,",
        "// Line_Reference 7936:                                   CANCEL, RETRY,",
        "// Line_Reference 7937:                                   NULL);",
        "// Line_Reference 7938:         }",
        "// Line_Reference 7939:         else",
        "// Line_Reference 7940:         {",
        "// Line_Reference 7941:             response = 0;",
        "// Line_Reference 7942:         }",
        "// Line_Reference 7943: ",
        "// Line_Reference 7944: ",
        "// Line_Reference 7945:         if (response == 0 || response == GTK_RESPONSE_DELETE_EVENT)",
        "// Line_Reference 7946:         {",
        "// Line_Reference 7947:             abort_job (common);",
        "// Line_Reference 7948:         }",
        "// Line_Reference 7949:         else if (response == 1)",
        "// Line_Reference 7950:         {",
        "// Line_Reference 7951:             goto retry;",
        "// Line_Reference 7952:         }",
        "// Line_Reference 7953:         else",
        "// Line_Reference 7954:         {",
        "// Line_Reference 7955:             g_assert_not_reached ();",
        "// Line_Reference 7956:         }",
        "// Line_Reference 7957: ",
        "// Line_Reference 7958:         goto out;",
        "// Line_Reference 7959:     }",
        "// Line_Reference 7960: ",
        "// Line_Reference 7961:     if (!g_str_has_prefix (contents, \"#!\"))",
        "// Line_Reference 7962:     {",
        "// Line_Reference 7963:         new_length = length + strlen (TRUSTED_SHEBANG);",
        "// Line_Reference 7964:         new_contents = g_malloc (new_length);",
        "// Line_Reference 7965: ",
        "// Line_Reference 7966:         strcpy (new_contents, TRUSTED_SHEBANG);",
        "// Line_Reference 7967:         memcpy (new_contents + strlen (TRUSTED_SHEBANG),",
        "// Line_Reference 7968:                 contents, length);",
        "// Line_Reference 7969: ",
        "// Line_Reference 7970:         if (!g_file_replace_contents (file,",
        "// Line_Reference 7971:                                       new_contents,",
        "// Line_Reference 7972:                                       new_length,",
        "// Line_Reference 7973:                                       NULL,",
        "// Line_Reference 7974:                                       FALSE, 0,",
        "// Line_Reference 7975:                                       NULL, cancellable, &error))",
        "// Line_Reference 7976:         {",
        "// Line_Reference 7977:             g_free (contents);",
        "// Line_Reference 7978:             g_free (new_contents);",
        "// Line_Reference 7979: ",
        "// Line_Reference 7980:             if (interactive)",
        "// Line_Reference 7981:             {",
        "// Line_Reference 7982:                 response = run_error (common,",
        "// Line_Reference 7983:                                       g_strdup (_(\"Unable to mark launcher trusted (executable)\")),",
        "// Line_Reference 7984:                                       error->message,",
        "// Line_Reference 7985:                                       NULL,",
        "// Line_Reference 7986:                                       FALSE,",
        "// Line_Reference 7987:                                       CANCEL, RETRY,",
        "// Line_Reference 7988:                                       NULL);",
        "// Line_Reference 7989:             }",
        "// Line_Reference 7990:             else",
        "// Line_Reference 7991:             {",
        "// Line_Reference 7992:                 response = 0;",
        "// Line_Reference 7993:             }",
        "// Line_Reference 7994: ",
        "// Line_Reference 7995:             if (response == 0 || response == GTK_RESPONSE_DELETE_EVENT)",
        "// Line_Reference 7996:             {",
        "// Line_Reference 7997:                 abort_job (common);",
        "// Line_Reference 7998:             }",
        "// Line_Reference 7999:             else if (response == 1)",
        "// Line_Reference 8000:             {",
        "// Line_Reference 8001:                 goto retry;",
        "// Line_Reference 8002:             }",
        "// Line_Reference 8003:             else",
        "// Line_Reference 8004:             {",
        "// Line_Reference 8005:                 g_assert_not_reached ();",
        "// Line_Reference 8006:             }",
        "// Line_Reference 8007: ",
        "// Line_Reference 8008:             goto out;",
        "// Line_Reference 8009:         }",
        "// Line_Reference 8010:         g_free (new_contents);",
        "// Line_Reference 8011:     }",
        "// Line_Reference 8012:     g_free (contents);",
        "// Line_Reference 8104: mark_trusted_task_thread_func (GTask        *task,",
        "// Line_Reference 8105:                                gpointer      source_object,",
        "// Line_Reference 8106:                                gpointer      task_data,",
        "// Line_Reference 8107:                                GCancellable *cancellable)",
        "// Line_Reference 8116:     mark_desktop_file_trusted (common,",
        "// Line_Reference 8117:                                cancellable,",
        "// Line_Reference 8118:                                job->file,",
        "// Line_Reference 8119:                                job->interactive);",
        "// Line_Reference 8123: nautilus_file_mark_desktop_file_trusted (GFile              *file,",
        "// Line_Reference 8124:                                          GtkWindow          *parent_window,",
        "// Line_Reference 8125:                                          gboolean            interactive,",
        "// Line_Reference 8126:                                          NautilusOpCallback  done_callback,",
        "// Line_Reference 8127:                                          gpointer            done_callback_data)",
        "// Line_Reference 8138:     task = g_task_new (NULL, NULL, mark_trusted_task_done, job);",
        "// Line_Reference 8140:     g_task_run_in_thread (task, mark_trusted_task_thread_func);"
    ]
}
