* @file lpc546xx_eth_driver.c
* @brief LPC54608/LPC54618/LPC54628 Ethernet MAC driver
* Copyright (C) 2010-2020 Oryx Embedded SARL. All rights reserved.
* @version 2.0.0
#include "drivers/mac/lpc546xx_eth_driver.h"
static uint8_t txBuffer[LPC546XX_ETH_TX_BUFFER_COUNT][LPC546XX_ETH_TX_BUFFER_SIZE];
static uint8_t rxBuffer[LPC546XX_ETH_RX_BUFFER_COUNT][LPC546XX_ETH_RX_BUFFER_SIZE];
static Lpc546xxTxDmaDesc txDmaDesc[LPC546XX_ETH_TX_BUFFER_COUNT];
static Lpc546xxRxDmaDesc rxDmaDesc[LPC546XX_ETH_RX_BUFFER_COUNT];
static uint8_t txBuffer[LPC546XX_ETH_TX_BUFFER_COUNT][LPC546XX_ETH_TX_BUFFER_SIZE]
static uint8_t rxBuffer[LPC546XX_ETH_RX_BUFFER_COUNT][LPC546XX_ETH_RX_BUFFER_SIZE]
static Lpc546xxTxDmaDesc txDmaDesc[LPC546XX_ETH_TX_BUFFER_COUNT]
static Lpc546xxRxDmaDesc rxDmaDesc[LPC546XX_ETH_RX_BUFFER_COUNT]
* @brief LPC546xx Ethernet MAC driver
const NicDriver lpc546xxEthDriver =
lpc546xxEthInit,
lpc546xxEthTick,
lpc546xxEthEnableIrq,
lpc546xxEthDisableIrq,
lpc546xxEthEventHandler,
lpc546xxEthSendPacket,
lpc546xxEthUpdateMacAddrFilter,
lpc546xxEthUpdateMacConfig,
lpc546xxEthWritePhyReg,
lpc546xxEthReadPhyReg,
* @brief LPC546xx Ethernet MAC initialization
error_t lpc546xxEthInit(NetInterface *interface)
TRACE_INFO("Initializing LPC546xx Ethernet MAC...\r\n");
lpc546xxEthInitGpio(interface);
ENET_DMA_CH_DMA_CHX_RX_CTRL_RBSZ(LPC546XX_ETH_RX_BUFFER_SIZE / 4);
lpc546xxEthInitDmaDesc(interface);
NVIC_SetPriorityGrouping(LPC546XX_ETH_IRQ_PRIORITY_GROUPING);
NVIC_SetPriority(ETHERNET_IRQn, NVIC_EncodePriority(LPC546XX_ETH_IRQ_PRIORITY_GROUPING,
LPC546XX_ETH_IRQ_GROUP_PRIORITY, LPC546XX_ETH_IRQ_SUB_PRIORITY));
//LPCXpresso54608 evaluation board?
#if defined(USE_LPCXPRESSO_54608)
void lpc546xxEthInitGpio(NetInterface *interface)
//Configure ENET_TXD1 (PA0_17)
//Configure ENET_TXD0 (PA4_8)
//Configure ENET_RX_DV (PA4_10)
//Configure ENET_RXD0 (PA4_11)
//Configure ENET_RXD1 (PA4_12)
//Configure ENET_TX_EN (PA4_13)
//Configure ENET_RX_CLK (PA4_14)
//Configure ENET_MDC (PA4_15)
//Configure ENET_MDIO (PA4_16)
//Configure ENET_RST as an output
GPIO_WritePinOutput(GPIO, 2, 26, 0);
GPIO_WritePinOutput(GPIO, 2, 26, 1);
void lpc546xxEthInitDmaDesc(NetInterface *interface)
for(i = 0; i < LPC546XX_ETH_TX_BUFFER_COUNT; i++)
for(i = 0; i < LPC546XX_ETH_RX_BUFFER_COUNT; i++)
ENET->DMA_CH[0].DMA_CHX_TXDESC_RING_LENGTH = LPC546XX_ETH_TX_BUFFER_COUNT - 1;
ENET->DMA_CH[0].DMA_CHX_RXDESC_RING_LENGTH = LPC546XX_ETH_RX_BUFFER_COUNT - 1;
* @brief LPC546xx Ethernet MAC timer handler
void lpc546xxEthTick(NetInterface *interface)
void lpc546xxEthEnableIrq(NetInterface *interface)
void lpc546xxEthDisableIrq(NetInterface *interface)
* @brief LPC546xx Ethernet MAC interrupt service routine
* @brief LPC546xx Ethernet MAC event handler
void lpc546xxEthEventHandler(NetInterface *interface)
error = lpc546xxEthReceivePacket(interface);
error_t lpc546xxEthSendPacket(NetInterface *interface,
if(length > LPC546XX_ETH_TX_BUFFER_SIZE)
if(++txIndex >= LPC546XX_ETH_TX_BUFFER_COUNT)
error_t lpc546xxEthReceivePacket(NetInterface *interface)
n = MIN(n, LPC546XX_ETH_RX_BUFFER_SIZE);
if(++rxIndex >= LPC546XX_ETH_RX_BUFFER_COUNT)
error_t lpc546xxEthUpdateMacAddrFilter(NetInterface *interface)
error_t lpc546xxEthUpdateMacConfig(NetInterface *interface)
void lpc546xxEthWritePhyReg(uint8_t opcode, uint8_t phyAddr,
uint16_t lpc546xxEthReadPhyReg(uint8_t opcode, uint8_t phyAddr,