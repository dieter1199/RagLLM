/* Verify the ASCONF packet before we process it.  */
int sctp_verify_asconf(const struct sctp_association *asoc,
struct sctp_paramhdr *param_hdr, void *chunk_end,
struct sctp_paramhdr **errp) {
sctp_addip_param_t *asconf_param;
int length, plen;
param.v = (sctp_paramhdr_t *) param_hdr;
while (param.v <= chunk_end - sizeof(sctp_paramhdr_t)) {
length = ntohs(param.p->length);
*errp = param.p;
if (param.v > chunk_end - length ||
length < sizeof(sctp_paramhdr_t))
return 0;
asconf_param = (sctp_addip_param_t *)param.v;
plen = ntohs(asconf_param->param_hdr.length);
if (plen < sizeof(sctp_addip_param_t) +
sizeof(sctp_paramhdr_t))
return 0;
return 0;
break;
param.v += WORD_ROUND(length);
if (param.v != chunk_end)
return 0;
return 1;
int	all_param_pass = 1;
while (chunk_len > 0) {
asconf_param);
if (SCTP_ERROR_NO_ERROR != err_code)
all_param_pass = 0;
sctp_add_asconf_response(asconf_ack,
asconf_param->crr_id, err_code,
asconf_param);
if (SCTP_ERROR_RSRC_LOW == err_code)
/* Move to the next ASCONF param. */
length = ntohs(asconf_param->param_hdr.length);
asconf_param = (void *)asconf_param + length;
chunk_len -= length;
