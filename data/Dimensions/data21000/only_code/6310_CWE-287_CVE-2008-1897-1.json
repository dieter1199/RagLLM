static int match(struct sockaddr_in *sin, unsigned short callno, unsigned short dcallno, const struct chan_iax2_pvt *cur)
if ((cur->peercallno == callno) ||
((dcallno == cur->callno) && !cur->peercallno)) {
static int __find_callno(unsigned short callno, unsigned short dcallno, struct sockaddr_in *sin, int new, int sockfd, int return_locked)
if (match(sin, callno, dcallno, iaxs[x])) {
if (match(sin, callno, dcallno, iaxs[x])) {
for (x=1;x<TRUNK_CALL_START;x++) {
if (!iaxs[x] && ((now.tv_sec - lastused[x].tv_sec) > MIN_REUSE_TIME)) break;
if (x >= TRUNK_CALL_START) {
static int find_callno(unsigned short callno, unsigned short dcallno, struct sockaddr_in *sin, int new, int sockfd) {
return __find_callno(callno, dcallno, sin, new, sockfd, 0);
static int find_callno_locked(unsigned short callno, unsigned short dcallno, struct sockaddr_in *sin, int new, int sockfd) {
return __find_callno(callno, dcallno, sin, new, sockfd, 1);
fr->callno = find_callno_locked(callno & ~IAX_FLAG_FULL, 0, sin, NEW_PREVENT, sockfd);
fr->callno = find_callno(ntohs(vh->callno) & ~0x8000, dcallno, &sin, new, fd);
fr->callno = find_callno(ntohs(mh->callno) & ~IAX_FLAG_FULL, dcallno, &sin, new, fd);
reg->callno = find_callno_locked(0, 0, &reg->addr, NEW_FORCE, defaultsockfd);
callno = find_callno_locked(0, 0, &sin, NEW_FORCE, cai.sockfd);
peer->callno = find_callno(0, 0, &peer->addr, NEW_FORCE, peer->sockfd);
callno = find_callno_locked(0, 0, &sin, NEW_FORCE, cai.sockfd);
callno = find_callno_locked(0, 0, &sin, NEW_FORCE, cai.sockfd);