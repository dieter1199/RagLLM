$parsed_url = Helpers::explode_url($file);
[$this->_protocol, $this->_base_host, $this->_base_path, $filename] = $parsed_url;
$file = Helpers::build_url($this->_protocol, $this->_base_host, $this->_base_path, $filename);
$options = $this->_dompdf->getOptions();
// Download the remote file
if (!$options->isRemoteEnabled() && ($this->_protocol !== "" && $this->_protocol !== "file://")) {
Helpers::record_warnings(E_USER_WARNING, "Remote CSS resource '$file' referenced, but remote file download is disabled.", __FILE__, __LINE__);
return;
}
if ($this->_protocol === "" || $this->_protocol === "file://") {
$realfile = realpath($file);
$rootDir = realpath($options->getRootDir());
if (strpos($realfile, $rootDir) !== 0) {
$chroot = $options->getChroot();
$chrootValid = false;
foreach ($chroot as $chrootPath) {
$chrootPath = realpath($chrootPath);
if ($chrootPath !== false && strpos($realfile, $chrootPath) === 0) {
$chrootValid = true;
break;
}
}
if ($chrootValid !== true) {
Helpers::record_warnings(E_USER_WARNING, "Permission denied on $file. The file could not be found under the paths specified by Options::chroot.", __FILE__, __LINE__);
if (!$realfile) {
Helpers::record_warnings(E_USER_WARNING, "File '$realfile' not found.", __FILE__, __LINE__);
return;
}
$file = $realfile;
$parsed_url = Helpers::explode_url($val);
if (($parsed_url["protocol"] === "" || $parsed_url["protocol"] === "file://") && ($this->_protocol === "" || $this->_protocol === "file://")) {
$path = realpath($path);
// If realpath returns FALSE then specifically state that there is no background image
if ($path === false) {
$path = "none";
}
$url = $this->resolve_url($url);
$this->load_css_file($url);
return $rootDir . self::DEFAULT_STYLESHEET;
