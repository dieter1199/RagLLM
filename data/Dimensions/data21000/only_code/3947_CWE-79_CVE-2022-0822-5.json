IShortcodeService shortcodeService
_pageTitleBuilder.SetFixedTitle(new HtmlString(await RenderAsync(aspect.PageTitle, contentItem)));
Content = await RenderAsync(aspect.MetaDescription, contentItem)
Content = await RenderAsync(aspect.MetaKeywords, contentItem)
Content = await RenderAsync(aspect.MetaRobots, contentItem)
await RenderAsync(customMetaTag.Name, contentItem),
await RenderAsync(customMetaTag.Property, contentItem),
await RenderAsync(customMetaTag.Content, contentItem),
await RenderAsync(customMetaTag.HttpEquiv, contentItem),
await RenderAsync(customMetaTag.Charset, contentItem)));
Content = await RenderAsync(aspect.OpenGraphType, contentItem)
Content = await RenderAsync(aspect.OpenGraphTitle, contentItem)
Content = await RenderAsync(aspect.OpenGraphDescription, contentItem)
Content = await RenderAsync(aspect.OpenGraphImage, contentItem)
Content = await RenderAsync(aspect.OpenGraphImageAlt, contentItem)
Content = await RenderAsync(aspect.OpenGraphUrl, contentItem)
Content = await RenderAsync(aspect.OpenGraphSiteName, contentItem)
Content = await RenderAsync(aspect.OpenGraphAppId, contentItem)
Content = await RenderAsync(aspect.OpenGraphLocale, contentItem)
Content = await RenderAsync(aspect.TwitterCard, contentItem)
Content = await RenderAsync(aspect.TwitterSite, contentItem)
Content = await RenderAsync(aspect.TwitterTitle, contentItem)
Content = await RenderAsync(aspect.TwitterDescription, contentItem)
Content = await RenderAsync(aspect.TwitterImage, contentItem)
Content = await RenderAsync(aspect.TwitterImageAlt, contentItem)
Content = await RenderAsync(aspect.TwitterCreator, contentItem)
Content = await RenderAsync(aspect.TwitterUrl, contentItem)
_resourceManager.RegisterHeadScript(new HtmlString($"<script type=\"application/ld+json\">\n{aspect.GoogleSchema}\n</script>"));
private ValueTask<string> RenderAsync(string template, ContentItem contentItem)
=> _shortcodeService.ProcessAsync(template,
new Context
{
["ContentItem"] = contentItem
});
