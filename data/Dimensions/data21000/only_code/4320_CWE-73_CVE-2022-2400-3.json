/**
* Protocol whitelist
*
* Protocols and PHP wrappers allowed in URLs. Full support is not
* guaranteed for the protocols/wrappers contained in this array.
*
* @var array
*/
private $allowedProtocols = ["", "file://", "http://", "https://"];
if (file_exists($versionFile) && ($version = trim(file_get_contents($versionFile))) !== false && $version !== '$Format:<%h>$') {
$this->version = sprintf('dompdf %s', $version);
if (!in_array($protocol, $this->allowedProtocols, true)) {
if (!$this->options->isRemoteEnabled() && ($protocol !== "" && $protocol !== "file://")) {
throw new Exception("Remote file requested, but remote file download is disabled.");
}
if ($protocol === "" || $protocol === "file://") {
$realfile = realpath($uri);
$chroot = $this->options->getChroot();
$chrootValid = false;
foreach ($chroot as $chrootPath) {
$chrootPath = realpath($chrootPath);
if ($chrootPath !== false && strpos($realfile, $chrootPath) === 0) {
$chrootValid = true;
break;
}
}
if ($chrootValid !== true) {
throw new Exception("Permission denied on $file. The file could not be found under the paths specified by Options::chroot.");
}
$ext = strtolower(pathinfo($realfile, PATHINFO_EXTENSION));
throw new Exception("Permission denied on $file. This file extension is forbidden");
if (!$realfile) {
throw new Exception("File '$file' not found.");
$uri = $realfile;
$this->css->load_css_file($url, Stylesheet::ORIG_AUTHOR);
