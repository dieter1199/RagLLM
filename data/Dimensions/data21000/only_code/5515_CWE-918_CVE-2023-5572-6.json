import { isAuthenticated } from "#lib/middleware";
import { procedure, router } from "#lib/trpc";
import * as errors from "#lib/errors";
import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
Variant,
import { ObjectId, zodId } from "#lib/mongo";
type VariantsEvent =
| {
action: "create";
data: Variant & { id: string };
}
| {
action: "update";
data: Partial<Variant> & { id: string };
}
| {
action: "delete";
data: { id: string };
};
const publishEvent = createEventPublisher<VariantsEvent>(
(workspaceId) => `variants:${workspaceId}`
);
publishEvent(ctx, `${ctx.auth.workspaceId}`, {
publishEvent(ctx, `${ctx.auth.workspaceId}`, { action: "update", data: input });
publishEvent(ctx, `${ctx.auth.workspaceId}`, { action: "delete", data: input });
return createEventSubscription<VariantsEvent>(ctx, `variants:${ctx.auth.workspaceId}`);
export type { VariantsEvent };
