import { isAuthenticated } from "#lib/middleware";
import { procedure, router } from "#lib/trpc";
import * as errors from "#lib/errors";
import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
import { Transformer, getGitDataCollection, transformer } from "#database";
import { ObjectId, zodId } from "#lib/mongo";
import { getTransformersCollection } from "#database/transformers";
type TransformersEvent =
| {
action: "create";
data: Transformer & { id: string };
}
| {
action: "delete";
data: { id: string };
};
const publishEvent = createEventPublisher<TransformersEvent>(
(workspaceId) => `transformers:${workspaceId}`
);
publishEvent(ctx, `${ctx.auth.workspaceId}`, {
publishEvent(ctx, `${ctx.auth.workspaceId}`, { action: "delete", data: input });
.output(z.array(transformer.extend({ inUse: z.boolean().optional() })))
return transformers.map(({ _id, workspaceId, ...transformerData }) => {
return createEventSubscription<TransformersEvent>(ctx, `transformers:${ctx.auth.workspaceId}`);
export type { TransformersEvent };
