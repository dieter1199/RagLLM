NSDictionary *content = event.content;
NSString *roomId, *sessionId, *sessionKey;
MXJSONModelSetString(roomId, content[@"room_id"]);
MXJSONModelSetString(sessionId, content[@"session_id"]);
MXJSONModelSetString(sessionKey, content[@"session_key"]);
if (!roomId || !sessionId || !sessionKey)
MXLogDebug(@"[MXMegolmDecryption] onRoomKeyEvent: ERROR: Key event is missing fields");
NSString *senderKey = event.senderKey;
if (!senderKey)
{
MXLogDebug(@"[MXMegolmDecryption] onRoomKeyEvent: ERROR: Key event has no sender key (not encrypted?)");
return;
}
NSArray<NSString*> *forwardingKeyChain;
BOOL exportFormat = NO;
NSDictionary *keysClaimed;
BOOL sharedHistory = NO;
if (content[kMXSharedHistoryKeyName] != nil)
{
MXJSONModelSetBoolean(sharedHistory, content[kMXSharedHistoryKeyName]);
}
if (event.eventType == MXEventTypeRoomForwardedKey)
{
exportFormat = YES;
MXJSONModelSetArray(forwardingKeyChain, content[@"forwarding_curve25519_key_chain"]);
if (!forwardingKeyChain)
{
forwardingKeyChain = @[];
}
// copy content before we modify it
NSMutableArray *forwardingKeyChain2 = [NSMutableArray arrayWithArray:forwardingKeyChain];
[forwardingKeyChain2 addObject:senderKey];
forwardingKeyChain = forwardingKeyChain2;
MXJSONModelSetString(senderKey, content[@"sender_key"]);
if (!senderKey)
{
MXLogDebug(@"[MXMegolmDecryption] onRoomKeyEvent: ERROR: forwarded_room_key event is missing sender_key field");
return;
}
NSString *ed25519Key;
MXJSONModelSetString(ed25519Key, content[@"sender_claimed_ed25519_key"]);
if (!ed25519Key)
{
MXLogDebug(@"[MXMegolmDecryption] onRoomKeyEvent: ERROR: forwarded_room_key_event is missing sender_claimed_ed25519_key field");
return;
}
keysClaimed = @{
@"ed25519": ed25519Key
};
}
else
{
keysClaimed = event.keysClaimed;
MXLogDebug(@"[MXMegolmDecryption] onRoomKeyEvent: Adding key for megolm session %@|%@ from %@ event", senderKey, sessionId, event.type);
[olmDevice addInboundGroupSession:sessionId
sessionKey:sessionKey
roomId:roomId
senderKey:senderKey
forwardingCurve25519KeyChain:forwardingKeyChain
keysClaimed:keysClaimed
exportFormat:exportFormat
sharedHistory:sharedHistory];
[self retryDecryption:senderKey sessionId:content[@"session_id"] complete:^(BOOL allDecrypted) {
@"algorithm": content[@"algorithm"],
@"room_id": content[@"room_id"],
@"session_id": content[@"session_id"],
@"sender_key": senderKey
