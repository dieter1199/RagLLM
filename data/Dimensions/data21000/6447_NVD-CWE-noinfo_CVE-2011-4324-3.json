{
    "cve_id": "CVE-2011-4324",
    "cve_description": "The encode_share_access function in fs/nfs/nfs4xdr.c in the Linux kernel before 2.6.29 allows local users to cause a denial of service (BUG and system crash) by using the mknod system call with a pathname on an NFSv4 filesystem.",
    "cve_publish_date": "2012-06-21",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "NFSv4: Convert the open and close ops to use fmode\n\nSigned-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "nfs4proc.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "68",
    "number_of_lines_deleted_vulnerable_to_cve": "58",
    "vulnerable_lines": [
        "// Line_Reference 326: \t\tstruct nfs4_state_owner *sp, int flags,",
        "// Line_Reference 346: \tp->o_arg.open_flags = flags,",
        "// Line_Reference 402: static int can_open_cached(struct nfs4_state *state, int mode)",
        "// Line_Reference 405: \tswitch (mode & (FMODE_READ|FMODE_WRITE|O_EXCL)) {",
        "// Line_Reference 418: static int can_open_delegated(struct nfs_delegation *delegation, mode_t open_flags)",
        "// Line_Reference 420: \tif ((delegation->type & open_flags) != open_flags)",
        "// Line_Reference 428: static void update_open_stateflags(struct nfs4_state *state, mode_t open_flags)",
        "// Line_Reference 430: \tswitch (open_flags) {",
        "// Line_Reference 440: \tnfs4_state_set_mode_locked(state, state->state | open_flags);",
        "// Line_Reference 443: static void nfs_set_open_stateid_locked(struct nfs4_state *state, nfs4_stateid *stateid, int open_flags)",
        "// Line_Reference 448: \tswitch (open_flags) {",
        "// Line_Reference 460: static void nfs_set_open_stateid(struct nfs4_state *state, nfs4_stateid *stateid, int open_flags)",
        "// Line_Reference 463: \tnfs_set_open_stateid_locked(state, stateid, open_flags);",
        "// Line_Reference 467: static void __update_open_stateid(struct nfs4_state *state, nfs4_stateid *open_stateid, const nfs4_stateid *deleg_stateid, int open_flags)",
        "// Line_Reference 479: \t\tnfs_set_open_stateid_locked(state, open_stateid, open_flags);",
        "// Line_Reference 482: \tupdate_open_stateflags(state, open_flags);",
        "// Line_Reference 486: static int update_open_stateid(struct nfs4_state *state, nfs4_stateid *open_stateid, nfs4_stateid *delegation, int open_flags)",
        "// Line_Reference 492: \topen_flags &= (FMODE_READ|FMODE_WRITE);",
        "// Line_Reference 501: \t    (deleg_cur->type & open_flags) != open_flags)",
        "// Line_Reference 510: \t__update_open_stateid(state, open_stateid, &deleg_cur->stateid, open_flags);",
        "// Line_Reference 518: \t\t__update_open_stateid(state, open_stateid, NULL, open_flags);",
        "// Line_Reference 526: static void nfs4_return_incompatible_delegation(struct inode *inode, mode_t open_flags)",
        "// Line_Reference 532: \tif (delegation == NULL || (delegation->type & open_flags) == open_flags) {",
        "// Line_Reference 545: \tint open_mode = opendata->o_arg.open_flags & (FMODE_READ|FMODE_WRITE|O_EXCL);",
        "// Line_Reference 550: \t\tif (can_open_cached(state, open_mode)) {",
        "// Line_Reference 552: \t\t\tif (can_open_cached(state, open_mode)) {",
        "// Line_Reference 553: \t\t\t\tupdate_open_stateflags(state, open_mode);",
        "// Line_Reference 562: \t\t    !can_open_delegated(delegation, open_mode)) {",
        "// Line_Reference 575: \t\tif (update_open_stateid(state, NULL, &stateid, open_mode))",
        "// Line_Reference 627: \t\t\tdata->o_arg.open_flags);",
        "// Line_Reference 658: \topendata = nfs4_opendata_alloc(&ctx->path, state->owner, 0, NULL);",
        "// Line_Reference 666: static int nfs4_open_recover_helper(struct nfs4_opendata *opendata, mode_t openflags, struct nfs4_state **res)",
        "// Line_Reference 671: \topendata->o_arg.open_flags = openflags;",
        "// Line_Reference 681: \tnfs4_close_state(&opendata->path, newstate, openflags);",
        "// Line_Reference 737: \tint delegation_type = 0;",
        "// Line_Reference 850: \t\tnfs4_close_state(&data->path, state, data->o_arg.open_flags);",
        "// Line_Reference 914: \t\tif (can_open_cached(data->state, data->o_arg.open_flags & (FMODE_READ|FMODE_WRITE|O_EXCL)))",
        "// Line_Reference 983: \t\tnfs4_close_state(&data->path, state, data->o_arg.open_flags);",
        "// Line_Reference 1138: static int _nfs4_do_open(struct inode *dir, struct path *path, int flags, struct iattr *sattr, struct rpc_cred *cred, struct nfs4_state **res)",
        "// Line_Reference 1156: \t\tnfs4_return_incompatible_delegation(path->dentry->d_inode, flags & (FMODE_READ|FMODE_WRITE));",
        "// Line_Reference 1158: \topendata = nfs4_opendata_alloc(path, sp, flags, sattr);",
        "// Line_Reference 1190: static struct nfs4_state *nfs4_do_open(struct inode *dir, struct path *path, int flags, struct iattr *sattr, struct rpc_cred *cred)",
        "// Line_Reference 1197: \t\tstatus = _nfs4_do_open(dir, path, flags, sattr, cred, &res);",
        "// Line_Reference 1335: \t\t\tif (calldata->arg.open_flags == 0)",
        "// Line_Reference 1377: \t\tcalldata->arg.open_flags = FMODE_READ;",
        "// Line_Reference 1380: \t\tcalldata->arg.open_flags = FMODE_WRITE;",
        "// Line_Reference 1433: \tcalldata->arg.open_flags = 0;",
        "// Line_Reference 1460: static int nfs4_intent_set_file(struct nameidata *nd, struct path *path, struct nfs4_state *state)",
        "// Line_Reference 1466: \tif (nd->intent.open.flags & FMODE_EXEC) {",
        "// Line_Reference 1482: \tnfs4_close_sync(path, state, nd->intent.open.flags);",
        "// Line_Reference 1515: \tstate = nfs4_do_open(dir, &path, nd->intent.open.flags, &attr, cred);",
        "// Line_Reference 1530: \tnfs4_intent_set_file(nd, &path, state);",
        "// Line_Reference 1547: \tstate = nfs4_do_open(dir, &path, openflags, NULL, cred);",
        "// Line_Reference 1564: \t\tnfs4_intent_set_file(nd, &path, state);",
        "// Line_Reference 1567: \tnfs4_close_sync(&path, state, openflags);",
        "// Line_Reference 2000: \tstate = nfs4_do_open(dir, &path, flags, sattr, cred);",
        "// Line_Reference 2016: \t\tstatus = nfs4_intent_set_file(nd, &path, state);",
        "// Line_Reference 2018: \t\tnfs4_close_sync(&path, state, flags);"
    ]
}
