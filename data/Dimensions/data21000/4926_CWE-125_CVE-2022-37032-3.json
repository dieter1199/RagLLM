{
    "cve_id": "CVE-2022-37032",
    "cve_description": "An out-of-bounds read in the BGP daemon of FRRouting FRR before 8.4 may lead to a segmentation fault and denial of service. This occurs in bgp_capability_msg_parse in bgpd/bgp_packet.c.",
    "cve_publish_date": "2022-09-19",
    "cwe_id": "CWE-125",
    "cwe_name": "Out-of-bounds Read",
    "cwe_description": "The product reads data past the end, or before the beginning, of the intended buffer.",
    "commit_message": "[bgpd] cleanup, compact and consolidate capability parsing code\n\n2007-07-26 Paul Jakma <paul.jakma@sun.com>\n\n\t* (general) Clean up and compact capability parsing slightly.\n\t  Consolidate validation of length and logging of generic TLV, and\n\t  memcpy of capability data, thus removing such from cap specifc\n\t  code (not always present or correct).\n\t* bgp_open.h: Add structures for the generic capability TLV header\n\t  and for the data formats of the various specific capabilities we\n\t  support.  Hence remove the badly named, or else misdefined, struct\n\t  capability.\n\t* bgp_open.c: (bgp_capability_vty_out) Use struct capability_mp_data.\n\t  Do the length checks *before* memcpy()'ing based on that length\n\t  (stored capability - should have been validated anyway on input,\n\t  but..).\n\t  (bgp_afi_safi_valid_indices) new function to validate (afi,safi)\n\t  which is about to be used as index into arrays, consolidates\n\t  several instances of same, at least one of which appeared to be\n\t  incomplete..\n\t  (bgp_capability_mp) Much condensed.\n\t  (bgp_capability_orf_entry) New, process one ORF entry\n\t  (bgp_capability_orf) Condensed. Fixed to process all ORF entries.\n\t  (bgp_capability_restart) Condensed, and fixed to use a\n\t  cap-specific type, rather than abusing capability_mp.\n\t  (struct message capcode_str) added to aid generic logging.\n\t  (size_t cap_minsizes[]) added to aid generic validation of\n\t  capability length field.\n\t  (bgp_capability_parse) Generic logging and validation of TLV\n\t  consolidated here. Code compacted as much as possible.\n\t* bgp_packet.c: (bgp_open_receive) Capability parsers now use\n\t  streams, so no more need here to manually fudge the input stream\n\t  getp.\n\t  (bgp_capability_msg_parse) use struct capability_mp_data. Validate\n\t  lengths /before/ memcpy. Use bgp_afi_safi_valid_indices.\n\t  (bgp_capability_receive) Exported for use by test harness.\n\t* bgp_vty.c: (bgp_show_summary) fix conversion warning\n\t  (bgp_show_peer) ditto\n\t* bgp_debug.h: Fix storage 'extern' after type 'const'.\n        * lib/log.c: (mes_lookup) warning about code not being in\n          same-number array slot should be debug, not warning. E.g. BGP\n          has several discontigious number spaces, allocating from\n          different parts of a space is not uncommon (e.g. IANA\n          assigned versus vendor-assigned code points in some number\n          space).",
    "type_of_change": "Modification",
    "filename_of_changes": "bgp_packet.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "52",
    "number_of_lines_deleted_vulnerable_to_cve": "56",
    "vulnerable_lines": [
        "// Line_Reference 1374: ",
        "// Line_Reference 1375:       stream_forward_getp (peer->ibuf, optlen);",
        "// Line_Reference 1994:   struct capability cap;",
        "// Line_Reference 2004:     {",
        "// Line_Reference 2012: ",
        "// Line_Reference 2014: ",
        "// Line_Reference 2015:       /* Fetch structure to the byte stream. */",
        "// Line_Reference 2016:       memcpy (&cap, pnt + 1, sizeof (struct capability));",
        "// Line_Reference 2017: ",
        "// Line_Reference 2030: \t\t   peer->host, action, cap.code, cap.length);",
        "// Line_Reference 2033:       if (pnt + (cap.length + 3) > end)",
        "// Line_Reference 2041:       if (cap.code == CAPABILITY_CODE_MP)",
        "// Line_Reference 2043: \t  afi = ntohs (cap.mpc.afi);",
        "// Line_Reference 2044: \t  safi = cap.mpc.safi;",
        "// Line_Reference 2049: ",
        "// Line_Reference 2051: \t  if ((afi == AFI_IP",
        "// Line_Reference 2052: \t       || afi == AFI_IP6)",
        "// Line_Reference 2053: \t      && (safi == SAFI_UNICAST",
        "// Line_Reference 2054: \t\t  || safi == SAFI_MULTICAST",
        "// Line_Reference 2055: \t\t  || safi == BGP_SAFI_VPNV4))",
        "// Line_Reference 2056: \t    {",
        "// Line_Reference 2057: \t      if (BGP_DEBUG (normal, NORMAL))",
        "// Line_Reference 2058: \t\tzlog_debug (\"%s CAPABILITY has %s MP_EXT CAP for afi/safi: %u/%u\",",
        "// Line_Reference 2059: \t\t\t   peer->host,",
        "// Line_Reference 2060: \t\t\t   action == CAPABILITY_ACTION_SET",
        "// Line_Reference 2061: \t\t\t   ? \"Advertising\" : \"Removing\",",
        "// Line_Reference 2062: \t\t\t   ntohs(cap.mpc.afi) , cap.mpc.safi);",
        "// Line_Reference 2063: ",
        "// Line_Reference 2064: \t      /* Adjust safi code. */",
        "// Line_Reference 2065: \t      if (safi == BGP_SAFI_VPNV4)",
        "// Line_Reference 2066: \t\tsafi = SAFI_MPLS_VPN;",
        "// Line_Reference 2067: ",
        "// Line_Reference 2068: \t      if (action == CAPABILITY_ACTION_SET)",
        "// Line_Reference 2069: \t\t{",
        "// Line_Reference 2070: \t\t  peer->afc_recv[afi][safi] = 1;",
        "// Line_Reference 2071: \t\t  if (peer->afc[afi][safi])",
        "// Line_Reference 2072: \t\t    {",
        "// Line_Reference 2073: \t\t      peer->afc_nego[afi][safi] = 1;",
        "// Line_Reference 2074: \t\t      bgp_announce_route (peer, afi, safi);",
        "// Line_Reference 2075: \t\t    }",
        "// Line_Reference 2076: \t\t}",
        "// Line_Reference 2077: \t      else",
        "// Line_Reference 2078: \t\t{",
        "// Line_Reference 2079: \t\t  peer->afc_recv[afi][safi] = 0;",
        "// Line_Reference 2080: \t\t  peer->afc_nego[afi][safi] = 0;",
        "// Line_Reference 2081: ",
        "// Line_Reference 2082: \t\t  if (peer_active_nego (peer))",
        "// Line_Reference 2083: \t\t    bgp_clear_route (peer, afi, safi);",
        "// Line_Reference 2084: \t\t  else",
        "// Line_Reference 2085: \t\t    BGP_EVENT_ADD (peer, BGP_Stop);",
        "// Line_Reference 2086: \t\t}",
        "// Line_Reference 2087: \t    }",
        "// Line_Reference 2092:                      peer->host, cap.code);",
        "// Line_Reference 2094:       pnt += cap.length + 3;",
        "// Line_Reference 2100: static void",
        "// Line_Reference 2133:   ret = bgp_capability_msg_parse (peer, pnt, size);"
    ]
}
