{
    "cve_id": "CVE-2024-4323",
    "cve_description": "A memory corruption vulnerability in Fluent Bit versions 2.0.7 thru 3.0.3. This issue lies in the embedded http serverâ€™s parsing of trace requests and may result in denial of service conditions, information disclosure, or remote code execution.",
    "cve_publish_date": "2024-05-20",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Merge pull request from GHSA-5rjf-prwh-pp7q\n\n* api/v1/traces: validate inputs when enabling traces.\n\nvalidate the array of inputs when enabling multiple traces that\nthey are strings.\n\nthis patch also refactors out the allocation of said input name.\n\nSigned-off-by: Phillip Adair Stewart Whelan <phillip.whelan@chronosphere.io>\n\n* api/v1/traces: disable traces api when tracing is disabled.\n\nSigned-off-by: Phillip Adair Stewart Whelan <phillip.whelan@chronosphere.io>\n\n* api/v1/trace: use macros for strings and lengths in responses.\n\navoid strlen when creating http response, especially in loops,\nby predefining them via macros.\n\nSigned-off-by: Phillip Whelan <phil@calyptia.com>\n\n* api/v1/trace: use sizeof for string length macros.\n\nSigned-off-by: Phillip Whelan <phil@calyptia.com>\n\n* api/v1/trace: use signed lenghts for strings.\n\nthis avoid potential integer overflows when using them as\nspecifiers for format strings.\n\nSigned-off-by: Phillip Whelan <phil@calyptia.com>\n\n* api/v1/traces: use macro for inputs string.\n\nSigned-off-by: Phillip Whelan <phil@calyptia.com>\n\n* api/v1/traces: use sizeof when comparing against base path.\n\nSigned-off-by: Phillip Whelan <phil@calyptia.com>\n\n* api/v1/traces: replace strlen with flb_sds_len when using flb_sds_t.\n\nSigned-off-by: Phillip Whelan <phil@calyptia.com>\n\n---------\n\nSigned-off-by: Phillip Adair Stewart Whelan <phillip.whelan@chronosphere.io>\nSigned-off-by: Phillip Whelan <phil@calyptia.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "trace.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "135",
    "number_of_lines_deleted_vulnerable_to_cve": "84",
    "vulnerable_lines": [
        "// Line_Reference 33: ",
        "// Line_Reference 34: static struct flb_input_instance *find_input(struct flb_hs *hs, const char *name)",
        "// Line_Reference 42:         if (strcmp(name, in->name) == 0) {",
        "// Line_Reference 54: static int enable_trace_input(struct flb_hs *hs, const char *name, const char *prefix, const char *output_name, struct mk_list *props)",
        "// Line_Reference 58: ",
        "// Line_Reference 59:     in = find_input(hs, name);",
        "// Line_Reference 65:     return (in->chunk_trace_ctxt == NULL ? 503 : 0);",
        "// Line_Reference 68: static int disable_trace_input(struct flb_hs *hs, const char *name)",
        "// Line_Reference 71: ",
        "// Line_Reference 73:     in = find_input(hs, name);",
        "// Line_Reference 92:     if (request->real_path.len < strlen(base)) {",
        "// Line_Reference 96:     return flb_sds_create_len(&request->real_path.data[strlen(base)],",
        "// Line_Reference 97:                               request->real_path.len - strlen(base));",
        "// Line_Reference 100: static int http_disable_trace(mk_request_t *request, void *data, const char *input_name, msgpack_packer *mp_pck)",
        "// Line_Reference 106:     toggled_on = disable_trace_input(hs, input_name);",
        "// Line_Reference 109:         msgpack_pack_str_with_body(mp_pck, \"status\", strlen(\"status\"));",
        "// Line_Reference 110:         msgpack_pack_str_with_body(mp_pck, \"ok\", strlen(\"ok\"));",
        "// Line_Reference 117: static int msgpack_params_enable_trace(struct flb_hs *hs, msgpack_unpacked *result, const char *input_name)",
        "// Line_Reference 133:     if (result->data.type == MSGPACK_OBJECT_MAP) {",
        "// Line_Reference 137: ",
        "// Line_Reference 196:         toggled_on = enable_trace_input(hs, input_name, prefix, output_name, props);",
        "// Line_Reference 213: static int http_enable_trace(mk_request_t *request, void *data, const char *input_name, msgpack_packer *mp_pck)",
        "// Line_Reference 232: ",
        "// Line_Reference 235:         ret = enable_trace_input(hs, input_name, \"trace.\", \"stdout\", NULL);",
        "// Line_Reference 238:                 msgpack_pack_str_with_body(mp_pck, \"status\", strlen(\"status\"));",
        "// Line_Reference 239:                 msgpack_pack_str_with_body(mp_pck, \"ok\", strlen(\"ok\"));",
        "// Line_Reference 243:             flb_error(\"unable to enable tracing for %s\", input_name);",
        "// Line_Reference 260:         flb_error(\"unable to unpack msgpack parameters for %s\", input_name);",
        "// Line_Reference 268: ",
        "// Line_Reference 362:         ret = enable_trace_input(hs, input_name, prefix, output_name, props);",
        "// Line_Reference 369:             input_instance = find_input(hs, input_name);",
        "// Line_Reference 380:     msgpack_pack_str_with_body(mp_pck, \"status\", strlen(\"status\"));",
        "// Line_Reference 381:     msgpack_pack_str_with_body(mp_pck, \"ok\", strlen(\"ok\"));",
        "// Line_Reference 420:         response = http_enable_trace(request, data, input_name, &mp_pck);",
        "// Line_Reference 423:         response = http_disable_trace(request, data, input_name, &mp_pck);",
        "// Line_Reference 428:         msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));",
        "// Line_Reference 429:         msgpack_pack_str_with_body(&mp_pck, \"not found\", strlen(\"not found\"));",
        "// Line_Reference 433:         msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));",
        "// Line_Reference 434:         msgpack_pack_str_with_body(&mp_pck, \"error\", strlen(\"error\"));",
        "// Line_Reference 469:     flb_sds_t input_name;",
        "// Line_Reference 473: ",
        "// Line_Reference 506:         if (result.data.via.map.ptr[i].key.via.str.size < strlen(\"inputs\")) {",
        "// Line_Reference 509:         if (strncmp(result.data.via.map.ptr[i].key.via.str.ptr, \"inputs\", strlen(\"inputs\"))) {",
        "// Line_Reference 520: ",
        "// Line_Reference 523:     msgpack_pack_str_with_body(&mp_pck, \"inputs\", strlen(\"inputs\"));",
        "// Line_Reference 527:         input_name = flb_sds_create_len(inputs->ptr[i].via.str.ptr, inputs->ptr[i].via.str.size);",
        "// Line_Reference 528:         msgpack_pack_str_with_body(&mp_pck, input_name, flb_sds_len(input_name));",
        "// Line_Reference 530:         if (inputs->ptr[i].type != MSGPACK_OBJECT_STR) {",
        "// Line_Reference 531:             msgpack_pack_map(&mp_pck, 1);",
        "// Line_Reference 532:             msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));",
        "// Line_Reference 533:             msgpack_pack_str_with_body(&mp_pck, \"error\", strlen(\"error\"));",
        "// Line_Reference 535:         else {",
        "// Line_Reference 536:             if (request->method == MK_METHOD_POST || request->method == MK_METHOD_GET) {",
        "// Line_Reference 537:                 ret = msgpack_params_enable_trace((struct flb_hs *)data, &result, input_name);",
        "// Line_Reference 538:                 if (ret != 0) {",
        "// Line_Reference 539:                     msgpack_pack_map(&mp_pck, 2);",
        "// Line_Reference 540:                     msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));",
        "// Line_Reference 541:                     msgpack_pack_str_with_body(&mp_pck, \"error\", strlen(\"error\"));",
        "// Line_Reference 542:                     msgpack_pack_str_with_body(&mp_pck, \"returncode\", strlen(\"returncode\"));",
        "// Line_Reference 543:                     msgpack_pack_int64(&mp_pck, ret);",
        "// Line_Reference 544:                 }",
        "// Line_Reference 545:                 else {",
        "// Line_Reference 546:                     msgpack_pack_map(&mp_pck, 1);",
        "// Line_Reference 547:                     msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));",
        "// Line_Reference 548:                     msgpack_pack_str_with_body(&mp_pck, \"ok\", strlen(\"ok\"));",
        "// Line_Reference 549:                 }",
        "// Line_Reference 550:             }",
        "// Line_Reference 551:             else if (request->method == MK_METHOD_DELETE) {",
        "// Line_Reference 552:                 disable_trace_input((struct flb_hs *)data, input_name);",
        "// Line_Reference 555:                 msgpack_pack_map(&mp_pck, 2);",
        "// Line_Reference 556:                 msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));",
        "// Line_Reference 557:                 msgpack_pack_str_with_body(&mp_pck, \"error\", strlen(\"error\"));",
        "// Line_Reference 558:                 msgpack_pack_str_with_body(&mp_pck, \"message\", strlen(\"message\"));",
        "// Line_Reference 559:                 msgpack_pack_str_with_body(&mp_pck, \"method not allowed\", strlen(\"method not allowed\"));",
        "// Line_Reference 572:         msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));",
        "// Line_Reference 573:         msgpack_pack_str_with_body(&mp_pck, \"not found\", strlen(\"not found\"));",
        "// Line_Reference 577:         msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));",
        "// Line_Reference 578:         msgpack_pack_str_with_body(&mp_pck, \"error\", strlen(\"error\"));",
        "// Line_Reference 579:         msgpack_pack_str_with_body(&mp_pck, \"message\", strlen(\"message\"));",
        "// Line_Reference 585:             msgpack_pack_str_with_body(&mp_pck, \"unknown error\", strlen(\"unknown error\"));",
        "// Line_Reference 590:         msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));",
        "// Line_Reference 591:         msgpack_pack_str_with_body(&mp_pck, \"ok\", strlen(\"ok\"));",
        "// Line_Reference 612:     mk_vhost_handler(hs->ctx, hs->vid, \"/api/v1/traces/\", cb_traces, hs);",
        "// Line_Reference 613:     mk_vhost_handler(hs->ctx, hs->vid, \"/api/v1/trace/*\", cb_trace, hs);"
    ]
}
