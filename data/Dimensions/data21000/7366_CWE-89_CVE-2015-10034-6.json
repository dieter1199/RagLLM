{
    "cve_id": "CVE-2015-10034",
    "cve_description": "A vulnerability has been found in j-nowak workout-organizer and classified as critical. This vulnerability affects unknown code. The manipulation leads to sql injection. The patch is identified as 13cd6c3d1210640bfdb39872b2bb3597aa991279. It is recommended to apply a patch to fix this issue. VDB-217714 is the identifier assigned to this vulnerability.",
    "cve_publish_date": "2023-01-09",
    "cwe_id": "CWE-89",
    "cwe_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
    "cwe_description": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.",
    "commit_message": "Fixed building queries - preventing SQL-injection",
    "type_of_change": "Modification",
    "filename_of_changes": "UsersDao.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "67",
    "number_of_lines_deleted_vulnerable_to_cve": "43",
    "vulnerable_lines": [
        "// Line_Reference 9: import java.sql.Statement;",
        "// Line_Reference 12: import java.util.Map;",
        "// Line_Reference 13: import java.util.Map.Entry;",
        "// Line_Reference 37: \t\t\tString sql = connection.nativeSQL(\"INSERT INTO users(login, email, password_digest, first_name, last_name) VALUES\" +",
        "// Line_Reference 38: \t\t\t\t\t\"  ('\" + user.getLogin() + \"','\" + user.getEmail() + \"','\" + passwordDigest + \"','\" + user.getFirstName() + \"','\" + user.getLastName() + \"')\");",
        "// Line_Reference 39: ",
        "// Line_Reference 40: \t\t\tplay.Logger.info(\"Insert user: \" + sql);",
        "// Line_Reference 41: \t\t\tconnection.createStatement().execute(sql);",
        "// Line_Reference 43: \t\t\tStatement statement = connection.createStatement();",
        "// Line_Reference 44: \t\t\tResultSet result = statement.executeQuery(\"SELECT * FROM users WHERE login = '\" + user.getLogin() +\"'\");",
        "// Line_Reference 51: ",
        "// Line_Reference 74: \t\t\tStatement getuserStatement = connection.createStatement();",
        "// Line_Reference 77: \t\t\tResultSet resultUser = getuserStatement.executeQuery(\"SELECT * FROM users \"",
        "// Line_Reference 78: \t\t\t\t\t+ \"WHERE (login = '\" + login + \"' OR email = '\" + login + \"') AND password_digest = '\" + passwordDigest + \"'\");",
        "// Line_Reference 90: \t\t\tgetuserStatement.close();",
        "// Line_Reference 118: \tpublic User getById(String userId) { //TODO change to userId",
        "// Line_Reference 122: \t\t\tStatement getuserStatement = connection.createStatement();",
        "// Line_Reference 123: \t\t\tResultSet resultUser = getuserStatement.executeQuery(\"SELECT * FROM users \"",
        "// Line_Reference 124: \t\t\t\t\t+ \"WHERE user_id = '\" + userId + \"'\");",
        "// Line_Reference 140: \t\t\tgetuserStatement.close();",
        "// Line_Reference 157: \tpublic boolean checkPasswordForUser(String userId, String password) {",
        "// Line_Reference 164: \t\t\tStatement getuserStatement = connection.createStatement();",
        "// Line_Reference 165: \t\t\tResultSet resultUser = getuserStatement.executeQuery(\"SELECT * FROM users \"",
        "// Line_Reference 166: \t\t\t\t\t+ \"WHERE user_id = '\" + userId + \"' AND password_digest = '\" + passwordDigest + \"'\");",
        "// Line_Reference 177: \t\t\tgetuserStatement.close();",
        "// Line_Reference 196: \tpublic void changePassword(String userId, String password) {",
        "// Line_Reference 203: \t\t\tStatement statement = connection.createStatement();",
        "// Line_Reference 204: \t\t\tString sql = \"UPDATE users SET password_digest = '\"+ passwordDigest + \"' where user_id = '\" + userId + \"';\";",
        "// Line_Reference 205: \t\t\tstatement.executeUpdate(sql);",
        "// Line_Reference 208: \t\t\tstatement.close();",
        "// Line_Reference 224: \tpublic boolean update(String userId, Map<String, String> toUpdate) {",
        "// Line_Reference 228: \t\t\tStatement statement = connection.createStatement();",
        "// Line_Reference 229: \t\t\tString sql = \"UPDATE users SET \";",
        "// Line_Reference 230: \t\t\tfor (Entry<String, String> entry : toUpdate.entrySet()) {",
        "// Line_Reference 231: \t\t\t\tsql += entry.getKey() + \" = '\" + entry.getValue() + \"', \";",
        "// Line_Reference 232: \t\t\t}",
        "// Line_Reference 234: \t\t\tsql += \" where user_id = '\" + userId + \"';\";",
        "// Line_Reference 236: \t\t\tplay.Logger.info(sql);",
        "// Line_Reference 237: \t\t\tstatement.executeUpdate(sql);",
        "// Line_Reference 240: \t\t\tstatement.close();",
        "// Line_Reference 262: \t\t\tStatement statement = connection.createStatement();",
        "// Line_Reference 263: \t\t\tResultSet resultSet = statement.executeQuery(\"SELECT * FROM random_strangers_of_user(\" + userId + \")\");",
        "// Line_Reference 275: \t\t\tstatement.close();"
    ]
}
