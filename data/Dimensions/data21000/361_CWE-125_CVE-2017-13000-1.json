{
    "cve_id": "CVE-2017-13000",
    "cve_description": "The IEEE 802.15.4 parser in tcpdump before 4.9.2 has a buffer over-read in print-802_15_4.c:ieee802_15_4_if_print().",
    "cve_publish_date": "2017-09-14",
    "cwe_id": "CWE-125",
    "cwe_name": "Out-of-bounds Read",
    "cwe_description": "The product reads data past the end, or before the beginning, of the intended buffer.",
    "commit_message": "CVE-2017-13000/IEEE 802.15.4: Add more bounds checks.\n\nWhile we're at it, add a bunch of macros for the frame control field's\nsubfields, have the reserved frame types show the frame type value, use\nthe same code path for processing source and destination addresses\nregardless of whether -v was specified (just leave out the addresses in\nnon-verbose mode), and return the header length in all cases.\n\nThis fixes a buffer over-read discovered by Forcepoint's security\nresearchers Otto Airamo & Antti LevomÃ¤ki.\n\nAdd tests using the capture files supplied by the reporter(s).",
    "type_of_change": "Modification",
    "filename_of_changes": "print-802_15_4.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "142",
    "number_of_lines_deleted_vulnerable_to_cve": "100",
    "vulnerable_lines": [
        "// Line_Reference 41: \t\"Reserved\",\t\t\t/* 4 */",
        "// Line_Reference 42: \t\"Reserved\",\t\t\t/* 5 */",
        "// Line_Reference 43: \t\"Reserved\",\t\t\t/* 6 */",
        "// Line_Reference 44: \t\"Reserved\",\t\t\t/* 7 */",
        "// Line_Reference 47: static int",
        "// Line_Reference 48: extract_header_length(uint16_t fc)",
        "// Line_Reference 49: {",
        "// Line_Reference 50: \tint len = 0;",
        "// Line_Reference 51: ",
        "// Line_Reference 52: \tswitch ((fc >> 10) & 0x3) {",
        "// Line_Reference 53: \tcase 0x00:",
        "// Line_Reference 54: \t\tif (fc & (1 << 6)) /* intra-PAN with none dest addr */",
        "// Line_Reference 55: \t\t\treturn -1;",
        "// Line_Reference 56: \t\tbreak;",
        "// Line_Reference 57: \tcase 0x01:",
        "// Line_Reference 58: \t\treturn -1;",
        "// Line_Reference 59: \tcase 0x02:",
        "// Line_Reference 60: \t\tlen += 4;",
        "// Line_Reference 61: \t\tbreak;",
        "// Line_Reference 62: \tcase 0x03:",
        "// Line_Reference 63: \t\tlen += 10;",
        "// Line_Reference 64: \t\tbreak;",
        "// Line_Reference 65: \t}",
        "// Line_Reference 66: ",
        "// Line_Reference 67: \tswitch ((fc >> 14) & 0x3) {",
        "// Line_Reference 68: \tcase 0x00:",
        "// Line_Reference 69: \t\tbreak;",
        "// Line_Reference 70: \tcase 0x01:",
        "// Line_Reference 71: \t\treturn -1;",
        "// Line_Reference 72: \tcase 0x02:",
        "// Line_Reference 73: \t\tlen += 4;",
        "// Line_Reference 74: \t\tbreak;",
        "// Line_Reference 75: \tcase 0x03:",
        "// Line_Reference 76: \t\tlen += 10;",
        "// Line_Reference 77: \t\tbreak;",
        "// Line_Reference 78: \t}",
        "// Line_Reference 79: ",
        "// Line_Reference 80: \tif (fc & (1 << 6)) {",
        "// Line_Reference 81: \t\tif (len < 2)",
        "// Line_Reference 82: \t\t\treturn -1;",
        "// Line_Reference 83: \t\tlen -= 2;",
        "// Line_Reference 84: \t}",
        "// Line_Reference 85: ",
        "// Line_Reference 86: \treturn len;",
        "// Line_Reference 87: }",
        "// Line_Reference 88: ",
        "// Line_Reference 95: \tint hdrlen;",
        "// Line_Reference 100: \t\tND_PRINT((ndo, \"[|802.15.4] %x\", caplen));",
        "// Line_Reference 105: \thdrlen = extract_header_length(fc);",
        "// Line_Reference 106: ",
        "// Line_Reference 112: \tND_PRINT((ndo,\"IEEE 802.15.4 %s packet \", ftypes[fc & 0x7]));",
        "// Line_Reference 115: \tif (hdrlen == -1) {",
        "// Line_Reference 116: \t\tND_PRINT((ndo,\"invalid! \"));",
        "// Line_Reference 117: \t\treturn caplen;",
        "// Line_Reference 118: \t}",
        "// Line_Reference 119: ",
        "// Line_Reference 120: ",
        "// Line_Reference 121: \tif (!ndo->ndo_vflag) {",
        "// Line_Reference 122: \t\tp+= hdrlen;",
        "// Line_Reference 123: \t\tcaplen -= hdrlen;",
        "// Line_Reference 124: \t} else {",
        "// Line_Reference 125: \t\tuint16_t panid = 0;",
        "// Line_Reference 127: \t\tswitch ((fc >> 10) & 0x3) {",
        "// Line_Reference 128: \t\tcase 0x00:",
        "// Line_Reference 130: \t\t\tbreak;",
        "// Line_Reference 131: \t\tcase 0x01:",
        "// Line_Reference 133: \t\t\treturn 0;",
        "// Line_Reference 134: \t\tcase 0x02:",
        "// Line_Reference 135: \t\t\tpanid = EXTRACT_LE_16BITS(p);",
        "// Line_Reference 136: \t\t\tp += 2;",
        "// Line_Reference 137: \t\t\tND_PRINT((ndo,\"%04x:%04x \", panid, EXTRACT_LE_16BITS(p)));",
        "// Line_Reference 138: \t\t\tp += 2;",
        "// Line_Reference 139: \t\t\tbreak;",
        "// Line_Reference 140: \t\tcase 0x03:",
        "// Line_Reference 141: \t\t\tpanid = EXTRACT_LE_16BITS(p);",
        "// Line_Reference 142: \t\t\tp += 2;",
        "// Line_Reference 143: \t\t\tND_PRINT((ndo,\"%04x:%s \", panid, le64addr_string(ndo, p)));",
        "// Line_Reference 144: \t\t\tp += 8;",
        "// Line_Reference 145: \t\t\tbreak;",
        "// Line_Reference 149: \t\tswitch ((fc >> 14) & 0x3) {",
        "// Line_Reference 150: \t\tcase 0x00:",
        "// Line_Reference 152: \t\t\tbreak;",
        "// Line_Reference 153: \t\tcase 0x01:",
        "// Line_Reference 155: \t\t\treturn 0;",
        "// Line_Reference 156: \t\tcase 0x02:",
        "// Line_Reference 157: \t\t\tif (!(fc & (1 << 6))) {",
        "// Line_Reference 158: \t\t\t\tpanid = EXTRACT_LE_16BITS(p);",
        "// Line_Reference 159: \t\t\t\tp += 2;",
        "// Line_Reference 161: \t\t\tND_PRINT((ndo,\"%04x:%04x \", panid, EXTRACT_LE_16BITS(p)));",
        "// Line_Reference 163: \t\t\tbreak;",
        "// Line_Reference 164: \t\tcase 0x03:",
        "// Line_Reference 165: \t\t\tif (!(fc & (1 << 6))) {",
        "// Line_Reference 166: \t\t\t\tpanid = EXTRACT_LE_16BITS(p);",
        "// Line_Reference 167: \t\t\t\tp += 2;",
        "// Line_Reference 169:                         ND_PRINT((ndo,\"%04x:%s \", panid, le64addr_string(ndo, p)));",
        "// Line_Reference 170: \t\t\tp += 8;",
        "// Line_Reference 171: \t\t\tbreak;",
        "// Line_Reference 173: ",
        "// Line_Reference 174: \t\tcaplen -= hdrlen;",
        "// Line_Reference 180: \treturn 0;"
    ]
}
