{
    "cve_id": "CVE-2015-10062",
    "cve_description": "A vulnerability, which was classified as problematic, was found in galaxy-data-resource up to 14.10.0. This affects an unknown part of the component Command Line Template. The manipulation leads to injection. Upgrading to version 14.10.1 is able to address this issue. The patch is named 50d65f45d3f5be5d1fbff2e45ac5cec075f07d42. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-218451.",
    "cve_publish_date": "2023-01-17",
    "cwe_id": "CWE-74",
    "cwe_name": "Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')",
    "cwe_description": "The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.",
    "commit_message": "Fix a critical security vulnerability where unsanitized user-modifiable values could be included in a command line template.",
    "type_of_change": "Modification",
    "filename_of_changes": "__init__.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "28",
    "number_of_lines_deleted_vulnerable_to_cve": "17",
    "vulnerable_lines": [
        "// Line_Reference 363: def restore_text(text):",
        "// Line_Reference 367:     for key, value in mapped_chars.items():",
        "// Line_Reference 372: def sanitize_text(text):",
        "// Line_Reference 375:     and lists of strings.",
        "// Line_Reference 377:     if isinstance( text, basestring ):",
        "// Line_Reference 378:         return _sanitize_text_helper(text)",
        "// Line_Reference 379:     elif isinstance( text, list ):",
        "// Line_Reference 380:         return [ _sanitize_text_helper(t) for t in text ]",
        "// Line_Reference 382: ",
        "// Line_Reference 383: def _sanitize_text_helper(text):",
        "// Line_Reference 388:         if c in valid_chars:",
        "// Line_Reference 390:         elif c in mapped_chars:",
        "// Line_Reference 391:             out.append(mapped_chars[c])",
        "// Line_Reference 393:             out.append('X')  # makes debugging easier",
        "// Line_Reference 397: def sanitize_param(value):",
        "// Line_Reference 400:         return sanitize_text(value)",
        "// Line_Reference 402:         return map(sanitize_text, value)"
    ]
}
