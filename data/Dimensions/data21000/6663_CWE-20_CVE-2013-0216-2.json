{
    "cve_id": "CVE-2013-0216",
    "cve_description": "The Xen netback functionality in the Linux kernel before 3.7.8 allows guest OS users to cause a denial of service (loop) by triggering ring pointer corruption.",
    "cve_publish_date": "2013-02-18",
    "cwe_id": "CWE-20",
    "cwe_name": "Improper Input Validation",
    "cwe_description": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.",
    "commit_message": "xen/netback: shutdown the ring if it contains garbage.\n\nA buggy or malicious frontend should not be able to confuse netback.\nIf we spot anything which is not as it should be then shutdown the\ndevice and don't try to continue with the ring in a potentially\nhostile state. Well behaved and non-hostile frontends will not be\npenalised.\n\nAs well as making the existing checks for such errors fatal also add a\nnew check that ensures that there isn't an insane number of requests\non the ring (i.e. more than would fit in the ring). If the ring\ncontains garbage then previously is was possible to loop over this\ninsane number, getting an error each time and therefore not generating\nany more pending requests and therefore not exiting the loop in\nxen_netbk_tx_build_gops for an externded period.\n\nAlso turn various netdev_dbg calls which no precipitate a fatal error\ninto netdev_err, they are rate limited because the device is shutdown\nafterwards.\n\nThis fixes at least one known DoS/softlockup of the backend domain.\n\nSigned-off-by: Ian Campbell <ian.campbell@citrix.com>\nReviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>\nAcked-by: Jan Beulich <JBeulich@suse.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "type_of_change": "Modification",
    "filename_of_changes": "netback.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "45",
    "number_of_lines_deleted_vulnerable_to_cve": "17",
    "vulnerable_lines": [
        "// Line_Reference 904: \t\t\tnetdev_dbg(vif->dev, \"Need more frags\\n\");",
        "// Line_Reference 909: \t\t\tnetdev_dbg(vif->dev, \"Too many frags\\n\");",
        "// Line_Reference 916: \t\t\tnetdev_dbg(vif->dev, \"Frags galore\\n\");",
        "// Line_Reference 924: \t\t\tnetdev_dbg(vif->dev, \"txp->offset: %x, size: %u\\n\",",
        "// Line_Reference 1098: \t\t\tnetdev_dbg(vif->dev, \"Missing extra info\\n\");",
        "// Line_Reference 1107: \t\t\tnetdev_dbg(vif->dev,",
        "// Line_Reference 1124: \t\tnetdev_dbg(vif->dev, \"GSO size must not be zero.\\n\");",
        "// Line_Reference 1130: \t\tnetdev_dbg(vif->dev, \"Bad GSO type %d.\\n\", gso->u.gso.type);",
        "// Line_Reference 1297: \t\t\tif (unlikely(work_to_do < 0)) {",
        "// Line_Reference 1298: \t\t\t\tnetbk_tx_err(vif, &txreq, idx);",
        "// Line_Reference 1300: \t\t\t}",
        "// Line_Reference 1304: \t\tif (unlikely(ret < 0)) {",
        "// Line_Reference 1305: \t\t\tnetbk_tx_err(vif, &txreq, idx - ret);",
        "// Line_Reference 1307: \t\t}",
        "// Line_Reference 1319: \t\t\tnetdev_dbg(vif->dev,",
        "// Line_Reference 1323: \t\t\tnetbk_tx_err(vif, &txreq, idx);",
        "// Line_Reference 1352: \t\t\t\tnetbk_tx_err(vif, &txreq, idx);"
    ]
}
