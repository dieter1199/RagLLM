{
    "cve_id": "CVE-2021-41168",
    "cve_description": "Snudown is a reddit-specific fork of the Sundown Markdown parser used by GitHub, with Python integration added. In affected versions snudown was found to be vulnerable to denial of service attacks to its reference table implementation. References written in markdown ` [reference_name]: https://www.example.com` are inserted into a hash table which was found to have a weak hash function, meaning that an attacker can reliably generate a large number of collisions for it. This makes the hash table vulnerable to a hash-collision DoS attack, a type of algorithmic complexity attack. Further the hash table allowed for duplicate entries resulting in long retrieval times. Proofs of concept and further discussion of the hash collision issue are discussed on the snudown GHSA(https://github.com/reddit/snudown/security/advisories/GHSA-6gvv-9q92-w5f6). Users are advised to update to version 1.7.0.",
    "cve_publish_date": "2021-10-21",
    "cwe_id": "CWE-407",
    "cwe_name": "Inefficient Algorithmic Complexity",
    "cwe_description": "An algorithm in a product has an inefficient worst-case computational complexity that may be detrimental to system performance and can be triggered by an attacker, typically using crafted manipulations that ensure that the worst case is being reached.",
    "commit_message": "Hash-collision denial-of-service vulnerabilities (#87)\n\n* Add case insensitive SipHash implementation\n* Replace ref hash function with SipHash\n* Add label to link_ref struct.\n* Update find_link_ref to compare link labels as well as hashes\n* Update add_link_ref to disallow duplicate entries.\n* cast to char from uint8_t for strncasecmp\n* update README markdown, remove TODO\n* add py2 wheel generation\n* fix: add logic for older glibc not having getrandom, impacting staging\n\nCo-authored-by: Nicolaas <nweidema@usc.edu>",
    "type_of_change": "Modification",
    "filename_of_changes": "markdown.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "50",
    "number_of_lines_deleted_vulnerable_to_cve": "12",
    "vulnerable_lines": [
        "// Line_Reference 178: \tsize_t i;",
        "// Line_Reference 179: \tunsigned int hash = 0;",
        "// Line_Reference 180: ",
        "// Line_Reference 181: \tfor (i = 0; i < length; ++i)",
        "// Line_Reference 182: \t\thash = tolower(link_ref[i]) + (hash << 6) + (hash << 16) - hash;",
        "// Line_Reference 183: ",
        "// Line_Reference 184: \treturn hash;",
        "// Line_Reference 192: \tstruct link_ref *ref = calloc(1, sizeof(struct link_ref));",
        "// Line_Reference 196: ",
        "// Line_Reference 197: \tref->id = hash_link_ref(name, name_size);",
        "// Line_Reference 213: \t\tif (ref->id == hash)",
        "// Line_Reference 214: \t\t\treturn ref;"
    ]
}
