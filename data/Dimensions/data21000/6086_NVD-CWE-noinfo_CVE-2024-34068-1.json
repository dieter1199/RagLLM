{
    "cve_id": "CVE-2024-34068",
    "cve_description": "Pterodactyl wings is the server control plane for Pterodactyl Panel. An authenticated user who has access to a game server is able to bypass the previously implemented access control (GHSA-6rg3-8h8x-5xfv) that prevents accessing internal endpoints of the node hosting Wings in the pull endpoint. This would allow malicious users to potentially access resources on local networks that would otherwise be inaccessible. This issue has been addressed in version 1.11.2 and users are advised to upgrade. Users unable to upgrade may enable the `api.disable_remote_download` option as a workaround. ",
    "cve_publish_date": "2024-05-03",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "downloader: move internal subnet validation into http Transport",
    "type_of_change": "Modification",
    "filename_of_changes": "downloader.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "52",
    "number_of_lines_deleted_vulnerable_to_cve": "73",
    "vulnerable_lines": [
        "// Line_Reference 23: var client = &http.Client{",
        "// Line_Reference 24: \tTimeout: time.Hour * 12,",
        "// Line_Reference 25: \t// Disallow any redirect on an HTTP call. This is a security requirement: do not modify",
        "// Line_Reference 26: \t// this logic without first ensuring that the new target location IS NOT within the current",
        "// Line_Reference 27: \t// instance's local network.",
        "// Line_Reference 28: \t//",
        "// Line_Reference 29: \t// This specific error response just causes the client to not follow the redirect and",
        "// Line_Reference 30: \t// returns the actual redirect response to the caller. Not perfect, but simple and most",
        "// Line_Reference 31: \t// people won't be using URLs that redirect anyways hopefully?",
        "// Line_Reference 32: \t//",
        "// Line_Reference 33: \t// We'll re-evaluate this down the road if needed.",
        "// Line_Reference 34: \tCheckRedirect: func(req *http.Request, via []*http.Request) error {",
        "// Line_Reference 35: \t\treturn http.ErrUseLastResponse",
        "// Line_Reference 36: \t},",
        "// Line_Reference 146: \t// Always ensure that we're checking the destination for the download to avoid a malicious",
        "// Line_Reference 147: \t// user from accessing internal network resources.",
        "// Line_Reference 148: \tif err := dl.isExternalNetwork(ctx); err != nil {",
        "// Line_Reference 149: \t\treturn err",
        "// Line_Reference 150: \t}",
        "// Line_Reference 151: ",
        "// Line_Reference 246: // Verifies that a given download resolves to a location not within the current local",
        "// Line_Reference 247: // network for the machine. If the final destination of a resource is within the local",
        "// Line_Reference 248: // network an ErrInternalResolution error is returned.",
        "// Line_Reference 249: func (dl *Download) isExternalNetwork(ctx context.Context) error {",
        "// Line_Reference 250: \tdialer := &net.Dialer{",
        "// Line_Reference 251: \t\tLocalAddr: nil,",
        "// Line_Reference 252: \t}",
        "// Line_Reference 253: ",
        "// Line_Reference 254: \thost := dl.req.URL.Host",
        "// Line_Reference 255: ",
        "// Line_Reference 256: \t// This cluster-fuck of math and integer shit converts an integer IP into a proper IPv4.",
        "// Line_Reference 257: \t// For example: 16843009 would become 1.1.1.1",
        "// Line_Reference 258: \t//if i, err := strconv.ParseInt(host, 10, 64); err == nil {",
        "// Line_Reference 259: \t//\thost = strconv.FormatInt((i>>24)&0xFF, 10) + \".\" + strconv.FormatInt((i>>16)&0xFF, 10) + \".\" + strconv.FormatInt((i>>8)&0xFF, 10) + \".\" + strconv.FormatInt(i&0xFF, 10)",
        "// Line_Reference 260: \t//}",
        "// Line_Reference 261: ",
        "// Line_Reference 262: \tif _, _, err := net.SplitHostPort(host); err != nil {",
        "// Line_Reference 263: \t\tif !strings.Contains(err.Error(), \"missing port in address\") {",
        "// Line_Reference 264: \t\t\treturn errors.WithStack(err)",
        "// Line_Reference 265: \t\t}",
        "// Line_Reference 266: \t\tswitch dl.req.URL.Scheme {",
        "// Line_Reference 267: \t\tcase \"http\":",
        "// Line_Reference 268: \t\t\thost += \":80\"",
        "// Line_Reference 269: \t\tcase \"https\":",
        "// Line_Reference 270: \t\t\thost += \":443\"",
        "// Line_Reference 271: \t\t}",
        "// Line_Reference 272: \t}",
        "// Line_Reference 273: ",
        "// Line_Reference 274: \tc, err := dialer.DialContext(ctx, \"tcp\", host)",
        "// Line_Reference 275: \tif err != nil {",
        "// Line_Reference 276: \t\treturn errors.WithStack(err)",
        "// Line_Reference 277: \t}",
        "// Line_Reference 278: \t_ = c.Close()",
        "// Line_Reference 279: ",
        "// Line_Reference 280: \tipStr, _, err := net.SplitHostPort(c.RemoteAddr().String())",
        "// Line_Reference 281: \tif err != nil {",
        "// Line_Reference 282: \t\treturn errors.WithStack(err)",
        "// Line_Reference 283: \t}",
        "// Line_Reference 284: \tip := net.ParseIP(ipStr)",
        "// Line_Reference 285: \tif ip == nil {",
        "// Line_Reference 286: \t\treturn errors.WithStack(ErrInvalidIPAddress)",
        "// Line_Reference 287: \t}",
        "// Line_Reference 288: \tif ip.IsLoopback() || ip.IsLinkLocalUnicast() || ip.IsLinkLocalMulticast() || ip.IsInterfaceLocalMulticast() {",
        "// Line_Reference 289: \t\treturn errors.WithStack(ErrInternalResolution)",
        "// Line_Reference 290: \t}",
        "// Line_Reference 291: \tfor _, block := range internalRanges {",
        "// Line_Reference 292: \t\tif block.Contains(ip) {",
        "// Line_Reference 293: \t\t\treturn errors.WithStack(ErrInternalResolution)",
        "// Line_Reference 294: \t\t}",
        "// Line_Reference 295: \t}",
        "// Line_Reference 296: \treturn nil",
        "// Line_Reference 297: }",
        "// Line_Reference 298: "
    ]
}
