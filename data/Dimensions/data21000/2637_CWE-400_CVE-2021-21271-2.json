{
    "cve_id": "CVE-2021-21271",
    "cve_description": "Tendermint Core is an open source Byzantine Fault Tolerant (BFT) middleware that takes a state transition machine - written in any programming language - and securely replicates it on many machines. Tendermint Core v0.34.0 introduced a new way of handling evidence of misbehavior. As part of this, we added a new Timestamp field to Evidence structs. This timestamp would be calculated using the same algorithm that is used when a block is created and proposed. (This algorithm relies on the timestamp of the last commit from this specific block.) In Tendermint Core v0.34.0-v0.34.2, the consensus reactor is responsible for forming DuplicateVoteEvidence whenever double signs are observed. However, the current block is still “in flight” when it is being formed by the consensus reactor. It hasn’t been finalized through network consensus yet. This means that different nodes in the network may observe different “last commits” when assigning a timestamp to DuplicateVoteEvidence. In turn, different nodes could form DuplicateVoteEvidence objects at the same height but with different timestamps. One DuplicateVoteEvidence object (with one timestamp) will then eventually get finalized in the block, but this means that any DuplicateVoteEvidence with a different timestamp is considered invalid. Any node that formed invalid DuplicateVoteEvidence will continue to propose invalid evidence; its peers may see this, and choose to disconnect from this node. This bug means that double signs are DoS vectors in Tendermint Core v0.34.0-v0.34.2. Tendermint Core v0.34.3 is a security release which fixes this bug. As of v0.34.3, DuplicateVoteEvidence is no longer formed by the consensus reactor; rather, the consensus reactor passes the Votes themselves into the EvidencePool, which is now responsible for forming DuplicateVoteEvidence. The EvidencePool has timestamp info that should be consistent across the network, which means that DuplicateVoteEvidence formed in this reactor should have consistent timestamps. This release changes the API between the consensus and evidence reactors.",
    "cve_publish_date": "2021-01-26",
    "cwe_id": "CWE-400",
    "cwe_name": "Uncontrolled Resource Consumption",
    "cwe_description": "The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.",
    "commit_message": "use correct source of evidence time\n\nConflicting votes are now sent to the evidence pool to form duplicate vote evidence only once\nthe height of the evidence is finished and the time of the block finalised.",
    "type_of_change": "Modification",
    "filename_of_changes": "pool.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "112",
    "number_of_lines_deleted_vulnerable_to_cve": "44",
    "vulnerable_lines": [
        "// Line_Reference 44: \t// evidence from consensus if buffered to this slice, awaiting until the next height",
        "// Line_Reference 47: \tconsensusBuffer []types.Evidence",
        "// Line_Reference 69: \t\tconsensusBuffer: make([]types.Evidence, 0),",
        "// Line_Reference 99: // Update pulls the latest state to be used for expiration and evidence params and then prunes all expired evidence",
        "// Line_Reference 104: \t\t\t\"Failed EvidencePool.Update new state height is less than or equal to previous state height: %d <= %d\",",
        "// Line_Reference 109: \tevpool.logger.Info(\"Updating evidence pool\", \"last_block_height\", state.LastBlockHeight,",
        "// Line_Reference 112: \tevpool.logger.Info(",
        "// Line_Reference 113: \t\t\"updating evidence pool\",",
        "// Line_Reference 114: \t\t\"last_block_height\", state.LastBlockHeight,",
        "// Line_Reference 115: \t\t\"last_block_time\", state.LastBlockTime,",
        "// Line_Reference 116: \t)",
        "// Line_Reference 117: ",
        "// Line_Reference 118: \tevpool.mtx.Lock()",
        "// Line_Reference 119: \t// flush awaiting evidence from consensus into pool",
        "// Line_Reference 120: \tevpool.flushConsensusBuffer()",
        "// Line_Reference 122: \tevpool.state = state",
        "// Line_Reference 123: \tevpool.mtx.Unlock()",
        "// Line_Reference 141: \t\tevpool.logger.Info(\"Evidence already pending, ignoring this one\", \"ev\", ev)",
        "// Line_Reference 172: // AddEvidenceFromConsensus should be exposed only to the consensus reactor so it can add evidence",
        "// Line_Reference 173: // to the pool directly without the need for verification.",
        "// Line_Reference 174: func (evpool *Pool) AddEvidenceFromConsensus(ev types.Evidence) error {",
        "// Line_Reference 175: ",
        "// Line_Reference 176: \t// we already have this evidence, log this but don't return an error.",
        "// Line_Reference 177: \tif evpool.isPending(ev) {",
        "// Line_Reference 178: \t\tevpool.logger.Info(\"Evidence already pending, ignoring this one\", \"ev\", ev)",
        "// Line_Reference 179: \t\treturn nil",
        "// Line_Reference 180: \t}",
        "// Line_Reference 181: ",
        "// Line_Reference 182: \t// add evidence to a buffer which will pass the evidence to the pool at the following height.",
        "// Line_Reference 183: \t// This avoids the issue of some nodes verifying and proposing evidence at a height where the",
        "// Line_Reference 184: \t// block hasn't been committed on cause others to potentially fail.",
        "// Line_Reference 187: \tevpool.consensusBuffer = append(evpool.consensusBuffer, ev)",
        "// Line_Reference 188: \tevpool.logger.Info(\"received new evidence of byzantine behavior from consensus\", \"evidence\", ev)",
        "// Line_Reference 189: ",
        "// Line_Reference 190: \treturn nil",
        "// Line_Reference 211: \t\t\t\treturn &types.ErrInvalidEvidence{Evidence: ev, Reason: err}",
        "// Line_Reference 383: \t\tevpool.logger.Info(\"Deleted pending evidence\", \"evidence\", evidence)",
        "// Line_Reference 510: // flushConsensusBuffer moves the evidence produced from consensus into the evidence pool",
        "// Line_Reference 511: // and list so that it can be broadcasted and proposed",
        "// Line_Reference 512: func (evpool *Pool) flushConsensusBuffer() {",
        "// Line_Reference 513: \tfor _, ev := range evpool.consensusBuffer {",
        "// Line_Reference 514: \t\tif err := evpool.addPendingEvidence(ev); err != nil {",
        "// Line_Reference 519: \t\tevpool.evidenceList.PushBack(ev)",
        "// Line_Reference 522: \tevpool.consensusBuffer = make([]types.Evidence, 0)"
    ]
}
