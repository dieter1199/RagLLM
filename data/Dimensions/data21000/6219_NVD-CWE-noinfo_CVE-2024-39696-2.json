{
    "cve_id": "CVE-2024-39696",
    "cve_description": "Evmos is a decentralized Ethereum Virtual Machine chain on the Cosmos Network. Prior to version 19.0.0, a user can create a vesting account with a 3rd party account (EOA or contract) as funder. Then, this user can create an authorization for the contract.CallerAddress, this is the authorization checked in the code. But the funds are taken from the funder address provided in the message. Consequently, the user can fund a vesting account with a 3rd party account without its permission. The funder address can be any address, so this vulnerability can be used to drain all the accounts in the chain. The issue has been patched in version 19.0.0.",
    "cve_publish_date": "2024-07-05",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Merge pull request from GHSA-q6hg-6m9x-5g9c\n\n* fix(precompile): add funder and dest check to update balance\n\n* add more test cases\n\n* restrict funder to be origin or contract caller\n\n* restrict dest address when calling from sc\n\n* add test case with funds transfer within precompile call\n\n* remove print\n\n* add check for dirty addresses\n\n* add UpdateDirties func\n\n* update dirties helper func\n\n* Update precompiles/vesting/utils_test.go\n\nCo-authored-by: stepit <48993133+0xstepit@users.noreply.github.com>\nSigned-off-by: Tom <54514587+GAtom22@users.noreply.github.com>\n\n* update comment description\n\n* changes based on review comments\n\n* refactor updateDirties\n\n* add test cases for updating funder balance before and after precompile call\n\n* add revert state test\n\n* update tx logic\n\n* update integration tests\n\n* refactor auth logic\n\n* update tests\n\n* add comt\n\n* fix: add funder and vest acc to dirties\n\n* add test cases for latest changes\n\n* address review comments\n\n* address review comments\n\n* address review comments\n\n* fix FlashLoan contract compilation\n\n* update logic\n\n* use pointer in precompile txs\n\n* remove unnecessary comment\n\n---------\n\nSigned-off-by: Tom <54514587+GAtom22@users.noreply.github.com>\nCo-authored-by: stepit <48993133+0xstepit@users.noreply.github.com>",
    "type_of_change": "ModificationType.ADD",
    "filename_of_changes": "tx.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "75",
    "number_of_lines_deleted_vulnerable_to_cve": "21",
    "vulnerable_lines": [
        "// Line_Reference 30: func (p Precompile) CreateClawbackVestingAccount(",
        "// Line_Reference 66: func (p Precompile) FundVestingAccount(",
        "// Line_Reference 79: \t// if caller address is origin, the funder MUST match the origin",
        "// Line_Reference 80: \tif contract.CallerAddress == origin && origin != funderAddr {",
        "// Line_Reference 93: \tif contract.CallerAddress != origin {",
        "// Line_Reference 94: \t\t// check if authorization exists",
        "// Line_Reference 95: \t\t_, _, err := authorization.CheckAuthzExists(ctx, p.AuthzKeeper, contract.CallerAddress, origin, FundVestingAccountMsgURL)",
        "// Line_Reference 97: \t\t\treturn nil, fmt.Errorf(authorization.ErrAuthzDoesNotExistOrExpired, contract.CallerAddress, origin)",
        "// Line_Reference 114: func (p Precompile) Clawback(",
        "// Line_Reference 128: \tif contract.CallerAddress == origin && origin != funderAddr {",
        "// Line_Reference 141: \tif contract.CallerAddress != origin {",
        "// Line_Reference 142: \t\t// check if authorization exists",
        "// Line_Reference 143: \t\t_, _, err := authorization.CheckAuthzExists(ctx, p.AuthzKeeper, contract.CallerAddress, origin, ClawbackMsgURL)",
        "// Line_Reference 145: \t\t\treturn nil, fmt.Errorf(authorization.ErrAuthzDoesNotExistOrExpired, contract.CallerAddress, origin)",
        "// Line_Reference 164: func (p Precompile) UpdateVestingFunder(",
        "// Line_Reference 178: \tif contract.CallerAddress == origin && origin != funderAddr {",
        "// Line_Reference 191: \tif contract.CallerAddress != origin {",
        "// Line_Reference 192: \t\t// check if authorization exists",
        "// Line_Reference 193: \t\t_, _, err := authorization.CheckAuthzExists(ctx, p.AuthzKeeper, contract.CallerAddress, origin, UpdateVestingFunderMsgURL)",
        "// Line_Reference 195: \t\t\treturn nil, fmt.Errorf(authorization.ErrAuthzDoesNotExistOrExpired, contract.CallerAddress, origin)",
        "// Line_Reference 212: func (p Precompile) ConvertVestingAccount("
    ]
}
