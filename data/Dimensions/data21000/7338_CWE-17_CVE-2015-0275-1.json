{
    "cve_id": "CVE-2015-0275",
    "cve_description": "The ext4_zero_range function in fs/ext4/extents.c in the Linux kernel before 4.1 allows local users to cause a denial of service (BUG) via a crafted fallocate zero-range request.",
    "cve_publish_date": "2015-10-19",
    "cwe_id": "CWE-17",
    "cwe_name": "DEPRECATED: Code",
    "cwe_description": "This entry has been deprecated.  It was originally used for organizing the Development View (CWE-699) and some other views, but it introduced unnecessary complexity and depth to the resulting tree.",
    "commit_message": "ext4: allocate entire range in zero range\n\nCurrently there is a bug in zero range code which causes zero range\ncalls to only allocate block aligned portion of the range, while\nignoring the rest in some cases.\n\nIn some cases, namely if the end of the range is past i_size, we do\nattempt to preallocate the last nonaligned block. However this might\ncause kernel to BUG() in some carefully designed zero range requests\non setups where page size > block size.\n\nFix this problem by first preallocating the entire range, including\nthe nonaligned edges and converting the written extents to unwritten\nin the next step. This approach will also give us the advantage of\nhaving the range to be as linearly contiguous as possible.\n\nSigned-off-by: Lukas Czerner <lczerner@redhat.com>\nSigned-off-by: Theodore Ts'o <tytso@mit.edu>",
    "type_of_change": "Modification",
    "filename_of_changes": "extents.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "19",
    "number_of_lines_deleted_vulnerable_to_cve": "12",
    "vulnerable_lines": [
        "// Line_Reference 4800: \tflags = EXT4_GET_BLOCKS_CREATE_UNWRIT_EXT |",
        "// Line_Reference 4801: \t\tEXT4_GET_BLOCKS_CONVERT_UNWRITTEN |",
        "// Line_Reference 4802: \t\tEXT4_EX_NOCACHE;",
        "// Line_Reference 4803: \tif (mode & FALLOC_FL_KEEP_SIZE)",
        "// Line_Reference 4804: \t\tflags |= EXT4_GET_BLOCKS_KEEP_SIZE;",
        "// Line_Reference 4805: ",
        "// Line_Reference 4822: \t\t/*",
        "// Line_Reference 4823: \t\t * If we have a partial block after EOF we have to allocate",
        "// Line_Reference 4824: \t\t * the entire block.",
        "// Line_Reference 4825: \t\t */",
        "// Line_Reference 4826: \t\tif (partial_end)",
        "// Line_Reference 4827: \t\t\tmax_blocks += 1;"
    ]
}
