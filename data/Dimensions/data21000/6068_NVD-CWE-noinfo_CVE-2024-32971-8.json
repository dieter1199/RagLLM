{
    "cve_id": "CVE-2024-32971",
    "cve_description": "Apollo Router is a configurable, graph router written in Rust to run a federated supergraph that uses Apollo Federation 2. The affected versions of Apollo Router contain a bug that in limited circumstances, could lead to unexpected operations being executed which can result in unintended data or effects. This only affects Router instances configured to use distributed query plan caching. The root cause of this defect is a bug in Apollo Router’s cache retrieval logic: When this defect is present and distributed query planning caching is enabled, asking the Router to execute an operation (whether it is a query, a mutation, or a subscription) may result in an unexpected variation of that operation being executed or the generation of unexpected errors. The issue stems from inadvertently executing a modified version of a previously executed operation, whose query plan is stored in the underlying cache (specifically, Redis). Depending on the type of the operation, the result may vary. For a query, results may be fetched that don’t match what was requested (e.g., rather than running `fetchUsers(type: ENTERPRISE)` the Router may run `fetchUsers(type: TRIAL)`. For a mutation, this may result in incorrect mutations being sent to underlying subgraph servers (e.g., rather than sending `deleteUser(id: 10)` to a subgraph, the Router may run `deleteUser(id: 12)`. Users who are using distributed query plan caching, are advised to either upgrade to version 1.45.1 or above or downgrade to version 1.43.2 of the Apollo Router. Apollo Router versions 1.44.0 or 1.45.0 are not recommended for use and have been withdrawn. Users unable to upgrade can disable distributed query plan caching to mitigate this issue.",
    "cve_publish_date": "2024-05-02",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "release: v1.45.1 (#5009)",
    "type_of_change": "Modification",
    "filename_of_changes": "redis.rs",
    "code_language": "Rust",
    "number_of_lines_added_for_mitigation": "95",
    "number_of_lines_deleted_vulnerable_to_cve": "53",
    "vulnerable_lines": [
        "// Line_Reference 31:         let known_cache_key = \"plan:v2.7.2:af1ee357bc75cfbbcc6adda41089a56e7d1d52f6d44c049739dde2c259314f58:3973e022e93220f9212c18d0d0c543ae7c309e46640da93a4a0314de999f5112:2bf7810d3a47b31d8a77ebb09cdc784a3f77306827dc55b06770030a858167c7\";",
        "// Line_Reference 33:         let config = RedisConfig::from_url(\"redis://127.0.0.1:6379\")?;",
        "// Line_Reference 36:         client.wait_for_connect().await?;",
        "// Line_Reference 56:             }))?",
        "// Line_Reference 59:             .await?;",
        "// Line_Reference 64:             .build()?;",
        "// Line_Reference 66:         let _ = supergraph.oneshot(request).await?.next_response().await;",
        "// Line_Reference 119:             }))?",
        "// Line_Reference 122:             .await?;",
        "// Line_Reference 127:             .build()?;",
        "// Line_Reference 128:         let _ = supergraph.oneshot(request).await?.next_response().await;",
        "// Line_Reference 138:         client.quit().await?;",
        "// Line_Reference 152:         let config = RedisConfig::from_url(\"redis://127.0.0.1:6379\")?;",
        "// Line_Reference 155:         client.wait_for_connect().await?;",
        "// Line_Reference 175:             .configuration_json(config.clone())?",
        "// Line_Reference 178:             .await?;",
        "// Line_Reference 197:             .build()?",
        "// Line_Reference 204:             .await?",
        "// Line_Reference 209:             .unwrap()?;",
        "// Line_Reference 223:             .build()?",
        "// Line_Reference 230:             .await?",
        "// Line_Reference 235:             .unwrap()?;",
        "// Line_Reference 246:             .configuration_json(config.clone())?",
        "// Line_Reference 249:             .await?;",
        "// Line_Reference 255:             .build()?",
        "// Line_Reference 262:             .await?",
        "// Line_Reference 267:             .unwrap()?;",
        "// Line_Reference 271:         client.quit().await?;",
        "// Line_Reference 279:         let config = RedisConfig::from_url(\"redis://127.0.0.1:6379\")?;",
        "// Line_Reference 282:         client.wait_for_connect().await?;",
        "// Line_Reference 360:             }))?",
        "// Line_Reference 370:             .build()?;",
        "// Line_Reference 374:             .await?",
        "// Line_Reference 381:           .get(\"subgraph:products:Query:07bd08ba4eb8b85451edd3b3aae3c3ad3dc0892d86deedde6e6d53f6415f807f:d9d84a3c7ffc27b0190a671212f3740e5b8478e84e23825830e97822e25cf05c\")",
        "// Line_Reference 387:         let s: String = client.get(\"subgraph:reviews:Product:4911f7a9dbad8a47b8900d65547503a2f3c0359f65c0bc5652ad9b9843281f66:826d5cf03645266e30655c7475530e2d40e0d5978595b0ab16318b1ce87c0fe1:d9d84a3c7ffc27b0190a671212f3740e5b8478e84e23825830e97822e25cf05c\").await.unwrap();",
        "// Line_Reference 462:             }))?",
        "// Line_Reference 472:             .build()?;",
        "// Line_Reference 476:             .await?",
        "// Line_Reference 483:         .get(\"subgraph:reviews:Product:d9a4cd73308dd13ca136390c10340823f94c335b9da198d2339c886c738abf0d:826d5cf03645266e30655c7475530e2d40e0d5978595b0ab16318b1ce87c0fe1:d9d84a3c7ffc27b0190a671212f3740e5b8478e84e23825830e97822e25cf05c\")",
        "// Line_Reference 489:         client.quit().await?;",
        "// Line_Reference 497:         let config = RedisConfig::from_url(\"redis://127.0.0.1:6379\")?;",
        "// Line_Reference 500:         client.wait_for_connect().await?;",
        "// Line_Reference 662:             }))?",
        "// Line_Reference 682:             .build()?;",
        "// Line_Reference 687:             .await?",
        "// Line_Reference 694:           .get(\"subgraph:products:Query:07bd08ba4eb8b85451edd3b3aae3c3ad3dc0892d86deedde6e6d53f6415f807f:d9d84a3c7ffc27b0190a671212f3740e5b8478e84e23825830e97822e25cf05c\")",
        "// Line_Reference 715:         .get(\"subgraph:reviews:Product:4911f7a9dbad8a47b8900d65547503a2f3c0359f65c0bc5652ad9b9843281f66:826d5cf03645266e30655c7475530e2d40e0d5978595b0ab16318b1ce87c0fe1:d9d84a3c7ffc27b0190a671212f3740e5b8478e84e23825830e97822e25cf05c\")",
        "// Line_Reference 747:             .build()?;",
        "// Line_Reference 752:             .await?",
        "// Line_Reference 759:           .get(\"subgraph:reviews:Product:4911f7a9dbad8a47b8900d65547503a2f3c0359f65c0bc5652ad9b9843281f66:c75297b98da101021e30020db99a3a11c2f9ac2008de94ce410c47940162e304:d9d84a3c7ffc27b0190a671212f3740e5b8478e84e23825830e97822e25cf05c\")",
        "// Line_Reference 792:             .build()?;",
        "// Line_Reference 797:             .await?",
        "// Line_Reference 803:         client.quit().await?;"
    ]
}
