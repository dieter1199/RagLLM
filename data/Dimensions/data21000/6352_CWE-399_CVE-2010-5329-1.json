{
    "cve_id": "CVE-2010-5329",
    "cve_description": "The video_usercopy function in drivers/media/video/v4l2-ioctl.c in the Linux kernel before 2.6.39 relies on the count value of a v4l2_ext_controls data structure to determine a kmalloc size, which might allow local users to cause a denial of service (memory consumption) via a large value.",
    "cve_publish_date": "2017-04-24",
    "cwe_id": "CWE-399",
    "cwe_name": "Resource Management Errors",
    "cwe_description": "Weaknesses in this category are related to improper management of system resources.",
    "commit_message": "[media] v4l: Share code between video_usercopy and video_ioctl2\n\nThe two functions are mostly identical. They handle the copy_from_user\nand copy_to_user operations related with V4L2 ioctls and call the real\nioctl handler.\n\nCreate a __video_usercopy function that implements the core of\nvideo_usercopy and video_ioctl2, and call that function from both.\n\nSigned-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>\nAcked-by: Hans Verkuil <hverkuil@xs4all.nl>\nSigned-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "v4l2-ioctl.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "11",
    "number_of_lines_deleted_vulnerable_to_cve": "98",
    "vulnerable_lines": [
        "// Line_Reference 297: /*",
        "// Line_Reference 298:  * helper function -- handles userspace copying for ioctl arguments",
        "// Line_Reference 299:  * Obsolete usercopy function - Should be removed soon",
        "// Line_Reference 300:  */",
        "// Line_Reference 301: long",
        "// Line_Reference 302: video_usercopy(struct file *file, unsigned int cmd, unsigned long arg,",
        "// Line_Reference 303: \t\tv4l2_kioctl func)",
        "// Line_Reference 304: {",
        "// Line_Reference 305: \tchar\tsbuf[128];",
        "// Line_Reference 306: \tvoid    *mbuf = NULL;",
        "// Line_Reference 307: \tvoid\t*parg = NULL;",
        "// Line_Reference 308: \tlong\terr  = -EINVAL;",
        "// Line_Reference 309: \tint     is_ext_ctrl;",
        "// Line_Reference 310: \tsize_t  ctrls_size = 0;",
        "// Line_Reference 311: \tvoid __user *user_ptr = NULL;",
        "// Line_Reference 312: ",
        "// Line_Reference 313: \tis_ext_ctrl = (cmd == VIDIOC_S_EXT_CTRLS || cmd == VIDIOC_G_EXT_CTRLS ||",
        "// Line_Reference 314: \t\t       cmd == VIDIOC_TRY_EXT_CTRLS);",
        "// Line_Reference 315: ",
        "// Line_Reference 316: \t/*  Copy arguments into temp kernel buffer  */",
        "// Line_Reference 317: \tswitch (_IOC_DIR(cmd)) {",
        "// Line_Reference 318: \tcase _IOC_NONE:",
        "// Line_Reference 319: \t\tparg = NULL;",
        "// Line_Reference 320: \t\tbreak;",
        "// Line_Reference 321: \tcase _IOC_READ:",
        "// Line_Reference 322: \tcase _IOC_WRITE:",
        "// Line_Reference 323: \tcase (_IOC_WRITE | _IOC_READ):",
        "// Line_Reference 324: \t\tif (_IOC_SIZE(cmd) <= sizeof(sbuf)) {",
        "// Line_Reference 325: \t\t\tparg = sbuf;",
        "// Line_Reference 326: \t\t} else {",
        "// Line_Reference 327: \t\t\t/* too big to allocate from stack */",
        "// Line_Reference 328: \t\t\tmbuf = kmalloc(_IOC_SIZE(cmd), GFP_KERNEL);",
        "// Line_Reference 329: \t\t\tif (NULL == mbuf)",
        "// Line_Reference 330: \t\t\t\treturn -ENOMEM;",
        "// Line_Reference 331: \t\t\tparg = mbuf;",
        "// Line_Reference 332: \t\t}",
        "// Line_Reference 333: ",
        "// Line_Reference 334: \t\terr = -EFAULT;",
        "// Line_Reference 335: \t\tif (_IOC_DIR(cmd) & _IOC_WRITE)",
        "// Line_Reference 336: \t\t\tif (copy_from_user(parg, (void __user *)arg, _IOC_SIZE(cmd)))",
        "// Line_Reference 337: \t\t\t\tgoto out;",
        "// Line_Reference 338: \t\tbreak;",
        "// Line_Reference 339: \t}",
        "// Line_Reference 340: \tif (is_ext_ctrl) {",
        "// Line_Reference 341: \t\tstruct v4l2_ext_controls *p = parg;",
        "// Line_Reference 342: ",
        "// Line_Reference 343: \t\t/* In case of an error, tell the caller that it wasn't",
        "// Line_Reference 344: \t\t   a specific control that caused it. */",
        "// Line_Reference 345: \t\tp->error_idx = p->count;",
        "// Line_Reference 346: \t\tuser_ptr = (void __user *)p->controls;",
        "// Line_Reference 347: \t\tif (p->count) {",
        "// Line_Reference 348: \t\t\tctrls_size = sizeof(struct v4l2_ext_control) * p->count;",
        "// Line_Reference 349: \t\t\t/* Note: v4l2_ext_controls fits in sbuf[] so mbuf is still NULL. */",
        "// Line_Reference 350: \t\t\tmbuf = kmalloc(ctrls_size, GFP_KERNEL);",
        "// Line_Reference 351: \t\t\terr = -ENOMEM;",
        "// Line_Reference 352: \t\t\tif (NULL == mbuf)",
        "// Line_Reference 353: \t\t\t\tgoto out_ext_ctrl;",
        "// Line_Reference 354: \t\t\terr = -EFAULT;",
        "// Line_Reference 355: \t\t\tif (copy_from_user(mbuf, user_ptr, ctrls_size))",
        "// Line_Reference 356: \t\t\t\tgoto out_ext_ctrl;",
        "// Line_Reference 357: \t\t\tp->controls = mbuf;",
        "// Line_Reference 358: \t\t}",
        "// Line_Reference 359: \t}",
        "// Line_Reference 360: ",
        "// Line_Reference 361: \t/* call driver */",
        "// Line_Reference 362: \terr = func(file, cmd, parg);",
        "// Line_Reference 363: \tif (err == -ENOIOCTLCMD)",
        "// Line_Reference 364: \t\terr = -EINVAL;",
        "// Line_Reference 365: \tif (is_ext_ctrl) {",
        "// Line_Reference 366: \t\tstruct v4l2_ext_controls *p = parg;",
        "// Line_Reference 367: ",
        "// Line_Reference 368: \t\tp->controls = (void *)user_ptr;",
        "// Line_Reference 369: \t\tif (p->count && err == 0 && copy_to_user(user_ptr, mbuf, ctrls_size))",
        "// Line_Reference 370: \t\t\terr = -EFAULT;",
        "// Line_Reference 371: \t\tgoto out_ext_ctrl;",
        "// Line_Reference 372: \t}",
        "// Line_Reference 373: \tif (err < 0)",
        "// Line_Reference 374: \t\tgoto out;",
        "// Line_Reference 375: ",
        "// Line_Reference 376: out_ext_ctrl:",
        "// Line_Reference 377: \t/*  Copy results into user buffer  */",
        "// Line_Reference 378: \tswitch (_IOC_DIR(cmd)) {",
        "// Line_Reference 379: \tcase _IOC_READ:",
        "// Line_Reference 380: \tcase (_IOC_WRITE | _IOC_READ):",
        "// Line_Reference 381: \t\tif (copy_to_user((void __user *)arg, parg, _IOC_SIZE(cmd)))",
        "// Line_Reference 382: \t\t\terr = -EFAULT;",
        "// Line_Reference 383: \t\tbreak;",
        "// Line_Reference 384: \t}",
        "// Line_Reference 385: ",
        "// Line_Reference 386: out:",
        "// Line_Reference 387: \tkfree(mbuf);",
        "// Line_Reference 388: \treturn err;",
        "// Line_Reference 389: }",
        "// Line_Reference 390: EXPORT_SYMBOL(video_usercopy);",
        "// Line_Reference 391: ",
        "// Line_Reference 2335: long video_ioctl2(struct file *file,",
        "// Line_Reference 2336: \t       unsigned int cmd, unsigned long arg)",
        "// Line_Reference 2398: \terr = __video_do_ioctl(file, cmd, parg);"
    ]
}
