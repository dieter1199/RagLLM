{
    "cve_id": "CVE-2014-9731",
    "cve_description": "The UDF filesystem implementation in the Linux kernel before 3.18.2 does not ensure that space is available for storing a symlink target's name along with a trailing \\0 character, which allows local users to obtain sensitive information via a crafted filesystem image, related to fs/udf/symlink.c and fs/udf/unicode.c.",
    "cve_publish_date": "2015-08-31",
    "cwe_id": "CWE-17",
    "cwe_name": "DEPRECATED: Code",
    "cwe_description": "This entry has been deprecated.  It was originally used for organizing the Development View (CWE-699) and some other views, but it introduced unnecessary complexity and depth to the resulting tree.",
    "commit_message": "udf: Check path length when reading symlink\n\nSymlink reading code does not check whether the resulting path fits into\nthe page provided by the generic code. This isn't as easy as just\nchecking the symlink size because of various encoding conversions we\nperform on path. So we have to check whether there is still enough space\nin the buffer on the fly.\n\nCC: stable@vger.kernel.org\nReported-by: Carl Henrik Lunde <chlunde@ping.uio.no>\nSigned-off-by: Jan Kara <jack@suse.cz>",
    "type_of_change": "Modification",
    "filename_of_changes": "symlink.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "26",
    "number_of_lines_deleted_vulnerable_to_cve": "5",
    "vulnerable_lines": [
        "// Line_Reference 33: static void udf_pc_to_char(struct super_block *sb, unsigned char *from,",
        "// Line_Reference 34: \t\t\t   int fromlen, unsigned char *to)",
        "// Line_Reference 65: \t\t\tp += udf_get_filename(sb, pc->componentIdent, p,",
        "// Line_Reference 66: \t\t\t\t\t      pc->lengthComponentIdent);",
        "// Line_Reference 111: \tudf_pc_to_char(inode->i_sb, symlink, inode->i_size, p);"
    ]
}
