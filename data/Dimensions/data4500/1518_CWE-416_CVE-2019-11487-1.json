{
    "cve_id": "CVE-2019-11487",
    "cve_description": "The Linux kernel before 5.1-rc5 allows page->_refcount reference count overflow, with resultant use-after-free issues, if about 140 GiB of RAM exists. This is related to fs/fuse/dev.c, fs/pipe.c, fs/splice.c, include/linux/mm.h, include/linux/pipe_fs_i.h, kernel/trace/trace.c, mm/gup.c, and mm/hugetlb.c. It can occur with FUSE requests.",
    "cve_publish_date": "2019-04-23",
    "cwe_id": "CWE-416",
    "cwe_name": "Use After Free",
    "cwe_description": "The product reuses or references memory after it has been freed. At some point afterward, the memory may be allocated again and saved in another pointer, while the original pointer references a location somewhere within the new allocation. Any operations using the original pointer are no longer valid because the memory \"belongs\" to the code that operates on the new pointer.",
    "commit_message": "mm: prevent get_user_pages() from overflowing page refcount\n\nIf the page refcount wraps around past zero, it will be freed while\nthere are still four billion references to it.  One of the possible\navenues for an attacker to try to make this happen is by doing direct IO\non a page multiple times.  This patch makes get_user_pages() refuse to\ntake a new page reference if there are already more than two billion\nreferences to the page.\n\nReported-by: Jann Horn <jannh@google.com>\nAcked-by: Matthew Wilcox <willy@infradead.org>\nCc: stable@kernel.org\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "gup.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "36",
    "number_of_lines_deleted_vulnerable_to_cve": "12",
    "vulnerable_lines": [
        "// Line_Reference 160: \tif (flags & FOLL_GET)",
        "// Line_Reference 161: \t\tget_page(page);",
        "// Line_Reference 298: \t\t\tget_page(page);",
        "// Line_Reference 500: \tget_page(*page);",
        "// Line_Reference 1430: \t\thead = compound_head(page);",
        "// Line_Reference 1432: \t\tif (!page_cache_get_speculative(head))",
        "// Line_Reference 1571: \thead = compound_head(pmd_page(orig));",
        "// Line_Reference 1572: \tif (!page_cache_add_speculative(head, refs)) {",
        "// Line_Reference 1609: \thead = compound_head(pud_page(orig));",
        "// Line_Reference 1610: \tif (!page_cache_add_speculative(head, refs)) {",
        "// Line_Reference 1646: \thead = compound_head(pgd_page(orig));",
        "// Line_Reference 1647: \tif (!page_cache_add_speculative(head, refs)) {"
    ]
}
