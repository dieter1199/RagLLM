Type_Samba,
Type_SambaAvahi,
type->addItem(tr("Samba Share"), (int)Type_Samba);
type->addItem(tr("Samba Share (Auto-discover host and port)"), (int)Type_SambaAvahi);
int t=create
? Type_Samba
: d.isLocalFile()
? Type_File
: d.url.scheme()==RemoteFsDevice::constSshfsProtocol
? Type_SshFs
: d.url.scheme()==RemoteFsDevice::constSambaProtocol
? Type_Samba
: Type_SambaAvahi;
smbPort->setValue(445);
case Type_Samba: {
smbShare->setText(d.url.path());
if (0!=d.url.port()) {
smbPort->setValue(d.url.port());
}
smbHost->setText(d.url.host());
smbUser->setText(d.url.userName());
smbPassword->setText(d.url.password());
QUrlQuery q(d.url);
if (q.hasQueryItem(RemoteFsDevice::constDomainQuery)) {
smbDomain->setText(q.queryItemValue(RemoteFsDevice::constDomainQuery));
} else {
smbDomain->setText(QString());
}
break;
}
case Type_SambaAvahi: {
smbAvahiShare->setText(d.url.path());
smbAvahiUser->setText(d.url.userName());
smbAvahiPassword->setText(d.url.password());
QUrlQuery q(d.url);
if (q.hasQueryItem(RemoteFsDevice::constDomainQuery)) {
smbAvahiDomain->setText(q.queryItemValue(RemoteFsDevice::constDomainQuery));
} else {
smbAvahiDomain->setText(QString());
}
if (q.hasQueryItem(RemoteFsDevice::constServiceNameQuery)) {
smbAvahiName->setText(q.queryItemValue(RemoteFsDevice::constServiceNameQuery));
} else {
smbAvahiName->setText(QString());
}
break;
}
connect(smbHost, SIGNAL(textChanged(const QString &)), this, SLOT(checkSaveable()));
connect(smbUser, SIGNAL(textChanged(const QString &)), this, SLOT(checkSaveable()));
connect(smbPassword, SIGNAL(textChanged(const QString &)), this, SLOT(checkSaveable()));
connect(smbDomain, SIGNAL(textChanged(const QString &)), this, SLOT(checkSaveable()));
connect(smbShare, SIGNAL(textChanged(const QString &)), this, SLOT(checkSaveable()));
connect(smbPort, SIGNAL(valueChanged(int)), this, SLOT(checkSaveable()));
connect(smbAvahiName, SIGNAL(textChanged(const QString &)), this, SLOT(checkSaveable()));
connect(smbAvahiUser, SIGNAL(textChanged(const QString &)), this, SLOT(checkSaveable()));
connect(smbAvahiPassword, SIGNAL(textChanged(const QString &)), this, SLOT(checkSaveable()));
connect(smbAvahiDomain, SIGNAL(textChanged(const QString &)), this, SLOT(checkSaveable()));
connect(smbAvahiShare, SIGNAL(textChanged(const QString &)), this, SLOT(checkSaveable()));
if (Type_Samba==type->itemData(type->currentIndex()).toInt() && 0==smbPort->value()) {
smbPort->setValue(445);
}
if (saveable && Type_SambaAvahi==type->itemData(type->currentIndex()).toInt()) {
saveable=!smbAvahiName->text().trimmed().isEmpty();
}
case Type_Samba:
det.url.setHost(smbHost->text().trimmed());
det.url.setUserName(smbUser->text().trimmed());
det.url.setPath(smbShare->text().trimmed());
det.url.setPort(smbPort->value());
det.url.setScheme(RemoteFsDevice::constSambaProtocol);
det.url.setPassword(smbPassword->text().trimmed());
if (!smbDomain->text().trimmed().isEmpty()) {
QUrlQuery q;
q.addQueryItem(RemoteFsDevice::constDomainQuery, smbDomain->text().trimmed());
det.url.setQuery(q);
}
break;
case Type_SambaAvahi:
det.url.setUserName(smbAvahiUser->text().trimmed());
det.url.setPath(smbAvahiShare->text().trimmed());
det.url.setPort(0);
det.url.setScheme(RemoteFsDevice::constSambaAvahiProtocol);
det.url.setPassword(smbAvahiPassword->text().trimmed());
if (!smbDomain->text().trimmed().isEmpty() || !smbAvahiName->text().trimmed().isEmpty()) {
QUrlQuery q;
if (!smbDomain->text().trimmed().isEmpty()) {
q.addQueryItem(RemoteFsDevice::constDomainQuery, smbAvahiDomain->text().trimmed());
}
if (!smbAvahiName->text().trimmed().isEmpty()) {
det.serviceName=smbAvahiName->text().trimmed();
q.addQueryItem(RemoteFsDevice::constServiceNameQuery, det.serviceName);
}
det.url.setQuery(q);
}
break;