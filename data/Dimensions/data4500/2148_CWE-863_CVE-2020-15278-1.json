{
    "cve_id": "CVE-2020-15278",
    "cve_description": "Red Discord Bot before version 3.4.1 has an unauthorized privilege escalation exploit in the Mod module. This exploit allows Discord users with a high privilege level within the guild to bypass hierarchy checks when the application is in a specific condition that is beyond that user's control. By abusing this exploit, it is possible to perform destructive actions within the guild the user has high privileges in. This exploit has been fixed in version 3.4.1. As a workaround, unloading the Mod module with unload mod or, disabling the massban command with command disable global massban can render this exploit not accessible. We still highly recommend updating to 3.4.1 to completely patch this issue.",
    "cve_publish_date": "2020-10-28",
    "cwe_id": "CWE-863",
    "cwe_name": "Incorrect Authorization",
    "cwe_description": "The product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. This allows attackers to bypass intended access restrictions.",
    "commit_message": "Merge pull request from GHSA-mp9m-g7qj-6vqr\n\n* Query members for unchunked guilds in massban\n\n* that thing that is a thing ;)",
    "type_of_change": "Modification",
    "filename_of_changes": "kickban.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "34",
    "number_of_lines_deleted_vulnerable_to_cve": "21",
    "vulnerable_lines": [
        "// Line_Reference 5: from typing import Optional, Tuple, Union",
        "// Line_Reference 444:             user = guild.get_member(user_id)",
        "// Line_Reference 445:             if user is not None:",
        "// Line_Reference 446:                 if user_id in tempbans:",
        "// Line_Reference 447:                     # We need to check if a user is tempbanned here because otherwise they won't be processed later on.",
        "// Line_Reference 448:                     continue",
        "// Line_Reference 450:                     # Instead of replicating all that handling... gets attr from decorator",
        "// Line_Reference 451:                     try:",
        "// Line_Reference 452:                         success, reason = await self.ban_user(",
        "// Line_Reference 453:                             user=user, ctx=ctx, days=days, reason=reason, create_modlog_case=True",
        "// Line_Reference 454:                         )",
        "// Line_Reference 455:                         if success:",
        "// Line_Reference 456:                             banned.append(user_id)",
        "// Line_Reference 457:                         else:",
        "// Line_Reference 458:                             errors[user_id] = _(\"Failed to ban user {user_id}: {reason}\").format(",
        "// Line_Reference 459:                                 user_id=user_id, reason=reason",
        "// Line_Reference 460:                             )",
        "// Line_Reference 461:                     except Exception as e:",
        "// Line_Reference 462:                         errors[user_id] = _(\"Failed to ban user {user_id}: {reason}\").format(",
        "// Line_Reference 463:                             user_id=user_id, reason=e",
        "// Line_Reference 464:                         )"
    ]
}
