{
    "cve_id": "CVE-2019-16785",
    "cve_description": "Waitress through version 1.3.1 implemented a \"MAY\" part of the RFC7230 which states: \"Although the line terminator for the start-line and header fields is the sequence CRLF, a recipient MAY recognize a single LF as a line terminator and ignore any preceding CR.\" Unfortunately if a front-end server does not parse header fields with an LF the same way as it does those with a CRLF it can lead to the front-end and the back-end server parsing the same HTTP message in two different ways. This can lead to a potential for HTTP request smuggling/splitting whereby Waitress may see two requests while the front-end server only sees a single HTTP message. This issue is fixed in Waitress 1.4.0.",
    "cve_publish_date": "2019-12-20",
    "cwe_id": "CWE-444",
    "cwe_name": "Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')",
    "cwe_description": "The product acts as an intermediary HTTP agent\n         (such as a proxy or firewall) in the data flow between two\n         entities such as a client and server, but it does not\n         interpret malformed HTTP requests or responses in ways that\n         are consistent with how the messages will be processed by\n         those entities that are at the ultimate destination.",
    "commit_message": "Remove support for non CRLF line endings\n\nhttps://tools.ietf.org/html/rfc7230#section-3.5 says that servers MAY\nimplement their parsers to use only the LF as a delimeter between lines,\nhowever if the frontend server does NOT do the same you can potentially\nallow a single HTTP request to be treated differently by the two\nservers.\n\nThis issue can be used to cause HTTP request smuggling or HTTP desync\nwhich may lead to vulnerabilities.\n\nTo increase robustness Waitress will no longer allow bare LF for HTTP\nmessages/headers and chunked encoding and instead now enforces that the\nline endings at CRLF.",
    "type_of_change": "Modification",
    "filename_of_changes": "test_parser.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "152",
    "number_of_lines_deleted_vulnerable_to_cve": "122",
    "vulnerable_lines": [
        "// Line_Reference 18: from waitress.compat import (",
        "// Line_Reference 19:     text_,",
        "// Line_Reference 20:     tobytes,",
        "// Line_Reference 21: )",
        "// Line_Reference 43:     def test_received_nonsense_with_double_cr(self):",
        "// Line_Reference 44:         data = b\"\"\"\\",
        "// Line_Reference 45: HTTP/1.0 GET /foobar",
        "// Line_Reference 46: ",
        "// Line_Reference 47: ",
        "// Line_Reference 48: \"\"\"",
        "// Line_Reference 50:         self.assertEqual(result, 22)",
        "// Line_Reference 57:         data = b\"\"\"\\",
        "// Line_Reference 58: HTTP/1.0 GET /foobar",
        "// Line_Reference 59:  Host: foo",
        "// Line_Reference 60: ",
        "// Line_Reference 61: ",
        "// Line_Reference 62: \"\"\"",
        "// Line_Reference 64:         self.assertEqual(result, 33)",
        "// Line_Reference 69:         data = b\"\"\"\\",
        "// Line_Reference 70: ",
        "// Line_Reference 71: ",
        "// Line_Reference 72: \"\"\"",
        "// Line_Reference 74:         self.assertEqual(result, 2)",
        "// Line_Reference 79:         data = b\"\"\"\\",
        "// Line_Reference 80: GET /foobar HTTP/8.4",
        "// Line_Reference 81: \"\"\"",
        "// Line_Reference 83:         self.assertEqual(result, 21)",
        "// Line_Reference 96:         data = b\"\"\"\\",
        "// Line_Reference 97: GET /foobar HTTP/8.4",
        "// Line_Reference 98: Content-Length: 10",
        "// Line_Reference 99: ",
        "// Line_Reference 100: \"\"\"",
        "// Line_Reference 102:         self.assertEqual(result, 41)",
        "// Line_Reference 110:         data = b\"\"\"\\",
        "// Line_Reference 111: GET /foobar HTTP/8.4",
        "// Line_Reference 112: X-Foo: 1",
        "// Line_Reference 113: \"\"\"",
        "// Line_Reference 115:         self.assertEqual(result, 30)",
        "// Line_Reference 123:         data = b\"\"\"\\",
        "// Line_Reference 124: GET /foobar HTTP/1.1",
        "// Line_Reference 125: Transfer-Encoding: chunked",
        "// Line_Reference 126: X-Foo: 1",
        "// Line_Reference 127: ",
        "// Line_Reference 128: 20;\\r\\n",
        "// Line_Reference 129: This string has 32 characters\\r\\n",
        "// Line_Reference 130: 0\\r\\n\\r\\n\"\"\"",
        "// Line_Reference 132:         self.assertEqual(result, 58)",
        "// Line_Reference 140:         data = b\"\"\"\\",
        "// Line_Reference 141: GET /foobar HTTP/1.1",
        "// Line_Reference 142: Transfer-Encoding: chunked",
        "// Line_Reference 143: X-Foo: 1",
        "// Line_Reference 144: ",
        "// Line_Reference 145: garbage",
        "// Line_Reference 146: \"\"\"",
        "// Line_Reference 151:         self.assertEqual(result, 8)",
        "// Line_Reference 156:         data = b\"\"\"\\",
        "// Line_Reference 157: GET /foobar HTTP/1.1",
        "// Line_Reference 158: Transfer-Encoding: chunked",
        "// Line_Reference 159: X-Foo: 1",
        "// Line_Reference 160: ",
        "// Line_Reference 161: 20;\\r\\n",
        "// Line_Reference 162: This string has 32 characters\\r\\n",
        "// Line_Reference 163: 0\\r\\n\\r\\n\"\"\"",
        "// Line_Reference 165:         self.assertEqual(result, 58)",
        "// Line_Reference 170:         self.assertEqual(self.parser.headers[\"CONTENT_LENGTH\"], \"32\")",
        "// Line_Reference 173:         data = b\"\"\"\\",
        "// Line_Reference 174: GET /foobar HTTP/8.4",
        "// Line_Reference 175: foo: bar\"\"\"",
        "// Line_Reference 182:         self.parser.parse_header(data)",
        "// Line_Reference 183:         self.assertEqual(self.parser.first_line, data)",
        "// Line_Reference 186:         data = b\"GET /foobar HTTP/8.4\\ncontent-length: abc\"",
        "// Line_Reference 192:         data = b\"GET /foobar HTTP/1.1\\ntransfer-encoding: ChUnKed\"",
        "// Line_Reference 197:         data = b\"GET /foobar HTTP/1.1\\nexpect: 100-continue\"",
        "// Line_Reference 202:         data = b\"GET /foobar HTTP/1.1\\nConnection: close\\n\\n\"",
        "// Line_Reference 301:         result = self._callFUT(b\"slam\\nslim\")",
        "// Line_Reference 313:         result = self._callFUT(b\"slim\\n slam\")",
        "// Line_Reference 317:         result = self._callFUT(b\"slam\\n\\tslim\")",
        "// Line_Reference 372:         data = b\"\"\"\\",
        "// Line_Reference 373: GET /foobar HTTP/8.4",
        "// Line_Reference 374: FirstName: mickey",
        "// Line_Reference 375: lastname: Mouse",
        "// Line_Reference 376: content-length: 7",
        "// Line_Reference 377: ",
        "// Line_Reference 378: Hello.",
        "// Line_Reference 379: \"\"\"",
        "// Line_Reference 387:             {\"FIRSTNAME\": \"mickey\", \"LASTNAME\": \"Mouse\", \"CONTENT_LENGTH\": \"7\",},",
        "// Line_Reference 394:         self.assertEqual(parser.get_body_stream().getvalue(), b\"Hello.\\n\")",
        "// Line_Reference 397:         data = b\"\"\"\\",
        "// Line_Reference 398: GET /foo/a+%2B%2F%C3%A4%3D%26a%3Aint?d=b+%2B%2F%3D%26b%3Aint&c+%2B%2F%3D%26c%3Aint=6 HTTP/8.4",
        "// Line_Reference 399: FirstName: mickey",
        "// Line_Reference 400: lastname: Mouse",
        "// Line_Reference 401: content-length: 10",
        "// Line_Reference 402: ",
        "// Line_Reference 403: Hello mickey.",
        "// Line_Reference 404: \"\"\"",
        "// Line_Reference 412:             {\"FIRSTNAME\": \"mickey\", \"LASTNAME\": \"Mouse\", \"CONTENT_LENGTH\": \"10\",},",
        "// Line_Reference 425:         data = b\"\"\"\\",
        "// Line_Reference 426: GET https://example.com:8080/foobar HTTP/8.4",
        "// Line_Reference 427: content-length: 7",
        "// Line_Reference 428: ",
        "// Line_Reference 429: Hello.",
        "// Line_Reference 430: \"\"\"",
        "// Line_Reference 436:         self.assertEqual(parser.headers, {\"CONTENT_LENGTH\": \"7\",})",
        "// Line_Reference 443:         self.assertEqual(parser.get_body_stream().getvalue(), b\"Hello.\\n\")",
        "// Line_Reference 448:         data = b\"\"\"\\",
        "// Line_Reference 449: GET /foobar HTTP/8.4",
        "// Line_Reference 450: x-forwarded-for: 10.11.12.13",
        "// Line_Reference 451: x-forwarded-for: unknown,127.0.0.1",
        "// Line_Reference 452: X-Forwarded_for: 255.255.255.255",
        "// Line_Reference 453: content-length: 7",
        "// Line_Reference 454: ",
        "// Line_Reference 455: Hello.",
        "// Line_Reference 456: \"\"\"",
        "// Line_Reference 462:                 \"CONTENT_LENGTH\": \"7\",",
        "// Line_Reference 468:         data = b\"\"\"\\",
        "// Line_Reference 469: GET /foobar HTTP/8.4",
        "// Line_Reference 470: x-auth_user: bob",
        "// Line_Reference 471: content-length: 7",
        "// Line_Reference 472: ",
        "// Line_Reference 473: Hello.",
        "// Line_Reference 474: \"\"\"",
        "// Line_Reference 477:         self.assertEqual(self.parser.headers, {\"CONTENT_LENGTH\": \"7\",})"
    ]
}
