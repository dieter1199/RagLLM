{
    "cve_id": "CVE-2022-35917",
    "cve_description": "Solana Pay is a protocol and set of reference implementations that enable developers to incorporate decentralized payments into their apps and services. When a Solana Pay transaction is located using a reference key, it may be checked to represent a transfer of the desired amount to the recipient, using the supplied `validateTransfer` function. An edge case regarding this mechanism could cause the validation logic to validate multiple transfers. This issue has been patched as of version `0.2.1`. Users of the Solana Pay SDK should upgrade to it. There are no known workarounds for this issue.",
    "cve_publish_date": "2022-08-01",
    "cwe_id": "CWE-670",
    "cwe_name": "Always-Incorrect Control Flow Implementation",
    "cwe_description": "The code contains a control flow path that does not reflect the algorithm that the path is intended to implement, leading to incorrect behavior any time this path is navigated.",
    "commit_message": "finish transfer validation implementation",
    "type_of_change": "Modification",
    "filename_of_changes": "validateTransfer.ts",
    "code_language": "TypeScript",
    "number_of_lines_added_for_mitigation": "60",
    "number_of_lines_deleted_vulnerable_to_cve": "18",
    "vulnerable_lines": [
        "// Line_Reference 1: import { getAssociatedTokenAddress } from '@solana/spl-token';",
        "// Line_Reference 12: import { Amount, Memo, Recipient, References, SPLToken } from './types';",
        "// Line_Reference 61:     const [preAmount, postAmount] = splToken",
        "// Line_Reference 62:         ? await validateSPLTokenTransfer(message, meta, recipient, splToken)",
        "// Line_Reference 63:         : await validateSystemTransfer(message, meta, recipient);",
        "// Line_Reference 67:     if (reference) {",
        "// Line_Reference 68:         if (!Array.isArray(reference)) {",
        "// Line_Reference 69:             reference = [reference];",
        "// Line_Reference 70:         }",
        "// Line_Reference 71: ",
        "// Line_Reference 72:         for (const pubkey of reference) {",
        "// Line_Reference 73:             if (!message.accountKeys.some((accountKey) => accountKey.equals(pubkey)))",
        "// Line_Reference 74:                 throw new ValidateTransferError('reference not found');",
        "// Line_Reference 75:         }",
        "// Line_Reference 78:     // FIXME: add memo check",
        "// Line_Reference 79: ",
        "// Line_Reference 86:     recipient: Recipient",
        "// Line_Reference 101:     splToken: SPLToken"
    ]
}
