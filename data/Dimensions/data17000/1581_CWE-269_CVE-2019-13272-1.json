{
    "cve_id": "CVE-2019-13272",
    "cve_description": "In the Linux kernel before 5.1.17, ptrace_link in kernel/ptrace.c mishandles the recording of the credentials of a process that wants to create a ptrace relationship, which allows local users to obtain root access by leveraging certain scenarios with a parent-child process relationship, where a parent drops privileges and calls execve (potentially allowing control by an attacker). One contributing factor is an object lifetime issue (which can also cause a panic). Another contributing factor is incorrect marking of a ptrace relationship as privileged, which is exploitable through (for example) Polkit's pkexec helper with PTRACE_TRACEME. NOTE: SELinux deny_ptrace might be a usable workaround in some environments.",
    "cve_publish_date": "2019-07-17",
    "cwe_id": "CWE-269",
    "cwe_name": "Improper Privilege Management",
    "cwe_description": "The product does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.",
    "commit_message": "ptrace: Fix ->ptracer_cred handling for PTRACE_TRACEME\n\nFix two issues:\n\nWhen called for PTRACE_TRACEME, ptrace_link() would obtain an RCU\nreference to the parent's objective credentials, then give that pointer\nto get_cred().  However, the object lifetime rules for things like\nstruct cred do not permit unconditionally turning an RCU reference into\na stable reference.\n\nPTRACE_TRACEME records the parent's credentials as if the parent was\nacting as the subject, but that's not the case.  If a malicious\nunprivileged child uses PTRACE_TRACEME and the parent is privileged, and\nat a later point, the parent process becomes attacker-controlled\n(because it drops privileges and calls execve()), the attacker ends up\nwith control over two processes with a privileged ptrace relationship,\nwhich can be abused to ptrace a suid binary and obtain root privileges.\n\nFix both of these by always recording the credentials of the process\nthat is requesting the creation of the ptrace relationship:\ncurrent_cred() can't change under us, and current is the proper subject\nfor access control.\n\nThis change is theoretically userspace-visible, but I am not aware of\nany code that it will actually break.\n\nFixes: 64b875f7ac8a (\"ptrace: Capture the ptracer's creds not PT_PTRACE_CAP\")\nSigned-off-by: Jann Horn <jannh@google.com>\nAcked-by: Oleg Nesterov <oleg@redhat.com>\nCc: stable@vger.kernel.org\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "ptrace.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "1",
    "number_of_lines_deleted_vulnerable_to_cve": "3",
    "vulnerable_lines": [
        "// Line_Reference 82: \trcu_read_lock();",
        "// Line_Reference 83: \t__ptrace_link(child, new_parent, __task_cred(new_parent));",
        "// Line_Reference 84: \trcu_read_unlock();"
    ]
}
