{
    "cve_id": "CVE-2021-41265",
    "cve_description": "Flask-AppBuilder is a development framework built on top of Flask. Verions prior to 3.3.4 contain an improper authentication vulnerability in the REST API. The issue allows for a malicious actor with a carefully crafted request to successfully authenticate and gain access to existing protected REST API endpoints. This only affects non database authentication types and new REST API endpoints. Users should upgrade to Flask-AppBuilder 3.3.4 to receive a patch.",
    "cve_publish_date": "2021-12-09",
    "cwe_id": "CWE-287",
    "cwe_name": "Improper Authentication",
    "cwe_description": "When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.",
    "commit_message": "chore: improve schema validation (#1712)",
    "type_of_change": "Modification",
    "filename_of_changes": "api.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "28",
    "number_of_lines_deleted_vulnerable_to_cve": "34",
    "vulnerable_lines": [
        "// Line_Reference 1: from flask import request",
        "// Line_Reference 8: ",
        "// Line_Reference 9: from ..api import BaseApi, safe",
        "// Line_Reference 10: from ..const import (",
        "// Line_Reference 11:     API_SECURITY_ACCESS_TOKEN_KEY,",
        "// Line_Reference 12:     API_SECURITY_PASSWORD_KEY,",
        "// Line_Reference 13:     API_SECURITY_PROVIDER_DB,",
        "// Line_Reference 14:     API_SECURITY_PROVIDER_KEY,",
        "// Line_Reference 15:     API_SECURITY_PROVIDER_LDAP,",
        "// Line_Reference 16:     API_SECURITY_REFRESH_KEY,",
        "// Line_Reference 17:     API_SECURITY_REFRESH_TOKEN_KEY,",
        "// Line_Reference 18:     API_SECURITY_USERNAME_KEY,",
        "// Line_Reference 19:     API_SECURITY_VERSION,",
        "// Line_Reference 20: )",
        "// Line_Reference 21: from ..views import expose",
        "// Line_Reference 38:     def login(self):",
        "// Line_Reference 91:         username = request.json.get(API_SECURITY_USERNAME_KEY, None)",
        "// Line_Reference 92:         password = request.json.get(API_SECURITY_PASSWORD_KEY, None)",
        "// Line_Reference 93:         provider = request.json.get(API_SECURITY_PROVIDER_KEY, None)",
        "// Line_Reference 94:         refresh = request.json.get(API_SECURITY_REFRESH_KEY, False)",
        "// Line_Reference 95:         if not username or not password or not provider:",
        "// Line_Reference 96:             return self.response_400(message=\"Missing required parameter\")",
        "// Line_Reference 98:         if provider == API_SECURITY_PROVIDER_DB:",
        "// Line_Reference 99:             user = self.appbuilder.sm.auth_user_db(username, password)",
        "// Line_Reference 100:         elif provider == API_SECURITY_PROVIDER_LDAP:",
        "// Line_Reference 101:             user = self.appbuilder.sm.auth_user_ldap(username, password)",
        "// Line_Reference 102:         else:",
        "// Line_Reference 103:             return self.response_400(",
        "// Line_Reference 104:                 message=\"Provider {} not supported\".format(provider)",
        "// Line_Reference 114:         if refresh:",
        "// Line_Reference 115:             resp[API_SECURITY_REFRESH_TOKEN_KEY] = create_refresh_token(",
        "// Line_Reference 116:                 identity=user.id",
        "// Line_Reference 117:             )",
        "// Line_Reference 123:     def refresh(self):"
    ]
}
