{
    "cve_id": "CVE-2016-6327",
    "cve_description": "drivers/infiniband/ulp/srpt/ib_srpt.c in the Linux kernel before 4.5.1 allows local users to cause a denial of service (NULL pointer dereference and system crash) by using an ABORT_TASK command to abort a device write operation.",
    "cve_publish_date": "2016-10-16",
    "cwe_id": "CWE-476",
    "cwe_name": "NULL Pointer Dereference",
    "cwe_description": "The product dereferences a pointer that it expects to be valid but is NULL.",
    "commit_message": "IB/srpt: Simplify srpt_handle_tsk_mgmt()\n\nLet the target core check task existence instead of the SRP target\ndriver. Additionally, let the target core check the validity of the\ntask management request instead of the ib_srpt driver.\n\nThis patch fixes the following kernel crash:\n\nBUG: unable to handle kernel NULL pointer dereference at 0000000000000001\nIP: [<ffffffffa0565f37>] srpt_handle_new_iu+0x6d7/0x790 [ib_srpt]\nOops: 0002 [#1] SMP\nCall Trace:\n [<ffffffffa05660ce>] srpt_process_completion+0xde/0x570 [ib_srpt]\n [<ffffffffa056669f>] srpt_compl_thread+0x13f/0x160 [ib_srpt]\n [<ffffffff8109726f>] kthread+0xcf/0xe0\n [<ffffffff81613cfc>] ret_from_fork+0x7c/0xb0\n\nSigned-off-by: Bart Van Assche <bart.vanassche@sandisk.com>\nFixes: 3e4f574857ee (\"ib_srpt: Convert TMR path to target_submit_tmr\")\nTested-by: Alex Estrin <alex.estrin@intel.com>\nReviewed-by: Christoph Hellwig <hch@lst.de>\nCc: Nicholas Bellinger <nab@linux-iscsi.org>\nCc: Sagi Grimberg <sagig@mellanox.com>\nCc: stable <stable@vger.kernel.org>\nSigned-off-by: Doug Ledford <dledford@redhat.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "ib_srpt.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "1",
    "number_of_lines_deleted_vulnerable_to_cve": "58",
    "vulnerable_lines": [
        "// Line_Reference 1673: /**",
        "// Line_Reference 1674:  * srpt_rx_mgmt_fn_tag() - Process a task management function by tag.",
        "// Line_Reference 1675:  * @ch: RDMA channel of the task management request.",
        "// Line_Reference 1676:  * @fn: Task management function to perform.",
        "// Line_Reference 1677:  * @req_tag: Tag of the SRP task management request.",
        "// Line_Reference 1678:  * @mgmt_ioctx: I/O context of the task management request.",
        "// Line_Reference 1679:  *",
        "// Line_Reference 1680:  * Returns zero if the target core will process the task management",
        "// Line_Reference 1681:  * request asynchronously.",
        "// Line_Reference 1682:  *",
        "// Line_Reference 1683:  * Note: It is assumed that the initiator serializes tag-based task management",
        "// Line_Reference 1684:  * requests.",
        "// Line_Reference 1685:  */",
        "// Line_Reference 1686: static int srpt_rx_mgmt_fn_tag(struct srpt_send_ioctx *ioctx, u64 tag)",
        "// Line_Reference 1687: {",
        "// Line_Reference 1688: \tstruct srpt_device *sdev;",
        "// Line_Reference 1689: \tstruct srpt_rdma_ch *ch;",
        "// Line_Reference 1690: \tstruct srpt_send_ioctx *target;",
        "// Line_Reference 1691: \tint ret, i;",
        "// Line_Reference 1692: ",
        "// Line_Reference 1693: \tret = -EINVAL;",
        "// Line_Reference 1694: \tch = ioctx->ch;",
        "// Line_Reference 1695: \tBUG_ON(!ch);",
        "// Line_Reference 1696: \tBUG_ON(!ch->sport);",
        "// Line_Reference 1697: \tsdev = ch->sport->sdev;",
        "// Line_Reference 1698: \tBUG_ON(!sdev);",
        "// Line_Reference 1699: \tspin_lock_irq(&sdev->spinlock);",
        "// Line_Reference 1700: \tfor (i = 0; i < ch->rq_size; ++i) {",
        "// Line_Reference 1701: \t\ttarget = ch->ioctx_ring[i];",
        "// Line_Reference 1702: \t\tif (target->cmd.se_lun == ioctx->cmd.se_lun &&",
        "// Line_Reference 1703: \t\t    target->cmd.tag == tag &&",
        "// Line_Reference 1704: \t\t    srpt_get_cmd_state(target) != SRPT_STATE_DONE) {",
        "// Line_Reference 1705: \t\t\tret = 0;",
        "// Line_Reference 1706: \t\t\t/* now let the target core abort &target->cmd; */",
        "// Line_Reference 1707: \t\t\tbreak;",
        "// Line_Reference 1708: \t\t}",
        "// Line_Reference 1709: \t}",
        "// Line_Reference 1710: \tspin_unlock_irq(&sdev->spinlock);",
        "// Line_Reference 1711: \treturn ret;",
        "// Line_Reference 1712: }",
        "// Line_Reference 1713: ",
        "// Line_Reference 1748: \tuint32_t tag = 0;",
        "// Line_Reference 1764: \tif (tcm_tmr < 0) {",
        "// Line_Reference 1765: \t\tsend_ioctx->cmd.se_tmr_req->response =",
        "// Line_Reference 1766: \t\t\tTMR_TASK_MGMT_FUNCTION_NOT_SUPPORTED;",
        "// Line_Reference 1767: \t\tgoto fail;",
        "// Line_Reference 1768: \t}",
        "// Line_Reference 1771: ",
        "// Line_Reference 1772: \tif (srp_tsk->tsk_mgmt_func == SRP_TSK_ABORT_TASK) {",
        "// Line_Reference 1773: \t\trc = srpt_rx_mgmt_fn_tag(send_ioctx, srp_tsk->task_tag);",
        "// Line_Reference 1774: \t\tif (rc < 0) {",
        "// Line_Reference 1775: \t\t\tsend_ioctx->cmd.se_tmr_req->response =",
        "// Line_Reference 1776: \t\t\t\t\tTMR_TASK_DOES_NOT_EXIST;",
        "// Line_Reference 1777: \t\t\tgoto fail;",
        "// Line_Reference 1778: \t\t}",
        "// Line_Reference 1779: \t\ttag = srp_tsk->task_tag;",
        "// Line_Reference 1780: \t}",
        "// Line_Reference 1782: \t\t\t\tsrp_tsk, tcm_tmr, GFP_KERNEL, tag,"
    ]
}
