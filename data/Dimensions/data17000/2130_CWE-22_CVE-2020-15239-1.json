{
    "cve_id": "CVE-2020-15239",
    "cve_description": "In xmpp-http-upload before version 0.4.0, when the GET method is attacked, attackers can read files which have a `.data` suffix and which are accompanied by a JSON file with the `.meta` suffix. This can lead to Information Disclosure and in some shared-hosting scenarios also to circumvention of authentication or other limitations on the outbound (GET) traffic. For example, in a scenario where a single server has multiple instances of the application running (with separate DATA_ROOT settings), an attacker who has knowledge about the directory structure is able to read files from any other instance to which the process has read access. If instances have individual authentication (for example, HTTP authentication via a reverse proxy, source IP based filtering) or other restrictions (such as quotas), attackers may circumvent those limits in such a scenario by using the Directory Traversal to retrieve data from the other instances. If the associated XMPP server (or anyone knowing the SECRET_KEY) is malicious, they can write files outside the DATA_ROOT. The files which are written are constrained to have the `.meta` and the `.data` suffixes; the `.meta` file will contain the JSON with the Content-Type of the original request and the `.data` file will contain the payload. The issue is patched in version 0.4.0.",
    "cve_publish_date": "2020-10-06",
    "cwe_id": "CWE-22",
    "cwe_name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
    "cwe_description": "The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
    "commit_message": "Simplify path handling, use safe_join\n\nThe current implementation of sanitized_join did not handle\n\"..\" properly. The problem is, that .absolute() does not do\nwhat .resolve() does, but .resolve() does not work on non\nexistant paths.\n\nAnyway, flask has a function exactly for this: safe_join.\n\nSo let's use that one.\n\nWhile at it, simplified the whole path handling a bit.",
    "type_of_change": "Modification",
    "filename_of_changes": "xhu.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "15",
    "number_of_lines_deleted_vulnerable_to_cve": "34",
    "vulnerable_lines": [
        "// Line_Reference 42: def sanitized_join(path: str, root: pathlib.Path) -> pathlib.Path:",
        "// Line_Reference 43:     result = (root / path).absolute()",
        "// Line_Reference 44:     if not str(result).startswith(str(root) + \"/\"):",
        "// Line_Reference 45:         raise ValueError(\"resulting path is outside root\")",
        "// Line_Reference 46:     return result",
        "// Line_Reference 47: ",
        "// Line_Reference 48: ",
        "// Line_Reference 49: def get_paths(base_path: pathlib.Path):",
        "// Line_Reference 50:     data_file = pathlib.Path(str(base_path) + \".data\")",
        "// Line_Reference 51:     metadata_file = pathlib.Path(str(base_path) + \".meta\")",
        "// Line_Reference 61: def get_info(path: str, root: pathlib.Path) -> typing.Tuple[",
        "// Line_Reference 64:     dest_path = sanitized_join(",
        "// Line_Reference 65:         path,",
        "// Line_Reference 66:         pathlib.Path(app.config[\"DATA_ROOT\"]),",
        "// Line_Reference 67:     )",
        "// Line_Reference 68: ",
        "// Line_Reference 69:     data_file, metadata_file = get_paths(dest_path)",
        "// Line_Reference 107:         dest_path = sanitized_join(",
        "// Line_Reference 108:             path,",
        "// Line_Reference 109:             pathlib.Path(app.config[\"DATA_ROOT\"]),",
        "// Line_Reference 110:         )",
        "// Line_Reference 111:     except ValueError:",
        "// Line_Reference 137:     dest_path.parent.mkdir(parents=True, exist_ok=True, mode=0o770)",
        "// Line_Reference 138:     data_file, metadata_file = get_paths(dest_path)",
        "// Line_Reference 192:         data_file, metadata = get_info(",
        "// Line_Reference 193:             path,",
        "// Line_Reference 194:             pathlib.Path(app.config[\"DATA_ROOT\"])",
        "// Line_Reference 195:         )",
        "// Line_Reference 198:     except (OSError, ValueError):",
        "// Line_Reference 217:         data_file, metadata = get_info(",
        "// Line_Reference 218:             path,",
        "// Line_Reference 219:             pathlib.Path(app.config[\"DATA_ROOT\"])",
        "// Line_Reference 220:         )",
        "// Line_Reference 221:     except (OSError, ValueError):"
    ]
}
