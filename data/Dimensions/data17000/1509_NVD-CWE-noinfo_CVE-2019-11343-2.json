{
    "cve_id": "CVE-2019-11343",
    "cve_description": "Torpedo Query before 2.5.3 mishandles the LIKE operator in ConditionBuilder.java, LikeCondition.java, and NotLikeCondition.java.",
    "cve_publish_date": "2020-03-12",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Fix issue with like",
    "type_of_change": "Modification",
    "filename_of_changes": "LikeCondition.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "9",
    "number_of_lines_deleted_vulnerable_to_cve": "41",
    "vulnerable_lines": [
        "// Line_Reference 22: import java.util.Collections;",
        "// Line_Reference 23: import java.util.List;",
        "// Line_Reference 24: import java.util.concurrent.atomic.AtomicInteger;",
        "// Line_Reference 25: ",
        "// Line_Reference 26: import org.torpedoquery.jpa.internal.Condition;",
        "// Line_Reference 30: public class LikeCondition implements Condition {",
        "// Line_Reference 61: \tprivate final String toMatch;",
        "// Line_Reference 62: \tprivate final Type type;",
        "// Line_Reference 63: \tprivate final Selector selector;",
        "// Line_Reference 64: ",
        "// Line_Reference 70: \t * @param type",
        "// Line_Reference 71: \t *            a",
        "// Line_Reference 72: \t *            {@link org.torpedoquery.jpa.internal.conditions.LikeCondition.Type}",
        "// Line_Reference 73: \t *            object.",
        "// Line_Reference 74: \t * @param selector",
        "// Line_Reference 75: \t *            a {@link org.torpedoquery.jpa.internal.Selector} object.",
        "// Line_Reference 76: \t * @param toMatch",
        "// Line_Reference 77: \t *            a {@link java.lang.String} object.",
        "// Line_Reference 79: \tpublic LikeCondition(Type type, Selector selector, String toMatch) {",
        "// Line_Reference 80: \t\tthis.type = type;",
        "// Line_Reference 81: \t\tthis.selector = selector;",
        "// Line_Reference 82: \t\tthis.toMatch = toMatch;",
        "// Line_Reference 85: \t/** {@inheritDoc} */",
        "// Line_Reference 87: \tpublic String createQueryFragment(AtomicInteger incrementor) {",
        "// Line_Reference 88: \t\treturn selector.createQueryFragment(incrementor) + \" \" + getLike() + \" '\" + type.wrap(toMatch) + \"' \";",
        "// Line_Reference 89: \t}",
        "// Line_Reference 90: ",
        "// Line_Reference 91: \t/**",
        "// Line_Reference 92: \t * <p>",
        "// Line_Reference 93: \t * getLike.",
        "// Line_Reference 94: \t * </p>",
        "// Line_Reference 95: \t *",
        "// Line_Reference 96: \t * @return a {@link java.lang.String} object.",
        "// Line_Reference 97: \t */",
        "// Line_Reference 98: \tprotected String getLike() {",
        "// Line_Reference 102: \t/** {@inheritDoc} */",
        "// Line_Reference 103: \t@Override",
        "// Line_Reference 104: \tpublic List<Parameter> getParameters() {",
        "// Line_Reference 105: \t\treturn Collections.emptyList();",
        "// Line_Reference 106: \t}",
        "// Line_Reference 107: "
    ]
}
