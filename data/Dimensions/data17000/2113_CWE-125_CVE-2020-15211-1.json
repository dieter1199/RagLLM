{
    "cve_id": "CVE-2020-15211",
    "cve_description": "In TensorFlow Lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, saved models in the flatbuffer format use a double indexing scheme: a model has a set of subgraphs, each subgraph has a set of operators and each operator has a set of input/output tensors. The flatbuffer format uses indices for the tensors, indexing into an array of tensors that is owned by the subgraph. This results in a pattern of double array indexing when trying to get the data of each tensor. However, some operators can have some tensors be optional. To handle this scenario, the flatbuffer model uses a negative `-1` value as index for these tensors. This results in special casing during validation at model loading time. Unfortunately, this means that the `-1` index is a valid tensor index for any operator, including those that don't expect optional inputs and including for output tensors. Thus, this allows writing and reading from outside the bounds of heap allocated arrays, although only at a specific offset from the start of these arrays. This results in both read and write gadgets, albeit very limited in scope. The issue is patched in several commits (46d5b0852, 00302787b7, e11f5558, cd31fd0ce, 1970c21, and fff2c83), and is released in TensorFlow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1. A potential workaround would be to add a custom `Verifier` to the model loading code to ensure that only operators which accept optional inputs use the `-1` special value and only for the tensors that they expect to be optional. Since this allow-list type approach is erro-prone, we advise upgrading to the patched code.",
    "cve_publish_date": "2020-09-25",
    "cwe_id": "CWE-125",
    "cwe_name": "Out-of-bounds Read",
    "cwe_description": "The product reads data past the end, or before the beginning, of the intended buffer.",
    "commit_message": "[tflite]: Insert `nullptr` checks when obtaining tensors.\n\nAs part of ongoing refactoring, `tflite::GetInput`, `tflite::GetOutput`, `tflite::GetTemporary` and `tflite::GetIntermediates` will return `nullptr` in some cases. Hence, we insert the `nullptr` checks on all usages.\n\nWe also insert `nullptr` checks on usages of `tflite::GetVariableInput` and `tflite::GetOptionalInputTensor` but only in the cases where there is no obvious check that `nullptr` is acceptable (that is, we only insert the check for the output of these two functions if the tensor is accessed as if it is always not `nullptr`).\n\nPiperOrigin-RevId: 332521299\nChange-Id: I29af455bcb48d0b92e58132d951a3badbd772d56",
    "type_of_change": "Modification",
    "filename_of_changes": "activations.cc",
    "code_language": "C++",
    "number_of_lines_added_for_mitigation": "88",
    "number_of_lines_deleted_vulnerable_to_cve": "44",
    "vulnerable_lines": [
        "// Line_Reference 255:   const TfLiteTensor* input = GetInput(context, node, 0);",
        "// Line_Reference 256:   TfLiteTensor* output = GetOutput(context, node, 0);",
        "// Line_Reference 275:   const TfLiteTensor* input = GetInput(context, node, 0);",
        "// Line_Reference 276:   TfLiteTensor* output = GetOutput(context, node, 0);",
        "// Line_Reference 303:   TfLiteTensor* output = GetOutput(context, node, 0);",
        "// Line_Reference 308:     const TfLiteTensor* input = GetInput(context, node, 0);",
        "// Line_Reference 340:   const TfLiteTensor* input = GetInput(context, node, 0);",
        "// Line_Reference 341:   TfLiteTensor* output = GetOutput(context, node, 0);",
        "// Line_Reference 369:   const TfLiteTensor* input = GetInput(context, node, 0);",
        "// Line_Reference 370:   TfLiteTensor* output = GetOutput(context, node, 0);",
        "// Line_Reference 454:   const TfLiteTensor* input = GetInput(context, node, 0);",
        "// Line_Reference 455:   TfLiteTensor* output = GetOutput(context, node, 0);",
        "// Line_Reference 549:   const TfLiteTensor* input = GetInput(context, node, 0);",
        "// Line_Reference 550:   TfLiteTensor* output = GetOutput(context, node, 0);",
        "// Line_Reference 617:   const TfLiteTensor* input = GetInput(context, node, 0);",
        "// Line_Reference 618:   TfLiteTensor* output = GetOutput(context, node, 0);",
        "// Line_Reference 653:   const TfLiteTensor* input = GetInput(context, node, 0);",
        "// Line_Reference 654:   TfLiteTensor* output = GetOutput(context, node, 0);",
        "// Line_Reference 655:   const TfLiteTensor* alpha = GetInput(context, node, 1);",
        "// Line_Reference 707:   const TfLiteTensor* input = GetInput(context, node, 0);",
        "// Line_Reference 708:   TfLiteTensor* output = GetOutput(context, node, 0);",
        "// Line_Reference 735:   const TfLiteTensor* input = GetInput(context, node, 0);",
        "// Line_Reference 736:   TfLiteTensor* output = GetOutput(context, node, 0);",
        "// Line_Reference 766:   const TfLiteTensor* input = GetInput(context, node, 0);",
        "// Line_Reference 767:   TfLiteTensor* output = GetOutput(context, node, 0);",
        "// Line_Reference 817:   const TfLiteTensor* input = GetInput(context, node, 0);",
        "// Line_Reference 818:   TfLiteTensor* output = GetOutput(context, node, 0);",
        "// Line_Reference 848:   const TfLiteTensor* input = GetInput(context, node, 0);",
        "// Line_Reference 849:   TfLiteTensor* output = GetOutput(context, node, 0);",
        "// Line_Reference 922:   const TfLiteTensor* input = GetInput(context, node, 0);",
        "// Line_Reference 923:   TfLiteTensor* output = GetOutput(context, node, 0);",
        "// Line_Reference 1070:   const TfLiteTensor* input = GetInput(context, node, 0);",
        "// Line_Reference 1071:   TfLiteTensor* output = GetOutput(context, node, 0);",
        "// Line_Reference 1125:   const TfLiteTensor* input = GetInput(context, node, 0);",
        "// Line_Reference 1126:   TfLiteTensor* output = GetOutput(context, node, 0);",
        "// Line_Reference 1186:   const TfLiteTensor* input = GetInput(context, node, 0);",
        "// Line_Reference 1187:   const TfLiteTensor* alpha = GetInput(context, node, 1);",
        "// Line_Reference 1188:   TfLiteTensor* output = GetOutput(context, node, 0);",
        "// Line_Reference 1297:   const TfLiteTensor* input = GetInput(context, node, 0);",
        "// Line_Reference 1298:   TfLiteTensor* output = GetOutput(context, node, 0);",
        "// Line_Reference 1335:   const TfLiteTensor* input = GetInput(context, node, 0);",
        "// Line_Reference 1336:   TfLiteTensor* output = GetOutput(context, node, 0);",
        "// Line_Reference 1349:   const TfLiteTensor* input = GetInput(context, node, 0);",
        "// Line_Reference 1350:   TfLiteTensor* output = GetOutput(context, node, 0);"
    ]
}
