{
    "cve_id": "CVE-2021-32634",
    "cve_description": "Emissary is a distributed, peer-to-peer, data-driven workflow framework. Emissary 6.4.0 is vulnerable to Unsafe Deserialization of post-authenticated requests to the [`WorkSpaceClientEnqueue.action`](https://github.com/NationalSecurityAgency/emissary/blob/30c54ef16c6eb6ed09604a929939fb9f66868382/src/main/java/emissary/server/mvc/internal/WorkSpaceClientEnqueueAction.java) REST endpoint. This issue may lead to post-auth Remote Code Execution. This issue has been patched in version 6.5.0. As a workaround, one can disable network access to Emissary from untrusted sources.",
    "cve_publish_date": "2021-05-21",
    "cwe_id": "CWE-502",
    "cwe_name": "Deserialization of Untrusted Data",
    "cwe_description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
    "commit_message": "Merge pull request from GHSA-m5qf-gfmp-7638\n\n* Remove unsafe serialization from PayloadUtil\n\n* This code will likely be removed wholesale, but this change\n  should be used as a departure point for future development\n  if we end up re-implementing moveTo and friends.\n\n* Removed vestigial MoveTo related code.\n\n* Remove unsafe serialization in WorkSpace infra.\n\n* Favor DataInput/DataOutputStream over ObjectInput/ObjectOutputStream\n* Implement lightweight serialization in WorkBundle/WorkUnit\n\n* Updates to WorkBundle serDe, added tests.\n\n- set limit on number of WorkUnits per bundle. In practice these are\n  commonly less than 1024.\n- added null handling for WorkBundle/WorkUnit string fields.\n- confirmed readUTF/writeUTF has a limit ensuring strings will\n  be 65535 characters or less.\n\n* Minor cleanup to WorkBundleTest\n\n* Minor Change to WorkBundleTest\n\n* Formatting updates",
    "type_of_change": "Modification",
    "filename_of_changes": "PayloadUtil.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "4",
    "number_of_lines_deleted_vulnerable_to_cve": "81",
    "vulnerable_lines": [
        "// Line_Reference 3: import java.io.ByteArrayInputStream;",
        "// Line_Reference 4: import java.io.ByteArrayOutputStream;",
        "// Line_Reference 5: import java.io.IOException;",
        "// Line_Reference 6: import java.io.ObjectInputStream;",
        "// Line_Reference 7: import java.io.ObjectOutputStream;",
        "// Line_Reference 8: import java.io.OutputStream;",
        "// Line_Reference 9: import java.io.UnsupportedEncodingException;",
        "// Line_Reference 10: import java.nio.ByteBuffer;",
        "// Line_Reference 112:     public static ByteBuffer serializeToByteBuffer(final Object payload) throws IOException {",
        "// Line_Reference 113:         return ByteBuffer.wrap(serializeToBytes(payload));",
        "// Line_Reference 114:     }",
        "// Line_Reference 115: ",
        "// Line_Reference 116:     /**",
        "// Line_Reference 117:      * Serialize a payload object to bytes",
        "// Line_Reference 118:      */",
        "// Line_Reference 119:     public static byte[] serializeToBytes(final Object payload) throws IOException {",
        "// Line_Reference 120:         final ByteArrayOutputStream bos = new ByteArrayOutputStream();",
        "// Line_Reference 121:         serializeToStream(bos, payload);",
        "// Line_Reference 122:         return bos.toByteArray();",
        "// Line_Reference 123:     }",
        "// Line_Reference 124: ",
        "// Line_Reference 125:     /**",
        "// Line_Reference 126:      * Serialize a payload object to string",
        "// Line_Reference 127:      */",
        "// Line_Reference 128:     public static String serializeToString(final Object payload) throws IOException {",
        "// Line_Reference 129:         final ByteArrayOutputStream bos = new ByteArrayOutputStream();",
        "// Line_Reference 130:         serializeToStream(bos, payload);",
        "// Line_Reference 131:         String agentData = null;",
        "// Line_Reference 132:         try {",
        "// Line_Reference 133:             agentData = bos.toString(\"8859_1\");",
        "// Line_Reference 134:         } catch (UnsupportedEncodingException e) {",
        "// Line_Reference 135:             logger.warn(\"Should always support 8859_1\", e);",
        "// Line_Reference 136:             agentData = bos.toString();",
        "// Line_Reference 137:         }",
        "// Line_Reference 138:         return agentData;",
        "// Line_Reference 139:     }",
        "// Line_Reference 140: ",
        "// Line_Reference 141:     /**",
        "// Line_Reference 142:      * Serialize a payload object onto the specified stream",
        "// Line_Reference 143:      */",
        "// Line_Reference 144:     public static void serializeToStream(final OutputStream os, final Object payload) throws IOException {",
        "// Line_Reference 145:         ObjectOutputStream oos = null;",
        "// Line_Reference 146:         try {",
        "// Line_Reference 147:             oos = new ObjectOutputStream(os);",
        "// Line_Reference 148:             oos.writeObject(payload);",
        "// Line_Reference 149:         } finally {",
        "// Line_Reference 150:             if (oos != null) {",
        "// Line_Reference 151:                 try {",
        "// Line_Reference 152:                     oos.close();",
        "// Line_Reference 153:                 } catch (IOException ignore) {",
        "// Line_Reference 154:                     // empty catch block",
        "// Line_Reference 155:                 }",
        "// Line_Reference 156:             }",
        "// Line_Reference 157:         }",
        "// Line_Reference 158:     }",
        "// Line_Reference 159: ",
        "// Line_Reference 160:     public static Object deserialize(final String s) {",
        "// Line_Reference 161:         ObjectInputStream ois = null;",
        "// Line_Reference 162:         try {",
        "// Line_Reference 163:             ois = new ObjectInputStream(new ByteArrayInputStream(s.getBytes(\"8859_1\")));",
        "// Line_Reference 164:             return ois.readObject();",
        "// Line_Reference 165:         } catch (Exception e) {",
        "// Line_Reference 166:             logger.error(\"Cannot deserialize payload using \" + (s == null ? -1 : s.length()) + \" bytes\", e);",
        "// Line_Reference 167:             throw new IllegalArgumentException(\"Cannot deserialize payload\");",
        "// Line_Reference 168:         } finally {",
        "// Line_Reference 169:             if (ois != null) {",
        "// Line_Reference 170:                 try {",
        "// Line_Reference 171:                     ois.close();",
        "// Line_Reference 172:                 } catch (IOException ignore) {",
        "// Line_Reference 173:                     // empty catch block",
        "// Line_Reference 174:                 }",
        "// Line_Reference 175:             }",
        "// Line_Reference 176:         }",
        "// Line_Reference 177:     }",
        "// Line_Reference 178: ",
        "// Line_Reference 206:             m.setAttribute(\"name\", key.toString());",
        "// Line_Reference 233:         final Document doc = new Document(root);",
        "// Line_Reference 234:         return doc;",
        "// Line_Reference 258:         final Document doc = new Document(root);",
        "// Line_Reference 259:         return doc;",
        "// Line_Reference 280:             out.append(entry.getKey() + SEP + entry.getValue() + LS);"
    ]
}
