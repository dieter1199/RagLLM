import { procedure, router } from "../lib/trpc";
import { AuthenticatedContext, isAuthenticated, isAuthenticatedUser } from "../lib/middleware";
import { UnderscoreID, generateSalt, hashValue, stringToRegex, zodId } from "../lib";
WorkspaceMembership,
workspaceMembership
} from "#database/workspace-memberships";
import * as errors from "#lib/errors";
import { getWorkspacesCollection, workspace } from "#database/workspaces";
import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
import { runWebhooks } from "#lib/webhooks";
import {
Role,
contentPieceMember,
profile,
role
import { updateSessionUser } from "#lib/session";
type WorkspaceMembershipEvent =
| { action: "create"; data: { id: string; pendingInvite: boolean } & WorkspaceMembership }
| {
action: "update";
data: {
id: string;
userId: string;
role?: Role;
pendingInvite?: boolean;
profile?: {
fullName?: string;
username?: string;
avatar?: string;
};
} & Partial<WorkspaceMembership>;
}
| {
action: "delete";
data: { id: string; userId: string };
};
const publishEvent = createEventPublisher<WorkspaceMembershipEvent>(
(workspaceId) => `workspaceMemberships:${workspaceId}`
);
publishEvent(ctx, `${ctx.auth.workspaceId}`, {
publishEvent(ctx, `${ctx.auth.workspaceId}`, {
email: z.string().email(),
publishEvent(ctx, `${ctx.auth.workspaceId}`, {
return createEventSubscription<WorkspaceMembershipEvent>(
ctx,
`workspaceMemberships:${ctx.auth.workspaceId}`
);
