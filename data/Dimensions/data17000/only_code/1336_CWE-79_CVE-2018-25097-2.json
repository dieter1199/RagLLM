dscs.setSolutionId(solutionId);
results = solutionService.addNode(userId, solutionId, version, cid, node);
result = solutionService.readCompositeSolutionGraph(userId, solutionId, version);
result = solutionService.modifyNode(userId, solutionId, version, cid, nodeId, nodeName, ndata, fieldMap, databrokerMap, collatorMap, splitterMap);
result = solutionService.modifyLink(userId, cid, solutionId, version, linkId, linkName);
boolean deleted = compositeServiceImpl.deleteCompositeSolution(userId, solutionId, version);
boolean deletedNode = solutionService.deleteNode(userId, solutionId, version, cid, nodeId);
result = compositeServiceImpl.closeCompositeSolution(userId, solutionId, solutionVersion, cid);
result = compositeServiceImpl.clearCompositeSolution(userId, solutionId, solutionVersion, cid);
result = compositeServiceImpl.validateCompositeSolution(userId, solutionName, solutionId, version);
linkAdded = solutionService.addLink(userId, solutionId, version, linkName, linkId, sourceNodeName,
boolean deletedLink = solutionService.deleteLink(userId, solutionId, version, cid, linkId);
successErrorMessage = compositeServiceImpl.setProbeIndicator(userId, solutionId, version, cid,probeIndicator);