remove_relative_path_marker,
from py7zr.win32compat import is_windows_native_python, is_windows_unc_path
# check f.filename has invalid directory traversals
if path is None:
# do following but is_relative_to introduced in py 3.9
# so I replaced it with relative_to. when condition is not satisfied, raise ValueError
# if not pathlib.Path(...).joinpath(remove_relative_path_marker(outname)).is_relative_to(...):
#    raise Bad7zFile
try:
pathlib.Path(os.getcwd()).joinpath(remove_relative_path_marker(outname)).relative_to(os.getcwd())
except ValueError:
raise Bad7zFile
outfilename = pathlib.Path(remove_relative_path_marker(outname))
outfilename = path.joinpath(remove_relative_path_marker(outname))
try:
outfilename.relative_to(path)
except ValueError:
raise Bad7zFile
# When python on Windows and not python on Cygwin,
# Add win32 file namespace to exceed microsoft windows
# path length limitation to 260 bytes
# ref.
# https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file
# In editions of Windows before Windows 10 version 1607,
# the maximum length for a path is MAX_PATH, which is defined as
# 260 characters. In later versions of Windows, changing a registry key
# or select option when python installation is required to remove the limit.
if is_windows_native_python() and outfilename.is_absolute() and not is_windows_unc_path(outfilename):
outfilename = pathlib.WindowsPath("\\\\?\\" + str(outfilename))
self.writef(io.BytesIO(data.encode("UTF-8")), arcname)
self.writef(io.BytesIO(data), arcname)
self.worker.extract(self.fp, parallel=(not self.password_protected), skip_notarget=False)  # TODO: print progress
def extract(self, fp: BinaryIO, parallel: bool, skip_notarget=True, q=None) -> None:
self.extract_single(fp, empty_files, 0, 0, q)
self.extract_single(open(filename, "rb"), empty_files, 0, 0, q)
self.extract_single(fp, empty_files, 0, 0, q)
self._extract_single(fp, files, src_end, q, skip_notarget)
# fileish.unlink(missing_ok=True) > py3.7
if fileish.exists():
fileish.unlink()
if sys.platform == "win32":  # hint for mypy
_winapi.CreateJunction(str(fileish), dst)  # noqa
sym_target = pathlib.Path(omfp.read().decode("utf-8"))
# fileish.unlink(missing_ok=True) > py3.7
if fileish.exists():
fileish.unlink()
fileish.symlink_to(sym_target)