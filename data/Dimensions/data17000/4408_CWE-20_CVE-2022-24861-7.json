{
    "cve_id": "CVE-2022-24861",
    "cve_description": "Databasir is a team-oriented relational database model document management platform. Databasir 1.01 has remote code execution vulnerability. JDBC drivers are not validated prior to use and may be provided by users of the system. This can lead to code execution by any basic user who has access to the system. Users are advised to upgrade. There are no known workarounds to this issue.",
    "cve_publish_date": "2022-04-20",
    "cwe_id": "CWE-20",
    "cwe_name": "Improper Input Validation",
    "cwe_description": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.",
    "commit_message": "fix some security bug (#103)\n\n* fix: use hard-code secret\r\n\r\n* feat: add driver class validate\r\n\r\n* feat: optimize drvier resource code\r\n\r\n* fix:ut failed",
    "type_of_change": "Modification",
    "filename_of_changes": "DriverResources.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "90",
    "number_of_lines_deleted_vulnerable_to_cve": "46",
    "vulnerable_lines": [
        "// Line_Reference 30:     public void delete(String databaseType) {",
        "// Line_Reference 39:     public String resolveSqlDriverNameFromJar(String driverFileUrl) {",
        "// Line_Reference 41:         File driverFile = doDownload(driverFileUrl, tempFilePath);",
        "// Line_Reference 42:         String className = doResolveSqlDriverNameFromJar(driverFile);",
        "// Line_Reference 51:     public File loadOrDownload(String databaseType, String driverFileUrl) {",
        "// Line_Reference 52:         String filePath = driverFilePath(driverBaseDirectory, databaseType);",
        "// Line_Reference 53:         Path path = Path.of(filePath);",
        "// Line_Reference 54:         if (Files.exists(path)) {",
        "// Line_Reference 55:             // ignore",
        "// Line_Reference 56:             log.debug(\"{} already exists, ignore download from {}\", filePath, driverFileUrl);",
        "// Line_Reference 57:             return path.toFile();",
        "// Line_Reference 59:         return this.doDownload(driverFileUrl, filePath);",
        "// Line_Reference 62:     private File doDownload(String driverFileUrl, String filePath) {",
        "// Line_Reference 63:         Path path = Path.of(filePath);",
        "// Line_Reference 71:                 log.error(\"create file error \" + filePath, e);",
        "// Line_Reference 84:                     log.info(\"{} download success \", filePath);",
        "// Line_Reference 87:                     log.error(\"{} download error from {}: {} \", filePath, driverFileUrl, response);",
        "// Line_Reference 94:         } catch (IllegalArgumentException e) {",
        "// Line_Reference 95:             log.error(filePath + \" download driver error\", e);",
        "// Line_Reference 100:     private String doResolveSqlDriverNameFromJar(File driverFile) {",
        "// Line_Reference 101:         JarFile jarFile = null;",
        "// Line_Reference 103:             jarFile = new JarFile(driverFile);",
        "// Line_Reference 104:         } catch (IOException e) {",
        "// Line_Reference 105:             log.error(\"resolve driver class name error\", e);",
        "// Line_Reference 106:             throw DomainErrors.DRIVER_CLASS_NAME_OBTAIN_ERROR.exception(e.getMessage());",
        "// Line_Reference 109:         final JarFile driverJar = jarFile;",
        "// Line_Reference 110:         String driverClassName = jarFile.stream()",
        "// Line_Reference 111:                 .filter(entry -> entry.getName().contains(\"META-INF/services/java.sql.Driver\"))",
        "// Line_Reference 112:                 .findFirst()",
        "// Line_Reference 113:                 .map(entry -> {",
        "// Line_Reference 114:                     InputStream stream = null;",
        "// Line_Reference 115:                     BufferedReader reader = null;",
        "// Line_Reference 116:                     try {",
        "// Line_Reference 117:                         stream = driverJar.getInputStream(entry);",
        "// Line_Reference 118:                         reader = new BufferedReader(new InputStreamReader(stream));",
        "// Line_Reference 119:                         return reader.readLine();",
        "// Line_Reference 120:                     } catch (IOException e) {",
        "// Line_Reference 121:                         log.error(\"resolve driver class name error\", e);",
        "// Line_Reference 122:                         throw DomainErrors.DRIVER_CLASS_NAME_OBTAIN_ERROR.exception(e.getMessage());",
        "// Line_Reference 123:                     } finally {",
        "// Line_Reference 124:                         IOUtils.closeQuietly(reader, ex -> log.error(\"close reader error\", ex));",
        "// Line_Reference 125:                     }",
        "// Line_Reference 126:                 })",
        "// Line_Reference 127:                 .orElseThrow(DomainErrors.DRIVER_CLASS_NAME_OBTAIN_ERROR::exception);",
        "// Line_Reference 128:         IOUtils.closeQuietly(jarFile, ex -> log.error(\"close jar file error\", ex));",
        "// Line_Reference 129:         return driverClassName;"
    ]
}
