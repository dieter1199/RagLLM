{
    "cve_id": "CVE-2022-36019",
    "cve_description": "TensorFlow is an open source platform for machine learning. If `FakeQuantWithMinMaxVarsPerChannel` is given `min` or `max` tensors of a rank other than one, it results in a `CHECK` fail that can be used to trigger a denial of service attack. We have patched the issue in GitHub commit 785d67a78a1d533759fcd2f5e8d6ef778de849e0. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue.",
    "cve_publish_date": "2022-09-16",
    "cwe_id": "CWE-617",
    "cwe_name": "Reachable Assertion",
    "cwe_description": "The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary.",
    "commit_message": "Fix quantize ops input validation issues.\n\nThe majority of these are just missing checks on min/max.\n\nPiperOrigin-RevId: 461800665",
    "type_of_change": "Modification",
    "filename_of_changes": "quantized_bias_add_op_test.cc",
    "code_language": "C++",
    "number_of_lines_added_for_mitigation": "8",
    "number_of_lines_deleted_vulnerable_to_cve": "8",
    "vulnerable_lines": [
        "// Line_Reference 77:   AddInputFromArray<float>(TensorShape({1}), {input_min});",
        "// Line_Reference 78:   AddInputFromArray<float>(TensorShape({1}), {input_max});",
        "// Line_Reference 79:   AddInputFromArray<float>(TensorShape({1}), {bias_min});",
        "// Line_Reference 80:   AddInputFromArray<float>(TensorShape({1}), {bias_max});",
        "// Line_Reference 159:   AddInputFromArray<float>(TensorShape({1}), {input_min});",
        "// Line_Reference 160:   AddInputFromArray<float>(TensorShape({1}), {input_max});",
        "// Line_Reference 161:   AddInputFromArray<float>(TensorShape({1}), {bias_min});",
        "// Line_Reference 162:   AddInputFromArray<float>(TensorShape({1}), {bias_max});"
    ]
}
