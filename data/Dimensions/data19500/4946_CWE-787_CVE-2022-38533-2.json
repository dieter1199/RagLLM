{
    "cve_id": "CVE-2022-38533",
    "cve_description": "In GNU Binutils before 2.40, there is a heap-buffer-overflow in the error function bfd_getl32 when called from the strip_main function in strip-new via a crafted file.",
    "cve_publish_date": "2022-08-26",
    "cwe_id": "CWE-787",
    "cwe_name": "Out-of-bounds Write",
    "cwe_description": "The product writes data past the end, or before the beginning, of the intended buffer.",
    "commit_message": "PR29495, rewrite_elf_program_header looping\n\nThis patch, in order of significance:\n1) Replaces some macros with inline functions.\n2) Those inline functions catch and avoid arithmetic overflows when\n   comparing addresses.\n3) When assigning sections to segments (IS_SECTION_IN_INPUT_SEGMENT)\n   use bed->want_p_paddr_set_to_zero to decide whether lma vs p_paddr\n   or vma vs p_vaddr should be tested.  When remapping, use the same\n   test, and use is_note rather than the more restrictive\n   IS_COREFILE_NOTE.\n\nIt's important that the later tests not be more restrictive.  If they\nare it can lead to the situation triggered by the testcases, where a\nsection seemingly didn't fit and thus needed a new mapping.  It didn't\nfit the new mapping either, and this repeated until memory exhausted.\n\n\tPR 29495\n\t* elf.c (SEGMENT_END, SECTION_SIZE, IS_CONTAINED_BY_VMA): Delete.\n\t(IS_CONTAINED_BY_LMA, IS_NOTE, IS_COREFILE_NOTE): Delete.\n\t(segment_size, segment_end, section_size): New inline function.\n\t(is_contained_by, is_note): Likewise.\n\t(rewrite_elf_program_header): Use new functions.",
    "type_of_change": "Modification",
    "filename_of_changes": "elf.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "75",
    "number_of_lines_deleted_vulnerable_to_cve": "65",
    "vulnerable_lines": [
        "// Line_Reference 6917:   /* Returns the end address of the segment + 1.  */",
        "// Line_Reference 6918: #define SEGMENT_END(segment, start)\t\t\t\t\t\\",
        "// Line_Reference 6919:   (start + (segment->p_memsz > segment->p_filesz\t\t\t\\",
        "// Line_Reference 6920: \t    ? segment->p_memsz : segment->p_filesz))",
        "// Line_Reference 6921: ",
        "// Line_Reference 6922: #define SECTION_SIZE(section, segment)\t\t\t\t\t\\",
        "// Line_Reference 6923:   (((section->flags & (SEC_HAS_CONTENTS | SEC_THREAD_LOCAL))\t\t\\",
        "// Line_Reference 6924:     != SEC_THREAD_LOCAL || segment->p_type == PT_TLS)\t\t\t\\",
        "// Line_Reference 6925:    ? section->size : 0)",
        "// Line_Reference 6926: ",
        "// Line_Reference 6927:   /* Returns TRUE if the given section is contained within",
        "// Line_Reference 6928:      the given segment.  VMA addresses are compared.  */",
        "// Line_Reference 6929: #define IS_CONTAINED_BY_VMA(section, segment, opb)\t\t\t\\",
        "// Line_Reference 6930:   (section->vma * (opb) >= segment->p_vaddr\t\t\t\t\\",
        "// Line_Reference 6931:    && (section->vma * (opb) + SECTION_SIZE (section, segment)\t\t\\",
        "// Line_Reference 6932:        <= (SEGMENT_END (segment, segment->p_vaddr))))",
        "// Line_Reference 6933: ",
        "// Line_Reference 6934:   /* Returns TRUE if the given section is contained within",
        "// Line_Reference 6935:      the given segment.  LMA addresses are compared.  */",
        "// Line_Reference 6936: #define IS_CONTAINED_BY_LMA(section, segment, base, opb)\t\t\\",
        "// Line_Reference 6937:   (section->lma * (opb) >= base\t\t\t\t\t\t\\",
        "// Line_Reference 6938:    && (section->lma + SECTION_SIZE (section, segment) / (opb) >= section->lma) \\",
        "// Line_Reference 6939:    && (section->lma * (opb) + SECTION_SIZE (section, segment)\t\t\\",
        "// Line_Reference 6940:        <= SEGMENT_END (segment, base)))",
        "// Line_Reference 6941: ",
        "// Line_Reference 6942:   /* Handle PT_NOTE segment.  */",
        "// Line_Reference 6943: #define IS_NOTE(p, s)\t\t\t\t\t\t\t\\",
        "// Line_Reference 6944:   (p->p_type == PT_NOTE\t\t\t\t\t\t\t\\",
        "// Line_Reference 6945:    && elf_section_type (s) == SHT_NOTE\t\t\t\t\t\\",
        "// Line_Reference 6946:    && (bfd_vma) s->filepos >= p->p_offset\t\t\t\t\\",
        "// Line_Reference 6947:    && ((bfd_vma) s->filepos + s->size\t\t\t\t\t\\",
        "// Line_Reference 6948:        <= p->p_offset + p->p_filesz))",
        "// Line_Reference 6949: ",
        "// Line_Reference 6950:   /* Special case: corefile \"NOTE\" section containing regs, prpsinfo",
        "// Line_Reference 6951:      etc.  */",
        "// Line_Reference 6952: #define IS_COREFILE_NOTE(p, s)\t\t\t\t\t\t\\",
        "// Line_Reference 6953:   (IS_NOTE (p, s)\t\t\t\t\t\t\t\\",
        "// Line_Reference 6954:    && bfd_get_format (ibfd) == bfd_core\t\t\t\t\t\\",
        "// Line_Reference 6955:    && s->vma == 0\t\t\t\t\t\t\t\\",
        "// Line_Reference 6956:    && s->lma == 0)",
        "// Line_Reference 6957: ",
        "// Line_Reference 6986:   ((((segment->p_paddr\t\t\t\t\t\t\t\\",
        "// Line_Reference 6987:       ? IS_CONTAINED_BY_LMA (section, segment, segment->p_paddr, opb)\t\\",
        "// Line_Reference 6988:       : IS_CONTAINED_BY_VMA (section, segment, opb))\t\t\t\\",
        "// Line_Reference 6990:     || IS_NOTE (segment, section))\t\t\t\t\t\\",
        "// Line_Reference 6998:        || SECTION_SIZE (section, segment) > 0\t\t\t\t\\",
        "// Line_Reference 7013:   (seg1->field >= SEGMENT_END (seg2, seg2->field))",
        "// Line_Reference 7093: \t      extra_length = (SEGMENT_END (segment, segment->p_vaddr)",
        "// Line_Reference 7094: \t\t\t      - SEGMENT_END (segment2, segment2->p_vaddr));",
        "// Line_Reference 7113: \t      extra_length = (SEGMENT_END (segment2, segment2->p_vaddr)",
        "// Line_Reference 7114: \t\t\t      - SEGMENT_END (segment, segment->p_vaddr));",
        "// Line_Reference 7314: \t      if (IS_CONTAINED_BY_LMA (output_section, segment, map->p_paddr,",
        "// Line_Reference 7315: \t\t\t\t       opb)",
        "// Line_Reference 7316: \t\t  || IS_COREFILE_NOTE (segment, section)",
        "// Line_Reference 7317: \t\t  || (bed->want_p_paddr_set_to_zero",
        "// Line_Reference 7318: \t\t      && IS_CONTAINED_BY_VMA (output_section, segment, opb)))",
        "// Line_Reference 7434: \t      if (IS_CONTAINED_BY_LMA (output_section, segment, map->p_paddr,",
        "// Line_Reference 7435: \t\t\t\t       opb)",
        "// Line_Reference 7436: \t\t  || IS_COREFILE_NOTE (segment, section))",
        "// Line_Reference 7559: #undef SEGMENT_END",
        "// Line_Reference 7560: #undef SECTION_SIZE",
        "// Line_Reference 7561: #undef IS_CONTAINED_BY_VMA",
        "// Line_Reference 7562: #undef IS_CONTAINED_BY_LMA",
        "// Line_Reference 7563: #undef IS_NOTE",
        "// Line_Reference 7564: #undef IS_COREFILE_NOTE"
    ]
}
