{
    "cve_id": "CVE-2021-41171",
    "cve_description": "eLabFTW is an open source electronic lab notebook manager for research teams. In versions of eLabFTW before 4.1.0, it allows attackers to bypass a brute-force protection mechanism by using many different forged PHPSESSID values in HTTP Cookie header. This issue has been addressed by implementing brute force login protection, as recommended by Owasp with Device Cookies. This mechanism will not impact users and will effectively thwart any brute-force attempts at guessing passwords. The only correct way to address this is to upgrade to version 4.1.0. Adding rate limitation upstream of the eLabFTW service is of course a valid option, with or without upgrading.",
    "cve_publish_date": "2021-10-22",
    "cwe_id": "CWE-307",
    "cwe_name": "Improper Restriction of Excessive Authentication Attempts",
    "cwe_description": "The product does not implement sufficient measures to prevent multiple failed authentication attempts within a short time frame, making it more susceptible to brute force attacks.",
    "commit_message": "Add JWT anti brute-force login protection (#2831)\n\n* WIP: better brute force login protection\r\n\r\n* split device token classes\r\n\r\n* mv schema to 63\r\n\r\n* use int(10) in schema too\r\n\r\n* add sysadmin action to clear locked users/devices\r\n\r\n* remove the FK on authfail\r\n\r\n* remove authfail users_id fk constraint in structure.sql\r\n\r\n* catch the invalid device token exception\r\n\r\n* remove the banned users stuff\r\n\r\n* change invalid token message\r\n\r\n* cleanup the exceptions a bit\r\n\r\n* get rid of the useless InvalidCsrfTokenException\r\n\r\n* remove unused js import\r\n\r\n* introduce the AuthenticatedUser and AnonymousUser classes\r\n\r\nand improve the App and init.inc.php files\r\n\r\n* remove the populateFromEmail method from Users\r\n\r\n* get rid of the useless SessionAuth\r\n\r\nand rearrange init Auth and App\r\n\r\n* be more specific about which kind of user can be loaded in App\r\n\r\n* change Update class signature\r\n\r\n* use init.inc.php in ApiController\r\n\r\n* don't store the whole teamconfigarr in app",
    "type_of_change": "Modification",
    "filename_of_changes": "App.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "84",
    "number_of_lines_deleted_vulnerable_to_cve": "25",
    "vulnerable_lines": [
        "// Line_Reference 1: <?php",
        "// Line_Reference 9: declare(strict_types=1);",
        "// Line_Reference 21: use function substr;",
        "// Line_Reference 46:     public array $teamConfigArr = array();",
        "// Line_Reference 47: ",
        "// Line_Reference 64:         $Update = new Update($this->Config, new Sql());",
        "// Line_Reference 94:     /**",
        "// Line_Reference 95:      * If the current user is authenticated, load Users with an id",
        "// Line_Reference 96:      */",
        "// Line_Reference 97:     public function loadUser(Users $users): void",
        "// Line_Reference 99:         $this->Users = $users;",
        "// Line_Reference 100: ",
        "// Line_Reference 101:         // team config",
        "// Line_Reference 102:         $Teams = new Teams($this->Users);",
        "// Line_Reference 103:         $this->teamConfigArr = $Teams->read(new ContentParams());",
        "// Line_Reference 104:     }",
        "// Line_Reference 106:     /**",
        "// Line_Reference 107:      * Get the lang (in short form like 'en' or 'fr') for the HTML attribute in head.html template",
        "// Line_Reference 108:      */",
        "// Line_Reference 109:     public function getLangForHtmlAttribute(): string",
        "// Line_Reference 110:     {",
        "// Line_Reference 111:         $lang = 'en';",
        "// Line_Reference 112:         if (isset($this->Users->userData['lang'])) {",
        "// Line_Reference 113:             $lang = substr($this->Users->userData['lang'], 0, 2);",
        "// Line_Reference 116:         return $lang;"
    ]
}
