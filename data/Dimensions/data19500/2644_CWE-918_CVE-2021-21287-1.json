{
    "cve_id": "CVE-2021-21287",
    "cve_description": "MinIO is a High Performance Object Storage released under Apache License v2.0. In MinIO before version RELEASE.2021-01-30T00-20-58Z there is a server-side request forgery vulnerability. The target application may have functionality for importing data from a URL, publishing data to a URL, or otherwise reading data from a URL that can be tampered with. The attacker modifies the calls to this functionality by supplying a completely different URL or by manipulating how URLs are built (path traversal etc.). In a Server-Side Request Forgery (SSRF) attack, the attacker can abuse functionality on the server to read or update internal resources. The attacker can supply or modify a URL which the code running on the server will read or submit data, and by carefully selecting the URLs, the attacker may be able to read server configuration such as AWS metadata, connect to internal services like HTTP enabled databases, or perform post requests towards internal services which are not intended to be exposed. This is fixed in version RELEASE.2021-01-30T00-20-58Z, all users are advised to upgrade. As a workaround you can disable the browser front-end with \"MINIO_BROWSER=off\" environment variable.",
    "cve_publish_date": "2021-02-01",
    "cwe_id": "CWE-918",
    "cwe_name": "Server-Side Request Forgery (SSRF)",
    "cwe_description": "The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.",
    "commit_message": "fix: LoginSTS should be an inline implementation (#11337)\n\nSTS tokens can be obtained by using local APIs\r\nonce the remote JWT token is presented, current\r\ncode was not validating the incoming token in the\r\nfirst place and was incorrectly making a network\r\noperation using that token.\r\n\r\nFor the most part this always works without issues,\r\nbut under adversarial scenarios it exposes client\r\nto hand-craft a request that can reach internal\r\nservices without authentication.\r\n\r\nThis kind of proxying should be avoided before\r\nvalidating the incoming token.",
    "type_of_change": "Modification",
    "filename_of_changes": "web-handlers.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "36",
    "number_of_lines_deleted_vulnerable_to_cve": "28",
    "vulnerable_lines": [
        "// Line_Reference 23: \t\"encoding/xml\"",
        "// Line_Reference 2209: \tv := url.Values{}",
        "// Line_Reference 2210: \tv.Set(\"Action\", webIdentity)",
        "// Line_Reference 2211: \tv.Set(\"WebIdentityToken\", args.Token)",
        "// Line_Reference 2212: \tv.Set(\"Version\", stsAPIVersion)",
        "// Line_Reference 2213: ",
        "// Line_Reference 2214: \tscheme := \"http\"",
        "// Line_Reference 2215: \tif sourceScheme := handlers.GetSourceScheme(r); sourceScheme != \"\" {",
        "// Line_Reference 2216: \t\tscheme = sourceScheme",
        "// Line_Reference 2217: \t}",
        "// Line_Reference 2218: \tif globalIsTLS {",
        "// Line_Reference 2219: \t\tscheme = \"https\"",
        "// Line_Reference 2222: \tu := &url.URL{",
        "// Line_Reference 2223: \t\tScheme: scheme,",
        "// Line_Reference 2224: \t\tHost:   r.Host,",
        "// Line_Reference 2227: \tu.RawQuery = v.Encode()",
        "// Line_Reference 2228: ",
        "// Line_Reference 2229: \treq, err := http.NewRequest(http.MethodPost, u.String(), nil)",
        "// Line_Reference 2234: \tclnt := &http.Client{",
        "// Line_Reference 2235: \t\tTransport: NewGatewayHTTPTransport(),",
        "// Line_Reference 2237: \tresp, err := clnt.Do(req)",
        "// Line_Reference 2241: \tdefer xhttp.DrainBody(resp.Body)",
        "// Line_Reference 2243: \tif resp.StatusCode != http.StatusOK {",
        "// Line_Reference 2244: \t\treturn toJSONError(ctx, errors.New(resp.Status))",
        "// Line_Reference 2247: \ta := AssumeRoleWithWebIdentityResponse{}",
        "// Line_Reference 2248: \tif err = xml.NewDecoder(resp.Body).Decode(&a); err != nil {",
        "// Line_Reference 2249: \t\treturn toJSONError(ctx, err)",
        "// Line_Reference 2252: \treply.Token = a.Result.Credentials.SessionToken"
    ]
}
