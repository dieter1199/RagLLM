{
    "cve_id": "CVE-2023-1118",
    "cve_description": "A flaw use after free in the Linux kernel integrated infrared receiver/transceiver driver was found in the way user detaching rc device. A local user could use this flaw to crash the system or potentially escalate their privileges on the system.",
    "cve_publish_date": "2023-03-02",
    "cwe_id": "CWE-416",
    "cwe_name": "Use After Free",
    "cwe_description": "The product reuses or references memory after it has been freed. At some point afterward, the memory may be allocated again and saved in another pointer, while the original pointer references a location somewhere within the new allocation. Any operations using the original pointer are no longer valid because the memory \"belongs\" to the code that operates on the new pointer.",
    "commit_message": "media: rc: Fix use-after-free bugs caused by ene_tx_irqsim()\n\nWhen the ene device is detaching, function ene_remove() will\nbe called. But there is no function to cancel tx_sim_timer\nin ene_remove(), the timer handler ene_tx_irqsim() could race\nwith ene_remove(). As a result, the UAF bugs could happen,\nthe process is shown below.\n\n    (cleanup routine)          |        (timer routine)\n                               | mod_timer(&dev->tx_sim_timer, ..)\nene_remove()                   | (wait a time)\n                               | ene_tx_irqsim()\n                               |   dev->hw_lock //USE\n                               |   ene_tx_sample(dev) //USE\n\nFix by adding del_timer_sync(&dev->tx_sim_timer) in ene_remove(),\nThe tx_sim_timer could stop before ene device is deallocated.\n\nWhat's more, The rc_unregister_device() and del_timer_sync()\nshould be called first in ene_remove() and the deallocated\nfunctions such as free_irq(), release_region() and so on\nshould be called behind them. Because the rc_unregister_device()\nis well synchronized. Otherwise, race conditions may happen. The\nsituations that may lead to race conditions are shown below.\n\nFirstly, the rx receiver is disabled with ene_rx_disable()\nbefore rc_unregister_device() in ene_remove(), which means it\ncan be enabled again if a process opens /dev/lirc0 between\nene_rx_disable() and rc_unregister_device().\n\nSecondly, the irqaction descriptor is freed by free_irq()\nbefore the rc device is unregistered, which means irqaction\ndescriptor may be accessed again after it is deallocated.\n\nThirdly, the timer can call ene_tx_sample() that can write\nto the io ports, which means the io ports could be accessed\nagain after they are deallocated by release_region().\n\nTherefore, the rc_unregister_device() and del_timer_sync()\nshould be called first in ene_remove().\n\nSuggested by: Sean Young <sean@mess.org>\n\nFixes: 9ea53b74df9c (\"V4L/DVB: STAGING: remove lirc_ene0100 driver\")\nSigned-off-by: Duoming Zhou <duoming@zju.edu.cn>\nSigned-off-by: Sean Young <sean@mess.org>\nSigned-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "ene_ir.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "2",
    "number_of_lines_deleted_vulnerable_to_cve": "1",
    "vulnerable_lines": [
        "// Line_Reference 1116: \trc_unregister_device(dev->rdev);"
    ]
}
