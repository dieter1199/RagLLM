{
    "cve_id": "CVE-2022-31145",
    "cve_description": "FlyteAdmin is the control plane for Flyte responsible for managing entities and administering workflow executions. In versions 1.1.30 and prior, authenticated users using an external identity provider can continue to use Access Tokens and ID Tokens even after they expire. Users who use FlyteAdmin as the OAuth2 Authorization Server are unaffected by this issue. A patch is available on the `master` branch of the repository. As a workaround, rotating signing keys immediately will invalidate all open sessions and force all users to attempt to obtain new tokens. Those who use this workaround should continue to rotate keys until FlyteAdmin has been upgraded and hide FlyteAdmin deployment ingress URL from the internet.",
    "cve_publish_date": "2022-07-13",
    "cwe_id": "CWE-613",
    "cwe_name": "Insufficient Session Expiration",
    "cwe_description": "According to WASC, \"Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization.\"",
    "commit_message": "Merge pull request from GHSA-qwrj-9hmp-gpxh\n\n* Fix claims verification for access tokens in external IdP setup\n\nSigned-off-by: Haytham Abuelfutuh <haytham@afutuh.com>\n\n* Add another test case for no signature\n\nSigned-off-by: Haytham Abuelfutuh <haytham@afutuh.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "resource_server_test.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "119",
    "number_of_lines_deleted_vulnerable_to_cve": "15",
    "vulnerable_lines": [
        "// Line_Reference 24: func newMockResourceServer(t testing.TB) ResourceServer {",
        "// Line_Reference 32: \t\t\t\t\"issuer\": \"https://dev-14186422.okta.com\",",
        "// Line_Reference 35: \t\t\t\t\"jwks_uri\": \"URL/keys\",",
        "// Line_Reference 37: \t\t\t}`, \"URL\", *serverURL))",
        "// Line_Reference 64: \tdefer s.Close()",
        "// Line_Reference 65: ",
        "// Line_Reference 71: \t\tBaseURL: stdlibConfig.URL{URL: *config.MustParseURL(s.URL)},",
        "// Line_Reference 77: \treturn r",
        "// Line_Reference 78: }",
        "// Line_Reference 79: ",
        "// Line_Reference 80: func TestNewOAuth2ResourceServer(t *testing.T) {",
        "// Line_Reference 81: \tnewMockResourceServer(t)",
        "// Line_Reference 85: \tr := newMockResourceServer(t)",
        "// Line_Reference 86: \t_, err := r.ValidateAccessToken(context.Background(), \"myserver\", sampleIDToken)",
        "// Line_Reference 87: \tassert.Error(t, err)"
    ]
}
