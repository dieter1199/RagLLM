{
    "cve_id": "CVE-2022-39250",
    "cve_description": "Matrix JavaScript SDK is the Matrix Client-Server software development kit (SDK) for JavaScript. Prior to version 19.7.0, an attacker cooperating with a malicious homeserver could interfere with the verification flow between two users, injecting its own cross-signing user identity in place of one of the usersâ€™ identities. This would lead to the other device trusting/verifying the user identity under the control of the homeserver instead of the intended one. The vulnerability is a bug in the matrix-js-sdk, caused by checking and signing user identities and devices in two separate steps, and inadequately fixing the keys to be signed between those steps. Even though the attack is partly made possible due to the design decision of treating cross-signing user identities as Matrix devices on the server side (with their device ID set to the public part of the user identity key), no other examined implementations were vulnerable. Starting with version 19.7.0, the matrix-js-sdk has been modified to double check that the key signed is the one that was verified instead of just referencing the key by ID. An additional check has been made to report an error when one of the device ID matches a cross-signing key. As this attack requires coordination between a malicious homeserver and an attacker, those who trust their homeservers do not need a particular workaround.",
    "cve_publish_date": "2022-09-29",
    "cwe_id": "CWE-287",
    "cwe_name": "Improper Authentication",
    "cwe_description": "When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.",
    "commit_message": "Resolve multiple CVEs\n\nCVE-2022-39249\nCVE-2022-39250\nCVE-2022-39251\nCVE-2022-39236",
    "type_of_change": "Modification",
    "filename_of_changes": "megolm.ts",
    "code_language": "TypeScript",
    "number_of_lines_added_for_mitigation": "108",
    "number_of_lines_deleted_vulnerable_to_cve": "17",
    "vulnerable_lines": [
        "// Line_Reference 38: import { MatrixEvent } from \"../..\";",
        "// Line_Reference 1192:     // events which we couldn't decrypt due to unknown sessions / indexes: map from",
        "// Line_Reference 1193:     // senderKey|sessionId to Set of MatrixEvents",
        "// Line_Reference 1297:         // success. We can remove the event from the pending list, if that hasn't",
        "// Line_Reference 1298:         // already happened.",
        "// Line_Reference 1299:         this.removeEventFromPendingList(event);",
        "// Line_Reference 1403:         if (!senderKey) {",
        "// Line_Reference 1404:             logger.error(\"key event has no sender key (not encrypted?)\");",
        "// Line_Reference 1421:             senderKey = content.sender_key;",
        "// Line_Reference 1438:         const extraSessionData: any = {};",
        "// Line_Reference 1456:             if (await this.retryDecryption(senderKey, content.session_id)) {",
        "// Line_Reference 1671:         const extraSessionData: any = {};",
        "// Line_Reference 1699:             this.retryDecryption(session.sender_key, session.session_id);",
        "// Line_Reference 1711:      * @return {Boolean} whether all messages were successfully decrypted",
        "// Line_Reference 1713:     private async retryDecryption(senderKey: string, sessionId: string): Promise<boolean> {",
        "// Line_Reference 1728:                 await ev.attemptDecryption(this.crypto, { isRetry: true });",
        "// Line_Reference 1734:         // If decrypted successfully, they'll have been removed from pendingEvents"
    ]
}
