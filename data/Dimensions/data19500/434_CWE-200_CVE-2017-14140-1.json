{
    "cve_id": "CVE-2017-14140",
    "cve_description": "The move_pages system call in mm/migrate.c in the Linux kernel before 4.12.9 doesn't check the effective uid of the target process, enabling a local attacker to learn the memory layout of a setuid executable despite ASLR.",
    "cve_publish_date": "2017-09-05",
    "cwe_id": "CWE-200",
    "cwe_name": "Exposure of Sensitive Information to an Unauthorized Actor",
    "cwe_description": "The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.",
    "commit_message": "Sanitize 'move_pages()' permission checks\n\nThe 'move_paghes()' system call was introduced long long ago with the\nsame permission checks as for sending a signal (except using\nCAP_SYS_NICE instead of CAP_SYS_KILL for the overriding capability).\n\nThat turns out to not be a great choice - while the system call really\nonly moves physical page allocations around (and you need other\ncapabilities to do a lot of it), you can check the return value to map\nout some the virtual address choices and defeat ASLR of a binary that\nstill shares your uid.\n\nSo change the access checks to the more common 'ptrace_may_access()'\nmodel instead.\n\nThis tightens the access checks for the uid, and also effectively\nchanges the CAP_SYS_NICE check to CAP_SYS_PTRACE, but it's unlikely that\nanybody really _uses_ this legacy system call any more (we hav ebetter\nNUMA placement models these days), so I expect nobody to notice.\n\nFamous last words.\n\nReported-by: Otto Ebeling <otto.ebeling@iki.fi>\nAcked-by: Eric W. Biederman <ebiederm@xmission.com>\nCc: Willy Tarreau <w@1wt.eu>\nCc: stable@kernel.org\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "migrate.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "3",
    "number_of_lines_deleted_vulnerable_to_cve": "8",
    "vulnerable_lines": [
        "// Line_Reference 1655: \tconst struct cred *cred = current_cred(), *tcred;",
        "// Line_Reference 1679: \t * process. The right exists if the process has administrative",
        "// Line_Reference 1680: \t * capabilities, superuser privileges or the same",
        "// Line_Reference 1681: \t * userid as the target process.",
        "// Line_Reference 1683: \ttcred = __task_cred(task);",
        "// Line_Reference 1684: \tif (!uid_eq(cred->euid, tcred->suid) && !uid_eq(cred->euid, tcred->uid) &&",
        "// Line_Reference 1685: \t    !uid_eq(cred->uid,  tcred->suid) && !uid_eq(cred->uid,  tcred->uid) &&",
        "// Line_Reference 1686: \t    !capable(CAP_SYS_NICE)) {"
    ]
}
