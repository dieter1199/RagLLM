{
    "cve_id": "CVE-2012-4406",
    "cve_description": "OpenStack Object Storage (swift) before 1.7.0 uses the loads function in the pickle Python module unsafely when storing and loading metadata in memcached, which allows remote attackers to execute arbitrary code via a crafted pickle object.",
    "cve_publish_date": "2012-10-22",
    "cwe_id": "CWE-502",
    "cwe_name": "Deserialization of Untrusted Data",
    "cwe_description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
    "commit_message": "Do not use pickle for serialization in memcache, but JSON\n\nWe don't want to use pickle as it can execute arbitrary code. JSON is\nsafer. However, note that it supports serialization for only some\nspecific subset of object types; this should be enough for what we need,\nthough.\n\nTo avoid issues on upgrades (unability to read pickled values, and cache\npoisoning for old servers not understanding JSON), we add a\nmemcache_serialization_support configuration option, with the following\nvalues:\n\n 0 = older, insecure pickle serialization\n 1 = json serialization but pickles can still be read (still insecure)\n 2 = json serialization only (secure and the default)\n\nTo avoid an instant full cache flush, existing installations should\nupgrade with 0, then set to 1 and reload, then after some time (24\nhours) set to 2 and reload. Support for 0 and 1 will be removed in\nfuture versions.\n\nPart of bug 1006414.\n\nChange-Id: Id7d6d547b103b4f23ebf5be98b88f09ec6027ce4",
    "type_of_change": "Modification",
    "filename_of_changes": "memcache.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "23",
    "number_of_lines_deleted_vulnerable_to_cve": "7",
    "vulnerable_lines": [
        "// Line_Reference 30:         if not self.memcache_servers:",
        "// Line_Reference 35:                 try:",
        "// Line_Reference 36:                     self.memcache_servers = \\",
        "// Line_Reference 37:                         memcache_conf.get('memcache', 'memcache_servers')",
        "// Line_Reference 38:                 except (NoSectionError, NoOptionError):",
        "// Line_Reference 39:                     pass",
        "// Line_Reference 43:             [s.strip() for s in self.memcache_servers.split(',') if s.strip()])"
    ]
}
