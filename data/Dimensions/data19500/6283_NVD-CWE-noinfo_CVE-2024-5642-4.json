{
    "cve_id": "CVE-2024-5642",
    "cve_description": "CPython 3.9 and earlier doesn't disallow configuring an empty list (\"[]\") for SSLContext.set_npn_protocols() which is an invalid value for the underlying OpenSSL API. This results in a buffer over-read when NPN is used (see CVE-2024-5535 for OpenSSL). This vulnerability is of low severity due to NPN being not widely used and specifying an empty list likely being uncommon in-practice (typically a protocol name would be configured).",
    "cve_publish_date": "2024-06-27",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "bpo-43669: PEP 644: Require OpenSSL 1.1.1 or newer (GH-23014)\n\n- Remove HAVE_X509_VERIFY_PARAM_SET1_HOST check\r\n- Update hashopenssl to require OpenSSL 1.1.1\r\n- multissltests only OpenSSL > 1.1.0\r\n- ALPN is always supported\r\n- SNI is always supported\r\n- Remove deprecated NPN code. Python wrappers are no-op.\r\n- ECDH is always supported\r\n- Remove OPENSSL_VERSION_1_1 macro\r\n- Remove locking callbacks\r\n- Drop PY_OPENSSL_1_1_API macro\r\n- Drop HAVE_SSL_CTX_CLEAR_OPTIONS macro\r\n- SSL_CTRL_GET_MAX_PROTO_VERSION is always defined now\r\n- security level is always available now\r\n- get_num_tickets is available with TLS 1.3\r\n- X509_V_ERR MISMATCH is always available now\r\n- Always set SSL_MODE_RELEASE_BUFFERS\r\n- X509_V_FLAG_TRUSTED_FIRST is always available\r\n- get_ciphers is always supported\r\n- SSL_CTX_set_keylog_callback is always available\r\n- Update Modules/Setup with static link example\r\n- Mention PEP in whatsnew\r\n- Drop 1.0.2 and 1.1.0 from GHA tests",
    "type_of_change": "Modification",
    "filename_of_changes": "test_ssl.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "26",
    "number_of_lines_deleted_vulnerable_to_cve": "93",
    "vulnerable_lines": [
        "// Line_Reference 43: IS_OPENSSL_1_1_0 = not IS_LIBRESSL and ssl.OPENSSL_VERSION_INFO >= (1, 1, 0)",
        "// Line_Reference 273: def can_clear_options():",
        "// Line_Reference 274:     # 0.9.8m or higher",
        "// Line_Reference 275:     return ssl._OPENSSL_API_VERSION >= (0, 9, 8, 13, 15)",
        "// Line_Reference 276: ",
        "// Line_Reference 277: def no_sslv2_implies_sslv3_hello():",
        "// Line_Reference 278:     # 0.9.7h or higher",
        "// Line_Reference 279:     return ssl.OPENSSL_VERSION_INFO >= (0, 9, 7, 8, 15)",
        "// Line_Reference 280: ",
        "// Line_Reference 281: def have_verify_flags():",
        "// Line_Reference 282:     # 0.9.8 or higher",
        "// Line_Reference 283:     return ssl.OPENSSL_VERSION_INFO >= (0, 9, 8, 0, 15)",
        "// Line_Reference 284: ",
        "// Line_Reference 375:         if ssl.OPENSSL_VERSION_INFO >= (1, 0):",
        "// Line_Reference 376:             ssl.OP_NO_COMPRESSION",
        "// Line_Reference 383:         if ssl.OPENSSL_VERSION_INFO >= (1, 0, 1):",
        "// Line_Reference 384:             ssl.OP_NO_TLSv1_1",
        "// Line_Reference 385:             ssl.OP_NO_TLSv1_2",
        "// Line_Reference 1164:     @unittest.skipIf(ssl.OPENSSL_VERSION_INFO < (1, 0, 2, 0, 0), 'OpenSSL too old')",
        "// Line_Reference 1184:         if can_clear_options():",
        "// Line_Reference 1185:             ctx.options = (ctx.options & ~ssl.OP_NO_TLSv1)",
        "// Line_Reference 1186:             self.assertEqual(default, ctx.options)",
        "// Line_Reference 1187:             ctx.options = 0",
        "// Line_Reference 1188:             # Ubuntu has OP_NO_SSLv3 forced on by default",
        "// Line_Reference 1189:             self.assertEqual(0, ctx.options & ~ssl.OP_NO_SSLv3)",
        "// Line_Reference 1190:         else:",
        "// Line_Reference 1191:             with self.assertRaises(ValueError):",
        "// Line_Reference 1192:                 ctx.options = 0",
        "// Line_Reference 1330:     @unittest.skipUnless(have_verify_flags(),",
        "// Line_Reference 1331:                          \"verify_flags need OpenSSL > 0.9.8\")",
        "// Line_Reference 1800:     @unittest.skipUnless(IS_OPENSSL_1_1_1, \"Test requires OpenSSL 1.1.1\")",
        "// Line_Reference 2959:     @unittest.skipUnless(have_verify_flags(),",
        "// Line_Reference 2960:                         \"verify_flags need OpenSSL > 0.9.8\")",
        "// Line_Reference 3862:                 if IS_OPENSSL_1_1_1 and has_tls_version('TLSv1_3'):",
        "// Line_Reference 3863:                     self.assertEqual(s.version(), 'TLSv1.3')",
        "// Line_Reference 3864:                 elif ssl.OPENSSL_VERSION_INFO >= (1, 0, 2):",
        "// Line_Reference 3865:                     self.assertEqual(s.version(), 'TLSv1.2')",
        "// Line_Reference 3866:                 else:  # 0.9.8 to 1.0.1",
        "// Line_Reference 3867:                     self.assertIn(s.version(), ('TLSv1', 'TLSv1.2'))",
        "// Line_Reference 3969:         if ssl.OPENSSL_VERSION_INFO < (1, 0, 0):",
        "// Line_Reference 3970:             context.set_ciphers(\"ECCdraft:ECDH\")",
        "// Line_Reference 4102:             stats = server_params_test(client_context, server_context,",
        "// Line_Reference 4103:                                        chatty=True, connectionchatty=True,",
        "// Line_Reference 4104:                                        sni_name=hostname)",
        "// Line_Reference 4106:             pass",
        "// Line_Reference 4107:         else:",
        "// Line_Reference 4108:             # OpenSSL 1.0.2 does not fail although it should.",
        "// Line_Reference 4109:             if IS_OPENSSL_1_1_0:",
        "// Line_Reference 4110:                 self.fail(\"mismatch curve did not fail\")",
        "// Line_Reference 4120:     @unittest.skipUnless(ssl.HAS_ALPN, \"ALPN support required\")",
        "// Line_Reference 4130:     @unittest.skipUnless(ssl.HAS_ALPN, \"ALPN support needed for this test\")",
        "// Line_Reference 4153:             if (expected is None and IS_OPENSSL_1_1_0",
        "// Line_Reference 4154:                     and ssl.OPENSSL_VERSION_INFO < (1, 1, 0, 6)):",
        "// Line_Reference 4155:                 # OpenSSL 1.1.0 to 1.1.0e raises handshake error",
        "// Line_Reference 4156:                 self.assertIsInstance(stats, ssl.SSLError)",
        "// Line_Reference 4157:             else:",
        "// Line_Reference 4158:                 msg = \"failed trying %s (s) and %s (c).\\n\" \\",
        "// Line_Reference 4159:                     \"was expecting %s, but got %%s from the %%s\" \\",
        "// Line_Reference 4160:                         % (str(server_protocols), str(client_protocols),",
        "// Line_Reference 4161:                             str(expected))",
        "// Line_Reference 4162:                 client_result = stats['client_alpn_protocol']",
        "// Line_Reference 4163:                 self.assertEqual(client_result, expected,",
        "// Line_Reference 4164:                                  msg % (client_result, \"client\"))",
        "// Line_Reference 4165:                 server_result = stats['server_alpn_protocols'][-1] \\",
        "// Line_Reference 4166:                     if len(stats['server_alpn_protocols']) else 'nothing'",
        "// Line_Reference 4167:                 self.assertEqual(server_result, expected,",
        "// Line_Reference 4168:                                  msg % (server_result, \"server\"))",
        "// Line_Reference 4178:     @unittest.skipUnless(ssl.HAS_NPN, \"NPN support needed for this test\")",
        "// Line_Reference 4180:         server_protocols = ['http/1.1', 'spdy/2']",
        "// Line_Reference 4181:         protocol_tests = [",
        "// Line_Reference 4182:             (['http/1.1', 'spdy/2'], 'http/1.1'),",
        "// Line_Reference 4183:             (['spdy/2', 'http/1.1'], 'http/1.1'),",
        "// Line_Reference 4184:             (['spdy/2', 'test'], 'spdy/2'),",
        "// Line_Reference 4185:             (['abc', 'def'], 'abc')",
        "// Line_Reference 4186:         ]",
        "// Line_Reference 4187:         for client_protocols, expected in protocol_tests:",
        "// Line_Reference 4188:             client_context, server_context, hostname = testing_context()",
        "// Line_Reference 4189:             server_context.set_npn_protocols(server_protocols)",
        "// Line_Reference 4190:             client_context.set_npn_protocols(client_protocols)",
        "// Line_Reference 4191:             stats = server_params_test(client_context, server_context,",
        "// Line_Reference 4192:                                        chatty=True, connectionchatty=True,",
        "// Line_Reference 4193:                                        sni_name=hostname)",
        "// Line_Reference 4194:             msg = \"failed trying %s (s) and %s (c).\\n\" \\",
        "// Line_Reference 4195:                   \"was expecting %s, but got %%s from the %%s\" \\",
        "// Line_Reference 4196:                       % (str(server_protocols), str(client_protocols),",
        "// Line_Reference 4197:                          str(expected))",
        "// Line_Reference 4198:             client_result = stats['client_npn_protocol']",
        "// Line_Reference 4199:             self.assertEqual(client_result, expected, msg % (client_result, \"client\"))",
        "// Line_Reference 4200:             server_result = stats['server_npn_protocols'][-1] \\",
        "// Line_Reference 4201:                 if len(stats['server_npn_protocols']) else 'nothing'",
        "// Line_Reference 4202:             self.assertEqual(server_result, expected, msg % (server_result, \"server\"))",
        "// Line_Reference 4372:         if ssl.OPENSSL_VERSION_INFO > (1, 0, 1):",
        "// Line_Reference 4373:             self.assertGreater(session.ticket_lifetime_hint, 0)"
    ]
}
