{
    "cve_id": "CVE-2020-36640",
    "cve_description": "A vulnerability, which was classified as problematic, was found in bonitasoft bonita-connector-webservice up to 1.3.0. This affects the function TransformerConfigurationException of the file src/main/java/org/bonitasoft/connectors/ws/SecureWSConnector.java. The manipulation leads to xml external entity reference. Upgrading to version 1.3.1 is able to address this issue. The patch is named a12ad691c05af19e9061d7949b6b828ce48815d5. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-217443.",
    "cve_publish_date": "2023-01-05",
    "cwe_id": "CWE-611",
    "cwe_name": "Improper Restriction of XML External Entity Reference",
    "cwe_description": "The product processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output.",
    "commit_message": "fix(vulnerabilities): fix XXE attacks vulnerabilities and other code smell (#17)\n\n* Access to external entities and network access should always be\r\ndisable to avoid XXS attacks vulnerabilities.\r\n* Log error properly\r\n* refactor logger name to be compliant with java naming conventions",
    "type_of_change": "Modification",
    "filename_of_changes": "SecureWSConnector.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "33",
    "number_of_lines_deleted_vulnerable_to_cve": "27",
    "vulnerable_lines": [
        "// Line_Reference 112:     private final Logger LOGGER = Logger.getLogger(this.getClass().getName());",
        "// Line_Reference 184:     @SuppressWarnings(\"unchecked\")",
        "// Line_Reference 189:         LOGGER.info(SERVICE_NS + \" \" + serviceNS);",
        "// Line_Reference 191:         LOGGER.info(SERVICE_NAME + \" \" + serviceName);",
        "// Line_Reference 193:         LOGGER.info(PORT_NAME + \" \" + portName);",
        "// Line_Reference 195:         LOGGER.info(BINDING + \" \" + binding);",
        "// Line_Reference 197:         LOGGER.info(ENDPOINT_ADDRESS + \" \" + endpointAddress);",
        "// Line_Reference 208:             LOGGER.info(USER_NAME + \" \" + authUserName);",
        "// Line_Reference 211:             LOGGER.info(PASSWORD + \" ********\");",
        "// Line_Reference 216:         LOGGER.info(SOAP_ACTION + \" \" + soapAction);",
        "// Line_Reference 248:             LOGGER.warning(\"Invalid XML characters have been detected in the envelope, they will be removed.\");",
        "// Line_Reference 250:         LOGGER.info(ENVELOPE + \" \" + sanitizedEnvelope);",
        "// Line_Reference 271:         LOGGER.info(BUILD_RESPONSE_DOCUMENT_ENVELOPE + \" \" + buildResponseDocumentEnvelope);",
        "// Line_Reference 273:         LOGGER.info(BUILD_RESPONSE_DOCUMENT_BODY + \" \" + buildResponseDocumentBody);",
        "// Line_Reference 291:         LOGGER.info(PRINT_REQUEST_AND_RESPONSE + \" \" + printRequestAndResponse);",
        "// Line_Reference 326:         LOGGER.info(PROXY_HOST + \" \" + host);",
        "// Line_Reference 328:         LOGGER.info(PROXY_PROTOCOL + \" \" + protocol);",
        "// Line_Reference 330:         LOGGER.info(PROXY_PORT + \" \" + port);",
        "// Line_Reference 334:             LOGGER.info(\"Setting environment variable: socksProxyHost=\" + host);",
        "// Line_Reference 336:             LOGGER.info(\"Setting environment variable: socksProxyPort=\" + port);",
        "// Line_Reference 340:             LOGGER.info(\"Setting environment variable: \" + hostKey + \"=\" + host);",
        "// Line_Reference 343:             LOGGER.info(\"Setting environment variable: \" + portKey + \"=\" + port);",
        "// Line_Reference 347:         LOGGER.info(PROXY_USER + \" \" + user);",
        "// Line_Reference 349:         LOGGER.info(PROXY_PASSWORD + \" ********\");",
        "// Line_Reference 395:                 responseDocumentBody = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();",
        "// Line_Reference 420:             e.printStackTrace();",
        "// Line_Reference 455:             transformer = TransformerFactory.newInstance().newTransformer();"
    ]
}
