{
    "cve_id": "CVE-2021-39181",
    "cve_description": "OpenOlat is a web-based learning management system (LMS). Prior to version 15.3.18, 15.5.3, and 16.0.0, using a prepared import XML file (e.g. a course) any class on the Java classpath can be instantiated, including spring AOP bean factories. This can be used to execute code arbitrary code by the attacker. The attack requires an OpenOlat user account with the authoring role. It can not be exploited by unregistered users. The problem is fixed in versions 15.3.18, 15.5.3, and 16.0.0. There are no known workarounds aside from upgrading.",
    "cve_publish_date": "2021-09-01",
    "cwe_id": "CWE-91",
    "cwe_name": "XML Injection (aka Blind XPath Injection)",
    "cwe_description": "The product does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system.",
    "commit_message": "OO-5548: setup security of XStream by default",
    "type_of_change": "Modification",
    "filename_of_changes": "VideoManagerImpl.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "0",
    "number_of_lines_deleted_vulnerable_to_cve": "31",
    "vulnerable_lines": [
        "// Line_Reference 81: import org.olat.core.util.xml.XStreamHelper;",
        "// Line_Reference 88: import org.olat.modules.video.VideoMetadata;",
        "// Line_Reference 97: import org.olat.modules.video.model.VideoMetadataImpl;",
        "// Line_Reference 399: \t@Override",
        "// Line_Reference 400: \tpublic boolean isMetadataFileValid(OLATResource videoResource) {",
        "// Line_Reference 401: \t\tVFSContainer baseContainer = FileResourceManager.getInstance().getFileResourceRootImpl(videoResource);",
        "// Line_Reference 402: \t\tVFSLeaf metaDataFile = (VFSLeaf) baseContainer.resolve(FILENAME_VIDEO_METADATA_XML);",
        "// Line_Reference 403: \t\ttry {",
        "// Line_Reference 404: \t\t\tVideoMetadata meta = (VideoMetadata) XStreamHelper.readObject(XStreamHelper.createXStreamInstance(), metaDataFile);",
        "// Line_Reference 405: \t\t\treturn meta != null;",
        "// Line_Reference 406: \t\t} catch (Exception e) {",
        "// Line_Reference 407: \t\t\treturn false;",
        "// Line_Reference 408: \t\t}",
        "// Line_Reference 409: \t}",
        "// Line_Reference 410: ",
        "// Line_Reference 411: \t@Override",
        "// Line_Reference 412: \tpublic VideoMetadata readVideoMetadataFile(OLATResource videoResource){",
        "// Line_Reference 413: \t\tVFSContainer baseContainer= FileResourceManager.getInstance().getFileResourceRootImpl(videoResource);",
        "// Line_Reference 414: \t\tVFSLeaf metaDataFile = (VFSLeaf) baseContainer.resolve(FILENAME_VIDEO_METADATA_XML);",
        "// Line_Reference 415: \t\ttry {",
        "// Line_Reference 416: \t\t\treturn (VideoMetadata) XStreamHelper.readObject(XStreamHelper.createXStreamInstance(), metaDataFile);",
        "// Line_Reference 417: \t\t} catch (Exception e) {",
        "// Line_Reference 418: \t\t\tlog.error(\"Error while parsing XStream file for videoResource::{}\", videoResource, e);",
        "// Line_Reference 419: \t\t\t// return an empty, so at least it displays something and not an error",
        "// Line_Reference 420: \t\t\tVideoMetadata meta =  new VideoMetadataImpl();",
        "// Line_Reference 421: \t\t\tmeta.setWidth(800);",
        "// Line_Reference 422: \t\t\tmeta.setHeight(600);",
        "// Line_Reference 423: \t\t\treturn meta;",
        "// Line_Reference 424: \t\t}",
        "// Line_Reference 425: \t}",
        "// Line_Reference 426: "
    ]
}
