{
    "cve_id": "CVE-2021-28793",
    "cve_description": "vscode-restructuredtext before 146.0.0 contains an incorrect access control vulnerability, where a crafted project folder could execute arbitrary binaries via crafted workspace configuration.",
    "cve_publish_date": "2021-04-20",
    "cwe_id": "CWE-863",
    "cwe_name": "Incorrect Authorization",
    "cwe_description": "The product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. This allows attackers to bypass intended access restrictions.",
    "commit_message": "Patch to address workspace security issue.",
    "type_of_change": "ModificationType.ADD",
    "filename_of_changes": "extension.ts",
    "code_language": "TypeScript",
    "number_of_lines_added_for_mitigation": "46",
    "number_of_lines_deleted_vulnerable_to_cve": "38",
    "vulnerable_lines": [
        "// Line_Reference 12: import { ExtensionContentSecurityPolicyArbiter, PreviewSecuritySelector } from './security';",
        "// Line_Reference 22: import { rstDocumentSymbolProvider } from './features/rstDocumentSymbolProvider';",
        "// Line_Reference 24: let extensionPath = \"\";",
        "// Line_Reference 27: \treturn extensionPath;",
        "// Line_Reference 31: \textensionPath = context.extensionPath;",
        "// Line_Reference 33: \tconst logger = new Logger();",
        "// Line_Reference 34: \tlogger.log('Please visit https://docs.restructuredtext.net to learn how to configure the extension.');",
        "// Line_Reference 36: \tconst conflicting = Configuration.getConflictingExtensions();",
        "// Line_Reference 37: \tfor (const element of conflicting) {",
        "// Line_Reference 38: \t\tconst found = vscode.extensions.getExtension(element);",
        "// Line_Reference 39: \t\tif (found) {",
        "// Line_Reference 40: \t\t\tconst message = `Found conflicting extension ${element}. Please uninstall it.`;",
        "// Line_Reference 42: \t\t\tvscode.window.showErrorMessage(message);",
        "// Line_Reference 43: \t\t}",
        "// Line_Reference 44: \t}",
        "// Line_Reference 47: \tconst disableLsp = Configuration.getLanguageServerDisabled();",
        "// Line_Reference 51: \t// activate language services",
        "// Line_Reference 52: \tconst rstLspPromise = RstLanguageServer.activate(context, logger, disableLsp, python);",
        "// Line_Reference 55: \tcontext.subscriptions.push(",
        "// Line_Reference 56: \t\tvscode.commands.registerTextEditorCommand('restructuredtext.features.underline.underline', underline),",
        "// Line_Reference 57: \t\tvscode.commands.registerTextEditorCommand('restructuredtext.features.underline.underlineReverse',",
        "// Line_Reference 58: \t\t\t(textEditor, edit) => underline(textEditor, edit, true)),",
        "// Line_Reference 59: \t);",
        "// Line_Reference 61: \t// Linter support",
        "// Line_Reference 79: ",
        "// Line_Reference 107: ",
        "// Line_Reference 116: \treturn {",
        "// Line_Reference 117: \t\tinitializationFinished: Promise.all([rstLspPromise])",
        "// Line_Reference 118: \t\t\t.then((promiseResult) => {",
        "// Line_Reference 119: \t\t\t\t// This promise resolver simply swallows the result of Promise.all.",
        "// Line_Reference 120: \t\t\t\t// When we decide we want to expose this level of detail",
        "// Line_Reference 121: \t\t\t\t// to other extensions then we will design that return type and implement it here.",
        "// Line_Reference 122: \t\t\t}),",
        "// Line_Reference 123: \t};",
        "// Line_Reference 127: \tconst os = require('os');",
        "// Line_Reference 130: \tif (platform === 'darwin' || platform === 'win32') {",
        "// Line_Reference 131: \t\treturn;",
        "// Line_Reference 132: \t}"
    ]
}
