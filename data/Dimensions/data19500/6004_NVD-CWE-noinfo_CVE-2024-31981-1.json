{
    "cve_id": "CVE-2024-31981",
    "cve_description": "XWiki Platform is a generic wiki platform. Starting in version 3.0.1 and prior to versions 4.10.20, 15.5.4, and 15.10-rc-1, remote code execution is possible via PDF export templates. This vulnerability has been patched in XWiki 14.10.20, 15.5.4 and 15.10-rc-1. If PDF templates are not typically used on the instance, an administrator can create the document `XWiki.PDFClass` and block its edition, after making sure that it does not contain a `style` attribute. Otherwise, there are no known workarounds aside from upgrading.",
    "cve_publish_date": "2024-04-10",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "XWIKI-21337: Apply PDF templates with the rights of their authors",
    "type_of_change": "Modification",
    "filename_of_changes": "PdfExportImpl.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "55",
    "number_of_lines_deleted_vulnerable_to_cve": "25",
    "vulnerable_lines": [
        "// Line_Reference 42: import org.apache.commons.lang3.exception.ExceptionUtils;",
        "// Line_Reference 58: import org.xwiki.velocity.XWikiVelocityException;",
        "// Line_Reference 98:     private static DocumentReferenceResolver<String> referenceResolver =",
        "// Line_Reference 102:     private static EntityReferenceSerializer<String> referenceSerializer =",
        "// Line_Reference 106:     private static DocumentAccessBridge dab = Utils.getComponent(DocumentAccessBridge.class);",
        "// Line_Reference 109:     private static VelocityManager velocityManager = Utils.getComponent(VelocityManager.class);",
        "// Line_Reference 111:     private static XMLReaderFactory xmlReaderFactory = Utils.getComponent(XMLReaderFactory.class);",
        "// Line_Reference 116:     private Environment environment = Utils.getComponent((Type) Environment.class);",
        "// Line_Reference 121:     private XSLFORenderer xslFORenderer = Utils.getComponent(XSLFORenderer.class, \"fop\");",
        "// Line_Reference 187:         List<HTMLFilter> filters = new ArrayList<HTMLFilter>(config.getFilters());",
        "// Line_Reference 264:             this.xslFORenderer.render(new ByteArrayInputStream(xmlfo.getBytes(\"UTF-8\")), out, type.getMimeType());",
        "// Line_Reference 341:             XMLReader xmlReader = xmlReaderFactory.createXMLReader();",
        "// Line_Reference 468:             templateReference = referenceResolver.resolve(pdftemplate);",
        "// Line_Reference 471:             templateReference = dab.getCurrentDocumentReference();",
        "// Line_Reference 472:             String currentWiki = dab.getCurrentDocumentReference().getRoot().getName();",
        "// Line_Reference 476:         String result = (String) dab.getProperty(templateReference, classReference, propertyName);",
        "// Line_Reference 477:         if (StringUtils.isBlank(result)) {",
        "// Line_Reference 480:         String templateName = referenceSerializer.serialize(templateReference);",
        "// Line_Reference 482:             StringWriter writer = new StringWriter();",
        "// Line_Reference 483:             VelocityContext vcontext = velocityManager.getVelocityContext();",
        "// Line_Reference 484:             velocityManager.getVelocityEngine().evaluate(vcontext, writer, templateName, result);",
        "// Line_Reference 485:             result = writer.toString();",
        "// Line_Reference 486:         } catch (XWikiVelocityException e) {",
        "// Line_Reference 487:             LOGGER.warn(\"Error applying Velocity to the [{}] property of the [{}] document. Using the property's value \"",
        "// Line_Reference 488:                 + \"without applying Velocity.\", propertyName, templateName, ExceptionUtils.getRootCauseMessage(e));"
    ]
}
