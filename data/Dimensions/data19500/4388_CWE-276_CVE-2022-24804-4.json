{
    "cve_id": "CVE-2022-24804",
    "cve_description": "Discourse is an open source platform for community discussion. In stable versions prior to 2.8.3 and beta versions prior 2.9.0.beta4 erroneously expose groups. When a group with restricted visibility has been used to set the permissions of a category, the name of the group is leaked to any user that is able to see the category. To workaround the problem, a site administrator can remove groups with restricted visibility from any category's permissions setting.",
    "cve_publish_date": "2022-04-11",
    "cwe_id": "CWE-276",
    "cwe_name": "Incorrect Default Permissions",
    "cwe_description": "During installation, installed file permissions are set to allow anyone to modify those files.",
    "commit_message": "SECURITY: Category group permissions leaked to normal users.\n\nAfter this commit, category group permissions can only be seen by users\nthat are allowed to manage a category. In the past, we inadvertently\nincluded a category's group permissions settings in `CategoriesController#show`\nand `CategoriesController#find_by_slug` endpoints for normal users when\nthose settings are only a concern to users that can manage a category.",
    "type_of_change": "Modification",
    "filename_of_changes": "category_serializer_spec.rb",
    "code_language": "Ruby",
    "number_of_lines_added_for_mitigation": "32",
    "number_of_lines_deleted_vulnerable_to_cve": "57",
    "vulnerable_lines": [
        "// Line_Reference 46:     context \"category without group permissions configured\" do",
        "// Line_Reference 47:       it \"returns the right category group permissions for an anon user\" do",
        "// Line_Reference 48:         json = described_class.new(category, scope: Guardian.new, root: false).as_json",
        "// Line_Reference 50:         expect(json[:group_permissions]).to eq([",
        "// Line_Reference 51:           { permission_type: CategoryGroup.permission_types[:full], group_name: Group[:everyone]&.name }",
        "// Line_Reference 52:         ])",
        "// Line_Reference 56:     context \"category with group permissions configured\" do",
        "// Line_Reference 57:       fab!(:private_group) { Fabricate(:group, visibility_level: Group.visibility_levels[:staff], name: 'bbb') }",
        "// Line_Reference 59:       fab!(:user_group) do",
        "// Line_Reference 60:         Fabricate(:group, visibility_level: Group.visibility_levels[:members], name: 'ccc').tap do |g|",
        "// Line_Reference 61:           g.add(user)",
        "// Line_Reference 62:         end",
        "// Line_Reference 63:       end",
        "// Line_Reference 64: ",
        "// Line_Reference 65:       before do",
        "// Line_Reference 66:         group.update!(name: 'aaa')",
        "// Line_Reference 67: ",
        "// Line_Reference 68:         category.set_permissions(",
        "// Line_Reference 69:           :everyone => :readonly,",
        "// Line_Reference 70:           group.name => :readonly,",
        "// Line_Reference 71:           user_group.name => :full,",
        "// Line_Reference 72:           private_group.name => :full,",
        "// Line_Reference 73:         )",
        "// Line_Reference 74: ",
        "// Line_Reference 75:         category.save!",
        "// Line_Reference 76:       end",
        "// Line_Reference 77: ",
        "// Line_Reference 78:       it \"returns the right category group permissions for an anon user\" do",
        "// Line_Reference 79:         json = described_class.new(category, scope: Guardian.new, root: false).as_json",
        "// Line_Reference 81:         expect(json[:group_permissions]).to eq([",
        "// Line_Reference 82:           { permission_type: CategoryGroup.permission_types[:readonly], group_name: group.name },",
        "// Line_Reference 83:         ])",
        "// Line_Reference 84:       end",
        "// Line_Reference 86:       it \"returns the right category group permissions for a regular user ordered by ascending group name\" do",
        "// Line_Reference 87:         json = described_class.new(category, scope: Guardian.new(user), root: false).as_json",
        "// Line_Reference 89:         expect(json[:group_permissions]).to eq([",
        "// Line_Reference 90:           { permission_type: CategoryGroup.permission_types[:readonly], group_name: group.name },",
        "// Line_Reference 91:           { permission_type: CategoryGroup.permission_types[:full], group_name: user_group.name },",
        "// Line_Reference 92:         ])",
        "// Line_Reference 93:       end",
        "// Line_Reference 95:       it \"returns the right category group permission for a staff user ordered by ascending group name\" do",
        "// Line_Reference 96:         json = described_class.new(category, scope: Guardian.new(admin), root: false).as_json",
        "// Line_Reference 98:         expect(json[:group_permissions]).to eq([",
        "// Line_Reference 99:           { permission_type: CategoryGroup.permission_types[:readonly], group_name: group.name },",
        "// Line_Reference 100:           { permission_type: CategoryGroup.permission_types[:full], group_name: private_group.name },",
        "// Line_Reference 101:           { permission_type: CategoryGroup.permission_types[:full], group_name: user_group.name },",
        "// Line_Reference 102:           { permission_type: CategoryGroup.permission_types[:readonly], group_name: 'everyone' },",
        "// Line_Reference 103:         ])",
        "// Line_Reference 104:       end",
        "// Line_Reference 106:       it \"returns the group permissions for everyone group too\" do",
        "// Line_Reference 107:         category.set_permissions(everyone: :readonly)",
        "// Line_Reference 108:         category.save!",
        "// Line_Reference 110:         json = described_class.new(category, scope: Guardian.new(admin), root: false).as_json",
        "// Line_Reference 112:         expect(json[:group_permissions]).to eq([",
        "// Line_Reference 113:           { permission_type: CategoryGroup.permission_types[:readonly], group_name: 'everyone' },",
        "// Line_Reference 114:         ])",
        "// Line_Reference 115:       end"
    ]
}
