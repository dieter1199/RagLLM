{
    "cve_id": "CVE-2024-32971",
    "cve_description": "Apollo Router is a configurable, graph router written in Rust to run a federated supergraph that uses Apollo Federation 2. The affected versions of Apollo Router contain a bug that in limited circumstances, could lead to unexpected operations being executed which can result in unintended data or effects. This only affects Router instances configured to use distributed query plan caching. The root cause of this defect is a bug in Apollo Router’s cache retrieval logic: When this defect is present and distributed query planning caching is enabled, asking the Router to execute an operation (whether it is a query, a mutation, or a subscription) may result in an unexpected variation of that operation being executed or the generation of unexpected errors. The issue stems from inadvertently executing a modified version of a previously executed operation, whose query plan is stored in the underlying cache (specifically, Redis). Depending on the type of the operation, the result may vary. For a query, results may be fetched that don’t match what was requested (e.g., rather than running `fetchUsers(type: ENTERPRISE)` the Router may run `fetchUsers(type: TRIAL)`. For a mutation, this may result in incorrect mutations being sent to underlying subgraph servers (e.g., rather than sending `deleteUser(id: 10)` to a subgraph, the Router may run `deleteUser(id: 12)`. Users who are using distributed query plan caching, are advised to either upgrade to version 1.45.1 or above or downgrade to version 1.43.2 of the Apollo Router. Apollo Router versions 1.44.0 or 1.45.0 are not recommended for use and have been withdrawn. Users unable to upgrade can disable distributed query plan caching to mitigate this issue.",
    "cve_publish_date": "2024-05-02",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "release: v1.45.1 (#5009)",
    "type_of_change": "Modification",
    "filename_of_changes": "change.rs",
    "code_language": "Rust",
    "number_of_lines_added_for_mitigation": "162",
    "number_of_lines_deleted_vulnerable_to_cve": "30",
    "vulnerable_lines": [
        "// Line_Reference 77:         let mut visitor = QueryHashVisitor::new(schema, executable);",
        "// Line_Reference 415:     fn hash(schema: &str, query: &str) -> String {",
        "// Line_Reference 416:         let schema = Schema::parse(schema, \"schema.graphql\")",
        "// Line_Reference 427:         let mut visitor = QueryHashVisitor::new(&schema, &exec);",
        "// Line_Reference 430:         hex::encode(visitor.finish())",
        "// Line_Reference 434:     fn hash_subgraph_query(schema: &str, query: &str) -> String {",
        "// Line_Reference 435:         let schema = Valid::assume_valid(Schema::parse(schema, \"schema.graphql\").unwrap());",
        "// Line_Reference 442:         let mut visitor = QueryHashVisitor::new(&schema, &exec);",
        "// Line_Reference 482:         assert_eq!(hash(schema1, query), hash(schema2, query));",
        "// Line_Reference 486:         assert_ne!(hash(schema1, query), hash(schema2, query));",
        "// Line_Reference 490:         assert_eq!(hash(schema1, query), hash(schema2, query));",
        "// Line_Reference 492:         assert_ne!(",
        "// Line_Reference 493:             hash(schema1, \"query { me { id name } }\"),",
        "// Line_Reference 494:             hash(schema1, \"query { me { name id } }\")",
        "// Line_Reference 495:         );",
        "// Line_Reference 535:         assert_eq!(hash(schema1, query), hash(schema2, query));",
        "// Line_Reference 538:         assert_ne!(hash(schema1, query), hash(schema2, query));",
        "// Line_Reference 541:         assert_ne!(hash(schema1, query), hash(schema2, query));",
        "// Line_Reference 589:         assert_eq!(hash(schema1, query), hash(schema2, query));",
        "// Line_Reference 592:         assert_ne!(hash(schema1, query), hash(schema2, query));",
        "// Line_Reference 595:         assert_ne!(hash(schema1, query), hash(schema2, query));",
        "// Line_Reference 617:         assert_ne!(hash(schema1, query), hash(schema2, query));",
        "// Line_Reference 620:         assert_ne!(hash(schema1, query), hash(schema2, query));",
        "// Line_Reference 623:         assert_ne!(hash(schema1, query), hash(schema2, query));",
        "// Line_Reference 626:         assert_ne!(hash(schema1, query), hash(schema2, query));",
        "// Line_Reference 629:         assert_ne!(hash(schema1, query), hash(schema2, query));",
        "// Line_Reference 820:         assert_ne!(hash(schema1, query), hash(schema2, query));",
        "// Line_Reference 823:         assert_ne!(hash(schema1, query), hash(schema2, query));",
        "// Line_Reference 948:         assert_ne!(hash(schema1, query), hash(schema2, query));",
        "// Line_Reference 951:         assert_ne!(hash(schema1, query), hash(schema2, query));"
    ]
}
