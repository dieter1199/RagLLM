{
    "cve_id": "CVE-2021-41171",
    "cve_description": "eLabFTW is an open source electronic lab notebook manager for research teams. In versions of eLabFTW before 4.1.0, it allows attackers to bypass a brute-force protection mechanism by using many different forged PHPSESSID values in HTTP Cookie header. This issue has been addressed by implementing brute force login protection, as recommended by Owasp with Device Cookies. This mechanism will not impact users and will effectively thwart any brute-force attempts at guessing passwords. The only correct way to address this is to upgrade to version 4.1.0. Adding rate limitation upstream of the eLabFTW service is of course a valid option, with or without upgrading.",
    "cve_publish_date": "2021-10-22",
    "cwe_id": "CWE-307",
    "cwe_name": "Improper Restriction of Excessive Authentication Attempts",
    "cwe_description": "The product does not implement sufficient measures to prevent multiple failed authentication attempts within a short time frame, making it more susceptible to brute force attacks.",
    "commit_message": "Add JWT anti brute-force login protection (#2831)\n\n* WIP: better brute force login protection\r\n\r\n* split device token classes\r\n\r\n* mv schema to 63\r\n\r\n* use int(10) in schema too\r\n\r\n* add sysadmin action to clear locked users/devices\r\n\r\n* remove the FK on authfail\r\n\r\n* remove authfail users_id fk constraint in structure.sql\r\n\r\n* catch the invalid device token exception\r\n\r\n* remove the banned users stuff\r\n\r\n* change invalid token message\r\n\r\n* cleanup the exceptions a bit\r\n\r\n* get rid of the useless InvalidCsrfTokenException\r\n\r\n* remove unused js import\r\n\r\n* introduce the AuthenticatedUser and AnonymousUser classes\r\n\r\nand improve the App and init.inc.php files\r\n\r\n* remove the populateFromEmail method from Users\r\n\r\n* get rid of the useless SessionAuth\r\n\r\nand rearrange init Auth and App\r\n\r\n* be more specific about which kind of user can be loaded in App\r\n\r\n* change Update class signature\r\n\r\n* use init.inc.php in ApiController\r\n\r\n* don't store the whole teamconfigarr in app",
    "type_of_change": "Modification",
    "filename_of_changes": "init.inc.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "54",
    "number_of_lines_deleted_vulnerable_to_cve": "82",
    "vulnerable_lines": [
        "// Line_Reference 18: use Elabftw\\Models\\Users;",
        "// Line_Reference 50:     // INIT APP OBJECT",
        "// Line_Reference 66:     $Auth = new Auth($App);",
        "// Line_Reference 67:     if ($Auth->needAuth()) {",
        "// Line_Reference 68:         try {",
        "// Line_Reference 69:             // this will throw an UnauthorizedException if we don't have a valid auth",
        "// Line_Reference 70:             $AuthResponse = $Auth->tryAuth();",
        "// Line_Reference 71:             $LoginHelper = new LoginHelper($AuthResponse, $App->Session);",
        "// Line_Reference 72:             $LoginHelper->login(false);",
        "// Line_Reference 73:         } catch (UnauthorizedException $e) {",
        "// Line_Reference 74:             // KICK USER TO LOGOUT PAGE THAT WILL REDIRECT TO LOGIN PAGE",
        "// Line_Reference 76:             // maybe we clicked an email link and we want to be redirected to the page upon successful login",
        "// Line_Reference 77:             // so we store the url in a cookie expiring in 5 minutes to redirect to it after login",
        "// Line_Reference 78:             // don't store a redirect cookie if we have been logged out and the redirect is to a controller page",
        "// Line_Reference 79:             if (!stripos($App->Request->getRequestUri(), 'controllers')) {",
        "// Line_Reference 80:                 $cookieOptions = array(",
        "// Line_Reference 81:                     'expires' => time() + 300,",
        "// Line_Reference 82:                     'path' => '/',",
        "// Line_Reference 83:                     'domain' => '',",
        "// Line_Reference 84:                     'secure' => true,",
        "// Line_Reference 85:                     'httponly' => true,",
        "// Line_Reference 86:                     'samesite' => 'Strict',",
        "// Line_Reference 87:                 );",
        "// Line_Reference 88:                 setcookie('redirect', $App->Request->getRequestUri(), $cookieOptions);",
        "// Line_Reference 89:             }",
        "// Line_Reference 90: ",
        "// Line_Reference 91:             // used by ajax requests to detect a timed out session",
        "// Line_Reference 92:             header('X-Elab-Need-Auth: 1');",
        "// Line_Reference 93:             // don't send a GET app/logout.php if it's an ajax call because it messes up the jquery ajax",
        "// Line_Reference 94:             if ($App->Request->headers->get('X-Requested-With') !== 'XMLHttpRequest') {",
        "// Line_Reference 95:                 // NO DON'T USE  THE FULL URL HERE BECAUSE IF SERVER IS HTTP it will fail badly",
        "// Line_Reference 96:                 header('Location: app/logout.php?keep_redirect=1');",
        "// Line_Reference 97:                 exit;",
        "// Line_Reference 98:             }",
        "// Line_Reference 99:             throw new UnauthorizedException(_('Your session expired.'));",
        "// Line_Reference 100:         }",
        "// Line_Reference 103:     // load the Users with a userid if we are auth and not anon",
        "// Line_Reference 104:     if ($App->Session->has('is_auth') && $App->Session->get('userid') !== 0) {",
        "// Line_Reference 105:         $App->loadUser(new Users(",
        "// Line_Reference 106:             $App->Session->get('userid'),",
        "// Line_Reference 107:             $App->Session->get('team'),",
        "// Line_Reference 108:         ));",
        "// Line_Reference 109:     }",
        "// Line_Reference 111:     // ANONYMOUS",
        "// Line_Reference 112:     if ($App->Session->get('is_anon') === 1) {",
        "// Line_Reference 113:         // anon user only has access to a subset of pages",
        "// Line_Reference 114:         $allowedPages = array('index.php', 'experiments.php', 'database.php', 'search.php', 'make.php');",
        "// Line_Reference 115:         if (!in_array(basename($App->Request->getScriptName()), $allowedPages, true)) {",
        "// Line_Reference 116:             throw new ImproperActionException('Anonymous user cannot access this page');",
        "// Line_Reference 117:         }",
        "// Line_Reference 118:         $Users = new Users();",
        "// Line_Reference 119:         $Users->userData['team'] = $App->Session->get('team');",
        "// Line_Reference 120:         $App->loadUser($Users);",
        "// Line_Reference 121:         // create a fake Users object with default data for anon user",
        "// Line_Reference 122:         $App->Users->userData['team'] = $App->Session->get('team');",
        "// Line_Reference 123:         $App->Users->userData['limit_nb'] = 15;",
        "// Line_Reference 124:         $App->Users->userData['anon'] = true;",
        "// Line_Reference 125:         $App->Users->userData['fullname'] = 'Anon Ymous';",
        "// Line_Reference 126:         $App->Users->userData['is_admin'] = 0;",
        "// Line_Reference 127:         $App->Users->userData['is_sysadmin'] = 0;",
        "// Line_Reference 128:         $App->Users->userData['show_team'] = 1;",
        "// Line_Reference 129:         $App->Users->userData['show_team_templates'] = 0;",
        "// Line_Reference 130:         $App->Users->userData['show_public'] = 0;",
        "// Line_Reference 131:         $App->Users->userData['lang'] = $App->Config->configArr['lang'];",
        "// Line_Reference 132:         $App->Users->userData['use_isodate'] = '0';",
        "// Line_Reference 135:     // START i18n",
        "// Line_Reference 136:     // get the lang",
        "// Line_Reference 137:     if ($App->Session->has('is_auth') && $App->Session->get('userid') !== 0) {",
        "// Line_Reference 138:         // set lang based on user pref",
        "// Line_Reference 139:         $locale = $App->Users->userData['lang'] . '.utf8';",
        "// Line_Reference 140:     } else {",
        "// Line_Reference 141:         // load server configured lang if logged out",
        "// Line_Reference 142:         $locale = $App->Config->configArr['lang'] . '.utf8';",
        "// Line_Reference 144:     // configure gettext",
        "// Line_Reference 145:     $domain = 'messages';",
        "// Line_Reference 146:     putenv(\"LC_ALL=$locale\");",
        "// Line_Reference 147:     setlocale(LC_ALL, $locale);",
        "// Line_Reference 148:     bindtextdomain($domain, dirname(__DIR__, 2) . '/src/langs');",
        "// Line_Reference 149:     textdomain($domain);",
        "// Line_Reference 150:     // END i18n",
        "// Line_Reference 151: } catch (UnauthorizedException $e) {",
        "// Line_Reference 152:     // do nothing here, controller will display the error"
    ]
}
