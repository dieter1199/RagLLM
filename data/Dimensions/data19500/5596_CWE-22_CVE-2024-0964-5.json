{
    "cve_id": "CVE-2024-0964",
    "cve_description": "A local file include could be remotely triggered in Gradio due to a vulnerable user-supplied JSON value in an API request.",
    "cve_publish_date": "2024-02-05",
    "cwe_id": "CWE-22",
    "cwe_name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
    "cwe_description": "The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
    "commit_message": "Fix api event drops (#6556)\n\n* changes\r\n\r\n* changes\r\n\r\n* add changeset\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changs\r\n\r\n* chagnes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes~git push\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* change\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n* changes\r\n\r\n---------\r\n\r\nCo-authored-by: gradio-pr-bot <gradio-pr-bot@users.noreply.github.com>\r\nCo-authored-by: Ubuntu <ubuntu@ip-172-31-25-241.us-west-2.compute.internal>\r\nCo-authored-by: Abubakar Abid <abubakar@huggingface.co>",
    "type_of_change": "Modification",
    "filename_of_changes": "routes.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "46",
    "number_of_lines_deleted_vulnerable_to_cve": "52",
    "vulnerable_lines": [
        "// Line_Reference 58: from gradio.queueing import Estimation, Event",
        "// Line_Reference 68:     cancel_tasks,",
        "// Line_Reference 70:     run_coro_in_background,",
        "// Line_Reference 71:     set_task_name,",
        "// Line_Reference 535:                 await app.get_blocks()._queue.clean_event(body.event_id)",
        "// Line_Reference 585:         @app.get(\"/queue/join\", dependencies=[Depends(login_check)])",
        "// Line_Reference 586:         async def queue_join(",
        "// Line_Reference 587:             fn_index: int,",
        "// Line_Reference 588:             session_hash: str,",
        "// Line_Reference 590:             username: str = Depends(get_current_user),",
        "// Line_Reference 591:             data: Optional[str] = None,",
        "// Line_Reference 594:             if blocks._queue.server_app is None:",
        "// Line_Reference 595:                 blocks._queue.set_server_app(app)",
        "// Line_Reference 596: ",
        "// Line_Reference 597:             event = Event(session_hash, fn_index, request, username)",
        "// Line_Reference 598:             if data is not None:",
        "// Line_Reference 599:                 input_data = json.loads(data)",
        "// Line_Reference 600:                 event.data = PredictBody(",
        "// Line_Reference 601:                     session_hash=session_hash,",
        "// Line_Reference 602:                     fn_index=fn_index,",
        "// Line_Reference 603:                     data=input_data,",
        "// Line_Reference 604:                     request=request,",
        "// Line_Reference 605:                 )",
        "// Line_Reference 606: ",
        "// Line_Reference 607:             # Continuous events are not put in the queue so that they do not",
        "// Line_Reference 608:             # occupy the queue's resource as they are expected to run forever",
        "// Line_Reference 609:             if blocks.dependencies[event.fn_index].get(\"every\", 0):",
        "// Line_Reference 610:                 await cancel_tasks({f\"{event.session_hash}_{event.fn_index}\"})",
        "// Line_Reference 611:                 await blocks._queue.reset_iterators(event._id)",
        "// Line_Reference 612:                 blocks._queue.continuous_tasks.append(event)",
        "// Line_Reference 613:                 task = run_coro_in_background(",
        "// Line_Reference 614:                     blocks._queue.process_events, [event], False",
        "// Line_Reference 615:                 )",
        "// Line_Reference 616:                 set_task_name(task, event.session_hash, event.fn_index, batch=False)",
        "// Line_Reference 617:                 app._asyncio_tasks.append(task)",
        "// Line_Reference 618:             else:",
        "// Line_Reference 619:                 rank = blocks._queue.push(event)",
        "// Line_Reference 620:                 if rank is None:",
        "// Line_Reference 621:                     event.send_message(\"queue_full\", final=True)",
        "// Line_Reference 622:                 else:",
        "// Line_Reference 623:                     estimation = blocks._queue.get_estimation()",
        "// Line_Reference 624:                     await blocks._queue.send_estimation(event, estimation, rank)",
        "// Line_Reference 631:                             await blocks._queue.clean_event(event)",
        "// Line_Reference 632:                         if not event.alive:",
        "// Line_Reference 639:                             message = event.message_queue.get_nowait()",
        "// Line_Reference 640:                             if message is None:  # end of stream marker",
        "// Line_Reference 641:                                 return",
        "// Line_Reference 654:                     await blocks._queue.clean_event(event)",
        "// Line_Reference 662:         @app.post(\"/queue/data\", dependencies=[Depends(login_check)])",
        "// Line_Reference 663:         async def queue_data(",
        "// Line_Reference 668:             blocks = app.get_blocks()",
        "// Line_Reference 669:             blocks._queue.attach_data(body)"
    ]
}
