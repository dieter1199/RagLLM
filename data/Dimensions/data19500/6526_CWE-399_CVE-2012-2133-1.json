{
    "cve_id": "CVE-2012-2133",
    "cve_description": "Use-after-free vulnerability in the Linux kernel before 3.3.6, when huge pages are enabled, allows local users to cause a denial of service (system crash) or possibly gain privileges by interacting with a hugetlbfs filesystem, as demonstrated by a umount operation that triggers improper handling of quota data.",
    "cve_publish_date": "2012-07-03",
    "cwe_id": "CWE-399",
    "cwe_name": "Resource Management Errors",
    "cwe_description": "Weaknesses in this category are related to improper management of system resources.",
    "commit_message": "hugepages: fix use after free bug in \"quota\" handling\n\nhugetlbfs_{get,put}_quota() are badly named.  They don't interact with the\ngeneral quota handling code, and they don't much resemble its behaviour.\nRather than being about maintaining limits on on-disk block usage by\nparticular users, they are instead about maintaining limits on in-memory\npage usage (including anonymous MAP_PRIVATE copied-on-write pages)\nassociated with a particular hugetlbfs filesystem instance.\n\nWorse, they work by having callbacks to the hugetlbfs filesystem code from\nthe low-level page handling code, in particular from free_huge_page().\nThis is a layering violation of itself, but more importantly, if the\nkernel does a get_user_pages() on hugepages (which can happen from KVM\namongst others), then the free_huge_page() can be delayed until after the\nassociated inode has already been freed.  If an unmount occurs at the\nwrong time, even the hugetlbfs superblock where the \"quota\" limits are\nstored may have been freed.\n\nAndrew Barry proposed a patch to fix this by having hugepages, instead of\nstoring a pointer to their address_space and reaching the superblock from\nthere, had the hugepages store pointers directly to the superblock,\nbumping the reference count as appropriate to avoid it being freed.\nAndrew Morton rejected that version, however, on the grounds that it made\nthe existing layering violation worse.\n\nThis is a reworked version of Andrew's patch, which removes the extra, and\nsome of the existing, layering violation.  It works by introducing the\nconcept of a hugepage \"subpool\" at the lower hugepage mm layer - that is a\nfinite logical pool of hugepages to allocate from.  hugetlbfs now creates\na subpool for each filesystem instance with a page limit set, and a\npointer to the subpool gets added to each allocated hugepage, instead of\nthe address_space pointer used now.  The subpool has its own lifetime and\nis only freed once all pages in it _and_ all other references to it (i.e.\nsuperblocks) are gone.\n\nsubpools are optional - a NULL subpool pointer is taken by the code to\nmean that no subpool limits are in effect.\n\nPrevious discussion of this bug found in:  \"Fix refcounting in hugetlbfs\nquota handling.\". See:  https://lkml.org/lkml/2011/8/11/28 or\nhttp://marc.info/?l=linux-mm&m=126928970510627&w=1\n\nv2: Fixed a bug spotted by Hillf Danton, and removed the extra parameter to\nalloc_huge_page() - since it already takes the vma, it is not necessary.\n\nSigned-off-by: Andrew Barry <abarry@cray.com>\nSigned-off-by: David Gibson <david@gibson.dropbear.id.au>\nCc: Hugh Dickins <hughd@google.com>\nCc: Mel Gorman <mgorman@suse.de>\nCc: Minchan Kim <minchan.kim@gmail.com>\nCc: Hillf Danton <dhillf@gmail.com>\nCc: Paul Mackerras <paulus@samba.org>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "hugetlb.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "108",
    "number_of_lines_deleted_vulnerable_to_cve": "27",
    "vulnerable_lines": [
        "// Line_Reference 543: \tstruct address_space *mapping;",
        "// Line_Reference 545: \tmapping = (struct address_space *) page_private(page);",
        "// Line_Reference 561: \tif (mapping)",
        "// Line_Reference 562: \t\thugetlb_put_quota(mapping, 1);",
        "// Line_Reference 980:  * reservation and actually increase quota before an allocation can occur.",
        "// Line_Reference 981:  * Where any new reservation would be required the reservation change is",
        "// Line_Reference 982:  * prepared, but not committed.  Once the page has been quota'd allocated",
        "// Line_Reference 983:  * an instantiated the change should be committed via vma_commit_reservation.",
        "// Line_Reference 984:  * No action is required on failure.",
        "// Line_Reference 1035: \tstruct address_space *mapping = vma->vm_file->f_mapping;",
        "// Line_Reference 1036: \tstruct inode *inode = mapping->host;",
        "// Line_Reference 1040: \t * Processes that did not create the mapping will have no reserves and",
        "// Line_Reference 1041: \t * will not have accounted against quota. Check that the quota can be",
        "// Line_Reference 1042: \t * made before satisfying the allocation",
        "// Line_Reference 1043: \t * MAP_NORESERVE mappings may also need pages and quota allocated",
        "// Line_Reference 1044: \t * if no reserve mapping overlaps.",
        "// Line_Reference 1050: \t\tif (hugetlb_get_quota(inode->i_mapping, chg))",
        "// Line_Reference 1060: \t\t\thugetlb_put_quota(inode->i_mapping, chg);",
        "// Line_Reference 1065: \tset_page_private(page, (unsigned long) mapping);",
        "// Line_Reference 2101: \t\t\thugetlb_put_quota(vma->vm_file->f_mapping, reserve);",
        "// Line_Reference 2334: \tmapping = (struct address_space *)page_private(page);",
        "// Line_Reference 2891: \t * and filesystem quota without using reserves",
        "// Line_Reference 2918: \t/* There must be enough filesystem quota for the mapping */",
        "// Line_Reference 2919: \tif (hugetlb_get_quota(inode->i_mapping, chg))",
        "// Line_Reference 2924: \t * Hand back the quota if there are not",
        "// Line_Reference 2928: \t\thugetlb_put_quota(inode->i_mapping, chg);",
        "// Line_Reference 2957: \thugetlb_put_quota(inode->i_mapping, (chg - freed));"
    ]
}
