{
    "cve_id": "CVE-2017-20154",
    "cve_description": "A vulnerability was found in ghostlander Phoenixcoin. It has been classified as problematic. Affected is the function CTxMemPool::accept of the file src/main.cpp. The manipulation leads to denial of service. Upgrading to version 0.6.6.1-pxc is able to address this issue. The name of the patch is 987dd68f71a7d8276cef3b6c3d578fd4845b5699. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-217068.",
    "cve_publish_date": "2022-12-30",
    "cwe_id": "CWE-404",
    "cwe_name": "Improper Resource Shutdown or Release",
    "cwe_description": "The product does not release or incorrectly releases a resource before it is made available for re-use.",
    "commit_message": "Implement fLimitFree to CTxMemPool::accept()\n\nWorks around a potential DoS vulnerability (see Bitcoin commit\nce99358f4aa4182d6983fde3e33a8fdbe1dfe4c3).",
    "type_of_change": "Modification",
    "filename_of_changes": "main.cpp",
    "code_language": "C++",
    "number_of_lines_added_for_mitigation": "32",
    "number_of_lines_deleted_vulnerable_to_cve": "37",
    "vulnerable_lines": [
        "// Line_Reference 483: bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,",
        "// Line_Reference 484:                         bool* pfMissingInputs)",
        "// Line_Reference 485: {",
        "// Line_Reference 569:         if(nFees < tx.GetMinFee(nTxSize, true, GMF_RELAY))",
        "// Line_Reference 570:             return error(\"CTxMemPool::accept() : not enough fees\");",
        "// Line_Reference 575:         if (nFees < MIN_RELAY_TX_FEE)",
        "// Line_Reference 576:         {",
        "// Line_Reference 577:             static CCriticalSection cs;",
        "// Line_Reference 582:             {",
        "// Line_Reference 583:                 LOCK(cs);",
        "// Line_Reference 584:                 // Use an exponentially decaying ~10-minute window:",
        "// Line_Reference 585:                 dFreeCount *= pow(1.0 - 1.0/600.0, (double)(nNow - nLastTime));",
        "// Line_Reference 586:                 nLastTime = nNow;",
        "// Line_Reference 587:                 // -limitfreerelay unit is thousand-bytes-per-minute",
        "// Line_Reference 588:                 // At default rate it would take over a month to fill 1GB",
        "// Line_Reference 589:                 if (dFreeCount > GetArg(\"-limitfreerelay\", 15)*10*1000 && !IsFromMe(tx))",
        "// Line_Reference 590:                     return error(\"CTxMemPool::accept() : free transaction rejected by rate limiter\");",
        "// Line_Reference 591:                 if (fDebug)",
        "// Line_Reference 592:                     printf(\"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nTxSize);",
        "// Line_Reference 593:                 dFreeCount += nTxSize;",
        "// Line_Reference 594:             }",
        "// Line_Reference 627: bool CTransaction::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs, bool* pfMissingInputs)",
        "// Line_Reference 628: {",
        "// Line_Reference 629:     return mempool.accept(txdb, *this, fCheckInputs, pfMissingInputs);",
        "// Line_Reference 733: bool CMerkleTx::AcceptToMemoryPool(CTxDB &txdb, bool fCheckInputs) {",
        "// Line_Reference 735:     return(CTransaction::AcceptToMemoryPool(txdb, fCheckInputs));",
        "// Line_Reference 758:                     tx.AcceptToMemoryPool(txdb, fCheckInputs);",
        "// Line_Reference 761:         return AcceptToMemoryPool(txdb, fCheckInputs);",
        "// Line_Reference 1584:         tx.AcceptToMemoryPool(txdb, false);",
        "// Line_Reference 3025:         if (tx.AcceptToMemoryPool(txdb, true, &fMissingInputs))",
        "// Line_Reference 3026:         {",
        "// Line_Reference 3047:                     if (tx.AcceptToMemoryPool(txdb, true, &fMissingInputs2))",
        "// Line_Reference 3048:                     {",
        "// Line_Reference 3056:                     else if (!fMissingInputs2)",
        "// Line_Reference 3057:                     {",
        "// Line_Reference 3058:                         // invalid orphan",
        "// Line_Reference 3060:                         printf(\"   removed invalid orphan tx %s\\n\", inv.hash.ToString().substr(0,10).c_str());"
    ]
}
