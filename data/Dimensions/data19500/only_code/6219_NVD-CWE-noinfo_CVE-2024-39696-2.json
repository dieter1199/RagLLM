func (p Precompile) CreateClawbackVestingAccount(
func (p Precompile) FundVestingAccount(
// if caller address is origin, the funder MUST match the origin
if contract.CallerAddress == origin && origin != funderAddr {
if contract.CallerAddress != origin {
// check if authorization exists
_, _, err := authorization.CheckAuthzExists(ctx, p.AuthzKeeper, contract.CallerAddress, origin, FundVestingAccountMsgURL)
return nil, fmt.Errorf(authorization.ErrAuthzDoesNotExistOrExpired, contract.CallerAddress, origin)
func (p Precompile) Clawback(
if contract.CallerAddress == origin && origin != funderAddr {
if contract.CallerAddress != origin {
// check if authorization exists
_, _, err := authorization.CheckAuthzExists(ctx, p.AuthzKeeper, contract.CallerAddress, origin, ClawbackMsgURL)
return nil, fmt.Errorf(authorization.ErrAuthzDoesNotExistOrExpired, contract.CallerAddress, origin)
func (p Precompile) UpdateVestingFunder(
if contract.CallerAddress == origin && origin != funderAddr {
if contract.CallerAddress != origin {
// check if authorization exists
_, _, err := authorization.CheckAuthzExists(ctx, p.AuthzKeeper, contract.CallerAddress, origin, UpdateVestingFunderMsgURL)
return nil, fmt.Errorf(authorization.ErrAuthzDoesNotExistOrExpired, contract.CallerAddress, origin)
func (p Precompile) ConvertVestingAccount(