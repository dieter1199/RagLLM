import { VerificationDetails, getUsersCollection } from "#database/users";
import { procedure, router } from "#lib/trpc";
import { createWorkspace } from "#lib/workspace";
import * as errors from "#lib/errors";
import { createSession } from "#lib/session";
import { isAuthenticatedUser } from "#lib/middleware";
import { verifyValue } from "#lib";
WorkspaceMembership,
} from "#database/workspace-memberships";
import { runWebhooks } from "#lib/webhooks";
import { createEventPublisher } from "#lib/pub-sub";
import { getUserSettingsCollection } from "#database";
type VerifyUserEvent = {
action: "update";
data: { id: string } & Partial<VerificationDetails & { email: string }>;
};
type VerifyWorkspaceInviteEvent = {
action: "update";
data: {
id: string;
userId: string;
pendingInvite?: boolean;
profile?: {
fullName?: string;
username?: string;
avatar?: string;
};
} & Partial<WorkspaceMembership>;
};
const publishUserEvent = createEventPublisher<VerifyUserEvent>(
(userId: string) => `user:${userId}`
);
const publishWorkspaceMembershipEvent = createEventPublisher<VerifyWorkspaceInviteEvent>(
(workspaceId: string) => `workspaceMemberships:${workspaceId}`
);
codeEditorTheme: "dark",
console.error(error);
