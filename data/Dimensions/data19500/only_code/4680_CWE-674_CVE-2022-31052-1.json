import itertools
from typing import TYPE_CHECKING, Dict, Generator, Iterable, Optional, Set, Union
TAGS_TO_REMOVE = (
)
for el in _iterate_over_text(tree.find("body"), *TAGS_TO_REMOVE)
tree: "etree.Element", *tags_to_ignore: Union[str, "etree.Comment"]
# This is basically a stack that we extend using itertools.chain.
# This will either consist of an element to iterate over *or* a string
elements = iter([tree])
while True:
el = next(elements, None)
if el is None:
return
# We add to the stack all the elements children, interspersed with
# each child's tail text (if it exists). The tail text of a node
# is text that comes *after* the node, so we always include it even
# if we ignore the child node.
elements = itertools.chain(
itertools.chain.from_iterable(  # Basically a flatmap
[child, child.tail] if child.tail else [child]
for child in el.iterchildren()
),
elements,
)