import { procedure, router } from "../lib/trpc";
import { isAuthenticated, isAuthenticatedUser } from "../lib/middleware";
import { zodId } from "../lib";
import * as errors from "#lib/errors";
import { Workspace, getWorkspacesCollection, workspace } from "#database/workspaces";
import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
import { createWorkspace, deleteWorkspace } from "#lib/workspace";
import { getUsersCollection } from "#database";
type WorkspaceEvent =
| { action: "update"; data: Partial<Workspace> & { id: string } }
| { action: "delete"; data: { id: string } };
const publishEvent = createEventPublisher<WorkspaceEvent>((workspaceId) => {
return `workspace:${workspaceId}`;
});
return createEventSubscription<WorkspaceEvent>(ctx, `workspace:${ctx.auth.workspaceId}`);
publishEvent(ctx, `${ctx.auth.workspaceId}`, {
publishEvent(ctx, `${ctx.auth.workspaceId}`, {
