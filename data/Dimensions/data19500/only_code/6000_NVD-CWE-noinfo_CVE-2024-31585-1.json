#include "libavutil/audio_fifo.h"
AVAudioFifo *fifo;
av_audio_fifo_free(s->fifo);
s->fft_data[ch][n].re = p[n] * window_func_lut[n];
s->fft_in[ch][n].re = p[n] * window_func_lut[n];
static int draw_legend(AVFilterContext *ctx, int samples)
av_audio_fifo_free(s->fifo);
s->fifo = av_audio_fifo_alloc(inlink->format, inlink->channels, s->win_size);
if (!s->fifo)
outpicref->pts = av_rescale_q(insamples->pts, inlink->time_base, outlink->time_base);
int ret;
if (av_audio_fifo_size(s->fifo) < s->win_size) {
AVFrame *frame = NULL;
ret = ff_inlink_consume_frame(inlink, &frame);
s->pts = frame->pts;
s->consumed = 0;
av_audio_fifo_write(s->fifo, (void **)frame->extended_data, frame->nb_samples);
av_frame_free(&frame);
}
}
if (s->outpicref && (av_audio_fifo_size(s->fifo) >= s->win_size ||
ff_outlink_get_status(inlink))) {
AVFrame *fin = ff_get_audio_buffer(inlink, s->win_size);
if (!fin)
return AVERROR(ENOMEM);
fin->pts = s->pts + s->consumed;
s->consumed += s->hop_size;
ret = av_audio_fifo_peek(s->fifo, (void **)fin->extended_data,
FFMIN(s->win_size, av_audio_fifo_size(s->fifo)));
if (ret < 0) {
return ret;
av_assert0(fin->nb_samples == s->win_size);
ff_filter_execute(ctx, run_channel_fft, fin, NULL, s->nb_display_channels);
if (s->data == D_MAGNITUDE)
ff_filter_execute(ctx, calc_channel_magnitudes, NULL, NULL, s->nb_display_channels);
if (s->data == D_PHASE)
ff_filter_execute(ctx, calc_channel_phases, NULL, NULL, s->nb_display_channels);
if (s->data == D_UPHASE)
ff_filter_execute(ctx, calc_channel_uphases, NULL, NULL, s->nb_display_channels);
ret = plot_spectrum_column(inlink, fin);
av_frame_free(&fin);
av_audio_fifo_drain(s->fifo, s->hop_size);
if (ret <= 0 && !ff_outlink_get_status(inlink))
return ret;
int64_t pts;
FF_FILTER_FORWARD_STATUS(inlink, outlink);
if (av_audio_fifo_size(s->fifo) >= s->win_size ||
ff_inlink_queued_frames(inlink) > 0 ||
ff_outlink_get_status(inlink) == AVERROR_EOF) {
if (ff_outlink_frame_wanted(outlink) && av_audio_fifo_size(s->fifo) < s->win_size &&
ff_inlink_queued_frames(inlink) == 0 &&
ff_outlink_get_status(inlink) != AVERROR_EOF) {
int ret, samples;
samples = av_audio_fifo_size(s->fifo);
if (ret == AVERROR_EOF && s->outpicref && samples > 0) {
spf = s->win_size * (samples / ((s->win_size * sz) * ceil(samples / (float)(s->win_size * sz))));
spb = (samples / (spf * sz)) * spf;
fin = ff_get_audio_buffer(inlink, s->win_size);
ret = av_audio_fifo_peek(s->fifo, (void **)fin->extended_data, s->win_size);
if (ret < 0) {
av_frame_free(&fin);
return ret;
}
av_audio_fifo_drain(s->fifo, spf);
if (ret < s->win_size) {
for (ch = 0; ch < s->nb_display_channels; ch++) {
memset(fin->extended_data[ch] + ret * sizeof(float), 0,
(s->win_size - ret) * sizeof(float));
draw_legend(ctx, samples);
int ret;
ret = av_audio_fifo_write(s->fifo, (void **)insamples->extended_data, insamples->nb_samples);
av_frame_free(&insamples);
return ret;
