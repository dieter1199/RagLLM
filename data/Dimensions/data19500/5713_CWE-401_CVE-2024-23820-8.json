{
    "cve_id": "CVE-2024-23820",
    "cve_description": "OpenFGA, an authorization/permission engine, is vulnerable to a denial of service attack in versions prior to 1.4.3. In some scenarios that depend on the model and tuples used, a call to `ListObjects` may not  release memory properly. So when a sufficiently high number of those calls are executed, the OpenFGA server can create an `out of memory` error and terminate. Version 1.4.3 contains a patch for this issue.",
    "cve_publish_date": "2024-01-26",
    "cwe_id": "CWE-401",
    "cwe_name": "Missing Release of Memory after Effective Lifetime",
    "cwe_description": "The product does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory.",
    "commit_message": "fix: handle ReverseExpand channel closure correctly (#1315)",
    "type_of_change": "Modification",
    "filename_of_changes": "reverse_expand_test.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "169",
    "number_of_lines_deleted_vulnerable_to_cve": "35",
    "vulnerable_lines": [
        "// Line_Reference 58: ",
        "// Line_Reference 59: \tdone := make(chan struct{})",
        "// Line_Reference 65: \t\treverseExpandQuery.Execute(ctx, &ReverseExpandRequest{",
        "// Line_Reference 78: \t\tdone <- struct{}{}",
        "// Line_Reference 88: \t\trequire.NoError(t, res.Err)",
        "// Line_Reference 92: \tcase <-done:",
        "// Line_Reference 93: \t\tt.Log(\"OK!\")",
        "// Line_Reference 94: \t\treturn",
        "// Line_Reference 96: \t\trequire.FailNow(t, \"timed out\")",
        "// Line_Reference 124: \tdone := make(chan struct{})",
        "// Line_Reference 128: \t\treverseExpandQuery.Execute(timeoutCtx, &ReverseExpandRequest{",
        "// Line_Reference 140: \t\tdone <- struct{}{}",
        "// Line_Reference 143: \tcase res, open := <-resultChan:",
        "// Line_Reference 144: \t\tif open {",
        "// Line_Reference 145: \t\t\trequire.Error(t, res.Err)",
        "// Line_Reference 146: \t\t} else {",
        "// Line_Reference 147: \t\t\trequire.Nil(t, res)",
        "// Line_Reference 149: \t\t<-done",
        "// Line_Reference 150: \tcase <-done:",
        "// Line_Reference 151: \t\t// OK!",
        "// Line_Reference 186: ",
        "// Line_Reference 187: \tdone := make(chan struct{})",
        "// Line_Reference 192: \t\treverseExpandQuery.Execute(ctx, &ReverseExpandRequest{",
        "// Line_Reference 204: \t\tdone <- struct{}{}",
        "// Line_Reference 207: \tgo func() {",
        "// Line_Reference 208: \t\t<-resultChan",
        "// Line_Reference 209: \t\t// We want to read resultChan twice because Next() will fail after first read",
        "// Line_Reference 210: \t\t<-resultChan",
        "// Line_Reference 211: \t\tcancelFunc()",
        "// Line_Reference 212: \t}()",
        "// Line_Reference 214: \tselect {",
        "// Line_Reference 215: \tcase <-done:",
        "// Line_Reference 216: \t\treturn",
        "// Line_Reference 217: \tcase <-time.After(30 * time.Millisecond):",
        "// Line_Reference 218: \t\trequire.FailNow(t, \"timed out\")"
    ]
}
