{
    "cve_id": "CVE-2022-31888",
    "cve_description": "Session Fixation vulnerability in in function login in class.auth.php in osTicket through 1.16.2.",
    "cve_publish_date": "2023-04-05",
    "cwe_id": "CWE-384",
    "cwe_name": "Session Fixation",
    "cwe_description": "Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.",
    "commit_message": "Security: Session Fixation\n\nThis commit addresses possible session fixation on both agent and end user\nlogin. Upon login users are now issued new session with the old one\ninvalidated.",
    "type_of_change": "Modification",
    "filename_of_changes": "class.usersession.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "145",
    "number_of_lines_deleted_vulnerable_to_cve": "118",
    "vulnerable_lines": [
        "// Line_Reference 20: ",
        "// Line_Reference 23:    var $userID='';",
        "// Line_Reference 26:    var $validated=FALSE;",
        "// Line_Reference 27: ",
        "// Line_Reference 28:    function __construct($userid){",
        "// Line_Reference 30:       $this->browser=(!empty($_SERVER['HTTP_USER_AGENT'])) ? $_SERVER['HTTP_USER_AGENT'] : $_ENV['HTTP_USER_AGENT'];",
        "// Line_Reference 31:       $this->ip=(!empty($_SERVER['REMOTE_ADDR'])) ? $_SERVER['REMOTE_ADDR'] : getenv('REMOTE_ADDR');",
        "// Line_Reference 32:       $this->session_id=session_id();",
        "// Line_Reference 33:       $this->userID=$userid;",
        "// Line_Reference 36:    function isStaff(){",
        "// Line_Reference 37:        return FALSE;",
        "// Line_Reference 41:        return FALSE;",
        "// Line_Reference 44: ",
        "// Line_Reference 45:    function getSessionId(){",
        "// Line_Reference 49:    function getIP(){",
        "// Line_Reference 53:    function getBrowser(){",
        "// Line_Reference 56:    function refreshSession(){",
        "// Line_Reference 57:        //nothing to do...clients need to worry about it.",
        "// Line_Reference 58:    }",
        "// Line_Reference 61: ",
        "// Line_Reference 65: ",
        "// Line_Reference 66:       return($token);",
        "// Line_Reference 73:        @list($hash,$expire,$ip)=explode(\":\",$htoken);",
        "// Line_Reference 78:         global $cfg;",
        "// Line_Reference 80:         $token = rawurldecode($htoken);",
        "// Line_Reference 82:         #check if we got what we expected....",
        "// Line_Reference 83:         if($token && !strstr($token,\":\"))",
        "// Line_Reference 84:             return FALSE;",
        "// Line_Reference 86:         #get the goodies",
        "// Line_Reference 87:         list($hash,$expire,$ip)=explode(\":\",$token);",
        "// Line_Reference 89:         #Make sure the session hash is valid",
        "// Line_Reference 90:         if((md5($expire . SESSION_SECRET . $this->userID)!=$hash)){",
        "// Line_Reference 91:             return FALSE;",
        "// Line_Reference 92:         }",
        "// Line_Reference 93:         #is it expired??",
        "// Line_Reference 96:         if($maxidletime && ((time()-$expire)>$maxidletime)){",
        "// Line_Reference 97:             return FALSE;",
        "// Line_Reference 98:         }",
        "// Line_Reference 100:         if($checkip && strcmp($ip, MD5($this->ip)))",
        "// Line_Reference 101:             return FALSE;",
        "// Line_Reference 103:         $this->validated=TRUE;",
        "// Line_Reference 105:         return TRUE;",
        "// Line_Reference 109:         return FALSE;",
        "// Line_Reference 114: class ClientSession extends EndUser {",
        "// Line_Reference 118: ",
        "// Line_Reference 119:     function __construct($user) {",
        "// Line_Reference 120:         parent::__construct($user);",
        "// Line_Reference 121:         $this->token = &$_SESSION[':token']['client'];",
        "// Line_Reference 122:         // XXX: Change the key to user-id",
        "// Line_Reference 123:         $this->session= new UserSession($user->getId());",
        "// Line_Reference 124:     }",
        "// Line_Reference 125: ",
        "// Line_Reference 126:     function getSessionUser() {",
        "// Line_Reference 127:         return $this->user;",
        "// Line_Reference 128:     }",
        "// Line_Reference 129: ",
        "// Line_Reference 130:     function isValid(){",
        "// Line_Reference 131:         global $_SESSION,$cfg;",
        "// Line_Reference 132: ",
        "// Line_Reference 133:         if(!$this->getId() || $this->session->getSessionId()!=session_id())",
        "// Line_Reference 134:             return false;",
        "// Line_Reference 135: ",
        "// Line_Reference 136:         return $this->session->isvalidSession($this->token,$cfg->getClientTimeout(),false)?true:false;",
        "// Line_Reference 137:     }",
        "// Line_Reference 138: ",
        "// Line_Reference 139:     function refreshSession($force=false){",
        "// Line_Reference 140:         global $cfg;",
        "// Line_Reference 141: ",
        "// Line_Reference 148:         //TODO: separate expire time from hash??",
        "// Line_Reference 150:         osTicketSession::renewCookie($time, $cfg->getClientSessionTimeout());",
        "// Line_Reference 161:     function getIP(){",
        "// Line_Reference 167: class StaffSession extends Staff {",
        "// Line_Reference 169:     var $session;",
        "// Line_Reference 170:     var $token;",
        "// Line_Reference 173:         if ($staff = parent::lookup($var)) {",
        "// Line_Reference 174:             $staff->token = &$_SESSION[':token']['staff'];",
        "// Line_Reference 175:             $staff->session= new UserSession($staff->getId());",
        "// Line_Reference 187:         if (!isset($_SESSION['_auth']['staff']['2fa']))",
        "// Line_Reference 188:             return false;",
        "// Line_Reference 189: ",
        "// Line_Reference 190:         return true;",
        "// Line_Reference 191:     }",
        "// Line_Reference 192: ",
        "// Line_Reference 193:     function isValid(){",
        "// Line_Reference 194:         global $cfg;",
        "// Line_Reference 195: ",
        "// Line_Reference 196:         if(!$this->getId() || $this->session->getSessionId()!=session_id())",
        "// Line_Reference 197:             return false;",
        "// Line_Reference 198: ",
        "// Line_Reference 199:         if ($this->is2FAPending())",
        "// Line_Reference 200:             return false;",
        "// Line_Reference 201: ",
        "// Line_Reference 202:         return $this->session->isvalidSession($this->token,$cfg->getStaffTimeout(),$cfg->enableStaffIPBinding())?true:false;",
        "// Line_Reference 203:     }",
        "// Line_Reference 204: ",
        "// Line_Reference 205:     function refreshSession($force=false){",
        "// Line_Reference 206:         global $cfg;",
        "// Line_Reference 207: ",
        "// Line_Reference 208:         $time = $this->session->getLastUpdate($this->token);",
        "// Line_Reference 209:         // Deadband session token updates to once / 30-seconds",
        "// Line_Reference 210:         if (!$force && time() - $time < 30)",
        "// Line_Reference 211:             return;",
        "// Line_Reference 212: ",
        "// Line_Reference 213:         $this->token=$this->getSessionToken();",
        "// Line_Reference 214: ",
        "// Line_Reference 215:         osTicketSession::renewCookie($time, $cfg->getStaffSessionTimeout());",
        "// Line_Reference 216:     }",
        "// Line_Reference 217: ",
        "// Line_Reference 218:     function getSession() {",
        "// Line_Reference 219:         return $this->session;",
        "// Line_Reference 220:     }",
        "// Line_Reference 221: ",
        "// Line_Reference 222:     function getSessionToken() {",
        "// Line_Reference 223:         return $this->session->sessionToken();",
        "// Line_Reference 226:     function getIP(){",
        "// Line_Reference 227:         return $this->session->getIP();",
        "// Line_Reference 229: ",
        "// Line_Reference 231: "
    ]
}
