{
    "cve_id": "CVE-2022-29255",
    "cve_description": "Vyper is a Pythonic Smart Contract Language for the ethereum virtual machine. In versions prior to 0.3.4 when a calling an external contract with no return value, the contract address (including side effects) could be evaluated twice. This may result in incorrect outcomes for contracts. This issue has been addressed in v0.3.4.",
    "cve_publish_date": "2022-06-09",
    "cwe_id": "CWE-670",
    "cwe_name": "Always-Incorrect Control Flow Implementation",
    "cwe_description": "The code contains a control flow path that does not reflect the algorithm that the path is intended to implement, leading to incorrect behavior any time this path is navigated.",
    "commit_message": "Merge pull request from GHSA-4v9q-cgpw-cf38\n\nin external call codegen, when `extcodesize` is called on the target\naddress, the IR for evaluating the target address can be evaluated\ntwice. this can result in any side effects (embedded in the evaluation\nof the target address) being executed twice.",
    "type_of_change": "Modification",
    "filename_of_changes": "external_call.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "15",
    "number_of_lines_deleted_vulnerable_to_cve": "9",
    "vulnerable_lines": [
        "// Line_Reference 171: def ir_for_external_call(call_expr, context):",
        "// Line_Reference 172:     from vyper.codegen.expr import Expr  # TODO rethink this circular import",
        "// Line_Reference 173: ",
        "// Line_Reference 174:     contract_address = Expr.parse_value_expr(call_expr.func.value, context)",
        "// Line_Reference 175:     call_kwargs = _parse_kwargs(call_expr, context)",
        "// Line_Reference 176:     args_ir = [Expr(x, context).ir_node for x in call_expr.args]",
        "// Line_Reference 177: ",
        "// Line_Reference 178:     assert isinstance(contract_address.typ, InterfaceType)",
        "// Line_Reference 179: "
    ]
}
