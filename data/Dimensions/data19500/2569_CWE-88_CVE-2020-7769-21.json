{
    "cve_id": "CVE-2020-7769",
    "cve_description": "This affects the package nodemailer before 6.4.16. Use of crafted recipient email addresses may result in arbitrary command flag injection in sendmail transport for sending mails.",
    "cve_publish_date": "2020-11-12",
    "cwe_id": "CWE-88",
    "cwe_name": "Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')",
    "cwe_description": "The product constructs a string for a command to be executed by a separate component\nin another control sphere, but it does not properly delimit the\nintended arguments, options, or switches within that command string.",
    "commit_message": "v6.4.16",
    "type_of_change": "Modification",
    "filename_of_changes": "smtp-pool-test.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "71",
    "number_of_lines_deleted_vulnerable_to_cve": "71",
    "vulnerable_lines": [
        "// Line_Reference 44: describe('SMTP Pool Tests', function() {",
        "// Line_Reference 49:     beforeEach(function(done) {",
        "// Line_Reference 55:                 stream.on('data', function() {});",
        "// Line_Reference 98:     afterEach(function(done) {",
        "// Line_Reference 102:     it('Should expose version number', function() {",
        "// Line_Reference 108:     it('Should detect wellknown data', function() {",
        "// Line_Reference 117:     it('should send mail', function(done) {",
        "// Line_Reference 130:         server.onData = function(stream, session, callback) {",
        "// Line_Reference 132:             stream.on('data', function(chunk) {",
        "// Line_Reference 135:             stream.on('end', function() {",
        "// Line_Reference 153:             function(err) {",
        "// Line_Reference 161:     it('should send multiple mails', function(done) {",
        "// Line_Reference 165:         server.onData = function(stream, session, callback) {",
        "// Line_Reference 167:             stream.on('data', function(chunk) {",
        "// Line_Reference 170:             stream.on('end', function() {",
        "// Line_Reference 189:                 function(err) {",
        "// Line_Reference 198:         let cb = function() {",
        "// Line_Reference 203:                 pool._connections.forEach(function(conn) {",
        "// Line_Reference 219:     it('should tolerate connection errors', function(done) {",
        "// Line_Reference 230:         server.onData = function(stream, session, callback) {",
        "// Line_Reference 232:             stream.on('data', function(chunk) {",
        "// Line_Reference 235:             stream.on('end', function() {",
        "// Line_Reference 257:                 function(err) {",
        "// Line_Reference 271:         let cb = function() {",
        "// Line_Reference 282:     it('should tolerate idle connections and re-assign messages to other connections', function(done) {",
        "// Line_Reference 297:         server.onData = function(stream, session, callback) {",
        "// Line_Reference 300:             stream.on('data', function() {",
        "// Line_Reference 306:                     server.connections.forEach(function(connection) {",
        "// Line_Reference 312:             stream.on('end', function() {",
        "// Line_Reference 332:                 function(err) {",
        "// Line_Reference 345:         let cb = function() {",
        "// Line_Reference 365:     it('should call back with connection errors to senders having messages in flight', function(done) {",
        "// Line_Reference 389:             function(err) {",
        "// Line_Reference 405:             function(err) {",
        "// Line_Reference 413:     it('should not send more then allowed for one connection', function(done) {",
        "// Line_Reference 417:         server.onData = function(stream, session, callback) {",
        "// Line_Reference 419:             stream.on('data', function(chunk) {",
        "// Line_Reference 422:             stream.on('end', function() {",
        "// Line_Reference 441:                 function(err) {",
        "// Line_Reference 450:         let cb = function() {",
        "// Line_Reference 463:     it('should send multiple mails with rate limit', function(done) {",
        "// Line_Reference 477:         server.onData = function(stream, session, callback) {",
        "// Line_Reference 479:             stream.on('data', function(chunk) {",
        "// Line_Reference 482:             stream.on('end', function() {",
        "// Line_Reference 501:                 function(err) {",
        "// Line_Reference 510:         let cb = function() {",
        "// Line_Reference 521:         let send = function() {",
        "// Line_Reference 532:     it('should return pending messages once closed', function(done) {",
        "// Line_Reference 536:         server.onData = function(stream, session, callback) {",
        "// Line_Reference 538:             stream.on('data', function(chunk) {",
        "// Line_Reference 541:             stream.on('end', function() {",
        "// Line_Reference 560:                 function(err) {",
        "// Line_Reference 569:         let cb = function() {",
        "// Line_Reference 580:     it('should emit idle for free slots in the pool', function(done) {",
        "// Line_Reference 584:         server.onData = function(stream, session, callback) {",
        "// Line_Reference 586:             stream.on('data', function(chunk) {",
        "// Line_Reference 589:             stream.on('end', function() {",
        "// Line_Reference 614:         let cb = function() {",
        "// Line_Reference 622:         pool.on('idle', function() {",
        "// Line_Reference 623:             setTimeout(function() {",
        "// Line_Reference 630:                     setImmediate(function() {",
        "// Line_Reference 642:     it('Should login and send mail using proxied socket', function(done) {",
        "// Line_Reference 648:                 let errHandler = function(err) {",
        "// Line_Reference 652:                 socket.on('connect', function() {",
        "// Line_Reference 663:         server.on('data', function(connection, chunk) {",
        "// Line_Reference 667:         server.on('dataReady', function(connection, callback) {",
        "// Line_Reference 684:             function(err) {",
        "// Line_Reference 692:     it('Should verify connection with success', function(done) {",
        "// Line_Reference 698:         client.verify(function(err, success) {",
        "// Line_Reference 706:     it('Should not verify connection', function(done) {",
        "// Line_Reference 712:         client.verify(function(err) {"
    ]
}
