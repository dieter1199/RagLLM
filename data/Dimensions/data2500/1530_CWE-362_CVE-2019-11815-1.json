{
    "cve_id": "CVE-2019-11815",
    "cve_description": "An issue was discovered in rds_tcp_kill_sock in net/rds/tcp.c in the Linux kernel before 5.0.8. There is a race condition leading to a use-after-free, related to net namespace cleanup.",
    "cve_publish_date": "2019-05-08",
    "cwe_id": "CWE-362",
    "cwe_name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
    "cwe_description": "The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.",
    "commit_message": "net: rds: force to destroy connection if t_sock is NULL in rds_tcp_kill_sock().\n\nWhen it is to cleanup net namespace, rds_tcp_exit_net() will call\nrds_tcp_kill_sock(), if t_sock is NULL, it will not call\nrds_conn_destroy(), rds_conn_path_destroy() and rds_tcp_conn_free() to free\nconnection, and the worker cp_conn_w is not stopped, afterwards the net is freed in\nnet_drop_ns(); While cp_conn_w rds_connect_worker() will call rds_tcp_conn_path_connect()\nand reference 'net' which has already been freed.\n\nIn rds_tcp_conn_path_connect(), rds_tcp_set_callbacks() will set t_sock = sock before\nsock->ops->connect, but if connect() is failed, it will call\nrds_tcp_restore_callbacks() and set t_sock = NULL, if connect is always\nfailed, rds_connect_worker() will try to reconnect all the time, so\nrds_tcp_kill_sock() will never to cancel worker cp_conn_w and free the\nconnections.\n\nTherefore, the condition !tc->t_sock is not needed if it is going to do\ncleanup_net->rds_tcp_exit_net->rds_tcp_kill_sock, because tc->t_sock is always\nNULL, and there is on other path to cancel cp_conn_w and free\nconnection. So this patch is to fix this.\n\nrds_tcp_kill_sock():\n...\nif (net != c_net || !tc->t_sock)\n...\nAcked-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>\n\n==================================================================\nBUG: KASAN: use-after-free in inet_create+0xbcc/0xd28\nnet/ipv4/af_inet.c:340\nRead of size 4 at addr ffff8003496a4684 by task kworker/u8:4/3721\n\nCPU: 3 PID: 3721 Comm: kworker/u8:4 Not tainted 5.1.0 #11\nHardware name: linux,dummy-virt (DT)\nWorkqueue: krdsd rds_connect_worker\nCall trace:\n dump_backtrace+0x0/0x3c0 arch/arm64/kernel/time.c:53\n show_stack+0x28/0x38 arch/arm64/kernel/traps.c:152\n __dump_stack lib/dump_stack.c:77 [inline]\n dump_stack+0x120/0x188 lib/dump_stack.c:113\n print_address_description+0x68/0x278 mm/kasan/report.c:253\n kasan_report_error mm/kasan/report.c:351 [inline]\n kasan_report+0x21c/0x348 mm/kasan/report.c:409\n __asan_report_load4_noabort+0x30/0x40 mm/kasan/report.c:429\n inet_create+0xbcc/0xd28 net/ipv4/af_inet.c:340\n __sock_create+0x4f8/0x770 net/socket.c:1276\n sock_create_kern+0x50/0x68 net/socket.c:1322\n rds_tcp_conn_path_connect+0x2b4/0x690 net/rds/tcp_connect.c:114\n rds_connect_worker+0x108/0x1d0 net/rds/threads.c:175\n process_one_work+0x6e8/0x1700 kernel/workqueue.c:2153\n worker_thread+0x3b0/0xdd0 kernel/workqueue.c:2296\n kthread+0x2f0/0x378 kernel/kthread.c:255\n ret_from_fork+0x10/0x18 arch/arm64/kernel/entry.S:1117\n\nAllocated by task 687:\n save_stack mm/kasan/kasan.c:448 [inline]\n set_track mm/kasan/kasan.c:460 [inline]\n kasan_kmalloc+0xd4/0x180 mm/kasan/kasan.c:553\n kasan_slab_alloc+0x14/0x20 mm/kasan/kasan.c:490\n slab_post_alloc_hook mm/slab.h:444 [inline]\n slab_alloc_node mm/slub.c:2705 [inline]\n slab_alloc mm/slub.c:2713 [inline]\n kmem_cache_alloc+0x14c/0x388 mm/slub.c:2718\n kmem_cache_zalloc include/linux/slab.h:697 [inline]\n net_alloc net/core/net_namespace.c:384 [inline]\n copy_net_ns+0xc4/0x2d0 net/core/net_namespace.c:424\n create_new_namespaces+0x300/0x658 kernel/nsproxy.c:107\n unshare_nsproxy_namespaces+0xa0/0x198 kernel/nsproxy.c:206\n ksys_unshare+0x340/0x628 kernel/fork.c:2577\n __do_sys_unshare kernel/fork.c:2645 [inline]\n __se_sys_unshare kernel/fork.c:2643 [inline]\n __arm64_sys_unshare+0x38/0x58 kernel/fork.c:2643\n __invoke_syscall arch/arm64/kernel/syscall.c:35 [inline]\n invoke_syscall arch/arm64/kernel/syscall.c:47 [inline]\n el0_svc_common+0x168/0x390 arch/arm64/kernel/syscall.c:83\n el0_svc_handler+0x60/0xd0 arch/arm64/kernel/syscall.c:129\n el0_svc+0x8/0xc arch/arm64/kernel/entry.S:960\n\nFreed by task 264:\n save_stack mm/kasan/kasan.c:448 [inline]\n set_track mm/kasan/kasan.c:460 [inline]\n __kasan_slab_free+0x114/0x220 mm/kasan/kasan.c:521\n kasan_slab_free+0x10/0x18 mm/kasan/kasan.c:528\n slab_free_hook mm/slub.c:1370 [inline]\n slab_free_freelist_hook mm/slub.c:1397 [inline]\n slab_free mm/slub.c:2952 [inline]\n kmem_cache_free+0xb8/0x3a8 mm/slub.c:2968\n net_free net/core/net_namespace.c:400 [inline]\n net_drop_ns.part.6+0x78/0x90 net/core/net_namespace.c:407\n net_drop_ns net/core/net_namespace.c:406 [inline]\n cleanup_net+0x53c/0x6d8 net/core/net_namespace.c:569\n process_one_work+0x6e8/0x1700 kernel/workqueue.c:2153\n worker_thread+0x3b0/0xdd0 kernel/workqueue.c:2296\n kthread+0x2f0/0x378 kernel/kthread.c:255\n ret_from_fork+0x10/0x18 arch/arm64/kernel/entry.S:1117\n\nThe buggy address belongs to the object at ffff8003496a3f80\n which belongs to the cache net_namespace of size 7872\nThe buggy address is located 1796 bytes inside of\n 7872-byte region [ffff8003496a3f80, ffff8003496a5e40)\nThe buggy address belongs to the page:\npage:ffff7e000d25a800 count:1 mapcount:0 mapping:ffff80036ce4b000\nindex:0x0 compound_mapcount: 0\nflags: 0xffffe0000008100(slab|head)\nraw: 0ffffe0000008100 dead000000000100 dead000000000200 ffff80036ce4b000\nraw: 0000000000000000 0000000080040004 00000001ffffffff 0000000000000000\npage dumped because: kasan: bad access detected\n\nMemory state around the buggy address:\n ffff8003496a4580: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb\n ffff8003496a4600: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb\n>ffff8003496a4680: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb\n                   ^\n ffff8003496a4700: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb\n ffff8003496a4780: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb\n==================================================================\n\nFixes: 467fa15356ac(\"RDS-TCP: Support multiple RDS-TCP listen endpoints, one per netns.\")\nReported-by: Hulk Robot <hulkci@huawei.com>\nSigned-off-by: Mao Wenan <maowenan@huawei.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "type_of_change": "Modification",
    "filename_of_changes": "tcp.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "1",
    "number_of_lines_deleted_vulnerable_to_cve": "1",
    "vulnerable_lines": [
        "// Line_Reference 611: \t\tif (net != c_net || !tc->t_sock)"
    ]
}
