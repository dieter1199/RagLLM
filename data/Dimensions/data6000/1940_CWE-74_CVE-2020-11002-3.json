{
    "cve_id": "CVE-2020-11002",
    "cve_description": "dropwizard-validation before versions 2.0.3 and 1.3.21 has a remote code execution vulnerability. A server-side template injection was identified in the self-validating feature enabling attackers to inject arbitrary Java EL expressions, leading to Remote Code Execution (RCE) vulnerability. If you are using a self-validating bean an upgrade to Dropwizard 1.3.21/2.0.3 or later is strongly recommended. The changes introduced in Dropwizard 1.3.19 and 2.0.2 for CVE-2020-5245 unfortunately did not fix the underlying issue completely. The issue has been fixed in dropwizard-validation 1.3.21 and 2.0.3 or later. We strongly recommend upgrading to one of these versions.",
    "cve_publish_date": "2020-04-10",
    "cwe_id": "CWE-74",
    "cwe_name": "Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')",
    "cwe_description": "The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.",
    "commit_message": "Disable message interpolation in ConstraintViolations by default (#3208)\n\nDisable message interpolation in ConstraintViolations by default but allow enabling it explicitly with `SelfValidating#escapeExpressions()`.\r\n\r\nAdditionally, `ConstraintViolations` now provides a set of methods which take a map of message parameters for interpolation.\r\nThe message parameters will be escaped by default.\r\n\r\nRefs #3153\r\nRefs #3157",
    "type_of_change": "ModificationType.ADD",
    "filename_of_changes": "ViolationCollector.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "95",
    "number_of_lines_deleted_vulnerable_to_cve": "29",
    "vulnerable_lines": [
        "// Line_Reference 5: import java.util.regex.Matcher;",
        "// Line_Reference 6: import java.util.regex.Pattern;",
        "// Line_Reference 13:     private static final Pattern ESCAPE_PATTERN = Pattern.compile(\"\\\\$\\\\{\");",
        "// Line_Reference 16:     private ConstraintValidatorContext context;",
        "// Line_Reference 19:     public ViolationCollector(ConstraintValidatorContext context) {",
        "// Line_Reference 20:         this.context = context;",
        "// Line_Reference 26:      * @param message the message of the violation (any EL expression will be escaped and not parsed)",
        "// Line_Reference 30:         String messageTemplate = escapeEl(message);",
        "// Line_Reference 31:         context.buildConstraintViolationWithTemplate(messageTemplate)",
        "// Line_Reference 39:      * @param message      the message of the violation (any EL expression will be escaped and not parsed)",
        "// Line_Reference 44:         String messageTemplate = escapeEl(message);",
        "// Line_Reference 45:         context.buildConstraintViolationWithTemplate(messageTemplate)",
        "// Line_Reference 60:         String messageTemplate = escapeEl(message);",
        "// Line_Reference 61:         context.buildConstraintViolationWithTemplate(messageTemplate)",
        "// Line_Reference 72:      * @param message      the message of the violation (any EL expression will be escaped and not parsed)",
        "// Line_Reference 77:         String messageTemplate = escapeEl(message);",
        "// Line_Reference 84:     @Nullable",
        "// Line_Reference 85:     private String escapeEl(@Nullable String s) {",
        "// Line_Reference 86:         if (s == null || s.isEmpty()) {",
        "// Line_Reference 87:             return s;",
        "// Line_Reference 88:         }",
        "// Line_Reference 89: ",
        "// Line_Reference 90:         final Matcher m = ESCAPE_PATTERN.matcher(s);",
        "// Line_Reference 91:         final StringBuffer sb = new StringBuffer(s.length() + 16);",
        "// Line_Reference 92:         while (m.find()) {",
        "// Line_Reference 93:             m.appendReplacement(sb, \"\\\\\\\\\\\\${\");",
        "// Line_Reference 95:         m.appendTail(sb);",
        "// Line_Reference 97:         return sb.toString();",
        "// Line_Reference 107:         return context;"
    ]
}
