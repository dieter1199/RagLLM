'like' => '%1$s like ?',
'notlike' => '%1$s not like ?',
'eq' => '%1$s = ?',
'neq' => '%1$s != ?',
'bw' => '%1$s like ?',
'ew' => '%1$s like ?',
'lt' => '%1$s < ?',
'gt' => '%1$s > ?',
'in' => '%1$s in (%2$s)'
//'between' => __('filter_op_between'),
//'istrue' => __('filter_op_istrue'),
//'isfalse' => __('filter_op_isfalse')
);
/**
* Container for characters that have to be escaped for usage with SQL.
*
* @var array
*/
public $pat = array('%', '_');
/**
* Container for escaped charaters.
*
* @var array
*/
public $rep = array('\%', '\_');
/**
* Prepares a value according to its tag and returns it.
*
* @param string the value to convert
* @return mixed
*/
public function convertToText($value)
{
return $value;
}
/**
* Prepares a value according to its tag and returns it.
*
* @param string the value to convert
* @return mixed
*/
public function convertToNumber($value)
{
return (float)str_replace(',', '.', $value);
//return $value;
}
/**
* Prepares a value according to its tag and returns it.
*
* @param string the value to convert
* @return mixed
*/
public function convertToEmail($value)
{
return $value;
}
/**
* Prepares a value according to its tag and returns it.
*
* @param string the value to convert
* @return mixed
*/
public function convertToTextarea($value)
{
return $value;
}
/**
* Prepares a value according to its tag and returns it.
*
* @param string the value to convert
* @return mixed
*/
public function convertToIn($value)
{
return $value;
}
/**
* Prepares a value according to its tag and returns it.
*
* @param string the value to convert
* @return mixed
*/
public function convertToBool($value)
{
return $value;
}
/**
* Prepares a value according to its tag and returns it.
*
* @param string the value to convert
* @return mixed
*/
public function convertToSelect($value)
{
return $value;
}
/**
* Returns a mysql datetime string.
*
* @param string the value to convert
* @return string
*/
public function convertToDatetime($value)
{
return date('Y-m-d H:i:s', strtotime($value));
}
/**
* Returns a mysql date string.
*
* @param string the value to convert
* @return string
*/
public function convertToDate($value)
{
return date('Y-m-d', strtotime($value));
}
if ( ! isset($this->map[$this->bean->op])) throw new Exception('Filter operator has no template');
switch ($this->bean->op) {
case 'like':
$value = '%'.str_replace($this->pat, $this->rep, $this->bean->value).'%';
break;
case 'notlike':
$value = '%'.str_replace($this->pat, $this->rep, $this->bean->value).'%';
break;
case 'bw':
$value = str_replace($this->pat, $this->rep, $this->bean->value).'%';
break;
case 'ew':
$value = '%'.str_replace($this->pat, $this->rep, $this->bean->value);
break;
case 'in':
$_sharedSubName = 'shared'.ucfirst(strtolower($this->bean->substitute));
$ids = array_keys($this->bean->{$_sharedSubName});
$value = implode(', ', $ids);
$add_to_filter_values = false;
break;
default:
$value = $this->bean->value;
}
if ($add_to_filter_values) {
$converter = 'convertTo' . ucfirst(strtolower($this->bean->tag));
$filter->filter_values[] = $this->$converter($value);
}
return $value;
if (isset($this->operators[$this->bean->tag])) return $this->operators[$this->bean->tag];
