{
    "cve_id": "CVE-2018-16976",
    "cve_description": "Gitolite before 3.6.9 does not (in certain configurations involving @all or a regex) properly restrict access to a Git repository that is in the process of being migrated until the full set of migration steps has been completed. This can allow valid users to obtain unintended access.",
    "cve_publish_date": "2018-09-12",
    "cwe_id": "CWE-362",
    "cwe_name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
    "cwe_description": "The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.",
    "commit_message": "prevent access to repos which are in the process of bring migrated\n\nBj√∂rn Kautler pointed out that, when a repo is being migrated into\ngitolite as per the documentation [1], there is a gap between the actual\nmove of the repo and the rest of the process where a user can gain read\nor write access to the repo, which he would *not* have had after the\ncompletion of the process.\n\nMy first thought was to document this, and advise people to use the\n'writable' command to disable writes, but there is nothing as simple and\npainless to prevent reads.  (On the plus side, this kind of racy read\naccess can only happen if the conf is using the \"deny-rules\" option to\nrestrict reads; without that, it makes no difference -- i.e., he gets no\naccess that he would not have got later anyway).\n\nBut eventually I realised that documentation was frustrating, for\nvarious reasons, and that at least in this case there is a way to fix it\nin the code -- just block all access to a repo that is in\n~/repositories, but which does not yet have the update hook setup\ncorrectly.  Plus, the code does not impact anything else, and is\nbasically just an extra check.\n\n[1]: http://gitolite.com/gitolite/basic-admin/index.html#appendix-1-bringing-existing-repos-into-gitolite",
    "type_of_change": "Modification",
    "filename_of_changes": "Common.pm",
    "code_language": "Perl",
    "number_of_lines_added_for_mitigation": "18",
    "number_of_lines_deleted_vulnerable_to_cve": "2",
    "vulnerable_lines": [
        "// Line_Reference 238:             push @phy_repos, $repo unless $repo =~ m(/$);",
        "// Line_Reference 239:                 # tolerate bare repos within ~/repositories but silently ignore them"
    ]
}
