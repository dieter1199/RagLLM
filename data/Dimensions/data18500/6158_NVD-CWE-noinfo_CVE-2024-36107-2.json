{
    "cve_id": "CVE-2024-36107",
    "cve_description": "MinIO is a High Performance Object Storage released under GNU Affero General Public License v3.0. `If-Modified-Since` and `If-Unmodified-Since` headers when used with anonymous requests by sending a random object name requests can be used to determine if an object exists or not on the server on a specific bucket and also gain access to some amount of\ninformation such as  `Last-Modified (of the latest version)`, `Etag (of the latest version)`, `x-amz-version-id (of the latest version)`, `Expires (metadata value of the latest version)`, `Cache-Control (metadata value of the latest version)`. This conditional check was being honored before validating if the anonymous access is indeed allowed on the metadata of an object. This issue has been addressed in commit `e0fe7cc3917`. Users must upgrade to RELEASE.2024-05-27T19-17-46Z for the fix. There are no known workarounds for this issue.",
    "cve_publish_date": "2024-05-28",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fix: information disclosure bug in preconditions GET (#19810)\n\nprecondition check was being honored before, validating\r\nif anonymous access is allowed on the metadata of an\r\nobject, leading to metadata disclosure of the following\r\nheaders.\r\n\r\n```\r\nLast-Modified\r\nEtag\r\nx-amz-version-id\r\nExpires:\r\nCache-Control:\r\n```\r\n\r\nalthough the information presented is minimal in nature,\r\nand of opaque nature. It still simply discloses that an\r\nobject by a specific name exists or not without even having\r\nenough permissions.",
    "type_of_change": "Modification",
    "filename_of_changes": "object-handlers.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "9",
    "number_of_lines_deleted_vulnerable_to_cve": "9",
    "vulnerable_lines": [
        "// Line_Reference 550: \tif objInfo.UserTags != \"\" {",
        "// Line_Reference 551: \t\tr.Header.Set(xhttp.AmzObjectTagging, objInfo.UserTags)",
        "// Line_Reference 552: \t}",
        "// Line_Reference 553: ",
        "// Line_Reference 554: \tif s3Error := authorizeRequest(ctx, r, policy.GetObjectAction); s3Error != ErrNone {",
        "// Line_Reference 555: \t\twriteErrorResponse(ctx, w, errorCodes.ToAPIErr(s3Error), r.URL)",
        "// Line_Reference 556: \t\treturn",
        "// Line_Reference 557: \t}",
        "// Line_Reference 558: "
    ]
}
