{
    "cve_id": "CVE-2024-27933",
    "cve_description": "Deno is a JavaScript, TypeScript, and WebAssembly runtime. In version 1.39.0, use of raw file descriptors in `op_node_ipc_pipe()` leads to premature close of arbitrary file descriptors, allowing standard input to be re-opened as a different resource resulting in permission prompt bypass. Node child_process IPC relies on the JS side to pass the raw IPC file descriptor to `op_node_ipc_pipe()`, which returns a `IpcJsonStreamResource` ID associated with the file descriptor. On closing the resource, the raw file descriptor is closed together.\n\nUse of raw file descriptors in `op_node_ipc_pipe()` leads to premature close of arbitrary file descriptors. This allow standard input (fd 0) to be closed and re-opened for a different resource, which allows a silent permission prompt bypass. This is exploitable by an attacker controlling the code executed inside a Deno runtime to obtain arbitrary code execution on the host machine regardless of permissions.\n\nThis bug is known to be exploitable. There is a working exploit that achieves arbitrary code execution by bypassing prompts from zero permissions, additionally abusing the fact that Cache API lacks filesystem permission checks. The attack can be conducted silently as stderr can also be closed, suppressing all prompt outputs.\n\nVersion 1.39.1 fixes the bug.\n",
    "cve_publish_date": "2024-03-21",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fix: implement child_process IPC (#21490)\n\nThis PR implements the Node child_process IPC functionality in Deno on\r\nUnix systems.\r\n\r\nFor `fd > 2` a duplex unix pipe is set up between the parent and child\r\nprocesses. Currently implements data passing via the channel in the JSON\r\nserialization format.",
    "type_of_change": "Modification",
    "filename_of_changes": "process.rs",
    "code_language": "Rust",
    "number_of_lines_added_for_mitigation": "102",
    "number_of_lines_deleted_vulnerable_to_cve": "14",
    "vulnerable_lines": [
        "// Line_Reference 212: ) -> Result<std::process::Command, AnyError> {",
        "// Line_Reference 248:   #[cfg(unix)]",
        "// Line_Reference 249:   // TODO(bartlomieju):",
        "// Line_Reference 250:   #[allow(clippy::undocumented_unsafe_blocks)]",
        "// Line_Reference 251:   unsafe {",
        "// Line_Reference 252:     command.pre_exec(|| {",
        "// Line_Reference 253:       libc::setgroups(0, std::ptr::null());",
        "// Line_Reference 254:       Ok(())",
        "// Line_Reference 255:     });",
        "// Line_Reference 256:   }",
        "// Line_Reference 268:   Ok(command)",
        "// Line_Reference 375:   let command = create_command(state, args, &api_name)?;",
        "// Line_Reference 376:   spawn_child(state, command)",
        "// Line_Reference 405:   let mut command = create_command(state, args, \"Deno.Command().outputSync()\")?;"
    ]
}
