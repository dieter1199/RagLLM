{
    "cve_id": "CVE-2018-15594",
    "cve_description": "arch/x86/kernel/paravirt.c in the Linux kernel before 4.18.1 mishandles certain indirect calls, which makes it easier for attackers to conduct Spectre-v2 attacks against paravirtual guests.",
    "cve_publish_date": "2018-08-20",
    "cwe_id": "CWE-200",
    "cwe_name": "Exposure of Sensitive Information to an Unauthorized Actor",
    "cwe_description": "The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.",
    "commit_message": "x86/paravirt: Fix spectre-v2 mitigations for paravirt guests\n\nNadav reported that on guests we're failing to rewrite the indirect\ncalls to CALLEE_SAVE paravirt functions. In particular the\npv_queued_spin_unlock() call is left unpatched and that is all over the\nplace. This obviously wrecks Spectre-v2 mitigation (for paravirt\nguests) which relies on not actually having indirect calls around.\n\nThe reason is an incorrect clobber test in paravirt_patch_call(); this\nfunction rewrites an indirect call with a direct call to the _SAME_\nfunction, there is no possible way the clobbers can be different\nbecause of this.\n\nTherefore remove this clobber check. Also put WARNs on the other patch\nfailure case (not enough room for the instruction) which I've not seen\ntrigger in my (limited) testing.\n\nThree live kernel image disassemblies for lock_sock_nested (as a small\nfunction that illustrates the problem nicely). PRE is the current\nsituation for guests, POST is with this patch applied and NATIVE is with\nor without the patch for !guests.\n\nPRE:\n\n(gdb) disassemble lock_sock_nested\nDump of assembler code for function lock_sock_nested:\n   0xffffffff817be970 <+0>:     push   %rbp\n   0xffffffff817be971 <+1>:     mov    %rdi,%rbp\n   0xffffffff817be974 <+4>:     push   %rbx\n   0xffffffff817be975 <+5>:     lea    0x88(%rbp),%rbx\n   0xffffffff817be97c <+12>:    callq  0xffffffff819f7160 <_cond_resched>\n   0xffffffff817be981 <+17>:    mov    %rbx,%rdi\n   0xffffffff817be984 <+20>:    callq  0xffffffff819fbb00 <_raw_spin_lock_bh>\n   0xffffffff817be989 <+25>:    mov    0x8c(%rbp),%eax\n   0xffffffff817be98f <+31>:    test   %eax,%eax\n   0xffffffff817be991 <+33>:    jne    0xffffffff817be9ba <lock_sock_nested+74>\n   0xffffffff817be993 <+35>:    movl   $0x1,0x8c(%rbp)\n   0xffffffff817be99d <+45>:    mov    %rbx,%rdi\n   0xffffffff817be9a0 <+48>:    callq  *0xffffffff822299e8\n   0xffffffff817be9a7 <+55>:    pop    %rbx\n   0xffffffff817be9a8 <+56>:    pop    %rbp\n   0xffffffff817be9a9 <+57>:    mov    $0x200,%esi\n   0xffffffff817be9ae <+62>:    mov    $0xffffffff817be993,%rdi\n   0xffffffff817be9b5 <+69>:    jmpq   0xffffffff81063ae0 <__local_bh_enable_ip>\n   0xffffffff817be9ba <+74>:    mov    %rbp,%rdi\n   0xffffffff817be9bd <+77>:    callq  0xffffffff817be8c0 <__lock_sock>\n   0xffffffff817be9c2 <+82>:    jmp    0xffffffff817be993 <lock_sock_nested+35>\nEnd of assembler dump.\n\nPOST:\n\n(gdb) disassemble lock_sock_nested\nDump of assembler code for function lock_sock_nested:\n   0xffffffff817be970 <+0>:     push   %rbp\n   0xffffffff817be971 <+1>:     mov    %rdi,%rbp\n   0xffffffff817be974 <+4>:     push   %rbx\n   0xffffffff817be975 <+5>:     lea    0x88(%rbp),%rbx\n   0xffffffff817be97c <+12>:    callq  0xffffffff819f7160 <_cond_resched>\n   0xffffffff817be981 <+17>:    mov    %rbx,%rdi\n   0xffffffff817be984 <+20>:    callq  0xffffffff819fbb00 <_raw_spin_lock_bh>\n   0xffffffff817be989 <+25>:    mov    0x8c(%rbp),%eax\n   0xffffffff817be98f <+31>:    test   %eax,%eax\n   0xffffffff817be991 <+33>:    jne    0xffffffff817be9ba <lock_sock_nested+74>\n   0xffffffff817be993 <+35>:    movl   $0x1,0x8c(%rbp)\n   0xffffffff817be99d <+45>:    mov    %rbx,%rdi\n   0xffffffff817be9a0 <+48>:    callq  0xffffffff810a0c20 <__raw_callee_save___pv_queued_spin_unlock>\n   0xffffffff817be9a5 <+53>:    xchg   %ax,%ax\n   0xffffffff817be9a7 <+55>:    pop    %rbx\n   0xffffffff817be9a8 <+56>:    pop    %rbp\n   0xffffffff817be9a9 <+57>:    mov    $0x200,%esi\n   0xffffffff817be9ae <+62>:    mov    $0xffffffff817be993,%rdi\n   0xffffffff817be9b5 <+69>:    jmpq   0xffffffff81063aa0 <__local_bh_enable_ip>\n   0xffffffff817be9ba <+74>:    mov    %rbp,%rdi\n   0xffffffff817be9bd <+77>:    callq  0xffffffff817be8c0 <__lock_sock>\n   0xffffffff817be9c2 <+82>:    jmp    0xffffffff817be993 <lock_sock_nested+35>\nEnd of assembler dump.\n\nNATIVE:\n\n(gdb) disassemble lock_sock_nested\nDump of assembler code for function lock_sock_nested:\n   0xffffffff817be970 <+0>:     push   %rbp\n   0xffffffff817be971 <+1>:     mov    %rdi,%rbp\n   0xffffffff817be974 <+4>:     push   %rbx\n   0xffffffff817be975 <+5>:     lea    0x88(%rbp),%rbx\n   0xffffffff817be97c <+12>:    callq  0xffffffff819f7160 <_cond_resched>\n   0xffffffff817be981 <+17>:    mov    %rbx,%rdi\n   0xffffffff817be984 <+20>:    callq  0xffffffff819fbb00 <_raw_spin_lock_bh>\n   0xffffffff817be989 <+25>:    mov    0x8c(%rbp),%eax\n   0xffffffff817be98f <+31>:    test   %eax,%eax\n   0xffffffff817be991 <+33>:    jne    0xffffffff817be9ba <lock_sock_nested+74>\n   0xffffffff817be993 <+35>:    movl   $0x1,0x8c(%rbp)\n   0xffffffff817be99d <+45>:    mov    %rbx,%rdi\n   0xffffffff817be9a0 <+48>:    movb   $0x0,(%rdi)\n   0xffffffff817be9a3 <+51>:    nopl   0x0(%rax)\n   0xffffffff817be9a7 <+55>:    pop    %rbx\n   0xffffffff817be9a8 <+56>:    pop    %rbp\n   0xffffffff817be9a9 <+57>:    mov    $0x200,%esi\n   0xffffffff817be9ae <+62>:    mov    $0xffffffff817be993,%rdi\n   0xffffffff817be9b5 <+69>:    jmpq   0xffffffff81063ae0 <__local_bh_enable_ip>\n   0xffffffff817be9ba <+74>:    mov    %rbp,%rdi\n   0xffffffff817be9bd <+77>:    callq  0xffffffff817be8c0 <__lock_sock>\n   0xffffffff817be9c2 <+82>:    jmp    0xffffffff817be993 <lock_sock_nested+35>\nEnd of assembler dump.\n\n\nFixes: 63f70270ccd9 (\"[PATCH] i386: PARAVIRT: add common patching machinery\")\nFixes: 3010a0663fd9 (\"x86/paravirt, objtool: Annotate indirect calls\")\nReported-by: Nadav Amit <namit@vmware.com>\nSigned-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nReviewed-by: Juergen Gross <jgross@suse.com>\nCc: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>\nCc: Boris Ostrovsky <boris.ostrovsky@oracle.com>\nCc: David Woodhouse <dwmw2@infradead.org>\nCc: stable@vger.kernel.org",
    "type_of_change": "Modification",
    "filename_of_changes": "paravirt.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "10",
    "number_of_lines_deleted_vulnerable_to_cve": "4",
    "vulnerable_lines": [
        "// Line_Reference 91: \tif (tgt_clobbers & ~site_clobbers)",
        "// Line_Reference 92: \t\treturn len;\t/* target would clobber too much for this site */",
        "// Line_Reference 93: \tif (len < 5)",
        "// Line_Reference 109: \tif (len < 5)"
    ]
}
