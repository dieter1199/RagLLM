{
    "cve_id": "CVE-2022-23949",
    "cve_description": "In Keylime before 6.3.0, unsanitized UUIDs can be passed by a rogue agent and can lead to log spoofing on the verifier and registrar.",
    "cve_publish_date": "2022-09-21",
    "cwe_id": "CWE-290",
    "cwe_name": "Authentication Bypass by Spoofing",
    "cwe_description": "This attack-focused weakness is caused by incorrectly implemented authentication schemes that are subject to spoofing attacks.",
    "commit_message": "validators: create validators module\n\nMove from the config module some validators, and create the validators\nmodule.  Add tests for them.\n\nSigned-off-by: Alberto Planas <aplanas@suse.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "config.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "0",
    "number_of_lines_deleted_vulnerable_to_cve": "32",
    "vulnerable_lines": [
        "// Line_Reference 8: import re",
        "// Line_Reference 182: def valid_exclude_list(exclude_list):",
        "// Line_Reference 183:     if not exclude_list:",
        "// Line_Reference 184:         return True, None, None",
        "// Line_Reference 185: ",
        "// Line_Reference 186:     combined_regex = \"(\" + \")|(\".join(exclude_list) + \")\"",
        "// Line_Reference 187:     return valid_regex(combined_regex)",
        "// Line_Reference 188: ",
        "// Line_Reference 189: ",
        "// Line_Reference 190: def valid_regex(regex):",
        "// Line_Reference 191:     if regex is None:",
        "// Line_Reference 192:         return True, None, None",
        "// Line_Reference 193: ",
        "// Line_Reference 194:     try:",
        "// Line_Reference 195:         compiled_regex = re.compile(regex)",
        "// Line_Reference 196:     except re.error as regex_err:",
        "// Line_Reference 197:         err = \"Invalid regex: \" + regex_err.msg + \".\"",
        "// Line_Reference 198:         return False, None, err",
        "// Line_Reference 199: ",
        "// Line_Reference 200:     return True, compiled_regex, None",
        "// Line_Reference 201: ",
        "// Line_Reference 202: ",
        "// Line_Reference 203: def valid_hex(value: str):",
        "// Line_Reference 204:     if not value.isalnum():",
        "// Line_Reference 205:         return False",
        "// Line_Reference 206:     try:",
        "// Line_Reference 207:         int(value, 16)",
        "// Line_Reference 208:         return True",
        "// Line_Reference 209:     except ValueError:",
        "// Line_Reference 210:         return False",
        "// Line_Reference 211: ",
        "// Line_Reference 212: "
    ]
}
