{
    "cve_id": "CVE-2022-24739",
    "cve_description": "alltube is an html front end for youtube-dl. On releases prior to 3.0.3, an attacker could craft a special HTML page to trigger either an open redirect attack or a Server-Side Request Forgery attack (depending on how AllTube is configured). The impact is mitigated by the fact the SSRF attack is only possible when the `stream` option is enabled in the configuration. (This option is disabled by default.) 3.0.3 contains a fix for this vulnerability.",
    "cve_publish_date": "2022-03-08",
    "cwe_id": "CWE-601",
    "cwe_name": "URL Redirection to Untrusted Site ('Open Redirect')",
    "cwe_description": "A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.",
    "commit_message": "Prevent SSRF requests\nBy validating the provided URL before passing it to youtube-dl",
    "type_of_change": "Modification",
    "filename_of_changes": "DownloadController.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "36",
    "number_of_lines_deleted_vulnerable_to_cve": "38",
    "vulnerable_lines": [
        "// Line_Reference 43:         $url = $request->getQueryParam('url');",
        "// Line_Reference 45:         if (isset($url)) {",
        "// Line_Reference 46:             $this->video = $this->downloader->getVideo($url, $this->getFormat($request), $this->getPassword($request));",
        "// Line_Reference 48:             try {",
        "// Line_Reference 49:                 if ($this->config->convert && $request->getQueryParam('audio')) {",
        "// Line_Reference 50:                     // Audio convert.",
        "// Line_Reference 51:                     return $this->getAudioResponse($request, $response);",
        "// Line_Reference 52:                 } elseif ($this->config->convertAdvanced && !is_null($request->getQueryParam('customConvert'))) {",
        "// Line_Reference 53:                     // Advance convert.",
        "// Line_Reference 54:                     return $this->getConvertedResponse($request, $response);",
        "// Line_Reference 55:                 }",
        "// Line_Reference 57:                 // Regular download.",
        "// Line_Reference 58:                 return $this->getDownloadResponse($request, $response);",
        "// Line_Reference 59:             } catch (PasswordException $e) {",
        "// Line_Reference 60:                 $frontController = new FrontController($this->container);",
        "// Line_Reference 62:                 return $frontController->password($request, $response);",
        "// Line_Reference 63:             } catch (WrongPasswordException $e) {",
        "// Line_Reference 64:                 return $this->displayError($request, $response, $this->localeManager->t('Wrong password'));",
        "// Line_Reference 65:             } catch (PlaylistConversionException $e) {",
        "// Line_Reference 69:                     $this->localeManager->t('Conversion of playlists is not supported.')",
        "// Line_Reference 71:             } catch (InvalidProtocolConversionException $e) {",
        "// Line_Reference 72:                 if (in_array($this->video->protocol, ['m3u8', 'm3u8_native'])) {",
        "// Line_Reference 73:                     return $this->displayError(",
        "// Line_Reference 74:                         $request,",
        "// Line_Reference 75:                         $response,",
        "// Line_Reference 76:                         $this->localeManager->t('Conversion of M3U8 files is not supported.')",
        "// Line_Reference 77:                     );",
        "// Line_Reference 78:                 } elseif ($this->video->protocol == 'http_dash_segments') {",
        "// Line_Reference 79:                     return $this->displayError(",
        "// Line_Reference 80:                         $request,",
        "// Line_Reference 81:                         $response,",
        "// Line_Reference 82:                         $this->localeManager->t('Conversion of DASH segments is not supported.')",
        "// Line_Reference 83:                     );",
        "// Line_Reference 84:                 } else {",
        "// Line_Reference 85:                     throw $e;",
        "// Line_Reference 86:                 }",
        "// Line_Reference 88:         } else {",
        "// Line_Reference 89:             return $response->withRedirect($this->router->pathFor('index'));"
    ]
}
