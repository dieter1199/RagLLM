{
    "cve_id": "CVE-2017-16931",
    "cve_description": "parser.c in libxml2 before 2.9.5 mishandles parameter-entity references because the NEXTL macro calls the xmlParserHandlePEReference function in the case of a '%' character in a DTD name.",
    "cve_publish_date": "2017-11-23",
    "cwe_id": "CWE-119",
    "cwe_name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
    "cwe_description": "The product performs operations on a memory buffer, but it reads from or writes to a memory location outside the buffer's intended boundary. This may result in read or write operations on unexpected memory locations that could be linked to other variables, data structures, or internal program data.",
    "commit_message": "Fix handling of parameter-entity references\n\nThere were two bugs where parameter-entity references could lead to an\nunexpected change of the input buffer in xmlParseNameComplex and\nxmlDictLookup being called with an invalid pointer.\n\nPercent sign in DTD Names\n=========================\n\nThe NEXTL macro used to call xmlParserHandlePEReference. When parsing\n\"complex\" names inside the DTD, this could result in entity expansion\nwhich created a new input buffer. The fix is to simply remove the call\nto xmlParserHandlePEReference from the NEXTL macro. This is safe because\nno users of the macro require expansion of parameter entities.\n\n- xmlParseNameComplex\n- xmlParseNCNameComplex\n- xmlParseNmtoken\n\nThe percent sign is not allowed in names, which are grammatical tokens.\n\n- xmlParseEntityValue\n\nParameter-entity references in entity values are expanded but this\nhappens in a separate step in this function.\n\n- xmlParseSystemLiteral\n\nParameter-entity references are ignored in the system literal.\n\n- xmlParseAttValueComplex\n- xmlParseCharDataComplex\n- xmlParseCommentComplex\n- xmlParsePI\n- xmlParseCDSect\n\nParameter-entity references are ignored outside the DTD.\n\n- xmlLoadEntityContent\n\nThis function is only called from xmlStringLenDecodeEntities and\nentities are replaced in a separate step immediately after the function\ncall.\n\nThis bug could also be triggered with an internal subset and double\nentity expansion.\n\nThis fixes bug 766956 initially reported by Wei Lei and independently by\nChromium's ClusterFuzz, Hanno Böck, and Marco Grassi. Thanks to everyone\ninvolved.\n\nxmlParseNameComplex with XML_PARSE_OLD10\n========================================\n\nWhen parsing Names inside an expanded parameter entity with the\nXML_PARSE_OLD10 option, xmlParseNameComplex would call xmlGROW via the\nGROW macro if the input buffer was exhausted. At the end of the\nparameter entity's replacement text, this function would then call\nxmlPopInput which invalidated the input buffer.\n\nThere should be no need to invoke GROW in this situation because the\nbuffer is grown periodically every XML_PARSER_CHUNK_SIZE characters and,\nat least for UTF-8, in xmlCurrentChar. This also matches the code path\nexecuted when XML_PARSE_OLD10 is not set.\n\nThis fixes bugs 781205 (CVE-2017-9049) and 781361 (CVE-2017-9050).\nThanks to Marcel Böhme and Thuan Pham for the report.\n\nAdditional hardening\n====================\n\nA separate check was added in xmlParseNameComplex to validate the\nbuffer size.",
    "type_of_change": "Modification",
    "filename_of_changes": "parser.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "10",
    "number_of_lines_deleted_vulnerable_to_cve": "8",
    "vulnerable_lines": [
        "// Line_Reference 2124:     if (*ctxt->input->cur == '%') xmlParserHandlePEReference(ctxt);\t\\",
        "// Line_Reference 3415: \t    if (c == 0) {",
        "// Line_Reference 3416: \t\tcount = 0;",
        "// Line_Reference 3417: \t\tGROW;",
        "// Line_Reference 3418:                 if (ctxt->instate == XML_PARSER_EOF)",
        "// Line_Reference 3419:                     return(NULL);",
        "// Line_Reference 3420: \t\tc = CUR_CHAR(l);",
        "// Line_Reference 3421: \t    }"
    ]
}
