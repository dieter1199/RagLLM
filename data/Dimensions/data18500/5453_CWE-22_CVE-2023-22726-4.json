{
    "cve_id": "CVE-2023-22726",
    "cve_description": "act is a project which allows for local running of github actions. The artifact server that stores artifacts from Github Action runs does not sanitize path inputs. This allows an attacker to download and overwrite arbitrary files on the host from a Github Action. This issue may lead to privilege escalation. The /upload endpoint is vulnerable to path traversal as filepath is user controlled, and ultimately flows into os.Mkdir and os.Open. The /artifact endpoint is vulnerable to path traversal as the path is variable is user controlled, and the specified file is ultimately returned by the server. This has been addressed in version 0.2.40. Users are advised to upgrade. Users unable to upgrade may, during implementation of Open and OpenAtEnd for FS, ensure to use ValidPath() to check against path traversal or clean the user-provided paths manually.",
    "cve_publish_date": "2023-01-20",
    "cwe_id": "CWE-22",
    "cwe_name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
    "cwe_description": "The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
    "commit_message": "fix: update artifact server to address GHSL-2023-004 (#1565)",
    "type_of_change": "Modification",
    "filename_of_changes": "server_test.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "113",
    "number_of_lines_deleted_vulnerable_to_cve": "36",
    "vulnerable_lines": [
        "// Line_Reference 7: \t\"io/fs\"",
        "// Line_Reference 24: type MapFsImpl struct {",
        "// Line_Reference 25: \tfstest.MapFS",
        "// Line_Reference 28: func (fsys MapFsImpl) MkdirAll(path string, perm fs.FileMode) error {",
        "// Line_Reference 29: \t// mocked no-op",
        "// Line_Reference 30: \treturn nil",
        "// Line_Reference 33: type WritableFile struct {",
        "// Line_Reference 34: \tfs.File",
        "// Line_Reference 35: \tfsys fstest.MapFS",
        "// Line_Reference 36: \tpath string",
        "// Line_Reference 39: func (file WritableFile) Write(data []byte) (int, error) {",
        "// Line_Reference 40: \tfile.fsys[file.path].Data = data",
        "// Line_Reference 41: \treturn len(data), nil",
        "// Line_Reference 44: func (fsys MapFsImpl) Open(path string) (fs.File, error) {",
        "// Line_Reference 45: \tvar file = fstest.MapFile{",
        "// Line_Reference 46: \t\tData: []byte(\"content2\"),",
        "// Line_Reference 48: \tfsys.MapFS[path] = &file",
        "// Line_Reference 50: \tresult, err := fsys.MapFS.Open(path)",
        "// Line_Reference 51: \treturn WritableFile{result, fsys.MapFS, path}, err",
        "// Line_Reference 54: func (fsys MapFsImpl) OpenAtEnd(path string) (fs.File, error) {",
        "// Line_Reference 55: \tvar file = fstest.MapFile{",
        "// Line_Reference 56: \t\tData: []byte(\"content2\"),",
        "// Line_Reference 58: \tfsys.MapFS[path] = &file",
        "// Line_Reference 60: \tresult, err := fsys.MapFS.Open(path)",
        "// Line_Reference 61: \treturn WritableFile{result, fsys.MapFS, path}, err",
        "// Line_Reference 70: \tuploads(router, MapFsImpl{memfs})",
        "// Line_Reference 96: \tuploads(router, MapFsImpl{memfs})",
        "// Line_Reference 114: \tassert.Equal(\"content\", string(memfs[\"1/some/file\"].Data))",
        "// Line_Reference 123: \tuploads(router, MapFsImpl{memfs})",
        "// Line_Reference 147: \t\t\"1/file.txt\": {",
        "// Line_Reference 153: \tdownloads(router, memfs)",
        "// Line_Reference 179: \t\t\"1/some/file\": {",
        "// Line_Reference 185: \tdownloads(router, memfs)",
        "// Line_Reference 203: \tassert.Equal(\"some/file/.\", response.Value[0].Path)",
        "// Line_Reference 212: \t\t\"1/some/file\": {",
        "// Line_Reference 218: \tdownloads(router, memfs)"
    ]
}
