{
    "cve_id": "CVE-2024-23334",
    "cve_description": "aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. When using aiohttp as a web server and configuring static routes, it is necessary to specify the root path for static files. Additionally, the option 'follow_symlinks' can be used to determine whether to follow symbolic links outside the static root directory. When 'follow_symlinks' is set to True, there is no validation to check if reading a file is within the root directory. This can lead to directory traversal vulnerabilities, resulting in unauthorized access to arbitrary files on the system, even when symlinks are not present.  Disabling follow_symlinks and using a reverse proxy are encouraged mitigations.  Version 3.9.2 fixes this issue.",
    "cve_publish_date": "2024-01-29",
    "cwe_id": "CWE-22",
    "cwe_name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
    "cwe_description": "The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
    "commit_message": "Validate static paths (#8079)\n\nCo-authored-by: J. Nick Koston <nick@koston.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "web_urldispatcher.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "14",
    "number_of_lines_deleted_vulnerable_to_cve": "4",
    "vulnerable_lines": [
        "// Line_Reference 577:                 filepath = self._directory.joinpath(filename).resolve()",
        "// Line_Reference 578:                 if not self._follow_symlinks:",
        "// Line_Reference 643:             filepath = self._directory.joinpath(filename).resolve()",
        "// Line_Reference 644:             if not self._follow_symlinks:"
    ]
}
