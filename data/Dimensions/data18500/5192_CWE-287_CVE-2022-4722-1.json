{
    "cve_id": "CVE-2022-4722",
    "cve_description": "Authentication Bypass by Primary Weakness in GitHub repository ikus060/rdiffweb prior to 2.5.5.",
    "cve_publish_date": "2022-12-27",
    "cwe_id": "CWE-287",
    "cwe_name": "Improper Authentication",
    "cwe_description": "When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.",
    "commit_message": "Make username case-insensitive",
    "type_of_change": "Modification",
    "filename_of_changes": "__init__.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "68",
    "number_of_lines_deleted_vulnerable_to_cve": "32",
    "vulnerable_lines": [
        "// Line_Reference 25: from ._user import DuplicateSSHKeyError, UserObject  # noqa",
        "// Line_Reference 36:     def exists(column):",
        "// Line_Reference 37:         table_name = column.table.fullname",
        "// Line_Reference 38:         column_name = column.name",
        "// Line_Reference 39:         if 'SQLite' in connection.engine.dialect.__class__.__name__:",
        "// Line_Reference 40:             sql = \"SELECT COUNT(*) FROM pragma_table_info('%s') WHERE LOWER(name)=LOWER('%s')\" % (",
        "// Line_Reference 41:                 table_name,",
        "// Line_Reference 42:                 column_name,",
        "// Line_Reference 43:             )",
        "// Line_Reference 44:         else:",
        "// Line_Reference 45:             sql = \"SELECT COUNT(*) FROM information_schema.columns WHERE table_name='%s' and column_name='%s'\" % (",
        "// Line_Reference 46:                 table_name,",
        "// Line_Reference 47:                 column_name,",
        "// Line_Reference 48:             )",
        "// Line_Reference 49:         data = connection.engine.execute(sql).first()",
        "// Line_Reference 50:         return data[0] >= 1",
        "// Line_Reference 51: ",
        "// Line_Reference 52:     def add_column(column):",
        "// Line_Reference 53:         if exists(column):",
        "// Line_Reference 54:             return",
        "// Line_Reference 55:         table_name = column.table.fullname",
        "// Line_Reference 56:         column_name = column.name",
        "// Line_Reference 57:         column_type = column.type.compile(connection.engine.dialect)",
        "// Line_Reference 58:         connection.engine.execute('ALTER TABLE %s ADD COLUMN %s %s' % (table_name, column_name, column_type))",
        "// Line_Reference 59: ",
        "// Line_Reference 64:     add_column(RepoObject.__table__.c.Encoding)",
        "// Line_Reference 65:     add_column(RepoObject.__table__.c.keepdays)",
        "// Line_Reference 69:     if not exists(UserObject.__table__.c.role):",
        "// Line_Reference 70:         add_column(UserObject.__table__.c.role)",
        "// Line_Reference 74:     add_column(UserObject.__table__.c.fullname)",
        "// Line_Reference 77:     add_column(UserObject.__table__.c.mfa)",
        "// Line_Reference 80:     if not exists(SessionObject.__table__.c.Number):"
    ]
}
