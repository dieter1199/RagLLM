{
    "cve_id": "CVE-2016-6175",
    "cve_description": "Eval injection vulnerability in php-gettext 1.0.12 and earlier allows remote attackers to execute arbitrary PHP code via a crafted plural forms header.",
    "cve_publish_date": "2017-02-07",
    "cwe_id": "CWE-94",
    "cwe_name": "Improper Control of Generation of Code ('Code Injection')",
    "cwe_description": "The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.",
    "commit_message": "Clarified change log on php-gettext 1.0.12 update",
    "type_of_change": "Modification",
    "filename_of_changes": "gettext.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "113",
    "number_of_lines_deleted_vulnerable_to_cve": "112",
    "vulnerable_lines": [
        "// Line_Reference 278:   function sanitize_plural_expression($expr) {",
        "// Line_Reference 279:     // Get rid of disallowed characters.",
        "// Line_Reference 280:     $expr = preg_replace('@[^a-zA-Z0-9_:;\\(\\)\\?\\|\\&=!<>+*/\\%-]@', '', $expr);",
        "// Line_Reference 281: ",
        "// Line_Reference 282:     // Add parenthesis for tertiary '?' operator.",
        "// Line_Reference 283:     $expr .= ';';",
        "// Line_Reference 284:     $res = '';",
        "// Line_Reference 285:     $p = 0;",
        "// Line_Reference 286:     for ($i = 0; $i < strlen($expr); $i++) {",
        "// Line_Reference 287:       $ch = $expr[$i];",
        "// Line_Reference 288:       switch ($ch) {",
        "// Line_Reference 289:       case '?':",
        "// Line_Reference 290:         $res .= ' ? (';",
        "// Line_Reference 291:         $p++;",
        "// Line_Reference 292:         break;",
        "// Line_Reference 293:       case ':':",
        "// Line_Reference 294:         $res .= ') : (';",
        "// Line_Reference 295:         break;",
        "// Line_Reference 296:       case ';':",
        "// Line_Reference 297:         $res .= str_repeat( ')', $p) . ';';",
        "// Line_Reference 298:         $p = 0;",
        "// Line_Reference 299:         break;",
        "// Line_Reference 300:       default:",
        "// Line_Reference 301:         $res .= $ch;",
        "// Line_Reference 302:       }",
        "// Line_Reference 303:     }",
        "// Line_Reference 304:     return $res;",
        "// Line_Reference 305:   }",
        "// Line_Reference 313:   function extract_plural_forms_header_from_po_header($header) {",
        "// Line_Reference 314:     if (preg_match(\"/(^|\\n)plural-forms: ([^\\n]*)\\n/i\", $header, $regs))",
        "// Line_Reference 315:       $expr = $regs[2];",
        "// Line_Reference 316:     else",
        "// Line_Reference 317:       $expr = \"nplurals=2; plural=n == 1 ? 0 : 1;\";",
        "// Line_Reference 318:     return $expr;",
        "// Line_Reference 319:   }",
        "// Line_Reference 327:   function get_plural_forms() {",
        "// Line_Reference 328:     // lets assume message number 0 is header",
        "// Line_Reference 329:     // this is true, right?",
        "// Line_Reference 330:     $this->load_tables();",
        "// Line_Reference 331: ",
        "// Line_Reference 332:     // cache header field for plural forms",
        "// Line_Reference 333:     if (! is_string($this->pluralheader)) {",
        "// Line_Reference 334:       if ($this->enable_cache) {",
        "// Line_Reference 335:         $header = $this->cache_translations[\"\"];",
        "// Line_Reference 336:       } else {",
        "// Line_Reference 337:         $header = $this->get_translation_string(0);",
        "// Line_Reference 338:       }",
        "// Line_Reference 339:       $expr = $this->extract_plural_forms_header_from_po_header($header);",
        "// Line_Reference 340:       $this->pluralheader = $this->sanitize_plural_expression($expr);",
        "// Line_Reference 341:     }",
        "// Line_Reference 342:     return $this->pluralheader;",
        "// Line_Reference 343:   }",
        "// Line_Reference 352:   function select_string($n) {",
        "// Line_Reference 353:     if (!is_int($n)) {",
        "// Line_Reference 354:       throw new InvalidArgumentException(",
        "// Line_Reference 355:         \"Select_string only accepts integers: \" . $n);",
        "// Line_Reference 356:     }",
        "// Line_Reference 357:     $string = $this->get_plural_forms();",
        "// Line_Reference 358:     $string = str_replace('nplurals',\"\\$total\",$string);",
        "// Line_Reference 359:     $string = str_replace(\"n\",$n,$string);",
        "// Line_Reference 360:     $string = str_replace('plural',\"\\$plural\",$string);",
        "// Line_Reference 361: ",
        "// Line_Reference 362:     $total = 0;",
        "// Line_Reference 363:     $plural = 0;",
        "// Line_Reference 364: ",
        "// Line_Reference 365:     eval(\"$string\");",
        "// Line_Reference 366:     if ($plural >= $total) $plural = $total - 1;",
        "// Line_Reference 367:     return $plural;",
        "// Line_Reference 368:   }",
        "// Line_Reference 379:   function ngettext($single, $plural, $number) {",
        "// Line_Reference 380:     if ($this->short_circuit) {",
        "// Line_Reference 381:       if ($number != 1)",
        "// Line_Reference 382:         return $plural;",
        "// Line_Reference 383:       else",
        "// Line_Reference 384:         return $single;",
        "// Line_Reference 385:     }",
        "// Line_Reference 386: ",
        "// Line_Reference 387:     // find out the appropriate form",
        "// Line_Reference 388:     $select = $this->select_string($number);",
        "// Line_Reference 389: ",
        "// Line_Reference 390:     // this should contains all strings separated by NULLs",
        "// Line_Reference 391:     $key = $single . chr(0) . $plural;",
        "// Line_Reference 392: ",
        "// Line_Reference 393: ",
        "// Line_Reference 394:     if ($this->enable_cache) {",
        "// Line_Reference 395:       if (! array_key_exists($key, $this->cache_translations)) {",
        "// Line_Reference 396:         return ($number != 1) ? $plural : $single;",
        "// Line_Reference 397:       } else {",
        "// Line_Reference 398:         $result = $this->cache_translations[$key];",
        "// Line_Reference 399:         $list = explode(chr(0), $result);",
        "// Line_Reference 400:         return $list[$select];",
        "// Line_Reference 401:       }",
        "// Line_Reference 402:     } else {",
        "// Line_Reference 403:       $num = $this->find_string($key);",
        "// Line_Reference 404:       if ($num == -1) {",
        "// Line_Reference 405:         return ($number != 1) ? $plural : $single;",
        "// Line_Reference 406:       } else {",
        "// Line_Reference 407:         $result = $this->get_translation_string($num);",
        "// Line_Reference 408:         $list = explode(chr(0), $result);",
        "// Line_Reference 409:         return $list[$select];",
        "// Line_Reference 410:       }",
        "// Line_Reference 411:     }",
        "// Line_Reference 412:   }",
        "// Line_Reference 424:   function npgettext($context, $singular, $plural, $number) {",
        "// Line_Reference 425:     $key = $context . chr(4) . $singular;",
        "// Line_Reference 426:     $ret = $this->ngettext($key, $plural, $number);",
        "// Line_Reference 427:     if (strpos($ret, \"\\004\") !== FALSE) {",
        "// Line_Reference 428:       return $singular;",
        "// Line_Reference 429:     } else {",
        "// Line_Reference 430:       return $ret;",
        "// Line_Reference 431:     }",
        "// Line_Reference 433:   }"
    ]
}
