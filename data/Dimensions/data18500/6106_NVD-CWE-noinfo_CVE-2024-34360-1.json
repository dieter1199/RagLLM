{
    "cve_id": "CVE-2024-34360",
    "cve_description": "go-spacemesh is a Go implementation of the Spacemesh protocol full node. Nodes can publish activations transactions (ATXs) which reference the incorrect previous ATX of the Smesher that created the ATX. ATXs are expected to form a single chain from the newest to the first ATX ever published by an identity. Allowing Smeshers to reference an earlier (but not the latest) ATX as previous breaks this protocol rule and can serve as an attack vector where Nodes are rewarded for holding their PoST data for less than one epoch but still being eligible for rewards. This vulnerability is fixed in go-spacemesh 1.5.2-hotfix1 and Spacemesh API 1.37.1.",
    "cve_publish_date": "2024-05-14",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Verify that previous ATX points to correct ATX when handling incoming ATXs (#27)\n\n---------\n\nCo-authored-by: Bartosz Różański <bartek.roza@gmail.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "atxs.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "62",
    "number_of_lines_deleted_vulnerable_to_cve": "43",
    "vulnerable_lines": [
        "// Line_Reference 208: // GetIDByEpochAndNodeID gets an ATX ID for a given epoch and node ID.",
        "// Line_Reference 209: func GetIDByEpochAndNodeID(db sql.Executor, epoch types.EpochID, nodeID types.NodeID) (id types.ATXID, err error) {",
        "// Line_Reference 211: \t\tstmt.BindInt64(1, int64(epoch))",
        "// Line_Reference 212: \t\tstmt.BindBytes(2, nodeID.Bytes())",
        "// Line_Reference 221: \t\twhere epoch = ?1 and pubkey = ?2",
        "// Line_Reference 223: \t\treturn types.ATXID{}, fmt.Errorf(\"exec nodeID %v: %w\", nodeID, err)",
        "// Line_Reference 225: \t\treturn types.ATXID{}, fmt.Errorf(\"exec nodeID %s: %w\", nodeID, sql.ErrNotFound)",
        "// Line_Reference 231: // IterateIDsByEpoch invokes the specified callback for each ATX ID in a given epoch.",
        "// Line_Reference 232: // It stops if the callback returns an error.",
        "// Line_Reference 233: func IterateIDsByEpoch(",
        "// Line_Reference 234: \tdb sql.Executor,",
        "// Line_Reference 235: \tepoch types.EpochID,",
        "// Line_Reference 236: \tcallback func(total int, id types.ATXID) error,",
        "// Line_Reference 237: ) error {",
        "// Line_Reference 238: \tif sql.IsCached(db) {",
        "// Line_Reference 239: \t\t// If the slices are cached, let's not do more SELECTs",
        "// Line_Reference 240: \t\tids, err := GetIDsByEpoch(context.Background(), db, epoch)",
        "// Line_Reference 241: \t\tif err != nil {",
        "// Line_Reference 242: \t\t\treturn err",
        "// Line_Reference 243: \t\t}",
        "// Line_Reference 244: \t\tfor _, id := range ids {",
        "// Line_Reference 245: \t\t\tif err := callback(len(ids), id); err != nil {",
        "// Line_Reference 246: \t\t\t\treturn err",
        "// Line_Reference 247: \t\t\t}",
        "// Line_Reference 248: \t\t}",
        "// Line_Reference 249: \t\treturn nil",
        "// Line_Reference 250: \t}",
        "// Line_Reference 251: ",
        "// Line_Reference 252: \tvar callbackErr error",
        "// Line_Reference 257: \t\tvar id types.ATXID",
        "// Line_Reference 258: \t\ttotal := stmt.ColumnInt(0)",
        "// Line_Reference 259: \t\tstmt.ColumnBytes(1, id[:])",
        "// Line_Reference 260: \t\tif callbackErr = callback(total, id); callbackErr != nil {",
        "// Line_Reference 261: \t\t\treturn false",
        "// Line_Reference 262: \t\t}",
        "// Line_Reference 266: \t// Get total count in the same select statement to avoid the need for transaction",
        "// Line_Reference 267: \tif _, err := db.Exec(",
        "// Line_Reference 268: \t\t\"select (select count(*) from atxs where epoch = ?1) as total, id from atxs where epoch = ?1;\",",
        "// Line_Reference 269: \t\tenc, dec,",
        "// Line_Reference 270: \t); err != nil {",
        "// Line_Reference 271: \t\treturn fmt.Errorf(\"exec epoch %v: %w\", epoch, err)",
        "// Line_Reference 274: \treturn callbackErr",
        "// Line_Reference 404: \t\t\t\treturn nil, err"
    ]
}
