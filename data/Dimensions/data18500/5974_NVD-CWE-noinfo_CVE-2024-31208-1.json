{
    "cve_id": "CVE-2024-31208",
    "cve_description": "Synapse is an open-source Matrix homeserver. A remote Matrix user with malicious intent, sharing a room with Synapse instances before 1.105.1, can dispatch specially crafted events to exploit a weakness in the V2 state resolution algorithm. This can induce high CPU consumption and accumulate excessive data in the database of such instances, resulting in a denial of service. Servers in private federations, or those that do not federate, are not affected. Server administrators should upgrade to 1.105.1 or later. Some workarounds are available. One can ban the malicious users or ACL block servers from the rooms and/or leave the room and purge the room using the admin API.",
    "cve_publish_date": "2024-04-23",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Fix GHSA-3h7q-rfh9-xm4v\n\nWeakness in auth chain indexing allows DoS from remote room members\nthrough disk fill and high CPU usage.\n\nA remote Matrix user with malicious intent, sharing a room with Synapse\ninstances before 1.104.1, can dispatch specially crafted events to\nexploit a weakness in how the auth chain cover index is calculated. This\ncan induce high CPU consumption and accumulate excessive data in the\ndatabase of such instances, resulting in a denial of service.\n\nServers in private federations, or those that do not federate, are not\naffected.",
    "type_of_change": "Modification",
    "filename_of_changes": "events.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "37",
    "number_of_lines_deleted_vulnerable_to_cve": "71",
    "vulnerable_lines": [
        "// Line_Reference 771:         #          ID/sequence number; and",
        "// Line_Reference 772:         #       b. Add a link from the event to every chain reachable by the",
        "// Line_Reference 773:         #          auth event.",
        "// Line_Reference 778:         auth_chain_rows = cast(",
        "// Line_Reference 779:             List[Tuple[int, int, int, int]],",
        "// Line_Reference 780:             db_pool.simple_select_many_txn(",
        "// Line_Reference 781:                 txn,",
        "// Line_Reference 782:                 table=\"event_auth_chain_links\",",
        "// Line_Reference 783:                 column=\"origin_chain_id\",",
        "// Line_Reference 784:                 iterable={chain_id for chain_id, _ in chain_map.values()},",
        "// Line_Reference 785:                 keyvalues={},",
        "// Line_Reference 786:                 retcols=(",
        "// Line_Reference 787:                     \"origin_chain_id\",",
        "// Line_Reference 788:                     \"origin_sequence_number\",",
        "// Line_Reference 789:                     \"target_chain_id\",",
        "// Line_Reference 790:                     \"target_sequence_number\",",
        "// Line_Reference 791:                 ),",
        "// Line_Reference 792:             ),",
        "// Line_Reference 793:         )",
        "// Line_Reference 794:         for (",
        "// Line_Reference 795:             origin_chain_id,",
        "// Line_Reference 796:             origin_sequence_number,",
        "// Line_Reference 797:             target_chain_id,",
        "// Line_Reference 798:             target_sequence_number,",
        "// Line_Reference 799:         ) in auth_chain_rows:",
        "// Line_Reference 800:             chain_links.add_link(",
        "// Line_Reference 801:                 (origin_chain_id, origin_sequence_number),",
        "// Line_Reference 802:                 (target_chain_id, target_sequence_number),",
        "// Line_Reference 803:                 new=False,",
        "// Line_Reference 804:             )",
        "// Line_Reference 839:                 # Step 2b, add a link to chains reachable from the auth",
        "// Line_Reference 840:                 # event.",
        "// Line_Reference 841:                 for target_id, target_seq in chain_links.get_links_from(",
        "// Line_Reference 842:                     (auth_chain_id, auth_sequence_number)",
        "// Line_Reference 843:                 ):",
        "// Line_Reference 844:                     if target_id == chain_id:",
        "// Line_Reference 845:                         continue",
        "// Line_Reference 846: ",
        "// Line_Reference 847:                     chain_links.add_link(",
        "// Line_Reference 848:                         (chain_id, sequence_number), (target_id, target_seq)",
        "// Line_Reference 849:                     )",
        "// Line_Reference 850: ",
        "// Line_Reference 2454:     def get_links_from(",
        "// Line_Reference 2455:         self, src_tuple: Tuple[int, int]",
        "// Line_Reference 2456:     ) -> Generator[Tuple[int, int], None, None]:",
        "// Line_Reference 2457:         \"\"\"Gets the chains reachable from the given chain/sequence number.",
        "// Line_Reference 2458: ",
        "// Line_Reference 2459:         Yields:",
        "// Line_Reference 2460:             The chain ID and sequence number the link points to.",
        "// Line_Reference 2461:         \"\"\"",
        "// Line_Reference 2462:         src_chain, src_seq = src_tuple",
        "// Line_Reference 2463:         for target_id, sequence_numbers in self.maps.get(src_chain, {}).items():",
        "// Line_Reference 2464:             for link_src_seq, target_seq in sequence_numbers.items():",
        "// Line_Reference 2465:                 if link_src_seq <= src_seq:",
        "// Line_Reference 2466:                     yield target_id, target_seq",
        "// Line_Reference 2467: ",
        "// Line_Reference 2468:     def get_links_between(",
        "// Line_Reference 2469:         self, source_chain: int, target_chain: int",
        "// Line_Reference 2470:     ) -> Generator[Tuple[int, int], None, None]:",
        "// Line_Reference 2471:         \"\"\"Gets the links between two chains.",
        "// Line_Reference 2472: ",
        "// Line_Reference 2473:         Yields:",
        "// Line_Reference 2474:             The source and target sequence numbers.",
        "// Line_Reference 2475:         \"\"\"",
        "// Line_Reference 2476: ",
        "// Line_Reference 2477:         yield from self.maps.get(source_chain, {}).get(target_chain, {}).items()",
        "// Line_Reference 2478: ",
        "// Line_Reference 2505:         links = self.get_links_between(src_chain, target_chain)",
        "// Line_Reference 2506:         for link_start_seq, link_end_seq in links:",
        "// Line_Reference 2507:             if link_start_seq <= src_seq and target_seq <= link_end_seq:",
        "// Line_Reference 2508:                 return True"
    ]
}
