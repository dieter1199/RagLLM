{
    "cve_id": "CVE-2017-16806",
    "cve_description": "The Process function in RemoteTaskServer/WebServer/HttpServer.cs in Ulterius before 1.9.5.0 allows HTTP server directory traversal.",
    "cve_publish_date": "2017-11-13",
    "cwe_id": "CWE-22",
    "cwe_name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
    "cwe_description": "The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
    "commit_message": "Stability patch, fixes broken GPU detection code, updates the websocket framework to be real-time, removes crappy agent spawning system, removes IPC, fixes HTTP server traversal,",
    "type_of_change": "Modification",
    "filename_of_changes": "Program.cs",
    "code_language": "C#",
    "number_of_lines_added_for_mitigation": "15",
    "number_of_lines_deleted_vulnerable_to_cve": "39",
    "vulnerable_lines": [
        "// Line_Reference 10: using AgentInterface.Settings;",
        "// Line_Reference 11: using Topshelf;",
        "// Line_Reference 12: using UlteriusServer.Forms.Utilities;",
        "// Line_Reference 14: using UlteriusServer.Utilities.Usage;",
        "// Line_Reference 15: ",
        "// Line_Reference 41:                 if (",
        "// Line_Reference 42:                     Process.GetProcessesByName(Path.GetFileNameWithoutExtension(Assembly.GetEntryAssembly().Location))",
        "// Line_Reference 43:                         .Count() > 1) return;",
        "// Line_Reference 44: ",
        "// Line_Reference 45:                 ProfileOptimization.SetProfileRoot(AppEnvironment.DataPath);",
        "// Line_Reference 46:                 ProfileOptimization.StartProfile(\"Startup.Profile\");",
        "// Line_Reference 47: ",
        "// Line_Reference 48:                 if (args.Length > 0)",
        "// Line_Reference 50:                     HostFactory.Run(x => //1",
        "// Line_Reference 51:                     {",
        "// Line_Reference 52:                         x.Service<UlteriusAgent>(s => //2",
        "// Line_Reference 53:                         {",
        "// Line_Reference 54:                             s.ConstructUsing(name => new UlteriusAgent()); //3",
        "// Line_Reference 55:                             s.WhenStarted(tc => tc.Start()); //4",
        "// Line_Reference 56:                             s.WhenStopped(tc => tc.Stop());",
        "// Line_Reference 57:                             s.WhenSessionChanged((se, e, id) => { se.HandleEvent(e, id); }); //5",
        "// Line_Reference 58:                         });",
        "// Line_Reference 59:                         x.RunAsLocalSystem(); //6",
        "// Line_Reference 60:                         x.EnableSessionChanged();",
        "// Line_Reference 61:                         x.EnableServiceRecovery(r => { r.RestartService(1); });",
        "// Line_Reference 62:                         x.SetDescription(\"The server that powers Ulterius\"); //7",
        "// Line_Reference 63:                         x.SetDisplayName(\"Ulterius Server\"); //8",
        "// Line_Reference 64:                         x.SetServiceName(\"UlteriusServer\"); //9",
        "// Line_Reference 65:                     });",
        "// Line_Reference 67:                 else",
        "// Line_Reference 69:                     var ulterius = new Ulterius();",
        "// Line_Reference 70:                     ulterius.Start();",
        "// Line_Reference 71:                     var hardware = new HardwareSurvey();",
        "// Line_Reference 72:                     hardware.Setup();",
        "// Line_Reference 73:                     if (Tools.RunningPlatform() == Tools.Platform.Windows)",
        "// Line_Reference 74:                         UlteriusTray.ShowTray();",
        "// Line_Reference 75:                     else",
        "// Line_Reference 76:                         Console.ReadKey(true);",
        "// Line_Reference 84:                 Console.Read();"
    ]
}
