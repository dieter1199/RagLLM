*   Copyright (C) 1998-2019 Michal Trojnara <Michal.Trojnara@stunnel.org>
NOEXPORT char *parse_global_option(CMD, char *, char *);
"TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384:TLS_AES_128_GCM_SHA256";
parse_global_option(CMD_PRINT_HELP, NULL, NULL);
parse_global_option(CMD_PRINT_DEFAULTS, NULL, NULL);
if(options_file(configuration_file, type, &section))
if(init_section(1, &section))
return 1;
errstr=parse_global_option(CMD_SET_VALUE, config_opt, config_arg);
errstr=parse_global_option(CMD_INITIALIZE, NULL, NULL);
if(*section_ptr==&new_service_options)
s_log(LOG_INFO, "Initializing inetd mode configuration");
else
s_log(LOG_INFO, "Initializing service [%s]",
(*section_ptr)->servname);
parse_global_option(CMD_SET_DEFAULTS, NULL, NULL);
void options_free() {
parse_global_option(CMD_FREE, NULL, NULL);
NOEXPORT char *parse_global_option(CMD cmd, char *opt, char *arg) {
new_global_options.chroot_dir=NULL;
tmp=global_options.chroot_dir;
global_options.chroot_dir=NULL;
new_global_options.chroot_dir=str_dup(arg);
new_global_options.compression=COMP_NONE;
new_global_options.compression=COMP_DEFLATE;
new_global_options.compression=COMP_ZLIB;
new_global_options.egd_sock=EGD_SOCKET;
new_global_options.egd_sock=NULL;
tmp=global_options.egd_sock;
global_options.egd_sock=NULL;
new_global_options.egd_sock=str_dup(arg);
new_global_options.option.fips=0;
if(!strcasecmp(arg, "yes"))
new_global_options.option.fips=1;
else if(!strcasecmp(arg, "no"))
new_global_options.option.fips=0;
else
return "The argument needs to be either 'yes' or 'no'";
if(strcasecmp(arg, "no"))
new_global_options.option.foreground=0;
new_global_options.option.log_stderr=0;
new_global_options.option.foreground=1;
new_global_options.option.log_stderr=1;
new_global_options.option.foreground=1;
new_global_options.option.log_stderr=0;
new_global_options.option.foreground=0;
new_global_options.option.log_stderr=0;
new_global_options.icon[ICON_ACTIVE]=load_icon_default(ICON_ACTIVE);
if(!(new_global_options.icon[ICON_ACTIVE]=load_icon_file(arg)))
new_global_options.icon[ICON_ERROR]=load_icon_default(ICON_ERROR);
if(!(new_global_options.icon[ICON_ERROR]=load_icon_file(arg)))
new_global_options.icon[ICON_IDLE]=load_icon_default(ICON_IDLE);
if(!(new_global_options.icon[ICON_IDLE]=load_icon_file(arg)))
new_global_options.log_file_mode=FILE_MODE_APPEND;
new_global_options.log_file_mode=FILE_MODE_APPEND;
new_global_options.log_file_mode=FILE_MODE_OVERWRITE;
new_global_options.output_file=NULL;
tmp=global_options.output_file;
global_options.output_file=NULL;
new_global_options.output_file=str_dup(arg);
if(!new_global_options.option.foreground /* daemonize() used */ &&
new_global_options.output_file /* log file enabled */ &&
new_global_options.output_file[0]!='/' /* relative path */)
new_global_options.pidfile=NULL; /* do not create a pid file */
tmp=global_options.pidfile;
global_options.pidfile=NULL;
new_global_options.pidfile=str_dup(arg);
new_global_options.pidfile=NULL; /* empty -> do not create a pid file */
if(!new_global_options.option.foreground /* daemonize() used */ &&
new_global_options.pidfile /* pid file enabled */ &&
new_global_options.pidfile[0]!='/' /* relative path */)
new_global_options.random_bytes=RANDOM_BYTES;
new_global_options.random_bytes=(long)strtol(arg, &tmp_str, 10);
new_global_options.rand_file=str_dup(RANDOM_FILE);
new_global_options.rand_file=NULL;
tmp=global_options.rand_file;
global_options.rand_file=NULL;
new_global_options.rand_file=str_dup(arg);
new_global_options.option.rand_write=1;
new_global_options.option.rand_write=1;
new_global_options.option.rand_write=0;
new_global_options.option.log_syslog=1;
new_global_options.option.log_syslog=1;
new_global_options.option.log_syslog=0;
new_global_options.option.taskbar=1;
new_global_options.option.taskbar=1;
new_global_options.option.taskbar=0;
if(ssl_configure(&new_global_options)) /* configure global TLS settings */
if(section==&service_options || section==&new_service_options)
s_log(LOG_DEBUG, "Deallocating section defaults");
s_log(LOG_NOTICE,
"%25slevel 0 - request and ignore peer cert", "");
s_log(LOG_NOTICE,
"%25slevel 1 - only validate peer cert if present", "");
s_log(LOG_NOTICE,
"%25slevel 2 - always require a valid peer cert", "");
s_log(LOG_NOTICE,
"%25slevel 3 - verify peer with locally installed cert", "");
s_log(LOG_NOTICE,
"%25slevel 4 - ignore CA chain and only verify peer cert", "");
if(section==&service_options)
