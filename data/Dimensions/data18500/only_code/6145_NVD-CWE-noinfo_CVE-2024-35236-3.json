getCurrentLibrary: state => {
return state.libraries.find(lib => lib.id === state.currentLibraryId)
getSortedLibraries: state => () => {
return state.libraries.map(lib => ({ ...lib })).sort((a, b) => a.displayOrder - b.displayOrder)
getLibraryProvider: state => libraryId => {
var library = state.libraries.find(l => l.id === libraryId)
getCollection: state => id => {
return state.collections.find(c => c.id === id)
getPlaylist: state => id => {
return state.userPlaylists.find(p => p.id === id)
if (lastCheck < 1000 * 5) { // 5 seconds
var index = state.libraries.findIndex(a => a.id === library.id)
state.libraries = state.libraries.filter(a => a.id !== library.id)
var index = state.listeners.findIndex(l => l.id === listener.id)
state.listeners = state.listeners.filter(l => l.id !== listenerId)
state.filterData.series = state.filterData.series.filter(se => se.id !== seriesId)
const indexOf = state.filterData.authors.findIndex(au => au.id === author.id)
state.filterData.authors.sort((a, b) => (a.name || '').localeCompare((b.name || '')))
const indexOf = state.filterData.series.findIndex(se => se.id === series.id)
state.filterData.series.sort((a, b) => (a.name || '').localeCompare((b.name || '')))
var index = state.collections.findIndex(c => c.id === collection.id)
state.collections = state.collections.filter(c => c.id !== collection.id)
const index = state.userPlaylists.findIndex(p => p.id === playlist.id)
state.userPlaylists = state.userPlaylists.filter(p => p.id !== playlist.id)
}