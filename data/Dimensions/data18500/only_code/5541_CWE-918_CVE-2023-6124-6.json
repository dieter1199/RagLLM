public function __construct()
$config->set('HTML.Doctype', 'XHTML 1.0 Transitional');
$config->set('Core.Encoding', 'UTF-8');
$config->set('Core.HiddenElements', $hidden_tags);
$config->set('Cache.SerializerPath', sugar_cached("htmlclean"));
$config->set('URI.Base', isset($sugar_config['site_url']) ? $sugar_config['site_url'] : null);
$config->set('CSS.Proprietary', true);
$config->set('HTML.TidyLevel', 'light');
$config->set('HTML.ForbiddenElements', array('body' => true, 'html' => true));
$config->set('AutoFormat.RemoveEmpty', true);
$config->set('Cache.SerializerPermissions', 0775);
$config->set('Filter.ExtractStyleBlocks.TidyImpl', false);
$config->set('HTML.SafeObject', true);
$config->set('HTML.SafeEmbed', true);
$config->set('Output.FlashCompat', true);
$config->set('Filter.Custom', array(new HTMLPurifierFilterXmp()));
$config->set('HTML.DefinitionID', 'Sugar HTML Def');
$config->set('HTML.DefinitionRev', 2);
$config->set('Cache.SerializerPath', sugar_cached('htmlclean/'));
$config->set('Attr.EnableID', true);
$config->set('Attr.IDPrefix', 'sugar_text_');
$dirtyHtml =  preg_replace($pattern, $replacement, $dirtyHtml);
$sugarCleaner = self::getInstance();
$purifier = $sugarCleaner->purifier;
* @param $dirtyHtml
* @param bool $isEncoded
* @return string
public static function stripTags($dirtyHtml, $isEncoded = true)
if ($isEncoded) {
$dirtyHtml = from_html($dirtyHtml);
$dirtyHtml = filter_var($dirtyHtml, FILTER_SANITIZE_STRIPPED, FILTER_FLAG_NO_ENCODE_QUOTES);
return $isEncoded ? to_html($dirtyHtml) : $dirtyHtml;