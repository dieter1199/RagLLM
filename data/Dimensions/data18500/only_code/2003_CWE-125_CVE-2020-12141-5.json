* Copyright (C) 2019 Yago Fontoura do Rosario <yago.rosario@hotmail.com.br>
*      An implementation of the Simple Network Management Protocol (RFC 3411-3418)
#define BER_DATA_TYPE_INTEGER           0x02
#define BER_DATA_TYPE_OCTET_STRING      0x04
#define BER_DATA_TYPE_NULL              0x05
#define BER_DATA_TYPE_OID               0x06
#define BER_DATA_TYPE_SEQUENCE          0x30
* @param out A pointer to the end of the buffer
* @param out_len A pointer to the buffer length
* @return NULL if error or the next entry in the buffer
unsigned char *
snmp_ber_encode_type(unsigned char *out, uint32_t *out_len, uint8_t type);
* @param out A pointer to the end of the buffer
* @param out_len A pointer to the buffer length
* @return NULL if error or the next entry in the buffer
unsigned char *
snmp_ber_encode_length(unsigned char *out, uint32_t *out_len, uint8_t length);
* @param out A pointer to the end of the buffer
* @param out_len A pointer to the buffer length
* @return NULL if error or the next entry in the buffer
unsigned char *
snmp_ber_encode_integer(unsigned char *out, uint32_t *out_len, uint32_t integer);
* @brief Encodes an unsigned integer
* @param out A pointer to the end of the buffer
* @param out_len A pointer to the buffer length
* @param type A type that represents an unsigned integer
* @param number A number
* @return NULL if error or the next entry in the buffer
unsigned char *
snmp_ber_encode_unsigned_integer(unsigned char *out, uint32_t *out_len, uint8_t type, uint32_t number);
* @param out A pointer to the end of the buffer
* @param out_len A pointer to the buffer length
* @return NULL if error or the next entry in the buffer
unsigned char *
snmp_ber_encode_string_len(unsigned char *out, uint32_t *out_len, const char *str, uint32_t length);
* @param out A pointer to the end of the buffer
* @param out_len A pointer to the buffer length
* @return NULL if error or the next entry in the buffer
unsigned char *
snmp_ber_encode_null(unsigned char *out, uint32_t *out_len, uint8_t type);
* @param buff A pointer to the beginning of the buffer
* @param buff_len A pointer to the buffer length
* @return NULL if error or the first entry after the oid in the buffer
unsigned char *
snmp_ber_decode_type(unsigned char *buff, uint32_t *buff_len, uint8_t *type);
* @param buff A pointer to the beginning of the buffer
* @param buff_len A pointer to the buffer length
* @return NULL if error or the first entry after the oid in the buffer
unsigned char *
snmp_ber_decode_length(unsigned char *buff, uint32_t *buff_len, uint8_t *length);
* @param buff A pointer to the beginning of the buffer
* @param buff_len A pointer to the buffer length
* @return NULL if error or the first entry after the oid in the buffer
unsigned char *
snmp_ber_decode_integer(unsigned char *buff, uint32_t *buff_len, uint32_t *integer);
* @brief Decodes an unsigned number
* @param buff A pointer to the beginning of the buffer
* @param buff_len A pointer to the buffer length
* @param expected_type The expected type that represents an unsingned integer
* @param number A pointer to the number
* @return NULL if error or the first entry after the oid in the buffer
unsigned char *
snmp_ber_decode_unsigned_integer(unsigned char *buff, uint32_t *buff_len, uint8_t expected_type, uint32_t *number);
* @param buff A pointer to the beginning of the buffer
* @param buff_len A pointer to the buffer length
* @return NULL if error or the first entry after the oid in the buffer
unsigned char *
snmp_ber_decode_string_len_buffer(unsigned char *buff, uint32_t *buff_len, const char **str, uint32_t *length);
* @param buff A pointer to the beginning of the buffer
* @param buff_len A pointer to the buffer length
* @return NULL if error or the first entry after the oid in the buffer
unsigned char *
snmp_ber_decode_null(unsigned char *buff, uint32_t *buff_len);