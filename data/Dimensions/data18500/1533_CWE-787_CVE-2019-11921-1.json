{
    "cve_id": "CVE-2019-11921",
    "cve_description": "An out of bounds write is possible via a specially crafted packet in certain configurations of Proxygen due to improper handling of Base64 when parsing malformed binary content in Structured HTTP Headers. This issue affects versions of proxygen prior to v2019.07.22.00.",
    "cve_publish_date": "2019-07-25",
    "cwe_id": "CWE-787",
    "cwe_name": "Out-of-bounds Write",
    "cwe_description": "The product writes data past the end, or before the beginning, of the intended buffer.",
    "commit_message": "Fix SEGV in StructuredHeaders::decodeBase64\n\nSummary:\nThe existing code can potentially cause a SEGV due to an out of bounds write.\n\nThis fixes CVE-2019-11921.\n\nReviewed By: knekritz\n\nDifferential Revision: D12983120\n\nfbshipit-source-id: 1d48063595c8d518fd8afcbc941de260af7e37fd",
    "type_of_change": "Modification",
    "filename_of_changes": "StructuredHeadersUtilities.cpp",
    "code_language": "C++",
    "number_of_lines_added_for_mitigation": "13",
    "number_of_lines_deleted_vulnerable_to_cve": "22",
    "vulnerable_lines": [
        "// Line_Reference 12: #include <boost/archive/iterators/binary_from_base64.hpp>",
        "// Line_Reference 13: #include <boost/archive/iterators/base64_from_binary.hpp>",
        "// Line_Reference 14: #include <boost/archive/iterators/transform_width.hpp>",
        "// Line_Reference 110:     return \"\";",
        "// Line_Reference 113:   using namespace boost::archive::iterators;",
        "// Line_Reference 114:   using b64it =",
        "// Line_Reference 115:     transform_width<binary_from_base64<std::string::const_iterator>, 8, 6>;",
        "// Line_Reference 116: ",
        "// Line_Reference 117:   std::string decoded = std::string(b64it(std::begin(encoded)),",
        "// Line_Reference 118:                                     b64it(std::end(encoded)));",
        "// Line_Reference 119: ",
        "// Line_Reference 120:   uint32_t numPadding = std::count(encoded.begin(), encoded.end(), '=');",
        "// Line_Reference 121:   decoded.erase(decoded.end() - numPadding, decoded.end());",
        "// Line_Reference 123:   return decoded;",
        "// Line_Reference 127:   using namespace boost::archive::iterators;",
        "// Line_Reference 128:   using b64it = base64_from_binary<transform_width<const char*, 6, 8>>;",
        "// Line_Reference 129: ",
        "// Line_Reference 130:   auto data = input.data();",
        "// Line_Reference 131:   std::string encoded(b64it(data), b64it(data + (input.length())));",
        "// Line_Reference 132:   encoded.append((3 - (input.length() % 3)) % 3, '=');",
        "// Line_Reference 133: ",
        "// Line_Reference 134:   return encoded;"
    ]
}
