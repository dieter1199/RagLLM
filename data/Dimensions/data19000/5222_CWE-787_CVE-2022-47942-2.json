{
    "cve_id": "CVE-2022-47942",
    "cve_description": "An issue was discovered in ksmbd in the Linux kernel 5.15 through 5.19 before 5.19.2. There is a heap-based buffer overflow in set_ntacl_dacl, related to use of SMB2_QUERY_INFO_HE after a malformed SMB2_SET_INFO_HE command.",
    "cve_publish_date": "2022-12-23",
    "cwe_id": "CWE-787",
    "cwe_name": "Out-of-bounds Write",
    "cwe_description": "The product writes data past the end, or before the beginning, of the intended buffer.",
    "commit_message": "ksmbd: fix heap-based overflow in set_ntacl_dacl()\n\nThe testcase use SMB2_SET_INFO_HE command to set a malformed file attribute\nunder the label `security.NTACL`. SMB2_QUERY_INFO_HE command in testcase\ntrigger the following overflow.\n\n[ 4712.003781] ==================================================================\n[ 4712.003790] BUG: KASAN: slab-out-of-bounds in build_sec_desc+0x842/0x1dd0 [ksmbd]\n[ 4712.003807] Write of size 1060 at addr ffff88801e34c068 by task kworker/0:0/4190\n\n[ 4712.003813] CPU: 0 PID: 4190 Comm: kworker/0:0 Not tainted 5.19.0-rc5 #1\n[ 4712.003850] Workqueue: ksmbd-io handle_ksmbd_work [ksmbd]\n[ 4712.003867] Call Trace:\n[ 4712.003870]  <TASK>\n[ 4712.003873]  dump_stack_lvl+0x49/0x5f\n[ 4712.003935]  print_report.cold+0x5e/0x5cf\n[ 4712.003972]  ? ksmbd_vfs_get_sd_xattr+0x16d/0x500 [ksmbd]\n[ 4712.003984]  ? cmp_map_id+0x200/0x200\n[ 4712.003988]  ? build_sec_desc+0x842/0x1dd0 [ksmbd]\n[ 4712.004000]  kasan_report+0xaa/0x120\n[ 4712.004045]  ? build_sec_desc+0x842/0x1dd0 [ksmbd]\n[ 4712.004056]  kasan_check_range+0x100/0x1e0\n[ 4712.004060]  memcpy+0x3c/0x60\n[ 4712.004064]  build_sec_desc+0x842/0x1dd0 [ksmbd]\n[ 4712.004076]  ? parse_sec_desc+0x580/0x580 [ksmbd]\n[ 4712.004088]  ? ksmbd_acls_fattr+0x281/0x410 [ksmbd]\n[ 4712.004099]  smb2_query_info+0xa8f/0x6110 [ksmbd]\n[ 4712.004111]  ? psi_group_change+0x856/0xd70\n[ 4712.004148]  ? update_load_avg+0x1c3/0x1af0\n[ 4712.004152]  ? asym_cpu_capacity_scan+0x5d0/0x5d0\n[ 4712.004157]  ? xas_load+0x23/0x300\n[ 4712.004162]  ? smb2_query_dir+0x1530/0x1530 [ksmbd]\n[ 4712.004173]  ? _raw_spin_lock_bh+0xe0/0xe0\n[ 4712.004179]  handle_ksmbd_work+0x30e/0x1020 [ksmbd]\n[ 4712.004192]  process_one_work+0x778/0x11c0\n[ 4712.004227]  ? _raw_spin_lock_irq+0x8e/0xe0\n[ 4712.004231]  worker_thread+0x544/0x1180\n[ 4712.004234]  ? __cpuidle_text_end+0x4/0x4\n[ 4712.004239]  kthread+0x282/0x320\n[ 4712.004243]  ? process_one_work+0x11c0/0x11c0\n[ 4712.004246]  ? kthread_complete_and_exit+0x30/0x30\n[ 4712.004282]  ret_from_fork+0x1f/0x30\n\nThis patch add the buffer validation for security descriptor that is\nstored by malformed SMB2_SET_INFO_HE command. and allocate large\nresponse buffer about SMB2_O_INFO_SECURITY file info class.\n\nFixes: e2f34481b24d (\"cifsd: add server-side procedures for SMB3\")\nCc: stable@vger.kernel.org\nReported-by: zdi-disclosures@trendmicro.com # ZDI-CAN-17771\nReviewed-by: Hyunchul Lee <hyc.lee@gmail.com>\nSigned-off-by: Namjae Jeon <linkinjeon@kernel.org>\nSigned-off-by: Steve French <stfrench@microsoft.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "smbacl.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "88",
    "number_of_lines_deleted_vulnerable_to_cve": "42",
    "vulnerable_lines": [
        "// Line_Reference 706: \t\t\tmemcpy((char *)pndace + size, ntace, le16_to_cpu(ntace->size));",
        "// Line_Reference 707: \t\t\tsize += le16_to_cpu(ntace->size);",
        "// Line_Reference 708: \t\t\tntace = (struct smb_ace *)((char *)ntace + le16_to_cpu(ntace->size));",
        "// Line_Reference 881: \t\t   int addition_info, __u32 *secdesclen,",
        "// Line_Reference 941: \t\t} else if (!ppntsd->dacloffset) {",
        "// Line_Reference 942: \t\t\tgoto out;",
        "// Line_Reference 946: \t\t\tppdacl_ptr = (struct smb_acl *)((char *)ppntsd +",
        "// Line_Reference 947: \t\t\t\t\t\tle32_to_cpu(ppntsd->dacloffset));",
        "// Line_Reference 949: \t\t\t\t       nowner_sid_ptr, ngroup_sid_ptr, fattr);",
        "// Line_Reference 983: \tint inherited_flags = 0, flags = 0, i, ace_cnt = 0, nt_size = 0;",
        "// Line_Reference 984: \tint rc = 0, num_aces, dacloffset, pntsd_type, acl_len;",
        "// Line_Reference 988: \tacl_len = ksmbd_vfs_get_sd_xattr(conn, user_ns,",
        "// Line_Reference 989: \t\t\t\t\t parent, &parent_pntsd);",
        "// Line_Reference 990: \tif (acl_len <= 0)",
        "// Line_Reference 993: \tif (!dacloffset) {",
        "// Line_Reference 1060: \t\tparent_aces =",
        "// Line_Reference 1061: \t\t\t(struct smb_ace *)((char *)parent_aces + le16_to_cpu(parent_aces->size));",
        "// Line_Reference 1156: \tint rc = 0, acl_size;",
        "// Line_Reference 1165: \tchar *end_of_acl;",
        "// Line_Reference 1168: \tacl_size = ksmbd_vfs_get_sd_xattr(conn, user_ns,",
        "// Line_Reference 1169: \t\t\t\t\t  path->dentry, &pntsd);",
        "// Line_Reference 1170: \tif (acl_size <= 0 || !pntsd || !pntsd->dacloffset) {",
        "// Line_Reference 1171: \t\tkfree(pntsd);",
        "// Line_Reference 1172: \t\treturn 0;",
        "// Line_Reference 1173: \t}",
        "// Line_Reference 1176: \tend_of_acl = ((char *)pntsd) + acl_size;",
        "// Line_Reference 1177: \tif (end_of_acl <= (char *)pdacl) {",
        "// Line_Reference 1178: \t\tkfree(pntsd);",
        "// Line_Reference 1179: \t\treturn 0;",
        "// Line_Reference 1180: \t}",
        "// Line_Reference 1182: \tif (end_of_acl < (char *)pdacl + le16_to_cpu(pdacl->size) ||",
        "// Line_Reference 1183: \t    le16_to_cpu(pdacl->size) < sizeof(struct smb_acl)) {",
        "// Line_Reference 1184: \t\tkfree(pntsd);",
        "// Line_Reference 1185: \t\treturn 0;",
        "// Line_Reference 1186: \t}",
        "// Line_Reference 1189: \t\tif (!(le16_to_cpu(pdacl->size) - sizeof(struct smb_acl)) &&",
        "// Line_Reference 1194: \t\tkfree(pntsd);",
        "// Line_Reference 1195: \t\treturn 0;",
        "// Line_Reference 1206: \t\t\tif (end_of_acl < (char *)ace)",
        "// Line_Reference 1207: \t\t\t\tgoto err_out;",
        "// Line_Reference 1229: \t\tif (end_of_acl < (char *)ace)",
        "// Line_Reference 1230: \t\t\tgoto err_out;"
    ]
}
