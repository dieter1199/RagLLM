{
    "cve_id": "CVE-2024-32888",
    "cve_description": "The Amazon JDBC Driver for Redshift is a Type 4 JDBC driver that provides database connectivity through the standard JDBC application program interfaces (APIs) available in the Java Platform, Enterprise Editions. Prior to version 2.1.0.28, SQL injection is possible when using the non-default connection property `preferQueryMode=simple` in combination with application code which has a vulnerable SQL that negates a parameter value. There is no vulnerability in the driver when using the default, extended query mode. Note that `preferQueryMode` is not a supported parameter in Redshift JDBC driver, and is inherited code from Postgres JDBC driver. Users who do not override default settings to utilize this unsupported query mode are not affected. This issue is patched in driver version 2.1.0.28. As a workaround, do not use the connection property `preferQueryMode=simple`. (NOTE: Those who do not explicitly specify a query mode use the default of extended query mode and are not affected by this issue.)",
    "cve_publish_date": "2024-05-15",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Security improvements.",
    "type_of_change": "Modification",
    "filename_of_changes": "SimpleParameterList.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "70",
    "number_of_lines_deleted_vulnerable_to_cve": "43",
    "vulnerable_lines": [
        "// Line_Reference 194:     } else if ((flags[index] & BINARY) == BINARY) {",
        "// Line_Reference 196: ",
        "// Line_Reference 200:           return Short.toString(s);",
        "// Line_Reference 204:           return Integer.toString(i);",
        "// Line_Reference 208:           return Long.toString(l);",
        "// Line_Reference 215:           return Float.toString(f);",
        "// Line_Reference 222:           return Double.toString(d);",
        "// Line_Reference 225:           String uuid =",
        "// Line_Reference 227:           return \"'\" + uuid + \"'::uuid\";",
        "// Line_Reference 232:           return \"'\" + pgPoint.toString() + \"'::point\";",
        "// Line_Reference 237:           return \"'\" + pgBox.toString() + \"'::box\";",
        "// Line_Reference 239:       return \"?\";",
        "// Line_Reference 241:       String param = paramValues[index].toString();",
        "// Line_Reference 242: ",
        "// Line_Reference 243:       // add room for quotes + potential escaping.",
        "// Line_Reference 244:       StringBuilder p = new StringBuilder(3 + (param.length() + 10) / 10 * 11);",
        "// Line_Reference 245: ",
        "// Line_Reference 246:       // No E'..' here since escapeLiteral escapes all things and it does not use \\123 kind of",
        "// Line_Reference 247:       // escape codes",
        "// Line_Reference 248:       p.append('\\'');",
        "// Line_Reference 249:       try {",
        "// Line_Reference 250:         p = Utils.escapeLiteral(p, param, standardConformingStrings);",
        "// Line_Reference 251:       } catch (SQLException sqle) {",
        "// Line_Reference 252:         // This should only happen if we have an embedded null",
        "// Line_Reference 253:         // and there's not much we can do if we do hit one.",
        "// Line_Reference 254:         //",
        "// Line_Reference 255:         // The goal of toString isn't to be sent to the server,",
        "// Line_Reference 256:         // so we aren't 100% accurate (see StreamWrapper), put",
        "// Line_Reference 257:         // the unescaped version of the data.",
        "// Line_Reference 258:         //",
        "// Line_Reference 259:         p.append(param);",
        "// Line_Reference 260:       }",
        "// Line_Reference 261:       p.append('\\'');",
        "// Line_Reference 264:         p.append(\"::timestamp\");",
        "// Line_Reference 266:         p.append(\"::timestamp with time zone\");",
        "// Line_Reference 268:         p.append(\"::time\");",
        "// Line_Reference 270:         p.append(\"::time with time zone\");",
        "// Line_Reference 272:         p.append(\"::date\");",
        "// Line_Reference 274:         p.append(\"::interval\");",
        "// Line_Reference 276:         p.append(\"::interval year to month\");",
        "// Line_Reference 278:         p.append(\"::interval day to second\");",
        "// Line_Reference 280:         p.append(\"::numeric\");",
        "// Line_Reference 282:       return p.toString();"
    ]
}
