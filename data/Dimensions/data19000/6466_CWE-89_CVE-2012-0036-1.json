{
    "cve_id": "CVE-2012-0036",
    "cve_description": "curl and libcurl 7.2x before 7.24.0 do not properly consider special characters during extraction of a pathname from a URL, which allows remote attackers to conduct data-injection attacks via a crafted URL, as demonstrated by a CRLF injection attack on the (1) IMAP, (2) POP3, or (3) SMTP protocol.",
    "cve_publish_date": "2012-04-13",
    "cwe_id": "CWE-89",
    "cwe_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
    "cwe_description": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.",
    "commit_message": "URL sanitize: reject URLs containing bad data\n\nProtocols (IMAP, POP3 and SMTP) that use the path part of a URL in a\ndecoded manner now use the new Curl_urldecode() function to reject URLs\nwith embedded control codes (anything that is or decodes to a byte value\nless than 32).\n\nURLs containing such codes could easily otherwise be used to do harm and\nallow users to do unintended actions with otherwise innocent tools and\napplications. Like for example using a URL like\npop3://pop3.example.com/1%0d%0aDELE%201 when the app wants a URL to get\na mail and instead this would delete one.\n\nThis flaw is considered a security vulnerability: CVE-2012-0036\n\nSecurity advisory at: http://curl.haxx.se/docs/adv_20120124.html\n\nReported by: Dan Fandrich",
    "type_of_change": "Modification",
    "filename_of_changes": "escape.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "50",
    "number_of_lines_deleted_vulnerable_to_cve": "13",
    "vulnerable_lines": [
        "// Line_Reference 87:   int strindex=0;",
        "// Line_Reference 135:  * Unescapes the given URL escaped string of given length. Returns a",
        "// Line_Reference 136:  * pointer to a malloced string with length given in *olen.",
        "// Line_Reference 137:  * If length == 0, the length is assumed to be strlen(string).",
        "// Line_Reference 138:  * If olen == NULL, no output length is stored.",
        "// Line_Reference 140: char *curl_easy_unescape(CURL *handle, const char *string, int length,",
        "// Line_Reference 141:                          int *olen)",
        "// Line_Reference 143:   int alloc = (length?length:(int)strlen(string))+1;",
        "// Line_Reference 146:   int strindex=0;",
        "// Line_Reference 151:     return NULL;",
        "// Line_Reference 167:       res = Curl_convert_from_network(handle, &in, 1);",
        "// Line_Reference 171:         return NULL;",
        "// Line_Reference 186:   return ns;"
    ]
}
