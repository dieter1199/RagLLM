{
    "cve_id": "CVE-2022-1996",
    "cve_description": "Authorization Bypass Through User-Controlled Key in GitHub repository emicklei/go-restful prior to v3.8.0.",
    "cve_publish_date": "2022-06-08",
    "cwe_id": "CWE-639",
    "cwe_name": "Authorization Bypass Through User-Controlled Key",
    "cwe_description": "The system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.",
    "commit_message": "use exact matching of allowed domain entries, issue #489 (#493)\n\n* use exact matching of allowed domain entries, issue #489\r\n\r\n* update doc, add testcases from PR conversation\r\n\r\n* introduce AllowedDomainFunc #489\r\n\r\n* more tests, fix doc\r\n\r\n* lowercase origin before checking cors",
    "type_of_change": "Modification",
    "filename_of_changes": "cors_filter.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "26",
    "number_of_lines_deleted_vulnerable_to_cve": "38",
    "vulnerable_lines": [
        "// Line_Reference 21: \tExposeHeaders  []string // list of Header names",
        "// Line_Reference 22: \tAllowedHeaders []string // list of Header names",
        "// Line_Reference 23: \tAllowedDomains []string // list of allowed values for Http Origin. An allowed value can be a regular expression to support subdomain matching. If empty all are allowed.",
        "// Line_Reference 126: \tallowed := false",
        "// Line_Reference 128: \t\tif domain == origin {",
        "// Line_Reference 129: \t\t\tallowed = true",
        "// Line_Reference 130: \t\t\tbreak",
        "// Line_Reference 133: ",
        "// Line_Reference 134: \tif !allowed {",
        "// Line_Reference 135: \t\tif len(c.allowedOriginPatterns) == 0 {",
        "// Line_Reference 136: \t\t\t// compile allowed domains to allowed origin patterns",
        "// Line_Reference 137: \t\t\tallowedOriginRegexps, err := compileRegexps(c.AllowedDomains)",
        "// Line_Reference 138: \t\t\tif err != nil {",
        "// Line_Reference 139: \t\t\t\treturn false",
        "// Line_Reference 140: \t\t\t}",
        "// Line_Reference 141: \t\t\tc.allowedOriginPatterns = allowedOriginRegexps",
        "// Line_Reference 142: \t\t}",
        "// Line_Reference 143: ",
        "// Line_Reference 144: \t\tfor _, pattern := range c.allowedOriginPatterns {",
        "// Line_Reference 145: \t\t\tif allowed = pattern.MatchString(origin); allowed {",
        "// Line_Reference 146: \t\t\t\tbreak",
        "// Line_Reference 147: \t\t\t}",
        "// Line_Reference 148: \t\t}",
        "// Line_Reference 150: ",
        "// Line_Reference 151: \treturn allowed",
        "// Line_Reference 193: ",
        "// Line_Reference 194: // Take a list of strings and compile them into a list of regular expressions.",
        "// Line_Reference 195: func compileRegexps(regexpStrings []string) ([]*regexp.Regexp, error) {",
        "// Line_Reference 196: \tregexps := []*regexp.Regexp{}",
        "// Line_Reference 197: \tfor _, regexpStr := range regexpStrings {",
        "// Line_Reference 198: \t\tr, err := regexp.Compile(regexpStr)",
        "// Line_Reference 199: \t\tif err != nil {",
        "// Line_Reference 200: \t\t\treturn regexps, err",
        "// Line_Reference 201: \t\t}",
        "// Line_Reference 202: \t\tregexps = append(regexps, r)",
        "// Line_Reference 203: \t}",
        "// Line_Reference 204: \treturn regexps, nil",
        "// Line_Reference 205: }"
    ]
}
