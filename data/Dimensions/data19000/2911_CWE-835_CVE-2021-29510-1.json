{
    "cve_id": "CVE-2021-29510",
    "cve_description": "Pydantic is a data validation and settings management using Python type hinting. In affected versions passing either `'infinity'`, `'inf'` or `float('inf')` (or their negatives) to `datetime` or `date` fields causes validation to run forever with 100% CPU usage (on one CPU). Pydantic has been patched with fixes available in the following versions: v1.8.2, v1.7.4, v1.6.2. All these versions are available on pypi(https://pypi.org/project/pydantic/#history), and will be available on conda-forge(https://anaconda.org/conda-forge/pydantic) soon. See the changelog(https://pydantic-docs.helpmanual.io/) for details. If you absolutely can't upgrade, you can work around this risk using a validator(https://pydantic-docs.helpmanual.io/usage/validators/) to catch these values. This is not an ideal solution (in particular you'll need a slightly different function for datetimes), instead of a hack like this you should upgrade pydantic. If you are not using v1.8.x, v1.7.x or v1.6.x and are unable to upgrade to a fixed version of pydantic, please create an issue at https://github.com/samuelcolvin/pydantic/issues requesting a back-port, and we will endeavour to release a patch for earlier versions of pydantic.",
    "cve_publish_date": "2021-05-13",
    "cwe_id": "CWE-835",
    "cwe_name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
    "cwe_description": "The product contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop.",
    "commit_message": "Merge pull request from GHSA-5jqp-qgf6-3pvh\n\n* fix infinite loop in datetime parsing\n\n* add change description\n\n* switch to set a max datetime number",
    "type_of_change": "Modification",
    "filename_of_changes": "test_datetime_parse.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "42",
    "number_of_lines_deleted_vulnerable_to_cve": "4",
    "vulnerable_lines": [
        "// Line_Reference 48:     if result == errors.DateError:",
        "// Line_Reference 49:         with pytest.raises(errors.DateError):",
        "// Line_Reference 129:     if result == errors.DateTimeError:",
        "// Line_Reference 130:         with pytest.raises(errors.DateTimeError):"
    ]
}
