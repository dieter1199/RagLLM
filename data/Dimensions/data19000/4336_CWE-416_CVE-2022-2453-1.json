{
    "cve_id": "CVE-2022-2453",
    "cve_description": "Use After Free in GitHub repository gpac/gpac prior to 2.1-DEV.",
    "cve_publish_date": "2022-07-19",
    "cwe_id": "CWE-416",
    "cwe_name": "Use After Free",
    "cwe_description": "The product reuses or references memory after it has been freed. At some point afterward, the memory may be allocated again and saved in another pointer, while the original pointer references a location somewhere within the new allocation. Any operations using the original pointer are no longer valid because the memory \"belongs\" to the code that operates on the new pointer.",
    "commit_message": "fixed #2212",
    "type_of_change": "Modification",
    "filename_of_changes": "field_decode.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "53",
    "number_of_lines_deleted_vulnerable_to_cve": "46",
    "vulnerable_lines": [
        "// Line_Reference 430: \t} else {",
        "// Line_Reference 431: \t\tlast = NULL;",
        "// Line_Reference 432: \t\tfor (i=0; i<nbFields; i++) {",
        "// Line_Reference 433: \t\t\tGF_Node *new_node = gf_bifs_dec_node(codec, bs, field->NDTtype);",
        "// Line_Reference 434: \t\t\tif (new_node) {",
        "// Line_Reference 435: \t\t\t\te = gf_node_register(new_node, is_mem_com ? NULL : node);",
        "// Line_Reference 436: \t\t\t\tif (e) return e;",
        "// Line_Reference 437: ",
        "// Line_Reference 438: \t\t\t\tif (node) {",
        "// Line_Reference 439: \t\t\t\t\t/*special case for QP, register as the current QP*/",
        "// Line_Reference 440: \t\t\t\t\tif (gf_node_get_tag(new_node) == TAG_MPEG4_QuantizationParameter) {",
        "// Line_Reference 441: \t\t\t\t\t\tqp_local = ((M_QuantizationParameter *)new_node)->isLocal;",
        "// Line_Reference 442: \t\t\t\t\t\t/*we have a QP in the same scope, remove previous",
        "// Line_Reference 443: \t\t\t\t\t\tNB: we assume this is the right behavior, the spec doesn't say",
        "// Line_Reference 444: \t\t\t\t\t\twhether QP is cumulative or not*/",
        "// Line_Reference 445: \t\t\t\t\t\tif (qp_on) gf_bifs_dec_qp_remove(codec, GF_FALSE);",
        "// Line_Reference 447: \t\t\t\t\t\te = gf_bifs_dec_qp_set(codec, new_node);",
        "// Line_Reference 448: \t\t\t\t\t\tif (e) return e;",
        "// Line_Reference 449: \t\t\t\t\t\tqp_on = 1;",
        "// Line_Reference 450: \t\t\t\t\t\tif (qp_local) qp_local = 2;",
        "// Line_Reference 451: \t\t\t\t\t\tif (codec->force_keep_qp) {",
        "// Line_Reference 452: \t\t\t\t\t\t\te = gf_node_list_add_child_last(field->far_ptr, new_node, &last);",
        "// Line_Reference 453: \t\t\t\t\t\t\tif (e) return e;",
        "// Line_Reference 454: \t\t\t\t\t\t} else {",
        "// Line_Reference 455: \t\t\t\t\t\t\tgf_node_register(new_node, NULL);",
        "// Line_Reference 456: \t\t\t\t\t\t\tgf_node_unregister(new_node, node);",
        "// Line_Reference 457: \t\t\t\t\t\t}",
        "// Line_Reference 458: \t\t\t\t\t} else {",
        "// Line_Reference 460: \t\t\t\t\t\tif (e) return e;",
        "// Line_Reference 463: \t\t\t\t/*proto coding*/",
        "// Line_Reference 464: \t\t\t\telse if (codec->pCurrentProto) {",
        "// Line_Reference 465: \t\t\t\t\t/*TO DO: what happens if this is a QP node on the interface ?*/",
        "// Line_Reference 466: \t\t\t\t\te = gf_node_list_add_child_last( (GF_ChildNodeItem **)field->far_ptr, new_node, &last);",
        "// Line_Reference 467: \t\t\t\t\tif (e) return e;",
        "// Line_Reference 468: \t\t\t\t}",
        "// Line_Reference 469: \t\t\t} else {",
        "// Line_Reference 470: \t\t\t\treturn codec->LastError ? codec->LastError : GF_NON_COMPLIANT_BITSTREAM;",
        "// Line_Reference 473: \t\t/*according to the spec, the QP applies to the current node itself, not just children.",
        "// Line_Reference 474: \t\tIf IsLocal is TRUE remove the node*/",
        "// Line_Reference 475: \t\tif (qp_on && qp_local) {",
        "// Line_Reference 476: \t\t\tif (qp_local == 2) {",
        "// Line_Reference 478: \t\t\t} else {",
        "// Line_Reference 479: \t\t\t\t//ask to get rid of QP and reactivate if we had a QP when entering the node",
        "// Line_Reference 480: \t\t\t\tgf_bifs_dec_qp_remove(codec, initial_qp);",
        "// Line_Reference 482: \t\t\t}",
        "// Line_Reference 487: \treturn GF_OK;"
    ]
}
