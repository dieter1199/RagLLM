{
    "cve_id": "CVE-2023-6507",
    "cve_description": "An issue was found in CPython 3.12.0 `subprocess` module on POSIX platforms. The issue was fixed in CPython 3.12.1 and does not affect other stable releases.\n\nWhen using the `extra_groups=` parameter with an empty list as a value (ie `extra_groups=[]`) the logic regressed to not call `setgroups(0, NULL)` before calling `exec()`, thus not dropping the original processes' groups before starting the new process. There is no issue when the parameter isn't used or when any value is used besides an empty list.\n\nThis issue only impacts CPython processes run with sufficient privilege to make the `setgroups` system call (typically `root`).\n\n",
    "cve_publish_date": "2023-12-08",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "gh-112334: Regression test that vfork is used when expected. (#112734)\n\nRegression test that vfork is used when expected by subprocess.\r\n\r\nThis is written integration test style, it uses strace if it is present and appears to work to find out what system call actually gets used in different scenarios.\r\n\r\nTest coverage is added for the default behavior and that of each of the specific arguments that must disable the use of vfork.  obviously not an entire test matrix, but it covers the most important aspects.\r\n\r\nIf there are ever issues with this test being flaky or failing on new platforms, rather than try and adapt it for all possible platforms, feel free to narrow the range it gets tested on when appropriate. That is not likely to reduce coverage.",
    "type_of_change": "Modification",
    "filename_of_changes": "test_subprocess.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "83",
    "number_of_lines_deleted_vulnerable_to_cve": "15",
    "vulnerable_lines": [
        "// Line_Reference 1564:     @unittest.skipIf(not sysconfig.get_config_var(\"HAVE_VFORK\"),",
        "// Line_Reference 1565:                      \"vfork() not enabled by configure.\")",
        "// Line_Reference 1566:     @mock.patch(\"subprocess._fork_exec\")",
        "// Line_Reference 1567:     def test__use_vfork(self, mock_fork_exec):",
        "// Line_Reference 1568:         self.assertTrue(subprocess._USE_VFORK)  # The default value regardless.",
        "// Line_Reference 1569:         mock_fork_exec.side_effect = RuntimeError(\"just testing args\")",
        "// Line_Reference 1570:         with self.assertRaises(RuntimeError):",
        "// Line_Reference 1571:             subprocess.run([sys.executable, \"-c\", \"pass\"])",
        "// Line_Reference 1572:         mock_fork_exec.assert_called_once()",
        "// Line_Reference 1573:         self.assertTrue(mock_fork_exec.call_args.args[-1])",
        "// Line_Reference 1574:         with mock.patch.object(subprocess, '_USE_VFORK', False):",
        "// Line_Reference 1575:             with self.assertRaises(RuntimeError):",
        "// Line_Reference 1576:                 subprocess.run([sys.executable, \"-c\", \"pass\"])",
        "// Line_Reference 1577:             self.assertFalse(mock_fork_exec.call_args_list[-1].args[-1])",
        "// Line_Reference 1578: "
    ]
}
