{
    "cve_id": "CVE-2020-15173",
    "cve_description": "In ACCEL-PPP (an implementation of PPTP/PPPoE/L2TP/SSTP), there is a buffer overflow when receiving an l2tp control packet ith an AVP which type is a string and no hidden flags, length set to less than 6. If your application is used in open networks or there are untrusted nodes in the network it is highly recommended to apply the patch. The problem was patched with commit 2324bcd5ba12cf28f47357a8f03cd41b7c04c52b As a workaround changes of commit 2324bcd5ba12cf28f47357a8f03cd41b7c04c52b can be applied to older versions.",
    "cve_publish_date": "2020-09-09",
    "cwe_id": "CWE-120",
    "cwe_name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
    "cwe_description": "The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.",
    "commit_message": "l2tp: fix RCE through buffer overflow & fix LE/BE compatibility\n\nUnsufficent checks of valid l2tp header & avp length cause possible\nRCE through buffer overflow, reported by https://github.com/WinMin\nswings & leommxj, Chaitin Security Research Lab. Add missed header\nlength and avp length validation to fix the issue.\n\nOrder of struct bitfields is implementation-defined so current code\ndoesn't play well with big-endian arch. switch to explicit flag bit\nchecking/gathering to fix the issue.\n\nRFC 2661 and 3931 requires that length, seqeuence flags must be set\nand offset flag must not be set, so avp-premissive can't help in\nthis cases.",
    "type_of_change": "Modification",
    "filename_of_changes": "l2tp_prot.h",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "12",
    "number_of_lines_deleted_vulnerable_to_cve": "19",
    "vulnerable_lines": [
        "// Line_Reference 10: \tuint8_t P:1;",
        "// Line_Reference 11: \tuint8_t O:1;",
        "// Line_Reference 12: \tuint8_t reserved2:1;",
        "// Line_Reference 13: \tuint8_t S:1;",
        "// Line_Reference 14: \tuint8_t reserved1:2;",
        "// Line_Reference 15: \tuint8_t L:1;",
        "// Line_Reference 16: \tuint8_t T:1;",
        "// Line_Reference 17: \tuint8_t ver:4;",
        "// Line_Reference 18: \tuint8_t reserved3:4;",
        "// Line_Reference 31: /*#define L2TP_T(hdr) (hdr->flags >> 15)",
        "// Line_Reference 32: #define L2TP_L(hdr) ((hdr->flags >> 14) & 1)",
        "// Line_Reference 33: #define L2TP_S(hdr) ((hdr->flags >> 10) & 1)",
        "// Line_Reference 34: #define L2TP_O(hdr) ((hdr->flags >> 8) & 1)",
        "// Line_Reference 35: #define L2TP_VER(hdr) (hdr->flags & 0xf)*/",
        "// Line_Reference 39: \tuint16_t length:10;",
        "// Line_Reference 40: \tuint16_t reserved:4;",
        "// Line_Reference 41: \tuint16_t H:1;",
        "// Line_Reference 42: \tuint16_t M:1;",
        "// Line_Reference 56: "
    ]
}
