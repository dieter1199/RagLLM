{
    "cve_id": "CVE-2022-3517",
    "cve_description": "A vulnerability was found in the minimatch package. This flaw allows a Regular Expression Denial of Service (ReDoS) when calling the braceExpand function with specific arguments, resulting in a Denial of Service.",
    "cve_publish_date": "2022-10-17",
    "cwe_id": "CWE-1333",
    "cwe_name": "Inefficient Regular Expression Complexity",
    "cwe_description": "The product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles.",
    "commit_message": "Improve redos protection, add many tests\n\n100% line coverage, not quite 100% total though.",
    "type_of_change": "Modification",
    "filename_of_changes": "minimatch.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "74",
    "number_of_lines_deleted_vulnerable_to_cve": "45",
    "vulnerable_lines": [
        "// Line_Reference 4: var path = { sep: '/' }",
        "// Line_Reference 5: try {",
        "// Line_Reference 6:   path = require('path')",
        "// Line_Reference 7: } catch (er) {}",
        "// Line_Reference 9: var GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {}",
        "// Line_Reference 10: var expand = require('brace-expansion')",
        "// Line_Reference 12: var plTypes = {",
        "// Line_Reference 22: var qmark = '[^/]'",
        "// Line_Reference 25: var star = qmark + '*?'",
        "// Line_Reference 30: var twoStarDot = '(?:(?!(?:\\\\\\/|^)(?:\\\\.{1,2})($|\\\\\\/)).)*?'",
        "// Line_Reference 34: var twoStarNoDot = '(?:(?!(?:\\\\\\/|^)\\\\.).)*?'",
        "// Line_Reference 37: var reSpecials = charSet('().*{}+?[]^$\\\\!')",
        "// Line_Reference 48: var slashSplit = /\\/+/",
        "// Line_Reference 61:   var t = {}",
        "// Line_Reference 62:   Object.keys(b).forEach(function (k) {",
        "// Line_Reference 63:     t[k] = b[k]",
        "// Line_Reference 64:   })",
        "// Line_Reference 72:   if (!def || !Object.keys(def).length) return minimatch",
        "// Line_Reference 74:   var orig = minimatch",
        "// Line_Reference 76:   var m = function minimatch (p, pattern, options) {",
        "// Line_Reference 77:     return orig.minimatch(p, pattern, ext(def, options))",
        "// Line_Reference 88:   if (!def || !Object.keys(def).length) return Minimatch",
        "// Line_Reference 93:   if (typeof pattern !== 'string') {",
        "// Line_Reference 94:     throw new TypeError('glob pattern string required')",
        "// Line_Reference 95:   }",
        "// Line_Reference 115:   if (typeof pattern !== 'string') {",
        "// Line_Reference 116:     throw new TypeError('glob pattern string required')",
        "// Line_Reference 117:   }",
        "// Line_Reference 245:   if (typeof pattern === 'undefined') {",
        "// Line_Reference 246:     throw new TypeError('undefined pattern')",
        "// Line_Reference 247:   }",
        "// Line_Reference 249:   if (options.nobrace ||",
        "// Line_Reference 250:     !pattern.match(/\\{.*\\}/)) {",
        "// Line_Reference 270: var SUBPARSE = {}",
        "// Line_Reference 272:   if (pattern.length > 1024 * 64) {",
        "// Line_Reference 273:     throw new TypeError('pattern is too long')",
        "// Line_Reference 274:   }",
        "// Line_Reference 283:   var hasMagic = !!options.nocase",
        "// Line_Reference 335:       case '/':",
        "// Line_Reference 623:   } catch (er) {",
        "// Line_Reference 681:   } catch (ex) {",
        "// Line_Reference 689:   var mm = new Minimatch(pattern, options)",
        "// Line_Reference 903:   } else if (pi === pl) {",
        "// Line_Reference 908:     var emptyFileEnd = (fi === fl - 1) && (file[fi] === '')",
        "// Line_Reference 909:     return emptyFileEnd"
    ]
}
