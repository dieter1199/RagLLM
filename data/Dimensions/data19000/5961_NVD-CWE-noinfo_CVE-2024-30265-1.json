{
    "cve_id": "CVE-2024-30265",
    "cve_description": "Collabora Online is a collaborative online office suite based on LibreOffice technology. Any deployment of voilà dashboard allow local file inclusion. Any file on a filesystem that is readable by the user that runs the voilà dashboard server can be downloaded by someone with network access to the server. Whether this still requires authentication depends on how voilà is deployed. This issue has been patched in 0.2.17, 0.3.8, 0.4.4 and 0.5.6.\n",
    "cve_publish_date": "2024-04-03",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "refactor: reuse voila to be a server extension + tree view + autoreload\n\nThe voila handler can be used both in the standalone version, as well as\njupyter server extension. The three handler which is based on the notebook\ncode shows a list of directories and notebooks.\nFor development purposes the watchdog handler will send a reload message\nover the websocket when either the javascript, templates, or the notebook\nfile is modified, or when the server autoreloads due to code changes.\n(Use with `voila --autoreload=True`)",
    "type_of_change": "Modification",
    "filename_of_changes": "app.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "53",
    "number_of_lines_deleted_vulnerable_to_cve": "65",
    "vulnerable_lines": [
        "// Line_Reference 14: from pathlib import Path",
        "// Line_Reference 15: ",
        "// Line_Reference 19: from jupyter_server.utils import url_path_join, url_escape",
        "// Line_Reference 20: from jupyter_server.base.handlers import JupyterHandler",
        "// Line_Reference 22: from jupyter_server.services.kernels.handlers import KernelHandler, MainKernelHandler, ZMQChannelsHandler",
        "// Line_Reference 23: ",
        "// Line_Reference 24: from jupyter_client.jsonutil import date_default",
        "// Line_Reference 25: ",
        "// Line_Reference 26: import nbformat",
        "// Line_Reference 27: from nbconvert.preprocessors.execute import executenb",
        "// Line_Reference 28: from nbconvert import HTMLExporter",
        "// Line_Reference 29: ",
        "// Line_Reference 30: ROOT = Path(os.path.dirname(__file__))",
        "// Line_Reference 31: DEFAULT_STATIC_ROOT = ROOT / 'static'",
        "// Line_Reference 32: TEMPLATE_ROOT = ROOT / 'templates'",
        "// Line_Reference 33: ",
        "// Line_Reference 34: class VoilaHandler(JupyterHandler):",
        "// Line_Reference 35: ",
        "// Line_Reference 36:     def initialize(self, notebook=None, strip_sources=False):",
        "// Line_Reference 37:         self.notebook = notebook",
        "// Line_Reference 38:         self.strip_sources = strip_sources",
        "// Line_Reference 39: ",
        "// Line_Reference 40:     @tornado.web.authenticated",
        "// Line_Reference 41:     @tornado.gen.coroutine",
        "// Line_Reference 42:     def get(self):",
        "// Line_Reference 44:         # Ignore requested kernel name and make use of the one specified in the notebook.",
        "// Line_Reference 45:         kernel_name = self.notebook.metadata.get('kernelspec', {}).get('name', self.kernel_manager.default_kernel_name)",
        "// Line_Reference 46: ",
        "// Line_Reference 47:         # Launch kernel and execute notebook.",
        "// Line_Reference 48:         kernel_id = yield tornado.gen.maybe_future(self.kernel_manager.start_kernel(kernel_name=kernel_name))",
        "// Line_Reference 49:         km = self.kernel_manager.get_kernel(kernel_id)",
        "// Line_Reference 50:         result = executenb(self.notebook, km=km)",
        "// Line_Reference 51: ",
        "// Line_Reference 52:         # render notebook to html",
        "// Line_Reference 53:         resources = dict(kernel_id=kernel_id)",
        "// Line_Reference 54:         html, resources = HTMLExporter(template_file=str(TEMPLATE_ROOT / 'voila.tpl'), exclude_input=self.strip_sources,",
        "// Line_Reference 55:                                        exclude_output_prompt=self.strip_sources, exclude_input_prompt=self.strip_sources",
        "// Line_Reference 56:                                       ).from_notebook_node(result, resources=resources)",
        "// Line_Reference 57: ",
        "// Line_Reference 58:         # Compose reply",
        "// Line_Reference 59:         self.set_header('Content-Type', 'text/html')",
        "// Line_Reference 60:         self.write(html)",
        "// Line_Reference 76:         notebook_filename:",
        "// Line_Reference 88:         str(DEFAULT_STATIC_ROOT),",
        "// Line_Reference 95:         'strip_sources': 'Voila.strip_sources'",
        "// Line_Reference 119:         try:",
        "// Line_Reference 120:             notebook_filename = self.extra_args[0]",
        "// Line_Reference 121:         except IndexError:",
        "// Line_Reference 122:             self.log.critical('Bad command line parameters.')",
        "// Line_Reference 123:             self.log.critical('Missing NOTEBOOK_FILENAME parameter.')",
        "// Line_Reference 124:             self.log.critical('Run `voila --help` for help on command line parameters.')",
        "// Line_Reference 125:             exit(1)",
        "// Line_Reference 126:         self.notebook_filename = notebook_filename",
        "// Line_Reference 146:         notebook = nbformat.read(self.notebook_filename, as_version=4)",
        "// Line_Reference 147: ",
        "// Line_Reference 149:             (",
        "// Line_Reference 150:                 r'/',",
        "// Line_Reference 151:                 VoilaHandler,",
        "// Line_Reference 152:                 {",
        "// Line_Reference 153:                     'notebook': notebook,",
        "// Line_Reference 154:                     'strip_sources': self.strip_sources",
        "// Line_Reference 155:                 }",
        "// Line_Reference 156:             ),",
        "// Line_Reference 160:                 r\"/static/(.*)\",",
        "// Line_Reference 172:             allow_remote_access=True"
    ]
}
