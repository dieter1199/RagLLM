{
    "cve_id": "CVE-2023-1545",
    "cve_description": "SQL Injection in GitHub repository nilsteampassnet/teampass prior to 3.0.0.23.",
    "cve_publish_date": "2023-03-21",
    "cwe_id": "CWE-89",
    "cwe_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
    "cwe_description": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.",
    "commit_message": "3.0.0.22\n\nFix CWE-89: SQL Injection in API (Sonia Zorba)",
    "type_of_change": "Modification",
    "filename_of_changes": "AuthModel.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "49",
    "number_of_lines_deleted_vulnerable_to_cve": "20",
    "vulnerable_lines": [
        "// Line_Reference 44:         // Check if user exists",
        "// Line_Reference 45:         $userInfoRes = $this->select(\"SELECT id, pw, public_key, private_key, personal_folder, fonction_id, groupes_visibles, groupes_interdits, user_api_key FROM \" . prefixTable('users') . \" WHERE login='\".$login.\"'\");",
        "// Line_Reference 46:         $userInfoRes[0]['special'] = '';",
        "// Line_Reference 47:         $userInfo = $userInfoRes[0];",
        "// Line_Reference 49:         // Check password",
        "// Line_Reference 50:         include_once API_ROOT_PATH . '/../sources/SplClassLoader.php';",
        "// Line_Reference 51:         $pwdlib = new SplClassLoader('PasswordLib', API_ROOT_PATH . '/../includes/libraries');",
        "// Line_Reference 52:         $pwdlib->register();",
        "// Line_Reference 53:         $pwdlib = new PasswordLib\\PasswordLib();",
        "// Line_Reference 54:         if ($pwdlib->verifyPasswordHash($password, $userInfo['pw']) === true) {",
        "// Line_Reference 55:             // Correct credentials",
        "// Line_Reference 56:             // Now check apikey",
        "// Line_Reference 57:             // We check if it is the correct user api or if it is a generic api key",
        "// Line_Reference 58:             $apiInfo = $this->select(\"SELECT count(*) FROM \" . prefixTable('api') . \" WHERE value='\".$apikey.\"'\");",
        "// Line_Reference 59:             if ($apikey === $userInfo['user_api_key'] || (int) $apiInfo[0]['count(*)'] === 1) {",
        "// Line_Reference 61:                 $privateKeyClear = decryptPrivateKey($password, (string) $userInfo['private_key']); //prepareUserEncryptionKeys($userInfo, $password);",
        "// Line_Reference 69:                     $login,",
        "// Line_Reference 76:                 return [\"error\" => \"Login failed.\", \"apikey\" => \"Not valid\"];",
        "// Line_Reference 78:         } else {",
        "// Line_Reference 79:             return [\"error\" => \"Login failed.\", \"password\" => $password];"
    ]
}
