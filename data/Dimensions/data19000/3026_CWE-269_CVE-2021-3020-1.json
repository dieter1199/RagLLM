{
    "cve_id": "CVE-2021-3020",
    "cve_description": "An issue was discovered in ClusterLabs Hawk (aka HA Web Konsole) through 2.3.0-15. It ships the binary hawk_invoke (built from tools/hawk_invoke.c), intended to be used as a setuid program. This allows the hacluster user to invoke certain commands as root (with an attempt to limit this to safe combinations). This user is able to execute an interactive \"shell\" that isn't limited to the commands specified in hawk_invoke, allowing escalation to root.",
    "cve_publish_date": "2022-08-26",
    "cwe_id": "CWE-269",
    "cwe_name": "Improper Privilege Management",
    "cwe_description": "The product does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.",
    "commit_message": "Fix: bootstrap: setup authorized ssh access for hacluster(CVE-2020-35459, bsc#1179999; CVE-2021-3020, bsc#1180571)",
    "type_of_change": "Modification",
    "filename_of_changes": "bootstrap.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "76",
    "number_of_lines_deleted_vulnerable_to_cve": "25",
    "vulnerable_lines": [
        "// Line_Reference 45: RSA_PRIVATE_KEY = \"/root/.ssh/id_rsa\"",
        "// Line_Reference 46: RSA_PUBLIC_KEY = \"/root/.ssh/id_rsa.pub\"",
        "// Line_Reference 47: AUTHORIZED_KEYS_FILE = \"/root/.ssh/authorized_keys\"",
        "// Line_Reference 1137:     configure_local_ssh_key()",
        "// Line_Reference 1140: def configure_local_ssh_key():",
        "// Line_Reference 1144:     If /root/.ssh/id_rsa not exist, generate a new one",
        "// Line_Reference 1145:     Add /root/.ssh/id_rsa.pub to /root/.ssh/authorized_keys anyway, make sure itself authorized",
        "// Line_Reference 1147:     if not os.path.exists(RSA_PRIVATE_KEY):",
        "// Line_Reference 1148:         status(\"Generating SSH key\")",
        "// Line_Reference 1149:         invoke(\"ssh-keygen -q -f {} -C 'Cluster Internal on {}' -N ''\".format(RSA_PRIVATE_KEY, utils.this_node()))",
        "// Line_Reference 1150:     if not os.path.exists(AUTHORIZED_KEYS_FILE):",
        "// Line_Reference 1151:         open(AUTHORIZED_KEYS_FILE, 'w').close()",
        "// Line_Reference 1152:     append_unique(RSA_PUBLIC_KEY, AUTHORIZED_KEYS_FILE)",
        "// Line_Reference 1874:     configure_local_ssh_key()",
        "// Line_Reference 1875:     swap_public_ssh_key(seed_host)",
        "// Line_Reference 1886: def swap_public_ssh_key(remote_node):",
        "// Line_Reference 1891:     if utils.check_ssh_passwd_need(remote_node):",
        "// Line_Reference 1893:         status(\"Configuring SSH passwordless with root@{}\".format(remote_node))",
        "// Line_Reference 1895:         append_to_remote_file(RSA_PUBLIC_KEY, remote_node, AUTHORIZED_KEYS_FILE)",
        "// Line_Reference 1899:         public_key_file_remote = fetch_public_key_from_remote_node(remote_node)",
        "// Line_Reference 1906:     append_unique(public_key_file_remote, AUTHORIZED_KEYS_FILE)",
        "// Line_Reference 1909: def fetch_public_key_from_remote_node(node):",
        "// Line_Reference 1919:         public_key_file = \"/root/.ssh/{}.pub\".format(key)",
        "// Line_Reference 2131:         swap_public_ssh_key(node)",
        "// Line_Reference 2490:     if corosync_active:"
    ]
}
