{
    "cve_id": "CVE-2024-32962",
    "cve_description": "xml-crypto is an xml digital signature and encryption library for Node.js. In affected versions the default configuration does not check authorization of the signer, it only checks the validity of the signature per section 3.2.2 of the w3 xmldsig-core-20080610 spec. As such, without additional validation steps, the default configuration allows a malicious actor to re-sign an XML document, place the certificate in a `<KeyInfo />` element, and pass `xml-crypto` default validation checks. As a result `xml-crypto` trusts by default any certificate provided via digitally signed XML document's `<KeyInfo />`. `xml-crypto` prefers to use any certificate provided via digitally signed XML document's `<KeyInfo />` even if library was configured to use specific certificate (`publicCert`) for signature verification purposes.  An attacker can spoof signature verification by modifying XML document and replacing existing signature with signature generated with malicious private key (created by attacker) and by attaching that private key's certificate to `<KeyInfo />` element. This vulnerability is combination of changes introduced to `4.0.0` on pull request 301 / commit `c2b83f98` and has been addressed in version 6.0.0 with pull request 445 / commit `21201723d`. Users are advised to upgrade. Users unable to upgrade may either check the certificate extracted via `getCertFromKeyInfo` against trusted certificates before accepting the results of the validation or set `xml-crypto's getCertFromKeyInfo` to `() => undefined` forcing `xml-crypto` to use an explicitly configured `publicCert` or `privateKey` for signature verification.",
    "cve_publish_date": "2024-05-02",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Add support for <X509Certificate /> in <KeyInfo />; remove `KeyInfoProvider` (#301)\n\n* Replace `KeyInfoProvider` with plugable methods\r\n\r\nCo-authored-by: Ivan <admin@clab.hr>\r\nCo-authored-by: shunkica <ivannovak90@gmail.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "index.d.ts",
    "code_language": "TypeScript",
    "number_of_lines_added_for_mitigation": "60",
    "number_of_lines_deleted_vulnerable_to_cve": "86",
    "vulnerable_lines": [
        "// Line_Reference 134:   static CanonicalizationAlgorithms: {",
        "// Line_Reference 138:   static HashAlgorithms: { [uri in HashAlgorithmType]: new () => HashAlgorithm };",
        "// Line_Reference 140:   static SignatureAlgorithms: { [uri in SignatureAlgorithmType]: new () => SignatureAlgorithm };",
        "// Line_Reference 152:   signingKey: Buffer | string;",
        "// Line_Reference 281: }",
        "// Line_Reference 283: /**",
        "// Line_Reference 284:  * KeyInfoProvider interface represents the structure for managing keys",
        "// Line_Reference 285:  * and KeyInfo section in XML data when dealing with XML digital signatures.",
        "// Line_Reference 286:  */",
        "// Line_Reference 287: export interface KeyInfoProvider {",
        "// Line_Reference 289:    * Method to return the key based on the contents of the specified KeyInfo.",
        "// Line_Reference 291:    * @param keyInfo - An optional array of XML Nodes.",
        "// Line_Reference 292:    * @return A string or Buffer representing the key.",
        "// Line_Reference 293:    */",
        "// Line_Reference 294:   getKey(keyInfo?: Node[]): string | Buffer;",
        "// Line_Reference 295: ",
        "// Line_Reference 296:   /**",
        "// Line_Reference 297:    * Method to return an XML string representing the contents of a KeyInfo element.",
        "// Line_Reference 299:    * @param key - An optional string representing the key.",
        "// Line_Reference 300:    * @param prefix - An optional string representing the namespace alias.",
        "// Line_Reference 301:    * @return An XML string representation of the contents of a KeyInfo element.",
        "// Line_Reference 303:   getKeyInfo(key?: string, prefix?: string): string;",
        "// Line_Reference 306:    * An optional dictionary of attributes which will be added to the KeyInfo element.",
        "// Line_Reference 308:   attrs?: { [key: string]: string };",
        "// Line_Reference 311: /**",
        "// Line_Reference 312:  * The FileKeyInfo class loads the certificate from the file provided in the constructor.",
        "// Line_Reference 313:  */",
        "// Line_Reference 314: export class FileKeyInfo implements KeyInfoProvider {",
        "// Line_Reference 316:    * The path to the file from which the certificate is to be read.",
        "// Line_Reference 318:   file: string;",
        "// Line_Reference 321:    * Initializes a new instance of the FileKeyInfo class.",
        "// Line_Reference 322:    *",
        "// Line_Reference 323:    * @param file - An optional string representing the file path of the certificate.",
        "// Line_Reference 325:   constructor(file?: string);",
        "// Line_Reference 328:    * Return the loaded certificate. The certificate is read from the file specified in the constructor.",
        "// Line_Reference 329:    * The keyInfo parameter is ignored. (not implemented)",
        "// Line_Reference 331:    * @param keyInfo - (not used) An optional array of XML Elements.",
        "// Line_Reference 332:    * @return A Buffer representing the certificate.",
        "// Line_Reference 333:    */",
        "// Line_Reference 334:   getKey(keyInfo?: Node[]): Buffer;",
        "// Line_Reference 335: ",
        "// Line_Reference 336:   /**",
        "// Line_Reference 337:    * Builds the contents of a KeyInfo element as an XML string.",
        "// Line_Reference 339:    * Currently, this returns exactly one empty X509Data element",
        "// Line_Reference 340:    * (e.g. \"<X509Data></X509Data>\"). The resultant X509Data element will be",
        "// Line_Reference 341:    * prefaced with a namespace alias if a value for the prefix argument",
        "// Line_Reference 342:    * is provided. In example, if the value of the prefix argument is 'foo', then",
        "// Line_Reference 343:    * the resultant XML string will be \"<foo:X509Data></foo:X509Data>\"",
        "// Line_Reference 345:    * @param key (not used) the signing/private key as a string",
        "// Line_Reference 346:    * @param  prefix an optional namespace alias to be used for the generated XML",
        "// Line_Reference 347:    * @return an XML string representation of the contents of a KeyInfo element",
        "// Line_Reference 348:    */",
        "// Line_Reference 349:   getKeyInfo(key?: string, prefix?: string): string;",
        "// Line_Reference 350: }",
        "// Line_Reference 351: ",
        "// Line_Reference 352: /**",
        "// Line_Reference 353:  * The StringKeyInfo class loads the certificate from the string provided in the constructor.",
        "// Line_Reference 354:  */",
        "// Line_Reference 355: export class StringKeyInfo implements KeyInfoProvider {",
        "// Line_Reference 356:   /**",
        "// Line_Reference 357:    * The certificate in string form.",
        "// Line_Reference 358:    */",
        "// Line_Reference 359:   key: string;",
        "// Line_Reference 360: ",
        "// Line_Reference 361:   /**",
        "// Line_Reference 362:    * Initializes a new instance of the StringKeyInfo class.",
        "// Line_Reference 363:    * @param key - An optional string representing the certificate.",
        "// Line_Reference 364:    */",
        "// Line_Reference 365:   constructor(key?: string);",
        "// Line_Reference 366: ",
        "// Line_Reference 367:   /**",
        "// Line_Reference 368:    * Returns the certificate loaded in the constructor.",
        "// Line_Reference 369:    * The keyInfo parameter is ignored. (not implemented)",
        "// Line_Reference 371:    * @param keyInfo (not used) an array with exactly one KeyInfo element",
        "// Line_Reference 372:    * @return the signing certificate as a string",
        "// Line_Reference 374:   getKey(keyInfo?: Node[]): string;",
        "// Line_Reference 377:    * Builds the contents of a KeyInfo element as an XML string.",
        "// Line_Reference 379:    * Currently, this returns exactly one empty X509Data element",
        "// Line_Reference 380:    * (e.g. \"<X509Data></X509Data>\"). The resultant X509Data element will be",
        "// Line_Reference 381:    * prefaced with a namespace alias if a value for the prefix argument",
        "// Line_Reference 382:    * is provided. In example, if the value of the prefix argument is 'foo', then",
        "// Line_Reference 383:    * the resultant XML string will be \"<foo:X509Data></foo:X509Data>\"",
        "// Line_Reference 385:    * @param key (not used) the signing/private key as a string",
        "// Line_Reference 386:    * @param  prefix an optional namespace alias to be used for the generated XML",
        "// Line_Reference 387:    * @return an XML string representation of the contents of a KeyInfo element",
        "// Line_Reference 389:   getKeyInfo(key?: string, prefix?: string): string;"
    ]
}
