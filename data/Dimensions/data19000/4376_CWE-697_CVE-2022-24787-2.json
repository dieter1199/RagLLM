{
    "cve_id": "CVE-2022-24787",
    "cve_description": "Vyper is a Pythonic Smart Contract Language for the Ethereum Virtual Machine. In version 0.3.1 and prior, bytestrings can have dirty bytes in them, resulting in the word-for-word comparisons giving incorrect results. Even without dirty nonzero bytes, two bytestrings can compare to equal if one ends with `\"\\x00\"` because there is no comparison of the length. A patch is available and expected to be part of the 0.3.2 release. There are currently no known workarounds.",
    "cve_publish_date": "2022-04-04",
    "cwe_id": "CWE-697",
    "cwe_name": "Incorrect Comparison",
    "cwe_description": "The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.",
    "commit_message": "Merge pull request from GHSA-7vrm-3jc8-5wwm\n\n* add more tests for string comparison\n\nexplicitly test the codepath with <= 32 bytes\n\n* refactor keccak256 helper a bit\n\n* fix bytestring equality\n\nexisting bytestring equality checks do not check length equality or for\ndirty bytes.",
    "type_of_change": "Modification",
    "filename_of_changes": "expr.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "7",
    "number_of_lines_deleted_vulnerable_to_cve": "24",
    "vulnerable_lines": [
        "// Line_Reference 8:     LOAD,",
        "// Line_Reference 9:     bytes_data_ptr,",
        "// Line_Reference 804:             length_mismatch = left.typ.maxlen != right.typ.maxlen",
        "// Line_Reference 805:             left_over_32 = left.typ.maxlen > 32",
        "// Line_Reference 806:             right_over_32 = right.typ.maxlen > 32",
        "// Line_Reference 807: ",
        "// Line_Reference 808:             if length_mismatch or left_over_32 or right_over_32:",
        "// Line_Reference 809:                 left_keccak = keccak256_helper(self.expr, left, self.context)",
        "// Line_Reference 810:                 right_keccak = keccak256_helper(self.expr, right, self.context)",
        "// Line_Reference 811: ",
        "// Line_Reference 812:                 if op == \"eq\" or op == \"ne\":",
        "// Line_Reference 813:                     return IRnode.from_list([op, left_keccak, right_keccak], typ=\"bool\")",
        "// Line_Reference 814: ",
        "// Line_Reference 815:                 else:",
        "// Line_Reference 816:                     return",
        "// Line_Reference 819: ",
        "// Line_Reference 820:                 def load_bytearray(side):",
        "// Line_Reference 821:                     return LOAD(bytes_data_ptr(side))",
        "// Line_Reference 822: ",
        "// Line_Reference 823:                 return IRnode.from_list(",
        "// Line_Reference 824:                     # CMC 2022-03-24 TODO investigate this.",
        "// Line_Reference 825:                     [op, load_bytearray(left), load_bytearray(right)],",
        "// Line_Reference 826:                     typ=\"bool\",",
        "// Line_Reference 827:                 )"
    ]
}
