{
    "cve_id": "CVE-2011-4914",
    "cve_description": "The ROSE protocol implementation in the Linux kernel before 2.6.39 does not verify that certain data-length values are consistent with the amount of data sent, which might allow remote attackers to obtain sensitive information from kernel memory or cause a denial of service (out-of-bounds read) via crafted data to a ROSE socket.",
    "cve_publish_date": "2012-06-21",
    "cwe_id": "CWE-20",
    "cwe_name": "Improper Input Validation",
    "cwe_description": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.",
    "commit_message": "rose: Add length checks to CALL_REQUEST parsing\n\nDefine some constant offsets for CALL_REQUEST based on the description\nat <http://www.techfest.com/networking/wan/x25plp.htm> and the\ndefinition of ROSE as using 10-digit (5-byte) addresses.  Use them\nconsistently.  Validate all implicit and explicit facilities lengths.\nValidate the address length byte rather than either trusting or\nassuming its value.\n\nSigned-off-by: Ben Hutchings <ben@decadent.org.uk>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "type_of_change": "Modification",
    "filename_of_changes": "rose_subr.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "57",
    "number_of_lines_deleted_vulnerable_to_cve": "34",
    "vulnerable_lines": [
        "// Line_Reference 145: \t\t*dptr++ = 0xAA;",
        "// Line_Reference 368: int rose_parse_facilities(unsigned char *p,",
        "// Line_Reference 375: \tif (facilities_len == 0)",
        "// Line_Reference 378: \twhile (facilities_len > 0) {",
        "// Line_Reference 379: \t\tif (*p == 0x00) {",
        "// Line_Reference 380: \t\t\tfacilities_len--;",
        "// Line_Reference 381: \t\t\tp++;",
        "// Line_Reference 382: ",
        "// Line_Reference 383: \t\t\tswitch (*p) {",
        "// Line_Reference 384: \t\t\tcase FAC_NATIONAL:\t\t/* National */",
        "// Line_Reference 385: \t\t\t\tlen = rose_parse_national(p + 1, facilities, facilities_len - 1);",
        "// Line_Reference 386: \t\t\t\tif (len < 0)",
        "// Line_Reference 387: \t\t\t\t\treturn 0;",
        "// Line_Reference 388: \t\t\t\tfacilities_len -= len + 1;",
        "// Line_Reference 389: \t\t\t\tp += len + 1;",
        "// Line_Reference 390: \t\t\t\tbreak;",
        "// Line_Reference 391: ",
        "// Line_Reference 392: \t\t\tcase FAC_CCITT:\t\t/* CCITT */",
        "// Line_Reference 393: \t\t\t\tlen = rose_parse_ccitt(p + 1, facilities, facilities_len - 1);",
        "// Line_Reference 394: \t\t\t\tif (len < 0)",
        "// Line_Reference 395: \t\t\t\t\treturn 0;",
        "// Line_Reference 396: \t\t\t\tfacilities_len -= len + 1;",
        "// Line_Reference 397: \t\t\t\tp += len + 1;",
        "// Line_Reference 398: \t\t\t\tbreak;",
        "// Line_Reference 399: ",
        "// Line_Reference 400: \t\t\tdefault:",
        "// Line_Reference 401: \t\t\t\tprintk(KERN_DEBUG \"ROSE: rose_parse_facilities - unknown facilities family %02X\\n\", *p);",
        "// Line_Reference 402: \t\t\t\tfacilities_len--;",
        "// Line_Reference 403: \t\t\t\tp++;",
        "// Line_Reference 404: \t\t\t\tbreak;",
        "// Line_Reference 405: \t\t\t}",
        "// Line_Reference 406: \t\t} else",
        "// Line_Reference 407: \t\t\tbreak;\t/* Error in facilities format */",
        "// Line_Reference 410: \treturn 1;"
    ]
}
