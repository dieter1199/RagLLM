{
    "cve_id": "CVE-2022-1379",
    "cve_description": "URL Restriction Bypass in GitHub repository plantuml/plantuml prior to V1.2022.5. An attacker can abuse this to bypass URL restrictions that are imposed by the different security profiles and achieve server side request forgery (SSRF). This allows accessing restricted internal resources/servers or sending requests to third party servers.",
    "cve_publish_date": "2022-05-14",
    "cwe_id": "CWE-918",
    "cwe_name": "Server-Side Request Forgery (SSRF)",
    "cwe_description": "The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.",
    "commit_message": "Import version 1.2022.5",
    "type_of_change": "Modification",
    "filename_of_changes": "GroupPngMakerState.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "13",
    "number_of_lines_deleted_vulnerable_to_cve": "47",
    "vulnerable_lines": [
        "// Line_Reference 43: import net.sourceforge.plantuml.ColorParam;",
        "// Line_Reference 44: import net.sourceforge.plantuml.FontParam;",
        "// Line_Reference 46: import net.sourceforge.plantuml.UseStyle;",
        "// Line_Reference 65: import net.sourceforge.plantuml.skin.rose.Rose;",
        "// Line_Reference 131: \t\treturn StyleSignatureBasic.of(SName.root, SName.element, SName.stateDiagram, SName.state).withTOBECHANGED(group.getStereotype())",
        "// Line_Reference 132: \t\t\t\t.getMergedStyle(diagram.getSkinParam().getCurrentStyleBuilder());",
        "// Line_Reference 139: \t\tfinal FontConfiguration fontConfiguration;",
        "// Line_Reference 140: \t\tfinal double rounded;",
        "// Line_Reference 141: \t\tdouble shadowing = 0;",
        "// Line_Reference 142: ",
        "// Line_Reference 143: \t\tif (UseStyle.useBetaStyle()) {",
        "// Line_Reference 144: \t\t\trounded = getStyleState().value(PName.RoundCorner).asDouble();",
        "// Line_Reference 145: \t\t\tshadowing = getStyleState().value(PName.Shadowing).asDouble();",
        "// Line_Reference 146: \t\t\tfontConfiguration = getStyleStateHeader().getFontConfiguration(skinParam.getThemeStyle(),",
        "// Line_Reference 147: \t\t\t\t\tskinParam.getIHtmlColorSet());",
        "// Line_Reference 148: \t\t} else {",
        "// Line_Reference 149: \t\t\trounded = IEntityImage.CORNER;",
        "// Line_Reference 150: \t\t\tfontConfiguration = FontConfiguration.create(skinParam, FontParam.STATE, group.getStereotype());",
        "// Line_Reference 151: \t\t\tif (skinParam.shadowing(group.getStereotype()))",
        "// Line_Reference 152: \t\t\t\tshadowing = 3.0;",
        "// Line_Reference 153: \t\t}",
        "// Line_Reference 154: ",
        "// Line_Reference 178: \t\t\tif (UseStyle.useBetaStyle())",
        "// Line_Reference 179: \t\t\t\tborderColor = getStyleState().value(PName.LineColor).asColor(skinParam.getThemeStyle(),",
        "// Line_Reference 180: \t\t\t\t\t\tskinParam.getIHtmlColorSet());",
        "// Line_Reference 181: \t\t\telse",
        "// Line_Reference 182: \t\t\t\tborderColor = getColor(ColorParam.stateBorder, group.getStereotype());",
        "// Line_Reference 185: \t\tfinal HColor tmp = group.getColors().getColor(ColorType.BACK);",
        "// Line_Reference 186: \t\tfinal HColor backColor;",
        "// Line_Reference 187: \t\tif (tmp == null)",
        "// Line_Reference 188: \t\t\tif (UseStyle.useBetaStyle())",
        "// Line_Reference 189: \t\t\t\tbackColor = getStyleState().value(PName.BackGroundColor).asColor(skinParam.getThemeStyle(),",
        "// Line_Reference 190: \t\t\t\t\t\tskinParam.getIHtmlColorSet());",
        "// Line_Reference 191: \t\t\telse",
        "// Line_Reference 192: \t\t\t\tbackColor = getColor(ColorParam.stateBackground, stereo);",
        "// Line_Reference 193: \t\telse",
        "// Line_Reference 194: \t\t\tbackColor = tmp;",
        "// Line_Reference 198: \t\t\tif (UseStyle.useBetaStyle())",
        "// Line_Reference 199: \t\t\t\tstroke = getStyleState().getStroke();",
        "// Line_Reference 200: \t\t\telse",
        "// Line_Reference 201: \t\t\t\tstroke = new UStroke(1.5);",
        "// Line_Reference 239: \tprivate final Rose rose = new Rose();",
        "// Line_Reference 240: ",
        "// Line_Reference 241: \tprivate HColor getColor(ColorParam colorParam, Stereotype stereo) {",
        "// Line_Reference 242: \t\tfinal ISkinParam skinParam = diagram.getSkinParam();",
        "// Line_Reference 243: \t\treturn rose.getHtmlColor(skinParam, stereo, colorParam);",
        "// Line_Reference 244: \t}"
    ]
}
