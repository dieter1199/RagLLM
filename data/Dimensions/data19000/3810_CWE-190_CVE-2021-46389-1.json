{
    "cve_id": "CVE-2021-46389",
    "cve_description": "IIPImage High Resolution Streaming Image Server prior to commit 882925b295a80ec992063deffc2a3b0d803c3195 is affected by an integer overflow in iipsrv.fcgi through malformed HTTP query parameters.",
    "cve_publish_date": "2022-02-07",
    "cwe_id": "CWE-190",
    "cwe_name": "Integer Overflow or Wraparound",
    "cwe_description": "The product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number.",
    "commit_message": "Added verification that image has been set in SPECTRA.cc and check on the validity of the requested tile resolution in JTL.cc. Fixes a couple of the crash conditions reported in https://github.com/ruven/iipsrv/issues/223",
    "type_of_change": "Modification",
    "filename_of_changes": "JTL.cc",
    "code_language": "C++",
    "number_of_lines_added_for_mitigation": "18",
    "number_of_lines_deleted_vulnerable_to_cve": "13",
    "vulnerable_lines": [
        "// Line_Reference 4:     Copyright (C) 2006-2021 Ruven Pillay.",
        "// Line_Reference 54:     int num_res = (*session->image)->getNumResolutions();",
        "// Line_Reference 65:   if( (resolution<0) || (tile<0) ){",
        "// Line_Reference 123:   int num_res = (*session->image)->getNumResolutions();",
        "// Line_Reference 124:   unsigned int im_width = (*session->image)->image_widths[num_res-resolution-1];",
        "// Line_Reference 125:   unsigned int im_height = (*session->image)->image_heights[num_res-resolution-1];",
        "// Line_Reference 126:   float dpi_x = (*session->image)->dpi_x * (float) im_width / (float) (*session->image)->getImageWidth();",
        "// Line_Reference 127:   float dpi_y = (*session->image)->dpi_y * (float) im_height / (float) (*session->image)->getImageHeight();",
        "// Line_Reference 128:   compressor->setResolution( dpi_x, dpi_y, (*session->image)->dpi_units );",
        "// Line_Reference 129: ",
        "// Line_Reference 130:   if( session->loglevel >= 5 ){",
        "// Line_Reference 131:     *(session->logfile) << \"JTL :: Setting physical resolution of tile to \" <<  dpi_x << \" x \" << dpi_y",
        "// Line_Reference 132:                         << ( ((*session->image)->dpi_units==1) ? \" pixels/inch\" : \" pixels/cm\" ) << endl;"
    ]
}
