{
    "cve_id": "CVE-2024-38368",
    "cve_description": "trunk.cocoapods.org is the authentication server for the CoacoaPods dependency manager. A vulnerability affected older pods which migrated from the pre-2014 pull request workflow to trunk. If the pods had never been claimed then it was still possible to do so. It was also possible to have all owners removed from a pod, and that made the pod available for the same claiming system. This was patched server-side in commit 71be5440906b6bdfbc0bcc7f8a9fec33367ea0f4 in September 2023.",
    "cve_publish_date": "2024-07-01",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Drop the claims feature",
    "type_of_change": "Modification",
    "filename_of_changes": "claims_controller_spec.rb",
    "code_language": "Ruby",
    "number_of_lines_added_for_mitigation": "1",
    "number_of_lines_deleted_vulnerable_to_cve": "120",
    "vulnerable_lines": [
        "// Line_Reference 4:   describe ClaimsController, 'when claiming pods' do",
        "// Line_Reference 5:     seed_unclaimed",
        "// Line_Reference 6: ",
        "// Line_Reference 7:     it 'renders a new claim form' do",
        "// Line_Reference 8:       get '/new'",
        "// Line_Reference 9:       last_response.status.should == 200",
        "// Line_Reference 10:       form = response_doc.css('form').first",
        "// Line_Reference 11:       form['action'].should == '/claims'",
        "// Line_Reference 12:       form['method'].should == 'POST'",
        "// Line_Reference 13:     end",
        "// Line_Reference 14: ",
        "// Line_Reference 15:     it 'does not create an owner if no pods are specified' do",
        "// Line_Reference 16:       lambda do",
        "// Line_Reference 17:         post '/', :owner => { :email => 'appie@example.com', :name => 'Appie Duran' }, :pods => []",
        "// Line_Reference 18:       end.should.not.change { Owner.count }",
        "// Line_Reference 19:       last_response.status.should == 200",
        "// Line_Reference 20:       form = response_doc.css('form').first",
        "// Line_Reference 21:       form.css('input[name=\"owner[email]\"]').first['value'].should == 'appie@example.com'",
        "// Line_Reference 22:       form.css('input[name=\"owner[name]\"]').first['value'].should == 'Appie Duran'",
        "// Line_Reference 23:     end",
        "// Line_Reference 24: ",
        "// Line_Reference 25:     before do",
        "// Line_Reference 26:       @pod = Owner.unclaimed.add_pod(:name => 'AFNetworking')",
        "// Line_Reference 27:     end",
        "// Line_Reference 28: ",
        "// Line_Reference 29:     it 'creates an owner and assigns it to the claimed pods' do",
        "// Line_Reference 30:       lambda do",
        "// Line_Reference 31:         post '/', :owner => { :email => 'appie@example.com', :name => 'Appie Duran' }, :pods => ['AFNetworking']",
        "// Line_Reference 32:       end.should.change { Owner.count }",
        "// Line_Reference 33:       owner = Owner.find_by_email('appie@example.com')",
        "// Line_Reference 34:       owner.name.should == 'Appie Duran'",
        "// Line_Reference 35:       @pod.reload.owners.should == [owner]",
        "// Line_Reference 36:     end",
        "// Line_Reference 37: ",
        "// Line_Reference 38:     it 'finds an existing owner and assigns it to the claimed pods' do",
        "// Line_Reference 39:       owner = Owner.create(:email => 'appie@example.com', :name => 'Appie Duran')",
        "// Line_Reference 40:       lambda do",
        "// Line_Reference 41:         post '/', :owner => { :email => 'appie@example.com' }, :pods => ['AFNetworking']",
        "// Line_Reference 42:       end.should.not.change { Owner.count }",
        "// Line_Reference 43:       @pod.reload.owners.should == [owner]",
        "// Line_Reference 44:     end",
        "// Line_Reference 45: ",
        "// Line_Reference 46:     it \"finds an existing owner and doesn't update its name\" do",
        "// Line_Reference 47:       owner = Owner.create(:email => 'appie@example.com', :name => 'Appie Duran')",
        "// Line_Reference 48:       post '/', :owner => { :email => 'appie@example.com', :name => 'Appiepocalypse' }, :pods => ['AFNetworking']",
        "// Line_Reference 49:       owner.reload.name.should == 'Appie Duran'",
        "// Line_Reference 50:     end",
        "// Line_Reference 51: ",
        "// Line_Reference 52:     it 'does not assign a pod that has already been claimed' do",
        "// Line_Reference 53:       other_pod = Pod.create(:name => 'ObjectiveSugar')",
        "// Line_Reference 54:       other_owner = Owner.create(:email => 'jenny@example.com', :name => 'Jenny Penny')",
        "// Line_Reference 55:       other_owner.add_pod(other_pod)",
        "// Line_Reference 56:       post '/', :owner => { :email => 'appie@example.com', :name => 'Appie Duran' },",
        "// Line_Reference 57:                 :pods => %w[AFNetworking ObjectiveSugar]",
        "// Line_Reference 58:       owner = Owner.find_by_email('appie@example.com')",
        "// Line_Reference 59:       @pod.reload.owners.should == [owner]",
        "// Line_Reference 60:       other_pod.reload.owners.should == [other_owner]",
        "// Line_Reference 61:       last_response.status.should == 302",
        "// Line_Reference 62:       query = { :claimer_email => owner.email, :successfully_claimed => ['AFNetworking'],",
        "// Line_Reference 63:                 :already_claimed => ['ObjectiveSugar'] }",
        "// Line_Reference 64:       last_response.location.should == \"https://example.org/thanks?#{query.to_query}\"",
        "// Line_Reference 65:     end",
        "// Line_Reference 66: ",
        "// Line_Reference 67:     it 'immediately redirects to the dispute page if all pods are claimed' do",
        "// Line_Reference 68:       @pod.remove_owner(Owner.unclaimed)",
        "// Line_Reference 69:       owner = Owner.create(:email => 'jenny@example.com', :name => 'Jenny Penny')",
        "// Line_Reference 70:       owner.add_pod(@pod)",
        "// Line_Reference 71:       lambda do",
        "// Line_Reference 72:         post '/', :owner => { :email => 'appie@example.com', :name => 'Appie Duran' }, :pods => ['AFNetworking']",
        "// Line_Reference 73:       end.should.change { Owner.count }",
        "// Line_Reference 74:       last_response.status.should == 302",
        "// Line_Reference 75:       uri = URI.parse(last_response.location)",
        "// Line_Reference 76:       uri.path.should == '/disputes/new'",
        "// Line_Reference 77:       query = { 'claimer_email' => 'appie@example.com', 'pods[]' => 'AFNetworking' }",
        "// Line_Reference 78:       Rack::Utils.parse_query(uri.query).should == query",
        "// Line_Reference 79:       Owner.find_by_email('appie@example.com').should.not.be.nil",
        "// Line_Reference 80:     end",
        "// Line_Reference 81: ",
        "// Line_Reference 82:     it 'rolls back in case of an error' do",
        "// Line_Reference 83:       Pod.any_instance.stubs(:remove_owner).raises",
        "// Line_Reference 84:       lambda do",
        "// Line_Reference 85:         should.raise do",
        "// Line_Reference 86:           post('/',",
        "// Line_Reference 87:                :owner => {",
        "// Line_Reference 88:                  :email => 'appie@example.com',",
        "// Line_Reference 89:                  :name => 'Appie Duran',",
        "// Line_Reference 90:                },",
        "// Line_Reference 91:                :pods => ['AFNetworking'])",
        "// Line_Reference 92:         end",
        "// Line_Reference 93:       end.should.not.change { Owner.count }",
        "// Line_Reference 94:       @pod.reload.owners.should == [Owner.unclaimed]",
        "// Line_Reference 95:     end",
        "// Line_Reference 96: ",
        "// Line_Reference 97:     it 'shows validation errors' do",
        "// Line_Reference 98:       post('/',",
        "// Line_Reference 99:            :owner => { :email => 'appie@example.com', :name => '' },",
        "// Line_Reference 100:            :pods => %w[AFNetworking EYFNetworking JAYSONKit])",
        "// Line_Reference 101:       last_response.status.should == 200",
        "// Line_Reference 102:       @pod.reload.owners.should == [Owner.unclaimed]",
        "// Line_Reference 103:       errors = response_doc.css('.errors li')",
        "// Line_Reference 104:       errors.first.text.should == 'Owner name is not present.'",
        "// Line_Reference 105:       errors.last.text.should == 'Unknown Pods EYFNetworking and JAYSONKit.'",
        "// Line_Reference 106:     end",
        "// Line_Reference 107: ",
        "// Line_Reference 108:     it 'shows a thanks page' do",
        "// Line_Reference 109:       get('/thanks',",
        "// Line_Reference 110:           :claimer_email => 'appie@example.com',",
        "// Line_Reference 111:           :successfully_claimed => ['AFNetworking'],",
        "// Line_Reference 112:           :already_claimed => ['JSONKit'])",
        "// Line_Reference 113:       last_response.status.should == 200",
        "// Line_Reference 114:       last_response.body.should.include 'AFNetworking'",
        "// Line_Reference 115:       last_response.body.should.include 'JSONKit'",
        "// Line_Reference 116: ",
        "// Line_Reference 117:       link = response_doc.css('article p a')[2]",
        "// Line_Reference 118:       query = { :claimer_email => 'appie@example.com', :pods => ['JSONKit'] }",
        "// Line_Reference 119:       link['href'].should == \"https://example.org/disputes/new?#{query.to_query}\"",
        "// Line_Reference 120:     end",
        "// Line_Reference 121:   end",
        "// Line_Reference 122: ",
        "// Line_Reference 123:   describe ClaimsController, 'concerning disputes' do"
    ]
}
