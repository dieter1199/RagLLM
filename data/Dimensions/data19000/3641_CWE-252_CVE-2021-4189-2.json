{
    "cve_id": "CVE-2021-4189",
    "cve_description": "A flaw was found in Python, specifically in the FTP (File Transfer Protocol) client library in PASV (passive) mode. The issue is how the FTP client trusts the host from the PASV response by default. This flaw allows an attacker to set up a malicious FTP server that can trick FTP clients into connecting back to a given IP address and port. This vulnerability could lead to FTP client scanning ports, which otherwise would not have been possible.",
    "cve_publish_date": "2022-08-24",
    "cwe_id": "CWE-252",
    "cwe_name": "Unchecked Return Value",
    "cwe_description": "The product does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.",
    "commit_message": "bpo-43285 Make ftplib not trust the PASV response. (GH-24838)\n\nbpo-43285: Make ftplib not trust the PASV response.\r\n\r\nThe IPv4 address value returned from the server in response to the PASV command\r\nshould not be trusted.  This prevents a malicious FTP server from using the\r\nresponse to probe IPv4 address and port combinations on the client network.\r\n\r\nInstead of using the returned address, we use the IP address we're\r\nalready connected to.  This is the strategy other ftp clients adopted,\r\nand matches the only strategy available for the modern IPv6 EPSV command\r\nwhere the server response must return a port number and nothing else.\r\n\r\nFor the rare user who _wants_ this ugly behavior, set a `trust_server_pasv_ipv4_address`\r\nattribute on your `ftplib.FTP` instance to True.",
    "type_of_change": "Modification",
    "filename_of_changes": "test_ftplib.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "26",
    "number_of_lines_deleted_vulnerable_to_cve": "1",
    "vulnerable_lines": [
        "// Line_Reference 146:             ip, port = sock.getsockname()[:2]"
    ]
}
