{
    "cve_id": "CVE-2022-29184",
    "cve_description": "GoCD is a continuous delivery server. In GoCD versions prior to 22.1.0, it is possible for existing authenticated users who have permissions to edit or create pipeline materials or pipeline configuration repositories to get remote code execution capability on the GoCD server via configuring a malicious branch name which abuses Mercurial hooks/aliases to exploit a command injection weakness. An attacker would require access to an account with existing GoCD administration permissions to either create/edit (`hg`-based) configuration repositories; create/edit pipelines and their (`hg`-based) materials; or, where \"pipelines-as-code\" configuration repositories are used, to commit malicious configuration to such an external repository which will be automatically parsed into a pipeline configuration and (`hg`) material definition by the GoCD server. This issue is fixed in GoCD 22.1.0. As a workaround, users who do not use/rely upon Mercurial materials can uninstall/remove the `hg`/Mercurial binary from the underlying GoCD Server operating system or Docker image.",
    "cve_publish_date": "2022-05-20",
    "cwe_id": "CWE-77",
    "cwe_name": "Improper Neutralization of Special Elements used in a Command ('Command Injection')",
    "cwe_description": "The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.",
    "commit_message": "Improve escaping of arguments when constructing Hg command calls",
    "type_of_change": "Modification",
    "filename_of_changes": "HgCommandTest.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "50",
    "number_of_lines_deleted_vulnerable_to_cve": "14",
    "vulnerable_lines": [
        "// Line_Reference 38: import static org.hamcrest.Matchers.is;",
        "// Line_Reference 39: import static org.hamcrest.Matchers.not;",
        "// Line_Reference 49:     private static final String REVISION_0 = \"b61d12de515d82d3a377ae3aae6e8abe516a2651\";",
        "// Line_Reference 50:     private static final String REVISION_1 = \"35ff2159f303ecf986b3650fc4299a6ffe5a14e1\";",
        "// Line_Reference 51:     private static final String REVISION_2 = \"ca3ebb67f527c0ad7ed26b789056823d8b9af23f\";",
        "// Line_Reference 57:         clientRepo =  TempDirUtils.createTempDirectoryIn(tempDir, \"testHgClientRepo\").toFile();",
        "// Line_Reference 58:         secondBranchWorkingCopy =  TempDirUtils.createTempDirectoryIn(tempDir, \"second\").toFile();",
        "// Line_Reference 68:         assertThat(clientRepo.listFiles().length > 0, is(true));",
        "// Line_Reference 72:     public void shouldGetLatestModifications() throws Exception {",
        "// Line_Reference 82:     public void shouldNotIncludeCommitFromAnotherBranchInGetLatestModifications() throws Exception {",
        "// Line_Reference 101:     public void shouldNotGetModificationsFromOtherBranches() throws Exception {",
        "// Line_Reference 134:     public void shouldThrowExceptionIfUpdateFails() throws Exception {",
        "// Line_Reference 143:                 .isExactlyInstanceOf(RuntimeException.class);",
        "// Line_Reference 154:     public void shouldThrowExceptionForBadConnection() throws Exception {"
    ]
}
