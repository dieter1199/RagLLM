{
    "cve_id": "CVE-2024-23344",
    "cve_description": "Tuleap is an Open Source Suite to improve management of software developments and collaboration. Some users might get access to restricted information when a process validates the permissions of multiple users (e.g. mail notifications). This issue has been patched in version 15.4.99.140 of Tuleap Community Edition.",
    "cve_publish_date": "2024-02-06",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fix: CCE user cannot update artifact sometimes\n\nHow to reproduce:\nHave an artifact A with a comment containing a cross reference to another\nartifact B like `See art #123`.\nIn the tracker of the artifact A, upload a Custom Code Execution module\nin the administration.\n\nThere is an example module if you need one:\n```\ncd plugins/tracker_cce/wasm_modules/post-action-add-comment\nnix-shell\ncargo build --target wasm32-wasi --release\n```\nThen you can upload the generated file:\n`plugins/tracker_cce/wasm_modules/post-action-add-comment/target/wasm32-wasi/release/post-action-add-comment.wasm`\n\nThe example module take an integer field `field_a`, an integer field\n`field_b`, and fill a text field `field_sum`. You will need them for the\ntest. Or use your own module.\n\nNow update the artifact A. The (async) execution of the module should be a\nsuccess and a new comment is added to the artifact by CCE user.\n\nCloses request #35862: Artifact userCanView not properly cached\nPart of story #35093: execute custom code as artifact post action\n\nChange-Id: Id08ce6570c1dd2c7ebedcd70339f9d9d6b008d58",
    "type_of_change": "ModificationType.ADD",
    "filename_of_changes": "RoadmapTasksRetrieverTest.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "11",
    "number_of_lines_deleted_vulnerable_to_cve": "9",
    "vulnerable_lines": [
        "// Line_Reference 669:         $task_203 = $this->anArtifactWithoutStartDate(203, 'Do those', $tracker, true, $semantic_timeframe);",
        "// Line_Reference 809:         $task_203 = $this->anArtifactWithoutStartDate(203, 'Do those', $tracker, true, $semantic_timeframe);",
        "// Line_Reference 1082:         $task_203 = $this->anArtifactWithoutStartDate(203, 'Do those', $another_tracker, true, $semantic_timeframe_another_tracker);",
        "// Line_Reference 1225:         return ArtifactTestBuilder::anArtifact($id)",
        "// Line_Reference 1229:             ->userCanView($readable)",
        "// Line_Reference 1231:             ->isOpen(true)",
        "// Line_Reference 1232:             ->build();",
        "// Line_Reference 1235:     private function anArtifactWithoutStartDate(int $id, string $title, Tracker $tracker, bool $readable, SemanticTimeframe $semantic_timeframe): Artifact",
        "// Line_Reference 1255:             ->userCanView($readable)"
    ]
}
