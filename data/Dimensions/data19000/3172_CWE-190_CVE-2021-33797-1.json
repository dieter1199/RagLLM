{
    "cve_id": "CVE-2021-33797",
    "cve_description": "Buffer-overflow in jsdtoa.c in Artifex MuJS in versions 1.0.1 to 1.1.1. An integer overflow happens when js_strtod() reads in floating point exponent, which leads to a buffer overflow in the pointer *d.",
    "cve_publish_date": "2023-04-17",
    "cwe_id": "CWE-190",
    "cwe_name": "Integer Overflow or Wraparound",
    "cwe_description": "The product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number.",
    "commit_message": "Issue #148: Check for overflow when reading floating point exponent.\n\nGCC with -O2 optimizes away the if(exp<-maxExponent) branch completely,\nso we don't end up with the expected '512' value for overflowing\nexponents. Limit the exponent parsing to MAX_INT instead to prevent\nsigned overflow from tripping up over-eager optimizing compilers.",
    "type_of_change": "Modification",
    "filename_of_changes": "jsdtoa.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "3",
    "number_of_lines_deleted_vulnerable_to_cve": "1",
    "vulnerable_lines": [
        "// Line_Reference 694: \t\twhile ((*p >= '0') && (*p <= '9')) {"
    ]
}
