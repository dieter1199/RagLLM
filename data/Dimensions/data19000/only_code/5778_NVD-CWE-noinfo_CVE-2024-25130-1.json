use Mockery;
use Mockery\Adapter\Phpunit\MockeryPHPUnitIntegration;
use MockeryPHPUnitIntegration;
public function testItReturnsFieldWithItNewValue(): void
$form_element_factory           = Mockery::mock(Tracker_FormElementFactory::class);
$masschange_data_values_manager = new Tracker_MasschangeDataValueExtractor($form_element_factory);
$text_field_1    = Mockery::mock(Tracker_FormElement_Field_Text::class);
$text_field_1_id = 1;
$text_field_2    = Mockery::mock(Tracker_FormElement_Field_Text::class);
$text_field_2_id = 2;
$list_field_1    = Mockery::mock(Tracker_FormElement_Field_List::class);
$list_field_1_id = 3;
$list_field_2    = Mockery::mock(Tracker_FormElement_Field_List::class);
$list_field_2_id = 4;
$form_element_factory->shouldReceive('getFieldById')->withArgs([$text_field_1_id])->andReturn($text_field_1);
$form_element_factory->shouldReceive('getFieldById')->withArgs([$text_field_2_id])->andReturn($text_field_2);
$form_element_factory->shouldReceive('getFieldById')->withArgs([$list_field_1_id])->andReturn($list_field_1);
$form_element_factory->shouldReceive('getFieldById')->withArgs([$list_field_2_id])->andReturn($list_field_2);
$masschange_data = [
$text_field_1_id => 'Unchanged',
$text_field_2_id => 'Value01',
$list_field_1_id => ['-1'],
$list_field_2_id => ['Value02'],
];
$expected_result = [
$text_field_2_id => 'Value01',
$list_field_2_id => ['Value02'],
];
$masschange_data_values_manager->getNewValues($masschange_data)
