import { procedure, router } from "#lib/trpc";
import { isAuthenticated } from "#lib/middleware";
import { UnderscoreID, zodId } from "#lib/mongo";
import { FullWebhook, Webhook, getWebhooksCollection, webhook } from "#database/webhooks";
import * as errors from "#lib/errors";
import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
type WebhookEvent =
| {
action: "create";
data: Webhook & { id: string };
}
| {
action: "update";
data: Partial<Webhook> & { id: string };
}
| {
action: "delete";
data: { id: string };
};
const publishEvent = createEventPublisher<WebhookEvent>((workspaceId) => {
return `webhooks:${workspaceId}`;
});
publishEvent(ctx, `${ctx.auth.workspaceId}`, {
return createEventSubscription<WebhookEvent>(ctx, `webhooks:${ctx.auth.workspaceId}`);
publishEvent(ctx, `${ctx.auth.workspaceId}`, {
publishEvent(ctx, `${ctx.auth.workspaceId}`, {
