static CanonicalizationAlgorithms: {
static HashAlgorithms: { [uri in HashAlgorithmType]: new () => HashAlgorithm };
static SignatureAlgorithms: { [uri in SignatureAlgorithmType]: new () => SignatureAlgorithm };
signingKey: Buffer | string;
}
/**
* KeyInfoProvider interface represents the structure for managing keys
* and KeyInfo section in XML data when dealing with XML digital signatures.
*/
export interface KeyInfoProvider {
* Method to return the key based on the contents of the specified KeyInfo.
* @param keyInfo - An optional array of XML Nodes.
* @return A string or Buffer representing the key.
*/
getKey(keyInfo?: Node[]): string | Buffer;
/**
* Method to return an XML string representing the contents of a KeyInfo element.
* @param key - An optional string representing the key.
* @param prefix - An optional string representing the namespace alias.
* @return An XML string representation of the contents of a KeyInfo element.
getKeyInfo(key?: string, prefix?: string): string;
* An optional dictionary of attributes which will be added to the KeyInfo element.
attrs?: { [key: string]: string };
/**
* The FileKeyInfo class loads the certificate from the file provided in the constructor.
*/
export class FileKeyInfo implements KeyInfoProvider {
* The path to the file from which the certificate is to be read.
file: string;
* Initializes a new instance of the FileKeyInfo class.
*
* @param file - An optional string representing the file path of the certificate.
constructor(file?: string);
* Return the loaded certificate. The certificate is read from the file specified in the constructor.
* The keyInfo parameter is ignored. (not implemented)
* @param keyInfo - (not used) An optional array of XML Elements.
* @return A Buffer representing the certificate.
*/
getKey(keyInfo?: Node[]): Buffer;
/**
* Builds the contents of a KeyInfo element as an XML string.
* Currently, this returns exactly one empty X509Data element
* (e.g. "<X509Data></X509Data>"). The resultant X509Data element will be
* prefaced with a namespace alias if a value for the prefix argument
* is provided. In example, if the value of the prefix argument is 'foo', then
* the resultant XML string will be "<foo:X509Data></foo:X509Data>"
* @param key (not used) the signing/private key as a string
* @param  prefix an optional namespace alias to be used for the generated XML
* @return an XML string representation of the contents of a KeyInfo element
*/
getKeyInfo(key?: string, prefix?: string): string;
}
/**
* The StringKeyInfo class loads the certificate from the string provided in the constructor.
*/
export class StringKeyInfo implements KeyInfoProvider {
/**
* The certificate in string form.
*/
key: string;
/**
* Initializes a new instance of the StringKeyInfo class.
* @param key - An optional string representing the certificate.
*/
constructor(key?: string);
/**
* Returns the certificate loaded in the constructor.
* The keyInfo parameter is ignored. (not implemented)
* @param keyInfo (not used) an array with exactly one KeyInfo element
* @return the signing certificate as a string
getKey(keyInfo?: Node[]): string;
* Builds the contents of a KeyInfo element as an XML string.
* Currently, this returns exactly one empty X509Data element
* (e.g. "<X509Data></X509Data>"). The resultant X509Data element will be
* prefaced with a namespace alias if a value for the prefix argument
* is provided. In example, if the value of the prefix argument is 'foo', then
* the resultant XML string will be "<foo:X509Data></foo:X509Data>"
* @param key (not used) the signing/private key as a string
* @param  prefix an optional namespace alias to be used for the generated XML
* @return an XML string representation of the contents of a KeyInfo element
getKeyInfo(key?: string, prefix?: string): string;
