const TfLiteTensor* input = GetInput(context, node, kInputTensor);
const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
bias = GetInput(context, node, kBiasTensor);
TfLiteTensor* input_quantized =
GetTemporary(context, node, data->input_quantized_index);
TfLiteTensor* scaling_factors =
GetTemporary(context, node, data->scaling_factors_index);
TfLiteTensor* input_offsets =
GetTemporary(context, node, data->input_offset_index);
const TfLiteTensor* input_quantized =
GetTemporary(context, node, data->input_quantized_index);
float* scaling_factors_ptr = GetTensorData<float>(
GetTemporary(context, node, data->scaling_factors_index));
int32_t* input_offset_ptr = GetTensorData<int32_t>(
GetTemporary(context, node, data->input_offset_index));
TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
const TfLiteTensor* input = GetInput(context, node, kInputTensor);
const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
const TfLiteTensor* input = GetInput(context, node, kInputTensor);