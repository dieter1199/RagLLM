// This SslSocket will be used when SSL secret is not fetched from SDS server.
class NotReadySslSocket : public Network::TransportSocket {
absl::string_view failureReason() const override { return NotReadyReason; }
SslSocket::SslSocket(Envoy::Ssl::ContextSharedPtr ctx, InitialState state,
const Network::TransportSocketOptionsConstSharedPtr& transport_socket_options,
Ssl::HandshakerFactoryCb handshaker_factory_cb)
ctx_(std::dynamic_pointer_cast<ContextImpl>(ctx)),
info_(std::dynamic_pointer_cast<SslHandshakerImpl>(handshaker_factory_cb(
ctx_->newSsl(transport_socket_options_), ctx_->sslExtendedSocketInfoIndex(), this))) {
return std::make_unique<SslSocket>(std::move(ssl_ctx), InitialState::Client,
transport_socket_options, config_->createHandshaker());
return std::make_unique<SslSocket>(std::move(ssl_ctx), InitialState::Server, nullptr,
config_->createHandshaker());