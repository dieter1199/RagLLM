$controller = new $fullControllerName($src, $parms);
$perms = $controller->permissions();
$common_action = null;
//FIXME do we also need to account for actions with camelcase action/perm such as editItem ???
if ($parms['action'] == 'update') {
} elseif ($parms['action'] == 'edit' && (!isset($parms['id']) || $parms['id'] == 0)) {
// action convention for controllers that manage more than one model (datatype).
// if you preface the name action name with a common crud action name we can check perms on
// it with the developer needing to specify any...better safe than sorry.
// i.e if the action is edit_mymodel it will be checked against the edit permission
if (stristr($parms['action'], '_')) $parts = explode("_", $parms['action']);
$common_action = isset($parts[0]) ? $parts[0] : null;
$msg = empty($controller->requires_login[$perm_action]) ? gt("You must be logged in to perform this action") : $controller->requires_login[$perm_action];
$msg = empty($controller->requires_login[$common_action]) ? gt("You must be logged in to perform this action") : $controller->requires_login[$common_action];
}
}
// get the common configuration files
// look for a config form for this module's current view
// set path information
