{
    "cve_id": "CVE-2023-0459",
    "cve_description": "Copy_from_user on 64-bit versions of the Linux kernel does not implement the __uaccess_begin_nospec allowing a user to bypass the \"access_ok\" check and pass a kernel pointer to copy_from_user(). This would allow an attacker to leak information. We recommend upgrading beyond commitÂ 74e19ef0ff8061ef55957c3abd71614ef0f42f47",
    "cve_publish_date": "2023-05-25",
    "cwe_id": "CWE-763",
    "cwe_name": "Release of Invalid Pointer or Reference",
    "cwe_description": "The product attempts to return a memory resource to the system, but it calls the wrong release function or calls the appropriate release function incorrectly.",
    "commit_message": "x86: get rid of small constant size cases in raw_copy_{to,from}_user()\n\nVery few call sites where that would be triggered remain, and none\nof those is anywhere near hot enough to bother.\n\nSigned-off-by: Al Viro <viro@zeniv.linux.org.uk>",
    "type_of_change": "Modification",
    "filename_of_changes": "uaccess_64.h",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "2",
    "number_of_lines_deleted_vulnerable_to_cve": "106",
    "vulnerable_lines": [
        "// Line_Reference 68: \tint ret = 0;",
        "// Line_Reference 69: ",
        "// Line_Reference 70: \tif (!__builtin_constant_p(size))",
        "// Line_Reference 71: \t\treturn copy_user_generic(dst, (__force void *)src, size);",
        "// Line_Reference 72: \tswitch (size) {",
        "// Line_Reference 73: \tcase 1:",
        "// Line_Reference 74: \t\t__uaccess_begin_nospec();",
        "// Line_Reference 75: \t\t__get_user_asm_nozero(*(u8 *)dst, (u8 __user *)src,",
        "// Line_Reference 76: \t\t\t      ret, \"b\", \"b\", \"=q\", 1);",
        "// Line_Reference 77: \t\t__uaccess_end();",
        "// Line_Reference 78: \t\treturn ret;",
        "// Line_Reference 79: \tcase 2:",
        "// Line_Reference 80: \t\t__uaccess_begin_nospec();",
        "// Line_Reference 81: \t\t__get_user_asm_nozero(*(u16 *)dst, (u16 __user *)src,",
        "// Line_Reference 82: \t\t\t      ret, \"w\", \"w\", \"=r\", 2);",
        "// Line_Reference 83: \t\t__uaccess_end();",
        "// Line_Reference 84: \t\treturn ret;",
        "// Line_Reference 85: \tcase 4:",
        "// Line_Reference 86: \t\t__uaccess_begin_nospec();",
        "// Line_Reference 87: \t\t__get_user_asm_nozero(*(u32 *)dst, (u32 __user *)src,",
        "// Line_Reference 88: \t\t\t      ret, \"l\", \"k\", \"=r\", 4);",
        "// Line_Reference 89: \t\t__uaccess_end();",
        "// Line_Reference 90: \t\treturn ret;",
        "// Line_Reference 91: \tcase 8:",
        "// Line_Reference 92: \t\t__uaccess_begin_nospec();",
        "// Line_Reference 93: \t\t__get_user_asm_nozero(*(u64 *)dst, (u64 __user *)src,",
        "// Line_Reference 94: \t\t\t      ret, \"q\", \"\", \"=r\", 8);",
        "// Line_Reference 95: \t\t__uaccess_end();",
        "// Line_Reference 96: \t\treturn ret;",
        "// Line_Reference 97: \tcase 10:",
        "// Line_Reference 98: \t\t__uaccess_begin_nospec();",
        "// Line_Reference 99: \t\t__get_user_asm_nozero(*(u64 *)dst, (u64 __user *)src,",
        "// Line_Reference 100: \t\t\t       ret, \"q\", \"\", \"=r\", 10);",
        "// Line_Reference 101: \t\tif (likely(!ret))",
        "// Line_Reference 102: \t\t\t__get_user_asm_nozero(*(u16 *)(8 + (char *)dst),",
        "// Line_Reference 103: \t\t\t\t       (u16 __user *)(8 + (char __user *)src),",
        "// Line_Reference 104: \t\t\t\t       ret, \"w\", \"w\", \"=r\", 2);",
        "// Line_Reference 105: \t\t__uaccess_end();",
        "// Line_Reference 106: \t\treturn ret;",
        "// Line_Reference 107: \tcase 16:",
        "// Line_Reference 108: \t\t__uaccess_begin_nospec();",
        "// Line_Reference 109: \t\t__get_user_asm_nozero(*(u64 *)dst, (u64 __user *)src,",
        "// Line_Reference 110: \t\t\t       ret, \"q\", \"\", \"=r\", 16);",
        "// Line_Reference 111: \t\tif (likely(!ret))",
        "// Line_Reference 112: \t\t\t__get_user_asm_nozero(*(u64 *)(8 + (char *)dst),",
        "// Line_Reference 113: \t\t\t\t       (u64 __user *)(8 + (char __user *)src),",
        "// Line_Reference 114: \t\t\t\t       ret, \"q\", \"\", \"=r\", 8);",
        "// Line_Reference 115: \t\t__uaccess_end();",
        "// Line_Reference 116: \t\treturn ret;",
        "// Line_Reference 117: \tdefault:",
        "// Line_Reference 118: \t\treturn copy_user_generic(dst, (__force void *)src, size);",
        "// Line_Reference 119: \t}",
        "// Line_Reference 125: \tint ret = 0;",
        "// Line_Reference 126: ",
        "// Line_Reference 127: \tif (!__builtin_constant_p(size))",
        "// Line_Reference 128: \t\treturn copy_user_generic((__force void *)dst, src, size);",
        "// Line_Reference 129: \tswitch (size) {",
        "// Line_Reference 130: \tcase 1:",
        "// Line_Reference 131: \t\t__uaccess_begin();",
        "// Line_Reference 132: \t\t__put_user_asm(*(u8 *)src, (u8 __user *)dst,",
        "// Line_Reference 133: \t\t\t      ret, \"b\", \"b\", \"iq\", 1);",
        "// Line_Reference 134: \t\t__uaccess_end();",
        "// Line_Reference 135: \t\treturn ret;",
        "// Line_Reference 136: \tcase 2:",
        "// Line_Reference 137: \t\t__uaccess_begin();",
        "// Line_Reference 138: \t\t__put_user_asm(*(u16 *)src, (u16 __user *)dst,",
        "// Line_Reference 139: \t\t\t      ret, \"w\", \"w\", \"ir\", 2);",
        "// Line_Reference 140: \t\t__uaccess_end();",
        "// Line_Reference 141: \t\treturn ret;",
        "// Line_Reference 142: \tcase 4:",
        "// Line_Reference 143: \t\t__uaccess_begin();",
        "// Line_Reference 144: \t\t__put_user_asm(*(u32 *)src, (u32 __user *)dst,",
        "// Line_Reference 145: \t\t\t      ret, \"l\", \"k\", \"ir\", 4);",
        "// Line_Reference 146: \t\t__uaccess_end();",
        "// Line_Reference 147: \t\treturn ret;",
        "// Line_Reference 148: \tcase 8:",
        "// Line_Reference 149: \t\t__uaccess_begin();",
        "// Line_Reference 150: \t\t__put_user_asm(*(u64 *)src, (u64 __user *)dst,",
        "// Line_Reference 151: \t\t\t      ret, \"q\", \"\", \"er\", 8);",
        "// Line_Reference 152: \t\t__uaccess_end();",
        "// Line_Reference 153: \t\treturn ret;",
        "// Line_Reference 154: \tcase 10:",
        "// Line_Reference 155: \t\t__uaccess_begin();",
        "// Line_Reference 156: \t\t__put_user_asm(*(u64 *)src, (u64 __user *)dst,",
        "// Line_Reference 157: \t\t\t       ret, \"q\", \"\", \"er\", 10);",
        "// Line_Reference 158: \t\tif (likely(!ret)) {",
        "// Line_Reference 159: \t\t\tasm(\"\":::\"memory\");",
        "// Line_Reference 160: \t\t\t__put_user_asm(4[(u16 *)src], 4 + (u16 __user *)dst,",
        "// Line_Reference 161: \t\t\t\t       ret, \"w\", \"w\", \"ir\", 2);",
        "// Line_Reference 162: \t\t}",
        "// Line_Reference 163: \t\t__uaccess_end();",
        "// Line_Reference 164: \t\treturn ret;",
        "// Line_Reference 165: \tcase 16:",
        "// Line_Reference 166: \t\t__uaccess_begin();",
        "// Line_Reference 167: \t\t__put_user_asm(*(u64 *)src, (u64 __user *)dst,",
        "// Line_Reference 168: \t\t\t       ret, \"q\", \"\", \"er\", 16);",
        "// Line_Reference 169: \t\tif (likely(!ret)) {",
        "// Line_Reference 170: \t\t\tasm(\"\":::\"memory\");",
        "// Line_Reference 171: \t\t\t__put_user_asm(1[(u64 *)src], 1 + (u64 __user *)dst,",
        "// Line_Reference 172: \t\t\t\t       ret, \"q\", \"\", \"er\", 8);",
        "// Line_Reference 173: \t\t}",
        "// Line_Reference 174: \t\t__uaccess_end();",
        "// Line_Reference 175: \t\treturn ret;",
        "// Line_Reference 176: \tdefault:",
        "// Line_Reference 177: \t\treturn copy_user_generic((__force void *)dst, src, size);",
        "// Line_Reference 178: \t}"
    ]
}
