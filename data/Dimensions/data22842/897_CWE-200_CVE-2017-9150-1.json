{
    "cve_id": "CVE-2017-9150",
    "cve_description": "The do_check function in kernel/bpf/verifier.c in the Linux kernel before 4.11.1 does not make the allow_ptr_leaks value available for restricting the output of the print_bpf_insn function, which allows local users to obtain sensitive address information via crafted bpf system calls.",
    "cve_publish_date": "2017-05-22",
    "cwe_id": "CWE-200",
    "cwe_name": "Exposure of Sensitive Information to an Unauthorized Actor",
    "cwe_description": "The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.",
    "commit_message": "bpf: don't let ldimm64 leak map addresses on unprivileged\n\nThe patch fixes two things at once:\n\n1) It checks the env->allow_ptr_leaks and only prints the map address to\n   the log if we have the privileges to do so, otherwise it just dumps 0\n   as we would when kptr_restrict is enabled on %pK. Given the latter is\n   off by default and not every distro sets it, I don't want to rely on\n   this, hence the 0 by default for unprivileged.\n\n2) Printing of ldimm64 in the verifier log is currently broken in that\n   we don't print the full immediate, but only the 32 bit part of the\n   first insn part for ldimm64. Thus, fix this up as well; it's okay to\n   access, since we verified all ldimm64 earlier already (including just\n   constants) through replace_map_fd_with_map_ptr().\n\nFixes: 1be7f75d1668 (\"bpf: enable non-root eBPF programs\")\nFixes: cbd357008604 (\"bpf: verifier (add ability to receive verification log)\")\nReported-by: Jann Horn <jannh@google.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nAcked-by: Alexei Starovoitov <ast@kernel.org>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "type_of_change": "Modification",
    "filename_of_changes": "verifier.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "16",
    "number_of_lines_deleted_vulnerable_to_cve": "5",
    "vulnerable_lines": [
        "// Line_Reference 301: static void print_bpf_insn(struct bpf_insn *insn)",
        "// Line_Reference 365: \t\t} else if (BPF_MODE(insn->code) == BPF_IMM) {",
        "// Line_Reference 366: \t\t\tverbose(\"(%02x) r%d = 0x%x\\n\",",
        "// Line_Reference 367: \t\t\t\tinsn->code, insn->dst_reg, insn->imm);",
        "// Line_Reference 2856: \t\t\tprint_bpf_insn(insn);"
    ]
}
