{
    "cve_id": "CVE-2015-8324",
    "cve_description": "The ext4 implementation in the Linux kernel before 2.6.34 does not properly track the initialization of certain data structures, which allows physically proximate attackers to cause a denial of service (NULL pointer dereference and panic) via a crafted USB device, related to the ext4_fill_super function.",
    "cve_publish_date": "2016-05-02",
    "cwe_id": "NVD-CWE-Other",
    "cwe_name": "Other",
    "cwe_description": "NVD is only using a subset of CWE for mapping instead of the entire CWE, and the weakness type is not covered by that subset.",
    "commit_message": "ext4: use ext4_get_block_write in buffer write\n\nAllocate uninitialized extent before ext4 buffer write and\nconvert the extent to initialized after io completes.\nThe purpose is to make sure an extent can only be marked\ninitialized after it has been written with new data so\nwe can safely drop the i_mutex lock in ext4 DIO read without\nexposing stale data. This helps to improve multi-thread DIO\nread performance on high-speed disks.\n\nSkip the nobh and data=journal mount cases to make things simple for now.\n\nSigned-off-by: Jiaying Zhang <jiayingz@google.com>\nSigned-off-by: \"Theodore Ts'o\" <tytso@mit.edu>",
    "type_of_change": "Modification",
    "filename_of_changes": "inode.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "174",
    "number_of_lines_deleted_vulnerable_to_cve": "39",
    "vulnerable_lines": [
        "// Line_Reference 1578: \tret = block_write_begin(file, mapping, pos, len, flags, pagep, fsdata,",
        "// Line_Reference 1579: \t\t\t\text4_get_block);",
        "// Line_Reference 2686: \tstruct buffer_head *page_bufs;",
        "// Line_Reference 2762: \telse",
        "// Line_Reference 3474: \thandle_t *handle = NULL;",
        "// Line_Reference 3488: \tif (max_blocks > DIO_MAX_BLOCKS)",
        "// Line_Reference 3489: \t\tmax_blocks = DIO_MAX_BLOCKS;",
        "// Line_Reference 3490: \tdio_credits = ext4_chunk_trans_blocks(inode, max_blocks);",
        "// Line_Reference 3491: \thandle = ext4_journal_start(inode, dio_credits);",
        "// Line_Reference 3492: \tif (IS_ERR(handle)) {",
        "// Line_Reference 3493: \t\tret = PTR_ERR(handle);",
        "// Line_Reference 3494: \t\tgoto out;",
        "// Line_Reference 3502: \text4_journal_stop(handle);",
        "// Line_Reference 3507: static void ext4_free_io_end(ext4_io_end_t *io)",
        "// Line_Reference 3508: {",
        "// Line_Reference 3509: \tBUG_ON(!io);",
        "// Line_Reference 3510: \tiput(io->inode);",
        "// Line_Reference 3511: \tkfree(io);",
        "// Line_Reference 3512: }",
        "// Line_Reference 3513: ",
        "// Line_Reference 3559: \tif (offset + size <= i_size_read(inode))",
        "// Line_Reference 3560: \t\tret = ext4_convert_unwritten_extents(inode, offset, size);",
        "// Line_Reference 3561: ",
        "// Line_Reference 3580: \text4_io_end_t *io  = container_of(work, ext4_io_end_t, work);",
        "// Line_Reference 3581: \tstruct inode *inode = io->inode;",
        "// Line_Reference 3582: \tint ret = 0;",
        "// Line_Reference 3586: \tif (ret >= 0) {",
        "// Line_Reference 3587: \t\tif (!list_empty(&io->list))",
        "// Line_Reference 3588: \t\t\tlist_del_init(&io->list);",
        "// Line_Reference 3589: \t\text4_free_io_end(io);",
        "// Line_Reference 3613: \tif (list_empty(&EXT4_I(inode)->i_completed_io_list))",
        "// Line_Reference 3617: \twhile (!list_empty(&EXT4_I(inode)->i_completed_io_list)){",
        "// Line_Reference 3618: \t\tio = list_entry(EXT4_I(inode)->i_completed_io_list.next,",
        "// Line_Reference 3643: static ext4_io_end_t *ext4_init_io_end (struct inode *inode)",
        "// Line_Reference 3647: \tio = kmalloc(sizeof(*io), GFP_NOFS);",
        "// Line_Reference 3655: \t\tio->error = 0;",
        "// Line_Reference 3693: \tlist_add_tail(&io_end->list,",
        "// Line_Reference 3694: \t\t &EXT4_I(io_end->inode)->i_completed_io_list);",
        "// Line_Reference 3751: \t\t\tiocb->private = ext4_init_io_end(inode);"
    ]
}
