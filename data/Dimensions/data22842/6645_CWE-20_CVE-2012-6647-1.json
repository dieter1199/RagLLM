{
    "cve_id": "CVE-2012-6647",
    "cve_description": "The futex_wait_requeue_pi function in kernel/futex.c in the Linux kernel before 3.5.1 does not ensure that calls have two different futex addresses, which allows local users to cause a denial of service (NULL pointer dereference and system crash) or possibly have unspecified other impact via a crafted FUTEX_WAIT_REQUEUE_PI command.",
    "cve_publish_date": "2014-05-26",
    "cwe_id": "CWE-20",
    "cwe_name": "Improper Input Validation",
    "cwe_description": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.",
    "commit_message": "futex: Forbid uaddr == uaddr2 in futex_wait_requeue_pi()\n\nIf uaddr == uaddr2, then we have broken the rule of only requeueing\nfrom a non-pi futex to a pi futex with this call. If we attempt this,\nas the trinity test suite manages to do, we miss early wakeups as\nq.key is equal to key2 (because they are the same uaddr). We will then\nattempt to dereference the pi_mutex (which would exist had the futex_q\nbeen properly requeued to a pi futex) and trigger a NULL pointer\ndereference.\n\nSigned-off-by: Darren Hart <dvhart@linux.intel.com>\nCc: Dave Jones <davej@redhat.com>\nCc: stable@vger.kernel.org\nLink: http://lkml.kernel.org/r/ad82bfe7f7d130247fbe2b5b4275654807774227.1342809673.git.dvhart@linux.intel.com\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>",
    "type_of_change": "Modification",
    "filename_of_changes": "futex.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "8",
    "number_of_lines_deleted_vulnerable_to_cve": "5",
    "vulnerable_lines": [
        "// Line_Reference 2234:  * uaddr2 which must be PI aware.  Normal wakeup will wake on uaddr2 and",
        "// Line_Reference 2235:  * complete the acquisition of the rt_mutex prior to returning to userspace.",
        "// Line_Reference 2236:  * This ensures the rt_mutex maintains an owner when it has waiters; without",
        "// Line_Reference 2237:  * one, the pi logic wouldn't know which task to boost/deboost, if there was a",
        "// Line_Reference 2238:  * need to."
    ]
}
