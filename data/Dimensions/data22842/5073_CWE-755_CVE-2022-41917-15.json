{
    "cve_id": "CVE-2022-41917",
    "cve_description": "OpenSearch is a community-driven, open source fork of Elasticsearch and Kibana. OpenSearch allows users to specify a local file when defining text analyzers to process data for text analysis. An issue in the implementation of this feature allows certain specially crafted queries to return a response containing the first line of text from arbitrary files. The list of potentially impacted files is limited to text files with read permissions allowed in the Java Security Manager policy configuration. OpenSearch version 1.3.7 and 2.4.0 contain a fix for this issue. Users are advised to upgrade. There are no known workarounds for this issue.",
    "cve_publish_date": "2022-11-16",
    "cwe_id": "CWE-755",
    "cwe_name": "Improper Handling of Exceptional Conditions",
    "cwe_description": "The product does not handle or incorrectly handles an exceptional condition.",
    "commit_message": "Merge pull request from GHSA-w3rx-m34v-wrqx\n\n* Fix error handling while reading analyzer mapping rules\n\nAdd new parseWordList method that takes a parser as a parameter. It reads custom rules from settings or a file, parses and handles errors. Make error messages less verbose for rules files outside config directory.\n\nSigned-off-by: Rabi Panda <adnapibar@gmail.com>\n\n* Add CHANGELOG.md\n\nSigned-off-by: Rabi Panda <adnapibar@gmail.com>\n\nSigned-off-by: Rabi Panda <adnapibar@gmail.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "StemmerOverrideTokenFilterFactory.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "26",
    "number_of_lines_deleted_vulnerable_to_cve": "20",
    "vulnerable_lines": [
        "// Line_Reference 54:         List<String> rules = Analysis.getWordList(env, settings, \"rules\");",
        "// Line_Reference 60:         parseRules(rules, builder, \"=>\");",
        "// Line_Reference 70:     static void parseRules(List<String> rules, StemmerOverrideFilter.Builder builder, String mappingSep) {",
        "// Line_Reference 71:         for (String rule : rules) {",
        "// Line_Reference 72:             String[] sides = rule.split(mappingSep, -1);",
        "// Line_Reference 73:             if (sides.length != 2) {",
        "// Line_Reference 74:                 throw new RuntimeException(\"Invalid Keyword override Rule:\" + rule);",
        "// Line_Reference 75:             }",
        "// Line_Reference 77:             String[] keys = sides[0].split(\",\", -1);",
        "// Line_Reference 78:             String override = sides[1].trim();",
        "// Line_Reference 79:             if (override.isEmpty() || override.indexOf(',') != -1) {",
        "// Line_Reference 80:                 throw new RuntimeException(\"Invalid Keyword override Rule:\" + rule);",
        "// Line_Reference 81:             }",
        "// Line_Reference 83:             for (String key : keys) {",
        "// Line_Reference 84:                 String trimmedKey = key.trim();",
        "// Line_Reference 85:                 if (trimmedKey.isEmpty()) {",
        "// Line_Reference 86:                     throw new RuntimeException(\"Invalid Keyword override Rule:\" + rule);",
        "// Line_Reference 87:                 }",
        "// Line_Reference 88:                 builder.add(trimmedKey, override);",
        "// Line_Reference 92: "
    ]
}
