{
    "cve_id": "CVE-2015-10034",
    "cve_description": "A vulnerability has been found in j-nowak workout-organizer and classified as critical. This vulnerability affects unknown code. The manipulation leads to sql injection. The patch is identified as 13cd6c3d1210640bfdb39872b2bb3597aa991279. It is recommended to apply a patch to fix this issue. VDB-217714 is the identifier assigned to this vulnerability.",
    "cve_publish_date": "2023-01-09",
    "cwe_id": "CWE-89",
    "cwe_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
    "cwe_description": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.",
    "commit_message": "Fixed building queries - preventing SQL-injection",
    "type_of_change": "Modification",
    "filename_of_changes": "AccountController.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "33",
    "number_of_lines_deleted_vulnerable_to_cve": "23",
    "vulnerable_lines": [
        "// Line_Reference 3: import java.util.HashMap;",
        "// Line_Reference 4: import java.util.Map;",
        "// Line_Reference 24: \t\t\tif (UsersDao.get().checkPasswordForUser(session().get(Application.USER_ID), oldPassword)) {",
        "// Line_Reference 25: \t\t\t\tUsersDao.get().changePassword(session().get(Application.USER_ID), newPassword);",
        "// Line_Reference 38: \t\tString userId = session(Application.USER_ID);",
        "// Line_Reference 40: \t\tString weight = requestData.get(\"weight\");",
        "// Line_Reference 41: \t\tString height = requestData.get(\"height\");",
        "// Line_Reference 42: \t\tString dateOfBirth = requestData.get(\"dateOfBirth\");",
        "// Line_Reference 43: ",
        "// Line_Reference 44: \t\tMap<String, String> toUpdate = new HashMap<String, String>();",
        "// Line_Reference 45: \t\tif (!weight.equals(\"\")) {",
        "// Line_Reference 46: \t\t\ttoUpdate.put(\"weight\", weight);",
        "// Line_Reference 47: \t\t}",
        "// Line_Reference 48: \t\tif (!height.equals(\"\")) {",
        "// Line_Reference 49: \t\t\ttoUpdate.put(\"height\", height);",
        "// Line_Reference 50: \t\t}",
        "// Line_Reference 51: \t\tif (!dateOfBirth.equals(\"\")) {",
        "// Line_Reference 52: \t\t\ttoUpdate.put(\"date_of_birth\", dateOfBirth);",
        "// Line_Reference 54: ",
        "// Line_Reference 56: \t\tif (toUpdate.size() > 0 && UsersDao.get().update(userId, toUpdate)) {",
        "// Line_Reference 57: \t\t\treturn ok();",
        "// Line_Reference 58: \t\t}",
        "// Line_Reference 59: \t\telse {"
    ]
}
