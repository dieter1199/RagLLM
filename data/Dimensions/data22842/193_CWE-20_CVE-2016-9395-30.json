{
    "cve_id": "CVE-2016-9395",
    "cve_description": "The jas_seq2d_create function in jas_seq.c in JasPer before 1.900.25 allows remote attackers to cause a denial of service (assertion failure) via a crafted file.",
    "cve_publish_date": "2017-03-23",
    "cwe_id": "CWE-20",
    "cwe_name": "Improper Input Validation",
    "cwe_description": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.",
    "commit_message": "The generation of the configuration file jas_config.h has been completely\nreworked in order to avoid pollution of the global namespace.\n\nSome problematic types like uchar, ulong, and friends have been replaced\nwith names with a jas_ prefix.\n\nAn option max_samples has been added to the BMP and JPEG decoders to\nrestrict the maximum size of image that they can decode.  This change\nwas made as a (possibly temporary) fix to address security concerns.\nA max_samples command-line option has also been added to imginfo.\n\nWhether an image component (for jas_image_t) is stored in memory or on\ndisk is now based on the component size (rather than the image size).\n\nSome debug log message were added.\n\nSome new integer overflow checks were added.\n\nSome new safe integer add/multiply functions were added.\n\nMore pre-C99 cruft was removed.  JasPer has numerous \"hacks\" to\nhandle pre-C99 compilers.  JasPer now assumes C99 support.  So, this\npre-C99 cruft is unnecessary and can be removed.\n\nThe regression jasper-doublefree-mem_close.jpg has been re-enabled.\nTheoretically, it should work more predictably now.",
    "type_of_change": "Modification",
    "filename_of_changes": "jas_seq.h",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "19",
    "number_of_lines_deleted_vulnerable_to_cve": "14",
    "vulnerable_lines": [
        "// Line_Reference 113: \tint_fast32_t xstart_;",
        "// Line_Reference 116: \tint_fast32_t ystart_;",
        "// Line_Reference 119: \tint_fast32_t xend_;",
        "// Line_Reference 122: \tint_fast32_t yend_;",
        "// Line_Reference 125: \tint_fast32_t numrows_;",
        "// Line_Reference 128: \tint_fast32_t numcols_;",
        "// Line_Reference 185: \t(((matrix)->numrows_ > 1) ? jas_matrix_getref(matrix, i, 0) : jas_matrix_getref(matrix, 0, i))",
        "// Line_Reference 191: jas_matrix_t *jas_matrix_create(int numrows, int numcols);",
        "// Line_Reference 197: int jas_matrix_resize(jas_matrix_t *matrix, int numrows, int numcols);",
        "// Line_Reference 202: void jas_matrix_bindsub(jas_matrix_t *mat0, jas_matrix_t *mat1, int r0,",
        "// Line_Reference 203:   int c0, int r1, int c1);",
        "// Line_Reference 253: jas_matrix_t *jas_seq2d_create(int xstart, int ystart, int xend, int yend);",
        "// Line_Reference 283: void jas_seq2d_bindsub(jas_matrix_t *s, jas_matrix_t *s1, int xstart,",
        "// Line_Reference 284:   int ystart, int xend, int yend);"
    ]
}
