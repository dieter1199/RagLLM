{
    "cve_id": "CVE-2016-4440",
    "cve_description": "arch/x86/kvm/vmx.c in the Linux kernel through 4.6.3 mishandles the APICv on/off state, which allows guest OS users to obtain direct APIC MSR access on the host OS, and consequently cause a denial of service (host OS crash) or possibly execute arbitrary code on the host OS, via x2APIC mode.",
    "cve_publish_date": "2016-06-27",
    "cwe_id": "CWE-264",
    "cwe_name": "Permissions, Privileges, and Access Controls",
    "cwe_description": "Weaknesses in this category are related to the management of permissions, privileges, and other security features that are used to perform access control.",
    "commit_message": "kvm:vmx: more complete state update on APICv on/off\n\nThe function to update APICv on/off state (in particular, to deactivate\nit when enabling Hyper-V SynIC) is incomplete: it doesn't adjust\nAPICv-related fields among secondary processor-based VM-execution\ncontrols.  As a result, Windows 2012 guests get stuck when SynIC-based\nauto-EOI interrupt intersected with e.g. an IPI in the guest.\n\nIn addition, the MSR intercept bitmap isn't updated every time \"virtualize\nx2APIC mode\" is toggled.  This path can only be triggered by a malicious\nguest, because Windows didn't use x2APIC but rather their own synthetic\nAPIC access MSRs; however a guest running in a SynIC-enabled VM could\nswitch to x2APIC and thus obtain direct access to host APIC MSRs\n(CVE-2016-4440).\n\nThe patch fixes those omissions.\n\nSigned-off-by: Roman Kagan <rkagan@virtuozzo.com>\nReported-by: Steve Rutherford <srutherford@google.com>\nReported-by: Yang Zhang <yang.zhang.wz@gmail.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "vmx.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "30",
    "number_of_lines_deleted_vulnerable_to_cve": "18",
    "vulnerable_lines": [
        "// Line_Reference 2421: \telse if (vcpu->arch.apic_base & X2APIC_ENABLE) {",
        "// Line_Reference 6332: \tif (enable_apicv) {",
        "// Line_Reference 6333: \t\tfor (msr = 0x800; msr <= 0x8ff; msr++)",
        "// Line_Reference 6334: \t\t\tvmx_disable_intercept_msr_read_x2apic(msr);",
        "// Line_Reference 6335: ",
        "// Line_Reference 6336: \t\t/* According SDM, in x2apic mode, the whole id reg is used.",
        "// Line_Reference 6337: \t\t * But in KVM, it only use the highest eight bits. Need to",
        "// Line_Reference 6338: \t\t * intercept it */",
        "// Line_Reference 6339: \t\tvmx_enable_intercept_msr_read_x2apic(0x802);",
        "// Line_Reference 6340: \t\t/* TMCCT */",
        "// Line_Reference 6341: \t\tvmx_enable_intercept_msr_read_x2apic(0x839);",
        "// Line_Reference 6342: \t\t/* TPR */",
        "// Line_Reference 6343: \t\tvmx_disable_intercept_msr_write_x2apic(0x808);",
        "// Line_Reference 6344: \t\t/* EOI */",
        "// Line_Reference 6345: \t\tvmx_disable_intercept_msr_write_x2apic(0x80b);",
        "// Line_Reference 6346: \t\t/* SELF-IPI */",
        "// Line_Reference 6347: \t\tvmx_disable_intercept_msr_write_x2apic(0x83f);",
        "// Line_Reference 6348: \t}"
    ]
}
