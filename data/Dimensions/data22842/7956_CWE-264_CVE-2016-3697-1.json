{
    "cve_id": "CVE-2016-3697",
    "cve_description": "libcontainer/user/user.go in runC before 0.1.0, as used in Docker before 1.11.2, improperly treats a numeric UID as a potential username, which allows local users to gain privileges via a numeric username in the password file in a container.",
    "cve_publish_date": "2016-06-01",
    "cwe_id": "CWE-264",
    "cwe_name": "Permissions, Privileges, and Access Controls",
    "cwe_description": "Weaknesses in this category are related to the management of permissions, privileges, and other security features that are used to perform access control.",
    "commit_message": "libcontainer: user: always treat numeric ids numerically\n\nMost shadow-related tools don't treat numeric ids as potential\nusernames, so change our behaviour to match that. Previously, using an\nexplicit specification like 111:222 could result in the UID and GID not\nbeing 111 and 222 respectively (which is confusing).\n\nSigned-off-by: Aleksa Sarai <asarai@suse.de>",
    "type_of_change": "Modification",
    "filename_of_changes": "user.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "57",
    "number_of_lines_deleted_vulnerable_to_cve": "32",
    "vulnerable_lines": [
        "// Line_Reference 241: \t\tname              string",
        "// Line_Reference 268: \t\treturn u.Name == userArg || strconv.Itoa(u.Uid) == userArg",
        "// Line_Reference 277: \thaveUser := users != nil && len(users) > 0",
        "// Line_Reference 278: \tif haveUser {",
        "// Line_Reference 279: \t\t// if we found any user entries that matched our filter, let's take the first one as \"correct\"",
        "// Line_Reference 280: \t\tname = users[0].Name",
        "// Line_Reference 285: \t\t// we asked for a user but didn't find them...  let's check to see if we wanted a numeric user",
        "// Line_Reference 286: \t\tuser.Uid, err = strconv.Atoi(userArg)",
        "// Line_Reference 287: \t\tif err != nil {",
        "// Line_Reference 288: \t\t\t// not numeric - we have to bail",
        "// Line_Reference 289: \t\t\treturn nil, fmt.Errorf(\"Unable to find user %v\", userArg)",
        "// Line_Reference 297: \t\t// if userArg couldn't be found in /etc/passwd but is numeric, just roll with it - this is legit",
        "// Line_Reference 300: \tif groupArg != \"\" || name != \"\" {",
        "// Line_Reference 302: \t\t\t// Explicit group format takes precedence.",
        "// Line_Reference 303: \t\t\tif groupArg != \"\" {",
        "// Line_Reference 304: \t\t\t\treturn g.Name == groupArg || strconv.Itoa(g.Gid) == groupArg",
        "// Line_Reference 307: \t\t\t// Check if user is a member.",
        "// Line_Reference 308: \t\t\tfor _, u := range g.List {",
        "// Line_Reference 309: \t\t\t\tif u == name {",
        "// Line_Reference 310: \t\t\t\t\treturn true",
        "// Line_Reference 311: \t\t\t\t}",
        "// Line_Reference 314: \t\t\treturn false",
        "// Line_Reference 317: \t\t\treturn nil, fmt.Errorf(\"Unable to find groups for user %v: %v\", users[0].Name, err)",
        "// Line_Reference 325: \t\t\t} else {",
        "// Line_Reference 326: \t\t\t\t// we asked for a group but didn't find id...  let's check to see if we wanted a numeric group",
        "// Line_Reference 327: \t\t\t\tuser.Gid, err = strconv.Atoi(groupArg)",
        "// Line_Reference 328: \t\t\t\tif err != nil {",
        "// Line_Reference 329: \t\t\t\t\t// not numeric - we have to bail",
        "// Line_Reference 330: \t\t\t\t\treturn nil, fmt.Errorf(\"Unable to find group %v\", groupArg)",
        "// Line_Reference 338: \t\t\t\t// if groupArg couldn't be found in /etc/group but is numeric, just roll with it - this is legit",
        "// Line_Reference 340: \t\t} else if haveGroup {",
        "// Line_Reference 341: \t\t\t// If implicit group format, fill supplementary gids."
    ]
}
