{
    "cve_id": "CVE-2016-7078",
    "cve_description": "foreman before version 1.15.0 is vulnerable to an information leak through organizations and locations feature. When a user is assigned _no_ organizations/locations, they are able to view all resources instead of none (mirroring an administrator's view). The user's actions are still limited by their assigned permissions, e.g. to control viewing, editing and deletion.",
    "cve_publish_date": "2018-09-10",
    "cwe_id": "CWE-200",
    "cwe_name": "Exposure of Sensitive Information to an Unauthorized Actor",
    "cwe_description": "The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.",
    "commit_message": "Fixes #16982 - Scope properly when no taxonomies are set\n\nThe default scope for hosts and other objects did not restrict\nproperly by taxonomies. An user without organizations or\nlocations, could do anything it's permissions allow to.\nThe list of hosts was unrestricted and showed hosts in\nany location or organization.\n\nThis is fixed to work so that:\n\nUsers without taxonomies, when set to 'any context' cannot see\nanything (at all)\n\nUsers with taxonomies, when set to 'any context' can see\neverything within all of their taxonomies context (including\nchildren taxonomies).\n\nAdmins set to 'any context' can see everything - regardless\nof whether it has a taxonomy or not.\n\nUsers or admins set to some organization/location scope\ncan only see stuff within scope.",
    "type_of_change": "Modification",
    "filename_of_changes": "environments_controller_test.rb",
    "code_language": "Ruby",
    "number_of_lines_added_for_mitigation": "20",
    "number_of_lines_deleted_vulnerable_to_cve": "19",
    "vulnerable_lines": [
        "// Line_Reference 13:     assert_difference 'Environment.count' do",
        "// Line_Reference 25:     env = Environment.find(environment.id)",
        "// Line_Reference 36:     assert_difference('Environment.count', -1) do",
        "// Line_Reference 86:     assert Environment.find_by_name(\"env1\").puppetclasses.map(&:name).sort == [\"a\", \"b\", \"c\"]",
        "// Line_Reference 106:     envs = Environment.find_by_name(\"env1\").puppetclasses.map(&:name).sort",
        "// Line_Reference 107:     assert envs == [\"a\", \"b\", \"c\"]",
        "// Line_Reference 125:     assert Environment.find_by_name(\"env3\").puppetclasses.map(&:name).sort == []",
        "// Line_Reference 143:         {\"obsolete\" =>",
        "// Line_Reference 144:           {\"env1\"  => '[\"a\",\"b\",\"c\",\"_destroy_\"]'}",
        "// Line_Reference 145:         }",
        "// Line_Reference 146:       }, set_session_user",
        "// Line_Reference 147:     assert Environment.find_by_name(\"env1\").hosts.count > 0",
        "// Line_Reference 149:     assert Environment.find_by_name(\"env1\")",
        "// Line_Reference 210:          {\"changed\" =>",
        "// Line_Reference 211:               {\"new\" =>",
        "// Line_Reference 212:                    {\"new\" => '{\"a\":{\"new\":{}}}'}",
        "// Line_Reference 213:               }",
        "// Line_Reference 214:          }, set_session_user",
        "// Line_Reference 215:     assert(Environment.all.map(&:name).include?('new'), 'Should include environment with name \"new\"')"
    ]
}
