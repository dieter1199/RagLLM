{
    "cve_id": "CVE-2016-5093",
    "cve_description": "The get_icu_value_internal function in ext/intl/locale/locale_methods.c in PHP before 5.5.36, 5.6.x before 5.6.22, and 7.x before 7.0.7 does not ensure the presence of a '\\0' character, which allows remote attackers to cause a denial of service (out-of-bounds read) or possibly have unspecified other impact via a crafted locale_get_primary_language call.",
    "cve_publish_date": "2016-08-07",
    "cwe_id": "CWE-125",
    "cwe_name": "Out-of-bounds Read",
    "cwe_description": "The product reads data past the end, or before the beginning, of the intended buffer.",
    "commit_message": "Fix bug #72241: get_icu_value_internal out-of-bounds read",
    "type_of_change": "Modification",
    "filename_of_changes": "locale_methods.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "118",
    "number_of_lines_deleted_vulnerable_to_cve": "117",
    "vulnerable_lines": [
        "// Line_Reference 68: \t\"cel-gaulish\",\t\t\"en-GB-oed\",\t\t\"i-ami\",",
        "// Line_Reference 69: \t\"i-bnn\",\t\t\"i-default\",\t\t\"i-enochian\",",
        "// Line_Reference 70: \t\"i-mingo\",\t\t\"i-pwn\", \t\t\"i-tao\",",
        "// Line_Reference 75: \t\"zh-min-nan\", \t\t\"zh-wuu\", \t\t\"zh-xiang\",",
        "// Line_Reference 81: *  This is in sync with the array LOC_GRANDFATHERED",
        "// Line_Reference 87: \t\"nv\", \t\t\t\"nb\",\t\t\t\"nn\",",
        "// Line_Reference 125: {",
        "// Line_Reference 144: * returns the position of next token for lookup",
        "// Line_Reference 146: * strtokr equivalent search for token in reverse direction",
        "// Line_Reference 152: ",
        "// Line_Reference 174: * returns the position of a singleton if present",
        "// Line_Reference 183: ",
        "// Line_Reference 201: ",
        "// Line_Reference 227: \tint   len=0;",
        "// Line_Reference 243: \tzend_alter_ini_entry(LOCALE_INI_NAME, sizeof(LOCALE_INI_NAME), locale_name, len, PHP_INI_USER, PHP_INI_STAGE_RUNTIME);",
        "// Line_Reference 250: * Gets the value from ICU",
        "// Line_Reference 287: \t\tsingletonPos = getSingletonPos( loc_name );",
        "// Line_Reference 302: \t\tmod_loc_name = estrdup(loc_name );",
        "// Line_Reference 369: static void get_icu_value_src_php( char* tag_name, INTERNAL_FUNCTION_PARAMETERS)",
        "// Line_Reference 425: /* {{{ proto static string Locale::getScript($locale)",
        "// Line_Reference 426:  * gets the script for the $locale",
        "// Line_Reference 428: /* {{{ proto static string locale_get_script($locale)",
        "// Line_Reference 429:  * gets the script for the $locale",
        "// Line_Reference 431: PHP_FUNCTION( locale_get_script )",
        "// Line_Reference 437: /* {{{ proto static string Locale::getRegion($locale)",
        "// Line_Reference 438:  * gets the region for the $locale",
        "// Line_Reference 440: /* {{{ proto static string locale_get_region($locale)",
        "// Line_Reference 441:  * gets the region for the $locale",
        "// Line_Reference 443: PHP_FUNCTION( locale_get_region )",
        "// Line_Reference 449: /* {{{ proto static string Locale::getPrimaryLanguage($locale)",
        "// Line_Reference 450:  * gets the primary language for the $locale",
        "// Line_Reference 452: /* {{{ proto static string locale_get_primary_language($locale)",
        "// Line_Reference 453:  * gets the primary language for the $locale",
        "// Line_Reference 455: PHP_FUNCTION(locale_get_primary_language )",
        "// Line_Reference 463:  * common code shared by display_xyz functions to  get the value from ICU",
        "// Line_Reference 465: static void get_icu_disp_value_src_php( char* tag_name, INTERNAL_FUNCTION_PARAMETERS)",
        "// Line_Reference 491: \t\t&loc_name, &loc_name_len ,",
        "// Line_Reference 528: ",
        "// Line_Reference 607: PHP_FUNCTION(locale_get_display_name)",
        "// Line_Reference 619: PHP_FUNCTION(locale_get_display_language)",
        "// Line_Reference 631: PHP_FUNCTION(locale_get_display_script)",
        "// Line_Reference 643: PHP_FUNCTION(locale_get_display_region)",
        "// Line_Reference 657: PHP_FUNCTION(locale_get_display_variant)",
        "// Line_Reference 670:  */",
        "// Line_Reference 682: /*",
        "// Line_Reference 683: \tICU expects the buffer to be allocated  before calling the function",
        "// Line_Reference 684: \tand so the buffer size has been explicitly specified",
        "// Line_Reference 685: \tICU uloc.h #define \tULOC_KEYWORD_AND_VALUES_CAPACITY   100",
        "// Line_Reference 724: \t\t\t}",
        "// Line_Reference 743:  /* {{{ proto static string Locale::canonicalize($locale)",
        "// Line_Reference 744:  * @return string the canonicalized locale",
        "// Line_Reference 746:  /* {{{ proto static string locale_canonicalize(Locale $loc, string $locale)",
        "// Line_Reference 755: /* {{{ append_key_value",
        "// Line_Reference 758: * returns 1 if successful , -1 if not found ,",
        "// Line_Reference 770: \t\tif(strcmp(key_name, LOC_LANG_TAG) != 0 &&",
        "// Line_Reference 795: /* {{{ append_multiple_key_values",
        "// Line_Reference 798: * used for 'variant','extlang','private'",
        "// Line_Reference 799: * returns 1 if successful , -1 if not found ,",
        "// Line_Reference 853: \t\tfor( i=0 ; i< max_value; i++ ){",
        "// Line_Reference 854: \t\t\tsnprintf( cur_key_name , 30, \"%s%d\", key_name , i);",
        "// Line_Reference 876: * returns 0  if locale_compose needs to be aborted",
        "// Line_Reference 893: /* {{{ proto static string Locale::composeLocale($array)",
        "// Line_Reference 894: * Creates a locale by combining the parts of locale-ID passed",
        "// Line_Reference 896: /* {{{ proto static string compose_locale($array)",
        "// Line_Reference 897: * Creates a locale by combining the parts of locale-ID passed",
        "// Line_Reference 923: \tresult = append_key_value(loc_name, hash_arr,  LOC_GRANDFATHERED_LANG_TAG);",
        "// Line_Reference 932: \tresult = append_key_value(loc_name, hash_arr , LOC_LANG_TAG);",
        "// Line_Reference 950: \tresult = append_key_value(loc_name, hash_arr , LOC_SCRIPT_TAG);",
        "// Line_Reference 954: ",
        "// Line_Reference 962: \tresult = append_multiple_key_values( loc_name, hash_arr , LOC_VARIANT_TAG TSRMLS_CC);",
        "// Line_Reference 988: \tint \tlen =0;",
        "// Line_Reference 992: \t\tmod_loc_name = loc_name ;",
        "// Line_Reference 996: \t\t\tif( singletonPos!=-1){",
        "// Line_Reference 997: \t\t\t\tif( (*(mod_loc_name+singletonPos)=='x') || (*(mod_loc_name+singletonPos)=='X') ){",
        "// Line_Reference 1022: ",
        "// Line_Reference 1047: \tif( (strcmp(key_name , LOC_PRIVATE_TAG)==0) ||",
        "// Line_Reference 1051: \t\t\ttoken = php_strtok_r( key_value , DELIMITER ,&last_ptr);",
        "// Line_Reference 1056: \t\t\tsprintf( cur_key_name , \"%s%d\", key_name , cnt++);",
        "// Line_Reference 1060: \t\t\t\tsprintf( cur_key_name , \"%s%d\", key_name , cnt++);",
        "// Line_Reference 1080: \t\tefree(key_value);",
        "// Line_Reference 1086: /* {{{ proto static array Locale::parseLocale($locale)",
        "// Line_Reference 1089: /* {{{ proto static array parse_locale($locale)",
        "// Line_Reference 1147: ",
        "// Line_Reference 1165: \tif( findOffset( LOC_GRANDFATHERED , loc_name ) >=  0 ){",
        "// Line_Reference 1168: \telse {",
        "// Line_Reference 1173: \t\t\ttoken = php_strtok_r( variant , DELIMITER , &saved_ptr);",
        "// Line_Reference 1184: ",
        "// Line_Reference 1223: * Checks if a $langtag filter matches with $locale according to RFC 4647's basic filtering algorithm",
        "// Line_Reference 1227: * Checks if a $langtag filter matches with $locale according to RFC 4647's basic filtering algorithm",
        "// Line_Reference 1246: \tzend_bool \tboolCanonical \t= 0;",
        "// Line_Reference 1250: ",
        "// Line_Reference 1252: \t\t&lang_tag, &lang_tag_len , &loc_range , &loc_range_len ,",
        "// Line_Reference 1273: \t\t\tintl_error_set( NULL, status,",
        "// Line_Reference 1281: \t\t\tintl_error_set( NULL, status,",
        "// Line_Reference 1309: ",
        "// Line_Reference 1313: \t\t\tif( isIDSeparator(*chrcheck) || isEndOfTag(*chrcheck) ){",
        "// Line_Reference 1349: ",
        "// Line_Reference 1365: ",
        "// Line_Reference 1369: \t\t\tif( isIDSeparator(*chrcheck) || isEndOfTag(*chrcheck) ){",
        "// Line_Reference 1396: \tfor( i=0; i< arr_size; i++ ){",
        "// Line_Reference 1406: * returns the lookup result to lookup_loc_range_src_php",
        "// Line_Reference 1430: ",
        "// Line_Reference 1439: \t\t}",
        "// Line_Reference 1447: \t\tcur_arr_len++ ;",
        "// Line_Reference 1452: \t\tfor(i=0; i<cur_arr_len; i++) {",
        "// Line_Reference 1462: \t\t\tresult = strToMatch(lang_tag, cur_arr[i*2]);",
        "// Line_Reference 1485: \t}",
        "// Line_Reference 1489: \tresult = strToMatch(loc_range, cur_loc_range);",
        "// Line_Reference 1501: \t\tfor(i=0; i< cur_arr_len; i++){",
        "// Line_Reference 1502: \t\t\tif(cur_arr[i*2] != NULL && strlen(cur_arr[i*2]) == saved_pos && strncmp(cur_loc_range, cur_arr[i*2], saved_pos) == 0) {",
        "// Line_Reference 1518: /* {{{ proto string Locale::lookup(array $langtag, string $locale[, bool $canonicalize[, string $default = null]])",
        "// Line_Reference 1520: * range",
        "// Line_Reference 1525: * range",
        "// Line_Reference 1555: \t}",
        "// Line_Reference 1556: ",
        "// Line_Reference 1593: ",
        "// Line_Reference 1596: \tlen = uloc_acceptLanguageFromHTTP(resultLocale, INTL_MAX_LOCALE_LEN,"
    ]
}
