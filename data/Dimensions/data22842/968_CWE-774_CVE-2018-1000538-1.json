{
    "cve_id": "CVE-2018-1000538",
    "cve_description": "Minio Inc. Minio S3 server version prior to RELEASE.2018-05-16T23-35-33Z contains a Allocation of Memory Without Limits or Throttling (similar to CWE-774) vulnerability in write-to-RAM that can result in Denial of Service. This attack appear to be exploitable via Sending V4-(pre)signed requests with large bodies . This vulnerability appears to have been fixed in after commit 9c8b7306f55f2c8c0a5c7cea9a8db9d34be8faa7.",
    "cve_publish_date": "2018-06-26",
    "cwe_id": "CWE-774",
    "cwe_name": "Allocation of File Descriptors or Handles Without Limits or Throttling",
    "cwe_description": "The product allocates file descriptors or handles on behalf of an actor without imposing any restrictions on how many descriptors can be allocated, in violation of the intended security policy for that actor.",
    "commit_message": "security: fix write-to-RAM DoS vulnerability (#5957)\n\nThis commit fixes a DoS vulnerability for certain APIs using\r\nsignature V4 by verifying the content-md5 and/or content-sha56 of\r\nthe request body in a streaming mode.\r\n\r\nThe issue was caused by reading the entire body of the request into\r\nmemory to verify the content-md5 or content-sha56 checksum if present.\r\n\r\nThe vulnerability could be exploited by either replaying a V4 request\r\n(in the 15 min time frame) or sending a V4 presigned request with a\r\nlarge body.",
    "type_of_change": "Modification",
    "filename_of_changes": "auth-handler.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "28",
    "number_of_lines_deleted_vulnerable_to_cve": "41",
    "vulnerable_lines": [
        "// Line_Reference 212: \tif r == nil {",
        "// Line_Reference 213: \t\treturn ErrInternalError",
        "// Line_Reference 214: \t}",
        "// Line_Reference 215: ",
        "// Line_Reference 220: \tpayload, err := ioutil.ReadAll(r.Body)",
        "// Line_Reference 221: \tif err != nil {",
        "// Line_Reference 222: \t\tlogger.LogIf(context.Background(), err)",
        "// Line_Reference 223: \t\treturn ErrInternalError",
        "// Line_Reference 224: \t}",
        "// Line_Reference 225: ",
        "// Line_Reference 226: \t// Populate back the payload.",
        "// Line_Reference 227: \tr.Body = ioutil.NopCloser(bytes.NewReader(payload))",
        "// Line_Reference 228: ",
        "// Line_Reference 229: \t// Verify Content-Md5, if payload is set.",
        "// Line_Reference 230: \tif clntMD5B64, ok := r.Header[\"Content-Md5\"]; ok {",
        "// Line_Reference 231: \t\tif clntMD5B64[0] == \"\" {",
        "// Line_Reference 234: \t\tmd5Sum, err := base64.StdEncoding.Strict().DecodeString(clntMD5B64[0])",
        "// Line_Reference 235: \t\tif err != nil {",
        "// Line_Reference 236: \t\t\treturn ErrInvalidDigest",
        "// Line_Reference 237: \t\t}",
        "// Line_Reference 238: \t\tif !bytes.Equal(md5Sum, getMD5Sum(payload)) {",
        "// Line_Reference 239: \t\t\treturn ErrBadDigest",
        "// Line_Reference 240: \t\t}",
        "// Line_Reference 243: \tif skipContentSha256Cksum(r) {",
        "// Line_Reference 244: \t\treturn ErrNone",
        "// Line_Reference 245: \t}",
        "// Line_Reference 246: ",
        "// Line_Reference 247: \t// Verify that X-Amz-Content-Sha256 Header == sha256(payload)",
        "// Line_Reference 248: \t// If X-Amz-Content-Sha256 header is not sent then we don't calculate/verify sha256(payload)",
        "// Line_Reference 249: \tsumHex, ok := r.Header[\"X-Amz-Content-Sha256\"]",
        "// Line_Reference 250: \tif isRequestPresignedSignatureV4(r) {",
        "// Line_Reference 251: \t\tsumHex, ok = r.URL.Query()[\"X-Amz-Content-Sha256\"]",
        "// Line_Reference 252: \t}",
        "// Line_Reference 253: \tif ok {",
        "// Line_Reference 254: \t\tif sumHex[0] == \"\" {",
        "// Line_Reference 255: \t\t\treturn ErrContentSHA256Mismatch",
        "// Line_Reference 256: \t\t}",
        "// Line_Reference 257: \t\tsum, err := hex.DecodeString(sumHex[0])",
        "// Line_Reference 258: \t\tif err != nil {",
        "// Line_Reference 259: \t\t\treturn ErrContentSHA256Mismatch",
        "// Line_Reference 261: \t\tif !bytes.Equal(sum, getSHA256Sum(payload)) {"
    ]
}
