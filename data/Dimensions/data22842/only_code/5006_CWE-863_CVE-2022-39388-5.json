"fmt"
"google.golang.org/grpc/peer"
func getConnectionAddress(ctx context.Context) string {
peerInfo, ok := peer.FromContext(ctx)
peerAddr := "unknown"
if ok {
peerAddr = peerInfo.Addr.String()
}
return peerAddr
}
caller := Authenticate(ctx, s.Authenticators)
// authenticate goes through a list of authenticators (provided client cert, k8s jwt, and ID token)
// and authenticates if one of them is valid.
func Authenticate(ctx context.Context, auth []security.Authenticator) *security.Caller {
// TODO: apply different authenticators in specific order / according to configuration.
var errMsg string
for id, authn := range auth {
u, err := authn.Authenticate(ctx)
if err != nil {
errMsg += fmt.Sprintf("Authenticator %s at index %d got error: %v. ", authn.AuthenticatorType(), id, err)
}
if u != nil && err == nil {
serverCaLog.Debugf("Authentication successful through auth source %v", u.AuthSource)
return u
}
}
serverCaLog.Warnf("Authentication failed for %v: %s", getConnectionAddress(ctx), errMsg)
return nil
}
