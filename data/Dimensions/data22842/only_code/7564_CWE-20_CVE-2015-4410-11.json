attr_reader :data
data = []
new data
!!str.match(/^[0-9a-f]{24}$/i)
end
def initialize(data = nil, time = nil)
if data
@data = data
elsif time
@data = @@generator.generate(time.to_i)
else
@data = @@generator.next
@@string_format % data
Time.at(@data.pack("C4").unpack("N")[0]).utc
new io.read(12).unpack('C*')
io << data.pack('C12')
@machine_id = Digest::MD5.digest(Socket.gethostname).unpack("C3")
@last_timestamp = nil
# Return object id data based on the current time, incrementing a
# counter for object ids generated in the same second.
now = Time.new.to_i
counter = @mutex.synchronize do
last_timestamp, @last_timestamp = @last_timestamp, now
if last_timestamp == now
@counter += 1
else
@counter = 0
end
generate(now, counter)
# Generate object id data for a given time using the provided +inc+.
def generate(time, inc = 0)
pid = Process.pid % 0xFFFF
[
time >> 24 & 0xFF, # 4 bytes time (network order)
time >> 16 & 0xFF,
time >> 8  & 0xFF,
time       & 0xFF,
@machine_id[0],   # 3 bytes machine
@machine_id[1],
@machine_id[2],
pid  >> 8  & 0xFF, # 2 bytes process id
pid        & 0xFF,
inc  >> 16 & 0xFF, # 3 bytes increment
inc  >> 8  & 0xFF,
inc        & 0xFF,
]
