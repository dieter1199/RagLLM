import { procedure, router } from "#lib/trpc";
import { isAuthenticated } from "#lib/middleware";
import { UnderscoreID, zodId } from "#lib/mongo";
import * as errors from "#lib/errors";
import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
import { runWebhooks } from "#lib/webhooks";
import { runGitSyncHook } from "#lib";
type ContentGroupEvent =
| {
action: "create";
data: ContentGroup;
}
| {
action: "update";
data: Partial<ContentGroup> & { id: string };
}
| { action: "delete"; data: { id: string } }
| { action: "move"; data: ContentGroup }
| { action: "reorder"; data: { id: string; index: number } };
const publishEvent = createEventPublisher<ContentGroupEvent>(
(workspaceId) => `contentGroups:${workspaceId}`
);
publishEvent(ctx, `${ctx.auth.workspaceId}`, { action: "update", data: { id, ...update } });
publishEvent(ctx, `${ctx.auth.workspaceId}`, {
publishEvent(ctx, `${ctx.auth.workspaceId}`, {
publishEvent(ctx, `${ctx.auth.workspaceId}`, {
publishEvent(ctx, `${ctx.auth.workspaceId}`, {
return createEventSubscription<ContentGroupEvent>(ctx, `contentGroups:${ctx.auth.workspaceId}`);
export { contentGroupsRouter, publishEvent as publishContentGroupEvent };
