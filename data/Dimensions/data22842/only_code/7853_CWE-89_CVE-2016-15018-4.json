import com.google.common.base.Preconditions;
import uk.q3c.krail.core.user.opt.OptionException;
import uk.q3c.krail.jpa.persist.DefaultJpaDao_LongInt;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.persistence.TypedQuery;
* Converts {@link OptionCacheKey} to {@link OptionEntity_LongInt} for persistence.
public class DefaultOptionJpaDao_LongInt extends DefaultJpaDao_LongInt implements OptionJpaDao_LongInt {
protected DefaultOptionJpaDao_LongInt(EntityManagerProvider entityManagerProvider, OptionStringConverter optionStringConverter) {
super(entityManagerProvider);
@Override
@Transactional
@Nonnull
public <V> Object write(@Nonnull OptionCacheKey cacheKey, @Nonnull Optional<V> value) {
checkRankOption(cacheKey, SPECIFIC_RANK);
Preconditions.checkArgument(value.isPresent(), "Value must be non-empty");
EntityManager entityManager = getEntityManager();
// is there an existing entity (bearing in mind that the id field is not the same as the key field
String stringValue = optionStringConverter.convertValueToString(value.get());
Optional<OptionEntity_LongInt> existingEntity = find(cacheKey);
if (existingEntity.isPresent()) {
OptionEntity_LongInt existing = existingEntity.get();
existing
.setValue(stringValue);
entityManager.persist(existingEntity.get());
return existing;
} else {
//noinspection ConstantConditions
final OptionEntity_LongInt entity = new OptionEntity_LongInt(cacheKey, stringValue);
entityManager.persist(entity);
return entity;
}
}
@Transactional
@Nonnull
public Optional<OptionEntity_LongInt> find(@Nonnull OptionCacheKey cacheKey) {
checkRankOption(cacheKey, SPECIFIC_RANK);
Select select = selectSingleRank(cacheKey);
TypedQuery<OptionEntity_LongInt> query = getEntityManager().createQuery(select.statement(), OptionEntity_LongInt.class);
List<OptionEntity_LongInt> results = query.getResultList();
if (results.isEmpty()) {
return Optional.empty();
} else {
if (results.size() > 1) {
throw new OptionException("Multiple values for one cache key found, cacheKey =  " + cacheKey);
}
return Optional.of(results.get(0));
}
}
return new Select().from(entityName(OptionEntity_LongInt.class))
@Transactional
@Nonnull
@Override
public Optional<?> deleteValue(@Nonnull OptionCacheKey cacheKey) {
checkRankOption(cacheKey, SPECIFIC_RANK);
final Optional<OptionEntity_LongInt> entity = find(cacheKey);
if (entity.isPresent()) {
String entityValue = entity.get()
.getValue();
delete(entity.get());
return Optional.of(entityValue);
} else {
return Optional.empty();
}
}
final Optional<OptionEntity_LongInt> optionalEntity = find(cacheKey);
if (optionalEntity.isPresent()) {
String value = optionalEntity.get()
.getValue();
return Optional.of(optionStringConverter.convertStringToValue(cacheKey, value));
} else {
return Optional.empty();
}
final Query query = getEntityManager().createQuery("DELETE FROM " + entityName(OptionEntity_LongInt.class));
return query.executeUpdate();
return super.count(OptionEntity_LongInt.class);
