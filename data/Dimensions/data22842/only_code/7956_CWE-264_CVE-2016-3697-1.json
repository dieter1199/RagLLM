name              string
return u.Name == userArg || strconv.Itoa(u.Uid) == userArg
haveUser := users != nil && len(users) > 0
if haveUser {
// if we found any user entries that matched our filter, let's take the first one as "correct"
name = users[0].Name
// we asked for a user but didn't find them...  let's check to see if we wanted a numeric user
user.Uid, err = strconv.Atoi(userArg)
if err != nil {
// not numeric - we have to bail
return nil, fmt.Errorf("Unable to find user %v", userArg)
// if userArg couldn't be found in /etc/passwd but is numeric, just roll with it - this is legit
if groupArg != "" || name != "" {
// Explicit group format takes precedence.
if groupArg != "" {
return g.Name == groupArg || strconv.Itoa(g.Gid) == groupArg
// Check if user is a member.
for _, u := range g.List {
if u == name {
return true
}
return false
return nil, fmt.Errorf("Unable to find groups for user %v: %v", users[0].Name, err)
} else {
// we asked for a group but didn't find id...  let's check to see if we wanted a numeric group
user.Gid, err = strconv.Atoi(groupArg)
if err != nil {
// not numeric - we have to bail
return nil, fmt.Errorf("Unable to find group %v", groupArg)
// if groupArg couldn't be found in /etc/group but is numeric, just roll with it - this is legit
} else if haveGroup {
// If implicit group format, fill supplementary gids.