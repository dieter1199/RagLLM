import { procedure, router } from "#lib/trpc";
import { isAuthenticated } from "#lib/middleware";
import { zodId } from "#lib/mongo";
Role,
import * as errors from "#lib/errors";
import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
import { updateSessionRole } from "#lib/session";
type RoleEvent =
| {
action: "create";
data: Role;
}
| { action: "update"; data: Partial<Role> & { id: string } }
| { action: "delete"; data: { id: string; newRole: Role } };
const publishEvent = createEventPublisher((workspaceId) => `roles:${workspaceId}`);
return createEventSubscription<RoleEvent>(ctx, `roles:${ctx.auth.workspaceId}`);
publishEvent(ctx, `${ctx.auth.workspaceId}`, {
publishEvent(ctx, `${ctx.auth.workspaceId}`, {
publishEvent(ctx, `${ctx.auth.workspaceId}`, {
