// Executes a regular expression
//   size_t input_size                - Input data size
//      RE_FLAGS_NOT_AT_START
size_t input_size,
#define prolog if (bytes_matched >= max_bytes_matched) \
}
#define fail_if_error(e) switch (e) { \
}
max_bytes_matched = (int) yr_min(input_size, RE_SCAN_LIMIT);
// character_size is 2 and input_size is odd we are ignoring the
match = IS_WORD_CHAR(*input);
match = !IS_WORD_CHAR(*input);
if (bytes_matched == 0 &&
!(flags & RE_FLAGS_NOT_AT_START) &&
!(flags & RE_FLAGS_BACKWARDS))
else if (IS_WORD_CHAR(*(input - input_incr)) != IS_WORD_CHAR(*input))
match = TRUE;
match = FALSE;
kill = input_size > (size_t) bytes_matched;
kill = (flags & RE_FLAGS_NOT_AT_START) || (bytes_matched != 0);
input_size > (size_t) bytes_matched;
if (flags & RE_FLAGS_WIDE &&
bytes_matched < max_bytes_matched &&
*(input + 1) != 0)
{
_yr_re_fiber_kill_all(&fibers, &storage->fiber_pool);
}
size_t input_size,
int max_bytes_matched = input_size;
