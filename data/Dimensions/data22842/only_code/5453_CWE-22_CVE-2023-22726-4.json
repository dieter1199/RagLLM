"io/fs"
type MapFsImpl struct {
fstest.MapFS
func (fsys MapFsImpl) MkdirAll(path string, perm fs.FileMode) error {
// mocked no-op
return nil
type WritableFile struct {
fs.File
fsys fstest.MapFS
path string
func (file WritableFile) Write(data []byte) (int, error) {
file.fsys[file.path].Data = data
return len(data), nil
func (fsys MapFsImpl) Open(path string) (fs.File, error) {
var file = fstest.MapFile{
Data: []byte("content2"),
fsys.MapFS[path] = &file
result, err := fsys.MapFS.Open(path)
return WritableFile{result, fsys.MapFS, path}, err
func (fsys MapFsImpl) OpenAtEnd(path string) (fs.File, error) {
var file = fstest.MapFile{
Data: []byte("content2"),
fsys.MapFS[path] = &file
result, err := fsys.MapFS.Open(path)
return WritableFile{result, fsys.MapFS, path}, err
uploads(router, MapFsImpl{memfs})
uploads(router, MapFsImpl{memfs})
assert.Equal("content", string(memfs["1/some/file"].Data))
uploads(router, MapFsImpl{memfs})
"1/file.txt": {
downloads(router, memfs)
"1/some/file": {
downloads(router, memfs)
assert.Equal("some/file/.", response.Value[0].Path)
"1/some/file": {
downloads(router, memfs)