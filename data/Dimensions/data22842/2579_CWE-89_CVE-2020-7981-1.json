{
    "cve_id": "CVE-2020-7981",
    "cve_description": "sql.rb in Geocoder before 1.6.1 allows Boolean-based SQL injection when within_bounding_box is used in conjunction with untrusted sw_lat, sw_lng, ne_lat, or ne_lng data.",
    "cve_publish_date": "2020-01-25",
    "cwe_id": "CWE-89",
    "cwe_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
    "cwe_description": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.",
    "commit_message": "Sanitize lat/lon for SQL query.",
    "type_of_change": "Modification",
    "filename_of_changes": "sql.rb",
    "code_language": "Ruby",
    "number_of_lines_added_for_mitigation": "4",
    "number_of_lines_deleted_vulnerable_to_cve": "4",
    "vulnerable_lines": [
        "// Line_Reference 47:       spans = \"#{lat_attr} BETWEEN #{sw_lat} AND #{ne_lat} AND \"",
        "// Line_Reference 50:         spans + \"(#{lon_attr} BETWEEN #{sw_lng} AND 180 OR \" +",
        "// Line_Reference 51:         \"#{lon_attr} BETWEEN -180 AND #{ne_lng})\"",
        "// Line_Reference 53:         spans + \"#{lon_attr} BETWEEN #{sw_lng} AND #{ne_lng}\""
    ]
}
