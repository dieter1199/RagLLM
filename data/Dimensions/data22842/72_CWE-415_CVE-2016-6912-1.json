{
    "cve_id": "CVE-2016-6912",
    "cve_description": "Double free vulnerability in the gdImageWebPtr function in the GD Graphics Library (aka libgd) before 2.2.4 allows remote attackers to have unspecified impact via large width and height values.",
    "cve_publish_date": "2017-01-26",
    "cwe_id": "CWE-415",
    "cwe_name": "Double Free",
    "cwe_description": "The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations.",
    "commit_message": "Fix double-free in gdImageWebPtr()\n\nThe issue is that gdImageWebpCtx() (which is called by gdImageWebpPtr() and\nthe other WebP output functions to do the real work) does not return whether\nit succeeded or failed, so this is not checked in gdImageWebpPtr() and the\nfunction wrongly assumes everything is okay, which is not, in this case,\nbecause there is a size limitation for WebP, namely that the width and\nheight must by less than 16383.\n\nWe can't change the signature of gdImageWebpCtx() for API compatibility\nreasons, so we introduce the static helper _gdImageWebpCtx() which returns\nsuccess respective failure, so gdImageWebpPtr() and gdImageWebpPtrEx() can\ncheck the return value. We leave it solely to libwebp for now to report\nwarnings regarding the failing write.\n\nThis issue had been reported by Ibrahim El-Sayed to security@libgd.org.\n\nCVE-2016-6912",
    "type_of_change": "Modification",
    "filename_of_changes": "gd_webp.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "46",
    "number_of_lines_deleted_vulnerable_to_cve": "28",
    "vulnerable_lines": [
        "// Line_Reference 165: /*",
        "// Line_Reference 166:   Function: gdImageWebpCtx",
        "// Line_Reference 167: ",
        "// Line_Reference 168:     Write the image as WebP data via a <gdIOCtx>. See <gdImageWebpEx>",
        "// Line_Reference 169:     for more details.",
        "// Line_Reference 170: ",
        "// Line_Reference 171:   Parameters:",
        "// Line_Reference 172: ",
        "// Line_Reference 173:     im      - The image to write.",
        "// Line_Reference 174:     outfile - The output sink.",
        "// Line_Reference 175:     quality - Image quality.",
        "// Line_Reference 177:   Returns:",
        "// Line_Reference 178: ",
        "// Line_Reference 179:     Nothing.",
        "// Line_Reference 180: */",
        "// Line_Reference 181: BGD_DECLARE(void) gdImageWebpCtx (gdImagePtr im, gdIOCtx * outfile, int quality)",
        "// Line_Reference 190: \t\treturn;",
        "// Line_Reference 194: \t\tgd_error(\"Paletter image not supported by webp\");",
        "// Line_Reference 195: \t\treturn;",
        "// Line_Reference 203: \t\treturn;",
        "// Line_Reference 207: \t\treturn;",
        "// Line_Reference 212: \t\treturn;",
        "// Line_Reference 281: \tgdImageWebpCtx(im, out, quality);",
        "// Line_Reference 305: \tgdImageWebpCtx(im, out, -1);",
        "// Line_Reference 321: \tgdImageWebpCtx(im, out, -1);",
        "// Line_Reference 322: \trv = gdDPExtractData(out, size);",
        "// Line_Reference 340: \tgdImageWebpCtx(im, out, quality);",
        "// Line_Reference 341: \trv = gdDPExtractData(out, size);"
    ]
}
