{
    "cve_id": "CVE-2014-8122",
    "cve_description": "Race condition in JBoss Weld before 2.2.8 and 3.x before 3.0.0 Alpha3 allows remote attackers to obtain information from a previous conversation via vectors related to a stale thread state.",
    "cve_publish_date": "2015-02-13",
    "cwe_id": "CWE-362",
    "cwe_name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
    "cwe_description": "The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.",
    "commit_message": "WELD-1802 An exception during context deactivation/dissociation should\nnot abort further procesing",
    "type_of_change": "Modification",
    "filename_of_changes": "ConversationContextActivator.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "25",
    "number_of_lines_deleted_vulnerable_to_cve": "20",
    "vulnerable_lines": [
        "// Line_Reference 141:         ConversationContext conversationContext = httpConversationContext();",
        "// Line_Reference 142:         if (conversationContext.isActive()) {",
        "// Line_Reference 143:             // Only deactivate the context if one is already active, otherwise we get Exceptions",
        "// Line_Reference 144:             if (conversationContext instanceof LazyHttpConversationContextImpl) {",
        "// Line_Reference 145:                 LazyHttpConversationContextImpl lazyConversationContext = (LazyHttpConversationContextImpl) conversationContext;",
        "// Line_Reference 146:                 if (!lazyConversationContext.isInitialized()) {",
        "// Line_Reference 147:                     // if this lazy conversation has not been touched yet, just deactivate it",
        "// Line_Reference 148:                     lazyConversationContext.deactivate();",
        "// Line_Reference 149:                     return;",
        "// Line_Reference 151:             }",
        "// Line_Reference 152:             boolean isTransient = conversationContext.getCurrentConversation().isTransient();",
        "// Line_Reference 153:             if (ConversationLogger.LOG.isTraceEnabled()) {",
        "// Line_Reference 155:                     ConversationLogger.LOG.cleaningUpTransientConversation();",
        "// Line_Reference 156:                 } else {",
        "// Line_Reference 157:                     ConversationLogger.LOG.cleaningUpConversation(conversationContext.getCurrentConversation().getId());",
        "// Line_Reference 160:             conversationContext.invalidate();",
        "// Line_Reference 161:             conversationContext.deactivate();",
        "// Line_Reference 162:             if (isTransient) {",
        "// Line_Reference 163:                 conversationDestroyedEvent.fire(request);",
        "// Line_Reference 164:             }"
    ]
}
