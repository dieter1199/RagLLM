{
    "cve_id": "CVE-2015-10044",
    "cve_description": "A vulnerability classified as critical was found in gophergala sqldump. This vulnerability affects unknown code. The manipulation leads to sql injection. The patch is identified as 76db54e9073b5248b8863e71a63d66a32d567d21. It is recommended to apply a patch to fix this issue. VDB-218350 is the identifier assigned to this vulnerability.",
    "cve_publish_date": "2023-01-15",
    "cwe_id": "CWE-89",
    "cwe_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
    "cwe_description": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.",
    "commit_message": "Protection against sql injection doesnt work with ? for table. Using HTMLEscapeString instead",
    "type_of_change": "Modification",
    "filename_of_changes": "dump.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "14",
    "number_of_lines_deleted_vulnerable_to_cve": "13",
    "vulnerable_lines": [
        "// Line_Reference 4:  * turn into generic functions",
        "// Line_Reference 19: \tuser, pw := getCredentials(r)",
        "// Line_Reference 20: \tconn, err := sql.Open(\"mysql\", dsn(user, pw, database))",
        "// Line_Reference 44: \tuser, pw := getCredentials(r)",
        "// Line_Reference 46: \tconn, err := sql.Open(\"mysql\", dsn(user, pw, database))",
        "// Line_Reference 70: \tuser, pw := getCredentials(r)",
        "// Line_Reference 74: \tconn, err := sql.Open(\"mysql\", dsn(user, pw, database))",
        "// Line_Reference 78: \tstatement, err := conn.Prepare(\"select * from ?\")",
        "// Line_Reference 81: \trows, err := statement.Query(table)",
        "// Line_Reference 126: \tuser, pw := getCredentials(r)",
        "// Line_Reference 127: \tconn, err := sql.Open(\"mysql\", dsn(user, pw, database))",
        "// Line_Reference 131: \tstatement, err := conn.Prepare(\"select * from ?\")",
        "// Line_Reference 134: \trows, err := statement.Query(table)"
    ]
}
