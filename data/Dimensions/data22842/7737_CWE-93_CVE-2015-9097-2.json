{
    "cve_id": "CVE-2015-9097",
    "cve_description": "The mail gem before 2.5.5 for Ruby (aka A Really Ruby Mail Library) is vulnerable to SMTP command injection via CRLF sequences in a RCPT TO or MAIL FROM command, as demonstrated by CRLF sequences immediately before and after a DATA substring.",
    "cve_publish_date": "2017-06-12",
    "cwe_id": "CWE-93",
    "cwe_name": "Improper Neutralization of CRLF Sequences ('CRLF Injection')",
    "cwe_description": "The product uses CRLF (carriage return line feeds) as a special element, e.g. to separate lines or records, but it does not neutralize or incorrectly neutralizes CRLF sequences from inputs.",
    "commit_message": "Also unfold and split lazily\n\nThis has little effect on the specs, but on my header reading example it\nmakes about a 10x performance difference, finally bringing it within one\norder of magnitude of the \"fast hacky solution\" at\nhttps://gist.github.com/5901bbd810c08ed3d0b1",
    "type_of_change": "Modification",
    "filename_of_changes": "header.rb",
    "code_language": "Ruby",
    "number_of_lines_added_for_mitigation": "1",
    "number_of_lines_deleted_vulnerable_to_cve": "18",
    "vulnerable_lines": [
        "// Line_Reference 247:     # 2.2.3. Long Header Fields",
        "// Line_Reference 248:     #",
        "// Line_Reference 249:     #  The process of moving from this folded multiple-line representation",
        "// Line_Reference 250:     #  of a header field to its single line representation is called",
        "// Line_Reference 251:     #  \"unfolding\". Unfolding is accomplished by simply removing any CRLF",
        "// Line_Reference 252:     #  that is immediately followed by WSP.  Each header field should be",
        "// Line_Reference 253:     #  treated in its unfolded form for further syntactic and semantic",
        "// Line_Reference 254:     #  evaluation.",
        "// Line_Reference 255:     def unfold(string)",
        "// Line_Reference 256:       string.gsub(/#{CRLF}#{WSP}+/, ' ').gsub(/#{WSP}+/, ' ')",
        "// Line_Reference 257:     end",
        "// Line_Reference 258: ",
        "// Line_Reference 259:     # Returns the header with all the folds removed",
        "// Line_Reference 260:     def unfolded_header",
        "// Line_Reference 261:       @unfolded_header ||= unfold(raw_source)",
        "// Line_Reference 262:     end",
        "// Line_Reference 263: ",
        "// Line_Reference 267:       self.fields = unfolded_header.split(CRLF)"
    ]
}
