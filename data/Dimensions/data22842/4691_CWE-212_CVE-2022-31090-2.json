{
    "cve_id": "CVE-2022-31090",
    "cve_description": "Guzzle, an extensible PHP HTTP client. `Authorization` headers on requests are sensitive information. In affected versions when using our Curl handler, it is possible to use the `CURLOPT_HTTPAUTH` option to specify an `Authorization` header. On making a request which responds with a redirect to a URI with a different origin (change in host, scheme or port), if we choose to follow it, we should remove the `CURLOPT_HTTPAUTH` option before continuing, stopping curl from appending the `Authorization` header to the new request. Affected Guzzle 7 users should upgrade to Guzzle 7.4.5 as soon as possible. Affected users using any earlier series of Guzzle should upgrade to Guzzle 6.5.8 or 7.4.5. Note that a partial fix was implemented in Guzzle 7.4.2, where a change in host would trigger removal of the curl-added Authorization header, however this earlier fix did not cover change in scheme or change in port. If you do not require or expect redirects to be followed, one should simply disable redirects all together. Alternatively, one can specify to use the Guzzle steam handler backend, rather than curl.",
    "cve_publish_date": "2022-06-27",
    "cwe_id": "CWE-212",
    "cwe_name": "Improper Removal of Sensitive Information Before Storage or Transfer",
    "cwe_description": "The product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.",
    "commit_message": "Release 7.4.5 (#3043)",
    "type_of_change": "Modification",
    "filename_of_changes": "RedirectMiddlewareTest.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "122",
    "number_of_lines_deleted_vulnerable_to_cve": "27",
    "vulnerable_lines": [
        "// Line_Reference 275:     public function crossOriginRedirectProvider()",
        "// Line_Reference 277:         return [",
        "// Line_Reference 278:             ['http://example.com?a=b', 'http://test.com/', false],",
        "// Line_Reference 279:             ['https://example.com?a=b', 'https://test.com/', false],",
        "// Line_Reference 280:             ['http://example.com?a=b', 'https://test.com/', false],",
        "// Line_Reference 281:             ['https://example.com?a=b', 'http://test.com/', false],",
        "// Line_Reference 282:             ['http://example.com?a=b', 'http://example.com/', true],",
        "// Line_Reference 283:             ['https://example.com?a=b', 'https://example.com/', true],",
        "// Line_Reference 284:             ['http://example.com?a=b', 'https://example.com/', true],",
        "// Line_Reference 285:             ['https://example.com?a=b', 'http://example.com/', false],",
        "// Line_Reference 286:         ];",
        "// Line_Reference 290:      * @dataProvider crossOriginRedirectProvider",
        "// Line_Reference 292:     public function testHeadersTreatmentOnRedirect($originalUri, $targetUri, $shouldBePresent)",
        "// Line_Reference 294:         $mock = new MockHandler([",
        "// Line_Reference 295:             new Response(302, ['Location' => $targetUri]),",
        "// Line_Reference 296:             static function (RequestInterface $request) use ($shouldBePresent) {",
        "// Line_Reference 297:                 self::assertSame($shouldBePresent, $request->hasHeader('Authorization'));",
        "// Line_Reference 298:                 self::assertSame($shouldBePresent, $request->hasHeader('Cookie'));",
        "// Line_Reference 305:         $client->get($originalUri, ['auth' => ['testuser', 'testpass'], 'headers' => ['Cookie' => 'foo=bar']]);",
        "// Line_Reference 308:     public function testNotRemoveAuthorizationHeaderOnRedirect()",
        "// Line_Reference 311:             new Response(302, ['Location' => 'http://example.com/2']),",
        "// Line_Reference 312:             static function (RequestInterface $request) {",
        "// Line_Reference 313:                 self::assertTrue($request->hasHeader('Authorization'));",
        "// Line_Reference 319:         $client->get('http://example.com?a=b', ['auth' => ['testuser', 'testpass']]);",
        "// Line_Reference 326:     public function testRemoveCurlAuthorizationOptionsOnRedirect($auth)",
        "// Line_Reference 333:             new Response(302, ['Location' => 'http://test.com']),",
        "// Line_Reference 348:         $client->get('http://example.com?a=b', ['auth' => ['testuser', 'testpass', $auth]]);"
    ]
}
