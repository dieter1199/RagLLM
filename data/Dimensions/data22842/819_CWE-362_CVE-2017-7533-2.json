{
    "cve_id": "CVE-2017-7533",
    "cve_description": "Race condition in the fsnotify implementation in the Linux kernel through 4.12.4 allows local users to gain privileges or cause a denial of service (memory corruption) via a crafted application that leverages simultaneous execution of the inotify_handle_event and vfs_rename functions.",
    "cve_publish_date": "2017-08-05",
    "cwe_id": "CWE-362",
    "cwe_name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
    "cwe_description": "The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.",
    "commit_message": "dentry name snapshots\n\ntake_dentry_name_snapshot() takes a safe snapshot of dentry name;\nif the name is a short one, it gets copied into caller-supplied\nstructure, otherwise an extra reference to external name is grabbed\n(those are never modified).  In either case the pointer to stable\nstring is stored into the same structure.\n\ndentry must be held by the caller of take_dentry_name_snapshot(),\nbut may be freely dropped afterwards - the snapshot will stay\nuntil destroyed by release_dentry_name_snapshot().\n\nIntended use:\n\tstruct name_snapshot s;\n\n\ttake_dentry_name_snapshot(&s, dentry);\n\t...\n\taccess s.name\n\t...\n\trelease_dentry_name_snapshot(&s);\n\nReplaces fsnotify_oldname_...(), gets used in fsnotify to obtain the name\nto pass down with event.\n\nSigned-off-by: Al Viro <viro@zeniv.linux.org.uk>",
    "type_of_change": "Modification",
    "filename_of_changes": "fsnotify.h",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "0",
    "number_of_lines_deleted_vulnerable_to_cve": "31",
    "vulnerable_lines": [
        "// Line_Reference 296: #if defined(CONFIG_FSNOTIFY)\t/* notify helpers */",
        "// Line_Reference 297: ",
        "// Line_Reference 298: /*",
        "// Line_Reference 299:  * fsnotify_oldname_init - save off the old filename before we change it",
        "// Line_Reference 300:  */",
        "// Line_Reference 301: static inline const unsigned char *fsnotify_oldname_init(const unsigned char *name)",
        "// Line_Reference 302: {",
        "// Line_Reference 303: \treturn kstrdup(name, GFP_KERNEL);",
        "// Line_Reference 304: }",
        "// Line_Reference 305: ",
        "// Line_Reference 306: /*",
        "// Line_Reference 307:  * fsnotify_oldname_free - free the name we got from fsnotify_oldname_init",
        "// Line_Reference 308:  */",
        "// Line_Reference 309: static inline void fsnotify_oldname_free(const unsigned char *old_name)",
        "// Line_Reference 310: {",
        "// Line_Reference 311: \tkfree(old_name);",
        "// Line_Reference 312: }",
        "// Line_Reference 313: ",
        "// Line_Reference 314: #else\t/* CONFIG_FSNOTIFY */",
        "// Line_Reference 315: ",
        "// Line_Reference 316: static inline const char *fsnotify_oldname_init(const unsigned char *name)",
        "// Line_Reference 317: {",
        "// Line_Reference 318: \treturn NULL;",
        "// Line_Reference 319: }",
        "// Line_Reference 320: ",
        "// Line_Reference 321: static inline void fsnotify_oldname_free(const unsigned char *old_name)",
        "// Line_Reference 322: {",
        "// Line_Reference 323: }",
        "// Line_Reference 324: ",
        "// Line_Reference 325: #endif\t/*  CONFIG_FSNOTIFY */",
        "// Line_Reference 326: "
    ]
}
