{
    "cve_id": "CVE-2012-4444",
    "cve_description": "The ip6_frag_queue function in net/ipv6/reassembly.c in the Linux kernel before 2.6.36 allows remote attackers to bypass intended network restrictions via overlapping IPv6 fragments.",
    "cve_publish_date": "2012-12-21",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "ipv6: discard overlapping fragment\n\nRFC5722 prohibits reassembling fragments when some data overlaps.\n\nBug spotted by Zhang Zuotao <zuotao.zhang@6wind.com>.\n\nSigned-off-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "type_of_change": "Modification",
    "filename_of_changes": "reassembly.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "15",
    "number_of_lines_deleted_vulnerable_to_cve": "56",
    "vulnerable_lines": [
        "// Line_Reference 152: /* Memory Tracking Functions. */",
        "// Line_Reference 153: static void frag_kfree_skb(struct netns_frags *nf, struct sk_buff *skb)",
        "// Line_Reference 154: {",
        "// Line_Reference 155: \tatomic_sub(skb->truesize, &nf->mem);",
        "// Line_Reference 156: \tkfree_skb(skb);",
        "// Line_Reference 157: }",
        "// Line_Reference 158: ",
        "// Line_Reference 349: \t/* We found where to put this one.  Check for overlap with",
        "// Line_Reference 350: \t * preceding fragment, and, if needed, align things so that",
        "// Line_Reference 351: \t * any overlaps are eliminated.",
        "// Line_Reference 353: \tif (prev) {",
        "// Line_Reference 354: \t\tint i = (FRAG6_CB(prev)->offset + prev->len) - offset;",
        "// Line_Reference 356: \t\tif (i > 0) {",
        "// Line_Reference 357: \t\t\toffset += i;",
        "// Line_Reference 358: \t\t\tif (end <= offset)",
        "// Line_Reference 359: \t\t\t\tgoto err;",
        "// Line_Reference 360: \t\t\tif (!pskb_pull(skb, i))",
        "// Line_Reference 361: \t\t\t\tgoto err;",
        "// Line_Reference 362: \t\t\tif (skb->ip_summed != CHECKSUM_UNNECESSARY)",
        "// Line_Reference 363: \t\t\t\tskb->ip_summed = CHECKSUM_NONE;",
        "// Line_Reference 364: \t\t}",
        "// Line_Reference 365: \t}",
        "// Line_Reference 367: \t/* Look for overlap with succeeding segments.",
        "// Line_Reference 368: \t * If we can merge fragments, do it.",
        "// Line_Reference 369: \t */",
        "// Line_Reference 370: \twhile (next && FRAG6_CB(next)->offset < end) {",
        "// Line_Reference 371: \t\tint i = end - FRAG6_CB(next)->offset; /* overlap is 'i' bytes */",
        "// Line_Reference 372: ",
        "// Line_Reference 373: \t\tif (i < next->len) {",
        "// Line_Reference 374: \t\t\t/* Eat head of the next overlapped fragment",
        "// Line_Reference 375: \t\t\t * and leave the loop. The next ones cannot overlap.",
        "// Line_Reference 376: \t\t\t */",
        "// Line_Reference 377: \t\t\tif (!pskb_pull(next, i))",
        "// Line_Reference 378: \t\t\t\tgoto err;",
        "// Line_Reference 379: \t\t\tFRAG6_CB(next)->offset += i;\t/* next fragment */",
        "// Line_Reference 380: \t\t\tfq->q.meat -= i;",
        "// Line_Reference 381: \t\t\tif (next->ip_summed != CHECKSUM_UNNECESSARY)",
        "// Line_Reference 382: \t\t\t\tnext->ip_summed = CHECKSUM_NONE;",
        "// Line_Reference 383: \t\t\tbreak;",
        "// Line_Reference 384: \t\t} else {",
        "// Line_Reference 385: \t\t\tstruct sk_buff *free_it = next;",
        "// Line_Reference 386: ",
        "// Line_Reference 387: \t\t\t/* Old fragment is completely overridden with",
        "// Line_Reference 388: \t\t\t * new one drop it.",
        "// Line_Reference 389: \t\t\t */",
        "// Line_Reference 390: \t\t\tnext = next->next;",
        "// Line_Reference 391: ",
        "// Line_Reference 392: \t\t\tif (prev)",
        "// Line_Reference 393: \t\t\t\tprev->next = next;",
        "// Line_Reference 394: \t\t\telse",
        "// Line_Reference 395: \t\t\t\tfq->q.fragments = next;",
        "// Line_Reference 396: ",
        "// Line_Reference 397: \t\t\tfq->q.meat -= free_it->len;",
        "// Line_Reference 398: \t\t\tfrag_kfree_skb(fq->q.net, free_it);",
        "// Line_Reference 399: \t\t}",
        "// Line_Reference 400: \t}"
    ]
}
