{
    "cve_id": "CVE-2023-6124",
    "cve_description": "Server-Side Request Forgery (SSRF) in GitHub repository salesagility/suitecrm prior to 7.14.2, 8.4.2, 7.12.14.",
    "cve_publish_date": "2023-11-14",
    "cwe_id": "CWE-918",
    "cwe_name": "Server-Side Request Forgery (SSRF)",
    "cwe_description": "The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.",
    "commit_message": "SuiteCRM 7.14.2 Release",
    "type_of_change": "Modification",
    "filename_of_changes": "HtmlSanitizer.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "85",
    "number_of_lines_deleted_vulnerable_to_cve": "32",
    "vulnerable_lines": [
        "// Line_Reference 28:     public function __construct()",
        "// Line_Reference 40:         $config->set('HTML.Doctype', 'XHTML 1.0 Transitional');",
        "// Line_Reference 41:         $config->set('Core.Encoding', 'UTF-8');",
        "// Line_Reference 43:         $config->set('Core.HiddenElements', $hidden_tags);",
        "// Line_Reference 44:         $config->set('Cache.SerializerPath', sugar_cached(\"htmlclean\"));",
        "// Line_Reference 45:         $config->set('URI.Base', isset($sugar_config['site_url']) ? $sugar_config['site_url'] : null);",
        "// Line_Reference 46:         $config->set('CSS.Proprietary', true);",
        "// Line_Reference 47:         $config->set('HTML.TidyLevel', 'light');",
        "// Line_Reference 48:         $config->set('HTML.ForbiddenElements', array('body' => true, 'html' => true));",
        "// Line_Reference 49:         $config->set('AutoFormat.RemoveEmpty', true);",
        "// Line_Reference 50:         $config->set('Cache.SerializerPermissions', 0775);",
        "// Line_Reference 51:         $config->set('Filter.ExtractStyleBlocks.TidyImpl', false);",
        "// Line_Reference 53:             $config->set('HTML.SafeObject', true);",
        "// Line_Reference 54:             $config->set('HTML.SafeEmbed', true);",
        "// Line_Reference 56:         $config->set('Output.FlashCompat', true);",
        "// Line_Reference 57:         $config->set('Filter.Custom', array(new HTMLPurifierFilterXmp()));",
        "// Line_Reference 58:         $config->set('HTML.DefinitionID', 'Sugar HTML Def');",
        "// Line_Reference 59:         $config->set('HTML.DefinitionRev', 2);",
        "// Line_Reference 60:         $config->set('Cache.SerializerPath', sugar_cached('htmlclean/'));",
        "// Line_Reference 61:         $config->set('Attr.EnableID', true);",
        "// Line_Reference 62:         $config->set('Attr.IDPrefix', 'sugar_text_');",
        "// Line_Reference 119:         $dirtyHtml =  preg_replace($pattern, $replacement, $dirtyHtml);",
        "// Line_Reference 125:             $sugarCleaner = self::getInstance();",
        "// Line_Reference 126:             $purifier = $sugarCleaner->purifier;",
        "// Line_Reference 137:      * @param $dirtyHtml",
        "// Line_Reference 138:      * @param bool $isEncoded",
        "// Line_Reference 139:      * @return string",
        "// Line_Reference 141:     public static function stripTags($dirtyHtml, $isEncoded = true)",
        "// Line_Reference 143:         if ($isEncoded) {",
        "// Line_Reference 144:             $dirtyHtml = from_html($dirtyHtml);",
        "// Line_Reference 146:         $dirtyHtml = filter_var($dirtyHtml, FILTER_SANITIZE_STRIPPED, FILTER_FLAG_NO_ENCODE_QUOTES);",
        "// Line_Reference 147:         return $isEncoded ? to_html($dirtyHtml) : $dirtyHtml;"
    ]
}
