{
    "cve_id": "CVE-2012-3552",
    "cve_description": "Race condition in the IP implementation in the Linux kernel before 3.0 might allow remote attackers to cause a denial of service (slab corruption and system crash) by sending packets to an application that sets socket options during the handling of network traffic.",
    "cve_publish_date": "2012-10-03",
    "cwe_id": "CWE-362",
    "cwe_name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
    "cwe_description": "The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.",
    "commit_message": "inet: add RCU protection to inet->opt\n\nWe lack proper synchronization to manipulate inet->opt ip_options\n\nProblem is ip_make_skb() calls ip_setup_cork() and\nip_setup_cork() possibly makes a copy of ipc->opt (struct ip_options),\nwithout any protection against another thread manipulating inet->opt.\n\nAnother thread can change inet->opt pointer and free old one under us.\n\nUse RCU to protect inet->opt (changed to inet->inet_opt).\n\nInstead of handling atomic refcounts, just copy ip_options when\nnecessary, to avoid cache line dirtying.\n\nWe cant insert an rcu_head in struct ip_options since its included in\nskb->cb[], so this patch is large because I had to introduce a new\nip_options_rcu structure.\n\nSigned-off-by: Eric Dumazet <eric.dumazet@gmail.com>\nCc: Herbert Xu <herbert@gondor.apana.org.au>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "type_of_change": "Modification",
    "filename_of_changes": "cipso_ipv4.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "63",
    "number_of_lines_deleted_vulnerable_to_cve": "50",
    "vulnerable_lines": [
        "// Line_Reference 1882: \tstruct ip_options *opt = NULL;",
        "// Line_Reference 1918: \tmemcpy(opt->__data, buf, buf_len);",
        "// Line_Reference 1919: \topt->optlen = opt_len;",
        "// Line_Reference 1920: \topt->cipso = sizeof(struct iphdr);",
        "// Line_Reference 1927: \t\tif (sk_inet->opt)",
        "// Line_Reference 1928: \t\t\tsk_conn->icsk_ext_hdr_len -= sk_inet->opt->optlen;",
        "// Line_Reference 1929: \t\tsk_conn->icsk_ext_hdr_len += opt->optlen;",
        "// Line_Reference 1932: \topt = xchg(&sk_inet->opt, opt);",
        "// Line_Reference 1933: \tkfree(opt);",
        "// Line_Reference 1963: \tstruct ip_options *opt = NULL;",
        "// Line_Reference 1991: \tmemcpy(opt->__data, buf, buf_len);",
        "// Line_Reference 1992: \topt->optlen = opt_len;",
        "// Line_Reference 1993: \topt->cipso = sizeof(struct iphdr);",
        "// Line_Reference 1999: \tkfree(opt);",
        "// Line_Reference 2019: static int cipso_v4_delopt(struct ip_options **opt_ptr)",
        "// Line_Reference 2022: \tstruct ip_options *opt = *opt_ptr;",
        "// Line_Reference 2024: \tif (opt->srr || opt->rr || opt->ts || opt->router_alert) {",
        "// Line_Reference 2031: \t\tcipso_off = opt->cipso - sizeof(struct iphdr);",
        "// Line_Reference 2032: \t\tcipso_ptr = &opt->__data[cipso_off];",
        "// Line_Reference 2035: \t\tif (opt->srr > opt->cipso)",
        "// Line_Reference 2036: \t\t\topt->srr -= cipso_len;",
        "// Line_Reference 2037: \t\tif (opt->rr > opt->cipso)",
        "// Line_Reference 2038: \t\t\topt->rr -= cipso_len;",
        "// Line_Reference 2039: \t\tif (opt->ts > opt->cipso)",
        "// Line_Reference 2040: \t\t\topt->ts -= cipso_len;",
        "// Line_Reference 2041: \t\tif (opt->router_alert > opt->cipso)",
        "// Line_Reference 2042: \t\t\topt->router_alert -= cipso_len;",
        "// Line_Reference 2043: \t\topt->cipso = 0;",
        "// Line_Reference 2046: \t\t\topt->optlen - cipso_off - cipso_len);",
        "// Line_Reference 2055: \t\twhile (iter < opt->optlen)",
        "// Line_Reference 2056: \t\t\tif (opt->__data[iter] != IPOPT_NOP) {",
        "// Line_Reference 2057: \t\t\t\titer += opt->__data[iter + 1];",
        "// Line_Reference 2061: \t\thdr_delta = opt->optlen;",
        "// Line_Reference 2062: \t\topt->optlen = (optlen_new + 3) & ~3;",
        "// Line_Reference 2063: \t\thdr_delta -= opt->optlen;",
        "// Line_Reference 2068: \t\thdr_delta = opt->optlen;",
        "// Line_Reference 2069: \t\tkfree(opt);",
        "// Line_Reference 2086: \tstruct ip_options *opt;",
        "// Line_Reference 2090: \topt = sk_inet->opt;",
        "// Line_Reference 2091: \tif (opt == NULL || opt->cipso == 0)",
        "// Line_Reference 2094: \thdr_delta = cipso_v4_delopt(&sk_inet->opt);",
        "// Line_Reference 2112: \tstruct ip_options *opt;",
        "// Line_Reference 2117: \tif (opt == NULL || opt->cipso == 0)",
        "// Line_Reference 2187: \tstruct ip_options *opt;",
        "// Line_Reference 2189: \topt = inet_sk(sk)->opt;",
        "// Line_Reference 2190: \tif (opt == NULL || opt->cipso == 0)",
        "// Line_Reference 2191: \t\treturn -ENOMSG;",
        "// Line_Reference 2192: ",
        "// Line_Reference 2193: \treturn cipso_v4_getattr(opt->__data + opt->cipso - sizeof(struct iphdr),",
        "// Line_Reference 2194: \t\t\t\tsecattr);"
    ]
}
