{
    "cve_id": "CVE-2017-9984",
    "cve_description": "The snd_msnd_interrupt function in sound/isa/msnd/msnd_pinnacle.c in the Linux kernel through 4.11.7 allows local users to cause a denial of service (over-boundary access) or possibly have unspecified other impact by changing the value of a message queue head pointer between two kernel reads of that value, aka a \"double fetch\" vulnerability.",
    "cve_publish_date": "2017-06-28",
    "cwe_id": "CWE-125",
    "cwe_name": "Out-of-bounds Read",
    "cwe_description": "The product reads data past the end, or before the beginning, of the intended buffer.",
    "commit_message": "ALSA: msnd: Optimize / harden DSP and MIDI loops\n\nThe ISA msnd drivers have loops fetching the ring-buffer head, tail\nand size values inside the loops.  Such codes are inefficient and\nfragile.\n\nThis patch optimizes it, and also adds the sanity check to avoid the\nendless loops.\n\nBugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=196131\nBugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=196133\nSigned-off-by: Takashi Iwai <tiwai@suse.de>",
    "type_of_change": "Modification",
    "filename_of_changes": "msnd_pinnacle.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "12",
    "number_of_lines_deleted_vulnerable_to_cve": "11",
    "vulnerable_lines": [
        "// Line_Reference 178: \twhile (readw(chip->DSPQ + JQS_wTail) != readw(chip->DSPQ + JQS_wHead)) {",
        "// Line_Reference 179: \t\tu16 wTmp;",
        "// Line_Reference 180: ",
        "// Line_Reference 181: \t\tsnd_msnd_eval_dsp_msg(chip,",
        "// Line_Reference 182: \t\t\treadw(pwDSPQData + 2 * readw(chip->DSPQ + JQS_wHead)));",
        "// Line_Reference 183: ",
        "// Line_Reference 184: \t\twTmp = readw(chip->DSPQ + JQS_wHead) + 1;",
        "// Line_Reference 185: \t\tif (wTmp > readw(chip->DSPQ + JQS_wSize))",
        "// Line_Reference 186: \t\t\twritew(0, chip->DSPQ + JQS_wHead);",
        "// Line_Reference 187: \t\telse",
        "// Line_Reference 188: \t\t\twritew(wTmp, chip->DSPQ + JQS_wHead);"
    ]
}
