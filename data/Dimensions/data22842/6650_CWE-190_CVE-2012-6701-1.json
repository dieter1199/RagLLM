{
    "cve_id": "CVE-2012-6701",
    "cve_description": "Integer overflow in fs/aio.c in the Linux kernel before 3.4.1 allows local users to cause a denial of service or possibly have unspecified other impact via a large AIO iovec.",
    "cve_publish_date": "2016-05-02",
    "cwe_id": "CWE-190",
    "cwe_name": "Integer Overflow or Wraparound",
    "cwe_description": "The product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number.",
    "commit_message": "vfs: make AIO use the proper rw_verify_area() area helpers\n\nWe had for some reason overlooked the AIO interface, and it didn't use\nthe proper rw_verify_area() helper function that checks (for example)\nmandatory locking on the file, and that the size of the access doesn't\ncause us to overflow the provided offset limits etc.\n\nInstead, AIO did just the security_file_permission() thing (that\nrw_verify_area() also does) directly.\n\nThis fixes it to do all the proper helper functions, which not only\nmeans that now mandatory file locking works with AIO too, we can\nactually remove lines of code.\n\nReported-by: Manish Honap <manish_honap_vit@yahoo.co.in>\nCc: stable@vger.kernel.org\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "aio.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "14",
    "number_of_lines_deleted_vulnerable_to_cve": "16",
    "vulnerable_lines": [
        "// Line_Reference 1470: static ssize_t aio_setup_single_vector(struct kiocb *kiocb)",
        "// Line_Reference 1474: \tkiocb->ki_iovec->iov_len = kiocb->ki_left;",
        "// Line_Reference 1499: \t\tret = security_file_permission(file, MAY_READ);",
        "// Line_Reference 1500: \t\tif (unlikely(ret))",
        "// Line_Reference 1501: \t\t\tbreak;",
        "// Line_Reference 1502: \t\tret = aio_setup_single_vector(kiocb);",
        "// Line_Reference 1517: \t\tret = security_file_permission(file, MAY_WRITE);",
        "// Line_Reference 1518: \t\tif (unlikely(ret))",
        "// Line_Reference 1519: \t\t\tbreak;",
        "// Line_Reference 1520: \t\tret = aio_setup_single_vector(kiocb);",
        "// Line_Reference 1531: \t\tret = security_file_permission(file, MAY_READ);",
        "// Line_Reference 1532: \t\tif (unlikely(ret))",
        "// Line_Reference 1533: \t\t\tbreak;",
        "// Line_Reference 1545: \t\tret = security_file_permission(file, MAY_WRITE);",
        "// Line_Reference 1546: \t\tif (unlikely(ret))",
        "// Line_Reference 1547: \t\t\tbreak;"
    ]
}
