{
    "cve_id": "CVE-2015-6240",
    "cve_description": "The chroot, jail, and zone connection plugins in ansible before 1.9.2 allow local users to escape a restricted environment via a symlink attack.",
    "cve_publish_date": "2017-06-07",
    "cwe_id": "CWE-59",
    "cwe_name": "Improper Link Resolution Before File Access ('Link Following')",
    "cwe_description": "The product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.",
    "commit_message": "Fix problem with chroot connection plugins and symlinks from within the chroot.",
    "type_of_change": "Modification",
    "filename_of_changes": "chroot.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "56",
    "number_of_lines_deleted_vulnerable_to_cve": "36",
    "vulnerable_lines": [
        "// Line_Reference 24: import shutil",
        "// Line_Reference 67:     def exec_command(self, cmd, tmp_path, become_user=None, sudoable=False, executable='/bin/sh', in_data=None):",
        "// Line_Reference 68:         ''' run a command on the chroot '''",
        "// Line_Reference 77: ",
        "// Line_Reference 78:         if executable:",
        "// Line_Reference 79:             local_cmd = [self.chroot_cmd, self.chroot, executable, '-c', cmd]",
        "// Line_Reference 80:         else:",
        "// Line_Reference 81:             local_cmd = '%s \"%s\" %s' % (self.chroot_cmd, self.chroot, cmd)",
        "// Line_Reference 86:                              stdin=subprocess.PIPE,",
        "// Line_Reference 95:         if not out_path.startswith(os.path.sep):",
        "// Line_Reference 96:             out_path = os.path.join(os.path.sep, out_path)",
        "// Line_Reference 97:         normpath = os.path.normpath(out_path)",
        "// Line_Reference 98:         out_path = os.path.join(self.chroot, normpath[1:])",
        "// Line_Reference 99: ",
        "// Line_Reference 101:         if not os.path.exists(in_path):",
        "// Line_Reference 102:             raise errors.AnsibleFileNotFound(\"file or module does not exist: %s\" % in_path)",
        "// Line_Reference 104:             shutil.copyfile(in_path, out_path)",
        "// Line_Reference 105:         except shutil.Error:",
        "// Line_Reference 106:             traceback.print_exc()",
        "// Line_Reference 107:             raise errors.AnsibleError(\"failed to copy: %s and %s are the same\" % (in_path, out_path))",
        "// Line_Reference 109:             traceback.print_exc()",
        "// Line_Reference 110:             raise errors.AnsibleError(\"failed to transfer file to %s\" % out_path)",
        "// Line_Reference 115:         if not in_path.startswith(os.path.sep):",
        "// Line_Reference 116:             in_path = os.path.join(os.path.sep, in_path)",
        "// Line_Reference 117:         normpath = os.path.normpath(in_path)",
        "// Line_Reference 118:         in_path = os.path.join(self.chroot, normpath[1:])",
        "// Line_Reference 119: ",
        "// Line_Reference 121:         if not os.path.exists(in_path):",
        "// Line_Reference 122:             raise errors.AnsibleFileNotFound(\"file or module does not exist: %s\" % in_path)",
        "// Line_Reference 124:             shutil.copyfile(in_path, out_path)",
        "// Line_Reference 125:         except shutil.Error:",
        "// Line_Reference 126:             traceback.print_exc()",
        "// Line_Reference 127:             raise errors.AnsibleError(\"failed to copy: %s and %s are the same\" % (in_path, out_path))",
        "// Line_Reference 128:         except IOError:",
        "// Line_Reference 129:             traceback.print_exc()",
        "// Line_Reference 130:             raise errors.AnsibleError(\"failed to transfer file to %s\" % out_path)"
    ]
}
