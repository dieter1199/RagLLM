{
    "cve_id": "CVE-2018-25103",
    "cve_description": "There exists use-after-free vulnerabilities in lighttpd <= 1.4.50 request parsing which might read from invalid pointers to memory used in the same request, not from other requests.",
    "cve_publish_date": "2024-06-17",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "[core,security] process headers after combining folded headers\n\n- this fixes various use-after-free scenarios (reported by Or Peles of\n  VDOO): when parse_single_header stores pointers to header values in\n  con->request, those pointers are not updated if the header value is\n  reallocated when folded header lines are appended.\n- also remove trailing white-space from folded lines",
    "type_of_change": "Modification",
    "filename_of_changes": "request.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "42",
    "number_of_lines_deleted_vulnerable_to_cve": "40",
    "vulnerable_lines": [
        "// Line_Reference 1027: \t\t\t\t\tdata_string *ds = NULL;",
        "// Line_Reference 1042: \t\t\t\t\t\t/**",
        "// Line_Reference 1043: \t\t\t\t\t\t * we use a evil hack to handle the line-folding",
        "// Line_Reference 1044: \t\t\t\t\t\t *",
        "// Line_Reference 1045: \t\t\t\t\t\t * As array_insert_unique() deletes 'ds' in the case of a duplicate",
        "// Line_Reference 1046: \t\t\t\t\t\t * ds points somewhere and we get a evil crash. As a solution we keep the old",
        "// Line_Reference 1047: \t\t\t\t\t\t * \"key\" and get the current value from the hash and append us",
        "// Line_Reference 1048: \t\t\t\t\t\t *",
        "// Line_Reference 1049: \t\t\t\t\t\t * */",
        "// Line_Reference 1050: ",
        "// Line_Reference 1051: \t\t\t\t\t\tif (!key || !key_len) {",
        "// Line_Reference 1065: \t\t\t\t\t\tif (NULL != (ds = (data_string *)array_get_element_klen(con->request.headers, key, key_len))) {",
        "// Line_Reference 1066: \t\t\t\t\t\t\tbuffer_append_string(ds->value, value);",
        "// Line_Reference 1067: \t\t\t\t\t\t}",
        "// Line_Reference 1069: \t\t\t\t\t\tint s_len;",
        "// Line_Reference 1070: \t\t\t\t\t\tkey = con->parse_request->ptr + first;",
        "// Line_Reference 1071: ",
        "// Line_Reference 1072: \t\t\t\t\t\ts_len = cur - value;",
        "// Line_Reference 1073: ",
        "// Line_Reference 1074: \t\t\t\t\t\t/* strip trailing white-spaces */",
        "// Line_Reference 1075: \t\t\t\t\t\tfor (; s_len > 0 &&",
        "// Line_Reference 1076: \t\t\t\t\t\t\t\t(value[s_len - 1] == ' ' ||",
        "// Line_Reference 1077: \t\t\t\t\t\t\t\t\tvalue[s_len - 1] == '\\t'); s_len--);",
        "// Line_Reference 1078: ",
        "// Line_Reference 1079: \t\t\t\t\t\tvalue[s_len] = '\\0';",
        "// Line_Reference 1080: ",
        "// Line_Reference 1081: \t\t\t\t\t\tif (s_len > 0) {",
        "// Line_Reference 1082: \t\t\t\t\t\t\tif (NULL == (ds = (data_string *)array_get_unused_element(con->request.headers, TYPE_STRING))) {",
        "// Line_Reference 1083: \t\t\t\t\t\t\t\tds = data_string_init();",
        "// Line_Reference 1084: \t\t\t\t\t\t\t}",
        "// Line_Reference 1085: \t\t\t\t\t\t\tbuffer_copy_string_len(ds->key, key, key_len);",
        "// Line_Reference 1086: \t\t\t\t\t\t\tbuffer_copy_string_len(ds->value, value, s_len);",
        "// Line_Reference 1087: ",
        "// Line_Reference 1092: \t\t\t\t\t\t} else {",
        "// Line_Reference 1093: \t\t\t\t\t\t\t/* empty header-fields are not allowed by HTTP-RFC, we just ignore them */",
        "// Line_Reference 1100: #if 0",
        "// Line_Reference 1101: \t\t\t\t\t/**",
        "// Line_Reference 1102: \t\t\t\t\t * for Bug 1230 keep the key_len a live",
        "// Line_Reference 1103: \t\t\t\t\t */",
        "// Line_Reference 1105: #endif"
    ]
}
