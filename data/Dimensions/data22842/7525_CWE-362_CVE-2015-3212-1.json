{
    "cve_id": "CVE-2015-3212",
    "cve_description": "Race condition in net/sctp/socket.c in the Linux kernel before 4.1.2 allows local users to cause a denial of service (list corruption and panic) via a rapid series of system calls related to sockets, as demonstrated by setsockopt calls.",
    "cve_publish_date": "2015-08-31",
    "cwe_id": "CWE-362",
    "cwe_name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
    "cwe_description": "The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.",
    "commit_message": "sctp: fix ASCONF list handling\n\n->auto_asconf_splist is per namespace and mangled by functions like\nsctp_setsockopt_auto_asconf() which doesn't guarantee any serialization.\n\nAlso, the call to inet_sk_copy_descendant() was backuping\n->auto_asconf_list through the copy but was not honoring\n->do_auto_asconf, which could lead to list corruption if it was\ndifferent between both sockets.\n\nThis commit thus fixes the list handling by using ->addr_wq_lock\nspinlock to protect the list. A special handling is done upon socket\ncreation and destruction for that. Error handlig on sctp_init_sock()\nwill never return an error after having initialized asconf, so\nsctp_destroy_sock() can be called without addrq_wq_lock. The lock now\nwill be take on sctp_close_sock(), before locking the socket, so we\ndon't do it in inverse order compared to sctp_addr_wq_timeout_handler().\n\nInstead of taking the lock on sctp_sock_migrate() for copying and\nrestoring the list values, it's preferred to avoid rewritting it by\nimplementing sctp_copy_descendant().\n\nIssue was found with a test application that kept flipping sysctl\ndefault_auto_asconf on and off, but one could trigger it by issuing\nsimultaneous setsockopt() calls on multiple sockets or by\ncreating/destroying sockets fast enough. This is only triggerable\nlocally.\n\nFixes: 9f7d653b67ae (\"sctp: Add Auto-ASCONF support (core).\")\nReported-by: Ji Jianwen <jiji@redhat.com>\nSuggested-by: Neil Horman <nhorman@tuxdriver.com>\nSuggested-by: Hannes Frederic Sowa <hannes@stressinduktion.org>\nAcked-by: Hannes Frederic Sowa <hannes@stressinduktion.org>\nSigned-off-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "type_of_change": "Modification",
    "filename_of_changes": "socket.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "32",
    "number_of_lines_deleted_vulnerable_to_cve": "11",
    "vulnerable_lines": [
        "// Line_Reference 1532: \tlocal_bh_disable();",
        "// Line_Reference 1542: \tlocal_bh_enable();",
        "// Line_Reference 4128: \t} else",
        "// Line_Reference 4135: /* Cleanup any SCTP per socket resources.  */",
        "// Line_Reference 7212: \tstruct list_head tmplist;",
        "// Line_Reference 7220: \tif (oldsp->do_auto_asconf) {",
        "// Line_Reference 7221: \t\tmemcpy(&tmplist, &newsp->auto_asconf_list, sizeof(tmplist));",
        "// Line_Reference 7222: \t\tinet_sk_copy_descendant(newsk, oldsk);",
        "// Line_Reference 7223: \t\tmemcpy(&newsp->auto_asconf_list, &tmplist, sizeof(tmplist));",
        "// Line_Reference 7224: \t} else",
        "// Line_Reference 7225: \t\tinet_sk_copy_descendant(newsk, oldsk);"
    ]
}
