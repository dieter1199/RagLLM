{
    "cve_id": "CVE-2024-0641",
    "cve_description": "A denial of service vulnerability was found in tipc_crypto_key_revoke in net/tipc/crypto.c in the Linux kernelâ€™s TIPC subsystem. This flaw allows guests with local user privileges to trigger a deadlock and potentially crash the system.",
    "cve_publish_date": "2024-01-17",
    "cwe_id": "CWE-667",
    "cwe_name": "Improper Locking",
    "cwe_description": "The product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.",
    "commit_message": "tipc: fix a potential deadlock on &tx->lock\n\nIt seems that tipc_crypto_key_revoke() could be be invoked by\nwokequeue tipc_crypto_work_rx() under process context and\ntimer/rx callback under softirq context, thus the lock acquisition\non &tx->lock seems better use spin_lock_bh() to prevent possible\ndeadlock.\n\nThis flaw was found by an experimental static analysis tool I am\ndeveloping for irq-related deadlock.\n\ntipc_crypto_work_rx() <workqueue>\n--> tipc_crypto_key_distr()\n--> tipc_bcast_xmit()\n--> tipc_bcbase_xmit()\n--> tipc_bearer_bc_xmit()\n--> tipc_crypto_xmit()\n--> tipc_ehdr_build()\n--> tipc_crypto_key_revoke()\n--> spin_lock(&tx->lock)\n<timer interrupt>\n   --> tipc_disc_timeout()\n   --> tipc_bearer_xmit_skb()\n   --> tipc_crypto_xmit()\n   --> tipc_ehdr_build()\n   --> tipc_crypto_key_revoke()\n   --> spin_lock(&tx->lock) <deadlock here>\n\nSigned-off-by: Chengfeng Ye <dg573847474@gmail.com>\nReviewed-by: Jacob Keller <jacob.e.keller@intel.com>\nAcked-by: Jon Maloy <jmaloy@redhat.com>\nFixes: fc1b6d6de220 (\"tipc: introduce TIPC encryption & authentication\")\nLink: https://lore.kernel.org/r/20230927181414.59928-1-dg573847474@gmail.com\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "crypto.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "2",
    "number_of_lines_deleted_vulnerable_to_cve": "2",
    "vulnerable_lines": [
        "// Line_Reference 1444: \tspin_lock(&tx->lock);",
        "// Line_Reference 1451: \tspin_unlock(&tx->lock);"
    ]
}
