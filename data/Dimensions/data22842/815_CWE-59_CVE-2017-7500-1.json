{
    "cve_id": "CVE-2017-7500",
    "cve_description": "It was found that rpm did not properly handle RPM installations when a destination path was a symbolic link to a directory, possibly changing ownership and permissions of an arbitrary directory, and RPM files being placed in an arbitrary destination. An attacker, with write access to a directory in which a subdirectory will be installed, could redirect that directory to an arbitrary location and gain root privilege.",
    "cve_publish_date": "2018-08-13",
    "cwe_id": "CWE-59",
    "cwe_name": "Improper Link Resolution Before File Access ('Link Following')",
    "cwe_description": "The product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.",
    "commit_message": "Restrict following symlinks to directories by ownership (CVE-2017-7500)\n\nOnly follow directory symlinks owned by target directory owner or root.\nThis prevents privilege escalation from user-writable directories via\ndirectory symlinks to privileged directories on package upgrade, while\nstill allowing admin to arrange disk usage with symlinks.\n\nThe rationale is that if you can create symlinks owned by user X you *are*\nuser X (or root), and if you also own directory Y you can do whatever with\nit already, including change permissions. So when you create a symlink to\nthat directory, the link ownership acts as a simple stamp of authority that\nyou indeed want rpm to treat this symlink as it were the directory that\nyou own. Such a permission can only be given by you or root, which\nis just the way we want it. Plus it's almost ridiculously simple as far\nas rules go, compared to trying to calculate something from the\nsource vs destination directory permissions etc.\n\nIn the normal case, the user arranging diskspace with symlinks is indeed\nroot so nothing changes, the only real change here is to links created by\nnon-privileged users which should be few and far between in practise.\nUnfortunately our test-suite runs as a regular user via fakechroot and\nthus the testcase for this fails under the new rules. Adjust the testcase\nto get the ownership straight and add a second case for the illegal\nbehavior, basically the same as the old one but with different expectations.",
    "type_of_change": "Modification",
    "filename_of_changes": "fsm.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "6",
    "number_of_lines_deleted_vulnerable_to_cve": "3",
    "vulnerable_lines": [
        "// Line_Reference 653: static int fsmVerify(const char *path, rpmfi fi)",
        "// Line_Reference 682:             if (S_ISDIR(dsb.st_mode)) return 0;",
        "// Line_Reference 924: \t\trc = fsmVerify(fpath, fi);"
    ]
}
