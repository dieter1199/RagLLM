{
    "cve_id": "CVE-2016-4992",
    "cve_description": "389 Directory Server in Red Hat Enterprise Linux Desktop 6 through 7, Red Hat Enterprise Linux HPC Node 6 through 7, Red Hat Enterprise Linux Server 6 through 7, and Red Hat Enterprise Linux Workstation 6 through 7 allows remote attackers to infer the existence of RDN component objects.",
    "cve_publish_date": "2017-06-08",
    "cwe_id": "CWE-200",
    "cwe_name": "Exposure of Sensitive Information to an Unauthorized Actor",
    "cwe_description": "The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.",
    "commit_message": "Bug 1347760 - CVE-2016-4992 389-ds-base: Information disclosure via repeated use of LDAP ADD operation, etc.\n\nDescription: If a bind user has no rights, it should not disclose\nany information including the existence of the entry.\n\nFix description:\n1) ALREADY_EXISTS in add -- If to be added entry is found existing\n   in ldbm_back_add, it checks the ACI and if there is no rights,\n   it returns INSUFFICIENT_ACCESS instead of ALREADY_EXISTS.\n2) NO_SUCH_OBJECT in other update operations -- If the target entry\n   is found not existing, it checks the ancestor entry's access\n   rights in find_entry.  If it is not allowed to access the subtree,\n   it returns INSUFFICIENT_ACCESS instead of NO_SUC_OBJECT.  Plus,\n   it supresses the \"Matched\" ancestor message.\n3) NO_SUCH_OBJECT in search -- If a bind entry has no rights to read\n   a subtree, it returns no search results with SUCCESS.  It should\n   be applied to the no existing subtree if the bind entry has no\n   rights to the super tree.\n4) If bind fails because of the non-existence of the bind user or\n   the parent nodes, the bind returns LDAP_INVALID_CREDENTIALS to\n   the client with no other information.\n   The detailed cause is logged in the access log as follows:\n\t RESULT err=49 .. etime=0 - No such suffix (<given suffix>)\n\t RESULT err=49 .. etime=0 - Invalid credentials\n\t RESULT err=49 .. etime=0 - No such entry\n\nhttps://bugzilla.redhat.com/show_bug.cgi?id=1347760\n\nReviewed by lkrispen@redhat.com, mreynolds@redhat.com, and tbordaz@redhat.com.\nThank you!!!",
    "type_of_change": "Modification",
    "filename_of_changes": "bind.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "39",
    "number_of_lines_deleted_vulnerable_to_cve": "36",
    "vulnerable_lines": [
        "// Line_Reference 441:                 send_ldap_result( pb, LDAP_INVALID_CREDENTIALS, NULL,",
        "// Line_Reference 442:                                   \"client certificate mapping failed\", 0, NULL );",
        "// Line_Reference 559:                 Connection *conn = NULL;",
        "// Line_Reference 560:                 int sasl_ssf = 0;",
        "// Line_Reference 561:                 int local_ssf = 0;",
        "// Line_Reference 562: ",
        "// Line_Reference 563:                 /* Allow simple binds only for SSL/TLS established connections",
        "// Line_Reference 564:                  * or connections using SASL privacy layers */",
        "// Line_Reference 565:                 conn = pb->pb_conn;",
        "// Line_Reference 566:                 if ( slapi_pblock_get(pb, SLAPI_CONN_SASL_SSF, &sasl_ssf) != 0) {",
        "// Line_Reference 567:                     slapi_log_error( SLAPI_LOG_PLUGIN, \"do_bind\",",
        "// Line_Reference 568:                                      \"Could not get SASL SSF from connection\\n\" );",
        "// Line_Reference 569:                     sasl_ssf = 0;",
        "// Line_Reference 570:                 }",
        "// Line_Reference 572:                 if ( slapi_pblock_get(pb, SLAPI_CONN_LOCAL_SSF, &local_ssf) != 0) {",
        "// Line_Reference 573:                     slapi_log_error( SLAPI_LOG_PLUGIN, \"do_bind\",",
        "// Line_Reference 574:                                      \"Could not get local SSF from connection\\n\" );",
        "// Line_Reference 575:                     local_ssf = 0;",
        "// Line_Reference 576:                 }",
        "// Line_Reference 578:                 if (((conn->c_flags & CONN_FLAG_SSL) != CONN_FLAG_SSL) &&",
        "// Line_Reference 579:                     (sasl_ssf <= 1) && (local_ssf <= 1)) {",
        "// Line_Reference 580:                         send_ldap_result(pb, LDAP_CONFIDENTIALITY_REQUIRED, NULL,",
        "// Line_Reference 581:                                          \"Operation requires a secure connection\",",
        "// Line_Reference 582:                                          0, NULL);",
        "// Line_Reference 583:                         slapi_counter_increment(g_get_global_snmp_vars()->ops_tbl.dsBindSecurityErrors);",
        "// Line_Reference 584:                         goto free_and_return;",
        "// Line_Reference 585:                 }",
        "// Line_Reference 689:                 send_ldap_result(pb, LDAP_OPERATIONS_ERROR, NULL, errorbuf, 0, NULL);",
        "// Line_Reference 699:                     slapi_create_errormsg(errorbuf, sizeof(errorbuf), \"Pre-bind plug-in set corrupted dn\\n\");",
        "// Line_Reference 700:                     send_ldap_result(pb, LDAP_OPERATIONS_ERROR, NULL, errorbuf, 0, NULL);",
        "// Line_Reference 714:                         send_ldap_result(pb, LDAP_OPERATIONS_ERROR, NULL, errorbuf, 0, NULL);",
        "// Line_Reference 793:                                 send_ldap_result(pb, LDAP_NO_SUCH_OBJECT, NULL, \"\", 0, NULL);",
        "// Line_Reference 853:                 send_ldap_result( pb, LDAP_SUCCESS, NULL, NULL,",
        "// Line_Reference 854:                                   0, NULL );",
        "// Line_Reference 879:     if ( bind_target_entry != NULL )",
        "// Line_Reference 880:         slapi_entry_free(bind_target_entry);"
    ]
}
