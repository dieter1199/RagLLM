{
    "cve_id": "CVE-2022-25883",
    "cve_description": "Versions of the package semver before 7.5.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the function new Range, when untrusted user data is provided as a range.\r\r\r",
    "cve_publish_date": "2023-06-21",
    "cwe_id": "CWE-1333",
    "cwe_name": "Inefficient Regular Expression Complexity",
    "cwe_description": "The product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles.",
    "commit_message": "fix: better handling of whitespace (#564)",
    "type_of_change": "Modification",
    "filename_of_changes": "map.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "37",
    "number_of_lines_deleted_vulnerable_to_cve": "40",
    "vulnerable_lines": [
        "// Line_Reference 3: // ensure that the coverage map maps all coverage",
        "// Line_Reference 4: const ignore = [",
        "// Line_Reference 5:   '.git',",
        "// Line_Reference 6:   '.github',",
        "// Line_Reference 7:   '.commitlintrc.js',",
        "// Line_Reference 8:   '.eslintrc.js',",
        "// Line_Reference 9:   '.eslintrc.local.js',",
        "// Line_Reference 10:   'node_modules',",
        "// Line_Reference 11:   'coverage',",
        "// Line_Reference 12:   'tap-snapshots',",
        "// Line_Reference 13:   'test',",
        "// Line_Reference 14:   'fixtures',",
        "// Line_Reference 15: ]",
        "// Line_Reference 17: const { statSync, readdirSync } = require('fs')",
        "// Line_Reference 18: const find = (folder, set = [], root = true) => {",
        "// Line_Reference 19:   const ent = readdirSync(folder)",
        "// Line_Reference 20:   set.push(...ent.filter(f => !ignore.includes(f) && /\\.m?js$/.test(f)).map(f => folder + '/' + f))",
        "// Line_Reference 21:   for (const e of ent.filter(f => !ignore.includes(f) && !/\\.m?js$/.test(f))) {",
        "// Line_Reference 22:     if (statSync(folder + '/' + e).isDirectory()) {",
        "// Line_Reference 23:       find(folder + '/' + e, set, false)",
        "// Line_Reference 26:   if (!root) {",
        "// Line_Reference 27:     return",
        "// Line_Reference 28:   }",
        "// Line_Reference 29:   return set.map(f => f.slice(folder.length + 1)",
        "// Line_Reference 30:     .replace(/\\\\/g, '/'))",
        "// Line_Reference 31:     .sort((a, b) => a.localeCompare(b))",
        "// Line_Reference 34: const { resolve } = require('path')",
        "// Line_Reference 35: const root = resolve(__dirname, '..')",
        "// Line_Reference 37: const sut = find(root)",
        "// Line_Reference 38: const tests = find(root + '/test')",
        "// Line_Reference 39: t.strictSame(sut, tests, 'test files should match system files')",
        "// Line_Reference 40: const map = require('../map.js')",
        "// Line_Reference 42: for (const testFile of tests) {",
        "// Line_Reference 43:   t.test(testFile, t => {",
        "// Line_Reference 44:     t.plan(1)",
        "// Line_Reference 45:     // cast to an array, since map() can return a string or array",
        "// Line_Reference 46:     const systemFiles = [].concat(map(testFile))",
        "// Line_Reference 47:     t.ok(systemFiles.some(sys => sut.includes(sys)), 'test covers a file')",
        "// Line_Reference 48:   })",
        "// Line_Reference 49: }"
    ]
}
