{
    "cve_id": "CVE-2016-1505",
    "cve_description": "The filesystem storage backend in Radicale before 1.1 on Windows allows remote attackers to read or write to arbitrary files via a crafted path, as demonstrated by /c:/file/ignore.",
    "cve_publish_date": "2016-02-03",
    "cwe_id": "CWE-21",
    "cwe_name": "DEPRECATED: Pathname Traversal and Equivalence Errors",
    "cwe_description": "This category has been deprecated. It was originally used for organizing weaknesses involving file names, which enabled access to files outside of a restricted directory (path traversal) or to perform operations on files that would otherwise be restricted (path equivalence). Consider using either the File Handling Issues category (CWE-1219) or the class Use of Incorrectly-Resolved Name or Reference (CWE-706).",
    "commit_message": "Convert paths safely to file system paths\nWith the old implementation on Windows a path like\n\"/c:/file/ignore\" got converted to \"c:\\file\" and\nallowed access to files outside of FOLDER",
    "type_of_change": "Modification",
    "filename_of_changes": "filesystem.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "19",
    "number_of_lines_deleted_vulnerable_to_cve": "16",
    "vulnerable_lines": [
        "// Line_Reference 31: from .. import config, ical",
        "// Line_Reference 66:     def _path(self):",
        "// Line_Reference 68:         return os.path.join(FOLDER, self.path.replace(\"/\", os.sep))",
        "// Line_Reference 73:         return self._path + \".props\"",
        "// Line_Reference 77:         if not os.path.exists(os.path.dirname(self._path)):",
        "// Line_Reference 78:             os.makedirs(os.path.dirname(self._path))",
        "// Line_Reference 82:         with open(self._path, \"w\") as fd:",
        "// Line_Reference 86:         os.remove(self._path)",
        "// Line_Reference 92:             with open(self._path) as fd:",
        "// Line_Reference 99:         abs_path = os.path.join(FOLDER, path.replace(\"/\", os.sep))",
        "// Line_Reference 100:         _, directories, files = next(os.walk(abs_path))",
        "// Line_Reference 108:         abs_path = os.path.join(FOLDER, path.replace(\"/\", os.sep))",
        "// Line_Reference 109:         return os.path.isdir(abs_path)",
        "// Line_Reference 113:         abs_path = os.path.join(FOLDER, path.replace(\"/\", os.sep))",
        "// Line_Reference 114:         return os.path.isfile(abs_path) and not abs_path.endswith(\".props\")",
        "// Line_Reference 118:         modification_time = time.gmtime(os.path.getmtime(self._path))"
    ]
}
