{
    "cve_id": "CVE-2024-5128",
    "cve_description": "An Insecure Direct Object Reference (IDOR) vulnerability was identified in lunary-ai/lunary, affecting versions up to and including 1.2.2. This vulnerability allows unauthorized users to view, update, or delete any dataset_prompt or dataset_prompt_variation within any dataset or project. The issue stems from improper access control checks in the dataset management endpoints, where direct references to object IDs are not adequately secured against unauthorized access. This vulnerability was fixed in version 1.2.25.",
    "cve_publish_date": "2024-06-06",
    "cwe_id": "CWE-284",
    "cwe_name": "Improper Access Control",
    "cwe_description": "The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.",
    "commit_message": "fix: api security (#330)",
    "type_of_change": "Modification",
    "filename_of_changes": "index.ts",
    "code_language": "TypeScript",
    "number_of_lines_added_for_mitigation": "77",
    "number_of_lines_deleted_vulnerable_to_cve": "57",
    "vulnerable_lines": [
        "// Line_Reference 24: // Can be public route",
        "// Line_Reference 25: datasets.get(",
        "// Line_Reference 26:   \"/:identifier\",",
        "// Line_Reference 27:   // checkAccess(\"datasets\", \"read\"),",
        "// Line_Reference 28:   async (ctx: Context) => {",
        "// Line_Reference 29:     const { projectId } = ctx.state",
        "// Line_Reference 30:     const { identifier } = ctx.params",
        "// Line_Reference 32:     const isUUID = validateUUID(identifier)",
        "// Line_Reference 34:     if (isUUID) {",
        "// Line_Reference 35:       // For frontend",
        "// Line_Reference 36:       const datasetId = identifier",
        "// Line_Reference 37:       const dataset = await getDatasetById(datasetId, projectId)",
        "// Line_Reference 39:       ctx.body = dataset",
        "// Line_Reference 40:       return",
        "// Line_Reference 41:     } else {",
        "// Line_Reference 42:       // For SDK",
        "// Line_Reference 43:       const slug = identifier",
        "// Line_Reference 44:       const dataset = await getDatasetBySlug(slug, projectId)",
        "// Line_Reference 46:       ctx.body = dataset",
        "// Line_Reference 47:       return",
        "// Line_Reference 48:     }",
        "// Line_Reference 49:   },",
        "// Line_Reference 50: )",
        "// Line_Reference 84:   // insert 1 prompt and 1 variation",
        "// Line_Reference 127:     const { id } = ctx.params",
        "// Line_Reference 130:     await sql`delete from dataset where id = ${id} and project_id = ${projectId}`",
        "// Line_Reference 136: // Create prompt",
        "// Line_Reference 160:     // insert 1 variation",
        "// Line_Reference 161:     await sql`insert into dataset_prompt_variation",
        "// Line_Reference 162:     ${sql({",
        "// Line_Reference 163:       promptId: prompt.id,",
        "// Line_Reference 164:       variables: {},",
        "// Line_Reference 165:       idealOutput: idealOutput ? lastMsg(idealOutput) : \"\",",
        "// Line_Reference 166:     })}",
        "// Line_Reference 167:     returning *",
        "// Line_Reference 168:   `",
        "// Line_Reference 174: // return array of prompts and variations",
        "// Line_Reference 182:     select * from dataset_prompt where id = ${id} order by created_at asc",
        "// Line_Reference 186:     select * from dataset_prompt_variation where prompt_id = ${id} order by created_at asc",
        "// Line_Reference 195: // add route ot to delete dataset_prompt and dataset_prompt_variation",
        "// Line_Reference 200:     const { id } = ctx.params",
        "// Line_Reference 202:     await sql`delete from dataset_prompt where id = ${id}`",
        "// Line_Reference 203:     await sql`delete from dataset_prompt_variation where prompt_id = ${id}`",
        "// Line_Reference 209: // Update prompt",
        "// Line_Reference 248:     const { id } = ctx.params",
        "// Line_Reference 250:     await sql`delete from dataset_prompt_variation where id = ${id}`",
        "// Line_Reference 256: // Update variation",
        "// Line_Reference 282: // Create variation",
        "// Line_Reference 294:   ${sql(",
        "// Line_Reference 295:     clearUndefined({",
        "// Line_Reference 296:       promptId,",
        "// Line_Reference 297:       variables,",
        "// Line_Reference 298:       idealOutput,",
        "// Line_Reference 299:     }),",
        "// Line_Reference 300:   )}",
        "// Line_Reference 301:   returning *",
        "// Line_Reference 302:   `"
    ]
}
