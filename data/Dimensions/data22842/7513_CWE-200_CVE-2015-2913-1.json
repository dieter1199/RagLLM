{
    "cve_id": "CVE-2015-2913",
    "cve_description": "server/network/protocol/http/OHttpSessionManager.java in the Studio component in OrientDB Server Community Edition before 2.0.15 and 2.1.x before 2.1.1 improperly relies on the java.util.Random class for generation of random Session ID values, which makes it easier for remote attackers to predict a value by determining the internal state of the PRNG in this class.",
    "cve_publish_date": "2015-12-31",
    "cwe_id": "CWE-200",
    "cwe_name": "Exposure of Sensitive Information to an Unauthorized Actor",
    "cwe_description": "The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.",
    "commit_message": "Adopted SecureRandom to avoid predicable random numbers in session",
    "type_of_change": "Modification",
    "filename_of_changes": "OHttpSessionManager.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "136",
    "number_of_lines_deleted_vulnerable_to_cve": "135",
    "vulnerable_lines": [
        "// Line_Reference 2:     *",
        "// Line_Reference 3:     *  *  Copyright 2014 Orient Technologies LTD (info(at)orientechnologies.com)",
        "// Line_Reference 4:     *  *",
        "// Line_Reference 5:     *  *  Licensed under the Apache License, Version 2.0 (the \"License\");",
        "// Line_Reference 6:     *  *  you may not use this file except in compliance with the License.",
        "// Line_Reference 7:     *  *  You may obtain a copy of the License at",
        "// Line_Reference 8:     *  *",
        "// Line_Reference 9:     *  *       http://www.apache.org/licenses/LICENSE-2.0",
        "// Line_Reference 10:     *  *",
        "// Line_Reference 11:     *  *  Unless required by applicable law or agreed to in writing, software",
        "// Line_Reference 12:     *  *  distributed under the License is distributed on an \"AS IS\" BASIS,",
        "// Line_Reference 13:     *  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "// Line_Reference 14:     *  *  See the License for the specific language governing permissions and",
        "// Line_Reference 15:     *  *  limitations under the License.",
        "// Line_Reference 16:     *  *",
        "// Line_Reference 17:     *  * For more information: http://www.orientechnologies.com",
        "// Line_Reference 18:     *",
        "// Line_Reference 19:     */",
        "// Line_Reference 23:  import com.orientechnologies.common.log.OLogManager;",
        "// Line_Reference 24:  import com.orientechnologies.orient.core.Orient;",
        "// Line_Reference 25:  import com.orientechnologies.orient.core.config.OGlobalConfiguration;",
        "// Line_Reference 26: ",
        "// Line_Reference 27:  import java.util.HashMap;",
        "// Line_Reference 28:  import java.util.Iterator;",
        "// Line_Reference 29:  import java.util.Map;",
        "// Line_Reference 30:  import java.util.Map.Entry;",
        "// Line_Reference 31:  import java.util.Random;",
        "// Line_Reference 32:  import java.util.TimerTask;",
        "// Line_Reference 35:   * Handles the HTTP sessions such as a real HTTP Server.",
        "// Line_Reference 36:   *",
        "// Line_Reference 37:   * @author Luca Garulli",
        "// Line_Reference 38:   */",
        "// Line_Reference 39:  public class OHttpSessionManager extends OSharedResourceAbstract {",
        "// Line_Reference 40:    private static final OHttpSessionManager instance = new OHttpSessionManager();",
        "// Line_Reference 41:    private Map<String, OHttpSession>        sessions = new HashMap<String, OHttpSession>();",
        "// Line_Reference 42:    private int                              expirationTime;",
        "// Line_Reference 43:    private Random                           random   = new Random();",
        "// Line_Reference 44: ",
        "// Line_Reference 45:    protected OHttpSessionManager() {",
        "// Line_Reference 46:      expirationTime = OGlobalConfiguration.NETWORK_HTTP_SESSION_EXPIRE_TIMEOUT.getValueAsInteger() * 1000;",
        "// Line_Reference 47: ",
        "// Line_Reference 48:      Orient.instance().scheduleTask(new TimerTask() {",
        "// Line_Reference 49:        @Override",
        "// Line_Reference 50:        public void run() {",
        "// Line_Reference 51:          final int expired = checkSessionsValidity();",
        "// Line_Reference 52:          if (expired > 0)",
        "// Line_Reference 53:            OLogManager.instance().debug(this, \"Removed %d session because expired\", expired);",
        "// Line_Reference 54:        }",
        "// Line_Reference 55:      }, expirationTime, expirationTime);",
        "// Line_Reference 56:    }",
        "// Line_Reference 57: ",
        "// Line_Reference 58:    public int checkSessionsValidity() {",
        "// Line_Reference 59:      int expired = 0;",
        "// Line_Reference 60: ",
        "// Line_Reference 61:      acquireExclusiveLock();",
        "// Line_Reference 62:      try {",
        "// Line_Reference 63:        final long now = System.currentTimeMillis();",
        "// Line_Reference 64: ",
        "// Line_Reference 65:        Entry<String, OHttpSession> s;",
        "// Line_Reference 66:        for (Iterator<Map.Entry<String, OHttpSession>> it = sessions.entrySet().iterator(); it.hasNext();) {",
        "// Line_Reference 67:          s = it.next();",
        "// Line_Reference 68: ",
        "// Line_Reference 69:          if (now - s.getValue().getUpdatedOn() > expirationTime) {",
        "// Line_Reference 70:            // REMOVE THE SESSION",
        "// Line_Reference 71:            it.remove();",
        "// Line_Reference 72:            expired++;",
        "// Line_Reference 73:          }",
        "// Line_Reference 74:        }",
        "// Line_Reference 75: ",
        "// Line_Reference 76:      } finally {",
        "// Line_Reference 77:        releaseExclusiveLock();",
        "// Line_Reference 78:      }",
        "// Line_Reference 79: ",
        "// Line_Reference 80:      return expired;",
        "// Line_Reference 81:    }",
        "// Line_Reference 82: ",
        "// Line_Reference 83:    public OHttpSession[] getSessions() {",
        "// Line_Reference 84:      acquireSharedLock();",
        "// Line_Reference 85:      try {",
        "// Line_Reference 86: ",
        "// Line_Reference 87:        return (OHttpSession[]) sessions.values().toArray(new OHttpSession[sessions.size()]);",
        "// Line_Reference 88: ",
        "// Line_Reference 89:      } finally {",
        "// Line_Reference 90:        releaseSharedLock();",
        "// Line_Reference 91:      }",
        "// Line_Reference 92:    }",
        "// Line_Reference 93: ",
        "// Line_Reference 94:    public OHttpSession getSession(final String iId) {",
        "// Line_Reference 95:      acquireSharedLock();",
        "// Line_Reference 96:      try {",
        "// Line_Reference 97: ",
        "// Line_Reference 98:        final OHttpSession sess = sessions.get(iId);",
        "// Line_Reference 99:        if (sess != null)",
        "// Line_Reference 100:          sess.updateLastUpdatedOn();",
        "// Line_Reference 101:        return sess;",
        "// Line_Reference 102: ",
        "// Line_Reference 103:      } finally {",
        "// Line_Reference 104:        releaseSharedLock();",
        "// Line_Reference 105:      }",
        "// Line_Reference 106:    }",
        "// Line_Reference 107: ",
        "// Line_Reference 108:    public String createSession(final String iDatabaseName, final String iUserName, final String iUserPassword) {",
        "// Line_Reference 109:      acquireExclusiveLock();",
        "// Line_Reference 110:      try {",
        "// Line_Reference 111:        final String id = \"OS\" + System.currentTimeMillis() + random.nextLong();",
        "// Line_Reference 112:        sessions.put(id, new OHttpSession(id, iDatabaseName, iUserName, iUserPassword));",
        "// Line_Reference 113:        return id;",
        "// Line_Reference 114: ",
        "// Line_Reference 115:      } finally {",
        "// Line_Reference 116:        releaseExclusiveLock();",
        "// Line_Reference 117:      }",
        "// Line_Reference 118:    }",
        "// Line_Reference 119: ",
        "// Line_Reference 120:    public OHttpSession removeSession(final String iSessionId) {",
        "// Line_Reference 121:      acquireExclusiveLock();",
        "// Line_Reference 122:      try {",
        "// Line_Reference 123:        return sessions.remove(iSessionId);",
        "// Line_Reference 124: ",
        "// Line_Reference 125:      } finally {",
        "// Line_Reference 126:        releaseExclusiveLock();",
        "// Line_Reference 127:      }",
        "// Line_Reference 128:    }",
        "// Line_Reference 129: ",
        "// Line_Reference 130:    public int getExpirationTime() {",
        "// Line_Reference 131:      return expirationTime;",
        "// Line_Reference 132:    }",
        "// Line_Reference 133: ",
        "// Line_Reference 134:    public void setExpirationTime(int expirationTime) {",
        "// Line_Reference 135:      this.expirationTime = expirationTime;",
        "// Line_Reference 136:    }",
        "// Line_Reference 137: ",
        "// Line_Reference 138:    public static OHttpSessionManager getInstance() {",
        "// Line_Reference 139:      return instance;",
        "// Line_Reference 140:    }",
        "// Line_Reference 141:  }"
    ]
}
