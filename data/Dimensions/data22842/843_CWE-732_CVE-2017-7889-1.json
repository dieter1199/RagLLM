{
    "cve_id": "CVE-2017-7889",
    "cve_description": "The mm subsystem in the Linux kernel through 3.2 does not properly enforce the CONFIG_STRICT_DEVMEM protection mechanism, which allows local users to read or write to kernel memory locations in the first megabyte (and bypass slab-allocation access restrictions) via an application that opens the /dev/mem file, related to arch/x86/mm/init.c and drivers/char/mem.c.",
    "cve_publish_date": "2017-04-17",
    "cwe_id": "CWE-732",
    "cwe_name": "Incorrect Permission Assignment for Critical Resource",
    "cwe_description": "The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.",
    "commit_message": "mm: Tighten x86 /dev/mem with zeroing reads\n\nUnder CONFIG_STRICT_DEVMEM, reading System RAM through /dev/mem is\ndisallowed. However, on x86, the first 1MB was always allowed for BIOS\nand similar things, regardless of it actually being System RAM. It was\npossible for heap to end up getting allocated in low 1MB RAM, and then\nread by things like x86info or dd, which would trip hardened usercopy:\n\nusercopy: kernel memory exposure attempt detected from ffff880000090000 (dma-kmalloc-256) (4096 bytes)\n\nThis changes the x86 exception for the low 1MB by reading back zeros for\nSystem RAM areas instead of blindly allowing them. More work is needed to\nextend this to mmap, but currently mmap doesn't go through usercopy, so\nhardened usercopy won't Oops the kernel.\n\nReported-by: Tommi Rantala <tommi.t.rantala@nokia.com>\nTested-by: Tommi Rantala <tommi.t.rantala@nokia.com>\nSigned-off-by: Kees Cook <keescook@chromium.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "init.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "30",
    "number_of_lines_deleted_vulnerable_to_cve": "11",
    "vulnerable_lines": [
        "// Line_Reference 646:  *",
        "// Line_Reference 647:  * On x86, access has to be given to the first megabyte of ram because that area",
        "// Line_Reference 648:  * contains BIOS code and data regions used by X and dosemu and similar apps.",
        "// Line_Reference 649:  * Access has to be given to non-kernel-ram areas as well, these contain the PCI",
        "// Line_Reference 650:  * mmio resources as well as potential bios/acpi data regions.",
        "// Line_Reference 654: \tif (pagenr < 256)",
        "// Line_Reference 655: \t\treturn 1;",
        "// Line_Reference 656: \tif (iomem_is_exclusive(pagenr << PAGE_SHIFT))",
        "// Line_Reference 658: \tif (!page_is_ram(pagenr))",
        "// Line_Reference 659: \t\treturn 1;",
        "// Line_Reference 660: \treturn 0;"
    ]
}
