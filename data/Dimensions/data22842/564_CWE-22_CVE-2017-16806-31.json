{
    "cve_id": "CVE-2017-16806",
    "cve_description": "The Process function in RemoteTaskServer/WebServer/HttpServer.cs in Ulterius before 1.9.5.0 allows HTTP server directory traversal.",
    "cve_publish_date": "2017-11-13",
    "cwe_id": "CWE-22",
    "cwe_name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
    "cwe_description": "The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
    "commit_message": "Stability patch, fixes broken GPU detection code, updates the websocket framework to be real-time, removes crappy agent spawning system, removes IPC, fixes HTTP server traversal,",
    "type_of_change": "Modification",
    "filename_of_changes": "SystemData.cs",
    "code_language": "C#",
    "number_of_lines_added_for_mitigation": "99",
    "number_of_lines_deleted_vulnerable_to_cve": "99",
    "vulnerable_lines": [
        "// Line_Reference 1: ï»¿using System;",
        "// Line_Reference 2: using System.Collections.Generic;",
        "// Line_Reference 3: using System.Linq;",
        "// Line_Reference 4: using System.Runtime.ExceptionServices;",
        "// Line_Reference 5: using OpenHardwareMonitor.Hardware;",
        "// Line_Reference 6: ",
        "// Line_Reference 7: namespace AgentInterface.Api.System",
        "// Line_Reference 8: {",
        "// Line_Reference 9:    public  class SystemData",
        "// Line_Reference 10:     {",
        "// Line_Reference 11: ",
        "// Line_Reference 12:         [HandleProcessCorruptedStateExceptions]",
        "// Line_Reference 13:         public static float GetGpuTemp(string gpuName)",
        "// Line_Reference 14:         {",
        "// Line_Reference 15:             try",
        "// Line_Reference 16:             {",
        "// Line_Reference 17:                 var myComputer = new Computer();",
        "// Line_Reference 18:                 myComputer.Open();",
        "// Line_Reference 19:                 //possible fix for gpu temps on laptops",
        "// Line_Reference 20:                 myComputer.GPUEnabled = true;",
        "// Line_Reference 21:                 float temp = -1;",
        "// Line_Reference 22:                 foreach (var hardwareItem in myComputer.Hardware)",
        "// Line_Reference 23:                 {",
        "// Line_Reference 24:                     hardwareItem.Update();",
        "// Line_Reference 25:                     switch (hardwareItem.HardwareType)",
        "// Line_Reference 26:                     {",
        "// Line_Reference 27:                         case HardwareType.GpuNvidia:",
        "// Line_Reference 28:                             foreach (",
        "// Line_Reference 29:                                 var sensor in",
        "// Line_Reference 30:                                     hardwareItem.Sensors.Where(",
        "// Line_Reference 31:                                         sensor =>",
        "// Line_Reference 32:                                             sensor.SensorType == SensorType.Temperature &&",
        "// Line_Reference 33:                                             hardwareItem.Name.Contains(gpuName)))",
        "// Line_Reference 34:                             {",
        "// Line_Reference 35:                                 if (sensor.Value != null)",
        "// Line_Reference 36:                                 {",
        "// Line_Reference 37:                                     temp = (float)sensor.Value;",
        "// Line_Reference 38:                                 }",
        "// Line_Reference 39:                             }",
        "// Line_Reference 40:                             break;",
        "// Line_Reference 41:                         case HardwareType.GpuAti:",
        "// Line_Reference 42:                             foreach (",
        "// Line_Reference 43:                                 var sensor in",
        "// Line_Reference 44:                                     hardwareItem.Sensors.Where(",
        "// Line_Reference 45:                                         sensor =>",
        "// Line_Reference 46:                                             sensor.SensorType == SensorType.Temperature &&",
        "// Line_Reference 47:                                             hardwareItem.Name.Contains(gpuName)))",
        "// Line_Reference 48:                             {",
        "// Line_Reference 49:                                 if (sensor.Value != null)",
        "// Line_Reference 50:                                 {",
        "// Line_Reference 51:                                     temp = (float)sensor.Value;",
        "// Line_Reference 52:                                 }",
        "// Line_Reference 53:                             }",
        "// Line_Reference 54:                             break;",
        "// Line_Reference 55:                     }",
        "// Line_Reference 56:                 }",
        "// Line_Reference 57:                 myComputer.Close();",
        "// Line_Reference 58:                 return temp;",
        "// Line_Reference 59:             }",
        "// Line_Reference 60:             catch (AccessViolationException)",
        "// Line_Reference 61:             {",
        "// Line_Reference 62:                 return -1;",
        "// Line_Reference 63:             }",
        "// Line_Reference 64:         }",
        "// Line_Reference 65: ",
        "// Line_Reference 66:         public static List<float> GetCpuTemps()",
        "// Line_Reference 67:         {",
        "// Line_Reference 68:             var myComputer = new Computer();",
        "// Line_Reference 69:             myComputer.Open();",
        "// Line_Reference 70:             myComputer.CPUEnabled = true;",
        "// Line_Reference 71:             var tempTemps = new List<float>();",
        "// Line_Reference 72:             var procCount = Environment.ProcessorCount;",
        "// Line_Reference 73:             for (var i = 0; i < procCount; i++)",
        "// Line_Reference 74:             {",
        "// Line_Reference 75:                 tempTemps.Add(-1);",
        "// Line_Reference 76:             }",
        "// Line_Reference 77:             try",
        "// Line_Reference 78:             {",
        "// Line_Reference 79:                 var temps = (from hardwareItem in myComputer.Hardware",
        "// Line_Reference 80:                              where hardwareItem.HardwareType == HardwareType.CPU",
        "// Line_Reference 81:                              from sensor in hardwareItem.Sensors",
        "// Line_Reference 82:                              where sensor.SensorType == SensorType.Temperature",
        "// Line_Reference 83:                              let value = sensor.Value",
        "// Line_Reference 84:                              where value != null",
        "// Line_Reference 85:                              where value != null",
        "// Line_Reference 86:                              select (float)value).ToList();",
        "// Line_Reference 87:                 if (temps.Count != 0) return temps;",
        "// Line_Reference 88:                 myComputer.Close();",
        "// Line_Reference 89:                 return tempTemps;",
        "// Line_Reference 90:             }",
        "// Line_Reference 91:             catch (Exception)",
        "// Line_Reference 92:             {",
        "// Line_Reference 93:                 myComputer.Close();",
        "// Line_Reference 94:                 return tempTemps;",
        "// Line_Reference 95:             }",
        "// Line_Reference 96:         }",
        "// Line_Reference 97: ",
        "// Line_Reference 98:     }",
        "// Line_Reference 99: }"
    ]
}
