{
    "cve_id": "CVE-2021-37686",
    "cve_description": "TensorFlow is an end-to-end open source platform for machine learning. In affected versions the strided slice implementation in TFLite has a logic bug which can allow an attacker to trigger an infinite loop. This arises from newly introduced support for [ellipsis in axis definition](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/strided_slice.cc#L103-L122). An attacker can craft a model such that `ellipsis_end_idx` is smaller than `i` (e.g., always negative). In this case, the inner loop does not increase `i` and the `continue` statement causes execution to skip over the preincrement at the end of the outer loop. We have patched the issue in GitHub commit dfa22b348b70bb89d6d6ec0ff53973bacb4f4695. TensorFlow 2.6.0 is the only affected version.",
    "cve_publish_date": "2021-08-12",
    "cwe_id": "CWE-835",
    "cwe_name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
    "cwe_description": "The product contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop.",
    "commit_message": "Prevent a division by 0 in average ops.\n\nPiperOrigin-RevId: 385184660\nChange-Id: I7affd4554f9b336fca29ac68f633232c094d0bd3",
    "type_of_change": "Modification",
    "filename_of_changes": "pooling.cc",
    "code_language": "C++",
    "number_of_lines_added_for_mitigation": "83",
    "number_of_lines_deleted_vulnerable_to_cve": "77",
    "vulnerable_lines": [
        "// Line_Reference 120: void AverageEvalFloat(TfLiteContext* context, TfLiteNode* node,",
        "// Line_Reference 121:                       TfLitePoolParams* params, OpData* data,",
        "// Line_Reference 122:                       const TfLiteTensor* input, TfLiteTensor* output) {",
        "// Line_Reference 126: #define TF_LITE_AVERAGE_POOL(type)                                       \\",
        "// Line_Reference 127:   tflite::PoolParams op_params;                                          \\",
        "// Line_Reference 128:   op_params.stride_height = params->stride_height;                       \\",
        "// Line_Reference 129:   op_params.stride_width = params->stride_width;                         \\",
        "// Line_Reference 130:   op_params.filter_height = params->filter_height;                       \\",
        "// Line_Reference 131:   op_params.filter_width = params->filter_width;                         \\",
        "// Line_Reference 132:   op_params.padding_values.height = data->padding.height;                \\",
        "// Line_Reference 133:   op_params.padding_values.width = data->padding.width;                  \\",
        "// Line_Reference 134:   op_params.float_activation_min = activation_min;                       \\",
        "// Line_Reference 135:   op_params.float_activation_max = activation_max;                       \\",
        "// Line_Reference 136:   type::AveragePool(op_params, GetTensorShape(input),                    \\",
        "// Line_Reference 137:                     GetTensorData<float>(input), GetTensorShape(output), \\",
        "// Line_Reference 138:                     GetTensorData<float>(output))",
        "// Line_Reference 148: void AverageEvalQuantizedUint8(TfLiteContext* context, TfLiteNode* node,",
        "// Line_Reference 149:                                TfLitePoolParams* params, OpData* data,",
        "// Line_Reference 150:                                const TfLiteTensor* input,",
        "// Line_Reference 151:                                TfLiteTensor* output) {",
        "// Line_Reference 156: #define TF_LITE_AVERAGE_POOL(type)                                         \\",
        "// Line_Reference 157:   tflite::PoolParams op_params;                                            \\",
        "// Line_Reference 158:   op_params.stride_height = params->stride_height;                         \\",
        "// Line_Reference 159:   op_params.stride_width = params->stride_width;                           \\",
        "// Line_Reference 160:   op_params.filter_height = params->filter_height;                         \\",
        "// Line_Reference 161:   op_params.filter_width = params->filter_width;                           \\",
        "// Line_Reference 162:   op_params.padding_values.height = data->padding.height;                  \\",
        "// Line_Reference 163:   op_params.padding_values.width = data->padding.width;                    \\",
        "// Line_Reference 164:   op_params.quantized_activation_min = activation_min;                     \\",
        "// Line_Reference 165:   op_params.quantized_activation_max = activation_max;                     \\",
        "// Line_Reference 166:   type::AveragePool(op_params, GetTensorShape(input),                      \\",
        "// Line_Reference 167:                     GetTensorData<uint8_t>(input), GetTensorShape(output), \\",
        "// Line_Reference 168:                     GetTensorData<uint8_t>(output))",
        "// Line_Reference 178: void AverageEvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,",
        "// Line_Reference 179:                               TfLitePoolParams* params, OpData* data,",
        "// Line_Reference 180:                               const TfLiteTensor* input, TfLiteTensor* output) {",
        "// Line_Reference 186: #define TF_LITE_AVERAGE_POOL(type)                                        \\",
        "// Line_Reference 187:   tflite::PoolParams op_params;                                           \\",
        "// Line_Reference 188:   op_params.stride_height = params->stride_height;                        \\",
        "// Line_Reference 189:   op_params.stride_width = params->stride_width;                          \\",
        "// Line_Reference 190:   op_params.filter_height = params->filter_height;                        \\",
        "// Line_Reference 191:   op_params.filter_width = params->filter_width;                          \\",
        "// Line_Reference 192:   op_params.padding_values.height = data->padding.height;                 \\",
        "// Line_Reference 193:   op_params.padding_values.width = data->padding.width;                   \\",
        "// Line_Reference 194:   op_params.quantized_activation_min = activation_min;                    \\",
        "// Line_Reference 195:   op_params.quantized_activation_max = activation_max;                    \\",
        "// Line_Reference 196:   type::AveragePool(op_params, GetTensorShape(input),                     \\",
        "// Line_Reference 197:                     GetTensorData<int8_t>(input), GetTensorShape(output), \\",
        "// Line_Reference 198:                     GetTensorData<int8_t>(output))",
        "// Line_Reference 208: void AverageEvalQuantizedInt16(TfLiteContext* context, TfLiteNode* node,",
        "// Line_Reference 209:                                TfLitePoolParams* params, OpData* data,",
        "// Line_Reference 210:                                const TfLiteTensor* input,",
        "// Line_Reference 211:                                TfLiteTensor* output) {",
        "// Line_Reference 216: #define TF_LITE_AVERAGE_POOL(type)                                         \\",
        "// Line_Reference 217:   tflite::PoolParams op_params;                                            \\",
        "// Line_Reference 218:   op_params.stride_height = params->stride_height;                         \\",
        "// Line_Reference 219:   op_params.stride_width = params->stride_width;                           \\",
        "// Line_Reference 220:   op_params.filter_height = params->filter_height;                         \\",
        "// Line_Reference 221:   op_params.filter_width = params->filter_width;                           \\",
        "// Line_Reference 222:   op_params.padding_values.height = data->padding.height;                  \\",
        "// Line_Reference 223:   op_params.padding_values.width = data->padding.width;                    \\",
        "// Line_Reference 224:   op_params.quantized_activation_min = activation_min;                     \\",
        "// Line_Reference 225:   op_params.quantized_activation_max = activation_max;                     \\",
        "// Line_Reference 226:   type::AveragePool(op_params, GetTensorShape(input),                      \\",
        "// Line_Reference 227:                     GetTensorData<int16_t>(input), GetTensorShape(output), \\",
        "// Line_Reference 228:                     GetTensorData<int16_t>(output))",
        "// Line_Reference 383:       AverageEvalFloat<kernel_type>(context, node, params, data, input, output);",
        "// Line_Reference 384:       break;",
        "// Line_Reference 386:       AverageEvalQuantizedUint8<kernel_type>(context, node, params, data, input,",
        "// Line_Reference 387:                                              output);",
        "// Line_Reference 388:       break;",
        "// Line_Reference 390:       AverageEvalQuantizedInt8<kernel_type>(context, node, params, data, input,",
        "// Line_Reference 391:                                             output);",
        "// Line_Reference 392:       break;",
        "// Line_Reference 394:       AverageEvalQuantizedInt16<kernel_type>(context, node, params, data, input,",
        "// Line_Reference 395:                                              output);",
        "// Line_Reference 396:       break;"
    ]
}
