{
    "cve_id": "CVE-2021-43790",
    "cve_description": "Lucet is a native WebAssembly compiler and runtime. There is a bug in the main branch of `lucet-runtime` affecting all versions published to crates.io that allows a use-after-free in an Instance object that could result in memory corruption, data race, or other related issues. This bug was introduced early in the development of Lucet and is present in all releases. As a result of this bug, and dependent on the memory backing for the Instance objects, it is possible to trigger a use-after-free when the Instance is dropped. Users should upgrade to the main branch of the Lucet repository. Lucet no longer provides versioned releases on crates.io. There is no way to remediate this vulnerability without upgrading.",
    "cve_publish_date": "2021-11-30",
    "cwe_id": "CWE-416",
    "cwe_name": "Use After Free",
    "cwe_description": "The product reuses or references memory after it has been freed. At some point afterward, the memory may be allocated again and saved in another pointer, while the original pointer references a location somewhere within the new allocation. Any operations using the original pointer are no longer valid because the memory \"belongs\" to the code that operates on the new pointer.",
    "commit_message": "Merge pull request from GHSA-hf79-8hjp-rrvq\n\n* Use manual drop\n\n* Add some comments to `ManuallyDrop` usage\n\n* rustfmt\n\nCo-authored-by: Aaron Turon <aturon@fastly.com>\nCo-authored-by: Alex Crichton <alex@alexcrichton.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "instance.rs",
    "code_language": "Rust",
    "number_of_lines_added_for_mitigation": "26",
    "number_of_lines_deleted_vulnerable_to_cve": "13",
    "vulnerable_lines": [
        "// Line_Reference 17: use crate::region::RegionInternal;",
        "// Line_Reference 150:                 // Grab a handle to the region to ensure it outlives `inst`.",
        "// Line_Reference 152:                 // This ensures that the region won't be dropped by `inst` being",
        "// Line_Reference 153:                 // dropped, which could result in `inst` being unmapped by the",
        "// Line_Reference 154:                 // Region *during* drop of the Instance's fields.",
        "// Line_Reference 155:                 let region: Arc<dyn RegionInternal> = inst.alloc().region.clone();",
        "// Line_Reference 160:                 // and now we can drop what may be the last Arc<Region>. If it is",
        "// Line_Reference 161:                 // it can safely do what it needs with memory; we're not running",
        "// Line_Reference 162:                 // destructors on it anymore.",
        "// Line_Reference 163:                 mem::drop(region);",
        "// Line_Reference 236:     /// The memory allocated for this instance",
        "// Line_Reference 237:     alloc: Alloc,",
        "// Line_Reference 1058:             alloc,"
    ]
}
