{
    "cve_id": "CVE-2015-1805",
    "cve_description": "The (1) pipe_read and (2) pipe_write implementations in fs/pipe.c in the Linux kernel before 3.16 do not properly consider the side effects of failed __copy_to_user_inatomic and __copy_from_user_inatomic calls, which allows local users to cause a denial of service (system crash) or possibly gain privileges via a crafted application, aka an \"I/O vector array overrun.\"",
    "cve_publish_date": "2015-08-08",
    "cwe_id": "CWE-17",
    "cwe_name": "DEPRECATED: Code",
    "cwe_description": "This entry has been deprecated.  It was originally used for organizing the Development View (CWE-699) and some other views, but it introduced unnecessary complexity and depth to the resulting tree.",
    "commit_message": "new helper: copy_page_from_iter()\n\nparallel to copy_page_to_iter().  pipe_write() switched to it (and became\n->write_iter()).\n\nSigned-off-by: Al Viro <viro@zeniv.linux.org.uk>",
    "type_of_change": "Modification",
    "filename_of_changes": "pipe.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "19",
    "number_of_lines_deleted_vulnerable_to_cve": "110",
    "vulnerable_lines": [
        "// Line_Reference 119: static int",
        "// Line_Reference 120: pipe_iov_copy_from_user(void *to, struct iovec *iov, unsigned long len,",
        "// Line_Reference 121: \t\t\tint atomic)",
        "// Line_Reference 122: {",
        "// Line_Reference 123: \tunsigned long copy;",
        "// Line_Reference 124: ",
        "// Line_Reference 125: \twhile (len > 0) {",
        "// Line_Reference 126: \t\twhile (!iov->iov_len)",
        "// Line_Reference 127: \t\t\tiov++;",
        "// Line_Reference 128: \t\tcopy = min_t(unsigned long, len, iov->iov_len);",
        "// Line_Reference 129: ",
        "// Line_Reference 130: \t\tif (atomic) {",
        "// Line_Reference 131: \t\t\tif (__copy_from_user_inatomic(to, iov->iov_base, copy))",
        "// Line_Reference 132: \t\t\t\treturn -EFAULT;",
        "// Line_Reference 133: \t\t} else {",
        "// Line_Reference 134: \t\t\tif (copy_from_user(to, iov->iov_base, copy))",
        "// Line_Reference 135: \t\t\t\treturn -EFAULT;",
        "// Line_Reference 136: \t\t}",
        "// Line_Reference 137: \t\tto += copy;",
        "// Line_Reference 138: \t\tlen -= copy;",
        "// Line_Reference 139: \t\tiov->iov_base += copy;",
        "// Line_Reference 140: \t\tiov->iov_len -= copy;",
        "// Line_Reference 141: \t}",
        "// Line_Reference 142: \treturn 0;",
        "// Line_Reference 143: }",
        "// Line_Reference 144: ",
        "// Line_Reference 145: /*",
        "// Line_Reference 146:  * Pre-fault in the user memory, so we can use atomic copies.",
        "// Line_Reference 147:  */",
        "// Line_Reference 148: static void iov_fault_in_pages_read(struct iovec *iov, unsigned long len)",
        "// Line_Reference 149: {",
        "// Line_Reference 150: \twhile (!iov->iov_len)",
        "// Line_Reference 151: \t\tiov++;",
        "// Line_Reference 152: ",
        "// Line_Reference 153: \twhile (len > 0) {",
        "// Line_Reference 154: \t\tunsigned long this_len;",
        "// Line_Reference 155: ",
        "// Line_Reference 156: \t\tthis_len = min_t(unsigned long, len, iov->iov_len);",
        "// Line_Reference 157: \t\tfault_in_pages_readable(iov->iov_base, this_len);",
        "// Line_Reference 158: \t\tlen -= this_len;",
        "// Line_Reference 159: \t\tiov++;",
        "// Line_Reference 160: \t}",
        "// Line_Reference 161: }",
        "// Line_Reference 162: ",
        "// Line_Reference 383: pipe_write(struct kiocb *iocb, const struct iovec *_iov,",
        "// Line_Reference 384: \t    unsigned long nr_segs, loff_t ppos)",
        "// Line_Reference 388: \tssize_t ret;",
        "// Line_Reference 389: \tint do_wakeup;",
        "// Line_Reference 390: \tstruct iovec *iov = (struct iovec *)_iov;",
        "// Line_Reference 391: \tsize_t total_len;",
        "// Line_Reference 394: \ttotal_len = iov_length(iov, nr_segs);",
        "// Line_Reference 399: \tdo_wakeup = 0;",
        "// Line_Reference 400: \tret = 0;",
        "// Line_Reference 419: \t\t\tint error, atomic = 1;",
        "// Line_Reference 420: \t\t\tvoid *addr;",
        "// Line_Reference 421: ",
        "// Line_Reference 422: \t\t\terror = ops->confirm(pipe, buf);",
        "// Line_Reference 426: \t\t\tiov_fault_in_pages_read(iov, chars);",
        "// Line_Reference 427: redo1:",
        "// Line_Reference 428: \t\t\tif (atomic)",
        "// Line_Reference 429: \t\t\t\taddr = kmap_atomic(buf->page);",
        "// Line_Reference 430: \t\t\telse",
        "// Line_Reference 431: \t\t\t\taddr = kmap(buf->page);",
        "// Line_Reference 432: \t\t\terror = pipe_iov_copy_from_user(offset + addr, iov,",
        "// Line_Reference 433: \t\t\t\t\t\t\tchars, atomic);",
        "// Line_Reference 434: \t\t\tif (atomic)",
        "// Line_Reference 435: \t\t\t\tkunmap_atomic(addr);",
        "// Line_Reference 436: \t\t\telse",
        "// Line_Reference 437: \t\t\t\tkunmap(buf->page);",
        "// Line_Reference 438: \t\t\tret = error;",
        "// Line_Reference 439: \t\t\tdo_wakeup = 1;",
        "// Line_Reference 440: \t\t\tif (error) {",
        "// Line_Reference 441: \t\t\t\tif (atomic) {",
        "// Line_Reference 442: \t\t\t\t\tatomic = 0;",
        "// Line_Reference 443: \t\t\t\t\tgoto redo1;",
        "// Line_Reference 444: \t\t\t\t}",
        "// Line_Reference 448: \t\t\ttotal_len -= chars;",
        "// Line_Reference 450: \t\t\tif (!total_len)",
        "// Line_Reference 469: \t\t\tchar *src;",
        "// Line_Reference 470: \t\t\tint error, atomic = 1;",
        "// Line_Reference 486: \t\t\tchars = PAGE_SIZE;",
        "// Line_Reference 487: \t\t\tif (chars > total_len)",
        "// Line_Reference 488: \t\t\t\tchars = total_len;",
        "// Line_Reference 489: ",
        "// Line_Reference 490: \t\t\tiov_fault_in_pages_read(iov, chars);",
        "// Line_Reference 491: redo2:",
        "// Line_Reference 492: \t\t\tif (atomic)",
        "// Line_Reference 493: \t\t\t\tsrc = kmap_atomic(page);",
        "// Line_Reference 494: \t\t\telse",
        "// Line_Reference 495: \t\t\t\tsrc = kmap(page);",
        "// Line_Reference 496: ",
        "// Line_Reference 497: \t\t\terror = pipe_iov_copy_from_user(src, iov, chars,",
        "// Line_Reference 498: \t\t\t\t\t\t\tatomic);",
        "// Line_Reference 499: \t\t\tif (atomic)",
        "// Line_Reference 500: \t\t\t\tkunmap_atomic(src);",
        "// Line_Reference 501: \t\t\telse",
        "// Line_Reference 502: \t\t\t\tkunmap(page);",
        "// Line_Reference 503: ",
        "// Line_Reference 504: \t\t\tif (unlikely(error)) {",
        "// Line_Reference 505: \t\t\t\tif (atomic) {",
        "// Line_Reference 506: \t\t\t\t\tatomic = 0;",
        "// Line_Reference 507: \t\t\t\t\tgoto redo2;",
        "// Line_Reference 508: \t\t\t\t}",
        "// Line_Reference 510: \t\t\t\t\tret = error;",
        "// Line_Reference 513: \t\t\tret += chars;",
        "// Line_Reference 519: \t\t\tbuf->len = chars;",
        "// Line_Reference 528: \t\t\ttotal_len -= chars;",
        "// Line_Reference 529: \t\t\tif (!total_len)",
        "// Line_Reference 1043: \t.write\t\t= do_sync_write,",
        "// Line_Reference 1044: \t.aio_write\t= pipe_write,"
    ]
}
