{
    "cve_id": "CVE-2015-3339",
    "cve_description": "Race condition in the prepare_binprm function in fs/exec.c in the Linux kernel before 3.19.6 allows local users to gain privileges by executing a setuid program at a time instant when a chown to root is in progress, and the ownership is changed but the setuid bit is not yet stripped.",
    "cve_publish_date": "2015-05-27",
    "cwe_id": "CWE-362",
    "cwe_name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
    "cwe_description": "The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.",
    "commit_message": "fs: take i_mutex during prepare_binprm for set[ug]id executables\n\nThis prevents a race between chown() and execve(), where chowning a\nsetuid-user binary to root would momentarily make the binary setuid\nroot.\n\nThis patch was mostly written by Linus Torvalds.\n\nSigned-off-by: Jann Horn <jann@thejh.net>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "exec.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "48",
    "number_of_lines_deleted_vulnerable_to_cve": "28",
    "vulnerable_lines": [
        "// Line_Reference 1286: \tstruct inode *inode = file_inode(bprm->file);",
        "// Line_Reference 1287: \tumode_t mode = inode->i_mode;",
        "// Line_Reference 1290: ",
        "// Line_Reference 1291: \t/* clear any previous set[ug]id data from a previous binary */",
        "// Line_Reference 1292: \tbprm->cred->euid = current_euid();",
        "// Line_Reference 1293: \tbprm->cred->egid = current_egid();",
        "// Line_Reference 1294: ",
        "// Line_Reference 1295: \tif (!(bprm->file->f_path.mnt->mnt_flags & MNT_NOSUID) &&",
        "// Line_Reference 1296: \t    !task_no_new_privs(current) &&",
        "// Line_Reference 1297: \t    kuid_has_mapping(bprm->cred->user_ns, inode->i_uid) &&",
        "// Line_Reference 1298: \t    kgid_has_mapping(bprm->cred->user_ns, inode->i_gid)) {",
        "// Line_Reference 1299: \t\t/* Set-uid? */",
        "// Line_Reference 1300: \t\tif (mode & S_ISUID) {",
        "// Line_Reference 1301: \t\t\tbprm->per_clear |= PER_CLEAR_ON_SETID;",
        "// Line_Reference 1302: \t\t\tbprm->cred->euid = inode->i_uid;",
        "// Line_Reference 1303: \t\t}",
        "// Line_Reference 1304: ",
        "// Line_Reference 1305: \t\t/* Set-gid? */",
        "// Line_Reference 1306: \t\t/*",
        "// Line_Reference 1307: \t\t * If setgid is set but no group execute bit then this",
        "// Line_Reference 1308: \t\t * is a candidate for mandatory locking, not a setgid",
        "// Line_Reference 1309: \t\t * executable.",
        "// Line_Reference 1310: \t\t */",
        "// Line_Reference 1311: \t\tif ((mode & (S_ISGID | S_IXGRP)) == (S_ISGID | S_IXGRP)) {",
        "// Line_Reference 1312: \t\t\tbprm->per_clear |= PER_CLEAR_ON_SETID;",
        "// Line_Reference 1313: \t\t\tbprm->cred->egid = inode->i_gid;",
        "// Line_Reference 1314: \t\t}",
        "// Line_Reference 1315: \t}"
    ]
}
