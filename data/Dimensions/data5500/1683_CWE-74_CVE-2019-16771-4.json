{
    "cve_id": "CVE-2019-16771",
    "cve_description": "Versions of Armeria 0.85.0 through and including 0.96.0 are vulnerable to HTTP response splitting, which allows remote attackers to inject arbitrary HTTP headers via CRLF sequences when unsanitized data is used to populate the headers of an HTTP response. This vulnerability has been patched in 0.97.0. Potential impacts of this vulnerability include cross-user defacement, cache poisoning, Cross-site scripting (XSS), and page hijacking.",
    "cve_publish_date": "2019-12-06",
    "cwe_id": "CWE-74",
    "cwe_name": "Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')",
    "cwe_description": "The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.",
    "commit_message": "Merge pull request from GHSA-35fr-h7jr-hh86\n\nMotivation:\n\nAn `HttpService` can produce a malformed HTTP response when a user\nspecified a malformed HTTP header values, such as:\n\n    ResponseHeaders.of(HttpStatus.OK\n                       \"my-header\", \"foo\\r\\nbad-header: bar\");\n\nModification:\n\n- Add strict header value validation to `HttpHeadersBase`\n- Add strict header name validation to `HttpHeaderNames.of()`, which is\n  used by `HttpHeadersBase`.\n\nResult:\n\n- It is not possible anymore to send a bad header value which can be\n  misused for sending additional headers or injecting arbitrary content.",
    "type_of_change": "Modification",
    "filename_of_changes": "HttpHeadersBase.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "62",
    "number_of_lines_deleted_vulnerable_to_cve": "16",
    "vulnerable_lines": [
        "// Line_Reference 32: import static com.google.common.base.Preconditions.checkArgument;",
        "// Line_Reference 548:         final AsciiString normalizedName = normalizeName(name);",
        "// Line_Reference 556:         final AsciiString normalizedName = normalizeName(name);",
        "// Line_Reference 567:         final AsciiString normalizedName = normalizeName(name);",
        "// Line_Reference 593:         final AsciiString normalizedName = normalizeName(name);",
        "// Line_Reference 602:         final AsciiString normalizedName = normalizeName(name);",
        "// Line_Reference 641:         final AsciiString normalizedName = normalizeName(name);",
        "// Line_Reference 650:         final AsciiString normalizedName = normalizeName(name);",
        "// Line_Reference 664:         final AsciiString normalizedName = normalizeName(name);",
        "// Line_Reference 742:         final AsciiString normalizedName = normalizeName(name);",
        "// Line_Reference 756:         final AsciiString normalizedName = normalizeName(name);",
        "// Line_Reference 816:     private static AsciiString normalizeName(CharSequence name) {",
        "// Line_Reference 817:         checkArgument(requireNonNull(name, \"name\").length() > 0, \"name is empty.\");",
        "// Line_Reference 818:         return HttpHeaderNames.of(name);",
        "// Line_Reference 819:     }",
        "// Line_Reference 820: "
    ]
}
