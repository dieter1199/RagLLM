{
    "cve_id": "CVE-2021-29431",
    "cve_description": "Sydent is a reference Matrix identity server. Sydent can be induced to send HTTP GET requests to internal systems, due to lack of parameter validation or IP address blacklisting. It is not possible to exfiltrate data or control request headers, but it might be possible to use the attack to perform an internal port enumeration. This issue has been addressed in in 9e57334, 8936925, 3d531ed, 0f00412. A potential workaround would be to use a firewall to ensure that Sydent cannot reach internal HTTP resources.",
    "cve_publish_date": "2021-04-15",
    "cwe_id": "CWE-20",
    "cwe_name": "Improper Input Validation",
    "cwe_description": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.",
    "commit_message": "Allow IPv6 literals as Matrix server names.\n\nAccording to the spec, Matrix server names are allowed to be IP\naddresses, including IPv6 literals.",
    "type_of_change": "Modification",
    "filename_of_changes": "stringutils.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "67",
    "number_of_lines_deleted_vulnerable_to_cve": "18",
    "vulnerable_lines": [
        "// Line_Reference 20: # hostname/domain name + optional port",
        "// Line_Reference 40:     \"\"\"Validate that a given string is a valid hostname or domain name, with an",
        "// Line_Reference 41:     optional port number.",
        "// Line_Reference 44:     instance, it doesn't check that the TLD is valid). If a port is",
        "// Line_Reference 45:     specified, it has to be a valid port number.",
        "// Line_Reference 54:     host_parts = string.split(\":\", 1)",
        "// Line_Reference 56:     if len(host_parts) == 1:",
        "// Line_Reference 57:         return hostname_regex.match(string) is not None",
        "// Line_Reference 58:     else:",
        "// Line_Reference 59:         host, port = host_parts",
        "// Line_Reference 60:         valid_hostname = hostname_regex.match(host) is not None",
        "// Line_Reference 62:         try:",
        "// Line_Reference 64:             valid_port = (",
        "// Line_Reference 65:                 port == str(port_num)  # exclude things like '08090' or ' 8090'",
        "// Line_Reference 66:                 and 1 <= port_num < 65536)",
        "// Line_Reference 67:         except ValueError:",
        "// Line_Reference 68:             valid_port = False",
        "// Line_Reference 70:         return valid_hostname and valid_port"
    ]
}
