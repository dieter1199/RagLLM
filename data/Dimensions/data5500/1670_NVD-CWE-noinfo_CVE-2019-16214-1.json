{
    "cve_id": "CVE-2019-16214",
    "cve_description": "Libra Core before 2019-09-03 has an erroneous regular expression for inline comments, which makes it easier for attackers to interfere with code auditing by using a nonstandard line-break character for a comment. For example, a Move module author can enter the // sequence (which introduces a single-line comment), followed by very brief comment text, the \\r character, and code that has security-critical functionality. In many popular environments, this code is displayed on a separate line, and thus a reader may infer that the code is executed. However, the code is NOT executed, because language/compiler/ir_to_bytecode/src/parser.rs allows the comment to continue after the \\r character.",
    "cve_publish_date": "2019-09-11",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "[language] Restrict character classes allowed in IR\n\nThis PR restricts the character classes that are allowed in IR files to\neither be:\n* ASCII printable (space through ~).\n* \\n for newlines\n* \\t for tabs\nAll other characters anywhere in the file will result in an error being\nraised before the string is even passed to the parser.",
    "type_of_change": "Modification",
    "filename_of_changes": "parser.rs",
    "code_language": "Rust",
    "number_of_lines_added_for_mitigation": "147",
    "number_of_lines_deleted_vulnerable_to_cve": "16",
    "vulnerable_lines": [
        "// Line_Reference 9: use regex::Regex;",
        "// Line_Reference 19: // Since lalrpop can't handle comments without a custom lexer, we somewhat hackily remove all the",
        "// Line_Reference 20: // comments from the input string before passing it off to lalrpop. We only support single line",
        "// Line_Reference 21: // comments for now. Will later on add in other comment types.",
        "// Line_Reference 22: fn strip_comments(string: &str) -> String {",
        "// Line_Reference 23:     // Remove line comments",
        "// Line_Reference 24:     let line_comments = Regex::new(r\"(?m)//.*$\").unwrap();",
        "// Line_Reference 25:     line_comments.replace_all(string, \"$1\").into_owned()",
        "// Line_Reference 42:     let stripped_string = &strip_comments(program_str);",
        "// Line_Reference 46:         Err(e) => handle_error(e, program_str),",
        "// Line_Reference 53:     let stripped_string = &strip_comments(script_str);",
        "// Line_Reference 57:         Err(e) => handle_error(e, script_str),",
        "// Line_Reference 64:     let stripped_string = &strip_comments(modules_str);",
        "// Line_Reference 68:         Err(e) => handle_error(e, modules_str),",
        "// Line_Reference 75:     let stripped_string = &strip_comments(cmd_str);",
        "// Line_Reference 79:         Err(e) => handle_error(e, cmd_str),"
    ]
}
