{
    "cve_id": "CVE-2019-19274",
    "cve_description": "typed_ast 1.3.0 and 1.3.1 has a handle_keywordonly_args out-of-bounds read. An attacker with the ability to cause a Python interpreter to parse Python source (but not necessarily execute it) may be able to crash the interpreter process. This could be a concern, for example, in a web-based service that parses (but does not execute) Python code. (This issue also affected certain Python 3.8.0-alpha prereleases.)",
    "cve_publish_date": "2019-11-26",
    "cwe_id": "CWE-125",
    "cwe_name": "Out-of-bounds Read",
    "cwe_description": "The product reads data past the end, or before the beginning, of the intended buffer.",
    "commit_message": "Fully incorporate the code from Python 3.7.2 (#78)\n\nThis is a full port, following the recipe in update_process.md. I've also tried to keep the recipe up to date and improved the automation (see tools/script). I haven't cleaned up the commits. As of #77 there are a few tests that sanity-check this (though it's far from a full test suite), and they're run by Travis-CI and AppVeyor.",
    "type_of_change": "Modification",
    "filename_of_changes": "node.h",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "12",
    "number_of_lines_deleted_vulnerable_to_cve": "12",
    "vulnerable_lines": [
        "// Line_Reference 11:     short\t\tn_type;",
        "// Line_Reference 12:     char\t\t*n_str;",
        "// Line_Reference 13:     int\t\t\tn_lineno;",
        "// Line_Reference 14:     int\t\t\tn_col_offset;",
        "// Line_Reference 15:     int\t\t\tn_nchildren;",
        "// Line_Reference 16:     struct _node\t*n_child;",
        "// Line_Reference 19: extern node *Ta3Node_New(int type);",
        "// Line_Reference 28: #define NCH(n)\t\t((n)->n_nchildren)",
        "// Line_Reference 30: #define CHILD(n, i)\t(&(n)->n_child[i])",
        "// Line_Reference 31: #define RCHILD(n, i)\t(CHILD(n, NCH(n) + i))",
        "// Line_Reference 32: #define TYPE(n)\t\t((n)->n_type)",
        "// Line_Reference 33: #define STR(n)\t\t((n)->n_str)"
    ]
}
