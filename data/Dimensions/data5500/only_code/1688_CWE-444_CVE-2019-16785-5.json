from waitress.compat import (
text_,
tobytes,
)
def test_received_nonsense_with_double_cr(self):
data = b"""\
HTTP/1.0 GET /foobar
"""
self.assertEqual(result, 22)
data = b"""\
HTTP/1.0 GET /foobar
Host: foo
"""
self.assertEqual(result, 33)
data = b"""\
"""
self.assertEqual(result, 2)
data = b"""\
GET /foobar HTTP/8.4
"""
self.assertEqual(result, 21)
data = b"""\
GET /foobar HTTP/8.4
Content-Length: 10
"""
self.assertEqual(result, 41)
data = b"""\
GET /foobar HTTP/8.4
X-Foo: 1
"""
self.assertEqual(result, 30)
data = b"""\
GET /foobar HTTP/1.1
Transfer-Encoding: chunked
X-Foo: 1
20;\r\n
This string has 32 characters\r\n
0\r\n\r\n"""
self.assertEqual(result, 58)
data = b"""\
GET /foobar HTTP/1.1
Transfer-Encoding: chunked
X-Foo: 1
garbage
"""
self.assertEqual(result, 8)
data = b"""\
GET /foobar HTTP/1.1
Transfer-Encoding: chunked
X-Foo: 1
20;\r\n
This string has 32 characters\r\n
0\r\n\r\n"""
self.assertEqual(result, 58)
self.assertEqual(self.parser.headers["CONTENT_LENGTH"], "32")
data = b"""\
GET /foobar HTTP/8.4
foo: bar"""
self.parser.parse_header(data)
self.assertEqual(self.parser.first_line, data)
data = b"GET /foobar HTTP/8.4\ncontent-length: abc"
data = b"GET /foobar HTTP/1.1\ntransfer-encoding: ChUnKed"
data = b"GET /foobar HTTP/1.1\nexpect: 100-continue"
data = b"GET /foobar HTTP/1.1\nConnection: close\n\n"
result = self._callFUT(b"slam\nslim")
result = self._callFUT(b"slim\n slam")
result = self._callFUT(b"slam\n\tslim")
data = b"""\
GET /foobar HTTP/8.4
FirstName: mickey
lastname: Mouse
content-length: 7
Hello.
"""
{"FIRSTNAME": "mickey", "LASTNAME": "Mouse", "CONTENT_LENGTH": "7",},
self.assertEqual(parser.get_body_stream().getvalue(), b"Hello.\n")
data = b"""\
GET /foo/a+%2B%2F%C3%A4%3D%26a%3Aint?d=b+%2B%2F%3D%26b%3Aint&c+%2B%2F%3D%26c%3Aint=6 HTTP/8.4
FirstName: mickey
lastname: Mouse
content-length: 10
Hello mickey.
"""
{"FIRSTNAME": "mickey", "LASTNAME": "Mouse", "CONTENT_LENGTH": "10",},
data = b"""\
GET https://example.com:8080/foobar HTTP/8.4
content-length: 7
Hello.
"""
self.assertEqual(parser.headers, {"CONTENT_LENGTH": "7",})
self.assertEqual(parser.get_body_stream().getvalue(), b"Hello.\n")
data = b"""\
GET /foobar HTTP/8.4
x-forwarded-for: 10.11.12.13
x-forwarded-for: unknown,127.0.0.1
X-Forwarded_for: 255.255.255.255
content-length: 7
Hello.
"""
"CONTENT_LENGTH": "7",
data = b"""\
GET /foobar HTTP/8.4
x-auth_user: bob
content-length: 7
Hello.
"""
self.assertEqual(self.parser.headers, {"CONTENT_LENGTH": "7",})
