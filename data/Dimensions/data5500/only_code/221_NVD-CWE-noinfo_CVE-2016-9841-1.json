/* Allow machine dependent optimization for post-increment or pre-increment.
Based on testing to date,
Pre-increment preferred for:
- PowerPC G3 (Adler)
- MIPS R5000 (Randers-Pehrson)
Post-increment preferred for:
- none
No measurable difference:
- Pentium III (Anderson)
- M68060 (Nikl)
*/
#ifdef POSTINC
#  define OFF 0
#  define PUP(a) *(a)++
#else
#  define OFF 1
#  define PUP(a) *++(a)
#endif
in = strm->next_in - OFF;
out = strm->next_out - OFF;
hold += (unsigned long)(PUP(in)) << bits;
hold += (unsigned long)(PUP(in)) << bits;
PUP(out) = (unsigned char)(here.val);
hold += (unsigned long)(PUP(in)) << bits;
hold += (unsigned long)(PUP(in)) << bits;
hold += (unsigned long)(PUP(in)) << bits;
hold += (unsigned long)(PUP(in)) << bits;
hold += (unsigned long)(PUP(in)) << bits;
PUP(out) = 0;
PUP(out) = 0;
PUP(out) = PUP(from);
from = window - OFF;
PUP(out) = PUP(from);
PUP(out) = PUP(from);
from = window - OFF;
PUP(out) = PUP(from);
PUP(out) = PUP(from);
PUP(out) = PUP(from);
PUP(out) = PUP(from);
PUP(out) = PUP(from);
PUP(out) = PUP(from);
PUP(out) = PUP(from);
PUP(out) = PUP(from);
PUP(out) = PUP(from);
PUP(out) = PUP(from);
PUP(out) = PUP(from);
PUP(out) = PUP(from);
strm->next_in = in + OFF;
strm->next_out = out + OFF;
