{
    "cve_id": "CVE-2021-21240",
    "cve_description": "httplib2 is a comprehensive HTTP client library for Python. In httplib2 before version 0.19.0, a malicious server which responds with long series of \"\\xa0\" characters in the \"www-authenticate\" header may cause Denial of Service (CPU burn while parsing header) of the httplib2 client accessing said server. This is fixed in version 0.19.0 which contains a new implementation of auth headers parsing using the pyparsing library.",
    "cve_publish_date": "2021-02-08",
    "cwe_id": "CWE-400",
    "cwe_name": "Uncontrolled Resource Consumption",
    "cwe_description": "The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.",
    "commit_message": "parse auth headers using pyparsing instead of regexp\n\nFixes CPU burn DoS by cubic complexity of whitespace matching in\nWWW_AUTH_RELAXED (default) regexp.",
    "type_of_change": "Modification",
    "filename_of_changes": "__init__.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "31",
    "number_of_lines_deleted_vulnerable_to_cve": "83",
    "vulnerable_lines": [
        "// Line_Reference 122:         assert re.match(",
        "// Line_Reference 123:             br\".+ HTTP/\\d\\.\\d\\r\\n$\", start_line",
        "// Line_Reference 124:         ), \"Start line does not look like HTTP request: \" + repr(start_line)",
        "// Line_Reference 204:         self,",
        "// Line_Reference 205:         host,",
        "// Line_Reference 206:         port=None,",
        "// Line_Reference 207:         key_file=None,",
        "// Line_Reference 208:         cert_file=None,",
        "// Line_Reference 209:         strict=None,",
        "// Line_Reference 210:         timeout=None,",
        "// Line_Reference 211:         proxy_info=None,",
        "// Line_Reference 243:         self,",
        "// Line_Reference 244:         host,",
        "// Line_Reference 245:         port=None,",
        "// Line_Reference 246:         key_file=None,",
        "// Line_Reference 247:         cert_file=None,",
        "// Line_Reference 248:         strict=None,",
        "// Line_Reference 249:         timeout=None,",
        "// Line_Reference 250:         proxy_info=None,",
        "// Line_Reference 331:                 gresult[0] = Exception(",
        "// Line_Reference 332:                     \"Request count expected={0} actual={1}\".format(",
        "// Line_Reference 333:                         request_count, gcounter[0]",
        "// Line_Reference 334:                     )",
        "// Line_Reference 335:                 )",
        "// Line_Reference 461:     if (",
        "// Line_Reference 462:         not undefined_body_length",
        "// Line_Reference 463:         and proto != \"HTTP/1.0\"",
        "// Line_Reference 464:         and \"content-length\" not in headers",
        "// Line_Reference 465:     ):",
        "// Line_Reference 466:         raise Exception(",
        "// Line_Reference 467:             \"httplib2.tests.http_response_bytes: client could not figure response body length\"",
        "// Line_Reference 468:         )",
        "// Line_Reference 472:         \"{proto} {status}\\r\\n{headers}\\r\\n\".format(",
        "// Line_Reference 473:             proto=proto, status=status, headers=header_string",
        "// Line_Reference 474:         ).encode()",
        "// Line_Reference 475:         + body",
        "// Line_Reference 529: def http_parse_auth(s):",
        "// Line_Reference 530:     \"\"\"https://tools.ietf.org/html/rfc7235#section-2.1",
        "// Line_Reference 531:     \"\"\"",
        "// Line_Reference 532:     scheme, rest = s.split(\" \", 1)",
        "// Line_Reference 533:     result = {}",
        "// Line_Reference 534:     while True:",
        "// Line_Reference 535:         m = httplib2.WWW_AUTH_RELAXED.search(rest)",
        "// Line_Reference 536:         if not m:",
        "// Line_Reference 537:             break",
        "// Line_Reference 538:         if len(m.groups()) == 3:",
        "// Line_Reference 539:             key, value, rest = m.groups()",
        "// Line_Reference 540:             result[key.lower()] = httplib2.UNQUOTE_PAIRS.sub(r\"\\1\", value)",
        "// Line_Reference 541:     return result",
        "// Line_Reference 542: ",
        "// Line_Reference 543: ",
        "// Line_Reference 612:         if \" \" not in auth_header:",
        "// Line_Reference 614:         scheme, data = auth_header.split(\" \", 1)",
        "// Line_Reference 615:         scheme = scheme.lower()",
        "// Line_Reference 619:             decoded = base64.b64decode(data).decode()",
        "// Line_Reference 633:             auth_info = http_parse_auth(data)",
        "// Line_Reference 654:                     body=\"auth-info opaque mismatch expected={} actual={}\".format(",
        "// Line_Reference 655:                         server_opaque, client_opaque",
        "// Line_Reference 656:                     ).encode()",
        "// Line_Reference 659:                 ha1 = hasher(",
        "// Line_Reference 660:                     \":\".join((allow_username, realm, allow_password)).encode()",
        "// Line_Reference 661:                 ).hexdigest()",
        "// Line_Reference 663:                     \":\".join(",
        "// Line_Reference 664:                         (ha1, client_nonce, client_nc, client_cnonce, client_qop, ha2)",
        "// Line_Reference 665:                     ).encode()",
        "// Line_Reference 669:                     \":\".join(",
        "// Line_Reference 670:                         (",
        "// Line_Reference 671:                             ha1,",
        "// Line_Reference 672:                             client_nonce,",
        "// Line_Reference 673:                             client_nc,",
        "// Line_Reference 674:                             client_cnonce,",
        "// Line_Reference 675:                             client_qop,",
        "// Line_Reference 676:                             rspauth_ha2,",
        "// Line_Reference 677:                         )",
        "// Line_Reference 678:                     ).encode()",
        "// Line_Reference 685:                         \"authentication-info\": \" \".join(",
        "// Line_Reference 692:                             )",
        "// Line_Reference 701:             auth_info = http_parse_auth(x_wsse)",
        "// Line_Reference 702:             client_username = auth_info.get(\"username\", \"\")",
        "// Line_Reference 703:             client_nonce = auth_info.get(\"nonce\", \"\")",
        "// Line_Reference 704:             client_created = auth_info.get(\"created\", \"\")",
        "// Line_Reference 705:             client_digest = auth_info.get(\"passworddigest\", \"\")",
        "// Line_Reference 715:             print(\"$$$ check client={} == real={}\".format(client_digest, digest_b64))"
    ]
}
