{
    "cve_id": "CVE-2024-31455",
    "cve_description": "Minder by Stacklok is an open source software supply chain security platform. A refactoring in commit `5c381cf` added the ability to get GitHub repositories registered to a project without specifying a specific provider.  Unfortunately, the SQL query for doing so was missing parenthesis, and would select a random repository. This issue is patched in pull request 2941. As a workaround, revert prior to `5c381cf`, or roll forward past `2eb94e7`.",
    "cve_publish_date": "2024-04-09",
    "cwe_id": "NVD-CWE-noinfo",
    "commit_message": "Make provider an optional filter (#2871)\n\nRef #2522",
    "type_of_change": "Modification",
    "filename_of_changes": "service.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "30",
    "number_of_lines_deleted_vulnerable_to_cve": "14",
    "vulnerable_lines": [
        "// Line_Reference 61: // DeleteRepositoryByID mocks base method.",
        "// Line_Reference 62: func (m *MockRepositoryService) DeleteRepositoryByID(arg0 context.Context, arg1 clients.GitHubRepoClient, arg2, arg3 uuid.UUID) error {",
        "// Line_Reference 64:     ret := m.ctrl.Call(m, \"DeleteRepositoryByID\", arg0, arg1, arg2, arg3)",
        "// Line_Reference 69: // DeleteRepositoryByID indicates an expected call of DeleteRepositoryByID.",
        "// Line_Reference 70: func (mr *MockRepositoryServiceMockRecorder) DeleteRepositoryByID(arg0, arg1, arg2, arg3 any) *gomock.Call {",
        "// Line_Reference 72:     return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"DeleteRepositoryByID\", reflect.TypeOf((*MockRepositoryService)(nil).DeleteRepositoryByID), arg0, arg1, arg2, arg3)",
        "// Line_Reference 75: // DeleteRepositoryByName mocks base method.",
        "// Line_Reference 76: func (m *MockRepositoryService) DeleteRepositoryByName(arg0 context.Context, arg1 clients.GitHubRepoClient, arg2 uuid.UUID, arg3, arg4, arg5 string) error {",
        "// Line_Reference 78:     ret := m.ctrl.Call(m, \"DeleteRepositoryByName\", arg0, arg1, arg2, arg3, arg4, arg5)",
        "// Line_Reference 79:     ret0, _ := ret[0].(error)",
        "// Line_Reference 80:     return ret0",
        "// Line_Reference 83: // DeleteRepositoryByName indicates an expected call of DeleteRepositoryByName.",
        "// Line_Reference 84: func (mr *MockRepositoryServiceMockRecorder) DeleteRepositoryByName(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {",
        "// Line_Reference 86:     return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, \"DeleteRepositoryByName\", reflect.TypeOf((*MockRepositoryService)(nil).DeleteRepositoryByName), arg0, arg1, arg2, arg3, arg4, arg5)"
    ]
}
