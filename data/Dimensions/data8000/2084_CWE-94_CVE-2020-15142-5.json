{
    "cve_id": "CVE-2020-15142",
    "cve_description": "In openapi-python-client before version 0.5.3, clients generated with a maliciously crafted OpenAPI Document can generate arbitrary Python code. Subsequent execution of this malicious client is arbitrary code execution.",
    "cve_publish_date": "2020-08-14",
    "cwe_id": "CWE-94",
    "cwe_name": "Improper Control of Generation of Code ('Code Injection')",
    "cwe_description": "The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.",
    "commit_message": "Merge pull request from GHSA-9x4c-63pf-525f\n\n* All strings used as file/directory names are now sanitized to address the path traversal vulnerabilities\n\n* Switched calls to utils.spinal_case to utils.kebab_case\n\n* Quotation marks are now escaped in all names/descriptions to address arbitrary code execution issues\n\n* Sanitized identifiers are now also checked for keyword collision\n\n* Added validation for default property values where possible\n\nAddress arbitrary code execution vulnerability\n\n* Enum keys are now also sanitized\n\n* Update end_to_end_tests/fastapi_app/__init__.py\n\nCo-authored-by: Dylan Anthony <43723790+dbanty@users.noreply.github.com>\n\n* Update openapi_python_client/parser/properties.py\n\nCo-authored-by: Dylan Anthony <43723790+dbanty@users.noreply.github.com>\n\n* Changed NotImplementedErrors to ValidationErrors\n\n* Updated changelog\n\n* Fixed regex\n\n* Update openapi_python_client/utils.py\n\nCo-authored-by: Dylan Anthony <43723790+dbanty@users.noreply.github.com>\n\n* Fixed rendering of union, datetime, and date properties. Added e2e test for all defaults\n\n* Fixed rendering of date/datetime default values when timezone is included\n\n* Simplified datetime rendering\n\n* Fixed typo\n\n* Readded support for DictProperty defaults and fixed a bug with json body template rendering\n\n* Fixed dict json body compatibility\n\nCo-authored-by: Ethan Mann <emann@triaxtec.com>\nCo-authored-by: Dylan Anthony <43723790+dbanty@users.noreply.github.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "properties.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "110",
    "number_of_lines_deleted_vulnerable_to_cve": "35",
    "vulnerable_lines": [
        "// Line_Reference 8: from .errors import PropertyError",
        "// Line_Reference 36:     def get_type_string(self) -> str:",
        "// Line_Reference 38:         if self.required:",
        "// Line_Reference 77:     def __post_init__(self) -> None:",
        "// Line_Reference 78:         super().__post_init__()",
        "// Line_Reference 79:         if self.default is not None:",
        "// Line_Reference 80:             self.default = f'\"{self.default}\"'",
        "// Line_Reference 89:     _type_string: ClassVar[str] = \"datetime\"",
        "// Line_Reference 100:         imports.update({\"from datetime import datetime\", \"from typing import cast\"})",
        "// Line_Reference 108:     _type_string: ClassVar[str] = \"date\"",
        "// Line_Reference 119:         imports.update({\"from datetime import date\", \"from typing import cast\"})",
        "// Line_Reference 175:     def __post_init__(self) -> None:",
        "// Line_Reference 176:         super().__post_init__()",
        "// Line_Reference 177:         if self.default is not None:",
        "// Line_Reference 178:             self.default = f\"field(default_factory=lambda: cast({self.get_type_string()}, {self.default}))\"",
        "// Line_Reference 179: ",
        "// Line_Reference 180:     def get_type_string(self) -> str:",
        "// Line_Reference 182:         if self.required:",
        "// Line_Reference 209:     def get_type_string(self) -> str:",
        "// Line_Reference 213:         if self.required:",
        "// Line_Reference 245:         super().__post_init__()",
        "// Line_Reference 256:         inverse_values = {v: k for k, v in self.values.items()}",
        "// Line_Reference 257:         if self.default is not None:",
        "// Line_Reference 258:             self.default = f\"{self.reference.class_name}.{inverse_values[self.default]}\"",
        "// Line_Reference 271:     def get_type_string(self) -> str:",
        "// Line_Reference 274:         if self.required:",
        "// Line_Reference 301:             output[key] = value",
        "// Line_Reference 319:     def get_type_string(self) -> str:",
        "// Line_Reference 321:         if self.required:",
        "// Line_Reference 348: ",
        "// Line_Reference 349:     def __post_init__(self) -> None:",
        "// Line_Reference 350:         super().__post_init__()",
        "// Line_Reference 351:         if self.default is not None:",
        "// Line_Reference 352:             self.default = f\"field(default_factory=lambda: cast({self.get_type_string()}, {self.default}))\"",
        "// Line_Reference 384: def property_from_data("
    ]
}
