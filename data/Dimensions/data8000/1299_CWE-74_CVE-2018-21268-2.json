{
    "cve_id": "CVE-2018-21268",
    "cve_description": "The traceroute (aka node-traceroute) package through 1.0.0 for Node.js allows remote command injection via the host parameter. This occurs because the Child.exec() method, which is considered to be not entirely safe, is used. In particular, an OS command can be placed after a newline character.",
    "cve_publish_date": "2020-06-25",
    "cwe_id": "CWE-74",
    "cwe_name": "Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')",
    "cwe_description": "The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.",
    "commit_message": "conversion to spawn and stream",
    "type_of_change": "Modification",
    "filename_of_changes": "traceroute.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "27",
    "number_of_lines_deleted_vulnerable_to_cve": "33",
    "vulnerable_lines": [
        "// Line_Reference 21: ",
        "// Line_Reference 28:         const command = (internals.isWin ? 'tracert -d ' : 'traceroute -q 1 -n ') + host;",
        "// Line_Reference 29:         Child.exec(command, (err, stdout, stderr) => {",
        "// Line_Reference 31:             if (err) {",
        "// Line_Reference 32:                 return callback(err);",
        "// Line_Reference 35:             const results = internals.parseOutput(stdout);",
        "// Line_Reference 36:             return callback(null, results);",
        "// Line_Reference 99: ",
        "// Line_Reference 100: internals.parseOutput = function (output) {",
        "// Line_Reference 101: ",
        "// Line_Reference 102:     const lines = output.split('\\n');",
        "// Line_Reference 103:     const hops = [];",
        "// Line_Reference 104: ",
        "// Line_Reference 105:     lines.shift();",
        "// Line_Reference 106:     lines.pop();",
        "// Line_Reference 107: ",
        "// Line_Reference 108:     if (internals.isWin) {",
        "// Line_Reference 109:         for (let i = 0; i < lines.length; ++i) {",
        "// Line_Reference 110:             if (/^\\s+1/.test(lines[i])) {",
        "// Line_Reference 111:                 break;",
        "// Line_Reference 112:             }",
        "// Line_Reference 113:         }",
        "// Line_Reference 114:         lines.splice(0,i);",
        "// Line_Reference 115:         lines.pop();",
        "// Line_Reference 116:         lines.pop();",
        "// Line_Reference 117:     }",
        "// Line_Reference 118: ",
        "// Line_Reference 119:     for (let i = 0; i < lines.length; ++i) {",
        "// Line_Reference 120:         hops.push(internals.parseHop(lines[i]));",
        "// Line_Reference 121:     }",
        "// Line_Reference 122: ",
        "// Line_Reference 123:     return hops;",
        "// Line_Reference 124: };"
    ]
}
