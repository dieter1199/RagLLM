{
    "cve_id": "CVE-2021-29590",
    "cve_description": "TensorFlow is an end-to-end open source platform for machine learning. The implementations of the `Minimum` and `Maximum` TFLite operators can be used to read data outside of bounds of heap allocated objects, if any of the two input tensor arguments are empty. This is because the broadcasting implementation(https://github.com/tensorflow/tensorflow/blob/0d45ea1ca641b21b73bcf9c00e0179cda284e7e7/tensorflow/lite/kernels/internal/reference/maximum_minimum.h#L52-L56) indexes in both tensors with the same index but does not validate that the index is within bounds. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.",
    "cve_publish_date": "2021-05-14",
    "cwe_id": "CWE-125",
    "cwe_name": "Out-of-bounds Read",
    "cwe_description": "The product reads data past the end, or before the beginning, of the intended buffer.",
    "commit_message": "Prevent a null pointer exception in TFLite\n\nPiperOrigin-RevId: 370800206\nChange-Id: Idd437ebce4ff224120d8eefc1c14c062173b71d6",
    "type_of_change": "Modification",
    "filename_of_changes": "maximum_minimum.cc",
    "code_language": "C++",
    "number_of_lines_added_for_mitigation": "31",
    "number_of_lines_deleted_vulnerable_to_cve": "29",
    "vulnerable_lines": [
        "// Line_Reference 160:     switch (op_context.output->type) {",
        "// Line_Reference 161:       case kTfLiteFloat32:",
        "// Line_Reference 162:         TFLiteOperation<kernel_type, float, OpType>(context, node, op_context);",
        "// Line_Reference 163:         break;",
        "// Line_Reference 164:       case kTfLiteUInt8:",
        "// Line_Reference 165:         TFLiteOperation<kernel_type, uint8_t, OpType>(context, node,",
        "// Line_Reference 166:                                                       op_context);",
        "// Line_Reference 167:         break;",
        "// Line_Reference 168:       case kTfLiteInt8:",
        "// Line_Reference 169:         TFLiteOperation<kernel_type, int8_t, OpType>(context, node, op_context);",
        "// Line_Reference 170:         break;",
        "// Line_Reference 171:       case kTfLiteInt32:",
        "// Line_Reference 172:         TFLiteOperation<kernel_type, int32_t, OpType>(context, node,",
        "// Line_Reference 173:                                                       op_context);",
        "// Line_Reference 174:         break;",
        "// Line_Reference 175:       case kTfLiteInt64:",
        "// Line_Reference 176:         TFLiteOperation<kernel_type, int64_t, OpType>(context, node,",
        "// Line_Reference 177:                                                       op_context);",
        "// Line_Reference 178:         break;",
        "// Line_Reference 179:       case kTfLiteInt16:",
        "// Line_Reference 180:         TFLiteOperation<kernel_type, int16_t, OpType>(context, node,",
        "// Line_Reference 181:                                                       op_context);",
        "// Line_Reference 182:         break;",
        "// Line_Reference 183:       default:",
        "// Line_Reference 184:         context->ReportError(context,",
        "// Line_Reference 185:                              \"Type %d is currently not supported by Maximum.\",",
        "// Line_Reference 186:                              op_context.output->type);",
        "// Line_Reference 187:         return kTfLiteError;",
        "// Line_Reference 188:     }"
    ]
}
