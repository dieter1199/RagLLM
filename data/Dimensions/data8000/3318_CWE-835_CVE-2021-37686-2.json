{
    "cve_id": "CVE-2021-37686",
    "cve_description": "TensorFlow is an end-to-end open source platform for machine learning. In affected versions the strided slice implementation in TFLite has a logic bug which can allow an attacker to trigger an infinite loop. This arises from newly introduced support for [ellipsis in axis definition](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/strided_slice.cc#L103-L122). An attacker can craft a model such that `ellipsis_end_idx` is smaller than `i` (e.g., always negative). In this case, the inner loop does not increase `i` and the `continue` statement causes execution to skip over the preincrement at the end of the outer loop. We have patched the issue in GitHub commit dfa22b348b70bb89d6d6ec0ff53973bacb4f4695. TensorFlow 2.6.0 is the only affected version.",
    "cve_publish_date": "2021-08-12",
    "cwe_id": "CWE-835",
    "cwe_name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
    "cwe_description": "The product contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop.",
    "commit_message": "Prevent a division by 0 in average ops.\n\nPiperOrigin-RevId: 385184660\nChange-Id: I7affd4554f9b336fca29ac68f633232c094d0bd3",
    "type_of_change": "Modification",
    "filename_of_changes": "legacy_optimized_ops.h",
    "code_language": "C++",
    "number_of_lines_added_for_mitigation": "25",
    "number_of_lines_deleted_vulnerable_to_cve": "21",
    "vulnerable_lines": [
        "// Line_Reference 3764: inline void AveragePool(const float* input_data, const Dims<4>& input_dims,",
        "// Line_Reference 3779:   AveragePool(params, DimsToShape(input_dims), input_data,",
        "// Line_Reference 3780:               DimsToShape(output_dims), output_data);",
        "// Line_Reference 3785: void AveragePool(const float* input_data, const Dims<4>& input_dims,",
        "// Line_Reference 3792:   AveragePool(input_data, input_dims, stride_width, stride_height, pad_width,",
        "// Line_Reference 3793:               pad_height, kwidth, kheight, output_activation_min,",
        "// Line_Reference 3794:               output_activation_max, output_data, output_dims);",
        "// Line_Reference 3799: void AveragePool(const float* input_data, const Dims<4>& input_dims, int stride,",
        "// Line_Reference 3803:   AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width, pad_height,",
        "// Line_Reference 3804:                   filter_width, filter_height, output_data, output_dims);",
        "// Line_Reference 3807: inline void AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
        "// Line_Reference 3822:   AveragePool(params, DimsToShape(input_dims), input_data,",
        "// Line_Reference 3823:               DimsToShape(output_dims), output_data);",
        "// Line_Reference 3828: void AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
        "// Line_Reference 3842:   AveragePool(input_data, input_dims, stride_width, stride_height, pad_width,",
        "// Line_Reference 3843:               pad_height, filter_width, filter_height, output_activation_min,",
        "// Line_Reference 3844:               output_activation_max, output_data, output_dims);",
        "// Line_Reference 3849: void AveragePool(const uint8* input_data, const Dims<4>& input_dims, int stride,",
        "// Line_Reference 3854:   AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width, pad_height,",
        "// Line_Reference 3855:                   filter_width, filter_height, output_activation_min,",
        "// Line_Reference 3856:                   output_activation_max, output_data, output_dims);"
    ]
}
