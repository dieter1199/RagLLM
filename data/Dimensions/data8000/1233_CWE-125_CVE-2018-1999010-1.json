{
    "cve_id": "CVE-2018-1999010",
    "cve_description": "FFmpeg before commit cced03dd667a5df6df8fd40d8de0bff477ee02e8 contains multiple out of array access vulnerabilities in the mms protocol that can result in attackers accessing out of bound data. This attack appear to be exploitable via network connectivity. This vulnerability appears to have been fixed in cced03dd667a5df6df8fd40d8de0bff477ee02e8 and later.",
    "cve_publish_date": "2018-07-23",
    "cwe_id": "CWE-125",
    "cwe_name": "Out-of-bounds Read",
    "cwe_description": "The product reads data past the end, or before the beginning, of the intended buffer.",
    "commit_message": "avformat/mms: Add missing chunksize check\n\nFixes: out of array read\nFixes: mms-crash-01b6c5d85f9d9f40f4e879896103e9f5b222816a\n\nFound-by: Paul Ch <paulcher@icloud.com>\n1st hunk by Paul Ch <paulcher@icloud.com>\nTested-by: Paul Ch <paulcher@icloud.com>\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
    "type_of_change": "Modification",
    "filename_of_changes": "mms.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "26",
    "number_of_lines_deleted_vulnerable_to_cve": "18",
    "vulnerable_lines": [
        "// Line_Reference 97:             flags     = AV_RL16(p + sizeof(ff_asf_guid)*3 + 24);",
        "// Line_Reference 98:             stream_id = flags & 0x7F;",
        "// Line_Reference 99:             //The second condition is for checking CS_PKT_STREAM_ID_REQUEST packet size,",
        "// Line_Reference 100:             //we can calculate the packet size by stream_num.",
        "// Line_Reference 101:             //Please see function send_stream_selection_request().",
        "// Line_Reference 102:             if (mms->stream_num < MMS_MAX_STREAMS &&",
        "// Line_Reference 103:                     46 + mms->stream_num * 6 < sizeof(mms->out_buffer)) {",
        "// Line_Reference 104:                 mms->streams = av_fast_realloc(mms->streams,",
        "// Line_Reference 105:                                    &mms->nb_streams_allocated,",
        "// Line_Reference 106:                                    (mms->stream_num + 1) * sizeof(MMSStream));",
        "// Line_Reference 107:                 if (!mms->streams)",
        "// Line_Reference 108:                     return AVERROR(ENOMEM);",
        "// Line_Reference 109:                 mms->streams[mms->stream_num].id = stream_id;",
        "// Line_Reference 110:                 mms->stream_num++;",
        "// Line_Reference 111:             } else {",
        "// Line_Reference 112:                 av_log(NULL, AV_LOG_ERROR,",
        "// Line_Reference 113:                        \"Corrupt stream (too many A/V streams)\\n\");",
        "// Line_Reference 114:                 return AVERROR_INVALIDDATA;"
    ]
}
