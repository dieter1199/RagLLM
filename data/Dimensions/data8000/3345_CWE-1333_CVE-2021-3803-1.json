{
    "cve_id": "CVE-2021-3803",
    "cve_description": "nth-check is vulnerable to Inefficient Regular Expression Complexity",
    "cve_publish_date": "2021-09-17",
    "cwe_id": "CWE-1333",
    "cwe_name": "Inefficient Regular Expression Complexity",
    "cwe_description": "The product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles.",
    "commit_message": "fix(parse): Replace regex with hand-rolled parser (#9)",
    "type_of_change": "Modification",
    "filename_of_changes": "parse.ts",
    "code_language": "TypeScript",
    "number_of_lines_added_for_mitigation": "64",
    "number_of_lines_deleted_vulnerable_to_cve": "14",
    "vulnerable_lines": [
        "// Line_Reference 3: // [ ['-'|'+']? INTEGER? {N} [ S* ['-'|'+'] S* INTEGER ]?",
        "// Line_Reference 4: const RE_NTH_ELEMENT = /^([+-]?\\d*n)?\\s*(?:([+-]?)\\s*(\\d+))?$/;",
        "// Line_Reference 22:     const parsed = formula.match(RE_NTH_ELEMENT);",
        "// Line_Reference 24:     if (!parsed) {",
        "// Line_Reference 28:     let a;",
        "// Line_Reference 30:     if (parsed[1]) {",
        "// Line_Reference 31:         a = parseInt(parsed[1], 10);",
        "// Line_Reference 32:         if (isNaN(a)) {",
        "// Line_Reference 33:             a = parsed[1].startsWith(\"-\") ? -1 : 1;",
        "// Line_Reference 35:     } else a = 0;",
        "// Line_Reference 37:     const b =",
        "// Line_Reference 38:         (parsed[2] === \"-\" ? -1 : 1) *",
        "// Line_Reference 39:         (parsed[3] ? parseInt(parsed[3], 10) : 0);",
        "// Line_Reference 41:     return [a, b];"
    ]
}
