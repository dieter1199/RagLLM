{
    "cve_id": "CVE-2021-41206",
    "cve_description": "TensorFlow is an open source platform for machine learning. In affected versions several TensorFlow operations are missing validation for the shapes of the tensor arguments involved in the call. Depending on the API, this can result in undefined behavior and segfault or `CHECK`-fail related crashes but in some scenarios writes and reads from heap populated arrays are also possible. We have discovered these issues internally via tooling while working on improving/testing GPU op determinism. As such, we don't have reproducers and there will be multiple fixes for these issues. These fixes will be included in TensorFlow 2.7.0. We will also cherrypick these commits on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.",
    "cve_publish_date": "2021-11-05",
    "cwe_id": "CWE-354",
    "cwe_name": "Improper Validation of Integrity Check Value",
    "cwe_description": "The product does not validate or incorrectly validates the integrity check values or \"checksums\" of a message. This may prevent it from detecting if the data has been modified or corrupted in transmission.",
    "commit_message": "Fix crash in softmax-xent when some input dimensions are 1.\n\nBefore, tf.nn.softmax_cross_entropy_with_logits would fail a CHECK if one input tensor had shape (1, 1) and the other did not.\n\nIn particular, the call to ToIndexArray<2> here https://github.com/tensorflow/tensorflow/blob/1f3da84a89702d3b4f234ee83762d738caffe098/tensorflow/core/kernels/xent_op.cc#L99 would fail, since the call assumed the array had two dimensions. If both dimensions were 1, BCast would merge the two dimensions into a single dimension. Passing fewer_dims_optimization=false stops this optimization\n\nPiperOrigin-RevId: 384844496\nChange-Id: Ifb02dc74964132c3ed3f3bc98b0858dbe4e258b7",
    "type_of_change": "Modification",
    "filename_of_changes": "xent_op.cc",
    "code_language": "C++",
    "number_of_lines_added_for_mitigation": "8",
    "number_of_lines_deleted_vulnerable_to_cve": "15",
    "vulnerable_lines": [
        "// Line_Reference 49:                 BCast::FromShape(labels_in.shape()));",
        "// Line_Reference 91:       if (logits_in.IsSameSize(labels_in)) {",
        "// Line_Reference 92:         functor(context->eigen_device<Device>(), shape_in.AsEigenDSizes<2>(),",
        "// Line_Reference 93:                 Eigen::array<Eigen::DenseIndex, 2>{1, 1},",
        "// Line_Reference 94:                 Eigen::array<Eigen::DenseIndex, 2>{1, 1}, logits_in.matrix<T>(),",
        "// Line_Reference 95:                 labels_in.matrix<T>(), scratch.matrix<T>(), loss_out->vec<T>(),",
        "// Line_Reference 96:                 back_out->matrix<T>());",
        "// Line_Reference 97:       } else {",
        "// Line_Reference 98:         functor(context->eigen_device<Device>(), shape_in.AsEigenDSizes<2>(),",
        "// Line_Reference 99:                 BCast::ToIndexArray<2>(bcast.x_bcast()),",
        "// Line_Reference 100:                 BCast::ToIndexArray<2>(bcast.y_bcast()),",
        "// Line_Reference 101:                 logits_in.template shaped<T, 2>(bcast.x_reshape()),",
        "// Line_Reference 102:                 labels_in.template shaped<T, 2>(bcast.y_reshape()),",
        "// Line_Reference 103:                 scratch.matrix<T>(), loss_out->vec<T>(), back_out->matrix<T>());",
        "// Line_Reference 104:       }"
    ]
}
