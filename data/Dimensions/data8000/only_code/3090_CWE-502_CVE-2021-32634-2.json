import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
public static ByteBuffer serializeToByteBuffer(final Object payload) throws IOException {
return ByteBuffer.wrap(serializeToBytes(payload));
}
/**
* Serialize a payload object to bytes
*/
public static byte[] serializeToBytes(final Object payload) throws IOException {
final ByteArrayOutputStream bos = new ByteArrayOutputStream();
serializeToStream(bos, payload);
return bos.toByteArray();
}
/**
* Serialize a payload object to string
*/
public static String serializeToString(final Object payload) throws IOException {
final ByteArrayOutputStream bos = new ByteArrayOutputStream();
serializeToStream(bos, payload);
String agentData = null;
try {
agentData = bos.toString("8859_1");
} catch (UnsupportedEncodingException e) {
logger.warn("Should always support 8859_1", e);
agentData = bos.toString();
}
return agentData;
}
/**
* Serialize a payload object onto the specified stream
*/
public static void serializeToStream(final OutputStream os, final Object payload) throws IOException {
ObjectOutputStream oos = null;
try {
oos = new ObjectOutputStream(os);
oos.writeObject(payload);
} finally {
if (oos != null) {
try {
oos.close();
} catch (IOException ignore) {
// empty catch block
}
}
}
}
public static Object deserialize(final String s) {
ObjectInputStream ois = null;
try {
ois = new ObjectInputStream(new ByteArrayInputStream(s.getBytes("8859_1")));
return ois.readObject();
} catch (Exception e) {
logger.error("Cannot deserialize payload using " + (s == null ? -1 : s.length()) + " bytes", e);
throw new IllegalArgumentException("Cannot deserialize payload");
} finally {
if (ois != null) {
try {
ois.close();
} catch (IOException ignore) {
// empty catch block
}
}
}
}
m.setAttribute("name", key.toString());
final Document doc = new Document(root);
return doc;
final Document doc = new Document(root);
return doc;
out.append(entry.getKey() + SEP + entry.getValue() + LS);
