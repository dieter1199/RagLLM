import { ExtensionContentSecurityPolicyArbiter, PreviewSecuritySelector } from './security';
import { rstDocumentSymbolProvider } from './features/rstDocumentSymbolProvider';
let extensionPath = "";
return extensionPath;
extensionPath = context.extensionPath;
const logger = new Logger();
logger.log('Please visit https://docs.restructuredtext.net to learn how to configure the extension.');
const conflicting = Configuration.getConflictingExtensions();
for (const element of conflicting) {
const found = vscode.extensions.getExtension(element);
if (found) {
const message = `Found conflicting extension ${element}. Please uninstall it.`;
vscode.window.showErrorMessage(message);
}
}
const disableLsp = Configuration.getLanguageServerDisabled();
// activate language services
const rstLspPromise = RstLanguageServer.activate(context, logger, disableLsp, python);
context.subscriptions.push(
vscode.commands.registerTextEditorCommand('restructuredtext.features.underline.underline', underline),
vscode.commands.registerTextEditorCommand('restructuredtext.features.underline.underlineReverse',
(textEditor, edit) => underline(textEditor, edit, true)),
);
// Linter support
return {
initializationFinished: Promise.all([rstLspPromise])
.then((promiseResult) => {
// This promise resolver simply swallows the result of Promise.all.
// When we decide we want to expose this level of detail
// to other extensions then we will design that return type and implement it here.
}),
};
const os = require('os');
if (platform === 'darwin' || platform === 'win32') {
return;
}
