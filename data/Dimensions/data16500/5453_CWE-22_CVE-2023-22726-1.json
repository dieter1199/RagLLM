{
    "cve_id": "CVE-2023-22726",
    "cve_description": "act is a project which allows for local running of github actions. The artifact server that stores artifacts from Github Action runs does not sanitize path inputs. This allows an attacker to download and overwrite arbitrary files on the host from a Github Action. This issue may lead to privilege escalation. The /upload endpoint is vulnerable to path traversal as filepath is user controlled, and ultimately flows into os.Mkdir and os.Open. The /artifact endpoint is vulnerable to path traversal as the path is variable is user controlled, and the specified file is ultimately returned by the server. This has been addressed in version 0.2.40. Users are advised to upgrade. Users unable to upgrade may, during implementation of Open and OpenAtEnd for FS, ensure to use ValidPath() to check against path traversal or clean the user-provided paths manually.",
    "cve_publish_date": "2023-01-20",
    "cwe_id": "CWE-22",
    "cwe_name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
    "cwe_description": "The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
    "commit_message": "fix: update artifact server to address GHSL-2023-004 (#1565)",
    "type_of_change": "Modification",
    "filename_of_changes": "server.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "45",
    "number_of_lines_deleted_vulnerable_to_cve": "37",
    "vulnerable_lines": [
        "// Line_Reference 12: \t\"path\"",
        "// Line_Reference 49: type MkdirFS interface {",
        "// Line_Reference 50: \tfs.FS",
        "// Line_Reference 51: \tMkdirAll(path string, perm fs.FileMode) error",
        "// Line_Reference 52: \tOpen(name string) (fs.File, error)",
        "// Line_Reference 53: \tOpenAtEnd(name string) (fs.File, error)",
        "// Line_Reference 56: type MkdirFsImpl struct {",
        "// Line_Reference 57: \tdir string",
        "// Line_Reference 58: \tfs.FS",
        "// Line_Reference 61: func (fsys MkdirFsImpl) MkdirAll(path string, perm fs.FileMode) error {",
        "// Line_Reference 62: \treturn os.MkdirAll(fsys.dir+\"/\"+path, perm)",
        "// Line_Reference 65: func (fsys MkdirFsImpl) Open(name string) (fs.File, error) {",
        "// Line_Reference 66: \treturn os.OpenFile(fsys.dir+\"/\"+name, os.O_CREATE|os.O_RDWR|os.O_TRUNC, 0644)",
        "// Line_Reference 69: func (fsys MkdirFsImpl) OpenAtEnd(name string) (fs.File, error) {",
        "// Line_Reference 70: \tfile, err := os.OpenFile(fsys.dir+\"/\"+name, os.O_CREATE|os.O_RDWR, 0644)",
        "// Line_Reference 80: ",
        "// Line_Reference 86: func uploads(router *httprouter.Router, fsys MkdirFS) {",
        "// Line_Reference 111: \t\tfilePath := fmt.Sprintf(\"%s/%s\", runID, itemPath)",
        "// Line_Reference 113: \t\terr := fsys.MkdirAll(path.Dir(filePath), os.ModePerm)",
        "// Line_Reference 114: \t\tif err != nil {",
        "// Line_Reference 115: \t\t\tpanic(err)",
        "// Line_Reference 116: \t\t}",
        "// Line_Reference 117: ",
        "// Line_Reference 118: \t\tfile, err := func() (fs.File, error) {",
        "// Line_Reference 121: \t\t\t\treturn fsys.OpenAtEnd(filePath)",
        "// Line_Reference 123: \t\t\treturn fsys.Open(filePath)",
        "// Line_Reference 173: func downloads(router *httprouter.Router, fsys fs.FS) {",
        "// Line_Reference 177: \t\tentries, err := fs.ReadDir(fsys, runID)",
        "// Line_Reference 207: \t\tdirPath := fmt.Sprintf(\"%s/%s\", container, itemPath)",
        "// Line_Reference 210: \t\terr := fs.WalkDir(fsys, dirPath, func(path string, entry fs.DirEntry, err error) error {",
        "// Line_Reference 212: \t\t\t\trel, err := filepath.Rel(dirPath, path)",
        "// Line_Reference 221: \t\t\t\t\tPath:            fmt.Sprintf(\"%s/%s\", itemPath, rel),",
        "// Line_Reference 248: \t\tfile, err := fsys.Open(path)",
        "// Line_Reference 251: \t\t\tfile, err = fsys.Open(path + gzipExtension)",
        "// Line_Reference 276: \tfs := os.DirFS(artifactPath)",
        "// Line_Reference 277: \tuploads(router, MkdirFsImpl{artifactPath, fs})",
        "// Line_Reference 278: \tdownloads(router, fs)"
    ]
}
