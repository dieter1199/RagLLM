{
    "cve_id": "CVE-2021-43797",
    "cve_description": "Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients. Netty prior to version 4.1.71.Final skips control chars when they are present at the beginning / end of the header name. It should instead fail fast as these are not allowed by the spec and could lead to HTTP request smuggling. Failing to do the validation might cause netty to \"sanitize\" header names before it forward these to another remote system when used as proxy. This remote system can't see the invalid usage anymore, and therefore does not do the validation itself. Users should upgrade to version 4.1.71.Final.",
    "cve_publish_date": "2021-12-09",
    "cwe_id": "CWE-444",
    "cwe_name": "Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')",
    "cwe_description": "The product acts as an intermediary HTTP agent\n         (such as a proxy or firewall) in the data flow between two\n         entities such as a client and server, but it does not\n         interpret malformed HTTP requests or responses in ways that\n         are consistent with how the messages will be processed by\n         those entities that are at the ultimate destination.",
    "commit_message": "Merge pull request from GHSA-wx5j-54mm-rqqq\n\nMotivation:\n\nWe should validate that only OWS is allowed before / after a header name and otherwise throw. At the moment we just \"strip\" everything except OWS.\n\nModifications:\n\n- Adjust code to correctly validate\n- Add unit tests\n\nResult:\n\nMore strict and correct behaviour",
    "type_of_change": "Modification",
    "filename_of_changes": "HttpObjectDecoder.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "4",
    "number_of_lines_deleted_vulnerable_to_cve": "4",
    "vulnerable_lines": [
        "// Line_Reference 827:         nameStart = findNonWhitespace(sb, 0, false);",
        "// Line_Reference 862:         valueStart = findNonWhitespace(sb, colonEnd, true);",
        "// Line_Reference 901:     private static int findNonWhitespace(AppendableCharSequence sb, int offset, boolean validateOWS) {",
        "// Line_Reference 906:             } else if (validateOWS && !isOWS(c)) {"
    ]
}
