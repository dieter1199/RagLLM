{
    "cve_id": "CVE-2022-39249",
    "cve_description": "Matrix Javascript SDK is the Matrix Client-Server SDK for JavaScript. Prior to version 19.7.0, an attacker cooperating with a malicious homeserver can construct messages appearing to have come from another person. Such messages will be marked with a grey shield on some platforms, but this may be missing in others. This attack is possible due to the matrix-js-sdk implementing a too permissive key forwarding strategy on the receiving end. Starting with version 19.7.0, the default policy for accepting key forwards has been made more strict in the matrix-js-sdk. matrix-js-sdk will now only accept forwarded keys in response to previously issued requests and only from own, verified devices. The SDK now sets a `trusted` flag on the decrypted message upon decryption, based on whether the key used to decrypt the message was received from a trusted source. Clients need to ensure that messages decrypted with a key with `trusted = false` are decorated appropriately, for example, by showing a warning for such messages. This attack requires coordination between a malicious homeserver and an attacker, and those who trust your homeservers do not need a workaround.",
    "cve_publish_date": "2022-09-28",
    "cwe_id": "CWE-287",
    "cwe_name": "Improper Authentication",
    "cwe_description": "When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.",
    "commit_message": "Resolve multiple CVEs\n\nCVE-2022-39249\nCVE-2022-39250\nCVE-2022-39251\nCVE-2022-39236",
    "type_of_change": "Modification",
    "filename_of_changes": "megolm.ts",
    "code_language": "TypeScript",
    "number_of_lines_added_for_mitigation": "108",
    "number_of_lines_deleted_vulnerable_to_cve": "17",
    "vulnerable_lines": [
        "// Line_Reference 38: import { MatrixEvent } from \"../..\";",
        "// Line_Reference 1192:     // events which we couldn't decrypt due to unknown sessions / indexes: map from",
        "// Line_Reference 1193:     // senderKey|sessionId to Set of MatrixEvents",
        "// Line_Reference 1297:         // success. We can remove the event from the pending list, if that hasn't",
        "// Line_Reference 1298:         // already happened.",
        "// Line_Reference 1299:         this.removeEventFromPendingList(event);",
        "// Line_Reference 1403:         if (!senderKey) {",
        "// Line_Reference 1404:             logger.error(\"key event has no sender key (not encrypted?)\");",
        "// Line_Reference 1421:             senderKey = content.sender_key;",
        "// Line_Reference 1438:         const extraSessionData: any = {};",
        "// Line_Reference 1456:             if (await this.retryDecryption(senderKey, content.session_id)) {",
        "// Line_Reference 1671:         const extraSessionData: any = {};",
        "// Line_Reference 1699:             this.retryDecryption(session.sender_key, session.session_id);",
        "// Line_Reference 1711:      * @return {Boolean} whether all messages were successfully decrypted",
        "// Line_Reference 1713:     private async retryDecryption(senderKey: string, sessionId: string): Promise<boolean> {",
        "// Line_Reference 1728:                 await ev.attemptDecryption(this.crypto, { isRetry: true });",
        "// Line_Reference 1734:         // If decrypted successfully, they'll have been removed from pendingEvents"
    ]
}
