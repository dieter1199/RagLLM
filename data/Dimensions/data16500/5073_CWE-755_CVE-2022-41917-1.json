{
    "cve_id": "CVE-2022-41917",
    "cve_description": "OpenSearch is a community-driven, open source fork of Elasticsearch and Kibana. OpenSearch allows users to specify a local file when defining text analyzers to process data for text analysis. An issue in the implementation of this feature allows certain specially crafted queries to return a response containing the first line of text from arbitrary files. The list of potentially impacted files is limited to text files with read permissions allowed in the Java Security Manager policy configuration. OpenSearch version 1.3.7 and 2.4.0 contain a fix for this issue. Users are advised to upgrade. There are no known workarounds for this issue.",
    "cve_publish_date": "2022-11-16",
    "cwe_id": "CWE-755",
    "cwe_name": "Improper Handling of Exceptional Conditions",
    "cwe_description": "The product does not handle or incorrectly handles an exceptional condition.",
    "commit_message": "Merge pull request from GHSA-w3rx-m34v-wrqx\n\n* Fix error handling while reading analyzer mapping rules\n\nAdd new parseWordList method that takes a parser as a parameter. It reads custom rules from settings or a file, parses and handles errors. Make error messages less verbose for rules files outside config directory.\n\nSigned-off-by: Rabi Panda <adnapibar@gmail.com>\n\n* Add CHANGELOG.md\n\nSigned-off-by: Rabi Panda <adnapibar@gmail.com>\n\nSigned-off-by: Rabi Panda <adnapibar@gmail.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "Analysis.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "75",
    "number_of_lines_deleted_vulnerable_to_cve": "38",
    "vulnerable_lines": [
        "// Line_Reference 169:         List<String> pathLoadedWords = getWordList(env, settings, name);",
        "// Line_Reference 210:         List<String> wordList = getWordList(env, settings, settingsPrefix);",
        "// Line_Reference 219:      * Fetches a list of words from the specified settings file. The list should either be available at the key",
        "// Line_Reference 220:      * specified by settingsPrefix or in a file specified by settingsPrefix + _path.",
        "// Line_Reference 225:     public static List<String> getWordList(Environment env, Settings settings, String settingPrefix) {",
        "// Line_Reference 226:         return getWordList(env, settings, settingPrefix + \"_path\", settingPrefix, true);",
        "// Line_Reference 236:     public static List<String> getWordList(",
        "// Line_Reference 237:         Environment env,",
        "// Line_Reference 238:         Settings settings,",
        "// Line_Reference 239:         String settingPath,",
        "// Line_Reference 240:         String settingList,",
        "// Line_Reference 241:         boolean removeComments",
        "// Line_Reference 242:     ) {",
        "// Line_Reference 246:             List<String> explicitWordList = settings.getAsList(settingList, null);",
        "// Line_Reference 247:             if (explicitWordList == null) {",
        "// Line_Reference 248:                 return null;",
        "// Line_Reference 249:             } else {",
        "// Line_Reference 250:                 return explicitWordList;",
        "// Line_Reference 251:             }",
        "// Line_Reference 254:         final Path path = env.configDir().resolve(wordListPath);",
        "// Line_Reference 257:             return loadWordList(path, removeComments);",
        "// Line_Reference 261:                 \"Unsupported character encoding detected while reading %s: %s - files must be UTF-8 encoded\",",
        "// Line_Reference 262:                 settingPath,",
        "// Line_Reference 263:                 path.toString()",
        "// Line_Reference 265:             throw new IllegalArgumentException(message, ex);",
        "// Line_Reference 267:             String message = String.format(Locale.ROOT, \"IOException while reading %s: %s\", settingPath, path.toString());",
        "// Line_Reference 268:             throw new IllegalArgumentException(message, ioe);",
        "// Line_Reference 272:     private static List<String> loadWordList(Path path, boolean removeComments) throws IOException {",
        "// Line_Reference 280:                 if (removeComments == false || word.startsWith(\"#\") == false) {",
        "// Line_Reference 281:                     result.add(word.trim());",
        "// Line_Reference 282:                 }",
        "// Line_Reference 299:         final Path path = env.configDir().resolve(filePath);",
        "// Line_Reference 305:                 \"Unsupported character encoding detected while reading %s_path: %s files must be UTF-8 encoded\",",
        "// Line_Reference 306:                 settingPrefix,",
        "// Line_Reference 307:                 path.toString()",
        "// Line_Reference 309:             throw new IllegalArgumentException(message, ex);",
        "// Line_Reference 311:             String message = String.format(Locale.ROOT, \"IOException while reading %s_path: %s\", settingPrefix, path.toString());",
        "// Line_Reference 312:             throw new IllegalArgumentException(message, ioe);"
    ]
}
