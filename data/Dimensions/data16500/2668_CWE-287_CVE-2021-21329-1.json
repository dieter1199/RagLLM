{
    "cve_id": "CVE-2021-21329",
    "cve_description": "RATCF is an open-source framework for hosting Cyber-Security Capture the Flag events. In affected versions of RATCF users with multi factor authentication enabled are able to log in without a valid token. This is fixed in commit cebb67b.",
    "cve_publish_date": "2021-03-08",
    "cwe_id": "CWE-287",
    "cwe_name": "Improper Authentication",
    "cwe_description": "When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.",
    "commit_message": "Refactor 2FA and prepare for fido support",
    "type_of_change": "ModificationType.ADD",
    "filename_of_changes": "basic_auth.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "1",
    "number_of_lines_deleted_vulnerable_to_cve": "16",
    "vulnerable_lines": [
        "// Line_Reference 67:     #TODO: These fields don't do anything yet, but they will eventually correlate to the kwargs in login_user",
        "// Line_Reference 68:     username = serializers.CharField(max_length=50)",
        "// Line_Reference 69:     password = serializers.CharField(max_length=50)",
        "// Line_Reference 70:     otp = serializers.CharField(max_length=6)",
        "// Line_Reference 71: ",
        "// Line_Reference 72:     def login_user(self, username, password, otp, context, **kwargs):",
        "// Line_Reference 90:         if user.totp_status == TOTPStatus.ENABLED:",
        "// Line_Reference 91:             if not otp or otp == '':",
        "// Line_Reference 92:                 login_reject.send(sender=self.__class__, username=username, reason='no_2fa')",
        "// Line_Reference 93:                 raise FormattedException(m='2fa_required', d={'reason': '2fa_required'},",
        "// Line_Reference 94:                                          status_code=HTTP_401_UNAUTHORIZED)",
        "// Line_Reference 95:             totp = pyotp.TOTP(user.totp_secret)",
        "// Line_Reference 96:             if not totp.verify(otp, valid_window=1):",
        "// Line_Reference 97:                 login_reject.send(sender=self.__class__, username=username, reason='incorrect_2fa')",
        "// Line_Reference 98:                 raise FormattedException(m='incorrect_2fa', d={'reason': 'incorrect_2fa'},",
        "// Line_Reference 99:                                          status_code=HTTP_401_UNAUTHORIZED)"
    ]
}
