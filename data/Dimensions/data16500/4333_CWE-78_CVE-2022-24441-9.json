{
    "cve_id": "CVE-2022-24441",
    "cve_description": "The package snyk before 1.1064.0 are vulnerable to Code Injection when analyzing a project. An attacker who can convince a user to scan a malicious project can include commands in a build file such as build.gradle or gradle-wrapper.jar, which will be executed with the privileges of the application. This vulnerability may be triggered when running the the CLI tool directly, or when running a scan with one of the IDE plugins that invoke the Snyk CLI. Successful exploitation of this issue would likely require some level of social engineering - to coerce an untrusted project to be downloaded and analyzed via the Snyk CLI or opened in an IDE where a Snyk IDE plugin is installed and enabled. Additionally, if the IDE has a Trust feature then the target folder must be marked as ‘trusted’ in order to be vulnerable. **NOTE:** This issue is independent of the one reported in [CVE-2022-40764](https://security.snyk.io/vuln/SNYK-JS-SNYK-3037342), and upgrading to a fixed version for this addresses that issue as well. The affected IDE plugins and versions are: - VS Code - Affected: <=1.8.0, Fixed: 1.9.0 - IntelliJ - Affected: <=2.4.47, Fixed: 2.4.48 - Visual Studio - Affected: <=1.1.30, Fixed: 1.1.31 - Eclipse - Affected: <=v20221115.132308, Fixed: All subsequent versions - Language Server - Affected: <=v20221109.114426, Fixed: All subsequent versions",
    "cve_publish_date": "2022-11-30",
    "cwe_id": "CWE-78",
    "cwe_name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
    "cwe_description": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
    "commit_message": "feat: add trust management mechanism (#187)",
    "type_of_change": "Modification",
    "filename_of_changes": "server.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "39",
    "number_of_lines_deleted_vulnerable_to_cve": "21",
    "vulnerable_lines": [
        "// Line_Reference 93: \t(*handlers)[\"workspace/didChangeWorkspaceFolders\"] = WorkspaceDidChangeWorkspaceFoldersHandler()",
        "// Line_Reference 148: func WorkspaceDidChangeWorkspaceFoldersHandler() jrpc2.Handler {",
        "// Line_Reference 156: \t\tworkspace.Get().ProcessFolderChange(bgCtx, params)",
        "// Line_Reference 186: \t\tif len(params.WorkspaceFolders) > 0 {",
        "// Line_Reference 187: \t\t\tfor _, workspaceFolder := range params.WorkspaceFolders {",
        "// Line_Reference 188: \t\t\t\tlog.Info().Str(\"method\", method).Msgf(\"Adding workspaceFolder %v\", workspaceFolder)",
        "// Line_Reference 189: \t\t\t\tf := workspace.NewFolder(",
        "// Line_Reference 190: \t\t\t\t\turi.PathFromUri(workspaceFolder.Uri),",
        "// Line_Reference 191: \t\t\t\t\tworkspaceFolder.Name,",
        "// Line_Reference 192: \t\t\t\t\tdi.Scanner(),",
        "// Line_Reference 193: \t\t\t\t\tdi.HoverService(),",
        "// Line_Reference 194: \t\t\t\t)",
        "// Line_Reference 195: \t\t\t\tw.AddFolder(f)",
        "// Line_Reference 196: \t\t\t}",
        "// Line_Reference 197: \t\t} else {",
        "// Line_Reference 198: \t\t\tif params.RootURI != \"\" {",
        "// Line_Reference 199: \t\t\t\tw.AddFolder(workspace.NewFolder(uri.PathFromUri(params.RootURI), params.ClientInfo.Name, di.Scanner(), di.HoverService()))",
        "// Line_Reference 200: \t\t\t} else if params.RootPath != \"\" {",
        "// Line_Reference 201: \t\t\t\tw.AddFolder(workspace.NewFolder(params.RootPath, params.ClientInfo.Name, di.Scanner(), di.HoverService()))",
        "// Line_Reference 202: \t\t\t}",
        "// Line_Reference 203: \t\t}"
    ]
}
