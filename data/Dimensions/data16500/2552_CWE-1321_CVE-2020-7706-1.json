{
    "cve_id": "CVE-2020-7706",
    "cve_description": "The package connie-lang before 0.1.1 are vulnerable to Prototype Pollution in the configuration language library used by connie.",
    "cve_publish_date": "2020-08-18",
    "cwe_id": "CWE-1321",
    "cwe_name": "Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')",
    "cwe_description": "The product receives input from an upstream component that specifies attributes that are to be initialized or updated in an object, but it does not properly control modifications of attributes of the object prototype.",
    "commit_message": "added security tests, changed to yarn, bump version",
    "type_of_change": "Modification",
    "filename_of_changes": "connie-lang.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "51",
    "number_of_lines_deleted_vulnerable_to_cve": "33",
    "vulnerable_lines": [
        "// Line_Reference 4: var getValue = function(obj, key) {",
        "// Line_Reference 8:   for (var x = 0; x < keys.length -1; ++x) {",
        "// Line_Reference 17: var setValue = function(obj, key, value) {",
        "// Line_Reference 24:     if (typeof(currentKey) === 'number') {",
        "// Line_Reference 25:       if (!o[lastKey]) { o[lastKey] = []; }",
        "// Line_Reference 27:     } else if (typeof(currentKey) === 'string') {",
        "// Line_Reference 28:       if (!o[lastKey]) { o[lastKey] = {}; }",
        "// Line_Reference 39: ",
        "// Line_Reference 44:   replace: function(value, context, parseContext) {",
        "// Line_Reference 46:     if (!m) { return value; }",
        "// Line_Reference 50:   }",
        "// Line_Reference 55:   replace: function(value, context, parseContext) {",
        "// Line_Reference 57:     if (!m) { return value; }",
        "// Line_Reference 60:     if (value === parseContext.match) { return newValue; }",
        "// Line_Reference 62:   }",
        "// Line_Reference 69:   InterpretersByType: Interpreters.reduce(function(o, i) {o[i.type] = i; return o;}, {}),",
        "// Line_Reference 71:   getEntries: function(config) {",
        "// Line_Reference 74:     var iter = function(value, prefix) {",
        "// Line_Reference 78:         value.forEach(function(arrValue, idx) {",
        "// Line_Reference 82:         Object.keys(value).forEach(function(key) {",
        "// Line_Reference 86:         entries.push({key: prefix, value: value});",
        "// Line_Reference 94:   firstInnermostInterpreterFromValue: function(value) {",
        "// Line_Reference 95:     if (value === null || value === undefined) { return null; }",
        "// Line_Reference 112:           replaceInValue: function(value, context) {",
        "// Line_Reference 114:           }",
        "// Line_Reference 124:   parse: function(configObj, envObj) {",
        "// Line_Reference 126:       config: configObj,",
        "// Line_Reference 127:       env: envObj || process.env",
        "// Line_Reference 133:     var digest = function() {",
        "// Line_Reference 136:       entries.forEach(function(e) {",
        "// Line_Reference 150:     while(digest()) ;",
        "// Line_Reference 153:     entries.forEach(function(e) {",
        "// Line_Reference 158:   }"
    ]
}
