import { Card, Icon, Loader } from "#components/primitives";
const [currentSrc, setCurrentSrc] = createRef("");
if (objectURL()) {
try {
if (!src) {
setError(false);
setLoading(false);
return;
}
if (!validateURL(src)) {
setError(true);
setLoading(false);
return;
}
const response = await fetch(
src.startsWith(window.env.PUBLIC_ASSETS_URL) ? src : `/proxy?url=${encodeURIComponent(src)}`
);
if (!response.ok) {
setError(true);
setLoading(false);
return;
}
const blob = await response.blob();
const objectURL = URL.createObjectURL(blob);
setCurrentSrc(src);
setObjectURL(objectURL);
} catch (error) {
} finally {
<NodeViewWrapper class={clsx(!options().cover && "my-5")}>
options().cover ? "border-b-2" : "border-2 rounded-t-2xl"
<Show
when={objectURL()}
fallback={
<div
class={clsx(
"w-full bg-gradient-to-tr flex justify-center items-center relative",
options().cover ? "min-h-48" : "rounded-t-2xl"
)}
style={{
"padding-top": getPaddingTop()
}}
>
<div class="absolute flex flex-col items-center justify-center font-bold text-white transform -translate-y-1/2 top-1/2">
<Show when={!loading()} fallback={<Loader class="w-8 h-8" />}>
<Show
when={!error()}
fallback={
<>
<Icon path={mdiAlertCircle} class="w-16 h-16" />
<span class="absolute top-full">Error</span>
</>
}
>
<Icon path={mdiImage} class="w-16 h-16" />
</Show>
</Show>
</div>
</div>
}
"w-full border-gray-200 dark:border-gray-700 flex justify-center items-center overflow-hidden bg-gray-100 dark:bg-gray-800 relative",
!options().cover && "rounded-t-2xl"
<div
class={clsx(
"overflow-hidden min-w-40 !h-full",
state().editor.isEditable && "resize"
)}
ref={handleNewImageContainer}
style={{ width: attrs().width }}
>
<img
alt={attrs().alt}
src={objectURL()}
data-src={currentSrc()}
class={clsx("object-contain w-full m-0 transition-opacity duration-300")}
onLoad={(event) => {
const image = event.currentTarget;
const w = image.naturalWidth;
const h = image.naturalHeight;
const aspectRatio = w / h;
updateAspectRatio.clear();
updateAspectRatio(`${aspectRatio}`);
}}
onError={() => {
removeImage();
setError(true);
}}
/>
<Card
"m-0 border-0 border-b-2 rounded-t-none",
options().cover ? "rounded-none" : "border-x-2"
</Card>
