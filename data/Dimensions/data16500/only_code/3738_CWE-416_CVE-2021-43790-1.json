use crate::region::RegionInternal;
// Grab a handle to the region to ensure it outlives `inst`.
// This ensures that the region won't be dropped by `inst` being
// dropped, which could result in `inst` being unmapped by the
// Region *during* drop of the Instance's fields.
let region: Arc<dyn RegionInternal> = inst.alloc().region.clone();
// and now we can drop what may be the last Arc<Region>. If it is
// it can safely do what it needs with memory; we're not running
// destructors on it anymore.
mem::drop(region);
/// The memory allocated for this instance
alloc: Alloc,
alloc,