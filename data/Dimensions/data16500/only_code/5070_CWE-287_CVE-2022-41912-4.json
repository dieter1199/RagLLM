bytes, _ := addSignatureToDocument(test.responseDom()).WriteToBytes()
req := http.Request{PostForm: url.Values{}}
req.PostForm.Set("SAMLResponse", base64.StdEncoding.EncodeToString(test.SamlResponse))
s.IDPMetadata.IDPSSODescriptors[0].KeyDescriptors[0].KeyInfo.X509Data.X509Certificates[0].Data = "invalid"
_, err = s.ParseResponse(&req, []string{"id-9e61753d64e928af5a7a341a97f420c9"})
assertionBuf := []byte(err.(*InvalidResponseError).Response)
// Because this permutation contains an unsigned assertion as child of the response
assert.Check(t, is.Error(err.(*InvalidResponseError).PrivateErr,
"either the Response or Assertion must be signed"))
// Because this permutation contains an unsigned assertion as child of the response
assert.Check(t, is.Error(err.(*InvalidResponseError).PrivateErr,
"either the Response or Assertion must be signed"))
"cannot validate signature on Response: Missing signature referencing the top-level element"))
"cannot validate signature on Response: Missing signature referencing the top-level element"))
"cannot validate signature on Response: Signature could not be verified"))
"cannot validate signature on Response: Signature could not be verified"))
"cannot validate signature on Response: Missing signature referencing the top-level element"))
"cannot validate signature on Response: Cert is not valid at this time"))
"failed to decrypt response: certificate does not match provided key"))