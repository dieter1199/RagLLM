// evidence from consensus if buffered to this slice, awaiting until the next height
consensusBuffer []types.Evidence
consensusBuffer: make([]types.Evidence, 0),
// Update pulls the latest state to be used for expiration and evidence params and then prunes all expired evidence
"Failed EvidencePool.Update new state height is less than or equal to previous state height: %d <= %d",
evpool.logger.Info("Updating evidence pool", "last_block_height", state.LastBlockHeight,
evpool.logger.Info(
"updating evidence pool",
"last_block_height", state.LastBlockHeight,
"last_block_time", state.LastBlockTime,
)
evpool.mtx.Lock()
// flush awaiting evidence from consensus into pool
evpool.flushConsensusBuffer()
evpool.state = state
evpool.mtx.Unlock()
evpool.logger.Info("Evidence already pending, ignoring this one", "ev", ev)
// AddEvidenceFromConsensus should be exposed only to the consensus reactor so it can add evidence
// to the pool directly without the need for verification.
func (evpool *Pool) AddEvidenceFromConsensus(ev types.Evidence) error {
// we already have this evidence, log this but don't return an error.
if evpool.isPending(ev) {
evpool.logger.Info("Evidence already pending, ignoring this one", "ev", ev)
return nil
}
// add evidence to a buffer which will pass the evidence to the pool at the following height.
// This avoids the issue of some nodes verifying and proposing evidence at a height where the
// block hasn't been committed on cause others to potentially fail.
evpool.consensusBuffer = append(evpool.consensusBuffer, ev)
evpool.logger.Info("received new evidence of byzantine behavior from consensus", "evidence", ev)
return nil
return &types.ErrInvalidEvidence{Evidence: ev, Reason: err}
evpool.logger.Info("Deleted pending evidence", "evidence", evidence)
// flushConsensusBuffer moves the evidence produced from consensus into the evidence pool
// and list so that it can be broadcasted and proposed
func (evpool *Pool) flushConsensusBuffer() {
for _, ev := range evpool.consensusBuffer {
if err := evpool.addPendingEvidence(ev); err != nil {
evpool.evidenceList.PushBack(ev)
evpool.consensusBuffer = make([]types.Evidence, 0)
