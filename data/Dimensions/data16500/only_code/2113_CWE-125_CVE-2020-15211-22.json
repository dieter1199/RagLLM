const TfLiteTensor* input = GetInput(context, node, 0);
const TfLiteTensor* filter = GetInput(context, node, 1);
TfLiteTensor* output = GetOutput(context, node, 0);
const TfLiteTensor* input = GetInput(context, node, 0);
const TfLiteTensor* filter = GetInput(context, node, 1);
bias = GetInput(context, node, 2);
TfLiteTensor* input_quantized =
GetTemporary(context, node, data->input_quantized_index);
TfLiteTensor* scaling_factors =
GetTemporary(context, node, data->scaling_factors_index);
TfLiteTensor* accum_scratch =
GetTemporary(context, node, data->accum_scratch_index);
TfLiteTensor* input_offsets =
GetTemporary(context, node, data->input_offset_index);
TfLiteTensor* row_sums =
GetTemporary(context, node, data->row_sums_index);
void EvalHybridPerChannel(TfLiteContext* context, TfLiteNode* node,
TfLiteConvParams* params, OpData* data,
const TfLiteTensor* input, const TfLiteTensor* filter,
const TfLiteTensor* bias, TfLiteTensor* im2col,
TfLiteTensor* output) {
int8_t* quantized_input_ptr_batch = GetTensorData<int8_t>(
GetTemporary(context, node, data->input_quantized_index));
float* scaling_factors_ptr = GetTensorData<float>(
GetTemporary(context, node, data->scaling_factors_index));
int32_t* input_offset_ptr = GetTensorData<int32_t>(
GetTemporary(context, node, data->input_offset_index));
TfLiteTensor* row_sums =
GetTemporary(context, node, data->row_sums_index);
TfLiteTensor* scratch =
GetTemporary(context, node, data->accum_scratch_index);
void EvalHybrid(TfLiteContext* context, TfLiteNode* node,
TfLiteConvParams* params, OpData* data,
const TfLiteTensor* input, const TfLiteTensor* filter,
const TfLiteTensor* bias, TfLiteTensor* im2col,
TfLiteTensor* accum_scratch, TfLiteTensor* output) {
int8_t* quantized_input_ptr_batch = GetTensorData<int8_t>(
GetTemporary(context, node, data->input_quantized_index));
float* scaling_factors_ptr = GetTensorData<float>(
GetTemporary(context, node, data->scaling_factors_index));
TfLiteTensor* output = GetOutput(context, node, 0);
const TfLiteTensor* input = GetInput(context, node, 0);
const TfLiteTensor* filter = GetInput(context, node, 1);
EvalHybridPerChannel<kernel_type>(context, node, params, data, input,
filter, bias, im2col, output);
EvalHybrid<kernel_type>(context, node, params, data, input, filter,
bias, im2col, accum_scratch, output);
const TfLiteTensor* input = GetInput(context, node, 0);