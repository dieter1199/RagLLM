_name         string
authHeader    string
expectedError string
_name:         "Header with incorrect key fails",
authHeader:    "Bearer incorrectkey",
expectedError: "unauthenticated",
_name:         "Missing header fails",
authHeader:    "",
expectedError: "missing bearer token",
_name:         "Correct key one succeeds",
authHeader:    "Bearer KEYONE",
expectedError: "",
_name:         "Correct key two succeeds",
authHeader:    "Bearer KEYTWO",
expectedError: "",
payload := strings.NewReader(`{"name": "some-store-name"}`)
req, err := retryablehttp.NewRequest("POST", fmt.Sprintf("http://localhost:%d/stores", service.GetHTTPAddrPort().Port()), payload)
require.NoError(t, err, "Failed to construct request")
req.Header.Set("content-type", "application/json")
req.Header.Set("authorization", test.authHeader)
res, err := retryClient.Do(req)
require.NoError(t, err, "Failed to execute request")
defer res.Body.Close()
body, err := io.ReadAll(res.Body)
require.NoError(t, err, "Failed to read response")
stringBody := string(body)
if test.expectedError == "" && strings.Contains(stringBody, "code") {
t.Fatalf("Expected no error but got '%v'", stringBody)
}
if !strings.Contains(stringBody, test.expectedError) && test.expectedError != "" {
t.Fatalf("Expected '%v' to contain '%v'", stringBody, test.expectedError)
}
_name:         "Header with invalid token fails",
authHeader:    "Bearer incorrecttoken",
expectedError: "invalid bearer token",
_name:         "Missing header fails",
authHeader:    "",
expectedError: "missing bearer token",
_name:         "Correct token succeeds",
authHeader:    "Bearer " + trustedToken,
expectedError: "",
payload := strings.NewReader(`{"name": "some-store-name"}`)
req, err := retryablehttp.NewRequest("POST", fmt.Sprintf("http://localhost:%d/stores", service.GetHTTPAddrPort().Port()), payload)
require.NoError(t, err, "Failed to construct request")
req.Header.Set("content-type", "application/json")
req.Header.Set("authorization", test.authHeader)
res, err := retryClient.Do(req)
require.NoError(t, err, "Failed to execute request")
defer res.Body.Close()
body, err := io.ReadAll(res.Body)
require.NoError(t, err, "Failed to read response")
stringBody := string(body)
if test.expectedError == "" && strings.Contains(stringBody, "code") {
t.Fatalf("Expected no error but got %v", stringBody)
}
if !strings.Contains(stringBody, test.expectedError) && test.expectedError != "" {
t.Fatalf("Expected %v to contain %v", stringBody, test.expectedError)
}
