{
    "cve_id": "CVE-2022-2959",
    "cve_description": "A race condition was found in the Linux kernel's watch queue due to a missing lock in pipe_resize_ring(). The specific flaw exists within the handling of pipe buffers. The issue results from the lack of proper locking when performing operations on an object. This flaw allows a local user to crash the system or escalate their privileges on the system.",
    "cve_publish_date": "2022-08-25",
    "cwe_id": "CWE-362",
    "cwe_name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
    "cwe_description": "The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.",
    "commit_message": "pipe: Fix missing lock in pipe_resize_ring()\n\npipe_resize_ring() needs to take the pipe->rd_wait.lock spinlock to\nprevent post_one_notification() from trying to insert into the ring\nwhilst the ring is being replaced.\n\nThe occupancy check must be done after the lock is taken, and the lock\nmust be taken after the new ring is allocated.\n\nThe bug can lead to an oops looking something like:\n\n BUG: KASAN: use-after-free in post_one_notification.isra.0+0x62e/0x840\n Read of size 4 at addr ffff88801cc72a70 by task poc/27196\n ...\n Call Trace:\n  post_one_notification.isra.0+0x62e/0x840\n  __post_watch_notification+0x3b7/0x650\n  key_create_or_update+0xb8b/0xd20\n  __do_sys_add_key+0x175/0x340\n  __x64_sys_add_key+0xbe/0x140\n  do_syscall_64+0x5c/0xc0\n  entry_SYSCALL_64_after_hwframe+0x44/0xae\n\nReported by Selim Enes Karaduman @Enesdex working with Trend Micro Zero\nDay Initiative.\n\nFixes: c73be61cede5 (\"pipe: Add general notification queue support\")\nReported-by: zdi-disclosures@trendmicro.com # ZDI-CAN-17291\nSigned-off-by: David Howells <dhowells@redhat.com>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "pipe.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "18",
    "number_of_lines_deleted_vulnerable_to_cve": "13",
    "vulnerable_lines": [
        "// Line_Reference 1254: \t/*",
        "// Line_Reference 1255: \t * We can shrink the pipe, if arg is greater than the ring occupancy.",
        "// Line_Reference 1256: \t * Since we don't expect a lot of shrink+grow operations, just free and",
        "// Line_Reference 1257: \t * allocate again like we would do for growing.  If the pipe currently",
        "// Line_Reference 1258: \t * contains more buffers than arg, then return busy.",
        "// Line_Reference 1259: \t */",
        "// Line_Reference 1260: \tmask = pipe->ring_size - 1;",
        "// Line_Reference 1261: \thead = pipe->head;",
        "// Line_Reference 1262: \ttail = pipe->tail;",
        "// Line_Reference 1263: \tn = pipe_occupancy(pipe->head, pipe->tail);",
        "// Line_Reference 1264: \tif (nr_slots < n)",
        "// Line_Reference 1265: \t\treturn -EBUSY;",
        "// Line_Reference 1266: "
    ]
}
