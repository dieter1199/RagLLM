{
    "cve_id": "CVE-2020-15216",
    "cve_description": "In goxmldsig (XML Digital Signatures implemented in pure Go) before version 1.1.0, with a carefully crafted XML file, an attacker can completely bypass signature validation and pass off an altered file as a signed one. A patch is available, all users of goxmldsig should upgrade to at least revision f6188febf0c29d7ffe26a0436212b19cb9615e64 or version 1.1.0",
    "cve_publish_date": "2020-09-29",
    "cwe_id": "CWE-347",
    "cwe_name": "Improper Verification of Cryptographic Signature",
    "cwe_description": "The product does not verify, or incorrectly verifies, the cryptographic signature for data.",
    "commit_message": "Validate the shape of a signature object prior to unmarshalling the Signature",
    "type_of_change": "Modification",
    "filename_of_changes": "validate.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "31",
    "number_of_lines_deleted_vulnerable_to_cve": "8",
    "vulnerable_lines": [
        "// Line_Reference 300: func (ctx *ValidationContext) findSignature(el *etree.Element) (*types.Signature, error) {",
        "// Line_Reference 301: \tidAttr := el.SelectAttr(ctx.IdAttribute)",
        "// Line_Reference 309: \terr := etreeutils.NSFindIterate(el, Namespace, SignatureTag, func(ctx etreeutils.NSContext, el *etree.Element) error {",
        "// Line_Reference 310: ",
        "// Line_Reference 312: \t\terr := etreeutils.NSFindChildrenIterateCtx(ctx, el, Namespace, SignedInfoTag,",
        "// Line_Reference 358: \t\t\t\tel.RemoveChild(signedInfo)",
        "// Line_Reference 359: \t\t\t\tel.AddChild(canonicalSignedInfo)",
        "// Line_Reference 375: \t\terr = etreeutils.NSUnmarshalElement(ctx, el, _sig)"
    ]
}
