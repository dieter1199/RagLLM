{
    "cve_id": "CVE-2022-41917",
    "cve_description": "OpenSearch is a community-driven, open source fork of Elasticsearch and Kibana. OpenSearch allows users to specify a local file when defining text analyzers to process data for text analysis. An issue in the implementation of this feature allows certain specially crafted queries to return a response containing the first line of text from arbitrary files. The list of potentially impacted files is limited to text files with read permissions allowed in the Java Security Manager policy configuration. OpenSearch version 1.3.7 and 2.4.0 contain a fix for this issue. Users are advised to upgrade. There are no known workarounds for this issue.",
    "cve_publish_date": "2022-11-16",
    "cwe_id": "CWE-755",
    "cwe_name": "Improper Handling of Exceptional Conditions",
    "cwe_description": "The product does not handle or incorrectly handles an exceptional condition.",
    "commit_message": "Merge pull request from GHSA-w3rx-m34v-wrqx\n\n* Fix error handling while reading analyzer mapping rules\n\nAdd new parseWordList method that takes a parser as a parameter. It reads custom rules from settings or a file, parses and handles errors. Make error messages less verbose for rules files outside config directory.\n\nSigned-off-by: Rabi Panda <adnapibar@gmail.com>\n\n* Add CHANGELOG.md\n\nSigned-off-by: Rabi Panda <adnapibar@gmail.com>\n\nSigned-off-by: Rabi Panda <adnapibar@gmail.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "MappingCharFilterFactory.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "10",
    "number_of_lines_deleted_vulnerable_to_cve": "14",
    "vulnerable_lines": [
        "// Line_Reference 56:         List<String> rules = Analysis.getWordList(env, settings, \"mappings\");",
        "// Line_Reference 62:         parseRules(rules, normMapBuilder);",
        "// Line_Reference 74:     /**",
        "// Line_Reference 75:      * parses a list of MappingCharFilter style rules into a normalize char map",
        "// Line_Reference 76:      */",
        "// Line_Reference 77:     private void parseRules(List<String> rules, NormalizeCharMap.Builder map) {",
        "// Line_Reference 78:         for (String rule : rules) {",
        "// Line_Reference 79:             Matcher m = rulePattern.matcher(rule);",
        "// Line_Reference 80:             if (!m.find()) throw new RuntimeException(\"Invalid Mapping Rule : [\" + rule + \"]\");",
        "// Line_Reference 81:             String lhs = parseString(m.group(1).trim());",
        "// Line_Reference 82:             String rhs = parseString(m.group(2).trim());",
        "// Line_Reference 83:             if (lhs == null || rhs == null) throw new RuntimeException(\"Invalid Mapping Rule : [\" + rule + \"]. Illegal mapping.\");",
        "// Line_Reference 84:             map.add(lhs, rhs);",
        "// Line_Reference 85:         }"
    ]
}
