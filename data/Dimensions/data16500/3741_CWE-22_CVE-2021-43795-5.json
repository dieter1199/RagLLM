{
    "cve_id": "CVE-2021-43795",
    "cve_description": "Armeria is an open source microservice framework. In affected versions an attacker can access an Armeria server's local file system beyond its restricted directory by sending an HTTP request whose path contains `%2F` (encoded `/`), such as `/files/..%2Fsecrets.txt`, bypassing Armeria's path validation logic. Armeria 1.13.4 or above contains the hardened path validation logic that handles `%2F` properly. This vulnerability can be worked around by inserting a decorator that performs an additional validation on the request path.",
    "cve_publish_date": "2021-12-02",
    "cwe_id": "CWE-22",
    "cwe_name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
    "cwe_description": "The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
    "commit_message": "Merge pull request from GHSA-8fp4-rp6c-5gcv\n\nMotivation:\n\n- We changed how `PathAndQuery` handles `%2F` (/) in 1.12.0 via #3855.\n  This change introduces an unexpected hole in its double-dot detection\n  logic.\n- Since we decided not to decode `%2F`, we should not decode it\n  whereever possible.\n\nModifications:\n\n- Hardened the double-dot detection logic in `PathAndQuery`.\n- `Bytes.data` now always store the bytes in their decoded form. We keep\n  whether the byte has to be encoded in a separate `BitSet`.\n- Split `ArmeriaHttpUtil.decodePath()` into `decodePath()` and\n  `decodePathParam()`.\n  - We don't decode `%2F` in `decodePath()` but we do in\n    `decodePathParam()`.\n  - `RoutingResultBuilder.rawParam()` now uses `decodePathParam()`\n    because `decodePath()` doesn't decode `%2F` anymore.\n\nResult:\n\n- A path that contains double dots with `%2F`, such as\n  `/files/..%2Fsecrets.txt`, are now rejected correctly.",
    "type_of_change": "Modification",
    "filename_of_changes": "RoutingResultTest.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "12",
    "number_of_lines_deleted_vulnerable_to_cve": "2",
    "vulnerable_lines": [
        "// Line_Reference 22: import java.util.AbstractMap.SimpleEntry;",
        "// Line_Reference 48:         assertThat(routingResult.pathParams()).containsOnly(new SimpleEntry<>(\"qux\", \"quux\"));"
    ]
}
