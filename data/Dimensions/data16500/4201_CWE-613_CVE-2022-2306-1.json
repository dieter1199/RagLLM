{
    "cve_id": "CVE-2022-2306",
    "cve_description": "Old session tokens can be used to authenticate to the application and send authenticated requests.",
    "cve_publish_date": "2022-07-05",
    "cwe_id": "CWE-613",
    "cwe_name": "Insufficient Session Expiration",
    "cwe_description": "According to WASC, \"Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization.\"",
    "commit_message": "Correctly console session token on all logouts. (#875)",
    "type_of_change": "Modification",
    "filename_of_changes": "console.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "22",
    "number_of_lines_deleted_vulnerable_to_cve": "7",
    "vulnerable_lines": [
        "// Line_Reference 156: func StartConsoleServer(logger *zap.Logger, startupLogger *zap.Logger, db *sql.DB, config Config, tracker Tracker, router MessageRouter, streamManager StreamManager, sessionCache SessionCache, statusRegistry *StatusRegistry, statusHandler StatusHandler, runtimeInfo *RuntimeInfo, matchRegistry MatchRegistry, configWarnings map[string]string, serverVersion string, leaderboardCache LeaderboardCache, leaderboardRankCache LeaderboardRankCache, api *ApiServer, cookie string) *ConsoleServer {",
        "// Line_Reference 168: \t\tgrpc.UnaryInterceptor(consoleInterceptorFunc(logger, config)),",
        "// Line_Reference 426: func consoleInterceptorFunc(logger *zap.Logger, config Config) func(context.Context, interface{}, *grpc.UnaryServerInfo, grpc.UnaryHandler) (interface{}, error) {",
        "// Line_Reference 449: \t\tif ctx, ok = checkAuth(ctx, config, auth[0]); !ok {",
        "// Line_Reference 463: func checkAuth(ctx context.Context, config Config, auth string) (context.Context, bool) {",
        "// Line_Reference 484: \t\ttoken, err := jwt.Parse(auth[len(bearerPrefix):], func(token *jwt.Token) (interface{}, error) {",
        "// Line_Reference 494: \t\tuname, email, role, exp, ok := parseConsoleToken([]byte(config.GetConsole().SigningKey), auth[len(bearerPrefix):])"
    ]
}
