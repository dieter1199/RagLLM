{
    "cve_id": "CVE-2022-29217",
    "cve_description": "PyJWT is a Python implementation of RFC 7519. PyJWT supports multiple different JWT signing algorithms. With JWT, an attacker submitting the JWT token can choose the used signing algorithm. The PyJWT library requires that the application chooses what algorithms are supported. The application can specify `jwt.algorithms.get_default_algorithms()` to get support for all algorithms, or specify a single algorithm. The issue is not that big as `algorithms=jwt.algorithms.get_default_algorithms()` has to be used. Users should upgrade to v2.4.0 to receive a patch for this issue. As a workaround, always be explicit with the algorithms that are accepted and expected when decoding.",
    "cve_publish_date": "2022-05-24",
    "cwe_id": "CWE-327",
    "cwe_name": "Use of a Broken or Risky Cryptographic Algorithm",
    "cwe_description": "The product uses a broken or risky cryptographic algorithm or protocol.",
    "commit_message": "Merge pull request from GHSA-ffqj-6fqr-9h24\n\nCo-authored-by: Jos√© Padilla <jpadilla@users.noreply.github.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "algorithms.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "18",
    "number_of_lines_deleted_vulnerable_to_cve": "21",
    "vulnerable_lines": [
        "// Line_Reference 186:         invalid_strings = [",
        "// Line_Reference 187:             b\"-----BEGIN PUBLIC KEY-----\",",
        "// Line_Reference 188:             b\"-----BEGIN CERTIFICATE-----\",",
        "// Line_Reference 189:             b\"-----BEGIN RSA PUBLIC KEY-----\",",
        "// Line_Reference 190:             b\"ssh-rsa\",",
        "// Line_Reference 191:         ]",
        "// Line_Reference 192: ",
        "// Line_Reference 193:         if any(string_value in key for string_value in invalid_strings):",
        "// Line_Reference 554: ",
        "// Line_Reference 555:             if isinstance(",
        "// Line_Reference 556:                 key,",
        "// Line_Reference 557:                 (Ed25519PrivateKey, Ed25519PublicKey, Ed448PrivateKey, Ed448PublicKey),",
        "// Line_Reference 558:             ):",
        "// Line_Reference 559:                 return key",
        "// Line_Reference 560: ",
        "// Line_Reference 567:                     return load_pem_public_key(key)",
        "// Line_Reference 568:                 if \"-----BEGIN PRIVATE\" in str_key:",
        "// Line_Reference 569:                     return load_pem_private_key(key, password=None)",
        "// Line_Reference 570:                 if str_key[0:4] == \"ssh-\":",
        "// Line_Reference 571:                     return load_ssh_public_key(key)",
        "// Line_Reference 573:             raise TypeError(\"Expecting a PEM-formatted or OpenSSH key.\")"
    ]
}
