{
    "cve_id": "CVE-2022-36056",
    "cve_description": "Cosign is a project under the sigstore organization which aims to make signatures invisible infrastructure. In versions prior to 1.12.0 a number of vulnerabilities have been found in cosign verify-blob, where Cosign would successfully verify an artifact when verification should have failed. First a cosign bundle can be crafted to successfully verify a blob even if the embedded rekorBundle does not reference the given signature. Second, when providing identity flags, the email and issuer of a certificate is not checked when verifying a Rekor bundle, and the GitHub Actions identity is never checked. Third, providing an invalid Rekor bundle without the experimental flag results in a successful verification. And fourth an invalid transparency log entry will result in immediate success for verification. Details and examples of these issues can be seen in the GHSA-8gw7-4j42-w388 advisory linked. Users are advised to upgrade to 1.12.0. There are no known workarounds for these issues.",
    "cve_publish_date": "2022-09-14",
    "cwe_id": "CWE-347",
    "cwe_name": "Improper Verification of Cryptographic Signature",
    "cwe_description": "The product does not verify, or incorrectly verifies, the cryptographic signature for data.",
    "commit_message": "Merge pull request from GHSA-8gw7-4j42-w388\n\n* wip\n\nSigned-off-by: Asra Ali <asraa@google.com>\n\nmore tests\n\nSigned-off-by: Asra Ali <asraa@google.com>\n\nfinish tests\n\nSigned-off-by: Asra Ali <asraa@google.com>\n\nAdd explicit testcase for failure in verifytlogentry\n\nSigned-off-by: Asra Ali <asraa@google.com>\n\nadd testing for invalid provided bundle fails\n\nSigned-off-by: Asra Ali <asraa@google.com>\n\nupdate\n\nSigned-off-by: Asra Ali <asraa@google.com>\n\naddress hayden comments\n\nSigned-off-by: Asra Ali <asraa@google.com>\n\nupdate\n\nSigned-off-by: Asra Ali <asraa@google.com>\n\n* fix: verify RekorBundle payload references blob\n\nCo-authored-by: Cody Soyland <codysoyland@github.com>\nCo-authored-by: Asra Ali <asraa@google.com>\n\n* Add test for invalid blob signature causing error\n\nSigned-off-by: Hayden Blauzvern <hblauzvern@google.com>\n\n* Add tests for checking identity flags\n\nSigned-off-by: Hayden Blauzvern <hblauzvern@google.com>\n\n* address bob's comment\n\nSigned-off-by: Asra Ali <asraa@google.com>\n\n* add comment on intoto multisig\n\nSigned-off-by: Asra Ali <asraa@google.com>\n\nSigned-off-by: Asra Ali <asraa@google.com>\nSigned-off-by: Hayden Blauzvern <hblauzvern@google.com>\nCo-authored-by: Cody Soyland <codysoyland@github.com>\nCo-authored-by: Hayden Blauzvern <hblauzvern@google.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "mock_rekor_client.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "28",
    "number_of_lines_deleted_vulnerable_to_cve": "51",
    "vulnerable_lines": [
        "// Line_Reference 18: \t\"encoding/base64\"",
        "// Line_Reference 19: \t\"encoding/hex\"",
        "// Line_Reference 22: \t\"github.com/transparency-dev/merkle/rfc6962\"",
        "// Line_Reference 28: var (",
        "// Line_Reference 29: \tlea = models.LogEntryAnon{",
        "// Line_Reference 30: \t\tAttestation:    &models.LogEntryAnonAttestation{},",
        "// Line_Reference 31: \t\tBody:           base64.StdEncoding.EncodeToString([]byte(\"asdf\")),",
        "// Line_Reference 32: \t\tIntegratedTime: new(int64),",
        "// Line_Reference 33: \t\tLogID:          new(string),",
        "// Line_Reference 34: \t\tLogIndex:       new(int64),",
        "// Line_Reference 35: \t\tVerification: &models.LogEntryAnonVerification{",
        "// Line_Reference 36: \t\t\tInclusionProof: &models.InclusionProof{",
        "// Line_Reference 37: \t\t\t\tRootHash: new(string),",
        "// Line_Reference 38: \t\t\t\tTreeSize: new(int64),",
        "// Line_Reference 39: \t\t\t\tLogIndex: new(int64),",
        "// Line_Reference 40: \t\t\t},",
        "// Line_Reference 41: \t\t},",
        "// Line_Reference 42: \t}",
        "// Line_Reference 43: \tdata = models.LogEntry{",
        "// Line_Reference 44: \t\tuuid(lea): lea,",
        "// Line_Reference 45: \t}",
        "// Line_Reference 46: )",
        "// Line_Reference 47: ",
        "// Line_Reference 48: // uuid generates the UUID for the given LogEntry.",
        "// Line_Reference 49: // This is effectively a reimplementation of",
        "// Line_Reference 50: // pkg/cosign/tlog.go -> verifyUUID / ComputeLeafHash, but separated",
        "// Line_Reference 51: // to avoid a circular dependency.",
        "// Line_Reference 52: // TODO?: Perhaps we should refactor the tlog libraries into a separate",
        "// Line_Reference 53: // package?",
        "// Line_Reference 54: func uuid(e models.LogEntryAnon) string {",
        "// Line_Reference 55: \tentryBytes, err := base64.StdEncoding.DecodeString(e.Body.(string))",
        "// Line_Reference 56: \tif err != nil {",
        "// Line_Reference 57: \t\tpanic(err)",
        "// Line_Reference 58: \t}",
        "// Line_Reference 59: \treturn hex.EncodeToString(rfc6962.DefaultHasher.HashLeaf(entryBytes))",
        "// Line_Reference 60: }",
        "// Line_Reference 61: ",
        "// Line_Reference 65: // mClient.entries = &EntriesClient{}",
        "// Line_Reference 67: \tEntries models.LogEntry",
        "// Line_Reference 71: \treturn &entries.CreateLogEntryCreated{",
        "// Line_Reference 72: \t\tETag:     \"\",",
        "// Line_Reference 73: \t\tLocation: \"\",",
        "// Line_Reference 74: \t\tPayload:  data,",
        "// Line_Reference 75: \t}, nil",
        "// Line_Reference 79: \treturn &entries.GetLogEntryByIndexOK{",
        "// Line_Reference 80: \t\tPayload: data,",
        "// Line_Reference 81: \t}, nil",
        "// Line_Reference 85: \treturn &entries.GetLogEntryByUUIDOK{",
        "// Line_Reference 86: \t\tPayload: data,",
        "// Line_Reference 87: \t}, nil",
        "// Line_Reference 92: \t\tPayload: []models.LogEntry{data},"
    ]
}
