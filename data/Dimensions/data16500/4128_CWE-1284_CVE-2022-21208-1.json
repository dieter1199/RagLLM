{
    "cve_id": "CVE-2022-21208",
    "cve_description": "The package node-opcua before 2.74.0 are vulnerable to Denial of Service (DoS) due to a missing limitation on the number of received chunks - per single session or in total for all concurrent sessions. An attacker can exploit this vulnerability by sending an unlimited number of huge chunks (e.g. 2GB each) without sending the Final closing chunk.",
    "cve_publish_date": "2022-08-23",
    "cwe_id": "CWE-1284",
    "cwe_name": "Improper Validation of Specified Quantity in Input",
    "cwe_description": "The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.",
    "commit_message": "PacketAssembler add chunksize verification & refactor",
    "type_of_change": "Modification",
    "filename_of_changes": "packet_assembler.ts",
    "code_language": "TypeScript",
    "number_of_lines_added_for_mitigation": "46",
    "number_of_lines_deleted_vulnerable_to_cve": "13",
    "vulnerable_lines": [
        "// Line_Reference 23: export type ReadMessageFuncType = (data: Buffer) => PacketInfo;",
        "// Line_Reference 26:     readMessageFunc: ReadMessageFuncType;",
        "// Line_Reference 27: ",
        "// Line_Reference 28:     // the minimum number of bytes that need to be received before the readMessageFunc can be called",
        "// Line_Reference 36:     private readonly readMessageFunc: ReadMessageFuncType;",
        "// Line_Reference 45:         this.readMessageFunc = options.readMessageFunc;",
        "// Line_Reference 47:         assert(typeof this.readMessageFunc === \"function\", \"packet assembler requires a readMessageFunc\");",
        "// Line_Reference 63:             this.expectedLength = this.packetInfo.length;",
        "// Line_Reference 65:             assert(this.expectedLength > 0);",
        "// Line_Reference 68:             this.emit(\"newMessage\", this.packetInfo, data);",
        "// Line_Reference 90:             this.emit(\"message\", messageChunk);",
        "// Line_Reference 107:         return this.readMessageFunc(data);",
        "// Line_Reference 110:     private _buildData(data: Buffer) {"
    ]
}
