* Copyright (C) 2010-2020 Oryx Embedded SARL. All rights reserved.
* @version 2.0.0
uint8_t chipRevision;
vendorId = (dm9000ReadReg(DM9000_REG_VIDH) << 8) | dm9000ReadReg(DM9000_REG_VIDL);
productId = (dm9000ReadReg(DM9000_REG_PIDH) << 8) | dm9000ReadReg(DM9000_REG_PIDL);
chipRevision = dm9000ReadReg(DM9000_REG_CHIPR);
if(chipRevision != DM9000A_CHIP_REV && chipRevision != DM9000B_CHIP_REV)
dm9000WriteReg(DM9000_REG_GPR, 0x00);
dm9000WriteReg(DM9000_REG_NCR, NCR_RST);
while((dm9000ReadReg(DM9000_REG_NCR) & NCR_RST) != 0)
dm9000WritePhyReg(DM9000_PHY_REG_BMCR, BMCR_RST);
while((dm9000ReadPhyReg(DM9000_PHY_REG_BMCR) & BMCR_RST) != 0)
TRACE_INFO("  CHIPR = 0x%02" PRIX8 "\r\n", chipRevision);
TRACE_INFO("  PHYIDR1 = 0x%04" PRIX16 "\r\n", dm9000ReadPhyReg(DM9000_PHY_REG_PHYIDR1));
TRACE_INFO("  PHYIDR2 = 0x%04" PRIX16 "\r\n", dm9000ReadPhyReg(DM9000_PHY_REG_PHYIDR2));
dm9000WriteReg(DM9000_REG_NCR, DM9000_LBK_PHY);
dm9000WritePhyReg(DM9000_PHY_REG_BMCR, BMCR_LOOPBACK | BMCR_SPEED_SEL | BMCR_AN_EN | BMCR_DUPLEX_MODE);
dm9000WriteReg(DM9000_REG_PAR0 + i, interface->macAddr.b[i]);
dm9000WriteReg(DM9000_REG_MAR0 + i, 0x00);
dm9000WriteReg(DM9000_REG_MAR7, 0x80);
dm9000WriteReg(DM9000_REG_IMR, IMR_PAR);
dm9000WriteReg(DM9000_REG_NSR, NSR_WAKEST | NSR_TX2END | NSR_TX1END);
dm9000WriteReg(DM9000_REG_ISR, ISR_LNKCHG | ISR_UDRUN | ISR_ROO | ISR_ROS | ISR_PT | ISR_PR);
dm9000WriteReg(DM9000_REG_IMR, IMR_PAR | IMR_LNKCHGI | IMR_PTI | IMR_PRI);
dm9000WriteReg(DM9000_REG_RCR, RCR_DIS_LONG | RCR_DIS_CRC | RCR_RXEN);
status = dm9000ReadReg(DM9000_REG_ISR);
if((status & ISR_LNKCHG) != 0)
mask = dm9000ReadReg(DM9000_REG_IMR);
dm9000WriteReg(DM9000_REG_IMR, mask & ~IMR_LNKCHGI);
if((status & ISR_PT) != 0)
if(dm9000ReadReg(DM9000_REG_NSR) & (NSR_TX2END | NSR_TX1END))
dm9000WriteReg(DM9000_REG_ISR, ISR_PT);
if((status & ISR_PR) != 0)
mask = dm9000ReadReg(DM9000_REG_IMR);
dm9000WriteReg(DM9000_REG_IMR, mask & ~IMR_PRI);
status = dm9000ReadReg(DM9000_REG_ISR);
if((status & ISR_LNKCHG) != 0)
dm9000WriteReg(DM9000_REG_ISR, ISR_LNKCHG);
status = dm9000ReadReg(DM9000_REG_NSR);
if((status & NSR_LINKST) != 0)
if((status & NSR_SPEED) != 0)
status = dm9000ReadReg(DM9000_REG_NCR);
if((status & NCR_FDX) != 0)
if((status & ISR_PR) != 0)
dm9000WriteReg(DM9000_REG_ISR, ISR_PR);
dm9000WriteReg(DM9000_REG_IMR, IMR_PAR | IMR_LNKCHGI | IMR_PTI | IMR_PRI);
dm9000WriteReg(DM9000_REG_MWCMDX, 0);
DM9000_INDEX_REG = DM9000_REG_MWCMD;
dm9000WriteReg(DM9000_REG_TXPLL, LSB(length));
dm9000WriteReg(DM9000_REG_TXPLH, MSB(length));
dm9000WriteReg(DM9000_REG_ISR, ISR_PT);
dm9000WriteReg(DM9000_REG_TCR, TCR_TXREQ);
data = dm9000ReadReg(DM9000_REG_MRCMDX);
DM9000_INDEX_REG = DM9000_REG_MRCMDX1;
DM9000_INDEX_REG = DM9000_REG_MRCMD;
if((status & (RSR_LCS | RSR_RWTO | RSR_PLE | RSR_AE | RSR_CE | RSR_FOE)) == 0)
dm9000WriteReg(DM9000_REG_MAR0 + i, hashTable[i]);
dm9000ReadReg(DM9000_REG_MAR0), dm9000ReadReg(DM9000_REG_MAR1),
dm9000ReadReg(DM9000_REG_MAR2), dm9000ReadReg(DM9000_REG_MAR3),
dm9000ReadReg(DM9000_REG_MAR4), dm9000ReadReg(DM9000_REG_MAR5),
dm9000ReadReg(DM9000_REG_MAR6), dm9000ReadReg(DM9000_REG_MAR7));
dm9000WriteReg(DM9000_REG_EPAR, 0x40 | address);
dm9000WriteReg(DM9000_REG_EPDRL, LSB(data));
dm9000WriteReg(DM9000_REG_EPDRH, MSB(data));
dm9000WriteReg(DM9000_REG_EPCR, EPCR_EPOS | EPCR_ERPRW);
while((dm9000ReadReg(DM9000_REG_EPCR) & EPCR_ERRE) != 0)
dm9000WriteReg(DM9000_REG_EPCR, EPCR_EPOS);
dm9000WriteReg(DM9000_REG_EPAR, 0x40 | address);
dm9000WriteReg(DM9000_REG_EPCR, EPCR_EPOS | EPCR_ERPRR);
while((dm9000ReadReg(DM9000_REG_EPCR) & EPCR_ERRE) != 0)
dm9000WriteReg(DM9000_REG_EPCR, EPCR_EPOS);
return (dm9000ReadReg(DM9000_REG_EPDRH) << 8) | dm9000ReadReg(DM9000_REG_EPDRL);