{
    "cve_id": "CVE-2022-24771",
    "cve_description": "Forge (also called `node-forge`) is a native implementation of Transport Layer Security in JavaScript. Prior to version 1.3.0, RSA PKCS#1 v1.5 signature verification code is lenient in checking the digest algorithm structure. This can allow a crafted structure that steals padding bytes and uses unchecked portion of the PKCS#1 encoded message to forge a signature when a low public exponent is being used. The issue has been addressed in `node-forge` version 1.3.0. There are currently no known workarounds.",
    "cve_publish_date": "2022-03-18",
    "cwe_id": "CWE-347",
    "cwe_name": "Improper Verification of Cryptographic Signature",
    "cwe_description": "The product does not verify, or incorrectly verifies, the cryptographic signature for data.",
    "commit_message": "Fix signature verification issues.\n\n**SECURITY**: Three RSA PKCS#1 v1.5 signature verification issues were\nreported by Moosa Yahyazadeh (moosa-yahyazadeh@uiowa.edu):\n\n- Leniency in checking `digestAlgorithm` structure can lead to signature\n  forgery.\n  - The code is lenient in checking the digest algorithm structure. This can\n    allow a crafted structure that steals padding bytes and uses unchecked\n    portion of the PKCS#1 encoded message to forge a signature when a low\n    public exponent is being used.\n- Failing to check tailing garbage bytes can lead to signature forgery.\n  - The code does not check for tailing garbage bytes after decoding a\n    `DigestInfo` ASN.1 structure. This can allow padding bytes to be removed\n    and garbage data added to forge a signature when a low public exponent is\n    being used.\n- Leniency in checking type octet.\n  - `DigestInfo` is not properly checked for proper ASN.1 structure. This can\n    lead to successful verification with signatures that contain invalid\n    structures but a valid digest.\n\nFor more information, please see \"Bleichenbacher's RSA signature forgery based\non implementation error\" by Hal Finney:\nhttps://mailarchive.ietf.org/arch/msg/openpgp/5rnE9ZRN1AokBVj3VqblGlP63QE/\n\nFixed with the following:\n\n- [asn1] `fromDer` is now more strict and will default to ensuring all\n  input bytes are parsed or throw an error. A new option `parseAllBytes`\n  can disable this behavior.\n  - **NOTE**: The previous behavior is being changed since it can lead\n    to security issues with crafted inputs. It is possible that code\n    doing custom DER parsing may need to adapt to this new behavior and\n    optional flag.\n- [rsa] Add and use a validator to check for proper structure of parsed\n  ASN.1 `RSASSA-PKCS-v1_5` `DigestInfo` data. Additionally check that\n  the hash algorithm identifier is a known value. An invalid\n  `DigestInfo` or algorithm identifier will now cause an error to be\n  thrown.\n- [oid] Added `1.2.840.113549.2.2` / `md2` for hash algorithm checking.\n- [tests] Tests were added for all of the reported issues. A private\n  verify option was added to assist in checking multiple possible\n  failures in the test data.",
    "type_of_change": "Modification",
    "filename_of_changes": "rsa.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "77",
    "number_of_lines_deleted_vulnerable_to_cve": "3",
    "vulnerable_lines": [
        "// Line_Reference 1098:   key.verify = function(digest, signature, scheme) {",
        "// Line_Reference 1111:           var obj = asn1.fromDer(d);",
        "// Line_Reference 1113:           return digest === obj.value[1].value;"
    ]
}
