{
    "cve_id": "CVE-2021-21277",
    "cve_description": "angular-expressions is \"angular's nicest part extracted as a standalone module for the browser and node\". In angular-expressions before version 1.1.2 there is a vulnerability which allows Remote Code Execution if you call \"expressions.compile(userControlledInput)\" where \"userControlledInput\" is text that comes from user input. The security of the package could be bypassed by using a more complex payload, using a \".constructor.constructor\" technique. In terms of impact: If running angular-expressions in the browser, an attacker could run any browser script when the application code calls expressions.compile(userControlledInput). If running angular-expressions on the server, an attacker could run any Javascript expression, thus gaining Remote Code Execution. This is fixed in version 1.1.2 of angular-expressions A temporary workaround might be either to disable user-controlled input that will be fed into angular-expressions in your application or allow only following characters in the userControlledInput.",
    "cve_publish_date": "2021-02-01",
    "cwe_id": "CWE-94",
    "cwe_name": "Improper Control of Generation of Code ('Code Injection')",
    "cwe_description": "The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.",
    "commit_message": "Fix Security Vulnerability by using hasOwnProperty defensively",
    "type_of_change": "Modification",
    "filename_of_changes": "main.test.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "28",
    "number_of_lines_deleted_vulnerable_to_cve": "3",
    "vulnerable_lines": [
        "// Line_Reference 471: \t\t\texpect(evaluate({ a: \"\" })).to.eql(undefined);",
        "// Line_Reference 490: \t\t//",
        "// Line_Reference 491: \t\t//"
    ]
}
