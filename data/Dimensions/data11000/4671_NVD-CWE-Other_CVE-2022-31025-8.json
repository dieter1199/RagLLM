{
    "cve_id": "CVE-2022-31025",
    "cve_description": "Discourse is an open source platform for community discussion. Prior to version 2.8.4 on the `stable` branch and 2.9.0beta5 on the `beta` and `tests-passed` branches, inviting users on sites that use single sign-on could bypass the `must_approve_users` check and invites by staff are always approved automatically. The issue is patched in Discourse version 2.8.4 on the `stable` branch and version `2.9.0.beta5` on the `beta` and `tests-passed` branches. As a workaround, disable invites or increase `min_trust_level_to_allow_invite` to reduce the attack surface to more trusted users.",
    "cve_publish_date": "2022-06-07",
    "cwe_id": "NVD-CWE-Other",
    "cwe_name": "Other",
    "cwe_description": "NVD is only using a subset of CWE for mapping instead of the entire CWE, and the weakness type is not covered by that subset.",
    "commit_message": "SECURITY: Remove auto approval when redeeming an invite (#16974)\n\nThis security fix affects sites which have `SiteSetting.must_approve_users`\r\nenabled. There are intentional and unintentional cases where invited\r\nusers can be auto approved and are deemed to have skipped the staff approval process.\r\nInstead of trying to reason about when auto-approval should happen, we have decided that\r\nenabling the `must_approve_users` setting going forward will just mean that all new users\r\nmust be explicitly approved by a staff user in the review queue. The only case where users are auto\r\napproved is when the `auto_approve_email_domains` site setting is used.\r\n\r\nCo-authored-by: Alan Guo Xiang Tan <gxtan1990@gmail.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "invite_redeemer_spec.rb",
    "code_language": "Ruby",
    "number_of_lines_added_for_mitigation": "44",
    "number_of_lines_deleted_vulnerable_to_cve": "77",
    "vulnerable_lines": [
        "// Line_Reference 5:   describe '#create_user_from_invite' do",
        "// Line_Reference 12:       expect(user.approved).to eq(true)",
        "// Line_Reference 23:       expect(user.approved).to eq(true)",
        "// Line_Reference 50:       expect(user.approved).to eq(true)",
        "// Line_Reference 60:       expect(user.approved).to eq(true)",
        "// Line_Reference 83:       expect(user.approved).to eq(true)",
        "// Line_Reference 84:       expect(user.active).to eq(false)",
        "// Line_Reference 85:     end",
        "// Line_Reference 86: ",
        "// Line_Reference 87:     it \"does not automatically approve users if must_approve_users is true\" do",
        "// Line_Reference 88:       SiteSetting.must_approve_users = true",
        "// Line_Reference 89: ",
        "// Line_Reference 90:       invite = Fabricate(:invite, email: 'test@example.com')",
        "// Line_Reference 91:       user = InviteRedeemer.create_user_from_invite(invite: invite, email: invite.email, username: 'test')",
        "// Line_Reference 93:     end",
        "// Line_Reference 94: ",
        "// Line_Reference 95:     it \"approves user if invited by staff\" do",
        "// Line_Reference 96:       SiteSetting.must_approve_users = true",
        "// Line_Reference 97: ",
        "// Line_Reference 98:       invite = Fabricate(:invite, email: 'test@example.com', invited_by: Fabricate(:admin))",
        "// Line_Reference 99:       user = InviteRedeemer.create_user_from_invite(invite: invite, email: invite.email, username: 'test')",
        "// Line_Reference 100:       expect(user.approved).to eq(true)",
        "// Line_Reference 111:     it \"should redeem the invite if invited by staff\" do",
        "// Line_Reference 112:       SiteSetting.must_approve_users = true",
        "// Line_Reference 113:       inviter = invite.invited_by",
        "// Line_Reference 114:       inviter.admin = true",
        "// Line_Reference 115:       user = invite_redeemer.redeem",
        "// Line_Reference 116:       invite.reload",
        "// Line_Reference 118:       expect(user.name).to eq(name)",
        "// Line_Reference 119:       expect(user.username).to eq(username)",
        "// Line_Reference 120:       expect(user.invited_by).to eq(inviter)",
        "// Line_Reference 121:       expect(inviter.notifications.count).to eq(1)",
        "// Line_Reference 122:       expect(user.approved).to eq(true)",
        "// Line_Reference 123:     end",
        "// Line_Reference 125:     it \"should redeem the invite if invited by non staff but not approve\" do",
        "// Line_Reference 126:       SiteSetting.must_approve_users = true",
        "// Line_Reference 127:       inviter = invite.invited_by",
        "// Line_Reference 128:       user = invite_redeemer.redeem",
        "// Line_Reference 130:       expect(user.name).to eq(name)",
        "// Line_Reference 131:       expect(user.username).to eq(username)",
        "// Line_Reference 132:       expect(user.invited_by).to eq(inviter)",
        "// Line_Reference 133:       expect(inviter.notifications.count).to eq(1)",
        "// Line_Reference 134:       expect(user.approved).to eq(false)",
        "// Line_Reference 145:       expect(user.approved).to eq(true)",
        "// Line_Reference 146:     end",
        "// Line_Reference 147: ",
        "// Line_Reference 148:     it \"should redeem the invite if invited by non staff and approve if email in auto_approve_email_domains setting\" do",
        "// Line_Reference 149:       SiteSetting.must_approve_users = true",
        "// Line_Reference 150:       SiteSetting.auto_approve_email_domains = \"example.com\"",
        "// Line_Reference 151:       user = invite_redeemer.redeem",
        "// Line_Reference 152: ",
        "// Line_Reference 153:       expect(user.name).to eq(name)",
        "// Line_Reference 154:       expect(user.username).to eq(username)",
        "// Line_Reference 155:       expect(user.approved).to eq(true)",
        "// Line_Reference 167:       expect(user.approved).to eq(true)",
        "// Line_Reference 229:     context \"ReviewableUser\" do",
        "// Line_Reference 230:       it \"approves pending record\" do",
        "// Line_Reference 231:         reviewable = ReviewableUser.needs_review!(target: Fabricate(:user, email: invite.email), created_by: invite.invited_by)",
        "// Line_Reference 232:         reviewable.status = Reviewable.statuses[:pending]",
        "// Line_Reference 233:         reviewable.save!",
        "// Line_Reference 234:         invite_redeemer.redeem",
        "// Line_Reference 235: ",
        "// Line_Reference 236:         reviewable.reload",
        "// Line_Reference 237:         expect(reviewable.status).to eq(Reviewable.statuses[:approved])",
        "// Line_Reference 238:       end",
        "// Line_Reference 239: ",
        "// Line_Reference 240:       it \"does not raise error if record is not pending\" do",
        "// Line_Reference 241:         reviewable = ReviewableUser.needs_review!(target: Fabricate(:user, email: invite.email), created_by: invite.invited_by)",
        "// Line_Reference 242:         reviewable.status = Reviewable.statuses[:ignored]",
        "// Line_Reference 243:         reviewable.save!",
        "// Line_Reference 244:         invite_redeemer.redeem",
        "// Line_Reference 245: ",
        "// Line_Reference 246:         reviewable.reload",
        "// Line_Reference 247:         expect(reviewable.status).to eq(Reviewable.statuses[:ignored])",
        "// Line_Reference 248:       end",
        "// Line_Reference 249:     end",
        "// Line_Reference 250: "
    ]
}
