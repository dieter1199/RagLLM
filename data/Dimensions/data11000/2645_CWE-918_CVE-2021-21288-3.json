{
    "cve_id": "CVE-2021-21288",
    "cve_description": "CarrierWave is an open-source RubyGem which provides a simple and flexible way to upload files from Ruby applications. In CarrierWave before versions 1.3.2 and 2.1.1 the download feature has an SSRF vulnerability, allowing attacks to provide DNS entries or IP addresses that are intended for internal use and gather information about the Intranet infrastructure of the platform. This is fixed in versions 1.3.2 and 2.1.1.",
    "cve_publish_date": "2021-02-08",
    "cwe_id": "CWE-918",
    "cwe_name": "Server-Side Request Forgery (SSRF)",
    "cwe_description": "The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.",
    "commit_message": "Fix SSRF vulnerability in the remote file download feature\n\nCloses #2509, Refs. https://github.com/carrierwaveuploader/carrierwave/security/advisories/GHSA-fwcm-636p-68r5",
    "type_of_change": "Modification",
    "filename_of_changes": "base_spec.rb",
    "code_language": "Ruby",
    "number_of_lines_added_for_mitigation": "51",
    "number_of_lines_deleted_vulnerable_to_cve": "20",
    "vulnerable_lines": [
        "// Line_Reference 29:   context \"with a URL with internationalized domain name\" do",
        "// Line_Reference 30:     let(:uri) { \"http://ドメイン名例.jp/#{CGI.escape(filename)}\" }",
        "// Line_Reference 31:     before do",
        "// Line_Reference 32:       stub_request(:get, 'http://xn--eckwd4c7cu47r2wf.jp/test.jpg').to_return(body: file)",
        "// Line_Reference 33:     end",
        "// Line_Reference 34: ",
        "// Line_Reference 35:     it \"converts to Punycode URI\" do",
        "// Line_Reference 36:       expect(subject.process_uri(uri).to_s).to eq 'http://xn--eckwd4c7cu47r2wf.jp/test.jpg'",
        "// Line_Reference 37:     end",
        "// Line_Reference 38: ",
        "// Line_Reference 39:     it \"downloads a file\" do",
        "// Line_Reference 40:       expect(subject.download(uri).file.read).to eq file",
        "// Line_Reference 41:     end",
        "// Line_Reference 42:   end",
        "// Line_Reference 43: ",
        "// Line_Reference 80:   it \"raises an error when trying to download a local file\" do",
        "// Line_Reference 81:     expect { subject.download('/etc/passwd') }.to raise_error(CarrierWave::DownloadError)",
        "// Line_Reference 82:   end",
        "// Line_Reference 83: ",
        "// Line_Reference 114:       stub_request(:get, another_uri).to_return(body: file)"
    ]
}
