{
    "cve_id": "CVE-2018-7206",
    "cve_description": "An issue was discovered in Project Jupyter JupyterHub OAuthenticator 0.6.x before 0.6.2 and 0.7.x before 0.7.3. When using JupyterHub with GitLab group whitelisting for access control, group membership was not checked correctly, allowing members not in the whitelisted groups to create accounts on the Hub. (Users were not allowed to access other users' accounts, but could create their own accounts on the Hub linked to their GitLab account. GitLab authentication not using gitlab_group_whitelist is unaffected. No other Authenticators are affected.)",
    "cve_publish_date": "2018-02-18",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Security fix: fix gitlab group whitelist check\n\ncheck group membership of users\n\npreviously, group_whitelist allowed any user who could access the groups in the whitelist,\nrather than checking their membership of the groups.\n\nAdmin users received the correct behavior already",
    "type_of_change": "Modification",
    "filename_of_changes": "gitlab.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "8",
    "number_of_lines_deleted_vulnerable_to_cve": "26",
    "vulnerable_lines": [
        "// Line_Reference 24: from .common import next_page_from_links",
        "// Line_Reference 134:         if is_admin:",
        "// Line_Reference 135:             # For admins, /groups returns *all* groups. As a workaround",
        "// Line_Reference 136:             # we check if we are a member of each group in the whitelist",
        "// Line_Reference 137:             for group in map(url_escape, self.gitlab_group_whitelist):",
        "// Line_Reference 138:                 url = \"%s/groups/%s/members/%d\" % (GITLAB_API, group, user_id)",
        "// Line_Reference 139:                 req = HTTPRequest(url, method=\"GET\", headers=headers)",
        "// Line_Reference 140:                 resp = yield http_client.fetch(req, raise_error=False)",
        "// Line_Reference 141:                 if resp.code == 200:",
        "// Line_Reference 142:                     return True  # user _is_ in group",
        "// Line_Reference 143:         else:",
        "// Line_Reference 144:             # For regular users we get all the groups to which they have access",
        "// Line_Reference 145:             # and check if any of these are in the whitelisted groups",
        "// Line_Reference 146:             next_page = url_concat(\"%s/groups\" % GITLAB_API,",
        "// Line_Reference 147:                                    dict(all_available=True))",
        "// Line_Reference 148:             while next_page:",
        "// Line_Reference 149:                 req = HTTPRequest(next_page, method=\"GET\", headers=headers)",
        "// Line_Reference 150:                 resp = yield http_client.fetch(req)",
        "// Line_Reference 151:                 resp_json = json.loads(resp.body.decode('utf8', 'replace'))",
        "// Line_Reference 152:                 next_page = next_page_from_links(resp)",
        "// Line_Reference 153:                 user_groups = set(entry[\"path\"] for entry in resp_json)",
        "// Line_Reference 154:                 # check if any of the organizations seen thus far are in whitelist",
        "// Line_Reference 155:                 if len(self.gitlab_group_whitelist & user_groups) > 0:",
        "// Line_Reference 156:                     return True",
        "// Line_Reference 157:             return False",
        "// Line_Reference 158: "
    ]
}
