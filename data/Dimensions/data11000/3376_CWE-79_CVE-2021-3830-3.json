{
    "cve_id": "CVE-2021-3830",
    "cve_description": "btcpayserver is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
    "cve_publish_date": "2021-09-26",
    "cwe_id": "CWE-79",
    "cwe_name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
    "cwe_description": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
    "commit_message": "Add CSP at the website level (#2863)",
    "type_of_change": "Modification",
    "filename_of_changes": "ContentSecurityPolicyAttribute.cs",
    "code_language": "C#",
    "number_of_lines_added_for_mitigation": "78",
    "number_of_lines_deleted_vulnerable_to_cve": "63",
    "vulnerable_lines": [
        "// Line_Reference 12:         public void OnActionExecuted(ActionExecutedContext context)",
        "// Line_Reference 28:             if (context.IsEffectivePolicy<IContentSecurityPolicy>(this))",
        "// Line_Reference 30:                 var policies = context.HttpContext.RequestServices.GetService(typeof(ContentSecurityPolicies)) as ContentSecurityPolicies;",
        "// Line_Reference 31:                 if (policies == null)",
        "// Line_Reference 32:                     return;",
        "// Line_Reference 33:                 if (DefaultSrc != null)",
        "// Line_Reference 34:                 {",
        "// Line_Reference 35:                     policies.Add(new ConsentSecurityPolicy(\"default-src\", DefaultSrc));",
        "// Line_Reference 36:                 }",
        "// Line_Reference 37:                 if (UnsafeInline)",
        "// Line_Reference 38:                 {",
        "// Line_Reference 39:                     policies.Add(new ConsentSecurityPolicy(\"script-src\", \"'unsafe-inline'\"));",
        "// Line_Reference 40:                 }",
        "// Line_Reference 41:                 if (!string.IsNullOrEmpty(FontSrc))",
        "// Line_Reference 42:                 {",
        "// Line_Reference 43:                     policies.Add(new ConsentSecurityPolicy(\"font-src\", FontSrc));",
        "// Line_Reference 44:                 }",
        "// Line_Reference 46:                 if (!string.IsNullOrEmpty(ImgSrc))",
        "// Line_Reference 47:                 {",
        "// Line_Reference 48:                     policies.Add(new ConsentSecurityPolicy(\"img-src\", ImgSrc));",
        "// Line_Reference 49:                 }",
        "// Line_Reference 51:                 if (!string.IsNullOrEmpty(StyleSrc))",
        "// Line_Reference 52:                 {",
        "// Line_Reference 53:                     policies.Add(new ConsentSecurityPolicy(\"style-src\", StyleSrc));",
        "// Line_Reference 54:                 }",
        "// Line_Reference 56:                 if (!string.IsNullOrEmpty(ScriptSrc))",
        "// Line_Reference 57:                 {",
        "// Line_Reference 58:                     policies.Add(new ConsentSecurityPolicy(\"script-src\", ScriptSrc));",
        "// Line_Reference 59:                 }",
        "// Line_Reference 61:                 if (FixWebsocket && AutoSelf) // Self does not match wss:// and ws:// :(",
        "// Line_Reference 62:                 {",
        "// Line_Reference 63:                     var request = context.HttpContext.Request;",
        "// Line_Reference 65:                     var url = string.Concat(",
        "// Line_Reference 66:                             request.Scheme.Equals(\"http\", StringComparison.OrdinalIgnoreCase) ? \"ws\" : \"wss\",",
        "// Line_Reference 67:                             \"://\",",
        "// Line_Reference 68:                             request.Host.ToUriComponent(),",
        "// Line_Reference 69:                             request.PathBase.ToUriComponent());",
        "// Line_Reference 70:                     policies.Add(new ConsentSecurityPolicy(\"connect-src\", url));",
        "// Line_Reference 71:                 }",
        "// Line_Reference 73:                 context.HttpContext.Response.OnStarting(() =>",
        "// Line_Reference 75:                     if (!policies.HasRules)",
        "// Line_Reference 76:                         return Task.CompletedTask;",
        "// Line_Reference 77:                     if (AutoSelf)",
        "// Line_Reference 79:                         bool hasSelf = false;",
        "// Line_Reference 80:                         foreach (var group in policies.Rules.GroupBy(p => p.Name))",
        "// Line_Reference 82:                             hasSelf = group.Any(g => g.Value.Contains(\"'self'\", StringComparison.OrdinalIgnoreCase));",
        "// Line_Reference 83:                             if (!hasSelf && !group.Any(g => g.Value.Contains(\"'none'\", StringComparison.OrdinalIgnoreCase) ||",
        "// Line_Reference 84:                                                g.Value.Contains(\"*\", StringComparison.OrdinalIgnoreCase)))",
        "// Line_Reference 85:                             {",
        "// Line_Reference 86:                                 policies.Add(new ConsentSecurityPolicy(group.Key, \"'self'\"));",
        "// Line_Reference 87:                                 hasSelf = true;",
        "// Line_Reference 88:                             }",
        "// Line_Reference 89:                             if (hasSelf)",
        "// Line_Reference 90:                             {",
        "// Line_Reference 91:                                 foreach (var authorized in policies.Authorized)",
        "// Line_Reference 92:                                 {",
        "// Line_Reference 93:                                     policies.Add(new ConsentSecurityPolicy(group.Key, authorized));",
        "// Line_Reference 94:                                 }",
        "// Line_Reference 95:                             }",
        "// Line_Reference 98:                     context.HttpContext.Response.SetHeader(\"Content-Security-Policy\", policies.ToString());",
        "// Line_Reference 99:                     return Task.CompletedTask;",
        "// Line_Reference 100:                 });",
        "// Line_Reference 101:             }"
    ]
}
