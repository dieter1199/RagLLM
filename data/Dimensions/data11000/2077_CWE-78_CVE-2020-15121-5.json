{
    "cve_id": "CVE-2020-15121",
    "cve_description": "In radare2 before version 4.5.0, malformed PDB file names in the PDB server path cause shell injection. To trigger the problem it's required to open the executable in radare2 and run idpd to trigger the download. The shell code will execute, and will create a file called pwned in the current directory.",
    "cve_publish_date": "2020-07-20",
    "cwe_id": "CWE-78",
    "cwe_name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
    "cwe_description": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
    "commit_message": "Fix command injection on PDB download (#16966)\n\n* Fix r_sys_mkdirp with absolute path on Windows\r\n* Fix build with --with-openssl\r\n* Use RBuffer in r_socket_http_answer()\r\n* r_socket_http_answer: Fix read for big responses\r\n* Implement r_str_escape_sh()\r\n* Cleanup r_socket_connect() on Windows\r\n* Fix socket being created without a protocol\r\n* Fix socket connect with SSL ##socket\r\n* Use select() in r_socket_ready()\r\n* Fix read failing if received only protocol answer\r\n* Fix double-free\r\n* r_socket_http_get: Fail if req. SSL with no support\r\n* Follow redirects in r_socket_http_answer()\r\n* Fix r_socket_http_get result length with R2_CURL=1\r\n* Also follow redirects\r\n* Avoid using curl for downloading PDBs\r\n* Use r_socket_http_get() on UNIXs\r\n* Use WinINet API on Windows for r_socket_http_get()\r\n* Fix command injection\r\n* Fix r_sys_cmd_str_full output for binary data\r\n* Validate GUID on PDB download\r\n* Pass depth to socket_http_get_recursive()\r\n* Remove 'r_' and '__' from static function names\r\n* Fix is_valid_guid\r\n* Fix for comments",
    "type_of_change": "Modification",
    "filename_of_changes": "socket_http.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "151",
    "number_of_lines_deleted_vulnerable_to_cve": "36",
    "vulnerable_lines": [
        "// Line_Reference 6: static int __socket_slurp (RSocket *s, ut8 *buf, int bufsz) {",
        "// Line_Reference 7: \tint i;",
        "// Line_Reference 8: \tint chsz = 1;",
        "// Line_Reference 9: \t// r_socket_block_time (s, 1, 1, 0);",
        "// Line_Reference 10: \tif (r_socket_read_block (s, (ut8 *) buf, 1) != 1) {",
        "// Line_Reference 13: \tfor (i = 1; i < bufsz; i += chsz) {",
        "// Line_Reference 14: \t\tbuf[i] =0;",
        "// Line_Reference 15: \t\tr_socket_block_time (s, 1, 0, 1000);",
        "// Line_Reference 16: \t\tint olen = r_socket_read_block (s, (ut8 *) buf + i , chsz);",
        "// Line_Reference 17: \t\tif (olen != chsz) {",
        "// Line_Reference 18: \t\t\tbuf[i] = 0;",
        "// Line_Reference 25: static char *r_socket_http_answer (RSocket *s, int *code, int *rlen) {",
        "// Line_Reference 28: \tint ret, len = 0, bufsz = 32768, delta = 0;",
        "// Line_Reference 29: \tchar *dn, *buf = calloc (1, bufsz + 32); // XXX: use r_buffer here",
        "// Line_Reference 30: \tif (!buf) {",
        "// Line_Reference 34: \tint olen = __socket_slurp (s, (ut8*)buf, bufsz);",
        "// Line_Reference 40: \t\tgoto fail;",
        "// Line_Reference 74: fail:",
        "// Line_Reference 76: // is 's' free'd? isn't this going to cause a double free?",
        "// Line_Reference 84: R_API char *r_socket_http_get(const char *url, int *code, int *rlen) {",
        "// Line_Reference 86: \tif (curl_env && *curl_env) {",
        "// Line_Reference 87: \t\tchar *encoded_url = r_str_escape (url);",
        "// Line_Reference 88: \t\tchar *res = r_sys_cmd_strf (\"curl '%s'\", encoded_url);",
        "// Line_Reference 89: \t\tfree (encoded_url);",
        "// Line_Reference 95: \t\t\t\t*rlen = strlen (res);",
        "// Line_Reference 98: \t\tfree (curl_env);",
        "// Line_Reference 109: ",
        "// Line_Reference 110: \tif (code) {",
        "// Line_Reference 111: \t\t*code = 0;",
        "// Line_Reference 112: \t}",
        "// Line_Reference 113: \tif (rlen) {",
        "// Line_Reference 114: \t\t*rlen = 0;",
        "// Line_Reference 115: \t}",
        "// Line_Reference 150: \t\tresponse = r_socket_http_answer (s, code, rlen);",
        "// Line_Reference 160: R_API char *r_socket_http_post (const char *url, const char *data, int *code, int *rlen) {",
        "// Line_Reference 209: \treturn r_socket_http_answer (s, code, rlen);"
    ]
}
