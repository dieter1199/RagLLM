{
    "cve_id": "CVE-2021-29607",
    "cve_description": "TensorFlow is an end-to-end open source platform for machine learning. Incomplete validation in `SparseAdd` results in allowing attackers to exploit undefined behavior (dereferencing null pointers) as well as write outside of bounds of heap allocated data. The implementation(https://github.com/tensorflow/tensorflow/blob/656e7673b14acd7835dc778867f84916c6d1cac2/tensorflow/core/kernels/sparse_sparse_binary_op_shared.cc) has a large set of validation for the two sparse tensor inputs (6 tensors in total), but does not validate that the tensors are not empty or that the second dimension of `*_indices` matches the size of corresponding `*_shape`. This allows attackers to send tensor triples that represent invalid sparse tensors to abuse code assumptions that are not protected by validation. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.",
    "cve_publish_date": "2021-05-14",
    "cwe_id": "CWE-754",
    "cwe_name": "Improper Check for Unusual or Exceptional Conditions",
    "cwe_description": "The product does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the product.",
    "commit_message": "Validate that a and b are proper sparse tensors\n\nPiperOrigin-RevId: 373274848\nChange-Id: I3a665ac3a29dee9fb69bdf408a939330cb93ea75",
    "type_of_change": "Modification",
    "filename_of_changes": "sparse_sparse_binary_op_shared.cc",
    "code_language": "C++",
    "number_of_lines_added_for_mitigation": "9",
    "number_of_lines_deleted_vulnerable_to_cve": "6",
    "vulnerable_lines": [
        "// Line_Reference 183:     OP_REQUIRES(",
        "// Line_Reference 184:         ctx, a_indices_t->dim_size(1) == b_indices_t->dim_size(1),",
        "// Line_Reference 185:         errors::InvalidArgument(",
        "// Line_Reference 186:             \"Indices' dimensions do not match: got \", a_indices_t->dim_size(1),",
        "// Line_Reference 187:             \" and \", b_indices_t->dim_size(1), \" for the second dimension.\"));",
        "// Line_Reference 188:     const int num_dims = a_indices_t->dim_size(1);"
    ]
}
