{
    "cve_id": "CVE-2021-21306",
    "cve_description": "Marked is an open-source markdown parser and compiler (npm package \"marked\"). In marked from version 1.1.1 and before version 2.0.0, there is a Regular expression Denial of Service vulnerability. This vulnerability can affect anyone who runs user generated code through marked. This vulnerability is fixed in version 2.0.0.",
    "cve_publish_date": "2021-02-08",
    "cwe_id": "CWE-400",
    "cwe_name": "Uncontrolled Resource Consumption",
    "cwe_description": "The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.",
    "commit_message": "fix: Total rework of Emphasis/Strong (#1864)\n\nBREAKING CHANGE: `em` and `strong` tokenizers have been merged into one `emStrong` tokenizer",
    "type_of_change": "Modification",
    "filename_of_changes": "marked.esm.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "73",
    "number_of_lines_deleted_vulnerable_to_cve": "91",
    "vulnerable_lines": [
        "// Line_Reference 842:   strong(src, maskedSrc, prevChar = '') {",
        "// Line_Reference 843:     let match = this.rules.inline.strong.start.exec(src);",
        "// Line_Reference 845:     if (match && (!match[1] || (match[1] && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar))))) {",
        "// Line_Reference 846:       maskedSrc = maskedSrc.slice(-1 * src.length);",
        "// Line_Reference 847:       const endReg = match[0] === '**' ? this.rules.inline.strong.endAst : this.rules.inline.strong.endUnd;",
        "// Line_Reference 851:       let cap;",
        "// Line_Reference 853:         cap = this.rules.inline.strong.middle.exec(maskedSrc.slice(0, match.index + 3));",
        "// Line_Reference 854:         if (cap) {",
        "// Line_Reference 855:           return {",
        "// Line_Reference 856:             type: 'strong',",
        "// Line_Reference 857:             raw: src.slice(0, cap[0].length),",
        "// Line_Reference 858:             text: src.slice(2, cap[0].length - 2)",
        "// Line_Reference 859:           };",
        "// Line_Reference 861:       }",
        "// Line_Reference 862:     }",
        "// Line_Reference 863:   }",
        "// Line_Reference 865:   em(src, maskedSrc, prevChar = '') {",
        "// Line_Reference 866:     let match = this.rules.inline.em.start.exec(src);",
        "// Line_Reference 868:     if (match && (!match[1] || (match[1] && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar))))) {",
        "// Line_Reference 869:       maskedSrc = maskedSrc.slice(-1 * src.length);",
        "// Line_Reference 870:       const endReg = match[0] === '*' ? this.rules.inline.em.endAst : this.rules.inline.em.endUnd;",
        "// Line_Reference 872:       endReg.lastIndex = 0;",
        "// Line_Reference 874:       let cap;",
        "// Line_Reference 875:       while ((match = endReg.exec(maskedSrc)) != null) {",
        "// Line_Reference 876:         cap = this.rules.inline.em.middle.exec(maskedSrc.slice(0, match.index + 2));",
        "// Line_Reference 877:         if (cap) {",
        "// Line_Reference 880:             raw: src.slice(0, cap[0].length),",
        "// Line_Reference 881:             text: src.slice(1, cap[0].length - 1)",
        "// Line_Reference 1185:   strong: {",
        "// Line_Reference 1186:     start: /^(?:(\\*\\*(?=[*punctuation]))|\\*\\*)(?![\\s])|__/, // (1) returns if starts w/ punctuation",
        "// Line_Reference 1187:     middle: /^\\*\\*(?:(?:(?!overlapSkip)(?:[^*]|\\\\\\*)|overlapSkip)|\\*(?:(?!overlapSkip)(?:[^*]|\\\\\\*)|overlapSkip)*?\\*)+?\\*\\*$|^__(?![\\s])((?:(?:(?!overlapSkip)(?:[^_]|\\\\_)|overlapSkip)|_(?:(?!overlapSkip)(?:[^_]|\\\\_)|overlapSkip)*?_)+?)__$/,",
        "// Line_Reference 1188:     endAst: /[^punctuation\\s]\\*\\*(?!\\*)|[punctuation]\\*\\*(?!\\*)(?:(?=[punctuation_\\s]|$))/, // last char can't be punct, or final * must also be followed by punct (or endline)",
        "// Line_Reference 1189:     endUnd: /[^\\s]__(?!_)(?:(?=[punctuation*\\s])|$)/ // last char can't be a space, and final _ must preceed punct or \\s (or endline)",
        "// Line_Reference 1190:   },",
        "// Line_Reference 1191:   em: {",
        "// Line_Reference 1192:     start: /^(?:(\\*(?=[punctuation]))|\\*)(?![*\\s])|_/, // (1) returns if starts w/ punctuation",
        "// Line_Reference 1193:     middle: /^\\*(?:(?:(?!overlapSkip)(?:[^*]|\\\\\\*)|overlapSkip)|\\*(?:(?!overlapSkip)(?:[^*]|\\\\\\*)|overlapSkip)*?\\*)+?\\*$|^_(?![_\\s])(?:(?:(?!overlapSkip)(?:[^_]|\\\\_)|overlapSkip)|_(?:(?!overlapSkip)(?:[^_]|\\\\_)|overlapSkip)*?_)+?_$/,",
        "// Line_Reference 1194:     endAst: /[^punctuation\\s]\\*(?!\\*)|[punctuation]\\*(?!\\*)(?:(?=[punctuation_\\s]|$))/, // last char can't be punct, or final * must also be followed by punct (or endline)",
        "// Line_Reference 1195:     endUnd: /[^\\s]_(?!_)(?:(?=[punctuation*\\s])|$)/ // last char can't be a space, and final _ must preceed punct or \\s (or endline)",
        "// Line_Reference 1200:   text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*]|\\b_|$)|[^ ](?= {2,}\\n)))/,",
        "// Line_Reference 1201:   punctuation: /^([\\s*punctuation])/",
        "// Line_Reference 1204: // list of punctuation marks from common mark spec",
        "// Line_Reference 1205: // without * and _ to workaround cases with double emphasis",
        "// Line_Reference 1210: inline._blockSkip = '\\\\[[^\\\\]]*?\\\\]\\\\([^\\\\)]*?\\\\)|`[^`]*?`|<[^>]*?>';",
        "// Line_Reference 1211: inline._overlapSkip = '__[^_]*?__|\\\\*\\\\*\\\\[^\\\\*\\\\]*?\\\\*\\\\*';",
        "// Line_Reference 1215: inline.em.start = edit$1(inline.em.start)",
        "// Line_Reference 1216:   .replace(/punctuation/g, inline._punctuation)",
        "// Line_Reference 1219: inline.em.middle = edit$1(inline.em.middle)",
        "// Line_Reference 1220:   .replace(/punctuation/g, inline._punctuation)",
        "// Line_Reference 1221:   .replace(/overlapSkip/g, inline._overlapSkip)",
        "// Line_Reference 1224: inline.em.endAst = edit$1(inline.em.endAst, 'g')",
        "// Line_Reference 1225:   .replace(/punctuation/g, inline._punctuation)",
        "// Line_Reference 1226:   .getRegex();",
        "// Line_Reference 1227: ",
        "// Line_Reference 1228: inline.em.endUnd = edit$1(inline.em.endUnd, 'g')",
        "// Line_Reference 1229:   .replace(/punctuation/g, inline._punctuation)",
        "// Line_Reference 1230:   .getRegex();",
        "// Line_Reference 1231: ",
        "// Line_Reference 1232: inline.strong.start = edit$1(inline.strong.start)",
        "// Line_Reference 1233:   .replace(/punctuation/g, inline._punctuation)",
        "// Line_Reference 1234:   .getRegex();",
        "// Line_Reference 1235: ",
        "// Line_Reference 1236: inline.strong.middle = edit$1(inline.strong.middle)",
        "// Line_Reference 1237:   .replace(/punctuation/g, inline._punctuation)",
        "// Line_Reference 1238:   .replace(/overlapSkip/g, inline._overlapSkip)",
        "// Line_Reference 1239:   .getRegex();",
        "// Line_Reference 1240: ",
        "// Line_Reference 1241: inline.strong.endAst = edit$1(inline.strong.endAst, 'g')",
        "// Line_Reference 1242:   .replace(/punctuation/g, inline._punctuation)",
        "// Line_Reference 1243:   .getRegex();",
        "// Line_Reference 1244: ",
        "// Line_Reference 1245: inline.strong.endUnd = edit$1(inline.strong.endUnd, 'g')",
        "// Line_Reference 1246:   .replace(/punctuation/g, inline._punctuation)",
        "// Line_Reference 1247:   .getRegex();",
        "// Line_Reference 1248: ",
        "// Line_Reference 1249: inline.blockSkip = edit$1(inline._blockSkip, 'g')",
        "// Line_Reference 1250:   .getRegex();",
        "// Line_Reference 1251: ",
        "// Line_Reference 1252: inline.overlapSkip = edit$1(inline._overlapSkip, 'g')",
        "// Line_Reference 1331:   text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@))|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@))/",
        "// Line_Reference 1760:       // strong",
        "// Line_Reference 1761:       if (token = this.tokenizer.strong(src, maskedSrc, prevChar)) {",
        "// Line_Reference 1762:         src = src.substring(token.raw.length);",
        "// Line_Reference 1763:         token.tokens = this.inlineTokens(token.text, [], inLink, inRawBlock);",
        "// Line_Reference 1764:         tokens.push(token);",
        "// Line_Reference 1765:         continue;",
        "// Line_Reference 1766:       }",
        "// Line_Reference 1767: ",
        "// Line_Reference 1768:       // em",
        "// Line_Reference 1769:       if (token = this.tokenizer.em(src, maskedSrc, prevChar)) {",
        "// Line_Reference 1815:         prevChar = token.raw.slice(-1);"
    ]
}
