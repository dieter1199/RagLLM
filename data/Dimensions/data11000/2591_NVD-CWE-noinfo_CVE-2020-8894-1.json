{
    "cve_id": "CVE-2020-8894",
    "cve_description": "An issue was discovered in MISP before 2.4.121. ACLs for discussion threads were mishandled in app/Controller/ThreadsController.php and app/Model/Thread.php.",
    "cve_publish_date": "2020-02-12",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fix: [security] discussion thread ACL issues fixed\n\n- as reported by Dawid Czarnecki",
    "type_of_change": "Modification",
    "filename_of_changes": "ThreadsController.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "23",
    "number_of_lines_deleted_vulnerable_to_cve": "67",
    "vulnerable_lines": [
        "// Line_Reference 67:             $id = $thread_id;",
        "// Line_Reference 68:             // Show the discussion",
        "// Line_Reference 69:             $this->Thread->Behaviors->unload('SysLogLogable.SysLogLogable');",
        "// Line_Reference 70:             $params = array('conditions' => array('event_id' => $id),",
        "// Line_Reference 71:                     'recursive' => -1,",
        "// Line_Reference 72:                     'fields' => array('id', 'event_id', 'distribution', 'title', 'sharing_group_id', 'org_id')",
        "// Line_Reference 73:             );",
        "// Line_Reference 74:             $thread = $this->Thread->find('first', $params);",
        "// Line_Reference 75:             if (!empty($thread)) {",
        "// Line_Reference 76:                 if (!$this->_isSiteAdmin()) {",
        "// Line_Reference 77:                     if ($thread['Thread']['distribution'] == 0 && $thread['Thread']['org_id'] != $this->Auth->user('org_id')) {",
        "// Line_Reference 78:                         throw new MethodNotAllowedException('Invalid Thread.');",
        "// Line_Reference 79:                     }",
        "// Line_Reference 80:                     if ($thread['Thread']['distribution'] == 4) {",
        "// Line_Reference 81:                         if (!$this->Thread->SharingGroup->checkIfAuthorised($this->Auth->user(), $thread['Thread']['sharing_group_id'])) {",
        "// Line_Reference 82:                             new NotFoundException('Invalid thread.');",
        "// Line_Reference 83:                         }",
        "// Line_Reference 84:                     }",
        "// Line_Reference 85:                 }",
        "// Line_Reference 86:                 $thread_id = $thread['Thread']['id'];",
        "// Line_Reference 87:             } else {",
        "// Line_Reference 88:                 $thread_id = 0;",
        "// Line_Reference 90:             $this->set('currentEvent', $id);",
        "// Line_Reference 92:             $this->Thread->recursive = -1;",
        "// Line_Reference 93:             $this->Thread->id = $thread_id;",
        "// Line_Reference 94: ",
        "// Line_Reference 95:             //If the thread doesn't exist, throw exception",
        "// Line_Reference 96:             if (!$this->Thread->exists()) {",
        "// Line_Reference 99:             $thread = $this->Thread->read();",
        "// Line_Reference 100: ",
        "// Line_Reference 101:             // If the thread belongs to an event, we have to make sure that the event's distribution level hasn't changed.",
        "// Line_Reference 102:             // This is also a good time to update the thread's distribution level if that did happen.",
        "// Line_Reference 103:             if (!empty($thread['Thread']['event_id'])) {",
        "// Line_Reference 104:                 $this->loadModel('Event');",
        "// Line_Reference 105:                 $this->Event->id = $thread['Thread']['event_id'];",
        "// Line_Reference 106:                 $this->Event->recursive = -1;",
        "// Line_Reference 107:                 $this->Event->read(array('id', 'distribution', 'org_id', 'sharing_group_id'));",
        "// Line_Reference 108:                 if ($this->Event->data['Event']['distribution'] != $thread['Thread']['distribution']) {",
        "// Line_Reference 109:                     $this->Thread->saveField('distribution', $this->Event->data['Event']['distribution']);",
        "// Line_Reference 110:                 }",
        "// Line_Reference 111:                 if ($this->Event->data['Event']['sharing_group_id'] != $thread['Thread']['sharing_group_id']) {",
        "// Line_Reference 112:                     $this->Thread->saveField('sharing_group_id', $this->Event->data['Event']['sharing_group_id']);",
        "// Line_Reference 113:                 }",
        "// Line_Reference 114:                 $this->set('event_id', $thread['Thread']['event_id']);",
        "// Line_Reference 115:             }",
        "// Line_Reference 116: ",
        "// Line_Reference 117:             // If the user shouldn't be allowed to see the event send him away.",
        "// Line_Reference 118:             if (!$this->_isSiteAdmin()) {",
        "// Line_Reference 119:                 if ($thread['Thread']['distribution'] == 0 && $thread['Thread']['org_id'] != $this->Auth->user('org_id')) {",
        "// Line_Reference 120:                     throw new MethodNotAllowedException('Invalid Thread.');",
        "// Line_Reference 121:                 }",
        "// Line_Reference 122:                 if ($thread['Thread']['distribution'] == 4) {",
        "// Line_Reference 123:                     if (!$this->Thread->SharingGroup->checkIfAuthorised($this->Auth->user(), $thread['Thread']['sharing_group_id'])) {",
        "// Line_Reference 124:                         new NotFoundException('Invalid thread.');",
        "// Line_Reference 125:                     }",
        "// Line_Reference 126:                 }",
        "// Line_Reference 169:         if ($eventView) {",
        "// Line_Reference 170:             $this->set('context', 'event');",
        "// Line_Reference 171:             if (!$this->request->is('ajax')) {",
        "// Line_Reference 172:                 $this->redirect(array('controller' => 'events', 'action' => 'view', $id));",
        "// Line_Reference 173:             }",
        "// Line_Reference 174:         } else {",
        "// Line_Reference 175:             $this->set('context', 'thread');",
        "// Line_Reference 176:         }",
        "// Line_Reference 177:         $this->set('myuserid', $this->Auth->user('id'));",
        "// Line_Reference 188:         $sgids = $this->SharingGroup->fetchAllAuthorised($this->Auth->user);",
        "// Line_Reference 209:                 'conditions' => array($conditions),"
    ]
}
