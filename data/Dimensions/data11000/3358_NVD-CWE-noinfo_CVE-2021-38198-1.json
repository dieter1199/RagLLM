{
    "cve_id": "CVE-2021-38198",
    "cve_description": "arch/x86/kvm/mmu/paging_tmpl.h in the Linux kernel before 5.12.11 incorrectly computes the access permissions of a shadow page, leading to a missing guest protection page fault.",
    "cve_publish_date": "2021-08-08",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "KVM: X86: MMU: Use the correct inherited permissions to get shadow page\n\nWhen computing the access permissions of a shadow page, use the effective\npermissions of the walk up to that point, i.e. the logic AND of its parents'\npermissions.  Two guest PxE entries that point at the same table gfn need to\nbe shadowed with different shadow pages if their parents' permissions are\ndifferent.  KVM currently uses the effective permissions of the last\nnon-leaf entry for all non-leaf entries.  Because all non-leaf SPTEs have\nfull (\"uwx\") permissions, and the effective permissions are recorded only\nin role.access and merged into the leaves, this can lead to incorrect\nreuse of a shadow page and eventually to a missing guest protection page\nfault.\n\nFor example, here is a shared pagetable:\n\n   pgd[]   pud[]        pmd[]            virtual address pointers\n                     /->pmd1(u--)->pte1(uw-)->page1 <- ptr1 (u--)\n        /->pud1(uw-)--->pmd2(uw-)->pte2(uw-)->page2 <- ptr2 (uw-)\n   pgd-|           (shared pmd[] as above)\n        \\->pud2(u--)--->pmd1(u--)->pte1(uw-)->page1 <- ptr3 (u--)\n                     \\->pmd2(uw-)->pte2(uw-)->page2 <- ptr4 (u--)\n\n  pud1 and pud2 point to the same pmd table, so:\n  - ptr1 and ptr3 points to the same page.\n  - ptr2 and ptr4 points to the same page.\n\n(pud1 and pud2 here are pud entries, while pmd1 and pmd2 here are pmd entries)\n\n- First, the guest reads from ptr1 first and KVM prepares a shadow\n  page table with role.access=u--, from ptr1's pud1 and ptr1's pmd1.\n  \"u--\" comes from the effective permissions of pgd, pud1 and\n  pmd1, which are stored in pt->access.  \"u--\" is used also to get\n  the pagetable for pud1, instead of \"uw-\".\n\n- Then the guest writes to ptr2 and KVM reuses pud1 which is present.\n  The hypervisor set up a shadow page for ptr2 with pt->access is \"uw-\"\n  even though the pud1 pmd (because of the incorrect argument to\n  kvm_mmu_get_page in the previous step) has role.access=\"u--\".\n\n- Then the guest reads from ptr3.  The hypervisor reuses pud1's\n  shadow pmd for pud2, because both use \"u--\" for their permissions.\n  Thus, the shadow pmd already includes entries for both pmd1 and pmd2.\n\n- At last, the guest writes to ptr4.  This causes no vmexit or pagefault,\n  because pud1's shadow page structures included an \"uw-\" page even though\n  its role.access was \"u--\".\n\nAny kind of shared pagetable might have the similar problem when in\nvirtual machine without TDP enabled if the permissions are different\nfrom different ancestors.\n\nIn order to fix the problem, we change pt->access to be an array, and\nany access in it will not include permissions ANDed from child ptes.\n\nThe test code is: https://lore.kernel.org/kvm/20210603050537.19605-1-jiangshanlai@gmail.com/\nRemember to test it with TDP disabled.\n\nThe problem had existed long before the commit 41074d07c78b (\"KVM: MMU:\nFix inherited permissions for emulated guest pte updates\"), and it\nis hard to find which is the culprit.  So there is no fixes tag here.\n\nSigned-off-by: Lai Jiangshan <laijs@linux.alibaba.com>\nMessage-Id: <20210603052455.21023-1-jiangshanlai@gmail.com>\nCc: stable@vger.kernel.org\nFixes: cea0f0e7ea54 (\"[PATCH] KVM: MMU: Shadow page table caching\")\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "paging_tmpl.h",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "9",
    "number_of_lines_deleted_vulnerable_to_cve": "5",
    "vulnerable_lines": [
        "// Line_Reference 93: \tunsigned pt_access;",
        "// Line_Reference 94: \tunsigned pte_access;",
        "// Line_Reference 427: \twalker->pt_access = FNAME(gpte_access)(pt_access ^ walk_nx_mask);",
        "// Line_Reference 466: \t\t __func__, (u64)pte, walker->pte_access, walker->pt_access);",
        "// Line_Reference 646: \tunsigned direct_access, access = gw->pt_access;"
    ]
}
