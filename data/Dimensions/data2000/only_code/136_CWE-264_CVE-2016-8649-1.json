int lsm_set_label_at(int procfd, int on_exec, char* lsm_label) {
int ret = 0;
char* command = NULL;
goto out;
goto out;
labelfd = openat(procfd, "self/attr/exec", O_RDWR);
}
else {
labelfd = openat(procfd, "self/attr/current", O_RDWR);
ret = -1;
goto out;
ret = -1;
ret = -1;
if (write(labelfd, command, size + 1) < 0) {
SYSERROR("Unable to set LSM label");
ret = -1;
}
else if (strcmp(name, "SELinux") == 0) {
if (write(labelfd, lsm_label, strlen(lsm_label) + 1) < 0) {
ret = -1;
}
else {
ret = -1;
if (labelfd != -1)
close(labelfd);
return ret;
int procfd;
int procfd;
ERROR("error using IPC to receive notification from attached process (1)");
ERROR("error using IPC to notify attached process for initialization (2)");
procfd = open("/proc", O_DIRECTORY | O_RDONLY);
if (procfd < 0) {
SYSERROR("Unable to open /proc");
shutdown(ipc_sockets[1], SHUT_RDWR);
rexit(-1);
}
.procfd = procfd
int procfd = payload->procfd;
ERROR("error using IPC to receive notification from initial process (0)");
ERROR("error using IPC to notify initial process for initialization (1)");
ERROR("error using IPC to receive final notification from initial process (2)");
shutdown(ipc_socket, SHUT_RDWR);
close(ipc_socket);
/* set new apparmor profile/selinux context */
if (lsm_set_label_at(procfd, on_exec, init_ctx->lsm_label) < 0) {
/* we don't need proc anymore */
close(procfd);
