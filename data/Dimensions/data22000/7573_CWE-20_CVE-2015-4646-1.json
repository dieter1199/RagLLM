{
    "cve_id": "CVE-2015-4646",
    "cve_description": "(1) unsquash-1.c, (2) unsquash-2.c, (3) unsquash-3.c, and (4) unsquash-4.c in Squashfs and sasquatch allow remote attackers to cause a denial of service (application crash) via a crafted input.",
    "cve_publish_date": "2017-04-13",
    "cwe_id": "CWE-20",
    "cwe_name": "Improper Input Validation",
    "cwe_description": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.",
    "commit_message": "unsquashfs-4: Add more sanity checks + fix CVE-2015-4645/6\n\nAdd more filesystem table sanity checks to Unsquashfs-4 and\nalso properly fix CVE-2015-4645 and CVE-2015-4646.\n\nThe CVEs were raised due to Unsquashfs having variable\noveflow and stack overflow in a number of vulnerable\nfunctions.\n\nThe suggested patch only \"fixed\" one such function and fixed\nit badly, and so it was buggy and introduced extra bugs!\n\nThe suggested patch was not only buggy, but, it used the\nessentially wrong approach too.  It was \"fixing\" the\nsymptom but not the cause.  The symptom is wrong values\ncausing overflow, the cause is filesystem corruption.\nThis corruption should be detected and the filesystem\nrejected *before* trying to allocate memory.\n\nThis patch applies the following fixes:\n\n1. The filesystem super-block tables are checked, and the values\n   must match across the filesystem.\n\n   This will trap corrupted filesystems created by Mksquashfs.\n\n2. The maximum (theorectical) size the filesystem tables could grow\n   to, were analysed, and some variables were increased from int to\n   long long.\n\n   This analysis has been added as comments.\n\n3. Stack allocation was removed, and a shared buffer (which is\n   checked and increased as necessary) is used to read the\n   table indexes.\n\nSigned-off-by: Phillip Lougher <phillip@squashfs.org.uk>",
    "type_of_change": "Modification",
    "filename_of_changes": "read_xattrs.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "43",
    "number_of_lines_deleted_vulnerable_to_cve": "14",
    "vulnerable_lines": [
        "// Line_Reference 153: \tint res, bytes, i, indexes, index_bytes, ids;",
        "// Line_Reference 173: \tif(flag) {",
        "// Line_Reference 174: \t\t/*",
        "// Line_Reference 175: \t\t * id_table.xattr_table_start stores the start of the compressed xattr",
        "// Line_Reference 176: \t\t * * metadata blocks.  This by definition is also the end of the previous",
        "// Line_Reference 177: \t\t * filesystem table - the id lookup table.",
        "// Line_Reference 178: \t\t */",
        "// Line_Reference 181: \t}",
        "// Line_Reference 187: \tids = id_table.xattr_ids;",
        "// Line_Reference 188: \txattr_table_start = id_table.xattr_table_start;",
        "// Line_Reference 189: \tindex_bytes = SQUASHFS_XATTR_BLOCK_BYTES(ids);",
        "// Line_Reference 190: \tindexes = SQUASHFS_XATTR_BLOCKS(ids);",
        "// Line_Reference 206: \tbytes = SQUASHFS_XATTR_BYTES(ids);",
        "// Line_Reference 216: \t\t\t(i * SQUASHFS_METADATA_SIZE));"
    ]
}
