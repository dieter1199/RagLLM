{
    "cve_id": "CVE-2016-6652",
    "cve_description": "SQL injection vulnerability in Pivotal Spring Data JPA before 1.9.6 (Gosling SR6) and 1.10.x before 1.10.4 (Hopper SR4), when used with a repository that defines a String query using the @Query annotation, allows attackers to execute arbitrary JPQL commands via a sort instance with a function call.",
    "cve_publish_date": "2016-10-05",
    "cwe_id": "CWE-89",
    "cwe_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
    "cwe_description": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.",
    "commit_message": "DATAJPA-965 - Fix potential blind SQL injection in Sort when used in combination with @Query.\n\nWe now decline sort expressions that contain functions such as ORDER BY LENGTH(name) when used with repository having a String query defined via the @Query annotation.\n\nThink of a query method as follows:\n\n@Query(\"select p from Person p where LOWER(p.lastname) = LOWER(:lastname)\")\nList<Person> findByLastname(@Param(\"lastname\") String lastname, Sort sort);\n\nCalls to findByLastname(\"lannister\", new Sort(\"LENGTH(firstname)\")) from now on throw an Exception indicating function calls are not allowed within the _ORDER BY_ clause. However you still can use JpaSort.unsafe(\"LENGTH(firstname)\") to restore the behavior.\n\nKudos to Niklas Särökaari, Joona Immonen, Arto Santala, Antti Virtanen, Michael Holopainen and Antti Ahola who brought this to our attention.",
    "type_of_change": "Modification",
    "filename_of_changes": "JpaSortTests.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "55",
    "number_of_lines_deleted_vulnerable_to_cve": "1",
    "vulnerable_lines": [
        "// Line_Reference 2:  * Copyright 2013-2015 the original author or authors."
    ]
}
