{
    "cve_id": "CVE-2016-7078",
    "cve_description": "foreman before version 1.15.0 is vulnerable to an information leak through organizations and locations feature. When a user is assigned _no_ organizations/locations, they are able to view all resources instead of none (mirroring an administrator's view). The user's actions are still limited by their assigned permissions, e.g. to control viewing, editing and deletion.",
    "cve_publish_date": "2018-09-10",
    "cwe_id": "CWE-200",
    "cwe_name": "Exposure of Sensitive Information to an Unauthorized Actor",
    "cwe_description": "The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.",
    "commit_message": "Fixes #16982 - Scope properly when no taxonomies are set\n\nThe default scope for hosts and other objects did not restrict\nproperly by taxonomies. An user without organizations or\nlocations, could do anything it's permissions allow to.\nThe list of hosts was unrestricted and showed hosts in\nany location or organization.\n\nThis is fixed to work so that:\n\nUsers without taxonomies, when set to 'any context' cannot see\nanything (at all)\n\nUsers with taxonomies, when set to 'any context' can see\neverything within all of their taxonomies context (including\nchildren taxonomies).\n\nAdmins set to 'any context' can see everything - regardless\nof whether it has a taxonomy or not.\n\nUsers or admins set to some organization/location scope\ncan only see stuff within scope.",
    "type_of_change": "Modification",
    "filename_of_changes": "locations_controller_test.rb",
    "code_language": "Ruby",
    "number_of_lines_added_for_mitigation": "16",
    "number_of_lines_deleted_vulnerable_to_cve": "25",
    "vulnerable_lines": [
        "// Line_Reference 154:   test \"should clone location with assocations\" do",
        "// Line_Reference 159:     assert_difference \"Location.count\", 1 do",
        "// Line_Reference 160:       post :create, {:location => {:name => \"location_dup_name\",",
        "// Line_Reference 161:                                  :environment_ids => location_dup.environment_ids,",
        "// Line_Reference 162:                                  :hostgroup_ids => location_dup.hostgroup_ids,",
        "// Line_Reference 163:                                  :subnet_ids => location_dup.hostgroup_ids,",
        "// Line_Reference 164:                                  :domain_ids => location_dup.domain_ids,",
        "// Line_Reference 165:                                  :medium_ids => location_dup.medium_ids,",
        "// Line_Reference 166:                                  :user_ids => location_dup.user_ids,",
        "// Line_Reference 167:                                  :smart_proxy_ids => location_dup.smart_proxy_ids,",
        "// Line_Reference 168:                                  :provisioning_template_ids => location_dup.provisioning_template_ids,",
        "// Line_Reference 169:                                  :compute_resource_ids => location_dup.compute_resource_ids,",
        "// Line_Reference 170:                                  :organization_ids => location_dup.organization_ids",
        "// Line_Reference 171:                                }",
        "// Line_Reference 172:                    }, set_session_user",
        "// Line_Reference 178:     assert_equal new_location.environment_ids.sort, location.environment_ids.sort",
        "// Line_Reference 179:     assert_equal new_location.hostgroup_ids.sort, location.hostgroup_ids.sort",
        "// Line_Reference 180:     assert_equal new_location.environment_ids.sort, location.environment_ids.sort",
        "// Line_Reference 181:     assert_equal new_location.domain_ids.sort, location.domain_ids.sort",
        "// Line_Reference 182:     assert_equal new_location.medium_ids.sort, location.medium_ids.sort",
        "// Line_Reference 183:     assert_equal new_location.user_ids.sort, location.user_ids.sort",
        "// Line_Reference 184:     assert_equal new_location.smart_proxy_ids.sort, location.smart_proxy_ids.sort",
        "// Line_Reference 185:     assert_equal new_location.provisioning_template_ids.sort, location.provisioning_template_ids.sort",
        "// Line_Reference 186:     assert_equal new_location.compute_resource_ids.sort, location.compute_resource_ids.sort",
        "// Line_Reference 187:     assert_equal new_location.organization_ids.sort, location.organization_ids.sort"
    ]
}
