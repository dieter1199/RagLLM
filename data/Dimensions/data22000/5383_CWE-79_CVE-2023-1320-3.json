{
    "cve_id": "CVE-2023-1320",
    "cve_description": "Cross-site Scripting (XSS) - Stored in GitHub repository osticket/osticket prior to v1.16.6.",
    "cve_publish_date": "2023-03-10",
    "cwe_id": "CWE-79",
    "cwe_name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
    "cwe_description": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
    "commit_message": "xss: Draft Files\n\nThis mitigates an XSS vulnerability with files uploaded through drafts.",
    "type_of_change": "Modification",
    "filename_of_changes": "ajax.draft.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "54",
    "number_of_lines_deleted_vulnerable_to_cve": "60",
    "vulnerable_lines": [
        "// Line_Reference 56:         if (!isset($_POST['data']) && !isset($_FILES['file']))",
        "// Line_Reference 60:         if (isset($_FILES['file'])) {",
        "// Line_Reference 61:             $file = AttachmentFile::format($_FILES['file']);",
        "// Line_Reference 62: ",
        "// Line_Reference 63:             # Allow for data-uri uploaded files",
        "// Line_Reference 64:             $fp = fopen($file[0]['tmp_name'], 'rb');",
        "// Line_Reference 65:             if (fread($fp, 5) == 'data:') {",
        "// Line_Reference 66:                 $data = 'data:';",
        "// Line_Reference 67:                 while ($block = fread($fp, 8192))",
        "// Line_Reference 68:                   $data .= $block;",
        "// Line_Reference 69:                 $file[0] = Format::parseRfc2397($data);",
        "// Line_Reference 70:                 list(,$ext) = explode('/', $file[0]['type'], 2);",
        "// Line_Reference 71:                 $file[0] += array(",
        "// Line_Reference 72:                     'name' => Misc::randCode(8).'.'.$ext,",
        "// Line_Reference 73:                     'size' => strlen($file[0]['data']),",
        "// Line_Reference 74:                 );",
        "// Line_Reference 75:             }",
        "// Line_Reference 76:             fclose($fp);",
        "// Line_Reference 78:             # TODO: Detect unacceptable attachment extension",
        "// Line_Reference 79:             # TODO: Verify content-type and check file-content to ensure image",
        "// Line_Reference 80:             $type = $file[0]['type'];",
        "// Line_Reference 81:             if (strpos($file[0]['type'], 'image/') !== 0)",
        "// Line_Reference 82:                 return Http::response(403,",
        "// Line_Reference 83:                     JsonDataEncoder::encode(array(",
        "// Line_Reference 84:                         'error' => 'File type is not allowed',",
        "// Line_Reference 85:                     ))",
        "// Line_Reference 86:                 );",
        "// Line_Reference 88:             # TODO: Verify file size is acceptable",
        "// Line_Reference 89:             if ($file[0]['size'] > $cfg->getMaxFileSize())",
        "// Line_Reference 92:                         'error' => 'File is too large',",
        "// Line_Reference 96:             // Paste uploads in Chrome will have a name of 'blob'",
        "// Line_Reference 97:             if ($file[0]['name'] == 'blob')",
        "// Line_Reference 98:                 $file[0]['name'] = 'screenshot-'.Misc::randCode(4);",
        "// Line_Reference 99: ",
        "// Line_Reference 100:             $ids = $draft->attachments->upload($file);",
        "// Line_Reference 101: ",
        "// Line_Reference 102:             if (!$ids) {",
        "// Line_Reference 103:                 if ($file[0]['error']) {",
        "// Line_Reference 104:                     return Http::response(403,",
        "// Line_Reference 105:                         JsonDataEncoder::encode(array(",
        "// Line_Reference 106:                             'error' => $file[0]['error'],",
        "// Line_Reference 107:                         ))",
        "// Line_Reference 108:                     );",
        "// Line_Reference 109:                 }",
        "// Line_Reference 110:                 else",
        "// Line_Reference 111:                     return Http::response(500, 'Unable to attach image');",
        "// Line_Reference 113: ",
        "// Line_Reference 114:             $id = (is_array($ids)) ? $ids[0] : $ids;",
        "// Line_Reference 115:         }",
        "// Line_Reference 116:         else {",
        "// Line_Reference 117:             $type = explode('/', $_POST['contentType']);",
        "// Line_Reference 118:             $info = array(",
        "// Line_Reference 119:                 'data' => base64_decode($_POST['data']),",
        "// Line_Reference 120:                 'name' => Misc::randCode(10).'.'.$type[1],",
        "// Line_Reference 121:                 // TODO: Ensure _POST['contentType']",
        "// Line_Reference 122:                 'type' => $_POST['contentType'],",
        "// Line_Reference 123:             );",
        "// Line_Reference 124:             // TODO: Detect unacceptable filetype",
        "// Line_Reference 125:             // TODO: Verify content-type and check file-content to ensure image",
        "// Line_Reference 126:             $id = $draft->attachments->save($info);"
    ]
}
