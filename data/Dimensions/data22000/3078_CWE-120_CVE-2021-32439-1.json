{
    "cve_id": "CVE-2021-32439",
    "cve_description": "Buffer overflow in the stbl_AppendSize function in MP4Box in GPAC 1.0.1 allows attackers to cause a denial of service or execute arbitrary code via a crafted file.",
    "cve_publish_date": "2021-08-11",
    "cwe_id": "CWE-120",
    "cwe_name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
    "cwe_description": "The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.",
    "commit_message": "fixed #1774 (fuzz)",
    "type_of_change": "Modification",
    "filename_of_changes": "stbl_write.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "44",
    "number_of_lines_deleted_vulnerable_to_cve": "30",
    "vulnerable_lines": [
        "// Line_Reference 44: GF_Err stbl_AddDTS(GF_SampleTableBox *stbl, u64 DTS, u32 *sampleNumber, u32 LastAUDefDuration, u32 nb_packed_samples)",
        "// Line_Reference 57: \tif (!nb_packed_samples)",
        "// Line_Reference 58: \t\tnb_packed_samples=1;",
        "// Line_Reference 68: \t\tstts->entries[0].sampleCount = nb_packed_samples;",
        "// Line_Reference 69: \t\tstts->entries[0].sampleDelta = (nb_packed_samples>1) ? 0 : LastAUDefDuration;",
        "// Line_Reference 71: \t\tstts->w_currentSampleNum = nb_packed_samples;",
        "// Line_Reference 86: \t\t\t|| ((nb_packed_samples>1) && ((DTS == stts->w_LastDTS) || (DTS == stts->w_LastDTS + 2*ent->sampleDelta) ))",
        "// Line_Reference 89: \t\t\tent->sampleCount += nb_packed_samples;",
        "// Line_Reference 90: \t\t\tstts->w_currentSampleNum += nb_packed_samples;",
        "// Line_Reference 91: \t\t\tstts->w_LastDTS = DTS + ent->sampleDelta * (nb_packed_samples-1);",
        "// Line_Reference 121: \t\tif (nb_packed_samples>1)",
        "// Line_Reference 137: \t\tif (nb_packed_samples==1) {",
        "// Line_Reference 152: \t\tent->sampleCount = nb_packed_samples;",
        "// Line_Reference 156: \t\tstts->w_currentSampleNum += nb_packed_samples;",
        "// Line_Reference 396: GF_Err stbl_AddSize(GF_SampleSizeBox *stsz, u32 sampleNumber, u32 size, u32 nb_pack_samples)",
        "// Line_Reference 404: \tif (!nb_pack_samples) nb_pack_samples = 1;",
        "// Line_Reference 405: \telse if (nb_pack_samples>1)",
        "// Line_Reference 406: \t\tsize /= nb_pack_samples;",
        "// Line_Reference 412: \t\t\tstsz->sampleCount = nb_pack_samples;",
        "// Line_Reference 418: \t\t\tstsz->sampleCount += nb_pack_samples;",
        "// Line_Reference 421: \t\tif (nb_pack_samples>1) {",
        "// Line_Reference 701: GF_Err stbl_AddChunkOffset(GF_MediaBox *mdia, u32 sampleNumber, u32 StreamDescIndex, u64 offset, u32 nb_pack_samples)",
        "// Line_Reference 716: \tif (!nb_pack_samples)",
        "// Line_Reference 717: \t\tnb_pack_samples = 1;",
        "// Line_Reference 733: \t\tstsc->w_lastSampleNumber = sampleNumber + nb_pack_samples-1;",
        "// Line_Reference 788: \tent->samplesPerChunk = nb_pack_samples;",
        "// Line_Reference 792: \tif (sampleNumber + nb_pack_samples - 1 == stsc->w_lastSampleNumber) {",
        "// Line_Reference 1599: \tif (!nb_pack) nb_pack = 1;",
        "// Line_Reference 1622: \tif (!nb_pack) nb_pack = 1;",
        "// Line_Reference 1636: \t\tif (stbl->SampleSize->sampleCount+nb_pack > stbl->SampleSize->alloc_size)"
    ]
}
