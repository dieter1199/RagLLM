{
    "cve_id": "CVE-2022-24828",
    "cve_description": "Composer is a dependency manager for the PHP programming language. Integrators using Composer code to call `VcsDriver::getFileContent` can have a code injection vulnerability if the user can control the `$file` or `$identifier` argument. This leads to a vulnerability on packagist.org for example where the composer.json's `readme` field can be used as a vector for injecting parameters into hg/Mercurial via the `$file` argument, or git via the `$identifier` argument if you allow arbitrary data there (Packagist does not, but maybe other integrators do). Composer itself should not be affected by the vulnerability as it does not call `getFileContent` with arbitrary data into `$file`/`$identifier`. To the best of our knowledge this was not abused, and the vulnerability has been patched on packagist.org and Private Packagist within a day of the vulnerability report.",
    "cve_publish_date": "2022-04-13",
    "cwe_id": "CWE-88",
    "cwe_name": "Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')",
    "cwe_description": "The product constructs a string for a command to be executed by a separate component\nin another control sphere, but it does not properly delimit the\nintended arguments, options, or switches within that command string.",
    "commit_message": "Merge pull request from GHSA-x7cr-6qr6-2hh6\n\n* GitDriver: filter branch names starting with a - character\n\n* GitDriver: getFileContent prevent identifiers starting with a -\n\n* HgDriver: prevent invalid identifiers and prevent file from running commands\n\n* HgDriver: filter branches starting with a - character",
    "type_of_change": "Modification",
    "filename_of_changes": "HgDriver.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "7",
    "number_of_lines_deleted_vulnerable_to_cve": "3",
    "vulnerable_lines": [
        "// Line_Reference 129:         $resource = sprintf('hg cat -r %s %s', ProcessExecutor::escape($identifier), ProcessExecutor::escape($file));",
        "// Line_Reference 189:                 if ($branch && Preg::isMatch('(^([^\\s]+)\\s+\\d+:([a-f0-9]+))', $branch, $match)) {",
        "// Line_Reference 196:                 if ($branch && Preg::isMatch('(^(?:[\\s*]*)([^\\s]+)\\s+\\d+:(.*)$)', $branch, $match)) {"
    ]
}
