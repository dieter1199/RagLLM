{
    "cve_id": "CVE-2022-2400",
    "cve_description": "External Control of File Name or Path in GitHub repository dompdf/dompdf prior to 2.0.0.",
    "cve_publish_date": "2022-07-18",
    "cwe_id": "CWE-73",
    "cwe_name": "External Control of File Name or Path",
    "cwe_description": "The product allows user input to control or influence paths or file names that are used in filesystem operations.",
    "commit_message": "Update resource URI validation and handling\n\nURI scheme (protocol) validation rules are now specified through the Options class. By default file and http(s) URIs are allowed and validation rules defined. Validation rules for PHAR URIs are defined but the scheme is not enabled by default.\n\nResource retrieval has been updated to use file_get_contents for schemes other than http(s).\n\nfixes #621\nfixes #2826\n\nin lieu of #1903",
    "type_of_change": "Modification",
    "filename_of_changes": "Cache.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "62",
    "number_of_lines_deleted_vulnerable_to_cve": "106",
    "vulnerable_lines": [
        "// Line_Reference 12: use Dompdf\\Dompdf;",
        "// Line_Reference 46:     /**",
        "// Line_Reference 47:      * Current dompdf instance",
        "// Line_Reference 48:      *",
        "// Line_Reference 49:      * @var Dompdf",
        "// Line_Reference 50:      */",
        "// Line_Reference 51:     protected static $_dompdf;",
        "// Line_Reference 52: ",
        "// Line_Reference 60:      * @param Dompdf $dompdf    The Dompdf instance",
        "// Line_Reference 62:      * @throws ImageException",
        "// Line_Reference 63:      * @return array             An array with two elements: The local path to the image and the image extension",
        "// Line_Reference 65:     static function resolve_url($url, $protocol, $host, $base_path, Dompdf $dompdf)",
        "// Line_Reference 67:         self::$_dompdf = $dompdf;",
        "// Line_Reference 68: ",
        "// Line_Reference 69:         $protocol = mb_strtolower($protocol);",
        "// Line_Reference 70:         $parsed_url = Helpers::explode_url($url);",
        "// Line_Reference 72: ",
        "// Line_Reference 73:         $remote = ($protocol && $protocol !== \"file://\") || ($parsed_url['protocol'] !== \"\");",
        "// Line_Reference 74: ",
        "// Line_Reference 75:         $data_uri = strpos($parsed_url['protocol'], \"data:\") === 0;",
        "// Line_Reference 76:         $full_url = null;",
        "// Line_Reference 77:         $enable_remote = $dompdf->getOptions()->getIsRemoteEnabled();",
        "// Line_Reference 78:         $tempfile = false;",
        "// Line_Reference 79: ",
        "// Line_Reference 82:             // Remote not allowed and is not DataURI",
        "// Line_Reference 83:             if (!$enable_remote && $remote && !$data_uri) {",
        "// Line_Reference 84:                 throw new ImageException(\"Remote file access is disabled.\", E_WARNING);",
        "// Line_Reference 86: ",
        "// Line_Reference 87:             // remote allowed or DataURI",
        "// Line_Reference 88:             if (($enable_remote && $remote) || $data_uri) {",
        "// Line_Reference 89:                 // Download remote files to a temporary directory",
        "// Line_Reference 90:                 $full_url = Helpers::build_url($protocol, $host, $base_path, $url);",
        "// Line_Reference 92:                 // From cache",
        "// Line_Reference 93:                 if (isset(self::$_cache[$full_url])) {",
        "// Line_Reference 94:                     $resolved_url = self::$_cache[$full_url];",
        "// Line_Reference 95:                 } // From remote",
        "// Line_Reference 96:                 else {",
        "// Line_Reference 97:                     $tmp_dir = $dompdf->getOptions()->getTempDir();",
        "// Line_Reference 98:                     if (($resolved_url = @tempnam($tmp_dir, \"ca_dompdf_img_\")) === false) {",
        "// Line_Reference 99:                         throw new ImageException(\"Unable to create temporary image in \" . $tmp_dir, E_WARNING);",
        "// Line_Reference 101:                     $tempfile = $resolved_url;",
        "// Line_Reference 102:                     $image = null;",
        "// Line_Reference 104:                     if ($data_uri) {",
        "// Line_Reference 105:                         if ($parsed_data_uri = Helpers::parse_data_uri($url)) {",
        "// Line_Reference 106:                             $image = $parsed_data_uri['data'];",
        "// Line_Reference 107:                         }",
        "// Line_Reference 108:                     } else {",
        "// Line_Reference 109:                         list($image, $http_response_header) = Helpers::getFileContent($full_url, $dompdf->getHttpContext());",
        "// Line_Reference 110:                     }",
        "// Line_Reference 112:                     // Image not found or invalid",
        "// Line_Reference 113:                     if ($image === null) {",
        "// Line_Reference 114:                         $msg = ($data_uri ? \"Data-URI could not be parsed\" : \"Image not found\");",
        "// Line_Reference 115:                         throw new ImageException($msg, E_WARNING);",
        "// Line_Reference 116:                     } // Image found, put in cache and process",
        "// Line_Reference 117:                     else {",
        "// Line_Reference 118:                         //e.g. fetch.php?media=url.jpg&cache=1",
        "// Line_Reference 119:                         //- Image file name might be one of the dynamic parts of the url, don't strip off!",
        "// Line_Reference 120:                         //- a remote url does not need to have a file extension at all",
        "// Line_Reference 121:                         //- local cached file does not have a matching file extension",
        "// Line_Reference 122:                         //Therefore get image type from the content",
        "// Line_Reference 123:                         if (@file_put_contents($resolved_url, $image) === false) {",
        "// Line_Reference 124:                             throw new ImageException(\"Unable to create temporary image in \" . $tmp_dir, E_WARNING);",
        "// Line_Reference 125:                         }",
        "// Line_Reference 128:             } // Not remote, local image",
        "// Line_Reference 129:             else {",
        "// Line_Reference 130:                 $resolved_url = Helpers::build_url($protocol, $host, $base_path, $url);",
        "// Line_Reference 132:                 if ($protocol === \"\" || $protocol === \"file://\") {",
        "// Line_Reference 133:                     $realfile = realpath($resolved_url);",
        "// Line_Reference 134: ",
        "// Line_Reference 135:                     $rootDir = realpath($dompdf->getOptions()->getRootDir());",
        "// Line_Reference 136:                     if (strpos($realfile, $rootDir) !== 0) {",
        "// Line_Reference 137:                         $chroot = $dompdf->getOptions()->getChroot();",
        "// Line_Reference 138:                         $chrootValid = false;",
        "// Line_Reference 139:                         foreach ($chroot as $chrootPath) {",
        "// Line_Reference 140:                             $chrootPath = realpath($chrootPath);",
        "// Line_Reference 141:                             if ($chrootPath !== false && strpos($realfile, $chrootPath) === 0) {",
        "// Line_Reference 142:                                 $chrootValid = true;",
        "// Line_Reference 143:                                 break;",
        "// Line_Reference 144:                             }",
        "// Line_Reference 145:                         }",
        "// Line_Reference 146:                         if ($chrootValid !== true) {",
        "// Line_Reference 147:                             throw new ImageException(\"Permission denied on $resolved_url. The file could not be found under the paths specified by Options::chroot.\", E_WARNING);",
        "// Line_Reference 148:                         }",
        "// Line_Reference 149:                     }",
        "// Line_Reference 150: ",
        "// Line_Reference 151:                     if (!$realfile) {",
        "// Line_Reference 152:                         throw new ImageException(\"File '$realfile' not found.\", E_WARNING);",
        "// Line_Reference 153:                     }",
        "// Line_Reference 154: ",
        "// Line_Reference 155:                     $resolved_url = $realfile;",
        "// Line_Reference 162:             } // Check is the file is an image",
        "// Line_Reference 163:             else {",
        "// Line_Reference 164:                 list($width, $height, $type) = Helpers::dompdf_getimagesize($resolved_url, $dompdf->getHttpContext());",
        "// Line_Reference 166:                 // Known image type",
        "// Line_Reference 167:                 if ($width && $height && in_array($type, [\"gif\", \"png\", \"jpeg\", \"bmp\", \"svg\",\"webp\"], true)) {",
        "// Line_Reference 168:                     //Don't put replacement image into cache - otherwise it will be deleted on cache cleanup.",
        "// Line_Reference 169:                     //Only execute on successful caching of remote image.",
        "// Line_Reference 170:                     if ($enable_remote && $remote || $data_uri) {",
        "// Line_Reference 171:                         self::$_cache[$full_url] = $resolved_url;",
        "// Line_Reference 172:                     }",
        "// Line_Reference 173:                 } // Unknown image type",
        "// Line_Reference 174:                 else {",
        "// Line_Reference 175:                     throw new ImageException(\"Image type unknown\", E_WARNING);",
        "// Line_Reference 176:                 }",
        "// Line_Reference 183:             $type = \"png\";",
        "// Line_Reference 232:             unlink($file);"
    ]
}
