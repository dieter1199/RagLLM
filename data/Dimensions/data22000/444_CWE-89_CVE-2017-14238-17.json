{
    "cve_id": "CVE-2017-14238",
    "cve_description": "SQL injection vulnerability in admin/menus/edit.php in Dolibarr ERP/CRM version 6.0.0 allows remote attackers to execute arbitrary SQL commands via the menuId parameter.",
    "cve_publish_date": "2017-09-11",
    "cwe_id": "CWE-89",
    "cwe_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
    "cwe_description": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.",
    "commit_message": "FIX Security fixes (filter onload js, less verbose error message in\ndownload and viewimage, show info to encourage dolibarr_main_prod=1)",
    "type_of_change": "Modification",
    "filename_of_changes": "main.inc.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "21",
    "number_of_lines_deleted_vulnerable_to_cve": "20",
    "vulnerable_lines": [
        "// Line_Reference 80:     $sql_inj = 0;",
        "// Line_Reference 84:         $sql_inj += preg_match('/delete\\s+from/i',\t $val);",
        "// Line_Reference 85:         $sql_inj += preg_match('/create\\s+table/i',\t $val);",
        "// Line_Reference 86:         $sql_inj += preg_match('/update.+set.+=/i',  $val);",
        "// Line_Reference 87:         $sql_inj += preg_match('/insert\\s+into/i', \t $val);",
        "// Line_Reference 88:         $sql_inj += preg_match('/select.+from/i', \t $val);",
        "// Line_Reference 89:         $sql_inj += preg_match('/union.+select/i', \t $val);",
        "// Line_Reference 90:         $sql_inj += preg_match('/into\\s+(outfile|dumpfile)/i',  $val);",
        "// Line_Reference 91:         $sql_inj += preg_match('/(\\.\\.%2f)+/i',\t\t $val);",
        "// Line_Reference 97:     $sql_inj += preg_match('/<script/i', $val);",
        "// Line_Reference 98:     if (! defined('NOSTYLECHECK')) $sql_inj += preg_match('/<style/i', $val);",
        "// Line_Reference 99:     $sql_inj += preg_match('/base[\\s]+href/si', $val);",
        "// Line_Reference 100:     $sql_inj += preg_match('/<.*onmouse/si', $val);       // onmousexxx can be set on img or any html tag like <img title='...' onmouseover=alert(1)>",
        "// Line_Reference 101:     $sql_inj += preg_match('/onerror\\s*=/i', $val);       // onerror can be set on img or any html tag like <img title='...' onerror = alert(1)>",
        "// Line_Reference 102:     $sql_inj += preg_match('/onfocus\\s*=/i', $val);       // onfocus can be set on input text html tag like <input type='text' value='...' onfocus = alert(1)>",
        "// Line_Reference 105:         $sql_inj += preg_match('/javascript:/i', $val);",
        "// Line_Reference 106:         $sql_inj += preg_match('/vbscript:/i', $val);",
        "// Line_Reference 109:     if ($type == 1) $sql_inj += preg_match('/\"/i', $val);\t\t// We refused \" in GET parameters value",
        "// Line_Reference 110:     if ($type == 2) $sql_inj += preg_match('/[;\"]/', $val);\t\t// PHP_SELF is a file system path. It can contains spaces.",
        "// Line_Reference 111:     return $sql_inj;"
    ]
}
