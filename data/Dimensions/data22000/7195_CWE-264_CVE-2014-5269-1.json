{
    "cve_id": "CVE-2014-5269",
    "cve_description": "Plack::App::File in Plack before 1.0031 removes trailing slash characters from paths, which allows remote attackers to bypass the whitelist of generated files and obtain sensitive information via a crafted path, related to Plack::Middleware::Static.",
    "cve_publish_date": "2014-09-04",
    "cwe_id": "CWE-264",
    "cwe_name": "Permissions, Privileges, and Access Controls",
    "cwe_description": "Weaknesses in this category are related to the management of permissions, privileges, and other security features that are used to perform access control.",
    "commit_message": "Plack::App::File: Fix a security issue by not pruning trailing slashes\n\nBefore this Plack::App::File would prune trailing slashes via its split\ninvocation. I.e. it would think this:\n\n    $ perl -MData::Dumper -wle 'print Dumper [split /[\\\\\\/]/, shift]' a/file.txt\n    $VAR1 = [\n              'a',\n              'file.txt'\n            ];\n\nWas the same as:\n\n    $ perl -MData::Dumper -wle 'print Dumper [split /[\\\\\\/]/, shift]' a/file.txt///\n    $VAR1 = [\n              'a',\n              'file.txt'\n            ];\n\nThis can. turn into a nasty code exposure issue if you e.g. have an app\nthat basically does this:\n\n    1. I'd do a regex /.txt.pl\\z/ on a file to see if it was a text file\n    2. If so, do magic to generate text file via perl\n    3. Else it's not a /.txt.pl\\z/ file, so it must be some other static\n       file with a different extension\n    4. Serve it up with Plack::Middleware::Static\n\nThis is also not how other webservers or Unix utilities work:\n\n    $ touch /tmp/foo.txt\n    $ file /tmp/foo.txt\n    /tmp/foo.txt: empty\n    $ file /tmp/foo.txt/\n    /tmp/foo.txt/: ERROR: cannot open `/tmp/foo.txt/' (Not a directory)\n\nThis resolves issue #405 that I filed around 9 months ago. I was\npreviously working around it in my own code by doing:\n\n    {\n        # Let's see if someone's trying to be evil by\n        # requesting e.g. /index.html/ instead of\n        # /index.html. We don't want to fall through\n        # and just serve up the raw content.\n        my $plack_app_file = Plack::App::File->new({ root => PLACK_WEBSERVER_DOCUMENT_ROOT() });\n        my ($file) = $plack_app_file->locate_file($env);\n        if (\n            # We'll get a reference if it's a full\n            # Plack response. I.e. a 404 or whatever.\n            ref $file ne 'ARRAY'\n            and\n            # WTF once we canonicalize the file and it\n            # looks like a Mason handled path let's\n            # not accept it, because we don't want to\n            # serve up the raw unprocessed Mason page\n            # via this hack.\n            $file =~ $mason_handles_this_path_rx\n        ) {\n            TELL \"Middleware::Static: Path <$path> request, doesn't match <$mason_handles_this_path_rx>, but actually resolves to it via resolved file <$file>\" if DEBUG;\n            # Tells our app to just serve up a\n            # 400. Apache would do a 404 but I think\n            # these requests are bad, so say so.\n            $env->{$magic_marker_to_return_400} = 1;\n            return;\n        }\n    }",
    "type_of_change": "Modification",
    "filename_of_changes": "File.pm",
    "code_language": "Perl",
    "number_of_lines_added_for_mitigation": "1",
    "number_of_lines_deleted_vulnerable_to_cve": "1",
    "vulnerable_lines": [
        "// Line_Reference 47:     my @path = split /[\\\\\\/]/, $path;"
    ]
}
