{
    "cve_id": "CVE-2011-4131",
    "cve_description": "The NFSv4 implementation in the Linux kernel before 3.2.2 does not properly handle bitmap sizes in GETACL replies, which allows remote NFS servers to cause a denial of service (OOPS) by sending an excessive number of bitmap words.",
    "cve_publish_date": "2012-05-17",
    "cwe_id": "CWE-189",
    "cwe_name": "Numeric Errors",
    "cwe_description": "Weaknesses in this category are related to improper calculation or conversion of numbers.",
    "commit_message": "NFSv4: include bitmap in nfsv4 get acl data\n\nThe NFSv4 bitmap size is unbounded: a server can return an arbitrary\nsized bitmap in an FATTR4_WORD0_ACL request.  Replace using the\nnfs4_fattr_bitmap_maxsz as a guess to the maximum bitmask returned by a server\nwith the inclusion of the bitmap (xdr length plus bitmasks) and the acl data\nxdr length to the (cached) acl page data.\n\nThis is a general solution to commit e5012d1f \"NFSv4.1: update\nnfs4_fattr_bitmap_maxsz\" and fixes hitting a BUG_ON in xdr_shrink_bufhead\nwhen getting ACLs.\n\nFix a bug in decode_getacl that returned -EINVAL on ACLs > page when getxattr\nwas called with a NULL buffer, preventing ACL > PAGE_SIZE from being retrieved.\n\nCc: stable@kernel.org\nSigned-off-by: Andy Adamson <andros@netapp.com>\nSigned-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "nfs4proc.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "57",
    "number_of_lines_deleted_vulnerable_to_cve": "39",
    "vulnerable_lines": [
        "// Line_Reference 3429: static void buf_to_pages(const void *buf, size_t buflen,",
        "// Line_Reference 3430: \t\tstruct page **pages, unsigned int *pgbase)",
        "// Line_Reference 3431: {",
        "// Line_Reference 3432: \tconst void *p = buf;",
        "// Line_Reference 3433: ",
        "// Line_Reference 3434: \t*pgbase = offset_in_page(buf);",
        "// Line_Reference 3435: \tp -= *pgbase;",
        "// Line_Reference 3436: \twhile (p < buf + buflen) {",
        "// Line_Reference 3437: \t\t*(pages++) = virt_to_page(p);",
        "// Line_Reference 3438: \t\tp += PAGE_CACHE_SIZE;",
        "// Line_Reference 3439: \t}",
        "// Line_Reference 3440: }",
        "// Line_Reference 3441: ",
        "// Line_Reference 3540: \tstruct page *pages[NFS4ACL_MAXPAGES];",
        "// Line_Reference 3555: \tstruct page *localpage = NULL;",
        "// Line_Reference 3556: \tint ret;",
        "// Line_Reference 3558: \tif (buflen < PAGE_SIZE) {",
        "// Line_Reference 3559: \t\t/* As long as we're doing a round trip to the server anyway,",
        "// Line_Reference 3560: \t\t * let's be prepared for a page of acl data. */",
        "// Line_Reference 3561: \t\tlocalpage = alloc_page(GFP_KERNEL);",
        "// Line_Reference 3562: \t\tresp_buf = page_address(localpage);",
        "// Line_Reference 3563: \t\tif (localpage == NULL)",
        "// Line_Reference 3564: \t\t\treturn -ENOMEM;",
        "// Line_Reference 3565: \t\targs.acl_pages[0] = localpage;",
        "// Line_Reference 3566: \t\targs.acl_pgbase = 0;",
        "// Line_Reference 3567: \t\targs.acl_len = PAGE_SIZE;",
        "// Line_Reference 3568: \t} else {",
        "// Line_Reference 3569: \t\tresp_buf = buf;",
        "// Line_Reference 3570: \t\tbuf_to_pages(buf, buflen, args.acl_pages, &args.acl_pgbase);",
        "// Line_Reference 3572: \tret = nfs4_call_sync(NFS_SERVER(inode)->client, NFS_SERVER(inode), &msg, &args.seq_args, &res.seq_res, 0);",
        "// Line_Reference 3575: \tif (res.acl_len > args.acl_len)",
        "// Line_Reference 3576: \t\tnfs4_write_cached_acl(inode, NULL, res.acl_len);",
        "// Line_Reference 3578: \t\tnfs4_write_cached_acl(inode, resp_buf, res.acl_len);",
        "// Line_Reference 3581: \t\tif (res.acl_len > buflen)",
        "// Line_Reference 3583: \t\tif (localpage)",
        "// Line_Reference 3584: \t\t\tmemcpy(buf, resp_buf, res.acl_len);",
        "// Line_Reference 3586: \tret = res.acl_len;",
        "// Line_Reference 3588: \tif (localpage)",
        "// Line_Reference 3589: \t\t__free_page(localpage);"
    ]
}
