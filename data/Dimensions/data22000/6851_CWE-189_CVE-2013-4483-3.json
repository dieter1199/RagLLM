{
    "cve_id": "CVE-2013-4483",
    "cve_description": "The ipc_rcu_putref function in ipc/util.c in the Linux kernel before 3.10 does not properly manage a reference count, which allows local users to cause a denial of service (memory consumption or system crash) via a crafted application.",
    "cve_publish_date": "2013-11-04",
    "cwe_id": "CWE-189",
    "cwe_name": "Numeric Errors",
    "cwe_description": "Weaknesses in this category are related to improper calculation or conversion of numbers.",
    "commit_message": "ipc,sem: fine grained locking for semtimedop\n\nIntroduce finer grained locking for semtimedop, to handle the common case\nof a program wanting to manipulate one semaphore from an array with\nmultiple semaphores.\n\nIf the call is a semop manipulating just one semaphore in an array with\nmultiple semaphores, only take the lock for that semaphore itself.\n\nIf the call needs to manipulate multiple semaphores, or another caller is\nin a transaction that manipulates multiple semaphores, the sem_array lock\nis taken, as well as all the locks for the individual semaphores.\n\nOn a 24 CPU system, performance numbers with the semop-multi\ntest with N threads and N semaphores, look like this:\n\n\tvanilla\t\tDavidlohr's\tDavidlohr's +\tDavidlohr's +\nthreads\t\t\tpatches\t\trwlock patches\tv3 patches\n10\t610652\t\t726325\t\t1783589\t\t2142206\n20\t341570\t\t365699\t\t1520453\t\t1977878\n30\t288102\t\t307037\t\t1498167\t\t2037995\n40\t290714\t\t305955\t\t1612665\t\t2256484\n50\t288620\t\t312890\t\t1733453\t\t2650292\n60\t289987\t\t306043\t\t1649360\t\t2388008\n70\t291298\t\t306347\t\t1723167\t\t2717486\n80\t290948\t\t305662\t\t1729545\t\t2763582\n90\t290996\t\t306680\t\t1736021\t\t2757524\n100\t292243\t\t306700\t\t1773700\t\t3059159\n\n[davidlohr.bueso@hp.com: do not call sem_lock when bogus sma]\n[davidlohr.bueso@hp.com: make refcounter atomic]\nSigned-off-by: Rik van Riel <riel@redhat.com>\nSuggested-by: Linus Torvalds <torvalds@linux-foundation.org>\nAcked-by: Davidlohr Bueso <davidlohr.bueso@hp.com>\nCc: Chegu Vinod <chegu_vinod@hp.com>\nCc: Jason Low <jason.low2@hp.com>\nReviewed-by: Michel Lespinasse <walken@google.com>\nCc: Peter Hurley <peter@hurleysoftware.com>\nCc: Stanislav Kinsbursky <skinsbursky@parallels.com>\nTested-by: Emmanuel Benisty <benisty.e@gmail.com>\nTested-by: Sedat Dilek <sedat.dilek@gmail.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "util.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "25",
    "number_of_lines_deleted_vulnerable_to_cve": "23",
    "vulnerable_lines": [
        "// Line_Reference 442: void* ipc_alloc(int size)",
        "// Line_Reference 444: \tvoid* out;",
        "// Line_Reference 481: \tint refcount;",
        "// Line_Reference 519:  *\tReturns the pointer to the object.",
        "// Line_Reference 520:  *\tNULL is returned if the allocation fails.",
        "// Line_Reference 522: ",
        "// Line_Reference 523: void* ipc_rcu_alloc(int size)",
        "// Line_Reference 525: \tvoid* out;",
        "// Line_Reference 526: \t/*",
        "// Line_Reference 528: \t * workqueue if necessary (for vmalloc).",
        "// Line_Reference 532: \t\tif (out) {",
        "// Line_Reference 533: \t\t\tout += HDRLEN_VMALLOC;",
        "// Line_Reference 534: \t\t\tcontainer_of(out, struct ipc_rcu_hdr, data)->is_vmalloc = 1;",
        "// Line_Reference 535: \t\t\tcontainer_of(out, struct ipc_rcu_hdr, data)->refcount = 1;",
        "// Line_Reference 536: \t\t}",
        "// Line_Reference 539: \t\tif (out) {",
        "// Line_Reference 540: \t\t\tout += HDRLEN_KMALLOC;",
        "// Line_Reference 541: \t\t\tcontainer_of(out, struct ipc_rcu_hdr, data)->is_vmalloc = 0;",
        "// Line_Reference 542: \t\t\tcontainer_of(out, struct ipc_rcu_hdr, data)->refcount = 1;",
        "// Line_Reference 543: \t\t}",
        "// Line_Reference 549: void ipc_rcu_getref(void *ptr)",
        "// Line_Reference 551: \tcontainer_of(ptr, struct ipc_rcu_hdr, data)->refcount++;",
        "// Line_Reference 581: \tif (--container_of(ptr, struct ipc_rcu_hdr, data)->refcount > 0)"
    ]
}
