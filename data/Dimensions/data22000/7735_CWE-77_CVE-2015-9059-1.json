{
    "cve_id": "CVE-2015-9059",
    "cve_description": "picocom before 2.0 has a command injection vulnerability in the 'send and receive file' command because the command line is executed by /bin/sh unsafely.",
    "cve_publish_date": "2017-05-28",
    "cwe_id": "CWE-77",
    "cwe_name": "Improper Neutralization of Special Elements used in a Command ('Command Injection')",
    "cwe_description": "The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.",
    "commit_message": "Do not use \"/bin/sh\" to run external commands.\n\nPicocom no longer uses /bin/sh to run external commands for\nfile-transfer operations. Parsing the command line and spliting it into\narguments is now performed internally by picocom, using quoting rules\nvery similar to those of the Unix shell. Hopefully, this makes it\nimpossible to inject shell-commands when supplying filenames or\nextra arguments to the send- and receive-file commands.",
    "type_of_change": "Modification",
    "filename_of_changes": "picocom.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "33",
    "number_of_lines_deleted_vulnerable_to_cve": "30",
    "vulnerable_lines": [
        "// Line_Reference 738: #define EXEC \"exec \"",
        "// Line_Reference 739: ",
        "// Line_Reference 741: run_cmd(int fd, ...)",
        "// Line_Reference 784: \t\tchar cmd[512];",
        "// Line_Reference 785: ",
        "// Line_Reference 799: \t\t{",
        "// Line_Reference 800: \t\t\t/* build command-line */",
        "// Line_Reference 801: \t\t\tchar *c, *ce;",
        "// Line_Reference 802: \t\t\tconst char *s;",
        "// Line_Reference 803: \t\t\tint n;",
        "// Line_Reference 804: \t\t\tva_list vls;",
        "// Line_Reference 805: ",
        "// Line_Reference 806: \t\t\tstrcpy(cmd, EXEC);",
        "// Line_Reference 807: \t\t\tc = &cmd[sizeof(EXEC)- 1];",
        "// Line_Reference 808: \t\t\tce = cmd + sizeof(cmd) - 1;",
        "// Line_Reference 809: \t\t\tva_start(vls, fd);",
        "// Line_Reference 810: \t\t\twhile ( (s = va_arg(vls, const char *)) ) {",
        "// Line_Reference 811: \t\t\t\tn = strlen(s);",
        "// Line_Reference 812: \t\t\t\tif ( c + n + 1 >= ce ) break;",
        "// Line_Reference 813: \t\t\t\tmemcpy(c, s, n); c += n;",
        "// Line_Reference 814: \t\t\t\t*c++ = ' ';",
        "// Line_Reference 815: \t\t\t}",
        "// Line_Reference 816: \t\t\tva_end(vls);",
        "// Line_Reference 817: \t\t\t*c = '\\0';",
        "// Line_Reference 820: \t\tfd_printf(STDERR_FILENO, \"%s\\n\", &cmd[sizeof(EXEC) - 1]);",
        "// Line_Reference 823: \t\texecl(\"/bin/sh\", \"sh\", \"-c\", cmd, NULL);",
        "// Line_Reference 824: \t\texit(42);",
        "// Line_Reference 828: #undef EXEC",
        "// Line_Reference 829: ",
        "// Line_Reference 947: \t\trun_cmd(tty_fd, xfr_cmd, fname, NULL);"
    ]
}
