{
    "cve_id": "CVE-2014-8172",
    "cve_description": "The filesystem implementation in the Linux kernel before 3.13 performs certain operations on lists of files with an inappropriate locking approach, which allows local users to cause a denial of service (soft lockup or system crash) via unspecified use of Asynchronous I/O (AIO) operations.",
    "cve_publish_date": "2015-03-16",
    "cwe_id": "CWE-17",
    "cwe_name": "DEPRECATED: Code",
    "cwe_description": "This entry has been deprecated.  It was originally used for organizing the Development View (CWE-699) and some other views, but it introduced unnecessary complexity and depth to the resulting tree.",
    "commit_message": "get rid of s_files and files_lock\n\nThe only thing we need it for is alt-sysrq-r (emergency remount r/o)\nand these days we can do just as well without going through the\nlist of files.\n\nSigned-off-by: Al Viro <viro@zeniv.linux.org.uk>",
    "type_of_change": "Modification",
    "filename_of_changes": "file_table.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "0",
    "number_of_lines_deleted_vulnerable_to_cve": "125",
    "vulnerable_lines": [
        "// Line_Reference 39: DEFINE_STATIC_LGLOCK(files_lglock);",
        "// Line_Reference 40: ",
        "// Line_Reference 137: \tINIT_LIST_HEAD(&f->f_u.fu_list);",
        "// Line_Reference 307: \t\tfile_sb_list_del(file);",
        "// Line_Reference 336: \t\tfile_sb_list_del(file);",
        "// Line_Reference 348: \t\tfile_sb_list_del(file);",
        "// Line_Reference 353: static inline int file_list_cpu(struct file *file)",
        "// Line_Reference 354: {",
        "// Line_Reference 355: #ifdef CONFIG_SMP",
        "// Line_Reference 356: \treturn file->f_sb_list_cpu;",
        "// Line_Reference 357: #else",
        "// Line_Reference 358: \treturn smp_processor_id();",
        "// Line_Reference 359: #endif",
        "// Line_Reference 360: }",
        "// Line_Reference 361: ",
        "// Line_Reference 362: /* helper for file_sb_list_add to reduce ifdefs */",
        "// Line_Reference 363: static inline void __file_sb_list_add(struct file *file, struct super_block *sb)",
        "// Line_Reference 364: {",
        "// Line_Reference 365: \tstruct list_head *list;",
        "// Line_Reference 366: #ifdef CONFIG_SMP",
        "// Line_Reference 367: \tint cpu;",
        "// Line_Reference 368: \tcpu = smp_processor_id();",
        "// Line_Reference 369: \tfile->f_sb_list_cpu = cpu;",
        "// Line_Reference 370: \tlist = per_cpu_ptr(sb->s_files, cpu);",
        "// Line_Reference 371: #else",
        "// Line_Reference 372: \tlist = &sb->s_files;",
        "// Line_Reference 373: #endif",
        "// Line_Reference 374: \tlist_add(&file->f_u.fu_list, list);",
        "// Line_Reference 375: }",
        "// Line_Reference 376: ",
        "// Line_Reference 377: /**",
        "// Line_Reference 378:  * file_sb_list_add - add a file to the sb's file list",
        "// Line_Reference 379:  * @file: file to add",
        "// Line_Reference 380:  * @sb: sb to add it to",
        "// Line_Reference 381:  *",
        "// Line_Reference 382:  * Use this function to associate a file with the superblock of the inode it",
        "// Line_Reference 383:  * refers to.",
        "// Line_Reference 384:  */",
        "// Line_Reference 385: void file_sb_list_add(struct file *file, struct super_block *sb)",
        "// Line_Reference 386: {",
        "// Line_Reference 387: \tif (likely(!(file->f_mode & FMODE_WRITE)))",
        "// Line_Reference 388: \t\treturn;",
        "// Line_Reference 389: \tif (!S_ISREG(file_inode(file)->i_mode))",
        "// Line_Reference 390: \t\treturn;",
        "// Line_Reference 391: \tlg_local_lock(&files_lglock);",
        "// Line_Reference 392: \t__file_sb_list_add(file, sb);",
        "// Line_Reference 393: \tlg_local_unlock(&files_lglock);",
        "// Line_Reference 394: }",
        "// Line_Reference 395: ",
        "// Line_Reference 396: /**",
        "// Line_Reference 397:  * file_sb_list_del - remove a file from the sb's file list",
        "// Line_Reference 398:  * @file: file to remove",
        "// Line_Reference 399:  * @sb: sb to remove it from",
        "// Line_Reference 400:  *",
        "// Line_Reference 401:  * Use this function to remove a file from its superblock.",
        "// Line_Reference 402:  */",
        "// Line_Reference 403: void file_sb_list_del(struct file *file)",
        "// Line_Reference 404: {",
        "// Line_Reference 405: \tif (!list_empty(&file->f_u.fu_list)) {",
        "// Line_Reference 406: \t\tlg_local_lock_cpu(&files_lglock, file_list_cpu(file));",
        "// Line_Reference 407: \t\tlist_del_init(&file->f_u.fu_list);",
        "// Line_Reference 408: \t\tlg_local_unlock_cpu(&files_lglock, file_list_cpu(file));",
        "// Line_Reference 409: \t}",
        "// Line_Reference 410: }",
        "// Line_Reference 411: ",
        "// Line_Reference 412: #ifdef CONFIG_SMP",
        "// Line_Reference 413: ",
        "// Line_Reference 414: /*",
        "// Line_Reference 415:  * These macros iterate all files on all CPUs for a given superblock.",
        "// Line_Reference 416:  * files_lglock must be held globally.",
        "// Line_Reference 417:  */",
        "// Line_Reference 418: #define do_file_list_for_each_entry(__sb, __file)\t\t\\",
        "// Line_Reference 419: {\t\t\t\t\t\t\t\t\\",
        "// Line_Reference 420: \tint i;\t\t\t\t\t\t\t\\",
        "// Line_Reference 421: \tfor_each_possible_cpu(i) {\t\t\t\t\\",
        "// Line_Reference 422: \t\tstruct list_head *list;\t\t\t\t\\",
        "// Line_Reference 423: \t\tlist = per_cpu_ptr((__sb)->s_files, i);\t\t\\",
        "// Line_Reference 424: \t\tlist_for_each_entry((__file), list, f_u.fu_list)",
        "// Line_Reference 425: ",
        "// Line_Reference 426: #define while_file_list_for_each_entry\t\t\t\t\\",
        "// Line_Reference 427: \t}\t\t\t\t\t\t\t\\",
        "// Line_Reference 428: }",
        "// Line_Reference 429: ",
        "// Line_Reference 430: #else",
        "// Line_Reference 431: ",
        "// Line_Reference 432: #define do_file_list_for_each_entry(__sb, __file)\t\t\\",
        "// Line_Reference 433: {\t\t\t\t\t\t\t\t\\",
        "// Line_Reference 434: \tstruct list_head *list;\t\t\t\t\t\\",
        "// Line_Reference 435: \tlist = &(sb)->s_files;\t\t\t\t\t\\",
        "// Line_Reference 436: \tlist_for_each_entry((__file), list, f_u.fu_list)",
        "// Line_Reference 437: ",
        "// Line_Reference 438: #define while_file_list_for_each_entry\t\t\t\t\\",
        "// Line_Reference 439: }",
        "// Line_Reference 440: ",
        "// Line_Reference 441: #endif",
        "// Line_Reference 442: ",
        "// Line_Reference 443: /**",
        "// Line_Reference 444:  *\tmark_files_ro - mark all files read-only",
        "// Line_Reference 445:  *\t@sb: superblock in question",
        "// Line_Reference 446:  *",
        "// Line_Reference 447:  *\tAll files are marked read-only.  We don't care about pending",
        "// Line_Reference 448:  *\tdelete files so this should be used in 'force' mode only.",
        "// Line_Reference 449:  */",
        "// Line_Reference 450: void mark_files_ro(struct super_block *sb)",
        "// Line_Reference 451: {",
        "// Line_Reference 452: \tstruct file *f;",
        "// Line_Reference 453: ",
        "// Line_Reference 454: \tlg_global_lock(&files_lglock);",
        "// Line_Reference 455: \tdo_file_list_for_each_entry(sb, f) {",
        "// Line_Reference 456: \t\tif (!file_count(f))",
        "// Line_Reference 457: \t\t\tcontinue;",
        "// Line_Reference 458: \t\tif (!(f->f_mode & FMODE_WRITE))",
        "// Line_Reference 459: \t\t\tcontinue;",
        "// Line_Reference 460: \t\tspin_lock(&f->f_lock);",
        "// Line_Reference 461: \t\tf->f_mode &= ~FMODE_WRITE;",
        "// Line_Reference 462: \t\tspin_unlock(&f->f_lock);",
        "// Line_Reference 463: \t\tif (file_check_writeable(f) != 0)",
        "// Line_Reference 464: \t\t\tcontinue;",
        "// Line_Reference 465: \t\t__mnt_drop_write(f->f_path.mnt);",
        "// Line_Reference 466: \t\tfile_release_write(f);",
        "// Line_Reference 467: \t} while_file_list_for_each_entry;",
        "// Line_Reference 468: \tlg_global_unlock(&files_lglock);",
        "// Line_Reference 469: }",
        "// Line_Reference 470: ",
        "// Line_Reference 486: \tlg_lock_init(&files_lglock, \"files_lglock\");"
    ]
}
