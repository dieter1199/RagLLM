{
    "cve_id": "CVE-2024-27102",
    "cve_description": "Wings is the server control plane for Pterodactyl Panel. This vulnerability impacts anyone running the affected versions of Wings. The vulnerability can potentially be used to access files and directories on the host system. The full scope of impact is exactly unknown, but reading files outside of a server's base directory (sandbox root) is possible. In order to use this exploit, an attacker must have an existing \"server\" allocated and controlled by Wings. Details on the exploitation of this vulnerability are embargoed until March 27th, 2024 at 18:00 UTC. In order to mitigate this vulnerability, a full rewrite of the entire server filesystem was necessary. Because of this, the size of the patch is massive, however effort was made to reduce the amount of breaking changes. Users are advised to update to version 1.11.9. There are no known workarounds for this vulnerability.",
    "cve_publish_date": "2024-03-13",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "server(filesystem): rebuild everything imaginable\n\nThis wonderfully large commit replaces basically everything under the\n`server/filesystem` package, re-implementing essentially everything.\n\nThis is related to\nhttps://github.com/pterodactyl/wings/security/advisories/GHSA-494h-9924-xww9\n\nIf any vulnerabilities related to symlinks persist after this commit, I\nwill be very upset.\n\nSigned-off-by: Matthew Penner <me@matthewp.io>",
    "type_of_change": "Modification",
    "filename_of_changes": "filesystem_test.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "70",
    "number_of_lines_deleted_vulnerable_to_cve": "81",
    "vulnerable_lines": [
        "// Line_Reference 10: \t\"sync/atomic\"",
        "// Line_Reference 32: \t// defer os.RemoveAll(tmpDir)",
        "// Line_Reference 36: \trfs.reset()",
        "// Line_Reference 38: \tfs := New(filepath.Join(tmpDir, \"/server\"), 0, []string{})",
        "// Line_Reference 48: func getFileContent(file *os.File) string {",
        "// Line_Reference 57: \tf, err := os.Create(filepath.Join(rfs.root, \"/server\", p))",
        "// Line_Reference 60: \t\tf.Write(c)",
        "// Line_Reference 61: \t\tf.Close()",
        "// Line_Reference 72: \treturn os.Stat(filepath.Join(rfs.root, \"/server\", p))",
        "// Line_Reference 73: }",
        "// Line_Reference 74: ",
        "// Line_Reference 75: func (rfs *rootFs) reset() {",
        "// Line_Reference 76: \tif err := os.RemoveAll(filepath.Join(rfs.root, \"/server\")); err != nil {",
        "// Line_Reference 77: \t\tif !os.IsNotExist(err) {",
        "// Line_Reference 78: \t\t\tpanic(err)",
        "// Line_Reference 79: \t\t}",
        "// Line_Reference 80: \t}",
        "// Line_Reference 81: ",
        "// Line_Reference 82: \tif err := os.Mkdir(filepath.Join(rfs.root, \"/server\"), 0o755); err != nil {",
        "// Line_Reference 83: \t\tpanic(err)",
        "// Line_Reference 84: \t}",
        "// Line_Reference 96: \t\t\tg.Assert(IsErrorCode(err, ErrNotExist)).IsTrue()",
        "// Line_Reference 111: \t\t\trfs.reset()",
        "// Line_Reference 118: \tfs, rfs := NewFs()",
        "// Line_Reference 128: \t\t\tg.Assert(atomic.LoadInt64(&fs.diskUsed)).Equal(int64(0))",
        "// Line_Reference 130: \t\t\terr := fs.Writefile(\"test.txt\", r)",
        "// Line_Reference 137: \t\t\tg.Assert(atomic.LoadInt64(&fs.diskUsed)).Equal(r.Size())",
        "// Line_Reference 143: \t\t\terr := fs.Writefile(\"/some/nested/test.txt\", r)",
        "// Line_Reference 155: \t\t\terr := fs.Writefile(\"some/../foo/bar/test.txt\", r)",
        "// Line_Reference 167: \t\t\terr := fs.Writefile(\"/some/../foo/../../test.txt\", r)",
        "// Line_Reference 169: \t\t\tg.Assert(IsErrorCode(err, ErrCodePathResolution)).IsTrue()",
        "// Line_Reference 173: \t\t\tatomic.StoreInt64(&fs.diskLimit, 1024)",
        "// Line_Reference 181: \t\t\terr = fs.Writefile(\"test.txt\", r)",
        "// Line_Reference 188: \t\t\terr := fs.Writefile(\"test.txt\", r)",
        "// Line_Reference 192: \t\t\terr = fs.Writefile(\"test.txt\", r)",
        "// Line_Reference 203: \t\t\trfs.reset()",
        "// Line_Reference 204: ",
        "// Line_Reference 205: \t\t\tatomic.StoreInt64(&fs.diskUsed, 0)",
        "// Line_Reference 206: \t\t\tatomic.StoreInt64(&fs.diskLimit, 0)",
        "// Line_Reference 239: \t\t\tg.Assert(IsErrorCode(err, ErrCodePathResolution)).IsTrue()",
        "// Line_Reference 245: \t\t\tg.Assert(atomic.LoadInt64(&fs.diskUsed)).Equal(int64(0))",
        "// Line_Reference 249: \t\t\trfs.reset()",
        "// Line_Reference 271: \t\t\tg.Assert(errors.Is(err, os.ErrExist)).IsTrue()",
        "// Line_Reference 277: \t\t\tg.Assert(errors.Is(err, os.ErrExist)).IsTrue()",
        "// Line_Reference 281: \t\t\terr := fs.Rename(\"source.txt\", \"/\")",
        "// Line_Reference 283: \t\t\tg.Assert(errors.Is(err, os.ErrExist)).IsTrue()",
        "// Line_Reference 289: \t\t\tg.Assert(IsErrorCode(err, ErrCodePathResolution)).IsTrue()",
        "// Line_Reference 297: \t\t\tg.Assert(IsErrorCode(err, ErrCodePathResolution)).IsTrue()",
        "// Line_Reference 306: \t\t\tg.Assert(errors.Is(err, os.ErrNotExist)).IsTrue()",
        "// Line_Reference 323: \t\t\tg.Assert(errors.Is(err, os.ErrNotExist)).IsTrue()",
        "// Line_Reference 333: \t\t\tg.Assert(errors.Is(err, os.ErrNotExist)).IsTrue()",
        "// Line_Reference 346: \t\t\trfs.reset()",
        "// Line_Reference 361: \t\t\tatomic.StoreInt64(&fs.diskUsed, int64(utf8.RuneCountInString(\"test content\")))",
        "// Line_Reference 367: \t\t\tg.Assert(errors.Is(err, os.ErrNotExist)).IsTrue()",
        "// Line_Reference 375: \t\t\tg.Assert(IsErrorCode(err, ErrCodePathResolution)).IsTrue()",
        "// Line_Reference 379: \t\t\terr := os.MkdirAll(filepath.Join(rfs.root, \"/nested/in/dir\"), 0o755)",
        "// Line_Reference 387: \t\t\tg.Assert(IsErrorCode(err, ErrCodePathResolution)).IsTrue()",
        "// Line_Reference 391: \t\t\tg.Assert(IsErrorCode(err, ErrCodePathResolution)).IsTrue()",
        "// Line_Reference 395: \t\t\terr := os.Mkdir(filepath.Join(rfs.root, \"/server/dir\"), 0o755)",
        "// Line_Reference 400: \t\t\tg.Assert(errors.Is(err, os.ErrNotExist)).IsTrue()",
        "// Line_Reference 404: \t\t\tatomic.StoreInt64(&fs.diskLimit, 2)",
        "// Line_Reference 408: \t\t\tg.Assert(IsErrorCode(err, ErrCodeDiskSpace)).IsTrue()",
        "// Line_Reference 436: \t\t\tg.Assert(atomic.LoadInt64(&fs.diskUsed)).Equal(int64(utf8.RuneCountInString(\"test content\")) * 3)",
        "// Line_Reference 457: \t\t\trfs.reset()",
        "// Line_Reference 458: ",
        "// Line_Reference 459: \t\t\tatomic.StoreInt64(&fs.diskUsed, 0)",
        "// Line_Reference 460: \t\t\tatomic.StoreInt64(&fs.diskLimit, 0)",
        "// Line_Reference 475: \t\t\tatomic.StoreInt64(&fs.diskUsed, int64(utf8.RuneCountInString(\"test content\")))",
        "// Line_Reference 483: \t\t\tg.Assert(IsErrorCode(err, ErrCodePathResolution)).IsTrue()",
        "// Line_Reference 489: \t\t\tg.Assert(err.Error()).Equal(\"cannot delete root server directory\")",
        "// Line_Reference 507: \t\t\tg.Assert(errors.Is(err, os.ErrNotExist)).IsTrue()",
        "// Line_Reference 509: \t\t\tg.Assert(atomic.LoadInt64(&fs.diskUsed)).Equal(int64(0))",
        "// Line_Reference 527: \t\t\tatomic.StoreInt64(&fs.diskUsed, int64(utf8.RuneCountInString(\"test content\")*3))",
        "// Line_Reference 531: \t\t\tg.Assert(atomic.LoadInt64(&fs.diskUsed)).Equal(int64(0))",
        "// Line_Reference 536: \t\t\t\tg.Assert(errors.Is(err, os.ErrNotExist)).IsTrue()",
        "// Line_Reference 592: \t\t\tg.Assert(IsErrorCode(err, ErrCodePathResolution)).IsTrue()",
        "// Line_Reference 611: \t\t\tg.Assert(IsErrorCode(err, ErrCodePathResolution)).IsTrue()",
        "// Line_Reference 615: \t\t\trfs.reset()",
        "// Line_Reference 616: ",
        "// Line_Reference 617: \t\t\tatomic.StoreInt64(&fs.diskUsed, 0)",
        "// Line_Reference 618: \t\t\tatomic.StoreInt64(&fs.diskLimit, 0)"
    ]
}
