{
    "cve_id": "CVE-2015-4410",
    "cve_description": "The Moped::BSON::ObjecId.legal? method in rubygem-moped before commit dd5a7c14b5d2e466f7875d079af71ad19774609b allows remote attackers to cause a denial of service (worker resource consumption) or perform a cross-site scripting (XSS) attack via a crafted string.",
    "cve_publish_date": "2020-02-20",
    "cwe_id": "CWE-20",
    "cwe_name": "Improper Input Validation",
    "cwe_description": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.",
    "commit_message": "Merge Replica Set Refactor\n\n* Removes Server, and Socket; replaced with Node, and Connection.\n\n  Replica sets are now much more robustly supported, including failover\n  and discovery.\n\n* Refactors specs.\n\n  Internal APIs are now tested with integration specs through the public\n  APIs.\n\n* More documentation.",
    "type_of_change": "Modification",
    "filename_of_changes": "cluster.rb",
    "code_language": "Ruby",
    "number_of_lines_added_for_mitigation": "104",
    "number_of_lines_deleted_vulnerable_to_cve": "154",
    "vulnerable_lines": [
        "// Line_Reference 3:   # @api private",
        "// Line_Reference 4:   #",
        "// Line_Reference 5:   # The internal class managing connections to both a single node and replica",
        "// Line_Reference 6:   # sets.",
        "// Line_Reference 7:   #",
        "// Line_Reference 8:   # @note Though the socket class itself *is* threadsafe, the cluster presently",
        "// Line_Reference 9:   #   is not. This means that in the course of normal operations sessions can be",
        "// Line_Reference 10:   #   shared across threads, but in failure modes (when a resync is required),",
        "// Line_Reference 11:   #   things can possibly go wrong.",
        "// Line_Reference 14:     # @return [Array] the user supplied seeds",
        "// Line_Reference 17:     # @return [Boolean] whether this is a direct connection",
        "// Line_Reference 18:     attr_reader :direct",
        "// Line_Reference 19: ",
        "// Line_Reference 20:     # @return [Array] all available nodes",
        "// Line_Reference 21:     attr_reader :servers",
        "// Line_Reference 22: ",
        "// Line_Reference 23:     # @return [Array] seeds gathered from cluster discovery",
        "// Line_Reference 24:     attr_reader :dynamic_seeds",
        "// Line_Reference 25: ",
        "// Line_Reference 26:     # @param [Array] seeds an array of host:port pairs",
        "// Line_Reference 27:     # @param [Boolean] direct (false) whether to connect directly to the hosts",
        "// Line_Reference 28:     # provided or to find additional available nodes.",
        "// Line_Reference 29:     def initialize(seeds, direct = false)",
        "// Line_Reference 30:       @seeds  = seeds",
        "// Line_Reference 31:       @direct = direct",
        "// Line_Reference 32: ",
        "// Line_Reference 33:       @servers = []",
        "// Line_Reference 34:       @dynamic_seeds = []",
        "// Line_Reference 35:     end",
        "// Line_Reference 36: ",
        "// Line_Reference 37:     # @return [Array] available secondary nodes",
        "// Line_Reference 38:     def secondaries",
        "// Line_Reference 39:       servers.select(&:secondary?)",
        "// Line_Reference 40:     end",
        "// Line_Reference 41: ",
        "// Line_Reference 42:     # @return [Array] available primary nodes",
        "// Line_Reference 43:     def primaries",
        "// Line_Reference 44:       servers.select(&:primary?)",
        "// Line_Reference 45:     end",
        "// Line_Reference 46: ",
        "// Line_Reference 47:     # @return [Array] all known addresses from user supplied seeds, dynamically",
        "// Line_Reference 48:     # discovered seeds, and active servers.",
        "// Line_Reference 49:     def known_addresses",
        "// Line_Reference 50:       [].tap do |addresses|",
        "// Line_Reference 51:         addresses.concat seeds",
        "// Line_Reference 52:         addresses.concat dynamic_seeds",
        "// Line_Reference 53:         addresses.concat servers.map { |server| server.address }",
        "// Line_Reference 54:       end.uniq",
        "// Line_Reference 55:     end",
        "// Line_Reference 56: ",
        "// Line_Reference 57:     def remove(server)",
        "// Line_Reference 58:       servers.delete(server)",
        "// Line_Reference 61:     def reconnect",
        "// Line_Reference 62:       @servers = servers.map { |server| Server.new(server.address) }",
        "// Line_Reference 63:     end",
        "// Line_Reference 64: ",
        "// Line_Reference 65:     def sync",
        "// Line_Reference 66:       known = known_addresses.shuffle",
        "// Line_Reference 67:       seen  = {}",
        "// Line_Reference 68: ",
        "// Line_Reference 69:       sync_seed = ->(seed) do",
        "// Line_Reference 70:         server = Server.new seed",
        "// Line_Reference 71: ",
        "// Line_Reference 72:         unless seen[server.resolved_address]",
        "// Line_Reference 73:           seen[server.resolved_address] = true",
        "// Line_Reference 74: ",
        "// Line_Reference 75:           hosts = sync_server(server)",
        "// Line_Reference 76: ",
        "// Line_Reference 77:           hosts.each do |host|",
        "// Line_Reference 78:             sync_seed[host]",
        "// Line_Reference 79:           end",
        "// Line_Reference 83:       known.each do |seed|",
        "// Line_Reference 84:         sync_seed[seed]",
        "// Line_Reference 85:       end",
        "// Line_Reference 86: ",
        "// Line_Reference 87:       unless servers.empty?",
        "// Line_Reference 88:         @dynamic_seeds = servers.map(&:address)",
        "// Line_Reference 89:       end",
        "// Line_Reference 90: ",
        "// Line_Reference 91:       true",
        "// Line_Reference 94:     def sync_server(server)",
        "// Line_Reference 95:       [].tap do |hosts|",
        "// Line_Reference 96:         socket = server.socket",
        "// Line_Reference 97: ",
        "// Line_Reference 98:         if socket.connect",
        "// Line_Reference 99:           info = socket.simple_query Protocol::Command.new(:admin, ismaster: 1)",
        "// Line_Reference 100: ",
        "// Line_Reference 101:           if info[\"ismaster\"]",
        "// Line_Reference 102:             server.primary = true",
        "// Line_Reference 103:           end",
        "// Line_Reference 105:           if info[\"secondary\"]",
        "// Line_Reference 106:             server.secondary = true",
        "// Line_Reference 107:           end",
        "// Line_Reference 109:           if info[\"primary\"]",
        "// Line_Reference 110:             hosts.push info[\"primary\"]",
        "// Line_Reference 111:           end",
        "// Line_Reference 112: ",
        "// Line_Reference 113:           if info[\"hosts\"]",
        "// Line_Reference 114:             hosts.concat info[\"hosts\"]",
        "// Line_Reference 115:           end",
        "// Line_Reference 117:           if info[\"passives\"]",
        "// Line_Reference 118:             hosts.concat info[\"passives\"]",
        "// Line_Reference 120: ",
        "// Line_Reference 121:           merge(server)",
        "// Line_Reference 122: ",
        "// Line_Reference 124:       end.uniq",
        "// Line_Reference 125:     end",
        "// Line_Reference 126: ",
        "// Line_Reference 127:     def merge(server)",
        "// Line_Reference 128:       previous = servers.find { |other| other == server }",
        "// Line_Reference 129:       primary = server.primary?",
        "// Line_Reference 130:       secondary = server.secondary?",
        "// Line_Reference 132:       if previous",
        "// Line_Reference 133:         previous.merge(server)",
        "// Line_Reference 135:         servers << server",
        "// Line_Reference 139:     # @param [:read, :write] mode the type of socket to return",
        "// Line_Reference 140:     # @return [Socket] a socket valid for +mode+ operations",
        "// Line_Reference 141:     def socket_for(mode)",
        "// Line_Reference 142:       sync unless primaries.any? || (secondaries.any? && mode == :read)",
        "// Line_Reference 143: ",
        "// Line_Reference 144:       server = nil",
        "// Line_Reference 145:       while primaries.any? || (secondaries.any? && mode == :read)",
        "// Line_Reference 146:         if mode == :write || secondaries.empty?",
        "// Line_Reference 147:           server = primaries.sample",
        "// Line_Reference 148:         else",
        "// Line_Reference 149:           server = secondaries.sample",
        "// Line_Reference 150:         end",
        "// Line_Reference 151: ",
        "// Line_Reference 152:         if server",
        "// Line_Reference 153:           socket = server.socket",
        "// Line_Reference 154:           socket.connect unless socket.connection",
        "// Line_Reference 155: ",
        "// Line_Reference 156:           if socket.alive?",
        "// Line_Reference 157:             break server",
        "// Line_Reference 158:           else",
        "// Line_Reference 159:             remove server",
        "// Line_Reference 160:           end",
        "// Line_Reference 164:       unless server",
        "// Line_Reference 165:         raise Errors::ConnectionFailure.new(\"Could not connect to any primary or secondary servers\")",
        "// Line_Reference 167: ",
        "// Line_Reference 168:       socket = server.socket",
        "// Line_Reference 169:       socket.apply_auth auth",
        "// Line_Reference 170:       socket",
        "// Line_Reference 178:     # Log in to +database+ with +username+ and +password+. Does not perform the",
        "// Line_Reference 179:     # actual log in, but saves the credentials for later authentication on a",
        "// Line_Reference 180:     # socket.",
        "// Line_Reference 181:     def login(database, username, password)",
        "// Line_Reference 182:       auth[database.to_s] = [username, password]",
        "// Line_Reference 183:     end",
        "// Line_Reference 185:     # Log out of +database+. Does not perform the actual log out, but will log",
        "// Line_Reference 186:     # out when the socket is used next.",
        "// Line_Reference 187:     def logout(database)",
        "// Line_Reference 188:       auth.delete(database.to_s)",
        "// Line_Reference 192: "
    ]
}
