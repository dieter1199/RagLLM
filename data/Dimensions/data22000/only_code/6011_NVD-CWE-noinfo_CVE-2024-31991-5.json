from mealie.pkgs import img
async with AsyncClient() as client:
responses: list[Response] = await gather_with_concurrency(10, *tasks, ignore_exceptions=True)
@staticmethod
def _validate_image_url(url: str) -> bool:
# sourcery skip: invert-any-all, use-any
"""
Validates that the URL is of an allowed source and restricts certain sources to prevent
malicious images from being downloaded.
"""
invalid_domains = {"127.0.0.1", "localhost"}
for domain in invalid_domains:
if domain in url:
return False
return True
async def scrape_image(self, image_url) -> None:
if not self._validate_image_url(image_url):
self.logger.error(f"Invalid image URL: {image_url}")
raise InvalidDomainError(f"Invalid domain: {image_url}")
pass
image_url, _ = await largest_content_len(image_url)
image_url = image_url.get("url")
ext = image_url.split(".")[-1]
async with AsyncClient() as client:
r = await client.get(image_url, headers={"User-Agent": _FIREFOX_UA})
