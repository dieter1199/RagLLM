describe('Fetch Tests', function() {
beforeEach(function(done) {
httpServer = http.createServer(function(req, res) {
req.on('readable', function() {
req.on('end', function() {
httpsServer = https.createServer(httpsOptions, function(req, res) {
httpServer.listen(HTTP_PORT, function() {
afterEach(function(done) {
httpServer.close(function() {
it('should fetch HTTP data', function(done) {
req.on('data', function(chunk) {
req.on('end', function() {
it('should fetch HTTPS data', function(done) {
req.on('data', function(chunk) {
req.on('end', function() {
it('should fetch HTTP data with redirects', function(done) {
req.on('data', function(chunk) {
req.on('end', function() {
it('should return error for too many redirects', function(done) {
req.on('data', function(chunk) {
req.on('error', function(err) {
req.on('end', function() {});
it('should fetch HTTP data with custom redirect limit', function(done) {
req.on('data', function(chunk) {
req.on('end', function() {
it('should return error for custom redirect limit', function(done) {
req.on('data', function(chunk) {
req.on('error', function(err) {
req.on('end', function() {});
it('should return disable redirects', function(done) {
req.on('data', function(chunk) {
req.on('error', function(err) {
req.on('end', function() {});
it('should unzip compressed HTTP data', function(done) {
req.on('data', function(chunk) {
req.on('end', function() {
it('should return error for unresolved host', function(done) {
req.on('data', function(chunk) {
req.on('error', function(err) {
req.on('end', function() {});
it('should return error for invalid status', function(done) {
req.on('data', function(chunk) {
req.on('error', function(err) {
req.on('end', function() {});
it('should allow invalid status', function(done) {
req.on('data', function(chunk) {
req.on('error', function(err) {
req.on('end', function() {
it('should return error for invalid url', function(done) {
req.on('data', function(chunk) {
req.on('error', function(err) {
req.on('end', function() {});
it('should return timeout error', function(done) {
req.on('data', function(chunk) {
req.on('error', function(err) {
req.on('end', function() {});
it('should handle basic HTTP auth', function(done) {
req.on('data', function(chunk) {
req.on('end', function() {
it('should return error for invalid protocol', function(done) {
req.on('data', function(chunk) {
req.on('error', function(err) {
req.on('end', function() {});
it('should set cookie value', function(done) {
req.on('data', function(chunk) {
req.on('end', function() {
it('should set user agent', function(done) {
req.on('data', function(chunk) {
req.on('end', function() {
it('should post data', function(done) {
req.on('data', function(chunk) {
req.on('end', function() {
it('should post stream data', function(done) {
req.on('data', function(chunk) {
req.on('end', function() {
let writeNext = function() {
it('should return error for invalid cert', function(done) {
req.on('data', function(chunk) {
req.on('error', function(err) {
req.on('end', function() {});