sprintf (op->buf_asm, "packed-switch-payload %d, %d", array_size, first_key);
sprintf (op->buf_asm, "sparse-switch-payload %d", array_size);
sprintf (str, " v%i, v%i", vA, vB);
sprintf (str, " v%i, v%i", vA, vB);
sprintf (str, " v%i, v%i", vA, vB);
sprintf (str, " v%i", vA);
sprintf (str, " v%i, %#x", vA, vB);
sprintf (str, " v%i, %#04hx", vA, sB);
sprintf (str, " v%i:v%i, 0x%"PFMT64x, vA, vA + 1, lB);
sprintf (str, " v%i, v%i, v%i", vA, vB, vC);
sprintf (str, " v%i, v%i, %#x", vA, vB, vC);
sprintf (str, " v%i, v%i, %#x", vA, vB, vC);
//sprintf (str, " %i", vA*2); // vA : word -> byte
//sprintf (str, " v%i, %i", vA, vB);
//sprintf (str, " %#08x", vA*2); // vA: word -> byte
//sprintf (str, " v%i, v%i, %i", vA, vB, vC);
sprintf (str, " {v%i}", buf[4] & 0x0f);
sprintf (str, " {v%i, v%i}", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4);
sprintf (str, " {v%i, v%i, v%i}", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4, buf[5] & 0x0f);
sprintf (str, " {v%i, v%i, v%i, v%i}", buf[4] & 0x0f,
sprintf (str, " {}");
sprintf (str, ", [%04x]", vB);
sprintf (str, " {v%i..v%i}, [%04x]", vC, vC + vA - 1, vB);
sprintf (str, " {v%i}", buf[4] & 0x0f);
sprintf (str, " {v%i, v%i}", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4);
sprintf (str, " {v%i, v%i, v%i}", buf[4] & 0x0f,
sprintf (str, " {v%i, v%i, v%i, v%i}", buf[4] & 0x0f,
sprintf (str, " {}");
sprintf (str, ", [%04x]", vB);
sprintf (str, " v%i, string+%i", vA, vB);
sprintf (str, " v%i, 0x%"PFMT64x, vA, offset);
sprintf (str, " v%i, class+%i", vA, vB);
sprintf (str, " v%i, %s", vA, flag_str);
sprintf (str, " v%i, field+%i", vA, vB);
sprintf (str, " v%i, %s", vA, flag_str);
sprintf (str, " v%i, v%i, [obj+%04x]", vA, vB, vC);
sprintf (str, " v%i, v%i, [0x%"PFMT64x"]", vA, vB, offset);
sprintf (str, " v%i, thing+%i", vA, vB);
sprintf (str, " v%i, 0x%"PFMT64x, vA, offset);
sprintf (str, " v%i, v%i, %s", vA, vB, flag_str);
sprintf (str, " v%i, v%i, class+%i", vA, vB, vC);
sprintf (str, " v%i, v%i, %s", vA, vB, flag_str);
sprintf (str, " v%i, v%i, field+%i", vA, vB, vC);
sprintf (str, " v%i, string+%i", vA, vB);
sprintf (str, " v%i, 0x%"PFMT64x, vA, offset);
sprintf (str, " {v%i..v%i}, %s", vC, vC + vA - 1, flag_str);
sprintf (str, " {v%i..v%i}, class+%i", vC, vC + vA - 1, vB);
sprintf (str, " {v%i..v%i}, %s", vC, vC + vA - 1, flag_str);
sprintf (str, " {v%i..v%i}, method+%i", vC, vC + vA - 1, vB);
sprintf (str, " {v%i}", buf[4] & 0x0f);
sprintf (str, " {v%i, v%i}", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4);
sprintf (str, " {v%i, v%i, v%i}", buf[4] & 0x0f,
sprintf (str, " {v%i, v%i, v%i, v%i}", buf[4] & 0x0f,
sprintf (str, " {v%i, v%i, v%i, v%i, v%i}", buf[4] & 0x0f,
sprintf (str, " {}");
sprintf (str, ", %s ; 0x%x", flag_str, vB);
sprintf (str, ", class+%i", vB);
sprintf (str, ", %s ; 0x%x", flag_str, vB);
sprintf (str, ", method+%i", vB);