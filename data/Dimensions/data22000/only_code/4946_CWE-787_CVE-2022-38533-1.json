/* Returns the end address of the segment + 1.  */
#define SEGMENT_END(segment, start)					\
(start + (segment->p_memsz > segment->p_filesz			\
? segment->p_memsz : segment->p_filesz))
#define SECTION_SIZE(section, segment)					\
(((section->flags & (SEC_HAS_CONTENTS | SEC_THREAD_LOCAL))		\
!= SEC_THREAD_LOCAL || segment->p_type == PT_TLS)			\
? section->size : 0)
/* Returns TRUE if the given section is contained within
the given segment.  VMA addresses are compared.  */
#define IS_CONTAINED_BY_VMA(section, segment, opb)			\
(section->vma * (opb) >= segment->p_vaddr				\
&& (section->vma * (opb) + SECTION_SIZE (section, segment)		\
<= (SEGMENT_END (segment, segment->p_vaddr))))
/* Returns TRUE if the given section is contained within
the given segment.  LMA addresses are compared.  */
#define IS_CONTAINED_BY_LMA(section, segment, base, opb)		\
(section->lma * (opb) >= base						\
&& (section->lma + SECTION_SIZE (section, segment) / (opb) >= section->lma) \
&& (section->lma * (opb) + SECTION_SIZE (section, segment)		\
<= SEGMENT_END (segment, base)))
/* Handle PT_NOTE segment.  */
#define IS_NOTE(p, s)							\
(p->p_type == PT_NOTE							\
&& elf_section_type (s) == SHT_NOTE					\
&& (bfd_vma) s->filepos >= p->p_offset				\
&& ((bfd_vma) s->filepos + s->size					\
<= p->p_offset + p->p_filesz))
/* Special case: corefile "NOTE" section containing regs, prpsinfo
etc.  */
#define IS_COREFILE_NOTE(p, s)						\
(IS_NOTE (p, s)							\
&& bfd_get_format (ibfd) == bfd_core					\
&& s->vma == 0							\
&& s->lma == 0)
((((segment->p_paddr							\
? IS_CONTAINED_BY_LMA (section, segment, segment->p_paddr, opb)	\
: IS_CONTAINED_BY_VMA (section, segment, opb))			\
|| IS_NOTE (segment, section))					\
|| SECTION_SIZE (section, segment) > 0				\
(seg1->field >= SEGMENT_END (seg2, seg2->field))
extra_length = (SEGMENT_END (segment, segment->p_vaddr)
- SEGMENT_END (segment2, segment2->p_vaddr));
extra_length = (SEGMENT_END (segment2, segment2->p_vaddr)
- SEGMENT_END (segment, segment->p_vaddr));
if (IS_CONTAINED_BY_LMA (output_section, segment, map->p_paddr,
opb)
|| IS_COREFILE_NOTE (segment, section)
|| (bed->want_p_paddr_set_to_zero
&& IS_CONTAINED_BY_VMA (output_section, segment, opb)))
if (IS_CONTAINED_BY_LMA (output_section, segment, map->p_paddr,
opb)
|| IS_COREFILE_NOTE (segment, section))
#undef SEGMENT_END
#undef SECTION_SIZE
#undef IS_CONTAINED_BY_VMA
#undef IS_CONTAINED_BY_LMA
#undef IS_NOTE
#undef IS_COREFILE_NOTE
