{
    "cve_id": "CVE-2015-1521",
    "cve_description": "analyzer/protocol/dnp3/DNP3.cc in Bro before 2.3.2 does not properly handle zero values of a packet length, which allows remote attackers to cause a denial of service (buffer overflow or buffer over-read if NDEBUG; otherwise assertion failure) via a crafted DNP3 packet.",
    "cve_publish_date": "2017-04-24",
    "cwe_id": "CWE-119",
    "cwe_name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
    "cwe_description": "The product performs operations on a memory buffer, but it reads from or writes to a memory location outside the buffer's intended boundary. This may result in read or write operations on unexpected memory locations that could be linked to other variables, data structures, or internal program data.",
    "commit_message": "DNP3: fix reachable assertion and buffer over-read/overflow.\n\nA DNP3 packet using a link layer header that specifies a zero length can\ntrigger an assertion failure if assertions are enabled.  Assertions are\nenabled unless Bro is compiled with the NDEBUG preprocessor macro\ndefined.  The default configuration of Bro will define this macro and so\ndisables assertions, but using the --enable-debug option in the\nconfigure script will enable assertions.  When assertions are disabled,\nor also for certain length values, the DNP3 parser may attempt to pass a\nnegative value as the third argument to memcpy (number of bytes to copy)\nand result in a buffer over-read or overflow.\n\nReported by Travis Emmert.",
    "type_of_change": "Modification",
    "filename_of_changes": "DNP3.cc",
    "code_language": "C++",
    "number_of_lines_added_for_mitigation": "51",
    "number_of_lines_deleted_vulnerable_to_cve": "7",
    "vulnerable_lines": [
        "// Line_Reference 141: \t\t\tif ( ! AddToBuffer(endp, PSEUDO_APP_LAYER_INDEX, &data, &len) )",
        "// Line_Reference 189: \t\t\tassert(endp->pkt_length);",
        "// Line_Reference 200: \t\t\tif ( ! AddToBuffer(endp, n, &data, &len) )",
        "// Line_Reference 216: bool DNP3_Base::AddToBuffer(Endpoint* endp, int target_len, const u_char** data, int* len)",
        "// Line_Reference 219: \t\treturn true;",
        "// Line_Reference 228: \treturn endp->buffer_len == target_len;",
        "// Line_Reference 260: \t\tassert(data + n < endp->buffer + endp->buffer_len);"
    ]
}
