{
    "cve_id": "CVE-2014-0156",
    "cve_description": "Awesome spawn contains OS command injection vulnerability, which allows execution of additional commands passed to Awesome spawn as arguments. If untrusted input was included in command arguments, attacker could use this flaw to execute arbitrary command.",
    "cve_publish_date": "2022-06-30",
    "cwe_id": "CWE-78",
    "cwe_name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
    "cwe_description": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
    "commit_message": "Separate command line building and sanitizing into its own class.",
    "type_of_change": "Modification",
    "filename_of_changes": "awesome_spawn.rb",
    "code_language": "Ruby",
    "number_of_lines_added_for_mitigation": "3",
    "number_of_lines_deleted_vulnerable_to_cve": "50",
    "vulnerable_lines": [
        "// Line_Reference 6: require \"shellwords\"",
        "// Line_Reference 103:   # Build the full command line.",
        "// Line_Reference 104:   #",
        "// Line_Reference 105:   # @param [String] command The command to run",
        "// Line_Reference 106:   # @param [Hash,Array] params Optional command line parameters. They can",
        "// Line_Reference 107:   #   be passed as a Hash or associative Array. The values are sanitized to",
        "// Line_Reference 108:   #   prevent command line injection.  Keys as symbols are prefixed with `--`,",
        "// Line_Reference 109:   #   and `_` is replaced with `-`.",
        "// Line_Reference 110:   #",
        "// Line_Reference 111:   #   - `{:key => \"value\"}`            generates `--key value`",
        "// Line_Reference 112:   #   - `{\"--key\" => \"value\"}`         generates `--key value`",
        "// Line_Reference 113:   #   - `{:key= => \"value\"}`           generates `--key=value`",
        "// Line_Reference 114:   #   - `{\"--key=\" => \"value\"}`        generates `--key=value`",
        "// Line_Reference 115:   #   - `{:key_name => \"value\"}`       generates `--key-name value`",
        "// Line_Reference 116:   #   - `{:key => nil}`                generates `--key`",
        "// Line_Reference 117:   #   - `{\"-f\" => [\"file1\", \"file2\"]}` generates `-f file1 file2`",
        "// Line_Reference 118:   #   - `{nil => [\"file1\", \"file2\"]}`  generates `file1 file2`",
        "// Line_Reference 119:   #",
        "// Line_Reference 120:   # @return [String] The full command line",
        "// Line_Reference 122:     return command.to_s if params.nil? || params.empty?",
        "// Line_Reference 123:     \"#{command} #{assemble_params(sanitize(params))}\"",
        "// Line_Reference 128:   def sanitize(params)",
        "// Line_Reference 129:     return [] if params.nil? || params.empty?",
        "// Line_Reference 130:     params.collect do |k, v|",
        "// Line_Reference 131:       [sanitize_key(k), sanitize_value(v)]",
        "// Line_Reference 132:     end",
        "// Line_Reference 133:   end",
        "// Line_Reference 134: ",
        "// Line_Reference 135:   def sanitize_key(key)",
        "// Line_Reference 136:     case key",
        "// Line_Reference 137:     when Symbol then \"--#{key.to_s.tr(\"_\", \"-\")}\"",
        "// Line_Reference 138:     else             key",
        "// Line_Reference 139:     end",
        "// Line_Reference 140:   end",
        "// Line_Reference 141: ",
        "// Line_Reference 142:   def sanitize_value(value)",
        "// Line_Reference 143:     case value",
        "// Line_Reference 144:     when Array    then value.collect { |i| i.to_s.shellescape }",
        "// Line_Reference 145:     when NilClass then value",
        "// Line_Reference 146:     else               value.to_s.shellescape",
        "// Line_Reference 147:     end",
        "// Line_Reference 148:   end",
        "// Line_Reference 149: ",
        "// Line_Reference 150:   def assemble_params(sanitized_params)",
        "// Line_Reference 151:     sanitized_params.collect do |pair|",
        "// Line_Reference 152:       pair_joiner = pair.first.to_s.end_with?(\"=\") ? \"\" : \" \"",
        "// Line_Reference 153:       pair.flatten.compact.join(pair_joiner)",
        "// Line_Reference 154:     end.join(\" \")",
        "// Line_Reference 155:   end",
        "// Line_Reference 156: "
    ]
}
