{
    "cve_id": "CVE-2024-35183",
    "cve_description": "wolfictl is a command line tool for working with Wolfi. A git authentication issue in versions prior to 0.16.10 allows a local userâ€™s GitHub token to be sent to remote servers other than `github.com`. Most git-dependent functionality in wolfictl relies on its own `git` package, which contains centralized logic for implementing interactions with git repositories. Some of this functionality requires authentication in order to access private repositories. A central function `GetGitAuth` looks for a GitHub token in the environment variable `GITHUB_TOKEN` and returns it as an HTTP basic auth object to be used with the `github.com/go-git/go-git/v5` library. Most callers (direct or indirect) of `GetGitAuth` use the token to authenticate to github.com only; however, in some cases callers were passing this authentication without checking that the remote git repository was hosted on github.com. This behavior has existed in one form or another since commit 0d06e1578300327c212dda26a5ab31d09352b9d0 - committed January 25, 2023. This impacts anyone who ran the `wolfictl check update` commands with a Melange configuration that included a `git-checkout` directive step that referenced a git repository not hosted on github.com. This also impacts anyone who ran `wolfictl update <url>` with a remote URL outside of github.com. Additionally, these subcommands must have run with the `GITHUB_TOKEN` environment variable set to a valid GitHub token. Users should upgrade to version 0.16.10 to receive a patch.",
    "cve_publish_date": "2024-05-15",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Git based commands, only use GITHUB_TOKEN when interacting with GitHub's API\n\nThis change also removes the submodules git update as this is not used anymore, therefore does not need updating with the new GetGitAuth signature.\n\nSigned-off-by: James Rawlings <jrawlings@chainguard.dev>",
    "type_of_change": "Modification",
    "filename_of_changes": "update.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "12",
    "number_of_lines_deleted_vulnerable_to_cve": "48",
    "vulnerable_lines": [
        "// Line_Reference 6: \t\"errors\"",
        "// Line_Reference 28: \t\"github.com/wolfi-dev/wolfictl/pkg/git/submodules\"",
        "// Line_Reference 143: \t\t\tAuth:              wgit.GetGitAuth(),",
        "// Line_Reference 404: \t// if mapping data has a strip prefix, add it back in to the version for when updating git modules",
        "// Line_Reference 405: \tlatestVersionWithPrefix := newVersion.Version",
        "// Line_Reference 406: \tghm := o.PackageConfigs[packageName].Config.Update.GitHubMonitor",
        "// Line_Reference 407: \tif ghm != nil {",
        "// Line_Reference 408: \t\tif ghm.StripPrefix != \"\" {",
        "// Line_Reference 409: \t\t\tlatestVersionWithPrefix = ghm.StripPrefix + latestVersionWithPrefix",
        "// Line_Reference 410: \t\t}",
        "// Line_Reference 411: \t}",
        "// Line_Reference 412: \t// some repos could use git submodules, let's check if a submodule file exists and bump any matching packages",
        "// Line_Reference 413: \terr = o.updateGitModules(root, packageName, latestVersionWithPrefix, worktree)",
        "// Line_Reference 414: \tif err != nil {",
        "// Line_Reference 415: \t\treturn fmt.Sprintf(\"failed to update git modules: %s\", err.Error()), nil",
        "// Line_Reference 416: \t}",
        "// Line_Reference 417: ",
        "// Line_Reference 537: // some melange config repos use submodules to pull in git repositories into the source dir before the melange pipelines run",
        "// Line_Reference 538: // this function is a noop if no git submodules exist",
        "// Line_Reference 539: func (o *Options) updateGitModules(dir, packageName, version string, wt *git.Worktree) error {",
        "// Line_Reference 540: \t// if no gitmodules file exist this in a noop",
        "// Line_Reference 541: \tif _, err := os.Stat(filepath.Join(dir, \".gitmodules\")); errors.Is(err, os.ErrNotExist) {",
        "// Line_Reference 542: \t\treturn nil",
        "// Line_Reference 543: \t}",
        "// Line_Reference 544: ",
        "// Line_Reference 545: \tghm := o.PackageConfigs[packageName].Config.Update.GitHubMonitor",
        "// Line_Reference 546: ",
        "// Line_Reference 547: \tif ghm == nil {",
        "// Line_Reference 548: \t\to.Logger.Printf(\"package %s  is not a github repo in mapping data, not attempting to bump gitmodules\", packageName)",
        "// Line_Reference 549: \t\treturn nil",
        "// Line_Reference 550: \t}",
        "// Line_Reference 551: ",
        "// Line_Reference 552: \tif ghm.Identifier == \"\" {",
        "// Line_Reference 553: \t\to.Logger.Printf(\"no identifier found in mapping data for package %s, not attempting to bump gitmodules\", packageName)",
        "// Line_Reference 554: \t\treturn nil",
        "// Line_Reference 555: \t}",
        "// Line_Reference 556: ",
        "// Line_Reference 557: \tparts := strings.Split(ghm.Identifier, \"/\")",
        "// Line_Reference 558: \tif len(parts) != 2 {",
        "// Line_Reference 559: \t\to.Logger.Printf(\"identifier doesn't look like a github owner/repo in mapping data for package %s, not attempting to bump gitmodules\", packageName)",
        "// Line_Reference 560: \t\treturn nil",
        "// Line_Reference 561: \t}",
        "// Line_Reference 562: ",
        "// Line_Reference 563: \treturn submodules.Update(dir, parts[0], parts[1], version, wt)",
        "// Line_Reference 564: }",
        "// Line_Reference 565: ",
        "// Line_Reference 643: \t\tAuth:       wgit.GetGitAuth(),",
        "// Line_Reference 644: \t\tProgress:   os.Stdout, // todo remove if this doesn't help: extra logging to help debug intermittent \"object not found\" when pushing"
    ]
}
