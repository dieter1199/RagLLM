{
    "cve_id": "CVE-2012-6704",
    "cve_description": "The sock_setsockopt function in net/core/sock.c in the Linux kernel before 3.5 mishandles negative values of sk_sndbuf and sk_rcvbuf, which allows local users to cause a denial of service (memory corruption and system crash) or possibly have unspecified other impact by leveraging the CAP_NET_ADMIN capability for a crafted setsockopt system call with the (1) SO_SNDBUF or (2) SO_RCVBUF option.",
    "cve_publish_date": "2016-12-28",
    "cwe_id": "CWE-119",
    "cwe_name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
    "cwe_description": "The product performs operations on a memory buffer, but it reads from or writes to a memory location outside the buffer's intended boundary. This may result in read or write operations on unexpected memory locations that could be linked to other variables, data structures, or internal program data.",
    "commit_message": "net: cleanups in sock_setsockopt()\n\nUse min_t()/max_t() macros, reformat two comments, use !!test_bit() to\nmatch !!sock_flag()\n\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "type_of_change": "Modification",
    "filename_of_changes": "sock.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "15",
    "number_of_lines_deleted_vulnerable_to_cve": "27",
    "vulnerable_lines": [
        "// Line_Reference 580: \t\t   about it this is right. Otherwise apps have to",
        "// Line_Reference 581: \t\t   play 'guess the biggest size' games. RCVBUF/SNDBUF",
        "// Line_Reference 582: \t\t   are treated in BSD as hints */",
        "// Line_Reference 583: ",
        "// Line_Reference 584: \t\tif (val > sysctl_wmem_max)",
        "// Line_Reference 585: \t\t\tval = sysctl_wmem_max;",
        "// Line_Reference 588: \t\tif ((val * 2) < SOCK_MIN_SNDBUF)",
        "// Line_Reference 589: \t\t\tsk->sk_sndbuf = SOCK_MIN_SNDBUF;",
        "// Line_Reference 590: \t\telse",
        "// Line_Reference 591: \t\t\tsk->sk_sndbuf = val * 2;",
        "// Line_Reference 592: ",
        "// Line_Reference 593: \t\t/*",
        "// Line_Reference 594: \t\t *\tWake up sending tasks if we",
        "// Line_Reference 595: \t\t *\tupped the value.",
        "// Line_Reference 596: \t\t */",
        "// Line_Reference 609: \t\t   about it this is right. Otherwise apps have to",
        "// Line_Reference 610: \t\t   play 'guess the biggest size' games. RCVBUF/SNDBUF",
        "// Line_Reference 611: \t\t   are treated in BSD as hints */",
        "// Line_Reference 612: ",
        "// Line_Reference 613: \t\tif (val > sysctl_rmem_max)",
        "// Line_Reference 614: \t\t\tval = sysctl_rmem_max;",
        "// Line_Reference 632: \t\tif ((val * 2) < SOCK_MIN_RCVBUF)",
        "// Line_Reference 633: \t\t\tsk->sk_rcvbuf = SOCK_MIN_RCVBUF;",
        "// Line_Reference 634: \t\telse",
        "// Line_Reference 635: \t\t\tsk->sk_rcvbuf = val * 2;",
        "// Line_Reference 978: \t\tv.val = test_bit(SOCK_PASSCRED, &sock->flags) ? 1 : 0;",
        "// Line_Reference 1013: \t\tv.val = test_bit(SOCK_PASSSEC, &sock->flags) ? 1 : 0;"
    ]
}
