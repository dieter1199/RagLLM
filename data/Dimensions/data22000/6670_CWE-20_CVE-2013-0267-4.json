{
    "cve_id": "CVE-2013-0267",
    "cve_description": "The Privileges portion of the web GUI and the XMLRPC API in Apache VCL 2.3.x before 2.3.2, 2.2.x before 2.2.2 and 2.1 allow remote authenticated users with nodeAdmin, manageGroup, resourceGrant, or userGrant permissions to gain privileges, cause a denial of service, or conduct cross-site scripting (XSS) attacks by leveraging improper data validation.",
    "cve_publish_date": "2018-02-21",
    "cwe_id": "CWE-20",
    "cwe_name": "Improper Input Validation",
    "cwe_description": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.",
    "commit_message": "xmlrpcWrappers.php:\n-added option to supply name of reservation to XMLRPCdeployServer\n-XMLRPCremoveUserGroup and XMLRPCdeleteUserGroup did the same thing; made XMLRPCdeleteUserGroup just call XMLRPCremoveUserGroup - kept both so that scripts would not have to change because one was dropped\n-did some updates to headers to provide better documentation generation\n-changed some whitespace formatting\n-modified XMLRPCgetRequestIds - added OS, isserver, state, and if it is a server, servername to returned data-modified XMLRPCgetUserGroupAttributes - added overlapResCount to returned data; modified error return code to not be duplicated with an different error\n-modified XMLRPCremoveUserGroup - added ability to delete federated groups if user has access; added check for group being in use before deleting it and return error if it is in use\n-modified XMLRPCeditUserGroup - added ability to modify federated groups if user has access; do not attempt to update name and affiliation if they are not changed (resulted in an duplicate group name error)\n-modified XMLRPCgetUserGroupMembers - added ability to modify federated groups if user has access\n\nprivileges.php:\n-additional parameter checking\n-modified viewNodes - added serverProfileAdmin to $privs array used to determine which resource groups can be added at the node\n-modified AJsubmitAddChildNode - moved updateUserOrGroupPrivs to inside if conditional (no need to call it if no changes)\n-modified getNodeCascadePrivileges - located problem where blocking cascaded privileges does not continue to child nodes; added fix and commented it out until can properly prepare users for change\n\nutils.php:\n-modified getResourceGroups - optional argument of $id to limit returned data to just a specified resource group\n-modified getUserGroupID - added optional argument of $noadd that causes the function to return NULL instead of adding the group if it does not already exist\n-modified getTypes - removed conditional that checks for 'block' and 'cascade' with resource groups - type here is computer, image, etc.\n\ngroups.php:\n-modified addGroup - moved conditional for editgroupid to inside 'user' section",
    "type_of_change": "Modification",
    "filename_of_changes": "privileges.php",
    "code_language": "Perl",
    "number_of_lines_added_for_mitigation": "182",
    "number_of_lines_deleted_vulnerable_to_cve": "79",
    "vulnerable_lines": [
        "// Line_Reference 103: \t\tprint \"\t    <script type=\\\"dojo/method\\\" event=onClick>\\n\";",
        "// Line_Reference 112: \t\tprint \"\t    <script type=\\\"dojo/method\\\" event=onClick>\\n\";",
        "// Line_Reference 121: \t\tprint \"\t    <script type=\\\"dojo/method\\\" event=onClick>\\n\";",
        "// Line_Reference 189: \t\tprint \"\t<script type=\\\"dojo/method\\\" event=onClick>\\n\";",
        "// Line_Reference 239: \t\tprint \"\t<script type=\\\"dojo/method\\\" event=onClick>\\n\";",
        "// Line_Reference 299: \t\tprint \"\t<script type=\\\"dojo/method\\\" event=onClick>\\n\";",
        "// Line_Reference 315: \tprint \"\t  <script type=\\\"dojo/connect\\\" event=onCancel>\\n\";",
        "// Line_Reference 358: \tprint \"\t  <script type=\\\"dojo/method\\\" event=onClick>\\n\";",
        "// Line_Reference 366: \tprint \"\t  <script type=\\\"dojo/method\\\" event=onClick>\\n\";",
        "// Line_Reference 381: \tprint \"\t  <script type=\\\"dojo/connect\\\" event=onCancel>\\n\";",
        "// Line_Reference 426: \tprint \"\t  <script type=\\\"dojo/method\\\" event=onClick>\\n\";",
        "// Line_Reference 434: \tprint \"\t  <script type=\\\"dojo/method\\\" event=onClick>\\n\";",
        "// Line_Reference 449: \tprint \"\t  <script type=\\\"dojo/connect\\\" event=onCancel>\\n\";",
        "// Line_Reference 469: \t$privs = array(\"computerAdmin\",\"mgmtNodeAdmin\",  \"imageAdmin\", \"scheduleAdmin\");",
        "// Line_Reference 504: \tprint \"\t  <script type=\\\"dojo/method\\\" event=onClick>\\n\";",
        "// Line_Reference 512: \tprint \"\t  <script type=\\\"dojo/method\\\" event=onClick>\\n\";",
        "// Line_Reference 531: \tprint \"\t<script type=\\\"dojo/connect\\\" event=onKeyPress args=\\\"e\\\">\\n\";",
        "// Line_Reference 542: \tprint \"\t  <script type=\\\"dojo/method\\\" event=onClick>\\n\";",
        "// Line_Reference 550: \tprint \"\t  <script type=\\\"dojo/method\\\" event=onClick>\\n\";",
        "// Line_Reference 574: \tprint \"\t  <script type=\\\"dojo/method\\\" event=onClick>\\n\";",
        "// Line_Reference 582: \tprint \"\t  <script type=\\\"dojo/method\\\" event=onClick>\\n\";",
        "// Line_Reference 602: \tprint \"\t<script type=\\\"dojo/connect\\\" event=onKeyPress args=\\\"e\\\">\\n\";",
        "// Line_Reference 614: \tprint \"\t  <script type=\\\"dojo/method\\\" event=onClick>\\n\";",
        "// Line_Reference 622: \tprint \"\t  <script type=\\\"dojo/method\\\" event=onClick>\\n\";",
        "// Line_Reference 635: \tprint \"\t<script type=\\\"dojo/connect\\\" event=_setup>\\n\";",
        "// Line_Reference 651: \tprint \"\tManage User Group Permissions\\n\";",
        "// Line_Reference 652: \tprint \"\t<script type=\\\"dojo/method\\\" event=onClick>\\n\";",
        "// Line_Reference 653: \tprint \"\t\tselectUserGroup('$cont');\\n\";",
        "// Line_Reference 654: \tprint \"\t</script>\\n\";",
        "// Line_Reference 683: \tprint \"\tCopy Permissions\\n\";",
        "// Line_Reference 684: \tprint \"\t<script type=\\\"dojo/method\\\" event=onClick>\\n\";",
        "// Line_Reference 685: \tprint \"\t\tcopyUserGroupPrivs('$cont');\\n\";",
        "// Line_Reference 686: \tprint \"\t</script>\\n\";",
        "// Line_Reference 690: \tprint \"\tSave Selected Permissions\\n\";",
        "// Line_Reference 691: \tprint \"\t<script type=\\\"dojo/method\\\" event=onClick>\\n\";",
        "// Line_Reference 692: \tprint \"\t\tsaveUserGroupPrivs('$cont');\\n\";",
        "// Line_Reference 693: \tprint \"\t</script>\\n\";",
        "// Line_Reference 735: \t\t$text .= \"\t    <script type=\\\"dojo/method\\\" event=onClick>\";",
        "// Line_Reference 744: \t\t$text .= \"\t    <script type=\\\"dojo/method\\\" event=onClick>\";",
        "// Line_Reference 753: \t\t$text .= \"\t    <script type=\\\"dojo/method\\\" event=onClick>\";",
        "// Line_Reference 862: \t\t$text .= \"\t<script type=\\\"dojo/method\\\" event=onClick>\";",
        "// Line_Reference 922: \t\t$text .= \"\t<script type=\\\"dojo/method\\\" event=onClick>\";",
        "// Line_Reference 997: \t$nodeInfo = getNodeInfo($parent);",
        "// Line_Reference 999: \tif(! preg_match('/^[-A-Za-z0-9_. ]+$/', $newnode)) {",
        "// Line_Reference 1000: \t\t$text = \"You can only use letters, numbers, spaces,<br>\"",
        "// Line_Reference 1001: \t\t      . \"dashes(-), dots(.), and underscores(_).\";",
        "// Line_Reference 1002: \t\tprint \"dojo.byId('addChildNodeStatus').innerHTML = '$text';\";",
        "// Line_Reference 1036: \tif(count($privs))",
        "// Line_Reference 1038: \tupdateUserOrGroupPrivs($user[\"id\"], $nodeid, $privs, array(), \"user\");",
        "// Line_Reference 1113: \t# check if node matching new name already exists at parent",
        "// Line_Reference 1118: \t       .       \"name = '$newname'\";",
        "// Line_Reference 1121: \t\t$msg = \"A sibling node of that name currently exists\";",
        "// Line_Reference 1128: \t       . \"SET name = '$newname' \"",
        "// Line_Reference 1237: \t\t\t\tprint \"<font color=red>$userid not found in any known systems</font><br>\\n\";",
        "// Line_Reference 1605: \t\t($usergroup == 2 &&",
        "// Line_Reference 1743: \t\t($usergroup == 2 &&",
        "// Line_Reference 2176: /// getNodeCascadePrivileges",
        "// Line_Reference 2226: \t\t$query = \"SELECT g.name AS name, \"",
        "// Line_Reference 2236: \t\twhile($row = mysql_fetch_assoc($qh))",
        "// Line_Reference 2443: \t//print \"alert('node: $node; newuser: $newuser; newpriv: $newpriv; newprivval: $newprivval');\";",
        "// Line_Reference 2448: \t// if $newprivval is true and $newuser already has $newpriv",
        "// Line_Reference 2449: \t//   cascaded to it, do nothing",
        "// Line_Reference 2484: \t$newusergrp = getUserGroupName($newusergrpid);",
        "// Line_Reference 2487: \t//print \"alert('node: $node; newuser:grp $newuser;grp newpriv: $newpriv; newprivval: $newprivval');\";",
        "// Line_Reference 2492: \t// if $newprivval is true and $newusergrp already has $newpriv",
        "// Line_Reference 2493: \t//   cascaded to it, do nothing",
        "// Line_Reference 2530: \t//print \"alert('node: $node; resourcegrp: $resourcegrp; newpriv: $newpriv; newprivval: $newprivval');\";",
        "// Line_Reference 2535: \t// if $newprivval is true and $resourcegrp already has $newpriv",
        "// Line_Reference 2536: \t//   cascaded to it, do nothing",
        "// Line_Reference 2550: \t$tmpArr = explode('/', $resourcegrp);",
        "// Line_Reference 2551: \tupdateResourcePrivs($tmpArr[2], $node, $adds, $removes);",
        "// Line_Reference 2619: \t# FIXME validate newgroupid",
        "// Line_Reference 2663: \t$resourcesgroups = getUserResources($privs, array(\"manageGroup\"), 1);",
        "// Line_Reference 2665: \tif(! array_key_exists($newgroupid, $resourcesgroups['image']) &&",
        "// Line_Reference 2666: \t   ! array_key_exists($newgroupid, $resourcesgroups['computer']) &&",
        "// Line_Reference 2667: \t   ! array_key_exists($newgroupid, $resourcesgroups['managementnode']) &&",
        "// Line_Reference 2668: \t   ! array_key_exists($newgroupid, $resourcesgroups['schedule']) &&",
        "// Line_Reference 2669: \t   ! array_key_exists($newgroupid, $resourcesgroups['serverprofile'])) {",
        "// Line_Reference 2757: \t\t\t(! in_array(\"block\", $privs[\"usergroups\"][$groupname]['privs']) &&"
    ]
}
