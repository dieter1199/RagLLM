{
    "cve_id": "CVE-2013-6282",
    "cve_description": "The (1) get_user and (2) put_user API functions in the Linux kernel before 3.5.5 on the v6k and v7 ARM platforms do not validate certain addresses, which allows attackers to read or modify the contents of arbitrary kernel memory locations via a crafted application, as exploited in the wild against Android devices in October and November 2013.",
    "cve_publish_date": "2013-11-20",
    "cwe_id": "CWE-20",
    "cwe_name": "Improper Input Validation",
    "cwe_description": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.",
    "commit_message": "ARM: 7527/1: uaccess: explicitly check __user pointer when !CPU_USE_DOMAINS\n\nThe {get,put}_user macros don't perform range checking on the provided\n__user address when !CPU_HAS_DOMAINS.\n\nThis patch reworks the out-of-line assembly accessors to check the user\naddress against a specified limit, returning -EFAULT if is is out of\nrange.\n\n[will: changed get_user register allocation to match put_user]\n[rmk: fixed building on older ARM architectures]\n\nReported-by: Catalin Marinas <catalin.marinas@arm.com>\nSigned-off-by: Will Deacon <will.deacon@arm.com>\nCc: stable@vger.kernel.org\nSigned-off-by: Russell King <rmk+kernel@arm.linux.org.uk>",
    "type_of_change": "Modification",
    "filename_of_changes": "uaccess.h",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "27",
    "number_of_lines_deleted_vulnerable_to_cve": "13",
    "vulnerable_lines": [
        "// Line_Reference 104: #define __get_user_x(__r2,__p,__e,__s,__i...)\t\t\t\t\\",
        "// Line_Reference 109: \t\t: \"0\" (__p)\t\t\t\t\t\t\\",
        "// Line_Reference 110: \t\t: __i, \"cc\")",
        "// Line_Reference 119: \t\t\t__get_user_x(__r2, __p, __e, 1, \"lr\");\t\t\\",
        "// Line_Reference 120: \t       \t\tbreak;\t\t\t\t\t\t\\",
        "// Line_Reference 122: \t\t\t__get_user_x(__r2, __p, __e, 2, \"r3\", \"lr\");\t\\",
        "// Line_Reference 125: \t       \t\t__get_user_x(__r2, __p, __e, 4, \"lr\");\t\t\\",
        "// Line_Reference 138: #define __put_user_x(__r2,__p,__e,__s)\t\t\t\t\t\\",
        "// Line_Reference 143: \t\t: \"0\" (__p), \"r\" (__r2)\t\t\t\t\t\\",
        "// Line_Reference 153: \t\t\t__put_user_x(__r2, __p, __e, 1);\t\t\\",
        "// Line_Reference 156: \t\t\t__put_user_x(__r2, __p, __e, 2);\t\t\\",
        "// Line_Reference 159: \t\t\t__put_user_x(__r2, __p, __e, 4);\t\t\\",
        "// Line_Reference 162: \t\t\t__put_user_x(__r2, __p, __e, 8);\t\t\\"
    ]
}
