{
    "cve_id": "CVE-2021-26788",
    "cve_description": "Oryx Embedded CycloneTCP 1.7.6 to 2.0.0, fixed in 2.0.2, is affected by incorrect input validation, which may cause a denial of service (DoS). To exploit the vulnerability, an attacker needs to have TCP connectivity to the target system. Receiving a maliciously crafted TCP packet from an unauthenticated endpoint is sufficient to trigger the bug.",
    "cve_publish_date": "2021-03-08",
    "cwe_id": "CWE-20",
    "cwe_name": "Improper Input Validation",
    "cwe_description": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.",
    "commit_message": "Version 2.0.2",
    "type_of_change": "Modification",
    "filename_of_changes": "lpc54xxx_eth_driver.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "142",
    "number_of_lines_deleted_vulnerable_to_cve": "72",
    "vulnerable_lines": [
        "// Line_Reference 2:  * @file lpc546xx_eth_driver.c",
        "// Line_Reference 3:  * @brief LPC54608/LPC54618/LPC54628 Ethernet MAC driver",
        "// Line_Reference 9:  * Copyright (C) 2010-2020 Oryx Embedded SARL. All rights reserved.",
        "// Line_Reference 28:  * @version 2.0.0",
        "// Line_Reference 42: #include \"drivers/mac/lpc546xx_eth_driver.h\"",
        "// Line_Reference 53: static uint8_t txBuffer[LPC546XX_ETH_TX_BUFFER_COUNT][LPC546XX_ETH_TX_BUFFER_SIZE];",
        "// Line_Reference 56: static uint8_t rxBuffer[LPC546XX_ETH_RX_BUFFER_COUNT][LPC546XX_ETH_RX_BUFFER_SIZE];",
        "// Line_Reference 59: static Lpc546xxTxDmaDesc txDmaDesc[LPC546XX_ETH_TX_BUFFER_COUNT];",
        "// Line_Reference 62: static Lpc546xxRxDmaDesc rxDmaDesc[LPC546XX_ETH_RX_BUFFER_COUNT];",
        "// Line_Reference 68: static uint8_t txBuffer[LPC546XX_ETH_TX_BUFFER_COUNT][LPC546XX_ETH_TX_BUFFER_SIZE]",
        "// Line_Reference 71: static uint8_t rxBuffer[LPC546XX_ETH_RX_BUFFER_COUNT][LPC546XX_ETH_RX_BUFFER_SIZE]",
        "// Line_Reference 74: static Lpc546xxTxDmaDesc txDmaDesc[LPC546XX_ETH_TX_BUFFER_COUNT]",
        "// Line_Reference 77: static Lpc546xxRxDmaDesc rxDmaDesc[LPC546XX_ETH_RX_BUFFER_COUNT]",
        "// Line_Reference 89:  * @brief LPC546xx Ethernet MAC driver",
        "// Line_Reference 92: const NicDriver lpc546xxEthDriver =",
        "// Line_Reference 96:    lpc546xxEthInit,",
        "// Line_Reference 97:    lpc546xxEthTick,",
        "// Line_Reference 98:    lpc546xxEthEnableIrq,",
        "// Line_Reference 99:    lpc546xxEthDisableIrq,",
        "// Line_Reference 100:    lpc546xxEthEventHandler,",
        "// Line_Reference 101:    lpc546xxEthSendPacket,",
        "// Line_Reference 102:    lpc546xxEthUpdateMacAddrFilter,",
        "// Line_Reference 103:    lpc546xxEthUpdateMacConfig,",
        "// Line_Reference 104:    lpc546xxEthWritePhyReg,",
        "// Line_Reference 105:    lpc546xxEthReadPhyReg,",
        "// Line_Reference 114:  * @brief LPC546xx Ethernet MAC initialization",
        "// Line_Reference 119: error_t lpc546xxEthInit(NetInterface *interface)",
        "// Line_Reference 124:    TRACE_INFO(\"Initializing LPC546xx Ethernet MAC...\\r\\n\");",
        "// Line_Reference 135:    lpc546xxEthInitGpio(interface);",
        "// Line_Reference 199:       ENET_DMA_CH_DMA_CHX_RX_CTRL_RBSZ(LPC546XX_ETH_RX_BUFFER_SIZE / 4);",
        "// Line_Reference 211:    lpc546xxEthInitDmaDesc(interface);",
        "// Line_Reference 221:    NVIC_SetPriorityGrouping(LPC546XX_ETH_IRQ_PRIORITY_GROUPING);",
        "// Line_Reference 224:    NVIC_SetPriority(ETHERNET_IRQn, NVIC_EncodePriority(LPC546XX_ETH_IRQ_PRIORITY_GROUPING,",
        "// Line_Reference 225:       LPC546XX_ETH_IRQ_GROUP_PRIORITY, LPC546XX_ETH_IRQ_SUB_PRIORITY));",
        "// Line_Reference 242: //LPCXpresso54608 evaluation board?",
        "// Line_Reference 243: #if defined(USE_LPCXPRESSO_54608)",
        "// Line_Reference 250: void lpc546xxEthInitGpio(NetInterface *interface)",
        "// Line_Reference 264:    //Configure ENET_TXD1 (PA0_17)",
        "// Line_Reference 268:    //Configure ENET_TXD0 (PA4_8)",
        "// Line_Reference 272:    //Configure ENET_RX_DV (PA4_10)",
        "// Line_Reference 276:    //Configure ENET_RXD0 (PA4_11)",
        "// Line_Reference 280:    //Configure ENET_RXD1 (PA4_12)",
        "// Line_Reference 284:    //Configure ENET_TX_EN (PA4_13)",
        "// Line_Reference 288:    //Configure ENET_RX_CLK (PA4_14)",
        "// Line_Reference 292:    //Configure ENET_MDC (PA4_15)",
        "// Line_Reference 296:    //Configure ENET_MDIO (PA4_16)",
        "// Line_Reference 300:    //Configure ENET_RST as an output",
        "// Line_Reference 306:    GPIO_WritePinOutput(GPIO, 2, 26, 0);",
        "// Line_Reference 308:    GPIO_WritePinOutput(GPIO, 2, 26, 1);",
        "// Line_Reference 320: void lpc546xxEthInitDmaDesc(NetInterface *interface)",
        "// Line_Reference 325:    for(i = 0; i < LPC546XX_ETH_TX_BUFFER_COUNT; i++)",
        "// Line_Reference 338:    for(i = 0; i < LPC546XX_ETH_RX_BUFFER_COUNT; i++)",
        "// Line_Reference 353:    ENET->DMA_CH[0].DMA_CHX_TXDESC_RING_LENGTH = LPC546XX_ETH_TX_BUFFER_COUNT - 1;",
        "// Line_Reference 358:    ENET->DMA_CH[0].DMA_CHX_RXDESC_RING_LENGTH = LPC546XX_ETH_RX_BUFFER_COUNT - 1;",
        "// Line_Reference 363:  * @brief LPC546xx Ethernet MAC timer handler",
        "// Line_Reference 371: void lpc546xxEthTick(NetInterface *interface)",
        "// Line_Reference 396: void lpc546xxEthEnableIrq(NetInterface *interface)",
        "// Line_Reference 424: void lpc546xxEthDisableIrq(NetInterface *interface)",
        "// Line_Reference 448:  * @brief LPC546xx Ethernet MAC interrupt service routine",
        "// Line_Reference 500:  * @brief LPC546xx Ethernet MAC event handler",
        "// Line_Reference 504: void lpc546xxEthEventHandler(NetInterface *interface)",
        "// Line_Reference 518:          error = lpc546xxEthReceivePacket(interface);",
        "// Line_Reference 540: error_t lpc546xxEthSendPacket(NetInterface *interface,",
        "// Line_Reference 549:    if(length > LPC546XX_ETH_TX_BUFFER_SIZE)",
        "// Line_Reference 579:    if(++txIndex >= LPC546XX_ETH_TX_BUFFER_COUNT)",
        "// Line_Reference 602: error_t lpc546xxEthReceivePacket(NetInterface *interface)",
        "// Line_Reference 621:             n = MIN(n, LPC546XX_ETH_RX_BUFFER_SIZE);",
        "// Line_Reference 650:       if(++rxIndex >= LPC546XX_ETH_RX_BUFFER_COUNT)",
        "// Line_Reference 677: error_t lpc546xxEthUpdateMacAddrFilter(NetInterface *interface)",
        "// Line_Reference 727: error_t lpc546xxEthUpdateMacConfig(NetInterface *interface)",
        "// Line_Reference 770: void lpc546xxEthWritePhyReg(uint8_t opcode, uint8_t phyAddr,",
        "// Line_Reference 812: uint16_t lpc546xxEthReadPhyReg(uint8_t opcode, uint8_t phyAddr,"
    ]
}
