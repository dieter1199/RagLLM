{
    "cve_id": "CVE-2017-17862",
    "cve_description": "kernel/bpf/verifier.c in the Linux kernel through 4.14.8 ignores unreachable code, even though it would still be processed by JIT compilers. This behavior, also considered an improper branch-pruning logic issue, could possibly be used by local users for denial of service.",
    "cve_publish_date": "2017-12-27",
    "cwe_id": "CWE-20",
    "cwe_name": "Improper Input Validation",
    "cwe_description": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.",
    "commit_message": "bpf: fix branch pruning logic\n\nwhen the verifier detects that register contains a runtime constant\nand it's compared with another constant it will prune exploration\nof the branch that is guaranteed not to be taken at runtime.\nThis is all correct, but malicious program may be constructed\nin such a way that it always has a constant comparison and\nthe other branch is never taken under any conditions.\nIn this case such path through the program will not be explored\nby the verifier. It won't be taken at run-time either, but since\nall instructions are JITed the malicious program may cause JITs\nto complain about using reserved fields, etc.\nTo fix the issue we have to track the instructions explored by\nthe verifier and sanitize instructions that are dead at run time\nwith NOPs. We cannot reject such dead code, since llvm generates\nit for valid C code, since it doesn't do as much data flow\nanalysis as the verifier does.\n\nFixes: 17a5267067f3 (\"bpf: verifier (add verifier core)\")\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\nAcked-by: Daniel Borkmann <daniel@iogearbox.net>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>",
    "type_of_change": "Modification",
    "filename_of_changes": "bpf_verifier.h",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "1",
    "number_of_lines_deleted_vulnerable_to_cve": "1",
    "vulnerable_lines": [
        "// Line_Reference 118: \tint converted_op_size; /* the valid value width after perceived conversion */"
    ]
}
