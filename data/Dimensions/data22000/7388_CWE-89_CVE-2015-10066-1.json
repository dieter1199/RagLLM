{
    "cve_id": "CVE-2015-10066",
    "cve_description": "A vulnerability was found in tynx wuersch and classified as critical. Affected by this issue is the function packValue/getByCustomQuery of the file backend/base/Store.class.php. The manipulation leads to sql injection. The patch is identified as 66d4718750a741d1053d327a79e285fd50372519. It is recommended to apply a patch to fix this issue. VDB-218462 is the identifier assigned to this vulnerability.",
    "cve_publish_date": "2023-01-18",
    "cwe_id": "CWE-89",
    "cwe_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
    "cwe_description": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.",
    "commit_message": "sotre is sql-injection-safe as we work now with pdo->prepare",
    "type_of_change": "Modification",
    "filename_of_changes": "Store.class.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "34",
    "number_of_lines_deleted_vulnerable_to_cve": "26",
    "vulnerable_lines": [
        "// Line_Reference 37: \t\t\t$query .= '`id_md5`=\"' . $id . '\"';",
        "// Line_Reference 39: \t\t\t$query .= '`id`=' . $id;",
        "// Line_Reference 41: \t\t$sth = Store::$pdo->prepare($query . ';');",
        "// Line_Reference 42: \t\t$sth->execute();",
        "// Line_Reference 43: \t\t$result = $sth->fetchAll(PDO::FETCH_CLASS, ucfirst($table));",
        "// Line_Reference 60: \t\t\t$query .= '`' . $key . '`=';",
        "// Line_Reference 61: \t\t\tif(is_numeric($value))",
        "// Line_Reference 62: \t\t\t\t$query .= $value;",
        "// Line_Reference 63: \t\t\telse",
        "// Line_Reference 64: \t\t\t\t$query .= '\"' . $value . '\"';",
        "// Line_Reference 65: \t\t\t$query .= ' ' . $combination . ' ';",
        "// Line_Reference 68: \t\t$sth = Store::$pdo->prepare($query . ' LIMIT 100;');",
        "// Line_Reference 69: \t\t$sth->execute();",
        "// Line_Reference 70: \t\treturn $sth->fetchAll(PDO::FETCH_CLASS, ucfirst($table));",
        "// Line_Reference 76: \t\t$columns = '`' . implode('`, `', array_keys($data)) . '`';",
        "// Line_Reference 77: \t\t$values = '';",
        "// Line_Reference 78: \t\tforeach($data as $value){",
        "// Line_Reference 79: \t\t\t$values .= $this->packValue($value) . ', ';",
        "// Line_Reference 81: \t\t$values = substr($values, 0, -2);",
        "// Line_Reference 82: \t\t$result = Store::$pdo->exec('INSERT INTO `wuersch`.`' . $table . '`(' . $columns . ') VALUES(' . $values . ');');",
        "// Line_Reference 91: \t\t\t$columns .= '`' . $name . '`=' . $this->packValue($value) . ', ';",
        "// Line_Reference 93: \t\t$columns = substr($columns, 0, -2);",
        "// Line_Reference 94: \t\t$query = 'UPDATE `wuersch`.`' . $table . '` SET ' . $columns . ' ';",
        "// Line_Reference 96: \t\t\t$query .= 'WHERE `id_md5`=\"' . $id . '\"';",
        "// Line_Reference 98: \t\t\t$query .= 'WHERE `id`=' . $id;",
        "// Line_Reference 100: \t\treturn Store::$pdo->exec($query . ';');"
    ]
}
