{
    "cve_id": "CVE-2024-31452",
    "cve_description": "OpenFGA is a high-performance and flexible authorization/permission engine. Some end users of OpenFGA v1.5.0 or later are vulnerable to authorization bypass when calling Check or ListObjects APIs. You are very likely affected if your model involves exclusion (e.g. `a but not b`) or intersection (e.g. `a and b`). This vulnerability is fixed in v1.5.3.",
    "cve_publish_date": "2024-04-16",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Merge pull request from GHSA-8cph-m685-6v6r\n\n* fix: error handling leading to false positives\n\n* test: add a failing test due to Check and ListObjects differences\n\n* test: change test expectation for ListObjects assertion\n\n* fix: union CheckFuncReducer and associated tests\n\n* fix: intersection CheckFuncReducer\n\n* fix: exclusion CheckFuncReducer\n\n* fix: rewire the cycle detection mechanics to avoid error propagation\n\n* test: add more edge case tests for cyclical evaluations\n\n* test: rename new test that was poorly named\n\n* chore: revert minor change that was unintended\n\n* chore: tidy up changes and drop commented out code\n\n* chore: minor touchups based on some feedback\n\n* test: add test for CloneResolveCheckResponse\n\n* test: add more tests for error around intersection\n\n* test: more test assertions around cloned cached response\n\n* test: add unit test to make sure we cache CycleDetected\n\n* test: add more assertions around CycleDetected field\n\n* chore: rename test names\n\n* chore: fix datastore query count under reporting in intersection reducer",
    "type_of_change": "Modification",
    "filename_of_changes": "check.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "83",
    "number_of_lines_deleted_vulnerable_to_cve": "55",
    "vulnerable_lines": [
        "// Line_Reference 29: var (",
        "// Line_Reference 30: \tErrCycleDetected = errors.New(\"a cycle has been detected\")",
        "// Line_Reference 31: )",
        "// Line_Reference 32: ",
        "// Line_Reference 293: \t\t\t\tif errors.Is(result.err, ErrCycleDetected) {",
        "// Line_Reference 294: \t\t\t\t\tcontinue",
        "// Line_Reference 295: \t\t\t\t}",
        "// Line_Reference 315: \t}, err",
        "// Line_Reference 348: ",
        "// Line_Reference 349: \t\t\t\tif errors.Is(result.err, ErrCycleDetected) {",
        "// Line_Reference 350: \t\t\t\t\treturn &ResolveCheckResponse{",
        "// Line_Reference 351: \t\t\t\t\t\tAllowed: false,",
        "// Line_Reference 352: \t\t\t\t\t\tResolutionMetadata: &ResolveCheckResponseMetadata{",
        "// Line_Reference 353: \t\t\t\t\t\t\tDatastoreQueryCount: dbReads,",
        "// Line_Reference 354: \t\t\t\t\t\t},",
        "// Line_Reference 355: \t\t\t\t\t}, nil",
        "// Line_Reference 356: \t\t\t\t}",
        "// Line_Reference 357: ",
        "// Line_Reference 364: \t\t\tif !result.resp.GetAllowed() {",
        "// Line_Reference 378: \t}, err",
        "// Line_Reference 443: ",
        "// Line_Reference 444: \t\t\t\tif errors.Is(baseResult.err, ErrCycleDetected) {",
        "// Line_Reference 445: \t\t\t\t\treturn &ResolveCheckResponse{",
        "// Line_Reference 446: \t\t\t\t\t\tAllowed: false,",
        "// Line_Reference 447: \t\t\t\t\t\tResolutionMetadata: &ResolveCheckResponseMetadata{",
        "// Line_Reference 448: \t\t\t\t\t\t\tDatastoreQueryCount: dbReads,",
        "// Line_Reference 449: \t\t\t\t\t\t},",
        "// Line_Reference 450: \t\t\t\t\t}, nil",
        "// Line_Reference 451: \t\t\t\t}",
        "// Line_Reference 452: ",
        "// Line_Reference 467: ",
        "// Line_Reference 468: \t\t\t\tif !errors.Is(subResult.err, ErrCycleDetected) {",
        "// Line_Reference 469: \t\t\t\t\tsubErr = subResult.err",
        "// Line_Reference 470: \t\t\t\t}",
        "// Line_Reference 471: ",
        "// Line_Reference 486: \tif baseErr != nil && subErr != nil {",
        "// Line_Reference 487: \t\treturn &ResolveCheckResponse{",
        "// Line_Reference 488: \t\t\tAllowed: false,",
        "// Line_Reference 489: \t\t\tResolutionMetadata: &ResolveCheckResponseMetadata{",
        "// Line_Reference 490: \t\t\t\tDatastoreQueryCount: 0,",
        "// Line_Reference 491: \t\t\t},",
        "// Line_Reference 492: \t\t}, errors.Join(baseErr, subErr)",
        "// Line_Reference 518: \t\t\treturn resp, err",
        "// Line_Reference 560: \tresp, err := union(ctx, c.concurrencyLimit, c.checkRewrite(ctx, req, rel.GetRewrite()))",
        "// Line_Reference 617: \t\t\t\treturn response, err",
        "// Line_Reference 672: \t\t\t\treturn response, err",
        "// Line_Reference 692: \t\t\t\t\treturn response, err",
        "// Line_Reference 836: \t\tresponse := &ResolveCheckResponse{",
        "// Line_Reference 837: \t\t\tAllowed: false,",
        "// Line_Reference 838: \t\t\tResolutionMetadata: &ResolveCheckResponseMetadata{",
        "// Line_Reference 839: \t\t\t\tDatastoreQueryCount: req.GetRequestMetadata().DatastoreQueryCount + 1,",
        "// Line_Reference 840: \t\t\t},",
        "// Line_Reference 841: \t\t}",
        "// Line_Reference 848: \t\t\treturn response, err",
        "// Line_Reference 868: \t\t\t\treturn response, err"
    ]
}
