{
    "cve_id": "CVE-2015-4410",
    "cve_description": "The Moped::BSON::ObjecId.legal? method in rubygem-moped before commit dd5a7c14b5d2e466f7875d079af71ad19774609b allows remote attackers to cause a denial of service (worker resource consumption) or perform a cross-site scripting (XSS) attack via a crafted string.",
    "cve_publish_date": "2020-02-20",
    "cwe_id": "CWE-20",
    "cwe_name": "Improper Input Validation",
    "cwe_description": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.",
    "commit_message": "Merge Replica Set Refactor\n\n* Removes Server, and Socket; replaced with Node, and Connection.\n\n  Replica sets are now much more robustly supported, including failover\n  and discovery.\n\n* Refactors specs.\n\n  Internal APIs are now tested with integration specs through the public\n  APIs.\n\n* More documentation.",
    "type_of_change": "Modification",
    "filename_of_changes": "session.rb",
    "code_language": "Ruby",
    "number_of_lines_added_for_mitigation": "25",
    "number_of_lines_deleted_vulnerable_to_cve": "71",
    "vulnerable_lines": [
        "// Line_Reference 48:       @cluster = Cluster.new(seeds)",
        "// Line_Reference 62:     #   session[:people].     john, mary = session[:people].find.one # => { :name => \"John\" }",
        "// Line_Reference 114:       session.cluster.reconnect",
        "// Line_Reference 158:     # @private",
        "// Line_Reference 159:     def current_database",
        "// Line_Reference 160:       return @current_database if defined? @current_database",
        "// Line_Reference 161: ",
        "// Line_Reference 162:       if database = options[:database]",
        "// Line_Reference 163:         set_current_database(database)",
        "// Line_Reference 164:       else",
        "// Line_Reference 165:         raise \"No database set for session. Call #use or #with before accessing the database\"",
        "// Line_Reference 166:       end",
        "// Line_Reference 167:     end",
        "// Line_Reference 168: ",
        "// Line_Reference 169:     # @private",
        "// Line_Reference 170:     def simple_query(query)",
        "// Line_Reference 171:       query.limit = -1",
        "// Line_Reference 172: ",
        "// Line_Reference 173:       query(query).documents.first",
        "// Line_Reference 174:     end",
        "// Line_Reference 175: ",
        "// Line_Reference 176:     # @private",
        "// Line_Reference 177:     def query(query)",
        "// Line_Reference 178:       if options[:consistency] == :eventual",
        "// Line_Reference 179:         query.flags |= [:slave_ok] if query.respond_to? :flags",
        "// Line_Reference 180:         mode = :read",
        "// Line_Reference 181:       else",
        "// Line_Reference 182:         mode = :write",
        "// Line_Reference 183:       end",
        "// Line_Reference 184: ",
        "// Line_Reference 185:       reply = socket_for(mode).execute(query)",
        "// Line_Reference 186: ",
        "// Line_Reference 187:       reply.tap do |reply|",
        "// Line_Reference 188:         if reply.flags.include?(:query_failure)",
        "// Line_Reference 189:           raise Errors::QueryFailure.new(query, reply.documents.first)",
        "// Line_Reference 190:         end",
        "// Line_Reference 191:       end",
        "// Line_Reference 192:     end",
        "// Line_Reference 193: ",
        "// Line_Reference 194:     # @private",
        "// Line_Reference 195:     def execute(op)",
        "// Line_Reference 196:       mode = options[:consistency] == :eventual ? :read : :write",
        "// Line_Reference 197:       socket = socket_for(mode)",
        "// Line_Reference 198: ",
        "// Line_Reference 199:       if safe?",
        "// Line_Reference 200:         last_error = Protocol::Command.new(",
        "// Line_Reference 201:           \"admin\", { getlasterror: 1 }.merge(safety)",
        "// Line_Reference 202:         )",
        "// Line_Reference 203: ",
        "// Line_Reference 204:         socket.execute(op, last_error).documents.first.tap do |result|",
        "// Line_Reference 205:           raise Errors::OperationFailure.new(",
        "// Line_Reference 206:             op, result",
        "// Line_Reference 207:           ) if result[\"err\"] || result[\"errmsg\"]",
        "// Line_Reference 208:         end",
        "// Line_Reference 209:       else",
        "// Line_Reference 210:         socket.execute(op)",
        "// Line_Reference 211:       end",
        "// Line_Reference 212:     end",
        "// Line_Reference 213: ",
        "// Line_Reference 214:     private",
        "// Line_Reference 215: ",
        "// Line_Reference 230:     def socket_for(mode)",
        "// Line_Reference 231:       if options[:retain_socket]",
        "// Line_Reference 232:         @socket ||= cluster.socket_for(mode)",
        "// Line_Reference 234:         cluster.socket_for(mode)",
        "// Line_Reference 242:     def dup",
        "// Line_Reference 243:       session = super",
        "// Line_Reference 244:       session.instance_variable_set :@options, options.dup",
        "// Line_Reference 247:         session.send(:remove_instance_variable, :@current_database)",
        "// Line_Reference 249: ",
        "// Line_Reference 250:       session"
    ]
}
