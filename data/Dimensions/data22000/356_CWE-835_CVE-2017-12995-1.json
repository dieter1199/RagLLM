{
    "cve_id": "CVE-2017-12995",
    "cve_description": "The DNS parser in tcpdump before 4.9.2 could enter an infinite loop due to a bug in print-domain.c:ns_print().",
    "cve_publish_date": "2017-09-14",
    "cwe_id": "CWE-835",
    "cwe_name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
    "cwe_description": "The product contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop.",
    "commit_message": "CVE-2017-12995/Check for DNS compression pointers that don't point backwards.\n\nThis is what BIND 9.11.0-P2 does; it not only detects pointers that\nloop, as \"point backwards\" means \"point before anything we've processed\nso far, including what we're processing right now\", so the pointer can't\npoint to itself (as that's what we're processing right now).\n\nThis fixes an infinite loop discovered by Forcepoint's security\nresearchers Otto Airamo & Antti Levom√§ki.\n\nAdd a test using the capture file supplied by the reporter(s).\n\nAlso, add some infinite-pointer-loop captures.\n\nMore checks should be done.  We might, for example, want to make sure\nthe upper 2 bits of the label length/pointer byte are 00 or 11, and that\nif we encounter a pointer and jump backwards to what we think is a label\nthe label ends before the beginning of the last label we processed, to\nmake sure the pointer doesn't point backwards into the *middle* of a\nlabel, and also make sure the entire name is <= 255 bytes long.",
    "type_of_change": "Modification",
    "filename_of_changes": "print-domain.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "19",
    "number_of_lines_deleted_vulnerable_to_cve": "18",
    "vulnerable_lines": [
        "// Line_Reference 154: \tint chars_processed;",
        "// Line_Reference 156: \tint data_size = ndo->ndo_snapend - bp;",
        "// Line_Reference 162: \tchars_processed = 1;",
        "// Line_Reference 177: \t\t\t\tcp = bp + (((i << 8) | *cp) & 0x3fff);",
        "// Line_Reference 183: \t\t\t\tchars_processed++;",
        "// Line_Reference 184: ",
        "// Line_Reference 185: \t\t\t\t/*",
        "// Line_Reference 186: \t\t\t\t * If we've looked at every character in",
        "// Line_Reference 187: \t\t\t\t * the message, this pointer will make",
        "// Line_Reference 188: \t\t\t\t * us look at some character again,",
        "// Line_Reference 189: \t\t\t\t * which means we're looping.",
        "// Line_Reference 190: \t\t\t\t */",
        "// Line_Reference 191: \t\t\t\tif (chars_processed >= data_size) {",
        "// Line_Reference 192: \t\t\t\t\tND_PRINT((ndo, \"<LOOP>\"));",
        "// Line_Reference 193: \t\t\t\t\treturn (NULL);",
        "// Line_Reference 194: \t\t\t\t}",
        "// Line_Reference 215: \t\t\tchars_processed += l;",
        "// Line_Reference 222: \t\t\tchars_processed++;"
    ]
}
