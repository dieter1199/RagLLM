private final Logger LOGGER = Logger.getLogger(this.getClass().getName());
@SuppressWarnings("unchecked")
LOGGER.info(SERVICE_NS + " " + serviceNS);
LOGGER.info(SERVICE_NAME + " " + serviceName);
LOGGER.info(PORT_NAME + " " + portName);
LOGGER.info(BINDING + " " + binding);
LOGGER.info(ENDPOINT_ADDRESS + " " + endpointAddress);
LOGGER.info(USER_NAME + " " + authUserName);
LOGGER.info(PASSWORD + " ********");
LOGGER.info(SOAP_ACTION + " " + soapAction);
LOGGER.warning("Invalid XML characters have been detected in the envelope, they will be removed.");
LOGGER.info(ENVELOPE + " " + sanitizedEnvelope);
LOGGER.info(BUILD_RESPONSE_DOCUMENT_ENVELOPE + " " + buildResponseDocumentEnvelope);
LOGGER.info(BUILD_RESPONSE_DOCUMENT_BODY + " " + buildResponseDocumentBody);
LOGGER.info(PRINT_REQUEST_AND_RESPONSE + " " + printRequestAndResponse);
LOGGER.info(PROXY_HOST + " " + host);
LOGGER.info(PROXY_PROTOCOL + " " + protocol);
LOGGER.info(PROXY_PORT + " " + port);
LOGGER.info("Setting environment variable: socksProxyHost=" + host);
LOGGER.info("Setting environment variable: socksProxyPort=" + port);
LOGGER.info("Setting environment variable: " + hostKey + "=" + host);
LOGGER.info("Setting environment variable: " + portKey + "=" + port);
LOGGER.info(PROXY_USER + " " + user);
LOGGER.info(PROXY_PASSWORD + " ********");
responseDocumentBody = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
e.printStackTrace();
transformer = TransformerFactory.newInstance().newTransformer();