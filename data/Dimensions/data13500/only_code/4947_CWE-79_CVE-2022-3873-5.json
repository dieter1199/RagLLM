var col = parent.getIndex(cells[0]);
var row = table.getIndex(parent);
var lastspan = null;
var colspan = 1;
var rowspan = 1;
var index = 0;
var nextRowCell = (row < table.getChildCount() - 1) ?
model.getChildAt(model.getChildAt(
table, row + 1), col) : null;
while (index < cells.length - 1)
var next = cells[++index];
if (nextRowCell != null && nextRowCell == next &&
(lastspan == null || colspan == lastspan))
{
lastspan = colspan;
colspan = 0;
rowspan++;
parent = model.getParent(nextRowCell);
nextRowCell = (row + rowspan < table.getChildCount()) ?
model.getChildAt(model.getChildAt(
table, row + rowspan), col) : null;
}
var state = this.editor.graph.view.getState(next);
if (next == model.getChildAt(parent, col + colspan) && state != null &&
mxUtils.getValue(state.style, 'colspan', 1) == 1 &&
mxUtils.getValue(state.style, 'rowspan', 1) == 1)
{
colspan++;
else
break;
if (index == rowspan * colspan - 1)
{
result.mergeCell = cells[0];
result.colspan = colspan;
result.rowspan = rowspan;
}
return new mxPoint(graph.snap(Math.round(x / graph.view.scale) -
graph.view.translate.x - cell.geometry.width / 2),
graph.snap(Math.round(y / graph.view.scale) -
graph.view.translate.y - cell.geometry.height / 2));
var name = elt.getAttribute('data-action');
// Make generic
if (name == 'statusFunction' && this.editor.statusFunction != null)
{
this.editor.statusFunction();
}
else if (name != null)
var action = this.actions.get(name);
if (action != null)
action.funct();
}
else
{
var title = elt.getAttribute('data-title');
var msg = elt.getAttribute('data-message');
if (title != null && msg != null)
this.showError(title, msg);
var link = elt.getAttribute('data-link');
if (link != null)
this.editor.graph.openLink(link);
}
mxEvent.consume(evt);
if (cell != null)
