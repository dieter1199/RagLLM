{
    "cve_id": "CVE-2022-21656",
    "cve_description": "Envoy is an open source edge and service proxy, designed for cloud-native applications. The default_validator.cc implementation used to implement the default certificate validation routines has a \"type confusion\" bug when processing subjectAltNames. This processing allows, for example, an rfc822Name or uniformResourceIndicator to be authenticated as a domain name. This confusion allows for the bypassing of nameConstraints, as processed by the underlying OpenSSL/BoringSSL implementation, exposing the possibility of impersonation of arbitrary servers. As a result Envoy will trust upstream certificates that should not be trusted.",
    "cve_publish_date": "2022-02-22",
    "cwe_id": "CWE-843",
    "cwe_name": "Access of Resource Using Incompatible Type ('Type Confusion')",
    "cwe_description": "The product allocates or initializes a resource such as a pointer, object, or variable using one type, but it later accesses that resource using a type that is incompatible with the original type.",
    "commit_message": "Specify type for matching Subject Alternative Name. (#18628)\n\n\r\nSigned-off-by: Pradeep Rao <pcrao@google.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "default_validator_test.cc",
    "code_language": "C++",
    "number_of_lines_added_for_mitigation": "53",
    "number_of_lines_deleted_vulnerable_to_cve": "24",
    "vulnerable_lines": [
        "// Line_Reference 31:   matcher.MergeFrom(TestUtility::createRegexMatcher(\".*.example.com\"));",
        "// Line_Reference 32:   std::vector<Matchers::StringMatcherImpl<envoy::type::matcher::v3::StringMatcher>>",
        "// Line_Reference 33:       subject_alt_name_matchers;",
        "// Line_Reference 34:   subject_alt_name_matchers.push_back(Matchers::StringMatcherImpl(matcher));",
        "// Line_Reference 44:   std::vector<Matchers::StringMatcherImpl<envoy::type::matcher::v3::StringMatcher>>",
        "// Line_Reference 45:       subject_alt_name_matchers;",
        "// Line_Reference 46:   subject_alt_name_matchers.push_back(Matchers::StringMatcherImpl(matcher));",
        "// Line_Reference 57:   std::vector<Matchers::StringMatcherImpl<envoy::type::matcher::v3::StringMatcher>>",
        "// Line_Reference 58:       subject_alt_name_matchers;",
        "// Line_Reference 59:   subject_alt_name_matchers.push_back(Matchers::StringMatcherImpl(matcher));",
        "// Line_Reference 84:   matcher.MergeFrom(TestUtility::createRegexMatcher(\"spiffe://lyft.com/.*-team\"));",
        "// Line_Reference 85:   std::vector<Matchers::StringMatcherImpl<envoy::type::matcher::v3::StringMatcher>>",
        "// Line_Reference 86:       subject_alt_name_matchers;",
        "// Line_Reference 87:   subject_alt_name_matchers.push_back(Matchers::StringMatcherImpl(matcher));",
        "// Line_Reference 103:   matcher.MergeFrom(TestUtility::createRegexMatcher(\".*.foo.com\"));",
        "// Line_Reference 104:   std::vector<Matchers::StringMatcherImpl<envoy::type::matcher::v3::StringMatcher>>",
        "// Line_Reference 105:       subject_alt_name_matchers;",
        "// Line_Reference 106:   subject_alt_name_matchers.push_back(Matchers::StringMatcherImpl(matcher));",
        "// Line_Reference 122:   matcher.MergeFrom(TestUtility::createRegexMatcher(\".*.example.com\"));",
        "// Line_Reference 123:   std::vector<Matchers::StringMatcherImpl<envoy::type::matcher::v3::StringMatcher>> san_matchers;",
        "// Line_Reference 124:   san_matchers.push_back(Matchers::StringMatcherImpl(matcher));",
        "// Line_Reference 131:   std::vector<Matchers::StringMatcherImpl<envoy::type::matcher::v3::StringMatcher>>",
        "// Line_Reference 132:       invalid_san_matchers;",
        "// Line_Reference 133:   invalid_san_matchers.push_back(Matchers::StringMatcherImpl(matcher));"
    ]
}
