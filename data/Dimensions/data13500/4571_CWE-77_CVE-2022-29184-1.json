{
    "cve_id": "CVE-2022-29184",
    "cve_description": "GoCD is a continuous delivery server. In GoCD versions prior to 22.1.0, it is possible for existing authenticated users who have permissions to edit or create pipeline materials or pipeline configuration repositories to get remote code execution capability on the GoCD server via configuring a malicious branch name which abuses Mercurial hooks/aliases to exploit a command injection weakness. An attacker would require access to an account with existing GoCD administration permissions to either create/edit (`hg`-based) configuration repositories; create/edit pipelines and their (`hg`-based) materials; or, where \"pipelines-as-code\" configuration repositories are used, to commit malicious configuration to such an external repository which will be automatically parsed into a pipeline configuration and (`hg`) material definition by the GoCD server. This issue is fixed in GoCD 22.1.0. As a workaround, users who do not use/rely upon Mercurial materials can uninstall/remove the `hg`/Mercurial binary from the underlying GoCD Server operating system or Docker image.",
    "cve_publish_date": "2022-05-20",
    "cwe_id": "CWE-77",
    "cwe_name": "Improper Neutralization of Special Elements used in a Command ('Command Injection')",
    "cwe_description": "The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.",
    "commit_message": "Improve escaping of arguments when constructing Hg command calls",
    "type_of_change": "Modification",
    "filename_of_changes": "HgCommand.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "36",
    "number_of_lines_deleted_vulnerable_to_cve": "30",
    "vulnerable_lines": [
        "// Line_Reference 27: import java.io.UnsupportedEncodingException;",
        "// Line_Reference 55: ",
        "// Line_Reference 56:     private boolean pull(ConsoleOutputStreamConsumer outputStreamConsumer) {",
        "// Line_Reference 57:         CommandLine hg = hg(\"pull\", \"-b\", branch, \"--config\", String.format(\"paths.default=%s\", url));",
        "// Line_Reference 58:         return execute(hg, outputStreamConsumer) == 0;",
        "// Line_Reference 59:     }",
        "// Line_Reference 60: ",
        "// Line_Reference 62:         CommandLine hg = createCommandLine(\"hg\").withArgs(\"version\").withEncoding(\"utf-8\");",
        "// Line_Reference 67: ",
        "// Line_Reference 69:         CommandLine hg = createCommandLine(\"hg\").withArgs(\"clone\").withArg(\"-b\").withArg(branch).withArg(repositoryUrl)",
        "// Line_Reference 70:                 .withArg(workingDir.getAbsolutePath()).withNonArgSecrets(secrets).withEncoding(\"utf-8\");",
        "// Line_Reference 75:         execute(createCommandLine(\"hg\").withArgs(\"id\", \"--id\").withArg(repositoryURL).withNonArgSecrets(secrets).withEncoding(\"utf-8\"), new NamedProcessTag(repositoryURL.forDisplay()));",
        "// Line_Reference 108:     private String templatePath() {",
        "// Line_Reference 109:         if (templatePath == null) {",
        "// Line_Reference 110:             String file = HgCommand.class.getResource(\"/hg.template\").getFile();",
        "// Line_Reference 111:             try {",
        "// Line_Reference 112:                 templatePath = URLDecoder.decode(new File(file).getAbsolutePath(), \"UTF-8\");",
        "// Line_Reference 113:             } catch (UnsupportedEncodingException e) {",
        "// Line_Reference 114:                 templatePath = URLDecoder.decode(new File(file).getAbsolutePath());",
        "// Line_Reference 115:             }",
        "// Line_Reference 116:         }",
        "// Line_Reference 117:         return templatePath;",
        "// Line_Reference 118:     }",
        "// Line_Reference 119: ",
        "// Line_Reference 120:     List<Modification> findRecentModifications(int count) {",
        "// Line_Reference 124:         CommandLine hg = hg(\"log\", \"--limit\", String.valueOf(count), \"-b\", branch, \"--style\", templatePath());",
        "// Line_Reference 131:         CommandLine hg = hg(\"log\",",
        "// Line_Reference 132:                 \"-r\", \"tip:\" + revision.getRevision(),",
        "// Line_Reference 133:                 \"-b\", branch,",
        "// Line_Reference 134:                 \"--style\", templatePath());"
    ]
}
