{
    "cve_id": "CVE-2022-31173",
    "cve_description": "Juniper is a GraphQL server library for Rust. Affected versions of Juniper are vulnerable to uncontrolled recursion resulting in a program crash. This issue has been addressed in version 0.15.10. Users are advised to upgrade. Users unable to upgrade should limit the recursion depth manually.",
    "cve_publish_date": "2022-08-01",
    "cwe_id": "CWE-674",
    "cwe_name": "Uncontrolled Recursion",
    "cwe_description": "The product does not properly control the amount of recursion that takes place,  consuming excessive resources, such as allocated memory or the program stack.",
    "commit_message": "Merge pull request from GHSA-4rx6-g5vg-5f3j\n\n* Replace recursions with heap allocations\n\n* Some corrections [skip ci]\n\n* Add recursive nested fragments test case\n\n* Docs and small corrections\n\n* Corrections\n\nCo-authored-by: Kai Ren <tyranron@gmail.com>",
    "type_of_change": "ModificationType.ADD",
    "filename_of_changes": "variables_in_allowed_position.rs",
    "code_language": "Rust",
    "number_of_lines_added_for_mitigation": "42",
    "number_of_lines_deleted_vulnerable_to_cve": "16",
    "vulnerable_lines": [
        "// Line_Reference 20: pub struct VariableInAllowedPosition<'a, S: fmt::Debug + 'a> {",
        "// Line_Reference 21:     spreads: HashMap<Scope<'a>, HashSet<&'a str>>,",
        "// Line_Reference 22:     variable_usages: HashMap<Scope<'a>, Vec<(Spanning<&'a String>, Type<'a>)>>,",
        "// Line_Reference 23:     #[allow(clippy::type_complexity)]",
        "// Line_Reference 24:     variable_defs: HashMap<Scope<'a>, Vec<&'a (Spanning<&'a str>, VariableDefinition<'a, S>)>>,",
        "// Line_Reference 25:     current_scope: Option<Scope<'a>>,",
        "// Line_Reference 26: }",
        "// Line_Reference 27: ",
        "// Line_Reference 38:     fn collect_incorrect_usages(",
        "// Line_Reference 39:         &self,",
        "// Line_Reference 46:             return;",
        "// Line_Reference 77:         if let Some(spreads) = self.spreads.get(from) {",
        "// Line_Reference 78:             for spread in spreads {",
        "// Line_Reference 79:                 self.collect_incorrect_usages(&Scope::Fragment(spread), var_defs, ctx, visited);",
        "// Line_Reference 80:             }",
        "// Line_Reference 81:         }"
    ]
}
