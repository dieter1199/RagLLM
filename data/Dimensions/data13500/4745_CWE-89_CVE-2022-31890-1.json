{
    "cve_id": "CVE-2022-31890",
    "cve_description": "SQL Injection vulnerability in audit/class.audit.php in osTicket osTicket-plugins before commit a7842d494889fd5533d13deb3c6a7789768795ae via the order parameter to the getOrder function.",
    "cve_publish_date": "2023-04-05",
    "cwe_id": "CWE-89",
    "cwe_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
    "cwe_description": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.",
    "commit_message": "security: Audit Log Injection\n\nThis mitigates a vulnerability discovered by the AppSec Research Team at\nCheckmarx where it's possible to perform injection via Audit Log plugin.\nThis is due to passing the `order` URL param directly to the select query.\nThis refactors the `getOrder()` method to only return predefined sort orders\nto prevent using user-input.",
    "type_of_change": "Modification",
    "filename_of_changes": "class.audit.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "10",
    "number_of_lines_deleted_vulnerable_to_cve": "6",
    "vulnerable_lines": [
        "// Line_Reference 466:         if($_REQUEST['order'] && $orderWays[strtoupper($_REQUEST['order'])]) {",
        "// Line_Reference 467:             $order=$orderWays[strtoupper($_REQUEST['order'])];",
        "// Line_Reference 468:         }",
        "// Line_Reference 469:         $order=$order?$order:'DESC';",
        "// Line_Reference 471:         return $order;",
        "// Line_Reference 481:       $orderWays=array('DESC'=>'DESC','ASC'=>'ASC');"
    ]
}
