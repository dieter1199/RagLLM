{
    "cve_id": "CVE-2020-24342",
    "cve_description": "Lua through 5.4.0 allows a stack redzone cross in luaO_pushvfstring because a protection mechanism wrongly calls luaD_callnoyield twice in a row.",
    "cve_publish_date": "2020-08-13",
    "cwe_id": "CWE-119",
    "cwe_name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
    "cwe_description": "The product performs operations on a memory buffer, but it reads from or writes to a memory location outside the buffer's intended boundary. This may result in read or write operations on unexpected memory locations that could be linked to other variables, data structures, or internal program data.",
    "commit_message": "Fixed bug: 'luaD_callnoyield' called twice in a row\n\nIn luaD_callnoyield, when there is a possible stack overflow, it\nzeros the number of CallInfos to force a check when calling the\nfunction. However, if the \"function\" is not a function, the code will\nraise an error before checking the stack. Then, the error handling calls\nluaD_callnoyield again and nCcalls is decremented again, crossing the\nstack redzone without raising an error. (This loop can only happens\nonce, because the error handler must be a function.  But once is enough\nto cross the redzone.)",
    "type_of_change": "Modification",
    "filename_of_changes": "ldo.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "4",
    "number_of_lines_deleted_vulnerable_to_cve": "5",
    "vulnerable_lines": [
        "// Line_Reference 518: ** If there is a stack overflow, freeing all CI structures will",
        "// Line_Reference 519: ** force the subsequent call to invoke 'luaE_extendCI', which then",
        "// Line_Reference 520: ** will raise any errors.",
        "// Line_Reference 524:   if (getCcalls(L) <= CSTACKERR)  /* possible stack overflow? */",
        "// Line_Reference 525:     luaE_freeCI(L);"
    ]
}
