{
    "cve_id": "CVE-2021-26788",
    "cve_description": "Oryx Embedded CycloneTCP 1.7.6 to 2.0.0, fixed in 2.0.2, is affected by incorrect input validation, which may cause a denial of service (DoS). To exploit the vulnerability, an attacker needs to have TCP connectivity to the target system. Receiving a maliciously crafted TCP packet from an unauthenticated endpoint is sufficient to trigger the bug.",
    "cve_publish_date": "2021-03-08",
    "cwe_id": "CWE-20",
    "cwe_name": "Improper Input Validation",
    "cwe_description": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.",
    "commit_message": "Version 2.0.2",
    "type_of_change": "Modification",
    "filename_of_changes": "enc624j600_driver.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "138",
    "number_of_lines_deleted_vulnerable_to_cve": "112",
    "vulnerable_lines": [
        "// Line_Reference 9:  * Copyright (C) 2010-2020 Oryx Embedded SARL. All rights reserved.",
        "// Line_Reference 28:  * @version 2.0.0",
        "// Line_Reference 102:    enc624j600WriteReg(interface, ENC624J600_REG_ECON2, ECON2_ETHEN | ECON2_STRCH);",
        "// Line_Reference 108:       temp = enc624j600ReadReg(interface, ENC624J600_REG_MAADR1);",
        "// Line_Reference 110:       temp = enc624j600ReadReg(interface, ENC624J600_REG_MAADR2);",
        "// Line_Reference 112:       temp = enc624j600ReadReg(interface, ENC624J600_REG_MAADR3);",
        "// Line_Reference 122:       enc624j600WriteReg(interface, ENC624J600_REG_MAADR1, temp);",
        "// Line_Reference 124:       enc624j600WriteReg(interface, ENC624J600_REG_MAADR2, temp);",
        "// Line_Reference 126:       enc624j600WriteReg(interface, ENC624J600_REG_MAADR3, temp);",
        "// Line_Reference 130:    enc624j600WriteReg(interface, ENC624J600_REG_ERXST, ENC624J600_RX_BUFFER_START);",
        "// Line_Reference 132:    enc624j600WriteReg(interface, ENC624J600_REG_ERXTAIL, ENC624J600_RX_BUFFER_STOP);",
        "// Line_Reference 135:    enc624j600WriteReg(interface, ENC624J600_REG_ERXFCON, ERXFCON_HTEN |",
        "// Line_Reference 136:       ERXFCON_CRCEN | ERXFCON_RUNTEN | ERXFCON_UCEN | ERXFCON_BCEN);",
        "// Line_Reference 139:    enc624j600WriteReg(interface, ENC624J600_REG_EHT1, 0x0000);",
        "// Line_Reference 140:    enc624j600WriteReg(interface, ENC624J600_REG_EHT2, 0x0000);",
        "// Line_Reference 141:    enc624j600WriteReg(interface, ENC624J600_REG_EHT3, 0x0000);",
        "// Line_Reference 142:    enc624j600WriteReg(interface, ENC624J600_REG_EHT4, 0x0000);",
        "// Line_Reference 144:    //All short frames will be zero-padded to 60 bytes and a valid CRC is then appended",
        "// Line_Reference 145:    enc624j600WriteReg(interface, ENC624J600_REG_MACON2,",
        "// Line_Reference 146:       MACON2_DEFER | MACON2_PADCFG0 | MACON2_TXCRCEN | MACON2_R1);",
        "// Line_Reference 149:    enc624j600WriteReg(interface, ENC624J600_REG_MAMXFL, ETH_MAX_FRAME_SIZE);",
        "// Line_Reference 152:    enc624j600WritePhyReg(interface, ENC624J600_PHY_REG_PHANA, PHANA_ADPAUS0 |",
        "// Line_Reference 153:       PHANA_AD100FD | PHANA_AD100 | PHANA_AD10FD | PHANA_AD10 | PHANA_ADIEEE0);",
        "// Line_Reference 156:    enc624j600WriteReg(interface, ENC624J600_REG_EIR, 0x0000);",
        "// Line_Reference 159:    enc624j600WriteReg(interface, ENC624J600_REG_EIE, EIE_INTIE |",
        "// Line_Reference 160:       EIE_LINKIE | EIE_PKTIE | EIE_TXIE | EIE_TXABTIE);",
        "// Line_Reference 163:    enc624j600SetBit(interface, ENC624J600_REG_ECON1, ECON1_RXEN);",
        "// Line_Reference 231:    enc624j600ClearBit(interface, ENC624J600_REG_EIE, EIE_INTIE);",
        "// Line_Reference 234:    status = enc624j600ReadReg(interface, ENC624J600_REG_EIR);",
        "// Line_Reference 237:    if((status & EIR_LINKIF) != 0)",
        "// Line_Reference 240:       enc624j600ClearBit(interface, ENC624J600_REG_EIE, EIE_LINKIE);",
        "// Line_Reference 249:    if((status & EIR_PKTIF) != 0)",
        "// Line_Reference 252:       enc624j600ClearBit(interface, ENC624J600_REG_EIE, EIE_PKTIE);",
        "// Line_Reference 261:    if((status & (EIR_TXIF | EIR_TXABTIF)) != 0)",
        "// Line_Reference 264:       enc624j600ClearBit(interface, ENC624J600_REG_EIR, EIR_TXIF | EIR_TXABTIF);",
        "// Line_Reference 272:    enc624j600SetBit(interface, ENC624J600_REG_EIE, EIE_INTIE);",
        "// Line_Reference 291:    status = enc624j600ReadReg(interface, ENC624J600_REG_EIR);",
        "// Line_Reference 294:    if((status & EIR_LINKIF) != 0)",
        "// Line_Reference 297:       enc624j600ClearBit(interface, ENC624J600_REG_EIR, EIR_LINKIF);",
        "// Line_Reference 299:       value = enc624j600ReadReg(interface, ENC624J600_REG_ESTAT);",
        "// Line_Reference 302:       if((value & ESTAT_PHYLNK) != 0)",
        "// Line_Reference 305:          value = enc624j600ReadPhyReg(interface, ENC624J600_PHY_REG_PHSTAT3);",
        "// Line_Reference 308:          if((value & PHSTAT3_SPDDPX1) != 0)",
        "// Line_Reference 318:          if((value & PHSTAT3_SPDDPX2) != 0)",
        "// Line_Reference 344:    if((status & EIR_PKTIF) != 0)",
        "// Line_Reference 347:       enc624j600ClearBit(interface, ENC624J600_REG_EIR, EIR_PKTIF);",
        "// Line_Reference 360:    enc624j600SetBit(interface, ENC624J600_REG_EIE, EIE_LINKIE | EIE_PKTIE);",
        "// Line_Reference 401:    if(enc624j600ReadReg(interface, ENC624J600_REG_ECON1) & ECON1_TXRTS)",
        "// Line_Reference 407:    enc624j600WriteReg(interface, ENC624J600_REG_EGPWRPT, ENC624J600_TX_BUFFER_START);",
        "// Line_Reference 412:    enc624j600WriteReg(interface, ENC624J600_REG_ETXST, ENC624J600_TX_BUFFER_START);",
        "// Line_Reference 414:    enc624j600WriteReg(interface, ENC624J600_REG_ETXLEN, length);",
        "// Line_Reference 417:    enc624j600ClearBit(interface, ENC624J600_REG_EIR, EIR_TXIF | EIR_TXABTIF);",
        "// Line_Reference 419:    enc624j600SetBit(interface, ENC624J600_REG_ECON1, ECON1_TXRTS);",
        "// Line_Reference 435:    uint16_t n;",
        "// Line_Reference 443:    if(enc624j600ReadReg(interface, ENC624J600_REG_ESTAT) & ESTAT_PKTCNT)",
        "// Line_Reference 446:       enc624j600WriteReg(interface, ENC624J600_REG_ERXRDPT, context->nextPacket);",
        "// Line_Reference 447: ",
        "// Line_Reference 448:       //Read the first two bytes, which are the address of the next packet",
        "// Line_Reference 449:       enc624j600ReadBuffer(interface, ENC624J600_CMD_RRXDATA,",
        "// Line_Reference 450:          (uint8_t *) &context->nextPacket, sizeof(uint16_t));",
        "// Line_Reference 451: ",
        "// Line_Reference 452:       //Convert the value to host byte order",
        "// Line_Reference 453:       context->nextPacket = letoh16(context->nextPacket);",
        "// Line_Reference 454: ",
        "// Line_Reference 455:       //Get the length of the received frame in bytes",
        "// Line_Reference 456:       enc624j600ReadBuffer(interface, ENC624J600_CMD_RRXDATA,",
        "// Line_Reference 457:          (uint8_t *) &n, sizeof(uint16_t));",
        "// Line_Reference 458: ",
        "// Line_Reference 459:       //Convert the value to host byte order",
        "// Line_Reference 460:       n = letoh16(n);",
        "// Line_Reference 462:       //Read the receive status vector (RSV)",
        "// Line_Reference 463:       enc624j600ReadBuffer(interface, ENC624J600_CMD_RRXDATA,",
        "// Line_Reference 464:          (uint8_t *) &status, sizeof(uint32_t));",
        "// Line_Reference 466:       //Convert the value to host byte order",
        "// Line_Reference 467:       status = letoh32(status);",
        "// Line_Reference 470:       if((status & RSV_RECEIVED_OK) != 0)",
        "// Line_Reference 473:          n = MIN(n, ETH_MAX_FRAME_SIZE);",
        "// Line_Reference 475:          enc624j600ReadBuffer(interface, ENC624J600_CMD_RRXDATA, context->rxBuffer, n);",
        "// Line_Reference 490:          enc624j600WriteReg(interface, ENC624J600_REG_ERXTAIL, ENC624J600_RX_BUFFER_STOP);",
        "// Line_Reference 494:          enc624j600WriteReg(interface, ENC624J600_REG_ERXTAIL, context->nextPacket - 2);",
        "// Line_Reference 498:       enc624j600SetBit(interface, ENC624J600_REG_ECON1, ECON1_PKTDEC);",
        "// Line_Reference 515:       nicProcessPacket(interface, context->rxBuffer, n, &ancillary);",
        "// Line_Reference 563:    enc624j600WriteReg(interface, ENC624J600_REG_EHT1, hashTable[0]);",
        "// Line_Reference 564:    enc624j600WriteReg(interface, ENC624J600_REG_EHT2, hashTable[1]);",
        "// Line_Reference 565:    enc624j600WriteReg(interface, ENC624J600_REG_EHT3, hashTable[2]);",
        "// Line_Reference 566:    enc624j600WriteReg(interface, ENC624J600_REG_EHT4, hashTable[3]);",
        "// Line_Reference 569:    TRACE_DEBUG(\"  EHT1 = %04\" PRIX16 \"\\r\\n\", enc624j600ReadReg(interface, ENC624J600_REG_EHT1));",
        "// Line_Reference 570:    TRACE_DEBUG(\"  EHT2 = %04\" PRIX16 \"\\r\\n\", enc624j600ReadReg(interface, ENC624J600_REG_EHT2));",
        "// Line_Reference 571:    TRACE_DEBUG(\"  EHT3 = %04\" PRIX16 \"\\r\\n\", enc624j600ReadReg(interface, ENC624J600_REG_EHT3));",
        "// Line_Reference 572:    TRACE_DEBUG(\"  EHT4 = %04\" PRIX16 \"\\r\\n\", enc624j600ReadReg(interface, ENC624J600_REG_EHT4));",
        "// Line_Reference 589:    duplexMode = enc624j600ReadReg(interface, ENC624J600_REG_ESTAT) & ESTAT_PHYDPX;",
        "// Line_Reference 595:       enc624j600WriteReg(interface, ENC624J600_REG_MACON2, MACON2_DEFER |",
        "// Line_Reference 596:          MACON2_PADCFG2 | MACON2_PADCFG0 | MACON2_TXCRCEN | MACON2_R1 | MACON2_FULDPX);",
        "// Line_Reference 598:       enc624j600WriteReg(interface, ENC624J600_REG_MABBIPG, 0x15);",
        "// Line_Reference 604:       enc624j600WriteReg(interface, ENC624J600_REG_MACON2, MACON2_DEFER |",
        "// Line_Reference 605:          MACON2_PADCFG2 | MACON2_PADCFG0 | MACON2_TXCRCEN | MACON2_R1);",
        "// Line_Reference 607:       enc624j600WriteReg(interface, ENC624J600_REG_MABBIPG, 0x12);",
        "// Line_Reference 624:       enc624j600WriteReg(interface, ENC624J600_REG_EUDAST, 0x1234);",
        "// Line_Reference 626:    } while(enc624j600ReadReg(interface, ENC624J600_REG_EUDAST) != 0x1234);",
        "// Line_Reference 629:    while((enc624j600ReadReg(interface, ENC624J600_REG_ESTAT) & ESTAT_CLKRDY) == 0)",
        "// Line_Reference 634:    enc624j600SetBit(interface, ENC624J600_REG_ECON2, ECON2_ETHRST);",
        "// Line_Reference 640:    if(enc624j600ReadReg(interface, ENC624J600_REG_EUDAST) != 0x0000)",
        "// Line_Reference 722:    enc624j600WriteReg(interface, ENC624J600_REG_MIREGADR, MIREGADR_R8 | address);",
        "// Line_Reference 724:    enc624j600WriteReg(interface, ENC624J600_REG_MIWR, data);",
        "// Line_Reference 727:    while((enc624j600ReadReg(interface, ENC624J600_REG_MISTAT) & MISTAT_BUSY) != 0)",
        "// Line_Reference 729:    }",
        "// Line_Reference 743:    enc624j600WriteReg(interface, ENC624J600_REG_MIREGADR, MIREGADR_R8 | address);",
        "// Line_Reference 745:    enc624j600WriteReg(interface, ENC624J600_REG_MICMD, MICMD_MIIRD);",
        "// Line_Reference 750:    while((enc624j600ReadReg(interface, ENC624J600_REG_MISTAT) & MISTAT_BUSY) != 0)",
        "// Line_Reference 752:    }",
        "// Line_Reference 755:    enc624j600WriteReg(interface, ENC624J600_REG_MICMD, 0x00);",
        "// Line_Reference 758:    return enc624j600ReadReg(interface, ENC624J600_REG_MIRD);"
    ]
}
