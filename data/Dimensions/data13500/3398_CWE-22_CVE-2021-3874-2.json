{
    "cve_id": "CVE-2021-3874",
    "cve_description": "bookstack is vulnerable to Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
    "cve_publish_date": "2021-10-15",
    "cwe_id": "CWE-22",
    "cwe_name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
    "cwe_description": "The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
    "commit_message": "Added protections against path traversal in file system operations\n\n- Files within the storage/ path could be accessed via path traversal\n  references in content, accessed upon HTML export.\n- This addresses this via two layers:\n  - Scoped local flysystem filesystems down to the specific image &\n    file folders since flysystem has built-in checking against the\n    escaping of the root folder.\n  - Added path normalization before enforcement of uploads/{images,file}\n    prefix to prevent traversal at a path level.\n\nThanks to @Haxatron via huntr.dev for discovery and reporting.\nRef: https://huntr.dev/bounties/ac268a17-72b5-446f-a09a-9945ef58607a/",
    "type_of_change": "Modification",
    "filename_of_changes": "ImageService.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "44",
    "number_of_lines_deleted_vulnerable_to_cve": "16",
    "vulnerable_lines": [
        "// Line_Reference 41:     protected function getStorage(string $type = ''): FileSystemInstance",
        "// Line_Reference 46:         if ($type === 'system' && $storageType === 'local_secure') {",
        "// Line_Reference 50:         return $this->fileSystem->disk($storageType);",
        "// Line_Reference 107:         while ($storage->exists($imagePath . $fileName)) {",
        "// Line_Reference 117:             $this->saveImageDataInPublicSpace($storage, $fullPath, $imageData);",
        "// Line_Reference 219:         if ($storage->exists($thumbFilePath)) {",
        "// Line_Reference 223:         $thumbData = $this->resizeImage($storage->get($imagePath), $width, $height, $keepRatio);",
        "// Line_Reference 225:         $this->saveImageDataInPublicSpace($storage, $thumbFilePath, $thumbData);",
        "// Line_Reference 282:         $imagePath = $image->path;",
        "// Line_Reference 284: ",
        "// Line_Reference 285:         return $storage->get($imagePath);",
        "// Line_Reference 295:         $this->destroyImagesFromPath($image->path);",
        "// Line_Reference 303:     protected function destroyImagesFromPath(string $path): bool",
        "// Line_Reference 305:         $storage = $this->getStorage();",
        "// Line_Reference 329:      * Check whether or not a folder is empty.",
        "// Line_Reference 377:      * Convert a image URI to a Base64 encoded string."
    ]
}
