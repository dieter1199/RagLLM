{
    "cve_id": "CVE-2021-36376",
    "cve_description": "dandavison delta before 0.8.3 on Windows resolves an executable's pathname as a relative path from the current directory.",
    "cve_publish_date": "2021-07-13",
    "cwe_id": "CWE-427",
    "cwe_name": "Uncontrolled Search Path Element",
    "cwe_description": "The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors.",
    "commit_message": "Do not resolve executables as relative path from current directory (#658)\n\n* Refactor: child pager process creation\r\n\r\n* Protect calls to Command::new behind grep_cli::resolve_binary\r\n\r\n* Move less env-var setting into less-specific branch",
    "type_of_change": "Modification",
    "filename_of_changes": "output.rs",
    "code_language": "Rust",
    "number_of_lines_added_for_mitigation": "92",
    "number_of_lines_deleted_vulnerable_to_cve": "63",
    "vulnerable_lines": [
        "// Line_Reference 80:         match pagerflags.split_first() {",
        "// Line_Reference 86:                 let mut process = if is_less {",
        "// Line_Reference 87:                     let mut p = Command::new(&pager_path);",
        "// Line_Reference 88:                     if args.is_empty() || replace_arguments_to_less {",
        "// Line_Reference 89:                         p.args(vec![\"--RAW-CONTROL-CHARS\"]);",
        "// Line_Reference 90: ",
        "// Line_Reference 91:                         // Passing '--no-init' fixes a bug with '--quit-if-one-screen' in older",
        "// Line_Reference 92:                         // versions of 'less'. Unfortunately, it also breaks mouse-wheel support.",
        "// Line_Reference 93:                         //",
        "// Line_Reference 94:                         // See: http://www.greenwoodsoftware.com/less/news.530.html",
        "// Line_Reference 95:                         //",
        "// Line_Reference 96:                         // For newer versions (530 or 558 on Windows), we omit '--no-init' as it",
        "// Line_Reference 97:                         // is not needed anymore.",
        "// Line_Reference 98:                         match retrieve_less_version() {",
        "// Line_Reference 99:                             None => {",
        "// Line_Reference 100:                                 p.arg(\"--no-init\");",
        "// Line_Reference 101:                             }",
        "// Line_Reference 102:                             Some(version)",
        "// Line_Reference 103:                                 if (version < 530 || (cfg!(windows) && version < 558)) =>",
        "// Line_Reference 104:                             {",
        "// Line_Reference 105:                                 p.arg(\"--no-init\");",
        "// Line_Reference 106:                             }",
        "// Line_Reference 107:                             _ => {}",
        "// Line_Reference 108:                         }",
        "// Line_Reference 109: ",
        "// Line_Reference 110:                         if quit_if_one_screen {",
        "// Line_Reference 111:                             p.arg(\"--quit-if-one-screen\");",
        "// Line_Reference 112:                         }",
        "// Line_Reference 113:                     } else {",
        "// Line_Reference 114:                         p.args(args);",
        "// Line_Reference 115:                     }",
        "// Line_Reference 116:                     p.env(\"LESSCHARSET\", \"UTF-8\");",
        "// Line_Reference 117:                     p",
        "// Line_Reference 119:                     if pager_path.file_stem() == Some(&OsString::from(\"delta\")) {",
        "// Line_Reference 120:                         eprintln!(",
        "// Line_Reference 121:                             \"\\",
        "// Line_Reference 122: It looks like you have set delta as the value of $PAGER. \\",
        "// Line_Reference 123: This would result in a non-terminating recursion. \\",
        "// Line_Reference 124: delta is not an appropriate value for $PAGER \\",
        "// Line_Reference 125: (but it is an appropriate value for $GIT_PAGER).\"",
        "// Line_Reference 126:                         );",
        "// Line_Reference 127:                         std::process::exit(1);",
        "// Line_Reference 128:                     }",
        "// Line_Reference 129:                     let mut p = Command::new(&pager_path);",
        "// Line_Reference 130:                     p.args(args);",
        "// Line_Reference 131:                     p",
        "// Line_Reference 133:                 if is_less && config.navigate {",
        "// Line_Reference 134:                     if let Ok(hist_file) =",
        "// Line_Reference 135:                         navigate::copy_less_hist_file_and_append_navigate_regexp(config)",
        "// Line_Reference 136:                     {",
        "// Line_Reference 137:                         process.env(\"LESSHISTFILE\", hist_file);",
        "// Line_Reference 138:                         if config.show_themes {",
        "// Line_Reference 139:                             process.arg(\"+n\");",
        "// Line_Reference 140:                         }",
        "// Line_Reference 141:                     }",
        "// Line_Reference 143:                 Ok(process",
        "// Line_Reference 144:                     .env(\"LESSANSIENDCHARS\", \"mK\")",
        "// Line_Reference 145:                     .stdin(Stdio::piped())",
        "// Line_Reference 146:                     .spawn()",
        "// Line_Reference 147:                     .map(OutputType::Pager)",
        "// Line_Reference 148:                     .unwrap_or_else(|_| OutputType::stdout()))",
        "// Line_Reference 150:             None => Ok(OutputType::stdout()),",
        "// Line_Reference 151:         }"
    ]
}
