{
    "cve_id": "CVE-2021-43114",
    "cve_description": "FORT Validator versions prior to 1.5.2 will crash if an RPKI CA publishes an X.509 EE certificate. This will lead to RTR clients such as BGP routers to lose access to the RPKI VRP data set, effectively disabling Route Origin Validation.",
    "cve_publish_date": "2021-11-09",
    "cwe_id": "NVD-CWE-Other",
    "cwe_name": "Other",
    "cwe_description": "NVD is only using a subset of CWE for mapping instead of the entire CWE, and the weakness type is not covered by that subset.",
    "commit_message": "Certificates: Fuse meta and level stacks\n\nThese stacks always had the same size, and their corresponding elements\nalways referred to the same certificate.\n\nThis was pending work from #55, which I think is now properly solved.\n\nAlso refactors x509stack_push(); was messy. Patched an unlikely memory\nleak in the chaos.",
    "type_of_change": "Modification",
    "filename_of_changes": "cert_stack.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "96",
    "number_of_lines_deleted_vulnerable_to_cve": "83",
    "vulnerable_lines": [
        "// Line_Reference 65: /**",
        "// Line_Reference 66:  * Certificate repository \"level\". This aims to identify if the",
        "// Line_Reference 67:  * certificate is located at a distinct server than its father (common",
        "// Line_Reference 68:  * case when the RIRs delegate RPKI repositories).",
        "// Line_Reference 69:  */",
        "// Line_Reference 70: struct repo_level_node {",
        "// Line_Reference 71: \tunsigned int level;",
        "// Line_Reference 72: \tSLIST_ENTRY(repo_level_node) next;",
        "// Line_Reference 73: };",
        "// Line_Reference 74: ",
        "// Line_Reference 75: SLIST_HEAD(repo_level_stack, repo_level_node);",
        "// Line_Reference 76: ",
        "// Line_Reference 112: ",
        "// Line_Reference 113: \t/**",
        "// Line_Reference 114: \t * Stacked data to store the repository \"levels\" (each level is a",
        "// Line_Reference 115: \t * delegation of an RPKI server).",
        "// Line_Reference 116: \t */",
        "// Line_Reference 117: \tstruct repo_level_stack levels;",
        "// Line_Reference 137: \tSLIST_INIT(&stack->levels);",
        "// Line_Reference 188: \tstruct repo_level_node *level;",
        "// Line_Reference 211: \tstack_size = 0;",
        "// Line_Reference 212: \twhile (!SLIST_EMPTY(&stack->levels)) {",
        "// Line_Reference 213: \t\tlevel = SLIST_FIRST(&stack->levels);",
        "// Line_Reference 214: \t\tSLIST_REMOVE_HEAD(&stack->levels, next);",
        "// Line_Reference 215: \t\tfree(level);",
        "// Line_Reference 216: \t\tstack_size++;",
        "// Line_Reference 217: \t}",
        "// Line_Reference 218: \tpr_val_debug(\"Deleted %u stacked levels.\", stack_size);",
        "// Line_Reference 219: ",
        "// Line_Reference 245: \tstruct repo_level_node *repo;",
        "// Line_Reference 257: ",
        "// Line_Reference 258: \trepo = SLIST_FIRST(&stack->levels);",
        "// Line_Reference 259: \tif (repo == NULL)",
        "// Line_Reference 260: \t\tpr_crit(\"Attempted to pop empty repo level stack\");",
        "// Line_Reference 261: \tSLIST_REMOVE_HEAD(&stack->levels, next);",
        "// Line_Reference 262: \tfree(repo);",
        "// Line_Reference 306: \tstruct repo_level_node *repo, *head_repo;",
        "// Line_Reference 308: \tunsigned int work_repo_level;",
        "// Line_Reference 312: \trepo = malloc(sizeof(struct repo_level_node));",
        "// Line_Reference 313: \tif (repo == NULL)",
        "// Line_Reference 314: \t\treturn pr_enomem();",
        "// Line_Reference 315: ",
        "// Line_Reference 316: \trepo->level = 0;",
        "// Line_Reference 317: \twork_repo_level = working_repo_peek_level();",
        "// Line_Reference 318: \thead_repo = SLIST_FIRST(&stack->levels);",
        "// Line_Reference 319: \tif (head_repo != NULL && work_repo_level > head_repo->level)",
        "// Line_Reference 320: \t\trepo->level = work_repo_level;",
        "// Line_Reference 321: ",
        "// Line_Reference 322: \tSLIST_INSERT_HEAD(&stack->levels, repo, next);",
        "// Line_Reference 323: ",
        "// Line_Reference 325: \tif (meta == NULL) {",
        "// Line_Reference 326: \t\terror = pr_enomem();",
        "// Line_Reference 327: \t\tgoto end3;",
        "// Line_Reference 328: \t}",
        "// Line_Reference 335: \tmeta->resources = resources_create(false);",
        "// Line_Reference 336: \tif (meta->resources == NULL) {",
        "// Line_Reference 337: \t\terror = pr_enomem();",
        "// Line_Reference 338: \t\tgoto end4;",
        "// Line_Reference 339: \t}",
        "// Line_Reference 340: \tresources_set_policy(meta->resources, policy);",
        "// Line_Reference 341: \terror = certificate_get_resources(x509, meta->resources, type);",
        "// Line_Reference 343: \t\tgoto end5;",
        "// Line_Reference 345: \t/*",
        "// Line_Reference 346: \t * rfc8630#section-2.3",
        "// Line_Reference 347: \t * \"The INR extension(s) of this TA MUST contain a non-empty set of",
        "// Line_Reference 348: \t * number resources.\"",
        "// Line_Reference 349: \t * The \"It MUST NOT use the \"inherit\" form of the INR extension(s)\"",
        "// Line_Reference 350: \t * part is already handled in certificate_get_resources().",
        "// Line_Reference 351: \t */",
        "// Line_Reference 352: \tif (type == TA && resources_empty(meta->resources)) {",
        "// Line_Reference 353: \t\terror = pr_val_err(\"Trust Anchor certificate does not define any number resources.\");",
        "// Line_Reference 354: \t\tgoto end5;",
        "// Line_Reference 355: \t}",
        "// Line_Reference 357: \tdefer_separator = malloc(sizeof(struct defer_node));",
        "// Line_Reference 360: \t\tgoto end5;",
        "// Line_Reference 362: \tdefer_separator->type = DNT_SEPARATOR;",
        "// Line_Reference 368: \t\tgoto end5;",
        "// Line_Reference 376: end5:\tresources_destroy(meta->resources);",
        "// Line_Reference 377: end4:\tsubjects_cleanup(&meta->subjects, subject_cleanup);",
        "// Line_Reference 381: end3:\tSLIST_REMOVE_HEAD(&stack->levels, next);",
        "// Line_Reference 382: \tfree(repo);",
        "// Line_Reference 431: \tstruct repo_level_node *repo = SLIST_FIRST(&stack->levels);",
        "// Line_Reference 432: \treturn (repo != NULL) ? repo->level : 0;"
    ]
}
