{
    "cve_id": "CVE-2021-43114",
    "cve_description": "FORT Validator versions prior to 1.5.2 will crash if an RPKI CA publishes an X.509 EE certificate. This will lead to RTR clients such as BGP routers to lose access to the RPKI VRP data set, effectively disabling Route Origin Validation.",
    "cve_publish_date": "2021-11-09",
    "cwe_id": "NVD-CWE-Other",
    "cwe_name": "Other",
    "cwe_description": "NVD is only using a subset of CWE for mapping instead of the entire CWE, and the weakness type is not covered by that subset.",
    "commit_message": "RRDP Notification: Optimize delta parse\n\nIt was allocating the deltas array twice, for seemingly no reason.\nAlso, the array slots were pointers, and the two arrays pointed to\ndifferent instances of the same objects. For seemingly no reason.\n\nNow there's only one array, and it stores the objects directly.\n\nAlso adds relevant unit tests.",
    "type_of_change": "Modification",
    "filename_of_changes": "rrdp_parser.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "38",
    "number_of_lines_deleted_vulnerable_to_cve": "149",
    "vulnerable_lines": [
        "// Line_Reference 39: /* Array list to get deltas from notification file */",
        "// Line_Reference 40: DEFINE_ARRAY_LIST_STRUCT(deltas_parsed, struct delta_head *);",
        "// Line_Reference 41: DEFINE_ARRAY_LIST_FUNCTIONS(deltas_parsed, struct delta_head *, static)",
        "// Line_Reference 42: ",
        "// Line_Reference 43: /* Context while reading an update notification */",
        "// Line_Reference 44: struct rdr_notification_ctx {",
        "// Line_Reference 45: \t/* Data being parsed */",
        "// Line_Reference 46: \tstruct update_notification *notification;",
        "// Line_Reference 47: \t/* Unordered list of deltas */",
        "// Line_Reference 48: \tstruct deltas_parsed deltas;",
        "// Line_Reference 49: };",
        "// Line_Reference 50: ",
        "// Line_Reference 261: \tif (attr == NULL)",
        "// Line_Reference 263: \telse",
        "// Line_Reference 265: ",
        "// Line_Reference 266: \tif (xml_value == NULL)",
        "// Line_Reference 267: \t\treturn pr_val_err(\"RRDP file: Couldn't find %s from '%s'\",",
        "// Line_Reference 268: \t\t    (attr == NULL ? \"string content\" : \"xml attribute\"),",
        "// Line_Reference 269: \t\t    xmlTextReaderConstLocalName(reader));",
        "// Line_Reference 701: static int",
        "// Line_Reference 702: rdr_notification_ctx_init(struct rdr_notification_ctx *ctx)",
        "// Line_Reference 703: {",
        "// Line_Reference 704: \tdeltas_parsed_init(&ctx->deltas);",
        "// Line_Reference 705: \treturn 0;",
        "// Line_Reference 706: }",
        "// Line_Reference 707: ",
        "// Line_Reference 708: static void",
        "// Line_Reference 709: __delta_head_destroy(struct delta_head **delta_head)",
        "// Line_Reference 710: {",
        "// Line_Reference 711: \tdelta_head_destroy(*delta_head);",
        "// Line_Reference 712: }",
        "// Line_Reference 713: ",
        "// Line_Reference 714: static void",
        "// Line_Reference 715: rdr_notification_ctx_cleanup(struct rdr_notification_ctx *ctx)",
        "// Line_Reference 716: {",
        "// Line_Reference 717: \tif (ctx->deltas.array != NULL)",
        "// Line_Reference 718: \t\tdeltas_parsed_cleanup(&ctx->deltas, __delta_head_destroy);",
        "// Line_Reference 719: }",
        "// Line_Reference 720: ",
        "// Line_Reference 723:     struct rdr_notification_ctx *ctx)",
        "// Line_Reference 725: \tstruct delta_head *tmp;",
        "// Line_Reference 726: \tunsigned long serial;",
        "// Line_Reference 729: \terror = delta_head_create(&tmp);",
        "// Line_Reference 732: ",
        "// Line_Reference 733: \terror = parse_long(reader, RRDP_ATTR_SERIAL, &serial);",
        "// Line_Reference 735: \t\tgoto delta_destroy;",
        "// Line_Reference 736: \ttmp->serial = serial;",
        "// Line_Reference 737: ",
        "// Line_Reference 738: \terror = parse_doc_data(reader, true, true, &tmp->doc_data);",
        "// Line_Reference 739: \tif (error)",
        "// Line_Reference 740: \t\tgoto delta_destroy;",
        "// Line_Reference 742: \terror = deltas_parsed_add(&ctx->deltas, &tmp);",
        "// Line_Reference 744: \t\tgoto delta_destroy;",
        "// Line_Reference 746: \treturn 0;",
        "// Line_Reference 747: delta_destroy:",
        "// Line_Reference 748: \tdelta_head_destroy(tmp);",
        "// Line_Reference 752: static int",
        "// Line_Reference 753: order_notification_deltas(struct rdr_notification_ctx *ctx)",
        "// Line_Reference 754: {",
        "// Line_Reference 755: \tstruct delta_head **ptr;",
        "// Line_Reference 756: \tarray_index i;",
        "// Line_Reference 757: \tint error;",
        "// Line_Reference 758: ",
        "// Line_Reference 759: \terror = deltas_head_set_size(ctx->notification->deltas_list,",
        "// Line_Reference 760: \t    ctx->deltas.len);",
        "// Line_Reference 761: \tif (error)",
        "// Line_Reference 762: \t\treturn error;",
        "// Line_Reference 763: ",
        "// Line_Reference 764: \tARRAYLIST_FOREACH(&ctx->deltas, ptr, i) {",
        "// Line_Reference 765: \t\terror = deltas_head_add(ctx->notification->deltas_list,",
        "// Line_Reference 766: \t\t    ctx->notification->global_data.serial,",
        "// Line_Reference 767: \t\t    (*ptr)->serial,",
        "// Line_Reference 768: \t\t    (*ptr)->doc_data.uri,",
        "// Line_Reference 769: \t\t    (*ptr)->doc_data.hash,",
        "// Line_Reference 770: \t\t    (*ptr)->doc_data.hash_len);",
        "// Line_Reference 771: ",
        "// Line_Reference 772: \t\tif (!error)",
        "// Line_Reference 773: \t\t\tcontinue;",
        "// Line_Reference 774: ",
        "// Line_Reference 775: \t\tif (error == -EINVAL)",
        "// Line_Reference 776: \t\t\treturn pr_val_err(\"Serial '%lu' at delta elements isn't part of a contiguous list of serials.\",",
        "// Line_Reference 777: \t\t\t    (*ptr)->serial);",
        "// Line_Reference 778: ",
        "// Line_Reference 779: \t\tif (error == -EEXIST)",
        "// Line_Reference 780: \t\t\treturn pr_val_err(\"Duplicated serial '%lu' at delta elements.\",",
        "// Line_Reference 781: \t\t\t    (*ptr)->serial);",
        "// Line_Reference 782: ",
        "// Line_Reference 783: \t\treturn error;",
        "// Line_Reference 784: \t}",
        "// Line_Reference 785: ",
        "// Line_Reference 786: \t/*",
        "// Line_Reference 787: \t * \"If delta elements are included, they MUST form a contiguous",
        "// Line_Reference 788: \t * sequence of serial numbers starting at a revision determined by",
        "// Line_Reference 789: \t * the Repository Server, up to the serial number mentioned in the",
        "// Line_Reference 790: \t * notification element.\"",
        "// Line_Reference 791: \t *",
        "// Line_Reference 792: \t * If all expected elements are set, everything is ok.",
        "// Line_Reference 793: \t */",
        "// Line_Reference 794: \tif (!deltas_head_values_set(ctx->notification->deltas_list))",
        "// Line_Reference 795: \t\treturn pr_val_err(\"Deltas listed don't have a contiguous sequence of serial numbers\");",
        "// Line_Reference 796: ",
        "// Line_Reference 797: \treturn 0;",
        "// Line_Reference 798: }",
        "// Line_Reference 799: ",
        "// Line_Reference 803: \tstruct rdr_notification_ctx *ctx = arg;",
        "// Line_Reference 804: \txmlReaderTypes type;",
        "// Line_Reference 806: \tint error;",
        "// Line_Reference 808: \terror = 0;",
        "// Line_Reference 810: \ttype = xmlTextReaderNodeType(reader);",
        "// Line_Reference 811: \tswitch (type) {",
        "// Line_Reference 814: \t\t\terror = parse_notification_delta(reader, ctx);",
        "// Line_Reference 816: \t\t\terror = parse_doc_data(reader, true, true,",
        "// Line_Reference 817: \t\t\t    &ctx->notification->snapshot);",
        "// Line_Reference 820: \t\t\terror = parse_global_data(reader,",
        "// Line_Reference 821: \t\t\t    &ctx->notification->global_data, NULL, 0);",
        "// Line_Reference 822: \t\t\t/* Init context for deltas and snapshot */",
        "// Line_Reference 823: \t\t\trdr_notification_ctx_init(ctx);",
        "// Line_Reference 824: \t\t} else {",
        "// Line_Reference 825: \t\t\treturn pr_val_err(\"Unexpected '%s' element\", name);",
        "// Line_Reference 827: \t\tbreak;",
        "// Line_Reference 829: \t\tif (xmlStrEqual(name, BAD_CAST RRDP_ELEM_NOTIFICATION)) {",
        "// Line_Reference 830: \t\t\terror = order_notification_deltas(ctx);",
        "// Line_Reference 831: \t\t\trdr_notification_ctx_cleanup(ctx);",
        "// Line_Reference 832: \t\t\treturn error; /* Error 0 is ok */",
        "// Line_Reference 833: \t\t}",
        "// Line_Reference 835: \tdefault:",
        "// Line_Reference 836: \t\treturn 0;",
        "// Line_Reference 837: \t}",
        "// Line_Reference 838: ",
        "// Line_Reference 839: \tif (error) {",
        "// Line_Reference 840: \t\trdr_notification_ctx_cleanup(ctx);",
        "// Line_Reference 841: \t\treturn error;",
        "// Line_Reference 850: \tstruct rdr_notification_ctx ctx;",
        "// Line_Reference 851: \tstruct update_notification *tmp;",
        "// Line_Reference 852: \tchar *dup;",
        "// Line_Reference 855: \tdup = strdup(uri_get_global(uri));",
        "// Line_Reference 856: \tif (dup == NULL)",
        "// Line_Reference 859: \terror = update_notification_create(&tmp);",
        "// Line_Reference 860: \tif (error)",
        "// Line_Reference 861: \t\treturn error;",
        "// Line_Reference 862: ",
        "// Line_Reference 863: \ttmp->uri = dup;",
        "// Line_Reference 864: ",
        "// Line_Reference 865: \tctx.notification = tmp;",
        "// Line_Reference 867: \t    &ctx);",
        "// Line_Reference 869: \t\tupdate_notification_destroy(tmp);",
        "// Line_Reference 873: \t*file = tmp;",
        "// Line_Reference 1002: \t/* Error 0 is ok */",
        "// Line_Reference 1144: \treturn deltas_head_for_each(parent->deltas_list,"
    ]
}
