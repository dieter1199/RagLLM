{
    "cve_id": "CVE-2022-23539",
    "cve_description": "Versions `<=8.5.1` of `jsonwebtoken` library could be misconfigured so that legacy, insecure key types are used for signature verification. For example, DSA keys could be used with the RS256 algorithm. You are affected if you are using an algorithm and a key type other than a combination listed in the GitHub Security Advisory as unaffected. This issue has been fixed, please update to version 9.0.0. This version validates for asymmetric key type and algorithm combinations. Please refer to the above mentioned algorithm / key type combinations for the valid secure configuration. After updating to version 9.0.0, if you still intend to continue with signing or verifying tokens using invalid key type/algorithm value combinations, youâ€™ll need to set the `allowInvalidAsymmetricKeyTypes` option  to `true` in the `sign()` and/or `verify()` functions.",
    "cve_publish_date": "2022-12-23",
    "cwe_id": "CWE-327",
    "cwe_name": "Use of a Broken or Risky Cryptographic Algorithm",
    "cwe_description": "The product uses a broken or risky cryptographic algorithm or protocol.",
    "commit_message": "Merge pull request from GHSA-8cf7-32gw-wr33\n\n* Check if node version supports asymmetricKeyDetails\n\n* Validate algorithms for ec key type\n\n* Rename variable\n\n* Rename function\n\n* Add early return for symmetric keys\n\n* Validate algorithm for RSA key type\n\n* Validate algorithm for RSA-PSS key type\n\n* Check key types for EdDSA algorithm\n\n* Rename function\n\n* Move validateKey function to module\n\n* Convert arrow to function notation\n\n* Validate key in verify function\n\n* Simplify if\n\n* Convert if to switch..case\n\n* Guard against empty key in validation\n\n* Remove empty line\n\n* Add lib to check modulus length\n\n* Add modulus length checks\n\n* Validate mgf1HashAlgorithm and saltLength\n\n* Check node version before using key details API\n\n* Use built-in modulus length getter\n\n* Fix Node version validations\n\n* Remove duplicate validateKey\n\n* Add periods to error messages\n\n* Fix validation in verify function\n\n* Make asymmetric key validation the latest validation step\n\n* Change key curve validation\n\n* Remove support for ES256K\n\n* Fix old test that was using wrong key types to sign tokens\n\n* Enable RSA-PSS for old Node versions\n\n* Add specific RSA-PSS validations on Node 16 LTS+\n\n* Improve error message\n\n* Simplify key validation code\n\n* Fix typo\n\n* Improve error message\n\n* Change var to const in test\n\n* Change const to let to avoid reassigning problem\n\n* Improve error message\n\n* Test incorrect private key type\n\n* Rename invalid to unsupported\n\n* Test verifying of jwt token with unsupported key\n\n* Test invalid private key type\n\n* Change order of object parameters\n\n* Move validation test to separate file\n\n* Move all validation tests to separate file\n\n* Add prime256v1 ec key\n\n* Remove modulus length check\n\n* WIP: Add EC key validation tests\n\n* Fix node version checks\n\n* Fix error message check on test\n\n* Add successful tests for EC curve check\n\n* Remove only from describe\n\n* Remove `only`\n\n* Remove duplicate block of code\n\n* Move variable to a different scope and make it const\n\n* Convert allowed curves to object for faster lookup\n\n* Rename variable\n\n* Change variable assignment order\n\n* Remove unused object properties\n\n* Test RSA-PSS happy path and wrong length\n\n* Add missing tests\n\n* Pass validation if no algorithm has been provided\n\n* Test validation of invalid salt length\n\n* Test error when signing token with invalid key\n\n* Change var to const/let in verify tests\n\n* Test verifying token with invalid key\n\n* Improve test error messages\n\n* Add parameter to skip private key validation\n\n* Replace DSA key with a 4096 bit long key\n\n* Test allowInvalidPrivateKeys in key signing\n\n* Improve test message\n\n* Rename variable\n\n* Add key validation flag tests\n\n* Fix variable name in Readme\n\n* Change private to public dsa key in verify\n\n* Rename flag\n\n* Run EC validation tests conditionally\n\n* Fix tests in old node versions\n\n* Ignore block of code from test coverage\n\n* Separate EC validations tests into two different ones\n\n* Add comment\n\n* Wrap switch in if instead of having an early return\n\n* Remove unsupported algorithms from asymmetric key validation\n\n* Rename option to allowInvalidAsymmetricKeyTypes and improve Readme\n\n* 9.0.0\n\n* adding migration notes to readme\n\n* adding changelog for version 9.0.0\n\nCo-authored-by: julienwoll <julien.wollscheid@auth0.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "verify.tests.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "74",
    "number_of_lines_deleted_vulnerable_to_cve": "43",
    "vulnerable_lines": [
        "// Line_Reference 1: var jwt = require('../index');",
        "// Line_Reference 2: var jws = require('jws');",
        "// Line_Reference 3: var fs = require('fs');",
        "// Line_Reference 4: var path = require('path');",
        "// Line_Reference 5: var sinon = require('sinon');",
        "// Line_Reference 6: var JsonWebTokenError = require('../lib/JsonWebTokenError');",
        "// Line_Reference 8: var assert = require('chai').assert;",
        "// Line_Reference 9: var expect = require('chai').expect;",
        "// Line_Reference 12:   var pub = fs.readFileSync(path.join(__dirname, 'pub.pem'));",
        "// Line_Reference 13:   var priv = fs.readFileSync(path.join(__dirname, 'priv.pem'));",
        "// Line_Reference 16:     var header = { alg: 'RS256' };",
        "// Line_Reference 17:     var payload = { iat: Math.floor(Date.now() / 1000 ) };",
        "// Line_Reference 19:     var signed = jws.sign({",
        "// Line_Reference 34:     var header = { alg: 'none' };",
        "// Line_Reference 35:     var payload = { iat: Math.floor(Date.now() / 1000 ) };",
        "// Line_Reference 37:     var signed = jws.sign({",
        "// Line_Reference 50:     var header = { alg: 'none' };",
        "// Line_Reference 51:     var payload = { iat: Math.floor(Date.now() / 1000 ) };",
        "// Line_Reference 53:     var signed = jws.sign({",
        "// Line_Reference 66:     var header = { alg: 'none' };",
        "// Line_Reference 67:     var payload = { iat: Math.floor(Date.now() / 1000 ) };",
        "// Line_Reference 69:     var signed = jws.sign({",
        "// Line_Reference 102:     var token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmb28iOiJiYXIiLCJpYXQiOjE0MzcwMTg1ODIsImV4cCI6MTQzNzAxODU5Mn0.3aR3vocmgRpG05rsI9MpR6z2T_BGtMQaPq2YR6QaroU';",
        "// Line_Reference 103:     var key = 'key';",
        "// Line_Reference 105:     var payload = { foo: 'bar', iat: 1437018582, exp: 1437018592 };",
        "// Line_Reference 106:     var options = {algorithms: ['HS256'], ignoreExpiration: true};",
        "// Line_Reference 117:       var keyFunc = function(header, callback) {",
        "// Line_Reference 131:       var keyFunc = function(header, callback) {",
        "// Line_Reference 143:       var keyFunc = function(header, callback) {",
        "// Line_Reference 156:       var keyFunc = function(header, callback) {",
        "// Line_Reference 170:       var keyFunc = function(header, callback) {",
        "// Line_Reference 187:     var token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmb28iOiJiYXIiLCJpYXQiOjE0MzcwMTg1ODIsImV4cCI6MTQzNzAxODU5Mn0.3aR3vocmgRpG05rsI9MpR6z2T_BGtMQaPq2YR6QaroU';",
        "// Line_Reference 188:     var key = 'key';",
        "// Line_Reference 190:     var clock;",
        "// Line_Reference 197:       var options = {algorithms: ['HS256']};",
        "// Line_Reference 211:       var options = {algorithms: ['HS256'], clockTolerance: 5 }",
        "// Line_Reference 221:       var clockTimestamp = 1000000000;",
        "// Line_Reference 223:         var token = jwt.sign({foo: 'bar', iat: clockTimestamp, exp: clockTimestamp + 1}, key);",
        "// Line_Reference 230:         var token = jwt.sign({foo: 'bar', iat: clockTimestamp, exp: clockTimestamp + 1}, key);",
        "// Line_Reference 241:         var token = jwt.sign({foo: 'bar', iat: clockTimestamp, exp: clockTimestamp + 1}, key);",
        "// Line_Reference 253:       var token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmb28iOiJiYXIiLCJpYXQiOjE0MzcwMTg1ODIsImV4cCI6MTQzNzAxODgwMH0.AVOsNC7TiT-XVSpCpkwB1240izzCIJ33Lp07gjnXVpA';",
        "// Line_Reference 255:         var clockTimestamp = 1437018900;  // iat + 318s (exp: iat + 218s)",
        "// Line_Reference 256:         var options = {algorithms: ['HS256'], clockTimestamp: clockTimestamp, maxAge: '1000y'};"
    ]
}
