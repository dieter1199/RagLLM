{
    "cve_id": "CVE-2022-1587",
    "cve_description": "An out-of-bounds read vulnerability was discovered in the PCRE2 library in the get_recurse_data_length() function of the pcre2_jit_compile.c file. This issue affects recursions in JIT-compiled regular expressions caused by duplicate data transfers.",
    "cve_publish_date": "2022-05-16",
    "cwe_id": "CWE-125",
    "cwe_name": "Out-of-bounds Read",
    "cwe_description": "The product reads data past the end, or before the beginning, of the intended buffer.",
    "commit_message": "Fixed an issue affecting recursions in JIT",
    "type_of_change": "Modification",
    "filename_of_changes": "pcre2_jit_compile.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "190",
    "number_of_lines_deleted_vulnerable_to_cve": "100",
    "vulnerable_lines": [
        "// Line_Reference 2324: int size;",
        "// Line_Reference 2330: BOOL capture_last_found = FALSE;",
        "// Line_Reference 2355:     if (common->capture_last_ptr != 0)",
        "// Line_Reference 2356:       capture_last_found = TRUE;",
        "// Line_Reference 2361:     if (PRIVATE_DATA(cc) != 0)",
        "// Line_Reference 2363:       length++;",
        "// Line_Reference 2382:     length++;",
        "// Line_Reference 2389:     length += 2;",
        "// Line_Reference 2390:     if (common->capture_last_ptr != 0)",
        "// Line_Reference 2391:       capture_last_found = TRUE;",
        "// Line_Reference 2392:     if (common->optimized_cbracket[GET2(cc, 1 + LINK_SIZE)] == 0)",
        "// Line_Reference 2399:     length += 2 + 2;",
        "// Line_Reference 2400:     if (common->capture_last_ptr != 0)",
        "// Line_Reference 2401:       capture_last_found = TRUE;",
        "// Line_Reference 2408:     if (*alternative == OP_KETRMAX || *alternative == OP_KETRMIN)",
        "// Line_Reference 2414:     if (PRIVATE_DATA(cc) != 0)",
        "// Line_Reference 2423:     if (PRIVATE_DATA(cc) != 0)",
        "// Line_Reference 2432:     if (PRIVATE_DATA(cc) != 0)",
        "// Line_Reference 2441:     if (PRIVATE_DATA(cc) != 0)",
        "// Line_Reference 2447:     if (PRIVATE_DATA(cc) != 0)",
        "// Line_Reference 2453:     if (PRIVATE_DATA(cc) != 0)",
        "// Line_Reference 2466:     if (PRIVATE_DATA(cc) != 0)",
        "// Line_Reference 2501:     if (!control_head_found)",
        "// Line_Reference 2502:       control_head_found = TRUE;",
        "// Line_Reference 2522: if (capture_last_found)",
        "// Line_Reference 2523:   length++;",
        "// Line_Reference 2556: BOOL setsom_found = FALSE;",
        "// Line_Reference 2557: BOOL setmark_found = FALSE;",
        "// Line_Reference 2558: BOOL capture_last_found = FALSE;",
        "// Line_Reference 2559: BOOL control_head_found = FALSE;",
        "// Line_Reference 2563: control_head_found = TRUE;",
        "// Line_Reference 2651:     if (has_quit && !setsom_found)",
        "// Line_Reference 2655:       setsom_found = TRUE;",
        "// Line_Reference 2663:       if (common->has_set_som && !setsom_found)",
        "// Line_Reference 2667:         setsom_found = TRUE;",
        "// Line_Reference 2669:       if (common->mark_ptr != 0 && !setmark_found)",
        "// Line_Reference 2673:         setmark_found = TRUE;",
        "// Line_Reference 2676:     if (common->capture_last_ptr != 0 && !capture_last_found)",
        "// Line_Reference 2680:       capture_last_found = TRUE;",
        "// Line_Reference 2686:     if (PRIVATE_DATA(cc) != 0)",
        "// Line_Reference 2688:       private_count = 1;",
        "// Line_Reference 2689:       private_srcw[0] = PRIVATE_DATA(cc);",
        "// Line_Reference 2708:     private_count = 1;",
        "// Line_Reference 2715:     offset = (GET2(cc, 1 + LINK_SIZE)) << 1;",
        "// Line_Reference 2716:     shared_srcw[0] = OVECTOR(offset);",
        "// Line_Reference 2717:     shared_srcw[1] = OVECTOR(offset + 1);",
        "// Line_Reference 2718:     shared_count = 2;",
        "// Line_Reference 2720:     if (common->capture_last_ptr != 0 && !capture_last_found)",
        "// Line_Reference 2722:       shared_srcw[2] = common->capture_last_ptr;",
        "// Line_Reference 2723:       shared_count = 3;",
        "// Line_Reference 2724:       capture_last_found = TRUE;",
        "// Line_Reference 2727:     if (common->optimized_cbracket[GET2(cc, 1 + LINK_SIZE)] == 0)",
        "// Line_Reference 2729:       private_count = 1;",
        "// Line_Reference 2730:       private_srcw[0] = OVECTOR_PRIV(GET2(cc, 1 + LINK_SIZE));",
        "// Line_Reference 2737:     offset = (GET2(cc, 1 + LINK_SIZE)) << 1;",
        "// Line_Reference 2738:     shared_srcw[0] = OVECTOR(offset);",
        "// Line_Reference 2739:     shared_srcw[1] = OVECTOR(offset + 1);",
        "// Line_Reference 2740:     shared_count = 2;",
        "// Line_Reference 2742:     if (common->capture_last_ptr != 0 && !capture_last_found)",
        "// Line_Reference 2744:       shared_srcw[2] = common->capture_last_ptr;",
        "// Line_Reference 2745:       shared_count = 3;",
        "// Line_Reference 2746:       capture_last_found = TRUE;",
        "// Line_Reference 2749:     private_count = 2;",
        "// Line_Reference 2751:     private_srcw[1] = OVECTOR_PRIV(GET2(cc, 1 + LINK_SIZE));",
        "// Line_Reference 2760:       private_count = 1;",
        "// Line_Reference 2767:     if (PRIVATE_DATA(cc))",
        "// Line_Reference 2768:       {",
        "// Line_Reference 2770:       private_srcw[0] = PRIVATE_DATA(cc);",
        "// Line_Reference 2771:       }",
        "// Line_Reference 2779:     if (PRIVATE_DATA(cc))",
        "// Line_Reference 2782:       private_srcw[0] = PRIVATE_DATA(cc);",
        "// Line_Reference 2783:       private_srcw[1] = PRIVATE_DATA(cc) + sizeof(sljit_sw);",
        "// Line_Reference 2792:     if (PRIVATE_DATA(cc))",
        "// Line_Reference 2795:       private_srcw[0] = PRIVATE_DATA(cc);",
        "// Line_Reference 2796:       private_srcw[1] = PRIVATE_DATA(cc) + sizeof(sljit_sw);",
        "// Line_Reference 2805:     if (PRIVATE_DATA(cc))",
        "// Line_Reference 2806:       {",
        "// Line_Reference 2808:       private_srcw[0] = PRIVATE_DATA(cc);",
        "// Line_Reference 2809:       }",
        "// Line_Reference 2814:     if (PRIVATE_DATA(cc))",
        "// Line_Reference 2817:       private_srcw[0] = PRIVATE_DATA(cc);",
        "// Line_Reference 2824:     if (PRIVATE_DATA(cc))",
        "// Line_Reference 2827:       private_srcw[0] = PRIVATE_DATA(cc);",
        "// Line_Reference 2845:         private_count = 1;",
        "// Line_Reference 2850:         private_count = 2;",
        "// Line_Reference 2852:         private_srcw[1] = private_srcw[0] + sizeof(sljit_sw);",
        "// Line_Reference 2867:     if (has_quit && !setmark_found)",
        "// Line_Reference 2871:       setmark_found = TRUE;",
        "// Line_Reference 2873:     if (common->control_head_ptr != 0 && !control_head_found)",
        "// Line_Reference 2877:       control_head_found = TRUE;",
        "// Line_Reference 2884:     if (!control_head_found)",
        "// Line_Reference 2888:       control_head_found = TRUE;",
        "// Line_Reference 2896:     break;",
        "// Line_Reference 13814: common->private_data_ptrs = (sljit_s32 *)SLJIT_MALLOC(total_length * (sizeof(sljit_s32) + (common->has_then ? 1 : 0)), allocator_data);",
        "// Line_Reference 14077: while (common->currententry != NULL)",
        "// Line_Reference 14079:   /* Might add new entries. */",
        "// Line_Reference 14080:   compile_recurse(common);",
        "// Line_Reference 14081:   if (SLJIT_UNLIKELY(sljit_get_compiler_error(compiler)))",
        "// Line_Reference 14089:   flush_stubs(common);",
        "// Line_Reference 14090:   common->currententry = common->currententry->next;"
    ]
}
