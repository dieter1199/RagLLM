{
    "cve_id": "CVE-2017-12932",
    "cve_description": "ext/standard/var_unserializer.re in PHP 7.0.x through 7.0.22 and 7.1.x through 7.1.8 is prone to a heap use after free while unserializing untrusted data, related to improper use of the hash API for key deletion in a situation with an invalid array size. Exploitation of this issue can have an unspecified impact on the integrity of PHP.",
    "cve_publish_date": "2017-08-18",
    "cwe_id": "CWE-416",
    "cwe_name": "Use After Free",
    "cwe_description": "The product reuses or references memory after it has been freed. At some point afterward, the memory may be allocated again and saved in another pointer, while the original pointer references a location somewhere within the new allocation. Any operations using the original pointer are no longer valid because the memory \"belongs\" to the code that operates on the new pointer.",
    "commit_message": "Fixed bug #74103 and bug #75054\n\nDirectly fail unserialization when trying to acquire an r/R\nreference to an UNDEF HT slot. Previously this left an UNDEF and\nlater deleted the index/key from the HT.\n\nWhat actually caused the issue here is a combination of two\nfactors: First, the key deletion was performed using the hash API,\nrather than the symtable API, such that the element was not actually\nremoved if it used an integral string key. Second, a subsequent\ndeletion operation, while collecting trailing UNDEF ranges, would\nmark the element as available for reuse (leaving a corrupted HT\nstate with nNumOfElemnts > nNumUsed).\n\nFix this by failing early and dropping the deletion code.",
    "type_of_change": "Modification",
    "filename_of_changes": "var_unserializer.re",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "4",
    "number_of_lines_deleted_vulnerable_to_cve": "15",
    "vulnerable_lines": [
        "// Line_Reference 412: \t\tif (UNEXPECTED(Z_ISUNDEF_P(data))) {",
        "// Line_Reference 413: \t\t\tif (Z_TYPE(key) == IS_LONG) {",
        "// Line_Reference 414: \t\t\t\tzend_hash_index_del(ht, Z_LVAL(key));",
        "// Line_Reference 415: \t\t\t} else {",
        "// Line_Reference 416: \t\t\t\tzend_hash_del_ind(ht, Z_STR(key));",
        "// Line_Reference 417: \t\t\t}",
        "// Line_Reference 418: \t\t} else {",
        "// Line_Reference 419: \t\t\tvar_push_dtor(var_hash, data);",
        "// Line_Reference 420: \t\t}",
        "// Line_Reference 421: ",
        "// Line_Reference 600: \tzval_ptr_dtor(rval);",
        "// Line_Reference 602: \t\tZVAL_UNDEF(rval);",
        "// Line_Reference 603: \t\treturn 1;",
        "// Line_Reference 631: \t\tZVAL_UNDEF(rval);",
        "// Line_Reference 632: \t\treturn 1;"
    ]
}
