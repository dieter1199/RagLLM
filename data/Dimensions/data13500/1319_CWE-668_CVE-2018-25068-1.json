{
    "cve_id": "CVE-2018-25068",
    "cve_description": "A vulnerability has been found in devent globalpom-utils up to 4.5.0 and classified as critical. This vulnerability affects the function createTmpDir of the file globalpomutils-fileresources/src/main/java/com/anrisoftware/globalpom/fileresourcemanager/FileResourceManagerProvider.java. The manipulation leads to insecure temporary file. The attack can be initiated remotely. Upgrading to version 4.5.1 is able to address this issue. The patch is identified as 77a820bac2f68e662ce261ecb050c643bd7ee560. It is recommended to upgrade the affected component. VDB-217570 is the identifier assigned to this vulnerability.",
    "cve_publish_date": "2023-01-06",
    "cwe_id": "CWE-668",
    "cwe_name": "Exposure of Resource to Wrong Sphere",
    "cwe_description": "The product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource.",
    "commit_message": "Feature #4100 Fix critical Vulnerability\n\n\"File.createTempFile\" should not be used to create a directory",
    "type_of_change": "Modification",
    "filename_of_changes": "FileResourceManagerProvider.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "57",
    "number_of_lines_deleted_vulnerable_to_cve": "78",
    "vulnerable_lines": [
        "// Line_Reference 1: /*",
        "// Line_Reference 2:  * Copyright 2016 Erwin MÃ¼ller <erwin.mueller@deventm.org>",
        "// Line_Reference 3:  *",
        "// Line_Reference 4:  * Licensed under the Apache License, Version 2.0 (the \"License\");",
        "// Line_Reference 5:  * you may not use this file except in compliance with the License.",
        "// Line_Reference 6:  * You may obtain a copy of the License at",
        "// Line_Reference 7:  *",
        "// Line_Reference 8:  *     http://www.apache.org/licenses/LICENSE-2.0",
        "// Line_Reference 9:  *",
        "// Line_Reference 10:  * Unless required by applicable law or agreed to in writing, software",
        "// Line_Reference 11:  * distributed under the License is distributed on an \"AS IS\" BASIS,",
        "// Line_Reference 12:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "// Line_Reference 13:  * See the License for the specific language governing permissions and",
        "// Line_Reference 14:  * limitations under the License.",
        "// Line_Reference 15:  */",
        "// Line_Reference 27:  *",
        "// Line_Reference 29:  *",
        "// Line_Reference 54:  *",
        "// Line_Reference 58: public class FileResourceManagerProvider implements",
        "// Line_Reference 59: \t\tProvider<FileResourceManager> {",
        "// Line_Reference 61: \t@Inject",
        "// Line_Reference 62: \tprivate FileResourceManagerProviderLogger log;",
        "// Line_Reference 64: \tprivate String storeDir;",
        "// Line_Reference 66: \tprivate boolean debug;",
        "// Line_Reference 68: \t/**",
        "// Line_Reference 69: \t * Sets debug enabled for the file resource manager.",
        "// Line_Reference 70: \t *",
        "// Line_Reference 71: \t * @param debug",
        "// Line_Reference 72: \t *            set to {@code true} to enable debug before creating the",
        "// Line_Reference 73: \t *            manager.",
        "// Line_Reference 74: \t */",
        "// Line_Reference 75: \tpublic void setDebug(boolean debug) {",
        "// Line_Reference 76: \t\tthis.debug = debug;",
        "// Line_Reference 77: \t}",
        "// Line_Reference 79: \t/**",
        "// Line_Reference 80: \t * Sets the store directory path for the file resource manager.",
        "// Line_Reference 81: \t *",
        "// Line_Reference 82: \t * @param path",
        "// Line_Reference 83: \t *            the store directory {@link File} path.",
        "// Line_Reference 84: \t */",
        "// Line_Reference 85: \tpublic void setStoreDir(File path) {",
        "// Line_Reference 86: \t\tsetStoreDir(path.getAbsolutePath());",
        "// Line_Reference 87: \t}",
        "// Line_Reference 89: \t/**",
        "// Line_Reference 90: \t * Sets the store directory path for the file resource manager.",
        "// Line_Reference 91: \t *",
        "// Line_Reference 92: \t * @param path",
        "// Line_Reference 93: \t *            the store directory path.",
        "// Line_Reference 94: \t */",
        "// Line_Reference 95: \tpublic void setStoreDir(String path) {",
        "// Line_Reference 96: \t\tthis.storeDir = path;",
        "// Line_Reference 97: \t}",
        "// Line_Reference 99: \t@Override",
        "// Line_Reference 100: \tpublic FileResourceManager get() {",
        "// Line_Reference 101: \t\tString workDir = createTmpDir();",
        "// Line_Reference 102: \t\tboolean urlEncodePath = false;",
        "// Line_Reference 103: \t\tfinal ByteArrayOutputStream stream = new ByteArrayOutputStream(1024);",
        "// Line_Reference 104: \t\tPrintWriter printWriter = new PrintWriter(stream) {",
        "// Line_Reference 105: \t\t\t@Override",
        "// Line_Reference 106: \t\t\tpublic void flush() {",
        "// Line_Reference 107: \t\t\t\tsuper.flush();",
        "// Line_Reference 108: \t\t\t\tlog.logFileResourceMessage(stream.toString());",
        "// Line_Reference 109: \t\t\t}",
        "// Line_Reference 110: \t\t};",
        "// Line_Reference 111: \t\tLoggerFacade logger = new PrintWriterLogger(printWriter, \"\", debug);",
        "// Line_Reference 112: \t\treturn new FileResourceManager(storeDir, workDir, urlEncodePath, logger);",
        "// Line_Reference 113: \t}",
        "// Line_Reference 115: \tprivate String createTmpDir() {",
        "// Line_Reference 116: \t\ttry {",
        "// Line_Reference 117: \t\t\tFile tmp = File.createTempFile(\"fileresourcemanager\", null);",
        "// Line_Reference 118: \t\t\ttmp.delete();",
        "// Line_Reference 119: \t\t\ttmp.mkdir();",
        "// Line_Reference 120: \t\t\tString workDir = tmp.getAbsolutePath();",
        "// Line_Reference 121: \t\t\treturn workDir;",
        "// Line_Reference 122: \t\t} catch (IOException e) {",
        "// Line_Reference 123: \t\t\tthrow log.errorCreateWorkDir(e);",
        "// Line_Reference 124: \t\t}",
        "// Line_Reference 125: \t}"
    ]
}
