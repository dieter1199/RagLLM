{
    "cve_id": "CVE-2016-5844",
    "cve_description": "Integer overflow in the ISO parser in libarchive before 3.2.1 allows remote attackers to cause a denial of service (application crash) via a crafted ISO file.",
    "cve_publish_date": "2016-09-21",
    "cwe_id": "CWE-190",
    "cwe_name": "Integer Overflow or Wraparound",
    "cwe_description": "The product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number.",
    "commit_message": "Issue 717:  Fix integer overflow when computing location of volume descriptor\n\nThe multiplication here defaulted to 'int' but calculations\nof file positions should always use int64_t.  A simple cast\nsuffices to fix this since the base location is always 32 bits\nfor ISO, so multiplying by the sector size will never overflow\na 64-bit integer.",
    "type_of_change": "Modification",
    "filename_of_changes": "archive_read_support_format_iso9660.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "2",
    "number_of_lines_deleted_vulnerable_to_cve": "2",
    "vulnerable_lines": [
        "// Line_Reference 1094: \tskipsize = LOGICAL_BLOCK_SIZE * vd->location;",
        "// Line_Reference 1132: \t\tskipsize = LOGICAL_BLOCK_SIZE * vd->location;"
    ]
}
