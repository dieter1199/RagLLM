{
    "cve_id": "CVE-2021-3602",
    "cve_description": "An information disclosure flaw was found in Buildah, when building containers using chroot isolation. Running processes in container builds (e.g. Dockerfile RUN commands) can access environment variables from parent and grandparent processes. When run in a container in a CI/CD environment, environment variables may include sensitive information that was shared with the container in order to be used only by Buildah itself (e.g. container registry credentials).",
    "cve_publish_date": "2022-03-03",
    "cwe_id": "CWE-212",
    "cwe_name": "Improper Removal of Sensitive Information Before Storage or Transfer",
    "cwe_description": "The product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.",
    "commit_message": "chroot: fix environment value leakage to intermediate processes\n\nBlake Burkhart reports that when running processes using \"chroot\"\nisolation, the process being run can examine the environment of its\nimmediate parent and grandparent processes (CVE-2021-3602).\n\nWhen run in a container in a CI/CD environment, the environment may\ninclude sensitive information which was shared with the container in\norder to be used only by buildah itself.  The command being executed is\nable to read such information.\n\nThis patch reduces the set of environment variables passed to these\nintermediate processes, from all variables to the one which is used to\ncontrol the level of debug logging.  It also corrects a misleading debug\nmessage and expands the description of chroot isolation in man pages.\n\nSigned-off-by: Nalin Dahyabhai <nalin@redhat.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "run.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "5",
    "number_of_lines_deleted_vulnerable_to_cve": "10",
    "vulnerable_lines": [
        "// Line_Reference 164: \tcmd.Env = append([]string{fmt.Sprintf(\"LOGLEVEL=%d\", logrus.GetLevel())}, os.Environ()...)",
        "// Line_Reference 210: \tif options.Spec == nil {",
        "// Line_Reference 576: \tcmd.Env = append([]string{fmt.Sprintf(\"LOGLEVEL=%d\", logrus.GetLevel())}, os.Environ()...)",
        "// Line_Reference 666: \tif options.Spec == nil {",
        "// Line_Reference 822: \tsawUserNS := false",
        "// Line_Reference 857: \t\t\t\tlogrus.Debugf(\"unable to join user namespace %q, creating a new one\", ns.Path)",
        "// Line_Reference 859: \t\t\tsawUserNS = true",
        "// Line_Reference 870: \tif !sawUserNS {",
        "// Line_Reference 871: \t\tlogrus.Debugf(\"user namespace not requested, but creating a new one anyway\")",
        "// Line_Reference 872: \t}"
    ]
}
