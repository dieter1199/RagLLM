{
    "cve_id": "CVE-2022-24766",
    "cve_description": "mitmproxy is an interactive, SSL/TLS-capable intercepting proxy. In mitmproxy 7.0.4 and below, a malicious client or server is able to perform HTTP request smuggling attacks through mitmproxy. This means that a malicious client/server could smuggle a request/response through mitmproxy as part of another request/response's HTTP message body. While mitmproxy would only see one request, the target server would see multiple requests. A smuggled request is still captured as part of another request's body, but it does not appear in the request list and does not go through the usual mitmproxy event hooks, where users may have implemented custom access control checks or input sanitization. Unless mitmproxy is used to protect an HTTP/1 service, no action is required. The vulnerability has been fixed in mitmproxy 8.0.0 and above. There are currently no known workarounds.",
    "cve_publish_date": "2022-03-21",
    "cwe_id": "CWE-444",
    "cwe_name": "Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')",
    "cwe_description": "The product acts as an intermediary HTTP agent\n         (such as a proxy or firewall) in the data flow between two\n         entities such as a client and server, but it does not\n         interpret malformed HTTP requests or responses in ways that\n         are consistent with how the messages will be processed by\n         those entities that are at the ultimate destination.",
    "commit_message": "security: reject whitespace in HTTP/1 header names\n\nThis commit fixes GHSA-gcx2-gvj7-pxv3 by making mitmproxy\nreject header names that contain whitespace characters by default.\nA new `validate_inbound_headers` option is provided to turn this behavior\noff at the expense of allowing HTTP smuggling vulnerabilities.",
    "type_of_change": "Modification",
    "filename_of_changes": "test_read.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "14",
    "number_of_lines_deleted_vulnerable_to_cve": "6",
    "vulnerable_lines": [
        "// Line_Reference 7:     _read_request_line, _read_response_line, _read_headers, get_header_tokens",
        "// Line_Reference 94:     # both content-length and chunked (possible request smuggling)",
        "// Line_Reference 95:     with pytest.raises(ValueError, match=\"Received both a Transfer-Encoding and a Content-Length header\"):",
        "// Line_Reference 96:         expected_http_body_size(",
        "// Line_Reference 97:             treq(headers=Headers(transfer_encoding=\"chunked\", content_length=\"42\")),",
        "// Line_Reference 98:         )"
    ]
}
