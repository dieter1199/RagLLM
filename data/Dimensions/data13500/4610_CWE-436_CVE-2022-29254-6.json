{
    "cve_id": "CVE-2022-29254",
    "cve_description": "silverstripe-omnipay is a SilverStripe integration with Omnipay PHP payments library. For a subset of Omnipay gateways (those that use intermediary states like `isNotification()` or `isRedirect()`), if the payment identifier or success URL is exposed it is possible for payments to be prematurely marked as completed without payment being taken. This is mitigated by the fact that most payment gateways hide this information from users, however some issuing banks offer flawed 3DSecure implementations that may inadvertently expose this data. The following versions have been patched to fix this issue: `2.5.2`, `3.0.2`, `3.1.4`, and `3.2.1`. There are no known workarounds for this vulnerability.",
    "cve_publish_date": "2022-06-09",
    "cwe_id": "CWE-436",
    "cwe_name": "Interpretation Conflict",
    "cwe_description": "Product A handles inputs or steps differently than Product B, which causes A to perform incorrect actions based on its perception of B's state.",
    "commit_message": "[CVE-2022-29254] Add extra validation on payment completion",
    "type_of_change": "Modification",
    "filename_of_changes": "RefundService.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "16",
    "number_of_lines_deleted_vulnerable_to_cve": "14",
    "vulnerable_lines": [
        "// Line_Reference 12: use SilverStripe\\Omnipay\\Model\\Message;",
        "// Line_Reference 23:     protected $requestMessageType = Message\\RefundRequest::class;",
        "// Line_Reference 25:     protected $errorMessageType = Message\\RefundError::class;",
        "// Line_Reference 130:         if ($serviceResponse->isAwaitingNotification()) {",
        "// Line_Reference 136:         } else {",
        "// Line_Reference 137:             if ($serviceResponse->isError()) {",
        "// Line_Reference 138:                 $this->createMessage($this->errorMessageType, $response);",
        "// Line_Reference 139:             } else {",
        "// Line_Reference 140:                 if ($isPartial) {",
        "// Line_Reference 141:                     $this->createPartialPayment(PaymentMath::multiply($amount, '-1'), $this->pendingState);",
        "// Line_Reference 142:                 }",
        "// Line_Reference 143:                 $this->markCompleted($this->endState, $serviceResponse, $response);",
        "// Line_Reference 185:             $this->createMessage(Message\\PartiallyRefundedResponse::class, $gatewayMessage);",
        "// Line_Reference 187:             $this->createMessage(Message\\RefundedResponse::class, $gatewayMessage);"
    ]
}
