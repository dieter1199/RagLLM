{
    "cve_id": "CVE-2020-26301",
    "cve_description": "ssh2 is client and server modules written in pure JavaScript for node.js. In ssh2 before version 1.4.0 there is a command injection vulnerability. The issue only exists on Windows. This issue may lead to remote code execution if a client of the library calls the vulnerable method with untrusted input. This is fixed in version 1.4.0.",
    "cve_publish_date": "2021-09-20",
    "cwe_id": "CWE-78",
    "cwe_name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
    "cwe_description": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
    "commit_message": "examples,lib,test: switch to code rewrite\n\nFor more information see: https://github.com/mscdex/ssh2/issues/935",
    "type_of_change": "ModificationType.ADD",
    "filename_of_changes": "test.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "9",
    "number_of_lines_deleted_vulnerable_to_cve": "18",
    "vulnerable_lines": [
        "// Line_Reference 1: var spawn = require('child_process').spawn,",
        "// Line_Reference 2:     join = require('path').join;",
        "// Line_Reference 4: var files = require('fs').readdirSync(__dirname).filter(function(f) {",
        "// Line_Reference 5:       return (f.substr(0, 5) === 'test-');",
        "// Line_Reference 6:     }).map(function(f) {",
        "// Line_Reference 7:       return join(__dirname, f);",
        "// Line_Reference 8:     }),",
        "// Line_Reference 9:     f = -1;",
        "// Line_Reference 11: function next() {",
        "// Line_Reference 12:   if (++f < files.length) {",
        "// Line_Reference 13:     spawn(process.argv[0], [ files[f] ], { stdio: 'inherit' })",
        "// Line_Reference 14:       .on('exit', function(code) {",
        "// Line_Reference 15:         if (code === 0)",
        "// Line_Reference 16:           process.nextTick(next);",
        "// Line_Reference 17:         else",
        "// Line_Reference 18:           process.exit(code);",
        "// Line_Reference 19:       });",
        "// Line_Reference 22: next();"
    ]
}
