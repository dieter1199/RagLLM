{
    "cve_id": "CVE-2022-32166",
    "cve_description": "In ovs versions v0.90.0 through v2.5.0 are vulnerable to heap buffer over-read in flow.c. An unsafe comparison of “minimasks” function could lead access to an unmapped region of memory. This vulnerability is capable of crashing the software, memory modification, and possible remote execution.",
    "cve_publish_date": "2022-09-28",
    "cwe_id": "CWE-125",
    "cwe_name": "Out-of-bounds Read",
    "cwe_description": "The product reads data past the end, or before the beginning, of the intended buffer.",
    "commit_message": "flow: Avoid unsafe comparison of minimasks.\n\nThe following, run inside the OVS sandbox, caused OVS to abort when\nAddress Sanitizer was used:\n\n    ovs-vsctl add-br br-int\n    ovs-ofctl add-flow br-int \"table=0,cookie=0x1234,priority=10000,icmp,actions=drop\"\n    ovs-ofctl --strict del-flows br-int \"table=0,cookie=0x1234/-1,priority=10000\"\n\nSample report from Address Sanitizer:\n\n==3029==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x603000043260 at pc 0x7f6b09c2459b bp 0x7ffcb67e7540 sp 0x7ffcb67e6cf0\nREAD of size 40 at 0x603000043260 thread T0\n    #0 0x7f6b09c2459a  (/lib/x86_64-linux-gnu/libasan.so.5+0xb859a)\n    #1 0x565110a748a5 in minimask_equal ../lib/flow.c:3510\n    #2 0x565110a9ea41 in minimatch_equal ../lib/match.c:1821\n    #3 0x56511091e864 in collect_rules_strict ../ofproto/ofproto.c:4516\n    #4 0x56511093d526 in delete_flow_start_strict ../ofproto/ofproto.c:5959\n    #5 0x56511093d526 in ofproto_flow_mod_start ../ofproto/ofproto.c:7949\n    #6 0x56511093d77b in handle_flow_mod__ ../ofproto/ofproto.c:6122\n    #7 0x56511093db71 in handle_flow_mod ../ofproto/ofproto.c:6099\n    #8 0x5651109407f6 in handle_single_part_openflow ../ofproto/ofproto.c:8406\n    #9 0x5651109407f6 in handle_openflow ../ofproto/ofproto.c:8587\n    #10 0x5651109e40da in ofconn_run ../ofproto/connmgr.c:1318\n    #11 0x5651109e40da in connmgr_run ../ofproto/connmgr.c:355\n    #12 0x56511092b129 in ofproto_run ../ofproto/ofproto.c:1826\n    #13 0x5651108f23cd in bridge_run__ ../vswitchd/bridge.c:2965\n    #14 0x565110904887 in bridge_run ../vswitchd/bridge.c:3023\n    #15 0x5651108e659c in main ../vswitchd/ovs-vswitchd.c:127\n    #16 0x7f6b093b709a in __libc_start_main ../csu/libc-start.c:308\n    #17 0x5651108e9009 in _start (/home/blp/nicira/ovs/_build/vswitchd/ovs-vswitchd+0x11d009)\n\nThis fixes the problem, which although largely theoretical could crop up\nwith odd implementations of memcmp(), perhaps ones optimized in various\n\"clever\" ways.  All in all, it seems best to avoid the theoretical problem.\n\nAcked-by: Dumitru Ceara <dceara@redhat.com>\nSigned-off-by: Ben Pfaff <blp@ovn.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "flow.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "16",
    "number_of_lines_deleted_vulnerable_to_cve": "3",
    "vulnerable_lines": [
        "// Line_Reference 2:  * Copyright (c) 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2017 Nicira, Inc.",
        "// Line_Reference 3509:     return !memcmp(a, b, sizeof *a",
        "// Line_Reference 3510:                    + MINIFLOW_VALUES_SIZE(miniflow_n_values(&a->masks)));"
    ]
}
