static void
GBytes                      *old_metadata)
if (g_key_file_load_from_bytes (metakey, metadata, G_KEY_FILE_NONE, NULL))
{
op->resolved_metadata = g_bytes_ref (metadata);
op->resolved_metakey = g_steal_pointer (&metakey);
}
else
g_message ("Warning: Failed to parse metadata for %s\n", flatpak_decomposed_get_ref (op->ref));
g_message ("Warning: Failed to parse old metadata for %s\n", flatpak_decomposed_get_ref (op->ref));
static void
GBytes *metadata_bytes)
mark_op_resolved (op, checksum, sideload_path, metadata_bytes, old_metadata_bytes);
static void
GVariant *commit_data)
g_message ("Warning: No xa.metadata in local commit %s ref %s", checksum, flatpak_decomposed_get_ref (op->ref));
else
metadata_bytes = g_bytes_new (xa_metadata, strlen (xa_metadata));
resolve_op_end (self, op, checksum, sideload_path, metadata_bytes);
FlatpakRemoteState *state)
resolve_op_end (self, op, checksum, sideload_path, metadata_bytes);
return TRUE;
mark_op_resolved (op, op->resolved_commit, NULL, NULL, NULL);
mark_op_resolved (op, checksum, NULL, metadata_bytes, NULL);
mark_op_resolved (op, op->commit, NULL, op->external_metadata, NULL);
resolve_op_from_commit (self, op, checksum, NULL, commit_data);
if (!try_resolve_op_from_metadata (self, op, checksum, sideload_path, state))
/* Else try to load the commit object.
resolve_op_from_commit (self, op, checksum, sideload_path, commit_data);