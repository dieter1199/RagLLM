const TfLiteTensor* inputs = GetInput(context, node, kInputsTensor);
const TfLiteTensor* sequence_length =
GetInput(context, node, kSequenceLengthTensor);
TfLiteTensor* indices = GetOutput(context, node, i);
TfLiteTensor* values = GetOutput(context, node, i + top_paths);
TfLiteTensor* output_shape = GetOutput(context, node, i + 2 * top_paths);
TfLiteTensor* log_probability_output =
GetOutput(context, node, top_paths * 3);
TfLiteTensor* indices = GetOutput(context, node, p);
TfLiteTensor* values = GetOutput(context, node, p + top_paths);
TfLiteTensor* decoded_shape = GetOutput(context, node, p + 2 * top_paths);
const TfLiteTensor* inputs = GetInput(context, node, kInputsTensor);
const TfLiteTensor* sequence_length =
GetInput(context, node, kSequenceLengthTensor);
TfLiteTensor* log_probabilities = GetOutput(context, node, 3 * top_paths);