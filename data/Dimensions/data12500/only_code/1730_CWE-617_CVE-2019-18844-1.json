assert(bidx <= PCI_BARMAX);
assert(pdi->bar[bidx].type == PCIBAR_MEM32 ||
pdi->bar[bidx].type == PCIBAR_MEM64);
assert(addr >= pdi->bar[bidx].addr &&
addr + size <= pdi->bar[bidx].addr + pdi->bar[bidx].size);
assert((size & (size - 1)) == 0);	/* must be a power of 2 */
static void
return;
assert(error == 0);
assert(0);
assert(idx >= 0 && idx <= PCI_BARMAX);
printf("%s: invalid bar type %d\n", __func__, type);
assert(0);
assert(idx + 1 <= PCI_BARMAX);
assert(caplen > 0);
void
assert((msgnum & (msgnum - 1)) == 0 && msgnum >= 1 && msgnum <= 32);
pci_populate_msicap(&msicap, msgnum, 0);
return pci_emul_add_capability(dev, (u_char *)&msicap, sizeof(msicap));
assert(msix_tab_size % 4096 == 0);
static void
assert(table_entries > 0);
assert(table_entries <= MAX_MSIX_TABLE_ENTRIES);
assert(dev->msix.table != NULL);
assert(msgnum >= 1 && msgnum <= MAX_MSIX_TABLE_ENTRIES);
assert(barnum >= 0 && barnum <= PCIR_MAX_BAR_0);
pci_msix_table_init(dev, msgnum);
assert(offset >= capoff);
assert(ops != NULL);
assert(error == 0);
assert(error == 0);
assert(error == 0);
assert(ops != NULL);
assert(ops != NULL);
assert(bi != NULL);
assert(bus >= 0 && bus < MAXBUSES);
assert(bi != NULL);
assert(bi != NULL);
assert(bi != NULL);
assert(ii->ii_ioapic_irq > 0);
assert(ii->ii_pirq_pin > 0);
assert(dev->lintr.pin > 0);
assert(dev->lintr.pin > 0);
assert(0);
assert(idx >= 1);
assert(0);
int error;
error = pci_emul_add_msicap(dev, PCI_EMUL_MSI_MSGS);
assert(error == 0);
error = pci_emul_alloc_bar(dev, 0, PCIBAR_IO, DIOSZ);
assert(error == 0);
error = pci_emul_alloc_bar(dev, 1, PCIBAR_MEM32, DMEMSZ);
assert(error == 0);
error = pci_emul_alloc_bar(dev, 2, PCIBAR_MEM32, DMEMSZ);
assert(error == 0);
return 0;
assert(bi != NULL);
