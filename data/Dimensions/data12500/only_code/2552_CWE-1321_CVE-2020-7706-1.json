var getValue = function(obj, key) {
for (var x = 0; x < keys.length -1; ++x) {
var setValue = function(obj, key, value) {
if (typeof(currentKey) === 'number') {
if (!o[lastKey]) { o[lastKey] = []; }
} else if (typeof(currentKey) === 'string') {
if (!o[lastKey]) { o[lastKey] = {}; }
replace: function(value, context, parseContext) {
if (!m) { return value; }
}
replace: function(value, context, parseContext) {
if (!m) { return value; }
if (value === parseContext.match) { return newValue; }
}
InterpretersByType: Interpreters.reduce(function(o, i) {o[i.type] = i; return o;}, {}),
getEntries: function(config) {
var iter = function(value, prefix) {
value.forEach(function(arrValue, idx) {
Object.keys(value).forEach(function(key) {
entries.push({key: prefix, value: value});
firstInnermostInterpreterFromValue: function(value) {
if (value === null || value === undefined) { return null; }
replaceInValue: function(value, context) {
}
parse: function(configObj, envObj) {
config: configObj,
env: envObj || process.env
var digest = function() {
entries.forEach(function(e) {
while(digest()) ;
entries.forEach(function(e) {
}
