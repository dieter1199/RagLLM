{
    "cve_id": "CVE-2020-8428",
    "cve_description": "fs/namei.c in the Linux kernel before 5.5 has a may_create_in_sticky use-after-free, which allows local users to cause a denial of service (OOPS) or possibly obtain sensitive information from kernel memory, aka CID-d0cb50185ae9. One attack vector may be an open system call for a UNIX domain socket, if the socket is being moved to a new parent directory and its old parent directory is being removed.",
    "cve_publish_date": "2020-01-29",
    "cwe_id": "CWE-416",
    "cwe_name": "Use After Free",
    "cwe_description": "The product reuses or references memory after it has been freed. At some point afterward, the memory may be allocated again and saved in another pointer, while the original pointer references a location somewhere within the new allocation. Any operations using the original pointer are no longer valid because the memory \"belongs\" to the code that operates on the new pointer.",
    "commit_message": "do_last(): fetch directory ->i_mode and ->i_uid before it's too late\n\nmay_create_in_sticky() call is done when we already have dropped the\nreference to dir.\n\nFixes: 30aba6656f61e (namei: allow restricted O_CREAT of FIFOs and regular files)\nSigned-off-by: Al Viro <viro@zeniv.linux.org.uk>",
    "type_of_change": "Modification",
    "filename_of_changes": "namei.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "10",
    "number_of_lines_deleted_vulnerable_to_cve": "7",
    "vulnerable_lines": [
        "// Line_Reference 1004:  * @dir: the sticky parent directory",
        "// Line_Reference 1020: static int may_create_in_sticky(struct dentry * const dir,",
        "// Line_Reference 1025: \t    likely(!(dir->d_inode->i_mode & S_ISVTX)) ||",
        "// Line_Reference 1026: \t    uid_eq(inode->i_uid, dir->d_inode->i_uid) ||",
        "// Line_Reference 1030: \tif (likely(dir->d_inode->i_mode & 0002) ||",
        "// Line_Reference 1031: \t    (dir->d_inode->i_mode & 0020 &&",
        "// Line_Reference 3334: \t\terror = may_create_in_sticky(dir,"
    ]
}
