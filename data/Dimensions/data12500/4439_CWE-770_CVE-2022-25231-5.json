{
    "cve_id": "CVE-2022-25231",
    "cve_description": "The package node-opcua before 2.74.0 are vulnerable to Denial of Service (DoS) by sending a specifically crafted OPC UA message with a special OPC UA NodeID, when the requested memory allocation exceeds the v8â€™s memory limit.",
    "cve_publish_date": "2022-08-23",
    "cwe_id": "CWE-770",
    "cwe_name": "Allocation of Resources Without Limits or Throttling",
    "cwe_description": "The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.",
    "commit_message": "server: use ServiceFault on request error",
    "type_of_change": "Modification",
    "filename_of_changes": "opcua_server.ts",
    "code_language": "TypeScript",
    "number_of_lines_added_for_mitigation": "22",
    "number_of_lines_deleted_vulnerable_to_cve": "23",
    "vulnerable_lines": [
        "// Line_Reference 148:     BrowseResultOptions",
        "// Line_Reference 187:     const response = new ResponseClass({",
        "// Line_Reference 2236:                 assert(response1 instanceof ResponseClass);",
        "// Line_Reference 3074:                 session.publishEngine._on_PublishRequest(request, (request1: PublishRequest, response: PublishResponse) => {",
        "// Line_Reference 3183:                 const response = new SetTriggeringResponse({",
        "// Line_Reference 3184:                     responseHeader: { serviceResult: statusCode },",
        "// Line_Reference 3185: ",
        "// Line_Reference 3186:                     addResults,",
        "// Line_Reference 3187:                     removeResults,",
        "// Line_Reference 3188:                     addDiagnosticInfos: null,",
        "// Line_Reference 3189:                     removeDiagnosticInfos: null",
        "// Line_Reference 3190:                 });",
        "// Line_Reference 3192:                 sendResponse(response);",
        "// Line_Reference 3393:                 let response;",
        "// Line_Reference 3394: ",
        "// Line_Reference 3396:                     response = new RegisterNodesResponse({ responseHeader: { serviceResult: StatusCodes.BadNothingToDo } });",
        "// Line_Reference 3397:                     return sendResponse(response);",
        "// Line_Reference 3413:                 response = new RegisterNodesResponse({",
        "// Line_Reference 3430:                 let response;",
        "// Line_Reference 3431: ",
        "// Line_Reference 3435:                     response = new UnregisterNodesResponse({ responseHeader: { serviceResult: StatusCodes.BadNothingToDo } });",
        "// Line_Reference 3436:                     return sendResponse(response);",
        "// Line_Reference 3449:                 response = new UnregisterNodesResponse({});"
    ]
}
