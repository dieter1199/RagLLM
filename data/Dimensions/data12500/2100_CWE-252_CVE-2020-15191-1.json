{
    "cve_id": "CVE-2020-15191",
    "cve_description": "In Tensorflow before versions 2.2.1 and 2.3.1, if a user passes an invalid argument to `dlpack.to_dlpack` the expected validations will cause variables to bind to `nullptr` while setting a `status` variable to the error condition. However, this `status` argument is not properly checked. Hence, code following these methods will bind references to null pointers. This is undefined behavior and reported as an error if compiling with `-fsanitize=null`. The issue is patched in commit 22e07fb204386768e5bcbea563641ea11f96ceb8 and is released in TensorFlow versions 2.2.1, or 2.3.1.",
    "cve_publish_date": "2020-09-25",
    "cwe_id": "CWE-252",
    "cwe_name": "Unchecked Return Value",
    "cwe_description": "The product does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.",
    "commit_message": "Fix multiple vulnerabilities in `tf.experimental.dlpack.to_dlpack`.\n\nWe have a use after free caused by memory coruption, a segmentation fault caused by memory corruption, several memory leaks and an undefined behavior when taking the reference of a nullptr.\n\nPiperOrigin-RevId: 332568894\nChange-Id: Ife0fc05e103b35325094ae5d822ee5fdea764572",
    "type_of_change": "Modification",
    "filename_of_changes": "dlpack.cc",
    "code_language": "C++",
    "number_of_lines_added_for_mitigation": "22",
    "number_of_lines_deleted_vulnerable_to_cve": "6",
    "vulnerable_lines": [
        "// Line_Reference 254:   TensorReference tensor_ref(*tensor);  // This will call buf_->Ref()",
        "// Line_Reference 262:   dlm_tensor->dl_tensor.ctx = GetDlContext(h, status);",
        "// Line_Reference 265:   dlm_tensor->dl_tensor.data = TFE_TensorHandleDevicePointer(h, status);",
        "// Line_Reference 266:   dlm_tensor->dl_tensor.dtype = GetDlDataType(data_type, status);",
        "// Line_Reference 279:   dlm_tensor->dl_tensor.shape = &(*shape_arr)[0];",
        "// Line_Reference 285:   dlm_tensor->dl_tensor.strides = &(*stride_arr)[0];"
    ]
}
