{
    "cve_id": "CVE-2022-1806",
    "cve_description": "Cross-site Scripting (XSS) - Reflected in GitHub repository rtxteam/rtx prior to checkpoint_2022-05-18.",
    "cve_publish_date": "2022-05-20",
    "cwe_id": "CWE-79",
    "cwe_name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
    "cwe_description": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
    "commit_message": "remove some cruft and implement a sanitizer for the client-supplied callback function name",
    "type_of_change": "Modification",
    "filename_of_changes": "server.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "25",
    "number_of_lines_deleted_vulnerable_to_cve": "23",
    "vulnerable_lines": [
        "// Line_Reference 9: ",
        "// Line_Reference 10: #class MainHandler(tornado.web.RequestHandler):",
        "// Line_Reference 11: #    def get(self):",
        "// Line_Reference 12: #        self.write(\"Hello, world\")",
        "// Line_Reference 13: #print __file__",
        "// Line_Reference 17: #conn = sqlite3.connect('dict.db')",
        "// Line_Reference 18: #conn.enable_load_extension(True)",
        "// Line_Reference 19: #conn.load_extension(\"./spellfix\")",
        "// Line_Reference 20: #cursor = conn.cursor()",
        "// Line_Reference 25:         #print \"match auto\"",
        "// Line_Reference 29:             callback = self.get_argument(\"callback\") #jsonp",
        "// Line_Reference 32: ",
        "// Line_Reference 33:             result = callback+\"(\"+json.dumps(result)+\");\" #jsonp",
        "// Line_Reference 34:             #result = json.dumps(result) #typeahead",
        "// Line_Reference 50:             callback = self.get_argument(\"callback\")",
        "// Line_Reference 76:             callback = self.get_argument(\"callback\")",
        "// Line_Reference 99:         #try:",
        "// Line_Reference 100:         if 1 == 1:",
        "// Line_Reference 103:             callback = self.get_argument(\"callback\")",
        "// Line_Reference 107:         #except:",
        "// Line_Reference 108:         #    print(sys.exc_info()[:])",
        "// Line_Reference 109:         #    traceback.print_tb(sys.exc_info()[-1])",
        "// Line_Reference 110:         #    self.write(\"error\")"
    ]
}
