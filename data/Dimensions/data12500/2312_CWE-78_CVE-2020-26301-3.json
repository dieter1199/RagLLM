{
    "cve_id": "CVE-2020-26301",
    "cve_description": "ssh2 is client and server modules written in pure JavaScript for node.js. In ssh2 before version 1.4.0 there is a command injection vulnerability. The issue only exists on Windows. This issue may lead to remote code execution if a client of the library calls the vulnerable method with untrusted input. This is fixed in version 1.4.0.",
    "cve_publish_date": "2021-09-20",
    "cwe_id": "CWE-78",
    "cwe_name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
    "cwe_description": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
    "commit_message": "examples,lib,test: switch to code rewrite\n\nFor more information see: https://github.com/mscdex/ssh2/issues/935",
    "type_of_change": "ModificationType.ADD",
    "filename_of_changes": "sftp-server-download-only.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "90",
    "number_of_lines_deleted_vulnerable_to_cve": "69",
    "vulnerable_lines": [
        "// Line_Reference 1: var crypto = require('crypto');",
        "// Line_Reference 2: var constants = require('constants');",
        "// Line_Reference 3: var fs = require('fs');",
        "// Line_Reference 5: var ssh2 = require('ssh2');",
        "// Line_Reference 6: var OPEN_MODE = ssh2.SFTP_OPEN_MODE;",
        "// Line_Reference 7: var STATUS_CODE = ssh2.SFTP_STATUS_CODE;",
        "// Line_Reference 9: var allowedUser = Buffer.from('foo');",
        "// Line_Reference 10: var allowedPassword = Buffer.from('bar');",
        "// Line_Reference 12: new ssh2.Server({",
        "// Line_Reference 13:   hostKeys: [fs.readFileSync('host.key')]",
        "// Line_Reference 14: }, function(client) {",
        "// Line_Reference 17:   client.on('authentication', function(ctx) {",
        "// Line_Reference 18:     var user = Buffer.from(ctx.username);",
        "// Line_Reference 19:     if (user.length !== allowedUser.length",
        "// Line_Reference 20:         || !crypto.timingSafeEqual(user, allowedUser)) {",
        "// Line_Reference 21:       return ctx.reject(['password']);",
        "// Line_Reference 22:     }",
        "// Line_Reference 26:         var password = Buffer.from(ctx.password);",
        "// Line_Reference 27:         if (password.length !== allowedPassword.length",
        "// Line_Reference 28:             || !crypto.timingSafeEqual(password, allowedPassword)) {",
        "// Line_Reference 29:           return ctx.reject(['password']);",
        "// Line_Reference 30:         }",
        "// Line_Reference 33:         return ctx.reject(['password']);",
        "// Line_Reference 36:     ctx.accept();",
        "// Line_Reference 37:   }).on('ready', function() {",
        "// Line_Reference 40:     client.on('session', function(accept, reject) {",
        "// Line_Reference 41:       var session = accept();",
        "// Line_Reference 42:       session.on('sftp', function(accept, reject) {",
        "// Line_Reference 44:         var openFiles = {};",
        "// Line_Reference 45:         var handleCount = 0;",
        "// Line_Reference 46:         // `sftpStream` is an `SFTPStream` instance in server mode",
        "// Line_Reference 47:         // see: https://github.com/mscdex/ssh2-streams/blob/master/SFTPStream.md",
        "// Line_Reference 48:         var sftpStream = accept();",
        "// Line_Reference 49:         sftpStream.on('OPEN', function(reqid, filename, flags, attrs) {",
        "// Line_Reference 50:           console.log('OPEN', filename);",
        "// Line_Reference 51:           // only allow opening /tmp/foo.txt for writing",
        "// Line_Reference 53:             return sftpStream.status(reqid, STATUS_CODE.FAILURE);",
        "// Line_Reference 54:           // create a fake handle to return to the client, this could easily",
        "// Line_Reference 57:           var handle = new Buffer(4);",
        "// Line_Reference 58:           openFiles[handleCount] = { read: false };",
        "// Line_Reference 60:           sftpStream.handle(reqid, handle);",
        "// Line_Reference 61:           console.log('Opening file for read')",
        "// Line_Reference 62:         }).on('READ', function(reqid, handle, offset, length) {",
        "// Line_Reference 63:           if (handle.length !== 4 || !openFiles[handle.readUInt32BE(0, true)])",
        "// Line_Reference 64:             return sftpStream.status(reqid, STATUS_CODE.FAILURE);",
        "// Line_Reference 65:           // fake the read",
        "// Line_Reference 66:           var state = openFiles[handle.readUInt32BE(0, true)];",
        "// Line_Reference 67:           if (state.read)",
        "// Line_Reference 68:             sftpStream.status(reqid, STATUS_CODE.EOF);",
        "// Line_Reference 69:           else {",
        "// Line_Reference 71:             sftpStream.data(reqid, 'bar');",
        "// Line_Reference 72:             console.log('Read from file at offset %d, length %d', offset, length);",
        "// Line_Reference 74:         }).on('CLOSE', function(reqid, handle) {",
        "// Line_Reference 75:           var fnum;",
        "// Line_Reference 76:           if (handle.length !== 4 || !openFiles[(fnum = handle.readUInt32BE(0, true))])",
        "// Line_Reference 77:             return sftpStream.status(reqid, STATUS_CODE.FAILURE);",
        "// Line_Reference 78:           delete openFiles[fnum];",
        "// Line_Reference 79:           sftpStream.status(reqid, STATUS_CODE.OK);",
        "// Line_Reference 82:           var name = [{",
        "// Line_Reference 87:           sftpStream.name(reqid, name);",
        "// Line_Reference 92:             return sftpStream.status(reqid, STATUS_CODE.FAILURE);",
        "// Line_Reference 93:           var mode = constants.S_IFREG; // Regular file",
        "// Line_Reference 94:           mode |= constants.S_IRWXU; // read, write, execute for user",
        "// Line_Reference 95:           mode |= constants.S_IRWXG; // read, write, execute for group",
        "// Line_Reference 96:           mode |= constants.S_IRWXO; // read, write, execute for other",
        "// Line_Reference 97:           sftpStream.attrs(reqid, {",
        "// Line_Reference 103:             mtime: Date.now()",
        "// Line_Reference 108:   }).on('end', function() {",
        "// Line_Reference 112:   console.log('Listening on port ' + this.address().port);"
    ]
}
