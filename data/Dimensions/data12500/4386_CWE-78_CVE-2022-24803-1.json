{
    "cve_id": "CVE-2022-24803",
    "cve_description": "Asciidoctor-include-ext is Asciidoctorâ€™s standard include processor reimplemented as an extension. Versions prior to 0.4.0, when used to render user-supplied input in AsciiDoc markup, may allow an attacker to execute arbitrary system commands on the host operating system. This attack is possible even when `allow-uri-read` is disabled! The problem has been patched in the referenced commits.",
    "cve_publish_date": "2022-04-01",
    "cwe_id": "CWE-78",
    "cwe_name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
    "cwe_description": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
    "commit_message": "Fix command injection vulnerability\n\nReported by Joern Schneeweisz from GitLab GmbH:\n\n> During an internal assessment on some GitLab code I came across a way\n> to execute arbitrary commands in your asciidoctor-include-ext Gem.\n>\n> The following adoc snippet demonstrates the issue:\n>\n> ```\n> :app-name: |id # + \\\n> http://test.com\n>\n> include::{app-name}[]\n> ```\n>\n> It uses a linebreak to bypass the `target_uri` check here\n> https://github.com/jirutka/asciidoctor-include-ext/blob/master/lib/asciidoctor/include_ext/include_processor.rb#L97\n> and feed a command with the `|` prefix to open/IO.foreach.\n>\n> You can verify this with the above snippet by rendering it like this\n>\n> ```\n> asciidoctor -r asciidoctor-include-ext  -a allow-uri-read home.asciidoc\n> ```\n\nSee-Also: https://sakurity.com/blog/2015/02/28/openuri.html",
    "type_of_change": "Modification",
    "filename_of_changes": "include_processor.rb",
    "code_language": "Ruby",
    "number_of_lines_added_for_mitigation": "14",
    "number_of_lines_deleted_vulnerable_to_cve": "9",
    "vulnerable_lines": [
        "// Line_Reference 89:       return false if target_uri?(target) && !doc.attributes.key?('allow-uri-read')",
        "// Line_Reference 97:       return target if target_uri? target",
        "// Line_Reference 109:     # @param filename [String] path of the file to be read.",
        "// Line_Reference 114:     def read_lines(filename, selector)",
        "// Line_Reference 116:         IO.foreach(filename).select.with_index(1, &selector)",
        "// Line_Reference 118:         URI.open(filename, &:read)",
        "// Line_Reference 145:     # @return [Boolean] `true` if the *target* is an URI, `false` otherwise.",
        "// Line_Reference 146:     def target_uri?(target)",
        "// Line_Reference 147:       ::Asciidoctor::Helpers.uriish?(target)"
    ]
}
