{
    "cve_id": "CVE-2018-12559",
    "cve_description": "An issue was discovered in the cantata-mounter D-Bus service in Cantata through 2.3.1. The mount target path check in mounter.cpp `mpOk()` is insufficient. A regular user can consequently mount a CIFS filesystem anywhere (e.g., outside of the /home directory tree) by passing directory traversal sequences such as a home/../usr substring.",
    "cve_publish_date": "2018-06-19",
    "cwe_id": "CWE-22",
    "cwe_name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
    "cwe_description": "The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
    "commit_message": "Remove internal Samba shre mounting code, this had some privilege escalation issues, and is not well tested",
    "type_of_change": "Modification",
    "filename_of_changes": "remotefsdevice.cpp",
    "code_language": "C++",
    "number_of_lines_added_for_mitigation": "2",
    "number_of_lines_deleted_vulnerable_to_cve": "107",
    "vulnerable_lines": [
        "// Line_Reference 35: #include \"mounterinterface.h\"",
        "// Line_Reference 36: #include \"avahi/avahi.h\"",
        "// Line_Reference 37: #include \"avahi/avahiservice.h\"",
        "// Line_Reference 50: const QLatin1String RemoteFsDevice::constDomainQuery(\"domain\");",
        "// Line_Reference 51: const QLatin1String RemoteFsDevice::constSambaProtocol(\"smb\");",
        "// Line_Reference 52: const QLatin1String RemoteFsDevice::constServiceNameQuery(\"name\");",
        "// Line_Reference 53: const QLatin1String RemoteFsDevice::constSambaAvahiProtocol(\"smb-avahi\");",
        "// Line_Reference 98:     return d.isLocalFile() || RemoteFsDevice::constSshfsProtocol==d.url.scheme() ||",
        "// Line_Reference 99:            RemoteFsDevice::constSambaProtocol==d.url.scheme() || RemoteFsDevice::constSambaAvahiProtocol==d.url.scheme();",
        "// Line_Reference 104:     return RemoteFsDevice::constSshfsProtocol==d.url.scheme() ||",
        "// Line_Reference 105:            RemoteFsDevice::constSambaProtocol==d.url.scheme() || RemoteFsDevice::constSambaAvahiProtocol==d.url.scheme();",
        "// Line_Reference 171: void RemoteFsDevice::serviceAdded(const QString &name)",
        "// Line_Reference 172: {",
        "// Line_Reference 173:     if (name==details.serviceName && constSambaAvahiProtocol==details.url.scheme()) {",
        "// Line_Reference 174:         sub=tr(\"Available\");",
        "// Line_Reference 175:         updateStatus();",
        "// Line_Reference 176:     }",
        "// Line_Reference 177: }",
        "// Line_Reference 178: ",
        "// Line_Reference 179: void RemoteFsDevice::serviceRemoved(const QString &name)",
        "// Line_Reference 180: {",
        "// Line_Reference 181:     if (name==details.serviceName && constSambaAvahiProtocol==details.url.scheme()) {",
        "// Line_Reference 182:         sub=tr(\"Not Available\");",
        "// Line_Reference 183:         updateStatus();",
        "// Line_Reference 184:     }",
        "// Line_Reference 185: }",
        "// Line_Reference 186: ",
        "// Line_Reference 212:     , mounterIface(0)",
        "// Line_Reference 232:     , mounterIface(0)",
        "// Line_Reference 257: MpdCantataMounterInterface * RemoteFsDevice::mounter()",
        "// Line_Reference 258: {",
        "// Line_Reference 259:     if (!mounterIface) {",
        "// Line_Reference 260:         if (!QDBusConnection::systemBus().interface()->isServiceRegistered(MpdCantataMounterInterface::staticInterfaceName())) {",
        "// Line_Reference 261:             QDBusConnection::systemBus().interface()->startService(MpdCantataMounterInterface::staticInterfaceName());",
        "// Line_Reference 262:         }",
        "// Line_Reference 263:         mounterIface=new MpdCantataMounterInterface(MpdCantataMounterInterface::staticInterfaceName(),",
        "// Line_Reference 264:                                                               \"/Mounter\", QDBusConnection::systemBus(), this);",
        "// Line_Reference 265:         connect(mounterIface, SIGNAL(mountStatus(const QString &, int, int)), SLOT(mountStatus(const QString &, int, int)));",
        "// Line_Reference 266:         connect(mounterIface, SIGNAL(umountStatus(const QString &, int, int)), SLOT(umountStatus(const QString &, int, int)));",
        "// Line_Reference 267:     }",
        "// Line_Reference 268:     return mounterIface;",
        "// Line_Reference 269: }",
        "// Line_Reference 270: ",
        "// Line_Reference 283:     if (constSambaAvahiProtocol==details.url.scheme()) {",
        "// Line_Reference 284:         Details det=details;",
        "// Line_Reference 285:         AvahiService *srv=Avahi::self()->getService(det.serviceName);",
        "// Line_Reference 286:         if (!srv || srv->getHost().isEmpty() || 0==srv->getPort()) {",
        "// Line_Reference 287:             emit error(tr(\"Failed to resolve connection details for %1\").arg(details.name));",
        "// Line_Reference 288:             return;",
        "// Line_Reference 289:         }",
        "// Line_Reference 290:         if (constPromptPassword==det.url.password()) {",
        "// Line_Reference 291:             bool ok=false;",
        "// Line_Reference 292:             QString passwd=InputDialog::getPassword(QString(), &ok, QApplication::activeWindow());",
        "// Line_Reference 293:             if (!ok) {",
        "// Line_Reference 294:                 return;",
        "// Line_Reference 295:             }",
        "// Line_Reference 296:             det.url.setPassword(passwd);",
        "// Line_Reference 297:         }",
        "// Line_Reference 298:         det.url.setScheme(constSambaProtocol);",
        "// Line_Reference 299:         det.url.setHost(srv->getHost());",
        "// Line_Reference 300:         det.url.setPort(srv->getPort());",
        "// Line_Reference 301:         mounter()->mount(det.url.toString(), mountPoint(details, true), getuid(), getgid(), getpid());",
        "// Line_Reference 302:         setStatusMessage(tr(\"Connecting...\"));",
        "// Line_Reference 303:         messageSent=true;",
        "// Line_Reference 304:         return;",
        "// Line_Reference 305:     }",
        "// Line_Reference 306:     if (constSambaProtocol==details.url.scheme()) {",
        "// Line_Reference 307:         Details det=details;",
        "// Line_Reference 308:         if (constPromptPassword==det.url.password()) {",
        "// Line_Reference 309:             bool ok=false;",
        "// Line_Reference 310:             QString passwd=InputDialog::getPassword(QString(), &ok, QApplication::activeWindow());",
        "// Line_Reference 311:             if (!ok) {",
        "// Line_Reference 312:                 return;",
        "// Line_Reference 313:             }",
        "// Line_Reference 314:             det.url.setPassword(passwd);",
        "// Line_Reference 315:         }",
        "// Line_Reference 316:         mounter()->mount(det.url.toString(), mountPoint(details, true), getuid(), getgid(), getpid());",
        "// Line_Reference 317:         setStatusMessage(tr(\"Connecting...\"));",
        "// Line_Reference 318:         messageSent=true;",
        "// Line_Reference 319:         return;",
        "// Line_Reference 320:     }",
        "// Line_Reference 405:     if (constSambaProtocol==details.url.scheme() || constSambaAvahiProtocol==details.url.scheme()) {",
        "// Line_Reference 406:         mounter()->umount(mountPoint(details, false), getpid());",
        "// Line_Reference 407:         setStatusMessage(tr(\"Disconnecting...\"));",
        "// Line_Reference 408:         messageSent=true;",
        "// Line_Reference 409:         return;",
        "// Line_Reference 410:     }",
        "// Line_Reference 574:     if (RemoteFsDevice::constSambaAvahiProtocol==details.url.scheme()) {",
        "// Line_Reference 575:         // Start Avahi listener...",
        "// Line_Reference 576:         Avahi::self();",
        "// Line_Reference 577:         QUrlQuery q(details.url);",
        "// Line_Reference 578:         if (q.hasQueryItem(constServiceNameQuery)) {",
        "// Line_Reference 579:             details.serviceName=q.queryItemValue(constServiceNameQuery);",
        "// Line_Reference 580:         }",
        "// Line_Reference 581: ",
        "// Line_Reference 582:         if (!details.serviceName.isEmpty()) {",
        "// Line_Reference 583:             AvahiService *srv=Avahi::self()->getService(details.serviceName);",
        "// Line_Reference 584:             if (!srv || srv->getHost().isEmpty()) {",
        "// Line_Reference 585:                 sub=tr(\"Not Available\");",
        "// Line_Reference 586:             } else {",
        "// Line_Reference 587:                 sub=tr(\"Available\");",
        "// Line_Reference 588:             }",
        "// Line_Reference 589:         }",
        "// Line_Reference 590:         connect(Avahi::self(), SIGNAL(serviceAdded(QString)), SLOT(serviceAdded(QString)));",
        "// Line_Reference 591:         connect(Avahi::self(), SIGNAL(serviceRemoved(QString)), SLOT(serviceRemoved(QString)));",
        "// Line_Reference 592:     }",
        "// Line_Reference 593: "
    ]
}
