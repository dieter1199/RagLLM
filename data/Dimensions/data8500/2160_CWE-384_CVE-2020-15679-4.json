{
    "cve_id": "CVE-2020-15679",
    "cve_description": "An OAuth session fixation vulnerability existed in the VPN login flow, where an attacker could craft a custom login URL, convince a VPN user to login via that URL, and obtain authenticated access as that user. This issue is limited to cases where attacker and victim are sharing the same source IP and could allow the ability to view session states and disconnect VPN sessions. This vulnerability affects Mozilla VPN iOS 1.0.7 < (929), Mozilla VPN Windows < 1.2.2, and Mozilla VPN Android 1.1.0 < (1360).",
    "cve_publish_date": "2022-12-22",
    "cwe_id": "CWE-384",
    "cwe_name": "Session Fixation",
    "cwe_description": "Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.",
    "commit_message": "PGAND-410 Resolve oauth session fixation on iOS (#272)\n\n* update login flow with PKCE\r\n\r\n* fix MockGuardianAPI",
    "type_of_change": "Modification",
    "filename_of_changes": "LoginViewController.swift",
    "code_language": "Swift",
    "number_of_lines_added_for_mitigation": "49",
    "number_of_lines_deleted_vulnerable_to_cve": "56",
    "vulnerable_lines": [
        "// Line_Reference 20:     private var verificationURL: URL?",
        "// Line_Reference 21:     private var verifyTimer: Timer?",
        "// Line_Reference 22:     private var isVerifying = false",
        "// Line_Reference 26:         guardianAPI.initiateUserLogin { [weak self] result in",
        "// Line_Reference 27:             switch result {",
        "// Line_Reference 28:             case .success(let checkpointModel):",
        "// Line_Reference 29:                 guard let loginURL = checkpointModel.loginUrl else { return }",
        "// Line_Reference 30:                 self?.verificationURL = checkpointModel.verificationUrl",
        "// Line_Reference 31:                 let safariViewController = SFSafariViewController(url: loginURL)",
        "// Line_Reference 32:                 DispatchQueue.main.async {",
        "// Line_Reference 33:                     self?.addChild(safariViewController)",
        "// Line_Reference 34:                     self?.view.addSubview(safariViewController.view)",
        "// Line_Reference 35:                     safariViewController.view.frame = self?.view.bounds ?? CGRect.zero",
        "// Line_Reference 36:                     safariViewController.view.autoresizingMask = [.flexibleWidth, .flexibleHeight]",
        "// Line_Reference 37:                     safariViewController.didMove(toParent: self)",
        "// Line_Reference 38:                 }",
        "// Line_Reference 39:                 safariViewController.delegate = self",
        "// Line_Reference 40:                 self?.safariViewController = safariViewController",
        "// Line_Reference 41:             case .failure(let error):",
        "// Line_Reference 42:                 let loginError = error.getLoginError()",
        "// Line_Reference 43:                 let context: NavigableContext = loginError == .maxDevicesReached ? .maxDevicesReached : .error(loginError)",
        "// Line_Reference 44:                 self?.navigate(to: .landing, context: context)",
        "// Line_Reference 45:             }",
        "// Line_Reference 46:         }",
        "// Line_Reference 47:     }",
        "// Line_Reference 48: ",
        "// Line_Reference 49:     deinit {",
        "// Line_Reference 50:         verifyTimer?.invalidate()",
        "// Line_Reference 57:     @objc private func verify() {",
        "// Line_Reference 58:         guard let verificationURL = verificationURL else { return }",
        "// Line_Reference 59:         if isVerifying { return }",
        "// Line_Reference 60:         isVerifying = true",
        "// Line_Reference 62:         guardianAPI.verify(urlString: verificationURL.absoluteString) { [weak self] result in",
        "// Line_Reference 63:             guard let self = self else { return }",
        "// Line_Reference 67:                 DependencyManager.shared.accountManager.login(with: verification) { loginResult in",
        "// Line_Reference 68:                     self.isVerifying = false",
        "// Line_Reference 69:                     self.verifyTimer?.invalidate()",
        "// Line_Reference 70:                     switch loginResult {",
        "// Line_Reference 71:                     case .success:",
        "// Line_Reference 72:                         self.navigate(to: .home)",
        "// Line_Reference 73:                     case .failure(let error):",
        "// Line_Reference 74:                         Logger.global?.log(message: \"Authentication Error: \\(error)\")",
        "// Line_Reference 75:                         let context: NavigableContext = error == .maxDevicesReached ? .maxDevicesReached : .error(error)",
        "// Line_Reference 76:                         self.navigate(to: .landing, context: context)",
        "// Line_Reference 77:                     }",
        "// Line_Reference 78:                 }",
        "// Line_Reference 79:             case .failure:",
        "// Line_Reference 80:                 self.isVerifying = false",
        "// Line_Reference 81:                 return",
        "// Line_Reference 85: }",
        "// Line_Reference 87: // MARK: - SFSafariViewControllerDelegate",
        "// Line_Reference 88: extension LoginViewController: SFSafariViewControllerDelegate {",
        "// Line_Reference 89:     func safariViewController(_ controller: SFSafariViewController, didCompleteInitialLoad didLoadSuccessfully: Bool) {",
        "// Line_Reference 90:         if didLoadSuccessfully && verifyTimer == nil {",
        "// Line_Reference 91:             verifyTimer = Timer.scheduledTimer(timeInterval: 3, target: self, selector: #selector(verify), userInfo: nil, repeats: true)",
        "// Line_Reference 96:         self.verifyTimer?.invalidate()"
    ]
}
