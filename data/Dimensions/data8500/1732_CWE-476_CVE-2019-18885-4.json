{
    "cve_id": "CVE-2019-18885",
    "cve_description": "fs/btrfs/volumes.c in the Linux kernel before 5.1 allows a btrfs_verify_dev_extents NULL pointer dereference via a crafted btrfs image because fs_devices->devices is mishandled within find_device, aka CID-09ba3bc9dd15.",
    "cve_publish_date": "2019-11-14",
    "cwe_id": "CWE-476",
    "cwe_name": "NULL Pointer Dereference",
    "cwe_description": "The product dereferences a pointer that it expects to be valid but is NULL.",
    "commit_message": "btrfs: merge btrfs_find_device and find_device\n\nBoth btrfs_find_device() and find_device() does the same thing except\nthat the latter does not take the seed device onto account in the device\nscanning context. We can merge them.\n\nSigned-off-by: Anand Jain <anand.jain@oracle.com>\nReviewed-by: David Sterba <dsterba@suse.com>\nSigned-off-by: David Sterba <dsterba@suse.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "volumes.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "35",
    "number_of_lines_deleted_vulnerable_to_cve": "37",
    "vulnerable_lines": [
        "// Line_Reference 418: /*",
        "// Line_Reference 419:  * Find a device specified by @devid or @uuid in the list of @fs_devices, or",
        "// Line_Reference 420:  * return NULL.",
        "// Line_Reference 421:  *",
        "// Line_Reference 422:  * If devid and uuid are both specified, the match must be exact, otherwise",
        "// Line_Reference 423:  * only devid is used.",
        "// Line_Reference 424:  */",
        "// Line_Reference 425: static struct btrfs_device *find_device(struct btrfs_fs_devices *fs_devices,",
        "// Line_Reference 426: \t\tu64 devid, const u8 *uuid)",
        "// Line_Reference 427: {",
        "// Line_Reference 428: \tstruct btrfs_device *dev;",
        "// Line_Reference 429: ",
        "// Line_Reference 430: \tlist_for_each_entry(dev, &fs_devices->devices, dev_list) {",
        "// Line_Reference 431: \t\tif (dev->devid == devid &&",
        "// Line_Reference 432: \t\t    (!uuid || !memcmp(dev->uuid, uuid, BTRFS_UUID_SIZE))) {",
        "// Line_Reference 433: \t\t\treturn dev;",
        "// Line_Reference 434: \t\t}",
        "// Line_Reference 435: \t}",
        "// Line_Reference 436: \treturn NULL;",
        "// Line_Reference 437: }",
        "// Line_Reference 438: ",
        "// Line_Reference 987: \t\tdevice = find_device(fs_devices, devid,",
        "// Line_Reference 988: \t\t\t\tdisk_super->dev_item.uuid);",
        "// Line_Reference 2405: \t\t\t\t\t   disk_super->metadata_uuid);",
        "// Line_Reference 2408: \t\t\t\t\t   disk_super->fsid);",
        "// Line_Reference 2428: \t\t\t\t\t   NULL);",
        "// Line_Reference 2571: \t\t\t\t\t   fs_uuid);",
        "// Line_Reference 6625: \t\t\t\t       u64 devid, u8 *uuid, u8 *fsid)",
        "// Line_Reference 6632: \t\t\tdevice = find_device(fs_devices, devid, uuid);",
        "// Line_Reference 6633: \t\t\tif (device)",
        "// Line_Reference 6634: \t\t\t\treturn device;",
        "// Line_Reference 6636: \t\tfs_devices = fs_devices->seed;",
        "// Line_Reference 6882: \t\t\t\t\t\t\tdevid, uuid, NULL);",
        "// Line_Reference 7022: \t\t\t\t   fs_uuid);",
        "// Line_Reference 7612: \tdev = btrfs_find_device(fs_info->fs_devices, stats->devid, NULL, NULL);",
        "// Line_Reference 7826: \tdev = btrfs_find_device(fs_info->fs_devices, devid, NULL, NULL);",
        "// Line_Reference 7835: \t\tdev = find_device(fs_info->fs_devices->seed, devid, NULL);"
    ]
}
