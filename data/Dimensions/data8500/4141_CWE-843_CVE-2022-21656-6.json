{
    "cve_id": "CVE-2022-21656",
    "cve_description": "Envoy is an open source edge and service proxy, designed for cloud-native applications. The default_validator.cc implementation used to implement the default certificate validation routines has a \"type confusion\" bug when processing subjectAltNames. This processing allows, for example, an rfc822Name or uniformResourceIndicator to be authenticated as a domain name. This confusion allows for the bypassing of nameConstraints, as processed by the underlying OpenSSL/BoringSSL implementation, exposing the possibility of impersonation of arbitrary servers. As a result Envoy will trust upstream certificates that should not be trusted.",
    "cve_publish_date": "2022-02-22",
    "cwe_id": "CWE-843",
    "cwe_name": "Access of Resource Using Incompatible Type ('Type Confusion')",
    "cwe_description": "The product allocates or initializes a resource such as a pointer, object, or variable using one type, but it later accesses that resource using a type that is incompatible with the original type.",
    "commit_message": "Specify type for matching Subject Alternative Name. (#18628)\n\n\r\nSigned-off-by: Pradeep Rao <pcrao@google.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "default_validator.cc",
    "code_language": "C++",
    "number_of_lines_added_for_mitigation": "10",
    "number_of_lines_deleted_vulnerable_to_cve": "18",
    "vulnerable_lines": [
        "// Line_Reference 150:       for (const envoy::type::matcher::v3::StringMatcher& matcher :",
        "// Line_Reference 152:         subject_alt_name_matchers_.push_back(Matchers::StringMatcherImpl(matcher));",
        "// Line_Reference 224:   // `NotValidated` or `Validated`). If `trusted_ca` doesn't exist, we will need to make sure other",
        "// Line_Reference 225:   // configurations are verified and the verification succeed.",
        "// Line_Reference 235:     const std::vector<Matchers::StringMatcherImpl<envoy::type::matcher::v3::StringMatcher>>&",
        "// Line_Reference 236:         subject_alt_name_matchers) {",
        "// Line_Reference 294:     X509* cert,",
        "// Line_Reference 295:     const std::vector<Matchers::StringMatcherImpl<envoy::type::matcher::v3::StringMatcher>>&",
        "// Line_Reference 296:         subject_alt_name_matchers) {",
        "// Line_Reference 302:   for (const GENERAL_NAME* general_name : san_names.get()) {",
        "// Line_Reference 303:     const std::string san = Utility::generalNameAsString(general_name);",
        "// Line_Reference 304:     for (auto& config_san_matcher : subject_alt_name_matchers) {",
        "// Line_Reference 305:       // For DNS SAN, if the StringMatcher type is exact, we have to follow DNS matching semantics.",
        "// Line_Reference 306:       if (general_name->type == GEN_DNS &&",
        "// Line_Reference 307:                   config_san_matcher.matcher().match_pattern_case() ==",
        "// Line_Reference 308:                       envoy::type::matcher::v3::StringMatcher::MatchPatternCase::kExact",
        "// Line_Reference 309:               ? Utility::dnsNameMatch(config_san_matcher.matcher().exact(), absl::string_view(san))",
        "// Line_Reference 310:               : config_san_matcher.match(san)) {"
    ]
}
