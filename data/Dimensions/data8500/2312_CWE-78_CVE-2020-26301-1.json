{
    "cve_id": "CVE-2020-26301",
    "cve_description": "ssh2 is client and server modules written in pure JavaScript for node.js. In ssh2 before version 1.4.0 there is a command injection vulnerability. The issue only exists on Windows. This issue may lead to remote code execution if a client of the library calls the vulnerable method with untrusted input. This is fixed in version 1.4.0.",
    "cve_publish_date": "2021-09-20",
    "cwe_id": "CWE-78",
    "cwe_name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
    "cwe_description": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
    "commit_message": "examples,lib,test: switch to code rewrite\n\nFor more information see: https://github.com/mscdex/ssh2/issues/935",
    "type_of_change": "ModificationType.ADD",
    "filename_of_changes": "http-agents.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "54",
    "number_of_lines_deleted_vulnerable_to_cve": "51",
    "vulnerable_lines": [
        "// Line_Reference 1: var HttpAgent = require('http').Agent;",
        "// Line_Reference 2: var HttpsAgent = require('https').Agent;",
        "// Line_Reference 3: var inherits = require('util').inherits;",
        "// Line_Reference 5: var Client;",
        "// Line_Reference 7: [HttpAgent, HttpsAgent].forEach((ctor) => {",
        "// Line_Reference 8:   function SSHAgent(connectCfg, agentOptions) {",
        "// Line_Reference 9:     if (!(this instanceof SSHAgent))",
        "// Line_Reference 10:       return new SSHAgent(connectCfg, agentOptions);",
        "// Line_Reference 12:     ctor.call(this, agentOptions);",
        "// Line_Reference 14:     this._connectCfg = connectCfg;",
        "// Line_Reference 15:     this._defaultSrcIP = (agentOptions && agentOptions.srcIP) || 'localhost';",
        "// Line_Reference 16:   }",
        "// Line_Reference 17:   inherits(SSHAgent, ctor);",
        "// Line_Reference 19:   SSHAgent.prototype.createConnection = createConnection;",
        "// Line_Reference 22: });",
        "// Line_Reference 23: ",
        "// Line_Reference 24: function createConnection(options, cb) {",
        "// Line_Reference 25:   var srcIP = (options && options.localAddress) || this._defaultSrcIP;",
        "// Line_Reference 26:   var srcPort = (options && options.localPort) || 0;",
        "// Line_Reference 27:   var dstIP = options.host;",
        "// Line_Reference 28:   var dstPort = options.port;",
        "// Line_Reference 29: ",
        "// Line_Reference 30:   if (Client === undefined)",
        "// Line_Reference 31:     Client = require('./client').Client;",
        "// Line_Reference 32: ",
        "// Line_Reference 33:   var client = new Client();",
        "// Line_Reference 34:   var triedForward = false;",
        "// Line_Reference 35:   client.on('ready', () => {",
        "// Line_Reference 36:     client.forwardOut(srcIP, srcPort, dstIP, dstPort, (err, stream) => {",
        "// Line_Reference 37:       triedForward = true;",
        "// Line_Reference 38:       if (err) {",
        "// Line_Reference 39:         client.end();",
        "// Line_Reference 40:         return cb(err);",
        "// Line_Reference 41:       }",
        "// Line_Reference 42:       stream.once('close', () => {",
        "// Line_Reference 43:         client.end();",
        "// Line_Reference 44:       });",
        "// Line_Reference 45:       cb(null, decorateStream(stream));",
        "// Line_Reference 46:     });",
        "// Line_Reference 47:   }).on('error', cb).on('close', () => {",
        "// Line_Reference 48:     if (!triedForward)",
        "// Line_Reference 49:       cb(new Error('Unexpected connection loss'));",
        "// Line_Reference 50:   }).connect(this._connectCfg);",
        "// Line_Reference 55: function decorateStream(stream) {",
        "// Line_Reference 56:   stream.setKeepAlive = noop;",
        "// Line_Reference 57:   stream.setNoDelay = noop;",
        "// Line_Reference 58:   stream.setTimeout = noop;",
        "// Line_Reference 59:   stream.ref = noop;",
        "// Line_Reference 60:   stream.unref = noop;",
        "// Line_Reference 61:   stream.destroySoon = stream.destroy;",
        "// Line_Reference 62:   return stream;"
    ]
}
