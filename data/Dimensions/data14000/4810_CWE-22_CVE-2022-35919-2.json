{
    "cve_id": "CVE-2022-35919",
    "cve_description": "MinIO is a High Performance Object Storage released under GNU Affero General Public License v3.0. In affected versions all 'admin' users authorized for `admin:ServerUpdate` can selectively trigger an error that in response, returns the content of the path requested. Any normal OS system would allow access to contents at any arbitrary paths that are readable by MinIO process. Users are advised to upgrade. Users unable to upgrade may disable ServerUpdate API by denying the `admin:ServerUpdate` action for your admin users via IAM policies.",
    "cve_publish_date": "2022-08-01",
    "cwe_id": "CWE-22",
    "cwe_name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
    "cwe_description": "The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
    "commit_message": "do not allow filesystem fallback in server download (#15429)\n\nIt is possible for anyone with admin access to relatively\r\nto get any content of any random OS location by simply\r\nproviding the file with 'mc admin update alias/ /etc/passwd`.\r\n\r\nWorkaround is to disable 'admin:ServiceUpdate' action. Everyone\r\nis advised to upgrade to this patch.\r\n\r\nThanks to @alevsk for finding this bug.",
    "type_of_change": "Modification",
    "filename_of_changes": "update.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "33",
    "number_of_lines_deleted_vulnerable_to_cve": "46",
    "vulnerable_lines": [
        "// Line_Reference 294: \tvar reader io.ReadCloser",
        "// Line_Reference 295: \tif u.Scheme == \"https\" || u.Scheme == \"http\" {",
        "// Line_Reference 296: \t\treq, err := http.NewRequest(http.MethodGet, u.String(), nil)",
        "// Line_Reference 297: \t\tif err != nil {",
        "// Line_Reference 298: \t\t\treturn content, AdminError{",
        "// Line_Reference 299: \t\t\t\tCode:       AdminUpdateUnexpectedFailure,",
        "// Line_Reference 300: \t\t\t\tMessage:    err.Error(),",
        "// Line_Reference 301: \t\t\t\tStatusCode: http.StatusInternalServerError,",
        "// Line_Reference 302: \t\t\t}",
        "// Line_Reference 304: \t\treq.Header.Set(\"User-Agent\", getUserAgent(mode))",
        "// Line_Reference 306: \t\tclient := &http.Client{Transport: getUpdateTransport(timeout)}",
        "// Line_Reference 307: \t\tresp, err := client.Do(req)",
        "// Line_Reference 308: \t\tif err != nil {",
        "// Line_Reference 309: \t\t\tif xnet.IsNetworkOrHostDown(err, false) {",
        "// Line_Reference 310: \t\t\t\treturn content, AdminError{",
        "// Line_Reference 311: \t\t\t\t\tCode:       AdminUpdateURLNotReachable,",
        "// Line_Reference 312: \t\t\t\t\tMessage:    err.Error(),",
        "// Line_Reference 313: \t\t\t\t\tStatusCode: http.StatusServiceUnavailable,",
        "// Line_Reference 314: \t\t\t\t}",
        "// Line_Reference 315: \t\t\t}",
        "// Line_Reference 317: \t\t\t\tCode:       AdminUpdateUnexpectedFailure,",
        "// Line_Reference 319: \t\t\t\tStatusCode: http.StatusInternalServerError,",
        "// Line_Reference 322: \t\tif resp == nil {",
        "// Line_Reference 323: \t\t\treturn content, AdminError{",
        "// Line_Reference 324: \t\t\t\tCode:       AdminUpdateUnexpectedFailure,",
        "// Line_Reference 325: \t\t\t\tMessage:    fmt.Sprintf(\"No response from server to download URL %s\", u),",
        "// Line_Reference 326: \t\t\t\tStatusCode: http.StatusInternalServerError,",
        "// Line_Reference 327: \t\t\t}",
        "// Line_Reference 329: \t\treader = resp.Body",
        "// Line_Reference 330: \t\tdefer xhttp.DrainBody(resp.Body)",
        "// Line_Reference 331: ",
        "// Line_Reference 332: \t\tif resp.StatusCode != http.StatusOK {",
        "// Line_Reference 333: \t\t\treturn content, AdminError{",
        "// Line_Reference 334: \t\t\t\tCode:       AdminUpdateUnexpectedFailure,",
        "// Line_Reference 335: \t\t\t\tMessage:    fmt.Sprintf(\"Error downloading URL %s. Response: %v\", u, resp.Status),",
        "// Line_Reference 336: \t\t\t\tStatusCode: resp.StatusCode,",
        "// Line_Reference 337: \t\t\t}",
        "// Line_Reference 339: \t} else {",
        "// Line_Reference 340: \t\treader, err = os.Open(u.Path)",
        "// Line_Reference 341: \t\tif err != nil {",
        "// Line_Reference 342: \t\t\treturn content, AdminError{",
        "// Line_Reference 343: \t\t\t\tCode:       AdminUpdateURLNotReachable,",
        "// Line_Reference 344: \t\t\t\tMessage:    err.Error(),",
        "// Line_Reference 345: \t\t\t\tStatusCode: http.StatusServiceUnavailable,",
        "// Line_Reference 346: \t\t\t}",
        "// Line_Reference 350: \tcontentBytes, err := ioutil.ReadAll(reader)"
    ]
}
