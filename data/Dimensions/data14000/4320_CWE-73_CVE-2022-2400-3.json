{
    "cve_id": "CVE-2022-2400",
    "cve_description": "External Control of File Name or Path in GitHub repository dompdf/dompdf prior to 2.0.0.",
    "cve_publish_date": "2022-07-18",
    "cwe_id": "CWE-73",
    "cwe_name": "External Control of File Name or Path",
    "cwe_description": "The product allows user input to control or influence paths or file names that are used in filesystem operations.",
    "commit_message": "Update resource URI validation and handling\n\nURI scheme (protocol) validation rules are now specified through the Options class. By default file and http(s) URIs are allowed and validation rules defined. Validation rules for PHAR URIs are defined but the scheme is not enabled by default.\n\nResource retrieval has been updated to use file_get_contents for schemes other than http(s).\n\nfixes #621\nfixes #2826\n\nin lieu of #1903",
    "type_of_change": "Modification",
    "filename_of_changes": "Dompdf.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "18",
    "number_of_lines_deleted_vulnerable_to_cve": "41",
    "vulnerable_lines": [
        "// Line_Reference 199:     /**",
        "// Line_Reference 200:     * Protocol whitelist",
        "// Line_Reference 201:     *",
        "// Line_Reference 202:     * Protocols and PHP wrappers allowed in URLs. Full support is not",
        "// Line_Reference 203:     * guaranteed for the protocols/wrappers contained in this array.",
        "// Line_Reference 204:     *",
        "// Line_Reference 205:     * @var array",
        "// Line_Reference 206:     */",
        "// Line_Reference 207:     private $allowedProtocols = [\"\", \"file://\", \"http://\", \"https://\"];",
        "// Line_Reference 208: ",
        "// Line_Reference 274:         if (file_exists($versionFile) && ($version = trim(file_get_contents($versionFile))) !== false && $version !== '$Format:<%h>$') {",
        "// Line_Reference 275:             $this->version = sprintf('dompdf %s', $version);",
        "// Line_Reference 355: ",
        "// Line_Reference 358:         if (!in_array($protocol, $this->allowedProtocols, true)) {",
        "// Line_Reference 362:         if (!$this->options->isRemoteEnabled() && ($protocol !== \"\" && $protocol !== \"file://\")) {",
        "// Line_Reference 363:             throw new Exception(\"Remote file requested, but remote file download is disabled.\");",
        "// Line_Reference 364:         }",
        "// Line_Reference 365: ",
        "// Line_Reference 366:         if ($protocol === \"\" || $protocol === \"file://\") {",
        "// Line_Reference 367:             $realfile = realpath($uri);",
        "// Line_Reference 368: ",
        "// Line_Reference 369:             $chroot = $this->options->getChroot();",
        "// Line_Reference 370:             $chrootValid = false;",
        "// Line_Reference 371:             foreach ($chroot as $chrootPath) {",
        "// Line_Reference 372:                 $chrootPath = realpath($chrootPath);",
        "// Line_Reference 373:                 if ($chrootPath !== false && strpos($realfile, $chrootPath) === 0) {",
        "// Line_Reference 374:                     $chrootValid = true;",
        "// Line_Reference 375:                     break;",
        "// Line_Reference 376:                 }",
        "// Line_Reference 377:             }",
        "// Line_Reference 378:             if ($chrootValid !== true) {",
        "// Line_Reference 379:                 throw new Exception(\"Permission denied on $file. The file could not be found under the paths specified by Options::chroot.\");",
        "// Line_Reference 380:             }",
        "// Line_Reference 381: ",
        "// Line_Reference 382:             $ext = strtolower(pathinfo($realfile, PATHINFO_EXTENSION));",
        "// Line_Reference 384:                 throw new Exception(\"Permission denied on $file. This file extension is forbidden\");",
        "// Line_Reference 387:             if (!$realfile) {",
        "// Line_Reference 388:                 throw new Exception(\"File '$file' not found.\");",
        "// Line_Reference 390: ",
        "// Line_Reference 391:             $uri = $realfile;",
        "// Line_Reference 607:                         $this->css->load_css_file($url, Stylesheet::ORIG_AUTHOR);"
    ]
}
