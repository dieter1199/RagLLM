{
    "cve_id": "CVE-2022-39264",
    "cve_description": "nheko is a desktop client for the Matrix communication application. All versions below 0.10.2 are vulnerable homeservers inserting malicious secrets, which could lead to man-in-the-middle attacks. Users can upgrade to version 0.10.2 to protect against this issue. As a workaround, one may apply the patch manually, avoid doing verifications of one's own devices, and/or avoid pressing the request button in the settings menu.",
    "cve_publish_date": "2022-09-28",
    "cwe_id": "CWE-287",
    "cwe_name": "Improper Authentication",
    "cwe_description": "When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.",
    "commit_message": "Prevent the homeserver from inserting malicious secrets\n\nCorrectly verify that the reply to a secrets request is actually coming\nfrom a verified device. While we did verify that it was us who replied,\nwe didn't properly cancel storing the secret if the sending device was\none of ours but was maliciously inserted by the homeserver and\nunverified. We only send secret requests to verified devices in the\nfirst place, so only the homeserver could abuse this issue.\n\nAdditionally we protected against malicious secret poisoning by\nverifying that the secret is actually the reply to a request. This means\nthe server only has 2 places where it can poison the secrets:\n\n- After a verification when we automatically request the secrets\n- When the user manually hits the request button\n\nIt also needs to prevent other secret answers to reach the client first\nsince we ignore all replies after that one.\n\nThe impact of this might be quite severe. It could allow the server to\nreplace the cross-signing keys silently and while we might not trust\nthat key, we possibly could trust it in the future if we rely on the\nstored secret. Similarly this could potentially be abused to make the\nclient trust a malicious online key backup.\n\nIf your deployment is not patched yet and you don't control your\nhomeserver, you can protect against this by simply not doing any\nverifications of your own devices and not pressing the request button in\nthe settings menu.",
    "type_of_change": "Modification",
    "filename_of_changes": "Olm.cpp",
    "code_language": "C++",
    "number_of_lines_added_for_mitigation": "25",
    "number_of_lines_deleted_vulnerable_to_cve": "15",
    "vulnerable_lines": [
        "// Line_Reference 345:                 auto secret_name = request_id_to_secret_name.find(e->content.request_id);",
        "// Line_Reference 347:                 if (secret_name != request_id_to_secret_name.end()) {",
        "// Line_Reference 348:                     nhlog::crypto()->info(\"Received secret: {}\", secret_name->second);",
        "// Line_Reference 362:                     if (deviceKeys) {",
        "// Line_Reference 363:                         for (auto &[dev, key] : deviceKeys->device_keys) {",
        "// Line_Reference 364:                             if (key.keys[\"curve25519:\" + dev] == msg.sender_key) {",
        "// Line_Reference 365:                                 sender_device_id = dev;",
        "// Line_Reference 366:                                 break;",
        "// Line_Reference 367:                             }",
        "// Line_Reference 383:                       [name = secret_name->second](mtx::http::RequestErr err) {",
        "// Line_Reference 388:                                                   name);",
        "// Line_Reference 392:                     nhlog::crypto()->info(\"Storing secret {}\", secret_name->second);",
        "// Line_Reference 393:                     cache::client()->storeSecret(secret_name->second, e->content.secret);",
        "// Line_Reference 394: ",
        "// Line_Reference 395:                     request_id_to_secret_name.erase(secret_name);"
    ]
}
