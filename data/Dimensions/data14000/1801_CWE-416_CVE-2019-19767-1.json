{
    "cve_id": "CVE-2019-19767",
    "cve_description": "The Linux kernel before 5.4.2 mishandles ext4_expand_extra_isize, as demonstrated by use-after-free errors in __ext4_expand_extra_isize and ext4_xattr_set_entry, related to fs/ext4/inode.c and fs/ext4/super.c, aka CID-4ea99936a163.",
    "cve_publish_date": "2019-12-12",
    "cwe_id": "CWE-416",
    "cwe_name": "Use After Free",
    "cwe_description": "The product reuses or references memory after it has been freed. At some point afterward, the memory may be allocated again and saved in another pointer, while the original pointer references a location somewhere within the new allocation. Any operations using the original pointer are no longer valid because the memory \"belongs\" to the code that operates on the new pointer.",
    "commit_message": "ext4: add more paranoia checking in ext4_expand_extra_isize handling\n\nIt's possible to specify a non-zero s_want_extra_isize via debugging\noption, and this can cause bad things(tm) to happen when using a file\nsystem with an inode size of 128 bytes.\n\nAdd better checking when the file system is mounted, as well as when\nwe are actually doing the trying to do the inode expansion.\n\nLink: https://lore.kernel.org/r/20191110121510.GH23325@mit.edu\nReported-by: syzbot+f8d6f8386ceacdbfff57@syzkaller.appspotmail.com\nReported-by: syzbot+33d7ea72e47de3bdf4e1@syzkaller.appspotmail.com\nReported-by: syzbot+44b6763edfc17144296f@syzkaller.appspotmail.com\nSigned-off-by: Theodore Ts'o <tytso@mit.edu>\nCc: stable@kernel.org",
    "type_of_change": "Modification",
    "filename_of_changes": "super.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "12",
    "number_of_lines_deleted_vulnerable_to_cve": "9",
    "vulnerable_lines": [
        "// Line_Reference 3549: \t/* determine the minimum size of new large inodes, if present */",
        "// Line_Reference 3550: \tif (sbi->s_inode_size > EXT4_GOOD_OLD_INODE_SIZE &&",
        "// Line_Reference 3551: \t    sbi->s_want_extra_isize == 0) {",
        "// Line_Reference 3552: \t\tsbi->s_want_extra_isize = sizeof(struct ext4_inode) -",
        "// Line_Reference 3553: \t\t\t\t\t\t     EXT4_GOOD_OLD_INODE_SIZE;",
        "// Line_Reference 3566: \tif (EXT4_GOOD_OLD_INODE_SIZE + sbi->s_want_extra_isize >",
        "// Line_Reference 3567: \t\t\t\t\t\t\tsbi->s_inode_size) {",
        "// Line_Reference 3568: \t\tsbi->s_want_extra_isize = sizeof(struct ext4_inode) -",
        "// Line_Reference 3569: \t\t\t\t\t\t       EXT4_GOOD_OLD_INODE_SIZE;"
    ]
}
