{
    "cve_id": "CVE-2019-19250",
    "cve_description": "OpenTrade before 2019-11-23 allows SQL injection, related to server/modules/api/v1.js and server/utils.js.",
    "cve_publish_date": "2019-11-25",
    "cwe_id": "CWE-89",
    "cwe_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
    "cwe_description": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.",
    "commit_message": "critical bug with SQL injection fixed!",
    "type_of_change": "Modification",
    "filename_of_changes": "v1.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "35",
    "number_of_lines_deleted_vulnerable_to_cve": "30",
    "vulnerable_lines": [
        "// Line_Reference 171: exports.onGetMarketSummary = function(req, res)",
        "// Line_Reference 193:     g_constants.dbTables['coins'].selectAll('name, ticker, info, icon', 'ticker=\"'+data[1]+'\"', '', (err, rows) => {",
        "// Line_Reference 194:         if (err || !rows)",
        "// Line_Reference 195:             return onError(req, res, err && err.message ? err.message : 'unknown database error');",
        "// Line_Reference 197:         if (!rows.length)",
        "// Line_Reference 198:             return onError(req, res, 'ticker '+data[1]+' not found');",
        "// Line_Reference 200:         const COIN = rows[0];",
        "// Line_Reference 201:         const coin_icon_src = rows[0].icon;",
        "// Line_Reference 202:         const coin_info = JSON.parse(utils.Decrypt(rows[0].info));",
        "// Line_Reference 210:         {",
        "// Line_Reference 211:             onSuccess(req, res, ret);",
        "// Line_Reference 212:             return;",
        "// Line_Reference 213:         }",
        "// Line_Reference 214: ",
        "// Line_Reference 257:     });",
        "// Line_Reference 313: function SubmitOrder(req, res, buysell)",
        "// Line_Reference 326:         utils.GetCoinFromTicker(currency[1], coin => {",
        "// Line_Reference 355:         });",
        "// Line_Reference 420: exports.onMarketGetOpenOrders = function(req, res)",
        "// Line_Reference 433:         utils.GetCoinFromTicker(currency[1], coin => {",
        "// Line_Reference 471:         });",
        "// Line_Reference 478: exports.onAccountGetBalance = function(req, res)",
        "// Line_Reference 488:         utils.GetCoinFromTicker(queryStr.currency, coin => {",
        "// Line_Reference 519:         });",
        "// Line_Reference 602: exports.onAccountGetDepositAddress = function(req, res)",
        "// Line_Reference 612:     utils.GetCoinFromTicker(queryStr.currency, coin => {",
        "// Line_Reference 635:     });",
        "// Line_Reference 748: exports.onAccountWithdraw = function(req, res)",
        "// Line_Reference 764:     utils.GetCoinFromTicker(queryStr.currency, coin => {",
        "// Line_Reference 817:     });"
    ]
}
