{
    "cve_id": "CVE-2020-12889",
    "cve_description": "MISP MISP-maltego 1.4.4 incorrectly shares a MISP connection across users in a remote-transform use case.",
    "cve_publish_date": "2020-05-15",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fix: [security] fixes a security issue when used as remote transform\n\nthe MISP connection being shared by all the users",
    "type_of_change": "Modification",
    "filename_of_changes": "util.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "109",
    "number_of_lines_deleted_vulnerable_to_cve": "114",
    "vulnerable_lines": [
        "// Line_Reference 21: misp_connection = None",
        "// Line_Reference 67: def get_misp_connection(config=None, parameters=None):",
        "// Line_Reference 68:     global misp_connection",
        "// Line_Reference 69:     if misp_connection:",
        "// Line_Reference 70:         return misp_connection",
        "// Line_Reference 71:     if not config:",
        "// Line_Reference 72:         raise MaltegoException(\"ERROR: MISP connection not yet established, and config not provided as parameter.\")",
        "// Line_Reference 73:     misp_verify = True",
        "// Line_Reference 74:     misp_debug = False",
        "// Line_Reference 75:     misp_url = None",
        "// Line_Reference 76:     misp_key = None",
        "// Line_Reference 77:     try:",
        "// Line_Reference 78:         if is_local_exec_mode():",
        "// Line_Reference 79:             misp_url = config['MISP_maltego.local.misp_url']",
        "// Line_Reference 80:             misp_key = config['MISP_maltego.local.misp_key']",
        "// Line_Reference 81:             if config['MISP_maltego.local.misp_verify'] in ['False', 'false', 0, 'no', 'No']:",
        "// Line_Reference 82:                 misp_verify = False",
        "// Line_Reference 83:             if config['MISP_maltego.local.misp_debug'] in ['True', 'true', 1, 'yes', 'Yes']:",
        "// Line_Reference 84:                 misp_debug = True",
        "// Line_Reference 85:         if is_remote_exec_mode():",
        "// Line_Reference 87:                 misp_url = parameters['mispurl'].value",
        "// Line_Reference 88:                 misp_key = parameters['mispkey'].value",
        "// Line_Reference 89:             except AttributeError:",
        "// Line_Reference 90:                 raise MaltegoException(\"ERROR: mispurl and mispkey need to be set to something valid\")",
        "// Line_Reference 91:         misp_connection = PyMISP(misp_url, misp_key, misp_verify, 'json', misp_debug, tool='misp_maltego')",
        "// Line_Reference 92:     except Exception:",
        "// Line_Reference 93:         if is_local_exec_mode():",
        "// Line_Reference 94:             raise MaltegoException(\"ERROR: Cannot connect to MISP server. Please verify your MISP_Maltego.conf settings.\")",
        "// Line_Reference 95:         if is_remote_exec_mode():",
        "// Line_Reference 96:             raise MaltegoException(\"ERROR: Cannot connect to MISP server. Please verify your settings (MISP URL and API key), and ensure the MISP server is reachable from the internet.\")",
        "// Line_Reference 97:     return misp_connection",
        "// Line_Reference 179: def object_to_entity(o, link_label=None, link_direction=LinkDirection.InputToOutput):",
        "// Line_Reference 180:     misp = get_misp_connection()",
        "// Line_Reference 181:     # find a nice icon for it",
        "// Line_Reference 182:     try:",
        "// Line_Reference 183:         icon_url = mapping_object_icon[o['name']]",
        "// Line_Reference 184:     except KeyError:",
        "// Line_Reference 185:         # it's not in our mapping, just ignore and leave the default icon",
        "// Line_Reference 186:         icon_url = None",
        "// Line_Reference 187:     # Generate a human readable display-name:",
        "// Line_Reference 188:     # - find the first RequiredOneOf that exists",
        "// Line_Reference 189:     # - if none, use the first RequiredField",
        "// Line_Reference 190:     # LATER further finetune the human readable version of this object",
        "// Line_Reference 191:     o_template = misp.get_object_template(o['template_uuid'])",
        "// Line_Reference 192:     human_readable = None",
        "// Line_Reference 193:     try:",
        "// Line_Reference 194:         found = False",
        "// Line_Reference 195:         while not found:  # the while loop is broken once something is found, or the requiredOneOf has no elements left",
        "// Line_Reference 196:             required_ote_type = o_template['ObjectTemplate']['requirements']['requiredOneOf'].pop(0)",
        "// Line_Reference 197:             for ote in o_template['ObjectTemplateElement']:",
        "// Line_Reference 198:                 if ote['object_relation'] == required_ote_type:",
        "// Line_Reference 199:                     required_a_type = ote['type']",
        "// Line_Reference 200:                     break",
        "// Line_Reference 201:             for a in o['Attribute']:",
        "// Line_Reference 202:                 if a['type'] == required_a_type:",
        "// Line_Reference 203:                     human_readable = '{}:\\n{}'.format(o['name'], a['value'])",
        "// Line_Reference 204:                     found = True",
        "// Line_Reference 205:                     break",
        "// Line_Reference 206:     except Exception:",
        "// Line_Reference 207:         pass",
        "// Line_Reference 208:     if not human_readable:",
        "// Line_Reference 209:         try:",
        "// Line_Reference 210:             found = False",
        "// Line_Reference 211:             parts = []",
        "// Line_Reference 212:             for required_ote_type in o_template['ObjectTemplate']['requirements']['required']:",
        "// Line_Reference 213:                 for ote in o_template['ObjectTemplateElement']:",
        "// Line_Reference 214:                     if ote['object_relation'] == required_ote_type:",
        "// Line_Reference 215:                         required_a_type = ote['type']",
        "// Line_Reference 216:                         break",
        "// Line_Reference 217:                 for a in o['Attribute']:",
        "// Line_Reference 218:                     if a['type'] == required_a_type:",
        "// Line_Reference 219:                         parts.append(a['value'])",
        "// Line_Reference 220:                         break",
        "// Line_Reference 221:             human_readable = '{}:\\n{}'.format(o['name'], '|'.join(parts))",
        "// Line_Reference 222:         except Exception:",
        "// Line_Reference 223:             human_readable = o['name']",
        "// Line_Reference 224:     return MISPObject(",
        "// Line_Reference 225:         human_readable,",
        "// Line_Reference 226:         uuid=o['uuid'],",
        "// Line_Reference 227:         event_id=int(o['event_id']),",
        "// Line_Reference 228:         meta_category=o.get('meta_category'),",
        "// Line_Reference 229:         description=o.get('description'),",
        "// Line_Reference 230:         comment=o.get('comment'),",
        "// Line_Reference 231:         icon_url=icon_url,",
        "// Line_Reference 232:         link_label=link_label,",
        "// Line_Reference 233:         link_direction=link_direction,",
        "// Line_Reference 234:         bookmark=Bookmark.Green",
        "// Line_Reference 235:     )",
        "// Line_Reference 236: ",
        "// Line_Reference 237: ",
        "// Line_Reference 251: def object_to_relations(o, e):",
        "// Line_Reference 252:     # process forward and reverse references, so just loop over all the objects of the event",
        "// Line_Reference 253:     if 'Object' in e['Event']:",
        "// Line_Reference 254:         for eo in e['Event']['Object']:",
        "// Line_Reference 255:             if 'ObjectReference' in eo:",
        "// Line_Reference 256:                 for ref in eo['ObjectReference']:",
        "// Line_Reference 257:                     # we have found original object. Expand to the related object and attributes",
        "// Line_Reference 258:                     if eo['uuid'] == o['uuid']:",
        "// Line_Reference 259:                         # the reference is an Object",
        "// Line_Reference 260:                         if ref.get('Object'):",
        "// Line_Reference 261:                             # get the full object in the event, as our objectReference included does not contain everything we need",
        "// Line_Reference 262:                             sub_object = get_object_in_event(ref['Object']['uuid'], e)",
        "// Line_Reference 263:                             yield object_to_entity(sub_object, link_label=ref['relationship_type'])",
        "// Line_Reference 264:                         # the reference is an Attribute",
        "// Line_Reference 265:                         if ref.get('Attribute'):",
        "// Line_Reference 266:                             ref['Attribute']['event_id'] = ref['event_id']   # LATER remove this ugly workaround - object can't be requested directly from MISP using the uuid, and to find a full object we need the event_id",
        "// Line_Reference 267:                             for item in attribute_to_entity(ref['Attribute'], link_label=ref['relationship_type']):",
        "// Line_Reference 268:                                 yield item",
        "// Line_Reference 269: ",
        "// Line_Reference 270:                     # reverse-lookup - this is another objects relating the original object",
        "// Line_Reference 271:                     if ref['referenced_uuid'] == o['uuid']:",
        "// Line_Reference 272:                         yield object_to_entity(eo, link_label=ref['relationship_type'], link_direction=LinkDirection.OutputToInput)",
        "// Line_Reference 273: ",
        "// Line_Reference 274: "
    ]
}
