{
    "cve_id": "CVE-2020-7736",
    "cve_description": "The package bmoor before 0.8.12 are vulnerable to Prototype Pollution via the set function.",
    "cve_publish_date": "2020-10-02",
    "cwe_id": "CWE-1321",
    "cwe_name": "Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')",
    "cwe_description": "The product receives input from an upstream component that specifies attributes that are to be initialized or updated in an object, but it does not properly control modifications of attributes of the object prototype.",
    "commit_message": "fix: prototype pollution",
    "type_of_change": "Modification",
    "filename_of_changes": "core.spec.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "106",
    "number_of_lines_deleted_vulnerable_to_cve": "54",
    "vulnerable_lines": [
        "// Line_Reference 7: \tit('should have get working', function(){",
        "// Line_Reference 8: \t\tvar t = {",
        "// Line_Reference 9: \t\t\t\teins : 1,",
        "// Line_Reference 10: \t\t\t\tzwei: {",
        "// Line_Reference 11: \t\t\t\t\tdrei: 3",
        "// Line_Reference 12: \t\t\t\t}",
        "// Line_Reference 13: \t\t\t};",
        "// Line_Reference 15: \t\texpect( bmoor.get(t,'eins') ).to.equal(1);",
        "// Line_Reference 16: \t\texpect( bmoor.get(t,'zwei.drei') ).to.equal(3);",
        "// Line_Reference 17: \t});",
        "// Line_Reference 19: \tit('should have get working with empty strings', function(){",
        "// Line_Reference 20: \t\tvar t = {",
        "// Line_Reference 21: \t\t\t\teins : 1,",
        "// Line_Reference 22: \t\t\t\tzwei: {",
        "// Line_Reference 23: \t\t\t\t\tdrei: 3",
        "// Line_Reference 24: \t\t\t\t}",
        "// Line_Reference 25: \t\t\t};",
        "// Line_Reference 27: \t\texpect( bmoor.get(t,'') ).to.equal(t);",
        "// Line_Reference 28: \t});",
        "// Line_Reference 30: \tit('should have makeGetter working', function(){",
        "// Line_Reference 31: \t\tvar t = {",
        "// Line_Reference 32: \t\t\t\teins : 1,",
        "// Line_Reference 33: \t\t\t\tzwei: {",
        "// Line_Reference 34: \t\t\t\t\tdrei: 3",
        "// Line_Reference 35: \t\t\t\t}",
        "// Line_Reference 36: \t\t\t},",
        "// Line_Reference 37: \t\t\tf1 = bmoor.makeGetter('eins'),",
        "// Line_Reference 38: \t\t\tf2 = bmoor.makeGetter('zwei.drei');",
        "// Line_Reference 40: \t\texpect( f1(t) ).to.equal(1);",
        "// Line_Reference 41: \t\texpect( f2(t) ).to.equal(3);",
        "// Line_Reference 44: \tit('should have makeGetter working with empty strings', function(){",
        "// Line_Reference 45: \t\tvar t = {",
        "// Line_Reference 46: \t\t\t\teins : 1,",
        "// Line_Reference 47: \t\t\t\tzwei: {",
        "// Line_Reference 48: \t\t\t\t\tdrei: 3",
        "// Line_Reference 49: \t\t\t\t}",
        "// Line_Reference 50: \t\t\t},",
        "// Line_Reference 51: \t\t\tf1 = bmoor.makeGetter('');",
        "// Line_Reference 53: \t\texpect( f1(t) ).to.equal(t);",
        "// Line_Reference 54: \t});",
        "// Line_Reference 56: \tit('should have set working', function(){",
        "// Line_Reference 57: \t\tvar t = {};",
        "// Line_Reference 59: \t\tbmoor.set(t,'eins',1);",
        "// Line_Reference 60: \t\tbmoor.set(t,'zwei.drei',3);",
        "// Line_Reference 62: \t\texpect( t.eins ).to.equal(1);",
        "// Line_Reference 63: \t\texpect( t.zwei.drei ).to.equal(3);",
        "// Line_Reference 66: \tit('should have makeSetter working', function(){",
        "// Line_Reference 67: \t\tvar t = {},",
        "// Line_Reference 68: \t\t\tf1 = bmoor.makeSetter('eins'),",
        "// Line_Reference 69: \t\t\tf2 = bmoor.makeSetter('zwei.drei');",
        "// Line_Reference 71: \t\tf1(t,1);",
        "// Line_Reference 72: \t\tf2(t,3);",
        "// Line_Reference 74: \t\texpect( t.eins ).to.equal(1);",
        "// Line_Reference 75: \t\texpect( t.zwei.drei ).to.equal(3);"
    ]
}
