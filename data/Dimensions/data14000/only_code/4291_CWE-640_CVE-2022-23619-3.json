private void checkUserReference(UserReference userReference) throws ResetPasswordException
{
if (!this.userManager.exists(userReference)) {
String exceptionMessage =
this.localizationManager.getTranslationPlain("xe.admin.passwordReset.error.noUser",
userReference.toString());
throw new ResetPasswordException(exceptionMessage);
}
this.checkUserReference(userReference);
UserProperties userProperties = this.userPropertiesResolver.resolve(userReference);
InternetAddress email = userProperties.getEmail();
if (email == null) {
String exceptionMessage =
this.localizationManager.getTranslationPlain("xe.admin.passwordReset.error.noEmail");
throw new ResetPasswordException(exceptionMessage);
}
DocumentUserReference documentUserReference = (DocumentUserReference) userReference;
DocumentReference reference = documentUserReference.getReference();
XWikiContext context = this.contextProvider.get();
try {
XWikiDocument userDocument = context.getWiki().getDocument(reference, context);
if (userDocument.getXObject(LDAP_CLASS_REFERENCE) != null) {
String exceptionMessage =
this.localizationManager.getTranslationPlain("xe.admin.passwordReset.error.ldapUser",
userReference.toString());
throw new ResetPasswordException(exceptionMessage);
BaseObject xObject = userDocument.getXObject(RESET_PASSWORD_REQUEST_CLASS_REFERENCE, true, context);
String verificationCode = context.getWiki().generateRandomString(30);
xObject.set(VERIFICATION_PROPERTY, verificationCode, context);
String saveComment =
this.localizationManager.getTranslationPlain("xe.admin.passwordReset.versionComment");
context.getWiki().saveDocument(userDocument, saveComment, true, context);
return new DefaultResetPasswordRequestResponse(userReference, email, verificationCode);
} catch (XWikiException e) {
throw new ResetPasswordException("Error when reading user document to perform reset password request.", e);
AuthenticationResourceReference resourceReference =
new AuthenticationResourceReference(AuthenticationAction.RESET_PASSWORD);
UserReference userReference = requestResponse.getUserReference();
UserProperties userProperties = this.userPropertiesResolver.resolve(userReference);
String serializedUserReference = this.referenceSerializer.serialize(userReference);
// FIXME: this should be provided as part of the User API.
String formattedName = "";
if (!StringUtils.isBlank(userProperties.getFirstName())) {
formattedName += userProperties.getFirstName();
}
if (!StringUtils.isBlank(userProperties.getLastName())) {
if (!StringUtils.isBlank(formattedName)) {
formattedName += " ";
formattedName += userProperties.getLastName();
}
if (StringUtils.isBlank(formattedName)) {
formattedName = serializedUserReference;
}
resourceReference.addParameter("u", serializedUserReference);
resourceReference.addParameter("v", requestResponse.getVerificationCode());
XWikiContext context = contextProvider.get();
ExtendedURL extendedURL = null;
try {
extendedURL = this.resourceReferenceSerializer.serialize(resourceReference);
extendedURL = this.urlNormalizer.normalize(extendedURL);
URL serverURL = context.getURLFactory().getServerURL(context);
URL externalVerificationURL = new URL(serverURL, extendedURL.serialize());
this.resetPasswordMailSenderProvider.get()
.sendResetPasswordEmail(formattedName, requestResponse.getUserEmail(), externalVerificationURL);
} catch (SerializeResourceReferenceException | UnsupportedResourceReferenceException | MalformedURLException e)
{
throw new ResetPasswordException("Error when processing information for creating the email.", e);
this.checkUserReference(userReference);
XWikiContext context = this.contextProvider.get();
UserProperties userProperties = this.userPropertiesResolver.resolve(userReference);
InternetAddress email = userProperties.getEmail();
DocumentUserReference documentUserReference = (DocumentUserReference) userReference;
DocumentReference reference = documentUserReference.getReference();
String exceptionMessage =
this.localizationManager.getTranslationPlain("xe.admin.passwordReset.step2.error.wrongParameters",
userReference.toString());
try {
XWikiDocument userDocument = context.getWiki().getDocument(reference, context);
BaseObject xObject = userDocument.getXObject(RESET_PASSWORD_REQUEST_CLASS_REFERENCE);
if (xObject == null) {
throw new ResetPasswordException(exceptionMessage);
}
String storedVerificationCode = xObject.getStringValue(VERIFICATION_PROPERTY);
BaseClass xClass = xObject.getXClass(context);
PropertyInterface verification = xClass.get(VERIFICATION_PROPERTY);
if (!(verification instanceof PasswordClass)) {
throw new ResetPasswordException("Bad definition of ResetPassword XClass.");
}
PasswordClass passwordClass = (PasswordClass) verification;
String equivalentPassword =
passwordClass.getEquivalentPassword(storedVerificationCode, verificationCode);
// We ensure to reset the verification code before checking if it's correct to avoid any bruteforce attack.
String newVerificationCode = context.getWiki().generateRandomString(30);
xObject.set(VERIFICATION_PROPERTY, newVerificationCode, context);
String saveComment = this.localizationManager
.getTranslationPlain("xe.admin.passwordReset.step2.versionComment.changeValidationKey");
context.getWiki().saveDocument(userDocument, saveComment, true, context);
if (!storedVerificationCode.equals(equivalentPassword)) {
throw new ResetPasswordException(exceptionMessage);
}
return new DefaultResetPasswordRequestResponse(userReference, email, newVerificationCode);
} catch (XWikiException e) {
throw new ResetPasswordException("Cannot open user document to check verification code.", e);
this.checkUserReference(userReference);
XWikiContext context = this.contextProvider.get();
DocumentUserReference documentUserReference = (DocumentUserReference) userReference;
DocumentReference reference = documentUserReference.getReference();
try {
XWikiDocument userDocument = context.getWiki().getDocument(reference, context);
userDocument.removeXObjects(RESET_PASSWORD_REQUEST_CLASS_REFERENCE);
BaseObject userXObject = userDocument.getXObject(USER_CLASS_REFERENCE);
userXObject.setStringValue("password", newPassword);
String saveComment = this.localizationManager.getTranslationPlain(
"xe.admin.passwordReset.step2.versionComment.passwordReset");
context.getWiki().saveDocument(userDocument, saveComment, true, context);
} catch (XWikiException e) {
throw new ResetPasswordException("Cannot open user document to perform reset password.", e);
