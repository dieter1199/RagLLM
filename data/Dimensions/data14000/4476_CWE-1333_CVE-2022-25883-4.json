{
    "cve_id": "CVE-2022-25883",
    "cve_description": "Versions of the package semver before 7.5.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the function new Range, when untrusted user data is provided as a range.\r\r\r",
    "cve_publish_date": "2023-06-21",
    "cwe_id": "CWE-1333",
    "cwe_name": "Inefficient Regular Expression Complexity",
    "cwe_description": "The product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles.",
    "commit_message": "fix: better handling of whitespace (#564)",
    "type_of_change": "Modification",
    "filename_of_changes": "range.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "37",
    "number_of_lines_deleted_vulnerable_to_cve": "27",
    "vulnerable_lines": [
        "// Line_Reference 29:     // First, split based on boolean or ||",
        "// Line_Reference 31:     this.set = range",
        "// Line_Reference 34:       .map(r => this.parseRange(r.trim()))",
        "// Line_Reference 41:       throw new TypeError(`Invalid SemVer Range: ${range}`)",
        "// Line_Reference 67:       .map((comps) => {",
        "// Line_Reference 68:         return comps.join(' ').trim()",
        "// Line_Reference 69:       })",
        "// Line_Reference 80:     range = range.trim()",
        "// Line_Reference 81: ",
        "// Line_Reference 108:     // normalize spaces",
        "// Line_Reference 109:     range = range.split(/\\s+/).join(' ')",
        "// Line_Reference 110: ",
        "// Line_Reference 206:   re,",
        "// Line_Reference 260: const replaceTildes = (comp, options) =>",
        "// Line_Reference 261:   comp.trim().split(/\\s+/).map((c) => {",
        "// Line_Reference 262:     return replaceTilde(c, options)",
        "// Line_Reference 263:   }).join(' ')",
        "// Line_Reference 301: const replaceCarets = (comp, options) =>",
        "// Line_Reference 302:   comp.trim().split(/\\s+/).map((c) => {",
        "// Line_Reference 303:     return replaceCaret(c, options)",
        "// Line_Reference 304:   }).join(' ')",
        "// Line_Reference 361:   return comp.split(/\\s+/).map((c) => {",
        "// Line_Reference 362:     return replaceXRange(c, options)",
        "// Line_Reference 363:   }).join(' ')",
        "// Line_Reference 446:   return comp.trim().replace(re[t.STAR], '')",
        "// Line_Reference 451:   return comp.trim()",
        "// Line_Reference 489:   return (`${from} ${to}`).trim()"
    ]
}
