{
    "cve_id": "CVE-2018-11219",
    "cve_description": "An Integer Overflow issue was discovered in the struct library in the Lua subsystem in Redis before 3.2.12, 4.x before 4.0.10, and 5.x before 5.0 RC2, leading to a failure of bounds checking.",
    "cve_publish_date": "2018-06-17",
    "cwe_id": "CWE-190",
    "cwe_name": "Integer Overflow or Wraparound",
    "cwe_description": "The product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number.",
    "commit_message": "Security: fix Lua struct package offset handling.\n\nAfter the first fix to the struct package I found another similar\nproblem, which is fixed by this patch. It could be reproduced easily by\nrunning the following script:\n\n    return struct.unpack('f', \"xxxxxxxxxxxxx\",-3)\n\nThe above will access bytes before the 'data' pointer.",
    "type_of_change": "Modification",
    "filename_of_changes": "lua_struct.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "6",
    "number_of_lines_deleted_vulnerable_to_cve": "2",
    "vulnerable_lines": [
        "// Line_Reference 296:   size_t pos = luaL_optinteger(L, 3, 1) - 1;",
        "// Line_Reference 303:     luaL_argcheck(L, pos+size <= ld, 2, \"data string too short\");"
    ]
}
