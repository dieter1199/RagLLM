{
    "cve_id": "CVE-2020-24240",
    "cve_description": "GNU Bison before 3.7.1 has a use-after-free in _obstack_free in lib/obstack.c (called from gram_lex) when a '\\0' byte is encountered. NOTE: there is a risk only if Bison is used with untrusted input, and the observed bug happens to cause unsafe behavior with a specific compiler/architecture. The bug report was intended to show that a crash may occur in Bison itself, not that a crash may occur in code that is generated by Bison.",
    "cve_publish_date": "2020-08-25",
    "cwe_id": "CWE-416",
    "cwe_name": "Use After Free",
    "cwe_description": "The product reuses or references memory after it has been freed. At some point afterward, the memory may be allocated again and saved in another pointer, while the original pointer references a location somewhere within the new allocation. Any operations using the original pointer are no longer valid because the memory \"belongs\" to the code that operates on the new pointer.",
    "commit_message": "scanner: don't crash on strings containing a NUL byte\n\nWe crash if the input contains a string containing a NUL byte.\nReported by Suhwan Song.\nhttps://lists.gnu.org/r/bug-bison/2020-07/msg00051.html\n\n* src/flex-scanner.h (STRING_FREE): Avoid accidental use of\nlast_string.\n* src/scan-gram.l: Don't call STRING_FREE without calling\nSTRING_FINISH first.\n* tests/input.at (Invalid inputs): Check that case.",
    "type_of_change": "Modification",
    "filename_of_changes": "scan-gram.l",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "2",
    "number_of_lines_deleted_vulnerable_to_cve": "1",
    "vulnerable_lines": [
        "// Line_Reference 602:     val->CHAR = last_string[0];"
    ]
}
