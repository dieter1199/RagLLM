{
    "cve_id": "CVE-2020-5219",
    "cve_description": "Angular Expressions before version 1.0.1 has a remote code execution vulnerability if you call expressions.compile(userControlledInput) where userControlledInput is text that comes from user input. If running angular-expressions in the browser, an attacker could run any browser script when the application code calls expressions.compile(userControlledInput). If running angular-expressions on the server, an attacker could run any Javascript expression, thus gaining Remote Code Execution.",
    "cve_publish_date": "2020-01-24",
    "cwe_id": "CWE-74",
    "cwe_name": "Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')",
    "cwe_description": "The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.",
    "commit_message": "Disallow access to prototype chain (CVE-2020-5219)",
    "type_of_change": "Modification",
    "filename_of_changes": "main.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "35",
    "number_of_lines_deleted_vulnerable_to_cve": "28",
    "vulnerable_lines": [
        "// Line_Reference 9:     csp: false, // noUnsafeEval,",
        "// Line_Reference 10:     expensiveChecks: true,",
        "// Line_Reference 11:     literals: { // defined at: function $ParseProvider() {",
        "// Line_Reference 12:         true: true,",
        "// Line_Reference 13:         false: false,",
        "// Line_Reference 14:         null: null,",
        "// Line_Reference 15:         /*eslint no-undefined: 0*/",
        "// Line_Reference 16:         undefined: undefined",
        "// Line_Reference 17:         /* eslint: no-undefined: 1  */",
        "// Line_Reference 18:     }",
        "// Line_Reference 19:     //isIdentifierStart: undefined, //isFunction(identStart) && identStart,",
        "// Line_Reference 20:     //isIdentifierContinue: undefined //isFunction(identContinue) && identContinue",
        "// Line_Reference 24: var parser = new Parser(lexer, function getFilter(name) {",
        "// Line_Reference 25:     return filters[name];",
        "// Line_Reference 26: }, parserOptions);",
        "// Line_Reference 36:     var cached;",
        "// Line_Reference 38:     if (typeof src !== \"string\") {",
        "// Line_Reference 39:         throw new TypeError(\"src must be a string, instead saw '\" + typeof src + \"'\");",
        "// Line_Reference 40:     }",
        "// Line_Reference 42:     if (!compile.cache) {",
        "// Line_Reference 43:         return parser.parse(src);",
        "// Line_Reference 44:     }",
        "// Line_Reference 46:     cached = compile.cache[src];",
        "// Line_Reference 47:     if (!cached) {",
        "// Line_Reference 48:         cached = compile.cache[src] = parser.parse(src);",
        "// Line_Reference 49:     }",
        "// Line_Reference 51:     return cached;",
        "// Line_Reference 60: compile.cache = {};"
    ]
}
