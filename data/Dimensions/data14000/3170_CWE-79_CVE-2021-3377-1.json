{
    "cve_id": "CVE-2021-3377",
    "cve_description": "The npm package ansi_up converts ANSI escape codes into HTML. In ansi_up v4, ANSI escape codes can be used to create HTML hyperlinks. Due to insufficient URL sanitization, this feature is affected by a cross-site scripting (XSS) vulnerability. This issue is fixed in v5.0.0.",
    "cve_publish_date": "2021-03-05",
    "cwe_id": "CWE-79",
    "cwe_name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
    "cwe_description": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
    "commit_message": "5.0.0 - Security fix.\n\nIf you had a malformed URL when using the OSC URL sequence,\nit would not be properly escaped.\nAlso, html escaping is now mandatory, so the API changed.\nThe 'escape_for_html' property was removed.",
    "type_of_change": "Modification",
    "filename_of_changes": "ansi_up-test.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "1",
    "number_of_lines_deleted_vulnerable_to_cve": "130",
    "vulnerable_lines": [
        "// Line_Reference 115:         var expected = \"&lt;&amp;&gt;/\\\\'\\\"\";",
        "// Line_Reference 126:   describe('escape_for_html off', function () {",
        "// Line_Reference 127: ",
        "// Line_Reference 128:     describe('ampersands', function () {",
        "// Line_Reference 129: ",
        "// Line_Reference 130:       it('should escape a single ampersand', function () {",
        "// Line_Reference 131:         var start = \"&\";",
        "// Line_Reference 132:         var expected = \"&\";",
        "// Line_Reference 133: ",
        "// Line_Reference 134:         var au = new AnsiUp();",
        "// Line_Reference 135:         au.escape_for_html = false;",
        "// Line_Reference 136:         var l = au.ansi_to_html(start);",
        "// Line_Reference 137:         l.should.eql(expected);",
        "// Line_Reference 138:       });",
        "// Line_Reference 139: ",
        "// Line_Reference 140:       it('should escape some text with ampersands', function () {",
        "// Line_Reference 141:         var start = \"abcd&efgh\";",
        "// Line_Reference 142:         var expected = \"abcd&efgh\";",
        "// Line_Reference 143: ",
        "// Line_Reference 144:         var au = new AnsiUp();",
        "// Line_Reference 145:         au.escape_for_html = false;",
        "// Line_Reference 146:         var l = au.ansi_to_html(start);",
        "// Line_Reference 147:         l.should.eql(expected);",
        "// Line_Reference 148:       });",
        "// Line_Reference 149: ",
        "// Line_Reference 150:       it('should escape multiple ampersands', function () {",
        "// Line_Reference 151:         var start = \" & & \";",
        "// Line_Reference 152:         var expected = \" & & \";",
        "// Line_Reference 153: ",
        "// Line_Reference 154:         var au = new AnsiUp();",
        "// Line_Reference 155:         au.escape_for_html = false;",
        "// Line_Reference 156:         var l = au.ansi_to_html(start);",
        "// Line_Reference 157:         l.should.eql(expected);",
        "// Line_Reference 158:       });",
        "// Line_Reference 159: ",
        "// Line_Reference 160:       it('should escape an already escaped ampersand', function () {",
        "// Line_Reference 161:         var start = \" &amp; \";",
        "// Line_Reference 162:         var expected = \" &amp; \";",
        "// Line_Reference 163: ",
        "// Line_Reference 164:         var au = new AnsiUp();",
        "// Line_Reference 165:         au.escape_for_html = false;",
        "// Line_Reference 166:         var l = au.ansi_to_html(start);",
        "// Line_Reference 167:         l.should.eql(expected);",
        "// Line_Reference 168:       });",
        "// Line_Reference 169:     });",
        "// Line_Reference 170: ",
        "// Line_Reference 171:     describe('less-than', function () {",
        "// Line_Reference 172: ",
        "// Line_Reference 173:       it('should escape a single less-than', function () {",
        "// Line_Reference 174:         var start = \"<\";",
        "// Line_Reference 175:         var expected = \"<\";",
        "// Line_Reference 176: ",
        "// Line_Reference 177:         var au = new AnsiUp();",
        "// Line_Reference 178:         au.escape_for_html = false;",
        "// Line_Reference 179:         var l = au.ansi_to_html(start);",
        "// Line_Reference 180:         l.should.eql(expected);",
        "// Line_Reference 181:       });",
        "// Line_Reference 182: ",
        "// Line_Reference 183:       it('should escape some text with less-thans', function () {",
        "// Line_Reference 184:         var start = \"abcd<efgh\";",
        "// Line_Reference 185:         var expected = \"abcd<efgh\";",
        "// Line_Reference 186: ",
        "// Line_Reference 187:         var au = new AnsiUp();",
        "// Line_Reference 188:         au.escape_for_html = false;",
        "// Line_Reference 189:         var l = au.ansi_to_html(start);",
        "// Line_Reference 190:         l.should.eql(expected);",
        "// Line_Reference 191:       });",
        "// Line_Reference 192: ",
        "// Line_Reference 193:       it('should escape multiple less-thans', function () {",
        "// Line_Reference 194:         var start = \" < < \";",
        "// Line_Reference 195:         var expected = \" < < \";",
        "// Line_Reference 196: ",
        "// Line_Reference 197:         var au = new AnsiUp();",
        "// Line_Reference 198:         au.escape_for_html = false;",
        "// Line_Reference 199:         var l = au.ansi_to_html(start);",
        "// Line_Reference 200:         l.should.eql(expected);",
        "// Line_Reference 201:       });",
        "// Line_Reference 202: ",
        "// Line_Reference 203:     });",
        "// Line_Reference 204: ",
        "// Line_Reference 205:     describe('greater-than', function () {",
        "// Line_Reference 206: ",
        "// Line_Reference 207:       it('should escape a single greater-than', function () {",
        "// Line_Reference 208:         var start = \">\";",
        "// Line_Reference 209:         var expected = \">\";",
        "// Line_Reference 210: ",
        "// Line_Reference 211:         var au = new AnsiUp();",
        "// Line_Reference 212:         au.escape_for_html = false;",
        "// Line_Reference 213:         var l = au.ansi_to_html(start);",
        "// Line_Reference 214:         l.should.eql(expected);",
        "// Line_Reference 215:       });",
        "// Line_Reference 216: ",
        "// Line_Reference 217:       it('should escape some text with greater-thans', function () {",
        "// Line_Reference 218:         var start = \"abcd>efgh\";",
        "// Line_Reference 219:         var expected = \"abcd>efgh\";",
        "// Line_Reference 220: ",
        "// Line_Reference 221:         var au = new AnsiUp();",
        "// Line_Reference 222:         au.escape_for_html = false;",
        "// Line_Reference 223:         var l = au.ansi_to_html(start);",
        "// Line_Reference 224:         l.should.eql(expected);",
        "// Line_Reference 225:       });",
        "// Line_Reference 226: ",
        "// Line_Reference 227:       it('should escape multiple greater-thans', function () {",
        "// Line_Reference 228:         var start = \" > > \";",
        "// Line_Reference 229:         var expected = \" > > \";",
        "// Line_Reference 230: ",
        "// Line_Reference 231:         var au = new AnsiUp();",
        "// Line_Reference 232:         au.escape_for_html = false;",
        "// Line_Reference 233:         var l = au.ansi_to_html(start);",
        "// Line_Reference 234:         l.should.eql(expected);",
        "// Line_Reference 235:       });",
        "// Line_Reference 236: ",
        "// Line_Reference 237:     });",
        "// Line_Reference 238: ",
        "// Line_Reference 239:     describe('mixed characters', function () {",
        "// Line_Reference 240: ",
        "// Line_Reference 241:       it('should escape a mix of characters that require escaping', function () {",
        "// Line_Reference 242:         var start = \"<&>/\\\\'\\\"\";",
        "// Line_Reference 243:         var expected = \"<&>/\\\\'\\\"\";",
        "// Line_Reference 244: ",
        "// Line_Reference 245:         var au = new AnsiUp();",
        "// Line_Reference 246:         au.escape_for_html = false;",
        "// Line_Reference 247:         var l = au.ansi_to_html(start);",
        "// Line_Reference 248:         l.should.eql(expected);",
        "// Line_Reference 249:       });",
        "// Line_Reference 250: ",
        "// Line_Reference 251:     });",
        "// Line_Reference 252: ",
        "// Line_Reference 253:   });",
        "// Line_Reference 254: "
    ]
}
