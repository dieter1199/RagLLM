{
    "cve_id": "CVE-2022-29201",
    "cve_description": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the implementation of `tf.raw_ops.QuantizedConv2D` does not fully validate the input arguments. In this case, references get bound to `nullptr` for each argument that is empty. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue.",
    "cve_publish_date": "2022-05-20",
    "cwe_id": "NVD-CWE-Other",
    "cwe_name": "Other",
    "cwe_description": "NVD is only using a subset of CWE for mapping instead of the entire CWE, and the weakness type is not covered by that subset.",
    "commit_message": "Fix undefined behavior in QuantizedConv2D\n\nAdded more input validation and tests.  Prior to this, we could get\n`nullptr` exceptions when attempting to access 0th elements of 0-sized\ninputs, leading to security vulnerability bugs.\n\nAlso needed to modify `quantized_conv_ops_test.cc` for consistency.\nPreviously the CPU kernel did technically support passing tensors\nof rank larger than 0 for min/max values.  However, the XLA kernels do not.\n\nPiperOrigin-RevId: 445518507",
    "type_of_change": "Modification",
    "filename_of_changes": "quantized_conv_ops_test.cc",
    "code_language": "C++",
    "number_of_lines_added_for_mitigation": "20",
    "number_of_lines_deleted_vulnerable_to_cve": "20",
    "vulnerable_lines": [
        "// Line_Reference 94:   AddInputFromArray<float>(TensorShape({1}), {image_min});",
        "// Line_Reference 95:   AddInputFromArray<float>(TensorShape({1}), {image_max});",
        "// Line_Reference 96:   AddInputFromArray<float>(TensorShape({1}), {filter_min});",
        "// Line_Reference 97:   AddInputFromArray<float>(TensorShape({1}), {filter_max});",
        "// Line_Reference 161:   AddInputFromArray<float>(TensorShape({1}), {0});",
        "// Line_Reference 162:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
        "// Line_Reference 163:   AddInputFromArray<float>(TensorShape({1}), {0});",
        "// Line_Reference 164:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
        "// Line_Reference 204:   AddInputFromArray<float>(TensorShape({1}), {0});",
        "// Line_Reference 205:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
        "// Line_Reference 206:   AddInputFromArray<float>(TensorShape({1}), {0});",
        "// Line_Reference 207:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
        "// Line_Reference 247:   AddInputFromArray<float>(TensorShape({1}), {0});",
        "// Line_Reference 248:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
        "// Line_Reference 249:   AddInputFromArray<float>(TensorShape({1}), {0});",
        "// Line_Reference 250:   AddInputFromArray<float>(TensorShape({1}), {255.0f});",
        "// Line_Reference 305:   AddInputFromArray<float>(TensorShape({1}), {image_min});",
        "// Line_Reference 306:   AddInputFromArray<float>(TensorShape({1}), {image_max});",
        "// Line_Reference 307:   AddInputFromArray<float>(TensorShape({1}), {filter_min});",
        "// Line_Reference 308:   AddInputFromArray<float>(TensorShape({1}), {filter_max});"
    ]
}
