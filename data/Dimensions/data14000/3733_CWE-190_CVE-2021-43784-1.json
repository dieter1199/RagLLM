{
    "cve_id": "CVE-2021-43784",
    "cve_description": "runc is a CLI tool for spawning and running containers on Linux according to the OCI specification. In runc, netlink is used internally as a serialization system for specifying the relevant container configuration to the `C` portion of the code (responsible for the based namespace setup of containers). In all versions of runc prior to 1.0.3, the encoder did not handle the possibility of an integer overflow in the 16-bit length field for the byte array attribute type, meaning that a large enough malicious byte array attribute could result in the length overflowing and the attribute contents being parsed as netlink messages for container configuration. This vulnerability requires the attacker to have some control over the configuration of the container and would allow the attacker to bypass the namespace restrictions of the container by simply adding their own netlink payload which disables all namespaces. The main users impacted are those who allow untrusted images with untrusted configurations to run on their machines (such as with shared cloud infrastructure). runc version 1.0.3 contains a fix for this bug. As a workaround, one may try disallowing untrusted namespace paths from your container. It should be noted that untrusted namespace paths would allow the attacker to disable namespace protections entirely even in the absence of this bug.",
    "cve_publish_date": "2021-12-06",
    "cwe_id": "CWE-190",
    "cwe_name": "Integer Overflow or Wraparound",
    "cwe_description": "The product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number.",
    "commit_message": "runc init: avoid netlink message length overflows\n\nWhen writing netlink messages, it is possible to have a byte array\nlarger than UINT16_MAX which would result in the length field\noverflowing and allowing user-controlled data to be parsed as control\ncharacters (such as creating custom mount points, changing which set of\nnamespaces to allow, and so on).\n\nCo-authored-by: Kir Kolyshkin <kolyshkin@gmail.com>\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>\nSigned-off-by: Aleksa Sarai <cyphar@cyphar.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "container_linux.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "19",
    "number_of_lines_deleted_vulnerable_to_cve": "1",
    "vulnerable_lines": [
        "// Line_Reference 2111: func (c *linuxContainer) bootstrapData(cloneFlags uintptr, nsMaps map[configs.NamespaceType]string, it initType) (io.Reader, error) {"
    ]
}
