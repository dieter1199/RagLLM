{
    "cve_id": "CVE-2022-44900",
    "cve_description": "A directory traversal vulnerability in the SevenZipFile.extractall() function of the python library py7zr v0.20.0 and earlier allows attackers to write arbitrary files via extracting a crafted 7z file.",
    "cve_publish_date": "2022-12-06",
    "cwe_id": "CWE-22",
    "cwe_name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
    "cwe_description": "The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
    "commit_message": "Fix sanity check for path traversal attack\n\n- Previous versions do not detect the attack in some case\n   - fixed it by call resolve()\n   - resolve() converts \"/hoge/fuga/../../../tmp/evil.sh\" to be \"/tmp/evil.sh\" then\n     relative_to() can detect path traversal attack.\n- Add path checker in writef() and writestr() methods\n  - When pass arcname as evil path such as \"../../../../tmp/evil.sh\"\n    it raises ValueError\n- Add test case of bad path detection\n- extraction: check symlink and junction is under target folder\n- Fix relative_path_marker removal\n- Don't put windows file namespace to output file path\n\nSigned-off-by: Hiroshi Miura <miurahr@linux.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "py7zr.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "51",
    "number_of_lines_deleted_vulnerable_to_cve": "47",
    "vulnerable_lines": [
        "// Line_Reference 55:     remove_relative_path_marker,",
        "// Line_Reference 58: from py7zr.win32compat import is_windows_native_python, is_windows_unc_path",
        "// Line_Reference 570:             # check f.filename has invalid directory traversals",
        "// Line_Reference 571:             if path is None:",
        "// Line_Reference 572:                 # do following but is_relative_to introduced in py 3.9",
        "// Line_Reference 573:                 # so I replaced it with relative_to. when condition is not satisfied, raise ValueError",
        "// Line_Reference 574:                 # if not pathlib.Path(...).joinpath(remove_relative_path_marker(outname)).is_relative_to(...):",
        "// Line_Reference 575:                 #    raise Bad7zFile",
        "// Line_Reference 576:                 try:",
        "// Line_Reference 577:                     pathlib.Path(os.getcwd()).joinpath(remove_relative_path_marker(outname)).relative_to(os.getcwd())",
        "// Line_Reference 578:                 except ValueError:",
        "// Line_Reference 579:                     raise Bad7zFile",
        "// Line_Reference 580:                 outfilename = pathlib.Path(remove_relative_path_marker(outname))",
        "// Line_Reference 582:                 outfilename = path.joinpath(remove_relative_path_marker(outname))",
        "// Line_Reference 583:                 try:",
        "// Line_Reference 584:                     outfilename.relative_to(path)",
        "// Line_Reference 585:                 except ValueError:",
        "// Line_Reference 586:                     raise Bad7zFile",
        "// Line_Reference 587:             # When python on Windows and not python on Cygwin,",
        "// Line_Reference 588:             # Add win32 file namespace to exceed microsoft windows",
        "// Line_Reference 589:             # path length limitation to 260 bytes",
        "// Line_Reference 590:             # ref.",
        "// Line_Reference 591:             # https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file",
        "// Line_Reference 592:             # In editions of Windows before Windows 10 version 1607,",
        "// Line_Reference 593:             # the maximum length for a path is MAX_PATH, which is defined as",
        "// Line_Reference 594:             # 260 characters. In later versions of Windows, changing a registry key",
        "// Line_Reference 595:             # or select option when python installation is required to remove the limit.",
        "// Line_Reference 596:             if is_windows_native_python() and outfilename.is_absolute() and not is_windows_unc_path(outfilename):",
        "// Line_Reference 597:                 outfilename = pathlib.WindowsPath(\"\\\\\\\\?\\\\\" + str(outfilename))",
        "// Line_Reference 1075:             self.writef(io.BytesIO(data.encode(\"UTF-8\")), arcname)",
        "// Line_Reference 1077:             self.writef(io.BytesIO(data), arcname)",
        "// Line_Reference 1134:             self.worker.extract(self.fp, parallel=(not self.password_protected), skip_notarget=False)  # TODO: print progress",
        "// Line_Reference 1203:     def extract(self, fp: BinaryIO, parallel: bool, skip_notarget=True, q=None) -> None:",
        "// Line_Reference 1222:                     self.extract_single(fp, empty_files, 0, 0, q)",
        "// Line_Reference 1239:                     self.extract_single(open(filename, \"rb\"), empty_files, 0, 0, q)",
        "// Line_Reference 1269:             self.extract_single(fp, empty_files, 0, 0, q)",
        "// Line_Reference 1290:             self._extract_single(fp, files, src_end, q, skip_notarget)",
        "// Line_Reference 1334:                             # fileish.unlink(missing_ok=True) > py3.7",
        "// Line_Reference 1335:                             if fileish.exists():",
        "// Line_Reference 1336:                                 fileish.unlink()",
        "// Line_Reference 1337:                             if sys.platform == \"win32\":  # hint for mypy",
        "// Line_Reference 1338:                                 _winapi.CreateJunction(str(fileish), dst)  # noqa",
        "// Line_Reference 1343:                             sym_target = pathlib.Path(omfp.read().decode(\"utf-8\"))",
        "// Line_Reference 1344:                             # fileish.unlink(missing_ok=True) > py3.7",
        "// Line_Reference 1345:                             if fileish.exists():",
        "// Line_Reference 1346:                                 fileish.unlink()",
        "// Line_Reference 1347:                             fileish.symlink_to(sym_target)"
    ]
}
