{
    "cve_id": "CVE-2022-2400",
    "cve_description": "External Control of File Name or Path in GitHub repository dompdf/dompdf prior to 2.0.0.",
    "cve_publish_date": "2022-07-18",
    "cwe_id": "CWE-73",
    "cwe_name": "External Control of File Name or Path",
    "cwe_description": "The product allows user input to control or influence paths or file names that are used in filesystem operations.",
    "commit_message": "Update resource URI validation and handling\n\nURI scheme (protocol) validation rules are now specified through the Options class. By default file and http(s) URIs are allowed and validation rules defined. Validation rules for PHAR URIs are defined but the scheme is not enabled by default.\n\nResource retrieval has been updated to use file_get_contents for schemes other than http(s).\n\nfixes #621\nfixes #2826\n\nin lieu of #1903",
    "type_of_change": "Modification",
    "filename_of_changes": "Stylesheet.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "23",
    "number_of_lines_deleted_vulnerable_to_cve": "46",
    "vulnerable_lines": [
        "// Line_Reference 328:             $parsed_url = Helpers::explode_url($file);",
        "// Line_Reference 329: ",
        "// Line_Reference 330:             [$this->_protocol, $this->_base_host, $this->_base_path, $filename] = $parsed_url;",
        "// Line_Reference 332:             $file = Helpers::build_url($this->_protocol, $this->_base_host, $this->_base_path, $filename);",
        "// Line_Reference 334:             $options = $this->_dompdf->getOptions();",
        "// Line_Reference 335:             // Download the remote file",
        "// Line_Reference 336:             if (!$options->isRemoteEnabled() && ($this->_protocol !== \"\" && $this->_protocol !== \"file://\")) {",
        "// Line_Reference 337:                 Helpers::record_warnings(E_USER_WARNING, \"Remote CSS resource '$file' referenced, but remote file download is disabled.\", __FILE__, __LINE__);",
        "// Line_Reference 338:                 return;",
        "// Line_Reference 339:             }",
        "// Line_Reference 340:             if ($this->_protocol === \"\" || $this->_protocol === \"file://\") {",
        "// Line_Reference 341:                 $realfile = realpath($file);",
        "// Line_Reference 342: ",
        "// Line_Reference 343:                 $rootDir = realpath($options->getRootDir());",
        "// Line_Reference 344:                 if (strpos($realfile, $rootDir) !== 0) {",
        "// Line_Reference 345:                     $chroot = $options->getChroot();",
        "// Line_Reference 346:                     $chrootValid = false;",
        "// Line_Reference 347:                     foreach ($chroot as $chrootPath) {",
        "// Line_Reference 348:                         $chrootPath = realpath($chrootPath);",
        "// Line_Reference 349:                         if ($chrootPath !== false && strpos($realfile, $chrootPath) === 0) {",
        "// Line_Reference 350:                             $chrootValid = true;",
        "// Line_Reference 351:                             break;",
        "// Line_Reference 352:                         }",
        "// Line_Reference 353:                     }",
        "// Line_Reference 354:                     if ($chrootValid !== true) {",
        "// Line_Reference 355:                         Helpers::record_warnings(E_USER_WARNING, \"Permission denied on $file. The file could not be found under the paths specified by Options::chroot.\", __FILE__, __LINE__);",
        "// Line_Reference 359: ",
        "// Line_Reference 360:                 if (!$realfile) {",
        "// Line_Reference 361:                     Helpers::record_warnings(E_USER_WARNING, \"File '$realfile' not found.\", __FILE__, __LINE__);",
        "// Line_Reference 362:                     return;",
        "// Line_Reference 363:                 }",
        "// Line_Reference 364: ",
        "// Line_Reference 365:                 $file = $realfile;",
        "// Line_Reference 367: ",
        "// Line_Reference 382: ",
        "// Line_Reference 1424:             $parsed_url = Helpers::explode_url($val);",
        "// Line_Reference 1429:             if (($parsed_url[\"protocol\"] === \"\" || $parsed_url[\"protocol\"] === \"file://\") && ($this->_protocol === \"\" || $this->_protocol === \"file://\")) {",
        "// Line_Reference 1430:                 $path = realpath($path);",
        "// Line_Reference 1431:                 // If realpath returns FALSE then specifically state that there is no background image",
        "// Line_Reference 1432:                 if ($path === false) {",
        "// Line_Reference 1433:                     $path = \"none\";",
        "// Line_Reference 1434:                 }",
        "// Line_Reference 1486:             $url = $this->resolve_url($url);",
        "// Line_Reference 1487: ",
        "// Line_Reference 1488:             $this->load_css_file($url);",
        "// Line_Reference 1678:         return $rootDir . self::DEFAULT_STYLESHEET;"
    ]
}
