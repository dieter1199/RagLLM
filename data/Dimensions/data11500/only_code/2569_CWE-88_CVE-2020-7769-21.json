describe('SMTP Pool Tests', function() {
beforeEach(function(done) {
stream.on('data', function() {});
afterEach(function(done) {
it('Should expose version number', function() {
it('Should detect wellknown data', function() {
it('should send mail', function(done) {
server.onData = function(stream, session, callback) {
stream.on('data', function(chunk) {
stream.on('end', function() {
function(err) {
it('should send multiple mails', function(done) {
server.onData = function(stream, session, callback) {
stream.on('data', function(chunk) {
stream.on('end', function() {
function(err) {
let cb = function() {
pool._connections.forEach(function(conn) {
it('should tolerate connection errors', function(done) {
server.onData = function(stream, session, callback) {
stream.on('data', function(chunk) {
stream.on('end', function() {
function(err) {
let cb = function() {
it('should tolerate idle connections and re-assign messages to other connections', function(done) {
server.onData = function(stream, session, callback) {
stream.on('data', function() {
server.connections.forEach(function(connection) {
stream.on('end', function() {
function(err) {
let cb = function() {
it('should call back with connection errors to senders having messages in flight', function(done) {
function(err) {
function(err) {
it('should not send more then allowed for one connection', function(done) {
server.onData = function(stream, session, callback) {
stream.on('data', function(chunk) {
stream.on('end', function() {
function(err) {
let cb = function() {
it('should send multiple mails with rate limit', function(done) {
server.onData = function(stream, session, callback) {
stream.on('data', function(chunk) {
stream.on('end', function() {
function(err) {
let cb = function() {
let send = function() {
it('should return pending messages once closed', function(done) {
server.onData = function(stream, session, callback) {
stream.on('data', function(chunk) {
stream.on('end', function() {
function(err) {
let cb = function() {
it('should emit idle for free slots in the pool', function(done) {
server.onData = function(stream, session, callback) {
stream.on('data', function(chunk) {
stream.on('end', function() {
let cb = function() {
pool.on('idle', function() {
setTimeout(function() {
setImmediate(function() {
it('Should login and send mail using proxied socket', function(done) {
let errHandler = function(err) {
socket.on('connect', function() {
server.on('data', function(connection, chunk) {
server.on('dataReady', function(connection, callback) {
function(err) {
it('Should verify connection with success', function(done) {
client.verify(function(err, success) {
it('Should not verify connection', function(done) {
client.verify(function(err) {