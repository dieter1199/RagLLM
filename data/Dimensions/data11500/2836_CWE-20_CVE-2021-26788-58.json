{
    "cve_id": "CVE-2021-26788",
    "cve_description": "Oryx Embedded CycloneTCP 1.7.6 to 2.0.0, fixed in 2.0.2, is affected by incorrect input validation, which may cause a denial of service (DoS). To exploit the vulnerability, an attacker needs to have TCP connectivity to the target system. Receiving a maliciously crafted TCP packet from an unauthenticated endpoint is sufficient to trigger the bug.",
    "cve_publish_date": "2021-03-08",
    "cwe_id": "CWE-20",
    "cwe_name": "Improper Input Validation",
    "cwe_description": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.",
    "commit_message": "Version 2.0.2",
    "type_of_change": "Modification",
    "filename_of_changes": "enc28j60_driver.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "159",
    "number_of_lines_deleted_vulnerable_to_cve": "149",
    "vulnerable_lines": [
        "// Line_Reference 9:  * Copyright (C) 2010-2020 Oryx Embedded SARL. All rights reserved.",
        "// Line_Reference 28:  * @version 2.0.0",
        "// Line_Reference 35: #include <limits.h>",
        "// Line_Reference 108:    revisionId = enc28j60ReadReg(interface, ENC28J60_REG_EREVID);",
        "// Line_Reference 114:    enc28j60WriteReg(interface, ENC28J60_REG_ECOCON, 0x00);",
        "// Line_Reference 117:    enc28j60WriteReg(interface, ENC28J60_REG_MAADR1, interface->macAddr.b[0]);",
        "// Line_Reference 118:    enc28j60WriteReg(interface, ENC28J60_REG_MAADR2, interface->macAddr.b[1]);",
        "// Line_Reference 119:    enc28j60WriteReg(interface, ENC28J60_REG_MAADR3, interface->macAddr.b[2]);",
        "// Line_Reference 120:    enc28j60WriteReg(interface, ENC28J60_REG_MAADR4, interface->macAddr.b[3]);",
        "// Line_Reference 121:    enc28j60WriteReg(interface, ENC28J60_REG_MAADR5, interface->macAddr.b[4]);",
        "// Line_Reference 122:    enc28j60WriteReg(interface, ENC28J60_REG_MAADR6, interface->macAddr.b[5]);",
        "// Line_Reference 125:    enc28j60WriteReg(interface, ENC28J60_REG_ERXSTL, LSB(ENC28J60_RX_BUFFER_START));",
        "// Line_Reference 126:    enc28j60WriteReg(interface, ENC28J60_REG_ERXSTH, MSB(ENC28J60_RX_BUFFER_START));",
        "// Line_Reference 127:    enc28j60WriteReg(interface, ENC28J60_REG_ERXNDL, LSB(ENC28J60_RX_BUFFER_STOP));",
        "// Line_Reference 128:    enc28j60WriteReg(interface, ENC28J60_REG_ERXNDH, MSB(ENC28J60_RX_BUFFER_STOP));",
        "// Line_Reference 130:    //The ERXRDPT register defines a location within the FIFO",
        "// Line_Reference 131:    //where the receive hardware is forbidden to write to",
        "// Line_Reference 132:    enc28j60WriteReg(interface, ENC28J60_REG_ERXRDPTL, LSB(ENC28J60_RX_BUFFER_STOP));",
        "// Line_Reference 133:    enc28j60WriteReg(interface, ENC28J60_REG_ERXRDPTH, MSB(ENC28J60_RX_BUFFER_STOP));",
        "// Line_Reference 136:    enc28j60WriteReg(interface, ENC28J60_REG_ERXFCON, ERXFCON_UCEN |",
        "// Line_Reference 137:       ERXFCON_CRCEN | ERXFCON_HTEN | ERXFCON_BCEN);",
        "// Line_Reference 140:    enc28j60WriteReg(interface, ENC28J60_REG_EHT0, 0x00);",
        "// Line_Reference 141:    enc28j60WriteReg(interface, ENC28J60_REG_EHT1, 0x00);",
        "// Line_Reference 142:    enc28j60WriteReg(interface, ENC28J60_REG_EHT2, 0x00);",
        "// Line_Reference 143:    enc28j60WriteReg(interface, ENC28J60_REG_EHT3, 0x00);",
        "// Line_Reference 144:    enc28j60WriteReg(interface, ENC28J60_REG_EHT4, 0x00);",
        "// Line_Reference 145:    enc28j60WriteReg(interface, ENC28J60_REG_EHT5, 0x00);",
        "// Line_Reference 146:    enc28j60WriteReg(interface, ENC28J60_REG_EHT6, 0x00);",
        "// Line_Reference 147:    enc28j60WriteReg(interface, ENC28J60_REG_EHT7, 0x00);",
        "// Line_Reference 150:    enc28j60WriteReg(interface, ENC28J60_REG_MACON2, 0x00);",
        "// Line_Reference 153:    enc28j60WriteReg(interface, ENC28J60_REG_MACON1,",
        "// Line_Reference 154:       MACON1_TXPAUS | MACON1_RXPAUS | MACON1_MARXEN);",
        "// Line_Reference 156:    //Enable automatic padding to at least 60 bytes, always append a valid CRC",
        "// Line_Reference 157:    //and check frame length. MAC can operate in half-duplex or full-duplex mode",
        "// Line_Reference 159:    enc28j60WriteReg(interface, ENC28J60_REG_MACON3, MACON3_PADCFG(1) |",
        "// Line_Reference 160:       MACON3_TXCRCEN | MACON3_FRMLNEN | MACON3_FULDPX);",
        "// Line_Reference 162:    enc28j60WriteReg(interface, ENC28J60_REG_MACON3, MACON3_PADCFG(1) |",
        "// Line_Reference 163:       MACON3_TXCRCEN | MACON3_FRMLNEN);",
        "// Line_Reference 168:    enc28j60WriteReg(interface, ENC28J60_REG_MACON4, MACON4_DEFER);",
        "// Line_Reference 171:    enc28j60WriteReg(interface, ENC28J60_REG_MAMXFLL, LSB(ETH_MAX_FRAME_SIZE));",
        "// Line_Reference 172:    enc28j60WriteReg(interface, ENC28J60_REG_MAMXFLH, MSB(ETH_MAX_FRAME_SIZE));",
        "// Line_Reference 176:    enc28j60WriteReg(interface, ENC28J60_REG_MABBIPG, 0x15);",
        "// Line_Reference 178:    enc28j60WriteReg(interface, ENC28J60_REG_MABBIPG, 0x12);",
        "// Line_Reference 182:    enc28j60WriteReg(interface, ENC28J60_REG_MAIPGL, 0x12);",
        "// Line_Reference 183:    enc28j60WriteReg(interface, ENC28J60_REG_MAIPGH, 0x0C);",
        "// Line_Reference 186:    enc28j60WriteReg(interface, ENC28J60_REG_MACLCON2, 63);",
        "// Line_Reference 190:    enc28j60WritePhyReg(interface, ENC28J60_PHY_REG_PHCON1, PHCON1_PDPXMD);",
        "// Line_Reference 192:    enc28j60WritePhyReg(interface, ENC28J60_PHY_REG_PHCON1, 0x0000);",
        "// Line_Reference 196:    enc28j60WritePhyReg(interface, ENC28J60_PHY_REG_PHCON2, PHCON2_HDLDIS);",
        "// Line_Reference 199:    enc28j60WritePhyReg(interface, ENC28J60_PHY_REG_PHLCON,",
        "// Line_Reference 200:       PHLCON_LACFG(4) | PHLCON_LBCFG(7) | PHLCON_LFRQ(0) | PHLCON_STRCH);",
        "// Line_Reference 203:    enc28j60WriteReg(interface, ENC28J60_REG_EIR, 0x00);",
        "// Line_Reference 206:    enc28j60WriteReg(interface, ENC28J60_REG_EIE, EIE_INTIE |",
        "// Line_Reference 207:       EIE_PKTIE | EIE_LINKIE | EIE_TXIE | EIE_TXERIE);",
        "// Line_Reference 210:    enc28j60WritePhyReg(interface, ENC28J60_PHY_REG_PHIE,",
        "// Line_Reference 211:       PHIE_PLNKIE | PHIE_PGEIE);",
        "// Line_Reference 214:    enc28j60SetBit(interface, ENC28J60_REG_ECON1, ECON1_RXEN);",
        "// Line_Reference 282:    enc28j60ClearBit(interface, ENC28J60_REG_EIE, EIE_INTIE);",
        "// Line_Reference 285:    status = enc28j60ReadReg(interface, ENC28J60_REG_EIR);",
        "// Line_Reference 288:    if((status & EIR_LINKIF) != 0)",
        "// Line_Reference 291:       enc28j60ClearBit(interface, ENC28J60_REG_EIE, EIE_LINKIE);",
        "// Line_Reference 300:    if((status & EIR_PKTIF) != 0)",
        "// Line_Reference 303:       enc28j60ClearBit(interface, ENC28J60_REG_EIE, EIE_PKTIE);",
        "// Line_Reference 312:    if((status & (EIR_TXIF | EIE_TXERIE)) != 0)",
        "// Line_Reference 315:       enc28j60ClearBit(interface, ENC28J60_REG_EIR, EIR_TXIF | EIE_TXERIE);",
        "// Line_Reference 323:    enc28j60SetBit(interface, ENC28J60_REG_EIE, EIE_INTIE);",
        "// Line_Reference 342:    status = enc28j60ReadReg(interface, ENC28J60_REG_EIR);",
        "// Line_Reference 345:    if((status & EIR_LINKIF) != 0)",
        "// Line_Reference 348:       enc28j60ReadPhyReg(interface, ENC28J60_PHY_REG_PHIR);",
        "// Line_Reference 350:       enc28j60ClearBit(interface, ENC28J60_REG_EIR, EIR_LINKIF);",
        "// Line_Reference 352:       value = enc28j60ReadPhyReg(interface, ENC28J60_PHY_REG_PHSTAT2);",
        "// Line_Reference 355:       if((value & PHSTAT2_LSTAT) != 0)",
        "// Line_Reference 381:    if((status & EIR_PKTIF) != 0)",
        "// Line_Reference 384:       enc28j60ClearBit(interface, ENC28J60_REG_EIR, EIR_PKTIF);",
        "// Line_Reference 397:    enc28j60SetBit(interface, ENC28J60_REG_EIE, EIE_LINKIE | EIE_PKTIE);",
        "// Line_Reference 439:    enc28j60SetBit(interface, ENC28J60_REG_ECON1, ECON1_TXRST);",
        "// Line_Reference 440:    enc28j60ClearBit(interface, ENC28J60_REG_ECON1, ECON1_TXRST);",
        "// Line_Reference 443:    enc28j60ClearBit(interface, ENC28J60_REG_EIR, EIR_TXIF | EIR_TXERIF);",
        "// Line_Reference 446:    enc28j60WriteReg(interface, ENC28J60_REG_ETXSTL, LSB(ENC28J60_TX_BUFFER_START));",
        "// Line_Reference 447:    enc28j60WriteReg(interface, ENC28J60_REG_ETXSTH, MSB(ENC28J60_TX_BUFFER_START));",
        "// Line_Reference 450:    enc28j60WriteReg(interface, ENC28J60_REG_EWRPTL, LSB(ENC28J60_TX_BUFFER_START));",
        "// Line_Reference 451:    enc28j60WriteReg(interface, ENC28J60_REG_EWRPTH, MSB(ENC28J60_TX_BUFFER_START));",
        "// Line_Reference 457:    enc28j60WriteReg(interface, ENC28J60_REG_ETXNDL, LSB(ENC28J60_TX_BUFFER_START + length));",
        "// Line_Reference 458:    enc28j60WriteReg(interface, ENC28J60_REG_ETXNDH, MSB(ENC28J60_TX_BUFFER_START + length));",
        "// Line_Reference 461:    enc28j60SetBit(interface, ENC28J60_REG_ECON1, ECON1_TXRTS);",
        "// Line_Reference 477:    uint16_t n;",
        "// Line_Reference 485:    if(enc28j60ReadReg(interface, ENC28J60_REG_EPKTCNT))",
        "// Line_Reference 488:       enc28j60WriteReg(interface, ENC28J60_REG_ERDPTL, LSB(context->nextPacket));",
        "// Line_Reference 489:       enc28j60WriteReg(interface, ENC28J60_REG_ERDPTH, MSB(context->nextPacket));",
        "// Line_Reference 491:       //Read the first two bytes, which are the address of the next packet",
        "// Line_Reference 492:       enc28j60ReadBuffer(interface, (uint8_t *) &context->nextPacket, sizeof(uint16_t));",
        "// Line_Reference 493:       //Get the length of the received frame in bytes",
        "// Line_Reference 494:       enc28j60ReadBuffer(interface, (uint8_t *) &n, sizeof(uint16_t));",
        "// Line_Reference 495:       //Read the receive status vector (RSV)",
        "// Line_Reference 496:       enc28j60ReadBuffer(interface, (uint8_t *) &status, sizeof(uint16_t));",
        "// Line_Reference 499:       if((status & RSV_RECEIVED_OK) != 0)",
        "// Line_Reference 502:          n = MIN(n, ETH_MAX_FRAME_SIZE);",
        "// Line_Reference 504:          enc28j60ReadBuffer(interface, context->rxBuffer, n);",
        "// Line_Reference 518:          enc28j60WriteReg(interface, ENC28J60_REG_ERXRDPTL, LSB(ENC28J60_RX_BUFFER_STOP));",
        "// Line_Reference 519:          enc28j60WriteReg(interface, ENC28J60_REG_ERXRDPTH, MSB(ENC28J60_RX_BUFFER_STOP));",
        "// Line_Reference 523:          enc28j60WriteReg(interface, ENC28J60_REG_ERXRDPTL, LSB(context->nextPacket - 1));",
        "// Line_Reference 524:          enc28j60WriteReg(interface, ENC28J60_REG_ERXRDPTH, MSB(context->nextPacket - 1));",
        "// Line_Reference 528:       enc28j60SetBit(interface, ENC28J60_REG_ECON2, ECON2_PKTDEC);",
        "// Line_Reference 545:       nicProcessPacket(interface, context->rxBuffer, n, &ancillary);",
        "// Line_Reference 593:    enc28j60WriteReg(interface, ENC28J60_REG_EHT0, hashTable[0]);",
        "// Line_Reference 594:    enc28j60WriteReg(interface, ENC28J60_REG_EHT1, hashTable[1]);",
        "// Line_Reference 595:    enc28j60WriteReg(interface, ENC28J60_REG_EHT2, hashTable[2]);",
        "// Line_Reference 596:    enc28j60WriteReg(interface, ENC28J60_REG_EHT3, hashTable[3]);",
        "// Line_Reference 597:    enc28j60WriteReg(interface, ENC28J60_REG_EHT4, hashTable[4]);",
        "// Line_Reference 598:    enc28j60WriteReg(interface, ENC28J60_REG_EHT5, hashTable[5]);",
        "// Line_Reference 599:    enc28j60WriteReg(interface, ENC28J60_REG_EHT6, hashTable[6]);",
        "// Line_Reference 600:    enc28j60WriteReg(interface, ENC28J60_REG_EHT7, hashTable[7]);",
        "// Line_Reference 603:    TRACE_DEBUG(\"  EHT0 = %02\" PRIX8 \"\\r\\n\", enc28j60ReadReg(interface, ENC28J60_REG_EHT0));",
        "// Line_Reference 604:    TRACE_DEBUG(\"  EHT1 = %02\" PRIX8 \"\\r\\n\", enc28j60ReadReg(interface, ENC28J60_REG_EHT1));",
        "// Line_Reference 605:    TRACE_DEBUG(\"  EHT2 = %02\" PRIX8 \"\\r\\n\", enc28j60ReadReg(interface, ENC28J60_REG_EHT2));",
        "// Line_Reference 606:    TRACE_DEBUG(\"  EHT3 = %02\" PRIX8 \"\\r\\n\", enc28j60ReadReg(interface, ENC28J60_REG_EHT3));",
        "// Line_Reference 607:    TRACE_DEBUG(\"  EHT0 = %02\" PRIX8 \"\\r\\n\", enc28j60ReadReg(interface, ENC28J60_REG_EHT4));",
        "// Line_Reference 608:    TRACE_DEBUG(\"  EHT1 = %02\" PRIX8 \"\\r\\n\", enc28j60ReadReg(interface, ENC28J60_REG_EHT5));",
        "// Line_Reference 609:    TRACE_DEBUG(\"  EHT2 = %02\" PRIX8 \"\\r\\n\", enc28j60ReadReg(interface, ENC28J60_REG_EHT6));",
        "// Line_Reference 610:    TRACE_DEBUG(\"  EHT3 = %02\" PRIX8 \"\\r\\n\", enc28j60ReadReg(interface, ENC28J60_REG_EHT7));",
        "// Line_Reference 655:       //Select specified bank",
        "// Line_Reference 656:       switch(bank)",
        "// Line_Reference 658:       case BANK_0:",
        "// Line_Reference 660:          enc28j60ClearBit(interface, ENC28J60_REG_ECON1, ECON1_BSEL1 | ECON1_BSEL0);",
        "// Line_Reference 661:          break;",
        "// Line_Reference 662:       case BANK_1:",
        "// Line_Reference 664:          enc28j60SetBit(interface, ENC28J60_REG_ECON1, ECON1_BSEL0);",
        "// Line_Reference 665:          enc28j60ClearBit(interface, ENC28J60_REG_ECON1, ECON1_BSEL1);",
        "// Line_Reference 666:          break;",
        "// Line_Reference 667:       case BANK_2:",
        "// Line_Reference 669:          enc28j60ClearBit(interface, ENC28J60_REG_ECON1, ECON1_BSEL0);",
        "// Line_Reference 670:          enc28j60SetBit(interface, ENC28J60_REG_ECON1, ECON1_BSEL1);",
        "// Line_Reference 671:          break;",
        "// Line_Reference 672:       case BANK_3:",
        "// Line_Reference 674:          enc28j60SetBit(interface, ENC28J60_REG_ECON1, ECON1_BSEL1 | ECON1_BSEL0);",
        "// Line_Reference 675:          break;",
        "// Line_Reference 676:       default:",
        "// Line_Reference 677:          //Invalid bank",
        "// Line_Reference 678:          break;",
        "// Line_Reference 760:    enc28j60WriteReg(interface, ENC28J60_REG_MIREGADR, address & REG_ADDR_MASK);",
        "// Line_Reference 763:    enc28j60WriteReg(interface, ENC28J60_REG_MIWRL, LSB(data));",
        "// Line_Reference 765:    enc28j60WriteReg(interface, ENC28J60_REG_MIWRH, MSB(data));",
        "// Line_Reference 768:    while((enc28j60ReadReg(interface, ENC28J60_REG_MISTAT) & MISTAT_BUSY) != 0)",
        "// Line_Reference 786:    enc28j60WriteReg(interface, ENC28J60_REG_MIREGADR, address & REG_ADDR_MASK);",
        "// Line_Reference 789:    enc28j60WriteReg(interface, ENC28J60_REG_MICMD, MICMD_MIIRD);",
        "// Line_Reference 791:    while((enc28j60ReadReg(interface, ENC28J60_REG_MISTAT) & MISTAT_BUSY) != 0)",
        "// Line_Reference 796:    enc28j60WriteReg(interface, ENC28J60_REG_MICMD, 0);",
        "// Line_Reference 799:    data = enc28j60ReadReg(interface, ENC28J60_REG_MIRDL);",
        "// Line_Reference 801:    data |= enc28j60ReadReg(interface, ENC28J60_REG_MIRDH) << 8;"
    ]
}
