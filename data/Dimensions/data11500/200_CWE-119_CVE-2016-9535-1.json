{
    "cve_id": "CVE-2016-9535",
    "cve_description": "tif_predict.h and tif_predict.c in libtiff 4.0.6 have assertions that can lead to assertion failures in debug mode, or buffer overflows in release mode, when dealing with unusual tile size like YCbCr with subsampling. Reported as MSVR 35105, aka \"Predictor heap-buffer-overflow.\"",
    "cve_publish_date": "2016-11-22",
    "cwe_id": "CWE-119",
    "cwe_name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
    "cwe_description": "The product performs operations on a memory buffer, but it reads from or writes to a memory location outside the buffer's intended boundary. This may result in read or write operations on unexpected memory locations that could be linked to other variables, data structures, or internal program data.",
    "commit_message": "* libtiff/tif_predict.h, libtiff/tif_predict.c:\nReplace assertions by runtime checks to avoid assertions in debug mode,\nor buffer overflows in release mode. Can happen when dealing with\nunusual tile size like YCbCr with subsampling. Reported as MSVR 35105\nby Axel Souchet\t& Vishal Chauhan from the MSRC Vulnerabilities & Mitigations\nteam.",
    "type_of_change": "Modification",
    "filename_of_changes": "tif_predict.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "108",
    "number_of_lines_deleted_vulnerable_to_cve": "45",
    "vulnerable_lines": [
        "// Line_Reference 37: static void horAcc8(TIFF* tif, uint8* cp0, tmsize_t cc);",
        "// Line_Reference 38: static void horAcc16(TIFF* tif, uint8* cp0, tmsize_t cc);",
        "// Line_Reference 39: static void horAcc32(TIFF* tif, uint8* cp0, tmsize_t cc);",
        "// Line_Reference 40: static void swabHorAcc16(TIFF* tif, uint8* cp0, tmsize_t cc);",
        "// Line_Reference 41: static void swabHorAcc32(TIFF* tif, uint8* cp0, tmsize_t cc);",
        "// Line_Reference 42: static void horDiff8(TIFF* tif, uint8* cp0, tmsize_t cc);",
        "// Line_Reference 43: static void horDiff16(TIFF* tif, uint8* cp0, tmsize_t cc);",
        "// Line_Reference 44: static void horDiff32(TIFF* tif, uint8* cp0, tmsize_t cc);",
        "// Line_Reference 45: static void swabHorDiff16(TIFF* tif, uint8* cp0, tmsize_t cc);",
        "// Line_Reference 46: static void swabHorDiff32(TIFF* tif, uint8* cp0, tmsize_t cc);",
        "// Line_Reference 47: static void fpAcc(TIFF* tif, uint8* cp0, tmsize_t cc);",
        "// Line_Reference 48: static void fpDiff(TIFF* tif, uint8* cp0, tmsize_t cc);",
        "// Line_Reference 276: static void",
        "// Line_Reference 282: \tassert((cc%stride)==0);",
        "// Line_Reference 326: static void",
        "// Line_Reference 333:         horAcc16(tif, cp0, cc);",
        "// Line_Reference 336: static void",
        "// Line_Reference 343: \tassert((cc%(2*stride))==0);",
        "// Line_Reference 354: static void",
        "// Line_Reference 361: \thorAcc32(tif, cp0, cc);",
        "// Line_Reference 364: static void",
        "// Line_Reference 371: \tassert((cc%(4*stride))==0);",
        "// Line_Reference 385: static void",
        "// Line_Reference 395: \tassert((cc%(bps*stride))==0);",
        "// Line_Reference 398: \t\treturn;",
        "// Line_Reference 435: \t\t(*sp->decodepfunc)(tif, op0, occ0);",
        "// Line_Reference 436: \t\treturn 1;",
        "// Line_Reference 459: \t\tassert((occ0%rowsize)==0);",
        "// Line_Reference 462: \t\t\t(*sp->decodepfunc)(tif, op0, rowsize);",
        "// Line_Reference 471: static void",
        "// Line_Reference 478: \tassert((cc%stride)==0);",
        "// Line_Reference 518: static void",
        "// Line_Reference 526: \tassert((cc%(2*stride))==0);",
        "// Line_Reference 538: static void",
        "// Line_Reference 544:     horDiff16(tif, cp0, cc);",
        "// Line_Reference 549: static void",
        "// Line_Reference 557: \tassert((cc%(4*stride))==0);",
        "// Line_Reference 569: static void",
        "// Line_Reference 575:     horDiff32(tif, cp0, cc);",
        "// Line_Reference 583: static void",
        "// Line_Reference 593: \tassert((cc%(bps*stride))==0);",
        "// Line_Reference 594: ",
        "// Line_Reference 596: \t\treturn;",
        "// Line_Reference 628: \t(*sp->encodepfunc)(tif, bp, cc);",
        "// Line_Reference 663: \tassert((cc0%rowsize)==0);"
    ]
}
