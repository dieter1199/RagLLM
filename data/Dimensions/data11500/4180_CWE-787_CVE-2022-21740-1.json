{
    "cve_id": "CVE-2022-21740",
    "cve_description": "Tensorflow is an Open Source Machine Learning Framework. The implementation of `SparseCountSparseOutput` is vulnerable to a heap overflow. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.",
    "cve_publish_date": "2022-02-03",
    "cwe_id": "CWE-787",
    "cwe_name": "Out-of-bounds Write",
    "cwe_description": "The product writes data past the end, or before the beginning, of the intended buffer.",
    "commit_message": "Cleanup and remove duplicate validation in `SparseCount`.\n\nWe have valdiation that is duplicated, checking different conditions, in different formats and failing to capture all cases. This should fix all the previous bugs.\n\nPiperOrigin-RevId: 414886981\nChange-Id: Ibf0bba0beb057b76d505324bb9487565daf95f01",
    "type_of_change": "Modification",
    "filename_of_changes": "count_ops.cc",
    "code_language": "C++",
    "number_of_lines_added_for_mitigation": "21",
    "number_of_lines_deleted_vulnerable_to_cve": "27",
    "vulnerable_lines": [
        "// Line_Reference 198:     OP_REQUIRES(context, shape.NumElements() != 0,",
        "// Line_Reference 199:                 errors::InvalidArgument(",
        "// Line_Reference 200:                     \"The shape argument requires at least one element.\"));",
        "// Line_Reference 201: ",
        "// Line_Reference 207:     for (int b = 0; b < shape_vector.size(); b++) {",
        "// Line_Reference 208:       OP_REQUIRES(context, shape_vector(b) >= 0,",
        "// Line_Reference 209:                   errors::InvalidArgument(",
        "// Line_Reference 210:                       \"Elements in dense_shape must be >= 0. Instead got:\",",
        "// Line_Reference 211:                       shape.DebugString()));",
        "// Line_Reference 212:     }",
        "// Line_Reference 213: ",
        "// Line_Reference 214:     OP_REQUIRES(context, num_values == indices.shape().dim_size(0),",
        "// Line_Reference 215:                 errors::InvalidArgument(",
        "// Line_Reference 216:                     \"Number of values must match first dimension of indices.\",",
        "// Line_Reference 217:                     \"Got \", num_values,",
        "// Line_Reference 218:                     \" values, indices shape: \", indices.shape().DebugString()));",
        "// Line_Reference 219: ",
        "// Line_Reference 228:     OP_REQUIRES(context, num_values <= indices.shape().dim_size(0),",
        "// Line_Reference 229:                 errors::InvalidArgument(",
        "// Line_Reference 230:                     \"The first dimension of indices must be equal to or \"",
        "// Line_Reference 231:                     \"greather than number of values. ( \",",
        "// Line_Reference 232:                     indices.shape().dim_size(0), \" vs. \", num_values, \" )\"));",
        "// Line_Reference 233:     OP_REQUIRES(context, indices.shape().dim_size(1) > 0,",
        "// Line_Reference 234:                 errors::InvalidArgument(\"The second dimension of indices must \"",
        "// Line_Reference 235:                                         \"be greater than 0. Received: \",",
        "// Line_Reference 236:                                         indices.shape().dim_size(1)));",
        "// Line_Reference 237: "
    ]
}
