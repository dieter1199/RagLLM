{
    "cve_id": "CVE-2020-15888",
    "cve_description": "Lua through 5.4.0 mishandles the interaction between stack resizes and garbage collection, leading to a heap-based buffer overflow, heap-based buffer over-read, or use-after-free.",
    "cve_publish_date": "2020-07-21",
    "cwe_id": "CWE-125",
    "cwe_name": "Out-of-bounds Read",
    "cwe_description": "The product reads data past the end, or before the beginning, of the intended buffer.",
    "commit_message": "Fixed bugs of stack reallocation x GC\n\nMacro 'checkstackGC' was doing a GC step after resizing the stack;\nthe GC could shrink the stack and undo the resize. Moreover, macro\n'checkstackp' also does a GC step, which could remove the preallocated\nCallInfo when calling a function. (Its name has been changed to\n'checkstackGCp' to emphasize that it calls the GC.)",
    "type_of_change": "Modification",
    "filename_of_changes": "ldo.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "7",
    "number_of_lines_deleted_vulnerable_to_cve": "6",
    "vulnerable_lines": [
        "// Line_Reference 468:       CallInfo *ci = next_ci(L);",
        "// Line_Reference 469:       checkstackp(L, LUA_MINSTACK, func);  /* ensure minimum stack size */",
        "// Line_Reference 474:       L->ci = ci;",
        "// Line_Reference 488:       CallInfo *ci = next_ci(L);",
        "// Line_Reference 493:       checkstackp(L, fsize, func);",
        "// Line_Reference 507:       checkstackp(L, 1, func);  /* space for metamethod */"
    ]
}
