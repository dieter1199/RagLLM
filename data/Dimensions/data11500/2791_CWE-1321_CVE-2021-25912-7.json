{
    "cve_id": "CVE-2021-25912",
    "cve_description": "Prototype pollution vulnerability in 'dotty' versions 0.0.1 through 0.1.0 allows attackers to cause a denial of service and may lead to remote code execution.",
    "cve_publish_date": "2021-02-02",
    "cwe_id": "CWE-1321",
    "cwe_name": "Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')",
    "cwe_description": "The product receives input from an upstream component that specifies attributes that are to be initialized or updated in an object, but it does not properly control modifications of attributes of the object prototype.",
    "commit_message": "Fix prototype pollution (#26)",
    "type_of_change": "Modification",
    "filename_of_changes": "removesearch-test.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "149",
    "number_of_lines_deleted_vulnerable_to_cve": "123",
    "vulnerable_lines": [
        "// Line_Reference 2:     vows = require(\"vows\"),",
        "// Line_Reference 3:     assert = require(\"assert\");",
        "// Line_Reference 5: vows.describe(\"search\").addBatch({",
        "// Line_Reference 6:   \"A simple path\": {",
        "// Line_Reference 7:     \"as a string\": {",
        "// Line_Reference 8:       topic: dotty.removeSearch({\"a\": \"b\"}, \"a\"),",
        "// Line_Reference 9:       \"should return an object with no keys\": function(res) {",
        "// Line_Reference 10:         assert.isObject(res);",
        "// Line_Reference 11:         assert.equal(Object.keys(res).length, 0, \"Object should have no keys\");",
        "// Line_Reference 13:     },",
        "// Line_Reference 14:     \"as an array\": {",
        "// Line_Reference 15:       topic: dotty.removeSearch({\"a\": \"b\"}, [\"a\"]),",
        "// Line_Reference 16:       \"should return an object with no keys\": function(res) {",
        "// Line_Reference 17:         assert.isObject(res);",
        "// Line_Reference 18:         assert.equal(Object.keys(res).length, 0, \"Object should have no keys\");",
        "// Line_Reference 20:     },",
        "// Line_Reference 21:     \"as an array with a regex\": {",
        "// Line_Reference 22:       topic: dotty.removeSearch({\"a\": \"b\"}, [/a/]),",
        "// Line_Reference 23:       \"should return an object with no keys\": function(res) {",
        "// Line_Reference 24:         assert.isObject(res);",
        "// Line_Reference 25:         assert.equal(Object.keys(res).length, 0, \"Object should have no keys\");",
        "// Line_Reference 28:   },",
        "// Line_Reference 29:   \"A two-level path\": {",
        "// Line_Reference 30:     \"as a string\": {",
        "// Line_Reference 31:       topic: dotty.removeSearch({\"a\": {\"b\": \"c\"}}, \"a.b\"),",
        "// Line_Reference 32:       \"should return an object with b removed\": function(res) {",
        "// Line_Reference 33:         assert.isObject(res);",
        "// Line_Reference 34:         assert.isObject(res.a);",
        "// Line_Reference 35:         assert.equal(Object.keys(res.a), 0, \"a has no keys\");",
        "// Line_Reference 37:     },",
        "// Line_Reference 38:     \"as an array\": {",
        "// Line_Reference 39:       topic: dotty.removeSearch({\"a\": {\"b\": \"c\"}}, [\"a\", \"b\"]),",
        "// Line_Reference 40:       \"should return an object with b removed\": function(res) {",
        "// Line_Reference 41:         assert.isObject(res);",
        "// Line_Reference 42:         assert.isObject(res.a);",
        "// Line_Reference 43:         assert.equal(Object.keys(res.a), 0, \"a has no keys\");",
        "// Line_Reference 45:     },",
        "// Line_Reference 46:     \"as an array with regexes\": {",
        "// Line_Reference 47:       topic: dotty.removeSearch({\"a\": {\"b\": \"c\"}}, [/a/, /b/]),",
        "// Line_Reference 48:       \"should return an object with b removed\": function(res) {",
        "// Line_Reference 49:         assert.isObject(res);",
        "// Line_Reference 50:         assert.isObject(res.a);",
        "// Line_Reference 51:         assert.equal(Object.keys(res.a), 0, \"a has no keys\");",
        "// Line_Reference 54:   },",
        "// Line_Reference 55:   \"A two-level path matching two values\": {",
        "// Line_Reference 56:     \"as a string\": {",
        "// Line_Reference 57:       topic: dotty.removeSearch({\"a\": {\"b\": \"c\", \"d\": \"e\"}}, \"a.*\"),",
        "// Line_Reference 58:       \"should return an object with b & d removed\": function(res) {",
        "// Line_Reference 59:         assert.isObject(res);",
        "// Line_Reference 60:         assert.isObject(res.a);",
        "// Line_Reference 61:         assert.equal(Object.keys(res.a), 0, \"a has no keys\");",
        "// Line_Reference 63:     },",
        "// Line_Reference 64:     \"as an array\": {",
        "// Line_Reference 65:       topic: dotty.removeSearch({\"a\": {\"b\": \"c\", \"d\": \"e\"}}, [\"a\", \"*\"]),",
        "// Line_Reference 66:       \"should return an object with b & d removed\": function(res) {",
        "// Line_Reference 67:         assert.isObject(res);",
        "// Line_Reference 68:         assert.isObject(res.a);",
        "// Line_Reference 69:         assert.equal(Object.keys(res.a), 0, \"a has no keys\");",
        "// Line_Reference 71:     },",
        "// Line_Reference 72:     \"as an array with regexes\": {",
        "// Line_Reference 73:       topic: dotty.removeSearch({\"a\": {\"b\": \"c\", \"d\": \"e\"}}, [/a/, /.*/]),",
        "// Line_Reference 74:       \"should return an object with b & d removed\": function(res) {",
        "// Line_Reference 75:         assert.isObject(res);",
        "// Line_Reference 76:         assert.isObject(res.a);",
        "// Line_Reference 77:         assert.equal(Object.keys(res.a), 0, \"a has no keys\");",
        "// Line_Reference 80:   },",
        "// Line_Reference 81:   \"A three-level mixed path matching two values\": {",
        "// Line_Reference 82:     \"as a string\": {",
        "// Line_Reference 83:       topic: dotty.removeSearch({\"a\": {\"b\": {\"x\": \"y\"}, \"c\": {\"x\": \"z\"}}}, \"a.*.x\"),",
        "// Line_Reference 84:       \"should return an object with x removed\": function(res) {",
        "// Line_Reference 85:         assert.isObject(res);",
        "// Line_Reference 86:         assert.isObject(res.a);",
        "// Line_Reference 87:         assert.isObject(res.a.b);",
        "// Line_Reference 88:         assert.isObject(res.a.c);",
        "// Line_Reference 89:         assert.equal(Object.keys(res.a.b), 0, \"b has no keys\");",
        "// Line_Reference 90:         assert.equal(Object.keys(res.a.c), 0, \"c has no keys\");",
        "// Line_Reference 92:     },",
        "// Line_Reference 93:     \"as an array\": {",
        "// Line_Reference 94:       topic: dotty.removeSearch({\"a\": {\"b\": {\"x\": \"y\"}, \"c\": {\"x\": \"z\"}}}, [\"a\", \"*\", \"x\"]),",
        "// Line_Reference 95:       \"should return an object with x removed\": function(res) {",
        "// Line_Reference 96:         assert.isObject(res);",
        "// Line_Reference 97:         assert.isObject(res.a);",
        "// Line_Reference 98:         assert.isObject(res.a.b);",
        "// Line_Reference 99:         assert.isObject(res.a.c);",
        "// Line_Reference 100:         assert.equal(Object.keys(res.a.b), 0, \"b has no keys\");",
        "// Line_Reference 101:         assert.equal(Object.keys(res.a.c), 0, \"c has no keys\");",
        "// Line_Reference 103:     },",
        "// Line_Reference 104:     \"as an array with regexes\": {",
        "// Line_Reference 105:       topic: dotty.removeSearch({\"a\": {\"b\": {\"x\": \"y\"}, \"c\": {\"x\": \"z\"}}}, [/a/, /.*/, /x/]),",
        "// Line_Reference 106:       \"should return an object with x removed\": function(res) {",
        "// Line_Reference 107:         assert.isObject(res);",
        "// Line_Reference 108:         assert.isObject(res.a);",
        "// Line_Reference 109:         assert.isObject(res.a.b);",
        "// Line_Reference 110:         assert.isObject(res.a.c);",
        "// Line_Reference 111:         assert.equal(Object.keys(res.a.b), 0, \"b has no keys\");",
        "// Line_Reference 112:         assert.equal(Object.keys(res.a.c), 0, \"c has no keys\");",
        "// Line_Reference 115:   },",
        "// Line_Reference 116:   \"An unresolved path\": {",
        "// Line_Reference 117:     \"as a string\": {",
        "// Line_Reference 118:       topic: dotty.removeSearch({\"a\": {\"b\": \"c\"}}, \"a.x\"),",
        "// Line_Reference 119:       \"should return unmodified object\": function(res) {",
        "// Line_Reference 120:         assert.isObject(res);",
        "// Line_Reference 121:         assert.isObject(res.a);",
        "// Line_Reference 122:         assert.isString(res.a.b);",
        "// Line_Reference 123:         assert.equal(res.a.b, 'c');",
        "// Line_Reference 125:     },",
        "// Line_Reference 126:     \"as an array\": {",
        "// Line_Reference 127:       topic: dotty.removeSearch({\"a\": {\"b\": \"c\"}}, [\"a\", \"x\"]),",
        "// Line_Reference 128:       \"should return unmodified object\": function(res) {",
        "// Line_Reference 129:         assert.isObject(res);",
        "// Line_Reference 130:         assert.isObject(res.a);",
        "// Line_Reference 131:         assert.isString(res.a.b);",
        "// Line_Reference 132:         assert.equal(res.a.b, 'c');",
        "// Line_Reference 134:     },",
        "// Line_Reference 135:     \"as an array with regexes\": {",
        "// Line_Reference 136:       topic: dotty.removeSearch({\"a\": {\"b\": \"c\"}}, [/a/, /x/]),",
        "// Line_Reference 137:       \"should return unmodified object\": function(res) {",
        "// Line_Reference 138:         assert.isObject(res);",
        "// Line_Reference 139:         assert.isObject(res.a);",
        "// Line_Reference 140:         assert.isString(res.a.b);",
        "// Line_Reference 141:         assert.equal(res.a.b, 'c');",
        "// Line_Reference 144:   },",
        "// Line_Reference 145: }).export(module);"
    ]
}
