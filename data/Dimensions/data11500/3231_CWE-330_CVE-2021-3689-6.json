{
    "cve_id": "CVE-2021-3689",
    "cve_description": "yii2 is vulnerable to Use of Predictable Algorithm in Random Number Generator",
    "cve_publish_date": "2021-08-10",
    "cwe_id": "CWE-330",
    "cwe_name": "Use of Insufficiently Random Values",
    "cwe_description": "The product uses insufficiently random numbers or values in a security context that depends on unpredictable numbers.",
    "commit_message": "Fix #18817: Use `paragonie/random_compat` for random bytes and int generation",
    "type_of_change": "Modification",
    "filename_of_changes": "Security.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "1",
    "number_of_lines_deleted_vulnerable_to_cve": "88",
    "vulnerable_lines": [
        "// Line_Reference 119:     /**",
        "// Line_Reference 120:      * @return bool if operating system is Windows",
        "// Line_Reference 121:      */",
        "// Line_Reference 122:     private function isWindows()",
        "// Line_Reference 123:     {",
        "// Line_Reference 124:         return DIRECTORY_SEPARATOR !== '/';",
        "// Line_Reference 125:     }",
        "// Line_Reference 126: ",
        "// Line_Reference 474:     private $_randomFile;",
        "// Line_Reference 475: ",
        "// Line_Reference 496:         // always use random_bytes() if it is available",
        "// Line_Reference 497:         if (function_exists('random_bytes')) {",
        "// Line_Reference 498:             return random_bytes($length);",
        "// Line_Reference 499:         }",
        "// Line_Reference 500: ",
        "// Line_Reference 501:         // The recent LibreSSL RNGs are faster and likely better than /dev/urandom.",
        "// Line_Reference 502:         // Since 5.4.0, openssl_random_pseudo_bytes() reads from CryptGenRandom on Windows instead",
        "// Line_Reference 503:         // of using OpenSSL library. LibreSSL is OK everywhere but don't use OpenSSL on non-Windows.",
        "// Line_Reference 504:         if (function_exists('openssl_random_pseudo_bytes')",
        "// Line_Reference 505:             && ($this->shouldUseLibreSSL() || $this->isWindows())",
        "// Line_Reference 506:         ) {",
        "// Line_Reference 507:             $key = openssl_random_pseudo_bytes($length, $cryptoStrong);",
        "// Line_Reference 508:             if ($cryptoStrong === false) {",
        "// Line_Reference 509:                 throw new Exception(",
        "// Line_Reference 510:                     'openssl_random_pseudo_bytes() set $crypto_strong false. Your PHP setup is insecure.'",
        "// Line_Reference 511:                 );",
        "// Line_Reference 512:             }",
        "// Line_Reference 513:             if ($key !== false && StringHelper::byteLength($key) === $length) {",
        "// Line_Reference 514:                 return $key;",
        "// Line_Reference 515:             }",
        "// Line_Reference 516:         }",
        "// Line_Reference 517: ",
        "// Line_Reference 518:         // mcrypt_create_iv() does not use libmcrypt. Since PHP 5.3.7 it directly reads",
        "// Line_Reference 519:         // CryptGenRandom on Windows. Elsewhere it directly reads /dev/urandom.",
        "// Line_Reference 520:         if (function_exists('mcrypt_create_iv')) {",
        "// Line_Reference 521:             $key = mcrypt_create_iv($length, MCRYPT_DEV_URANDOM);",
        "// Line_Reference 522:             if (StringHelper::byteLength($key) === $length) {",
        "// Line_Reference 523:                 return $key;",
        "// Line_Reference 524:             }",
        "// Line_Reference 525:         }",
        "// Line_Reference 526: ",
        "// Line_Reference 527:         // If not on Windows, try to open a random device.",
        "// Line_Reference 528:         if ($this->_randomFile === null && !$this->isWindows()) {",
        "// Line_Reference 529:             // urandom is a symlink to random on FreeBSD.",
        "// Line_Reference 530:             $device = PHP_OS === 'FreeBSD' ? '/dev/random' : '/dev/urandom';",
        "// Line_Reference 531:             // Check random device for special character device protection mode. Use lstat()",
        "// Line_Reference 532:             // instead of stat() in case an attacker arranges a symlink to a fake device.",
        "// Line_Reference 533:             $lstat = @lstat($device);",
        "// Line_Reference 534:             if ($lstat !== false && ($lstat['mode'] & 0170000) === 020000) {",
        "// Line_Reference 535:                 $this->_randomFile = fopen($device, 'rb') ?: null;",
        "// Line_Reference 536: ",
        "// Line_Reference 537:                 if (is_resource($this->_randomFile)) {",
        "// Line_Reference 538:                     // Reduce PHP stream buffer from default 8192 bytes to optimize data",
        "// Line_Reference 539:                     // transfer from the random device for smaller values of $length.",
        "// Line_Reference 540:                     // This also helps to keep future randoms out of user memory space.",
        "// Line_Reference 541:                     $bufferSize = 8;",
        "// Line_Reference 542: ",
        "// Line_Reference 543:                     if (function_exists('stream_set_read_buffer')) {",
        "// Line_Reference 544:                         stream_set_read_buffer($this->_randomFile, $bufferSize);",
        "// Line_Reference 545:                     }",
        "// Line_Reference 546:                     // stream_set_read_buffer() isn't implemented on HHVM",
        "// Line_Reference 547:                     if (function_exists('stream_set_chunk_size')) {",
        "// Line_Reference 548:                         stream_set_chunk_size($this->_randomFile, $bufferSize);",
        "// Line_Reference 549:                     }",
        "// Line_Reference 550:                 }",
        "// Line_Reference 551:             }",
        "// Line_Reference 552:         }",
        "// Line_Reference 553: ",
        "// Line_Reference 554:         if (is_resource($this->_randomFile)) {",
        "// Line_Reference 555:             $buffer = '';",
        "// Line_Reference 556:             $stillNeed = $length;",
        "// Line_Reference 557:             while ($stillNeed > 0) {",
        "// Line_Reference 558:                 $someBytes = fread($this->_randomFile, $stillNeed);",
        "// Line_Reference 559:                 if ($someBytes === false) {",
        "// Line_Reference 560:                     break;",
        "// Line_Reference 561:                 }",
        "// Line_Reference 562:                 $buffer .= $someBytes;",
        "// Line_Reference 563:                 $stillNeed -= StringHelper::byteLength($someBytes);",
        "// Line_Reference 564:                 if ($stillNeed === 0) {",
        "// Line_Reference 565:                     // Leaving file pointer open in order to make next generation faster by reusing it.",
        "// Line_Reference 566:                     return $buffer;",
        "// Line_Reference 567:                 }",
        "// Line_Reference 568:             }",
        "// Line_Reference 569:             fclose($this->_randomFile);",
        "// Line_Reference 570:             $this->_randomFile = null;",
        "// Line_Reference 571:         }",
        "// Line_Reference 572: ",
        "// Line_Reference 573:         throw new Exception('Unable to generate a random key');"
    ]
}
