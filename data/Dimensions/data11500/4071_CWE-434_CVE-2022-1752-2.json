{
    "cve_id": "CVE-2022-1752",
    "cve_description": "Unrestricted Upload of File with Dangerous Type in GitHub repository polonel/trudesk prior to 1.2.2.",
    "cve_publish_date": "2022-05-21",
    "cwe_id": "CWE-434",
    "cwe_name": "Unrestricted Upload of File with Dangerous Type",
    "cwe_description": "The product allows the upload or transfer of dangerous file types that are automatically processed within its environment.",
    "commit_message": "refactor(accounts): security enhancements",
    "type_of_change": "Modification",
    "filename_of_changes": "users.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "0",
    "number_of_lines_deleted_vulnerable_to_cve": "79",
    "vulnerable_lines": [
        "// Line_Reference 1083: apiUsers.uploadProfilePic = function (req, res) {",
        "// Line_Reference 1084:   const fs = require('fs')",
        "// Line_Reference 1085:   const path = require('path')",
        "// Line_Reference 1086:   const Busboy = require('busboy')",
        "// Line_Reference 1087:   const busboy = Busboy({",
        "// Line_Reference 1088:     headers: req.headers,",
        "// Line_Reference 1089:     limits: {",
        "// Line_Reference 1090:       files: 1,",
        "// Line_Reference 1091:       fileSize: 1024 * 1024 * 3",
        "// Line_Reference 1092:     }",
        "// Line_Reference 1093:   })",
        "// Line_Reference 1094: ",
        "// Line_Reference 1095:   const object = {}",
        "// Line_Reference 1096:   let error",
        "// Line_Reference 1097: ",
        "// Line_Reference 1098:   if (_.isUndefined(req.params.username)) return res.status(400).json({ error: 'Invalid Username' })",
        "// Line_Reference 1099:   object.username = req.params.username",
        "// Line_Reference 1100: ",
        "// Line_Reference 1101:   busboy.on('file', function (name, file, info) {",
        "// Line_Reference 1102:     const mimetype = info.mimeType",
        "// Line_Reference 1103: ",
        "// Line_Reference 1104:     if (mimetype.indexOf('image/') === -1) {",
        "// Line_Reference 1105:       error = {",
        "// Line_Reference 1106:         status: 400,",
        "// Line_Reference 1107:         message: 'Invalid file type'",
        "// Line_Reference 1108:       }",
        "// Line_Reference 1109: ",
        "// Line_Reference 1110:       return file.resume()",
        "// Line_Reference 1111:     }",
        "// Line_Reference 1112: ",
        "// Line_Reference 1113:     const savePath = path.join(__dirname, '../../../../public/uploads/users')",
        "// Line_Reference 1114:     if (!fs.existsSync(savePath)) fs.mkdirSync(savePath)",
        "// Line_Reference 1115: ",
        "// Line_Reference 1116:     object.filePath = path.join(savePath, 'aProfile_' + object.username + '.jpg')",
        "// Line_Reference 1117:     object.filename = 'aProfile_' + object.username + '.jpg'",
        "// Line_Reference 1118:     object.mimetype = mimetype",
        "// Line_Reference 1119: ",
        "// Line_Reference 1120:     file.on('limit', function () {",
        "// Line_Reference 1121:       error = {",
        "// Line_Reference 1122:         status: 400,",
        "// Line_Reference 1123:         message: 'File too large'",
        "// Line_Reference 1124:       }",
        "// Line_Reference 1125: ",
        "// Line_Reference 1126:       return file.resume()",
        "// Line_Reference 1127:     })",
        "// Line_Reference 1128: ",
        "// Line_Reference 1129:     file.pipe(fs.createWriteStream(object.filePath))",
        "// Line_Reference 1130:   })",
        "// Line_Reference 1131: ",
        "// Line_Reference 1132:   busboy.on('finish', function () {",
        "// Line_Reference 1133:     if (error) return res.status(error.status).send(error.message)",
        "// Line_Reference 1134: ",
        "// Line_Reference 1135:     if (_.isUndefined(object.username) || _.isUndefined(object.filePath) || _.isUndefined(object.filename)) {",
        "// Line_Reference 1136:       return res.status(400).send('Invalid Form Data')",
        "// Line_Reference 1137:     }",
        "// Line_Reference 1138: ",
        "// Line_Reference 1139:     if (!fs.existsSync(object.filePath)) return res.status(400).send('File failed to save to disk')",
        "// Line_Reference 1140: ",
        "// Line_Reference 1141:     UserSchema.getUserByUsername(object.username, function (err, user) {",
        "// Line_Reference 1142:       if (err) return res.status(400).send(err.message)",
        "// Line_Reference 1143: ",
        "// Line_Reference 1144:       user.image = object.filename",
        "// Line_Reference 1145: ",
        "// Line_Reference 1146:       user.save(function (err) {",
        "// Line_Reference 1147:         if (err) return res.status(500).send(err.message)",
        "// Line_Reference 1148: ",
        "// Line_Reference 1149:         emitter.emit('trudesk:profileImageUpdate', {",
        "// Line_Reference 1150:           userid: user._id,",
        "// Line_Reference 1151:           img: user.image",
        "// Line_Reference 1152:         })",
        "// Line_Reference 1153: ",
        "// Line_Reference 1154:         return res.json({ success: true, user: stripUserFields(user) })",
        "// Line_Reference 1155:       })",
        "// Line_Reference 1156:     })",
        "// Line_Reference 1157:   })",
        "// Line_Reference 1158: ",
        "// Line_Reference 1159:   req.pipe(busboy)",
        "// Line_Reference 1160: }",
        "// Line_Reference 1161: "
    ]
}
