{
    "cve_id": "CVE-2022-2872",
    "cve_description": "Unrestricted Upload of File with Dangerous Type in GitHub repository octoprint/octoprint prior to 1.8.3.",
    "cve_publish_date": "2022-09-21",
    "cwe_id": "CWE-434",
    "cwe_name": "Unrestricted Upload of File with Dangerous Type",
    "cwe_description": "The product allows the upload or transfer of dangerous file types that are automatically processed within its environment.",
    "commit_message": "üîíÔ∏è Enforce valid type on copy/move of uploads\n\nAlso enforce that on downloads and mirror it on the\nAPI.\n\nPrevents accidental or intentional renaming of\nvalid files to something like .html to e.g. attempt\nto run arbitrary JS code in the browser on\n\"download\" in the context of the OctoPrint URL.\nStealing login credentials via XSS is very unlikely\nhere given their http-only nature, however it's\nstill better to prevent this from happening anyhow.",
    "type_of_change": "Modification",
    "filename_of_changes": "files.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "45",
    "number_of_lines_deleted_vulnerable_to_cve": "32",
    "vulnerable_lines": [
        "// Line_Reference 1141:             if command == \"copy\":",
        "// Line_Reference 1142:                 # destination already there? error...",
        "// Line_Reference 1143:                 if _verifyFileExists(target, destination) or _verifyFolderExists(",
        "// Line_Reference 1144:                     target, destination",
        "// Line_Reference 1145:                 ):",
        "// Line_Reference 1146:                     abort(409, description=\"File or folder does already exist\")",
        "// Line_Reference 1147: ",
        "// Line_Reference 1148:                 if is_file:",
        "// Line_Reference 1149:                     fileManager.copy_file(target, filename, destination)",
        "// Line_Reference 1150:                 else:",
        "// Line_Reference 1151:                     fileManager.copy_folder(target, filename, destination)",
        "// Line_Reference 1152: ",
        "// Line_Reference 1153:             elif command == \"move\":",
        "// Line_Reference 1154:                 with Permissions.FILES_DELETE.require(403):",
        "// Line_Reference 1155:                     if _isBusy(target, filename):",
        "// Line_Reference 1156:                         abort(",
        "// Line_Reference 1157:                             409,",
        "// Line_Reference 1158:                             description=\"Trying to move a file or folder that is currently in use\",",
        "// Line_Reference 1159:                         )",
        "// Line_Reference 1160: ",
        "// Line_Reference 1161:                     # destination already there AND not ourselves (= display rename)? error...",
        "// Line_Reference 1162:                     if (",
        "// Line_Reference 1163:                         _verifyFileExists(target, destination)",
        "// Line_Reference 1164:                         or _verifyFolderExists(target, destination)",
        "// Line_Reference 1165:                     ) and sanitized_destination != filename:",
        "// Line_Reference 1168:                     # deselect the file if it's currently selected",
        "// Line_Reference 1169:                     currentOrigin, currentFilename = _getCurrentFile()",
        "// Line_Reference 1170:                     if currentFilename is not None and filename == currentFilename:",
        "// Line_Reference 1171:                         printer.unselect_file()",
        "// Line_Reference 1172: ",
        "// Line_Reference 1174:                         fileManager.move_file(target, filename, destination)",
        "// Line_Reference 1176:                         fileManager.move_folder(target, filename, destination)"
    ]
}
