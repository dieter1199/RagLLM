{
    "cve_id": "CVE-2022-2306",
    "cve_description": "Old session tokens can be used to authenticate to the application and send authenticated requests.",
    "cve_publish_date": "2022-07-05",
    "cwe_id": "CWE-613",
    "cwe_name": "Insufficient Session Expiration",
    "cwe_description": "According to WASC, \"Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization.\"",
    "commit_message": "Correctly console session token on all logouts. (#875)",
    "type_of_change": "Modification",
    "filename_of_changes": "console_authenticate.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "38",
    "number_of_lines_deleted_vulnerable_to_cve": "7",
    "vulnerable_lines": [
        "// Line_Reference 53: func parseConsoleToken(hmacSecretByte []byte, tokenString string) (username, email string, role console.UserRole, exp int64, ok bool) {",
        "// Line_Reference 67: \treturn claims.Username, claims.Email, claims.Role, claims.ExpiresAt, true",
        "// Line_Reference 82: \t\tuname, email, role, err = s.lookupConsoleUser(ctx, in.Username, in.Password)",
        "// Line_Reference 93: \t\tExpiresAt: time.Now().UTC().Add(time.Duration(s.config.GetConsole().TokenExpirySec) * time.Second).Unix(),",
        "// Line_Reference 104: func (s *ConsoleServer) lookupConsoleUser(ctx context.Context, unameOrEmail, password string) (uname string, email string, role console.UserRole, err error) {",
        "// Line_Reference 106: \tquery := \"SELECT username, email, role, password, disable_time FROM console_user WHERE username = $1 OR email = $1\"",
        "// Line_Reference 109: \terr = s.db.QueryRowContext(ctx, query, unameOrEmail).Scan(&uname, &email, &role, &dbPassword, &dbDisableTime)"
    ]
}
