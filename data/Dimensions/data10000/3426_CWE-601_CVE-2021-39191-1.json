{
    "cve_id": "CVE-2021-39191",
    "cve_description": "mod_auth_openidc is an authentication/authorization module for the Apache 2.x HTTP server that functions as an OpenID Connect Relying Party, authenticating users against an OpenID Connect Provider. In versions prior to 2.4.9.4, the 3rd-party init SSO functionality of mod_auth_openidc was reported to be vulnerable to an open redirect attack by supplying a crafted URL in the `target_link_uri` parameter. A patch in version 2.4.9.4 made it so that the `OIDCRedirectURLsAllowed` setting must be applied to the `target_link_uri` parameter. There are no known workarounds aside from upgrading to a patched version.",
    "cve_publish_date": "2021-09-03",
    "cwe_id": "CWE-601",
    "cwe_name": "URL Redirection to Untrusted Site ('Open Redirect')",
    "cwe_description": "A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.",
    "commit_message": "apply OIDCRedirectURLsAllowed setting to target_link_uri\n\ncloses #672; thanks @Meheni\nrelease 2.4.9.4\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "type_of_change": "Modification",
    "filename_of_changes": "mod_auth_openidc.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "101",
    "number_of_lines_deleted_vulnerable_to_cve": "90",
    "vulnerable_lines": [
        "// Line_Reference 2513: \t/* do open redirect prevention */",
        "// Line_Reference 2950: #define OIDC_MAX_URL_LENGTH 8192 * 2",
        "// Line_Reference 2951: ",
        "// Line_Reference 2952: static apr_byte_t oidc_validate_redirect_url(request_rec *r, oidc_cfg *c,",
        "// Line_Reference 2953: \t\tconst char *redirect_to_url, apr_byte_t restrict_to_host, char **err_str,",
        "// Line_Reference 2954: \t\tchar **err_desc) {",
        "// Line_Reference 2955: \tapr_uri_t uri;",
        "// Line_Reference 2956: \tconst char *c_host = NULL;",
        "// Line_Reference 2957: \tapr_hash_index_t *hi = NULL;",
        "// Line_Reference 2958: \tsize_t i = 0;",
        "// Line_Reference 2959: \tchar *url = apr_pstrndup(r->pool, redirect_to_url, OIDC_MAX_URL_LENGTH);",
        "// Line_Reference 2960: ",
        "// Line_Reference 2961: \t// replace potentially harmful backslashes with forward slashes",
        "// Line_Reference 2962: \tfor (i = 0; i < strlen(url); i++)",
        "// Line_Reference 2963: \t\tif (url[i] == '\\\\')",
        "// Line_Reference 2964: \t\t\turl[i] = '/';",
        "// Line_Reference 2965: ",
        "// Line_Reference 2966: \tif (apr_uri_parse(r->pool, url, &uri) != APR_SUCCESS) {",
        "// Line_Reference 2967: \t\t*err_str = apr_pstrdup(r->pool, \"Malformed URL\");",
        "// Line_Reference 2968: \t\t*err_desc = apr_psprintf(r->pool, \"not a valid URL value: %s\", url);",
        "// Line_Reference 2969: \t\toidc_error(r, \"%s: %s\", *err_str, *err_desc);",
        "// Line_Reference 2970: \t\treturn FALSE;",
        "// Line_Reference 2971: \t}",
        "// Line_Reference 2972: ",
        "// Line_Reference 2973: \tif (c->redirect_urls_allowed != NULL) {",
        "// Line_Reference 2974: \t\tfor (hi = apr_hash_first(NULL, c->redirect_urls_allowed); hi; hi =",
        "// Line_Reference 2975: \t\t\t\tapr_hash_next(hi)) {",
        "// Line_Reference 2976: \t\t\tapr_hash_this(hi, (const void**) &c_host, NULL, NULL);",
        "// Line_Reference 2977: \t\t\tif (oidc_util_regexp_first_match(r->pool, url, c_host,",
        "// Line_Reference 2978: \t\t\t\t\tNULL, err_str) == TRUE)",
        "// Line_Reference 2979: \t\t\t\tbreak;",
        "// Line_Reference 2980: \t\t}",
        "// Line_Reference 2981: \t\tif (hi == NULL) {",
        "// Line_Reference 2982: \t\t\t*err_str = apr_pstrdup(r->pool, \"URL not allowed\");",
        "// Line_Reference 2983: \t\t\t*err_desc =",
        "// Line_Reference 2984: \t\t\t\t\tapr_psprintf(r->pool,",
        "// Line_Reference 2985: \t\t\t\t\t\t\t\"value does not match the list of allowed redirect URLs: %s\",",
        "// Line_Reference 2986: \t\t\t\t\t\t\turl);",
        "// Line_Reference 2987: \t\t\toidc_error(r, \"%s: %s\", *err_str, *err_desc);",
        "// Line_Reference 2988: \t\t\treturn FALSE;",
        "// Line_Reference 2989: \t\t}",
        "// Line_Reference 2990: \t} else if ((uri.hostname != NULL) && (restrict_to_host == TRUE)) {",
        "// Line_Reference 2991: \t\tc_host = oidc_get_current_url_host(r);",
        "// Line_Reference 2992: \t\tif ((strstr(c_host, uri.hostname) == NULL)",
        "// Line_Reference 2993: \t\t\t\t|| (strstr(uri.hostname, c_host) == NULL)) {",
        "// Line_Reference 2994: \t\t\t*err_str = apr_pstrdup(r->pool, \"Invalid Request\");",
        "// Line_Reference 2995: \t\t\t*err_desc =",
        "// Line_Reference 2996: \t\t\t\t\tapr_psprintf(r->pool,",
        "// Line_Reference 2997: \t\t\t\t\t\t\t\"URL value \\\"%s\\\" does not match the hostname of the current request \\\"%s\\\"\",",
        "// Line_Reference 2998: \t\t\t\t\t\t\tapr_uri_unparse(r->pool, &uri, 0), c_host);",
        "// Line_Reference 2999: \t\t\toidc_error(r, \"%s: %s\", *err_str, *err_desc);",
        "// Line_Reference 3000: \t\t\treturn FALSE;",
        "// Line_Reference 3001: \t\t}",
        "// Line_Reference 3002: \t}",
        "// Line_Reference 3003: ",
        "// Line_Reference 3004: \tif ((uri.hostname == NULL) && (strstr(url, \"/\") != url)) {",
        "// Line_Reference 3005: \t\t*err_str = apr_pstrdup(r->pool, \"Malformed URL\");",
        "// Line_Reference 3006: \t\t*err_desc =",
        "// Line_Reference 3007: \t\t\t\tapr_psprintf(r->pool,",
        "// Line_Reference 3008: \t\t\t\t\t\t\"No hostname was parsed and it does not seem to be relative, i.e starting with '/': %s\",",
        "// Line_Reference 3009: \t\t\t\t\t\turl);",
        "// Line_Reference 3010: \t\toidc_error(r, \"%s: %s\", *err_str, *err_desc);",
        "// Line_Reference 3011: \t\treturn FALSE;",
        "// Line_Reference 3012: \t} else if ((uri.hostname == NULL) && (strstr(url, \"//\") == url)) {",
        "// Line_Reference 3013: \t\t*err_str = apr_pstrdup(r->pool, \"Malformed URL\");",
        "// Line_Reference 3014: \t\t*err_desc = apr_psprintf(r->pool,",
        "// Line_Reference 3015: \t\t\t\t\"No hostname was parsed and starting with '//': %s\", url);",
        "// Line_Reference 3016: \t\toidc_error(r, \"%s: %s\", *err_str, *err_desc);",
        "// Line_Reference 3017: \t\treturn FALSE;",
        "// Line_Reference 3018: \t} else if ((uri.hostname == NULL) && (strstr(url, \"/\\\\\") == url)) {",
        "// Line_Reference 3019: \t\t*err_str = apr_pstrdup(r->pool, \"Malformed URL\");",
        "// Line_Reference 3020: \t\t*err_desc = apr_psprintf(r->pool,",
        "// Line_Reference 3021: \t\t\t\t\"No hostname was parsed and starting with '/\\\\': %s\", url);",
        "// Line_Reference 3022: \t\toidc_error(r, \"%s: %s\", *err_str, *err_desc);",
        "// Line_Reference 3023: \t\treturn FALSE;",
        "// Line_Reference 3024: \t}",
        "// Line_Reference 3025: ",
        "// Line_Reference 3026: \t/* validate the URL to prevent HTTP header splitting */",
        "// Line_Reference 3027: \tif (((strstr(url, \"\\n\") != NULL) || strstr(url, \"\\r\") != NULL)) {",
        "// Line_Reference 3028: \t\t*err_str = apr_pstrdup(r->pool, \"Invalid URL\");",
        "// Line_Reference 3029: \t\t*err_desc =",
        "// Line_Reference 3030: \t\t\t\tapr_psprintf(r->pool,",
        "// Line_Reference 3031: \t\t\t\t\t\t\"URL value \\\"%s\\\" contains illegal \\\"\\n\\\" or \\\"\\r\\\" character(s)\",",
        "// Line_Reference 3032: \t\t\t\t\t\turl);",
        "// Line_Reference 3033: \t\toidc_error(r, \"%s: %s\", *err_str, *err_desc);",
        "// Line_Reference 3034: \t\treturn FALSE;",
        "// Line_Reference 3035: \t}",
        "// Line_Reference 3036: ",
        "// Line_Reference 3037: \treturn TRUE;",
        "// Line_Reference 3038: }"
    ]
}
