{
    "cve_id": "CVE-2022-24871",
    "cve_description": "Shopware is an open commerce platform based on Symfony Framework and Vue. In affected versions an attacker can abuse the Admin SDK functionality on the server to read or update internal resources. Users are advised to update to the current version 6.4.10.1. For older versions of 6.1, 6.2, and 6.3, corresponding security measures are also available via a plugin. There are no known workarounds for this issue.",
    "cve_publish_date": "2022-04-20",
    "cwe_id": "CWE-918",
    "cwe_name": "Server-Side Request Forgery (SSRF)",
    "cwe_description": "The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.",
    "commit_message": "NEXT-21034 - Dont restore permissions",
    "type_of_change": "Modification",
    "filename_of_changes": "CartRestorerTest.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "16",
    "number_of_lines_deleted_vulnerable_to_cve": "26",
    "vulnerable_lines": [
        "// Line_Reference 15: use Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\PrePayment;",
        "// Line_Reference 19: use Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityRepositoryInterface;",
        "// Line_Reference 21: use Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Filter\\EqualsFilter;",
        "// Line_Reference 328:     private function getStateId(string $state, string $machine)",
        "// Line_Reference 330:         return $this->getContainer()->get(Connection::class)",
        "// Line_Reference 331:             ->fetchColumn('",
        "// Line_Reference 332:                 SELECT LOWER(HEX(state_machine_state.id))",
        "// Line_Reference 333:                 FROM state_machine_state",
        "// Line_Reference 334:                     INNER JOIN  state_machine",
        "// Line_Reference 335:                     ON state_machine.id = state_machine_state.state_machine_id",
        "// Line_Reference 336:                     AND state_machine.technical_name = :machine",
        "// Line_Reference 337:                 WHERE state_machine_state.technical_name = :state",
        "// Line_Reference 338:             ', [",
        "// Line_Reference 339:                 'state' => $state,",
        "// Line_Reference 340:                 'machine' => $machine,",
        "// Line_Reference 341:             ]);",
        "// Line_Reference 342:     }",
        "// Line_Reference 344:     private function getPrePaymentMethodId(): string",
        "// Line_Reference 345:     {",
        "// Line_Reference 346:         /** @var EntityRepositoryInterface $repository */",
        "// Line_Reference 347:         $repository = $this->getContainer()->get('payment_method.repository');",
        "// Line_Reference 349:         $criteria = (new Criteria())",
        "// Line_Reference 350:             ->setLimit(1)",
        "// Line_Reference 351:             ->addFilter(new EqualsFilter('active', true))",
        "// Line_Reference 352:             ->addFilter(new EqualsFilter('handlerIdentifier', PrePayment::class));",
        "// Line_Reference 354:         return $repository->searchIds($criteria, Context::createDefaultContext())->getIds()[0];"
    ]
}
