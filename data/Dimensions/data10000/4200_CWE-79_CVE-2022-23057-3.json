{
    "cve_id": "CVE-2022-23057",
    "cve_description": "In ERPNext, versions v12.0.9--v13.0.3 are vulnerable to Stored Cross-Site-Scripting (XSS), due to user input not being validated properly. A low privileged attacker could inject arbitrary code into input fields when editing his profile.",
    "cve_publish_date": "2022-06-22",
    "cwe_id": "CWE-79",
    "cwe_name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
    "cwe_description": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
    "commit_message": "feat: frappe.whitelist for class methods",
    "type_of_change": "Modification",
    "filename_of_changes": "handler.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "73",
    "number_of_lines_deleted_vulnerable_to_cve": "38",
    "vulnerable_lines": [
        "// Line_Reference 6: from frappe import _",
        "// Line_Reference 10: from frappe.utils.response import build_response",
        "// Line_Reference 11: from frappe.api import validate_auth",
        "// Line_Reference 14: from werkzeug.wrappers import Response",
        "// Line_Reference 15: from six import string_types",
        "// Line_Reference 67: \tis_whitelisted(method)",
        "// Line_Reference 68: \tis_valid_http_method(method)",
        "// Line_Reference 78: def is_whitelisted(method):",
        "// Line_Reference 79: \t# check if whitelisted",
        "// Line_Reference 80: \tif frappe.session['user'] == 'Guest':",
        "// Line_Reference 81: \t\tif (method not in frappe.guest_methods):",
        "// Line_Reference 82: \t\t\tfrappe.throw(_(\"Not permitted\"), frappe.PermissionError)",
        "// Line_Reference 83: ",
        "// Line_Reference 84: \t\tif method not in frappe.xss_safe_methods:",
        "// Line_Reference 85: \t\t\t# strictly sanitize form_dict",
        "// Line_Reference 86: \t\t\t# escapes html characters like <> except for predefined tags like a, b, ul etc.",
        "// Line_Reference 87: \t\t\tfor key, value in frappe.form_dict.items():",
        "// Line_Reference 88: \t\t\t\tif isinstance(value, string_types):",
        "// Line_Reference 89: \t\t\t\t\tfrappe.form_dict[key] = frappe.utils.sanitize_html(value)",
        "// Line_Reference 90: ",
        "// Line_Reference 91: \telse:",
        "// Line_Reference 92: \t\tif not method in frappe.whitelisted:",
        "// Line_Reference 93: \t\t\tfrappe.throw(_(\"Not permitted\"), frappe.PermissionError)",
        "// Line_Reference 94: ",
        "// Line_Reference 99: @frappe.whitelist()",
        "// Line_Reference 100: def runserverobj(method, docs=None, dt=None, dn=None, arg=None, args=None):",
        "// Line_Reference 101: \tfrappe.desk.form.run_method.runserverobj(method, docs=docs, dt=dt, dn=dn, arg=arg, args=args)",
        "// Line_Reference 102: ",
        "// Line_Reference 115: @frappe.whitelist(allow_guest=True)",
        "// Line_Reference 116: def run_custom_method(doctype, name, custom_method):",
        "// Line_Reference 117: \t\"\"\"cmd=run_custom_method&doctype={doctype}&name={name}&custom_method={custom_method}\"\"\"",
        "// Line_Reference 118: \tdoc = frappe.get_doc(doctype, name)",
        "// Line_Reference 119: \tif getattr(doc, custom_method, frappe._dict()).is_whitelisted:",
        "// Line_Reference 120: \t\tfrappe.call(getattr(doc, custom_method), **frappe.local.form_dict)",
        "// Line_Reference 121: \telse:",
        "// Line_Reference 122: \t\tfrappe.throw(_(\"Not permitted\"), frappe.PermissionError)",
        "// Line_Reference 123: ",
        "// Line_Reference 225: @frappe.whitelist(allow_guest = True)"
    ]
}
