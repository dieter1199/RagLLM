{
    "cve_id": "CVE-2021-41249",
    "cve_description": "GraphQL Playground is a GraphQL IDE for development of graphQL focused applications. All versions of graphql-playground-react older than graphql-playground-react@1.7.28 are vulnerable to compromised HTTP schema introspection responses or schema prop values with malicious GraphQL type names, exposing a dynamic XSS attack surface that can allow code injection on operation autocomplete. In order for the attack to take place, the user must load a malicious schema in graphql-playground. There are several ways this can occur, including by specifying the URL to a malicious schema in the endpoint query parameter. If a user clicks on a link to a GraphQL Playground installation that specifies a malicious server, arbitrary JavaScript can run in the user's browser, which can be used to exfiltrate user credentials or other harmful goals. If you are using graphql-playground-react directly in your client app, upgrade to version 1.7.28 or later.",
    "cve_publish_date": "2021-11-04",
    "cwe_id": "CWE-79",
    "cwe_name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
    "cwe_description": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
    "commit_message": "Merge pull request from GHSA-59r9-6jp6-jcm7\n\nThis change fixes an XSS vulnerability that has been present since the first\ncommit of GraphQL Playground when used with an untrusted GraphQL server. It applies three\nstrategies to fix via defense-in-depth: HTML escaping a string in a context\nthat uses innerHTML; validating incoming schemas with graphql-js validateSchema;\nand using a single up-to-date Markdown library.\n\nSee docs/security/2021-introspection-schema-xss.md for more details.",
    "type_of_change": "ModificationType.ADD",
    "filename_of_changes": "SchemaFetcher.ts",
    "code_language": "TypeScript",
    "number_of_lines_added_for_mitigation": "55",
    "number_of_lines_deleted_vulnerable_to_cve": "51",
    "vulnerable_lines": [
        "// Line_Reference 7: import { ApolloLink, execute } from 'apollo-link'",
        "// Line_Reference 95:   private getSchema(data: any) {",
        "// Line_Reference 102:     const schema = buildClientSchema(data as any)",
        "// Line_Reference 108:   private fetchSchema(",
        "// Line_Reference 112:     const { endpoint } = session",
        "// Line_Reference 113:     const headersTracing = {",
        "// Line_Reference 114:       ...parseHeaders(session.headers),",
        "// Line_Reference 115:       'X-Apollo-Tracing': '1',",
        "// Line_Reference 116:     }",
        "// Line_Reference 117:     const headersNoTracing = {",
        "// Line_Reference 118:       ...parseHeaders(session.headers),",
        "// Line_Reference 119:     }",
        "// Line_Reference 120:     const headers = session.useTracingHeader ? headersTracing : headersNoTracing",
        "// Line_Reference 122:     const options = set(session, 'headers', headers) as any",
        "// Line_Reference 124:     const { link } = this.linkGetter(options)",
        "// Line_Reference 126:     const operation = makeOperation({ query: getIntrospectionQuery() })",
        "// Line_Reference 128:     return new Promise((resolve, reject) => {",
        "// Line_Reference 129:       execute(link, operation).subscribe({",
        "// Line_Reference 130:         next: schemaData => {",
        "// Line_Reference 131:           if (",
        "// Line_Reference 132:             schemaData &&",
        "// Line_Reference 133:             ((schemaData.errors && schemaData.errors.length > 0) ||",
        "// Line_Reference 134:               !schemaData.data)",
        "// Line_Reference 135:           ) {",
        "// Line_Reference 136:             throw new Error(JSON.stringify(schemaData, null, 2))",
        "// Line_Reference 137:           }",
        "// Line_Reference 139:           if (!schemaData) {",
        "// Line_Reference 140:             throw new NoSchemaError(endpoint)",
        "// Line_Reference 141:           }",
        "// Line_Reference 143:           const schema = this.getSchema(schemaData.data as any)",
        "// Line_Reference 144:           const tracingSupported =",
        "// Line_Reference 145:             (schemaData.extensions && Boolean(schemaData.extensions.tracing)) ||",
        "// Line_Reference 146:             false",
        "// Line_Reference 147:           const result: TracingSchemaTuple = {",
        "// Line_Reference 148:             schema,",
        "// Line_Reference 149:             tracingSupported,",
        "// Line_Reference 150:           }",
        "// Line_Reference 151:           this.sessionCache.set(this.hash(session), result)",
        "// Line_Reference 152:           resolve(result)",
        "// Line_Reference 153:           this.fetching = this.fetching.remove(hash)",
        "// Line_Reference 154:           const subscription = this.subscriptions.get(hash)",
        "// Line_Reference 155:           if (subscription) {",
        "// Line_Reference 156:             subscription(result.schema)",
        "// Line_Reference 157:           }",
        "// Line_Reference 158:         },",
        "// Line_Reference 159:         error: err => {",
        "// Line_Reference 160:           reject(err)",
        "// Line_Reference 161:           this.fetching = this.fetching.remove(this.hash(session))",
        "// Line_Reference 162:         },",
        "// Line_Reference 163:       })",
        "// Line_Reference 164:     })"
    ]
}
