{
    "cve_id": "CVE-2018-3769",
    "cve_description": "ruby-grape ruby gem suffers from a cross-site scripting (XSS) vulnerability via \"format\" parameter.",
    "cve_publish_date": "2018-07-05",
    "cwe_id": "CWE-79",
    "cwe_name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
    "cwe_description": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
    "commit_message": "When returning an HTML error, make sure it's safe (#1763)\n\n* When calling into an API specifying a crafted format that is HTML,\r\nthe returned error renders the HTML back to the user, causing a potential XSS\r\nissue.  For example:\r\n\r\nhttp://example.com/api/endpoint?format=%3Cscript%3Ealert(document.cookie)%3C/script%3E\r\n\r\nRenders as html:\r\n\r\nThe requested format '<script>alert(document.cookie)</script>' is not supported.\r\n\r\nWhen an error generates html back to the user, make sure it's properly escaped.\r\n\r\nFixes issue #1762\r\n\r\n* Add changelog entry\r\n\r\n* Use a method that also works in rails3\r\n\r\n* Add spec formatting for older rails/activesupport version",
    "type_of_change": "Modification",
    "filename_of_changes": "exception_spec.rb",
    "code_language": "Ruby",
    "number_of_lines_added_for_mitigation": "4",
    "number_of_lines_deleted_vulnerable_to_cve": "4",
    "vulnerable_lines": [
        "// Line_Reference 195:       expect(last_response.body).to eq('{\"error\":\"rain!\"}')",
        "// Line_Reference 210:       expect(['{\"error\":\"rain!\",\"detail\":\"missing widget\"}',",
        "// Line_Reference 211:               '{\"detail\":\"missing widget\",\"error\":\"rain!\"}']).to include(last_response.body)",
        "// Line_Reference 261:       expect(last_response.body).to eq('{:custom_formatter=>\"rain!\"}')"
    ]
}
