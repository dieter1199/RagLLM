#include "Ssl/SslInterface.h"
: RestVocbaseBaseHandler(server, request, response),
_validFor(60 * 60 * 24 * 30) {}
std::string RestAuthHandler::generateJwt(std::string const& username,
std::string const& password) {
AuthenticationFeature* af = AuthenticationFeature::instance();
TRI_ASSERT(af != nullptr);
return fuerte::jwt::generateUserToken(af->tokenCache().jwtSecret(), username, _validFor);
}
_username = usernameSlice.copyString();
} else if (um->checkPassword(_username, password)) {
std::string jwt = generateJwt(_username, password);
resultBuilder.add("jwt", VPackValue(jwt));
_isValid = true;
void RestAuthHandler::shutdownExecute(bool isFinalized) noexcept {
try {
if (_isValid) {
events::LoggedIn(*_request, _username);
} else {
events::CredentialsBad(*_request, _username);
}
} catch (...) {
}
RestVocbaseBaseHandler::shutdownExecute(isFinalized);
}
