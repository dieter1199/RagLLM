{
    "cve_id": "CVE-2019-10638",
    "cve_description": "In the Linux kernel before 5.1.7, a device can be tracked by an attacker using the IP ID values the kernel produces for connection-less protocols (e.g., UDP and ICMP). When such traffic is sent to multiple destination IP addresses, it is possible to obtain hash collisions (of indices to the counter array) and thereby obtain the hashing key (via enumeration). An attack may be conducted by hosting a crafted web page that uses WebRTC or gQUIC to force UDP traffic to attacker-controlled IP addresses.",
    "cve_publish_date": "2019-07-05",
    "cwe_id": "CWE-326",
    "cwe_name": "Inadequate Encryption Strength",
    "cwe_description": "The product stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required.",
    "commit_message": "netns: provide pure entropy for net_hash_mix()\n\nnet_hash_mix() currently uses kernel address of a struct net,\nand is used in many places that could be used to reveal this\naddress to a patient attacker, thus defeating KASLR, for\nthe typical case (initial net namespace, &init_net is\nnot dynamically allocated)\n\nI believe the original implementation tried to avoid spending\ntoo many cycles in this function, but security comes first.\n\nAlso provide entropy regardless of CONFIG_NET_NS.\n\nFixes: 0b4419162aa6 (\"netns: introduce the net_hash_mix \"salt\" for hashes\")\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nReported-by: Amit Klein <aksecurity@gmail.com>\nReported-by: Benny Pinkas <benny@pinkas.net>\nCc: Pavel Emelyanov <xemul@openvz.org>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "type_of_change": "Modification",
    "filename_of_changes": "hash.h",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "2",
    "number_of_lines_deleted_vulnerable_to_cve": "8",
    "vulnerable_lines": [
        "// Line_Reference 5: #include <asm/cache.h>",
        "// Line_Reference 6: ",
        "// Line_Reference 7: struct net;",
        "// Line_Reference 11: #ifdef CONFIG_NET_NS",
        "// Line_Reference 12: \treturn (u32)(((unsigned long)net) >> ilog2(sizeof(*net)));",
        "// Line_Reference 13: #else",
        "// Line_Reference 14: \treturn 0;",
        "// Line_Reference 15: #endif"
    ]
}
