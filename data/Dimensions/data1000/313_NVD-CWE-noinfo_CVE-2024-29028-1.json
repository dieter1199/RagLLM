{
    "cve_id": "CVE-2024-29028",
    "cve_description": "memos is a privacy-first, lightweight note-taking service. In memos 0.13.2, an SSRF vulnerability exists at the /o/get/httpmeta that allows unauthenticated users to enumerate the internal network and receive limited html values in json form. This vulnerability is fixed in 0.16.1.",
    "cve_publish_date": "2024-04-19",
    "cwe_id": "NVD-CWE-noinfo",
    "commit_message": "chore: remove unused httpmeta getter api",
    "type_of_change": "Deletion",
    "filename_of_changes": "http_getter.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "0",
    "number_of_lines_deleted_vulnerable_to_cve": "29",
    "vulnerable_lines": [
        "// Line_Reference 14:     // GET /get/httpmeta?url={url} - Get website meta.",
        "// Line_Reference 15:     g.GET(\"/get/httpmeta\", GetWebsiteMetadata)",
        "// Line_Reference 16: ",
        "// Line_Reference 21: // GetWebsiteMetadata godoc",
        "// Line_Reference 22: //",
        "// Line_Reference 23: //    @Summary    Get website metadata",
        "// Line_Reference 24: //    @Tags        get",
        "// Line_Reference 25: //    @Produce    json",
        "// Line_Reference 26: //    @Param        url    query        string            true    \"Website URL\"",
        "// Line_Reference 27: //    @Success    200    {object}    getter.HTMLMeta    \"Extracted metadata\"",
        "// Line_Reference 28: //    @Failure    400    {object}    nil                \"Missing website url | Wrong url\"",
        "// Line_Reference 29: //    @Failure    406    {object}    nil                \"Failed to get website meta with url: %s\"",
        "// Line_Reference 30: //    @Router        /o/get/GetWebsiteMetadata [GET]",
        "// Line_Reference 31: func GetWebsiteMetadata(c echo.Context) error {",
        "// Line_Reference 32:     urlStr := c.QueryParam(\"url\")",
        "// Line_Reference 33:     if urlStr == \"\" {",
        "// Line_Reference 34:         return echo.NewHTTPError(http.StatusBadRequest, \"Missing website url\")",
        "// Line_Reference 35:     }",
        "// Line_Reference 36:     if _, err := url.Parse(urlStr); err != nil {",
        "// Line_Reference 37:         return echo.NewHTTPError(http.StatusBadRequest, \"Wrong url\").SetInternal(err)",
        "// Line_Reference 38:     }",
        "// Line_Reference 39: ",
        "// Line_Reference 40:     htmlMeta, err := getter.GetHTMLMeta(urlStr)",
        "// Line_Reference 41:     if err != nil {",
        "// Line_Reference 42:         return echo.NewHTTPError(http.StatusNotAcceptable, fmt.Sprintf(\"Failed to get website meta with url: %s\", urlStr)).SetInternal(err)",
        "// Line_Reference 43:     }",
        "// Line_Reference 44:     return c.JSON(http.StatusOK, htmlMeta)",
        "// Line_Reference 45: }",
        "// Line_Reference 46: "
    ]
}
