{
    "cve_id": "CVE-2021-43791",
    "cve_description": "Zulip is an open source group chat application that combines real-time chat with threaded conversations. In affected versions expiration dates on the confirmation objects associated with email invitations were not enforced properly in the new account registration flow. A confirmation link takes a user to the check_prereg_key_and_redirect endpoint, before getting redirected to POST to /accounts/register/. The problem was that validation was happening in the check_prereg_key_and_redirect part and not in /accounts/register/ - meaning that one could submit an expired confirmation key and be able to register. The issue is fixed in Zulip 4.8. There are no known workarounds and users are advised to upgrade as soon as possible.",
    "cve_publish_date": "2021-12-02",
    "cwe_id": "CWE-613",
    "cwe_name": "Insufficient Session Expiration",
    "cwe_description": "According to WASC, \"Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization.\"",
    "commit_message": "CVE-2021-43791: Validate confirmation keys in /accounts/register/ codepath.\n\nA confirmation link takes a user to the check_prereg_key_and_redirect\nendpoint, before getting redirected to POST to /accounts/register/. The\nproblem was that validation was happening in the check_prereg_key_and_redirect\npart and not in /accounts/register/ - meaning that one could submit an\nexpired confirmation key and be able to register.\n\nWe fix this by moving validation into /accouts/register/.",
    "type_of_change": "Modification",
    "filename_of_changes": "registration.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "34",
    "number_of_lines_deleted_vulnerable_to_cve": "18",
    "vulnerable_lines": [
        "// Line_Reference 3: from typing import Any, Dict, List, Optional",
        "// Line_Reference 97: def check_prereg_key_and_redirect(",
        "// Line_Reference 100:     confirmation = Confirmation.objects.filter(confirmation_key=confirmation_key).first()",
        "// Line_Reference 120:     # confirm_preregistrationuser.html just extracts the confirmation_key",
        "// Line_Reference 121:     # (and GET parameters) and redirects to /accounts/register, so that the",
        "// Line_Reference 122:     # user can enter their information on a cleaner URL.",
        "// Line_Reference 123:     return render(",
        "// Line_Reference 124:         request,",
        "// Line_Reference 125:         \"confirmation/confirm_preregistrationuser.html\",",
        "// Line_Reference 126:         context={\"key\": confirmation_key, \"full_name\": full_name},",
        "// Line_Reference 127:     )",
        "// Line_Reference 142:     try:",
        "// Line_Reference 143:         confirmation = Confirmation.objects.get(confirmation_key=key)",
        "// Line_Reference 144:     except Confirmation.DoesNotExist:",
        "// Line_Reference 145:         return render(request, \"zerver/confirmation_link_expired_error.html\", status=404)",
        "// Line_Reference 147:     prereg_user = confirmation.content_object",
        "// Line_Reference 149:     if prereg_user.status == confirmation_settings.STATUS_REVOKED:",
        "// Line_Reference 150:         return render(request, \"zerver/confirmation_link_expired_error.html\", status=404)"
    ]
}
