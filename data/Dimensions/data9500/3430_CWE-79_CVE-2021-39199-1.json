{
    "cve_id": "CVE-2021-39199",
    "cve_description": "remark-html is an open source nodejs library which compiles Markdown to HTML. In affected versions the documentation of remark-html has mentioned that it was safe by default. In practice the default was never safe and had to be opted into. That is, user input was not sanitized. This means arbitrary HTML can be passed through leading to potential XSS attacks. The problem has been patched in 13.0.2 and 14.0.1: `remark-html` is now safe by default, and the implementation matches the documentation. On older affected versions, pass `sanitize: true` if you cannot update.",
    "cve_publish_date": "2021-09-07",
    "cwe_id": "CWE-79",
    "cwe_name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
    "cwe_description": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
    "commit_message": "Fix to sanitize by default\n\nThe docs have always said `remark-html` is safe by default.\nIt wasnâ€™t and this patches that.\n\nIf you do want to be unsafe, use `remark-html` with `sanitize: false`:\n\n```diff\n  -.use(remarkHtml)\n  +.use(remarkHtml, {sanitize: false})\n```",
    "type_of_change": "Modification",
    "filename_of_changes": "index.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "19",
    "number_of_lines_deleted_vulnerable_to_cve": "9",
    "vulnerable_lines": [
        "// Line_Reference 23: export default function remarkHtml(options = {}) {",
        "// Line_Reference 24:   const handlers = options.handlers || {}",
        "// Line_Reference 25:   const schema =",
        "// Line_Reference 26:     options.sanitize && typeof options.sanitize === 'object'",
        "// Line_Reference 27:       ? options.sanitize",
        "// Line_Reference 28:       : undefined",
        "// Line_Reference 36:     const hast = toHast(node, {allowDangerousHtml: !options.sanitize, handlers})",
        "// Line_Reference 38:     const cleanHast = options.sanitize ? sanitize(hast, schema) : hast",
        "// Line_Reference 42:       Object.assign({}, options, {allowDangerousHtml: !options.sanitize})"
    ]
}
