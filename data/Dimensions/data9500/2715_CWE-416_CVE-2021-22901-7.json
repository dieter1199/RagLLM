{
    "cve_id": "CVE-2021-22901",
    "cve_description": "curl 7.75.0 through 7.76.1 suffers from a use-after-free vulnerability resulting in already freed memory being used when a TLS 1.3 session ticket arrives over a connection. A malicious server can use this in rare unfortunate circumstances to potentially reach remote code execution in the client. When libcurl at run-time sets up support for TLS 1.3 session tickets on a connection using OpenSSL, it stores pointers to the transfer in-memory object for later retrieval when a session ticket arrives. If the connection is used by multiple transfers (like with a reused HTTP/1.1 connection or multiplexed HTTP/2 connection) that first transfer object might be freed before the new session is established on that connection and then the function will access a memory buffer that might be freed. When using that memory, libcurl might even call a function pointer in the object, making it possible for a remote code execution if the server could somehow manage to get crafted memory content into the correct place in memory.",
    "cve_publish_date": "2021-06-11",
    "cwe_id": "CWE-416",
    "cwe_name": "Use After Free",
    "cwe_description": "The product reuses or references memory after it has been freed. At some point afterward, the memory may be allocated again and saved in another pointer, while the original pointer references a location somewhere within the new allocation. Any operations using the original pointer are no longer valid because the memory \"belongs\" to the code that operates on the new pointer.",
    "commit_message": "openssl: associate/detach the transfer from connection\n\nCVE-2021-22901\n\nBug: https://curl.se/docs/CVE-2021-22901.html",
    "type_of_change": "Modification",
    "filename_of_changes": "openssl.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "107",
    "number_of_lines_deleted_vulnerable_to_cve": "39",
    "vulnerable_lines": [
        "// Line_Reference 3228:   /* Check if there's a cached ID we can/should use here! */",
        "// Line_Reference 3229:   if(SSL_SET_OPTION(primary.sessionid)) {",
        "// Line_Reference 3230:     void *ssl_sessionid = NULL;",
        "// Line_Reference 3231:     int data_idx = ossl_get_ssl_data_index();",
        "// Line_Reference 3232:     int connectdata_idx = ossl_get_ssl_conn_index();",
        "// Line_Reference 3233:     int sockindex_idx = ossl_get_ssl_sockindex_index();",
        "// Line_Reference 3234:     int proxy_idx = ossl_get_proxy_index();",
        "// Line_Reference 3235: ",
        "// Line_Reference 3236:     if(data_idx >= 0 && connectdata_idx >= 0 && sockindex_idx >= 0 &&",
        "// Line_Reference 3237:        proxy_idx >= 0) {",
        "// Line_Reference 3238:       /* Store the data needed for the \"new session\" callback.",
        "// Line_Reference 3239:        * The sockindex is stored as a pointer to an array element. */",
        "// Line_Reference 3240:       SSL_set_ex_data(backend->handle, data_idx, data);",
        "// Line_Reference 3241:       SSL_set_ex_data(backend->handle, connectdata_idx, conn);",
        "// Line_Reference 3242:       SSL_set_ex_data(backend->handle, sockindex_idx, conn->sock + sockindex);",
        "// Line_Reference 3243: #ifndef CURL_DISABLE_PROXY",
        "// Line_Reference 3244:       SSL_set_ex_data(backend->handle, proxy_idx, SSL_IS_PROXY() ? (void *) 1:",
        "// Line_Reference 3245:                       NULL);",
        "// Line_Reference 3246: #else",
        "// Line_Reference 3247:       SSL_set_ex_data(backend->handle, proxy_idx, NULL);",
        "// Line_Reference 3248: #endif",
        "// Line_Reference 3249: ",
        "// Line_Reference 3250:     }",
        "// Line_Reference 3252:     Curl_ssl_sessionid_lock(data);",
        "// Line_Reference 3253:     if(!Curl_ssl_getsessionid(data, conn, SSL_IS_PROXY() ? TRUE : FALSE,",
        "// Line_Reference 3254:                               &ssl_sessionid, NULL, sockindex)) {",
        "// Line_Reference 3255:       /* we got a session id, use it! */",
        "// Line_Reference 3256:       if(!SSL_set_session(backend->handle, ssl_sessionid)) {",
        "// Line_Reference 3257:         Curl_ssl_sessionid_unlock(data);",
        "// Line_Reference 3258:         failf(data, \"SSL: SSL_set_session failed: %s\",",
        "// Line_Reference 3259:               ossl_strerror(ERR_get_error(), error_buffer,",
        "// Line_Reference 3260:                             sizeof(error_buffer)));",
        "// Line_Reference 3261:         return CURLE_SSL_CONNECT_ERROR;",
        "// Line_Reference 3262:       }",
        "// Line_Reference 3263:       /* Informational message */",
        "// Line_Reference 3264:       infof(data, \"SSL re-using session ID\\n\");",
        "// Line_Reference 3266:     Curl_ssl_sessionid_unlock(data);",
        "// Line_Reference 4536:   ossl_sha256sum            /* sha256sum */",
        "// Line_Reference 4538:   NULL                      /* sha256sum */"
    ]
}
