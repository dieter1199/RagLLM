{
    "cve_id": "CVE-2021-29471",
    "cve_description": "Synapse is a Matrix reference homeserver written in python (pypi package matrix-synapse). Matrix is an ecosystem for open federated Instant Messaging and VoIP. In Synapse before version 1.33.2 \"Push rules\" can specify conditions under which they will match, including `event_match`, which matches event content against a pattern including wildcards. Certain patterns can cause very poor performance in the matching engine, leading to a denial-of-service when processing moderate length events. The issue is patched in version 1.33.2. A potential workaround might be to prevent users from making custom push rules, by blocking such requests at a reverse-proxy.",
    "cve_publish_date": "2021-05-11",
    "cwe_id": "CWE-331",
    "cwe_name": "Insufficient Entropy",
    "cwe_description": "The product uses an algorithm or scheme that produces insufficient entropy, leaving patterns or clusters of values that are more likely to occur than others.",
    "commit_message": "Merge pull request from GHSA-x345-32rc-8h85\n\n* tests for push rule pattern matching\n\n* tests for acl pattern matching\n\n* factor out common `re.escape`\n\n* Factor out common re.compile\n\n* Factor out common anchoring code\n\n* add word_boundary support to `glob_to_regex`\n\n* Use `glob_to_regex` in push rule evaluator\n\nNB that this drops support for character classes. I don't think anyone ever\nused them.\n\n* Improve efficiency of globs with multiple wildcards\n\nThe idea here is that we compress multiple `*` globs into a single `.*`. We\nalso need to consider `?`, since `*?*` is as hard to implement efficiently as\n`**`.\n\n* add assertion on regex pattern\n\n* Fix mypy\n\n* Simplify glob_to_regex\n\n* Inline the glob_to_regex helper function\n\nSigned-off-by: Dan Callahan <danc@element.io>\n\n* Moar comments\n\nSigned-off-by: Dan Callahan <danc@element.io>\n\nCo-authored-by: Dan Callahan <danc@element.io>",
    "type_of_change": "Modification",
    "filename_of_changes": "__init__.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "47",
    "number_of_lines_deleted_vulnerable_to_cve": "14",
    "vulnerable_lines": [
        "// Line_Reference 161: def glob_to_regex(glob):",
        "// Line_Reference 164:     The regex is anchored at the beginning and end of the string.",
        "// Line_Reference 165: ",
        "// Line_Reference 167:         glob (str)",
        "// Line_Reference 170:         re.RegexObject",
        "// Line_Reference 172:     res = \"\"",
        "// Line_Reference 173:     for c in glob:",
        "// Line_Reference 174:         if c == \"*\":",
        "// Line_Reference 175:             res = res + \".*\"",
        "// Line_Reference 176:         elif c == \"?\":",
        "// Line_Reference 177:             res = res + \".\"",
        "// Line_Reference 179:             res = res + re.escape(c)",
        "// Line_Reference 181:     # \\A anchors at start of string, \\Z at end of string",
        "// Line_Reference 182:     return re.compile(r\"\\A\" + res + r\"\\Z\", re.IGNORECASE)"
    ]
}
