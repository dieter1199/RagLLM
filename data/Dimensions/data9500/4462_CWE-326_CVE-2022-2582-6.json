{
    "cve_id": "CVE-2022-2582",
    "cve_description": "The AWS S3 Crypto SDK sends an unencrypted hash of the plaintext alongside the ciphertext as a metadata field. This hash can be used to brute force the plaintext, if the hash is readable to the attacker. AWS now blocks this metadata field, but older SDK versions still send it.",
    "cve_publish_date": "2022-12-27",
    "cwe_id": "CWE-326",
    "cwe_name": "Inadequate Encryption Strength",
    "cwe_description": "The product stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required.",
    "commit_message": "service/s3/s3crypto: V2 Client Release (#3403)",
    "type_of_change": "Modification",
    "filename_of_changes": "encryption_client.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "26",
    "number_of_lines_deleted_vulnerable_to_cve": "75",
    "vulnerable_lines": [
        "// Line_Reference 4: \t\"encoding/hex\"",
        "// Line_Reference 5: \t\"io\"",
        "// Line_Reference 6: ",
        "// Line_Reference 10: \t\"github.com/aws/aws-sdk-go/internal/sdkio\"",
        "// Line_Reference 42: //\tsess := session.New()",
        "// Line_Reference 44: //\tsvc := s3crypto.New(sess, s3crypto.AESGCMContentCipherBuilder(handler))",
        "// Line_Reference 78: \treq, out := c.S3Client.PutObjectRequest(input)",
        "// Line_Reference 79: ",
        "// Line_Reference 80: \t// Get Size of file",
        "// Line_Reference 81: \tn, err := aws.SeekerLen(input.Body)",
        "// Line_Reference 82: \tif err != nil {",
        "// Line_Reference 83: \t\treq.Error = err",
        "// Line_Reference 84: \t\treturn req, out",
        "// Line_Reference 85: \t}",
        "// Line_Reference 86: ",
        "// Line_Reference 87: \tdst, err := getWriterStore(req, c.TempFolderPath, n >= c.MinFileSize)",
        "// Line_Reference 88: \tif err != nil {",
        "// Line_Reference 89: \t\treq.Error = err",
        "// Line_Reference 90: \t\treturn req, out",
        "// Line_Reference 91: \t}",
        "// Line_Reference 92: ",
        "// Line_Reference 93: \treq.Handlers.Build.PushFront(func(r *request.Request) {",
        "// Line_Reference 94: \t\tif err != nil {",
        "// Line_Reference 95: \t\t\tr.Error = err",
        "// Line_Reference 96: \t\t\treturn",
        "// Line_Reference 97: \t\t}",
        "// Line_Reference 98: \t\tvar encryptor ContentCipher",
        "// Line_Reference 99: \t\tif v, ok := c.ContentCipherBuilder.(ContentCipherBuilderWithContext); ok {",
        "// Line_Reference 100: \t\t\tencryptor, err = v.ContentCipherWithContext(r.Context())",
        "// Line_Reference 101: \t\t} else {",
        "// Line_Reference 102: \t\t\tencryptor, err = c.ContentCipherBuilder.ContentCipher()",
        "// Line_Reference 103: \t\t}",
        "// Line_Reference 104: \t\tif err != nil {",
        "// Line_Reference 105: \t\t\tr.Error = err",
        "// Line_Reference 106: \t\t\treturn",
        "// Line_Reference 107: \t\t}",
        "// Line_Reference 108: ",
        "// Line_Reference 109: \t\tmd5 := newMD5Reader(input.Body)",
        "// Line_Reference 110: \t\tsha := newSHA256Writer(dst)",
        "// Line_Reference 111: \t\treader, err := encryptor.EncryptContents(md5)",
        "// Line_Reference 112: \t\tif err != nil {",
        "// Line_Reference 113: \t\t\tr.Error = err",
        "// Line_Reference 114: \t\t\treturn",
        "// Line_Reference 115: \t\t}",
        "// Line_Reference 116: ",
        "// Line_Reference 117: \t\t_, err = io.Copy(sha, reader)",
        "// Line_Reference 118: \t\tif err != nil {",
        "// Line_Reference 119: \t\t\tr.Error = err",
        "// Line_Reference 120: \t\t\treturn",
        "// Line_Reference 121: \t\t}",
        "// Line_Reference 122: ",
        "// Line_Reference 123: \t\tdata := encryptor.GetCipherData()",
        "// Line_Reference 124: \t\tenv, err := encodeMeta(md5, data)",
        "// Line_Reference 125: \t\tif err != nil {",
        "// Line_Reference 126: \t\t\tr.Error = err",
        "// Line_Reference 127: \t\t\treturn",
        "// Line_Reference 128: \t\t}",
        "// Line_Reference 129: ",
        "// Line_Reference 130: \t\tshaHex := hex.EncodeToString(sha.GetValue())",
        "// Line_Reference 131: \t\treq.HTTPRequest.Header.Set(\"X-Amz-Content-Sha256\", shaHex)",
        "// Line_Reference 132: ",
        "// Line_Reference 133: \t\tdst.Seek(0, sdkio.SeekStart)",
        "// Line_Reference 134: \t\tinput.Body = dst",
        "// Line_Reference 135: ",
        "// Line_Reference 136: \t\terr = c.SaveStrategy.Save(env, r)",
        "// Line_Reference 137: \t\tr.Error = err",
        "// Line_Reference 138: \t})",
        "// Line_Reference 139: ",
        "// Line_Reference 140: \treturn req, out",
        "// Line_Reference 145: \treq, out := c.PutObjectRequest(input)",
        "// Line_Reference 146: \treturn out, req.Send()",
        "// Line_Reference 157: \treq, out := c.PutObjectRequest(input)",
        "// Line_Reference 158: \treq.SetContext(ctx)",
        "// Line_Reference 159: \treq.ApplyOptions(opts...)",
        "// Line_Reference 160: \treturn out, req.Send()"
    ]
}
