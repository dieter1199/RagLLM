{
    "cve_id": "CVE-2019-13226",
    "cve_description": "deepin-clone before 1.1.3 uses a predictable path /tmp/.deepin-clone/mount/<block-dev-basename> in the Helper::temporaryMountDevice() function to temporarily mount a file system as root. An unprivileged user can prepare a symlink at this location to have the file system mounted in an arbitrary location. By winning a race condition, the attacker can also enter the mount point, thereby preventing a subsequent unmount of the file system.",
    "cve_publish_date": "2019-07-04",
    "cwe_id": "CWE-362",
    "cwe_name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
    "cwe_description": "The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.",
    "commit_message": "fix: Do not use the \"/tmp\" directory\n\nhttps://github.com/linuxdeepin/deepin-clone/issues/16\nhttps://bugzilla.opensuse.org/show_bug.cgi?id=1130388",
    "type_of_change": "Modification",
    "filename_of_changes": "main.cpp",
    "code_language": "C++",
    "number_of_lines_added_for_mitigation": "5",
    "number_of_lines_deleted_vulnerable_to_cve": "21",
    "vulnerable_lines": [
        "// Line_Reference 105:         RollingFileAppender *rollingFileAppender = new RollingFileAppender(\"/tmp/.deepin-clone.log\");",
        "// Line_Reference 110:         logger->registerAppender(consoleAppender);",
        "// Line_Reference 115:             const QDir user_home(getpwuid(pkexec_uid)->pw_dir);",
        "// Line_Reference 116: ",
        "// Line_Reference 117:             QFile pam_file(user_home.absoluteFilePath(\".pam_environment\"));",
        "// Line_Reference 119:             if (pam_file.open(QIODevice::ReadOnly)) {",
        "// Line_Reference 120:                 while (!pam_file.atEnd()) {",
        "// Line_Reference 121:                     const QByteArray &line = pam_file.readLine().simplified();",
        "// Line_Reference 122: ",
        "// Line_Reference 123:                     if (line.startsWith(\"QT_SCALE_FACTOR\")) {",
        "// Line_Reference 124:                         const QByteArrayList &list = line.split('=');",
        "// Line_Reference 125: ",
        "// Line_Reference 126:                         if (list.count() == 2) {",
        "// Line_Reference 127:                             qputenv(\"QT_SCALE_FACTOR\", list.last());",
        "// Line_Reference 128:                             break;",
        "// Line_Reference 129:                         }",
        "// Line_Reference 130:                     }",
        "// Line_Reference 131:                 }",
        "// Line_Reference 132: ",
        "// Line_Reference 133:                 pam_file.close();",
        "// Line_Reference 134:             }"
    ]
}
