static int32_t gcd(int a, int b)
{
if (a == 0 && b == 0) {
return 1;
}
if (a == 0) return b;
if (b == 0) return a;
int32_t h;
do {
h = a % b;
a = b;
b = h;
} while (b != 0);
return a;
}
int32_t g = gcd(num, den);
// these strange tests are for catching the case that we divide -2147483648 by -1,
// which would exceed the maximum positive value by one.
if (num == std::numeric_limits<int32_t>::min() && g == -1) {
num++;
}
if (den == std::numeric_limits<int32_t>::min() && g == -1) {
den++;
}
numerator = num / g;
denominator = den / g;
while (denominator > MAX_FRACTION_DENOMINATOR) {
numerator >>= 1;
denominator >>= 1;
