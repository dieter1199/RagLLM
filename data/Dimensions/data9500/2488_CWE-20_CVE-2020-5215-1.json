{
    "cve_id": "CVE-2020-5215",
    "cve_description": "In TensorFlow before 1.15.2 and 2.0.1, converting a string (from Python) to a tf.float16 value results in a segmentation fault in eager mode as the format checks for this use case are only in the graph mode. This issue can lead to denial of service in inference/training where a malicious attacker can send a data point which contains a string instead of a tf.float16 value. Similar effects can be obtained by manipulating saved models and checkpoints whereby replacing a scalar tf.float16 value with a scalar string will trigger this issue due to automatic conversions. This can be easily reproduced by tf.constant(\"hello\", tf.float16), if eager execution is enabled. This issue is patched in TensorFlow 1.15.1 and 2.0.1 with this vulnerability patched. TensorFlow 2.1.0 was released after we fixed the issue, thus it is not affected. Users are encouraged to switch to TensorFlow 1.15.1, 2.0.1 or 2.1.0.",
    "cve_publish_date": "2020-01-28",
    "cwe_id": "CWE-20",
    "cwe_name": "Improper Input Validation",
    "cwe_description": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.",
    "commit_message": "Fix segfault when attempting to convert string to float16.\n\nTo make sure this gets fixed, add test for converting string to any numeric type.\n\nPiperOrigin-RevId: 286650886\nChange-Id: I81f770ec2bbd33a863e8057ce198c679912fa8e0",
    "type_of_change": "Modification",
    "filename_of_changes": "py_seq_tensor.cc",
    "code_language": "C++",
    "number_of_lines_added_for_mitigation": "23",
    "number_of_lines_deleted_vulnerable_to_cve": "12",
    "vulnerable_lines": [
        "// Line_Reference 408:     if (TF_PREDICT_FALSE(sizeof(T) < sizeof(double) && std::isinf(*out) &&",
        "// Line_Reference 409:                          std::isfinite(as_double))) {",
        "// Line_Reference 416:     *out = PyInt_AS_LONG(v);",
        "// Line_Reference 421:     *out = PyLong_AsDouble(v);",
        "// Line_Reference 470:     // NOTE(nareshmodi): Is there a way to convert to C double without the",
        "// Line_Reference 471:     // intermediate Python double? This will help with ConvertOneFloat as well.",
        "// Line_Reference 472:     Safe_PyObjectPtr as_float = make_safe(PyNumber_Float(v));",
        "// Line_Reference 473:     double v_double = PyFloat_AS_DOUBLE(as_float.get());",
        "// Line_Reference 474:     *out = Eigen::half(v_double);",
        "// Line_Reference 475: ",
        "// Line_Reference 476:     return nullptr;",
        "// Line_Reference 616:       RETURN_STRING_AS_STATUS(NumpyHalfConverter::Convert(obj, &state, ret));"
    ]
}
