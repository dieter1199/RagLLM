{
    "cve_id": "CVE-2022-1053",
    "cve_description": "Keylime does not enforce that the agent registrar data is the same when the tenant uses it for validation of the EK and identity quote and the verifier for validating the integrity quote. This allows an attacker to use one AK, EK pair from a real TPM to pass EK validation and give the verifier an AK of a software TPM. A successful attack breaks the entire chain of trust because a not validated AK is used by the verifier. This issue is worse if the validation happens first and then the agent gets added to the verifier because the timing is easier and the verifier does not validate the regcount entry being equal to 1,",
    "cve_publish_date": "2022-05-06",
    "cwe_id": "CWE-20",
    "cwe_name": "Improper Input Validation",
    "cwe_description": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.",
    "commit_message": "tenant, verifier: let the tenant provide the AK and mTLS certificate\n\nThis eliminates the need for the verifier to connect to the registrar.\n\nSigned-off-by: Thore Sommer <mail@thson.de>",
    "type_of_change": "Modification",
    "filename_of_changes": "cloud_verifier_tornado.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "4",
    "number_of_lines_deleted_vulnerable_to_cve": "17",
    "vulnerable_lines": [
        "// Line_Reference 22: from keylime import registrar_client",
        "// Line_Reference 460:                     # We fetch the registrar data directly here because we require it for connecting to the agent",
        "// Line_Reference 461:                     # using mTLS",
        "// Line_Reference 462:                     registrar_client.init_client_tls('cloud_verifier')",
        "// Line_Reference 463:                     registrar_data = registrar_client.getData(config.get(\"cloud_verifier\", \"registrar_ip\"),",
        "// Line_Reference 464:                                                               config.get(\"cloud_verifier\", \"registrar_port\"), agent_id)",
        "// Line_Reference 465:                     if registrar_data is None:",
        "// Line_Reference 466:                         web_util.echo_json_response(self, 400,",
        "// Line_Reference 467:                                                     f\"Data for agent {agent_id} could not be found in registrar!\")",
        "// Line_Reference 468:                         logger.warning(\"Data for agent %s could not be found in registrar!\", agent_id)",
        "// Line_Reference 469:                         return",
        "// Line_Reference 470: ",
        "// Line_Reference 471:                     agent_data['mtls_cert'] = registrar_data.get('mtls_cert', None)",
        "// Line_Reference 472:                     agent_data['ak_tpm'] = registrar_data['aik_tpm']",
        "// Line_Reference 473: ",
        "// Line_Reference 475:                     if registrar_data.get('mtls_cert', None) is None and agent_data['supported_version'] != \"1.0\":",
        "// Line_Reference 513:                         mtls_cert = registrar_data.get('mtls_cert', None)"
    ]
}
