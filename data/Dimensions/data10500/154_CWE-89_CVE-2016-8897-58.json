{
    "cve_id": "CVE-2016-8897",
    "cve_description": "Exponent CMS version 2.3.9 suffers from a sql injection vulnerability in framework/modules/help/controllers/helpController.php.",
    "cve_publish_date": "2019-05-23",
    "cwe_id": "CWE-89",
    "cwe_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
    "cwe_description": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.",
    "commit_message": "iniitial effort to greatly enhance system security (xss, sql inject, file exploit, rce, etc...)",
    "type_of_change": "Modification",
    "filename_of_changes": "ealertController.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "162",
    "number_of_lines_deleted_vulnerable_to_cve": "156",
    "vulnerable_lines": [
        "// Line_Reference 26: ",
        "// Line_Reference 39: ",
        "// Line_Reference 42: ",
        "// Line_Reference 55: ",
        "// Line_Reference 60:         $src = empty($this->params['src']) ? null : $this->params['src'];",
        "// Line_Reference 72: ",
        "// Line_Reference 75: ",
        "// Line_Reference 82: ",
        "// Line_Reference 93: ",
        "// Line_Reference 98: ",
        "// Line_Reference 103: ",
        "// Line_Reference 108:         $src = empty($this->params['src']) ? null : $this->params['src'];",
        "// Line_Reference 139: ",
        "// Line_Reference 142: ",
        "// Line_Reference 147: ",
        "// Line_Reference 154: ",
        "// Line_Reference 162: ",
        "// Line_Reference 167:         }",
        "// Line_Reference 168: ",
        "// Line_Reference 204:     public function subscriptions() {",
        "// Line_Reference 205:         global $db;",
        "// Line_Reference 206: ",
        "// Line_Reference 207:         expHistory::set('manageable', $this->params);",
        "// Line_Reference 208:         // make sure we have what we need.",
        "// Line_Reference 209:         if (empty($this->params['key'])) expQueue::flashAndFlow('error', gt('The security key for account was not supplied.'));",
        "// Line_Reference 210:         if (empty($this->params['id'])) expQueue::flashAndFlow('error', gt('The subscriber id for account was not supplied.'));",
        "// Line_Reference 211: ",
        "// Line_Reference 212:         // verify the id/key pair",
        "// Line_Reference 213:         $sub = new subscribers($this->params['id']);",
        "// Line_Reference 214:         if (empty($sub->id)) expQueue::flashAndFlow('error', gt('We could not find any subscriptions matching the ID and Key you provided.'));",
        "// Line_Reference 215: ",
        "// Line_Reference 216:         // get this users subscriptions",
        "// Line_Reference 217:         $subscriptions = $db->selectColumn('expeAlerts_subscribers', 'expeAlerts_id', 'subscribers_id='.$sub->id);",
        "// Line_Reference 218: ",
        "// Line_Reference 219:         // get a list of all available E-Alerts",
        "// Line_Reference 220:         $ealerts = new expeAlerts();",
        "// Line_Reference 221:         assign_to_template(array(",
        "// Line_Reference 222:             'subscriber'=>$sub,",
        "// Line_Reference 223:             'subscriptions'=>$subscriptions,",
        "// Line_Reference 224:             'ealerts'=>$ealerts->find('all')",
        "// Line_Reference 225:         ));",
        "// Line_Reference 226:     }",
        "// Line_Reference 227: ",
        "// Line_Reference 231:     public function subscription_update() {",
        "// Line_Reference 232:         global $db;",
        "// Line_Reference 233: ",
        "// Line_Reference 234:         // make sure we have what we need.",
        "// Line_Reference 235:         if (empty($this->params['email'])) expQueue::flashAndFlow('error', gt('You must supply an email address to sign up for email alerts.'));",
        "// Line_Reference 236:         if (empty($this->params['key'])) expQueue::flashAndFlow('error', gt('The security key for account was not supplied.'));",
        "// Line_Reference 237:         if (empty($this->params['id'])) expQueue::flashAndFlow('error', gt('The subscriber id for account was not supplied.'));",
        "// Line_Reference 238: ",
        "// Line_Reference 239:         // find the subscriber and validate the security key",
        "// Line_Reference 240:         $subscriber = new subscribers($this->params['id']);",
        "// Line_Reference 241:         if ($subscriber->hash != $this->params['key']) expQueue::flashAndFlow('error', gt('The security key you supplied does not match the one we have on file.'));",
        "// Line_Reference 242: ",
        "// Line_Reference 243:         // delete any old subscriptions and add the user to new subscriptions",
        "// Line_Reference 244:         $db->delete('expeAlerts_subscribers', 'subscribers_id='.$subscriber->id);",
        "// Line_Reference 245:         foreach($this->params['ealerts'] as $ea_id) {",
        "// Line_Reference 246:             $obj = new stdClass();",
        "// Line_Reference 247:             $obj->subscribers_id = $subscriber->id;",
        "// Line_Reference 248:             $obj->expeAlerts_id = $ea_id;",
        "// Line_Reference 249:             $db->insertObject($obj, 'expeAlerts_subscribers');",
        "// Line_Reference 250:         }",
        "// Line_Reference 251: ",
        "// Line_Reference 252:         $count = count($this->params['ealerts']);",
        "// Line_Reference 253: ",
        "// Line_Reference 254:         if ($count > 0) {",
        "// Line_Reference 255:             flash('message', gt(\"Your subscriptions have been updated.  You are now subscriber to\").\" \".$count.' '.gt('E-Alerts.'));",
        "// Line_Reference 256:         } else {",
        "// Line_Reference 257:             flash('error', gt(\"You have been unsubscribed from all E-Alerts.\"));",
        "// Line_Reference 258:         }",
        "// Line_Reference 259: ",
        "// Line_Reference 260:         expHistory::back();",
        "// Line_Reference 261:     }",
        "// Line_Reference 262: ",
        "// Line_Reference 266:     public function signup() {",
        "// Line_Reference 267:         global $db;",
        "// Line_Reference 268:         // check the anti-spam control",
        "// Line_Reference 269:         expValidator::check_antispam($this->params, gt(\"Anti-spam verification failed.  Please try again.\"));",
        "// Line_Reference 270: ",
        "// Line_Reference 271:         // make sure we have what we need.",
        "// Line_Reference 272:         if (empty($this->params['email'])) expQueue::flashAndFlow('error', gt('You must supply an email address to sign up for email alerts.'));",
        "// Line_Reference 273:         if (empty($this->params['ealerts'])) expQueue::flashAndFlow('error', gt('You did not select any E-Alert topics to subscribe to.'));",
        "// Line_Reference 274: ",
        "// Line_Reference 275:         // find or create the subscriber",
        "// Line_Reference 276:         $id = $db->selectValue('subscribers', 'id', 'email=\"'.$this->params['email'].'\"');",
        "// Line_Reference 277:         $subscriber = new subscribers($id);",
        "// Line_Reference 278:         if (empty($subscriber->id)) {",
        "// Line_Reference 279:             $subscriber->email = trim($this->params['email']);",
        "// Line_Reference 280:             $subscriber->hash = md5($subscriber->email.time());",
        "// Line_Reference 281:             $subscriber->save();",
        "// Line_Reference 282:         }",
        "// Line_Reference 283: ",
        "// Line_Reference 284:         // delete any old subscriptions and add the user to new subscriptions",
        "// Line_Reference 285:         $db->delete('expeAlerts_subscribers', 'subscribers_id='.$subscriber->id);",
        "// Line_Reference 286:         foreach($this->params['ealerts'] as $ea_id) {",
        "// Line_Reference 287:             $obj = new stdClass();",
        "// Line_Reference 288:             $obj->subscribers_id = $subscriber->id;",
        "// Line_Reference 289:             $obj->expeAlerts_id = $ea_id;",
        "// Line_Reference 290:             $db->insertObject($obj, 'expeAlerts_subscribers');",
        "// Line_Reference 291:         }",
        "// Line_Reference 292: ",
        "// Line_Reference 293:         // send a confirmation email to the user.",
        "// Line_Reference 294:         $ealerts = $db->selectObjects('expeAlerts', 'id IN ('.implode(',', $this->params['ealerts']).')');",
        "// Line_Reference 295:         $body = expTemplate::get_template_for_action($this, 'email/confirmation_email', $this->loc);",
        "// Line_Reference 296:         $body->assign('ealerts', $ealerts);",
        "// Line_Reference 297:         $body->assign('subscriber', $subscriber);",
        "// Line_Reference 298: ",
        "// Line_Reference 299:         $mail = new expMail();",
        "// Line_Reference 300:         $mail->quickSend(array(",
        "// Line_Reference 301:                 'html_message'=>$body->render(),",
        "// Line_Reference 302: \t\t        'to'=>$subscriber->email,",
        "// Line_Reference 303:                 'from'=>array(trim(SMTP_FROMADDRESS) => trim(ORGANIZATION_NAME)),",
        "// Line_Reference 304: \t\t        'subject'=>gt('Please confirm your E-Alert subscriptions'),",
        "// Line_Reference 305:         ));",
        "// Line_Reference 306: ",
        "// Line_Reference 307:         redirect_to(array('controller'=>'ealert', 'action'=>'pending', 'id'=>$subscriber->id));",
        "// Line_Reference 308:     }",
        "// Line_Reference 309: ",
        "// Line_Reference 313:     public function pending() {",
        "// Line_Reference 315: ",
        "// Line_Reference 316:         // make sure we have what we need.",
        "// Line_Reference 317:         if (empty($this->params['id'])) expQueue::flashAndFlow('error', gt('Your subscriber ID was not supplied.'));",
        "// Line_Reference 319:         // find the subscriber and their pending subscriptions",
        "// Line_Reference 320:         $ealerts = expeAlerts::getPendingBySubscriber($this->params['id']);",
        "// Line_Reference 321:         $subscriber = new subscribers($this->params['id']);",
        "// Line_Reference 322: ",
        "// Line_Reference 323:         // render the template",
        "// Line_Reference 324:         assign_to_template(array(",
        "// Line_Reference 325:             'subscriber'=>$subscriber,",
        "// Line_Reference 326:             'ealerts'=>$ealerts",
        "// Line_Reference 327:         ));",
        "// Line_Reference 328:     }",
        "// Line_Reference 329: ",
        "// Line_Reference 330:     public function confirm() {",
        "// Line_Reference 331:         global $db;",
        "// Line_Reference 332: ",
        "// Line_Reference 333:         // make sure we have what we need.",
        "// Line_Reference 334:         if (empty($this->params['key'])) expQueue::flashAndFlow('error', gt('The security key for account was not supplied.'));",
        "// Line_Reference 335:         if (empty($this->params['id'])) expQueue::flashAndFlow('error', gt('The subscriber id for account was not supplied.'));",
        "// Line_Reference 336: ",
        "// Line_Reference 337:         // verify the id/key pair",
        "// Line_Reference 338:         $id = $db->selectValue('subscribers','id', 'id='.$this->params['id'].' AND hash=\"'.$this->params['key'].'\"');",
        "// Line_Reference 339:         if (empty($id)) expQueue::flashAndFlow('error', gt('We could not find any subscriptions matching the ID and Key you provided.'));",
        "// Line_Reference 340: ",
        "// Line_Reference 341:         // activate this users pending subscriptions",
        "// Line_Reference 342:         $sub = new stdClass();",
        "// Line_Reference 343:         $sub->enabled = 1;",
        "// Line_Reference 344:         $db->updateObject($sub, 'expeAlerts_subscribers', 'subscribers_id='.$id);",
        "// Line_Reference 345: ",
        "// Line_Reference 346:         // find the users active subscriptions",
        "// Line_Reference 347:         $ealerts = expeAlerts::getBySubscriber($id);",
        "// Line_Reference 348:         assign_to_template(array(",
        "// Line_Reference 349:             'ealerts'=>$ealerts",
        "// Line_Reference 350:         ));",
        "// Line_Reference 351:     }"
    ]
}
