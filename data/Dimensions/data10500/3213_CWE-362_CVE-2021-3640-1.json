{
    "cve_id": "CVE-2021-3640",
    "cve_description": "A flaw use-after-free in function sco_sock_sendmsg() of the Linux kernel HCI subsystem was found in the way user calls ioct UFFDIO_REGISTER or other way triggers race condition of the call sco_conn_del() together with the call sco_sock_sendmsg() with the expected controllable faulting memory page. A privileged local user could use this flaw to crash the system or escalate their privileges on the system.",
    "cve_publish_date": "2022-03-03",
    "cwe_id": "CWE-362",
    "cwe_name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
    "cwe_description": "The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.",
    "commit_message": "Bluetooth: sco: Fix lock_sock() blockage by memcpy_from_msg()\n\nThe sco_send_frame() also takes lock_sock() during memcpy_from_msg()\ncall that may be endlessly blocked by a task with userfaultd\ntechnique, and this will result in a hung task watchdog trigger.\n\nJust like the similar fix for hci_sock_sendmsg() in commit\n92c685dc5de0 (\"Bluetooth: reorganize functions...\"), this patch moves\nthe  memcpy_from_msg() out of lock_sock() for addressing the hang.\n\nThis should be the last piece for fixing CVE-2021-3640 after a few\nalready queued fixes.\n\nSigned-off-by: Takashi Iwai <tiwai@suse.de>\nSigned-off-by: Marcel Holtmann <marcel@holtmann.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "sco.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "16",
    "number_of_lines_deleted_vulnerable_to_cve": "8",
    "vulnerable_lines": [
        "// Line_Reference 283: static int sco_send_frame(struct sock *sk, struct msghdr *msg, int len)",
        "// Line_Reference 295: \tskb = bt_skb_send_alloc(sk, len, msg->msg_flags & MSG_DONTWAIT, &err);",
        "// Line_Reference 299: \tif (memcpy_from_msg(skb_put(skb, len), msg, len)) {",
        "// Line_Reference 300: \t\tkfree_skb(skb);",
        "// Line_Reference 301: \t\treturn -EFAULT;",
        "// Line_Reference 302: \t}",
        "// Line_Reference 303: ",
        "// Line_Reference 742: \t\terr = sco_send_frame(sk, msg, len);"
    ]
}
