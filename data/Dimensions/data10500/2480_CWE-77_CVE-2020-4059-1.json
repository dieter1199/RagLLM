{
    "cve_id": "CVE-2020-4059",
    "cve_description": "In mversion before 2.0.0, there is a command injection vulnerability. This issue may lead to remote code execution if a client of the library calls the vulnerable method with untrusted input. This vulnerability is patched by version 2.0.0. Previous releases are deprecated in npm. As a workaround, make sure to escape git commit messages when using the commitMessage option for the update function.",
    "cve_publish_date": "2020-06-18",
    "cwe_id": "CWE-77",
    "cwe_name": "Improper Neutralization of Special Elements used in a Command ('Command Injection')",
    "cwe_description": "The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.",
    "commit_message": "Fixes missing shell escape for git commit message",
    "type_of_change": "Modification",
    "filename_of_changes": "git.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "37",
    "number_of_lines_deleted_vulnerable_to_cve": "28",
    "vulnerable_lines": [
        "// Line_Reference 1: var contra = require('contra'),",
        "// Line_Reference 2:     path = require('path'),",
        "// Line_Reference 3:     fUtils = require('./files'),",
        "// Line_Reference 4:     cp = require('child_process');",
        "// Line_Reference 5: ",
        "// Line_Reference 6: var gitApp = 'git', gitExtra = { env: process.env };",
        "// Line_Reference 10:   if (typeof str === 'string') {",
        "// Line_Reference 11:     return str.replace(/([\"$`\\\\])/g, '\\\\$1');",
        "// Line_Reference 18:   cp.exec(gitApp + ' ' + [ 'ls-files', '-m' ].join(' '), gitExtra, function (er, stdout, stderr) {",
        "// Line_Reference 20:     var lines = stdout.trim().split('\\n').filter(function (line) {",
        "// Line_Reference 21:       var file = path.basename(line.replace(/.{1,2}\\s+/, ''));",
        "// Line_Reference 22:       return line.trim() && !line.match(/^\\?\\? /) && !fUtils.isPackageFile(line);",
        "// Line_Reference 23:     }).map(function (line) {",
        "// Line_Reference 24:       return line.trim()",
        "// Line_Reference 25:     });",
        "// Line_Reference 28:       return callback(new Error('Git working directory not clean.\\n'+lines.join('\\n')));",
        "// Line_Reference 35:   cp.exec(gitApp + ' checkout -- .', gitExtra, callback);",
        "// Line_Reference 39:   message = message.replace('%s', newVer).replace('\"', '').replace(\"'\", '');",
        "// Line_Reference 40:   files = files.map(function (file) {",
        "// Line_Reference 41:     return '\"' + escapeQuotes(file) + '\"';",
        "// Line_Reference 42:   }).join(' ');",
        "// Line_Reference 45:       cp.exec(gitApp + ' add ' + files, gitExtra, done);",
        "// Line_Reference 49:       cp.exec([gitApp, 'commit', '-m', '\"' + message + '\"'].join(' '), gitExtra, done);",
        "// Line_Reference 54:         [",
        "// Line_Reference 55:           gitApp, 'tag', '-a', tagName, '-m', '\"' + message + '\"'",
        "// Line_Reference 56:         ].join(' '),",
        "// Line_Reference 57:         gitExtra, done",
        "// Line_Reference 59:     }"
    ]
}
