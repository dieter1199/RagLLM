RSA_PRIVATE_KEY = "/root/.ssh/id_rsa"
RSA_PUBLIC_KEY = "/root/.ssh/id_rsa.pub"
AUTHORIZED_KEYS_FILE = "/root/.ssh/authorized_keys"
configure_local_ssh_key()
def configure_local_ssh_key():
If /root/.ssh/id_rsa not exist, generate a new one
Add /root/.ssh/id_rsa.pub to /root/.ssh/authorized_keys anyway, make sure itself authorized
if not os.path.exists(RSA_PRIVATE_KEY):
status("Generating SSH key")
invoke("ssh-keygen -q -f {} -C 'Cluster Internal on {}' -N ''".format(RSA_PRIVATE_KEY, utils.this_node()))
if not os.path.exists(AUTHORIZED_KEYS_FILE):
open(AUTHORIZED_KEYS_FILE, 'w').close()
append_unique(RSA_PUBLIC_KEY, AUTHORIZED_KEYS_FILE)
configure_local_ssh_key()
swap_public_ssh_key(seed_host)
def swap_public_ssh_key(remote_node):
if utils.check_ssh_passwd_need(remote_node):
status("Configuring SSH passwordless with root@{}".format(remote_node))
append_to_remote_file(RSA_PUBLIC_KEY, remote_node, AUTHORIZED_KEYS_FILE)
public_key_file_remote = fetch_public_key_from_remote_node(remote_node)
append_unique(public_key_file_remote, AUTHORIZED_KEYS_FILE)
def fetch_public_key_from_remote_node(node):
public_key_file = "/root/.ssh/{}.pub".format(key)
swap_public_ssh_key(node)
if corosync_active: