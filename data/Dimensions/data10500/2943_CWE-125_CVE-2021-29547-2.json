{
    "cve_id": "CVE-2021-29547",
    "cve_description": "TensorFlow is an end-to-end open source platform for machine learning. An attacker can cause a segfault and denial of service via accessing data outside of bounds in `tf.raw_ops.QuantizedBatchNormWithGlobalNormalization`. This is because the implementation(https://github.com/tensorflow/tensorflow/blob/55a97caa9e99c7f37a0bbbeb414dc55553d3ae7f/tensorflow/core/kernels/quantized_batch_norm_op.cc#L176-L189) assumes the inputs are not empty. If any of these inputs is empty, `.flat<T>()` is an empty buffer, so accessing the element at index 0 is accessing data outside of bounds. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.",
    "cve_publish_date": "2021-05-14",
    "cwe_id": "CWE-125",
    "cwe_name": "Out-of-bounds Read",
    "cwe_description": "The product reads data past the end, or before the beginning, of the intended buffer.",
    "commit_message": "Add missing validation in `QuantizedBatchNormWithGlobalNormalization`\n\nPiperOrigin-RevId: 370123451\nChange-Id: Id234d6dab1ec21230bb8e503dba30f899af87f33",
    "type_of_change": "Modification",
    "filename_of_changes": "quantized_batch_norm_op.cc",
    "code_language": "C++",
    "number_of_lines_added_for_mitigation": "67",
    "number_of_lines_deleted_vulnerable_to_cve": "10",
    "vulnerable_lines": [
        "// Line_Reference 176:     const float input_min = context->input(1).flat<float>()(0);",
        "// Line_Reference 177:     const float input_max = context->input(2).flat<float>()(0);",
        "// Line_Reference 179:     const float mean_min = context->input(4).flat<float>()(0);",
        "// Line_Reference 180:     const float mean_max = context->input(5).flat<float>()(0);",
        "// Line_Reference 182:     const float var_min = context->input(7).flat<float>()(0);",
        "// Line_Reference 183:     const float var_max = context->input(8).flat<float>()(0);",
        "// Line_Reference 185:     const float beta_min = context->input(10).flat<float>()(0);",
        "// Line_Reference 186:     const float beta_max = context->input(11).flat<float>()(0);",
        "// Line_Reference 188:     const float gamma_min = context->input(13).flat<float>()(0);",
        "// Line_Reference 189:     const float gamma_max = context->input(14).flat<float>()(0);"
    ]
}
