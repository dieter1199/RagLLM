{
    "cve_id": "CVE-2022-21208",
    "cve_description": "The package node-opcua before 2.74.0 are vulnerable to Denial of Service (DoS) due to a missing limitation on the number of received chunks - per single session or in total for all concurrent sessions. An attacker can exploit this vulnerability by sending an unlimited number of huge chunks (e.g. 2GB each) without sending the Final closing chunk.",
    "cve_publish_date": "2022-08-23",
    "cwe_id": "CWE-1284",
    "cwe_name": "Improper Validation of Specified Quantity in Input",
    "cwe_description": "The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.",
    "commit_message": "fix message chunk overflow detection",
    "type_of_change": "Modification",
    "filename_of_changes": "client_secure_channel_layer.ts",
    "code_language": "TypeScript",
    "number_of_lines_added_for_mitigation": "53",
    "number_of_lines_deleted_vulnerable_to_cve": "33",
    "vulnerable_lines": [
        "// Line_Reference 22: import { CallbackT, StatusCodes } from \"node-opcua-status-code\";",
        "// Line_Reference 279:     private readonly messageBuilder: MessageBuilder;",
        "// Line_Reference 351:             securityMode: this.securityMode",
        "// Line_Reference 353:         this._requests = {};",
        "// Line_Reference 356:             .on(\"message\", (response: Response, msgType: string, requestId: number) => {",
        "// Line_Reference 357:                 this._on_message_received(response, msgType, requestId);",
        "// Line_Reference 359:             .on(\"start_chunk\", () => {",
        "// Line_Reference 365:             .on(\"error\", (err, requestId) => {",
        "// Line_Reference 366:                 //",
        "// Line_Reference 382: ",
        "// Line_Reference 383:         this.__in_normal_close_operation = false;",
        "// Line_Reference 384: ",
        "// Line_Reference 385:         this._timeout_request_count = 0;",
        "// Line_Reference 386: ",
        "// Line_Reference 387:         this._securityTokenTimeoutId = null;",
        "// Line_Reference 388: ",
        "// Line_Reference 389:         this.transportTimeout = options.transportTimeout || ClientSecureChannelLayer.defaultTransportTimeout;",
        "// Line_Reference 390: ",
        "// Line_Reference 391:         this.channelId = 0;",
        "// Line_Reference 392: ",
        "// Line_Reference 393:         this.connectionStrategy = coerceConnectionStrategy(options.connectionStrategy);",
        "// Line_Reference 395: ",
        "// Line_Reference 685:     public closeWithError(err: Error, callback: ErrorCallback): void {",
        "// Line_Reference 687:             this._transport.prematureTerminate(err);",
        "// Line_Reference 779:             requestData._tick2 = this.messageBuilder._tick1;",
        "// Line_Reference 781:         requestData.bytesRead = this.messageBuilder.totalMessageSize;",
        "// Line_Reference 1030:                 const cryptoFactory = this.messageBuilder.cryptoFactory;",
        "// Line_Reference 1047:                 this.messageBuilder.pushNewToken(this.securityToken, derivedServerKeys);",
        "// Line_Reference 1062:         this._transport.on(\"message\", (messageChunk: Buffer) => {",
        "// Line_Reference 1243:                 this.closeWithError(new Error(\"Restarting because Request has timed out during OpenSecureChannel\"), () => {",
        "// Line_Reference 1244:                     /* */",
        "// Line_Reference 1245:                 });",
        "// Line_Reference 1259:         this.messageBuilder.feed(messageChunk);"
    ]
}
