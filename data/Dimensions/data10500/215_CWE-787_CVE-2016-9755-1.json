{
    "cve_id": "CVE-2016-9755",
    "cve_description": "The netfilter subsystem in the Linux kernel before 4.9 mishandles IPv6 reassembly, which allows local users to cause a denial of service (integer overflow, out-of-bounds write, and GPF) or possibly have unspecified other impact via a crafted application that makes socket, connect, and writev system calls, related to net/ipv6/netfilter/nf_conntrack_reasm.c and net/ipv6/netfilter/nf_defrag_ipv6_hooks.c.",
    "cve_publish_date": "2016-12-28",
    "cwe_id": "CWE-787",
    "cwe_name": "Out-of-bounds Write",
    "cwe_description": "The product writes data past the end, or before the beginning, of the intended buffer.",
    "commit_message": "netfilter: ipv6: nf_defrag: drop mangled skb on ream error\n\nDmitry Vyukov reported GPF in network stack that Andrey traced down to\nnegative nh offset in nf_ct_frag6_queue().\n\nProblem is that all network headers before fragment header are pulled.\nNormal ipv6 reassembly will drop the skb when errors occur further down\nthe line.\n\nnetfilter doesn't do this, and instead passed the original fragment\nalong.  That was also fine back when netfilter ipv6 defrag worked with\ncloned fragments, as the original, pristine fragment was passed on.\n\nSo we either have to undo the pull op, or discard such fragments.\nSince they're malformed after all (e.g. overlapping fragment) it seems\npreferrable to just drop them.\n\nSame for temporary errors -- it doesn't make sense to accept (and\nperhaps forward!) only some fragments of same datagram.\n\nFixes: 029f7f3b8701cc7ac (\"netfilter: ipv6: nf_defrag: avoid/free clone operations\")\nReported-by: Dmitry Vyukov <dvyukov@google.com>\nDebugged-by: Andrey Konovalov <andreyknvl@google.com>\nDiagnosed-by: Eric Dumazet <Eric Dumazet <edumazet@google.com>\nSigned-off-by: Florian Westphal <fw@strlen.de>\nAcked-by: Eric Dumazet <edumazet@google.com>\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "nf_conntrack_reasm.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "2",
    "number_of_lines_deleted_vulnerable_to_cve": "2",
    "vulnerable_lines": [
        "// Line_Reference 579: \t\treturn -EINVAL;",
        "// Line_Reference 583: \t\treturn -EINVAL;"
    ]
}
