{
    "cve_id": "CVE-2024-38360",
    "cve_description": "Discourse is an open source platform for community discussion. In affected versions by creating replacement words with an almost unlimited number of characters, a moderator can reduce the availability of a Discourse instance. This issue has been addressed in stable version 3.2.3 and in current betas. Users are advised to upgrade. Users unable to upgrade may manually remove the long watched words either via SQL or Rails console.",
    "cve_publish_date": "2024-07-15",
    "cwe_id": "NVD-CWE-noinfo",
    "commit_message": "SECURITY: limit the number of characters in watched word replacements.\n\nThe watch words controller creation function, create_or_update_word(), doesnâ€™t validate the size of the replacement parameter, unlike the word parameter, when creating a replace watched word. So anyone with moderator privileges can create watched words with almost unlimited characters.",
    "type_of_change": "Modification",
    "filename_of_changes": "watched_word_group_spec.rb",
    "code_language": "Ruby",
    "number_of_lines_added_for_mitigation": "8",
    "number_of_lines_deleted_vulnerable_to_cve": "15",
    "vulnerable_lines": [
        "// Line_Reference 5:   fab!(:watched_word_1) { Fabricate(:watched_word, watched_word_group_id: watched_word_group.id) }",
        "// Line_Reference 29:     it \"leaves membership intact if update fails\" do",
        "// Line_Reference 41:       watched_word_group.create_or_update_members(",
        "// Line_Reference 42:         words,",
        "// Line_Reference 43:         action_key: WatchedWord.actions[watched_word_group.action],",
        "// Line_Reference 44:       )",
        "// Line_Reference 45: ",
        "// Line_Reference 46:       expect(watched_word_group.reload.errors).not_to be_empty",
        "// Line_Reference 47: ",
        "// Line_Reference 48:       watched_words = watched_word_group.watched_words",
        "// Line_Reference 49: ",
        "// Line_Reference 50:       expect(watched_word_group.action).to eq(old_action)",
        "// Line_Reference 51:       expect(watched_words.size).to eq(2)",
        "// Line_Reference 52:       expect(watched_words.map(&:word)).to contain_exactly(watched_word_1.word, watched_word_2.word)",
        "// Line_Reference 53:       expect(watched_words.map(&:action).uniq).to contain_exactly(old_action)"
    ]
}
