{
    "cve_id": "CVE-2021-23364",
    "cve_description": "The package browserslist from 4.0.0 and before 4.16.5 are vulnerable to Regular Expression Denial of Service (ReDoS) during parsing of queries.",
    "cve_publish_date": "2021-04-28",
    "cwe_id": "CWE-1333",
    "cwe_name": "Inefficient Regular Expression Complexity",
    "cwe_description": "The product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles.",
    "commit_message": "Fix unsafe regexp",
    "type_of_change": "Modification",
    "filename_of_changes": "index.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "137",
    "number_of_lines_deleted_vulnerable_to_cve": "105",
    "vulnerable_lines": [
        "// Line_Reference 672:       return Object.keys(e2c).slice(-versions).map(function (i) {",
        "// Line_Reference 673:         return 'chrome ' + e2c[i]",
        "// Line_Reference 674:       })",
        "// Line_Reference 712:       return data.versions.filter(function (v) {",
        "// Line_Reference 713:         return data.released.indexOf(v) === -1",
        "// Line_Reference 714:       }).map(nameMapper(data.name))",
        "// Line_Reference 724:     regexp: /^since (\\d+)(?:-(\\d+))?(?:-(\\d+))?$/i,",
        "// Line_Reference 725:     select: function (context, year, month, date) {",
        "// Line_Reference 726:       year = parseInt(year)",
        "// Line_Reference 727:       month = parseInt(month || '01') - 1",
        "// Line_Reference 728:       date = parseInt(date || '01')",
        "// Line_Reference 729:       return filterByYear(Date.UTC(year, month, date, 0, 0, 0), context)",
        "// Line_Reference 730:     }",
        "// Line_Reference 852:     regexp: /^cover\\s+(\\d*\\.?\\d+)%(\\s+in\\s+(my\\s+stats|(alt-)?\\w\\w))?$/,",
        "// Line_Reference 853:     select: function (context, coverage, statMode) {",
        "// Line_Reference 854:       coverage = parseFloat(coverage)",
        "// Line_Reference 855:       var usage = browserslist.usage.global",
        "// Line_Reference 856:       if (statMode) {",
        "// Line_Reference 857:         if (statMode.match(/^\\s+in\\s+my\\s+stats$/)) {",
        "// Line_Reference 858:           if (!context.customUsage) {",
        "// Line_Reference 859:             throw new BrowserslistError(",
        "// Line_Reference 860:               'Custom usage statistics was not provided'",
        "// Line_Reference 861:             )",
        "// Line_Reference 862:           }",
        "// Line_Reference 863:           usage = context.customUsage",
        "// Line_Reference 864:         } else {",
        "// Line_Reference 865:           var match = statMode.match(/\\s+in\\s+((alt-)?\\w\\w)/)",
        "// Line_Reference 866:           var place = match[1]",
        "// Line_Reference 867:           if (place.length === 2) {",
        "// Line_Reference 868:             place = place.toUpperCase()",
        "// Line_Reference 869:           } else {",
        "// Line_Reference 870:             place = place.toLowerCase()",
        "// Line_Reference 871:           }",
        "// Line_Reference 872:           env.loadCountry(browserslist.usage, place, browserslist.data)",
        "// Line_Reference 873:           usage = browserslist.usage[place]",
        "// Line_Reference 874:         }",
        "// Line_Reference 875:       }",
        "// Line_Reference 876:       var versions = Object.keys(usage).sort(function (a, b) {",
        "// Line_Reference 877:         return usage[b] - usage[a]",
        "// Line_Reference 878:       })",
        "// Line_Reference 879:       var coveraged = 0",
        "// Line_Reference 880:       var result = []",
        "// Line_Reference 881:       var version",
        "// Line_Reference 882:       for (var i = 0; i <= versions.length; i++) {",
        "// Line_Reference 883:         version = versions[i]",
        "// Line_Reference 884:         if (usage[version] === 0) break",
        "// Line_Reference 885:         coveraged += usage[version]",
        "// Line_Reference 886:         result.push(version)",
        "// Line_Reference 887:         if (coveraged >= coverage) break",
        "// Line_Reference 888:       }",
        "// Line_Reference 889:       return result",
        "// Line_Reference 890:     }",
        "// Line_Reference 919:       return Object.keys(e2c).filter(function (i) {",
        "// Line_Reference 920:         var parsed = parseFloat(i)",
        "// Line_Reference 921:         return parsed >= from && parsed <= to",
        "// Line_Reference 922:       }).map(function (i) {",
        "// Line_Reference 923:         return 'chrome ' + e2c[i]",
        "// Line_Reference 924:       })",
        "// Line_Reference 930:       var nodeVersions = jsReleases.filter(function (i) {",
        "// Line_Reference 931:         return i.name === 'nodejs'",
        "// Line_Reference 932:       }).map(function (i) {",
        "// Line_Reference 933:         return i.version",
        "// Line_Reference 934:       })",
        "// Line_Reference 935:       var semverRegExp = /^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){0,2}$/",
        "// Line_Reference 936:       if (!semverRegExp.test(from)) {",
        "// Line_Reference 937:         throw new BrowserslistError(",
        "// Line_Reference 938:           'Unknown version ' + from + ' of Node.js')",
        "// Line_Reference 939:       }",
        "// Line_Reference 940:       if (!semverRegExp.test(to)) {",
        "// Line_Reference 941:         throw new BrowserslistError(",
        "// Line_Reference 942:           'Unknown version ' + to + ' of Node.js')",
        "// Line_Reference 943:       }",
        "// Line_Reference 979:       var nodeVersions = jsReleases.filter(function (i) {",
        "// Line_Reference 980:         return i.name === 'nodejs'",
        "// Line_Reference 981:       }).map(function (i) {",
        "// Line_Reference 982:         return i.version",
        "// Line_Reference 983:       })",
        "// Line_Reference 1025:           'Unknown version ' + version + ' of electron')",
        "// Line_Reference 1031:     regexp: /^node\\s+(\\d+(\\.\\d+)?(\\.\\d+)?)$/i,",
        "// Line_Reference 1032:     select: function (context, version) {",
        "// Line_Reference 1033:       var nodeReleases = jsReleases.filter(function (i) {",
        "// Line_Reference 1034:         return i.name === 'nodejs'",
        "// Line_Reference 1035:       })",
        "// Line_Reference 1036:       var matched = nodeReleases.filter(function (i) {",
        "// Line_Reference 1037:         return isVersionsMatch(i.version, version)",
        "// Line_Reference 1038:       })",
        "// Line_Reference 1039:       if (matched.length === 0) {",
        "// Line_Reference 1040:         if (context.ignoreUnknownVersions) {",
        "// Line_Reference 1041:           return []",
        "// Line_Reference 1042:         } else {",
        "// Line_Reference 1043:           throw new BrowserslistError(",
        "// Line_Reference 1044:             'Unknown version ' + version + ' of Node.js')",
        "// Line_Reference 1045:         }",
        "// Line_Reference 1046:       }",
        "// Line_Reference 1047:       return ['node ' + matched[matched.length - 1].version]",
        "// Line_Reference 1048:     }",
        "// Line_Reference 1060:       var queries = Object.keys(jsEOL).filter(function (key) {",
        "// Line_Reference 1061:         return now < Date.parse(jsEOL[key].end) &&",
        "// Line_Reference 1062:           now > Date.parse(jsEOL[key].start) &&",
        "// Line_Reference 1063:           isEolReleased(key)",
        "// Line_Reference 1064:       }).map(function (key) {",
        "// Line_Reference 1065:         return 'node ' + key.slice(1)",
        "// Line_Reference 1066:       })",
        "// Line_Reference 1103:             'Unknown version ' + version + ' of ' + name)",
        "// Line_Reference 1145:           'Specify versions in Browserslist query for browser ' + name)"
    ]
}
