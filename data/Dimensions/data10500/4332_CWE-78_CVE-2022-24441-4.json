{
    "cve_id": "CVE-2022-24441",
    "cve_description": "The package snyk before 1.1064.0 are vulnerable to Code Injection when analyzing a project. An attacker who can convince a user to scan a malicious project can include commands in a build file such as build.gradle or gradle-wrapper.jar, which will be executed with the privileges of the application. This vulnerability may be triggered when running the the CLI tool directly, or when running a scan with one of the IDE plugins that invoke the Snyk CLI. Successful exploitation of this issue would likely require some level of social engineering - to coerce an untrusted project to be downloaded and analyzed via the Snyk CLI or opened in an IDE where a Snyk IDE plugin is installed and enabled. Additionally, if the IDE has a Trust feature then the target folder must be marked as ‘trusted’ in order to be vulnerable. **NOTE:** This issue is independent of the one reported in [CVE-2022-40764](https://security.snyk.io/vuln/SNYK-JS-SNYK-3037342), and upgrading to a fixed version for this addresses that issue as well. The affected IDE plugins and versions are: - VS Code - Affected: <=1.8.0, Fixed: 1.9.0 - IntelliJ - Affected: <=2.4.47, Fixed: 2.4.48 - Visual Studio - Affected: <=1.1.30, Fixed: 1.1.31 - Eclipse - Affected: <=v20221115.132308, Fixed: All subsequent versions - Language Server - Affected: <=v20221109.114426, Fixed: All subsequent versions",
    "cve_publish_date": "2022-11-30",
    "cwe_id": "CWE-78",
    "cwe_name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
    "cwe_description": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
    "commit_message": "feat: workspace trust (#306)",
    "type_of_change": "Modification",
    "filename_of_changes": "languageServer.ts",
    "code_language": "TypeScript",
    "number_of_lines_added_for_mitigation": "45",
    "number_of_lines_deleted_vulnerable_to_cve": "31",
    "vulnerable_lines": [
        "// Line_Reference 5: import { SNYK_CLI_PATH, SNYK_HAS_AUTHENTICATED, SNYK_LANGUAGE_SERVER_NAME } from '../constants/languageServer';",
        "// Line_Reference 94: ",
        "// Line_Reference 98:         this.client.onNotification(SNYK_HAS_AUTHENTICATED, ({ token }: { token: string }) => {",
        "// Line_Reference 99:           this.authenticationService.updateToken(token).catch((error: Error) => {",
        "// Line_Reference 100:             ErrorHandler.handle(error, this.logger, error.message);",
        "// Line_Reference 101:           });",
        "// Line_Reference 102:         });",
        "// Line_Reference 103: ",
        "// Line_Reference 104:         this.client.onNotification(SNYK_CLI_PATH, ({ cliPath }: { cliPath: string }) => {",
        "// Line_Reference 105:           if (!cliPath) {",
        "// Line_Reference 106:             ErrorHandler.handle(",
        "// Line_Reference 107:               new Error(\"CLI path wasn't provided by language server on $/snyk.isAvailableCli notification \" + cliPath),",
        "// Line_Reference 108:               this.logger,",
        "// Line_Reference 109:               \"CLI path wasn't provided by language server on notification\",",
        "// Line_Reference 110:             );",
        "// Line_Reference 111:             return;",
        "// Line_Reference 112:           }",
        "// Line_Reference 113: ",
        "// Line_Reference 114:           const currentCliPath = this.configuration.getCliPath();",
        "// Line_Reference 115:           if (currentCliPath != cliPath) {",
        "// Line_Reference 116:             this.logger.info('Setting Snyk CLI path to: ' + cliPath);",
        "// Line_Reference 117:             void this.configuration",
        "// Line_Reference 118:               .setCliPath(cliPath)",
        "// Line_Reference 119:               .then(() => {",
        "// Line_Reference 120:                 this.cliReady$.next(cliPath);",
        "// Line_Reference 121:               })",
        "// Line_Reference 122:               .catch((error: Error) => {",
        "// Line_Reference 123:                 ErrorHandler.handle(error, this.logger, error.message);",
        "// Line_Reference 124:               });",
        "// Line_Reference 125:           }",
        "// Line_Reference 126:         });"
    ]
}
