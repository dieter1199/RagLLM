{
    "cve_id": "CVE-2018-14043",
    "cve_description": "mstdlib (aka the M Standard Library for C) 1.2.0 has incorrect file access control in situations where M_fs_perms_can_access attempts to delete an existing file (that lacks public read/write access) during a copy operation, related to fs/m_fs.c and fs/m_fs_path.c. An attacker could create the file and then would have access to the data.",
    "cve_publish_date": "2018-07-13",
    "cwe_id": "CWE-732",
    "cwe_name": "Incorrect Permission Assignment for Critical Resource",
    "cwe_description": "The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.",
    "commit_message": "fs: Don't try to delete the file when copying. It could cause a security issue if the file exists and doesn't allow other's to read/write. delete could allow someone to create the file and have access to the data.",
    "type_of_change": "Modification",
    "filename_of_changes": "m_fs.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "25",
    "number_of_lines_deleted_vulnerable_to_cve": "27",
    "vulnerable_lines": [
        "// Line_Reference 132: \t\tif (M_fs_perms_can_access(p2, M_FS_PERMS_MODE_NONE) == M_FS_ERROR_SUCCESS)",
        "// Line_Reference 133: \t\t{",
        "// Line_Reference 212: \t/* We're going to create/open/truncate the new file, then as we read the contents from the old file we'll write it",
        "// Line_Reference 213:  \t * to new file. */",
        "// Line_Reference 214: \tif (M_fs_perms_can_access(path_new, M_FS_PERMS_MODE_NONE) == M_FS_ERROR_SUCCESS) {",
        "// Line_Reference 215: \t\t/* Try to delete the file since we'll be overwrite it. This is so when we create the file we create it without",
        "// Line_Reference 216:  \t\t * any permissions and to ensure that anything that has the file already open won't be able to read the new",
        "// Line_Reference 217: \t\t * contents we're writing to the file or be able to change the perms. There is an unavoidable race condition",
        "// Line_Reference 218: \t\t * between deleting and creating the file where someone could create the file and have access. However,",
        "// Line_Reference 219: \t\t * depending on the OS they may have access even if the file is created with no perms... */",
        "// Line_Reference 220: \t\tres = M_fs_delete(path_new, M_FALSE, NULL, M_FS_PROGRESS_NOEXTRA);",
        "// Line_Reference 221: \t\tif (res != M_FS_ERROR_SUCCESS) {",
        "// Line_Reference 222: \t\t\treturn res;",
        "// Line_Reference 223: \t\t}",
        "// Line_Reference 224: \t}",
        "// Line_Reference 336:  \t * existing to rename because any check we perform may not be true when rename is called. */",
        "// Line_Reference 354:  \t/* There is a race condition where the path could not exist but be created between the exists check and calling",
        "// Line_Reference 402:  \t\t\t * want to remove any existing files (especially if the dest is a dir). */",
        "// Line_Reference 410:  \t\t * result of the move is not M_FS_ERROR_NOT_SAMEDEV because the copy operation will call the cb for us. */",
        "// Line_Reference 468:  \t * existing to rename because any check we perform may not be true when rename is called. */",
        "// Line_Reference 488:  \t/* There is a race condition where the path could not exist but be created between the exists check and calling",
        "// Line_Reference 500:  \t * M_FS_DIR_WALK_FILTER_READ_INFO_BASIC doesn't actually get the perms it's just there to ensure the info is",
        "// Line_Reference 526:  \t\t\t * Making dirs and symlinks is one operation and copying a file will be split into",
        "// Line_Reference 603:  \t * If we're overwriting then there could be other files in that location (especially if it's a dir). */",
        "// Line_Reference 662:  \t * We cannot delete as walk because not all file systems support that operation. The walk; delete; behavior",
        "// Line_Reference 674:  \t * it after a potential walk because we can't delete a directory that isn't empty.",
        "// Line_Reference 683:  \t\t * new info as necessary. */"
    ]
}
