{
    "cve_id": "CVE-2016-9313",
    "cve_description": "security/keys/big_key.c in the Linux kernel before 4.8.7 mishandles unsuccessful crypto registration in conjunction with successful key-type registration, which allows local users to cause a denial of service (NULL pointer dereference and panic) or possibly have unspecified other impact via a crafted application that uses the big_key data type.",
    "cve_publish_date": "2016-11-28",
    "cwe_id": "CWE-476",
    "cwe_name": "NULL Pointer Dereference",
    "cwe_description": "The product dereferences a pointer that it expects to be valid but is NULL.",
    "commit_message": "KEYS: Sort out big_key initialisation\n\nbig_key has two separate initialisation functions, one that registers the\nkey type and one that registers the crypto.  If the key type fails to\nregister, there's no problem if the crypto registers successfully because\nthere's no way to reach the crypto except through the key type.\n\nHowever, if the key type registers successfully but the crypto does not,\nbig_key_rng and big_key_blkcipher may end up set to NULL - but the code\nneither checks for this nor unregisters the big key key type.\n\nFurthermore, since the key type is registered before the crypto, it is\ntheoretically possible for the kernel to try adding a big_key before the\ncrypto is set up, leading to the same effect.\n\nFix this by merging big_key_crypto_init() and big_key_init() and calling\nthe resulting function late.  If they're going to be encrypted, we\nshouldn't be creating big_keys before we have the facilities to do the\nencryption available.  The key type registration is also moved after the\ncrypto initialisation.\n\nThe fix also includes message printing on failure.\n\nIf the big_key type isn't correctly set up, simply doing:\n\n\tdd if=/dev/zero bs=4096 count=1 | keyctl padd big_key a @s\n\nought to cause an oops.\n\nFixes: 13100a72f40f5748a04017e0ab3df4cf27c809ef ('Security: Keys: Big keys stored encrypted')\nSigned-off-by: David Howells <dhowells@redhat.com>\ncc: Peter Hlavaty <zer0mem@yahoo.com>\ncc: Kirill Marinushkin <k.marinushkin@gmail.com>\ncc: Artem Savkov <asavkov@redhat.com>\ncc: stable@vger.kernel.org\nSigned-off-by: James Morris <james.l.morris@oracle.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "big_key.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "32",
    "number_of_lines_deleted_vulnerable_to_cve": "27",
    "vulnerable_lines": [
        "// Line_Reference 344: \treturn register_key_type(&key_type_big_key);",
        "// Line_Reference 345: }",
        "// Line_Reference 346: ",
        "// Line_Reference 347: /*",
        "// Line_Reference 348:  * Initialize big_key crypto and RNG algorithms",
        "// Line_Reference 349:  */",
        "// Line_Reference 350: static int __init big_key_crypto_init(void)",
        "// Line_Reference 351: {",
        "// Line_Reference 352: \tint ret = -EINVAL;",
        "// Line_Reference 354: \t/* init RNG */",
        "// Line_Reference 355: \tbig_key_rng = crypto_alloc_rng(big_key_rng_name, 0, 0);",
        "// Line_Reference 356: \tif (IS_ERR(big_key_rng)) {",
        "// Line_Reference 357: \t\tbig_key_rng = NULL;",
        "// Line_Reference 358: \t\treturn -EFAULT;",
        "// Line_Reference 362: \tret = crypto_rng_reset(big_key_rng, NULL, crypto_rng_seedsize(big_key_rng));",
        "// Line_Reference 363: \tif (ret)",
        "// Line_Reference 364: \t\tgoto error;",
        "// Line_Reference 367: \tbig_key_skcipher = crypto_alloc_skcipher(big_key_alg_name,",
        "// Line_Reference 368: \t\t\t\t\t\t 0, CRYPTO_ALG_ASYNC);",
        "// Line_Reference 369: \tif (IS_ERR(big_key_skcipher)) {",
        "// Line_Reference 370: \t\tbig_key_skcipher = NULL;",
        "// Line_Reference 371: \t\tret = -EFAULT;",
        "// Line_Reference 372: \t\tgoto error;",
        "// Line_Reference 377: error:",
        "// Line_Reference 379: \tbig_key_rng = NULL;",
        "// Line_Reference 383: device_initcall(big_key_init);",
        "// Line_Reference 384: late_initcall(big_key_crypto_init);"
    ]
}
