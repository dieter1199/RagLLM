{
    "cve_id": "CVE-2016-9262",
    "cve_description": "Multiple integer overflows in the (1) jas_realloc function in base/jas_malloc.c and (2) mem_resize function in base/jas_stream.c in JasPer before 1.900.22 allow remote attackers to cause a denial of service via a crafted image, which triggers use after free vulnerabilities.",
    "cve_publish_date": "2017-03-23",
    "cwe_id": "CWE-190",
    "cwe_name": "Integer Overflow or Wraparound",
    "cwe_description": "The product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number.",
    "commit_message": "Made some changes to the I/O stream library for memory streams.\nThere were a number of potential problems due to the possibility\nof integer overflow.\nChanged some integral types to the larger types size_t or ssize_t.\nFor example, the function mem_resize now takes the buffer size parameter\nas a size_t.\nAdded a new function jas_stream_memopen2, which takes a\nbuffer size specified as a size_t instead of an int.\nThis can be used in jas_image_cmpt_create to avoid potential\noverflow problems.\n\nAdded a new function jas_deprecated to warn about reliance on\ndeprecated library behavior.",
    "type_of_change": "Modification",
    "filename_of_changes": "jas_stream.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "170",
    "number_of_lines_deleted_vulnerable_to_cve": "13",
    "vulnerable_lines": [
        "// Line_Reference 991: \tint n;",
        "// Line_Reference 1004: static int mem_resize(jas_stream_memobj_t *m, int bufsize)",
        "// Line_Reference 1009: \tassert(bufsize >= 0);",
        "// Line_Reference 1011: \tJAS_DBGLOG(100, (\"mem_resize(%p, %d)\\n\", m, bufsize));",
        "// Line_Reference 1025: \tint n;",
        "// Line_Reference 1028: \tlong newbufsize;",
        "// Line_Reference 1029: \tlong newpos;",
        "// Line_Reference 1039: \t\t\tnewbufsize <<= 1;",
        "// Line_Reference 1040: \t\t\tassert(newbufsize >= 0);",
        "// Line_Reference 1042: \t\tJAS_DBGLOG(100, (\"mem_write resizing from %d to %z\\n\", m->bufsize_,",
        "// Line_Reference 1044: \t\tJAS_DBGLOG(100, (\"mem_write resizing from %d to %ul\\n\", m->bufsize_,",
        "// Line_Reference 1045: \t\t  JAS_CAST(unsigned long, newbufsize)));",
        "// Line_Reference 1079: \tlong newpos;"
    ]
}
