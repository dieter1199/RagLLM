// Loading plugins inside the asynchronous block below stops the page from loading so a
// hardcoded message for the warning dialog is used since the resources are loadd below
var warning = 'The page has requested to load the following plugin(s):\n \n {1}\n \n Would you like to load these plugin(s) now?\n \n NOTE : Only allow plugins to run if you fully understand the security implications of doing so.\n';
var tmp = window.location.protocol + '//' + window.location.host;
var local = true;
for (var i = 0; i < plugins.length && local; i++)
{
if (plugins[i].charAt(0) != '/' && plugins[i].substring(0, tmp.length) != tmp)
{
local = false;
}
}
if (local || mxUtils.confirm(mxResources.replacePlaceholders(warning, [plugins.join('\n')]).replace(/\\n/g, '\n')))
for (var i = 0; i < plugins.length; i++)
try
if (App.pluginsLoaded[plugins[i]] == null)
App.pluginsLoaded[plugins[i]] = true;
App.embedModePluginsCount++;
if (plugins[i].charAt(0) == '/')
{
plugins[i] = PLUGINS_BASE_PATH + plugins[i];
}
mxscript(plugins[i]);
catch (e)
// ignore
var trustedPlugins = {};
for (var key in App.pluginRegistry)
{
trustedPlugins[App.pluginRegistry[key]] = true;
}
// Only allows trusted plugins
function checkPlugins(plugins)
{
if (plugins != null)
{
for (var i = 0; i < plugins.length; i++)
{
if (!trustedPlugins[plugins[i]])
{
throw new Error(mxResources.get('invalidInput') + ' "' + plugins[i]) + '"';
}
}
}
return true;
};
if (value != null && checkPlugins(value.plugins))
Editor.configure(data.config, true);
var url = PLUGINS_BASE_PATH + App.pluginRegistry[plugins[i]];
if (url != null)
if (lic != null && lic.plugins != null)
{
App.loadPlugins(lic.plugins.split(';'), true);
}
if (uiTheme == 'atlas' || urlParams['atlas'] == '1')
{
this.buttonContainer.style.paddingRight = '12px';
this.buttonContainer.style.paddingTop = '6px';
this.buttonContainer.style.right = urlParams['noLangIcon'] == '1'? '0' : '25px';
}
else if (uiTheme != 'min')
{
this.buttonContainer.style.paddingRight = '38px';
this.buttonContainer.style.paddingTop = '6px';
}
this.toggleFormatElement.style.right = (uiTheme != 'atlas' && urlParams['embed'] != '1') ? '30px' : '10px';
this.fullscreenElement = document.createElement('a');
this.fullscreenElement.style.position = 'absolute';
this.fullscreenElement.style.display = 'inline-block';
this.fullscreenElement.style.top = (uiTheme == 'atlas') ? '8px' : '6px';
this.fullscreenElement.style.right = (uiTheme != 'atlas' && urlParams['embed'] != '1') ? '50px' : '30px';
this.fullscreenElement.style.padding = '2px';
this.fullscreenElement.style.fontSize = '14px';
this.fullscreenElement.className = (uiTheme != 'atlas') ? 'geButton geAdaptiveAsset' : '';
this.fullscreenElement.style.width = '16px';
this.fullscreenElement.style.height = '16px';
this.fullscreenElement.style.backgroundPosition = '50% 50%';
this.fullscreenElement.style.backgroundSize = '16px 16px';
this.fullscreenElement.style.backgroundRepeat = 'no-repeat';
if (uiTheme != 'atlas')
this.darkModeElement = document.createElement('a');
this.darkModeElement.style.position = 'absolute';
this.darkModeElement.style.display = 'inline-block';
this.darkModeElement.style.top = (uiTheme == 'atlas') ? '8px' : '6px';
this.darkModeElement.style.right = (uiTheme != 'atlas' && urlParams['embed'] != '1') ? '70px' : '50px';
this.darkModeElement.style.padding = '2px';
this.darkModeElement.style.fontSize = '14px';
this.darkModeElement.className = (uiTheme != 'atlas') ? 'geButton geAdaptiveAsset' : '';
this.darkModeElement.style.width = '16px';
this.darkModeElement.style.height = '16px';
this.darkModeElement.style.backgroundPosition = '50% 50%';
this.darkModeElement.style.backgroundSize = '16px 16px';
this.darkModeElement.style.backgroundRepeat = 'no-repeat';
this.darkModeElement.style.backgroundImage = 'url(\'' + ((Editor.isDarkMode()) ?
this.actions.get('toggleDarkMode').funct();
mxEvent.addListener(this.fullscreenElement, 'click', mxUtils.bind(this, function(evt)
{
var visible = this.fullscreenMode;
EditorUi.logEvent({category: 'TOOLBAR-ACTION-',
action: 'fullscreen' , currentstate: visible});
if (uiTheme != 'atlas' && urlParams['embed'] != '1')
{
this.toggleCompactMode(visible);
}
if (!visible)
{
initialPosition = this.hsplitPosition;
}
this.hsplitPosition = (visible) ? initialPosition : 0;
this.toggleFormatPanel(visible);
this.fullscreenMode = !visible;
mxEvent.consume(evt);
}));
