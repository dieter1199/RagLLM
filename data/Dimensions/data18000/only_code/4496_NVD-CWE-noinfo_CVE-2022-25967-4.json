import { copyProps } from "./utils.js";
/** Express.js settings may be stored here */
settings?: {
[key: string]: any; // eslint-disable-line @typescript-eslint/no-explicit-any
};
* - `renderFile(filename, dataAndConfig, [cb])`
*   - Eta will merge `dataAndConfig` into `eta.config`
* let rendered = await eta.renderFile("./template", {...data, cache: true})
However, with Express, configuration options will be passed along with the data.
Thus, Express will call renderFile with (filename, dataAndOptions, cb)
And we want to also make (filename, data, options, cb) available
data = data || {}; // If data is undefined, we don't want accessing data.settings to error
// Otherwise, get the config from the data object
// And then grab some config options from data.settings
// Which is where Express sometimes stores them
renderConfig = getConfig(data as PartialConfig) as EtaConfigWithFilename;
if (data.settings) {
// Pull a few things from known locations
if (data.settings.views) {
renderConfig.views = data.settings.views;
}
if (data.settings["view cache"]) {
renderConfig.cache = true;
}
// Undocumented after Express 2, but still usable, esp. for
// items that are unsafe to be passed along with data, like `root`
const viewOpts = data.settings["view options"];
if (viewOpts) {
copyProps(renderConfig, viewOpts);
}
}
* - `renderFile(filename, dataAndConfig, [cb])`
*   - Eta will merge `dataAndConfig` into `eta.config`
* let rendered = await eta.renderFile("./template", {...data, cache: true})
