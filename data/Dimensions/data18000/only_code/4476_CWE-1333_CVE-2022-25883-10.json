// First, split based on boolean or ||
this.set = range
.map(r => this.parseRange(r.trim()))
throw new TypeError(`Invalid SemVer Range: ${range}`)
.map((comps) => {
return comps.join(' ').trim()
})
range = range.trim()
// normalize spaces
range = range.split(/\s+/).join(' ')
re,
const replaceTildes = (comp, options) =>
comp.trim().split(/\s+/).map((c) => {
return replaceTilde(c, options)
}).join(' ')
const replaceCarets = (comp, options) =>
comp.trim().split(/\s+/).map((c) => {
return replaceCaret(c, options)
}).join(' ')
return comp.split(/\s+/).map((c) => {
return replaceXRange(c, options)
}).join(' ')
return comp.trim().replace(re[t.STAR], '')
return comp.trim()
return (`${from} ${to}`).trim()
