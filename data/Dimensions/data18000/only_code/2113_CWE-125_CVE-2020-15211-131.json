const TfLiteTensor* input_to_forget_weights =
GetInput(context, node, lstm::full::kInputToForgetWeightsTensor);
const TfLiteTensor* input_to_cell_weights =
GetInput(context, node, lstm::full::kInputToCellWeightsTensor);
const TfLiteTensor* recurrent_to_forget_weights =
GetInput(context, node, lstm::full::kRecurrentToForgetWeightsTensor);
const TfLiteTensor* recurrent_to_cell_weights =
GetInput(context, node, lstm::full::kRecurrentToCellWeightsTensor);
const TfLiteTensor* forget_gate_bias =
GetInput(context, node, lstm::full::kForgetGateBiasTensor);
const TfLiteTensor* cell_gate_bias =
GetInput(context, node, lstm::full::kCellGateBiasTensor);
const TfLiteTensor* output_gate_bias =
GetInput(context, node, lstm::full::kOutputGateBiasTensor);
const TfLiteTensor* forget_layer_norm_coefficients =
GetInput(context, node, lstm::full::kForgetLayerNormCoefficientsTensor);
TF_LITE_ENSURE(context, forget_layer_norm_coefficients != nullptr);
const TfLiteTensor* cell_layer_norm_coefficients =
GetInput(context, node, lstm::full::kCellLayerNormCoefficientsTensor);
TF_LITE_ENSURE(context, cell_layer_norm_coefficients != nullptr);
const TfLiteTensor* output_layer_norm_coefficients =
GetInput(context, node, lstm::full::kOutputLayerNormCoefficientsTensor);
TF_LITE_ENSURE(context, output_layer_norm_coefficients != nullptr);
const TfLiteTensor* input = GetInput(context, node, lstm::full::kInputTensor);
const TfLiteTensor* input_to_output_weights =
GetInput(context, node, lstm::full::kInputToOutputWeightsTensor);
const TfLiteTensor* recurrent_to_output_weights =
GetInput(context, node, lstm::full::kRecurrentToOutputWeightsTensor);
TfLiteTensor* output = GetOutput(context, node, lstm::full::kOutputTensor);
TfLiteTensor* scratch_buffer = GetTemporary(context, node, kScratchBuffer);
TfLiteTensor* input_quantized =
GetTemporary(context, node, kInputQuantized);
TfLiteTensor* output_state_quantized =
GetTemporary(context, node, kOutputStateQuantized);
TfLiteTensor* cell_state_quantized =
GetTemporary(context, node, kCellStateQuantized);
TfLiteTensor* input_sf = GetTemporary(context, node, kInputScalingFactors);
TfLiteTensor* output_state_sf =
GetTemporary(context, node, kOutputStateScalingFactors);
TfLiteTensor* prod_scaling_factors =
GetTemporary(context, node, kProductScalingFactors);
TfLiteTensor* recovered_cell_weights =
GetTemporary(context, node, kRecoveredCellWeights);
TfLiteTensor* accum_scratch = GetTemporary(context, node, kAccumScratch);
TfLiteTensor* input_zp = GetTemporary(context, node, kInputZeroPoints);
TfLiteTensor* output_state_zp =
GetTemporary(context, node, kOutputStateZeroPoints);
TfLiteTensor* row_sums = GetTemporary(context, node, kRowSums);
const TfLiteTensor* input = GetInput(context, node, lstm::full::kInputTensor);
const TfLiteTensor* input_to_forget_weights =
GetInput(context, node, lstm::full::kInputToForgetWeightsTensor);
const TfLiteTensor* input_to_cell_weights =
GetInput(context, node, lstm::full::kInputToCellWeightsTensor);
const TfLiteTensor* input_to_output_weights =
GetInput(context, node, lstm::full::kInputToOutputWeightsTensor);
const TfLiteTensor* recurrent_to_forget_weights =
GetInput(context, node, lstm::full::kRecurrentToForgetWeightsTensor);
const TfLiteTensor* recurrent_to_cell_weights =
GetInput(context, node, lstm::full::kRecurrentToCellWeightsTensor);
const TfLiteTensor* recurrent_to_output_weights =
GetInput(context, node, lstm::full::kRecurrentToOutputWeightsTensor);
const TfLiteTensor* forget_gate_bias =
GetInput(context, node, lstm::full::kForgetGateBiasTensor);
const TfLiteTensor* cell_gate_bias =
GetInput(context, node, lstm::full::kCellGateBiasTensor);
const TfLiteTensor* output_gate_bias =
GetInput(context, node, lstm::full::kOutputGateBiasTensor);
TfLiteTensor* scratch_buffer = GetTemporary(context, node, kScratchBuffer);
TF_LITE_ENSURE(context, output_state != nullptr);
TF_LITE_ENSURE(context, cell_state != nullptr);
TfLiteTensor* output = GetOutput(context, node, lstm::full::kOutputTensor);
TfLiteTensor* row_sums = GetTemporary(context, node, kRowSums);