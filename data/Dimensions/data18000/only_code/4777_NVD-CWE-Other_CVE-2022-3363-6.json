from unittest.mock import MagicMock
self.listener = MagicMock()
cherrypy.engine.subscribe('queue_mail', self.listener.queue_email, priority=50)
try:
self.getPage("/mfa/")
self.assertStatus(200)
self.assertInBody("A new verification code has been sent to your email.")
# Extract code from email between <strong> and </strong>
self.listener.queue_email.assert_called_once()
message = self.listener.queue_email.call_args[1]['message']
code = message.split('<strong>', 1)[1].split('</strong>')[0]
# Login to MFA
self.getPage("/mfa/", method='POST', body={'code': code, 'submit': '1'})
self.assertStatus(303)
finally:
cherrypy.engine.unsubscribe('queue_mail', self.listener.queue_email)
# Register an email listeer to capture email send
self.listener = MagicMock()
cherrypy.engine.subscribe('queue_mail', self.listener.queue_email, priority=50)
try:
self.getPage("/prefs/mfa", method='POST', body={action: '1'})
self.assertStatus(200)
self.assertInBody("A new verification code has been sent to your email.")
# Extract code from email between <strong> and </strong>
self.listener.queue_email.assert_called_once()
message = self.listener.queue_email.call_args[1]['message']
return message.split('<strong>', 1)[1].split('</strong>')[0]
finally:
cherrypy.engine.unsubscribe('queue_mail', self.listener.queue_email)
('enable_mfa', UserObject.DISABLED_MFA, UserObject.ENABLED_MFA),
('disable_mfa', UserObject.ENABLED_MFA, UserObject.DISABLED_MFA),
def test_with_valid_code(self, action, initial_mfa, expected_mfa):
# Then no email get sent