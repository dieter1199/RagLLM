#include "mounterinterface.h"
#include "avahi/avahi.h"
#include "avahi/avahiservice.h"
const QLatin1String RemoteFsDevice::constDomainQuery("domain");
const QLatin1String RemoteFsDevice::constSambaProtocol("smb");
const QLatin1String RemoteFsDevice::constServiceNameQuery("name");
const QLatin1String RemoteFsDevice::constSambaAvahiProtocol("smb-avahi");
return d.isLocalFile() || RemoteFsDevice::constSshfsProtocol==d.url.scheme() ||
RemoteFsDevice::constSambaProtocol==d.url.scheme() || RemoteFsDevice::constSambaAvahiProtocol==d.url.scheme();
return RemoteFsDevice::constSshfsProtocol==d.url.scheme() ||
RemoteFsDevice::constSambaProtocol==d.url.scheme() || RemoteFsDevice::constSambaAvahiProtocol==d.url.scheme();
void RemoteFsDevice::serviceAdded(const QString &name)
{
if (name==details.serviceName && constSambaAvahiProtocol==details.url.scheme()) {
sub=tr("Available");
updateStatus();
}
}
void RemoteFsDevice::serviceRemoved(const QString &name)
{
if (name==details.serviceName && constSambaAvahiProtocol==details.url.scheme()) {
sub=tr("Not Available");
updateStatus();
}
}
, mounterIface(0)
, mounterIface(0)
MpdCantataMounterInterface * RemoteFsDevice::mounter()
{
if (!mounterIface) {
if (!QDBusConnection::systemBus().interface()->isServiceRegistered(MpdCantataMounterInterface::staticInterfaceName())) {
QDBusConnection::systemBus().interface()->startService(MpdCantataMounterInterface::staticInterfaceName());
}
mounterIface=new MpdCantataMounterInterface(MpdCantataMounterInterface::staticInterfaceName(),
"/Mounter", QDBusConnection::systemBus(), this);
connect(mounterIface, SIGNAL(mountStatus(const QString &, int, int)), SLOT(mountStatus(const QString &, int, int)));
connect(mounterIface, SIGNAL(umountStatus(const QString &, int, int)), SLOT(umountStatus(const QString &, int, int)));
}
return mounterIface;
}
if (constSambaAvahiProtocol==details.url.scheme()) {
Details det=details;
AvahiService *srv=Avahi::self()->getService(det.serviceName);
if (!srv || srv->getHost().isEmpty() || 0==srv->getPort()) {
emit error(tr("Failed to resolve connection details for %1").arg(details.name));
return;
}
if (constPromptPassword==det.url.password()) {
bool ok=false;
QString passwd=InputDialog::getPassword(QString(), &ok, QApplication::activeWindow());
if (!ok) {
return;
}
det.url.setPassword(passwd);
}
det.url.setScheme(constSambaProtocol);
det.url.setHost(srv->getHost());
det.url.setPort(srv->getPort());
mounter()->mount(det.url.toString(), mountPoint(details, true), getuid(), getgid(), getpid());
setStatusMessage(tr("Connecting..."));
messageSent=true;
return;
}
if (constSambaProtocol==details.url.scheme()) {
Details det=details;
if (constPromptPassword==det.url.password()) {
bool ok=false;
QString passwd=InputDialog::getPassword(QString(), &ok, QApplication::activeWindow());
if (!ok) {
return;
}
det.url.setPassword(passwd);
}
mounter()->mount(det.url.toString(), mountPoint(details, true), getuid(), getgid(), getpid());
setStatusMessage(tr("Connecting..."));
messageSent=true;
return;
}
if (constSambaProtocol==details.url.scheme() || constSambaAvahiProtocol==details.url.scheme()) {
mounter()->umount(mountPoint(details, false), getpid());
setStatusMessage(tr("Disconnecting..."));
messageSent=true;
return;
}
if (RemoteFsDevice::constSambaAvahiProtocol==details.url.scheme()) {
// Start Avahi listener...
Avahi::self();
QUrlQuery q(details.url);
if (q.hasQueryItem(constServiceNameQuery)) {
details.serviceName=q.queryItemValue(constServiceNameQuery);
}
if (!details.serviceName.isEmpty()) {
AvahiService *srv=Avahi::self()->getService(details.serviceName);
if (!srv || srv->getHost().isEmpty()) {
sub=tr("Not Available");
} else {
sub=tr("Available");
}
}
connect(Avahi::self(), SIGNAL(serviceAdded(QString)), SLOT(serviceAdded(QString)));
connect(Avahi::self(), SIGNAL(serviceRemoved(QString)), SLOT(serviceRemoved(QString)));
}
