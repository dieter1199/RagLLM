import { UnderscoreID, zodId } from "#lib/mongo";
import { isAuthenticated } from "#lib/middleware";
import { procedure, router } from "#lib/trpc";
import * as errors from "#lib/errors";
import { createEventPublisher, createEventSubscription } from "#lib/pub-sub";
getUsersCollection,
CommentMember
type CommentEvent =
| { action: "createThread"; data: CommentThread }
| { action: "resolveThread"; data: Pick<CommentThread, "id" | "fragment" | "resolved"> }
| { action: "deleteThread"; data: Pick<CommentThread, "id" | "fragment"> }
| {
action: "createComment";
data: Omit<Comment, "memberId"> & { member: CommentMember | null };
}
| {
action: "updateComment";
data: Pick<Comment, "id" | "content">;
}
| {
action: "deleteComment";
data: Pick<Comment, "id">;
};
const publishEvent = createEventPublisher<CommentEvent>((contentPieceId) => {
return `comments:${contentPieceId}`;
});
publishEvent(ctx, `${input.contentPieceId}`, {
publishEvent(ctx, `${existingThread.contentPieceId}`, {
publishEvent(ctx, `${existingThread.contentPieceId}`, {
publishEvent(ctx, `${existingThread.contentPieceId}`, {
publishEvent(ctx, `${existingThread.contentPieceId}`, {
publishEvent(ctx, `${existingThread.contentPieceId}`, {
return createEventSubscription<CommentEvent>(ctx, `comments:${input.contentPieceId}`);
