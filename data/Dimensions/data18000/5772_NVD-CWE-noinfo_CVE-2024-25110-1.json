{
    "cve_id": "CVE-2024-25110",
    "cve_description": "The UAMQP is a general purpose C library for AMQP 1.0. During a call to open_get_offered_capabilities, a memory allocation may fail causing a use-after-free issue and if a client called it during connection communication it may cause a remote code execution. Users are advised to update the submodule with commit `30865c9c`. There are no known workarounds for this vulnerability.",
    "cve_publish_date": "2024-02-12",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Use safe math in message.c (#452)",
    "type_of_change": "Modification",
    "filename_of_changes": "message.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "127",
    "number_of_lines_deleted_vulnerable_to_cve": "81",
    "vulnerable_lines": [
        "// Line_Reference 235:                 size_t i;",
        "// Line_Reference 237:                 result->body_amqp_data_items = (BODY_AMQP_DATA*)calloc(1, (source_message->body_amqp_data_count * sizeof(BODY_AMQP_DATA)));",
        "// Line_Reference 238:                 if (result->body_amqp_data_items == NULL)",
        "// Line_Reference 240:                     /* Codes_SRS_MESSAGE_01_012: [ If any cloning operation for the members of the source message fails, then `message_clone` shall fail and return NULL. ]*/",
        "// Line_Reference 241:                     LogError(\"Cannot allocate memory for body data sections\");",
        "// Line_Reference 242:                     message_destroy(result);",
        "// Line_Reference 247:                     for (i = 0; i < source_message->body_amqp_data_count; i++)",
        "// Line_Reference 249:                         result->body_amqp_data_items[i].body_data_section_length = source_message->body_amqp_data_items[i].body_data_section_length;",
        "// Line_Reference 251:                         /* Codes_SRS_MESSAGE_01_011: [If an AMQP data has been set as message body on the source message it shall be cloned by allocating memory for the binary payload.] */",
        "// Line_Reference 252:                         result->body_amqp_data_items[i].body_data_section_bytes = (unsigned char*)malloc(source_message->body_amqp_data_items[i].body_data_section_length);",
        "// Line_Reference 253:                         if (result->body_amqp_data_items[i].body_data_section_bytes == NULL)",
        "// Line_Reference 255:                             LogError(\"Cannot allocate memory for body data section %u\", (unsigned int)i);",
        "// Line_Reference 256:                             break;",
        "// Line_Reference 258:                         else",
        "// Line_Reference 260:                             (void)memcpy(result->body_amqp_data_items[i].body_data_section_bytes, source_message->body_amqp_data_items[i].body_data_section_bytes, result->body_amqp_data_items[i].body_data_section_length);",
        "// Line_Reference 263: ",
        "// Line_Reference 264:                     result->body_amqp_data_count = i;",
        "// Line_Reference 265:                     if (i < source_message->body_amqp_data_count)",
        "// Line_Reference 266:                     {",
        "// Line_Reference 267:                         /* Codes_SRS_MESSAGE_01_012: [ If any cloning operation for the members of the source message fails, then `message_clone` shall fail and return NULL. ]*/",
        "// Line_Reference 268:                         message_destroy(result);",
        "// Line_Reference 269:                         result = NULL;",
        "// Line_Reference 270:                     }",
        "// Line_Reference 276:                 size_t i;",
        "// Line_Reference 278:                 result->body_amqp_sequence_items = (AMQP_VALUE*)calloc(1, (source_message->body_amqp_sequence_count * sizeof(AMQP_VALUE)));",
        "// Line_Reference 279:                 if (result->body_amqp_sequence_items == NULL)",
        "// Line_Reference 281:                     /* Codes_SRS_MESSAGE_01_012: [ If any cloning operation for the members of the source message fails, then `message_clone` shall fail and return NULL. ]*/",
        "// Line_Reference 282:                     LogError(\"Cannot allocate memory for body AMQP sequences\");",
        "// Line_Reference 288:                     for (i = 0; i < source_message->body_amqp_sequence_count; i++)",
        "// Line_Reference 289:                     {",
        "// Line_Reference 290:                         /* Codes_SRS_MESSAGE_01_160: [ If AMQP sequences are set as AMQP body they shall be cloned by calling `amqpvalue_clone`. ] */",
        "// Line_Reference 291:                         result->body_amqp_sequence_items[i] = amqpvalue_clone(source_message->body_amqp_sequence_items[i]);",
        "// Line_Reference 292:                         if (result->body_amqp_sequence_items[i] == NULL)",
        "// Line_Reference 293:                         {",
        "// Line_Reference 294:                             LogError(\"Cannot clone AMQP sequence %u\", (unsigned int)i);",
        "// Line_Reference 295:                             break;",
        "// Line_Reference 296:                         }",
        "// Line_Reference 297:                     }",
        "// Line_Reference 298: ",
        "// Line_Reference 299:                     result->body_amqp_sequence_count = i;",
        "// Line_Reference 300:                     if (i < source_message->body_amqp_sequence_count)",
        "// Line_Reference 306:                 }",
        "// Line_Reference 1020:             /* Codes_SRS_MESSAGE_01_086: [ `message_add_body_amqp_data` shall add the contents of `amqp_data` to the list of AMQP data values for the body of the message identified by `message`. ]*/",
        "// Line_Reference 1021:             BODY_AMQP_DATA* new_body_amqp_data_items = (BODY_AMQP_DATA*)realloc(message->body_amqp_data_items, sizeof(BODY_AMQP_DATA) * (message->body_amqp_data_count + 1));",
        "// Line_Reference 1022:             if (new_body_amqp_data_items == NULL)",
        "// Line_Reference 1024:                 /* Codes_SRS_MESSAGE_01_153: [ If allocating memory to store the added AMQP data fails, `message_add_body_amqp_data` shall fail and return a non-zero value. ]*/",
        "// Line_Reference 1025:                 LogError(\"Cannot allocate memory for body AMQP data items\");",
        "// Line_Reference 1030:                 message->body_amqp_data_items = new_body_amqp_data_items;",
        "// Line_Reference 1031: ",
        "// Line_Reference 1032:                 if (amqp_data.length == 0)",
        "// Line_Reference 1034:                     message->body_amqp_data_items[message->body_amqp_data_count].body_data_section_bytes = NULL;",
        "// Line_Reference 1035:                     message->body_amqp_data_items[message->body_amqp_data_count].body_data_section_length = 0;",
        "// Line_Reference 1036:                     message->body_amqp_data_count++;",
        "// Line_Reference 1037: ",
        "// Line_Reference 1038:                     /* Codes_SRS_MESSAGE_01_087: [ On success it shall return 0. ]*/",
        "// Line_Reference 1039:                     result = 0;",
        "// Line_Reference 1043:                     message->body_amqp_data_items[message->body_amqp_data_count].body_data_section_bytes = (unsigned char*)malloc(amqp_data.length);",
        "// Line_Reference 1044:                     if (message->body_amqp_data_items[message->body_amqp_data_count].body_data_section_bytes == NULL)",
        "// Line_Reference 1045:                     {",
        "// Line_Reference 1046:                         /* Codes_SRS_MESSAGE_01_153: [ If allocating memory to store the added AMQP data fails, `message_add_body_amqp_data` shall fail and return a non-zero value. ]*/",
        "// Line_Reference 1047:                         LogError(\"Cannot allocate memory for body AMQP data to be added\");",
        "// Line_Reference 1048:                         result = MU_FAILURE;",
        "// Line_Reference 1049:                     }",
        "// Line_Reference 1050:                     else",
        "// Line_Reference 1052:                         message->body_amqp_data_items[message->body_amqp_data_count].body_data_section_length = amqp_data.length;",
        "// Line_Reference 1053:                         (void)memcpy(message->body_amqp_data_items[message->body_amqp_data_count].body_data_section_bytes, amqp_data.bytes, amqp_data.length);",
        "// Line_Reference 1253:             AMQP_VALUE* new_body_amqp_sequence_items = (AMQP_VALUE*)realloc(message->body_amqp_sequence_items, sizeof(AMQP_VALUE) * (message->body_amqp_sequence_count + 1));",
        "// Line_Reference 1254:             if (new_body_amqp_sequence_items == NULL)",
        "// Line_Reference 1256:                 /* Codes_SRS_MESSAGE_01_158: [ If allocating memory in order to store the sequence fails, `message_add_body_amqp_sequence` shall fail and return a non-zero value. ]*/",
        "// Line_Reference 1257:                 LogError(\"Cannot allocate enough memory for sequence items\");",
        "// Line_Reference 1262:                 message->body_amqp_sequence_items = new_body_amqp_sequence_items;",
        "// Line_Reference 1264:                 /* Codes_SRS_MESSAGE_01_110: [ `message_add_body_amqp_sequence` shall add the contents of `sequence` to the list of AMQP sequences for the body of the message identified by `message`. ]*/",
        "// Line_Reference 1265:                 /* Codes_SRS_MESSAGE_01_156: [ The AMQP sequence shall be cloned by calling `amqpvalue_clone`. ]*/",
        "// Line_Reference 1266:                 message->body_amqp_sequence_items[message->body_amqp_sequence_count] = amqpvalue_clone(sequence_list);",
        "// Line_Reference 1267:                 if (message->body_amqp_sequence_items[message->body_amqp_sequence_count] == NULL)",
        "// Line_Reference 1269:                     /* Codes_SRS_MESSAGE_01_157: [ If `amqpvalue_clone` fails, `message_add_body_amqp_sequence` shall fail and return a non-zero value. ]*/",
        "// Line_Reference 1270:                     LogError(\"Cloning sequence failed\");",
        "// Line_Reference 1275:                     /* Codes_SRS_MESSAGE_01_114: [ If adding the AMQP sequence fails, the previous value shall be preserved. ]*/",
        "// Line_Reference 1276:                     message->body_amqp_sequence_count++;",
        "// Line_Reference 1278:                     /* Codes_SRS_MESSAGE_01_111: [ On success it shall return 0. ]*/",
        "// Line_Reference 1279:                     result = 0;"
    ]
}
