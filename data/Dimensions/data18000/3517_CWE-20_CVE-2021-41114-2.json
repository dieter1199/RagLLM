{
    "cve_id": "CVE-2021-41114",
    "cve_description": "TYPO3 is an open source PHP based web content management system released under the GNU GPL. It has been discovered that TYPO3 CMS is susceptible to host spoofing due to improper validation of the HTTP Host header. TYPO3 uses the HTTP Host header, for example, to generate absolute URLs during the frontend rendering process. Since the host header itself is provided by the client, it can be forged to any value, even in a name-based virtual hosts environment. This vulnerability is the same as described in TYPO3-CORE-SA-2014-001 (CVE-2014-3941). A regression, introduced during TYPO3 v11 development, led to this situation. The already existing setting $GLOBALS['TYPO3_CONF_VARS']['SYS']['trustedHostsPattern'] (used as an effective mitigation strategy in previous TYPO3 versions) was not evaluated anymore, and reintroduced the vulnerability.",
    "cve_publish_date": "2021-10-05",
    "cwe_id": "CWE-20",
    "cwe_name": "Improper Input Validation",
    "cwe_description": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.",
    "commit_message": "[SECURITY] Verify HTTP_HOST via FE/BE middleware\n\nAvoid a dependency cycle between HTTP_HOST generation\nand verification.\nAs $GLOBALS['TYPO3_REQUEST'] is not available\nduring ServerRequestFactory::fromGlobals(), HTTP_HOST\nverification can not be performed at that point.\nIt is therefore delayed into a context aware middleware\ninstead of being skipped because of missing $GLOBALS.\n\nPositive advantage of moving the verification into\nfrontend and backend middlewares, is that context\nchecks to exclude CLI/installtool can be dropped.\n\nAs a side effect this also fixes the frontend to installtool\nredirect if TYPO3 is not yet configured and running with\nan invalid SERVER_NAME, as ServerRequestFactory::fromGlobals()\ndoesn't fail.\n\nReleases: master\nResolves: #95395\nChange-Id: Idd3a3449a878cd625dad0d04892d9f0e710ca1a9\nSecurity-Bulletin: TYPO3-CORE-SA-2021-015\nSecurity-References: CVE-2021-41114\nReviewed-on: https://review.typo3.org/c/Packages/TYPO3.CMS/+/71438\nTested-by: Oliver Hader <oliver.hader@typo3.org>\nReviewed-by: Oliver Hader <oliver.hader@typo3.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "GeneralUtility.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "7",
    "number_of_lines_deleted_vulnerable_to_cve": "87",
    "vulnerable_lines": [
        "// Line_Reference 52:     /**",
        "// Line_Reference 53:      * State of host header value security check",
        "// Line_Reference 54:      * in order to avoid unnecessary multiple checks during one request",
        "// Line_Reference 55:      *",
        "// Line_Reference 56:      * @var bool",
        "// Line_Reference 57:      */",
        "// Line_Reference 58:     protected static $allowHostHeaderValue = false;",
        "// Line_Reference 59: ",
        "// Line_Reference 2566:                 if (!static::isAllowedHostHeaderValue($retVal)) {",
        "// Line_Reference 2567:                     throw new \\UnexpectedValueException(",
        "// Line_Reference 2568:                         'The current host header value does not match the configured trusted hosts pattern! Check the pattern defined in $GLOBALS[\\'TYPO3_CONF_VARS\\'][\\'SYS\\'][\\'trustedHostsPattern\\'] and adapt it, if you want to allow the current host header \\'' . $retVal . '\\' for your installation.',",
        "// Line_Reference 2569:                         1396795884",
        "// Line_Reference 2570:                     );",
        "// Line_Reference 2571:                 }",
        "// Line_Reference 2698:      * If the pattern is not defined (which only can happen early in the bootstrap), deny any value.",
        "// Line_Reference 2699:      * The result is saved, so the check needs to be executed only once.",
        "// Line_Reference 2706:         if (static::$allowHostHeaderValue === true) {",
        "// Line_Reference 2707:             return true;",
        "// Line_Reference 2708:         }",
        "// Line_Reference 2709: ",
        "// Line_Reference 2710:         if (static::isInternalRequestType()) {",
        "// Line_Reference 2711:             return static::$allowHostHeaderValue = true;",
        "// Line_Reference 2712:         }",
        "// Line_Reference 2713: ",
        "// Line_Reference 2714:         // Deny the value if trusted host patterns is empty, which means we are early in the bootstrap",
        "// Line_Reference 2715:         if (empty($GLOBALS['TYPO3_CONF_VARS']['SYS']['trustedHostsPattern'])) {",
        "// Line_Reference 2716:             return false;",
        "// Line_Reference 2717:         }",
        "// Line_Reference 2718: ",
        "// Line_Reference 2719:         if ($GLOBALS['TYPO3_CONF_VARS']['SYS']['trustedHostsPattern'] === self::ENV_TRUSTED_HOSTS_PATTERN_ALLOW_ALL) {",
        "// Line_Reference 2720:             static::$allowHostHeaderValue = true;",
        "// Line_Reference 2721:         } else {",
        "// Line_Reference 2722:             static::$allowHostHeaderValue = static::hostHeaderValueMatchesTrustedHostsPattern($hostHeaderValue);",
        "// Line_Reference 2723:         }",
        "// Line_Reference 2724: ",
        "// Line_Reference 2725:         return static::$allowHostHeaderValue;",
        "// Line_Reference 2726:     }",
        "// Line_Reference 2727: ",
        "// Line_Reference 2728:     /**",
        "// Line_Reference 2729:      * Checks if the provided host header value matches the trusted hosts pattern without any preprocessing.",
        "// Line_Reference 2730:      *",
        "// Line_Reference 2731:      * @param string $hostHeaderValue",
        "// Line_Reference 2732:      * @return bool",
        "// Line_Reference 2733:      * @internal",
        "// Line_Reference 2734:      */",
        "// Line_Reference 2735:     public static function hostHeaderValueMatchesTrustedHostsPattern($hostHeaderValue)",
        "// Line_Reference 2736:     {",
        "// Line_Reference 2737:         if ($GLOBALS['TYPO3_CONF_VARS']['SYS']['trustedHostsPattern'] === self::ENV_TRUSTED_HOSTS_PATTERN_SERVER_NAME) {",
        "// Line_Reference 2738:             $host = strtolower($hostHeaderValue);",
        "// Line_Reference 2739:             // Default port to be verified if HTTP_HOST does not contain explicit port information.",
        "// Line_Reference 2740:             // Deriving from raw/local webserver HTTPS information (not taking possible proxy configurations into account)",
        "// Line_Reference 2741:             // as we compare against the raw/local server information (SERVER_PORT).",
        "// Line_Reference 2742:             $port = self::webserverUsesHttps() ? '443' : '80';",
        "// Line_Reference 2743: ",
        "// Line_Reference 2744:             $parsedHostValue = parse_url('http://' . $host);",
        "// Line_Reference 2745:             if (isset($parsedHostValue['port'])) {",
        "// Line_Reference 2746:                 $host = $parsedHostValue['host'];",
        "// Line_Reference 2747:                 $port = (string)$parsedHostValue['port'];",
        "// Line_Reference 2748:             }",
        "// Line_Reference 2749: ",
        "// Line_Reference 2750:             // Allow values that equal the server name",
        "// Line_Reference 2751:             // Note that this is only secure if name base virtual host are configured correctly in the webserver",
        "// Line_Reference 2752:             $hostMatch = $host === strtolower($_SERVER['SERVER_NAME']) && $port === $_SERVER['SERVER_PORT'];",
        "// Line_Reference 2753:         } else {",
        "// Line_Reference 2754:             // In case name based virtual hosts are not possible, we allow setting a trusted host pattern",
        "// Line_Reference 2755:             // See https://typo3.org/teams/security/security-bulletins/typo3-core/typo3-core-sa-2014-001/ for further details",
        "// Line_Reference 2756:             $hostMatch = (bool)preg_match('/^' . $GLOBALS['TYPO3_CONF_VARS']['SYS']['trustedHostsPattern'] . '$/i', $hostHeaderValue);",
        "// Line_Reference 2757:         }",
        "// Line_Reference 2759:         return $hostMatch;",
        "// Line_Reference 2783:     /**",
        "// Line_Reference 2784:      * Allows internal requests to the install tool and from the command line.",
        "// Line_Reference 2785:      * We accept this risk to have the install tool always available.",
        "// Line_Reference 2786:      * Also CLI needs to be allowed as unfortunately AbstractUserAuthentication::getAuthInfoArray()",
        "// Line_Reference 2787:      * accesses HTTP_HOST without reason on CLI",
        "// Line_Reference 2788:      * Additionally, allows requests when no REQUESTTYPE is set, which can happen quite early in the",
        "// Line_Reference 2789:      * Bootstrap. See Application.php in EXT:backend/Classes/Http/.",
        "// Line_Reference 2790:      *",
        "// Line_Reference 2791:      * @return bool",
        "// Line_Reference 2792:      */",
        "// Line_Reference 2793:     protected static function isInternalRequestType()",
        "// Line_Reference 2794:     {",
        "// Line_Reference 2795:         return Environment::isCli()",
        "// Line_Reference 2796:             || !isset($GLOBALS['TYPO3_REQUEST'])",
        "// Line_Reference 2797:             || !($GLOBALS['TYPO3_REQUEST'] instanceof ServerRequestInterface)",
        "// Line_Reference 2798:             || (bool)((int)($GLOBALS['TYPO3_REQUEST'])->getAttribute('applicationType') & TYPO3_REQUESTTYPE_INSTALL);",
        "// Line_Reference 2799:     }",
        "// Line_Reference 2800: "
    ]
}
