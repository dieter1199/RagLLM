{
    "cve_id": "CVE-2022-31127",
    "cve_description": "NextAuth.js is a complete open source authentication solution for Next.js applications. An attacker can pass a compromised input to the e-mail [signin endpoint](https://next-auth.js.org/getting-started/rest-api#post-apiauthsigninprovider) that contains some malicious HTML, tricking the e-mail server to send it to the user, so they can perform a phishing attack. Eg.: `balazs@email.com, <a href=\"http://attacker.com\">Before signing in, claim your money!</a>`. This was previously sent to `balazs@email.com`, and the content of the email containing a link to the attacker's site was rendered in the HTML. This has been remedied in the following releases, by simply not rendering that e-mail in the HTML, since it should be obvious to the receiver what e-mail they used: next-auth v3 users before version 3.29.8 are impacted. (We recommend upgrading to v4, as v3 is considered unmaintained. next-auth v4 users before version 4.9.0 are impacted. If for some reason you cannot upgrade, the workaround requires you to sanitize the `email` parameter that is passed to `sendVerificationRequest` and rendered in the HTML. If you haven't created a custom `sendVerificationRequest`, you only need to upgrade. Otherwise, make sure to either exclude `email` from the HTML body or efficiently sanitize it.",
    "cve_publish_date": "2022-07-06",
    "cwe_id": "CWE-79",
    "cwe_name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
    "cwe_description": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
    "commit_message": "feat(providers): allow styling e-mail through `theme` option (#4841)\n\n* fix(core): move email handling\r\n\r\n* fix: don' use `replaceAll`\r\n\r\n* feat(providers): re-use `theme` for e-mail\r\n\r\n* docs: mention `theme` option for email\r\n\r\n* fix: don't render user e-mail in the email HTML body\r\n\r\n* docs: add missing comma\r\n\r\n* refactor: fix lint\r\n\r\n* refactor: fix lint",
    "type_of_change": "Modification",
    "filename_of_changes": "email.ts",
    "code_language": "TypeScript",
    "number_of_lines_added_for_mitigation": "65",
    "number_of_lines_deleted_vulnerable_to_cve": "55",
    "vulnerable_lines": [
        "// Line_Reference 19:   sendVerificationRequest: (params: {",
        "// Line_Reference 20:     identifier: string",
        "// Line_Reference 21:     url: string",
        "// Line_Reference 22:     expires: Date",
        "// Line_Reference 23:     provider: EmailConfig",
        "// Line_Reference 24:     token: string",
        "// Line_Reference 25:   }) => Awaitable<void>",
        "// Line_Reference 59:     server: {",
        "// Line_Reference 60:       host: \"localhost\",",
        "// Line_Reference 61:       port: 25,",
        "// Line_Reference 62:       auth: {",
        "// Line_Reference 63:         user: \"\",",
        "// Line_Reference 64:         pass: \"\",",
        "// Line_Reference 65:       },",
        "// Line_Reference 66:     },",
        "// Line_Reference 69:     async sendVerificationRequest({",
        "// Line_Reference 70:       identifier: email,",
        "// Line_Reference 71:       url,",
        "// Line_Reference 72:       provider: { server, from },",
        "// Line_Reference 73:     }) {",
        "// Line_Reference 75:       const transport = createTransport(server)",
        "// Line_Reference 76:       await transport.sendMail({",
        "// Line_Reference 77:         to: email,",
        "// Line_Reference 78:         from,",
        "// Line_Reference 81:         html: html({ url, host, email }),",
        "// Line_Reference 88: // Email HTML body",
        "// Line_Reference 89: function html({ url, host, email }: Record<\"url\" | \"host\" | \"email\", string>) {",
        "// Line_Reference 90:   // Insert invisible space into domains and email address to prevent both the",
        "// Line_Reference 91:   // email address and the domain from being turned into a hyperlink by email",
        "// Line_Reference 92:   // clients like Outlook and Apple mail, as this is confusing because it seems",
        "// Line_Reference 93:   // like they are supposed to click on their email address to sign in.",
        "// Line_Reference 94:   const escapedEmail = `${email.replace(/\\./g, \"&#8203;.\")}`",
        "// Line_Reference 95:   const escapedHost = `${host.replace(/\\./g, \"&#8203;.\")}`",
        "// Line_Reference 97:   // Some simple styling options",
        "// Line_Reference 98:   const backgroundColor = \"#f9f9f9\"",
        "// Line_Reference 99:   const textColor = \"#444444\"",
        "// Line_Reference 100:   const mainBackgroundColor = \"#ffffff\"",
        "// Line_Reference 101:   const buttonBackgroundColor = \"#346df1\"",
        "// Line_Reference 102:   const buttonBorderColor = \"#346df1\"",
        "// Line_Reference 103:   const buttonTextColor = \"#ffffff\"",
        "// Line_Reference 106: <body style=\"background: ${backgroundColor};\">",
        "// Line_Reference 107:   <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\">",
        "// Line_Reference 108:     <tr>",
        "// Line_Reference 109:       <td align=\"center\" style=\"padding: 10px 0px 20px 0px; font-size: 22px; font-family: Helvetica, Arial, sans-serif; color: ${textColor};\">",
        "// Line_Reference 110:         <strong>${escapedHost}</strong>",
        "// Line_Reference 111:       </td>",
        "// Line_Reference 112:     </tr>",
        "// Line_Reference 113:   </table>",
        "// Line_Reference 114:   <table width=\"100%\" border=\"0\" cellspacing=\"20\" cellpadding=\"0\" style=\"background: ${mainBackgroundColor}; max-width: 600px; margin: auto; border-radius: 10px;\">",
        "// Line_Reference 116:       <td align=\"center\" style=\"padding: 10px 0px 0px 0px; font-size: 18px; font-family: Helvetica, Arial, sans-serif; color: ${textColor};\">",
        "// Line_Reference 117:         Sign in as <strong>${escapedEmail}</strong>",
        "// Line_Reference 124:             <td align=\"center\" style=\"border-radius: 5px;\" bgcolor=\"${buttonBackgroundColor}\"><a href=\"${url}\" target=\"_blank\" style=\"font-size: 18px; font-family: Helvetica, Arial, sans-serif; color: ${buttonTextColor}; text-decoration: none; border-radius: 5px; padding: 10px 20px; border: 1px solid ${buttonBorderColor}; display: inline-block; font-weight: bold;\">Sign in</a></td>",
        "// Line_Reference 130:       <td align=\"center\" style=\"padding: 0px 0px 10px 0px; font-size: 16px; line-height: 22px; font-family: Helvetica, Arial, sans-serif; color: ${textColor};\">",
        "// Line_Reference 139: // Email Text body (fallback for email clients that don't render HTML, e.g. feature phones)",
        "// Line_Reference 140: function text({ url, host }: Record<\"url\" | \"host\", string>) {"
    ]
}
