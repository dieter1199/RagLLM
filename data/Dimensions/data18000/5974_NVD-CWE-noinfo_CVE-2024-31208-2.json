{
    "cve_id": "CVE-2024-31208",
    "cve_description": "Synapse is an open-source Matrix homeserver. A remote Matrix user with malicious intent, sharing a room with Synapse instances before 1.105.1, can dispatch specially crafted events to exploit a weakness in the V2 state resolution algorithm. This can induce high CPU consumption and accumulate excessive data in the database of such instances, resulting in a denial of service. Servers in private federations, or those that do not federate, are not affected. Server administrators should upgrade to 1.105.1 or later. Some workarounds are available. One can ban the malicious users or ACL block servers from the rooms and/or leave the room and purge the room using the admin API.",
    "cve_publish_date": "2024-04-23",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Fix GHSA-3h7q-rfh9-xm4v\n\nWeakness in auth chain indexing allows DoS from remote room members\nthrough disk fill and high CPU usage.\n\nA remote Matrix user with malicious intent, sharing a room with Synapse\ninstances before 1.104.1, can dispatch specially crafted events to\nexploit a weakness in how the auth chain cover index is calculated. This\ncan induce high CPU consumption and accumulate excessive data in the\ndatabase of such instances, resulting in a denial of service.\n\nServers in private federations, or those that do not federate, are not\naffected.",
    "type_of_change": "Modification",
    "filename_of_changes": "test_event_chain.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "73",
    "number_of_lines_deleted_vulnerable_to_cve": "31",
    "vulnerable_lines": [
        "// Line_Reference 48:     def test_simple(self) -> None:",
        "// Line_Reference 207:             (power, create),",
        "// Line_Reference 209:             (alice_invite, create),",
        "// Line_Reference 211:             (alice_invite, bob_join),",
        "// Line_Reference 216:         self.persist(events)",
        "// Line_Reference 221:         self.assertEqual(len(expected_links), len(list(link_map.get_additions())))",
        "// Line_Reference 222: ",
        "// Line_Reference 223:         for start, end in expected_links:",
        "// Line_Reference 224:             start_id, start_seq = chain_map[start.event_id]",
        "// Line_Reference 225:             end_id, end_seq = chain_map[end.event_id]",
        "// Line_Reference 227:             self.assertIn(",
        "// Line_Reference 228:                 (start_seq, end_seq), list(link_map.get_links_between(start_id, end_id))",
        "// Line_Reference 229:             )",
        "// Line_Reference 371:             (power, create),",
        "// Line_Reference 373:             (alice_invite, create),",
        "// Line_Reference 375:             (alice_invite, bob_join),",
        "// Line_Reference 380:         self.assertEqual(len(expected_links), len(list(link_map.get_additions())))",
        "// Line_Reference 382:         for start, end in expected_links:",
        "// Line_Reference 383:             start_id, start_seq = chain_map[start.event_id]",
        "// Line_Reference 384:             end_id, end_seq = chain_map[end.event_id]",
        "// Line_Reference 385: ",
        "// Line_Reference 386:             self.assertIn(",
        "// Line_Reference 387:                 (start_seq, end_seq), list(link_map.get_links_between(start_id, end_id))",
        "// Line_Reference 388:             )",
        "// Line_Reference 492:         self.assertCountEqual(link_map.get_links_between(1, 2), [(1, 1)])",
        "// Line_Reference 493:         self.assertCountEqual(link_map.get_links_from((1, 1)), [(2, 1)])",
        "// Line_Reference 502:         self.assertCountEqual(link_map.get_links_between(1, 2), [(1, 1)])",
        "// Line_Reference 506:         self.assertCountEqual(link_map.get_links_between(1, 2), [(1, 1), (3, 3)])",
        "// Line_Reference 509:         self.assertCountEqual(link_map.get_links_between(2, 1), [(5, 3)])",
        "// Line_Reference 510:         self.assertCountEqual(link_map.get_links_between(1, 2), [(1, 1), (3, 3)])",
        "// Line_Reference 511: "
    ]
}
