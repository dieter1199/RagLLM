{
    "cve_id": "CVE-2022-1205",
    "cve_description": "A NULL pointer dereference flaw was found in the Linux kernelâ€™s Amateur Radio AX.25 protocol functionality in the way a user connects with the protocol. This flaw allows a local user to crash the system.",
    "cve_publish_date": "2022-08-31",
    "cwe_id": "CWE-476",
    "cwe_name": "NULL Pointer Dereference",
    "cwe_description": "The product dereferences a pointer that it expects to be valid but is NULL.",
    "commit_message": "ax25: Fix NULL pointer dereferences in ax25 timers\n\nThe previous commit 7ec02f5ac8a5 (\"ax25: fix NPD bug in ax25_disconnect\")\nmove ax25_disconnect into lock_sock() in order to prevent NPD bugs. But\nthere are race conditions that may lead to null pointer dereferences in\nax25_heartbeat_expiry(), ax25_t1timer_expiry(), ax25_t2timer_expiry(),\nax25_t3timer_expiry() and ax25_idletimer_expiry(), when we use\nax25_kill_by_device() to detach the ax25 device.\n\nOne of the race conditions that cause null pointer dereferences can be\nshown as below:\n\n      (Thread 1)                    |      (Thread 2)\nax25_connect()                      |\n ax25_std_establish_data_link()     |\n  ax25_start_t1timer()              |\n   mod_timer(&ax25->t1timer,..)     |\n                                    | ax25_kill_by_device()\n   (wait a time)                    |  ...\n                                    |  s->ax25_dev = NULL; //(1)\n   ax25_t1timer_expiry()            |\n    ax25->ax25_dev->values[..] //(2)|  ...\n     ...                            |\n\nWe set null to ax25_cb->ax25_dev in position (1) and dereference\nthe null pointer in position (2).\n\nThe corresponding fail log is shown below:\n===============================================================\nBUG: kernel NULL pointer dereference, address: 0000000000000050\nCPU: 1 PID: 0 Comm: swapper/1 Not tainted 5.17.0-rc6-00794-g45690b7d0\nRIP: 0010:ax25_t1timer_expiry+0x12/0x40\n...\nCall Trace:\n call_timer_fn+0x21/0x120\n __run_timers.part.0+0x1ca/0x250\n run_timer_softirq+0x2c/0x60\n __do_softirq+0xef/0x2f3\n irq_exit_rcu+0xb6/0x100\n sysvec_apic_timer_interrupt+0xa2/0xd0\n...\n\nThis patch moves ax25_disconnect() before s->ax25_dev = NULL\nand uses del_timer_sync() to delete timers in ax25_disconnect().\nIf ax25_disconnect() is called by ax25_kill_by_device() or\nax25->ax25_dev is NULL, the reason in ax25_disconnect() will be\nequal to ENETUNREACH, it will wait all timers to stop before we\nset null to s->ax25_dev in ax25_kill_by_device().\n\nFixes: 7ec02f5ac8a5 (\"ax25: fix NPD bug in ax25_disconnect\")\nSigned-off-by: Duoming Zhou <duoming@zju.edu.cn>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "type_of_change": "Modification",
    "filename_of_changes": "af_ax25.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "2",
    "number_of_lines_deleted_vulnerable_to_cve": "2",
    "vulnerable_lines": [
        "// Line_Reference 92: \t\t\t\ts->ax25_dev = NULL;",
        "// Line_Reference 105: \t\t\tax25_disconnect(s, ENETUNREACH);"
    ]
}
