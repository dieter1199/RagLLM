{
    "cve_id": "CVE-2022-21208",
    "cve_description": "The package node-opcua before 2.74.0 are vulnerable to Denial of Service (DoS) due to a missing limitation on the number of received chunks - per single session or in total for all concurrent sessions. An attacker can exploit this vulnerability by sending an unlimited number of huge chunks (e.g. 2GB each) without sending the Final closing chunk.",
    "cve_publish_date": "2022-08-23",
    "cwe_id": "CWE-1284",
    "cwe_name": "Improper Validation of Specified Quantity in Input",
    "cwe_description": "The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.",
    "commit_message": "fix message chunk overflow detection",
    "type_of_change": "Modification",
    "filename_of_changes": "server_secure_channel_layer.ts",
    "code_language": "TypeScript",
    "number_of_lines_added_for_mitigation": "88",
    "number_of_lines_deleted_vulnerable_to_cve": "52",
    "vulnerable_lines": [
        "// Line_Reference 19:     exploreCertificate",
        "// Line_Reference 32: import { ServerTCP_transport } from \"node-opcua-transport\";",
        "// Line_Reference 252:     public readonly messageBuilder: MessageBuilder;",
        "// Line_Reference 351:         this.messageBuilder = new MessageBuilder({",
        "// Line_Reference 352:             name: \"server\",",
        "// Line_Reference 353:             objectFactory: options.objectFactory,",
        "// Line_Reference 354:             privateKey: this.getPrivateKey()",
        "// Line_Reference 355:         });",
        "// Line_Reference 356: ",
        "// Line_Reference 357:         this.messageBuilder.on(\"error\", (err) => {",
        "// Line_Reference 358:             // istanbul ignore next",
        "// Line_Reference 359:             if (doDebug) {",
        "// Line_Reference 360:                 debugLog(chalk.red(\"xxxxx error \"), err.message.yellow, err.stack);",
        "// Line_Reference 361:                 debugLog(chalk.red(\"xxxxx Server is now closing socket, without further notice\"));",
        "// Line_Reference 362:             }",
        "// Line_Reference 363:             // close socket immediately",
        "// Line_Reference 364:             this.close(undefined);",
        "// Line_Reference 365:         });",
        "// Line_Reference 366: ",
        "// Line_Reference 405:         assert(this.messageBuilder, \"dispose already called ?\");",
        "// Line_Reference 413:             // xx this.messageBuilder = null;",
        "// Line_Reference 423:             (this as any).transport = null;",
        "// Line_Reference 456:         this.messageBuilder.setSecurity(securityMode, securityPolicy);",
        "// Line_Reference 518:                 this.transport.on(\"message\", (messageChunk: Buffer) => {",
        "// Line_Reference 519:                     assert(this.messageBuilder);",
        "// Line_Reference 520:                     this.messageBuilder.feed(messageChunk);",
        "// Line_Reference 625:     public send_fatal_error_and_abort(",
        "// Line_Reference 626:         statusCode: StatusCode,",
        "// Line_Reference 627:         description: string,",
        "// Line_Reference 628:         message: Message,",
        "// Line_Reference 629:         callback: ErrorCallback",
        "// Line_Reference 630:     ): void {",
        "// Line_Reference 809:         /* istanbul ignore next */",
        "// Line_Reference 810:         if (!(this.messageBuilder && this.messageBuilder.sequenceHeader && this.messageBuilder.securityHeader)) {",
        "// Line_Reference 811:             return this._on_OpenSecureChannelRequestError(StatusCodes.BadCommunicationError, \"internal error\", message, callback);",
        "// Line_Reference 812:         }",
        "// Line_Reference 813: ",
        "// Line_Reference 871:                 this._on_common_message(request, msgType, requestId, channelId);",
        "// Line_Reference 873:             .on(\"start_chunk\", () => {",
        "// Line_Reference 914:             this.messageBuilder.removeListener(\"message\", messageHandler);",
        "// Line_Reference 921:             this.messageBuilder.removeListener(\"error\", errorHandler);",
        "// Line_Reference 924:         this.messageBuilder.once(\"error\", errorHandler);",
        "// Line_Reference 925:         this.messageBuilder.once(\"message\", messageHandler);",
        "// Line_Reference 954:             const cryptoFactory = this.messageBuilder.cryptoFactory;",
        "// Line_Reference 992:         const cryptoFactory = this.messageBuilder.cryptoFactory;",
        "// Line_Reference 1166:             return this.send_fatal_error_and_abort(StatusCodes.BadInternalError, \"invalid request\", message, callback);",
        "// Line_Reference 1182:         const cryptoFactory = this.messageBuilder.cryptoFactory;",
        "// Line_Reference 1213:         this.messageBuilder.pushNewToken(this.securityToken, derivedClientKeys);",
        "// Line_Reference 1318:         if (this.messageBuilder.sequenceHeader === null) {",
        "// Line_Reference 1322:         requestId = this.messageBuilder.sequenceHeader.requestId;",
        "// Line_Reference 1350:                     return this.send_fatal_error_and_abort(",
        "// Line_Reference 1436:         this.send_fatal_error_and_abort(serviceResult, description, message, callback);"
    ]
}
