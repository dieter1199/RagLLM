{
    "cve_id": "CVE-2023-0266",
    "cve_description": "A use after free vulnerability exists in the ALSA PCM package in the Linux Kernel. SNDRV_CTL_IOCTL_ELEM_{READ|WRITE}32 is missing locks that can be used in a use-after-free that can result in a priviledge escalation to gain ring0 access from the system user. We recommend upgrading past commit 56b88b50565cd8b946a2d00b0c83927b7ebb055e\n",
    "cve_publish_date": "2023-01-30",
    "cwe_id": "CWE-416",
    "cwe_name": "Use After Free",
    "cwe_description": "The product reuses or references memory after it has been freed. At some point afterward, the memory may be allocated again and saved in another pointer, while the original pointer references a location somewhere within the new allocation. Any operations using the original pointer are no longer valid because the memory \"belongs\" to the code that operates on the new pointer.",
    "commit_message": "ALSA: control: code refactoring for ELEM_READ/ELEM_WRITE operations\n\nALSA control core handles ELEM_READ/ELEM_WRITE requests within lock\nacquisition of a counting semaphore. The lock is acquired in helper\nfunctions in the end of call path before calling implementations of each\ndriver.\n\nioctl(2) with SNDRV_CTL_ELEM_READ\n...\n->snd_ctl_ioctl()\n  ->snd_ctl_elem_read_user()\n    ->snd_ctl_elem_read()\n      ->down_read(controls_rwsem)\n      ->snd_ctl_find_id()\n      ->struct snd_kcontrol.get()\n      ->up_read(controls_rwsem)\n\nioctl(2) with SNDRV_CTL_ELEM_WRITE\n...\n->snd_ctl_ioctl()\n  ->snd_ctl_elem_write_user()\n    ->snd_ctl_elem_write()\n      ->down_read(controls_rwsem)\n      ->snd_ctl_find_id()\n      ->struct snd_kcontrol.put()\n      ->up_read(controls_rwsem)\n\nThis commit moves the lock acquisition to middle of the call graph to\nsimplify the helper functions. As a result:\n\nioctl(2) with SNDRV_CTL_ELEM_READ\n...\n->snd_ctl_ioctl()\n  ->snd_ctl_elem_read_user()\n    ->down_read(controls_rwsem)\n    ->snd_ctl_elem_read()\n      ->snd_ctl_find_id()\n      ->struct snd_kcontrol.get()\n    ->up_read(controls_rwsem)\n\nioctl(2) with SNDRV_CTL_ELEM_WRITE\n...\n->snd_ctl_ioctl()\n  ->snd_ctl_elem_write_user()\n    ->down_read(controls_rwsem)\n    ->snd_ctl_elem_write()\n      ->snd_ctl_find_id()\n      ->struct snd_kcontrol.put()\n    ->up_read(controls_rwsem)\n\nSigned-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>\nSigned-off-by: Takashi Iwai <tiwai@suse.de>",
    "type_of_change": "Modification",
    "filename_of_changes": "control.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "38",
    "number_of_lines_deleted_vulnerable_to_cve": "39",
    "vulnerable_lines": [
        "// Line_Reference 884: \tint result;",
        "// Line_Reference 886: \tdown_read(&card->controls_rwsem);",
        "// Line_Reference 888: \tif (kctl == NULL) {",
        "// Line_Reference 889: \t\tresult = -ENOENT;",
        "// Line_Reference 890: \t} else {",
        "// Line_Reference 891: \t\tindex_offset = snd_ctl_get_ioff(kctl, &control->id);",
        "// Line_Reference 892: \t\tvd = &kctl->vd[index_offset];",
        "// Line_Reference 893: \t\tif ((vd->access & SNDRV_CTL_ELEM_ACCESS_READ) &&",
        "// Line_Reference 894: \t\t    kctl->get != NULL) {",
        "// Line_Reference 895: \t\t\tsnd_ctl_build_ioff(&control->id, kctl, index_offset);",
        "// Line_Reference 896: \t\t\tresult = kctl->get(kctl, control);",
        "// Line_Reference 897: \t\t} else",
        "// Line_Reference 898: \t\t\tresult = -EPERM;",
        "// Line_Reference 899: \t}",
        "// Line_Reference 900: \tup_read(&card->controls_rwsem);",
        "// Line_Reference 901: \treturn result;",
        "// Line_Reference 916: \tif (result >= 0)",
        "// Line_Reference 934: \tdown_read(&card->controls_rwsem);",
        "// Line_Reference 936: \tif (kctl == NULL) {",
        "// Line_Reference 937: \t\tresult = -ENOENT;",
        "// Line_Reference 938: \t} else {",
        "// Line_Reference 939: \t\tindex_offset = snd_ctl_get_ioff(kctl, &control->id);",
        "// Line_Reference 940: \t\tvd = &kctl->vd[index_offset];",
        "// Line_Reference 941: \t\tif (!(vd->access & SNDRV_CTL_ELEM_ACCESS_WRITE) ||",
        "// Line_Reference 942: \t\t    kctl->put == NULL ||",
        "// Line_Reference 943: \t\t    (file && vd->owner && vd->owner != file)) {",
        "// Line_Reference 944: \t\t\tresult = -EPERM;",
        "// Line_Reference 945: \t\t} else {",
        "// Line_Reference 946: \t\t\tsnd_ctl_build_ioff(&control->id, kctl, index_offset);",
        "// Line_Reference 947: \t\t\tresult = kctl->put(kctl, control);",
        "// Line_Reference 948: \t\t}",
        "// Line_Reference 949: \t\tif (result > 0) {",
        "// Line_Reference 950: \t\t\tstruct snd_ctl_elem_id id = control->id;",
        "// Line_Reference 951: \t\t\tsnd_ctl_notify(card, SNDRV_CTL_EVENT_MASK_VALUE, &id);",
        "// Line_Reference 952: \t\t\tresult = 0;",
        "// Line_Reference 953: \t\t}",
        "// Line_Reference 955: \tup_read(&card->controls_rwsem);",
        "// Line_Reference 956: \treturn result;",
        "// Line_Reference 973: \tif (result >= 0)"
    ]
}
