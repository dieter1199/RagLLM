{
    "cve_id": "CVE-2021-21388",
    "cve_description": "systeminformation is an open source system and OS information library for node.js. A command injection vulnerability has been discovered in versions of systeminformation prior to 5.6.4. The issue has been fixed with a parameter check on user input. Please upgrade to version >= 5.6.4. If you cannot upgrade, be sure to check or sanitize service parameters that are passed to si.inetLatency(), si.inetChecksite(), si.services(), si.processLoad() and other commands. Only allow strings, reject any arrays. String sanitation works as expected.",
    "cve_publish_date": "2021-04-29",
    "cwe_id": "CWE-78",
    "cwe_name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
    "cwe_description": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
    "commit_message": "sanitizeShellString() and other security improvements",
    "type_of_change": "Modification",
    "filename_of_changes": "processes.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "13",
    "number_of_lines_deleted_vulnerable_to_cve": "10",
    "vulnerable_lines": [
        "// Line_Reference 114:         for (let i = 0; i <= 2000; i++) {",
        "// Line_Reference 167:           if ((_darwin) && srvString === '*') { // service enumeration mnot yet suported on mac OS",
        "// Line_Reference 171:           let comm = (_darwin) ? 'ps -caxo pcpu,pmem,pid,command' : 'ps -axo pcpu,pmem,pid,command';",
        "// Line_Reference 173:             exec(comm + ' | grep -v grep | grep -iE \"' + srvString + '\"', { maxBuffer: 1024 * 20000 }, function (error, stdout) {   // lgtm [js/shell-command-constructed-from-input]",
        "// Line_Reference 174:               if (!error) {",
        "// Line_Reference 175:                 let lines = stdout.toString().replace(/ +/g, ' ').replace(/,+/g, '.').split('\\n');",
        "// Line_Reference 270:                 exec('ps -o comm | grep -v grep | egrep \"' + srvString + '\"', { maxBuffer: 1024 * 20000 }, function (error, stdout) {   // lgtm [js/shell-command-constructed-from-input]",
        "// Line_Reference 271:                   if (!error) {",
        "// Line_Reference 272:                     let lines = stdout.toString().replace(/ +/g, ' ').replace(/,+/g, '.').split('\\n');",
        "// Line_Reference 912:       for (let i = 0; i <= 2000; i++) {"
    ]
}
