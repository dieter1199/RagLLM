{
    "cve_id": "CVE-2023-5572",
    "cve_description": "Server-Side Request Forgery (SSRF) in GitHub repository vriteio/vrite prior to 0.3.0.",
    "cve_publish_date": "2023-10-13",
    "cwe_id": "CWE-918",
    "cwe_name": "Server-Side Request Forgery (SSRF)",
    "cwe_description": "The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.",
    "commit_message": "Vrite v0.3 (#45)\n\n- Replace wrapper with element;\r\n- Add XML-like syntax for elements;\r\n- Redesign editor block menus;\r\n- Add MDX extension;\r\n- Allow CORS API access;\r\n- Restructure @vrite/backend;",
    "type_of_change": "Modification",
    "filename_of_changes": "process-content.ts",
    "code_language": "TypeScript",
    "number_of_lines_added_for_mitigation": "6",
    "number_of_lines_deleted_vulnerable_to_cve": "81",
    "vulnerable_lines": [
        "// Line_Reference 8: import { ObjectId, Binary } from \"mongodb\";",
        "// Line_Reference 9: import { convert as convertToSlug } from \"url-slug\";",
        "// Line_Reference 16:   FullContentPiece,",
        "// Line_Reference 17:   FullContents,",
        "// Line_Reference 23: import { UnderscoreID, jsonToBuffer, htmlToJSON, bufferToJSON, AuthenticatedContext } from \"#lib\";",
        "// Line_Reference 24: ",
        "// Line_Reference 25: interface ProcessInputResult {",
        "// Line_Reference 26:   buffer: Buffer;",
        "// Line_Reference 27:   contentHash: string;",
        "// Line_Reference 28:   metadata: Partial<",
        "// Line_Reference 29:     Pick<FullContentPiece, keyof NonNullable<ReturnType<InputTransformer>[\"contentPiece\"]>>",
        "// Line_Reference 30:   >;",
        "// Line_Reference 31: }",
        "// Line_Reference 32: interface OutputContentProcessorInput {",
        "// Line_Reference 33:   buffer: Buffer;",
        "// Line_Reference 34:   contentPiece: UnderscoreID<FullContentPiece<ObjectId>>;",
        "// Line_Reference 35: }",
        "// Line_Reference 36: ",
        "// Line_Reference 37: interface InputContentProcessor {",
        "// Line_Reference 38:   process(inputContent: string): Promise<ProcessInputResult>;",
        "// Line_Reference 39:   processBatch(inputContent: string[]): Promise<ProcessInputResult[]>;",
        "// Line_Reference 40: }",
        "// Line_Reference 41: ",
        "// Line_Reference 42: interface OutputContentProcessor {",
        "// Line_Reference 43:   process(input: OutputContentProcessorInput): Promise<string>;",
        "// Line_Reference 44:   processBatch(input: OutputContentProcessorInput[]): Promise<string[]>;",
        "// Line_Reference 45: }",
        "// Line_Reference 259: const createSyncedPieces = async (",
        "// Line_Reference 260:   inputs: Array<{",
        "// Line_Reference 261:     path: string;",
        "// Line_Reference 262:     content: string;",
        "// Line_Reference 263:     workspaceId: ObjectId;",
        "// Line_Reference 264:     contentGroupId: ObjectId;",
        "// Line_Reference 265:     order: string;",
        "// Line_Reference 266:   }>,",
        "// Line_Reference 267:   inputContentProcessor: InputContentProcessor",
        "// Line_Reference 268: ): Promise<",
        "// Line_Reference 269:   Array<{",
        "// Line_Reference 270:     contentPiece: UnderscoreID<FullContentPiece<ObjectId>>;",
        "// Line_Reference 271:     content: UnderscoreID<FullContents<ObjectId>>;",
        "// Line_Reference 272:     contentHash: string;",
        "// Line_Reference 273:   }>",
        "// Line_Reference 274: > => {",
        "// Line_Reference 275:   const inputContentProcessorOutput = await inputContentProcessor.processBatch(",
        "// Line_Reference 276:     inputs.map((input) => input.content)",
        "// Line_Reference 277:   );",
        "// Line_Reference 278: ",
        "// Line_Reference 279:   return inputs.map((input, index) => {",
        "// Line_Reference 280:     const filename = input.path.split(\"/\").pop() || \"\";",
        "// Line_Reference 281:     const { buffer, contentHash, metadata } = inputContentProcessorOutput[index];",
        "// Line_Reference 282:     const { members, tags, date, ...inputMetadata } = metadata;",
        "// Line_Reference 283:     const contentPiece: UnderscoreID<FullContentPiece<ObjectId>> = {",
        "// Line_Reference 284:       _id: new ObjectId(),",
        "// Line_Reference 285:       workspaceId: input.workspaceId,",
        "// Line_Reference 286:       contentGroupId: input.contentGroupId,",
        "// Line_Reference 287:       order: input.order,",
        "// Line_Reference 288:       members: [],",
        "// Line_Reference 289:       slug: convertToSlug(filename),",
        "// Line_Reference 290:       tags: [],",
        "// Line_Reference 291:       title: filename,",
        "// Line_Reference 292:       filename,",
        "// Line_Reference 293:       ...inputMetadata,",
        "// Line_Reference 294:       ...(date && { date: new Date(date) }),",
        "// Line_Reference 295:       ...(members && { members: members.map((memberId) => new ObjectId(memberId)) }),",
        "// Line_Reference 296:       ...(tags && { tags: tags.map((tagId) => new ObjectId(tagId)) })",
        "// Line_Reference 297:     };",
        "// Line_Reference 298:     const content = {",
        "// Line_Reference 299:       _id: new ObjectId(),",
        "// Line_Reference 300:       contentPieceId: contentPiece._id,",
        "// Line_Reference 301:       content: new Binary(buffer)",
        "// Line_Reference 302:     };",
        "// Line_Reference 303: ",
        "// Line_Reference 304:     return {",
        "// Line_Reference 305:       contentPiece,",
        "// Line_Reference 306:       contentHash,",
        "// Line_Reference 307:       content",
        "// Line_Reference 308:     };",
        "// Line_Reference 309:   });",
        "// Line_Reference 310: };",
        "// Line_Reference 312: export { createSyncedPieces, createInputContentProcessor, createOutputContentProcessor };",
        "// Line_Reference 313: export type { OutputContentProcessorInput, OutputContentProcessor, InputContentProcessor };"
    ]
}
