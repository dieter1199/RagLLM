{
    "cve_id": "CVE-2024-21491",
    "cve_description": "Versions of the package svix before 1.17.0 are vulnerable to Authentication Bypass due to an issue in the verify function where signatures of different lengths are incorrectly compared. An attacker can bypass signature verification by providing a shorter signature that matches the beginning of the actual signature.\r\r**Note:**\r\rThe attacker would need to know a victim uses the Rust library for verification,no easy way to automatically check that; and uses webhooks by a service that uses Svix, and then figure out a way to craft a malicious payload that will actually include all of the correct identifiers needed to trick the receivers to cause actual issues.",
    "cve_publish_date": "2024-02-13",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Rust verification library: fix comparison of different length signatures (#1190)\n\nThere was a bug in the code which meant that the signatures are only\r\ncompared up to the length of the shorter signature, which means that an\r\nattacker can just pass `v1,` as the signature and that will always pass\r\nverification.\r\n\r\nThis change fixes it so that the length of the signature is also taken\r\ninto account when comparing, to make sure that it's always the same\r\nlength before comparing.\r\n\r\nManually verified all of the other libraries are correct, and added\r\ntests to JavaScript and Go (even though they were also not affected).\r\n\r\nMany thanks to Fredrik Meringdal (@fmeringdal) for the report.",
    "type_of_change": "Modification",
    "filename_of_changes": "webhooks.rs",
    "code_language": "Rust",
    "number_of_lines_added_for_mitigation": "44",
    "number_of_lines_deleted_vulnerable_to_cve": "4",
    "vulnerable_lines": [
        "// Line_Reference 89:                 x.1.bytes()",
        "// Line_Reference 90:                     .zip(expected_signature.bytes())",
        "// Line_Reference 91:                     .fold(0, |acc, (a, b)| acc | (a ^ b))",
        "// Line_Reference 92:                     == 0"
    ]
}
