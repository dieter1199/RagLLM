{
    "cve_id": "CVE-2016-9936",
    "cve_description": "The unserialize implementation in ext/standard/var.c in PHP 7.x before 7.0.14 allows remote attackers to cause a denial of service (use-after-free) or possibly have unspecified other impact via crafted serialized data.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2015-6834.",
    "cve_publish_date": "2017-01-04",
    "cwe_id": "CWE-416",
    "cwe_name": "Use After Free",
    "cwe_description": "The product reuses or references memory after it has been freed. At some point afterward, the memory may be allocated again and saved in another pointer, while the original pointer references a location somewhere within the new allocation. Any operations using the original pointer are no longer valid because the memory \"belongs\" to the code that operates on the new pointer.",
    "commit_message": "Complete the fix of bug #70172 for PHP 7",
    "type_of_change": "Modification",
    "filename_of_changes": "var.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "5",
    "number_of_lines_deleted_vulnerable_to_cve": "5",
    "vulnerable_lines": [
        "// Line_Reference 1070: \tif (!php_var_unserialize_ex(return_value, &p, p + buf_len, &var_hash, class_hash)) {",
        "// Line_Reference 1076: \t\tzval_ptr_dtor(return_value);",
        "// Line_Reference 1083: \t/* We should keep an reference to return_value to prevent it from being dtor",
        "// Line_Reference 1084: \t   in case nesting calls to unserialize */",
        "// Line_Reference 1085: \tvar_push_dtor(&var_hash, return_value);"
    ]
}
