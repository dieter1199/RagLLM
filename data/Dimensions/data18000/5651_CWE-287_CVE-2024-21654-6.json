{
    "cve_id": "CVE-2024-21654",
    "cve_description": "Rubygems.org is the Ruby community's gem hosting service. Rubygems.org users with MFA enabled would normally be protected from account takeover in the case of email account takeover. However, a workaround on the forgotten password form allows an attacker to bypass the MFA requirement and takeover the account. This vulnerability has been patched in commit 0b3272a.",
    "cve_publish_date": "2024-01-12",
    "cwe_id": "CWE-287",
    "cwe_name": "Improper Authentication",
    "cwe_description": "When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.",
    "commit_message": "Protect forgotten password changes from MFA bypass.\n\nIt was previously possible to submit the password update form directly\nwith only the confirmation token, bypassing MFA protections.",
    "type_of_change": "Modification",
    "filename_of_changes": "passwords_controller_test.rb",
    "code_language": "Ruby",
    "number_of_lines_added_for_mitigation": "184",
    "number_of_lines_deleted_vulnerable_to_cve": "70",
    "vulnerable_lines": [
        "// Line_Reference 325:     context \"with reset_api_key and invalid password\" do",
        "// Line_Reference 330:           password_reset: { reset_api_key: \"true\", password: \"pass\" }",
        "// Line_Reference 334:       should respond_with :success",
        "// Line_Reference 344:     context \"without reset_api_key and valid password\" do",
        "// Line_Reference 346:         put :update, params: {",
        "// Line_Reference 347:           user_id: @user.id,",
        "// Line_Reference 348:           token: @user.confirmation_token,",
        "// Line_Reference 349:           password_reset: { password: PasswordHelpers::SECURE_TEST_PASSWORD }",
        "// Line_Reference 350:         }",
        "// Line_Reference 353:       should respond_with :found",
        "// Line_Reference 354: ",
        "// Line_Reference 355:       should \"not change api_key\" do",
        "// Line_Reference 356:         assert_equal(@user.reload.api_key, @api_key)",
        "// Line_Reference 358:       should \"change password\" do",
        "// Line_Reference 359:         refute_equal(@user.reload.encrypted_password, @old_encrypted_password)",
        "// Line_Reference 360:       end",
        "// Line_Reference 361:     end",
        "// Line_Reference 363:     context \"with reset_api_key false and valid password\" do",
        "// Line_Reference 364:       setup do",
        "// Line_Reference 365:         put :update, params: {",
        "// Line_Reference 366:           user_id: @user.id,",
        "// Line_Reference 367:           token: @user.confirmation_token,",
        "// Line_Reference 368:           password_reset: { reset_api_key: \"false\", password: PasswordHelpers::SECURE_TEST_PASSWORD }",
        "// Line_Reference 369:         }",
        "// Line_Reference 370:       end",
        "// Line_Reference 372:       should respond_with :found",
        "// Line_Reference 374:       should \"not change api_key\" do",
        "// Line_Reference 375:         assert_equal(@user.reload.api_key, @api_key)",
        "// Line_Reference 376:       end",
        "// Line_Reference 377:       should \"change password\" do",
        "// Line_Reference 378:         refute_equal(@user.reload.encrypted_password, @old_encrypted_password)",
        "// Line_Reference 380:     end",
        "// Line_Reference 382:     context \"with reset_api_key and valid password\" do",
        "// Line_Reference 383:       setup do",
        "// Line_Reference 384:         put :update, params: {",
        "// Line_Reference 385:           user_id: @user.id,",
        "// Line_Reference 386:           token: @user.confirmation_token,",
        "// Line_Reference 387:           password_reset: { reset_api_key: \"true\", password: PasswordHelpers::SECURE_TEST_PASSWORD }",
        "// Line_Reference 388:         }",
        "// Line_Reference 389:       end",
        "// Line_Reference 391:       should respond_with :found",
        "// Line_Reference 393:       should \"change api_key\" do",
        "// Line_Reference 394:         refute_equal(@user.reload.api_key, @api_key)",
        "// Line_Reference 395:       end",
        "// Line_Reference 396:       should \"change password\" do",
        "// Line_Reference 397:         refute_equal(@user.reload.encrypted_password, @old_encrypted_password)",
        "// Line_Reference 398:       end",
        "// Line_Reference 399:       should \"not delete new api key\" do",
        "// Line_Reference 400:         refute_predicate @new_api_key.reload, :destroyed?",
        "// Line_Reference 401:         refute_empty @user.reload.api_keys",
        "// Line_Reference 402:       end",
        "// Line_Reference 403:     end",
        "// Line_Reference 405:     context \"with reset_api_key and reset_api_keys and valid password\" do",
        "// Line_Reference 406:       setup do",
        "// Line_Reference 407:         put :update, params: {",
        "// Line_Reference 408:           user_id: @user.id,",
        "// Line_Reference 409:           token: @user.confirmation_token,",
        "// Line_Reference 410:           password_reset: { reset_api_key: \"true\", reset_api_keys: \"true\", password: PasswordHelpers::SECURE_TEST_PASSWORD }",
        "// Line_Reference 411:         }",
        "// Line_Reference 412:       end",
        "// Line_Reference 414:       should respond_with :found",
        "// Line_Reference 416:       should \"change api_key\" do",
        "// Line_Reference 417:         refute_equal(@user.reload.api_key, @api_key)",
        "// Line_Reference 418:       end",
        "// Line_Reference 419:       should \"change password\" do",
        "// Line_Reference 420:         refute_equal(@user.reload.encrypted_password, @old_encrypted_password)",
        "// Line_Reference 421:       end",
        "// Line_Reference 422:       should \"expire new api key\" do",
        "// Line_Reference 423:         assert_empty @user.reload.api_keys.unexpired",
        "// Line_Reference 424:         refute_empty @user.reload.api_keys.expired"
    ]
}
