{
    "cve_id": "CVE-2022-24713",
    "cve_description": "regex is an implementation of regular expressions for the Rust language. The regex crate features built-in mitigations to prevent denial of service attacks caused by untrusted regexes, or untrusted input matched by trusted regexes. Those (tunable) mitigations already provide sane defaults to prevent attacks. This guarantee is documented and it's considered part of the crate's API. Unfortunately a bug was discovered in the mitigations designed to prevent untrusted regexes to take an arbitrary amount of time during parsing, and it's possible to craft regexes that bypass such mitigations. This makes it possible to perform denial of service attacks by sending specially crafted regexes to services accepting user-controlled, untrusted regexes. All versions of the regex crate before or equal to 1.5.4 are affected by this issue. The fix is include starting from regex 1.5.5. All users accepting user-controlled regexes are recommended to upgrade immediately to the latest version of the regex crate. Unfortunately there is no fixed set of problematic regexes, as there are practically infinite regexes that could be crafted to exploit this vulnerability. Because of this, it us not recommend to deny known problematic regexes.",
    "cve_publish_date": "2022-03-08",
    "cwe_id": "CWE-1333",
    "cwe_name": "Inefficient Regular Expression Complexity",
    "cwe_description": "The product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles.",
    "commit_message": "security: fix denial-of-service bug in compiler\n\nThe regex compiler will happily attempt to compile '(?:){294967295}' by\ncompiling the empty sub-expression 294,967,295 times. Empty\nsub-expressions don't use any memory in the current implementation, so\nthis doesn't trigger the pre-existing machinery for stopping compilation\nearly if the regex object gets too big. The end result is that while\ncompilation will eventually succeed, it takes a very long time to do so.\n\nIn this commit, we fix this problem by adding a fake amount of memory\nevery time we compile an empty sub-expression. It turns out we were\nalready tracking an additional amount of indirect heap usage via\n'extra_inst_bytes' in the compiler, so we just make it look like\ncompiling an empty sub-expression actually adds an additional 'Inst' to\nthe compiled regex object.\n\nThis has the effect of causing the regex compiler to reject this sort of\nregex in a reasonable amount of time by default.\n\nMany thanks to @VTCAKAVSMoACE for reporting this, providing the valuable\ntest cases and continuing to test this patch as it was developed.\n\nFixes https://github.com/rust-lang/regex/security/advisories/GHSA-m5pq-gvj9-9vr8",
    "type_of_change": "Modification",
    "filename_of_changes": "compile.rs",
    "code_language": "Rust",
    "number_of_lines_added_for_mitigation": "25",
    "number_of_lines_deleted_vulnerable_to_cve": "2",
    "vulnerable_lines": [
        "// Line_Reference 263:             Empty => Ok(None),",
        "// Line_Reference 499:                 None => return Ok(None),"
    ]
}
