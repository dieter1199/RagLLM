{
    "cve_id": "CVE-2023-0877",
    "cve_description": "Code Injection in GitHub repository froxlor/froxlor prior to 2.0.11.",
    "cve_publish_date": "2023-02-17",
    "cwe_id": "CWE-94",
    "cwe_name": "Improper Control of Generation of Code ('Code Injection')",
    "cwe_description": "The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.",
    "commit_message": "run Form::processForm() when importing settings so the same validations apply if the import file has malicious content\n\nSigned-off-by: Michael Kaufmann <d00p@froxlor.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "SImExporter.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "29",
    "number_of_lines_deleted_vulnerable_to_cve": "57",
    "vulnerable_lines": [
        "// Line_Reference 82: \t\t\tif (array_key_exists($row['settinggroup'], $settings_definitions) && array_key_exists($row['varname'], $settings_definitions[$row['settinggroup']])) {",
        "// Line_Reference 89: \t\t\t\t\t$_data[$index . '.image_data'] = base64_encode(file_get_contents(explode('?', $row['value'], 2)[0]));",
        "// Line_Reference 143: \t\t\t// store new data",
        "// Line_Reference 144: \t\t\tforeach ($_data as $index => $value) {",
        "// Line_Reference 145: \t\t\t\t$index_split = explode('.', $index, 3);",
        "// Line_Reference 146: ",
        "// Line_Reference 147: \t\t\t\t// Catch image_data and save it",
        "// Line_Reference 148: \t\t\t\tif (isset($index_split[2]) && $index_split[2] === 'image_data' && !empty($_data[$index_split[0] . '.' . $index_split[1]])) {",
        "// Line_Reference 149: \t\t\t\t\t$path = Froxlor::getInstallDir() . '/img/';",
        "// Line_Reference 150: \t\t\t\t\tif (!is_dir($path) && !mkdir($path, 0775)) {",
        "// Line_Reference 151: \t\t\t\t\t\tthrow new Exception(\"img directory does not exist and cannot be created\");",
        "// Line_Reference 152: \t\t\t\t\t}",
        "// Line_Reference 153: ",
        "// Line_Reference 154: \t\t\t\t\t// Make sure we can write to the upload directory",
        "// Line_Reference 155: \t\t\t\t\tif (!is_writable($path)) {",
        "// Line_Reference 156: \t\t\t\t\t\tif (!chmod($path, 0775)) {",
        "// Line_Reference 157: \t\t\t\t\t\t\tthrow new Exception(\"Cannot write to img directory\");",
        "// Line_Reference 158: \t\t\t\t\t\t}",
        "// Line_Reference 159: \t\t\t\t\t}",
        "// Line_Reference 160: ",
        "// Line_Reference 161: \t\t\t\t\t$img_data = base64_decode($value);",
        "// Line_Reference 162: \t\t\t\t\t$img_filename = Froxlor::getInstallDir() . '/' . str_replace('../', '', explode('?', $_data[$index_split[0] . '.' . $index_split[1]], 2)[0]);",
        "// Line_Reference 164: \t\t\t\t\tfile_put_contents($img_filename, $img_data);",
        "// Line_Reference 165: ",
        "// Line_Reference 166: \t\t\t\t\tif (function_exists('finfo_open')) {",
        "// Line_Reference 167: \t\t\t\t\t\t$finfo = finfo_open(FILEINFO_MIME_TYPE);",
        "// Line_Reference 168: \t\t\t\t\t\t$mimetype = finfo_file($finfo, $img_filename);",
        "// Line_Reference 169: \t\t\t\t\t\tfinfo_close($finfo);",
        "// Line_Reference 170: \t\t\t\t\t} else {",
        "// Line_Reference 171: \t\t\t\t\t\t$mimetype = mime_content_type($img_filename);",
        "// Line_Reference 172: \t\t\t\t\t}",
        "// Line_Reference 173: \t\t\t\t\tif (empty($mimetype)) {",
        "// Line_Reference 174: \t\t\t\t\t\t$mimetype = 'application/octet-stream';",
        "// Line_Reference 176: \t\t\t\t\tif (!in_array($mimetype, ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'])) {",
        "// Line_Reference 177: \t\t\t\t\t\t@unlink($img_filename);",
        "// Line_Reference 178: \t\t\t\t\t\tthrow new Exception(\"Uploaded file is not a valid image\");",
        "// Line_Reference 179: \t\t\t\t\t}",
        "// Line_Reference 180: ",
        "// Line_Reference 181: \t\t\t\t\t$spl = explode('.', $img_filename);",
        "// Line_Reference 182: \t\t\t\t\t$file_extension = strtolower(array_pop($spl));",
        "// Line_Reference 183: \t\t\t\t\tunset($spl);",
        "// Line_Reference 184: ",
        "// Line_Reference 185: \t\t\t\t\tif (!in_array($file_extension, [",
        "// Line_Reference 186: \t\t\t\t\t\t'jpeg',",
        "// Line_Reference 187: \t\t\t\t\t\t'jpg',",
        "// Line_Reference 188: \t\t\t\t\t\t'png',",
        "// Line_Reference 189: \t\t\t\t\t\t'gif'",
        "// Line_Reference 190: \t\t\t\t\t])) {",
        "// Line_Reference 191: \t\t\t\t\t\t@unlink($img_filename);",
        "// Line_Reference 192: \t\t\t\t\t\tthrow new Exception(\"Invalid file-extension, use one of: jpeg, jpg, png, gif\");",
        "// Line_Reference 193: \t\t\t\t\t}",
        "// Line_Reference 194: \t\t\t\t\tcontinue;",
        "// Line_Reference 197: \t\t\t\tSettings::Set($index, $value);",
        "// Line_Reference 199: \t\t\t// save to DB",
        "// Line_Reference 200: \t\t\tSettings::Flush();",
        "// Line_Reference 201: \t\t\t// all good",
        "// Line_Reference 202: \t\t\treturn true;"
    ]
}
