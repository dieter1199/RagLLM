{
    "cve_id": "CVE-2020-15679",
    "cve_description": "An OAuth session fixation vulnerability existed in the VPN login flow, where an attacker could craft a custom login URL, convince a VPN user to login via that URL, and obtain authenticated access as that user. This issue is limited to cases where attacker and victim are sharing the same source IP and could allow the ability to view session states and disconnect VPN sessions. This vulnerability affects Mozilla VPN iOS 1.0.7 < (929), Mozilla VPN Windows < 1.2.2, and Mozilla VPN Android 1.1.0 < (1360).",
    "cve_publish_date": "2022-12-22",
    "cwe_id": "CWE-384",
    "cwe_name": "Session Fixation",
    "cwe_description": "Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.",
    "commit_message": "New non-polling authentication flow.\n\n- Fixes intermittent hanging during auth\n- Implements PKCE",
    "type_of_change": "Modification",
    "filename_of_changes": "Login.cs",
    "code_language": "C#",
    "number_of_lines_added_for_mitigation": "118",
    "number_of_lines_deleted_vulnerable_to_cve": "135",
    "vulnerable_lines": [
        "// Line_Reference 39:         /// Gets the unique login urls for the user's signin attempt.",
        "// Line_Reference 41:         /// <returns>A <see cref=\"JSONStructures.FxALoginURLs\"/> object.</returns>",
        "// Line_Reference 42:         public JSONStructures.FxALoginURLs GetLoginURLs()",
        "// Line_Reference 43:         {",
        "// Line_Reference 44:             var api = new ApiRequest(string.Empty, \"/vpn/login\", RestSharp.Method.POST);",
        "// Line_Reference 45:             JSONStructures.FxALoginURLs loginURLs;",
        "// Line_Reference 46: ",
        "// Line_Reference 47:             // Execute the request",
        "// Line_Reference 48:             var response = api.SendRequest();",
        "// Line_Reference 49: ",
        "// Line_Reference 50:             if (response == null || response.StatusCode != System.Net.HttpStatusCode.OK)",
        "// Line_Reference 51:             {",
        "// Line_Reference 52:                 ErrorHandling.ErrorHandler.Handle(new ErrorHandling.UserFacingMessage(\"toast-login-url-retrieval-error\"), ErrorHandling.UserFacingErrorType.None, ErrorHandling.LogLevel.Error);",
        "// Line_Reference 53:                 return null;",
        "// Line_Reference 54:             }",
        "// Line_Reference 55: ",
        "// Line_Reference 56:             try",
        "// Line_Reference 57:             {",
        "// Line_Reference 58:                 loginURLs = JsonConvert.DeserializeObject<JSONStructures.FxALoginURLs>(response.Content);",
        "// Line_Reference 59:                 return loginURLs;",
        "// Line_Reference 60:             }",
        "// Line_Reference 61:             catch (Exception e)",
        "// Line_Reference 62:             {",
        "// Line_Reference 63:                 ErrorHandling.ErrorHandler.Handle(e, ErrorHandling.LogLevel.Error);",
        "// Line_Reference 64:             }",
        "// Line_Reference 65: ",
        "// Line_Reference 66:             return null;",
        "// Line_Reference 67:         }",
        "// Line_Reference 70:         /// Queries the verification URL to check if the user has logged in.",
        "// Line_Reference 72:         /// <param name=\"tokenURL\">Login verification URL.</param>",
        "// Line_Reference 73:         /// <returns>Returns the response content if successful, otherwise returns null.</returns>",
        "// Line_Reference 74:         public string QueryRawLoginState(string tokenURL)",
        "// Line_Reference 76:             var api = new ApiRequest(string.Empty, tokenURL, RestSharp.Method.GET);",
        "// Line_Reference 78:             // Execute the request",
        "// Line_Reference 79:             var response = api.SendRequest();",
        "// Line_Reference 81:             if (response == null || response.StatusCode != System.Net.HttpStatusCode.OK)",
        "// Line_Reference 82:             {",
        "// Line_Reference 83:                 ErrorHandling.ErrorHandler.Handle(\"User has not logged in yet\", ErrorHandling.LogLevel.Debug);",
        "// Line_Reference 84:                 return null;",
        "// Line_Reference 85:             }",
        "// Line_Reference 87:             return response.Content;",
        "// Line_Reference 88:         }",
        "// Line_Reference 90:         /// <summary>",
        "// Line_Reference 91:         /// Deserializes the FxA login response from JSON.",
        "// Line_Reference 92:         /// </summary>",
        "// Line_Reference 93:         /// <param name=\"jsonContents\">FxA login response.</param>",
        "// Line_Reference 94:         /// <returns>A <see cref=\"JSONStructures.FxALogin\"/> object.</returns>",
        "// Line_Reference 95:         public JSONStructures.FxALogin ParseLoginState(string jsonContents)",
        "// Line_Reference 96:         {",
        "// Line_Reference 99:                 var loginData = JsonConvert.DeserializeObject<JSONStructures.FxALogin>(jsonContents);",
        "// Line_Reference 100:                 return loginData;",
        "// Line_Reference 131:         /// <param name=\"cancelToken\">Token used to cancel the login process.</param>",
        "// Line_Reference 133:         public bool StartLogin(CancellationToken cancelToken)",
        "// Line_Reference 137:                 var loginURLs = GetLoginURLs();",
        "// Line_Reference 138:                 if (loginURLs == null)",
        "// Line_Reference 143:                 var pollInterval = loginURLs.PollInterval % 31; // Max 30 seconds, no more",
        "// Line_Reference 144:                 Manager.Account.LoginState = FxA.LoginState.LoggingIn;",
        "// Line_Reference 145:                 StartQueryLoginThread(loginURLs.VerificationUrl, loginURLs.PollInterval, loginURLs.ExpiresOn, cancelToken);",
        "// Line_Reference 147:                 // Launch a browser",
        "// Line_Reference 148:                 OpenBrowser(loginURLs.LoginUrl);",
        "// Line_Reference 150:                 // Navigate to verification page",
        "// Line_Reference 151:                 UI.MainWindow mainWindow = (UI.MainWindow)Application.Current.MainWindow;",
        "// Line_Reference 152:                 mainWindow.NavigateToView(new FirefoxPrivateNetwork.UI.VerifyAccountView(loginURLs.LoginUrl), UI.MainWindow.SlideDirection.Left);",
        "// Line_Reference 165:         /// Intiates the login verification thread.",
        "// Line_Reference 167:         /// <param name=\"queryUri\">Login verification URL.</param>",
        "// Line_Reference 168:         /// <param name=\"timeoutSeconds\">Timeout (secs) between verification query attempts.</param>",
        "// Line_Reference 169:         /// <param name=\"expiresAt\">Expiration date of the verification URL.</param>",
        "// Line_Reference 170:         /// <param name=\"cancelToken\">Token used to cancel the login thread.</param>",
        "// Line_Reference 171:         public void StartQueryLoginThread(string queryUri, int timeoutSeconds, DateTime expiresAt, CancellationToken cancelToken)",
        "// Line_Reference 173:             var loginThread = new Thread(() => QueryLoginThread(queryUri, timeoutSeconds, expiresAt, cancelToken))",
        "// Line_Reference 175:                 IsBackground = true,",
        "// Line_Reference 176:             };",
        "// Line_Reference 177:             loginThread.Start();",
        "// Line_Reference 181:         /// Polls a verification URL periodically to confirm if the user has logged in.",
        "// Line_Reference 183:         /// <param name=\"queryUri\">Login verification URL.</param>",
        "// Line_Reference 184:         /// <param name=\"timeoutSeconds\">Timeout (secs) between verification query attempts.</param>",
        "// Line_Reference 185:         /// <param name=\"expiresAt\">Expiration date of the verification URL.</param>",
        "// Line_Reference 186:         /// <param name=\"cancelToken\">Token used to cancel the login thread.</param>",
        "// Line_Reference 187:         private void QueryLoginThread(string queryUri, int timeoutSeconds, DateTime expiresAt, CancellationToken cancelToken)",
        "// Line_Reference 189:             while (Manager.Account.LoginState == FxA.LoginState.LoggingIn && DateTime.Compare(DateTime.UtcNow, expiresAt) < 0)",
        "// Line_Reference 190:             {",
        "// Line_Reference 191:                 try",
        "// Line_Reference 192:                 {",
        "// Line_Reference 193:                     var queryRawData = QueryRawLoginState(queryUri);",
        "// Line_Reference 195:                     if (cancelToken.IsCancellationRequested)",
        "// Line_Reference 196:                     {",
        "// Line_Reference 197:                         break;",
        "// Line_Reference 198:                     }",
        "// Line_Reference 200:                     if (queryRawData == null)",
        "// Line_Reference 201:                     {",
        "// Line_Reference 202:                         Thread.Sleep(TimeSpan.FromSeconds(timeoutSeconds));",
        "// Line_Reference 203:                         continue;",
        "// Line_Reference 204:                     }",
        "// Line_Reference 206:                     var queryData = ParseLoginState(queryRawData);",
        "// Line_Reference 208:                     if (queryData.User == null || queryData.User.Subscriptions == null || queryData.User.Subscriptions.Vpn == null)",
        "// Line_Reference 209:                     {",
        "// Line_Reference 210:                         Manager.Account.LoginState = LoginState.LoggedOut;",
        "// Line_Reference 211:                         break;",
        "// Line_Reference 212:                     }",
        "// Line_Reference 214:                     if (!queryData.User.Subscriptions.Vpn.Active)",
        "// Line_Reference 215:                     {",
        "// Line_Reference 216:                         Manager.Account.LoginState = LoginState.LoggedOut;",
        "// Line_Reference 217:                         break;",
        "// Line_Reference 218:                     }",
        "// Line_Reference 220:                     var processLoginResult = Manager.Account.ProcessLogin(queryRawData);",
        "// Line_Reference 221:                     Manager.Account.LoginState = LoginState.LoggedIn;",
        "// Line_Reference 222:                     Manager.StartUIUpdaters();",
        "// Line_Reference 224:                     var maxDevicesReached = !processLoginResult && Manager.Account.Config.FxALogin.User.Devices.Count() >= Manager.Account.Config.FxALogin.User.MaxDevices;",
        "// Line_Reference 226:                     Cache.FxAServerList.RetrieveRemoteServerList();",
        "// Line_Reference 227:                     Application.Current.Dispatcher.Invoke(() =>",
        "// Line_Reference 229:                         var owner = Application.Current.MainWindow;",
        "// Line_Reference 230:                         if (owner != null)",
        "// Line_Reference 232:                             if (!Manager.MustUpdate)",
        "// Line_Reference 233:                             {",
        "// Line_Reference 234:                                 if (maxDevicesReached)",
        "// Line_Reference 235:                                 {",
        "// Line_Reference 236:                                     ((UI.MainWindow)owner).NavigateToView(new UI.DevicesView(deviceLimitReached: true, fxaJson: queryRawData), UI.MainWindow.SlideDirection.Left);",
        "// Line_Reference 237:                                 }",
        "// Line_Reference 238:                                 else",
        "// Line_Reference 239:                                 {",
        "// Line_Reference 240:                                     ((UI.MainWindow)owner).NavigateToView(new UI.OnboardingView5(), UI.MainWindow.SlideDirection.Left);",
        "// Line_Reference 241:                                 }",
        "// Line_Reference 242:                             }",
        "// Line_Reference 243: ",
        "// Line_Reference 244:                             ((UI.MainWindow)owner).Show();",
        "// Line_Reference 245:                             ((UI.MainWindow)owner).WindowState = WindowState.Normal;",
        "// Line_Reference 246:                             ((UI.MainWindow)owner).Activate();",
        "// Line_Reference 248:                     });",
        "// Line_Reference 249:                 }",
        "// Line_Reference 250:                 catch (Exception e)",
        "// Line_Reference 251:                 {",
        "// Line_Reference 252:                     ErrorHandling.ErrorHandler.Handle(e, ErrorHandling.LogLevel.Debug);",
        "// Line_Reference 255:                 Thread.Sleep(TimeSpan.FromSeconds(5));",
        "// Line_Reference 257: ",
        "// Line_Reference 258:             LoginResultEvent?.Invoke(this, this, Manager.Account.LoginState);"
    ]
}
