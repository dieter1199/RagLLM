* Switches mode to select a single template by its name.
* @param  string  $fileName
* @return $this
public function whereFileName($fileName)
$this->selectSingle = $this->model->getFileNameParts($fileName);
return $this;
* Set the directory name which the query is targeting.
* @param  string  $dirName
* @return $this
public function from($dirName)
$this->from = $dirName;
return $this;
* Set the "offset" value of the query.
public function offset($value)
$this->offset = max(0, $value);
* Alias to set the "offset" value of the query.
public function skip($value)
return $this->offset($value);
* Set the "limit" value of the query.
public function limit($value)
if ($value >= 0) {
$this->limit = $value;
}
* Alias to set the "limit" value of the query.
public function take($value)
return $this->limit($value);
* Execute the query as a "select" statement.
*
* @param  array  $columns
* @return \October\Rain\Halcyon\Collection|static[]
*/
public function get($columns = ['*'])
{
if (!is_null($this->cacheMinutes)) {
$results = $this->getCached($columns);
}
else {
$results = $this->getFresh($columns);
}
$models = $this->getModels($results ?: []);
return $this->model->newCollection($models);
}
/**
* Get an array with the values of a given column.
* @param  string  $column
* @param  string  $key
* @return array
public function lists($column, $key = null)
$select = is_null($key) ? [$column] : [$column, $key];
if (!is_null($this->cacheMinutes)) {
$results = $this->getCached($select);
}
else {
$results = $this->getFresh($select);
}
$collection = new Collection($results);
return $collection->lists($column, $key);
* Set a model instance for the model being queried.
* @param  \October\Rain\Halcyon\Model  $model
* @return $this
public function setModel(Model $model)
$this->model = $model;
$this->extensions = $this->model->getAllowedExtensions();
$this->from($this->model->getObjectTypeDirName());
return $this;
}
/**
* Get the compiled file content representation of the query.
*
* @return string
*/
public function toCompiled()
{
return $this->processor->processUpdate($this, []);
* @param  string  $fileName
public function delete($fileName = null)
/**
* Get the model instance being queried.
*
* @return \October\Rain\Halcyon\Model
*/
public function getModel()
{
return $this->model;
}
* @return mixed
*
