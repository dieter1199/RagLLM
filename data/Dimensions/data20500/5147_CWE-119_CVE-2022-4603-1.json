{
    "cve_id": "CVE-2022-4603",
    "cve_description": "A vulnerability classified as problematic has been found in ppp. Affected is the function dumpppp of the file pppdump/pppdump.c of the component pppdump. The manipulation of the argument spkt.buf/rpkt.buf leads to improper validation of array index. The real existence of this vulnerability is still doubted at the moment. The name of the patch is a75fb7b198eed50d769c80c36629f38346882cbf. It is recommended to apply a patch to fix this issue. VDB-216198 is the identifier assigned to this vulnerability. NOTE: pppdump is not used in normal process of setting up a PPP connection, is not installed setuid-root, and is not invoked automatically in any scenario.",
    "cve_publish_date": "2022-12-18",
    "cwe_id": "CWE-119",
    "cwe_name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
    "cwe_description": "The product performs operations on a memory buffer, but it reads from or writes to a memory location outside the buffer's intended boundary. This may result in read or write operations on unexpected memory locations that could be linked to other variables, data structures, or internal program data.",
    "commit_message": "pppdump: Avoid out-of-range access to packet buffer\n\nThis fixes a potential vulnerability where data is written to spkt.buf\nand rpkt.buf without a check on the array index.  To fix this, we\ncheck the array index (pkt->cnt) before storing the byte or\nincrementing the count.  This also means we no longer have a potential\nsigned integer overflow on the increment of pkt->cnt.\n\nFortunately, pppdump is not used in the normal process of setting up a\nPPP connection, is not installed setuid-root, and is not invoked\nautomatically in any scenario that I am aware of.\n\nSigned-off-by: Paul Mackerras <paulus@ozlabs.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "pppdump.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "6",
    "number_of_lines_deleted_vulnerable_to_cve": "1",
    "vulnerable_lines": [
        "// Line_Reference 403: \t\t    pkt->buf[pkt->cnt++] = c;"
    ]
}
