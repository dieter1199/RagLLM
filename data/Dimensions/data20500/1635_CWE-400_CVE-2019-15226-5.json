{
    "cve_id": "CVE-2019-15226",
    "cve_description": "Upon receiving each incoming request header data, Envoy will iterate over existing request headers to verify that the total size of the headers stays below a maximum limit. The implementation in versions 1.10.0 through 1.11.1 for HTTP/1.x traffic and all versions of Envoy for HTTP/2 traffic had O(n^2) performance characteristics. A remote attacker may craft a request that stays below the maximum request header size but consists of many thousands of small headers to consume CPU and result in a denial-of-service attack.",
    "cve_publish_date": "2019-10-09",
    "cwe_id": "CWE-400",
    "cwe_name": "Uncontrolled Resource Consumption",
    "cwe_description": "The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.",
    "commit_message": "Track byteSize of HeaderMap internally.\n\nIntroduces a cached byte size updated internally in HeaderMap. The value\nis stored as an optional, and is cleared whenever a non-const pointer or\nreference to a HeaderEntry is accessed. The cached value can be set with\nrefreshByteSize() which performs an iteration over the HeaderMap to sum\nthe size of each key and value in the HeaderMap.\n\nSigned-off-by: Asra Ali <asraa@google.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "conn_manager_impl_test.cc",
    "code_language": "C++",
    "number_of_lines_added_for_mitigation": "0",
    "number_of_lines_deleted_vulnerable_to_cve": "45",
    "vulnerable_lines": [
        "// Line_Reference 4412: TEST_F(HttpConnectionManagerImplTest, OverlyLongHeadersRejected) {",
        "// Line_Reference 4413:   setup(false, \"\");",
        "// Line_Reference 4414: ",
        "// Line_Reference 4415:   std::string response_code;",
        "// Line_Reference 4416:   std::string response_body;",
        "// Line_Reference 4417:   EXPECT_CALL(*codec_, dispatch(_)).WillOnce(Invoke([&](Buffer::Instance&) -> void {",
        "// Line_Reference 4418:     StreamDecoder* decoder = &conn_manager_->newStream(response_encoder_);",
        "// Line_Reference 4419:     HeaderMapPtr headers{",
        "// Line_Reference 4420:         new TestHeaderMapImpl{{\":authority\", \"host\"}, {\":path\", \"/\"}, {\":method\", \"GET\"}}};",
        "// Line_Reference 4421:     headers->addCopy(LowerCaseString(\"Foo\"), std::string(60 * 1024, 'a'));",
        "// Line_Reference 4422: ",
        "// Line_Reference 4423:     EXPECT_CALL(response_encoder_, encodeHeaders(_, true))",
        "// Line_Reference 4424:         .WillOnce(Invoke([&response_code](const HeaderMap& headers, bool) -> void {",
        "// Line_Reference 4425:           response_code = std::string(headers.Status()->value().getStringView());",
        "// Line_Reference 4426:         }));",
        "// Line_Reference 4427:     decoder->decodeHeaders(std::move(headers), true);",
        "// Line_Reference 4428:     conn_manager_->newStream(response_encoder_);",
        "// Line_Reference 4429:   }));",
        "// Line_Reference 4430: ",
        "// Line_Reference 4431:   Buffer::OwnedImpl fake_input(\"1234\");",
        "// Line_Reference 4432:   conn_manager_->onData(fake_input, false); // kick off request",
        "// Line_Reference 4433: ",
        "// Line_Reference 4434:   EXPECT_EQ(\"431\", response_code);",
        "// Line_Reference 4435:   EXPECT_EQ(\"\", response_body);",
        "// Line_Reference 4436: }",
        "// Line_Reference 4437: ",
        "// Line_Reference 4438: TEST_F(HttpConnectionManagerImplTest, OverlyLongHeadersAcceptedIfConfigured) {",
        "// Line_Reference 4439:   max_request_headers_kb_ = 62;",
        "// Line_Reference 4440:   setup(false, \"\");",
        "// Line_Reference 4441: ",
        "// Line_Reference 4442:   EXPECT_CALL(*codec_, dispatch(_)).WillOnce(Invoke([&](Buffer::Instance&) -> void {",
        "// Line_Reference 4443:     StreamDecoder* decoder = &conn_manager_->newStream(response_encoder_);",
        "// Line_Reference 4444:     HeaderMapPtr headers{",
        "// Line_Reference 4445:         new TestHeaderMapImpl{{\":authority\", \"host\"}, {\":path\", \"/\"}, {\":method\", \"GET\"}}};",
        "// Line_Reference 4446:     headers->addCopy(LowerCaseString(\"Foo\"), std::string(60 * 1024, 'a'));",
        "// Line_Reference 4447: ",
        "// Line_Reference 4448:     EXPECT_CALL(response_encoder_, encodeHeaders(_, _)).Times(0);",
        "// Line_Reference 4449:     decoder->decodeHeaders(std::move(headers), true);",
        "// Line_Reference 4450:     conn_manager_->newStream(response_encoder_);",
        "// Line_Reference 4451:   }));",
        "// Line_Reference 4452: ",
        "// Line_Reference 4453:   Buffer::OwnedImpl fake_input(\"1234\");",
        "// Line_Reference 4454:   conn_manager_->onData(fake_input, false); // kick off request",
        "// Line_Reference 4455: }",
        "// Line_Reference 4456: "
    ]
}
