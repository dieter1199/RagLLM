{
    "cve_id": "CVE-2018-8098",
    "cve_description": "Integer overflow in the index.c:read_entry() function while decompressing a compressed prefix length in libgit2 before v0.26.2 allows an attacker to cause a denial of service (out-of-bounds read) via a crafted repository index file.",
    "cve_publish_date": "2018-03-14",
    "cwe_id": "CWE-190",
    "cwe_name": "Integer Overflow or Wraparound",
    "cwe_description": "The product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number.",
    "commit_message": "index: fix out-of-bounds read with invalid index entry prefix length\n\nThe index format in version 4 has prefix-compressed entries, where every\nindex entry can compress its path by using a path prefix of the previous\nentry. Since implmenting support for this index format version in commit\n5625d86b9 (index: support index v4, 2016-05-17), though, we do not\ncorrectly verify that the prefix length that we want to reuse is\nactually smaller or equal to the amount of characters than the length of\nthe previous index entry's path. This can lead to a an integer underflow\nand subsequently to an out-of-bounds read.\n\nFix this by verifying that the prefix is actually smaller than the\nprevious entry's path length.\n\nReported-by: Krishna Ram Prakash R <krp@gtux.in>\nReported-by: Vivek Parikh <viv0411.parikh@gmail.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "index.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "10",
    "number_of_lines_deleted_vulnerable_to_cve": "9",
    "vulnerable_lines": [
        "// Line_Reference 2368: \t\tsize_t varint_len;",
        "// Line_Reference 2369: \t\tsize_t strip_len = git_decode_varint((const unsigned char *)path_ptr,",
        "// Line_Reference 2370: \t\t\t\t\t\t     &varint_len);",
        "// Line_Reference 2371: \t\tsize_t last_len = strlen(last);",
        "// Line_Reference 2372: \t\tsize_t prefix_len = last_len - strip_len;",
        "// Line_Reference 2373: \t\tsize_t suffix_len = strlen(path_ptr + varint_len);",
        "// Line_Reference 2374: \t\tsize_t path_len;",
        "// Line_Reference 2375: ",
        "// Line_Reference 2376: \t\tif (varint_len == 0)"
    ]
}
