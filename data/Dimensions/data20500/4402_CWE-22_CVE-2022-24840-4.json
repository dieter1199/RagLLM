{
    "cve_id": "CVE-2022-24840",
    "cve_description": "django-s3file is a lightweight file upload input for Django and Amazon S3 . In versions prior to 5.5.1 it was possible to traverse the entire AWS S3 bucket and in most cases to access or delete files. If the `AWS_LOCATION` setting was set, traversal was limited to that location only. The issue was discovered by the maintainer. There were no reports of the vulnerability being known to or exploited by a third party, prior to the release of the patch. The vulnerability has been fixed in version 5.5.1 and above. There is no feasible workaround. We must urge all users to immediately updated to a patched version.",
    "cve_publish_date": "2022-06-09",
    "cwe_id": "CWE-22",
    "cwe_name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
    "cwe_description": "The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
    "commit_message": "Fix CVE-XXXX-XXXX -- Fix Path Traversal security vulnerability",
    "type_of_change": "Modification",
    "filename_of_changes": "test_forms.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "31",
    "number_of_lines_deleted_vulnerable_to_cve": "23",
    "vulnerable_lines": [
        "// Line_Reference 34:     @pytest.fixture",
        "// Line_Reference 35:     def freeze(self, monkeypatch):",
        "// Line_Reference 36:         \"\"\"Freeze datetime and UUID.\"\"\"",
        "// Line_Reference 37:         monkeypatch.setattr(",
        "// Line_Reference 38:             \"s3file.forms.S3FileInputMixin.upload_folder\",",
        "// Line_Reference 39:             os.path.join(storage.aws_location, \"tmp\"),",
        "// Line_Reference 40:         )",
        "// Line_Reference 41: ",
        "// Line_Reference 42:     def test_value_from_datadict(self, client, upload_file):",
        "// Line_Reference 43:         print(storage.location)",
        "// Line_Reference 45:             uploaded_file = storage.save(\"test.jpg\", f)",
        "// Line_Reference 49:                 \"file\": json.dumps([uploaded_file]),",
        "// Line_Reference 50:                 \"s3file\": '[\"file\"]',",
        "// Line_Reference 85:     def test_build_attr(self):",
        "// Line_Reference 102:     def test_get_conditions(self, freeze):",
        "// Line_Reference 109:                 [\"starts-with\", \"$key\", \"custom/location/tmp\"],",
        "// Line_Reference 148:     def test_file_insert(self, request, driver, live_server, upload_file, freeze):",
        "// Line_Reference 155:         assert storage.exists(\"tmp/%s.txt\" % request.node.name)",
        "// Line_Reference 161:     def test_file_insert_submit_value(self, driver, live_server, upload_file, freeze):",
        "// Line_Reference 181:     def test_progress(self, driver, live_server, upload_file, freeze):",
        "// Line_Reference 205:         freeze,",
        "// Line_Reference 212:         file_input.send_keys(\" \\n \".join([upload_file, another_upload_file]))",
        "// Line_Reference 214:         file_input.send_keys(yet_another_upload_file)"
    ]
}
