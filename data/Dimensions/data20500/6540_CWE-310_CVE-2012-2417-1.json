{
    "cve_id": "CVE-2012-2417",
    "cve_description": "PyCrypto before 2.6 does not produce appropriate prime numbers when using an ElGamal scheme to generate a key, which reduces the signature space or public key space and makes it easier for attackers to conduct brute force attacks to obtain the private key.",
    "cve_publish_date": "2012-06-17",
    "cwe_id": "CWE-310",
    "cwe_name": "Cryptographic Issues",
    "cwe_description": "Weaknesses in this category are related to the design and implementation of data confidentiality and integrity. Frequently these deal with the use of encoding techniques, encryption libraries, and hashing algorithms. The weaknesses in this category could lead to a degradation of the quality data if they are not addressed.",
    "commit_message": "Fix to bug #985164 (ElGamal key generation). Fix to missing range check in signature verification.",
    "type_of_change": "Modification",
    "filename_of_changes": "ElGamal.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "40",
    "number_of_lines_deleted_vulnerable_to_cve": "24",
    "vulnerable_lines": [
        "// Line_Reference 134:     # Generate prime p",
        "// Line_Reference 137:     obj.p=bignum(getPrime(bits, randfunc))",
        "// Line_Reference 138:     # Generate random number g",
        "// Line_Reference 141:     size=bits-1-(ord(randfunc(1)) & 63) # g will be from 1--64 bits smaller than p",
        "// Line_Reference 142:     if size<1:",
        "// Line_Reference 143:         size=bits-1",
        "// Line_Reference 144:     while (1):",
        "// Line_Reference 145:         obj.g=bignum(getPrime(size, randfunc))",
        "// Line_Reference 146:         if obj.g < obj.p:",
        "// Line_Reference 148:         size=(size+1) % bits",
        "// Line_Reference 149:         if size==0:",
        "// Line_Reference 150:             size=4",
        "// Line_Reference 151:     # Generate random number x",
        "// Line_Reference 154:     while (1):",
        "// Line_Reference 155:         size=bits-1-ord(randfunc(1)) # x will be from 1 to 256 bits smaller than p",
        "// Line_Reference 156:         if size>2:",
        "// Line_Reference 157:             break",
        "// Line_Reference 158:     while (1):",
        "// Line_Reference 159:         obj.x=bignum(getPrime(size, randfunc))",
        "// Line_Reference 160:         if obj.x < obj.p:",
        "// Line_Reference 161:             break",
        "// Line_Reference 162:         size = (size+1) % bits",
        "// Line_Reference 163:         if size==0:",
        "// Line_Reference 164:             size=4"
    ]
}
