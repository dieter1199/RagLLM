{
    "cve_id": "CVE-2024-27102",
    "cve_description": "Wings is the server control plane for Pterodactyl Panel. This vulnerability impacts anyone running the affected versions of Wings. The vulnerability can potentially be used to access files and directories on the host system. The full scope of impact is exactly unknown, but reading files outside of a server's base directory (sandbox root) is possible. In order to use this exploit, an attacker must have an existing \"server\" allocated and controlled by Wings. Details on the exploitation of this vulnerability are embargoed until March 27th, 2024 at 18:00 UTC. In order to mitigate this vulnerability, a full rewrite of the entire server filesystem was necessary. Because of this, the size of the patch is massive, however effort was made to reduce the amount of breaking changes. Users are advised to update to version 1.11.9. There are no known workarounds for this vulnerability.",
    "cve_publish_date": "2024-03-13",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "server(filesystem): rebuild everything imaginable\n\nThis wonderfully large commit replaces basically everything under the\n`server/filesystem` package, re-implementing essentially everything.\n\nThis is related to\nhttps://github.com/pterodactyl/wings/security/advisories/GHSA-494h-9924-xww9\n\nIf any vulnerabilities related to symlinks persist after this commit, I\nwill be very upset.\n\nSigned-off-by: Matthew Penner <me@matthewp.io>",
    "type_of_change": "Modification",
    "filename_of_changes": "archive_test.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "13",
    "number_of_lines_deleted_vulnerable_to_cve": "22",
    "vulnerable_lines": [
        "// Line_Reference 23: \t\t\trfs.reset()",
        "// Line_Reference 24: \t\t})",
        "// Line_Reference 25: ",
        "// Line_Reference 26: \t\tg.It(\"throws an error when passed invalid file paths\", func() {",
        "// Line_Reference 27: \t\t\ta := &Archive{",
        "// Line_Reference 28: \t\t\t\tBasePath: fs.Path(),",
        "// Line_Reference 29: \t\t\t\tFiles: []string{",
        "// Line_Reference 30: \t\t\t\t\t// To use the archiver properly, this needs to be filepath.Join(BasePath, \"yeet\")",
        "// Line_Reference 31: \t\t\t\t\t// However, this test tests that we actually validate that behavior.",
        "// Line_Reference 32: \t\t\t\t\t\"yeet\",",
        "// Line_Reference 33: \t\t\t\t},",
        "// Line_Reference 34: \t\t\t}",
        "// Line_Reference 35: ",
        "// Line_Reference 36: \t\t\tg.Assert(a.Create(context.Background(), \"\")).IsNotNil()",
        "// Line_Reference 43: \t\t\terr := fs.Writefile(\"test/file.txt\", strings.NewReader(\"hello, world!\\n\"))",
        "// Line_Reference 46: \t\t\terr = fs.Writefile(\"test2/file.txt\", strings.NewReader(\"hello, world!\\n\"))",
        "// Line_Reference 49: \t\t\terr = fs.Writefile(\"test_file.txt\", strings.NewReader(\"hello, world!\\n\"))",
        "// Line_Reference 52: \t\t\terr = fs.Writefile(\"test_file.txt.old\", strings.NewReader(\"hello, world!\\n\"))",
        "// Line_Reference 56: \t\t\t\tBasePath: fs.Path(),",
        "// Line_Reference 58: \t\t\t\t\tfilepath.Join(fs.Path(), \"test\"),",
        "// Line_Reference 59: \t\t\t\t\tfilepath.Join(fs.Path(), \"test_file.txt\"),",
        "// Line_Reference 122: "
    ]
}
