if (pack->hdr.ver == 2) {
} else {
pack->hdr.ver = ver;
pack->hdr.T = 1;
pack->hdr.L = 1;
pack->hdr.S = 1;
if (avp->length < sizeof(struct l2tp_avp_t) + 2) {
ntohs(avp->type), avp->length);
attr_len = avp->length - sizeof(struct l2tp_avp_t);
int n, length;
uint8_t *buf;
struct l2tp_dict_attr_t *da;
struct l2tp_attr_t *attr, *RV = NULL;
uint8_t *ptr;
struct l2tp_packet_t *pack;
socklen_t len = sizeof(addr);
struct msghdr msg;
char msg_control[128];
struct cmsghdr *cmsg;
*p = NULL;
msg.msg_controllen = 128;
n = recvfrom(fd, buf, L2TP_MAX_PACKET_SIZE, 0, &addr, &len);
if (n < 6) {
if (hdr->T == 0)
if (n < ntohs(hdr->length)) {
log_warn("l2tp: short packet received (%i/%i)\n", n, ntohs(hdr->length));
if (hdr->ver == 2) {
if (hdr->L == 0) {
if (conf_verbose)
log_warn("l2tp: incorrect message received (L=0)\n");
if (!conf_avp_permissive)
goto out_err_hdr;
}
if (hdr->S == 0) {
log_warn("l2tp: incorrect message received (S=0)\n");
if (!conf_avp_permissive)
goto out_err_hdr;
if (hdr->O == 1) {
if (conf_verbose)
log_warn("l2tp: incorrect message received (O=1)\n");
if (!conf_avp_permissive)
goto out_err_hdr;
}
} else if (hdr->ver != 3) {
log_warn("l2tp: protocol version %i is not supported\n", hdr->ver);
length = ntohs(hdr->length) - sizeof(*hdr);
while (length) {
*(uint16_t *)ptr = ntohs(*(uint16_t *)ptr);
avp = (struct l2tp_avp_t *)ptr;
if (avp->length > length) {
if (conf_verbose)
log_warn("l2tp: unknown avp received (type=%i, M=%u)\n", ntohs(avp->type), avp->M);
if (avp->M && !conf_avp_permissive)
if (da->M != -1 && da->M != avp->M) {
if (conf_verbose)
log_warn("l2tp: incorrect avp received (type=%i, M=%i, must be %i)\n", ntohs(avp->type), avp->M, da->M);
if (da->H != -1 && da->H != avp->H) {
if (conf_verbose)
log_warn("l2tp: incorrect avp received (type=%i, H=%i, must be %i)\n", ntohs(avp->type), avp->H, da->H);
if (avp->H) {
}
attr = mempool_alloc(attr_pool);
memset(attr, 0, sizeof(*attr));
list_add_tail(&attr->entry, &pack->attrs);
if (avp->H) {
orig_avp_len = avp->length;
attr->M = avp->M;
ptr += avp->length;
length -= avp->length;
uint8_t *buf = mempool_alloc(buf_pool);
uint8_t *ptr;
int n;
int len = sizeof(pack->hdr);
ptr = buf + sizeof(pack->hdr);
avp->M = attr->M;
avp->H = attr->H;
avp->length = sizeof(*avp) + attr->length;
*(uint16_t *)ptr = htons(*(uint16_t *)ptr);
n = sendto(sock, buf, ntohs(pack->hdr.length), 0,
&pack->addr, sizeof(pack->addr));
if (n != ntohs(pack->hdr.length)) {
log_warn("l2tp: short write (%i/%i)\n", n, ntohs(pack->hdr.length));
