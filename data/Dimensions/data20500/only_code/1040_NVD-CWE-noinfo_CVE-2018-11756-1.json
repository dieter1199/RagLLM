// note: "out" will not be empty as the PHP web server outputs a message when
// it starts up
lazy val phpContainerImageName = "action-php-v7.x"
testEcho(Seq {
(
"PHP",
|<?php
|function main(array $args) : array {
|    echo 'hello stdout';
|    error_log('hello stderr');
|    return $args;
|}
""".stripMargin)
})
testNotReturningJson("""
|function main(array $args) {
|    return "not a json object";
""".stripMargin)
testUnicode(Seq {
(
"PHP",
})
testEnv(
Seq {
(
"PHP",
"""
|<?php
|function main(array $args) : array {
|    return [
|       "env" => $_ENV,
|       "api_host" => $_ENV['__OW_API_HOST'],
|       "api_key" => $_ENV['__OW_API_KEY'],
|       "namespace" => $_ENV['__OW_NAMESPACE'],
|       "action_name" => $_ENV['__OW_ACTION_NAME'],
|       "activation_id" => $_ENV['__OW_ACTIVATION_ID'],
|       "deadline" => $_ENV['__OW_DEADLINE'],
|    ];
|}
""".stripMargin.trim)
},
enforceEmptyOutputStream)
testInitCannotBeCalledMoreThanOnce("""
|<?php
|function main(array $args) : array {
|    echo 'hello stdout';
|    error_log('hello stderr');
|    return $args;
|}
""".stripMargin)
it should "fail to initialize with no code" in {
val (out, err) = withPhp7Container { c =>
val code = ""
val (initCode, error) = c.init(initPayload(code))
initCode should not be (200)
error shouldBe a[Some[_]]
error.get shouldBe a[JsObject]
error.get.fields("error").toString should include("No code to execute")
}
}
it should "support actions using non-default entry point" in {
val (out, err) = withPhp7Container { c =>
val code = """
| <?php
| function niam(array $args) {
|     return [result => "it works"];
| }
""".stripMargin
c.init(initPayload(code, main = "niam"))._1 should be(200)
val (runCode, runRes) = c.run(runPayload(JsObject()))
runRes.get.fields.get("result") shouldBe Some(JsString("it works"))
}
}
