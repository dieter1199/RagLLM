UINT32 flags;
NTLM_AV_PAIR* AvFlags;
flags = 0;
AvFlags = NULL;
{
Stream_Free(s, FALSE);
return SEC_E_INVALID_TOKEN;
}
{
Stream_Free(s, FALSE);
return SEC_E_INVALID_TOKEN;
}
{
Stream_Free(s, FALSE);
return SEC_E_INVALID_TOKEN;
}
{
Stream_Free(s, FALSE);
return SEC_E_INVALID_TOKEN;
}
{
Stream_Free(s, FALSE);
return SEC_E_INVALID_TOKEN;
}
{
Stream_Free(s, FALSE);
return SEC_E_INVALID_TOKEN;
}
{
Stream_Free(s, FALSE);
return SEC_E_INVALID_TOKEN;
}
{
Stream_Free(s, FALSE);
return SEC_E_INVALID_TOKEN;
}
{
Stream_Free(s, FALSE);
return SEC_E_INVALID_TOKEN;
}
{
Stream_Free(s, FALSE);
return SEC_E_INVALID_TOKEN;
}
{
Stream_Free(s, FALSE);
return SEC_E_INTERNAL_ERROR;
}
{
Stream_Free(s, FALSE);
return SEC_E_INTERNAL_ERROR;
}
{
Stream_Free(s, FALSE);
return SEC_E_INTERNAL_ERROR;
}
{
Stream_Free(s, FALSE);
return SEC_E_INTERNAL_ERROR;
}
{
Stream_Free(s, FALSE);
return SEC_E_INTERNAL_ERROR;
}
{
Stream_Free(s, FALSE);
return SEC_E_INTERNAL_ERROR;
}
if (ntlm_read_ntlm_v2_response(snt, &(context->NTLMv2Response)) < 0)
{
Stream_Free(s, FALSE);
Stream_Free(snt, FALSE);
return SEC_E_INVALID_TOKEN;
}
{
Stream_Free(s, FALSE);
return SEC_E_INTERNAL_ERROR;
}
{
Stream_Free(s, FALSE);
return SEC_E_INVALID_TOKEN;
}
{
Stream_Free(s, FALSE);
return SEC_E_INTERNAL_ERROR;
}
{
Stream_Free(s, FALSE);
return SEC_E_INVALID_TOKEN;
}
{
Stream_Free(s, FALSE);
return SEC_E_INTERNAL_ERROR;
}
{
Stream_Free(s, FALSE);
return SEC_E_INTERNAL_ERROR;
}
