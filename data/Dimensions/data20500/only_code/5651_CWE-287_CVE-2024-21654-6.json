context "with reset_api_key and invalid password" do
password_reset: { reset_api_key: "true", password: "pass" }
should respond_with :success
context "without reset_api_key and valid password" do
put :update, params: {
user_id: @user.id,
token: @user.confirmation_token,
password_reset: { password: PasswordHelpers::SECURE_TEST_PASSWORD }
}
should respond_with :found
should "not change api_key" do
assert_equal(@user.reload.api_key, @api_key)
should "change password" do
refute_equal(@user.reload.encrypted_password, @old_encrypted_password)
end
end
context "with reset_api_key false and valid password" do
setup do
put :update, params: {
user_id: @user.id,
token: @user.confirmation_token,
password_reset: { reset_api_key: "false", password: PasswordHelpers::SECURE_TEST_PASSWORD }
}
end
should respond_with :found
should "not change api_key" do
assert_equal(@user.reload.api_key, @api_key)
end
should "change password" do
refute_equal(@user.reload.encrypted_password, @old_encrypted_password)
end
context "with reset_api_key and valid password" do
setup do
put :update, params: {
user_id: @user.id,
token: @user.confirmation_token,
password_reset: { reset_api_key: "true", password: PasswordHelpers::SECURE_TEST_PASSWORD }
}
end
should respond_with :found
should "change api_key" do
refute_equal(@user.reload.api_key, @api_key)
end
should "change password" do
refute_equal(@user.reload.encrypted_password, @old_encrypted_password)
end
should "not delete new api key" do
refute_predicate @new_api_key.reload, :destroyed?
refute_empty @user.reload.api_keys
end
end
context "with reset_api_key and reset_api_keys and valid password" do
setup do
put :update, params: {
user_id: @user.id,
token: @user.confirmation_token,
password_reset: { reset_api_key: "true", reset_api_keys: "true", password: PasswordHelpers::SECURE_TEST_PASSWORD }
}
end
should respond_with :found
should "change api_key" do
refute_equal(@user.reload.api_key, @api_key)
end
should "change password" do
refute_equal(@user.reload.encrypted_password, @old_encrypted_password)
end
should "expire new api key" do
assert_empty @user.reload.api_keys.unexpired
refute_empty @user.reload.api_keys.expired
