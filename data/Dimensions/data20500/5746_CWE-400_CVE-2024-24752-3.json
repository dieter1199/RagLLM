{
    "cve_id": "CVE-2024-24752",
    "cve_description": "Bref enable serverless PHP on AWS Lambda. When Bref is used with the Event-Driven Function runtime and the handler is a `RequestHandlerInterface`, then the Lambda event is converted to a PSR7 object. During the conversion process, if the request is a MultiPart, each part is parsed and for each which contains a file, it is extracted and saved in `/tmp` with a random filename starting with `bref_upload_`. The flow mimics what plain PHP does but it does not delete the temporary files when the request has been processed. An attacker could fill the Lambda instance disk by performing multiple MultiPart requests containing files. This vulnerability is patched in 2.1.13.",
    "cve_publish_date": "2024-02-01",
    "cwe_id": "CWE-400",
    "cwe_name": "Uncontrolled Resource Consumption",
    "cwe_description": "The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.",
    "commit_message": "Support malformed multipart body\n\nFor example body containing broken array keys like `key0[key1][key2][`",
    "type_of_change": "Modification",
    "filename_of_changes": "Psr7Bridge.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "36",
    "number_of_lines_deleted_vulnerable_to_cve": "23",
    "vulnerable_lines": [
        "// Line_Reference 98:         $bodyString = $event->getBody();",
        "// Line_Reference 99:         $files = [];",
        "// Line_Reference 100:         $parsedBody = null;",
        "// Line_Reference 102:         if ($contentType !== null && $event->getMethod() === 'POST') {",
        "// Line_Reference 103:             if (str_starts_with($contentType, 'application/x-www-form-urlencoded')) {",
        "// Line_Reference 104:                 parse_str($bodyString, $parsedBody);",
        "// Line_Reference 105:             } else {",
        "// Line_Reference 106:                 $document = new Part(\"Content-type: $contentType\\r\\n\\r\\n\" . $bodyString);",
        "// Line_Reference 107:                 if ($document->isMultiPart()) {",
        "// Line_Reference 108:                     $parsedBody = [];",
        "// Line_Reference 109:                     foreach ($document->getParts() as $part) {",
        "// Line_Reference 110:                         if ($part->isFile()) {",
        "// Line_Reference 112:                             if ($tmpPath === false) {",
        "// Line_Reference 113:                                 throw new RuntimeException('Unable to create a temporary directory');",
        "// Line_Reference 114:                             }",
        "// Line_Reference 115:                             file_put_contents($tmpPath, $part->getBody());",
        "// Line_Reference 116:                             $file = new UploadedFile($tmpPath, filesize($tmpPath), UPLOAD_ERR_OK, $part->getFileName(), $part->getMimeType());",
        "// Line_Reference 117: ",
        "// Line_Reference 118:                             self::parseKeyAndInsertValueInArray($files, $part->getName(), $file);",
        "// Line_Reference 119:                         } else {",
        "// Line_Reference 120:                             self::parseKeyAndInsertValueInArray($parsedBody, $part->getName(), $part->getBody());",
        "// Line_Reference 121:                         }",
        "// Line_Reference 122:                     }"
    ]
}
