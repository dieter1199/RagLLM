{
    "cve_id": "CVE-2014-0156",
    "cve_description": "Awesome spawn contains OS command injection vulnerability, which allows execution of additional commands passed to Awesome spawn as arguments. If untrusted input was included in command arguments, attacker could use this flaw to execute arbitrary command.",
    "cve_publish_date": "2022-06-30",
    "cwe_id": "CWE-78",
    "cwe_name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
    "cwe_description": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
    "commit_message": "Separate command line building and sanitizing into its own class.",
    "type_of_change": "Modification",
    "filename_of_changes": "awesome_spawn_spec.rb",
    "code_language": "Ruby",
    "number_of_lines_added_for_mitigation": "0",
    "number_of_lines_deleted_vulnerable_to_cve": "67",
    "vulnerable_lines": [
        "// Line_Reference 131: ",
        "// Line_Reference 132:   context \".build_command_line\" do",
        "// Line_Reference 133:     it \"sanitizes crazy params\" do",
        "// Line_Reference 134:       cl = subject.build_command_line(\"true\", modified_params)",
        "// Line_Reference 135:       expect(cl).to eq \"true --user bob --pass P@\\\\$sw0\\\\^\\\\&\\\\ \\\\|\\\\<\\\\>/-\\\\+\\\\*d\\\\% --db --desc=Some\\\\ Description --symkey --symkey-dash pkg1 some\\\\ pkg --pool 123 --pool 456\"",
        "// Line_Reference 136:     end",
        "// Line_Reference 137: ",
        "// Line_Reference 138:     it \"handles Symbol keys\" do",
        "// Line_Reference 139:       cl = subject.build_command_line(\"true\", :abc => \"def\")",
        "// Line_Reference 140:       expect(cl).to eq \"true --abc def\"",
        "// Line_Reference 141:     end",
        "// Line_Reference 142: ",
        "// Line_Reference 143:     it \"handles Symbol keys with tailing '='\" do",
        "// Line_Reference 144:       cl = subject.build_command_line(\"true\", :abc= => \"def\")",
        "// Line_Reference 145:       expect(cl).to eq \"true --abc=def\"",
        "// Line_Reference 146:     end",
        "// Line_Reference 147: ",
        "// Line_Reference 148:     it \"handles Symbol keys with underscore\" do",
        "// Line_Reference 149:       cl = subject.build_command_line(\"true\", :abc_def => \"ghi\")",
        "// Line_Reference 150:       expect(cl).to eq \"true --abc-def ghi\"",
        "// Line_Reference 151:     end",
        "// Line_Reference 152: ",
        "// Line_Reference 153:     it \"handles Symbol keys with underscore and tailing '='\" do",
        "// Line_Reference 154:       cl = subject.build_command_line(\"true\", :abc_def= => \"ghi\")",
        "// Line_Reference 155:       expect(cl).to eq \"true --abc-def=ghi\"",
        "// Line_Reference 156:     end",
        "// Line_Reference 157: ",
        "// Line_Reference 158:     it \"sanitizes Fixnum array param value\" do",
        "// Line_Reference 159:       cl = subject.build_command_line(\"true\", nil => [1])",
        "// Line_Reference 160:       expect(cl).to eq \"true 1\"",
        "// Line_Reference 161:     end",
        "// Line_Reference 162: ",
        "// Line_Reference 163:     it \"sanitizes Pathname param value\" do",
        "// Line_Reference 164:       cl = subject.build_command_line(\"true\", nil => [Pathname.new(\"/usr/bin/ruby\")])",
        "// Line_Reference 165:       expect(cl).to eq \"true /usr/bin/ruby\"",
        "// Line_Reference 166:     end",
        "// Line_Reference 167: ",
        "// Line_Reference 168:     it \"sanitizes Pathname param key\" do",
        "// Line_Reference 169:       cl = subject.build_command_line(\"true\", Pathname.new(\"/usr/bin/ruby\") => nil)",
        "// Line_Reference 170:       expect(cl).to eq \"true /usr/bin/ruby\"",
        "// Line_Reference 171:     end",
        "// Line_Reference 172: ",
        "// Line_Reference 173:     it \"with params as empty Hash\" do",
        "// Line_Reference 174:       cl = subject.build_command_line(\"true\", {})",
        "// Line_Reference 175:       expect(cl).to eq \"true\"",
        "// Line_Reference 176:     end",
        "// Line_Reference 177: ",
        "// Line_Reference 178:     it \"with params as nil\" do",
        "// Line_Reference 179:       cl = subject.build_command_line(\"true\", nil)",
        "// Line_Reference 180:       expect(cl).to eq \"true\"",
        "// Line_Reference 181:     end",
        "// Line_Reference 182: ",
        "// Line_Reference 183:     it \"without params\" do",
        "// Line_Reference 184:       cl = subject.build_command_line(\"true\")",
        "// Line_Reference 185:       expect(cl).to eq \"true\"",
        "// Line_Reference 186:     end",
        "// Line_Reference 187: ",
        "// Line_Reference 188:     it \"with Pathname command\" do",
        "// Line_Reference 189:       cl = subject.build_command_line(Pathname.new(\"/usr/bin/ruby\"))",
        "// Line_Reference 190:       expect(cl).to eq \"/usr/bin/ruby\"",
        "// Line_Reference 191:     end",
        "// Line_Reference 192: ",
        "// Line_Reference 193:     it \"with Pathname command and params\" do",
        "// Line_Reference 194:       cl = subject.build_command_line(Pathname.new(\"/usr/bin/ruby\"), \"-v\" => nil)",
        "// Line_Reference 195:       expect(cl).to eq \"/usr/bin/ruby -v\"",
        "// Line_Reference 196:     end",
        "// Line_Reference 197:   end"
    ]
}
