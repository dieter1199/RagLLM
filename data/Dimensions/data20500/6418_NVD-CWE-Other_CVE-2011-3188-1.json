{
    "cve_id": "CVE-2011-3188",
    "cve_description": "The (1) IPv4 and (2) IPv6 implementations in the Linux kernel before 3.1 use a modified MD4 algorithm to generate sequence numbers and Fragment Identification values, which makes it easier for remote attackers to cause a denial of service (disrupted networking) or hijack network sessions by predicting these values and sending crafted packets.",
    "cve_publish_date": "2012-05-24",
    "cwe_id": "NVD-CWE-Other",
    "cwe_name": "Other",
    "cwe_description": "NVD is only using a subset of CWE for mapping instead of the entire CWE, and the weakness type is not covered by that subset.",
    "commit_message": "net: Compute protocol sequence numbers and fragment IDs using MD5.\n\nComputers have become a lot faster since we compromised on the\npartial MD4 hash which we use currently for performance reasons.\n\nMD5 is a much safer choice, and is inline with both RFC1948 and\nother ISS generators (OpenBSD, Solaris, etc.)\n\nFurthermore, only having 24-bits of the sequence number be truly\nunpredictable is a very serious limitation.  So the periodic\nregeneration and 8-bit counter have been removed.  We compute and\nuse a full 32-bit sequence number.\n\nFor ipv6, DCCP was found to use a 32-bit truncated initial sequence\nnumber (it needs 43-bits) and that is fixed here as well.\n\nReported-by: Dan Kaminsky <dan@doxpara.com>\nTested-by: Willy Tarreau <w@1wt.eu>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "type_of_change": "Modification",
    "filename_of_changes": "ipv6.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "2",
    "number_of_lines_deleted_vulnerable_to_cve": "7",
    "vulnerable_lines": [
        "// Line_Reference 72: static inline __u32 secure_dccpv6_sequence_number(__be32 *saddr, __be32 *daddr,",
        "// Line_Reference 73: \t\t\t\t\t\t  __be16 sport, __be16 dport   )",
        "// Line_Reference 74: {",
        "// Line_Reference 75: \treturn secure_tcpv6_sequence_number(saddr, daddr, sport, dport);",
        "// Line_Reference 76: }",
        "// Line_Reference 77: ",
        "// Line_Reference 78: static inline __u32 dccp_v6_init_sequence(struct sk_buff *skb)"
    ]
}
