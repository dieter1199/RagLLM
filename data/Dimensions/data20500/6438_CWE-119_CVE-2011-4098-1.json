{
    "cve_id": "CVE-2011-4098",
    "cve_description": "The fallocate implementation in the GFS2 filesystem in the Linux kernel before 3.2 relies on the page cache, which might allow local users to cause a denial of service by preallocating blocks in certain situations involving insufficient memory.",
    "cve_publish_date": "2013-06-08",
    "cwe_id": "CWE-119",
    "cwe_name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
    "cwe_description": "The product performs operations on a memory buffer, but it reads from or writes to a memory location outside the buffer's intended boundary. This may result in read or write operations on unexpected memory locations that could be linked to other variables, data structures, or internal program data.",
    "commit_message": "GFS2: rewrite fallocate code to write blocks directly\n\nGFS2's fallocate code currently goes through the page cache. Since it's only\nwriting to the end of the file or to holes in it, it doesn't need to, and it\nwas causing issues on low memory environments. This patch pulls in some of\nSteve's block allocation work, and uses it to simply allocate the blocks for\nthe file, and zero them out at allocation time.  It provides a slight\nperformance increase, and it dramatically simplifies the code.\n\nSigned-off-by: Benjamin Marzinski <bmarzins@redhat.com>\nSigned-off-by: Steven Whitehouse <swhiteho@redhat.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "file.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "24",
    "number_of_lines_deleted_vulnerable_to_cve": "147",
    "vulnerable_lines": [
        "// Line_Reference 672: static int empty_write_end(struct page *page, unsigned from,",
        "// Line_Reference 673: \t\t\t   unsigned to, int mode)",
        "// Line_Reference 674: {",
        "// Line_Reference 675: \tstruct inode *inode = page->mapping->host;",
        "// Line_Reference 676: \tstruct gfs2_inode *ip = GFS2_I(inode);",
        "// Line_Reference 677: \tstruct buffer_head *bh;",
        "// Line_Reference 678: \tunsigned offset, blksize = 1 << inode->i_blkbits;",
        "// Line_Reference 679: \tpgoff_t end_index = i_size_read(inode) >> PAGE_CACHE_SHIFT;",
        "// Line_Reference 680: ",
        "// Line_Reference 681: \tzero_user(page, from, to-from);",
        "// Line_Reference 682: \tmark_page_accessed(page);",
        "// Line_Reference 683: ",
        "// Line_Reference 684: \tif (page->index < end_index || !(mode & FALLOC_FL_KEEP_SIZE)) {",
        "// Line_Reference 685: \t\tif (!gfs2_is_writeback(ip))",
        "// Line_Reference 686: \t\t\tgfs2_page_add_databufs(ip, page, from, to);",
        "// Line_Reference 687: ",
        "// Line_Reference 688: \t\tblock_commit_write(page, from, to);",
        "// Line_Reference 689: \t\treturn 0;",
        "// Line_Reference 690: \t}",
        "// Line_Reference 691: ",
        "// Line_Reference 692: \toffset = 0;",
        "// Line_Reference 693: \tbh = page_buffers(page);",
        "// Line_Reference 694: \twhile (offset < to) {",
        "// Line_Reference 695: \t\tif (offset >= from) {",
        "// Line_Reference 696: \t\t\tset_buffer_uptodate(bh);",
        "// Line_Reference 697: \t\t\tmark_buffer_dirty(bh);",
        "// Line_Reference 698: \t\t\tclear_buffer_new(bh);",
        "// Line_Reference 699: \t\t\twrite_dirty_buffer(bh, WRITE);",
        "// Line_Reference 700: \t\t}",
        "// Line_Reference 701: \t\toffset += blksize;",
        "// Line_Reference 702: \t\tbh = bh->b_this_page;",
        "// Line_Reference 703: \t}",
        "// Line_Reference 704: ",
        "// Line_Reference 705: \toffset = 0;",
        "// Line_Reference 706: \tbh = page_buffers(page);",
        "// Line_Reference 707: \twhile (offset < to) {",
        "// Line_Reference 708: \t\tif (offset >= from) {",
        "// Line_Reference 709: \t\t\twait_on_buffer(bh);",
        "// Line_Reference 710: \t\t\tif (!buffer_uptodate(bh))",
        "// Line_Reference 711: \t\t\t\treturn -EIO;",
        "// Line_Reference 712: \t\t}",
        "// Line_Reference 713: \t\toffset += blksize;",
        "// Line_Reference 714: \t\tbh = bh->b_this_page;",
        "// Line_Reference 715: \t}",
        "// Line_Reference 716: \treturn 0;",
        "// Line_Reference 717: }",
        "// Line_Reference 718: ",
        "// Line_Reference 719: static int needs_empty_write(sector_t block, struct inode *inode)",
        "// Line_Reference 720: {",
        "// Line_Reference 721: \tint error;",
        "// Line_Reference 722: \tstruct buffer_head bh_map = { .b_state = 0, .b_blocknr = 0 };",
        "// Line_Reference 723: ",
        "// Line_Reference 724: \tbh_map.b_size = 1 << inode->i_blkbits;",
        "// Line_Reference 725: \terror = gfs2_block_map(inode, block, &bh_map, 0);",
        "// Line_Reference 726: \tif (unlikely(error))",
        "// Line_Reference 727: \t\treturn error;",
        "// Line_Reference 728: \treturn !buffer_mapped(&bh_map);",
        "// Line_Reference 729: }",
        "// Line_Reference 730: ",
        "// Line_Reference 731: static int write_empty_blocks(struct page *page, unsigned from, unsigned to,",
        "// Line_Reference 732: \t\t\t      int mode)",
        "// Line_Reference 733: {",
        "// Line_Reference 734: \tstruct inode *inode = page->mapping->host;",
        "// Line_Reference 735: \tunsigned start, end, next, blksize;",
        "// Line_Reference 736: \tsector_t block = page->index << (PAGE_CACHE_SHIFT - inode->i_blkbits);",
        "// Line_Reference 737: \tint ret;",
        "// Line_Reference 738: ",
        "// Line_Reference 739: \tblksize = 1 << inode->i_blkbits;",
        "// Line_Reference 740: \tnext = end = 0;",
        "// Line_Reference 741: \twhile (next < from) {",
        "// Line_Reference 742: \t\tnext += blksize;",
        "// Line_Reference 743: \t\tblock++;",
        "// Line_Reference 744: \t}",
        "// Line_Reference 745: \tstart = next;",
        "// Line_Reference 746: \tdo {",
        "// Line_Reference 747: \t\tnext += blksize;",
        "// Line_Reference 748: \t\tret = needs_empty_write(block, inode);",
        "// Line_Reference 749: \t\tif (unlikely(ret < 0))",
        "// Line_Reference 750: \t\t\treturn ret;",
        "// Line_Reference 751: \t\tif (ret == 0) {",
        "// Line_Reference 752: \t\t\tif (end) {",
        "// Line_Reference 753: \t\t\t\tret = __block_write_begin(page, start, end - start,",
        "// Line_Reference 754: \t\t\t\t\t\t\t  gfs2_block_map);",
        "// Line_Reference 755: \t\t\t\tif (unlikely(ret))",
        "// Line_Reference 756: \t\t\t\t\treturn ret;",
        "// Line_Reference 757: \t\t\t\tret = empty_write_end(page, start, end, mode);",
        "// Line_Reference 758: \t\t\t\tif (unlikely(ret))",
        "// Line_Reference 759: \t\t\t\t\treturn ret;",
        "// Line_Reference 760: \t\t\t\tend = 0;",
        "// Line_Reference 761: \t\t\t}",
        "// Line_Reference 762: \t\t\tstart = next;",
        "// Line_Reference 763: \t\t}",
        "// Line_Reference 764: \t\telse",
        "// Line_Reference 765: \t\t\tend = next;",
        "// Line_Reference 766: \t\tblock++;",
        "// Line_Reference 767: \t} while (next < to);",
        "// Line_Reference 768: ",
        "// Line_Reference 769: \tif (end) {",
        "// Line_Reference 770: \t\tret = __block_write_begin(page, start, end - start, gfs2_block_map);",
        "// Line_Reference 771: \t\tif (unlikely(ret))",
        "// Line_Reference 772: \t\t\treturn ret;",
        "// Line_Reference 773: \t\tret = empty_write_end(page, start, end, mode);",
        "// Line_Reference 774: \t\tif (unlikely(ret))",
        "// Line_Reference 775: \t\t\treturn ret;",
        "// Line_Reference 776: \t}",
        "// Line_Reference 777: ",
        "// Line_Reference 778: \treturn 0;",
        "// Line_Reference 779: }",
        "// Line_Reference 780: ",
        "// Line_Reference 787: \tu64 start = offset >> PAGE_CACHE_SHIFT;",
        "// Line_Reference 788: \tunsigned int start_offset = offset & ~PAGE_CACHE_MASK;",
        "// Line_Reference 789: \tu64 end = (offset + len - 1) >> PAGE_CACHE_SHIFT;",
        "// Line_Reference 790: \tpgoff_t curr;",
        "// Line_Reference 791: \tstruct page *page;",
        "// Line_Reference 792: \tunsigned int end_offset = (offset + len) & ~PAGE_CACHE_MASK;",
        "// Line_Reference 793: \tunsigned int from, to;",
        "// Line_Reference 794: ",
        "// Line_Reference 795: \tif (!end_offset)",
        "// Line_Reference 796: \t\tend_offset = PAGE_CACHE_SIZE;",
        "// Line_Reference 800: \t\tgoto out;",
        "// Line_Reference 810: \tcurr = start;",
        "// Line_Reference 811: \toffset = start << PAGE_CACHE_SHIFT;",
        "// Line_Reference 812: \tfrom = start_offset;",
        "// Line_Reference 813: \tto = PAGE_CACHE_SIZE;",
        "// Line_Reference 814: \twhile (curr <= end) {",
        "// Line_Reference 815: \t\tpage = grab_cache_page_write_begin(inode->i_mapping, curr,",
        "// Line_Reference 816: \t\t\t\t\t\t   AOP_FLAG_NOFS);",
        "// Line_Reference 817: \t\tif (unlikely(!page)) {",
        "// Line_Reference 818: \t\t\terror = -ENOMEM;",
        "// Line_Reference 819: \t\t\tgoto out;",
        "// Line_Reference 820: \t\t}",
        "// Line_Reference 822: \t\tif (curr == end)",
        "// Line_Reference 823: \t\t\tto = end_offset;",
        "// Line_Reference 824: \t\terror = write_empty_blocks(page, from, to, mode);",
        "// Line_Reference 825: \t\tif (!error && offset + to > inode->i_size &&",
        "// Line_Reference 826: \t\t    !(mode & FALLOC_FL_KEEP_SIZE)) {",
        "// Line_Reference 827: \t\t\ti_size_write(inode, offset + to);",
        "// Line_Reference 828: \t\t}",
        "// Line_Reference 829: \t\tunlock_page(page);",
        "// Line_Reference 830: \t\tpage_cache_release(page);",
        "// Line_Reference 831: \t\tif (error)",
        "// Line_Reference 833: \t\tcurr++;",
        "// Line_Reference 834: \t\toffset += PAGE_CACHE_SIZE;",
        "// Line_Reference 835: \t\tfrom = 0;",
        "// Line_Reference 840: \tbrelse(dibh);",
        "// Line_Reference 841: ",
        "// Line_Reference 935: \t\tcalc_max_reserv(ip, len, &max_bytes, &data_blocks, &ind_blocks);"
    ]
}
