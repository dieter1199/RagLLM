{
    "cve_id": "CVE-2024-21631",
    "cve_description": "Vapor is an HTTP web framework for Swift. Prior to version 4.90.0, Vapor's `vapor_urlparser_parse` function uses `uint16_t` indexes when parsing a URI's components, which may cause integer overflows when parsing untrusted inputs. This vulnerability does not affect Vapor directly but could impact applications relying on the URI type for validating user input. The URI type is used in several places in Vapor. A developer may decide to use URI to represent a URL in their application (especially if that URL is then passed to the HTTP Client) and rely on its public properties and methods. However, URI may fail to properly parse a valid (albeit abnormally long) URL, due to string ranges being converted to 16-bit integers. An attacker may use this behavior to trick the application into accepting a URL to an untrusted destination. By padding the port number with zeros, an attacker can cause an integer overflow to occur when the URL authority is parsed and, as a result, spoof the host. Version 4.90.0 contains a patch for this issue. As a workaround, validate user input before parsing as a URI or, if possible, use Foundation's `URL` and `URLComponents` utilities.\n",
    "cve_publish_date": "2024-01-03",
    "cwe_id": "CWE-190",
    "cwe_name": "Integer Overflow or Wraparound",
    "cwe_description": "The product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number.",
    "commit_message": "Merge pull request from GHSA-r6r4-5pr8-gjcp\n\n* Replace the ancient CVaporURLParser code with use of Foundation's URLComponents\n\n* Fixes for weird macOS behaviors\n\n* Tests fixup\n\n* Add test for extreme-length untrusted input which triggered failures in the old implementation.\n\n* Fix Sendable warnings across multiple Swift versions\n\n* Indirect through URL to get to URLComponents so parsing is consistent on Linux.\n\n* A couple more test fixes.",
    "type_of_change": "Modification",
    "filename_of_changes": "RequestTests.swift",
    "code_language": "Swift",
    "number_of_lines_added_for_mitigation": "0",
    "number_of_lines_deleted_vulnerable_to_cve": "101",
    "vulnerable_lines": [
        "// Line_Reference 146:     func testURI() throws {",
        "// Line_Reference 147:         do {",
        "// Line_Reference 148:             var uri = URI(string: \"http://vapor.codes/foo?bar=baz#qux\")",
        "// Line_Reference 149:             XCTAssertEqual(uri.scheme, \"http\")",
        "// Line_Reference 150:             XCTAssertEqual(uri.host, \"vapor.codes\")",
        "// Line_Reference 151:             XCTAssertEqual(uri.path, \"/foo\")",
        "// Line_Reference 152:             XCTAssertEqual(uri.query, \"bar=baz\")",
        "// Line_Reference 153:             XCTAssertEqual(uri.fragment, \"qux\")",
        "// Line_Reference 154:             uri.query = \"bar=baz&test=1\"",
        "// Line_Reference 155:             XCTAssertEqual(uri.string, \"http://vapor.codes/foo?bar=baz&test=1#qux\")",
        "// Line_Reference 156:             uri.query = nil",
        "// Line_Reference 157:             XCTAssertEqual(uri.string, \"http://vapor.codes/foo#qux\")",
        "// Line_Reference 158:         }",
        "// Line_Reference 159:         do {",
        "// Line_Reference 160:             let uri = URI(string: \"/foo/bar/baz\")",
        "// Line_Reference 161:             XCTAssertEqual(uri.path, \"/foo/bar/baz\")",
        "// Line_Reference 162:         }",
        "// Line_Reference 163:         do {",
        "// Line_Reference 164:             let uri = URI(string: \"ws://echo.websocket.org/\")",
        "// Line_Reference 165:             XCTAssertEqual(uri.scheme, \"ws\")",
        "// Line_Reference 166:             XCTAssertEqual(uri.host, \"echo.websocket.org\")",
        "// Line_Reference 167:             XCTAssertEqual(uri.path, \"/\")",
        "// Line_Reference 168:         }",
        "// Line_Reference 169:         do {",
        "// Line_Reference 170:             let uri = URI(string: \"http://foo\")",
        "// Line_Reference 171:             XCTAssertEqual(uri.scheme, \"http\")",
        "// Line_Reference 172:             XCTAssertEqual(uri.host, \"foo\")",
        "// Line_Reference 173:             XCTAssertEqual(uri.path, \"\")",
        "// Line_Reference 174:         }",
        "// Line_Reference 175:         do {",
        "// Line_Reference 176:             let uri = URI(string: \"foo\")",
        "// Line_Reference 177:             XCTAssertEqual(uri.scheme, \"foo\")",
        "// Line_Reference 178:             XCTAssertEqual(uri.host, nil)",
        "// Line_Reference 179:             XCTAssertEqual(uri.path, \"\")",
        "// Line_Reference 180:         }",
        "// Line_Reference 181:         do {",
        "// Line_Reference 182:             let uri: URI = \"/foo/bar/baz\"",
        "// Line_Reference 183:             XCTAssertEqual(uri.path, \"/foo/bar/baz\")",
        "// Line_Reference 184:         }",
        "// Line_Reference 185:         do {",
        "// Line_Reference 186:             let foo = \"foo\"",
        "// Line_Reference 187:             let uri: URI = \"/\\(foo)/bar/baz\"",
        "// Line_Reference 188:             XCTAssertEqual(uri.path, \"/foo/bar/baz\")",
        "// Line_Reference 189:         }",
        "// Line_Reference 190:         do {",
        "// Line_Reference 191:             let uri = URI(scheme: \"foo\", host: \"host\", port: 1, path: \"test\", query: \"query\", fragment: \"fragment\")",
        "// Line_Reference 192:             XCTAssertEqual(uri.string, \"foo://host:1/test?query#fragment\")",
        "// Line_Reference 193:         }",
        "// Line_Reference 194:         do {",
        "// Line_Reference 195:             let bar = \"bar\"",
        "// Line_Reference 196:             let uri = URI(scheme: \"foo\\(bar)\", host: \"host\", port: 1, path: \"test\", query: \"query\", fragment: \"fragment\")",
        "// Line_Reference 197:             XCTAssertEqual(uri.string, \"foobar://host:1/test?query#fragment\")",
        "// Line_Reference 198:         }",
        "// Line_Reference 199:         do {",
        "// Line_Reference 200:             let uri = URI(scheme: \"foo\", host: \"host\", port: 1, path: \"/test\", query: \"query\", fragment: \"fragment\")",
        "// Line_Reference 201:             XCTAssertEqual(uri.string, \"foo://host:1/test?query#fragment\")",
        "// Line_Reference 202:         }",
        "// Line_Reference 203:         do {",
        "// Line_Reference 204:             let scheme = \"foo\"",
        "// Line_Reference 205:             let uri = URI(scheme: scheme, host: \"host\", port: 1, path: \"test\", query: \"query\", fragment: \"fragment\")",
        "// Line_Reference 206:             XCTAssertEqual(uri.string, \"foo://host:1/test?query#fragment\")",
        "// Line_Reference 207:         }",
        "// Line_Reference 208:         do {",
        "// Line_Reference 209:             let scheme: String? = \"foo\"",
        "// Line_Reference 210:             let uri = URI(scheme: scheme, host: \"host\", port: 1, path: \"test\", query: \"query\", fragment: \"fragment\")",
        "// Line_Reference 211:             XCTAssertEqual(uri.string, \"foo://host:1/test?query#fragment\")",
        "// Line_Reference 212:         }",
        "// Line_Reference 213:         do {",
        "// Line_Reference 214:             let uri = URI(scheme: .http, host: \"host\", port: 1, path: \"test\", query: \"query\", fragment: \"fragment\")",
        "// Line_Reference 215:             XCTAssertEqual(uri.string, \"http://host:1/test?query#fragment\")",
        "// Line_Reference 216:         }",
        "// Line_Reference 217:         do {",
        "// Line_Reference 218:             let uri = URI(scheme: nil, host: \"host\", port: 1, path: \"test\", query: \"query\", fragment: \"fragment\")",
        "// Line_Reference 219:             XCTAssertEqual(uri.string, \"host:1/test?query#fragment\")",
        "// Line_Reference 220:         }",
        "// Line_Reference 221:         do {",
        "// Line_Reference 222:             let uri = URI(scheme: URI.Scheme(), host: \"host\", port: 1, path: \"test\", query: \"query\", fragment: \"fragment\")",
        "// Line_Reference 223:             XCTAssertEqual(uri.string, \"host:1/test?query#fragment\")",
        "// Line_Reference 224:         }",
        "// Line_Reference 225:         do {",
        "// Line_Reference 226:             let uri = URI(host: \"host\", port: 1, path: \"test\", query: \"query\", fragment: \"fragment\")",
        "// Line_Reference 227:             XCTAssertEqual(uri.string, \"host:1/test?query#fragment\")",
        "// Line_Reference 228:         }",
        "// Line_Reference 229:         do {",
        "// Line_Reference 230:             let uri = URI(scheme: .httpUnixDomainSocket, host: \"/path\", path: \"test\", query: \"query\", fragment: \"fragment\")",
        "// Line_Reference 231:             XCTAssertEqual(uri.string, \"http+unix://%2Fpath/test?query#fragment\")",
        "// Line_Reference 232:         }",
        "// Line_Reference 233:         do {",
        "// Line_Reference 234:             let uri = URI(scheme: .httpUnixDomainSocket, host: \"/path\", path: \"test\", fragment: \"fragment\")",
        "// Line_Reference 235:             XCTAssertEqual(uri.string, \"http+unix://%2Fpath/test#fragment\")",
        "// Line_Reference 236:         }",
        "// Line_Reference 237:         do {",
        "// Line_Reference 238:             let uri = URI(scheme: .httpUnixDomainSocket, host: \"/path\", path: \"test\")",
        "// Line_Reference 239:             XCTAssertEqual(uri.string, \"http+unix://%2Fpath/test\")",
        "// Line_Reference 240:         }",
        "// Line_Reference 241:         do {",
        "// Line_Reference 242:             let uri = URI()",
        "// Line_Reference 243:             XCTAssertEqual(uri.string, \"/\")",
        "// Line_Reference 244:         }",
        "// Line_Reference 245:     }",
        "// Line_Reference 246: "
    ]
}
