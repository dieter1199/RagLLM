{
    "cve_id": "CVE-2012-2313",
    "cve_description": "The rio_ioctl function in drivers/net/ethernet/dlink/dl2k.c in the Linux kernel before 3.3.7 does not restrict access to the SIOCSMIIREG command, which allows local users to write data to an Ethernet adapter via an ioctl call.",
    "cve_publish_date": "2012-06-13",
    "cwe_id": "CWE-264",
    "cwe_name": "Permissions, Privileges, and Access Controls",
    "cwe_description": "Weaknesses in this category are related to the management of permissions, privileges, and other security features that are used to perform access control.",
    "commit_message": "dl2k: Clean up rio_ioctl\n\nThe dl2k driver's rio_ioctl call has a few issues:\n- No permissions checking\n- Implements SIOCGMIIREG and SIOCGMIIREG using the SIOCDEVPRIVATE numbers\n- Has a few ioctls that may have been used for debugging at one point\n  but have no place in the kernel proper.\n\nThis patch removes all but the MII ioctls, renumbers them to use the\nstandard ones, and adds the proper permission check for SIOCSMIIREG.\n\nWe can also get rid of the dl2k-specific struct mii_data in favor of\nthe generic struct mii_ioctl_data.\n\nSince we have the phyid on hand, we can add the SIOCGMIIPHY ioctl too.\n\nMost of the MII code for the driver could probably be converted to use\nthe generic MII library but I don't have a device to test the results.\n\nReported-by: Stephan Mueller <stephan.mueller@atsec.com>\nSigned-off-by: Jeff Mahoney <jeffm@suse.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "type_of_change": "Modification",
    "filename_of_changes": "dl2k.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "9",
    "number_of_lines_deleted_vulnerable_to_cve": "43",
    "vulnerable_lines": [
        "// Line_Reference 1262: \tstruct mii_data *miidata = (struct mii_data *) &rq->ifr_ifru;",
        "// Line_Reference 1263: ",
        "// Line_Reference 1264: \tstruct netdev_desc *desc;",
        "// Line_Reference 1265: \tint i;",
        "// Line_Reference 1269: \tcase SIOCDEVPRIVATE:",
        "// Line_Reference 1270: \t\tbreak;",
        "// Line_Reference 1271: ",
        "// Line_Reference 1272: \tcase SIOCDEVPRIVATE + 1:",
        "// Line_Reference 1273: \t\tmiidata->out_value = mii_read (dev, phy_addr, miidata->reg_num);",
        "// Line_Reference 1275: \tcase SIOCDEVPRIVATE + 2:",
        "// Line_Reference 1276: \t\tmii_write (dev, phy_addr, miidata->reg_num, miidata->in_value);",
        "// Line_Reference 1278: \tcase SIOCDEVPRIVATE + 3:",
        "// Line_Reference 1279: \t\tbreak;",
        "// Line_Reference 1280: \tcase SIOCDEVPRIVATE + 4:",
        "// Line_Reference 1281: \t\tbreak;",
        "// Line_Reference 1282: \tcase SIOCDEVPRIVATE + 5:",
        "// Line_Reference 1283: \t\tnetif_stop_queue (dev);",
        "// Line_Reference 1285: \tcase SIOCDEVPRIVATE + 6:",
        "// Line_Reference 1286: \t\tnetif_wake_queue (dev);",
        "// Line_Reference 1287: \t\tbreak;",
        "// Line_Reference 1288: \tcase SIOCDEVPRIVATE + 7:",
        "// Line_Reference 1289: \t\tprintk",
        "// Line_Reference 1290: \t\t    (\"tx_full=%x cur_tx=%lx old_tx=%lx cur_rx=%lx old_rx=%lx\\n\",",
        "// Line_Reference 1291: \t\t     netif_queue_stopped(dev), np->cur_tx, np->old_tx, np->cur_rx,",
        "// Line_Reference 1292: \t\t     np->old_rx);",
        "// Line_Reference 1293: \t\tbreak;",
        "// Line_Reference 1294: \tcase SIOCDEVPRIVATE + 8:",
        "// Line_Reference 1295: \t\tprintk(\"TX ring:\\n\");",
        "// Line_Reference 1296: \t\tfor (i = 0; i < TX_RING_SIZE; i++) {",
        "// Line_Reference 1297: \t\t\tdesc = &np->tx_ring[i];",
        "// Line_Reference 1298: \t\t\tprintk",
        "// Line_Reference 1299: \t\t\t    (\"%02x:cur:%08x next:%08x status:%08x frag1:%08x frag0:%08x\",",
        "// Line_Reference 1300: \t\t\t     i,",
        "// Line_Reference 1301: \t\t\t     (u32) (np->tx_ring_dma + i * sizeof (*desc)),",
        "// Line_Reference 1302: \t\t\t     (u32)le64_to_cpu(desc->next_desc),",
        "// Line_Reference 1303: \t\t\t     (u32)le64_to_cpu(desc->status),",
        "// Line_Reference 1304: \t\t\t     (u32)(le64_to_cpu(desc->fraginfo) >> 32),",
        "// Line_Reference 1305: \t\t\t     (u32)le64_to_cpu(desc->fraginfo));",
        "// Line_Reference 1306: \t\t\tprintk (\"\\n\");",
        "// Line_Reference 1307: \t\t}",
        "// Line_Reference 1308: \t\tprintk (\"\\n\");",
        "// Line_Reference 1309: \t\tbreak;",
        "// Line_Reference 1310: "
    ]
}
