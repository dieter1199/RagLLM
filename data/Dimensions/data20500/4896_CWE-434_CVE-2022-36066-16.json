{
    "cve_id": "CVE-2022-36066",
    "cve_description": "Discourse is an open source discussion platform. In versions prior to 2.8.9 on the `stable` branch and prior to 2.9.0.beta10 on the `beta` and `tests-passed` branches, admins can upload a maliciously crafted Zip or Gzip Tar archive to write files at arbitrary locations and trigger remote code execution. The problem is patched in version 2.8.9 on the `stable` branch and version 2.9.0.beta10 on the `beta` and `tests-passed` branches. There are no known workarounds.",
    "cve_publish_date": "2022-09-29",
    "cwe_id": "CWE-434",
    "cwe_name": "Unrestricted Upload of File with Dangerous Type",
    "cwe_description": "The product allows the upload or transfer of dangerous file types that are automatically processed within its environment.",
    "commit_message": "SECURITY: Prevent arbitrary file write when decompressing files (#18421)\n\n* SECURITY: Prevent arbitrary file write when decompressing files\r\n* FIX: Allow decompressing files into symlinked directories\r\n\r\nCo-authored-by: OsamaSayegh <asooomaasoooma90@gmail.com>\r\nCo-authored-by: Gerhard Schlager <gerhard.schlager@discourse.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "zip.rb",
    "code_language": "Ruby",
    "number_of_lines_added_for_mitigation": "4",
    "number_of_lines_deleted_vulnerable_to_cve": "9",
    "vulnerable_lines": [
        "// Line_Reference 38:     def build_entry_path(compressed_file, dest_path, compressed_file_path, entry, allow_non_root_folder)",
        "// Line_Reference 39:       folder_name = compressed_file_path.split('/').last.gsub('.zip', '')",
        "// Line_Reference 40:       root = root_folder_present?(compressed_file, allow_non_root_folder) ? '' : \"#{folder_name}/\"",
        "// Line_Reference 41: ",
        "// Line_Reference 42:       File.join(dest_path, \"#{root}#{entry.name}\").tap do |entry_path|",
        "// Line_Reference 43:         FileUtils.mkdir_p(File.dirname(entry_path))",
        "// Line_Reference 44:       end",
        "// Line_Reference 47:     def root_folder_present?(filenames, allow_non_root_folder)",
        "// Line_Reference 48:       filenames.map { |p| p.name.split('/').first }.uniq.size == 1 || allow_non_root_folder"
    ]
}
