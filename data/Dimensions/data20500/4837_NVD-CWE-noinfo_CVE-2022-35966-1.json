{
    "cve_id": "CVE-2022-35966",
    "cve_description": "TensorFlow is an open source platform for machine learning. If `QuantizedAvgPool` is given `min_input` or `max_input` tensors of a nonzero rank, it results in a segfault that can be used to trigger a denial of service attack. We have patched the issue in GitHub commit 7cdf9d4d2083b739ec81cfdace546b0c99f50622. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue.",
    "cve_publish_date": "2022-09-16",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Fix QuantizedAvgPool invalid rank issue.\n\nPassing in an invalid rank in eager mode led to a runtime crash.\nUpdated the runtime error to match the one generated by the\nshape function for better consistency.\n\nPiperOrigin-RevId: 462419362",
    "type_of_change": "Modification",
    "filename_of_changes": "quantized_pooling_ops.cc",
    "code_language": "C++",
    "number_of_lines_added_for_mitigation": "30",
    "number_of_lines_deleted_vulnerable_to_cve": "18",
    "vulnerable_lines": [
        "// Line_Reference 18: #include \"tensorflow/core/framework/op_requires.h\"",
        "// Line_Reference 19: #include \"tensorflow/core/platform/errors.h\"",
        "// Line_Reference 70:     const float min_input = context->input(1).flat<float>()(0);",
        "// Line_Reference 71:     const float max_input = context->input(2).flat<float>()(0);",
        "// Line_Reference 122:     auto min_input_tensor = context->input(1);",
        "// Line_Reference 123:     auto max_input_tensor = context->input(2);",
        "// Line_Reference 124:     OP_REQUIRES(",
        "// Line_Reference 125:         context, min_input_tensor.NumElements() == 1,",
        "// Line_Reference 126:         errors::InvalidArgument(",
        "// Line_Reference 127:             \"min_input must be a scalar float value, got tensor with shape \",",
        "// Line_Reference 128:             min_input_tensor.shape()));",
        "// Line_Reference 129:     OP_REQUIRES(",
        "// Line_Reference 130:         context, max_input_tensor.NumElements() == 1,",
        "// Line_Reference 131:         errors::InvalidArgument(",
        "// Line_Reference 132:             \"max_input must be a scalar float value, got tensor with shape \",",
        "// Line_Reference 133:             max_input_tensor.shape()));",
        "// Line_Reference 134:     const float min_input = context->input(1).flat<float>()(0);",
        "// Line_Reference 135:     const float max_input = context->input(2).flat<float>()(0);"
    ]
}
