{
    "cve_id": "CVE-2022-31160",
    "cve_description": "jQuery UI is a curated set of user interface interactions, effects, widgets, and themes built on top of jQuery. Versions prior to 1.13.2 are potentially vulnerable to cross-site scripting. Initializing a checkboxradio widget on an input enclosed within a label makes that parent label contents considered as the input label. Calling `.checkboxradio( \"refresh\" )` on such a widget and the initial HTML contained encoded HTML entities will make them erroneously get decoded. This can lead to potentially executing JavaScript code. The bug has been patched in jQuery UI 1.13.2. To remediate the issue, someone who can change the initial HTML can wrap all the non-input contents of the `label` in a `span`.",
    "cve_publish_date": "2022-07-20",
    "cwe_id": "CWE-79",
    "cwe_name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
    "cwe_description": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
    "commit_message": "Checkboxradio: Don't re-evaluate text labels as HTML\n\nIf you generate a Checkboxradio from a checkbox/radio with a label that\r\ncontains encoded HTML, e.g. `&lt;em&gt;test&lt;/em&gt;` this will work fine\r\nat first. If, however a refresh is triggered on that instance (explicitly or\r\ne.g. by turning it into a `Controlgroup`), the previously escaped HTML will\r\nnow be evaluated.\r\n\r\nIf the label was created based on some user input, this could lead to\r\nunexpected code execution even though the initial output was escaped.\r\n\r\nFixes gh-2101\r\nCloses gh-2102",
    "type_of_change": "Modification",
    "filename_of_changes": "checkboxradio.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "13",
    "number_of_lines_deleted_vulnerable_to_cve": "8",
    "vulnerable_lines": [
        "// Line_Reference 53: \t\tvar disabled, labels;",
        "// Line_Reference 54: \t\tvar that = this;",
        "// Line_Reference 74: \t\tthis.label.contents().not( this.element[ 0 ] ).each( function() {",
        "// Line_Reference 75: ",
        "// Line_Reference 76: \t\t\t// The label contents could be text, html, or a mix. We concat each element to get a",
        "// Line_Reference 77: \t\t\t// string representation of the label, without the input as part of it.",
        "// Line_Reference 78: \t\t\tthat.originalLabel += this.nodeType === 3 ? $( this ).text() : this.outerHTML;",
        "// Line_Reference 79: \t\t} );"
    ]
}
