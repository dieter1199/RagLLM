{
    "cve_id": "CVE-2020-15121",
    "cve_description": "In radare2 before version 4.5.0, malformed PDB file names in the PDB server path cause shell injection. To trigger the problem it's required to open the executable in radare2 and run idpd to trigger the download. The shell code will execute, and will create a file called pwned in the current directory.",
    "cve_publish_date": "2020-07-20",
    "cwe_id": "CWE-78",
    "cwe_name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
    "cwe_description": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
    "commit_message": "Fix command injection on PDB download (#16966)\n\n* Fix r_sys_mkdirp with absolute path on Windows\r\n* Fix build with --with-openssl\r\n* Use RBuffer in r_socket_http_answer()\r\n* r_socket_http_answer: Fix read for big responses\r\n* Implement r_str_escape_sh()\r\n* Cleanup r_socket_connect() on Windows\r\n* Fix socket being created without a protocol\r\n* Fix socket connect with SSL ##socket\r\n* Use select() in r_socket_ready()\r\n* Fix read failing if received only protocol answer\r\n* Fix double-free\r\n* r_socket_http_get: Fail if req. SSL with no support\r\n* Follow redirects in r_socket_http_answer()\r\n* Fix r_socket_http_get result length with R2_CURL=1\r\n* Also follow redirects\r\n* Avoid using curl for downloading PDBs\r\n* Use r_socket_http_get() on UNIXs\r\n* Use WinINet API on Windows for r_socket_http_get()\r\n* Fix command injection\r\n* Fix r_sys_cmd_str_full output for binary data\r\n* Validate GUID on PDB download\r\n* Pass depth to socket_http_get_recursive()\r\n* Remove 'r_' and '__' from static function names\r\n* Fix is_valid_guid\r\n* Fix for comments",
    "type_of_change": "Modification",
    "filename_of_changes": "pdb_downloader.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "83",
    "number_of_lines_deleted_vulnerable_to_cve": "108",
    "vulnerable_lines": [
        "// Line_Reference 21: static bool checkCurl() {",
        "// Line_Reference 22: \tconst char nul[] = R_SYS_DEVNULL;",
        "// Line_Reference 23: \tif (r_sys_cmdf (\"curl --version > %s\", nul) != 0) {",
        "// Line_Reference 31: \tchar *curl_cmd = NULL;",
        "// Line_Reference 32: \tchar *extractor_cmd = NULL;",
        "// Line_Reference 33: \tchar *abspath_to_archive = NULL;",
        "// Line_Reference 34: \tchar *abspath_to_file = NULL;",
        "// Line_Reference 35: \tchar *archive_name = NULL;",
        "// Line_Reference 36: \tsize_t archive_name_len = 0;",
        "// Line_Reference 37: \tchar *symbol_store_path = NULL;",
        "// Line_Reference 38: \tchar *dbg_file = NULL;",
        "// Line_Reference 39: \tchar *guid = NULL;",
        "// Line_Reference 40: \tchar *archive_name_escaped  = NULL;",
        "// Line_Reference 41: \tchar *user_agent = NULL;",
        "// Line_Reference 42: \tchar *symbol_server = NULL;",
        "// Line_Reference 43: ",
        "// Line_Reference 50: \tif (!checkCurl ()) {",
        "// Line_Reference 51: \t\treturn 0;",
        "// Line_Reference 52: \t}",
        "// Line_Reference 53: \t// dbg_file len is > 0",
        "// Line_Reference 54: \tarchive_name_len = strlen (opt->dbg_file);",
        "// Line_Reference 55: \tarchive_name = malloc (archive_name_len + 1);",
        "// Line_Reference 56: \tif (!archive_name) {",
        "// Line_Reference 57: \t\treturn 0;",
        "// Line_Reference 58: \t}",
        "// Line_Reference 59: \tmemcpy (archive_name, opt->dbg_file, archive_name_len + 1);",
        "// Line_Reference 60: \tarchive_name[archive_name_len - 1] = '_';",
        "// Line_Reference 61: \tsymbol_store_path = r_str_escape (opt->symbol_store_path);",
        "// Line_Reference 62: \tdbg_file = r_str_escape (opt->dbg_file);",
        "// Line_Reference 63: \tguid = r_str_escape (opt->guid);",
        "// Line_Reference 64: \tarchive_name_escaped = r_str_escape (archive_name);",
        "// Line_Reference 65: \tuser_agent = r_str_escape (opt->user_agent);",
        "// Line_Reference 66: \tsymbol_server = r_str_escape (opt->symbol_server);",
        "// Line_Reference 67: ",
        "// Line_Reference 68: \tabspath_to_archive = r_str_newf (\"%s%s%s%s%s%s%s\",",
        "// Line_Reference 69: \t\t\t    symbol_store_path, R_SYS_DIR,",
        "// Line_Reference 70: \t\t\t    dbg_file, R_SYS_DIR,",
        "// Line_Reference 71: \t\t\t    guid, R_SYS_DIR,",
        "// Line_Reference 72: \t\t\t    archive_name_escaped);",
        "// Line_Reference 73: ",
        "// Line_Reference 74: \tabspath_to_file = strdup (abspath_to_archive);",
        "// Line_Reference 75: \tabspath_to_file[strlen (abspath_to_file) - 1] = 'b';",
        "// Line_Reference 78: \t\tR_FREE (user_agent);",
        "// Line_Reference 79: \t\tR_FREE (abspath_to_archive);",
        "// Line_Reference 80: \t\tR_FREE (archive_name_escaped);",
        "// Line_Reference 81: \t\tR_FREE (symbol_store_path);",
        "// Line_Reference 82: \t\tR_FREE (dbg_file);",
        "// Line_Reference 83: \t\tR_FREE (guid);",
        "// Line_Reference 84: \t\tR_FREE (archive_name);",
        "// Line_Reference 85: \t\tR_FREE (abspath_to_file);",
        "// Line_Reference 86: \t\tR_FREE (symbol_server);",
        "// Line_Reference 91: \t\tres = 1;",
        "// Line_Reference 92: ",
        "// Line_Reference 93: \t\tcurl_cmd = r_str_newf (\"curl -sfLA \\\"%s\\\" \\\"%s/%s/%s/%s\\\" --create-dirs -o \\\"%s\\\"\",",
        "// Line_Reference 94: \t\t                       user_agent,",
        "// Line_Reference 95: \t\t                       symbol_server,",
        "// Line_Reference 96: \t\t\t\t\t\t\t   dbg_file,",
        "// Line_Reference 97: \t\t\t\t\t\t\t   guid,",
        "// Line_Reference 98: \t\t                       archive_name_escaped,",
        "// Line_Reference 99: \t\t                       abspath_to_archive);",
        "// Line_Reference 101: \t\tconst char *cabextractor = \"expand\";",
        "// Line_Reference 102: \t\tconst char *format = \"%s %s %s\";",
        "// Line_Reference 103: ",
        "// Line_Reference 104: \t\t// extractor_cmd -> %1 %2 %3",
        "// Line_Reference 105: \t\t// %1 - 'expand'",
        "// Line_Reference 106: \t\t// %2 - absolute path to archive",
        "// Line_Reference 107: \t\t// %3 - absolute path to file that will be dearchive",
        "// Line_Reference 108: \t\textractor_cmd = r_str_newf (format, cabextractor,",
        "// Line_Reference 109: \t\t\tabspath_to_archive, abspath_to_file);",
        "// Line_Reference 111: \t\tconst char *cabextractor = \"cabextract\";",
        "// Line_Reference 112: \t\tconst char *format = \"%s -d \\\"%s\\\" \\\"%s\\\"\";",
        "// Line_Reference 117: \t\textractor_cmd = r_str_newf (format, cabextractor, abspath_to_dir, abspath_to_archive);",
        "// Line_Reference 118: \t\tR_FREE (abspath_to_dir);",
        "// Line_Reference 120: \t\teprintf (\"Attempting to download compressed pdb in %s\\n\", abspath_to_archive);",
        "// Line_Reference 121: \t\tif ((cmd_ret = r_sys_cmd (curl_cmd) != 0)) {",
        "// Line_Reference 122: \t\t\teprintf(\"curl exited with error %d\\n\", cmd_ret);",
        "// Line_Reference 123: \t\t\tres = 0;",
        "// Line_Reference 124: \t\t}",
        "// Line_Reference 125: \t\teprintf (\"Attempting to decompress pdb\\n\");",
        "// Line_Reference 126: \t\tif (opt->extract > 0) {",
        "// Line_Reference 133: \t\tR_FREE (curl_cmd);",
        "// Line_Reference 137: \t\tres = 1;",
        "// Line_Reference 138: ",
        "// Line_Reference 139: \t\tarchive_name_escaped[strlen (archive_name_escaped) - 1] = 'b';",
        "// Line_Reference 140: ",
        "// Line_Reference 141: \t\tcurl_cmd = r_str_newf (\"curl -sfLA \\\"%s\\\" \\\"%s/%s/%s/%s\\\" --create-dirs -o \\\"%s\\\"\",",
        "// Line_Reference 142: \t\t                       opt->user_agent,",
        "// Line_Reference 143: \t\t                       opt->symbol_server,",
        "// Line_Reference 144: \t\t                       opt->dbg_file,",
        "// Line_Reference 145: \t\t                       opt->guid,",
        "// Line_Reference 146: \t\t                       archive_name_escaped,",
        "// Line_Reference 147: \t\t                       abspath_to_file);",
        "// Line_Reference 149: \t\tif ((cmd_ret = r_sys_cmd (curl_cmd) != 0)) {",
        "// Line_Reference 150: \t\t\teprintf(\"curl exited with error %d\\n\", cmd_ret);",
        "// Line_Reference 151: \t\t\tres = 0;",
        "// Line_Reference 152: \t\t}",
        "// Line_Reference 153: \t\tR_FREE (curl_cmd);",
        "// Line_Reference 154: \t}",
        "// Line_Reference 155: \tR_FREE (abspath_to_archive);",
        "// Line_Reference 156: \tR_FREE (abspath_to_file);",
        "// Line_Reference 157: \tR_FREE (archive_name);",
        "// Line_Reference 158: \tR_FREE (extractor_cmd);",
        "// Line_Reference 159: \tR_FREE (symbol_store_path);",
        "// Line_Reference 160: \tR_FREE (dbg_file);",
        "// Line_Reference 161: \tR_FREE (guid);",
        "// Line_Reference 162: \tR_FREE (archive_name_escaped);",
        "// Line_Reference 163: \tR_FREE (user_agent);",
        "// Line_Reference 164: \tR_FREE (symbol_server);"
    ]
}
