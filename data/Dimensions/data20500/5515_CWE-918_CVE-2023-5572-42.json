{
    "cve_id": "CVE-2023-5572",
    "cve_description": "Server-Side Request Forgery (SSRF) in GitHub repository vriteio/vrite prior to 0.3.0.",
    "cve_publish_date": "2023-10-13",
    "cwe_id": "CWE-918",
    "cwe_name": "Server-Side Request Forgery (SSRF)",
    "cwe_description": "The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.",
    "commit_message": "Vrite v0.3 (#45)\n\n- Replace wrapper with element;\r\n- Add XML-like syntax for elements;\r\n- Redesign editor block menus;\r\n- Add MDX extension;\r\n- Allow CORS API access;\r\n- Restructure @vrite/backend;",
    "type_of_change": "Modification",
    "filename_of_changes": "content-pieces.ts",
    "code_language": "TypeScript",
    "number_of_lines_added_for_mitigation": "48",
    "number_of_lines_deleted_vulnerable_to_cve": "59",
    "vulnerable_lines": [
        "// Line_Reference 6: import { stringToRegex } from \"#lib/utils\";",
        "// Line_Reference 7: import { UnderscoreID, zodId } from \"#lib/mongo\";",
        "// Line_Reference 8: import { bufferToJSON, DocJSON, htmlToJSON, jsonToBuffer } from \"#lib/processing\";",
        "// Line_Reference 9: import { isAuthenticated } from \"#lib/middleware\";",
        "// Line_Reference 10: import { procedure, router } from \"#lib/trpc\";",
        "// Line_Reference 17:   FullContentPieceWithAdditionalData,",
        "// Line_Reference 18:   getContentPiecesCollection",
        "// Line_Reference 19: } from \"#database/content-pieces\";",
        "// Line_Reference 20: import { Tag, getTagsCollection, tag } from \"#database/tags\";",
        "// Line_Reference 21: import * as errors from \"#lib/errors\";",
        "// Line_Reference 22: import { getContentsCollection } from \"#database/contents\";",
        "// Line_Reference 23: import { runWebhooks } from \"#lib/webhooks\";",
        "// Line_Reference 24: import { createEventPublisher, createEventSubscription } from \"#lib/pub-sub\";",
        "// Line_Reference 35: import { runGitSyncHook } from \"#lib\";",
        "// Line_Reference 36: ",
        "// Line_Reference 37: type ContentPieceEvent =",
        "// Line_Reference 38:   | { action: \"delete\"; userId: string; data: { id: string } }",
        "// Line_Reference 39:   | { action: \"create\"; userId: string; data: FullContentPieceWithAdditionalData }",
        "// Line_Reference 40:   | {",
        "// Line_Reference 41:       action: \"update\";",
        "// Line_Reference 42:       userId: string;",
        "// Line_Reference 43:       variantId?: string;",
        "// Line_Reference 44:       data: Partial<FullContentPieceWithAdditionalData> & { id: string };",
        "// Line_Reference 45:     }",
        "// Line_Reference 46:   | {",
        "// Line_Reference 47:       action: \"move\";",
        "// Line_Reference 48:       userId: string;",
        "// Line_Reference 49:       data: {",
        "// Line_Reference 50:         contentPiece: FullContentPieceWithAdditionalData;",
        "// Line_Reference 51:         nextReferenceId?: string;",
        "// Line_Reference 52:         previousReferenceId?: string;",
        "// Line_Reference 53:       };",
        "// Line_Reference 54:     };",
        "// Line_Reference 56: const publishEvent = createEventPublisher<ContentPieceEvent>((contentGroupId) => {",
        "// Line_Reference 57:   return `contentPieces:${contentGroupId}`;",
        "// Line_Reference 58: });",
        "// Line_Reference 154:   variantIdOrName?: string",
        "// Line_Reference 155: ): Promise<{ variantId: ObjectId | null; variantName: string | null }> => {",
        "// Line_Reference 158:   if (!variantIdOrName) return { variantId: null, variantName: null };",
        "// Line_Reference 160:   const isId = ObjectId.isValid(variantIdOrName);",
        "// Line_Reference 162:     ...(isId && { _id: new ObjectId(variantIdOrName) }),",
        "// Line_Reference 163:     ...(!isId && { name: variantIdOrName })",
        "// Line_Reference 168:   return { variantId: variant._id || null, variantName: variant.name || null };",
        "// Line_Reference 232:       const { variantId, variantName } = await getVariantDetails(ctx.db, input.variant);",
        "// Line_Reference 299:               { slug: contentPiece.slug, variant: variantName }",
        "// Line_Reference 356:       const { variantId, variantName } = await getVariantDetails(ctx.db, input.variant);",
        "// Line_Reference 408:                   { slug: contentPiece.slug, variant: variantName }",
        "// Line_Reference 503:       publishEvent(ctx, `${contentPiece.contentGroupId}`, {",
        "// Line_Reference 576:       const { variantId, variantName } = await getVariantDetails(ctx.db, variant);",
        "// Line_Reference 612:         contentPieceUpdates.slug = convertToSlug(update.slug || update.title || contentPiece.title);",
        "// Line_Reference 704:       publishEvent(ctx, `${newContentPiece.contentGroupId}`, {",
        "// Line_Reference 713:                 { slug: newContentPiece.slug, variant: variantName }",
        "// Line_Reference 761:       publishEvent(ctx, `${contentPiece.contentGroupId}`, {",
        "// Line_Reference 865:       publishEvent(",
        "// Line_Reference 918:       return createEventSubscription<ContentPieceEvent>(",
        "// Line_Reference 919:         ctx,",
        "// Line_Reference 920:         `contentPieces:${input.contentGroupId}`",
        "// Line_Reference 921:       );",
        "// Line_Reference 926: export type { ContentPieceEvent };"
    ]
}
