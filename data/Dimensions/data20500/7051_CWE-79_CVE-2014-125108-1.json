{
    "cve_id": "CVE-2014-125108",
    "cve_description": "A vulnerability was found in w3c online-spellchecker-py up to 20140130. It has been rated as problematic. This issue affects some unknown processing of the file spellchecker. The manipulation leads to cross site scripting. The attack may be initiated remotely. The complexity of an attack is rather high. The exploitation is known to be difficult. The identifier of the patch is d6c21fd8187c5db2a50425ff80694149e75d722e. It is recommended to apply a patch to fix this issue. The identifier VDB-248849 was assigned to this vulnerability.",
    "cve_publish_date": "2023-12-23",
    "cwe_id": "CWE-79",
    "cwe_name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
    "cwe_description": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
    "commit_message": "Defend against RCE and XSS; modernize.\n\nRCE was theoretically possible depending on how strict\ncgi.parse_header() reads Content-Type.  If it ever returned shell\nmetacharacters, those would be passed directly to the shell.\n\nThis patch switches the code from popen2 to subprocess, since the\nlatter is deprecated, and we get lots of warnings about that in our\nApache error logs.",
    "type_of_change": "Modification",
    "filename_of_changes": "spellchecker",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "93",
    "number_of_lines_deleted_vulnerable_to_cve": "109",
    "vulnerable_lines": [
        "// Line_Reference 18: import os",
        "// Line_Reference 21: import string",
        "// Line_Reference 23: import popen2",
        "// Line_Reference 25: customized_dico=\"/usr/local/share/aspell/w3c.dat\"",
        "// Line_Reference 32:                 return \"<option value='%s'%s>%s</option>\" % (a,selected,b)",
        "// Line_Reference 33: ",
        "// Line_Reference 34: def concat(a,b):",
        "// Line_Reference 35:         return a+b",
        "// Line_Reference 36: ",
        "// Line_Reference 96: \tline = fp.readline()",
        "// Line_Reference 98: \tcount = 0",
        "// Line_Reference 99: \twhile line!=\"\":",
        "// Line_Reference 100: \t\tif line!=\"\\n\" and line !=\"*\\n\" and line[0]!=\"@\":",
        "// Line_Reference 101: \t\t\tline = line[:-1]",
        "// Line_Reference 102: \t\t\tparts = string.split(line,\": \")",
        "// Line_Reference 103: \t\t\tfields = string.split(parts[0],\" \")",
        "// Line_Reference 104: \t\t\tif fields[0]==\"&\":",
        "// Line_Reference 105: \t\t\t\tvalues = string.split(parts[1],\", \")",
        "// Line_Reference 106: \t\t\t\tif (not words.has_key(fields[1])):",
        "// Line_Reference 107: \t\t\t\t\twords[fields[1]]=values",
        "// Line_Reference 109: \t\t\t\tif (not words.has_key(fields[1])):",
        "// Line_Reference 110: \t\t\t\t\twords[fields[1]]=[]",
        "// Line_Reference 111: \t\telif line==\"\\n\":",
        "// Line_Reference 112: \t\t\tcount = count + 1",
        "// Line_Reference 113: \t\tline = fp.readline()",
        "// Line_Reference 114: \toffsets = {}",
        "// Line_Reference 115: \tcount = 0",
        "// Line_Reference 116: \tif len(words):",
        "// Line_Reference 117:                 keys = words.keys()",
        "// Line_Reference 118:                 keys.sort()",
        "// Line_Reference 119: \t\tprint \"<form action=\\\"http://www.w3.org/Team/update_dictionary\\\" method=\\\"post\\\"><ol>\"",
        "// Line_Reference 120: \t\tfor error in keys:",
        "// Line_Reference 121: \t\t\tprint \"<li>\\\"<span class='no'>%s</span>\\\" (<input type=\\\"checkbox\\\" name=\\\"list[]\\\" value=\\\"%s\\\"/> add to the dictionary)\" % (error,error)",
        "// Line_Reference 122: ",
        "// Line_Reference 123: \t\t\tif len(words[error]) and suggest:",
        "// Line_Reference 124: \t\t\t\tprint \"; suggestions:<ul class='suggestions'>\"",
        "// Line_Reference 125: \t\t\t\tfor option in words[error]:",
        "// Line_Reference 126: \t\t\t\t\tprint \"<li>%s</li>\" % option",
        "// Line_Reference 127: \t\t\t\tprint \"</ul>\"",
        "// Line_Reference 128: \t\t\tprint \"</li>\"",
        "// Line_Reference 129: \t\tprint \"</ol><p><label><input type=\\\"submit\\\" value=\\\"Update dictionary\\\"/> (W3C Comm Team only)</label></p></form>\"",
        "// Line_Reference 130: \telse:",
        "// Line_Reference 134: \tif  os.environ.has_key('SCRIPT_NAME'):",
        "// Line_Reference 135: \t\tfields = cgi.FieldStorage()",
        "// Line_Reference 136: \t\turi =\"\"",
        "// Line_Reference 137: \t\turi_text =\"\"",
        "// Line_Reference 138: \t\turi_text1=\"\"",
        "// Line_Reference 139: \t\tsuggest=0",
        "// Line_Reference 140: \t\tsuggest_txt=''",
        "// Line_Reference 141: \t\tif fields.has_key('uri'):",
        "// Line_Reference 142: \t\t\turi = fields['uri'].value",
        "// Line_Reference 143:                 elif fields.has_key('referrer') and os.environ.has_key('HTTP_REFERER'):",
        "// Line_Reference 144:                         uri = os.environ['HTTP_REFERER']",
        "// Line_Reference 145:                 if uri:",
        "// Line_Reference 146: \t\t\turi_text1=\"for %s\" % (cgi.escape(uri))",
        "// Line_Reference 147: \t\t\turi_text=\" for <a href=\\\"%s\\\">%s</a>\" %(cgi.escape(uri),cgi.escape(uri))",
        "// Line_Reference 148:                 lang = \"en_US\"",
        "// Line_Reference 149:                 if fields.has_key('lang') and fields['lang'].value in languages.keys():",
        "// Line_Reference 150:                         lang=fields['lang'].value",
        "// Line_Reference 151:                 languages_options = reduce(concat,map(format_option,languages.keys(),languages.values(),[lang for x in languages.keys()]))",
        "// Line_Reference 152: ",
        "// Line_Reference 153: \t\tif fields.has_key('suggest'):",
        "// Line_Reference 154: \t\t\tif fields['suggest'].value=='on':",
        "// Line_Reference 155: \t\t\t\tsuggest=1",
        "// Line_Reference 156: \t\t\t\tsuggest_txt=\" checked='checked'\"",
        "// Line_Reference 157: \t\tif uri:",
        "// Line_Reference 158: \t\t\timport http_auth",
        "// Line_Reference 159: \t\t\turl_opener = http_auth.ProxyAuthURLopener()",
        "// Line_Reference 160: \t\t\ttry:",
        "// Line_Reference 161: \t\t\t\tfp = url_opener.open(uri)",
        "// Line_Reference 162: \t\t\texcept IOError as e:",
        "// Line_Reference 163: \t\t\t\turl_opener.error = \"I/O error: %s %s\" % (e.errno,e.strerror)",
        "// Line_Reference 164: \t\t\t\tfp = None",
        "// Line_Reference 165: \t\t\tprint Page1 % ('<meta name=\"ROBOTS\" content=\"NOINDEX,NOFOLLOW\"/>',uri_text1,uri_text,cgi.escape(uri),languages_options,suggest_txt)",
        "// Line_Reference 166: \t\t\tif fp:",
        "// Line_Reference 167:                                 personal = \"--personal=%s\" % customized_dico",
        "// Line_Reference 168:                                 if lang!=\"en_US\":",
        "// Line_Reference 169:                                         personal = \"\"",
        "// Line_Reference 170:                                 headers = fp.info()",
        "// Line_Reference 171:                                 charset_opt = \"\"",
        "// Line_Reference 172:                                 if headers.has_key('Content-Type'):",
        "// Line_Reference 173:                                         contentType = cgi.parse_header(headers[\"Content-Type\"])",
        "// Line_Reference 174:                                         if contentType[1].has_key('charset'):",
        "// Line_Reference 175:                                                 charset_opt = \"-assume_charset=%s\" % contentType[1]['charset']",
        "// Line_Reference 176: \t        \t\tcommand = \"/usr/bin/lynx  %s -cfg=/usr/local/lib/lynx.cfg -nolist -dump -stdin|/usr/bin/aspell --encoding=utf-8 --lang %s -a %s --sug-mode=fast\" % (charset_opt,lang,personal)",
        "// Line_Reference 177: ",
        "// Line_Reference 178:         \t                (piperfd,pipewfd,pipeErr) = popen2.popen3(command)",
        "// Line_Reference 179: ",
        "// Line_Reference 180: \t\t\t\tpipewfd.write(fp.read())",
        "// Line_Reference 181: \t\t\t\tfp.close()",
        "// Line_Reference 182: \t\t\t\tpipewfd.close()",
        "// Line_Reference 183: \t\t\t\t# Need to find a way to display any errors if relevant",
        "// Line_Reference 184: \t\t\t\tprocessingErrors=\"\"",
        "// Line_Reference 185: \t\t\t\tif (processingErrors):",
        "// Line_Reference 186: \t\t\t\t\tprint \"<p>The following error occurred when trying to process your request :</p><pre class='no'>\"",
        "// Line_Reference 187: \t\t\t\t\tprint \"</pre>\"",
        "// Line_Reference 188: \t\t\t\t\tpipeErr.close()",
        "// Line_Reference 189: \t\t\t\tif (piperfd):",
        "// Line_Reference 190: \t\t\t\t\tprint \"<h2>Errors found in the page</h2>\"",
        "// Line_Reference 191: \t\t\t\t\tformat(piperfd,suggest)",
        "// Line_Reference 192: \t\t\t\t\tpiperfd.close()",
        "// Line_Reference 193: \t\t\telse:",
        "// Line_Reference 194: \t\t\t\tprint \"<p><span class='no'>Unable to read</span> <a href='%s'>%s</a> (%s). Sorry, check the URI.</p>\" % (cgi.escape(uri),cgi.escape(uri), url_opener.error)",
        "// Line_Reference 195: \t\telse:",
        "// Line_Reference 196: \t\t\tprint Page1 % ('',uri_text1,uri_text,cgi.escape(uri),languages_options,suggest_txt)",
        "// Line_Reference 197: \t\tprint Page2",
        "// Line_Reference 198: ",
        "// Line_Reference 199: ",
        "// Line_Reference 200: "
    ]
}
