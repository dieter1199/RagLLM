{
    "cve_id": "CVE-2021-41118",
    "cve_description": "The DynamicPageList3 extension is a reporting tool for MediaWiki, listing category members and intersections with various formats and details. In affected versions unsanitised input of regular expression date within the parameters of the DPL parser function, allowed for the possibility of ReDoS (Regex Denial of Service). This has been resolved in version 3.3.6. If you are unable to update you may also set `$wgDplSettings['functionalRichness'] = 0;` or disable DynamicPageList3 to mitigate.",
    "cve_publish_date": "2021-10-04",
    "cwe_id": "CWE-400",
    "cwe_name": "Uncontrolled Resource Consumption",
    "cwe_description": "The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.",
    "commit_message": "Major cleanup (#57)",
    "type_of_change": "Modification",
    "filename_of_changes": "Article.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "66",
    "number_of_lines_deleted_vulnerable_to_cve": "80",
    "vulnerable_lines": [
        "// Line_Reference 2: /**",
        "// Line_Reference 3:  * DynamicPageList3",
        "// Line_Reference 4:  * DPL Article Class",
        "// Line_Reference 5:  *",
        "// Line_Reference 6:  * @author\t\tIlyaHaykinson, Unendlich, Dangerville, Algorithmix, Theaitetos, Alexia E. Smith, Universal Omega",
        "// Line_Reference 7:  * @license\t\tGPL-2.0-or-later",
        "// Line_Reference 8:  * @package\t\tDynamicPageList3",
        "// Line_Reference 9:  *",
        "// Line_Reference 10:  */",
        "// Line_Reference 15: use User;",
        "// Line_Reference 21: \t * @var object",
        "// Line_Reference 23: \tpublic $mTitle = null;",
        "// Line_Reference 28: \t * @var string",
        "// Line_Reference 49: \t * @var string",
        "// Line_Reference 119: \t * @var string",
        "// Line_Reference 187: \t * Main Constructor",
        "// Line_Reference 188: \t *",
        "// Line_Reference 189: \t * @access\tpublic",
        "// Line_Reference 190: \t * @param\tstring\tTitle",
        "// Line_Reference 191: \t * @param\tinteger\tNamespace",
        "// Line_Reference 192: \t * @return\tvoid",
        "// Line_Reference 194: \tpublic function __construct( $title, $namespace ) {",
        "// Line_Reference 195: \t\t$this->mTitle     = $title;",
        "// Line_Reference 202: \t * @access\tpublic",
        "// Line_Reference 203: \t * @param\tarray\tDatabase Row",
        "// Line_Reference 204: \t * @param\tobject\t\\DPL\\Parameters Object",
        "// Line_Reference 205: \t * @param\tobject\tMediawiki Title Object",
        "// Line_Reference 206: \t * @param\tinteger\tPage Namespace ID",
        "// Line_Reference 207: \t * @param\tstring\tPage Title as Selected from Query",
        "// Line_Reference 208: \t * @return\tobject\t\\DPL\\Article Object",
        "// Line_Reference 210: \tpublic static function newFromRow( $row, Parameters $parameters, \\Title $title, $pageNamespace, $pageTitle ) {",
        "// Line_Reference 213: \t\t$article = new Article( $title, $pageNamespace );",
        "// Line_Reference 215: \t\t$revActorName = null;",
        "// Line_Reference 216: \t\tif ( isset( $row['revactor_actor'] ) ) {",
        "// Line_Reference 217: \t\t\t$revActorName = User::newFromActorId( $row['revactor_actor'] )->getName();",
        "// Line_Reference 218: \t\t}",
        "// Line_Reference 229: \t\t//Chop off title if longer than the 'titlemaxlen' parameter.",
        "// Line_Reference 240: \t\t$contLang = MediaWikiServices::getInstance()->getContentLanguage();",
        "// Line_Reference 242: \t\t//get first char used for category-style output",
        "// Line_Reference 244: \t\t\t$article->mStartChar = $contLang->convert( $contLang->firstChar( $row['sortkey'] ) );",
        "// Line_Reference 246: \t\t\t$article->mStartChar = $contLang->convert( $contLang->firstChar( $pageTitle ) );",
        "// Line_Reference 251: \t\t//External link",
        "// Line_Reference 256: \t\t//SHOW PAGE_COUNTER",
        "// Line_Reference 261: \t\t//SHOW PAGE_SIZE",
        "// Line_Reference 265: \t\t//STORE initially selected PAGE",
        "// Line_Reference 268: \t\t\t\t$article->mSelTitle     = 'unknown page';",
        "// Line_Reference 271: \t\t\t\t$article->mSelTitle     = $row['sel_title'];",
        "// Line_Reference 276: \t\t//STORE selected image",
        "// Line_Reference 286: \t\t\t//REVISION SPECIFIED",
        "// Line_Reference 288: \t\t\t\t$article->mRevision = $row['revactor_rev'];",
        "// Line_Reference 289: \t\t\t\t$article->mUser     = $revActorName;",
        "// Line_Reference 290: \t\t\t\t$article->mDate     = $row['revactor_timestamp'];",
        "// Line_Reference 293: \t\t\t//SHOW \"PAGE_TOUCHED\" DATE, \"FIRSTCATEGORYDATE\" OR (FIRST/LAST) EDIT DATE",
        "// Line_Reference 298: \t\t\t} elseif ( $parameters->getParameter( 'addeditdate' ) && isset( $row['revactor_timestamp'] ) ) {",
        "// Line_Reference 299: \t\t\t\t$article->mDate = $row['revactor_timestamp'];",
        "// Line_Reference 304: \t\t\t//Time zone adjustment",
        "// Line_Reference 310: \t\t\t\t//Apply the userdateformat",
        "// Line_Reference 311: \t\t\t\t$article->myDate = gmdate( $parameters->getParameter( 'userdateformat' ), wfTimeStamp( TS_UNIX, $article->mDate ) );",
        "// Line_Reference 316: \t\t\t\t$article->mContributor  = User::newFromActorId( $row['contributor'] )->getName();",
        "// Line_Reference 317: \t\t\t\t$article->mContrib      = substr( '*****************', 0, (int)round( log( $row['contribution'] ) ) );",
        "// Line_Reference 320: \t\t\t//USER/AUTHOR(S)",
        "// Line_Reference 324: \t\t\t\t$article->mUserLink = '[[User:' . $revActorName . '|' . $revActorName . ']]';",
        "// Line_Reference 325: \t\t\t\t$article->mUser     = $revActorName;",
        "// Line_Reference 328: \t\t\t//CATEGORY LINKS FROM CURRENT PAGE",
        "// Line_Reference 340: \t\t\t\t\t\t//Count one more page in this heading",
        "// Line_Reference 343: \t\t\t\t\t\t\t//uncategorized page (used if ordermethod=category,...)",
        "// Line_Reference 350: \t\t\t\t\t\tself::$headings[$revActorName] = ( isset( self::$headings[$revActorName] ) ? self::$headings[$revActorName] + 1 : 1 );",
        "// Line_Reference 351: \t\t\t\t\t\tif ( $row['revactor_actor'] == 0 ) { //anonymous user",
        "// Line_Reference 352: \t\t\t\t\t\t\t$article->mParentHLink = '[[User:' . $revActorName . '|' . $revActorName . ']]';",
        "// Line_Reference 353: \t\t\t\t\t\t} else {",
        "// Line_Reference 354: \t\t\t\t\t\t\t$article->mParentHLink = '[[User:' . $revActorName . '|' . $revActorName . ']]';",
        "// Line_Reference 355: \t\t\t\t\t\t}",
        "// Line_Reference 367: \t * @access\tpublic",
        "// Line_Reference 368: \t * @return\tarray\tHeadings",
        "// Line_Reference 378: \t *",
        "// Line_Reference 379: \t * @access\tpublic",
        "// Line_Reference 380: \t * @return\tvoid",
        "// Line_Reference 389: \t * @access\tpublic",
        "// Line_Reference 390: \t * @return\tmixed\tFormatted string or null for none set.",
        "// Line_Reference 397: \t\t\treturn $wgLang->timeanddate( $article->mDate, true );"
    ]
}
