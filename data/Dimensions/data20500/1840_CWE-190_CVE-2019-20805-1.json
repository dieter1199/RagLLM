{
    "cve_id": "CVE-2019-20805",
    "cve_description": "p_lx_elf.cpp in UPX before 3.96 has an integer overflow during unpacking via crafted values in a PT_DYNAMIC segment.",
    "cve_publish_date": "2020-06-01",
    "cwe_id": "CWE-190",
    "cwe_name": "Integer Overflow or Wraparound",
    "cwe_description": "The product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number.",
    "commit_message": "Avoid bogus values in PT_DYNAMIC segment.\n\nDetect duplicate DT_*.\nDetect out-of-bounds hashtab and gashtab.\nDetect missing DT_REL, DT_RELA.\nDetect out-of-bounds d_val.\nhttps://github.com/upx/upx/issues/317\n\tmodified:   p_lx_elf.cpp",
    "type_of_change": "Modification",
    "filename_of_changes": "p_lx_elf.cpp",
    "code_language": "C++",
    "number_of_lines_added_for_mitigation": "43",
    "number_of_lines_deleted_vulnerable_to_cve": "7",
    "vulnerable_lines": [
        "// Line_Reference 1610:     unsigned const v_hsh = elf_unsigned_dynamic(Elf64_Dyn::DT_HASH);",
        "// Line_Reference 1612:         hashtab = (unsigned const *)elf_find_dynamic(Elf64_Dyn::DT_HASH);",
        "// Line_Reference 1798:     if (!dynsym || !dynstr) {",
        "// Line_Reference 1835:     if (!dynsym || !dynstr) {",
        "// Line_Reference 4904:         if (t) {",
        "// Line_Reference 5119:         if (t) {",
        "// Line_Reference 5120:             return &((unsigned char const *)file_image)[(size_t)t];"
    ]
}
