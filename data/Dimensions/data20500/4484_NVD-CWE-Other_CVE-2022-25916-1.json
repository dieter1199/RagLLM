{
    "cve_id": "CVE-2022-25916",
    "cve_description": "Versions of the package mt7688-wiscan before 0.8.3 are vulnerable to Command Injection due to improper input sanitization in the 'wiscan.scan' function. \r\r",
    "cve_publish_date": "2023-02-01",
    "cwe_id": "NVD-CWE-Other",
    "cwe_name": "Other",
    "cwe_description": "NVD is only using a subset of CWE for mapping instead of the entire CWE, and the weakness type is not covered by that subset.",
    "commit_message": "v0.8.3 intf only accetps alphabets and numbers",
    "type_of_change": "Modification",
    "filename_of_changes": "index.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "125",
    "number_of_lines_deleted_vulnerable_to_cve": "121",
    "vulnerable_lines": [
        "// Line_Reference 4:     freqs = [ '2.412', '2.417', '2.422', '2.427', '2.432', '2.437', '2.442', '2.447', '2.452', '2.457', '2.462' ];",
        "// Line_Reference 9:     var child;",
        "// Line_Reference 11:     if (typeof intf === 'function') {",
        "// Line_Reference 12:         callback = intf;",
        "// Line_Reference 13:         intf = defaultInterface;",
        "// Line_Reference 14:     }",
        "// Line_Reference 16:     intf = intf || defaultInterface;",
        "// Line_Reference 17:     callback = callback || function () {};",
        "// Line_Reference 19:     if (typeof intf !== 'string')",
        "// Line_Reference 20:         return callback(new Error('intf should be a string.'));",
        "// Line_Reference 22:     child = exec('iwinfo ' + intf + ' scan', function (error, stdout, stderr) {",
        "// Line_Reference 23:         if (error) {",
        "// Line_Reference 24:             stderr = stderr.trim();",
        "// Line_Reference 25:             return callback(new Error(stderr));",
        "// Line_Reference 26:         }",
        "// Line_Reference 28:         var info = stdout,",
        "// Line_Reference 29:             parsed = [];",
        "// Line_Reference 30: ",
        "// Line_Reference 31:         info = info.replace(/\\n/g, ' ');",
        "// Line_Reference 32:         info = info.replace(/\"/g, '');",
        "// Line_Reference 33:         info = info.split(' ');",
        "// Line_Reference 34:         info.forEach(function (char, i) {",
        "// Line_Reference 35:             if (char === 'ESSID' && info[i+1] === '')",
        "// Line_Reference 36:                 info[i+1] = 'unknown';",
        "// Line_Reference 37:             else if (char !== '')",
        "// Line_Reference 38:                 parsed.push(char);",
        "// Line_Reference 39:         });",
        "// Line_Reference 40: ",
        "// Line_Reference 41:         parsed = parse(parsed);",
        "// Line_Reference 42:         callback(null, parsed);",
        "// Line_Reference 47:     var target = null;",
        "// Line_Reference 49:     if (arguments.length === 2) {",
        "// Line_Reference 50:         callback = essid;",
        "// Line_Reference 51:         essid = intf;",
        "// Line_Reference 52:         intf = defaultInterface;",
        "// Line_Reference 53:     }",
        "// Line_Reference 55:     intf = intf || defaultInterface;",
        "// Line_Reference 57:     if (typeof intf !== 'string')",
        "// Line_Reference 58:         return callback(new Error('intf should be a string.'));",
        "// Line_Reference 59:     else if (typeof essid !== 'string')",
        "// Line_Reference 60:         return callback(new Error('essid should be a string.'));",
        "// Line_Reference 62:     callback = callback || function () {};",
        "// Line_Reference 64:     wiscan.scan(intf, function (err, infos) {",
        "// Line_Reference 65:         if (err)",
        "// Line_Reference 66:             return callback(err);",
        "// Line_Reference 68:         infos.forEach(function (info) {",
        "// Line_Reference 69:             if (info.essid === essid)",
        "// Line_Reference 70:                 target = info;",
        "// Line_Reference 71:         });",
        "// Line_Reference 72: ",
        "// Line_Reference 73:         callback(null, target);",
        "// Line_Reference 78:     if (arguments.length === 2) {",
        "// Line_Reference 79:         callback = essid;",
        "// Line_Reference 80:         essid = intf;",
        "// Line_Reference 81:         intf = defaultInterface;",
        "// Line_Reference 82:     }",
        "// Line_Reference 84:     intf = intf || defaultInterface;",
        "// Line_Reference 86:     wiscan.scanByEssid(intf, essid, function (err, info) {",
        "// Line_Reference 87:         if (err)",
        "// Line_Reference 88:             return callback(err);",
        "// Line_Reference 90:         if (info)",
        "// Line_Reference 91:             callback(null, info.quality);",
        "// Line_Reference 92:         else",
        "// Line_Reference 93:             callback(null, null);",
        "// Line_Reference 94:     });",
        "// Line_Reference 98:     var parsed = [],",
        "// Line_Reference 99:         len = items.length,",
        "// Line_Reference 100:         idx = 0;",
        "// Line_Reference 101: ",
        "// Line_Reference 102:     if (items.length === 0)",
        "// Line_Reference 103:         return parsed;",
        "// Line_Reference 104: ",
        "// Line_Reference 105:     items.forEach(function (c, i) {",
        "// Line_Reference 106:         var val;",
        "// Line_Reference 107:         if (c === 'Cell') {",
        "// Line_Reference 108:             //- [deleted: need not cell field] val = items[i+1];",
        "// Line_Reference 109:             //- [deleted: need not cell field] val = isNaN(parseInt(val)) ? val : parseInt(val);",
        "// Line_Reference 110:             parsed.push({});",
        "// Line_Reference 111:         } else if (c === 'Address:') {",
        "// Line_Reference 112:             parsed[idx].address = items[i+1];",
        "// Line_Reference 113:         } else if (c === 'ESSID:') {",
        "// Line_Reference 114:             parsed[idx].essid = items[i+1];",
        "// Line_Reference 115:         } else if (c === 'Mode:') {",
        "// Line_Reference 116:             parsed[idx].mode = items[i+1];",
        "// Line_Reference 117:         } else if (c === 'Channel:') {",
        "// Line_Reference 118:             val = items[i+1];",
        "// Line_Reference 119:             val = isNaN(parseInt(val)) ? val : parseInt(val);",
        "// Line_Reference 120:             parsed[idx].channel = val;",
        "// Line_Reference 121:             parsed[idx].frequency = getFrequency(val);",
        "// Line_Reference 122:         } else if (c === 'Signal:') {",
        "// Line_Reference 123:             val = items[i+1];",
        "// Line_Reference 124:             val = isNaN(parseInt(val)) ? val : parseInt(val);",
        "// Line_Reference 125:             parsed[idx].signal = val;",
        "// Line_Reference 126:         } else if (c === 'Quality:') {",
        "// Line_Reference 127: ",
        "// Line_Reference 128:             val = items[i+1].split('/')[0];",
        "// Line_Reference 129:             val = isNaN(parseInt(val)) ? val : parseInt(val);",
        "// Line_Reference 130:             parsed[idx].quality = val;",
        "// Line_Reference 131:         } else if (c === 'Encryption:') {",
        "// Line_Reference 132:             var x = i + 1,",
        "// Line_Reference 133:                 enc = '';",
        "// Line_Reference 134: ",
        "// Line_Reference 135:             while (items[x] !== 'Cell') {",
        "// Line_Reference 136:                 if (x !== len) {",
        "// Line_Reference 137:                     enc = enc + items[x] + ' ';",
        "// Line_Reference 138:                     x += 1;",
        "// Line_Reference 139:                 } else {",
        "// Line_Reference 140:                     break;",
        "// Line_Reference 141:                 }",
        "// Line_Reference 142:             }",
        "// Line_Reference 143:             enc = enc.trim();",
        "// Line_Reference 144:             parsed[idx].encryption = enc;",
        "// Line_Reference 145:             idx += 1;",
        "// Line_Reference 147:     });",
        "// Line_Reference 148:     return parsed;",
        "// Line_Reference 152:     var f = freqs[ch - 1];",
        "// Line_Reference 154:     if (f)",
        "// Line_Reference 155:         f = f + ' GHz';",
        "// Line_Reference 156:     else",
        "// Line_Reference 157:         f = '';",
        "// Line_Reference 159:     return f;"
    ]
}
