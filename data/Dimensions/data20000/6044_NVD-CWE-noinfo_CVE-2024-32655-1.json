{
    "cve_id": "CVE-2024-32655",
    "cve_description": "Npgsql is the .NET data provider for PostgreSQL. The `WriteBind()` method in `src/Npgsql/Internal/NpgsqlConnector.FrontendMessages.cs` uses `int` variables to store the message length and the sum of parameter lengths. Both variables overflow when the sum of parameter lengths becomes too large. This causes Npgsql to write a message size that is too small when constructing a Postgres protocol message to send it over the network to the database. When parsing the message, the database will only read a small number of bytes and treat any following bytes as new messages while they belong to the old message. Attackers can abuse this to inject arbitrary Postgres protocol messages into the connection, leading to the execution of arbitrary SQL statements on the application's behalf. This vulnerability is fixed in 4.0.14, 4.1.13, 5.0.18, 6.0.11, 7.0.7, and 8.0.3.",
    "cve_publish_date": "2024-05-14",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Merge pull request from GHSA-x9vc-6hfv-hg8c",
    "type_of_change": "Modification",
    "filename_of_changes": "NpgsqlConnector.FrontendMessages.cs",
    "code_language": "C#",
    "number_of_lines_added_for_mitigation": "38",
    "number_of_lines_deleted_vulnerable_to_cve": "18",
    "vulnerable_lines": [
        "// Line_Reference 121:         if (writeBuffer.WriteSpaceLeft < 1 + 4 + asciiName.Length + 1)",
        "// Line_Reference 122:             await Flush(async, cancellationToken).ConfigureAwait(false);",
        "// Line_Reference 123: ",
        "// Line_Reference 133:         writeBuffer.WriteByte(FrontendMessageCode.Parse);",
        "// Line_Reference 134:         writeBuffer.WriteInt32(messageLength - 1);",
        "// Line_Reference 135:         writeBuffer.WriteNullTerminatedString(asciiName);",
        "// Line_Reference 174:         if (writeBuffer.WriteSpaceLeft < headerLength)",
        "// Line_Reference 175:         {",
        "// Line_Reference 176:             Debug.Assert(writeBuffer.Size >= headerLength, \"Write buffer too small for Bind header\");",
        "// Line_Reference 177:             await Flush(async, cancellationToken).ConfigureAwait(false);",
        "// Line_Reference 178:         }",
        "// Line_Reference 179: ",
        "// Line_Reference 200:         writeBuffer.WriteByte(FrontendMessageCode.Bind);",
        "// Line_Reference 201:         writeBuffer.WriteInt32(messageLength - 1);",
        "// Line_Reference 303:         WriteBuffer.WriteInt32(",
        "// Line_Reference 304:             sizeof(int)  +        // Message length (including self excluding code)",
        "// Line_Reference 305:             queryByteLen +        // Query byte length",
        "// Line_Reference 306:             sizeof(byte));        // Null terminator"
    ]
}
