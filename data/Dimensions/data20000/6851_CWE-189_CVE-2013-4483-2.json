{
    "cve_id": "CVE-2013-4483",
    "cve_description": "The ipc_rcu_putref function in ipc/util.c in the Linux kernel before 3.10 does not properly manage a reference count, which allows local users to cause a denial of service (memory consumption or system crash) via a crafted application.",
    "cve_publish_date": "2013-11-04",
    "cwe_id": "CWE-189",
    "cwe_name": "Numeric Errors",
    "cwe_description": "Weaknesses in this category are related to improper calculation or conversion of numbers.",
    "commit_message": "ipc,sem: fine grained locking for semtimedop\n\nIntroduce finer grained locking for semtimedop, to handle the common case\nof a program wanting to manipulate one semaphore from an array with\nmultiple semaphores.\n\nIf the call is a semop manipulating just one semaphore in an array with\nmultiple semaphores, only take the lock for that semaphore itself.\n\nIf the call needs to manipulate multiple semaphores, or another caller is\nin a transaction that manipulates multiple semaphores, the sem_array lock\nis taken, as well as all the locks for the individual semaphores.\n\nOn a 24 CPU system, performance numbers with the semop-multi\ntest with N threads and N semaphores, look like this:\n\n\tvanilla\t\tDavidlohr's\tDavidlohr's +\tDavidlohr's +\nthreads\t\t\tpatches\t\trwlock patches\tv3 patches\n10\t610652\t\t726325\t\t1783589\t\t2142206\n20\t341570\t\t365699\t\t1520453\t\t1977878\n30\t288102\t\t307037\t\t1498167\t\t2037995\n40\t290714\t\t305955\t\t1612665\t\t2256484\n50\t288620\t\t312890\t\t1733453\t\t2650292\n60\t289987\t\t306043\t\t1649360\t\t2388008\n70\t291298\t\t306347\t\t1723167\t\t2717486\n80\t290948\t\t305662\t\t1729545\t\t2763582\n90\t290996\t\t306680\t\t1736021\t\t2757524\n100\t292243\t\t306700\t\t1773700\t\t3059159\n\n[davidlohr.bueso@hp.com: do not call sem_lock when bogus sma]\n[davidlohr.bueso@hp.com: make refcounter atomic]\nSigned-off-by: Rik van Riel <riel@redhat.com>\nSuggested-by: Linus Torvalds <torvalds@linux-foundation.org>\nAcked-by: Davidlohr Bueso <davidlohr.bueso@hp.com>\nCc: Chegu Vinod <chegu_vinod@hp.com>\nCc: Jason Low <jason.low2@hp.com>\nReviewed-by: Michel Lespinasse <walken@google.com>\nCc: Peter Hurley <peter@hurleysoftware.com>\nCc: Stanislav Kinsbursky <skinsbursky@parallels.com>\nTested-by: Emmanuel Benisty <benisty.e@gmail.com>\nTested-by: Sedat Dilek <sedat.dilek@gmail.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "sem.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "171",
    "number_of_lines_deleted_vulnerable_to_cve": "100",
    "vulnerable_lines": [
        "// Line_Reference 140: #define sem_unlock(sma)\t\tipc_unlock(&(sma)->sem_perm)",
        "// Line_Reference 196: static inline struct sem_array *sem_obtain_lock(struct ipc_namespace *ns, int id)",
        "// Line_Reference 208: \tspin_lock(&ipcp->lock);",
        "// Line_Reference 216: \tspin_unlock(&ipcp->lock);",
        "// Line_Reference 233: static inline struct sem_array *sem_lock_check(struct ipc_namespace *ns,",
        "// Line_Reference 234: \t\t\t\t\t\tint id)",
        "// Line_Reference 235: {",
        "// Line_Reference 236: \tstruct kern_ipc_perm *ipcp = ipc_lock_check(&sem_ids(ns), id);",
        "// Line_Reference 237: ",
        "// Line_Reference 238: \tif (IS_ERR(ipcp))",
        "// Line_Reference 239: \t\treturn ERR_CAST(ipcp);",
        "// Line_Reference 240: ",
        "// Line_Reference 241: \treturn container_of(ipcp, struct sem_array, sem_perm);",
        "// Line_Reference 242: }",
        "// Line_Reference 243: ",
        "// Line_Reference 257: \tipc_lock_by_ptr(&sma->sem_perm);",
        "// Line_Reference 263: \tipc_rcu_getref(sma);",
        "// Line_Reference 264: \tipc_unlock(&(sma)->sem_perm);",
        "// Line_Reference 269: \tipc_lock_by_ptr(&sma->sem_perm);",
        "// Line_Reference 270: \tipc_rcu_putref(sma);",
        "// Line_Reference 271: \tipc_unlock(&(sma)->sem_perm);",
        "// Line_Reference 279: \tspin_lock(&(sma)->sem_perm.lock);",
        "// Line_Reference 280: \tipc_rcu_getref(sma);",
        "// Line_Reference 281: \tipc_unlock(&(sma)->sem_perm);",
        "// Line_Reference 374: \tfor (i = 0; i < nsems; i++)",
        "// Line_Reference 382: \tsem_unlock(sma);",
        "// Line_Reference 821: \tsem_unlock(sma);",
        "// Line_Reference 950: \tint nsems;",
        "// Line_Reference 961: \tsma = sem_lock_check(ns, semid);",
        "// Line_Reference 962: \tif (IS_ERR(sma))",
        "// Line_Reference 963: \t\treturn PTR_ERR(sma);",
        "// Line_Reference 966: \tnsems = sma->sem_nsems;",
        "// Line_Reference 968: \terr = -EACCES;",
        "// Line_Reference 969: \tif (ipcperms(ns, &sma->sem_perm, S_IWUGO))",
        "// Line_Reference 970: \t\tgoto out_unlock;",
        "// Line_Reference 973: \tif (err)",
        "// Line_Reference 974: \t\tgoto out_unlock;",
        "// Line_Reference 976: \terr = -EINVAL;",
        "// Line_Reference 977: \tif(semnum < 0 || semnum >= nsems)",
        "// Line_Reference 978: \t\tgoto out_unlock;",
        "// Line_Reference 982: \terr = -ERANGE;",
        "// Line_Reference 983: \tif (val > SEMVMX || val < 0)",
        "// Line_Reference 984: \t\tgoto out_unlock;",
        "// Line_Reference 985: ",
        "// Line_Reference 995: \terr = 0;",
        "// Line_Reference 996: out_unlock:",
        "// Line_Reference 997: \tsem_unlock(sma);",
        "// Line_Reference 999: \treturn err;",
        "// Line_Reference 1054: \t\t\t\tsem_unlock(sma);",
        "// Line_Reference 1058: \t\t}",
        "// Line_Reference 1060: \t\tspin_lock(&sma->sem_perm.lock);",
        "// Line_Reference 1063: \t\tsem_unlock(sma);",
        "// Line_Reference 1074: \t\tipc_rcu_getref(sma);",
        "// Line_Reference 1100: \t\t\tsem_unlock(sma);",
        "// Line_Reference 1127: \tspin_lock(&sma->sem_perm.lock);",
        "// Line_Reference 1146: \tsem_unlock(sma);",
        "// Line_Reference 1214: \t\tipc_lock_object(&sma->sem_perm);",
        "// Line_Reference 1218: \t\tipc_lock_object(&sma->sem_perm);",
        "// Line_Reference 1231: \tsem_unlock(sma);",
        "// Line_Reference 1343: \tint nsems;",
        "// Line_Reference 1344: \tint error;",
        "// Line_Reference 1366: \tipc_rcu_getref(sma);",
        "// Line_Reference 1379: \t\tsem_unlock(sma);",
        "// Line_Reference 1407: \tsem_unlock(sma);",
        "// Line_Reference 1447: \tint undos = 0, alter = 0, max;",
        "// Line_Reference 1497: \t} else",
        "// Line_Reference 1500: \tINIT_LIST_HEAD(&tasks);",
        "// Line_Reference 1501: ",
        "// Line_Reference 1502: \trcu_read_lock();",
        "// Line_Reference 1505: \t\tif (un)",
        "// Line_Reference 1506: \t\t\trcu_read_unlock();",
        "// Line_Reference 1537: \tipc_lock_object(&sma->sem_perm);",
        "// Line_Reference 1538: \tif (un) {",
        "// Line_Reference 1539: \t\tif (un->semid == -1) {",
        "// Line_Reference 1540: \t\t\trcu_read_unlock();",
        "// Line_Reference 1541: \t\t\tgoto out_unlock_free;",
        "// Line_Reference 1542: \t\t} else {",
        "// Line_Reference 1543: \t\t\t/*",
        "// Line_Reference 1544: \t\t\t * rcu lock can be released, \"un\" cannot disappear:",
        "// Line_Reference 1545: \t\t\t * - sem_lock is acquired, thus IPC_RMID is",
        "// Line_Reference 1546: \t\t\t *   impossible.",
        "// Line_Reference 1547: \t\t\t * - exit_sem is impossible, it always operates on",
        "// Line_Reference 1548: \t\t\t *   current (or a dead task).",
        "// Line_Reference 1549: \t\t\t */",
        "// Line_Reference 1550: ",
        "// Line_Reference 1551: \t\t\trcu_read_unlock();",
        "// Line_Reference 1552: \t\t}",
        "// Line_Reference 1553: \t}",
        "// Line_Reference 1594: \tsem_unlock(sma);",
        "// Line_Reference 1616: \tsma = sem_obtain_lock(ns, semid);",
        "// Line_Reference 1655: \tsem_unlock(sma);",
        "// Line_Reference 1719: \t\tint semid;",
        "// Line_Reference 1720: \t\tint i;",
        "// Line_Reference 1729: \t\trcu_read_unlock();",
        "// Line_Reference 1731: \t\tif (semid == -1)",
        "// Line_Reference 1734: \t\tsma = sem_lock_check(tsk->nsproxy->ipc_ns, un->semid);",
        "// Line_Reference 1735: ",
        "// Line_Reference 1737: \t\tif (IS_ERR(sma))",
        "// Line_Reference 1745: \t\t\tsem_unlock(sma);",
        "// Line_Reference 1785: \t\tsem_unlock(sma);"
    ]
}
