{
    "cve_id": "CVE-2022-45907",
    "cve_description": "In PyTorch before trunk/89695, torch.jit.annotations.parse_type_line can cause arbitrary code execution because eval is used unsafely.",
    "cve_publish_date": "2022-11-26",
    "cwe_id": "CWE-94",
    "cwe_name": "Improper Control of Generation of Code ('Code Injection')",
    "cwe_description": "The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.",
    "commit_message": "[JIT][Security] Do not blindly eval input string (#89189)\n\nIntroduce `_eval_no_call` method, that evaluates statement only if it\ndoes not contain any calls(done by examining the bytecode), thus preventing command injection exploit\n\nAdded simple unit test to check for that\n`torch.jit.annotations.get_signature` would not result in calling random\ncode.\n\nAlthough, this code path exists for Python-2 compatibility, and perhaps\nshould be simply removed.\n\nFixes https://github.com/pytorch/pytorch/issues/88868\n\nPull Request resolved: https://github.com/pytorch/pytorch/pull/89189\nApproved by: https://github.com/suo",
    "type_of_change": "Modification",
    "filename_of_changes": "annotations.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "12",
    "number_of_lines_deleted_vulnerable_to_cve": "2",
    "vulnerable_lines": [
        "// Line_Reference 157:         arg_ann = eval(arg_ann_str, {}, EvalEnv(rcb))  # type: ignore[arg-type] # noqa: P204",
        "// Line_Reference 165:         ret_ann = eval(ret_ann_str, {}, EvalEnv(rcb))  # type: ignore[arg-type] # noqa: P204"
    ]
}
