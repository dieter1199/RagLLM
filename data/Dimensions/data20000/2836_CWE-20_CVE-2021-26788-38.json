{
    "cve_id": "CVE-2021-26788",
    "cve_description": "Oryx Embedded CycloneTCP 1.7.6 to 2.0.0, fixed in 2.0.2, is affected by incorrect input validation, which may cause a denial of service (DoS). To exploit the vulnerability, an attacker needs to have TCP connectivity to the target system. Receiving a maliciously crafted TCP packet from an unauthenticated endpoint is sufficient to trigger the bug.",
    "cve_publish_date": "2021-03-08",
    "cwe_id": "CWE-20",
    "cwe_name": "Improper Input Validation",
    "cwe_description": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.",
    "commit_message": "Version 2.0.2",
    "type_of_change": "Modification",
    "filename_of_changes": "dm9000_driver.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "88",
    "number_of_lines_deleted_vulnerable_to_cve": "72",
    "vulnerable_lines": [
        "// Line_Reference 9:  * Copyright (C) 2010-2020 Oryx Embedded SARL. All rights reserved.",
        "// Line_Reference 28:  * @version 2.0.0",
        "// Line_Reference 77:    uint8_t chipRevision;",
        "// Line_Reference 108:    vendorId = (dm9000ReadReg(DM9000_REG_VIDH) << 8) | dm9000ReadReg(DM9000_REG_VIDL);",
        "// Line_Reference 109:    productId = (dm9000ReadReg(DM9000_REG_PIDH) << 8) | dm9000ReadReg(DM9000_REG_PIDL);",
        "// Line_Reference 110:    chipRevision = dm9000ReadReg(DM9000_REG_CHIPR);",
        "// Line_Reference 119:    if(chipRevision != DM9000A_CHIP_REV && chipRevision != DM9000B_CHIP_REV)",
        "// Line_Reference 125:    dm9000WriteReg(DM9000_REG_GPR, 0x00);",
        "// Line_Reference 130:    dm9000WriteReg(DM9000_REG_NCR, NCR_RST);",
        "// Line_Reference 132:    while((dm9000ReadReg(DM9000_REG_NCR) & NCR_RST) != 0)",
        "// Line_Reference 137:    dm9000WritePhyReg(DM9000_PHY_REG_BMCR, BMCR_RST);",
        "// Line_Reference 139:    while((dm9000ReadPhyReg(DM9000_PHY_REG_BMCR) & BMCR_RST) != 0)",
        "// Line_Reference 146:    TRACE_INFO(\"  CHIPR = 0x%02\" PRIX8 \"\\r\\n\", chipRevision);",
        "// Line_Reference 147:    TRACE_INFO(\"  PHYIDR1 = 0x%04\" PRIX16 \"\\r\\n\", dm9000ReadPhyReg(DM9000_PHY_REG_PHYIDR1));",
        "// Line_Reference 148:    TRACE_INFO(\"  PHYIDR2 = 0x%04\" PRIX16 \"\\r\\n\", dm9000ReadPhyReg(DM9000_PHY_REG_PHYIDR2));",
        "// Line_Reference 152:    dm9000WriteReg(DM9000_REG_NCR, DM9000_LBK_PHY);",
        "// Line_Reference 153:    dm9000WritePhyReg(DM9000_PHY_REG_BMCR, BMCR_LOOPBACK | BMCR_SPEED_SEL | BMCR_AN_EN | BMCR_DUPLEX_MODE);",
        "// Line_Reference 159:       dm9000WriteReg(DM9000_REG_PAR0 + i, interface->macAddr.b[i]);",
        "// Line_Reference 165:       dm9000WriteReg(DM9000_REG_MAR0 + i, 0x00);",
        "// Line_Reference 169:    dm9000WriteReg(DM9000_REG_MAR7, 0x80);",
        "// Line_Reference 172:    dm9000WriteReg(DM9000_REG_IMR, IMR_PAR);",
        "// Line_Reference 174:    dm9000WriteReg(DM9000_REG_NSR, NSR_WAKEST | NSR_TX2END | NSR_TX1END);",
        "// Line_Reference 176:    dm9000WriteReg(DM9000_REG_ISR, ISR_LNKCHG | ISR_UDRUN | ISR_ROO | ISR_ROS | ISR_PT | ISR_PR);",
        "// Line_Reference 178:    dm9000WriteReg(DM9000_REG_IMR, IMR_PAR | IMR_LNKCHGI | IMR_PTI | IMR_PRI);",
        "// Line_Reference 180:    dm9000WriteReg(DM9000_REG_RCR, RCR_DIS_LONG | RCR_DIS_CRC | RCR_RXEN);",
        "// Line_Reference 249:    status = dm9000ReadReg(DM9000_REG_ISR);",
        "// Line_Reference 252:    if((status & ISR_LNKCHG) != 0)",
        "// Line_Reference 255:       mask = dm9000ReadReg(DM9000_REG_IMR);",
        "// Line_Reference 257:       dm9000WriteReg(DM9000_REG_IMR, mask & ~IMR_LNKCHGI);",
        "// Line_Reference 266:    if((status & ISR_PT) != 0)",
        "// Line_Reference 269:       if(dm9000ReadReg(DM9000_REG_NSR) & (NSR_TX2END | NSR_TX1END))",
        "// Line_Reference 282:       dm9000WriteReg(DM9000_REG_ISR, ISR_PT);",
        "// Line_Reference 286:    if((status & ISR_PR) != 0)",
        "// Line_Reference 289:       mask = dm9000ReadReg(DM9000_REG_IMR);",
        "// Line_Reference 291:       dm9000WriteReg(DM9000_REG_IMR, mask & ~IMR_PRI);",
        "// Line_Reference 315:    status = dm9000ReadReg(DM9000_REG_ISR);",
        "// Line_Reference 318:    if((status & ISR_LNKCHG) != 0)",
        "// Line_Reference 321:       dm9000WriteReg(DM9000_REG_ISR, ISR_LNKCHG);",
        "// Line_Reference 323:       status = dm9000ReadReg(DM9000_REG_NSR);",
        "// Line_Reference 326:       if((status & NSR_LINKST) != 0)",
        "// Line_Reference 329:          if((status & NSR_SPEED) != 0)",
        "// Line_Reference 339:          status = dm9000ReadReg(DM9000_REG_NCR);",
        "// Line_Reference 342:          if((status & NCR_FDX) != 0)",
        "// Line_Reference 365:    if((status & ISR_PR) != 0)",
        "// Line_Reference 368:       dm9000WriteReg(DM9000_REG_ISR, ISR_PR);",
        "// Line_Reference 381:    dm9000WriteReg(DM9000_REG_IMR, IMR_PAR | IMR_LNKCHGI | IMR_PTI | IMR_PRI);",
        "// Line_Reference 422:    dm9000WriteReg(DM9000_REG_MWCMDX, 0);",
        "// Line_Reference 424:    DM9000_INDEX_REG = DM9000_REG_MWCMD;",
        "// Line_Reference 442:    dm9000WriteReg(DM9000_REG_TXPLL, LSB(length));",
        "// Line_Reference 443:    dm9000WriteReg(DM9000_REG_TXPLH, MSB(length));",
        "// Line_Reference 446:    dm9000WriteReg(DM9000_REG_ISR, ISR_PT);",
        "// Line_Reference 448:    dm9000WriteReg(DM9000_REG_TCR, TCR_TXREQ);",
        "// Line_Reference 478:    data = dm9000ReadReg(DM9000_REG_MRCMDX);",
        "// Line_Reference 481:    DM9000_INDEX_REG = DM9000_REG_MRCMDX1;",
        "// Line_Reference 489:       DM9000_INDEX_REG = DM9000_REG_MRCMD;",
        "// Line_Reference 502:       if((status & (RSR_LCS | RSR_RWTO | RSR_PLE | RSR_AE | RSR_CE | RSR_FOE)) == 0)",
        "// Line_Reference 603:       dm9000WriteReg(DM9000_REG_MAR0 + i, hashTable[i]);",
        "// Line_Reference 609:       dm9000ReadReg(DM9000_REG_MAR0), dm9000ReadReg(DM9000_REG_MAR1),",
        "// Line_Reference 610:       dm9000ReadReg(DM9000_REG_MAR2), dm9000ReadReg(DM9000_REG_MAR3),",
        "// Line_Reference 611:       dm9000ReadReg(DM9000_REG_MAR4), dm9000ReadReg(DM9000_REG_MAR5),",
        "// Line_Reference 612:       dm9000ReadReg(DM9000_REG_MAR6), dm9000ReadReg(DM9000_REG_MAR7));",
        "// Line_Reference 658:    dm9000WriteReg(DM9000_REG_EPAR, 0x40 | address);",
        "// Line_Reference 660:    dm9000WriteReg(DM9000_REG_EPDRL, LSB(data));",
        "// Line_Reference 661:    dm9000WriteReg(DM9000_REG_EPDRH, MSB(data));",
        "// Line_Reference 664:    dm9000WriteReg(DM9000_REG_EPCR, EPCR_EPOS | EPCR_ERPRW);",
        "// Line_Reference 666:    while((dm9000ReadReg(DM9000_REG_EPCR) & EPCR_ERRE) != 0)",
        "// Line_Reference 673:    dm9000WriteReg(DM9000_REG_EPCR, EPCR_EPOS);",
        "// Line_Reference 686:    dm9000WriteReg(DM9000_REG_EPAR, 0x40 | address);",
        "// Line_Reference 689:    dm9000WriteReg(DM9000_REG_EPCR, EPCR_EPOS | EPCR_ERPRR);",
        "// Line_Reference 691:    while((dm9000ReadReg(DM9000_REG_EPCR) & EPCR_ERRE) != 0)",
        "// Line_Reference 696:    dm9000WriteReg(DM9000_REG_EPCR, EPCR_EPOS);",
        "// Line_Reference 701:    return (dm9000ReadReg(DM9000_REG_EPDRH) << 8) | dm9000ReadReg(DM9000_REG_EPDRL);"
    ]
}
