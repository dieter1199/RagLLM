{
    "cve_id": "CVE-2022-28796",
    "cve_description": "jbd2_journal_wait_updates in fs/jbd2/transaction.c in the Linux kernel before 5.17.1 has a use-after-free caused by a transaction_t race condition.",
    "cve_publish_date": "2022-04-08",
    "cwe_id": "CWE-362",
    "cwe_name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
    "cwe_description": "The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.",
    "commit_message": "jbd2: fix use-after-free of transaction_t race\n\njbd2_journal_wait_updates() is called with j_state_lock held. But if\nthere is a commit in progress, then this transaction might get committed\nand freed via jbd2_journal_commit_transaction() ->\njbd2_journal_free_transaction(), when we release j_state_lock.\nSo check for journal->j_running_transaction everytime we release and\nacquire j_state_lock to avoid use-after-free issue.\n\nLink: https://lore.kernel.org/r/948c2fed518ae739db6a8f7f83f1d58b504f87d0.1644497105.git.ritesh.list@gmail.com\nFixes: 4f98186848707f53 (\"jbd2: refactor wait logic for transaction updates into a common function\")\nCc: stable@kernel.org\nReported-and-tested-by: syzbot+afa2ca5171d93e44b348@syzkaller.appspotmail.com\nReviewed-by: Jan Kara <jack@suse.cz>\nSigned-off-by: Ritesh Harjani <riteshh@linux.ibm.com>\nSigned-off-by: Theodore Ts'o <tytso@mit.edu>",
    "type_of_change": "Modification",
    "filename_of_changes": "transaction.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "25",
    "number_of_lines_deleted_vulnerable_to_cve": "16",
    "vulnerable_lines": [
        "// Line_Reference 845: \ttransaction_t *commit_transaction = journal->j_running_transaction;",
        "// Line_Reference 847: \tif (!commit_transaction)",
        "// Line_Reference 848: \t\treturn;",
        "// Line_Reference 850: \tspin_lock(&commit_transaction->t_handle_lock);",
        "// Line_Reference 851: \twhile (atomic_read(&commit_transaction->t_updates)) {",
        "// Line_Reference 852: \t\tDEFINE_WAIT(wait);",
        "// Line_Reference 855: \t\t\t\t\tTASK_UNINTERRUPTIBLE);",
        "// Line_Reference 856: \t\tif (atomic_read(&commit_transaction->t_updates)) {",
        "// Line_Reference 857: \t\t\tspin_unlock(&commit_transaction->t_handle_lock);",
        "// Line_Reference 858: \t\t\twrite_unlock(&journal->j_state_lock);",
        "// Line_Reference 859: \t\t\tschedule();",
        "// Line_Reference 860: \t\t\twrite_lock(&journal->j_state_lock);",
        "// Line_Reference 861: \t\t\tspin_lock(&commit_transaction->t_handle_lock);",
        "// Line_Reference 865: \tspin_unlock(&commit_transaction->t_handle_lock);",
        "// Line_Reference 880: \tDEFINE_WAIT(wait);",
        "// Line_Reference 881: "
    ]
}
