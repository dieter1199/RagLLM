{
    "cve_id": "CVE-2024-3149",
    "cve_description": "A Server-Side Request Forgery (SSRF) vulnerability exists in the upload link feature of mintplex-labs/anything-llm. This feature, intended for users with manager or admin roles, processes uploaded links through an internal Collector API using a headless browser. An attacker can exploit this by hosting a malicious website and using it to perform actions such as internal port scanning, accessing internal web applications not exposed externally, and interacting with the Collector API. This interaction can lead to unauthorized actions such as arbitrary file deletion and limited Local File Inclusion (LFI), including accessing NGINX access logs which may contain sensitive information.",
    "cve_publish_date": "2024-06-06",
    "cwe_id": "CWE-918",
    "cwe_name": "Server-Side Request Forgery (SSRF)",
    "cwe_description": "The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.",
    "commit_message": "RSA-Signing on server<->collector communication via API (#1005)\n\n* WIP integrity check between processes\r\n\r\n* Implement integrity checking on document processor payloads",
    "type_of_change": "Modification",
    "filename_of_changes": "index.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "73",
    "number_of_lines_deleted_vulnerable_to_cve": "60",
    "vulnerable_lines": [
        "// Line_Reference 27: app.post(\"/process\", async function (request, response) {",
        "// Line_Reference 28:   const { filename, options = {} } = reqBody(request);",
        "// Line_Reference 29:   try {",
        "// Line_Reference 30:     const targetFilename = path",
        "// Line_Reference 31:       .normalize(filename)",
        "// Line_Reference 32:       .replace(/^(\\.\\.(\\/|\\\\|$))+/, \"\");",
        "// Line_Reference 33:     const {",
        "// Line_Reference 34:       success,",
        "// Line_Reference 35:       reason,",
        "// Line_Reference 36:       documents = [],",
        "// Line_Reference 37:     } = await processSingleFile(targetFilename, options);",
        "// Line_Reference 38:     response",
        "// Line_Reference 39:       .status(200)",
        "// Line_Reference 40:       .json({ filename: targetFilename, success, reason, documents });",
        "// Line_Reference 41:   } catch (e) {",
        "// Line_Reference 42:     console.error(e);",
        "// Line_Reference 43:     response.status(200).json({",
        "// Line_Reference 44:       filename: filename,",
        "// Line_Reference 45:       success: false,",
        "// Line_Reference 46:       reason: \"A processing error occurred.\",",
        "// Line_Reference 47:       documents: [],",
        "// Line_Reference 48:     });",
        "// Line_Reference 50:   return;",
        "// Line_Reference 51: });",
        "// Line_Reference 53: app.post(\"/process-link\", async function (request, response) {",
        "// Line_Reference 54:   const { link } = reqBody(request);",
        "// Line_Reference 55:   try {",
        "// Line_Reference 56:     const { success, reason, documents = [] } = await processLink(link);",
        "// Line_Reference 57:     response.status(200).json({ url: link, success, reason, documents });",
        "// Line_Reference 58:   } catch (e) {",
        "// Line_Reference 59:     console.error(e);",
        "// Line_Reference 60:     response.status(200).json({",
        "// Line_Reference 61:       url: link,",
        "// Line_Reference 62:       success: false,",
        "// Line_Reference 63:       reason: \"A processing error occurred.\",",
        "// Line_Reference 64:       documents: [],",
        "// Line_Reference 65:     });",
        "// Line_Reference 67:   return;",
        "// Line_Reference 68: });",
        "// Line_Reference 70: app.post(\"/process-raw-text\", async function (request, response) {",
        "// Line_Reference 71:   const { textContent, metadata } = reqBody(request);",
        "// Line_Reference 72:   try {",
        "// Line_Reference 73:     const {",
        "// Line_Reference 74:       success,",
        "// Line_Reference 75:       reason,",
        "// Line_Reference 76:       documents = [],",
        "// Line_Reference 77:     } = await processRawText(textContent, metadata);",
        "// Line_Reference 78:     response",
        "// Line_Reference 79:       .status(200)",
        "// Line_Reference 80:       .json({ filename: metadata.title, success, reason, documents });",
        "// Line_Reference 81:   } catch (e) {",
        "// Line_Reference 82:     console.error(e);",
        "// Line_Reference 83:     response.status(200).json({",
        "// Line_Reference 84:       filename: metadata?.title || \"Unknown-doc.txt\",",
        "// Line_Reference 85:       success: false,",
        "// Line_Reference 86:       reason: \"A processing error occurred.\",",
        "// Line_Reference 87:       documents: [],",
        "// Line_Reference 88:     });",
        "// Line_Reference 90:   return;",
        "// Line_Reference 91: });"
    ]
}
