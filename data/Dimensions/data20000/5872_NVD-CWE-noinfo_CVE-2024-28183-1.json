{
    "cve_id": "CVE-2024-28183",
    "cve_description": "ESP-IDF is the development framework for Espressif SoCs supported on Windows, Linux and macOS. A Time-of-Check to Time-of-Use (TOCTOU) vulnerability was discovered in the implementation of the ESP-IDF bootloader which could allow an attacker with physical access to flash of the device to bypass anti-rollback protection. Anti-rollback prevents rollback to application with security version lower than one programmed in eFuse of chip. This attack can allow to boot past (passive) application partition having lower security version of the same device even in the presence of the flash encryption scheme. The attack requires carefully modifying the flash contents after the anti-rollback checks have been performed by the bootloader (before loading the application). The vulnerability is fixed in 4.4.7 and 5.2.1.",
    "cve_publish_date": "2024-03-25",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "fix(ota): additional checks for secure version in anti-rollback case\n\nSome additional checks related to secure version of the application in\nanti-rollback case have been added to avoid any attempts to boot lower\nsecurity version but valid application (e.g., passive partition image).\n\n- Read secure_version under sha256 protection\n\n- First check has been added in the bootloader to ensure correct secure\n  version after application verification and loading stage. This check\n  happens before setting up the flash cache mapping and handling over\n  the final control to application. This check ensures that application\n  was not swapped (e.g., to lower security version but valid image) just\n  before the load stage in bootloader.\n\n- Second check has been added in the application startup code to ensure\n  that currently booting app has higher security version than the one\n  programmed in the eFuse for anti-rollback scenario. This will ensure\n  that only the legit application boots-up on the device for\n  anti-rollback case.",
    "type_of_change": "Modification",
    "filename_of_changes": "esp_image_format.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "69",
    "number_of_lines_deleted_vulnerable_to_cve": "7",
    "vulnerable_lines": [
        "// Line_Reference 2:  * SPDX-FileCopyrightText: 2015-2023 Espressif Systems (Shanghai) CO LTD",
        "// Line_Reference 79: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
        "// Line_Reference 82: static esp_err_t process_segment_data(intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum);",
        "// Line_Reference 512:         CHECK_ERR(process_segment(i, next_addr, header, silent, do_load, sha_handle, checksum));",
        "// Line_Reference 533: static esp_err_t process_segment(int index, uint32_t flash_addr, esp_image_segment_header_t *header, bool silent, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum)",
        "// Line_Reference 591:         CHECK_ERR(process_segment_data(load_addr, data_addr, data_len, do_load, sha_handle, checksum));",
        "// Line_Reference 606: static esp_err_t process_segment_data(intptr_t load_addr, uint32_t data_addr, uint32_t data_len, bool do_load, bootloader_sha256_handle_t sha_handle, uint32_t *checksum)"
    ]
}
