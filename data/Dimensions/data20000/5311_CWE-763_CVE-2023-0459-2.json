{
    "cve_id": "CVE-2023-0459",
    "cve_description": "Copy_from_user on 64-bit versions of the Linux kernel does not implement the __uaccess_begin_nospec allowing a user to bypass the \"access_ok\" check and pass a kernel pointer to copy_from_user(). This would allow an attacker to leak information. We recommend upgrading beyond commitÂ 74e19ef0ff8061ef55957c3abd71614ef0f42f47",
    "cve_publish_date": "2023-05-25",
    "cwe_id": "CWE-763",
    "cwe_name": "Release of Invalid Pointer or Reference",
    "cwe_description": "The product attempts to return a memory resource to the system, but it calls the wrong release function or calls the appropriate release function incorrectly.",
    "commit_message": "x86: get rid of small constant size cases in raw_copy_{to,from}_user()\n\nVery few call sites where that would be triggered remain, and none\nof those is anywhere near hot enough to bother.\n\nSigned-off-by: Al Viro <viro@zeniv.linux.org.uk>",
    "type_of_change": "Modification",
    "filename_of_changes": "uaccess_32.h",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "0",
    "number_of_lines_deleted_vulnerable_to_cve": "27",
    "vulnerable_lines": [
        "// Line_Reference 26: \tif (__builtin_constant_p(n)) {",
        "// Line_Reference 27: \t\tunsigned long ret;",
        "// Line_Reference 28: ",
        "// Line_Reference 29: \t\tswitch (n) {",
        "// Line_Reference 30: \t\tcase 1:",
        "// Line_Reference 31: \t\t\tret = 0;",
        "// Line_Reference 32: \t\t\t__uaccess_begin_nospec();",
        "// Line_Reference 33: \t\t\t__get_user_asm_nozero(*(u8 *)to, from, ret,",
        "// Line_Reference 34: \t\t\t\t\t      \"b\", \"b\", \"=q\", 1);",
        "// Line_Reference 35: \t\t\t__uaccess_end();",
        "// Line_Reference 36: \t\t\treturn ret;",
        "// Line_Reference 37: \t\tcase 2:",
        "// Line_Reference 38: \t\t\tret = 0;",
        "// Line_Reference 39: \t\t\t__uaccess_begin_nospec();",
        "// Line_Reference 40: \t\t\t__get_user_asm_nozero(*(u16 *)to, from, ret,",
        "// Line_Reference 41: \t\t\t\t\t      \"w\", \"w\", \"=r\", 2);",
        "// Line_Reference 42: \t\t\t__uaccess_end();",
        "// Line_Reference 43: \t\t\treturn ret;",
        "// Line_Reference 44: \t\tcase 4:",
        "// Line_Reference 45: \t\t\tret = 0;",
        "// Line_Reference 46: \t\t\t__uaccess_begin_nospec();",
        "// Line_Reference 47: \t\t\t__get_user_asm_nozero(*(u32 *)to, from, ret,",
        "// Line_Reference 48: \t\t\t\t\t      \"l\", \"k\", \"=r\", 4);",
        "// Line_Reference 49: \t\t\t__uaccess_end();",
        "// Line_Reference 50: \t\t\treturn ret;",
        "// Line_Reference 51: \t\t}",
        "// Line_Reference 52: \t}"
    ]
}
