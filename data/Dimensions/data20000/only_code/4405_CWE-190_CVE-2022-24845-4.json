from vyper.codegen.core import get_element_ptr, getpos, make_setter
from vyper.codegen.types.types import (
BaseType,
ByteArrayLike,
DArrayType,
SArrayType,
TupleLike,
TupleType,
)
from vyper.exceptions import CompilerPanic
def _should_decode(typ):
# either a basetype which needs to be clamped
# or a complex type which contains something that
# needs to be clamped.
if isinstance(typ, BaseType):
return typ.typ not in ("int256", "uint256", "bytes32")
if isinstance(typ, (ByteArrayLike, DArrayType)):
return True
if isinstance(typ, SArrayType):
return _should_decode(typ.subtype)
if isinstance(typ, TupleLike):
return any(_should_decode(t) for t in typ.tuple_members())
raise CompilerPanic(f"_should_decode({typ})")  # pragma: notest
if _should_decode(arg.typ):
