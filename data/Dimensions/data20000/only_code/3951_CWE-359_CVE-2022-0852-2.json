while True and attempt < MAX_NUM_OF_ATTEMPTS_TO_SUBSCRIBE:
registration_cmd = get_registration_cmd()
output, ret_code = call_registration_cmd(registration_cmd)
def get_registration_cmd():
"""Build a command for subscription-manager for registering the system."""
loggerinst.info("Building subscription-manager command ... ")
registration_cmd = ["subscription-manager", "register", "--force"]
loggerinst.info("Checking for activation key ...")
if tool_opts.activation_key:
# Activation key has been passed
# -> username/password not required
# -> organization required
loggerinst.info("    ... activation key detected: %s" % tool_opts.activation_key)
# TODO: Parse the output of 'subscription-manager orgs' and let the
# user choose from the available organizations. If there's just one,
# pick it automatically.
# Organization is required when activation key is used
loggerinst.info("    ... org detected")
org = tool_opts.org
while not org:
org = utils.prompt_user("Organization: ")
registration_cmd.extend(("--activationkey=%s" % tool_opts.activation_key, "--org=%s" % org))
else:
loggerinst.info("    ... activation key not found, username and password required")
if tool_opts.username:
loggerinst.info("    ... username detected")
username = tool_opts.username
while not username:
username = utils.prompt_user("Username: ")
if tool_opts.password:
loggerinst.info("    ... password detected")
password = tool_opts.password
while not password:
password = utils.prompt_user("Password: ", password=True)
registration_cmd.extend(("--username=%s" % username, "--password=%s" % password))
if tool_opts.serverurl:
loggerinst.debug("    ... using custom RHSM URL")
registration_cmd.append("--serverurl=%s" % tool_opts.serverurl)
return registration_cmd
def call_registration_cmd(registration_cmd):
"""Wrapper for run_subprocess that avoids leaking password in the log."""
loggerinst.debug("Calling command '%s'" % hide_password(" ".join(registration_cmd)))
return utils.run_subprocess(registration_cmd, print_cmd=False)
def hide_password(cmd):
"""Replace plaintext password with asterisks."""
return re.sub('--password=".*?"', '--password="*****"', cmd)
