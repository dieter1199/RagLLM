this.addMenuItems(menu, ['delete', '-', 'cut', 'copy', '-', 'duplicate'], null, evt);
if (this.editorUi.editor.graph.getSelectionCount() == 1)
{
this.addMenuItems(menu, ['-', 'setAsDefaultStyle'], null, evt);
}
else if (this.editorUi.editor.graph.isSelectionEmpty())
this.addMenuItems(menu, ['-', 'clearDefaultStyle'], null, evt);
var graph = this.editorUi.editor.graph;
if (graph.getEditableCells(graph.getSelectionCells()).length > 0)
this.addMenuItems(menu, ['-', 'toFront', 'toBack'], null, evt);
if (graph.getSelectionCount() == 1)
this.addMenuItems(menu, ['bringForward', 'sendBackward'], null, evt);
}
if (graph.getSelectionCount() > 1)
{
this.addMenuItems(menu, ['-', 'group'], null, evt);
}
else if (graph.getSelectionCount() == 1 && !graph.getModel().isEdge(cell) &&
!graph.isSwimlane(cell) && graph.getModel().getChildCount(cell) > 0 &&
graph.isCellEditable(cell))
{
this.addMenuItems(menu, ['-', 'ungroup'], null, evt);
if (graph.getSelectionCount() == 1 && graph.getModel().isEdge(cell))
this.addMenuItem(menu, 'turn', null, evt, null, mxResources.get('reverse'));
if (graph.getSelectionCount() == 1 && (hasWaypoints || (graph.getModel().isVertex(cell) &&
var graph = this.editorUi.editor.graph;
var state = graph.view.getState(cell);
this.addMenuItems(menu, ['-', 'editStyle', 'editData', 'editLink'], parent, evt);
// Shows edit image action if there is an image in the style
if (graph.getModel().isVertex(cell) && mxUtils.getValue(state.style, mxConstants.STYLE_IMAGE, null) != null)
menu.addSeparator();
this.addMenuItem(menu, 'image', parent, evt).firstChild.nextSibling.innerHTML = mxResources.get('editImage') + '...';
this.addMenuItem(menu, 'crop', parent, evt);
}
if ((graph.getModel().isVertex(cell) && graph.getModel().getChildCount(cell) == 0)
|| graph.isContainer(cell)) //Allow vertex only excluding group (but allowing container [e.g, swimlanes])
{
this.addMenuItem(menu, 'editConnectionPoints', parent, evt);
