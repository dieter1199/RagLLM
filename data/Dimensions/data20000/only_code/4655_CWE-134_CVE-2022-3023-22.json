"database/sql"
"database/sql/driver"
"math/rand"
"strconv"
tmysql "github.com/pingcap/tidb/errno"
func TestToDSN(t *testing.T) {
param := common.MySQLConnectParam{
Host:             "127.0.0.1",
Port:             4000,
User:             "root",
Password:         "123456",
SQLMode:          "strict",
MaxAllowedPacket: 1234,
TLS:              "cluster",
Vars: map[string]string{
"tidb_distsql_scan_concurrency": "1",
},
}
require.Equal(t, "root:123456@tcp(127.0.0.1:4000)/?charset=utf8mb4&sql_mode='strict'&maxAllowedPacket=1234&tls=cluster&tidb_distsql_scan_concurrency='1'", param.ToDSN())
param.Host = "::1"
require.Equal(t, "root:123456@tcp([::1]:4000)/?charset=utf8mb4&sql_mode='strict'&maxAllowedPacket=1234&tls=cluster&tidb_distsql_scan_concurrency='1'", param.ToDSN())
}
type mockDriver struct {
driver.Driver
plainPsw string
}
func (m *mockDriver) Open(dsn string) (driver.Conn, error) {
cfg, err := mysql.ParseDSN(dsn)
if err != nil {
return nil, err
}
accessDenied := cfg.Passwd != m.plainPsw
return &mockConn{accessDenied: accessDenied}, nil
}
type mockConn struct {
driver.Conn
driver.Pinger
accessDenied bool
}
func (c *mockConn) Ping(ctx context.Context) error {
if c.accessDenied {
return &mysql.MySQLError{Number: tmysql.ErrAccessDenied, Message: "access denied"}
}
return nil
}
func (c *mockConn) Close() error {
return nil
}
driverName := "mysql-mock-" + strconv.Itoa(rand.Int())
sql.Register(driverName, &mockDriver{plainPsw: plainPsw})
"github.com/pingcap/tidb/br/pkg/lightning/common/MockMySQLDriver",
fmt.Sprintf("return(\"%s\")", driverName)))
require.NoError(t, failpoint.Disable("github.com/pingcap/tidb/br/pkg/lightning/common/MockMySQLDriver"))
db, err := param.Connect()
require.NoError(t, db.Close())
db, err = param.Connect()
require.NoError(t, db.Close())
