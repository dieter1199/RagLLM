struct hostent *he;
TIMEVAL Timeout;
Timeout.tv_sec = timeout;
Timeout.tv_usec = 0;
s->fd = socket (AF_INET, SOCK_STREAM, 0);
if (s->fd == R_INVALID_SOCKET) {
return false;
}
unsigned long iMode = 1;
int iResult = ioctlsocket (s->fd, FIONBIO, &iMode);
if (iResult != NO_ERROR) {
eprintf ("ioctlsocket error: %d\n", iResult);
}
memset (&sa, 0, sizeof (sa));
sa.sin_family = AF_INET;
he = (struct hostent *)gethostbyname (host);
if (he == (struct hostent*)0) {
#ifdef _MSC_VER
closesocket (s->fd);
#else
close (s->fd);
return false;
}
sa.sin_addr = *((struct in_addr *)he->h_addr);
s->port = r_socket_port_by_name (port);
s->proto = proto;
sa.sin_port = htons (s->port);
if (!connect (s->fd, (const struct sockaddr*)&sa, sizeof (struct sockaddr))) {
#ifdef _MSC_VER
closesocket (s->fd);
#else
close (s->fd);
#endif
return false;
}
iMode = 0;
iResult = ioctlsocket (s->fd, FIONBIO, &iMode);
if (iResult != NO_ERROR) {
eprintf ("ioctlsocket error: %d\n", iResult);
}
if (timeout > 0) {
r_socket_block_time (s, 1, timeout, 0);
}
fd_set Write, Err;
FD_ZERO (&Write);
FD_ZERO (&Err);
FD_SET (s->fd, &Write);
FD_SET (s->fd, &Err);
select (0, NULL, &Write, &Err, &Timeout);
if (FD_ISSET (s->fd, &Write)) {
return true;
}
return false;
#elif __UNIX__
struct addrinfo hints = {0};
struct timeval tv;
tv.tv_sec = timeout;
tv.tv_usec = 0;
FD_ZERO(&wfds);
FD_SET(s->fd, &wfds);
return true;
#endif
r_socket_free (s);
if (SSL_connect (s->sfd) != 1) {
r_socket_free (s);
struct timeval t;
t.tv_sec = timeout;
t.tv_usec = 0;
struct timeval tv = {0};
tv.tv_sec = sec;
tv.tv_usec = usec;
// XXX: rewrite it to use select //
#if __UNIX__
//int msecs = (1000 * secs) + (usecs / 1000);
int msecs = (usecs / 1000);
struct pollfd fds[1];
fds[0].fd = s->fd;
fds[0].events = POLLIN | POLLPRI;
fds[0].revents = POLLNVAL | POLLHUP | POLLERR;
return poll ((struct pollfd *)&fds, 1, msecs);
#elif __WINDOWS__
struct timeval tv;
tv.tv_sec = secs;
tv.tv_usec = usecs;
#else
return true; /* always ready if unknown */
#endif
#if __WINDOWS__
rep:
{
int ret = recv (s->fd, (void *)buf, len, 0);
if (ret == -1) {
goto rep;
}
return ret;
}
#else
#endif
