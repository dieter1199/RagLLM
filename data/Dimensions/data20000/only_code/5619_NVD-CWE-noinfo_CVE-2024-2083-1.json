def _sanitize_potential_path(potential_path: Any) -> Any:
"""Sanitizes the input if it is a path.
If the input is a **remote** path, this function replaces backslash path
separators by forward slashes.
potential_path: Value that potentially refers to a (remote) path.
The original input or a sanitized version of it in case of a remote
path.
if isinstance(potential_path, bytes):
path = fileio.convert_to_str(potential_path)
elif isinstance(potential_path, str):
path = potential_path
else:
# Neither string nor bytes, this is not a path
return potential_path
if io_utils.is_remote(path):
# If we have a remote path, replace windows path separators with
# slashes
import ntpath
import posixpath
path = path.replace(ntpath.sep, posixpath.sep)
return path
def _sanitize_paths(_func: Callable[..., Any]) -> Callable[..., Any]:
"""Sanitizes path inputs before calling the original function.
Args:
_func: The function for which to sanitize the inputs.
Returns:
Function that calls the input function with sanitized path inputs.
"""
def inner_function(*args: Any, **kwargs: Any) -> Any:
"""Inner function.
args = tuple(_sanitize_potential_path(arg) for arg in args)
key: _sanitize_potential_path(value)
return _func(*args, **kwargs)
return inner_function
self.__class__.__name__,
(BaseFilesystem,),
{
"SUPPORTED_SCHEMES": self.config.SUPPORTED_SCHEMES,
"open": staticmethod(_sanitize_paths(self.open)),
"copyfile": staticmethod(_sanitize_paths(self.copyfile)),
"exists": staticmethod(_sanitize_paths(self.exists)),
"glob": staticmethod(_sanitize_paths(self.glob)),
"isdir": staticmethod(_sanitize_paths(self.isdir)),
"listdir": staticmethod(_sanitize_paths(self.listdir)),
"makedirs": staticmethod(_sanitize_paths(self.makedirs)),
"mkdir": staticmethod(_sanitize_paths(self.mkdir)),
"remove": staticmethod(_sanitize_paths(self.remove)),
"rename": staticmethod(_sanitize_paths(self.rename)),
"rmtree": staticmethod(_sanitize_paths(self.rmtree)),
"size": staticmethod(_sanitize_paths(self.size)),
"stat": staticmethod(_sanitize_paths(self.stat)),
"walk": staticmethod(_sanitize_paths(self.walk)),
},
