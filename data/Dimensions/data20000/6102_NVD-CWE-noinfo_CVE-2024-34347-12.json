{
    "cve_id": "CVE-2024-34347",
    "cve_description": "@hoppscotch/cli is a CLI to run Hoppscotch Test Scripts in CI environments. Prior to 0.8.0, the @hoppscotch/js-sandbox package provides a Javascript sandbox that uses the Node.js vm module. However, the vm module is not safe for sandboxing untrusted Javascript code. This is because code inside the vm context can break out if it can get a hold of any reference to an object created outside of the vm. In the case of @hoppscotch/js-sandbox, multiple references to external objects are passed into the vm context to allow pre-request scripts interactions with environment variables and more. But this also allows the pre-request script to escape the sandbox. This vulnerability is fixed in 0.8.0.",
    "cve_publish_date": "2024-05-08",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "chore: migrate `Node.js` implementation for `js-sandbox` to `isolated-vm` (#3973)\n\nCo-authored-by: Andrew Bastin <andrewbastin.k@gmail.com>",
    "type_of_change": "ModificationType.RENAME",
    "filename_of_changes": "secret-envs-coll.json",
    "code_language": "TypeScript",
    "number_of_lines_added_for_mitigation": "51",
    "number_of_lines_deleted_vulnerable_to_cve": "21",
    "vulnerable_lines": [
        "// Line_Reference 8:       \"auth\": { \"authType\": \"none\", \"authActive\": true },",
        "// Line_Reference 9:       \"body\": { \"body\": null, \"contentType\": null },",
        "// Line_Reference 21:       \"endpoint\": \"<<baseURL>>/headers\",",
        "// Line_Reference 22:       \"testScript\": \"pw.test(\\\"Successfully parses secret variable holding the header value\\\", () => {\\n    const secretHeaderValue = pw.env.get(\\\"secretHeaderValue\\\")\\n    pw.expect(secretHeaderValue).toBe(\\\"secret-header-value\\\")\\n    \\n    if (secretHeaderValue) {\\n      pw.expect(pw.response.body.headers[\\\"Secret-Header-Key\\\"]).toBe(secretHeaderValue)\\n    }\\n\\n    pw.expect(pw.env.get(\\\"secretHeaderValueFromPreReqScript\\\")).toBe(\\\"secret-header-value\\\")\\n})\",",
        "// Line_Reference 27:       \"auth\": { \"authType\": \"none\", \"authActive\": true },",
        "// Line_Reference 37:       \"endpoint\": \"<<baseURL>>/post\",",
        "// Line_Reference 38:       \"testScript\": \"pw.test(\\\"Successfully parses secret variable holding the request body value\\\", () => {\\n    const secretBodyValue = pw.env.get(\\\"secretBodyValue\\\")\\n    pw.expect(secretBodyValue).toBe(\\\"secret-body-value\\\")\\n  \\n    if (secretBodyValue) {\\n      pw.expect(pw.response.body.json.secretBodyKey).toBe(secretBodyValue)\\n    }\\n\\n    pw.expect(pw.env.get(\\\"secretBodyValueFromPreReqScript\\\")).toBe(\\\"secret-body-value\\\")\\n})\",",
        "// Line_Reference 43:       \"auth\": { \"authType\": \"none\", \"authActive\": true },",
        "// Line_Reference 44:       \"body\": { \"body\": null, \"contentType\": null },",
        "// Line_Reference 56:       \"endpoint\": \"<<baseURL>>/get\",",
        "// Line_Reference 68:       \"body\": { \"body\": null, \"contentType\": null },",
        "// Line_Reference 74:       \"endpoint\": \"<<baseURL>>/basic-auth/<<secretBasicAuthUsername>>/<<secretBasicAuthPassword>>\",",
        "// Line_Reference 75:       \"testScript\": \"pw.test(\\\"Successfully parses secret variables holding basic auth credentials\\\", () => {\\n\\tconst secretBasicAuthUsername = pw.env.get(\\\"secretBasicAuthUsername\\\")\\n  \\tconst secretBasicAuthPassword = pw.env.get(\\\"secretBasicAuthPassword\\\")\\n\\n    pw.expect(secretBasicAuthUsername).toBe(\\\"test-user\\\")\\n    pw.expect(secretBasicAuthPassword).toBe(\\\"test-pass\\\")\\n\\n    if (secretBasicAuthUsername && secretBasicAuthPassword) {\\n      const { authenticated, user } = pw.response.body\\n      pw.expect(authenticated).toBe(true)\\n      pw.expect(user).toBe(secretBasicAuthUsername)\\n    }\\n});\",",
        "// Line_Reference 87:       \"body\": { \"body\": null, \"contentType\": null },",
        "// Line_Reference 93:       \"endpoint\": \"<<baseURL>>/bearer\",",
        "// Line_Reference 94:       \"testScript\": \"pw.test(\\\"Successfully parses secret variable holding the bearer token\\\", () => {\\n    const secretBearerToken = pw.env.get(\\\"secretBearerToken\\\")\\n  const preReqSecretBearerToken = pw.env.get(\\\"preReqSecretBearerToken\\\")\\n\\n    pw.expect(secretBearerToken).toBe(\\\"test-token\\\")\\n\\n    if (secretBearerToken) { \\n      pw.expect(pw.response.body.token).toBe(secretBearerToken)\\n      pw.expect(preReqSecretBearerToken).toBe(\\\"test-token\\\")\\n    }\\n});\",",
        "// Line_Reference 99:       \"auth\": { \"authType\": \"none\", \"authActive\": true },",
        "// Line_Reference 100:       \"body\": { \"body\": null, \"contentType\": null },",
        "// Line_Reference 106:       \"endpoint\": \"<<baseURL>>\",",
        "// Line_Reference 111:   \"auth\": { \"authType\": \"inherit\", \"authActive\": false },",
        "// Line_Reference 113: }"
    ]
}
