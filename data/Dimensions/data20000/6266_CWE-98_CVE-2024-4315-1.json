{
    "cve_id": "CVE-2024-4315",
    "cve_description": "parisneo/lollms version 9.5 is vulnerable to Local File Inclusion (LFI) attacks due to insufficient path sanitization. The `sanitize_path_from_endpoint` function fails to properly sanitize Windows-style paths (backward slash `\\`), allowing attackers to perform directory traversal attacks on Windows systems. This vulnerability can be exploited through various routes, including `personalities` and `/del_preset`, to read or delete any file on the Windows filesystem, compromising the system's availability.",
    "cve_publish_date": "2024-06-12",
    "cwe_id": "CWE-98",
    "cwe_name": "Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')",
    "cwe_description": "The PHP application receives input from an upstream component, but it does not restrict or incorrectly restricts the input before its usage in \"require,\" \"include,\" or similar functions.",
    "commit_message": "updated security",
    "type_of_change": "Modification",
    "filename_of_changes": "security.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "12",
    "number_of_lines_deleted_vulnerable_to_cve": "9",
    "vulnerable_lines": [
        "// Line_Reference 152:     Sanitize a given file path from an endpoint by checking for potentially dangerous patterns and unauthorized characters.",
        "// Line_Reference 157:     error_text (str, optional): The error message to display if a path traversal or unauthorized character is detected. Default is \"A suspected LFI attack detected. The path sent to the server has suspicious elements in it!\".",
        "// Line_Reference 158:     exception_text (str, optional): The exception message to display if an absolute path or invalid character is detected. Default is \"Invalid path!\".",
        "// Line_Reference 167: ",
        "// Line_Reference 168:     Note:",
        "// Line_Reference 169:     -----",
        "// Line_Reference 170:     This function checks for patterns like \"....\" and multiple forward slashes. It also checks for unauthorized punctuation characters, excluding the dot (.) character.",
        "// Line_Reference 188:         ASCIIColors.error(error_text)",
        "// Line_Reference 189:         raise HTTPException(status_code=400, detail=exception_text)"
    ]
}
