{
    "cve_id": "CVE-2013-0871",
    "cve_description": "Race condition in the ptrace functionality in the Linux kernel before 3.7.5 allows local users to gain privileges via a PTRACE_SETREGS ptrace system call in a crafted application, as demonstrated by ptrace_death.",
    "cve_publish_date": "2013-02-18",
    "cwe_id": "CWE-362",
    "cwe_name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
    "cwe_description": "The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.",
    "commit_message": "ptrace: ensure arch_ptrace/ptrace_request can never race with SIGKILL\n\nputreg() assumes that the tracee is not running and pt_regs_access() can\nsafely play with its stack.  However a killed tracee can return from\nptrace_stop() to the low-level asm code and do RESTORE_REST, this means\nthat debugger can actually read/modify the kernel stack until the tracee\ndoes SAVE_REST again.\n\nset_task_blockstep() can race with SIGKILL too and in some sense this\nrace is even worse, the very fact the tracee can be woken up breaks the\nlogic.\n\nAs Linus suggested we can clear TASK_WAKEKILL around the arch_ptrace()\ncall, this ensures that nobody can ever wakeup the tracee while the\ndebugger looks at it.  Not only this fixes the mentioned problems, we\ncan do some cleanups/simplifications in arch_ptrace() paths.\n\nProbably ptrace_unfreeze_traced() needs more callers, for example it\nmakes sense to make the tracee killable for oom-killer before\naccess_process_vm().\n\nWhile at it, add the comment into may_ptrace_stop() to explain why\nptrace_stop() still can't rely on SIGKILL and signal_pending_state().\n\nReported-by: Salman Qazi <sqazi@google.com>\nReported-by: Suleiman Souhlal <suleiman@google.com>\nSuggested-by: Linus Torvalds <torvalds@linux-foundation.org>\nSigned-off-by: Oleg Nesterov <oleg@redhat.com>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "ptrace.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "54",
    "number_of_lines_deleted_vulnerable_to_cve": "10",
    "vulnerable_lines": [
        "// Line_Reference 154: \tif ((child->ptrace & PT_PTRACED) && child->parent == current) {",
        "// Line_Reference 159: \t\tspin_lock_irq(&child->sighand->siglock);",
        "// Line_Reference 160: \t\tWARN_ON_ONCE(task_is_stopped(child));",
        "// Line_Reference 161: \t\tif (ignore_state || (task_is_traced(child) &&",
        "// Line_Reference 162: \t\t\t\t     !(child->jobctl & JOBCTL_LISTENING)))",
        "// Line_Reference 164: \t\tspin_unlock_irq(&child->sighand->siglock);",
        "// Line_Reference 168: \tif (!ret && !ignore_state)",
        "// Line_Reference 169: \t\tret = wait_task_inactive(child, TASK_TRACED) ? 0 : -ESRCH;",
        "// Line_Reference 171: \t/* All systems go.. */",
        "// Line_Reference 1042: \tif (!ret)"
    ]
}
