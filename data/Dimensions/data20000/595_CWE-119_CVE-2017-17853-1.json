{
    "cve_id": "CVE-2017-17853",
    "cve_description": "kernel/bpf/verifier.c in the Linux kernel through 4.14.8 allows local users to cause a denial of service (memory corruption) or possibly have unspecified other impact by leveraging incorrect BPF_RSH signed bounds calculations.",
    "cve_publish_date": "2017-12-27",
    "cwe_id": "CWE-119",
    "cwe_name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
    "cwe_description": "The product performs operations on a memory buffer, but it reads from or writes to a memory location outside the buffer's intended boundary. This may result in read or write operations on unexpected memory locations that could be linked to other variables, data structures, or internal program data.",
    "commit_message": "bpf/verifier: fix bounds calculation on BPF_RSH\n\nIncorrect signed bounds were being computed.\nIf the old upper signed bound was positive and the old lower signed bound was\nnegative, this could cause the new upper signed bound to be too low,\nleading to security issues.\n\nFixes: b03c9f9fdc37 (\"bpf/verifier: track signed and unsigned min/max values\")\nReported-by: Jann Horn <jannh@google.com>\nSigned-off-by: Edward Cree <ecree@solarflare.com>\nAcked-by: Alexei Starovoitov <ast@kernel.org>\n[jannh@google.com: changed description to reflect bug impact]\nSigned-off-by: Jann Horn <jannh@google.com>\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>",
    "type_of_change": "Modification",
    "filename_of_changes": "verifier.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "16",
    "number_of_lines_deleted_vulnerable_to_cve": "14",
    "vulnerable_lines": [
        "// Line_Reference 2193: \t\t/* BPF_RSH is an unsigned shift, so make the appropriate casts */",
        "// Line_Reference 2194: \t\tif (dst_reg->smin_value < 0) {",
        "// Line_Reference 2195: \t\t\tif (umin_val) {",
        "// Line_Reference 2196: \t\t\t\t/* Sign bit will be cleared */",
        "// Line_Reference 2197: \t\t\t\tdst_reg->smin_value = 0;",
        "// Line_Reference 2198: \t\t\t} else {",
        "// Line_Reference 2199: \t\t\t\t/* Lost sign bit information */",
        "// Line_Reference 2200: \t\t\t\tdst_reg->smin_value = S64_MIN;",
        "// Line_Reference 2201: \t\t\t\tdst_reg->smax_value = S64_MAX;",
        "// Line_Reference 2202: \t\t\t}",
        "// Line_Reference 2203: \t\t} else {",
        "// Line_Reference 2204: \t\t\tdst_reg->smin_value =",
        "// Line_Reference 2205: \t\t\t\t(u64)(dst_reg->smin_value) >> umax_val;",
        "// Line_Reference 2206: \t\t}"
    ]
}
