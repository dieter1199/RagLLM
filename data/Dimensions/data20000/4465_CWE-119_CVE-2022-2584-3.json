{
    "cve_id": "CVE-2022-2584",
    "cve_description": "The dag-pb codec can panic when decoding invalid blocks.",
    "cve_publish_date": "2022-12-27",
    "cwe_id": "CWE-119",
    "cwe_name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
    "cwe_description": "The product performs operations on a memory buffer, but it reads from or writes to a memory location outside the buffer's intended boundary. This may result in read or write operations on unexpected memory locations that could be linked to other variables, data structures, or internal program data.",
    "commit_message": "fix: use protowire for Links bytes decoding",
    "type_of_change": "Modification",
    "filename_of_changes": "compat_test.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "32",
    "number_of_lines_deleted_vulnerable_to_cve": "16",
    "vulnerable_lines": [
        "// Line_Reference 214: \t\tif tc.encodeError != \"\" {",
        "// Line_Reference 215: \t\t\tif err != nil {",
        "// Line_Reference 216: \t\t\t\tif !strings.Contains(err.Error(), tc.encodeError) {",
        "// Line_Reference 217: \t\t\t\t\tt.Fatalf(\"got unexpeced encode error: [%v] (expected [%v])\", err.Error(), tc.encodeError)",
        "// Line_Reference 220: \t\t\t\tt.Fatalf(\"did not get expected encode error: %v\", tc.encodeError)",
        "// Line_Reference 221: \t\t\t}",
        "// Line_Reference 222: \t\t} else {",
        "// Line_Reference 223: \t\t\tif err != nil {",
        "// Line_Reference 224: \t\t\t\tt.Fatal(err)",
        "// Line_Reference 225: \t\t\t} else {",
        "// Line_Reference 226: \t\t\t\tif actualBytes != tc.expectedBytes {",
        "// Line_Reference 227: \t\t\t\t\tt.Logf(",
        "// Line_Reference 228: \t\t\t\t\t\t\"Expected bytes: [%v]\\nGot: [%v]\\n\",",
        "// Line_Reference 229: \t\t\t\t\t\ttc.expectedBytes,",
        "// Line_Reference 230: \t\t\t\t\t\tactualBytes)",
        "// Line_Reference 231: \t\t\t\t\tt.Error(\"Did not match\")"
    ]
}
