{
    "cve_id": "CVE-2020-24371",
    "cve_description": "lgc.c in Lua 5.4.0 mishandles the interaction between barriers and the sweep phase, leading to a memory access violation involving collectgarbage.",
    "cve_publish_date": "2020-08-17",
    "cwe_id": "CWE-763",
    "cwe_name": "Release of Invalid Pointer or Reference",
    "cwe_description": "The product attempts to return a memory resource to the system, but it calls the wrong release function or calls the appropriate release function incorrectly.",
    "commit_message": "Fixed bug: barriers cannot be active during sweep\n\nBarriers cannot be active during sweep, even in generational mode.\n(Although gen. mode is not incremental, it can hit a barrier when\ndeleting a thread and closing its upvalues.)  The colors of objects are\nbeing changed during sweep and, therefore, cannot be trusted.",
    "type_of_change": "Modification",
    "filename_of_changes": "lgc.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "32",
    "number_of_lines_deleted_vulnerable_to_cve": "16",
    "vulnerable_lines": [
        "// Line_Reference 184: ** barrier that moves collector forward, that is, mark the white object",
        "// Line_Reference 185: ** 'v' being pointed by the black object 'o'. (If in sweep phase, clear",
        "// Line_Reference 186: ** the black object to white [sweep it] to avoid other barrier calls for",
        "// Line_Reference 187: ** this same object.) In the generational mode, 'v' must also become",
        "// Line_Reference 188: ** old, if 'o' is old; however, it cannot be changed directly to OLD,",
        "// Line_Reference 189: ** because it may still point to non-old objects. So, it is marked as",
        "// Line_Reference 190: ** OLD0. In the next cycle it will become OLD1, and in the next it",
        "// Line_Reference 191: ** will finally become OLD (regular old).",
        "// Line_Reference 205:     makewhite(g, o);  /* mark main obj. as white to avoid other barriers */",
        "// Line_Reference 327: ** Mark all values stored in marked open upvalues from non-marked threads.",
        "// Line_Reference 328: ** (Values from marked threads were already marked when traversing the",
        "// Line_Reference 329: ** thread.) Remove from the list threads that no longer have upvalues and",
        "// Line_Reference 330: ** not-marked threads.",
        "// Line_Reference 1058:           p = next;  /* go to next element */",
        "// Line_Reference 1060:         else {  /* not touched in this cycle */",
        "// Line_Reference 1067:           /* else, object is white: just remove it from this list */"
    ]
}
