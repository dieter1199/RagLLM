{
    "cve_id": "CVE-2024-23829",
    "cve_description": "aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. Security-sensitive parts of the Python HTTP parser retained minor differences in allowable character sets, that must trigger error handling to robustly match frame boundaries of proxies in order to protect against injection of additional requests. Additionally, validation could trigger exceptions that were not handled consistently with processing of other malformed input.  Being more lenient than internet standards require could, depending on deployment environment, assist in request smuggling. The unhandled exception could cause excessive resource consumption on the application server and/or its logging facilities. This vulnerability exists due to an incomplete fix for CVE-2023-47627. Version 3.9.2 fixes this vulnerability.",
    "cve_publish_date": "2024-01-29",
    "cwe_id": "CWE-444",
    "cwe_name": "Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')",
    "cwe_description": "The product acts as an intermediary HTTP agent\n         (such as a proxy or firewall) in the data flow between two\n         entities such as a client and server, but it does not\n         interpret malformed HTTP requests or responses in ways that\n         are consistent with how the messages will be processed by\n         those entities that are at the ultimate destination.",
    "commit_message": "Improve validation in HTTP parser (#8074)\n\nCo-authored-by: Paul J. Dorn <pajod@users.noreply.github.com>\r\nCo-authored-by: Sviatoslav Sydorenko (Святослав Сидоренко) <sviat@redhat.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "http_parser.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "18",
    "number_of_lines_deleted_vulnerable_to_cve": "14",
    "vulnerable_lines": [
        "// Line_Reference 72: METHRE: Final[Pattern[str]] = re.compile(r\"[!#$%&'*+\\-.^_`|~0-9A-Za-z]+\")",
        "// Line_Reference 73: VERSRE: Final[Pattern[str]] = re.compile(r\"HTTP/(\\d).(\\d)\")",
        "// Line_Reference 74: HDRRE: Final[Pattern[bytes]] = re.compile(",
        "// Line_Reference 75:     rb\"[\\x00-\\x1F\\x7F-\\xFF()<>@,;:\\[\\]={} \\t\\\"\\\\]\"",
        "// Line_Reference 76: )",
        "// Line_Reference 77: HEXDIGIT = re.compile(rb\"[0-9a-fA-F]+\")",
        "// Line_Reference 154:             if HDRRE.search(bname):",
        "// Line_Reference 155:                 raise InvalidHeader(bname)",
        "// Line_Reference 210:             name = bname.decode(\"utf-8\", \"surrogateescape\")",
        "// Line_Reference 334:                             if not length_hdr.strip(\" \\t\").isdecimal():",
        "// Line_Reference 562:         if not METHRE.fullmatch(method):",
        "// Line_Reference 679:         # The status code is a three-digit number",
        "// Line_Reference 680:         if len(status) != 3 or not status.isdecimal():",
        "// Line_Reference 821:                         if not re.fullmatch(HEXDIGIT, size_b):"
    ]
}
