{
    "cve_id": "CVE-2022-39255",
    "cve_description": "Matrix iOS SDK allows developers to build iOS apps compatible with Matrix. Prior to version 0.23.19, an attacker cooperating with a malicious homeserver can construct messages that legitimately appear to have come from another person, without any indication such as a grey shield. Additionally, a sophisticated attacker cooperating with a malicious homeserver could employ this vulnerability to perform a targeted attack in order to send fake to-device messages appearing to originate from another user. This can allow, for example, to inject the key backup secret during a self-verification, to make a targeted device start using a malicious key backup spoofed by the homeserver. These attacks are possible due to a protocol confusion vulnerability that accepts to-device messages encrypted with Megolm instead of Olm. matrix-ios-sdk version 0.23.19 has been modified to only accept Olm-encrypted to-device messages. Out of caution, several other checks have been audited or added. This attack requires coordination between a malicious home server and an attacker, so those who trust their home servers do not need a workaround. To avoid malicious backup attacks, one should not verify one's new logins using emoji/QR verifications methods until patched.",
    "cve_publish_date": "2022-09-28",
    "cwe_id": "CWE-287",
    "cwe_name": "Improper Authentication",
    "cwe_description": "When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.",
    "commit_message": "Resolve multiple CVEs\n\nCVE-2022-39255\nCVE-2022-39257",
    "type_of_change": "Modification",
    "filename_of_changes": "MXMegolmDecryption.m",
    "code_language": "Objective-C",
    "number_of_lines_added_for_mitigation": "44",
    "number_of_lines_deleted_vulnerable_to_cve": "77",
    "vulnerable_lines": [
        "// Line_Reference 194:     NSDictionary *content = event.content;",
        "// Line_Reference 195:     NSString *roomId, *sessionId, *sessionKey;",
        "// Line_Reference 196: ",
        "// Line_Reference 197:     MXJSONModelSetString(roomId, content[@\"room_id\"]);",
        "// Line_Reference 198:     MXJSONModelSetString(sessionId, content[@\"session_id\"]);",
        "// Line_Reference 199:     MXJSONModelSetString(sessionKey, content[@\"session_key\"]);",
        "// Line_Reference 200: ",
        "// Line_Reference 201:     if (!roomId || !sessionId || !sessionKey)",
        "// Line_Reference 203:         MXLogDebug(@\"[MXMegolmDecryption] onRoomKeyEvent: ERROR: Key event is missing fields\");",
        "// Line_Reference 206: ",
        "// Line_Reference 207:     NSString *senderKey = event.senderKey;",
        "// Line_Reference 208:     if (!senderKey)",
        "// Line_Reference 209:     {",
        "// Line_Reference 210:         MXLogDebug(@\"[MXMegolmDecryption] onRoomKeyEvent: ERROR: Key event has no sender key (not encrypted?)\");",
        "// Line_Reference 211:         return;",
        "// Line_Reference 212:     }",
        "// Line_Reference 213: ",
        "// Line_Reference 214:     NSArray<NSString*> *forwardingKeyChain;",
        "// Line_Reference 215:     BOOL exportFormat = NO;",
        "// Line_Reference 216:     NSDictionary *keysClaimed;",
        "// Line_Reference 217:     BOOL sharedHistory = NO;",
        "// Line_Reference 218:     if (content[kMXSharedHistoryKeyName] != nil)",
        "// Line_Reference 219:     {",
        "// Line_Reference 220:         MXJSONModelSetBoolean(sharedHistory, content[kMXSharedHistoryKeyName]);",
        "// Line_Reference 221:     }",
        "// Line_Reference 222: ",
        "// Line_Reference 223:     if (event.eventType == MXEventTypeRoomForwardedKey)",
        "// Line_Reference 224:     {",
        "// Line_Reference 225:         exportFormat = YES;",
        "// Line_Reference 226:         MXJSONModelSetArray(forwardingKeyChain, content[@\"forwarding_curve25519_key_chain\"]);",
        "// Line_Reference 227:         if (!forwardingKeyChain)",
        "// Line_Reference 228:         {",
        "// Line_Reference 229:             forwardingKeyChain = @[];",
        "// Line_Reference 230:         }",
        "// Line_Reference 231: ",
        "// Line_Reference 232:         // copy content before we modify it",
        "// Line_Reference 233:         NSMutableArray *forwardingKeyChain2 = [NSMutableArray arrayWithArray:forwardingKeyChain];",
        "// Line_Reference 234:         [forwardingKeyChain2 addObject:senderKey];",
        "// Line_Reference 235:         forwardingKeyChain = forwardingKeyChain2;",
        "// Line_Reference 236: ",
        "// Line_Reference 237:         MXJSONModelSetString(senderKey, content[@\"sender_key\"]);",
        "// Line_Reference 238:         if (!senderKey)",
        "// Line_Reference 239:         {",
        "// Line_Reference 240:             MXLogDebug(@\"[MXMegolmDecryption] onRoomKeyEvent: ERROR: forwarded_room_key event is missing sender_key field\");",
        "// Line_Reference 241:             return;",
        "// Line_Reference 242:         }",
        "// Line_Reference 243: ",
        "// Line_Reference 244:         NSString *ed25519Key;",
        "// Line_Reference 245:         MXJSONModelSetString(ed25519Key, content[@\"sender_claimed_ed25519_key\"]);",
        "// Line_Reference 246:         if (!ed25519Key)",
        "// Line_Reference 247:         {",
        "// Line_Reference 248:             MXLogDebug(@\"[MXMegolmDecryption] onRoomKeyEvent: ERROR: forwarded_room_key_event is missing sender_claimed_ed25519_key field\");",
        "// Line_Reference 249:             return;",
        "// Line_Reference 250:         }",
        "// Line_Reference 251: ",
        "// Line_Reference 252:         keysClaimed = @{",
        "// Line_Reference 253:                         @\"ed25519\": ed25519Key",
        "// Line_Reference 254:                         };",
        "// Line_Reference 255:     }",
        "// Line_Reference 256:     else",
        "// Line_Reference 257:     {",
        "// Line_Reference 258:         keysClaimed = event.keysClaimed;",
        "// Line_Reference 261:     MXLogDebug(@\"[MXMegolmDecryption] onRoomKeyEvent: Adding key for megolm session %@|%@ from %@ event\", senderKey, sessionId, event.type);",
        "// Line_Reference 262: ",
        "// Line_Reference 263:     [olmDevice addInboundGroupSession:sessionId",
        "// Line_Reference 264:                            sessionKey:sessionKey",
        "// Line_Reference 265:                                roomId:roomId",
        "// Line_Reference 266:                             senderKey:senderKey",
        "// Line_Reference 267:          forwardingCurve25519KeyChain:forwardingKeyChain",
        "// Line_Reference 268:                           keysClaimed:keysClaimed",
        "// Line_Reference 269:                          exportFormat:exportFormat",
        "// Line_Reference 270:                         sharedHistory:sharedHistory];",
        "// Line_Reference 275:     [self retryDecryption:senderKey sessionId:content[@\"session_id\"] complete:^(BOOL allDecrypted) {",
        "// Line_Reference 282:                                                  @\"algorithm\": content[@\"algorithm\"],",
        "// Line_Reference 283:                                                  @\"room_id\": content[@\"room_id\"],",
        "// Line_Reference 284:                                                  @\"session_id\": content[@\"session_id\"],",
        "// Line_Reference 285:                                                  @\"sender_key\": senderKey"
    ]
}
