{
    "cve_id": "CVE-2012-4508",
    "cve_description": "Race condition in fs/ext4/extents.c in the Linux kernel before 3.4.16 allows local users to obtain sensitive information from a deleted file by reading an extent that was not properly marked as uninitialized.",
    "cve_publish_date": "2012-12-21",
    "cwe_id": "CWE-362",
    "cwe_name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
    "cwe_description": "The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.",
    "commit_message": "ext4: race-condition protection for ext4_convert_unwritten_extents_endio\n\nWe assumed that at the time we call ext4_convert_unwritten_extents_endio()\nextent in question is fully inside [map.m_lblk, map->m_len] because\nit was already split during submission.  But this may not be true due to\na race between writeback vs fallocate.\n\nIf extent in question is larger than requested we will split it again.\nSpecial precautions should being done if zeroout required because\n[map.m_lblk, map->m_len] already contains valid data.\n\nSigned-off-by: Dmitry Monakhov <dmonakhov@openvz.org>\nSigned-off-by: \"Theodore Ts'o\" <tytso@mit.edu>\nCc: stable@vger.kernel.org",
    "type_of_change": "Modification",
    "filename_of_changes": "extents.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "46",
    "number_of_lines_deleted_vulnerable_to_cve": "11",
    "vulnerable_lines": [
        "// Line_Reference 2975: \t\terr = ext4_ext_zeroout(inode, &orig_ex);",
        "// Line_Reference 3028: \t\tsplit_flag1 = split_flag & EXT4_EXT_MAY_ZEROOUT ?",
        "// Line_Reference 3029: \t\t\t      EXT4_EXT_MAY_ZEROOUT : 0;",
        "// Line_Reference 3046: \t\tsplit_flag1 = split_flag & EXT4_EXT_MAY_ZEROOUT ?",
        "// Line_Reference 3047: \t\t\t      EXT4_EXT_MAY_ZEROOUT : 0;",
        "// Line_Reference 3326: ",
        "// Line_Reference 3332: \t\t\t\t\t      struct inode *inode,",
        "// Line_Reference 3333: \t\t\t\t\t      struct ext4_ext_path *path)",
        "// Line_Reference 3344: \t\t(unsigned long long)le32_to_cpu(ex->ee_block),",
        "// Line_Reference 3345: \t\text4_ext_get_actual_len(ex));",
        "// Line_Reference 3655: \t\tret = ext4_convert_unwritten_extents_endio(handle, inode,"
    ]
}
