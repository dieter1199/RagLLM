{
    "cve_id": "CVE-2022-24829",
    "cve_description": "Garden is an automation platform for Kubernetes development and testing. In versions prior to 0.12.39 multiple endpoints did not require authentication. In some operating modes this allows for an attacker to gain access to the application erroneously. The configuration is leaked through the /api endpoint on the local server that is responsible for serving the Garden dashboard. At the moment, this server is accessible to 0.0.0.0 which makes it accessible to anyone on the same network (or anyone on the internet if they are on a public, static IP). This may lead to the ability to compromise credentials, secrets or environment variables. Users are advised to upgrade to version 0.12.39 as soon as possible. Users unable to upgrade should use a firewall blocking access to port 9777 from all untrusted network machines.",
    "cve_publish_date": "2022-04-11",
    "cwe_id": "CWE-306",
    "cwe_name": "Missing Authentication for Critical Function",
    "cwe_description": "The product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.",
    "commit_message": "fix(core): require auth key for server endpoints",
    "type_of_change": "Modification",
    "filename_of_changes": "server.ts",
    "code_language": "TypeScript",
    "number_of_lines_added_for_mitigation": "89",
    "number_of_lines_deleted_vulnerable_to_cve": "10",
    "vulnerable_lines": [
        "// Line_Reference 61:       servers: [{ host: \"http://localhost:9800\", command: \"dashboard\" }],",
        "// Line_Reference 66:     expect(status).to.equal(`Garden dashboard running at http://localhost:9800`)",
        "// Line_Reference 71:       await request(server).get(\"/\").expect(200)",
        "// Line_Reference 77:       await request(server).post(\"/api\").send(\"foo\").expect(400)",
        "// Line_Reference 81:       await request(server).post(\"/api\").send({ foo: \"bar\" }).expect(400)",
        "// Line_Reference 85:       await request(server).post(\"/api\").send({ command: \"foo\" }).expect(404)",
        "// Line_Reference 90:       await request(server).post(\"/api\").send({ command: \"get.config\" }).expect(503)",
        "// Line_Reference 94:       const res = await request(server).post(\"/api\").send({ command: \"get.config\" }).expect(200)",
        "// Line_Reference 123:       const res = await request(server).get(\"/dashboardPages/test-plugin/test\").expect(302)",
        "// Line_Reference 165:       ws = new WebSocket(`ws://localhost:${port}/ws`)"
    ]
}
