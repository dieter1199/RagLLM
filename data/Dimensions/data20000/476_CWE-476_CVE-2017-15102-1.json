{
    "cve_id": "CVE-2017-15102",
    "cve_description": "The tower_probe function in drivers/usb/misc/legousbtower.c in the Linux kernel before 4.8.1 allows local users (who are physically proximate for inserting a crafted USB device) to gain privileges by leveraging a write-what-where condition that occurs after a race condition and a NULL pointer dereference.",
    "cve_publish_date": "2017-11-15",
    "cwe_id": "CWE-476",
    "cwe_name": "NULL Pointer Dereference",
    "cwe_description": "The product dereferences a pointer that it expects to be valid but is NULL.",
    "commit_message": "usb: misc: legousbtower: Fix NULL pointer deference\n\nThis patch fixes a NULL pointer dereference caused by a race codition in\nthe probe function of the legousbtower driver. It re-structures the\nprobe function to only register the interface after successfully reading\nthe board's firmware ID.\n\nThe probe function does not deregister the usb interface after an error\nreceiving the devices firmware ID. The device file registered\n(/dev/usb/legousbtower%d) may be read/written globally before the probe\nfunction returns. When tower_delete is called in the probe function\n(after an r/w has been initiated), core dev structures are deleted while\nthe file operation functions are still running. If the 0 address is\nmappable on the machine, this vulnerability can be used to create a\nLocal Priviege Escalation exploit via a write-what-where condition by\nremapping dev->interrupt_out_buffer in tower_write. A forged USB device\nand local program execution would be required for LPE. The USB device\nwould have to delay the control message in tower_probe and accept\nthe control urb in tower_open whilst guest code initiated a write to the\ndevice file as tower_delete is called from the error in tower_probe.\n\nThis bug has existed since 2003. Patch tested by emulated device.\n\nReported-by: James Patrick-Evans <james@jmp-e.com>\nTested-by: James Patrick-Evans <james@jmp-e.com>\nSigned-off-by: James Patrick-Evans <james@jmp-e.com>\nCc: stable <stable@vger.kernel.org>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "legousbtower.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "17",
    "number_of_lines_deleted_vulnerable_to_cve": "18",
    "vulnerable_lines": [
        "// Line_Reference 889: \t/* we can register the device now, as it is ready */",
        "// Line_Reference 890: \tusb_set_intfdata (interface, dev);",
        "// Line_Reference 891: ",
        "// Line_Reference 892: \tretval = usb_register_dev (interface, &tower_class);",
        "// Line_Reference 893: ",
        "// Line_Reference 894: \tif (retval) {",
        "// Line_Reference 895: \t\t/* something prevented us from registering this driver */",
        "// Line_Reference 896: \t\tdev_err(idev, \"Not able to get a minor for this device.\\n\");",
        "// Line_Reference 897: \t\tusb_set_intfdata (interface, NULL);",
        "// Line_Reference 898: \t\tgoto error;",
        "// Line_Reference 899: \t}",
        "// Line_Reference 900: \tdev->minor = interface->minor;",
        "// Line_Reference 901: ",
        "// Line_Reference 902: \t/* let the user know what node this device is now attached to */",
        "// Line_Reference 903: \tdev_info(&interface->dev, \"LEGO USB Tower #%d now attached to major \"",
        "// Line_Reference 904: \t\t \"%d minor %d\\n\", (dev->minor - LEGO_USB_TOWER_MINOR_BASE),",
        "// Line_Reference 905: \t\t USB_MAJOR, dev->minor);",
        "// Line_Reference 906: "
    ]
}
