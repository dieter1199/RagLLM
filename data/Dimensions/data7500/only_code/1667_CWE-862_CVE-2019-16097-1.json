fmt.Println("Register user without admin auth")
assert.Equal(400, code, "Add user status should be 400")
fmt.Println("Register user with admin auth, but username is empty")
assert.Equal(400, code, "Add user status should be 400")
fmt.Println("Register user with admin auth, but bad username format")
assert.Equal(400, code, "Add user status should be 400")
fmt.Println("Register user with admin auth, but empty password.")
assert.Equal(400, code, "Add user status should be 400")
fmt.Println("Register user with admin auth, but email is empty")
assert.Equal(400, code, "Add user status should be 400")
fmt.Println("Register user with admin auth, but bad email format")
assert.Equal(400, code, "Add user status should be 400")
fmt.Println("Register user with admin auth, but bad user realname format")
assert.Equal(400, code, "Add user status should be 400")
fmt.Println("Register user with admin auth, but user comment length is illegal")
assert.Equal(400, code, "Add user status should be 400")
// case 10: register a new user with admin auth, expect 201
fmt.Println("Register user with admin auth, right parameters")
assert.Equal(201, code, "Add user status should be 201")
// case 11: register duplicate user with admin auth, expect 409
fmt.Println("Register duplicate user with admin auth")
assert.Equal(409, code, "Add user status should be 409")
// case 12: register a new user with admin auth, but duplicate email, expect 409
fmt.Println("Register user with admin auth, but duplicate email")
assert.Equal(409, code, "Add user status should be 409")
