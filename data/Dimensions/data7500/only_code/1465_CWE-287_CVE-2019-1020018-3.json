describe '#email_login' do
get "/session/email-login/adasdad"
expect(CGI.unescapeHTML(response.body)).to match(
get "/session/email-login/#{email_token.token}"
expect(CGI.unescapeHTML(response.body)).to match(
get "/session/email-login/#{email_token.token}"
expect(response).to redirect_to("/")
get "/session/email-login/#{email_token.token}"
get "/session/email-login/#{email_token.token}"
get "/session/email-login/#{email_token.token}"
expect(CGI.unescapeHTML(response.body)).to include(
I18n.t("login.not_approved")
)
get "/session/email-login/#{email_token.token}"
expect(CGI.unescapeHTML(response.body)).to include(
get "/session/email-login/#{email_token.token}"
expect(CGI.unescapeHTML(response.body)).to include(
get "/session/email-login/#{email_token.token}"
expect(CGI.unescapeHTML(response.body)).to include(I18n.t("login.suspended",
date: I18n.l(user.suspended_till, format: :date_only)
describe 'requires second factor' do
it 'should return a second factor prompt' do
get "/session/email-login/#{email_token.token}"
expect(response.status).to eq(200)
response_body = CGI.unescapeHTML(response.body)
expect(response_body).to include(I18n.t(
"login.second_factor_title"
))
expect(response_body).to_not include(I18n.t(
"login.invalid_second_factor_code"
))
end
end
post "/session/email-login/#{email_token.token}", params: {
expect(CGI.unescapeHTML(response.body)).to include(I18n.t(
"login.invalid_second_factor_code"
))
post "/session/email-login/#{email_token.token}", params: {
expect(CGI.unescapeHTML(response.body)).to include(I18n.t(
"login.invalid_second_factor_code"
))
post "/session/email-login/#{email_token.token}", params: {
expect(response).to redirect_to("/")
post "/session/email-login/#{email_token.token}", params: {
expect(response).to redirect_to("/")
get "/session/otp/#{token}"
