{
    "cve_id": "CVE-2021-41171",
    "cve_description": "eLabFTW is an open source electronic lab notebook manager for research teams. In versions of eLabFTW before 4.1.0, it allows attackers to bypass a brute-force protection mechanism by using many different forged PHPSESSID values in HTTP Cookie header. This issue has been addressed by implementing brute force login protection, as recommended by Owasp with Device Cookies. This mechanism will not impact users and will effectively thwart any brute-force attempts at guessing passwords. The only correct way to address this is to upgrade to version 4.1.0. Adding rate limitation upstream of the eLabFTW service is of course a valid option, with or without upgrading.",
    "cve_publish_date": "2021-10-22",
    "cwe_id": "CWE-307",
    "cwe_name": "Improper Restriction of Excessive Authentication Attempts",
    "cwe_description": "The product does not implement sufficient measures to prevent multiple failed authentication attempts within a short time frame, making it more susceptible to brute force attacks.",
    "commit_message": "Add JWT anti brute-force login protection (#2831)\n\n* WIP: better brute force login protection\r\n\r\n* split device token classes\r\n\r\n* mv schema to 63\r\n\r\n* use int(10) in schema too\r\n\r\n* add sysadmin action to clear locked users/devices\r\n\r\n* remove the FK on authfail\r\n\r\n* remove authfail users_id fk constraint in structure.sql\r\n\r\n* catch the invalid device token exception\r\n\r\n* remove the banned users stuff\r\n\r\n* change invalid token message\r\n\r\n* cleanup the exceptions a bit\r\n\r\n* get rid of the useless InvalidCsrfTokenException\r\n\r\n* remove unused js import\r\n\r\n* introduce the AuthenticatedUser and AnonymousUser classes\r\n\r\nand improve the App and init.inc.php files\r\n\r\n* remove the populateFromEmail method from Users\r\n\r\n* get rid of the useless SessionAuth\r\n\r\nand rearrange init Auth and App\r\n\r\n* be more specific about which kind of user can be loaded in App\r\n\r\n* change Update class signature\r\n\r\n* use init.inc.php in ApiController\r\n\r\n* don't store the whole teamconfigarr in app",
    "type_of_change": "Modification",
    "filename_of_changes": "login.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "0",
    "number_of_lines_deleted_vulnerable_to_cve": "20",
    "vulnerable_lines": [
        "// Line_Reference 17: use Elabftw\\Models\\BannedUsers;",
        "// Line_Reference 23: use function in_array;",
        "// Line_Reference 24: use function md5;",
        "// Line_Reference 49:     // disable login if too much failed_attempts",
        "// Line_Reference 50:     $BannedUsers = new BannedUsers($App->Config);",
        "// Line_Reference 51:     // get user info",
        "// Line_Reference 52:     $fingerprint = md5($App->Request->server->get('REMOTE_ADDR') . $App->Request->server->get('HTTP_USER_AGENT') ?? '');",
        "// Line_Reference 53:     if ($App->Session->has('failed_attempt') && $App->Session->get('failed_attempt') >= $App->Config->configArr['login_tries']) {",
        "// Line_Reference 54:         // add the user to the banned list",
        "// Line_Reference 55:         $BannedUsers->create($fingerprint);",
        "// Line_Reference 56: ",
        "// Line_Reference 57:         $App->Session->remove('failed_attempt');",
        "// Line_Reference 58:     }",
        "// Line_Reference 59: ",
        "// Line_Reference 60:     // Check if we are banned after too much failed login attempts",
        "// Line_Reference 61:     if (in_array($fingerprint, $BannedUsers->readAll(), true)) {",
        "// Line_Reference 62:         throw new ImproperActionException(_('You cannot login now because of too many failed login attempts.'));",
        "// Line_Reference 63:     }",
        "// Line_Reference 64: ",
        "// Line_Reference 105:         'BannedUsers' => $BannedUsers,"
    ]
}
