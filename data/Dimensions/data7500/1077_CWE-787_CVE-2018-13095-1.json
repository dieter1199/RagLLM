{
    "cve_id": "CVE-2018-13095",
    "cve_description": "An issue was discovered in fs/xfs/libxfs/xfs_inode_buf.c in the Linux kernel through 4.17.3. A denial of service (memory corruption and BUG) can occur for a corrupted xfs image upon encountering an inode that is in extent format, but has more extents than fit in the inode fork.",
    "cve_publish_date": "2018-07-03",
    "cwe_id": "CWE-787",
    "cwe_name": "Out-of-bounds Write",
    "cwe_description": "The product writes data past the end, or before the beginning, of the intended buffer.",
    "commit_message": "xfs: More robust inode extent count validation\n\nWhen the inode is in extent format, it can't have more extents that\nfit in the inode fork. We don't currenty check this, and so this\ncorruption goes unnoticed by the inode verifiers. This can lead to\ncrashes operating on invalid in-memory structures.\n\nAttempts to access such a inode will now error out in the verifier\nrather than allowing modification operations to proceed.\n\nReported-by: Wen Xu <wen.xu@gatech.edu>\nSigned-off-by: Dave Chinner <dchinner@redhat.com>\nReviewed-by: Darrick J. Wong <darrick.wong@oracle.com>\n[darrick: fix a typedef, add some braces and breaks to shut up compiler warnings]\nSigned-off-by: Darrick J. Wong <darrick.wong@oracle.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "xfs_inode_buf.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "47",
    "number_of_lines_deleted_vulnerable_to_cve": "29",
    "vulnerable_lines": [
        "// Line_Reference 444: \t\tswitch (dip->di_format) {",
        "// Line_Reference 445: \t\tcase XFS_DINODE_FMT_LOCAL:",
        "// Line_Reference 446: \t\t\t/*",
        "// Line_Reference 447: \t\t\t * no local regular files yet",
        "// Line_Reference 448: \t\t\t */",
        "// Line_Reference 449: \t\t\tif (S_ISREG(mode))",
        "// Line_Reference 450: \t\t\t\treturn __this_address;",
        "// Line_Reference 451: \t\t\tif (di_size > XFS_DFORK_DSIZE(dip, mp))",
        "// Line_Reference 452: \t\t\t\treturn __this_address;",
        "// Line_Reference 453: \t\t\tif (dip->di_nextents)",
        "// Line_Reference 454: \t\t\t\treturn __this_address;",
        "// Line_Reference 455: \t\t\t/* fall through */",
        "// Line_Reference 456: \t\tcase XFS_DINODE_FMT_EXTENTS:",
        "// Line_Reference 457: \t\tcase XFS_DINODE_FMT_BTREE:",
        "// Line_Reference 458: \t\t\tbreak;",
        "// Line_Reference 459: \t\tdefault:",
        "// Line_Reference 460: \t\t\treturn __this_address;",
        "// Line_Reference 461: \t\t}",
        "// Line_Reference 471: \t\tswitch (dip->di_aformat) {",
        "// Line_Reference 472: \t\tcase XFS_DINODE_FMT_LOCAL:",
        "// Line_Reference 473: \t\t\tif (dip->di_anextents)",
        "// Line_Reference 474: \t\t\t\treturn __this_address;",
        "// Line_Reference 475: \t\t/* fall through */",
        "// Line_Reference 476: \t\tcase XFS_DINODE_FMT_EXTENTS:",
        "// Line_Reference 477: \t\tcase XFS_DINODE_FMT_BTREE:",
        "// Line_Reference 478: \t\t\tbreak;",
        "// Line_Reference 479: \t\tdefault:",
        "// Line_Reference 480: \t\t\treturn __this_address;",
        "// Line_Reference 481: \t\t}"
    ]
}
