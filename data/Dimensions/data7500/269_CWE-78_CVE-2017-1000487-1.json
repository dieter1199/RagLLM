{
    "cve_id": "CVE-2017-1000487",
    "cve_description": "Plexus-utils before 3.0.16 is vulnerable to command injection because it does not correctly process the contents of double quoted strings.",
    "cve_publish_date": "2018-01-03",
    "cwe_id": "CWE-78",
    "cwe_name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
    "cwe_description": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
    "commit_message": "[PLXUTILS-161] Commandline shell injection problems\n\nPatch by Charles Duffy, applied unmodified",
    "type_of_change": "Modification",
    "filename_of_changes": "BourneShell.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "19",
    "number_of_lines_deleted_vulnerable_to_cve": "41",
    "vulnerable_lines": [
        "// Line_Reference 20: import org.codehaus.plexus.util.StringUtils;",
        "// Line_Reference 32:     private static final char[] BASH_QUOTING_TRIGGER_CHARS = {",
        "// Line_Reference 33:         ' ',",
        "// Line_Reference 34:         '$',",
        "// Line_Reference 35:         ';',",
        "// Line_Reference 36:         '&',",
        "// Line_Reference 37:         '|',",
        "// Line_Reference 38:         '<',",
        "// Line_Reference 39:         '>',",
        "// Line_Reference 40:         '*',",
        "// Line_Reference 41:         '?',",
        "// Line_Reference 42:         '(',",
        "// Line_Reference 43:         ')',",
        "// Line_Reference 44:         '[',",
        "// Line_Reference 45:         ']',",
        "// Line_Reference 46:         '{',",
        "// Line_Reference 47:         '}',",
        "// Line_Reference 48:         '`' };",
        "// Line_Reference 52:         this( false );",
        "// Line_Reference 59:         setExecutableQuoteDelimiter( '\\\"' );",
        "// Line_Reference 79:         return unifyQuotes( super.getExecutable());",
        "// Line_Reference 129:         sb.append( unifyQuotes( dir ) );",
        "// Line_Reference 135:     protected char[] getQuotingTriggerChars()",
        "// Line_Reference 136:     {",
        "// Line_Reference 137:         return BASH_QUOTING_TRIGGER_CHARS;",
        "// Line_Reference 138:     }",
        "// Line_Reference 139: ",
        "// Line_Reference 144:      * BourneShell.unifyQuotes(null)                       = null",
        "// Line_Reference 145:      * BourneShell.unifyQuotes(\"\")                         = (empty)",
        "// Line_Reference 146:      * BourneShell.unifyQuotes(\"/test/quotedpath'abc\")     = /test/quotedpath\\'abc",
        "// Line_Reference 147:      * BourneShell.unifyQuotes(\"/test/quoted path'abc\")    = \"/test/quoted path'abc\"",
        "// Line_Reference 148:      * BourneShell.unifyQuotes(\"/test/quotedpath\\\"abc\")    = \"/test/quotedpath\\\"abc\"",
        "// Line_Reference 149:      * BourneShell.unifyQuotes(\"/test/quoted path\\\"abc\")   = \"/test/quoted path\\\"abc\"",
        "// Line_Reference 150:      * BourneShell.unifyQuotes(\"/test/quotedpath\\\"'abc\")   = \"/test/quotedpath\\\"'abc\"",
        "// Line_Reference 151:      * BourneShell.unifyQuotes(\"/test/quoted path\\\"'abc\")  = \"/test/quoted path\\\"'abc\"",
        "// Line_Reference 157:     protected static String unifyQuotes( String path )",
        "// Line_Reference 164:         if ( path.indexOf( \" \" ) == -1 && path.indexOf( \"'\" ) != -1 && path.indexOf( \"\\\"\" ) == -1 )",
        "// Line_Reference 165:         {",
        "// Line_Reference 166:             return StringUtils.escape( path );",
        "// Line_Reference 167:         }",
        "// Line_Reference 169:         return StringUtils.quoteAndEscape( path, '\\\"', BASH_QUOTING_TRIGGER_CHARS );"
    ]
}
