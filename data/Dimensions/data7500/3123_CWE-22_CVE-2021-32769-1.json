{
    "cve_id": "CVE-2021-32769",
    "cve_description": "Micronaut is a JVM-based, full stack Java framework designed for building JVM applications. A path traversal vulnerability exists in versions prior to 2.5.9. With a basic configuration, it is possible to access any file from a filesystem, using \"/../../\" in the URL. This occurs because Micronaut does not restrict file access to configured paths. The vulnerability is patched in version 2.5.9. As a workaround, do not use `**` in mapping, use only `*`, which exposes only flat structure of a directory not allowing traversal. If using Linux, another workaround is to run micronaut in chroot.",
    "cve_publish_date": "2021-07-16",
    "cwe_id": "CWE-22",
    "cwe_name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
    "cwe_description": "The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
    "commit_message": "Merge pull request from GHSA-cjx7-399x-p2rj\n\n* Don't allow resolving files using relative paths outside of the base\n\n* Revert change around reading properties files\n\nCo-authored-by: Lukas, Strmiska <strmik@gmail.com>\nCo-authored-by: jameskleeh <james.kleeh@gmail.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "DefaultClassPathResourceLoader.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "72",
    "number_of_lines_deleted_vulnerable_to_cve": "38",
    "vulnerable_lines": [
        "// Line_Reference 80:             try {",
        "// Line_Reference 81:                 URI uri = url.toURI();",
        "// Line_Reference 82:                 if (uri.getScheme().equals(\"jar\")) {",
        "// Line_Reference 83:                     synchronized (DefaultClassPathResourceLoader.class) {",
        "// Line_Reference 84:                         FileSystem fileSystem = null;",
        "// Line_Reference 85:                         try {",
        "// Line_Reference 87:                                 fileSystem = FileSystems.getFileSystem(uri);",
        "// Line_Reference 88:                             } catch (FileSystemNotFoundException e) {",
        "// Line_Reference 89:                                 //no-op",
        "// Line_Reference 90:                             }",
        "// Line_Reference 91:                             if (fileSystem == null || !fileSystem.isOpen()) {",
        "// Line_Reference 93:                                     fileSystem = FileSystems.newFileSystem(uri, Collections.emptyMap(), classLoader);",
        "// Line_Reference 94:                                 } catch (FileSystemAlreadyExistsException e) {",
        "// Line_Reference 97:                             }",
        "// Line_Reference 98:                             Path pathObject = fileSystem.getPath(path);",
        "// Line_Reference 99:                             if (Files.isDirectory(pathObject)) {",
        "// Line_Reference 100:                                 return Optional.empty();",
        "// Line_Reference 101:                             }",
        "// Line_Reference 102:                             return Optional.of(new ByteArrayInputStream(Files.readAllBytes(pathObject)));",
        "// Line_Reference 103:                         } finally {",
        "// Line_Reference 104:                             if (fileSystem != null && fileSystem.isOpen()) {",
        "// Line_Reference 105:                                 try {",
        "// Line_Reference 106:                                     fileSystem.close();",
        "// Line_Reference 107:                                 } catch (IOException e) {",
        "// Line_Reference 108:                                     if (LOG.isDebugEnabled()) {",
        "// Line_Reference 109:                                         LOG.debug(\"Error shutting down JAR file system [\" + fileSystem + \"]: \" + e.getMessage(), e);",
        "// Line_Reference 115:                 } else if (uri.getScheme().equals(\"file\")) {",
        "// Line_Reference 116:                     Path pathObject = Paths.get(uri);",
        "// Line_Reference 117:                     if (Files.isDirectory(pathObject)) {",
        "// Line_Reference 118:                         return Optional.empty();",
        "// Line_Reference 120:                     return Optional.of(Files.newInputStream(pathObject));",
        "// Line_Reference 121:                 }",
        "// Line_Reference 122:             } catch (URISyntaxException | IOException | ProviderNotFoundException e) {",
        "// Line_Reference 123:                 if (LOG.isDebugEnabled()) {",
        "// Line_Reference 124:                     LOG.debug(\"Error establishing whether path is a directory: \" + e.getMessage(), e);",
        "// Line_Reference 132:         return Optional.ofNullable(classLoader.getResourceAsStream(prefixPath(path)));",
        "// Line_Reference 147:             return Optional.ofNullable(url);",
        "// Line_Reference 169:             builder.accept(url);"
    ]
}
