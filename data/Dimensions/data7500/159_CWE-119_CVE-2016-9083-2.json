{
    "cve_id": "CVE-2016-9083",
    "cve_description": "drivers/vfio/pci/vfio_pci.c in the Linux kernel through 4.8.11 allows local users to bypass integer overflow checks, and cause a denial of service (memory corruption) or have unspecified other impact, by leveraging access to a vfio PCI device file for a VFIO_DEVICE_SET_IRQS ioctl call, aka a \"state machine confusion bug.\"",
    "cve_publish_date": "2016-11-28",
    "cwe_id": "CWE-119",
    "cwe_name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
    "cwe_description": "The product performs operations on a memory buffer, but it reads from or writes to a memory location outside the buffer's intended boundary. This may result in read or write operations on unexpected memory locations that could be linked to other variables, data structures, or internal program data.",
    "commit_message": "vfio/pci: Fix integer overflows, bitmask check\n\nThe VFIO_DEVICE_SET_IRQS ioctl did not sufficiently sanitize\nuser-supplied integers, potentially allowing memory corruption. This\npatch adds appropriate integer overflow checks, checks the range bounds\nfor VFIO_IRQ_SET_DATA_NONE, and also verifies that only single element\nin the VFIO_IRQ_SET_DATA_TYPE_MASK bitmask is set.\nVFIO_IRQ_SET_ACTION_TYPE_MASK is already correctly checked later in\nvfio_pci_set_irqs_ioctl().\n\nFurthermore, a kzalloc is changed to a kcalloc because the use of a\nkzalloc with an integer multiplication allowed an integer overflow\ncondition to be reached without this patch. kcalloc checks for overflow\nand should prevent a similar occurrence.\n\nSigned-off-by: Vlad Tsyrklevich <vlad@tsyrklevich.net>\nSigned-off-by: Alex Williamson <alex.williamson@redhat.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "vfio_pci.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "21",
    "number_of_lines_deleted_vulnerable_to_cve": "12",
    "vulnerable_lines": [
        "// Line_Reference 833: \t\tint ret = 0;",
        "// Line_Reference 845: \t\tif (!(hdr.flags & VFIO_IRQ_SET_DATA_NONE)) {",
        "// Line_Reference 846: \t\t\tsize_t size;",
        "// Line_Reference 847: \t\t\tint max = vfio_pci_get_irq_count(vdev, hdr.index);",
        "// Line_Reference 849: \t\t\tif (hdr.flags & VFIO_IRQ_SET_DATA_BOOL)",
        "// Line_Reference 850: \t\t\t\tsize = sizeof(uint8_t);",
        "// Line_Reference 851: \t\t\telse if (hdr.flags & VFIO_IRQ_SET_DATA_EVENTFD)",
        "// Line_Reference 852: \t\t\t\tsize = sizeof(int32_t);",
        "// Line_Reference 853: \t\t\telse",
        "// Line_Reference 854: \t\t\t\treturn -EINVAL;",
        "// Line_Reference 856: \t\t\tif (hdr.argsz - minsz < hdr.count * size ||",
        "// Line_Reference 857: \t\t\t    hdr.start >= max || hdr.start + hdr.count > max)"
    ]
}
