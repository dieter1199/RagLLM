{
    "cve_id": "CVE-2019-19221",
    "cve_description": "In Libarchive 3.4.0, archive_wstring_append_from_mbs in archive_string.c has an out-of-bounds read because of an incorrect mbrtowc or mbtowc call. For example, bsdtar crashes via a crafted archive.",
    "cve_publish_date": "2019-11-21",
    "cwe_id": "CWE-125",
    "cwe_name": "Out-of-bounds Read",
    "cwe_description": "The product reads data past the end, or before the beginning, of the intended buffer.",
    "commit_message": "Bugfix and optimize archive_wstring_append_from_mbs()\n\nThe cal to mbrtowc() or mbtowc() should read up to mbs_length\nbytes and not wcs_length. This avoids out-of-bounds reads.\n\nmbrtowc() and mbtowc() return (size_t)-1 wit errno EILSEQ when\nthey encounter an invalid multibyte character and (size_t)-2 when\nthey they encounter an incomplete multibyte character. As we return\nfailure and all our callers error out it makes no sense to continue\nparsing mbs.\n\nAs we allocate `len` wchars at the beginning and each wchar has\nat least one byte, there will never be need to grow the buffer,\nso the code can be left out. On the other hand, we are always\nallocatng more memory than we need.\n\nAs long as wcs_length == mbs_length == len we can omit wcs_length.\nWe keep the old code commented if we decide to save memory and\nuse autoexpanding wcs_length in the future.\n\nFixes #1276",
    "type_of_change": "Modification",
    "filename_of_changes": "archive_string.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "17",
    "number_of_lines_deleted_vulnerable_to_cve": "11",
    "vulnerable_lines": [
        "// Line_Reference 594: \tsize_t wcs_length = len;",
        "// Line_Reference 603: \tif (NULL == archive_wstring_ensure(dest, dest->length + wcs_length + 1))",
        "// Line_Reference 622: \t\tr = mbrtowc(wcs, mbs, wcs_length, &shift_state);",
        "// Line_Reference 624: \t\tr = mbtowc(wcs, mbs, wcs_length);",
        "// Line_Reference 628: \t\t\tif (errno == EILSEQ) {",
        "// Line_Reference 629: \t\t\t\t++mbs;",
        "// Line_Reference 630: \t\t\t\t--mbs_length;",
        "// Line_Reference 631: \t\t\t\tcontinue;",
        "// Line_Reference 632: \t\t\t} else",
        "// Line_Reference 633: \t\t\t\tbreak;",
        "// Line_Reference 638: \t\twcs_length--;"
    ]
}
