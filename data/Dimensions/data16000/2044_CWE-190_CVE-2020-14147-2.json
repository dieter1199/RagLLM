{
    "cve_id": "CVE-2020-14147",
    "cve_description": "An integer overflow in the getnum function in lua_struct.c in Redis before 6.0.3 allows context-dependent attackers with permission to run Lua code in a Redis session to cause a denial of service (memory corruption and application crash) or possibly bypass intended sandbox restrictions via a large number, which triggers a stack-based buffer overflow. NOTE: this issue exists because of a CVE-2015-8080 regression.",
    "cve_publish_date": "2020-06-15",
    "cwe_id": "CWE-190",
    "cwe_name": "Integer Overflow or Wraparound",
    "cwe_description": "The product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number.",
    "commit_message": "[FIX] revisit CVE-2015-8080 vulnerability",
    "type_of_change": "Modification",
    "filename_of_changes": "lua_struct.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "6",
    "number_of_lines_deleted_vulnerable_to_cve": "4",
    "vulnerable_lines": [
        "// Line_Reference 92: static int getnum (const char **fmt, int df) {",
        "// Line_Reference 118:     case 'c': return getnum(fmt, 1);",
        "// Line_Reference 120:       int sz = getnum(fmt, sizeof(int));",
        "// Line_Reference 153:       int a = getnum(fmt, MAXALIGN);"
    ]
}
