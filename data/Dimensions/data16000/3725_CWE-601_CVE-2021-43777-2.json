{
    "cve_id": "CVE-2021-43777",
    "cve_description": "Redash is a package for data visualization and sharing. In Redash version 10.0 and prior, the implementation of Google Login (via OAuth) incorrectly uses the `state` parameter to pass the next URL to redirect the user to after login. The `state` parameter should be used for a Cross-Site Request Forgery (CSRF) token, not a static and easily predicted value. This vulnerability does not affect users who do not use Google Login for their instance of Redash. A patch in the `master` and `release/10.x.x` branches addresses this by replacing `Flask-Oauthlib` with `Authlib` which automatically provides and validates a CSRF token for the state variable. The new implementation stores the next URL on the user session object. As a workaround, one may disable Google Login to mitigate the vulnerability.",
    "cve_publish_date": "2021-11-24",
    "cwe_id": "CWE-601",
    "cwe_name": "URL Redirection to Untrusted Site ('Open Redirect')",
    "cwe_description": "A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.",
    "commit_message": "Merge pull request from GHSA-vhc7-w7r8-8m34\n\n* WIP: break the flask_oauthlib behavior\n\n* Refactor google-oauth to use cryptographic state.\n\n* Clean up comments\n\n* Fix: tests didn't pass because of the scope issues.\n\nMoved outside the create_blueprint method because this does not depend\non the Authlib object.\n\n* Apply Arik's fixes. Tests pass.",
    "type_of_change": "Modification",
    "filename_of_changes": "google_oauth.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "94",
    "number_of_lines_deleted_vulnerable_to_cve": "87",
    "vulnerable_lines": [
        "// Line_Reference 4: from flask_oauthlib.client import OAuth",
        "// Line_Reference 14: logger = logging.getLogger(\"google_oauth\")",
        "// Line_Reference 15: ",
        "// Line_Reference 16: oauth = OAuth()",
        "// Line_Reference 17: blueprint = Blueprint(\"google_oauth\", __name__)",
        "// Line_Reference 18: ",
        "// Line_Reference 19: ",
        "// Line_Reference 20: def google_remote_app():",
        "// Line_Reference 21:     if \"google\" not in oauth.remote_apps:",
        "// Line_Reference 22:         oauth.remote_app(",
        "// Line_Reference 23:             \"google\",",
        "// Line_Reference 24:             base_url=\"https://www.google.com/accounts/\",",
        "// Line_Reference 25:             authorize_url=\"https://accounts.google.com/o/oauth2/auth?prompt=select_account+consent\",",
        "// Line_Reference 26:             request_token_url=None,",
        "// Line_Reference 27:             request_token_params={",
        "// Line_Reference 28:                 \"scope\": \"https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/userinfo.profile\"",
        "// Line_Reference 29:             },",
        "// Line_Reference 30:             access_token_url=\"https://accounts.google.com/o/oauth2/token\",",
        "// Line_Reference 31:             access_token_method=\"POST\",",
        "// Line_Reference 32:             consumer_key=settings.GOOGLE_CLIENT_ID,",
        "// Line_Reference 33:             consumer_secret=settings.GOOGLE_CLIENT_SECRET,",
        "// Line_Reference 34:         )",
        "// Line_Reference 35: ",
        "// Line_Reference 36:     return oauth.google",
        "// Line_Reference 37: ",
        "// Line_Reference 38: ",
        "// Line_Reference 39: def get_user_profile(access_token):",
        "// Line_Reference 40:     headers = {\"Authorization\": \"OAuth {}\".format(access_token)}",
        "// Line_Reference 41:     response = requests.get(",
        "// Line_Reference 42:         \"https://www.googleapis.com/oauth2/v1/userinfo\", headers=headers",
        "// Line_Reference 43:     )",
        "// Line_Reference 44: ",
        "// Line_Reference 45:     if response.status_code == 401:",
        "// Line_Reference 46:         logger.warning(\"Failed getting user profile (response code 401).\")",
        "// Line_Reference 47:         return None",
        "// Line_Reference 48: ",
        "// Line_Reference 49:     return response.json()",
        "// Line_Reference 68: @blueprint.route(\"/<org_slug>/oauth/google\", endpoint=\"authorize_org\")",
        "// Line_Reference 69: def org_login(org_slug):",
        "// Line_Reference 70:     session[\"org_slug\"] = current_org.slug",
        "// Line_Reference 71:     return redirect(url_for(\".authorize\", next=request.args.get(\"next\", None)))",
        "// Line_Reference 74: @blueprint.route(\"/oauth/google\", endpoint=\"authorize\")",
        "// Line_Reference 75: def login():",
        "// Line_Reference 76:     callback = url_for(\".callback\", _external=True)",
        "// Line_Reference 77:     next_path = request.args.get(",
        "// Line_Reference 78:         \"next\", url_for(\"redash.index\", org_slug=session.get(\"org_slug\"))",
        "// Line_Reference 80:     logger.debug(\"Callback url: %s\", callback)",
        "// Line_Reference 81:     logger.debug(\"Next is: %s\", next_path)",
        "// Line_Reference 82:     return google_remote_app().authorize(callback=callback, state=next_path)",
        "// Line_Reference 83: ",
        "// Line_Reference 84: ",
        "// Line_Reference 85: @blueprint.route(\"/oauth/google_callback\", endpoint=\"callback\")",
        "// Line_Reference 86: def authorized():",
        "// Line_Reference 87:     resp = google_remote_app().authorized_response()",
        "// Line_Reference 88:     access_token = resp[\"access_token\"]",
        "// Line_Reference 89: ",
        "// Line_Reference 90:     if access_token is None:",
        "// Line_Reference 91:         logger.warning(\"Access token missing in call back request.\")",
        "// Line_Reference 92:         flash(\"Validation error. Please retry.\")",
        "// Line_Reference 93:         return redirect(url_for(\"redash.login\"))",
        "// Line_Reference 94: ",
        "// Line_Reference 95:     profile = get_user_profile(access_token)",
        "// Line_Reference 96:     if profile is None:",
        "// Line_Reference 97:         flash(\"Validation error. Please retry.\")",
        "// Line_Reference 98:         return redirect(url_for(\"redash.login\"))",
        "// Line_Reference 99: ",
        "// Line_Reference 100:     if \"org_slug\" in session:",
        "// Line_Reference 101:         org = models.Organization.get_by_slug(session.pop(\"org_slug\"))",
        "// Line_Reference 102:     else:",
        "// Line_Reference 103:         org = current_org",
        "// Line_Reference 104: ",
        "// Line_Reference 105:     if not verify_profile(org, profile):",
        "// Line_Reference 106:         logger.warning(",
        "// Line_Reference 107:             \"User tried to login with unauthorized domain name: %s (org: %s)\",",
        "// Line_Reference 108:             profile[\"email\"],",
        "// Line_Reference 109:             org,",
        "// Line_Reference 111:         flash(\"Your Google Apps account ({}) isn't allowed.\".format(profile[\"email\"]))",
        "// Line_Reference 112:         return redirect(url_for(\"redash.login\", org_slug=org.slug))",
        "// Line_Reference 114:     picture_url = \"%s?sz=40\" % profile[\"picture\"]",
        "// Line_Reference 115:     user = create_and_login_user(org, profile[\"name\"], profile[\"email\"], picture_url)",
        "// Line_Reference 116:     if user is None:",
        "// Line_Reference 117:         return logout_and_redirect_to_index()",
        "// Line_Reference 119:     unsafe_next_path = request.args.get(\"state\") or url_for(",
        "// Line_Reference 120:         \"redash.index\", org_slug=org.slug",
        "// Line_Reference 121:     )",
        "// Line_Reference 122:     next_path = get_next_path(unsafe_next_path)",
        "// Line_Reference 124:     return redirect(next_path)"
    ]
}
