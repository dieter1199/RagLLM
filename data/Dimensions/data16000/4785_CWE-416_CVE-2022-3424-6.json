{
    "cve_id": "CVE-2022-3424",
    "cve_description": "A use-after-free flaw was found in the Linux kernelâ€™s SGI GRU driver in the way the first gru_file_unlocked_ioctl function is called by the user, where a fail pass occurs in the gru_check_chiplet_assignment function. This flaw allows a local user to crash or potentially escalate their privileges on the system.",
    "cve_publish_date": "2023-03-06",
    "cwe_id": "CWE-416",
    "cwe_name": "Use After Free",
    "cwe_description": "The product reuses or references memory after it has been freed. At some point afterward, the memory may be allocated again and saved in another pointer, while the original pointer references a location somewhere within the new allocation. Any operations using the original pointer are no longer valid because the memory \"belongs\" to the code that operates on the new pointer.",
    "commit_message": "misc: sgi-gru: fix use-after-free error in gru_set_context_option, gru_fault and gru_handle_user_call_os\n\nIn some bad situation, the gts may be freed gru_check_chiplet_assignment.\nThe call chain can be gru_unload_context->gru_free_gru_context->gts_drop\nand kfree finally. However, the caller didn't know if the gts is freed\nor not and use it afterwards. This will trigger a Use after Free bug.\n\nFix it by introducing a return value to see if it's in error path or not.\nFree the gts in caller if gru_check_chiplet_assignment check failed.\n\nFixes: 55484c45dbec (\"gru: allow users to specify gru chiplet 2\")\nSigned-off-by: Zheng Wang <zyytlz.wz@163.com>\nAcked-by: Dimitri Sivanich <sivanich@hpe.com>\nLink: https://lore.kernel.org/r/20221110035033.19498-1-zyytlz.wz@163.com\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "grutables.h",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "1",
    "number_of_lines_deleted_vulnerable_to_cve": "1",
    "vulnerable_lines": [
        "// Line_Reference 635: extern void gru_check_context_placement(struct gru_thread_state *gts);"
    ]
}
