{
    "cve_id": "CVE-2022-41887",
    "cve_description": "TensorFlow is an open source platform for machine learning. `tf.keras.losses.poisson` receives a `y_pred` and `y_true` that are passed through `functor::mul` in `BinaryOp`. If the resulting dimensions overflow an `int32`, TensorFlow will crash due to a size mismatch during broadcast assignment. We have patched the issue in GitHub commit c5b30379ba87cbe774b08ac50c1f6d36df4ebb7c. The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1 and 2.9.3, as these are also affected and still in supported range. However, we will not cherrypick this commit into TensorFlow 2.8.x, as it depends on Eigen behavior that changed between 2.8 and 2.9.",
    "cve_publish_date": "2022-11-18",
    "cwe_id": "CWE-131",
    "cwe_name": "Incorrect Calculation of Buffer Size",
    "cwe_description": "The product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.",
    "commit_message": "Fix cwise dimension overflow issue again.\n\nIf resulting dimensions overflow an int32, we were seeing an overflow and\ncrash due to size mismatch during broadcast assignment.  The cause is a simple\ndimension type mismatch.\n\nNote that actual tests for this are currently impractical, since successful\noperations require more than 2^32 elements and OOM on most machines.\n\nPiperOrigin-RevId: 479336566",
    "type_of_change": "Modification",
    "filename_of_changes": "cwise_ops_common.h",
    "code_language": "C++",
    "number_of_lines_added_for_mitigation": "10",
    "number_of_lines_deleted_vulnerable_to_cve": "8",
    "vulnerable_lines": [
        "// Line_Reference 453:   inline Eigen::IndexList<int, Eigen::type2index<1>> NByOne(int n) {",
        "// Line_Reference 454:     Eigen::IndexList<int, Eigen::type2index<1>> ret;",
        "// Line_Reference 458:   inline Eigen::IndexList<Eigen::type2index<1>, int> OneByM(int m) {",
        "// Line_Reference 459:     Eigen::IndexList<Eigen::type2index<1>, int> ret;",
        "// Line_Reference 490:       const int a = in0.dimension(0);  // in0 is shape [a, b]",
        "// Line_Reference 491:       const int b = in0.dimension(1);",
        "// Line_Reference 492:       const int c = in1.dimension(0);  // in1 is shape [c, d]",
        "// Line_Reference 493:       const int d = in1.dimension(1);"
    ]
}
