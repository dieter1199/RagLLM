{
    "cve_id": "CVE-2022-46153",
    "cve_description": "Traefik is an open source HTTP reverse proxy and load balancer. In affected versions there is a potential vulnerability in Traefik managing TLS connections. A router configured with a not well-formatted TLSOption is exposed with an empty TLSOption. For instance, a route secured using an mTLS connection set with a wrong CA file is exposed without verifying the client certificates. Users are advised to upgrade to version 2.9.6. Users unable to upgrade should check their logs to detect the error messages and fix your TLS options.",
    "cve_publish_date": "2022-12-08",
    "cwe_id": "CWE-295",
    "cwe_name": "Improper Certificate Validation",
    "cwe_description": "The product does not validate, or incorrectly validates, a certificate.",
    "commit_message": "Handle broken TLS conf better\n\nCo-authored-by: Jean-Baptiste Doumenjou <925513+jbdoumenjou@users.noreply.github.com>\nCo-authored-by: Romain <rtribotte@users.noreply.github.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "tlsmanager_test.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "13",
    "number_of_lines_deleted_vulnerable_to_cve": "36",
    "vulnerable_lines": [
        "// Line_Reference 122: \t\t\"foo\": {MinVersion: \"VersionTLS12\"},",
        "// Line_Reference 123: \t\t\"bar\": {MinVersion: \"VersionTLS11\"},",
        "// Line_Reference 143: \t\t\tdesc:           \"Get an tls config from an invalid name\",",
        "// Line_Reference 148: \t\t\tdesc:           \"Get an tls config from unexisting 'default' name\",",
        "// Line_Reference 164: \t\t\t\tassert.Error(t, err)",
        "// Line_Reference 168: \t\t\tassert.NoError(t, err)",
        "// Line_Reference 169: \t\t\tassert.Equal(t, config.MinVersion, test.expectedMinVersion)",
        "// Line_Reference 170: \t\t})",
        "// Line_Reference 171: \t}",
        "// Line_Reference 172: }",
        "// Line_Reference 173: ",
        "// Line_Reference 174: func TestManager_Get_GetCertificate(t *testing.T) {",
        "// Line_Reference 175: \ttestCases := []struct {",
        "// Line_Reference 176: \t\tdesc                 string",
        "// Line_Reference 177: \t\texpectedGetConfigErr require.ErrorAssertionFunc",
        "// Line_Reference 178: \t\texpectedCertificate  assert.ValueAssertionFunc",
        "// Line_Reference 179: \t}{",
        "// Line_Reference 180: \t\t{",
        "// Line_Reference 181: \t\t\tdesc:                 \"Get a default certificate from non-existing store\",",
        "// Line_Reference 182: \t\t\texpectedGetConfigErr: require.Error,",
        "// Line_Reference 183: \t\t\texpectedCertificate:  assert.Nil,",
        "// Line_Reference 184: \t\t},",
        "// Line_Reference 185: \t}",
        "// Line_Reference 186: ",
        "// Line_Reference 187: \ttlsManager := NewManager()",
        "// Line_Reference 188: ",
        "// Line_Reference 189: \tfor _, test := range testCases {",
        "// Line_Reference 190: \t\ttest := test",
        "// Line_Reference 191: \t\tt.Run(test.desc, func(t *testing.T) {",
        "// Line_Reference 192: \t\t\tt.Parallel()",
        "// Line_Reference 193: ",
        "// Line_Reference 194: \t\t\tconfig, err := tlsManager.Get(\"default\", \"foo\")",
        "// Line_Reference 195: \t\t\ttest.expectedGetConfigErr(t, err)",
        "// Line_Reference 196: ",
        "// Line_Reference 197: \t\t\tcertificate, err := config.GetCertificate(&tls.ClientHelloInfo{})",
        "// Line_Reference 199: \t\t\ttest.expectedCertificate(t, certificate)"
    ]
}
