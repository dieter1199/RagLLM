* Copyright (C) 2010-2020 Oryx Embedded SARL. All rights reserved.
* @version 2.0.0
enc624j600WriteReg(interface, ENC624J600_REG_ECON2, ECON2_ETHEN | ECON2_STRCH);
temp = enc624j600ReadReg(interface, ENC624J600_REG_MAADR1);
temp = enc624j600ReadReg(interface, ENC624J600_REG_MAADR2);
temp = enc624j600ReadReg(interface, ENC624J600_REG_MAADR3);
enc624j600WriteReg(interface, ENC624J600_REG_MAADR1, temp);
enc624j600WriteReg(interface, ENC624J600_REG_MAADR2, temp);
enc624j600WriteReg(interface, ENC624J600_REG_MAADR3, temp);
enc624j600WriteReg(interface, ENC624J600_REG_ERXST, ENC624J600_RX_BUFFER_START);
enc624j600WriteReg(interface, ENC624J600_REG_ERXTAIL, ENC624J600_RX_BUFFER_STOP);
enc624j600WriteReg(interface, ENC624J600_REG_ERXFCON, ERXFCON_HTEN |
ERXFCON_CRCEN | ERXFCON_RUNTEN | ERXFCON_UCEN | ERXFCON_BCEN);
enc624j600WriteReg(interface, ENC624J600_REG_EHT1, 0x0000);
enc624j600WriteReg(interface, ENC624J600_REG_EHT2, 0x0000);
enc624j600WriteReg(interface, ENC624J600_REG_EHT3, 0x0000);
enc624j600WriteReg(interface, ENC624J600_REG_EHT4, 0x0000);
//All short frames will be zero-padded to 60 bytes and a valid CRC is then appended
enc624j600WriteReg(interface, ENC624J600_REG_MACON2,
MACON2_DEFER | MACON2_PADCFG0 | MACON2_TXCRCEN | MACON2_R1);
enc624j600WriteReg(interface, ENC624J600_REG_MAMXFL, ETH_MAX_FRAME_SIZE);
enc624j600WritePhyReg(interface, ENC624J600_PHY_REG_PHANA, PHANA_ADPAUS0 |
PHANA_AD100FD | PHANA_AD100 | PHANA_AD10FD | PHANA_AD10 | PHANA_ADIEEE0);
enc624j600WriteReg(interface, ENC624J600_REG_EIR, 0x0000);
enc624j600WriteReg(interface, ENC624J600_REG_EIE, EIE_INTIE |
EIE_LINKIE | EIE_PKTIE | EIE_TXIE | EIE_TXABTIE);
enc624j600SetBit(interface, ENC624J600_REG_ECON1, ECON1_RXEN);
enc624j600ClearBit(interface, ENC624J600_REG_EIE, EIE_INTIE);
status = enc624j600ReadReg(interface, ENC624J600_REG_EIR);
if((status & EIR_LINKIF) != 0)
enc624j600ClearBit(interface, ENC624J600_REG_EIE, EIE_LINKIE);
if((status & EIR_PKTIF) != 0)
enc624j600ClearBit(interface, ENC624J600_REG_EIE, EIE_PKTIE);
if((status & (EIR_TXIF | EIR_TXABTIF)) != 0)
enc624j600ClearBit(interface, ENC624J600_REG_EIR, EIR_TXIF | EIR_TXABTIF);
enc624j600SetBit(interface, ENC624J600_REG_EIE, EIE_INTIE);
status = enc624j600ReadReg(interface, ENC624J600_REG_EIR);
if((status & EIR_LINKIF) != 0)
enc624j600ClearBit(interface, ENC624J600_REG_EIR, EIR_LINKIF);
value = enc624j600ReadReg(interface, ENC624J600_REG_ESTAT);
if((value & ESTAT_PHYLNK) != 0)
value = enc624j600ReadPhyReg(interface, ENC624J600_PHY_REG_PHSTAT3);
if((value & PHSTAT3_SPDDPX1) != 0)
if((value & PHSTAT3_SPDDPX2) != 0)
if((status & EIR_PKTIF) != 0)
enc624j600ClearBit(interface, ENC624J600_REG_EIR, EIR_PKTIF);
enc624j600SetBit(interface, ENC624J600_REG_EIE, EIE_LINKIE | EIE_PKTIE);
if(enc624j600ReadReg(interface, ENC624J600_REG_ECON1) & ECON1_TXRTS)
enc624j600WriteReg(interface, ENC624J600_REG_EGPWRPT, ENC624J600_TX_BUFFER_START);
enc624j600WriteReg(interface, ENC624J600_REG_ETXST, ENC624J600_TX_BUFFER_START);
enc624j600WriteReg(interface, ENC624J600_REG_ETXLEN, length);
enc624j600ClearBit(interface, ENC624J600_REG_EIR, EIR_TXIF | EIR_TXABTIF);
enc624j600SetBit(interface, ENC624J600_REG_ECON1, ECON1_TXRTS);
uint16_t n;
if(enc624j600ReadReg(interface, ENC624J600_REG_ESTAT) & ESTAT_PKTCNT)
enc624j600WriteReg(interface, ENC624J600_REG_ERXRDPT, context->nextPacket);
//Read the first two bytes, which are the address of the next packet
enc624j600ReadBuffer(interface, ENC624J600_CMD_RRXDATA,
(uint8_t *) &context->nextPacket, sizeof(uint16_t));
//Convert the value to host byte order
context->nextPacket = letoh16(context->nextPacket);
//Get the length of the received frame in bytes
enc624j600ReadBuffer(interface, ENC624J600_CMD_RRXDATA,
(uint8_t *) &n, sizeof(uint16_t));
//Convert the value to host byte order
n = letoh16(n);
//Read the receive status vector (RSV)
enc624j600ReadBuffer(interface, ENC624J600_CMD_RRXDATA,
(uint8_t *) &status, sizeof(uint32_t));
//Convert the value to host byte order
status = letoh32(status);
if((status & RSV_RECEIVED_OK) != 0)
n = MIN(n, ETH_MAX_FRAME_SIZE);
enc624j600ReadBuffer(interface, ENC624J600_CMD_RRXDATA, context->rxBuffer, n);
enc624j600WriteReg(interface, ENC624J600_REG_ERXTAIL, ENC624J600_RX_BUFFER_STOP);
enc624j600WriteReg(interface, ENC624J600_REG_ERXTAIL, context->nextPacket - 2);
enc624j600SetBit(interface, ENC624J600_REG_ECON1, ECON1_PKTDEC);
nicProcessPacket(interface, context->rxBuffer, n, &ancillary);
enc624j600WriteReg(interface, ENC624J600_REG_EHT1, hashTable[0]);
enc624j600WriteReg(interface, ENC624J600_REG_EHT2, hashTable[1]);
enc624j600WriteReg(interface, ENC624J600_REG_EHT3, hashTable[2]);
enc624j600WriteReg(interface, ENC624J600_REG_EHT4, hashTable[3]);
TRACE_DEBUG("  EHT1 = %04" PRIX16 "\r\n", enc624j600ReadReg(interface, ENC624J600_REG_EHT1));
TRACE_DEBUG("  EHT2 = %04" PRIX16 "\r\n", enc624j600ReadReg(interface, ENC624J600_REG_EHT2));
TRACE_DEBUG("  EHT3 = %04" PRIX16 "\r\n", enc624j600ReadReg(interface, ENC624J600_REG_EHT3));
TRACE_DEBUG("  EHT4 = %04" PRIX16 "\r\n", enc624j600ReadReg(interface, ENC624J600_REG_EHT4));
duplexMode = enc624j600ReadReg(interface, ENC624J600_REG_ESTAT) & ESTAT_PHYDPX;
enc624j600WriteReg(interface, ENC624J600_REG_MACON2, MACON2_DEFER |
MACON2_PADCFG2 | MACON2_PADCFG0 | MACON2_TXCRCEN | MACON2_R1 | MACON2_FULDPX);
enc624j600WriteReg(interface, ENC624J600_REG_MABBIPG, 0x15);
enc624j600WriteReg(interface, ENC624J600_REG_MACON2, MACON2_DEFER |
MACON2_PADCFG2 | MACON2_PADCFG0 | MACON2_TXCRCEN | MACON2_R1);
enc624j600WriteReg(interface, ENC624J600_REG_MABBIPG, 0x12);
enc624j600WriteReg(interface, ENC624J600_REG_EUDAST, 0x1234);
} while(enc624j600ReadReg(interface, ENC624J600_REG_EUDAST) != 0x1234);
while((enc624j600ReadReg(interface, ENC624J600_REG_ESTAT) & ESTAT_CLKRDY) == 0)
enc624j600SetBit(interface, ENC624J600_REG_ECON2, ECON2_ETHRST);
if(enc624j600ReadReg(interface, ENC624J600_REG_EUDAST) != 0x0000)
enc624j600WriteReg(interface, ENC624J600_REG_MIREGADR, MIREGADR_R8 | address);
enc624j600WriteReg(interface, ENC624J600_REG_MIWR, data);
while((enc624j600ReadReg(interface, ENC624J600_REG_MISTAT) & MISTAT_BUSY) != 0)
}
enc624j600WriteReg(interface, ENC624J600_REG_MIREGADR, MIREGADR_R8 | address);
enc624j600WriteReg(interface, ENC624J600_REG_MICMD, MICMD_MIIRD);
while((enc624j600ReadReg(interface, ENC624J600_REG_MISTAT) & MISTAT_BUSY) != 0)
}
enc624j600WriteReg(interface, ENC624J600_REG_MICMD, 0x00);
return enc624j600ReadReg(interface, ENC624J600_REG_MIRD);
