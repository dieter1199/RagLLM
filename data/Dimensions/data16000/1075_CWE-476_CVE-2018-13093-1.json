{
    "cve_id": "CVE-2018-13093",
    "cve_description": "An issue was discovered in fs/xfs/xfs_icache.c in the Linux kernel through 4.17.3. There is a NULL pointer dereference and panic in lookup_slow() on a NULL inode->i_ops pointer when doing pathwalks on a corrupted xfs image. This occurs because of a lack of proper validation that cached inodes are free during allocation.",
    "cve_publish_date": "2018-07-03",
    "cwe_id": "CWE-476",
    "cwe_name": "NULL Pointer Dereference",
    "cwe_description": "The product dereferences a pointer that it expects to be valid but is NULL.",
    "commit_message": "xfs: validate cached inodes are free when allocated\n\nA recent fuzzed filesystem image cached random dcache corruption\nwhen the reproducer was run. This often showed up as panics in\nlookup_slow() on a null inode->i_ops pointer when doing pathwalks.\n\nBUG: unable to handle kernel NULL pointer dereference at 0000000000000000\n....\nCall Trace:\n lookup_slow+0x44/0x60\n walk_component+0x3dd/0x9f0\n link_path_walk+0x4a7/0x830\n path_lookupat+0xc1/0x470\n filename_lookup+0x129/0x270\n user_path_at_empty+0x36/0x40\n path_listxattr+0x98/0x110\n SyS_listxattr+0x13/0x20\n do_syscall_64+0xf5/0x280\n entry_SYSCALL_64_after_hwframe+0x42/0xb7\n\nbut had many different failure modes including deadlocks trying to\nlock the inode that was just allocated or KASAN reports of\nuse-after-free violations.\n\nThe cause of the problem was a corrupt INOBT on a v4 fs where the\nroot inode was marked as free in the inobt record. Hence when we\nallocated an inode, it chose the root inode to allocate, found it in\nthe cache and re-initialised it.\n\nWe recently fixed a similar inode allocation issue caused by inobt\nrecord corruption problem in xfs_iget_cache_miss() in commit\nee457001ed6c (\"xfs: catch inode allocation state mismatch\ncorruption\"). This change adds similar checks to the cache-hit path\nto catch it, and turns the reproducer into a corruption shutdown\nsituation.\n\nReported-by: Wen Xu <wen.xu@gatech.edu>\nSigned-Off-By: Dave Chinner <dchinner@redhat.com>\nReviewed-by: Christoph Hellwig <hch@lst.de>\nReviewed-by: Carlos Maiolino <cmaiolino@redhat.com>\nReviewed-by: Darrick J. Wong <darrick.wong@oracle.com>\n[darrick: fix typos in comment]\nSigned-off-by: Darrick J. Wong <darrick.wong@oracle.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "xfs_icache.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "48",
    "number_of_lines_deleted_vulnerable_to_cve": "25",
    "vulnerable_lines": [
        "// Line_Reference 360: \t * If lookup is racing with unlink return an error immediately.",
        "// Line_Reference 362: \tif (VFS_I(ip)->i_mode == 0 && !(flags & XFS_IGET_CREATE)) {",
        "// Line_Reference 363: \t\terror = -ENOENT;",
        "// Line_Reference 365: \t}",
        "// Line_Reference 488: \t * If we are allocating a new inode, then check what was returned is",
        "// Line_Reference 489: \t * actually a free, empty inode. If we are not allocating an inode,",
        "// Line_Reference 490: \t * the check we didn't find a free inode.",
        "// Line_Reference 492: \tif (flags & XFS_IGET_CREATE) {",
        "// Line_Reference 493: \t\tif (VFS_I(ip)->i_mode != 0) {",
        "// Line_Reference 494: \t\t\txfs_warn(mp,",
        "// Line_Reference 495: \"Corruption detected! Free inode 0x%llx not marked free on disk\",",
        "// Line_Reference 496: \t\t\t\tino);",
        "// Line_Reference 497: \t\t\terror = -EFSCORRUPTED;",
        "// Line_Reference 498: \t\t\tgoto out_destroy;",
        "// Line_Reference 499: \t\t}",
        "// Line_Reference 500: \t\tif (ip->i_d.di_nblocks != 0) {",
        "// Line_Reference 501: \t\t\txfs_warn(mp,",
        "// Line_Reference 502: \"Corruption detected! Free inode 0x%llx has blocks allocated!\",",
        "// Line_Reference 503: \t\t\t\tino);",
        "// Line_Reference 504: \t\t\terror = -EFSCORRUPTED;",
        "// Line_Reference 505: \t\t\tgoto out_destroy;",
        "// Line_Reference 506: \t\t}",
        "// Line_Reference 507: \t} else if (VFS_I(ip)->i_mode == 0) {",
        "// Line_Reference 508: \t\terror = -ENOENT;",
        "// Line_Reference 510: \t}"
    ]
}
