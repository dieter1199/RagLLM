{
    "cve_id": "CVE-2020-7769",
    "cve_description": "This affects the package nodemailer before 6.4.16. Use of crafted recipient email addresses may result in arbitrary command flag injection in sendmail transport for sending mails.",
    "cve_publish_date": "2020-11-12",
    "cwe_id": "CWE-88",
    "cwe_name": "Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')",
    "cwe_description": "The product constructs a string for a command to be executed by a separate component\nin another control sphere, but it does not properly delimit the\nintended arguments, options, or switches within that command string.",
    "commit_message": "v6.4.16",
    "type_of_change": "Modification",
    "filename_of_changes": "smtp-connection-test.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "177",
    "number_of_lines_deleted_vulnerable_to_cve": "192",
    "vulnerable_lines": [
        "// Line_Reference 27: describe('SMTP-Connection Tests', function() {",
        "// Line_Reference 28:     describe('Version test', function() {",
        "// Line_Reference 29:         it('Should expose version number', function() {",
        "// Line_Reference 35:     describe('Connection tests', function() {",
        "// Line_Reference 38:         beforeEach(function(done) {",
        "// Line_Reference 40:                 onAuth: function(auth, session, callback) {",
        "// Line_Reference 48:                 onData: function(stream, session, callback) {",
        "// Line_Reference 49:                     stream.on('data', function() {});",
        "// Line_Reference 56:                 onData: function(stream, session, callback) {",
        "// Line_Reference 58:                     stream.on('data', function(chunk) {",
        "// Line_Reference 68:                     stream.on('end', function() {",
        "// Line_Reference 75:             invalidServer = net.createServer(function() {});",
        "// Line_Reference 79:                 onAuth: function(auth, session, callback) {",
        "// Line_Reference 87:                 onData: function(stream, session, callback) {",
        "// Line_Reference 88:                     stream.on('data', function() {});",
        "// Line_Reference 96:             server.listen(PORT_NUMBER, function() {",
        "// Line_Reference 97:                 invalidServer.listen(PORT_NUMBER + 1, function() {",
        "// Line_Reference 98:                     secureServer.listen(PORT_NUMBER + 2, function() {",
        "// Line_Reference 99:                         insecureServer.listen(PORT_NUMBER + 3, function() {",
        "// Line_Reference 107:         afterEach(function(done) {",
        "// Line_Reference 108:             server.close(function() {",
        "// Line_Reference 109:                 invalidServer.close(function() {",
        "// Line_Reference 110:                     secureServer.close(function() {",
        "// Line_Reference 111:                         insecureServer.close(function() {",
        "// Line_Reference 119:         it('should connect to unsecure server', function(done) {",
        "// Line_Reference 126:             client.connect(function() {",
        "// Line_Reference 131:             client.on('error', function(err) {",
        "// Line_Reference 138:         it('should connect to a server and upgrade with STARTTLS', function(done) {",
        "// Line_Reference 144:             client.connect(function() {",
        "// Line_Reference 149:             client.on('error', function(err) {",
        "// Line_Reference 156:         it('should connect to a server and upgrade with forced STARTTLS', function(done) {",
        "// Line_Reference 164:             client.connect(function() {",
        "// Line_Reference 169:             client.on('error', function(err) {",
        "// Line_Reference 176:         it('should connect to a server and try to upgrade STARTTLS', function(done) {",
        "// Line_Reference 184:             client.connect(function() {",
        "// Line_Reference 189:             client.on('error', function(err) {",
        "// Line_Reference 196:         it('should try upgrade with STARTTLS where not advertised', function(done) {",
        "// Line_Reference 203:             client.connect(function() {",
        "// Line_Reference 209:             client.once('error', function(err) {",
        "// Line_Reference 216:         it('should close connection after STARTTLS', function(done) {",
        "// Line_Reference 222:             client.connect(function() {",
        "// Line_Reference 224:                 server.connections.forEach(function(conn) {",
        "// Line_Reference 229:             client.on('error', function(err) {",
        "// Line_Reference 236:         it('should connect to a secure server', function(done) {",
        "// Line_Reference 243:             client.connect(function() {",
        "// Line_Reference 248:             client.on('error', function(err) {",
        "// Line_Reference 255:         it('should emit error for invalid port', function(done) {",
        "// Line_Reference 261:             client.connect(function() {",
        "// Line_Reference 267:             client.once('error', function(err) {",
        "// Line_Reference 274:         it('should emit error for too large port', function(done) {",
        "// Line_Reference 280:             client.connect(function() {",
        "// Line_Reference 286:             client.once('error', function(err) {",
        "// Line_Reference 293:         it('should emit inactivity timeout error', function(done) {",
        "// Line_Reference 300:             client.connect(function() {",
        "// Line_Reference 304:             client.once('error', function(err) {",
        "// Line_Reference 312:         it('should connect through proxy', function(done) {",
        "// Line_Reference 313:             let runTest = function(socket) {",
        "// Line_Reference 320:                 client.connect(function() {",
        "// Line_Reference 330:                         function(err) {",
        "// Line_Reference 338:                 client.on('error', function(err) {",
        "// Line_Reference 345:             proxyConnect(PROXY_PORT_NUMBER, '127.0.0.1', PORT_NUMBER, '127.0.0.1', function(err, socket) {",
        "// Line_Reference 351:         it('should connect through proxy to secure server', function(done) {",
        "// Line_Reference 352:             let runTest = function(socket) {",
        "// Line_Reference 360:                 client.connect(function() {",
        "// Line_Reference 370:                         function(err) {",
        "// Line_Reference 378:                 client.on('error', function(err) {",
        "// Line_Reference 385:             proxyConnect(PROXY_PORT_NUMBER, '127.0.0.1', PORT_NUMBER + 2, '127.0.0.1', function(err, socket) {",
        "// Line_Reference 391:         it('should send to unsecure server', function(done) {",
        "// Line_Reference 398:             client.on('error', function(err) {",
        "// Line_Reference 402:             client.connect(function() {",
        "// Line_Reference 409:                 server.on('data', function(connection, chunk) {",
        "// Line_Reference 414:                 server.on('dataReady', function(connection, callback) {",
        "// Line_Reference 416:                     expect(body.toString()).to.equal(",
        "// Line_Reference 417:                         message",
        "// Line_Reference 418:                             .toString()",
        "// Line_Reference 419:                             .trim()",
        "// Line_Reference 420:                             .replace(/\\n/g, '\\r\\n')",
        "// Line_Reference 421:                     );",
        "// Line_Reference 431:                     function(err) {",
        "// Line_Reference 442:     describe('Login tests', function() {",
        "// Line_Reference 451:         beforeEach(function(done) {",
        "// Line_Reference 458:                 onData: function(stream, session, callback) {",
        "// Line_Reference 460:                     stream.on('data', function(chunk) {",
        "// Line_Reference 470:                     stream.on('end', function() {",
        "// Line_Reference 475:                 onAuth: function(auth, session, callback) {",
        "// Line_Reference 493:                 onMailFrom: function(address, session, callback) {",
        "// Line_Reference 516:                 onRcptTo: function(address, session, callback) {",
        "// Line_Reference 532:                 onData: function(stream, session, callback) {",
        "// Line_Reference 533:                     stream.on('data', function() {});",
        "// Line_Reference 534:                     stream.on('end', function() {",
        "// Line_Reference 535:                         let response = session.envelope.rcptTo.map(function(rcpt, i) {",
        "// Line_Reference 545:                 onMailFrom: function(address, session, callback) {",
        "// Line_Reference 551:                 onRcptTo: function(address, session, callback) {",
        "// Line_Reference 573:             server.listen(PORT_NUMBER, function() {",
        "// Line_Reference 574:                 lmtpServer.listen(LMTP_PORT_NUMBER, function() {",
        "// Line_Reference 575:                     client.connect(function() {",
        "// Line_Reference 582:         afterEach(function(done) {",
        "// Line_Reference 585:             server.close(function() {",
        "// Line_Reference 590:         it('should login', function(done) {",
        "// Line_Reference 600:                 function(err) {",
        "// Line_Reference 608:         it('should return error for invalid login', function(done) {",
        "// Line_Reference 618:                 function(err) {",
        "// Line_Reference 628:         it('should return error for missing credentials', function(done) {",
        "// Line_Reference 634:                 function(err) {",
        "// Line_Reference 645:         it('should return error for incomplete credentials', function(done) {",
        "// Line_Reference 654:                 function(err) {",
        "// Line_Reference 665:         describe('xoauth2 login', function() {",
        "// Line_Reference 669:             beforeEach(function(done) {",
        "// Line_Reference 672:                     onUpdate: function(username, accessToken) {",
        "// Line_Reference 682:             afterEach(function(done) {",
        "// Line_Reference 686:             it('should login with xoauth2 string', function(done) {",
        "// Line_Reference 697:                     function(err) {",
        "// Line_Reference 705:             it('should return error for invalid xoauth2 string token', function(done) {",
        "// Line_Reference 716:                     function(err) {",
        "// Line_Reference 725:             it('should login with xoauth2 object', function(done) {",
        "// Line_Reference 740:                     function(err) {",
        "// Line_Reference 748:             it('should fail with xoauth2 object', function(done) {",
        "// Line_Reference 763:                     function(err) {",
        "// Line_Reference 771:             it('should fail with invalid xoauth2 response', function(done) {",
        "// Line_Reference 791:                     function(err) {",
        "// Line_Reference 802:         describe('custom login', function() {",
        "// Line_Reference 804:             beforeEach(function(done) {",
        "// Line_Reference 827:             afterEach(function(done) {",
        "// Line_Reference 832:             it('should login', function(done) {",
        "// Line_Reference 843:                     function(err) {",
        "// Line_Reference 852:         describe('Send without PIPELINING', function() {",
        "// Line_Reference 853:             beforeEach(function(done) {",
        "// Line_Reference 854:                 client.on('end', function() {",
        "// Line_Reference 862:                     client.connect(function() {",
        "// Line_Reference 871:                             function(err) {",
        "// Line_Reference 883:             it('should send only to valid recipients without PIPELINING', function(done) {",
        "// Line_Reference 890:                     function(err, info) {",
        "// Line_Reference 908:         describe('Send messages', function() {",
        "// Line_Reference 909:             beforeEach(function(done) {",
        "// Line_Reference 918:                     function(err) {",
        "// Line_Reference 925:             it('should send message', function(done) {",
        "// Line_Reference 932:                     function(err, info) {",
        "// Line_Reference 947:             it('should send multiple messages', function(done) {",
        "// Line_Reference 954:                     function(err, info) {",
        "// Line_Reference 964:                         client.reset(function(err) {",
        "// Line_Reference 973:                                 function(err, info) {",
        "// Line_Reference 991:             it('should send only to valid recipients', function(done) {",
        "// Line_Reference 998:                     function(err, info) {",
        "// Line_Reference 1015:             it('should reject all recipients', function(done) {",
        "// Line_Reference 1022:                     function(err, info) {",
        "// Line_Reference 1032:             it('should reject too large SIZE arguments', function(done) {",
        "// Line_Reference 1040:                     function(err, info) {",
        "// Line_Reference 1048:             it('should reject too large message', function(done) {",
        "// Line_Reference 1056:                     function(err, info) {",
        "// Line_Reference 1064:             it('should declare SIZE', function(done) {",
        "// Line_Reference 1072:                     function(err, info) {",
        "// Line_Reference 1087:             it('lmtp should send only to valid recipients', function(done) {",
        "// Line_Reference 1101:                     function(err, info) {",
        "// Line_Reference 1116:             it('should send using SMTPUTF8', function(done) {",
        "// Line_Reference 1123:                     function(err, info) {",
        "// Line_Reference 1139:             it('should send using 8BITMIME', function(done) {",
        "// Line_Reference 1147:                     function(err, info) {",
        "// Line_Reference 1163:             it('should receive error for 8-bit content without 8BITMIME declaration', function(done) {",
        "// Line_Reference 1171:                     function(err) {",
        "// Line_Reference 1178:             it('should return error for invalidly formatted recipients', function(done) {",
        "// Line_Reference 1185:                     function(err) {",
        "// Line_Reference 1192:             it('should return error for no valid recipients', function(done) {",
        "// Line_Reference 1199:                     function(err) {",
        "// Line_Reference 1206:             it('should return error for invalid sender', function(done) {",
        "// Line_Reference 1213:                     function(err) {",
        "// Line_Reference 1220:             it('should send message string', function(done) {",
        "// Line_Reference 1224:                 server.on('data', function(connection, chunk) {",
        "// Line_Reference 1229:                 server.on('dataReady', function(connection, callback) {",
        "// Line_Reference 1241:                     function(err) {",
        "// Line_Reference 1248:             it('should send message buffer', function(done) {",
        "// Line_Reference 1252:                 server.on('data', function(connection, chunk) {",
        "// Line_Reference 1257:                 server.on('dataReady', function(connection, callback) {",
        "// Line_Reference 1259:                     expect(body.toString()).to.equal(",
        "// Line_Reference 1260:                         message",
        "// Line_Reference 1261:                             .toString()",
        "// Line_Reference 1262:                             .trim()",
        "// Line_Reference 1263:                             .replace(/\\n/g, '\\r\\n')",
        "// Line_Reference 1264:                     );",
        "// Line_Reference 1274:                     function(err) {",
        "// Line_Reference 1281:             it('should send message stream', function(done) {",
        "// Line_Reference 1286:                 server.on('data', function(connection, chunk) {",
        "// Line_Reference 1291:                 server.on('dataReady', function(connection, callback) {",
        "// Line_Reference 1293:                     expect(body.toString()).to.equal(",
        "// Line_Reference 1294:                         message",
        "// Line_Reference 1295:                             .toString()",
        "// Line_Reference 1296:                             .trim()",
        "// Line_Reference 1297:                             .replace(/\\n/g, '\\r\\n')",
        "// Line_Reference 1298:                     );",
        "// Line_Reference 1308:                     function(err) {",
        "// Line_Reference 1319:     let socket = net.connect(port, host, function() {",
        "// Line_Reference 1323:         let onSocketData = function(chunk) {",
        "// Line_Reference 1342:     socket.on('error', function(err) {"
    ]
}
