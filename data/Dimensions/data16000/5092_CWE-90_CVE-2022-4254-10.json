{
    "cve_id": "CVE-2022-4254",
    "cve_description": "sssd: libsss_certmap fails to sanitise certificate data used in LDAP filters",
    "cve_publish_date": "2023-02-01",
    "cwe_id": "CWE-90",
    "cwe_name": "Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
    "cwe_description": "The product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component.",
    "commit_message": "certmap: sanitize LDAP search filter\n\nThe sss_certmap_get_search_filter() will now sanitize the values read\nfrom the certificates before adding them to a search filter. To be able\nto get the plain values as well sss_certmap_expand_mapping_rule() is\nadded.\n\nResolves:\nhttps://github.com/SSSD/sssd/issues/5135\n\nReviewed-by: Alexey Tikhonov <atikhono@redhat.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "util.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "0",
    "number_of_lines_deleted_vulnerable_to_cve": "94",
    "vulnerable_lines": [
        "// Line_Reference 439: errno_t sss_filter_sanitize_ex(TALLOC_CTX *mem_ctx,",
        "// Line_Reference 440:                                const char *input,",
        "// Line_Reference 441:                                char **sanitized,",
        "// Line_Reference 442:                                const char *ignore)",
        "// Line_Reference 443: {",
        "// Line_Reference 444:     char *output;",
        "// Line_Reference 445:     size_t i = 0;",
        "// Line_Reference 446:     size_t j = 0;",
        "// Line_Reference 447:     char *allowed;",
        "// Line_Reference 448: ",
        "// Line_Reference 449:     /* Assume the worst-case. We'll resize it later, once */",
        "// Line_Reference 450:     output = talloc_array(mem_ctx, char, strlen(input) * 3 + 1);",
        "// Line_Reference 451:     if (!output) {",
        "// Line_Reference 452:         return ENOMEM;",
        "// Line_Reference 453:     }",
        "// Line_Reference 454: ",
        "// Line_Reference 455:     while (input[i]) {",
        "// Line_Reference 456:         /* Even though this character might have a special meaning, if it's",
        "// Line_Reference 457:          * explicitly allowed, just copy it and move on",
        "// Line_Reference 458:          */",
        "// Line_Reference 459:         if (ignore == NULL) {",
        "// Line_Reference 460:             allowed = NULL;",
        "// Line_Reference 461:         } else {",
        "// Line_Reference 462:             allowed = strchr(ignore, input[i]);",
        "// Line_Reference 463:         }",
        "// Line_Reference 464:         if (allowed) {",
        "// Line_Reference 465:             output[j++] = input[i++];",
        "// Line_Reference 466:             continue;",
        "// Line_Reference 467:         }",
        "// Line_Reference 468: ",
        "// Line_Reference 469:         switch(input[i]) {",
        "// Line_Reference 470:         case '\\t':",
        "// Line_Reference 471:             output[j++] = '\\\\';",
        "// Line_Reference 472:             output[j++] = '0';",
        "// Line_Reference 473:             output[j++] = '9';",
        "// Line_Reference 474:             break;",
        "// Line_Reference 475:         case ' ':",
        "// Line_Reference 476:             output[j++] = '\\\\';",
        "// Line_Reference 477:             output[j++] = '2';",
        "// Line_Reference 478:             output[j++] = '0';",
        "// Line_Reference 479:             break;",
        "// Line_Reference 480:         case '*':",
        "// Line_Reference 481:             output[j++] = '\\\\';",
        "// Line_Reference 482:             output[j++] = '2';",
        "// Line_Reference 483:             output[j++] = 'a';",
        "// Line_Reference 484:             break;",
        "// Line_Reference 485:         case '(':",
        "// Line_Reference 486:             output[j++] = '\\\\';",
        "// Line_Reference 487:             output[j++] = '2';",
        "// Line_Reference 488:             output[j++] = '8';",
        "// Line_Reference 489:             break;",
        "// Line_Reference 490:         case ')':",
        "// Line_Reference 491:             output[j++] = '\\\\';",
        "// Line_Reference 492:             output[j++] = '2';",
        "// Line_Reference 493:             output[j++] = '9';",
        "// Line_Reference 494:             break;",
        "// Line_Reference 495:         case '\\\\':",
        "// Line_Reference 496:             output[j++] = '\\\\';",
        "// Line_Reference 497:             output[j++] = '5';",
        "// Line_Reference 498:             output[j++] = 'c';",
        "// Line_Reference 499:             break;",
        "// Line_Reference 500:         case '\\r':",
        "// Line_Reference 501:             output[j++] = '\\\\';",
        "// Line_Reference 502:             output[j++] = '0';",
        "// Line_Reference 503:             output[j++] = 'd';",
        "// Line_Reference 504:             break;",
        "// Line_Reference 505:         case '\\n':",
        "// Line_Reference 506:             output[j++] = '\\\\';",
        "// Line_Reference 507:             output[j++] = '0';",
        "// Line_Reference 508:             output[j++] = 'a';",
        "// Line_Reference 509:             break;",
        "// Line_Reference 510:         default:",
        "// Line_Reference 511:             output[j++] = input[i];",
        "// Line_Reference 512:         }",
        "// Line_Reference 513: ",
        "// Line_Reference 514:         i++;",
        "// Line_Reference 515:     }",
        "// Line_Reference 516:     output[j] = '\\0';",
        "// Line_Reference 517:     *sanitized = talloc_realloc(mem_ctx, output, char, j+1);",
        "// Line_Reference 518:     if (!*sanitized) {",
        "// Line_Reference 519:         talloc_free(output);",
        "// Line_Reference 520:         return ENOMEM;",
        "// Line_Reference 521:     }",
        "// Line_Reference 522: ",
        "// Line_Reference 523:     return EOK;",
        "// Line_Reference 524: }",
        "// Line_Reference 525: ",
        "// Line_Reference 526: errno_t sss_filter_sanitize(TALLOC_CTX *mem_ctx,",
        "// Line_Reference 527:                             const char *input,",
        "// Line_Reference 528:                             char **sanitized)",
        "// Line_Reference 529: {",
        "// Line_Reference 530:     return sss_filter_sanitize_ex(mem_ctx, input, sanitized, NULL);",
        "// Line_Reference 531: }",
        "// Line_Reference 532: "
    ]
}
