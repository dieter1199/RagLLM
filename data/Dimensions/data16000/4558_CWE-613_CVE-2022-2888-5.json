{
    "cve_id": "CVE-2022-2888",
    "cve_description": "If an attacker comes into the possession of a victim's OctoPrint session cookie through whatever means, the attacker can use this cookie to authenticate as long as the victim's account exists.",
    "cve_publish_date": "2022-09-21",
    "cwe_id": "CWE-613",
    "cwe_name": "Insufficient Session Expiration",
    "cwe_description": "According to WASC, \"Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization.\"",
    "commit_message": "🔒 Make session handling more secure\n\n* 🔒️ Tie remember_me cookie to password hash\r\n\r\nThat way when the password gets changed,\r\nexisting cookies automatically get\r\ninvalidated.\r\n\r\n* 🔒️ Invalidate user sessions on password change\r\n\r\nThis will require a user to log in again after\r\ntheir password is changed, either by themselves\r\nor through an admin.\r\n\r\nThis is a slight change in behaviour compared\r\nto before, but makes sure password changes\r\nare enforced across all existing sessions.\r\n\r\n* ♻️ remember_key_for_user => signature_key_for_user\r\n\r\n* 🔒️ Invalidate sessions after 15min of inactivity\r\n\r\nThe server has been keeping track of login\r\nsession for a while, but now it also only\r\nconsiders such (active login) sessions fresh\r\nthat have been active within the past 15min.\r\n\r\nThat way, a session cookie's lifetime is now\r\nalso restricted server side. An active\r\nsocket connection suffices to keep the\r\nsession alive, as do any other requests\r\nusing the cookie.\r\n\r\nAs the session tracking happens in-memory,\r\nall sessions will become invalid on server\r\nrestart. However, if the remember me cookie\r\nis set, after server restart a passive\r\nlogin will succeed.\r\n\r\n* 🔒️ Limit remember_me validity to 90 days\r\n\r\nSo far that was only done through the cookie\r\nduration, and with a year to boot. Now we\r\nencode the creation date into the cookie\r\nand check against that, if it exceeds the\r\ncookie duration the cookie is considered\r\nunset.\r\n\r\nWill prevent reuse of ancient remember me\r\ncookies (and force the user to login at\r\nleast once every 90d).\r\n\r\n* 💚 Fix unit tests\r\n\r\nNew cookie handling requires a faked flask\r\nconfig object.\r\n\r\nRelated: https://huntr.dev/bounties/d27d232b-2578-4b32-b3b4-74aabdadf629/",
    "type_of_change": "Modification",
    "filename_of_changes": "users.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "27",
    "number_of_lines_deleted_vulnerable_to_cve": "10",
    "vulnerable_lines": [
        "// Line_Reference 130:             if user.created + (24 * 60 * 60) < time.monotonic():",
        "// Line_Reference 132:                     \"Cleaning up user session {} for user {}\".format(",
        "// Line_Reference 133:                         session, user.get_id()",
        "// Line_Reference 134:                     )",
        "// Line_Reference 236:     def find_user(self, userid=None, session=None):",
        "// Line_Reference 252:                             result.append(self._session_users_by_session[session_id])",
        "// Line_Reference 848:     def find_user(self, userid=None, apikey=None, session=None):",
        "// Line_Reference 851:         if user is not None:",
        "// Line_Reference 1386:         self._self_created = time.monotonic()",
        "// Line_Reference 1387:         self._self_touched = time.monotonic()"
    ]
}
