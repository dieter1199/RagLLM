{
    "cve_id": "CVE-2017-11176",
    "cve_description": "The mq_notify function in the Linux kernel through 4.11.9 does not set the sock pointer to NULL upon entry into the retry logic. During a user-space close of a Netlink socket, it allows attackers to cause a denial of service (use-after-free) or possibly have unspecified other impact.",
    "cve_publish_date": "2017-07-11",
    "cwe_id": "CWE-416",
    "cwe_name": "Use After Free",
    "cwe_description": "The product reuses or references memory after it has been freed. At some point afterward, the memory may be allocated again and saved in another pointer, while the original pointer references a location somewhere within the new allocation. Any operations using the original pointer are no longer valid because the memory \"belongs\" to the code that operates on the new pointer.",
    "commit_message": "mqueue: fix a use-after-free in sys_mq_notify()\n\nThe retry logic for netlink_attachskb() inside sys_mq_notify()\nis nasty and vulnerable:\n\n1) The sock refcnt is already released when retry is needed\n2) The fd is controllable by user-space because we already\n   release the file refcnt\n\nso we when retry but the fd has been just closed by user-space\nduring this small window, we end up calling netlink_detachskb()\non the error path which releases the sock again, later when\nthe user-space closes this socket a use-after-free could be\ntriggered.\n\nSetting 'sock' to NULL here should be sufficient to fix it.\n\nReported-by: GeneBlue <geneblue.mail@gmail.com>\nSigned-off-by: Cong Wang <xiyou.wangcong@gmail.com>\nCc: Andrew Morton <akpm@linux-foundation.org>\nCc: Manfred Spraul <manfred@colorfullife.com>\nCc: stable@kernel.org\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "mqueue.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "3",
    "number_of_lines_deleted_vulnerable_to_cve": "1",
    "vulnerable_lines": [
        "// Line_Reference 1273: \t\t\tif (ret == 1)"
    ]
}
