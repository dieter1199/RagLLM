{
    "cve_id": "CVE-2022-23612",
    "cve_description": "OpenMRS is a patient-based medical record system focusing on giving providers a free customizable electronic medical record system. Affected versions are subject to arbitrary file exfiltration due to failure to sanitize request when satisfying GET requests for `/images` & `/initfilter/scripts`. This can allow an attacker to access any file on a system running OpenMRS that is accessible to the user id OpenMRS is running under. Affected implementations should update to the latest patch version of OpenMRS Core for the minor version they use. These are: 2.1.5, 2.2.1, 2.3.5, 2.4.5 and 2.5.3. As a general rule, this vulnerability is already mitigated by Tomcat's URL normalization in Tomcat 7.0.28+. Users on older versions of Tomcat should consider upgrading their Tomcat instance as well as their OpenMRS instance.",
    "cve_publish_date": "2022-02-22",
    "cwe_id": "CWE-22",
    "cwe_name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
    "cwe_description": "The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
    "commit_message": "Fix bug",
    "type_of_change": "Modification",
    "filename_of_changes": "StartupFilter.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "16",
    "number_of_lines_deleted_vulnerable_to_cve": "17",
    "vulnerable_lines": [
        "// Line_Reference 119: \t\t\t\tservletPath = servletPath.replaceFirst(\"/initfilter\", \"/WEB-INF/view\"); // strip out the /initfilter part",
        "// Line_Reference 121: \t\t\t\tFile file = new File(filterConfig.getServletContext().getRealPath(servletPath));",
        "// Line_Reference 123: \t\t\t\t\tfile = new File(file, httpRequest.getPathInfo());",
        "// Line_Reference 126: \t\t\t\tInputStream imageFileInputStream = null;",
        "// Line_Reference 127: \t\t\t\ttry {",
        "// Line_Reference 128: \t\t\t\t\timageFileInputStream = new FileInputStream(file);",
        "// Line_Reference 132: \t\t\t\t\tlog.error(\"Unable to find file: \" + file.getAbsolutePath());",
        "// Line_Reference 134: \t\t\t\tfinally {",
        "// Line_Reference 135: \t\t\t\t\tif (imageFileInputStream != null) {",
        "// Line_Reference 136: \t\t\t\t\t\ttry {",
        "// Line_Reference 137: \t\t\t\t\t\t\timageFileInputStream.close();",
        "// Line_Reference 138: \t\t\t\t\t\t}",
        "// Line_Reference 139: \t\t\t\t\t\tcatch (IOException io) {",
        "// Line_Reference 140: \t\t\t\t\t\t\tlog.warn(\"Couldn't close imageFileInputStream: \" + io);",
        "// Line_Reference 141: \t\t\t\t\t\t}",
        "// Line_Reference 142: \t\t\t\t\t}",
        "// Line_Reference 196: \t\t\t\tlog.error(\"velocity init failed, because: \" + e);"
    ]
}
