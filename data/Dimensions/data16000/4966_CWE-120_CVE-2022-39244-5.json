{
    "cve_id": "CVE-2022-39244",
    "cve_description": "PJSIP is a free and open source multimedia communication library written in C. In versions of PJSIP prior to 2.13 the PJSIP parser, PJMEDIA RTP decoder, and PJMEDIA SDP parser are affeced by a buffer overflow vulnerability. Users connecting to untrusted clients are at risk. This issue has been patched and is available as commit c4d3498 in the master branch and will be included in releases 2.13 and later. Users are advised to upgrade. There are no known workarounds for this issue.",
    "cve_publish_date": "2022-10-06",
    "cwe_id": "CWE-120",
    "cwe_name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
    "cwe_description": "The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.",
    "commit_message": "Merge pull request from GHSA-fq45-m3f7-3mhj\n\n* Initial patch\n\n* Use 'pj_scan_is_eof(scanner)'\n\nCo-authored-by: Aaron Lichtman <aaronlichtman@gmail.com>\n\n* Use 'pj_scan_is_eof(scanner)'\n\nCo-authored-by: Aaron Lichtman <aaronlichtman@gmail.com>\n\n* Use 'pj_scan_is_eof(scanner)'\n\nCo-authored-by: Aaron Lichtman <aaronlichtman@gmail.com>\n\n* Use `!pj_scan_is_eof` instead of manually checking `scanner->curptr < scanner->end`\n\nCo-authored-by: Maksim Mukosey <mmukosey@gmail.com>\n\n* Update pjlib-util/src/pjlib-util/scanner.c\n\nCo-authored-by: Aaron Lichtman <aaronlichtman@gmail.com>\n\n* Update pjlib-util/src/pjlib-util/scanner.c\n\nCo-authored-by: Aaron Lichtman <aaronlichtman@gmail.com>\n\n* Update pjlib-util/src/pjlib-util/scanner.c\n\nCo-authored-by: Aaron Lichtman <aaronlichtman@gmail.com>\n\n* Revert '>=' back to '>' in pj_scan_stricmp_alnum()\n\n* Fix error compiles.\n\nCo-authored-by: Nanang Izzuddin <nanang@teluu.com>\nCo-authored-by: Aaron Lichtman <aaronlichtman@gmail.com>\nCo-authored-by: Maksim Mukosey <mmukosey@gmail.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "scanner.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "27",
    "number_of_lines_deleted_vulnerable_to_cve": "14",
    "vulnerable_lines": [
        "// Line_Reference 198:     char *s = pj_memchr(scanner->curptr, '\\n', scanner->end - scanner->curptr);",
        "// Line_Reference 267:     /* EOF is detected implicitly */",
        "// Line_Reference 268:     if (!pj_cis_match(spec, *s)) {",
        "// Line_Reference 302:     /* EOF is detected implicitly */",
        "// Line_Reference 303:     if (!pj_cis_match(spec, *s) && *s != '%') {",
        "// Line_Reference 439:     if (PJ_SCAN_IS_PROBABLY_SPACE(*scanner->curptr) && scanner->skip_ws) {",
        "// Line_Reference 470:     if (!PJ_SCAN_IS_NEWLINE(*scanner->curptr)) {",
        "// Line_Reference 478:     if (*scanner->curptr == '\\n') {",
        "// Line_Reference 523:     if (PJ_SCAN_IS_PROBABLY_SPACE(*s) && scanner->skip_ws) {",
        "// Line_Reference 547:     if (PJ_SCAN_IS_PROBABLY_SPACE(*s) && scanner->skip_ws) {",
        "// Line_Reference 573:     if (PJ_SCAN_IS_PROBABLY_SPACE(*s) && scanner->skip_ws) {",
        "// Line_Reference 588:     if (PJ_SCAN_IS_PROBABLY_SPACE(*scanner->curptr) && skip_ws) {",
        "// Line_Reference 639: ",
        "// Line_Reference 640: "
    ]
}
