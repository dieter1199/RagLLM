{
    "cve_id": "CVE-2022-1379",
    "cve_description": "URL Restriction Bypass in GitHub repository plantuml/plantuml prior to V1.2022.5. An attacker can abuse this to bypass URL restrictions that are imposed by the different security profiles and achieve server side request forgery (SSRF). This allows accessing restricted internal resources/servers or sending requests to third party servers.",
    "cve_publish_date": "2022-05-14",
    "cwe_id": "CWE-918",
    "cwe_name": "Server-Side Request Forgery (SSRF)",
    "cwe_description": "The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.",
    "commit_message": "Import version 1.2022.5",
    "type_of_change": "Modification",
    "filename_of_changes": "PlayerBinary.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "7",
    "number_of_lines_deleted_vulnerable_to_cve": "28",
    "vulnerable_lines": [
        "// Line_Reference 37: import net.sourceforge.plantuml.awt.geom.Dimension2D;",
        "// Line_Reference 55: import net.sourceforge.plantuml.graphic.SymbolContext;",
        "// Line_Reference 59: import net.sourceforge.plantuml.style.PName;",
        "// Line_Reference 61: import net.sourceforge.plantuml.style.Style;",
        "// Line_Reference 66: import net.sourceforge.plantuml.ugraphic.UStroke;",
        "// Line_Reference 68: import net.sourceforge.plantuml.ugraphic.color.HColor;",
        "// Line_Reference 69: import net.sourceforge.plantuml.ugraphic.color.HColorUtils;",
        "// Line_Reference 79: \tprivate final Style style;",
        "// Line_Reference 81: \tpublic PlayerBinary(String code, ISkinParam skinParam, TimingRuler ruler, boolean compact) {",
        "// Line_Reference 82: \t\tsuper(code, skinParam, ruler, compact);",
        "// Line_Reference 83: \t\tthis.style = getStyleSignature().getMergedStyle(skinParam.getCurrentStyleBuilder());",
        "// Line_Reference 96: \tprotected StyleSignatureBasic getStyleSignature() {",
        "// Line_Reference 97: \t\treturn StyleSignatureBasic.of(SName.root, SName.element, SName.timingDiagram, SName.binary);",
        "// Line_Reference 98: \t}",
        "// Line_Reference 99: ",
        "// Line_Reference 100: \t@Override",
        "// Line_Reference 101: \tprotected SymbolContext getContextLegacy() {",
        "// Line_Reference 102: ",
        "// Line_Reference 103: \t\tif (UseStyle.useBetaStyle() == false)",
        "// Line_Reference 104: \t\t\treturn new SymbolContext(HColorUtils.COL_D7E0F2, HColorUtils.COL_038048).withStroke(new UStroke(2));",
        "// Line_Reference 105: ",
        "// Line_Reference 106: \t\tfinal HColor lineColor = style.value(PName.LineColor).asColor(skinParam.getThemeStyle(),",
        "// Line_Reference 107: \t\t\t\tskinParam.getIHtmlColorSet());",
        "// Line_Reference 108: \t\tfinal HColor backgroundColor = style.value(PName.BackGroundColor).asColor(skinParam.getThemeStyle(),",
        "// Line_Reference 109: \t\t\t\tskinParam.getIHtmlColorSet());",
        "// Line_Reference 110: ",
        "// Line_Reference 111: \t\treturn new SymbolContext(backgroundColor, lineColor).withStroke(getStroke());",
        "// Line_Reference 112: "
    ]
}
