{
    "cve_id": "CVE-2022-3751",
    "cve_description": "SQL Injection in GitHub repository owncast/owncast prior to 0.0.13.",
    "cve_publish_date": "2022-11-29",
    "cwe_id": "CWE-89",
    "cwe_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
    "cwe_description": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.",
    "commit_message": "Using prepared statements for SQL queries. (#2257)\n\n* using prepared statements for sql query for fixing sql injection\r\n\r\n* returning error in getChat instead of logging",
    "type_of_change": "Modification",
    "filename_of_changes": "persistence.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "114",
    "number_of_lines_deleted_vulnerable_to_cve": "18",
    "vulnerable_lines": [
        "// Line_Reference 4: \t\"fmt\"",
        "// Line_Reference 210: func getChat(query string) []interface{} {",
        "// Line_Reference 212: \trows, err := _datastore.DB.Query(query)",
        "// Line_Reference 213: \tif err != nil || rows.Err() != nil {",
        "// Line_Reference 214: \t\tlog.Errorln(\"error fetching chat history\", err)",
        "// Line_Reference 215: \t\treturn history",
        "// Line_Reference 216: \t}",
        "// Line_Reference 217: \tdefer rows.Close()",
        "// Line_Reference 223: \t\tif err = rows.Scan(",
        "// Line_Reference 244: \t\t\tlog.Errorln(err)",
        "// Line_Reference 245: \t\t\tlog.Errorln(\"There is a problem converting query to chat objects. Please report this:\", query)",
        "// Line_Reference 246: \t\t\tbreak",
        "// Line_Reference 269: \treturn history",
        "// Line_Reference 282: \tresult := getChat(query)",
        "// Line_Reference 292: \tquery := fmt.Sprintf(\"SELECT messages.id, messages.user_id, messages.body, messages.title, messages.subtitle, messages.image, messages.link, messages.eventType, messages.hidden_at, messages.timestamp, users.display_name, users.display_color, users.created_at, users.disabled_at, users.previous_names, users.namechanged_at, users.authenticated_at, users.scopes, users.type FROM users JOIN messages ON users.id = messages.user_id WHERE hidden_at IS NULL AND disabled_at IS NULL ORDER BY timestamp DESC LIMIT %d\", maxBacklogNumber)",
        "// Line_Reference 293: \tm := getChat(query)",
        "// Line_Reference 312: \tquery := fmt.Sprintf(\"SELECT messages.id, user_id, body, title, subtitle, image, link, eventType, hidden_at, timestamp, display_name, display_color, created_at, disabled_at,  previous_names, namechanged_at, authenticated_at, scopes, type FROM messages INNER JOIN users ON messages.user_id = users.id WHERE user_id IS '%s'\", userID)",
        "// Line_Reference 313: \tmessages := getChat(query)"
    ]
}
