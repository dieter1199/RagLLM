{
    "cve_id": "CVE-2019-19274",
    "cve_description": "typed_ast 1.3.0 and 1.3.1 has a handle_keywordonly_args out-of-bounds read. An attacker with the ability to cause a Python interpreter to parse Python source (but not necessarily execute it) may be able to crash the interpreter process. This could be a concern, for example, in a web-based service that parses (but does not execute) Python code. (This issue also affected certain Python 3.8.0-alpha prereleases.)",
    "cve_publish_date": "2019-11-26",
    "cwe_id": "CWE-125",
    "cwe_name": "Out-of-bounds Read",
    "cwe_description": "The product reads data past the end, or before the beginning, of the intended buffer.",
    "commit_message": "Fully incorporate the code from Python 3.7.2 (#78)\n\nThis is a full port, following the recipe in update_process.md. I've also tried to keep the recipe up to date and improved the automation (see tools/script). I haven't cleaned up the commits. As of #77 there are a few tests that sanity-check this (though it's far from a full test suite), and they're run by Travis-CI and AppVeyor.",
    "type_of_change": "Modification",
    "filename_of_changes": "token.h",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "63",
    "number_of_lines_deleted_vulnerable_to_cve": "59",
    "vulnerable_lines": [
        "// Line_Reference 12: #define ENDMARKER\t0",
        "// Line_Reference 13: #define NAME\t\t1",
        "// Line_Reference 14: #define NUMBER\t\t2",
        "// Line_Reference 15: #define STRING\t\t3",
        "// Line_Reference 16: #define NEWLINE\t\t4",
        "// Line_Reference 17: #define INDENT\t\t5",
        "// Line_Reference 18: #define DEDENT\t\t6",
        "// Line_Reference 19: #define LPAR\t\t7",
        "// Line_Reference 20: #define RPAR\t\t8",
        "// Line_Reference 21: #define LSQB\t\t9",
        "// Line_Reference 22: #define RSQB\t\t10",
        "// Line_Reference 23: #define COLON\t\t11",
        "// Line_Reference 24: #define COMMA\t\t12",
        "// Line_Reference 25: #define SEMI\t\t13",
        "// Line_Reference 26: #define PLUS\t\t14",
        "// Line_Reference 27: #define MINUS\t\t15",
        "// Line_Reference 28: #define STAR\t\t16",
        "// Line_Reference 29: #define SLASH\t\t17",
        "// Line_Reference 30: #define VBAR\t\t18",
        "// Line_Reference 31: #define AMPER\t\t19",
        "// Line_Reference 32: #define LESS\t\t20",
        "// Line_Reference 33: #define GREATER\t\t21",
        "// Line_Reference 34: #define EQUAL\t\t22",
        "// Line_Reference 35: #define DOT\t\t23",
        "// Line_Reference 36: #define PERCENT\t\t24",
        "// Line_Reference 37: #define LBRACE\t\t25",
        "// Line_Reference 38: #define RBRACE\t\t26",
        "// Line_Reference 39: #define EQEQUAL\t\t27",
        "// Line_Reference 40: #define NOTEQUAL\t28",
        "// Line_Reference 41: #define LESSEQUAL\t29",
        "// Line_Reference 42: #define GREATEREQUAL\t30",
        "// Line_Reference 43: #define TILDE\t\t31",
        "// Line_Reference 44: #define CIRCUMFLEX\t32",
        "// Line_Reference 45: #define LEFTSHIFT\t33",
        "// Line_Reference 46: #define RIGHTSHIFT\t34",
        "// Line_Reference 47: #define DOUBLESTAR\t35",
        "// Line_Reference 48: #define PLUSEQUAL\t36",
        "// Line_Reference 49: #define MINEQUAL\t37",
        "// Line_Reference 50: #define STAREQUAL\t38",
        "// Line_Reference 51: #define SLASHEQUAL\t39",
        "// Line_Reference 52: #define PERCENTEQUAL\t40",
        "// Line_Reference 53: #define AMPEREQUAL\t41",
        "// Line_Reference 54: #define VBAREQUAL\t42",
        "// Line_Reference 55: #define CIRCUMFLEXEQUAL\t43",
        "// Line_Reference 56: #define LEFTSHIFTEQUAL\t44",
        "// Line_Reference 57: #define RIGHTSHIFTEQUAL\t45",
        "// Line_Reference 58: #define DOUBLESTAREQUAL\t46",
        "// Line_Reference 59: #define DOUBLESLASH\t47",
        "// Line_Reference 62: #define ATEQUAL\t\t50",
        "// Line_Reference 66: #define OP\t\t53",
        "// Line_Reference 67: #define AWAIT\t\t54",
        "// Line_Reference 68: #define ASYNC\t\t55",
        "// Line_Reference 71: #define ERRORTOKEN\t58",
        "// Line_Reference 72: #define N_TOKENS\t59",
        "// Line_Reference 76: #define NT_OFFSET\t\t256",
        "// Line_Reference 78: #define ISTERMINAL(x)\t\t((x) < NT_OFFSET)",
        "// Line_Reference 79: #define ISNONTERMINAL(x)\t((x) >= NT_OFFSET)",
        "// Line_Reference 80: #define ISEOF(x)\t\t((x) == ENDMARKER)",
        "// Line_Reference 83: extern const char *_Ta3Parser_TokenNames[]; /* Token names */"
    ]
}
