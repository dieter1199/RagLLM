{
    "cve_id": "CVE-2021-3521",
    "cve_description": "There is a flaw in RPM's signature functionality. OpenPGP subkeys are associated with a primary key via a \"binding signature.\" RPM does not check the binding signature of subkeys prior to importing them. If an attacker is able to add or socially engineer another party to add a malicious subkey to a legitimate public key, RPM could wrongly trust a malicious signature. The greatest impact of this flaw is to data integrity. To exploit this flaw, an attacker must either compromise an RPM repository or convince an administrator to install an untrusted RPM or public key. It is strongly recommended to only use RPMs and public keys from trusted sources.",
    "cve_publish_date": "2022-08-22",
    "cwe_id": "CWE-347",
    "cwe_name": "Improper Verification of Cryptographic Signature",
    "cwe_description": "The product does not verify, or incorrectly verifies, the cryptographic signature for data.",
    "commit_message": "Validate and require subkey binding signatures on PGP public keys\n\nAll subkeys must be followed by a binding signature by the primary key\nas per the OpenPGP RFC, enforce the presence and validity in the parser.\n\nThe implementation is as kludgey as they come to work around our\nsimple-minded parser structure without touching API, to maximise\nbackportability. Store all the raw packets internally as we decode them\nto be able to access previous elements at will, needed to validate ordering\nand access the actual data. Add testcases for manipulated keys whose\nimport previously would succeed.\n\nDepends on the two previous commits:\n7b399fcb8f52566e6f3b4327197a85facd08db91 and\n236b802a4aa48711823a191d1b7f753c82a89ec5\n\nFixes CVE-2021-3521.",
    "type_of_change": "Modification",
    "filename_of_changes": "rpmpgp.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "91",
    "number_of_lines_deleted_vulnerable_to_cve": "7",
    "vulnerable_lines": [
        "// Line_Reference 1071:     struct pgpPkt pkt;",
        "// Line_Reference 1075: \tif (decodePkt(p, (pend - p), &pkt))",
        "// Line_Reference 1079: \t    if (pkttype && pkt.tag != pkttype) {",
        "// Line_Reference 1082: \t\tdigp = pgpDigParamsNew(pkt.tag);",
        "// Line_Reference 1086: \tif (pgpPrtPkt(&pkt, digp))",
        "// Line_Reference 1089: \tp += (pkt.body - pkt.head) + pkt.blen;",
        "// Line_Reference 1094:     rc = (digp && (p == pend)) ? 0 : -1;"
    ]
}
