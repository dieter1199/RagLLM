{
    "cve_id": "CVE-2022-41858",
    "cve_description": "A flaw was found in the Linux kernel. A NULL pointer dereference may occur while a slip driver is in progress to detach in sl_tx_timeout in drivers/net/slip/slip.c. This issue could allow an attacker to crash the system or leak internal kernel information.",
    "cve_publish_date": "2023-01-17",
    "cwe_id": "CWE-476",
    "cwe_name": "NULL Pointer Dereference",
    "cwe_description": "The product dereferences a pointer that it expects to be valid but is NULL.",
    "commit_message": "drivers: net: slip: fix NPD bug in sl_tx_timeout()\n\nWhen a slip driver is detaching, the slip_close() will act to\ncleanup necessary resources and sl->tty is set to NULL in\nslip_close(). Meanwhile, the packet we transmit is blocked,\nsl_tx_timeout() will be called. Although slip_close() and\nsl_tx_timeout() use sl->lock to synchronize, we don`t judge\nwhether sl->tty equals to NULL in sl_tx_timeout() and the\nnull pointer dereference bug will happen.\n\n   (Thread 1)                 |      (Thread 2)\n                              | slip_close()\n                              |   spin_lock_bh(&sl->lock)\n                              |   ...\n...                           |   sl->tty = NULL //(1)\nsl_tx_timeout()               |   spin_unlock_bh(&sl->lock)\n  spin_lock(&sl->lock);       |\n  ...                         |   ...\n  tty_chars_in_buffer(sl->tty)|\n    if (tty->ops->..) //(2)   |\n    ...                       |   synchronize_rcu()\n\nWe set NULL to sl->tty in position (1) and dereference sl->tty\nin position (2).\n\nThis patch adds check in sl_tx_timeout(). If sl->tty equals to\nNULL, sl_tx_timeout() will goto out.\n\nSigned-off-by: Duoming Zhou <duoming@zju.edu.cn>\nReviewed-by: Jiri Slaby <jirislaby@kernel.org>\nLink: https://lore.kernel.org/r/20220405132206.55291-1-duoming@zju.edu.cn\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "slip.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "1",
    "number_of_lines_deleted_vulnerable_to_cve": "1",
    "vulnerable_lines": [
        "// Line_Reference 472: \t\tif (!netif_running(dev))"
    ]
}
