{
    "cve_id": "CVE-2021-21306",
    "cve_description": "Marked is an open-source markdown parser and compiler (npm package \"marked\"). In marked from version 1.1.1 and before version 2.0.0, there is a Regular expression Denial of Service vulnerability. This vulnerability can affect anyone who runs user generated code through marked. This vulnerability is fixed in version 2.0.0.",
    "cve_publish_date": "2021-02-08",
    "cwe_id": "CWE-400",
    "cwe_name": "Uncontrolled Resource Consumption",
    "cwe_description": "The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.",
    "commit_message": "fix: Total rework of Emphasis/Strong (#1864)\n\nBREAKING CHANGE: `em` and `strong` tokenizers have been merged into one `emStrong` tokenizer",
    "type_of_change": "Modification",
    "filename_of_changes": "Tokenizer.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "43",
    "number_of_lines_deleted_vulnerable_to_cve": "28",
    "vulnerable_lines": [
        "// Line_Reference 530:   strong(src, maskedSrc, prevChar = '') {",
        "// Line_Reference 531:     let match = this.rules.inline.strong.start.exec(src);",
        "// Line_Reference 533:     if (match && (!match[1] || (match[1] && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar))))) {",
        "// Line_Reference 534:       maskedSrc = maskedSrc.slice(-1 * src.length);",
        "// Line_Reference 535:       const endReg = match[0] === '**' ? this.rules.inline.strong.endAst : this.rules.inline.strong.endUnd;",
        "// Line_Reference 539:       let cap;",
        "// Line_Reference 541:         cap = this.rules.inline.strong.middle.exec(maskedSrc.slice(0, match.index + 3));",
        "// Line_Reference 542:         if (cap) {",
        "// Line_Reference 543:           return {",
        "// Line_Reference 544:             type: 'strong',",
        "// Line_Reference 545:             raw: src.slice(0, cap[0].length),",
        "// Line_Reference 546:             text: src.slice(2, cap[0].length - 2)",
        "// Line_Reference 547:           };",
        "// Line_Reference 549:       }",
        "// Line_Reference 550:     }",
        "// Line_Reference 551:   }",
        "// Line_Reference 553:   em(src, maskedSrc, prevChar = '') {",
        "// Line_Reference 554:     let match = this.rules.inline.em.start.exec(src);",
        "// Line_Reference 556:     if (match && (!match[1] || (match[1] && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar))))) {",
        "// Line_Reference 557:       maskedSrc = maskedSrc.slice(-1 * src.length);",
        "// Line_Reference 558:       const endReg = match[0] === '*' ? this.rules.inline.em.endAst : this.rules.inline.em.endUnd;",
        "// Line_Reference 560:       endReg.lastIndex = 0;",
        "// Line_Reference 562:       let cap;",
        "// Line_Reference 563:       while ((match = endReg.exec(maskedSrc)) != null) {",
        "// Line_Reference 564:         cap = this.rules.inline.em.middle.exec(maskedSrc.slice(0, match.index + 2));",
        "// Line_Reference 565:         if (cap) {",
        "// Line_Reference 568:             raw: src.slice(0, cap[0].length),",
        "// Line_Reference 569:             text: src.slice(1, cap[0].length - 1)"
    ]
}
