{
    "cve_id": "CVE-2021-41118",
    "cve_description": "The DynamicPageList3 extension is a reporting tool for MediaWiki, listing category members and intersections with various formats and details. In affected versions unsanitised input of regular expression date within the parameters of the DPL parser function, allowed for the possibility of ReDoS (Regex Denial of Service). This has been resolved in version 3.3.6. If you are unable to update you may also set `$wgDplSettings['functionalRichness'] = 0;` or disable DynamicPageList3 to mitigate.",
    "cve_publish_date": "2021-10-04",
    "cwe_id": "CWE-400",
    "cwe_name": "Uncontrolled Resource Consumption",
    "cwe_description": "The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.",
    "commit_message": "Major cleanup (#57)",
    "type_of_change": "Modification",
    "filename_of_changes": "DynamicPageListHooks.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "158",
    "number_of_lines_deleted_vulnerable_to_cve": "169",
    "vulnerable_lines": [
        "// Line_Reference 2: /**",
        "// Line_Reference 3:  *",
        "// Line_Reference 4:  * @file",
        "// Line_Reference 5:  * @ingroup Extensions",
        "// Line_Reference 6:  * @link http://www.mediawiki.org/wiki/Extension:DynamicPageList3 Documentation",
        "// Line_Reference 7:  * @author n:en:User:IlyaHaykinson",
        "// Line_Reference 8:  * @author n:en:User:Amgine",
        "// Line_Reference 9:  * @author w:de:Benutzer:Unendlich",
        "// Line_Reference 10:  * @author m:User:Dangerman <cyril.dangerville@gmail.com>",
        "// Line_Reference 11:  * @author m:User:Algorithmix <gero.scholz@gmx.de>",
        "// Line_Reference 12:  * @license GPL-2.0-or-later",
        "// Line_Reference 13:  *",
        "// Line_Reference 14:  */",
        "// Line_Reference 16: class DynamicPageListHooks {",
        "// Line_Reference 17: \t// FATAL",
        "// Line_Reference 18: \tconst FATAL_WRONGNS = 1001;\t// $1: 'namespace' or 'notnamespace'",
        "// Line_Reference 19: \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// $2: wrong parameter given by user",
        "// Line_Reference 20: \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// $3: list of possible titles of namespaces (except pseudo-namespaces: Media, Special)",
        "// Line_Reference 21: ",
        "// Line_Reference 22: \tconst FATAL_WRONGLINKSTO = 1002;\t// $1: linksto'",
        "// Line_Reference 23: \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// $2: the wrong parameter given by user",
        "// Line_Reference 24: ",
        "// Line_Reference 25: \tconst FATAL_TOOMANYCATS = 1003;\t// $1: max number of categories that can be included",
        "// Line_Reference 27: \tconst FATAL_TOOFEWCATS = 1004;\t// $1: min number of categories that have to be included",
        "// Line_Reference 29: \tconst FATAL_NOSELECTION = 1005;",
        "// Line_Reference 31: \tconst FATAL_CATDATEBUTNOINCLUDEDCATS = 1006;",
        "// Line_Reference 33: \tconst FATAL_CATDATEBUTMORETHAN1CAT = 1007;",
        "// Line_Reference 35: \tconst FATAL_MORETHAN1TYPEOFDATE = 1008;",
        "// Line_Reference 37: \tconst FATAL_WRONGORDERMETHOD = 1009;\t// $1: param=val that is possible only with $1 as last 'ordermethod' parameter",
        "// Line_Reference 38: \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// $2: last 'ordermethod' parameter required for $0",
        "// Line_Reference 40: \tconst FATAL_DOMINANTSECTIONRANGE = 1010;\t// $1: the number of arguments in includepage",
        "// Line_Reference 42: \tconst FATAL_OPENREFERENCES = 1012;",
        "// Line_Reference 44: \tconst FATAL_MISSINGPARAMFUNCTION = 1022;",
        "// Line_Reference 46: \tconst FATAL_NOTPROTECTED = 1023;",
        "// Line_Reference 48: \tconst FATAL_SQLBUILDERROR = 1024;",
        "// Line_Reference 50: \t// ERROR",
        "// Line_Reference 52: \t// WARN",
        "// Line_Reference 54: \tconst WARN_UNKNOWNPARAM = 2013;\t// $1: unknown parameter given by user",
        "// Line_Reference 55: \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// $2: list of DPL available parameters separated by ', '",
        "// Line_Reference 57: \tconst WARN_PARAMNOOPTION = 2022;\t// $1: Parameter given by user",
        "// Line_Reference 59: \tconst WARN_WRONGPARAM = 2014;\t// $3: list of valid param values separated by ' | '",
        "// Line_Reference 61: \tconst WARN_WRONGPARAM_INT = 2015;\t// $1: param name",
        "// Line_Reference 62: \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// $2: wrong param value given by user",
        "// Line_Reference 63: \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// $3: default param value used instead by program",
        "// Line_Reference 65: \tconst WARN_NORESULTS = 2016;",
        "// Line_Reference 67: \tconst WARN_CATOUTPUTBUTWRONGPARAMS = 2017;",
        "// Line_Reference 69: \tconst WARN_HEADINGBUTSIMPLEORDERMETHOD = 2018;\t// $1: 'headingmode' value given by user",
        "// Line_Reference 70: \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// $2: value used instead by program (which means no heading)",
        "// Line_Reference 72: \tconst WARN_DEBUGPARAMNOTFIRST = 2019;\t// $1: 'log' value",
        "// Line_Reference 74: \tconst WARN_TRANSCLUSIONLOOP = 2020;\t// $1: title of page that creates an infinite transclusion loop",
        "// Line_Reference 76: \t// INFO",
        "// Line_Reference 78: \t// DEBUG",
        "// Line_Reference 80: \tconst DEBUG_QUERY = 3021;\t// $1: SQL query executed to generate the dynamic page list",
        "// Line_Reference 82: \t// TRACE",
        "// Line_Reference 83: \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Output formatting",
        "// Line_Reference 84: \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// $1: number of articles",
        "// Line_Reference 88: \tpublic static $createdLinks; // the links created by DPL are collected here;",
        "// Line_Reference 89: \t\t\t\t\t\t\t\t // they can be removed during the final ouput",
        "// Line_Reference 90: \t\t\t\t\t\t\t\t // phase of the MediaWiki parser",
        "// Line_Reference 92: \t/**",
        "// Line_Reference 93: \t * DPL acting like Extension:Intersection",
        "// Line_Reference 94: \t *",
        "// Line_Reference 95: \t * @var bool",
        "// Line_Reference 96: \t */",
        "// Line_Reference 99: \t/**",
        "// Line_Reference 100: \t * Debugging Level",
        "// Line_Reference 101: \t *",
        "// Line_Reference 102: \t * @var int",
        "// Line_Reference 103: \t */",
        "// Line_Reference 107: \t * Handle special on extension registration bits.",
        "// Line_Reference 108: \t *",
        "// Line_Reference 109: \t * @return void",
        "// Line_Reference 111: \tpublic static function onRegistration() {",
        "// Line_Reference 112: \t\tif ( !defined( 'DPL_VERSION' ) ) {",
        "// Line_Reference 113: \t\t\tdefine( 'DPL_VERSION', '3.3.5' );",
        "// Line_Reference 120: \t * @param object Parser object passed as a reference.",
        "// Line_Reference 121: \t * @return bool\ttrue",
        "// Line_Reference 123: \tpublic static function onParserFirstCallInit( Parser &$parser ) {",
        "// Line_Reference 126: \t\t//DPL offers the same functionality as Intersection.  So we register the <DynamicPageList> tag in case LabeledSection Extension is not installed so that the section markers are removed.",
        "// Line_Reference 127: \t\tif ( \\DPL\\Config::getSetting( 'handleSectionTag' ) ) {",
        "// Line_Reference 140: ",
        "// Line_Reference 141: \t\treturn true;",
        "// Line_Reference 147: \t * @param object Parser object passed as a reference.",
        "// Line_Reference 148: \t * @returnbool true",
        "// Line_Reference 150: \tpublic static function setupMigration( Parser &$parser ) {",
        "// Line_Reference 155: ",
        "// Line_Reference 156: \t\treturn true;",
        "// Line_Reference 161: \t *",
        "// Line_Reference 162: \t * @private",
        "// Line_Reference 163: \t * @return void",
        "// Line_Reference 166: \t\t\\DPL\\Config::init();",
        "// Line_Reference 183: \t * @private",
        "// Line_Reference 184: \t * @param bool\tBehave Like Intersection",
        "// Line_Reference 185: \t * @return void",
        "// Line_Reference 194: \t * @return bool\tBehaving Like Intersection",
        "// Line_Reference 203: \t * @param string Raw User Input",
        "// Line_Reference 204: \t * @param array Arguments on the tag.",
        "// Line_Reference 205: \t * @param object Parser object.",
        "// Line_Reference 206: \t * @param object PPFrame object.",
        "// Line_Reference 207: \t * @return string HTML",
        "// Line_Reference 217: \t * @param string Raw User Input",
        "// Line_Reference 218: \t * @param array Arguments on the tag.",
        "// Line_Reference 219: \t * @param object Parser object.",
        "// Line_Reference 220: \t * @param object PPFrame object.",
        "// Line_Reference 221: \t * @return string HTML",
        "// Line_Reference 232: \t * @param string Raw User Input",
        "// Line_Reference 233: \t * @param array Arguments on the tag.(While not used, it is left here for future compatibility.)",
        "// Line_Reference 234: \t * @param object Parser object.",
        "// Line_Reference 235: \t * @param object PPFrame object.",
        "// Line_Reference 236: \t * @return string HTML",
        "// Line_Reference 239: \t\t// entry point for user tag <dpl>  or  <DynamicPageList>",
        "// Line_Reference 242: \t\t$parse = new \\DPL\\Parse();",
        "// Line_Reference 243: \t\tif ( \\DPL\\Config::getSetting( 'recursiveTagParse' ) ) {",
        "// Line_Reference 249: \t\tif ( isset( $reset['templates'] ) && $reset['templates'] ) {\t// we can remove the templates by save/restore",
        "// Line_Reference 252: \t\tif ( isset( $reset['categories'] ) && $reset['categories'] ) {\t// we can remove the categories by save/restore",
        "// Line_Reference 255: \t\tif ( isset( $reset['images'] ) && $reset['images'] ) {\t// we can remove the images by save/restore",
        "// Line_Reference 259: \t\tif ( isset( $reset['templates'] ) && $reset['templates'] ) {",
        "// Line_Reference 260: \t\t\t$parser->getOutput()->mTemplates = $saveTemplates;",
        "// Line_Reference 262: \t\tif ( isset( $reset['categories'] ) && $reset['categories'] ) {",
        "// Line_Reference 263: \t\t\t$parser->getOutput()->mCategories = $saveCategories;",
        "// Line_Reference 265: \t\tif ( isset( $reset['images'] ) && $reset['images'] ) {",
        "// Line_Reference 266: \t\t\t$parser->getOutput()->mImages = $saveImages;",
        "// Line_Reference 275: \t * @param object Parser object passed as a reference.",
        "// Line_Reference 276: \t * @return string Wiki Text",
        "// Line_Reference 278: \tpublic static function dplParserFunction( &$parser ) {",
        "// Line_Reference 283: \t\t// callback for the parser function {{#dpl:\t  or   {{DynamicPageList::",
        "// Line_Reference 299: \t\t$parse = new \\DPL\\Parse();",
        "// Line_Reference 301: \t\treturn [ // parser needs to be coaxed to do further recursive processing",
        "// Line_Reference 302: \t\t\t$parser->getPreprocessor()->preprocessToObj( $dplresult, Parser::PTD_FOR_INCLUSION ),",
        "// Line_Reference 310: \t * From the old documentation: \"Tries to guess a number that is buried in the text.  Uses a set of heuristic rules which may work or not.  The idea is to extract the number so that it can be used as a sorting value in the column of a DPL table output.\"",
        "// Line_Reference 312: \t * @param object Parser object passed as a reference.",
        "// Line_Reference 313: \t * @return string Wiki Text",
        "// Line_Reference 315: \tpublic static function dplNumParserFunction( &$parser, $text = '' ) {",
        "// Line_Reference 338: \t\t\treturn \\DPL\\Variables::setVar( $args );",
        "// Line_Reference 340: \t\t\treturn \\DPL\\Variables::setVarDefault( $args );",
        "// Line_Reference 342: \t\treturn \\DPL\\Variables::getVar( $cmd );",
        "// Line_Reference 367: \t\t# convert \\n to a real newline character",
        "// Line_Reference 380: \t\t$output = \\DPL\\LST::extractHeadingFromText( $parser, $page, '?title?', $text, $heading, '', $sectionHeading, true, $maxLength, $link, $trim );",
        "// Line_Reference 386: \t\t$lines   = explode( \"\\n\", $matrix );",
        "// Line_Reference 387: \t\t$m       = [];",
        "// Line_Reference 390: \t\t$from    = '';",
        "// Line_Reference 391: \t\t$to      = '';",
        "// Line_Reference 392: \t\tif ( $flip == '' | $flip == 'normal' ) {",
        "// Line_Reference 474: \t\t// if (!preg_match(\"/Query Q/\",$parser->mTitle->getText())) return '';",
        "// Line_Reference 505: \t * @access\tpublic",
        "// Line_Reference 506: \t * @param\tinteger\tDebug Level",
        "// Line_Reference 507: \t * @return\tvoid",
        "// Line_Reference 516: \t * @access\tpublic",
        "// Line_Reference 517: \t * @return\tvoid",
        "// Line_Reference 523: \t// reset everything; some categories may have been fixed, however via  fixcategory=",
        "// Line_Reference 524: \tpublic static function endReset( &$parser, $text ) {",
        "// Line_Reference 532: \t\t\t// $text .= self::dumpParsedRefs($parser,\"before final reset\");",
        "// Line_Reference 545: \t\t\t// $text .= self::dumpParsedRefs( $parser, 'after final reset' );",
        "// Line_Reference 548: \t\treturn true;",
        "// Line_Reference 551: \tpublic static function endEliminate( &$parser, &$text ) {",
        "// Line_Reference 554: \t\t\t// self::dumpParsedRefs($parser,\"before final eliminate\");",
        "// Line_Reference 560: \t\t\t\t\t// echo (\"<pre> elim: created Links [$nsp] = \". count(DynamicPageListHooks::$createdLinks[0][$nsp]).\"</pre>\\n\");",
        "// Line_Reference 561: \t\t\t\t\t// echo (\"<pre> elim: parser  Links [$nsp] = \". count($parser->getOutput()->mLinks[$nsp])\t\t\t .\"</pre>\\n\");",
        "// Line_Reference 563: \t\t\t\t\t// echo (\"<pre> elim: parser  Links [$nsp] nachher = \". count($parser->getOutput()->mLinks[$nsp])\t  .\"</pre>\\n\");",
        "// Line_Reference 574: \t\t\t\t\t// echo (\"<pre> elim: created Tpls [$nsp] = \". count(DynamicPageListHooks::$createdLinks[1][$nsp]).\"</pre>\\n\");",
        "// Line_Reference 575: \t\t\t\t\t// echo (\"<pre> elim: parser  Tpls [$nsp] = \". count($parser->getOutput()->mTemplates[$nsp])\t\t\t.\"</pre>\\n\");",
        "// Line_Reference 577: \t\t\t\t\t// echo (\"<pre> elim: parser  Tpls [$nsp] nachher = \". count($parser->getOutput()->mTemplates[$nsp])\t .\"</pre>\\n\");",
        "// Line_Reference 589: \t\t\t// $text .= self::dumpParsedRefs($parser,\"after final eliminate\".$parser->mTitle->getText());",
        "// Line_Reference 591: ",
        "// Line_Reference 592: \t\t/* self::$createdLinks = [",
        "// Line_Reference 593: \t\t\t\t'resetLinks'=> false, 'resetTemplates' => false,",
        "// Line_Reference 594: \t\t\t\t'resetCategories' => false, 'resetImages' => false, 'resetdone' => false",
        "// Line_Reference 595: \t\t]; */",
        "// Line_Reference 596: \t\treturn true;"
    ]
}
