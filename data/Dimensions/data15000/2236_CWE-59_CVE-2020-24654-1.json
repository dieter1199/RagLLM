{
    "cve_id": "CVE-2020-24654",
    "cve_description": "In KDE Ark before 20.08.1, a crafted TAR archive with symlinks can install files outside the extraction directory, as demonstrated by a write operation to a user's home directory.",
    "cve_publish_date": "2020-09-02",
    "cwe_id": "CWE-59",
    "cwe_name": "Improper Link Resolution Before File Access ('Link Following')",
    "cwe_description": "The product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.",
    "commit_message": "Pass the ARCHIVE_EXTRACT_SECURE_SYMLINKS flag to libarchive\n\nThere are archive types which allow to first create a symlink and then\nlater on dereference it. If the symlink points outside of the archive,\nthis results in writing outside of the destination directory.\n\nWith the ARCHIVE_EXTRACT_SECURE_SYMLINKS option set, libarchive avoids\nthis situation by verifying that none of the target path components are\nsymlinks before writing.\n\nRemove the commented out code in the method, which would actually\nmisbehave if enabled again.\n\nSigned-off-by: Fabian Vogt <fabian@ritter-vogt.de>",
    "type_of_change": "Modification",
    "filename_of_changes": "libarchiveplugin.cpp",
    "code_language": "C++",
    "number_of_lines_added_for_mitigation": "3",
    "number_of_lines_deleted_vulnerable_to_cve": "15",
    "vulnerable_lines": [
        "// Line_Reference 512:     int result = ARCHIVE_EXTRACT_TIME;",
        "// Line_Reference 513:     result |= ARCHIVE_EXTRACT_SECURE_NODOTDOT;",
        "// Line_Reference 514: ",
        "// Line_Reference 515:     // TODO: Don't use arksettings here",
        "// Line_Reference 516:     /*if ( ArkSettings::preservePerms() )",
        "// Line_Reference 517:     {",
        "// Line_Reference 518:         result &= ARCHIVE_EXTRACT_PERM;",
        "// Line_Reference 519:     }",
        "// Line_Reference 520: ",
        "// Line_Reference 521:     if ( !ArkSettings::extractOverwrite() )",
        "// Line_Reference 522:     {",
        "// Line_Reference 523:         result &= ARCHIVE_EXTRACT_NO_OVERWRITE;",
        "// Line_Reference 524:     }*/",
        "// Line_Reference 525: ",
        "// Line_Reference 526:     return result;"
    ]
}
