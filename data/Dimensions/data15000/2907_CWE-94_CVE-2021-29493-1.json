{
    "cve_id": "CVE-2021-29493",
    "cve_description": "Kennnyshiwa-cogs contains cogs for Red Discordbot. An RCE exploit has been found in the Tickets module of kennnyshiwa-cogs. This exploit allows discord users to craft a message that can reveal sensitive and harmful information. Users can upgrade to version 5a84d60018468e5c0346f7ee74b2b4650a6dade7 to receive a patch or, as a workaround, unload tickets to render the exploit unusable.",
    "cve_publish_date": "2021-05-06",
    "cwe_id": "CWE-94",
    "cwe_name": "Improper Control of Generation of Code ('Code Injection')",
    "cwe_description": "The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.",
    "commit_message": "fix some shit",
    "type_of_change": "Modification",
    "filename_of_changes": "core.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "132",
    "number_of_lines_deleted_vulnerable_to_cve": "62",
    "vulnerable_lines": [
        "// Line_Reference 7: class TicketsCore:",
        "// Line_Reference 18:             'category': None,",
        "// Line_Reference 19:             'closed_category': None,",
        "// Line_Reference 20:             'ticket_role': None,",
        "// Line_Reference 21:             'default_message_ticket_channel': None,",
        "// Line_Reference 22:             'sessions': {}",
        "// Line_Reference 26:         self.ticket_info_format = '\\n\\n**[{datetime}]** [{author}]\\n{information}'",
        "// Line_Reference 32:         ticket_role = [role for role in guild.roles if await self.config.guild(guild).ticket_role() == role.id]",
        "// Line_Reference 37:         default_message_ticket_channel = await self.config.guild(guild).default_message_ticket_channel()",
        "// Line_Reference 38: ",
        "// Line_Reference 39:         if category_channel and category_channel in [category.id for category in guild.categories]:",
        "// Line_Reference 40:             n1 = 10**10",
        "// Line_Reference 43:             ticket_channel = await guild.create_text_channel('{}-{}'.format(author.display_name, ticket_id),",
        "// Line_Reference 44:                                                              category=self.bot.get_channel(category_channel))",
        "// Line_Reference 45: ",
        "// Line_Reference 46:             await ticket_channel.set_permissions(author, read_messages=True, send_messages=True)",
        "// Line_Reference 47:             await ticket_channel.set_permissions(guild.me, read_messages=True, send_messages=True, manage_channels=True)",
        "// Line_Reference 48: ",
        "// Line_Reference 49:             await ticket_channel.edit(topic=self.ticket_info_format.format(ticket=ticket_id,",
        "// Line_Reference 50:                                       datetime=datetime.utcnow().strftime('%d/%m/%Y %H:%M:%S'),",
        "// Line_Reference 51:                                       author=author.display_name,",
        "// Line_Reference 52:                                       information='Ticket opened'))",
        "// Line_Reference 55:                 await ticket_channel.send(default_message_ticket_channel.format(member=author,",
        "// Line_Reference 56:                                                                                 channel=ticket_channel,",
        "// Line_Reference 57:                                                                                 origin=context.channel,",
        "// Line_Reference 58:                                                                                 ticket_role=ticket_role))",
        "// Line_Reference 61:                     session.update({ticket_channel.id: author.id})",
        "// Line_Reference 64:             return 'Naughty! You need to run the setup first.'",
        "// Line_Reference 78:         if str(channel.id) in sessions and await self.config.guild(guild).ticket_role() in [role.id for role in author.roles]:",
        "// Line_Reference 79: ",
        "// Line_Reference 80:             ticket_id = str(channel.name).split('-')[1]",
        "// Line_Reference 81:             await channel.edit(topic=channel.topic+self.ticket_info_format.format(",
        "// Line_Reference 82:                                 ticket=ticket_id,",
        "// Line_Reference 83:                                 datetime=datetime.utcnow().strftime('%d/%m/%Y %H:%M:%S'),",
        "// Line_Reference 84:                                 author=author.display_name,",
        "// Line_Reference 85:                                 information=status)",
        "// Line_Reference 86:                                )",
        "// Line_Reference 101:             return await channel.send(\"Make sure you are doing this within the ticket channel that you want to close.\")",
        "// Line_Reference 102:         if await self.config.guild(guild).ticket_role() not in [role.id for role in author.roles]:",
        "// Line_Reference 103:             return await channel.send(\"You do not have the proper role to manage tickets\")",
        "// Line_Reference 106:             ticket_id = str(channel.name).split('-')[1]",
        "// Line_Reference 111:             await channel.set_permissions(member, read_messages=True, send_messages=False)",
        "// Line_Reference 112:             await channel.edit(category=closed_category,",
        "// Line_Reference 113:                                topic=channel.topic+self.ticket_info_format.format(",
        "// Line_Reference 114:                                     ticket=ticket_id,",
        "// Line_Reference 115:                                     datetime=datetime.utcnow().strftime('%d/%m/%Y %H:%M:%S'),",
        "// Line_Reference 116:                                     author=author.display_name,",
        "// Line_Reference 117:                                     information='Ticket closed'))",
        "// Line_Reference 120:                     session.pop(channel.id, None)",
        "// Line_Reference 125:             closed_channels = [channel for channel in guild.channels if channel.category_id == await self.config.guild(guild).closed_category()]",
        "// Line_Reference 129:             return 'All closed tickets removed!'",
        "// Line_Reference 131:             return 'I need permissions to manage channels.'",
        "// Line_Reference 138:         return 'Your default message has been set.'",
        "// Line_Reference 145:                 guild.default_role: discord.PermissionOverwrite(send_messages=False, read_messages=False),",
        "// Line_Reference 148:             category_channel = await guild.create_category('Tickets', overwrites=overwrites)",
        "// Line_Reference 149:             closed_category_channel = await guild.create_category('Closed Tickets', overwrites=overwrites)",
        "// Line_Reference 151:             ticket_role = await guild.create_role(name='Ticket')",
        "// Line_Reference 153:             await category_channel.set_permissions(ticket_role, read_messages=True, send_messages=True)",
        "// Line_Reference 154:             await closed_category_channel.set_permissions(ticket_role, read_messages=True, send_messages=True)",
        "// Line_Reference 157:             await self.config.guild(guild).closed_category.set(closed_category_channel.id)",
        "// Line_Reference 160:             return ':tada: Fabulous! You\\'re all done! Now add the `Ticket` role to anyone who you deem good enough to handle tickets. And if you care, you can change the name of the role and category if you _really_ want to.'",
        "// Line_Reference 162:             return 'That didn\\'t go well... I need permissions to manage channels and manage roles. :rolling_eyes:'"
    ]
}
