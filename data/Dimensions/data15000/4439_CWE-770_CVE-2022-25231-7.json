{
    "cve_id": "CVE-2022-25231",
    "cve_description": "The package node-opcua before 2.74.0 are vulnerable to Denial of Service (DoS) by sending a specifically crafted OPC UA message with a special OPC UA NodeID, when the requested memory allocation exceeds the v8â€™s memory limit.",
    "cve_publish_date": "2022-08-23",
    "cwe_id": "CWE-770",
    "cwe_name": "Allocation of Resources Without Limits or Throttling",
    "cwe_description": "The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.",
    "commit_message": "server: use ServiceFault on request error",
    "type_of_change": "Modification",
    "filename_of_changes": "u_test_discovery_server.ts",
    "code_language": "TypeScript",
    "number_of_lines_added_for_mitigation": "22",
    "number_of_lines_deleted_vulnerable_to_cve": "14",
    "vulnerable_lines": [
        "// Line_Reference 21:     OPCUADiscoveryServer",
        "// Line_Reference 135:             function check_response(err: Error | null, response: any): void {",
        "// Line_Reference 136:                 should.not.exist(err);",
        "// Line_Reference 138:                 response.responseHeader.serviceResult.should.eql(StatusCodes.BadDiscoveryUrlMissing);",
        "// Line_Reference 141:             await send_registered_server_request(discoveryServerEndpointUrl, request, check_response);",
        "// Line_Reference 164:             function check_response(err: Error | null, response: any) {",
        "// Line_Reference 165:                 should.not.exist(err);",
        "// Line_Reference 167:                 response.responseHeader.serviceResult.should.eql(StatusCodes.BadInvalidArgument);",
        "// Line_Reference 170:             await send_registered_server_request(discoveryServerEndpointUrl, request, check_response);",
        "// Line_Reference 193:             function check_response(err: Error | null, response: any) {",
        "// Line_Reference 194:                 should.not.exist(err);",
        "// Line_Reference 195:                 response.responseHeader.serviceResult.should.eql(StatusCodes.BadServerNameMissing);",
        "// Line_Reference 198:             await send_registered_server_request(discoveryServerEndpointUrl, request, check_response);",
        "// Line_Reference 210:             OPCUAServer.registry.count().should.eql(0);1162"
    ]
}
