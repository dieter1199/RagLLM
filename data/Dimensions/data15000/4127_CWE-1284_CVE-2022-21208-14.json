{
    "cve_id": "CVE-2022-21208",
    "cve_description": "The package node-opcua before 2.74.0 are vulnerable to Denial of Service (DoS) due to a missing limitation on the number of received chunks - per single session or in total for all concurrent sessions. An attacker can exploit this vulnerability by sending an unlimited number of huge chunks (e.g. 2GB each) without sending the Final closing chunk.",
    "cve_publish_date": "2022-08-23",
    "cwe_id": "CWE-1284",
    "cwe_name": "Improper Validation of Specified Quantity in Input",
    "cwe_description": "The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.",
    "commit_message": "fix message chunk overflow detection",
    "type_of_change": "Modification",
    "filename_of_changes": "server_tcp_transport.ts",
    "code_language": "TypeScript",
    "number_of_lines_added_for_mitigation": "50",
    "number_of_lines_deleted_vulnerable_to_cve": "47",
    "vulnerable_lines": [
        "// Line_Reference 58:     public receiveBufferSize: number;",
        "// Line_Reference 59:     public sendBufferSize: number;",
        "// Line_Reference 60:     public maxMessageSize: number;",
        "// Line_Reference 61:     public maxChunkCount: number;",
        "// Line_Reference 62:     public protocolVersion: number;",
        "// Line_Reference 63: ",
        "// Line_Reference 71:         this.receiveBufferSize = 0;",
        "// Line_Reference 72:         this.sendBufferSize = 0;",
        "// Line_Reference 73:         this.maxMessageSize = 0;",
        "// Line_Reference 74:         this.maxChunkCount = 0;",
        "// Line_Reference 75:         this.protocolVersion = 0;",
        "// Line_Reference 119:         if (debugLog) {",
        "// Line_Reference 120:             debugLog(chalk.cyan(\"_abortWithError\"));",
        "// Line_Reference 123:         assert(typeof callback === \"function\", \"expecting a callback\");",
        "// Line_Reference 125:         /* istanbul ignore else */",
        "// Line_Reference 126:         if (!this._aborted) {",
        "// Line_Reference 127:             this._aborted = 1;",
        "// Line_Reference 128:             setTimeout(() => {",
        "// Line_Reference 129:                 // send the error message and close the connection",
        "// Line_Reference 130:                 assert(Object.prototype.hasOwnProperty.call(StatusCodes, statusCode.name));",
        "// Line_Reference 132:                 /* istanbul ignore next*/",
        "// Line_Reference 133:                 if (doDebug) {",
        "// Line_Reference 134:                     debugLog(chalk.red(\" Server aborting because \") + chalk.cyan(statusCode.name));",
        "// Line_Reference 135:                     debugLog(chalk.red(\" extraErrorDescription   \") + chalk.cyan(extraErrorDescription));",
        "// Line_Reference 136:                 }",
        "// Line_Reference 138:                 const errorResponse = new TCPErrorMessage({",
        "// Line_Reference 139:                     reason: statusCode.description,",
        "// Line_Reference 140:                     statusCode",
        "// Line_Reference 141:                 });",
        "// Line_Reference 143:                 const messageChunk = packTcpMessage(\"ERR\", errorResponse);",
        "// Line_Reference 145:                 this.write(messageChunk);",
        "// Line_Reference 147:                 this.disconnect(() => {",
        "// Line_Reference 148:                     this._aborted = 2;",
        "// Line_Reference 149:                     callback(new Error(extraErrorDescription + \" StatusCode = \" + statusCode.name));",
        "// Line_Reference 150:                 });",
        "// Line_Reference 151:             }, ServerTCP_transport.throttleTime);",
        "// Line_Reference 152:         } else {",
        "// Line_Reference 153:             callback(new Error(statusCode.name));",
        "// Line_Reference 154:         }",
        "// Line_Reference 155:     }",
        "// Line_Reference 157:     private _send_ACK_response(helloMessage: HelloMessage): void {",
        "// Line_Reference 158:         assert(helloMessage.receiveBufferSize >= minimumBufferSize);",
        "// Line_Reference 159:         assert(helloMessage.sendBufferSize >= minimumBufferSize);",
        "// Line_Reference 161:         this.receiveBufferSize = clamp_value(helloMessage.receiveBufferSize, 8192, 512 * 1024);",
        "// Line_Reference 162:         this.sendBufferSize = clamp_value(helloMessage.sendBufferSize, 8192, 512 * 1024);",
        "// Line_Reference 163:         this.maxMessageSize = clamp_value(helloMessage.maxMessageSize, 100000, 64 * 1024 * 1024);",
        "// Line_Reference 164:         this.maxChunkCount = clamp_value(helloMessage.maxChunkCount, 0, 65535);"
    ]
}
