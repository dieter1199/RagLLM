{
    "cve_id": "CVE-2020-5249",
    "cve_description": "In Puma (RubyGem) before 4.3.3 and 3.12.4, if an application using Puma allows untrusted input in an early-hints header, an attacker can use a carriage return character to end the header and inject malicious content, such as additional headers or an entirely new response body. This vulnerability is known as HTTP Response Splitting. While not an attack in itself, response splitting is a vector for several other attacks, such as cross-site scripting (XSS). This is related to CVE-2020-5247, which fixed this vulnerability but only for regular responses. This has been fixed in 4.3.3 and 3.12.4.",
    "cve_publish_date": "2020-03-02",
    "cwe_id": "CWE-74",
    "cwe_name": "Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')",
    "cwe_description": "The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.",
    "commit_message": "HTTP Injection - fix bug + 1 more vector (#2136)\n\n+ Fixes a problem in 4.3.2/3.12.3 where we were not splitting newlines in headers according to Rack spec\r\n+ Fixes another vector for HTTP injection - early hints",
    "type_of_change": "Modification",
    "filename_of_changes": "test_puma_server.rb",
    "code_language": "Ruby",
    "number_of_lines_added_for_mitigation": "55",
    "number_of_lines_deleted_vulnerable_to_cve": "10",
    "vulnerable_lines": [
        "// Line_Reference 775:   # https://github.com/ruby/ruby/commit/d9d4a28f1cdd05a0e8dabb36d747d40bbcc30f16",
        "// Line_Reference 776:   def test_prevent_response_splitting_headers",
        "// Line_Reference 777:     server_run app: ->(_) { [200, {'X-header' => \"malicious\\r\\nCookie: hack\"}, [\"Hello\"]] }",
        "// Line_Reference 779:     refute_match 'hack', data",
        "// Line_Reference 782:   def test_prevent_response_splitting_headers_cr",
        "// Line_Reference 783:     server_run app: ->(_) { [200, {'X-header' => \"malicious\\rCookie: hack\"}, [\"Hello\"]] }",
        "// Line_Reference 785:     refute_match 'hack', data",
        "// Line_Reference 788:   def test_prevent_response_splitting_headers_lf",
        "// Line_Reference 789:     server_run app: ->(_) { [200, {'X-header' => \"malicious\\nCookie: hack\"}, [\"Hello\"]] }",
        "// Line_Reference 791:     refute_match 'hack', data"
    ]
}
