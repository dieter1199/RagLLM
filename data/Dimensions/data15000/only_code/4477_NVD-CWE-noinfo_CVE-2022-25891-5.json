"strings"
Describe("creating a json payload", func() {
limits := types.MessageLimit{
ChunkSize:      2000,
TotalChunkSize: 6000,
ChunkCount:     10,
}
When("given a message that exceeds the max length", func() {
When("not splitting by lines", func() {
It("should return a payload with chunked messages", func() {
items, _ := testPartitionMessage(42, limits, 100)
Expect(len(items[0].Text)).To(Equal(1994))
Expect(len(items[1].Text)).To(Equal(1999))
Expect(len(items[2].Text)).To(Equal(205))
})
It("omit characters above total max", func() {
items, _ := testPartitionMessage(62, limits, 100)
Expect(len(items[0].Text)).To(Equal(1994))
Expect(len(items[1].Text)).To(Equal(1999))
Expect(len(items[2].Text)).To(Equal(1999))
Expect(len(items[3].Text)).To(Equal(5))
When("splitting by lines", func() {
It("should return a payload with chunked messages", func() {
items, omitted := testMessageItemsFromLines(18, limits, 2)
Expect(len(items[0].Text)).To(Equal(200))
Expect(len(items[8].Text)).To(Equal(200))
Expect(omitted).To(Equal(0))
})
It("omit characters above total max", func() {
items, omitted := testMessageItemsFromLines(19, limits, 2)
Expect(len(items[0].Text)).To(Equal(200))
Expect(len(items[8].Text)).To(Equal(200))
Expect(omitted).To(Equal(100))
})
It("should trim characters above chunk size", func() {
hundreds := 42
repeat := 21
items, omitted := testMessageItemsFromLines(hundreds, limits, repeat)
Expect(len(items[0].Text)).To(Equal(limits.ChunkSize))
Expect(len(items[1].Text)).To(Equal(limits.ChunkSize))
// Trimmed characters do not count towards the total omitted count
Expect(omitted).To(Equal(0))
})
It("omit characters above total chunk size", func() {
hundreds := 100
repeat := 20
items, omitted := testMessageItemsFromLines(hundreds, limits, repeat)
Expect(len(items[0].Text)).To(Equal(limits.ChunkSize))
Expect(len(items[1].Text)).To(Equal(limits.ChunkSize))
Expect(len(items[2].Text)).To(Equal(limits.ChunkSize))
maxRunes := hundreds * 100
expectedOmitted := maxRunes - limits.TotalChunkSize
Expect(omitted).To(Equal(expectedOmitted))
})