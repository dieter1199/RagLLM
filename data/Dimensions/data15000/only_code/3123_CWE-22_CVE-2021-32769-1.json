try {
URI uri = url.toURI();
if (uri.getScheme().equals("jar")) {
synchronized (DefaultClassPathResourceLoader.class) {
FileSystem fileSystem = null;
try {
fileSystem = FileSystems.getFileSystem(uri);
} catch (FileSystemNotFoundException e) {
//no-op
}
if (fileSystem == null || !fileSystem.isOpen()) {
fileSystem = FileSystems.newFileSystem(uri, Collections.emptyMap(), classLoader);
} catch (FileSystemAlreadyExistsException e) {
}
Path pathObject = fileSystem.getPath(path);
if (Files.isDirectory(pathObject)) {
return Optional.empty();
}
return Optional.of(new ByteArrayInputStream(Files.readAllBytes(pathObject)));
} finally {
if (fileSystem != null && fileSystem.isOpen()) {
try {
fileSystem.close();
} catch (IOException e) {
if (LOG.isDebugEnabled()) {
LOG.debug("Error shutting down JAR file system [" + fileSystem + "]: " + e.getMessage(), e);
} else if (uri.getScheme().equals("file")) {
Path pathObject = Paths.get(uri);
if (Files.isDirectory(pathObject)) {
return Optional.empty();
return Optional.of(Files.newInputStream(pathObject));
}
} catch (URISyntaxException | IOException | ProviderNotFoundException e) {
if (LOG.isDebugEnabled()) {
LOG.debug("Error establishing whether path is a directory: " + e.getMessage(), e);
return Optional.ofNullable(classLoader.getResourceAsStream(prefixPath(path)));
return Optional.ofNullable(url);
builder.accept(url);