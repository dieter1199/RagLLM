from sqlalchemy.orm import deferred, relationship
_username = Column('Username', String, nullable=False, unique=True)
_user_root = Column('UserRoot', String, nullable=False, default="")
_email = Column('UserEmail', String, nullable=False, default="")
_role = Column('role', SmallInteger, nullable=False, server_default=str(USER_ROLE))
def add_user(cls, username, password=None, **attrs):
@hybrid_property
def username(self):
return self._username
@username.setter
def username(self, value):
oldvalue = self._username
self._username = value
if oldvalue != value:
cherrypy.engine.publish('user_attr_changed', self, {'username': (oldvalue, value)})
@hybrid_property
def role(self):
if self._role is None:
return self.USER_ROLE
return self._role
@role.setter
def role(self, value):
oldvalue = self._role
self._role = value
if oldvalue != value:
cherrypy.engine.publish('user_attr_changed', self, {'role': (oldvalue, value)})
@hybrid_property
def email(self):
return self._email
@email.setter
def email(self, value):
oldvalue = self._email
self._email = value
if oldvalue != value:
cherrypy.engine.publish('user_attr_changed', self, {'email': (oldvalue, value)})
@hybrid_property
def user_root(self):
return self._user_root
@user_root.setter
def user_root(self, value):
oldvalue = self._user_root
self._user_root = value
if oldvalue != value:
cherrypy.engine.publish('user_attr_changed', self, {'user_root': (oldvalue, value)})
