{
    "cve_id": "CVE-2017-12595",
    "cve_description": "The tokenizer in QPDF 6.0.0 and 7.0.b1 is recursive for arrays and dictionaries, which allows remote attackers to cause a denial of service (stack consumption and segmentation fault) or possibly have unspecified other impact via a PDF document with a deep data structure, as demonstrated by a crash in QPDFObjectHandle::parseInternal in libqpdf/QPDFObjectHandle.cc.",
    "cve_publish_date": "2017-08-27",
    "cwe_id": "CWE-20",
    "cwe_name": "Improper Input Validation",
    "cwe_description": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.",
    "commit_message": "Parse iteratively to avoid stack overflow (fixes #146)",
    "type_of_change": "Modification",
    "filename_of_changes": "QPDFObjectHandle.cc",
    "code_language": "C++",
    "number_of_lines_added_for_mitigation": "141",
    "number_of_lines_deleted_vulnerable_to_cve": "107",
    "vulnerable_lines": [
        "// Line_Reference 886:             parseInternal(input, \"content\", tokenizer, empty,",
        "// Line_Reference 887:                           0, 0, false, false, true);",
        "// Line_Reference 948:                          decrypter, context, false, false, false);",
        "// Line_Reference 956:                                 bool in_array, bool in_dictionary,",
        "// Line_Reference 965:     if (in_dictionary && in_array)",
        "// Line_Reference 966:     {",
        "// Line_Reference 967: \t// Although dictionaries and arrays arbitrarily nest, these",
        "// Line_Reference 968: \t// variables indicate what is at the top of the stack right",
        "// Line_Reference 969: \t// now, so they can, by definition, never both be true.",
        "// Line_Reference 970: \tthrow std::logic_error(",
        "// Line_Reference 971: \t    \"INTERNAL ERROR: parseInternal: in_dict && in_array\");",
        "// Line_Reference 972:     }",
        "// Line_Reference 976:     qpdf_offset_t offset = input->tell();",
        "// Line_Reference 977:     std::vector<QPDFObjectHandle> olist;",
        "// Line_Reference 991:                 // Return uninitialized object to indicate EOF",
        "// Line_Reference 992:                 return object;",
        "// Line_Reference 1015: \t    if (in_array)",
        "// Line_Reference 1017: \t\tdone = true;",
        "// Line_Reference 1032: \t    if (in_dictionary)",
        "// Line_Reference 1034: \t\tdone = true;",
        "// Line_Reference 1049: \t    object = parseInternal(",
        "// Line_Reference 1050: \t\tinput, object_description, tokenizer, empty,",
        "// Line_Reference 1051:                 decrypter, context, true, false, content_stream);",
        "// Line_Reference 1052: \t    break;",
        "// Line_Reference 1053: ",
        "// Line_Reference 1055: \t    object = parseInternal(",
        "// Line_Reference 1056: \t\tinput, object_description, tokenizer, empty,",
        "// Line_Reference 1057:                 decrypter, context, false, true, content_stream);",
        "// Line_Reference 1087: \t\telse if ((value == \"R\") && (in_array || in_dictionary) &&",
        "// Line_Reference 1088: \t\t    (olist.size() >= 2) &&",
        "// Line_Reference 1089:                     (! olist.at(olist.size() - 1).isIndirect()) &&",
        "// Line_Reference 1090: \t\t    (olist.at(olist.size() - 1).isInteger()) &&",
        "// Line_Reference 1091:                     (! olist.at(olist.size() - 2).isIndirect()) &&",
        "// Line_Reference 1092: \t\t    (olist.at(olist.size() - 2).isInteger()))",
        "// Line_Reference 1109: \t\telse if ((value == \"endobj\") &&",
        "// Line_Reference 1110: \t\t\t (! (in_array || in_dictionary)))",
        "// Line_Reference 1156: \tif (in_dictionary || in_array)",
        "// Line_Reference 1157: \t{",
        "// Line_Reference 1158: \t    if (! done)",
        "// Line_Reference 1159: \t    {",
        "// Line_Reference 1160: \t\tolist.push_back(object);",
        "// Line_Reference 1161: \t    }",
        "// Line_Reference 1162: \t}",
        "// Line_Reference 1163: \telse if (! object.isInitialized())",
        "// Line_Reference 1164: \t{",
        "// Line_Reference 1165:             warn(context,",
        "// Line_Reference 1166:                  QPDFExc(qpdf_e_damaged_pdf, input->getName(),",
        "// Line_Reference 1167:                          object_description,",
        "// Line_Reference 1168:                          input->getLastOffset(),",
        "// Line_Reference 1169:                          \"parse error while reading object\"));",
        "// Line_Reference 1171: \t}",
        "// Line_Reference 1172: \telse",
        "// Line_Reference 1173: \t{",
        "// Line_Reference 1174: \t    done = true;",
        "// Line_Reference 1175: \t}",
        "// Line_Reference 1176:     }",
        "// Line_Reference 1178:     if (in_array)",
        "// Line_Reference 1179:     {",
        "// Line_Reference 1180: \tobject = newArray(olist);",
        "// Line_Reference 1181:     }",
        "// Line_Reference 1182:     else if (in_dictionary)",
        "// Line_Reference 1183:     {",
        "// Line_Reference 1184:         // Convert list to map. Alternating elements are keys. Attempt",
        "// Line_Reference 1185:         // to recover more or less gracefully from invalid",
        "// Line_Reference 1186:         // dictionaries.",
        "// Line_Reference 1187:         std::set<std::string> names;",
        "// Line_Reference 1188:         for (std::vector<QPDFObjectHandle>::iterator iter = olist.begin();",
        "// Line_Reference 1189:              iter != olist.end(); ++iter)",
        "// Line_Reference 1191:             if ((! (*iter).isIndirect()) && (*iter).isName())",
        "// Line_Reference 1193:                 names.insert((*iter).getName());",
        "// Line_Reference 1195:         }",
        "// Line_Reference 1197:         std::map<std::string, QPDFObjectHandle> dict;",
        "// Line_Reference 1198:         int next_fake_key = 1;",
        "// Line_Reference 1199:         for (unsigned int i = 0; i < olist.size(); ++i)",
        "// Line_Reference 1200:         {",
        "// Line_Reference 1201:             QPDFObjectHandle key_obj = olist.at(i);",
        "// Line_Reference 1202:             QPDFObjectHandle val;",
        "// Line_Reference 1203:             if (key_obj.isIndirect() || (! key_obj.isName()))",
        "// Line_Reference 1205:                 bool found_fake = false;",
        "// Line_Reference 1206:                 std::string candidate;",
        "// Line_Reference 1207:                 while (! found_fake)",
        "// Line_Reference 1209:                     candidate =",
        "// Line_Reference 1210:                         \"/QPDFFake\" + QUtil::int_to_string(next_fake_key++);",
        "// Line_Reference 1211:                     found_fake = (names.count(candidate) == 0);",
        "// Line_Reference 1212:                     QTC::TC(\"qpdf\", \"QPDFObjectHandle found fake\",",
        "// Line_Reference 1213:                             (found_fake ? 0 : 1));",
        "// Line_Reference 1215:                 warn(context,",
        "// Line_Reference 1216:                      QPDFExc(",
        "// Line_Reference 1217:                          qpdf_e_damaged_pdf,",
        "// Line_Reference 1218:                          input->getName(), object_description, offset,",
        "// Line_Reference 1219:                          \"expected dictionary key but found\"",
        "// Line_Reference 1220:                          \" non-name object; inserting key \" +",
        "// Line_Reference 1221:                          candidate));",
        "// Line_Reference 1222:                 val = key_obj;",
        "// Line_Reference 1223:                 key_obj = newName(candidate);",
        "// Line_Reference 1225:             else if (i + 1 >= olist.size())",
        "// Line_Reference 1227:                 QTC::TC(\"qpdf\", \"QPDFObjectHandle no val for last key\");",
        "// Line_Reference 1228:                 warn(context,",
        "// Line_Reference 1229:                      QPDFExc(",
        "// Line_Reference 1230:                          qpdf_e_damaged_pdf,",
        "// Line_Reference 1231:                          input->getName(), object_description, offset,",
        "// Line_Reference 1232:                          \"dictionary ended prematurely; using null as value\"",
        "// Line_Reference 1233:                          \" for last key\"));",
        "// Line_Reference 1234:                 val = newNull();",
        "// Line_Reference 1238:                 val = olist.at(++i);",
        "// Line_Reference 1240:             dict[key_obj.getName()] = val;",
        "// Line_Reference 1242:         object = newDictionary(dict);"
    ]
}
