{
    "cve_id": "CVE-2021-43858",
    "cve_description": "MinIO is a Kubernetes native application for cloud storage. Prior to version `RELEASE.2021-12-27T07-23-18Z`, a malicious client can hand-craft an HTTP API call that allows for updating policy for a user and gaining higher privileges. The patch in version `RELEASE.2021-12-27T07-23-18Z` changes the accepted request body type and removes the ability to apply policy changes through this API. There is a workaround for this vulnerability: Changing passwords can be disabled by adding an explicit `Deny` rule to disable the API for users.",
    "cve_publish_date": "2021-12-27",
    "cwe_id": "CWE-863",
    "cwe_name": "Incorrect Authorization",
    "cwe_description": "The product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. This allows attackers to bypass intended access restrictions.",
    "commit_message": "Fix user privilege escalation bug (#13976)\n\nThe AddUser() API endpoint was accepting a policy field. \r\nThis API is used to update a user's secret key and account \r\nstatus, and allows a regular user to update their own secret key. \r\n\r\nThe policy update is also applied though does not appear to \r\nbe used by any existing client-side functionality.\r\n\r\nThis fix changes the accepted request body type and removes \r\nthe ability to apply policy changes as that is possible via the \r\npolicy set API.\r\n\r\nNOTE: Changing passwords can be disabled as a workaround\r\nfor this issue by adding an explicit \"Deny\" rule to disable the API\r\nfor users.",
    "type_of_change": "Modification",
    "filename_of_changes": "iam-store.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "3",
    "number_of_lines_deleted_vulnerable_to_cve": "21",
    "vulnerable_lines": [
        "// Line_Reference 1632: func (store *IAMStoreSys) AddUser(ctx context.Context, accessKey string, uinfo madmin.UserInfo) error {",
        "// Line_Reference 1645: \t\tSecretKey: uinfo.SecretKey,",
        "// Line_Reference 1647: \t\t\tif uinfo.Status == madmin.AccountEnabled {",
        "// Line_Reference 1660: \t// Set policy if specified.",
        "// Line_Reference 1661: \tif uinfo.PolicyName != \"\" {",
        "// Line_Reference 1662: \t\tpolicy := uinfo.PolicyName",
        "// Line_Reference 1663: \t\t// Handle policy mapping set/update",
        "// Line_Reference 1664: \t\tmp := newMappedPolicy(policy)",
        "// Line_Reference 1665: \t\tfor _, p := range mp.toSlice() {",
        "// Line_Reference 1666: \t\t\tif _, found := cache.iamPolicyDocsMap[policy]; !found {",
        "// Line_Reference 1667: \t\t\t\tlogger.LogIf(GlobalContext, fmt.Errorf(\"%w: (%s)\", errNoSuchPolicy, p))",
        "// Line_Reference 1668: \t\t\t\treturn errNoSuchPolicy",
        "// Line_Reference 1669: \t\t\t}",
        "// Line_Reference 1670: \t\t}",
        "// Line_Reference 1671: ",
        "// Line_Reference 1672: \t\tif err := store.saveMappedPolicy(ctx, accessKey, regUser, false, mp); err != nil {",
        "// Line_Reference 1673: \t\t\treturn err",
        "// Line_Reference 1674: \t\t}",
        "// Line_Reference 1675: \t\tcache.iamUserPolicyMap[accessKey] = mp",
        "// Line_Reference 1676: \t}",
        "// Line_Reference 1678: "
    ]
}
