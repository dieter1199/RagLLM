{
    "cve_id": "CVE-2022-23540",
    "cve_description": "In versions `<=8.5.1` of `jsonwebtoken` library, lack of algorithm definition in the `jwt.verify()` function can lead to signature validation bypass due to defaulting to the `none` algorithm for signature verification. Users are affected if you do not specify algorithms in the `jwt.verify()` function. This issue has been fixed, please update to version 9.0.0 which removes the default support for the none algorithm in the `jwt.verify()` method. There will be no impact, if you update to version 9.0.0 and you donâ€™t need to allow for the `none` algorithm. If you need 'none' algorithm, you have to explicitly specify that in `jwt.verify()` options.\n",
    "cve_publish_date": "2022-12-22",
    "cwe_id": "CWE-347",
    "cwe_name": "Improper Verification of Cryptographic Signature",
    "cwe_description": "The product does not verify, or incorrectly verifies, the cryptographic signature for data.",
    "commit_message": "Merge pull request from GHSA-8cf7-32gw-wr33\n\n* Check if node version supports asymmetricKeyDetails\n\n* Validate algorithms for ec key type\n\n* Rename variable\n\n* Rename function\n\n* Add early return for symmetric keys\n\n* Validate algorithm for RSA key type\n\n* Validate algorithm for RSA-PSS key type\n\n* Check key types for EdDSA algorithm\n\n* Rename function\n\n* Move validateKey function to module\n\n* Convert arrow to function notation\n\n* Validate key in verify function\n\n* Simplify if\n\n* Convert if to switch..case\n\n* Guard against empty key in validation\n\n* Remove empty line\n\n* Add lib to check modulus length\n\n* Add modulus length checks\n\n* Validate mgf1HashAlgorithm and saltLength\n\n* Check node version before using key details API\n\n* Use built-in modulus length getter\n\n* Fix Node version validations\n\n* Remove duplicate validateKey\n\n* Add periods to error messages\n\n* Fix validation in verify function\n\n* Make asymmetric key validation the latest validation step\n\n* Change key curve validation\n\n* Remove support for ES256K\n\n* Fix old test that was using wrong key types to sign tokens\n\n* Enable RSA-PSS for old Node versions\n\n* Add specific RSA-PSS validations on Node 16 LTS+\n\n* Improve error message\n\n* Simplify key validation code\n\n* Fix typo\n\n* Improve error message\n\n* Change var to const in test\n\n* Change const to let to avoid reassigning problem\n\n* Improve error message\n\n* Test incorrect private key type\n\n* Rename invalid to unsupported\n\n* Test verifying of jwt token with unsupported key\n\n* Test invalid private key type\n\n* Change order of object parameters\n\n* Move validation test to separate file\n\n* Move all validation tests to separate file\n\n* Add prime256v1 ec key\n\n* Remove modulus length check\n\n* WIP: Add EC key validation tests\n\n* Fix node version checks\n\n* Fix error message check on test\n\n* Add successful tests for EC curve check\n\n* Remove only from describe\n\n* Remove `only`\n\n* Remove duplicate block of code\n\n* Move variable to a different scope and make it const\n\n* Convert allowed curves to object for faster lookup\n\n* Rename variable\n\n* Change variable assignment order\n\n* Remove unused object properties\n\n* Test RSA-PSS happy path and wrong length\n\n* Add missing tests\n\n* Pass validation if no algorithm has been provided\n\n* Test validation of invalid salt length\n\n* Test error when signing token with invalid key\n\n* Change var to const/let in verify tests\n\n* Test verifying token with invalid key\n\n* Improve test error messages\n\n* Add parameter to skip private key validation\n\n* Replace DSA key with a 4096 bit long key\n\n* Test allowInvalidPrivateKeys in key signing\n\n* Improve test message\n\n* Rename variable\n\n* Add key validation flag tests\n\n* Fix variable name in Readme\n\n* Change private to public dsa key in verify\n\n* Rename flag\n\n* Run EC validation tests conditionally\n\n* Fix tests in old node versions\n\n* Ignore block of code from test coverage\n\n* Separate EC validations tests into two different ones\n\n* Add comment\n\n* Wrap switch in if instead of having an early return\n\n* Remove unsupported algorithms from asymmetric key validation\n\n* Rename option to allowInvalidAsymmetricKeyTypes and improve Readme\n\n* 9.0.0\n\n* adding migration notes to readme\n\n* adding changelog for version 9.0.0\n\nCo-authored-by: julienwoll <julien.wollscheid@auth0.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "jwt.asymmetric_signing.tests.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "60",
    "number_of_lines_deleted_vulnerable_to_cve": "29",
    "vulnerable_lines": [
        "// Line_Reference 1: var jwt = require('../index');",
        "// Line_Reference 2: var PS_SUPPORTED = require('../lib/psSupported');",
        "// Line_Reference 3: var fs = require('fs');",
        "// Line_Reference 4: var path = require('path');",
        "// Line_Reference 6: var expect = require('chai').expect;",
        "// Line_Reference 7: var assert = require('chai').assert;",
        "// Line_Reference 8: var ms = require('ms');",
        "// Line_Reference 14: var algorithms = {",
        "// Line_Reference 38: describe('Asymmetric Algorithms', function(){",
        "// Line_Reference 39: ",
        "// Line_Reference 42:       var pub = algorithms[algorithm].pub_key;",
        "// Line_Reference 43:       var priv = algorithms[algorithm].priv_key;",
        "// Line_Reference 46:       var invalid_pub = algorithms[algorithm].invalid_pub_key;",
        "// Line_Reference 49:         var token = jwt.sign({ foo: 'bar' }, priv, { algorithm: algorithm });",
        "// Line_Reference 76:             var decoded = jwt.verify(token, pub);",
        "// Line_Reference 82:             var jwtVerify = jwt.verify.bind(null, token, invalid_pub)",
        "// Line_Reference 90:         var token = jwt.sign({ foo: 'bar' }, priv, { algorithm: algorithm, expiresIn: '10m' });",
        "// Line_Reference 91: ",
        "// Line_Reference 102:           token = jwt.sign({ foo: 'bar' }, priv, { algorithm: algorithm, expiresIn: -1 * ms('10m') });",
        "// Line_Reference 103: ",
        "// Line_Reference 116:           token = jwt.sign({ foo: 'bar' }, priv, { algorithm: algorithm, expiresIn: -1 * ms('10m') });",
        "// Line_Reference 138:         var token = jwt.sign({ foo: 'bar' }, priv, { algorithm: algorithm });",
        "// Line_Reference 151:           var payload = jwt.decode('whatever.token');",
        "// Line_Reference 159:           var obj = { foo: 'bar' };",
        "// Line_Reference 160:           var token = jwt.sign(obj, priv, { algorithm: algorithm });",
        "// Line_Reference 161:           var payload = jwt.decode(token);",
        "// Line_Reference 166:           var obj = { foo: 'bar' };",
        "// Line_Reference 167:           var token = jwt.sign(obj, priv, { algorithm: algorithm });",
        "// Line_Reference 168:           var decoded = jwt.decode(token, { complete: true });"
    ]
}
