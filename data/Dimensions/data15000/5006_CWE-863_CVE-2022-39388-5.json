{
    "cve_id": "CVE-2022-39388",
    "cve_description": "Istio is an open platform to connect, manage, and secure microservices. In versions on the 1.15.x branch prior to 1.15.3, a user can impersonate any workload identity within the service mesh if they have localhost access to the Istiod control plane. Version 1.15.3 contains a patch for this issue. There are no known workarounds.",
    "cve_publish_date": "2022-11-10",
    "cwe_id": "CWE-863",
    "cwe_name": "Incorrect Authorization",
    "cwe_description": "The product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. This allows attackers to bypass intended access restrictions.",
    "commit_message": "add xfcc authenticator (#39405)\n\n* add xfcc authenticator\n\nSigned-off-by: Rama Chavali <rama.rao@salesforce.com>\n\n* comments\n\nSigned-off-by: Rama Chavali <rama.rao@salesforce.com>\n\n* go mod\n\nSigned-off-by: Rama Chavali <rama.rao@salesforce.com>\n\n* lint\n\nSigned-off-by: Rama Chavali <rama.rao@salesforce.com>\n\n* add license\n\nSigned-off-by: Rama Chavali <rama.rao@salesforce.com>\n\n* fix\n\nSigned-off-by: Rama Chavali <rama.rao@salesforce.com>\n\n* fix folder\n\nSigned-off-by: Rama Chavali <rama.rao@salesforce.com>\n\n* add copying file\n\nSigned-off-by: Rama Chavali <rama.rao@salesforce.com>\n\n* remove COPYING\n\nSigned-off-by: Rama Chavali <rama.rao@salesforce.com>\n\n* address review comments\n\nSigned-off-by: Rama Chavali <rama.rao@salesforce.com>\n\n* address comments\n\nSigned-off-by: Rama Chavali <rama.rao@salesforce.com>\n\n* add cidr authenticator\n\nSigned-off-by: Rama Chavali <rama.rao@salesforce.com>\n\n* lint\n\nSigned-off-by: Rama Chavali <rama.rao@salesforce.com>\n\n* minor changes\n\nSigned-off-by: Rama Chavali <rama.rao@salesforce.com>\n\n* add more comments\n\nSigned-off-by: Rama Chavali <rama.rao@salesforce.com>\n\n* update based on review comments\n\nSigned-off-by: Rama Chavali <rama.rao@salesforce.com>\n\n* fix test\n\nSigned-off-by: Rama Chavali <rama.rao@salesforce.com>\n\n* address comments\n\nSigned-off-by: Rama Chavali <rama.rao@salesforce.com>\n\n* address comments\n\nSigned-off-by: Rama Chavali <rama.rao@salesforce.com>\n\n* review comments\n\nSigned-off-by: Rama Chavali <rama.rao@salesforce.com>\n\n* add authentication manager\n\nSigned-off-by: Rama Chavali <rama.rao@salesforce.com>\n\n* add test\n\nSigned-off-by: Rama Chavali <rama.rao@salesforce.com>\n\n* fix test\n\nSigned-off-by: Rama Chavali <rama.rao@salesforce.com>\n\n* fix test\n\nSigned-off-by: Rama Chavali <rama.rao@salesforce.com>\n\n* address comments\n\nSigned-off-by: Rama Chavali <rama.rao@salesforce.com>\n\n* address comments\n\nSigned-off-by: Rama Chavali <rama.rao@salesforce.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "server.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "2",
    "number_of_lines_deleted_vulnerable_to_cve": "31",
    "vulnerable_lines": [
        "// Line_Reference 18: \t\"fmt\"",
        "// Line_Reference 24: \t\"google.golang.org/grpc/peer\"",
        "// Line_Reference 57: func getConnectionAddress(ctx context.Context) string {",
        "// Line_Reference 58: \tpeerInfo, ok := peer.FromContext(ctx)",
        "// Line_Reference 59: \tpeerAddr := \"unknown\"",
        "// Line_Reference 60: \tif ok {",
        "// Line_Reference 61: \t\tpeerAddr = peerInfo.Addr.String()",
        "// Line_Reference 62: \t}",
        "// Line_Reference 63: \treturn peerAddr",
        "// Line_Reference 64: }",
        "// Line_Reference 65: ",
        "// Line_Reference 76: \tcaller := Authenticate(ctx, s.Authenticators)",
        "// Line_Reference 161: ",
        "// Line_Reference 162: // authenticate goes through a list of authenticators (provided client cert, k8s jwt, and ID token)",
        "// Line_Reference 163: // and authenticates if one of them is valid.",
        "// Line_Reference 164: func Authenticate(ctx context.Context, auth []security.Authenticator) *security.Caller {",
        "// Line_Reference 165: \t// TODO: apply different authenticators in specific order / according to configuration.",
        "// Line_Reference 166: \tvar errMsg string",
        "// Line_Reference 167: \tfor id, authn := range auth {",
        "// Line_Reference 168: \t\tu, err := authn.Authenticate(ctx)",
        "// Line_Reference 169: \t\tif err != nil {",
        "// Line_Reference 170: \t\t\terrMsg += fmt.Sprintf(\"Authenticator %s at index %d got error: %v. \", authn.AuthenticatorType(), id, err)",
        "// Line_Reference 171: \t\t}",
        "// Line_Reference 172: \t\tif u != nil && err == nil {",
        "// Line_Reference 173: \t\t\tserverCaLog.Debugf(\"Authentication successful through auth source %v\", u.AuthSource)",
        "// Line_Reference 174: \t\t\treturn u",
        "// Line_Reference 175: \t\t}",
        "// Line_Reference 176: \t}",
        "// Line_Reference 177: \tserverCaLog.Warnf(\"Authentication failed for %v: %s\", getConnectionAddress(ctx), errMsg)",
        "// Line_Reference 178: \treturn nil",
        "// Line_Reference 179: }"
    ]
}
