{
    "cve_id": "CVE-2022-41917",
    "cve_description": "OpenSearch is a community-driven, open source fork of Elasticsearch and Kibana. OpenSearch allows users to specify a local file when defining text analyzers to process data for text analysis. An issue in the implementation of this feature allows certain specially crafted queries to return a response containing the first line of text from arbitrary files. The list of potentially impacted files is limited to text files with read permissions allowed in the Java Security Manager policy configuration. OpenSearch version 1.3.7 and 2.4.0 contain a fix for this issue. Users are advised to upgrade. There are no known workarounds for this issue.",
    "cve_publish_date": "2022-11-16",
    "cwe_id": "CWE-755",
    "cwe_name": "Improper Handling of Exceptional Conditions",
    "cwe_description": "The product does not handle or incorrectly handles an exceptional condition.",
    "commit_message": "Merge pull request from GHSA-w3rx-m34v-wrqx\n\n* Fix error handling while reading analyzer mapping rules\n\nAdd new parseWordList method that takes a parser as a parameter. It reads custom rules from settings or a file, parses and handles errors. Make error messages less verbose for rules files outside config directory.\n\nSigned-off-by: Rabi Panda <adnapibar@gmail.com>\n\n* Add CHANGELOG.md\n\nSigned-off-by: Rabi Panda <adnapibar@gmail.com>\n\nSigned-off-by: Rabi Panda <adnapibar@gmail.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "AnalysisTests.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "41",
    "number_of_lines_deleted_vulnerable_to_cve": "22",
    "vulnerable_lines": [
        "// Line_Reference 42: import java.io.FileNotFoundException;",
        "// Line_Reference 45: import java.nio.charset.CharacterCodingException;",
        "// Line_Reference 46: import java.nio.charset.MalformedInputException;",
        "// Line_Reference 49: import java.nio.file.NoSuchFileException;",
        "// Line_Reference 82:             () -> Analysis.getWordList(env, nodeSettings, \"foo.bar\")",
        "// Line_Reference 83:         );",
        "// Line_Reference 84:         assertEquals(\"IOException while reading foo.bar_path: \" + tempDir.resolve(\"foo.dict\").toString(), ex.getMessage());",
        "// Line_Reference 85:         assertTrue(",
        "// Line_Reference 86:             ex.getCause().toString(),",
        "// Line_Reference 87:             ex.getCause() instanceof FileNotFoundException || ex.getCause() instanceof NoSuchFileException",
        "// Line_Reference 102:             () -> Analysis.getWordList(env, nodeSettings, \"foo.bar\")",
        "// Line_Reference 103:         );",
        "// Line_Reference 104:         assertEquals(",
        "// Line_Reference 105:             \"Unsupported character encoding detected while reading foo.bar_path: \"",
        "// Line_Reference 106:                 + tempDir.resolve(\"foo.dict\").toString()",
        "// Line_Reference 107:                 + \" - files must be UTF-8 encoded\",",
        "// Line_Reference 108:             ex.getMessage()",
        "// Line_Reference 109:         );",
        "// Line_Reference 110:         assertTrue(",
        "// Line_Reference 111:             ex.getCause().toString(),",
        "// Line_Reference 112:             ex.getCause() instanceof MalformedInputException || ex.getCause() instanceof CharacterCodingException",
        "// Line_Reference 127:         List<String> wordList = Analysis.getWordList(env, nodeSettings, \"foo.bar\");"
    ]
}
