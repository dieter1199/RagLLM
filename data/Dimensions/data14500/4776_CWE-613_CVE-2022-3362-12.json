{
    "cve_id": "CVE-2022-3362",
    "cve_description": "Insufficient Session Expiration in GitHub repository ikus060/rdiffweb prior to 2.5.0.",
    "cve_publish_date": "2022-11-14",
    "cwe_id": "CWE-613",
    "cwe_name": "Insufficient Session Expiration",
    "cwe_description": "According to WASC, \"Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization.\"",
    "commit_message": "Delete user's session on password change\n\n* Revisit add, delete commit function\n* Clean-up Access Token using a scheduled job",
    "type_of_change": "Modification",
    "filename_of_changes": "test.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "4",
    "number_of_lines_deleted_vulnerable_to_cve": "51",
    "vulnerable_lines": [
        "// Line_Reference 54: class AppTestCase(unittest.TestCase):",
        "// Line_Reference 55: ",
        "// Line_Reference 56:     REPO = 'testcases'",
        "// Line_Reference 57: ",
        "// Line_Reference 58:     USERNAME = 'admin'",
        "// Line_Reference 59: ",
        "// Line_Reference 60:     PASSWORD = 'admin123'",
        "// Line_Reference 61: ",
        "// Line_Reference 62:     default_config = {}",
        "// Line_Reference 63: ",
        "// Line_Reference 64:     app_class = RdiffwebApp",
        "// Line_Reference 65: ",
        "// Line_Reference 66:     @classmethod",
        "// Line_Reference 67:     def setup_class(cls):",
        "// Line_Reference 68:         if cls is AppTestCase:",
        "// Line_Reference 69:             raise unittest.SkipTest(\"%s is an abstract base class\" % cls.__name__)",
        "// Line_Reference 70: ",
        "// Line_Reference 71:     @classmethod",
        "// Line_Reference 72:     def teardown_class(cls):",
        "// Line_Reference 73:         pass",
        "// Line_Reference 74: ",
        "// Line_Reference 75:     def setUp(self):",
        "// Line_Reference 76:         # Allow defining a custom database uri for testing.",
        "// Line_Reference 77:         self.database_dir = tempfile.mkdtemp(prefix='rdiffweb_tests_db_')",
        "// Line_Reference 78:         uri = os.path.join(self.database_dir, 'rdiffweb.tmp.db')",
        "// Line_Reference 79:         uri = os.environ.get('RDIFFWEB_TEST_DATABASE_URI', uri)",
        "// Line_Reference 80:         self.default_config['database-uri'] = uri",
        "// Line_Reference 81:         cfg = self.app_class.parse_args(",
        "// Line_Reference 82:             args=[], config_file_contents='\\n'.join('%s=%s' % (k, v) for k, v in self.default_config.items())",
        "// Line_Reference 83:         )",
        "// Line_Reference 84:         # Create Application",
        "// Line_Reference 85:         self.app = self.app_class(cfg)",
        "// Line_Reference 86:         # Create repositories",
        "// Line_Reference 87:         self.testcases = create_testcases_repo(self.app)",
        "// Line_Reference 88:         # Register repository",
        "// Line_Reference 89:         admin_user = UserObject.get_user(self.USERNAME)",
        "// Line_Reference 90:         if admin_user:",
        "// Line_Reference 91:             admin_user.user_root = self.testcases",
        "// Line_Reference 92:             admin_user.refresh_repos()",
        "// Line_Reference 93: ",
        "// Line_Reference 94:     def tearDown(self):",
        "// Line_Reference 95:         if hasattr(self, 'database_dir'):",
        "// Line_Reference 96:             shutil.rmtree(self.database_dir)",
        "// Line_Reference 97:             delattr(self, 'database_dir')",
        "// Line_Reference 98:         if hasattr(self, 'testcases'):",
        "// Line_Reference 99:             shutil.rmtree(self.testcases)",
        "// Line_Reference 100:             delattr(self, 'testcases')",
        "// Line_Reference 101: ",
        "// Line_Reference 102: ",
        "// Line_Reference 155:         UserObject.create_admin_user(self.USERNAME, self.PASSWORD)",
        "// Line_Reference 158:         admin_user = UserObject.get_user(self.USERNAME)"
    ]
}
