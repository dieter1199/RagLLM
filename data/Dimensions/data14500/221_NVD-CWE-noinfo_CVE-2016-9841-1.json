{
    "cve_id": "CVE-2016-9841",
    "cve_description": "inffast.c in zlib 1.2.8 might allow context-dependent attackers to have unspecified impact by leveraging improper pointer arithmetic.",
    "cve_publish_date": "2017-05-23",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Use post-increment only in inffast.c.\n\nAn old inffast.c optimization turns out to not be optimal anymore\nwith modern compilers, and furthermore was not compliant with the\nC standard, for which decrementing a pointer before its allocated\nmemory is undefined. Per the recommendation of a security audit of\nthe zlib code by Trail of Bits and TrustInSoft, in support of the\nMozilla Foundation, this \"optimization\" was removed, in order to\navoid the possibility of undefined behavior.",
    "type_of_change": "Modification",
    "filename_of_changes": "inffast.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "31",
    "number_of_lines_deleted_vulnerable_to_cve": "50",
    "vulnerable_lines": [
        "// Line_Reference 13: /* Allow machine dependent optimization for post-increment or pre-increment.",
        "// Line_Reference 14:    Based on testing to date,",
        "// Line_Reference 15:    Pre-increment preferred for:",
        "// Line_Reference 16:    - PowerPC G3 (Adler)",
        "// Line_Reference 17:    - MIPS R5000 (Randers-Pehrson)",
        "// Line_Reference 18:    Post-increment preferred for:",
        "// Line_Reference 19:    - none",
        "// Line_Reference 20:    No measurable difference:",
        "// Line_Reference 21:    - Pentium III (Anderson)",
        "// Line_Reference 22:    - M68060 (Nikl)",
        "// Line_Reference 23:  */",
        "// Line_Reference 24: #ifdef POSTINC",
        "// Line_Reference 25: #  define OFF 0",
        "// Line_Reference 26: #  define PUP(a) *(a)++",
        "// Line_Reference 27: #else",
        "// Line_Reference 28: #  define OFF 1",
        "// Line_Reference 29: #  define PUP(a) *++(a)",
        "// Line_Reference 30: #endif",
        "// Line_Reference 31: ",
        "// Line_Reference 99:     in = strm->next_in - OFF;",
        "// Line_Reference 101:     out = strm->next_out - OFF;",
        "// Line_Reference 122:             hold += (unsigned long)(PUP(in)) << bits;",
        "// Line_Reference 124:             hold += (unsigned long)(PUP(in)) << bits;",
        "// Line_Reference 137:             PUP(out) = (unsigned char)(here.val);",
        "// Line_Reference 144:                     hold += (unsigned long)(PUP(in)) << bits;",
        "// Line_Reference 153:                 hold += (unsigned long)(PUP(in)) << bits;",
        "// Line_Reference 155:                 hold += (unsigned long)(PUP(in)) << bits;",
        "// Line_Reference 168:                     hold += (unsigned long)(PUP(in)) << bits;",
        "// Line_Reference 171:                         hold += (unsigned long)(PUP(in)) << bits;",
        "// Line_Reference 199:                                 PUP(out) = 0;",
        "// Line_Reference 205:                             PUP(out) = 0;",
        "// Line_Reference 210:                                 PUP(out) = PUP(from);",
        "// Line_Reference 216:                     from = window - OFF;",
        "// Line_Reference 222:                                 PUP(out) = PUP(from);",
        "// Line_Reference 233:                                 PUP(out) = PUP(from);",
        "// Line_Reference 235:                             from = window - OFF;",
        "// Line_Reference 240:                                     PUP(out) = PUP(from);",
        "// Line_Reference 251:                                 PUP(out) = PUP(from);",
        "// Line_Reference 257:                         PUP(out) = PUP(from);",
        "// Line_Reference 258:                         PUP(out) = PUP(from);",
        "// Line_Reference 259:                         PUP(out) = PUP(from);",
        "// Line_Reference 263:                         PUP(out) = PUP(from);",
        "// Line_Reference 265:                             PUP(out) = PUP(from);",
        "// Line_Reference 271:                         PUP(out) = PUP(from);",
        "// Line_Reference 272:                         PUP(out) = PUP(from);",
        "// Line_Reference 273:                         PUP(out) = PUP(from);",
        "// Line_Reference 277:                         PUP(out) = PUP(from);",
        "// Line_Reference 279:                             PUP(out) = PUP(from);",
        "// Line_Reference 316:     strm->next_in = in + OFF;",
        "// Line_Reference 317:     strm->next_out = out + OFF;"
    ]
}
