{
    "cve_id": "CVE-2021-41118",
    "cve_description": "The DynamicPageList3 extension is a reporting tool for MediaWiki, listing category members and intersections with various formats and details. In affected versions unsanitised input of regular expression date within the parameters of the DPL parser function, allowed for the possibility of ReDoS (Regex Denial of Service). This has been resolved in version 3.3.6. If you are unable to update you may also set `$wgDplSettings['functionalRichness'] = 0;` or disable DynamicPageList3 to mitigate.",
    "cve_publish_date": "2021-10-04",
    "cwe_id": "CWE-400",
    "cwe_name": "Uncontrolled Resource Consumption",
    "cwe_description": "The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.",
    "commit_message": "Major cleanup (#57)",
    "type_of_change": "Modification",
    "filename_of_changes": "Heading.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "93",
    "number_of_lines_deleted_vulnerable_to_cve": "86",
    "vulnerable_lines": [
        "// Line_Reference 2: /**",
        "// Line_Reference 3:  * DynamicPageList3",
        "// Line_Reference 4:  * DPL List Class",
        "// Line_Reference 5:  *",
        "// Line_Reference 6:  * @license\t\tGPL-2.0-or-later",
        "// Line_Reference 7:  * @package\t\tDynamicPageList3",
        "// Line_Reference 8:  *",
        "// Line_Reference 9:  */",
        "// Line_Reference 20: \t * @var constant",
        "// Line_Reference 26: \t * Use %s for attribute placement.  Example: <div%s>",
        "// Line_Reference 41: \t * Use %s for attribute placement.  Example: <div%s>",
        "// Line_Reference 57: \t * @var array",
        "// Line_Reference 64: \t * @var array",
        "// Line_Reference 76: \t * \\DPL\\Parameters",
        "// Line_Reference 78: \t * @var object",
        "// Line_Reference 80: \tprotected $parameters = null;",
        "// Line_Reference 83: \t * Main Constructor",
        "// Line_Reference 84: \t *",
        "// Line_Reference 85: \t * @access\tpublic",
        "// Line_Reference 86: \t * @param\tobject\t\\DPL\\Parameters",
        "// Line_Reference 87: \t * @return\tvoid",
        "// Line_Reference 99: \t * @access\tpublic",
        "// Line_Reference 100: \t * @param\tstring\tHeading style.",
        "// Line_Reference 101: \t * @param\tobject\t\\DPL\\Parameters",
        "// Line_Reference 102: \t * @param\tobject\tMediaWiki \\Parser",
        "// Line_Reference 103: \t * @return\tmixed\tHeading subclass or null for a bad style.",
        "// Line_Reference 105: \tpublic static function newFromStyle( $style, \\DPL\\Parameters $parameters ) {",
        "// Line_Reference 109: \t\t\t\t$class = 'DefinitionHeading';",
        "// Line_Reference 118: \t\t\t\t$class = 'TieredHeading';",
        "// Line_Reference 121: \t\t\t\t$class = 'OrderedHeading';",
        "// Line_Reference 124: \t\t\t\t$class = 'UnorderedHeading';",
        "// Line_Reference 128: \t\t\t\tbreak;",
        "// Line_Reference 130: \t\t$class = '\\DPL\\Heading\\\\' . $class;",
        "// Line_Reference 136: \t * Get the \\DPL\\Parameters object this object was constructed with.",
        "// Line_Reference 138: \t * @access\tpublic",
        "// Line_Reference 139: \t * @return\tobject\t\\DPL\\Parameters",
        "// Line_Reference 148: \t * @access\tpublic",
        "// Line_Reference 149: \t * @param\tstring\tTag soup attributes, example: this=\"that\" thing=\"no\"",
        "// Line_Reference 150: \t * @return\tvoid",
        "// Line_Reference 153: \t\t$this->listAttributes = \\Sanitizer::fixTagAttributes( $attributes, 'ul' );",
        "// Line_Reference 159: \t * @access\tpublic",
        "// Line_Reference 160: \t * @param\tstring\tTag soup attributes, example: this=\"that\" thing=\"no\"",
        "// Line_Reference 161: \t * @return\tvoid",
        "// Line_Reference 164: \t\t$this->itemAttributes = \\Sanitizer::fixTagAttributes( $attributes, 'li' );",
        "// Line_Reference 170: \t * @access\tpublic",
        "// Line_Reference 171: \t * @param\tboolean\t[Optional] Show Heading Count",
        "// Line_Reference 172: \t * @return\tvoid",
        "// Line_Reference 181: \t * @access\tpublic",
        "// Line_Reference 182: \t * @return\tinteger\tList style constant.",
        "// Line_Reference 191: \t * @access\tpublic",
        "// Line_Reference 192: \t * @param\tarray\tList of \\DPL\\Article",
        "// Line_Reference 193: \t * @param\tobject\tList of \\DPL\\Lister\\Lister",
        "// Line_Reference 194: \t * @return\tstring\tFormatted list.",
        "// Line_Reference 209: \t\t\t\t$hspace = 2; // the extra space for headings",
        "// Line_Reference 219: \t\t\t\t$rest  = $count - ( floor( $nsize ) * floor( $iGroup ) );",
        "// Line_Reference 225: \t\t\t\t\t$nsize = $hspace + 1; // correction for result sets with one entry",
        "// Line_Reference 229: \t\t\t\t$greml  = $nsize; // remaining lines in current group",
        "// Line_Reference 230: \t\t\t\t$g      = 0;",
        "// Line_Reference 246: \t\t\t\t\t\t// $output .= \"nsize=$nsize, portion=$portion, greml=$greml\";",
        "// Line_Reference 262: \t\t\t\t\t\t\t// if ($rest != 0 && $g==$rest) $nsize -= 1;",
        "// Line_Reference 289: \t\t\t$count  = count( $articles );",
        "// Line_Reference 296: \t\t\t$rest  = $count - ( floor( $nsize ) * floor( $iGroup ) );",
        "// Line_Reference 302: \t\t\t\t$output .= $lister->formatList( $articles, $nstart, $nsize );",
        "// Line_Reference 308: \t\t\t\t$nstart = $nstart + $nsize;",
        "// Line_Reference 309: \t\t\t\t// if ($rest != 0 && $g+1==$rest) $nsize -= 1;",
        "// Line_Reference 318: \t\t\t$nsize  = $rowSize;",
        "// Line_Reference 319: \t\t\t$count  = count( $articles );",
        "// Line_Reference 325: \t\t\t\t$output .= $lister->formatList( $articles, $nstart, $nsize );",
        "// Line_Reference 327: \t\t\t\t$nstart = $nstart + $nsize;",
        "// Line_Reference 334: \t\t\t//Even though the headingmode is not none there were no headings, but still results.  Output them anyway.",
        "// Line_Reference 344: \t * @access\tpublic",
        "// Line_Reference 345: \t * @param\tinteger\tArticle start index for this heading.",
        "// Line_Reference 346: \t * @param\tinteger\tArticle count for this heading.",
        "// Line_Reference 347: \t * @param\tstring\tHeading link/text display.",
        "// Line_Reference 348: \t * @param\tarray\tList of \\DPL\\Article.",
        "// Line_Reference 349: \t * @param\tobject\tList of \\DPL\\Lister\\Lister",
        "// Line_Reference 350: \t * @return\tstring\tHeading HTML",
        "// Line_Reference 368: \t * @access\tpublic",
        "// Line_Reference 369: \t * @return\tstring\tList Start",
        "// Line_Reference 378: \t * @access\tpublic",
        "// Line_Reference 379: \t * @return\tstring\tItem Start",
        "// Line_Reference 388: \t * @access\tpublic",
        "// Line_Reference 389: \t * @return\tstring\tItem End",
        "// Line_Reference 398: \t * @access\tpublic",
        "// Line_Reference 399: \t * @param\tinteger\tCount",
        "// Line_Reference 400: \t * @return\tstring\tMessage"
    ]
}
