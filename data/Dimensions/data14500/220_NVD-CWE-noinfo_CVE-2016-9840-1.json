{
    "cve_id": "CVE-2016-9840",
    "cve_description": "inftrees.c in zlib 1.2.8 might allow context-dependent attackers to have unspecified impact by leveraging improper pointer arithmetic.",
    "cve_publish_date": "2017-05-23",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Remove offset pointer optimization in inftrees.c.\n\ninftrees.c was subtracting an offset from a pointer to an array,\nin order to provide a pointer that allowed indexing starting at\nthe offset. This is not compliant with the C standard, for which\nthe behavior of a pointer decremented before its allocated memory\nis undefined. Per the recommendation of a security audit of the\nzlib code by Trail of Bits and TrustInSoft, in support of the\nMozilla Foundation, this tiny optimization was removed, in order\nto avoid the possibility of undefined behavior.",
    "type_of_change": "Modification",
    "filename_of_changes": "inftrees.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "8",
    "number_of_lines_deleted_vulnerable_to_cve": "10",
    "vulnerable_lines": [
        "// Line_Reference 57:     int end;                    /* use base and extra for symbol > end */",
        "// Line_Reference 184:         end = 19;",
        "// Line_Reference 188:         base -= 257;",
        "// Line_Reference 190:         extra -= 257;",
        "// Line_Reference 191:         end = 256;",
        "// Line_Reference 196:         end = -1;",
        "// Line_Reference 219:         if ((int)(work[sym]) < end) {",
        "// Line_Reference 223:         else if ((int)(work[sym]) > end) {",
        "// Line_Reference 224:             here.op = (unsigned char)(extra[work[sym]]);",
        "// Line_Reference 225:             here.val = base[work[sym]];"
    ]
}
