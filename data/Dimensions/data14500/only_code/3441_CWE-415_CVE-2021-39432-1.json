#include <setjmp.h>
namespace dip {
namespace {
struct jpeg_error_mgr pub;   // "public" fields
jmp_buf setjmp_buffer;      // for return to caller
void my_error_exit( j_common_ptr cinfo ) {
my_error_ptr myerr = reinterpret_cast<my_error_ptr>(cinfo->err);
void my_output_message( j_common_ptr ) {} // Don't do anything with messages!
JpegInput( String filename ) : filename_( std::move( filename )) {
if( setjmp( jerr_.setjmp_buffer )) {
// If we get here, the JPEG code has signaled an error.
DIP_THROW_RUNTIME( "Error reading JPEG file." );
}
explicit JpegOutput( String const& filename ) {
if( setjmp( jerr_.setjmp_buffer )) {
// If we get here, the JPEG code has signaled an error.
DIP_THROW_RUNTIME( "Error writing JPEG file." );
}
JpegInput jpeg( filename );
JpegInput jpeg( filename );
JpegInput jpeg( filename );
jpegLevel = clamp< dip::uint >( jpegLevel, 1, 100 );
JpegOutput jpeg( filename );
jpeg_set_quality( jpeg.cinfoptr(), static_cast< int >( jpegLevel ), FALSE );
