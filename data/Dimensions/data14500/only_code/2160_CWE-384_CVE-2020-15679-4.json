private var verificationURL: URL?
private var verifyTimer: Timer?
private var isVerifying = false
guardianAPI.initiateUserLogin { [weak self] result in
switch result {
case .success(let checkpointModel):
guard let loginURL = checkpointModel.loginUrl else { return }
self?.verificationURL = checkpointModel.verificationUrl
let safariViewController = SFSafariViewController(url: loginURL)
DispatchQueue.main.async {
self?.addChild(safariViewController)
self?.view.addSubview(safariViewController.view)
safariViewController.view.frame = self?.view.bounds ?? CGRect.zero
safariViewController.view.autoresizingMask = [.flexibleWidth, .flexibleHeight]
safariViewController.didMove(toParent: self)
}
safariViewController.delegate = self
self?.safariViewController = safariViewController
case .failure(let error):
let loginError = error.getLoginError()
let context: NavigableContext = loginError == .maxDevicesReached ? .maxDevicesReached : .error(loginError)
self?.navigate(to: .landing, context: context)
}
}
}
deinit {
verifyTimer?.invalidate()
@objc private func verify() {
guard let verificationURL = verificationURL else { return }
if isVerifying { return }
isVerifying = true
guardianAPI.verify(urlString: verificationURL.absoluteString) { [weak self] result in
guard let self = self else { return }
DependencyManager.shared.accountManager.login(with: verification) { loginResult in
self.isVerifying = false
self.verifyTimer?.invalidate()
switch loginResult {
case .success:
self.navigate(to: .home)
case .failure(let error):
Logger.global?.log(message: "Authentication Error: \(error)")
let context: NavigableContext = error == .maxDevicesReached ? .maxDevicesReached : .error(error)
self.navigate(to: .landing, context: context)
}
}
case .failure:
self.isVerifying = false
return
}
// MARK: - SFSafariViewControllerDelegate
extension LoginViewController: SFSafariViewControllerDelegate {
func safariViewController(_ controller: SFSafariViewController, didCompleteInitialLoad didLoadSuccessfully: Bool) {
if didLoadSuccessfully && verifyTimer == nil {
verifyTimer = Timer.scheduledTimer(timeInterval: 3, target: self, selector: #selector(verify), userInfo: nil, repeats: true)
self.verifyTimer?.invalidate()
