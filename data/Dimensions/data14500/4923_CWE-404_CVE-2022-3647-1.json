{
    "cve_id": "CVE-2022-3647",
    "cve_description": "** DISPUTED ** A vulnerability, which was classified as problematic, was found in Redis up to 6.2.7/7.0.5. Affected is the function sigsegvHandler of the file debug.c of the component Crash Report. The manipulation leads to denial of service. The complexity of an attack is rather high. The exploitability is told to be difficult. The real existence of this vulnerability is still doubted at the moment. Upgrading to version 6.2.8 and 7.0.6 is able to address this issue. The patch is identified as 0bf90d944313919eb8e63d3588bf63a367f020a3. It is recommended to apply a patch to fix this issue. VDB-211962 is the identifier assigned to this vulnerability. NOTE: The vendor claims that this is not a DoS because it applies to the crash logging mechanism which is triggered after a crash has occurred.",
    "cve_publish_date": "2022-10-21",
    "cwe_id": "CWE-404",
    "cwe_name": "Improper Resource Shutdown or Release",
    "cwe_description": "The product does not release or incorrectly releases a resource before it is made available for re-use.",
    "commit_message": "Avoid crash on crash report when a bad function pointer was called (#11298)\n\nIf Redis crashes due to calling an invalid function pointer,\r\nthe `backtrace` function will try to dereference this invalid pointer\r\nwhich will cause a crash inside the crash report and will kill\r\nthe processes without having all the crash report information.\r\n\r\nExample:\r\n\r\n```\r\n=== REDIS BUG REPORT START: Cut & paste starting from here ===\r\n198672:M 19 Sep 2022 18:06:12.936 # Redis 255.255.255 crashed by signal: 11, si_code: 1\r\n198672:M 19 Sep 2022 18:06:12.936 # Accessing address: 0x1\r\n198672:M 19 Sep 2022 18:06:12.936 # Crashed running the instruction at: 0x1\r\n// here the processes is crashing\r\n```\r\n\r\nThis PR tries to fix this crash be:\r\n1. Identify the issue when it happened.\r\n2. Replace the invalid pointer with a pointer to some dummy function\r\n   so that `backtrace` will not crash.\r\n\r\nI identification is done by comparing `eip` to `info->si_addr`, if they\r\nare the same we know that the crash happened on the same address it tries to\r\naccesses and we can conclude that it tries to call and invalid function pointer.\r\n\r\nTo replace the invalid pointer we introduce a new function, `setMcontextEip`,\r\nwhich is very similar to `getMcontextEip` and it knows to set the Eip for the\r\ndifferent supported OS's. After printing the trace we retrieve the old `Eip` value.",
    "type_of_change": "Modification",
    "filename_of_changes": "debug.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "58",
    "number_of_lines_deleted_vulnerable_to_cve": "22",
    "vulnerable_lines": [
        "// Line_Reference 1126: static void *getMcontextEip(ucontext_t *uc) {",
        "// Line_Reference 1134:     return (void*) uc->uc_mcontext->__ss.__rip;",
        "// Line_Reference 1136:     return (void*) uc->uc_mcontext->__ss.__eip;",
        "// Line_Reference 1138:     return (void*) uc->uc_mcontext->__ss.__srr0;",
        "// Line_Reference 1143:     return (void*) uc->uc_mcontext->__ss.__rip;",
        "// Line_Reference 1145:     return (void*) uc->uc_mcontext->__ss.__eip;",
        "// Line_Reference 1148:     return (void*) arm_thread_state64_get_pc(uc->uc_mcontext->__ss);",
        "// Line_Reference 1153:     return (void*) uc->uc_mcontext.gregs[14]; /* Linux 32 */",
        "// Line_Reference 1155:     return (void*) uc->uc_mcontext.gregs[16]; /* Linux 64 */",
        "// Line_Reference 1157:     return (void*) uc->uc_mcontext.sc_ip;",
        "// Line_Reference 1159:     return (void*) uc->uc_mcontext.arm_pc;",
        "// Line_Reference 1161:     return (void*) uc->uc_mcontext.pc;",
        "// Line_Reference 1168:     return (void*) uc->uc_mcontext.mc_eip;",
        "// Line_Reference 1170:     return (void*) uc->uc_mcontext.mc_rip;",
        "// Line_Reference 1177:     return (void*) uc->sc_eip;",
        "// Line_Reference 1179:     return (void*) uc->sc_rip;",
        "// Line_Reference 1185:     return (void*) uc->uc_mcontext.__gregs[_REG_EIP];",
        "// Line_Reference 1187:     return (void*) uc->uc_mcontext.__gregs[_REG_RIP];",
        "// Line_Reference 1192:     return (void*) uc->uc_mcontext.mc_rip;",
        "// Line_Reference 1971:     void *eip = getMcontextEip(uc);",
        "// Line_Reference 1977:     logStackTrace(getMcontextEip(uc), 1);",
        "// Line_Reference 2082:     logStackTrace(getMcontextEip(uc), 1);"
    ]
}
