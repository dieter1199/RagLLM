{
    "cve_id": "CVE-2022-24375",
    "cve_description": "The package node-opcua before 2.74.0 are vulnerable to Denial of Service (DoS) when bypassing the limitations for excessive memory consumption by sending multiple CloseSession requests with the deleteSubscription parameter equal to False.",
    "cve_publish_date": "2022-08-24",
    "cwe_id": "CWE-400",
    "cwe_name": "Uncontrolled Resource Consumption",
    "cwe_description": "The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.",
    "commit_message": "server: use ServiceFault on request error",
    "type_of_change": "Modification",
    "filename_of_changes": "u_test_discovery_server.ts",
    "code_language": "TypeScript",
    "number_of_lines_added_for_mitigation": "22",
    "number_of_lines_deleted_vulnerable_to_cve": "14",
    "vulnerable_lines": [
        "// Line_Reference 21:     OPCUADiscoveryServer",
        "// Line_Reference 135:             function check_response(err: Error | null, response: any): void {",
        "// Line_Reference 136:                 should.not.exist(err);",
        "// Line_Reference 138:                 response.responseHeader.serviceResult.should.eql(StatusCodes.BadDiscoveryUrlMissing);",
        "// Line_Reference 141:             await send_registered_server_request(discoveryServerEndpointUrl, request, check_response);",
        "// Line_Reference 164:             function check_response(err: Error | null, response: any) {",
        "// Line_Reference 165:                 should.not.exist(err);",
        "// Line_Reference 167:                 response.responseHeader.serviceResult.should.eql(StatusCodes.BadInvalidArgument);",
        "// Line_Reference 170:             await send_registered_server_request(discoveryServerEndpointUrl, request, check_response);",
        "// Line_Reference 193:             function check_response(err: Error | null, response: any) {",
        "// Line_Reference 194:                 should.not.exist(err);",
        "// Line_Reference 195:                 response.responseHeader.serviceResult.should.eql(StatusCodes.BadServerNameMissing);",
        "// Line_Reference 198:             await send_registered_server_request(discoveryServerEndpointUrl, request, check_response);",
        "// Line_Reference 210:             OPCUAServer.registry.count().should.eql(0);1162"
    ]
}
