{
    "cve_id": "CVE-2022-1379",
    "cve_description": "URL Restriction Bypass in GitHub repository plantuml/plantuml prior to V1.2022.5. An attacker can abuse this to bypass URL restrictions that are imposed by the different security profiles and achieve server side request forgery (SSRF). This allows accessing restricted internal resources/servers or sending requests to third party servers.",
    "cve_publish_date": "2022-05-14",
    "cwe_id": "CWE-918",
    "cwe_name": "Server-Side Request Forgery (SSRF)",
    "cwe_description": "The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.",
    "commit_message": "Import version 1.2022.5",
    "type_of_change": "Modification",
    "filename_of_changes": "Cluster.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "63",
    "number_of_lines_deleted_vulnerable_to_cve": "99",
    "vulnerable_lines": [
        "// Line_Reference 77: import net.sourceforge.plantuml.skin.rose.Rose;",
        "// Line_Reference 78: import net.sourceforge.plantuml.style.StyleSignature;",
        "// Line_Reference 311: \tpublic void drawU(UGraphic ug, UmlDiagramType umlDiagramType, ISkinParam skinParam2) {",
        "// Line_Reference 320: \t\tStyle style = null;",
        "// Line_Reference 321: \t\tfinal double rounded;",
        "// Line_Reference 322: \t\tfinal double diagonalCorner;",
        "// Line_Reference 323: \t\tfinal double shadowing;",
        "// Line_Reference 324: \t\tif (UseStyle.useBetaStyle()) {",
        "// Line_Reference 325: \t\t\tfinal USymbol uSymbol = group.getUSymbol() == null ? USymbols.PACKAGE : group.getUSymbol();",
        "// Line_Reference 326: \t\t\tfinal StyleSignatureBasic tmp = getDefaultStyleDefinition(umlDiagramType.getStyleName(), uSymbol);",
        "// Line_Reference 327: \t\t\tstyle = tmp.withTOBECHANGED(group.getStereotype()).getMergedStyle(skinParam.getCurrentStyleBuilder());",
        "// Line_Reference 328: \t\t\tshadowing = style.value(PName.Shadowing).asDouble();",
        "// Line_Reference 329: \t\t\tif (group.getColors().getColor(ColorType.LINE) != null)",
        "// Line_Reference 330: \t\t\t\tborderColor = group.getColors().getColor(ColorType.LINE);",
        "// Line_Reference 331: \t\t\telse",
        "// Line_Reference 332: \t\t\t\tborderColor = style.value(PName.LineColor).asColor(skinParam2.getThemeStyle(),",
        "// Line_Reference 333: \t\t\t\t\t\tskinParam2.getIHtmlColorSet());",
        "// Line_Reference 334: \t\t\trounded = style.value(PName.RoundCorner).asDouble();",
        "// Line_Reference 335: \t\t\tdiagonalCorner = style.value(PName.DiagonalCorner).asDouble();",
        "// Line_Reference 336: ",
        "// Line_Reference 337: \t\t} else {",
        "// Line_Reference 338: \t\t\tif (group.getUSymbol() == null)",
        "// Line_Reference 339: \t\t\t\tshadowing = skinParam2.shadowing2(group.getStereotype(), USymbols.PACKAGE.getSkinParameter()) ? 3 : 0;",
        "// Line_Reference 340: \t\t\telse",
        "// Line_Reference 341: \t\t\t\tshadowing = skinParam2.shadowing2(group.getStereotype(), group.getUSymbol().getSkinParameter()) ? 3 : 0;",
        "// Line_Reference 342: ",
        "// Line_Reference 343: \t\t\trounded = IEntityImage.CORNER;",
        "// Line_Reference 344: \t\t\tif (umlDiagramType == UmlDiagramType.STATE)",
        "// Line_Reference 345: \t\t\t\tborderColor = getColor(ColorParam.stateBorder, skinParam, group.getStereotype());",
        "// Line_Reference 346: \t\t\telse if (umlDiagramType == UmlDiagramType.ACTIVITY)",
        "// Line_Reference 347: \t\t\t\tborderColor = getColor(ColorParam.packageBorder, skinParam, group.getStereotype());",
        "// Line_Reference 348: \t\t\telse",
        "// Line_Reference 349: \t\t\t\tborderColor = getColor(ColorParam.packageBorder, skinParam, group.getStereotype());",
        "// Line_Reference 350: \t\t\tdiagonalCorner = 0;",
        "// Line_Reference 351: ",
        "// Line_Reference 352: \t\t}",
        "// Line_Reference 371: \t\t\t\tUStroke strokeForState = getDefaultStyleDefinition(SName.stateDiagram, null)",
        "// Line_Reference 372: \t\t\t\t\t\t.getMergedStyle(skinParam.getCurrentStyleBuilder()).getStroke();",
        "// Line_Reference 373: \t\t\t\tif (group.getColors().getSpecificLineStroke() != null)",
        "// Line_Reference 374: \t\t\t\t\tstrokeForState = group.getColors().getSpecificLineStroke();",
        "// Line_Reference 375: ",
        "// Line_Reference 376: \t\t\t\tif (group.getColors().getColor(ColorType.LINE) != null)",
        "// Line_Reference 377: \t\t\t\t\tborderColor = group.getColors().getColor(ColorType.LINE);",
        "// Line_Reference 378: ",
        "// Line_Reference 379: \t\t\t\tdrawUState(ug, borderColor, skinParam2, strokeForState, umlDiagramType, rounded, shadowing);",
        "// Line_Reference 384: \t\t\t\tpackageStyle = skinParam2.packageStyle();",
        "// Line_Reference 387: \t\t\t\tfinal HColor tmp = skinParam2.getHtmlColor(border, group.getStereotype(), false);",
        "// Line_Reference 392: \t\t\tfinal UStroke stroke;",
        "// Line_Reference 393: \t\t\tif (UseStyle.useBetaStyle())",
        "// Line_Reference 394: \t\t\t\tstroke = getStrokeInternal(group, skinParam2, style);",
        "// Line_Reference 395: \t\t\telse",
        "// Line_Reference 396: \t\t\t\tstroke = getStrokeInternal(group, skinParam2, null);",
        "// Line_Reference 399: \t\t\tbackColor = getBackColor(backColor, skinParam2, group.getStereotype(), umlDiagramType.getStyleName(),",
        "// Line_Reference 402: \t\t\t\tfinal double roundCorner;",
        "// Line_Reference 403: \t\t\t\tif (UseStyle.useBetaStyle())",
        "// Line_Reference 404: \t\t\t\t\troundCorner = rounded;",
        "// Line_Reference 405: \t\t\t\telse",
        "// Line_Reference 406: \t\t\t\t\troundCorner = group.getUSymbol() == null ? 0",
        "// Line_Reference 407: \t\t\t\t\t\t\t: group.getUSymbol().getSkinParameter().getRoundCorner(skinParam, group.getStereotype());",
        "// Line_Reference 408: ",
        "// Line_Reference 411: \t\t\t\tdecoration.drawU(ug, backColor, borderColor, shadowing, roundCorner,",
        "// Line_Reference 412: \t\t\t\t\t\tskinParam2.getHorizontalAlignment(AlignmentParam.packageTitleAlignment, null, false, null),",
        "// Line_Reference 413: \t\t\t\t\t\tskinParam2.getStereotypeAlignment(), diagonalCorner);",
        "// Line_Reference 428: \tstatic public UStroke getStrokeInternal(IGroup group, ISkinParam skinParam, Style style) {",
        "// Line_Reference 433: \t\tif (style != null)",
        "// Line_Reference 434: \t\t\treturn style.getStroke();",
        "// Line_Reference 435: ",
        "// Line_Reference 436: \t\tif (group.getUSymbol() != null && group.getUSymbol() != USymbols.PACKAGE)",
        "// Line_Reference 437: \t\t\treturn group.getUSymbol().getSkinParameter().getStroke(skinParam, group.getStereotype());",
        "// Line_Reference 438: ",
        "// Line_Reference 439: \t\treturn GeneralImageBuilder.getForcedStroke(group.getStereotype(), skinParam);",
        "// Line_Reference 480: \tprivate HColor getColorLegacy(ISkinParam skinParam, ColorParam colorParam, Stereotype stereo) {",
        "// Line_Reference 481: \t\treturn new Rose().getHtmlColor(skinParam, stereo, colorParam);",
        "// Line_Reference 484: \tprivate void drawUState(UGraphic ug, HColor borderColor, ISkinParam skinParam2, UStroke stroke,",
        "// Line_Reference 485: \t\t\tUmlDiagramType umlDiagramType, double rounded, double shadowing) {",
        "// Line_Reference 497: \t\tHColor stateBack = getBackColor(umlDiagramType, styleGroup);",
        "// Line_Reference 498: \t\tif (UseStyle.useBetaStyle() == false && stateBack == null)",
        "// Line_Reference 499: \t\t\tstateBack = getColorLegacy(skinParam2, ColorParam.stateBackground, group.getStereotype());",
        "// Line_Reference 501: \t\tfinal HColor background;",
        "// Line_Reference 502: \t\tif (UseStyle.useBetaStyle() == false)",
        "// Line_Reference 503: \t\t\tbackground = getColorLegacy(skinParam2, ColorParam.background, null);",
        "// Line_Reference 504: \t\telse",
        "// Line_Reference 505: \t\t\tbackground = stateBack;",
        "// Line_Reference 509: \t\tfinal TextBlock attribute = GeneralImageBuilder.stateHeader(group, styleGroup, skinParam2);",
        "// Line_Reference 516: \t\t\t\tattributeHeight + (attributeHeight > 0 ? IEntityImage.MARGIN : 0), borderColor, stateBack, background,",
        "// Line_Reference 922: \t\tif (UseStyle.useBetaStyle())",
        "// Line_Reference 923: \t\t\treturn style.value(PName.BackGroundColor).asColor(skinParam.getThemeStyle(), skinParam.getIHtmlColorSet());",
        "// Line_Reference 924: ",
        "// Line_Reference 925: \t\tfinal USymbol sym = group.getUSymbol() == null ? USymbols.PACKAGE : group.getUSymbol();",
        "// Line_Reference 926: \t\tfinal ColorParam backparam = umlDiagramType == UmlDiagramType.ACTIVITY ? ColorParam.partitionBackground",
        "// Line_Reference 927: \t\t\t\t: sym.getColorParamBack();",
        "// Line_Reference 928: \t\tfinal HColor c1 = skinParam.getHtmlColor(backparam, stereo, false);",
        "// Line_Reference 929: \t\tif (c1 != null)",
        "// Line_Reference 930: \t\t\treturn c1;",
        "// Line_Reference 931: ",
        "// Line_Reference 932: \t\tif (parentCluster == null)",
        "// Line_Reference 933: \t\t\treturn null;",
        "// Line_Reference 934: ",
        "// Line_Reference 935: \t\treturn parentCluster.getBackColor(umlDiagramType, style);"
    ]
}
