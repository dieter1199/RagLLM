{
    "cve_id": "CVE-2017-15088",
    "cve_description": "plugins/preauth/pkinit/pkinit_crypto_openssl.c in MIT Kerberos 5 (aka krb5) through 1.15.2 mishandles Distinguished Name (DN) fields, which allows remote attackers to execute arbitrary code or cause a denial of service (buffer overflow and application crash) in situations involving untrusted X.509 data, related to the get_matching_data and X509_NAME_oneline_ex functions. NOTE: this has security relevance only in use cases outside of the MIT Kerberos distribution, e.g., the use of get_matching_data in KDC certauth plugin code that is specific to Red Hat.",
    "cve_publish_date": "2017-11-23",
    "cwe_id": "CWE-119",
    "cwe_name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
    "cwe_description": "The product performs operations on a memory buffer, but it reads from or writes to a memory location outside the buffer's intended boundary. This may result in read or write operations on unexpected memory locations that could be linked to other variables, data structures, or internal program data.",
    "commit_message": "Fix PKINIT cert matching data construction\n\nRewrite X509_NAME_oneline_ex() and its call sites to use dynamic\nallocation and to perform proper error checking.\n\nticket: 8617\ntarget_version: 1.16\ntarget_version: 1.15-next\ntarget_version: 1.14-next\ntags: pullup",
    "type_of_change": "Modification",
    "filename_of_changes": "pkinit_crypto_openssl.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "25",
    "number_of_lines_deleted_vulnerable_to_cve": "42",
    "vulnerable_lines": [
        "// Line_Reference 5005: /*",
        "// Line_Reference 5006:  * Return a string format of an X509_NAME in buf where",
        "// Line_Reference 5007:  * size is an in/out parameter.  On input it is the size",
        "// Line_Reference 5008:  * of the buffer, and on output it is the actual length",
        "// Line_Reference 5009:  * of the name.",
        "// Line_Reference 5010:  * If buf is NULL, returns the length req'd to hold name",
        "// Line_Reference 5011:  */",
        "// Line_Reference 5012: static char *",
        "// Line_Reference 5013: X509_NAME_oneline_ex(X509_NAME * a,",
        "// Line_Reference 5014:                      char *buf,",
        "// Line_Reference 5015:                      unsigned int *size,",
        "// Line_Reference 5016:                      unsigned long flag)",
        "// Line_Reference 5018:     BIO *out = NULL;",
        "// Line_Reference 5020:     out = BIO_new(BIO_s_mem ());",
        "// Line_Reference 5021:     if (X509_NAME_print_ex(out, a, 0, flag) > 0) {",
        "// Line_Reference 5022:         if (buf != NULL && (*size) >  (unsigned int) BIO_number_written(out)) {",
        "// Line_Reference 5023:             memset(buf, 0, *size);",
        "// Line_Reference 5024:             BIO_read(out, buf, (int) BIO_number_written(out));",
        "// Line_Reference 5025:         }",
        "// Line_Reference 5026:         else {",
        "// Line_Reference 5027:             *size = BIO_number_written(out);",
        "// Line_Reference 5028:         }",
        "// Line_Reference 5029:     }",
        "// Line_Reference 5030:     BIO_free(out);",
        "// Line_Reference 5031:     return (buf);",
        "// Line_Reference 5097:     char buf[DN_BUF_LEN];",
        "// Line_Reference 5098:     unsigned int bufsize = sizeof(buf);",
        "// Line_Reference 5106:     /* Get the subject name (in rfc2253 format). */",
        "// Line_Reference 5107:     X509_NAME_oneline_ex(X509_get_subject_name(cert), buf, &bufsize,",
        "// Line_Reference 5108:                          XN_FLAG_SEP_COMMA_PLUS);",
        "// Line_Reference 5109:     md->subject_dn = strdup(buf);",
        "// Line_Reference 5110:     if (md->subject_dn == NULL) {",
        "// Line_Reference 5111:         ret = ENOMEM;",
        "// Line_Reference 5113:     }",
        "// Line_Reference 5114: ",
        "// Line_Reference 5115:     /* Get the issuer name (in rfc2253 format). */",
        "// Line_Reference 5116:     X509_NAME_oneline_ex(X509_get_issuer_name(cert), buf, &bufsize,",
        "// Line_Reference 5117:                          XN_FLAG_SEP_COMMA_PLUS);",
        "// Line_Reference 5118:     md->issuer_dn = strdup(buf);",
        "// Line_Reference 5119:     if (md->issuer_dn == NULL) {",
        "// Line_Reference 5120:         ret = ENOMEM;",
        "// Line_Reference 5122:     }"
    ]
}
