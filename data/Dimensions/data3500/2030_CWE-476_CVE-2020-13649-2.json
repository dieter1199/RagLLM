{
    "cve_id": "CVE-2020-13649",
    "cve_description": "parser/js/js-scanner.c in JerryScript 2.2.0 mishandles errors during certain out-of-memory conditions, as demonstrated by a scanner_reverse_info_list NULL pointer dereference and a scanner_scan_all assertion failure.",
    "cve_publish_date": "2020-05-28",
    "cwe_id": "CWE-476",
    "cwe_name": "NULL Pointer Dereference",
    "cwe_description": "The product dereferences a pointer that it expects to be valid but is NULL.",
    "commit_message": "Fix error handling in scanner when in case of OOM (#3793)\n\nThis patch fixes #3786 and fixes #3788.\r\n\r\nJerryScript-DCO-1.0-Signed-off-by: Robert Fancsik frobert@inf.u-szeged.hu",
    "type_of_change": "Modification",
    "filename_of_changes": "js-scanner.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "30",
    "number_of_lines_deleted_vulnerable_to_cve": "26",
    "vulnerable_lines": [
        "// Line_Reference 3162:     /* Ignore the errors thrown by the lexer. */",
        "// Line_Reference 3163:     if (context_p->error != PARSER_ERR_OUT_OF_MEMORY)",
        "// Line_Reference 3164:     {",
        "// Line_Reference 3165:       context_p->error = PARSER_ERR_NO_ERROR;",
        "// Line_Reference 3166:     }",
        "// Line_Reference 3167: ",
        "// Line_Reference 3175:     /* The following code may allocate memory, so it is enclosed in a try/catch. */",
        "// Line_Reference 3176:     PARSER_TRY (context_p->try_buffer)",
        "// Line_Reference 3178: #if ENABLED (JERRY_ES2015)",
        "// Line_Reference 3179:       if (scanner_context.status_flags & SCANNER_CONTEXT_THROW_ERR_ASYNC_FUNCTION)",
        "// Line_Reference 3181:         JERRY_ASSERT (scanner_context.async_source_p != NULL);",
        "// Line_Reference 3183:         scanner_info_t *info_p;",
        "// Line_Reference 3184:         info_p = scanner_insert_info (context_p, scanner_context.async_source_p, sizeof (scanner_info_t));",
        "// Line_Reference 3185:         info_p->type = SCANNER_TYPE_ERR_ASYNC_FUNCTION;",
        "// Line_Reference 3186:       }",
        "// Line_Reference 3187: #endif /* ENABLED (JERRY_ES2015) */",
        "// Line_Reference 3189:       while (scanner_context.active_literal_pool_p != NULL)",
        "// Line_Reference 3191:         scanner_pop_literal_pool (context_p, &scanner_context);",
        "// Line_Reference 3194:     PARSER_CATCH",
        "// Line_Reference 3195:     {",
        "// Line_Reference 3196:       JERRY_ASSERT (context_p->error == PARSER_ERR_NO_ERROR);",
        "// Line_Reference 3207:     }",
        "// Line_Reference 3208:     PARSER_TRY_END",
        "// Line_Reference 3210: #if ENABLED (JERRY_ES2015)",
        "// Line_Reference 3211:     context_p->status_flags &= (uint32_t) ~PARSER_IS_GENERATOR_FUNCTION;",
        "// Line_Reference 3212: #endif /* ENABLED (JERRY_ES2015) */"
    ]
}
