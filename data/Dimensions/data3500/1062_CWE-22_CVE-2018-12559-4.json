{
    "cve_id": "CVE-2018-12559",
    "cve_description": "An issue was discovered in the cantata-mounter D-Bus service in Cantata through 2.3.1. The mount target path check in mounter.cpp `mpOk()` is insufficient. A regular user can consequently mount a CIFS filesystem anywhere (e.g., outside of the /home directory tree) by passing directory traversal sequences such as a home/../usr substring.",
    "cve_publish_date": "2018-06-19",
    "cwe_id": "CWE-22",
    "cwe_name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
    "cwe_description": "The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
    "commit_message": "Remove internal Samba shre mounting code, this had some privilege escalation issues, and is not well tested",
    "type_of_change": "Modification",
    "filename_of_changes": "remotedevicepropertieswidget.cpp",
    "code_language": "C++",
    "number_of_lines_added_for_mitigation": "2",
    "number_of_lines_deleted_vulnerable_to_cve": "95",
    "vulnerable_lines": [
        "// Line_Reference 34:     Type_Samba,",
        "// Line_Reference 35:     Type_SambaAvahi,",
        "// Line_Reference 49:     type->addItem(tr(\"Samba Share\"), (int)Type_Samba);",
        "// Line_Reference 50:     type->addItem(tr(\"Samba Share (Auto-discover host and port)\"), (int)Type_SambaAvahi);",
        "// Line_Reference 57:     int t=create",
        "// Line_Reference 58:             ? Type_Samba",
        "// Line_Reference 59:             : d.isLocalFile()",
        "// Line_Reference 60:                 ? Type_File",
        "// Line_Reference 61:                 : d.url.scheme()==RemoteFsDevice::constSshfsProtocol",
        "// Line_Reference 62:                     ? Type_SshFs",
        "// Line_Reference 63:                     : d.url.scheme()==RemoteFsDevice::constSambaProtocol",
        "// Line_Reference 64:                         ? Type_Samba",
        "// Line_Reference 65:                         : Type_SambaAvahi;",
        "// Line_Reference 71:     smbPort->setValue(445);",
        "// Line_Reference 93:     case Type_Samba: {",
        "// Line_Reference 94:         smbShare->setText(d.url.path());",
        "// Line_Reference 95:         if (0!=d.url.port()) {",
        "// Line_Reference 96:             smbPort->setValue(d.url.port());",
        "// Line_Reference 97:         }",
        "// Line_Reference 98:         smbHost->setText(d.url.host());",
        "// Line_Reference 99:         smbUser->setText(d.url.userName());",
        "// Line_Reference 100:         smbPassword->setText(d.url.password());",
        "// Line_Reference 101:         QUrlQuery q(d.url);",
        "// Line_Reference 102:         if (q.hasQueryItem(RemoteFsDevice::constDomainQuery)) {",
        "// Line_Reference 103:             smbDomain->setText(q.queryItemValue(RemoteFsDevice::constDomainQuery));",
        "// Line_Reference 104:         } else {",
        "// Line_Reference 105:             smbDomain->setText(QString());",
        "// Line_Reference 106:         }",
        "// Line_Reference 107:         break;",
        "// Line_Reference 108:     }",
        "// Line_Reference 109:     case Type_SambaAvahi: {",
        "// Line_Reference 110:         smbAvahiShare->setText(d.url.path());",
        "// Line_Reference 111:         smbAvahiUser->setText(d.url.userName());",
        "// Line_Reference 112:         smbAvahiPassword->setText(d.url.password());",
        "// Line_Reference 113:         QUrlQuery q(d.url);",
        "// Line_Reference 114:         if (q.hasQueryItem(RemoteFsDevice::constDomainQuery)) {",
        "// Line_Reference 115:             smbAvahiDomain->setText(q.queryItemValue(RemoteFsDevice::constDomainQuery));",
        "// Line_Reference 116:         } else {",
        "// Line_Reference 117:             smbAvahiDomain->setText(QString());",
        "// Line_Reference 118:         }",
        "// Line_Reference 119:         if (q.hasQueryItem(RemoteFsDevice::constServiceNameQuery)) {",
        "// Line_Reference 120:             smbAvahiName->setText(q.queryItemValue(RemoteFsDevice::constServiceNameQuery));",
        "// Line_Reference 121:         } else {",
        "// Line_Reference 122:             smbAvahiName->setText(QString());",
        "// Line_Reference 123:         }",
        "// Line_Reference 124:         break;",
        "// Line_Reference 125:     }",
        "// Line_Reference 145:     connect(smbHost, SIGNAL(textChanged(const QString &)), this, SLOT(checkSaveable()));",
        "// Line_Reference 146:     connect(smbUser, SIGNAL(textChanged(const QString &)), this, SLOT(checkSaveable()));",
        "// Line_Reference 147:     connect(smbPassword, SIGNAL(textChanged(const QString &)), this, SLOT(checkSaveable()));",
        "// Line_Reference 148:     connect(smbDomain, SIGNAL(textChanged(const QString &)), this, SLOT(checkSaveable()));",
        "// Line_Reference 149:     connect(smbShare, SIGNAL(textChanged(const QString &)), this, SLOT(checkSaveable()));",
        "// Line_Reference 150:     connect(smbPort, SIGNAL(valueChanged(int)), this, SLOT(checkSaveable()));",
        "// Line_Reference 151:     connect(smbAvahiName, SIGNAL(textChanged(const QString &)), this, SLOT(checkSaveable()));",
        "// Line_Reference 152:     connect(smbAvahiUser, SIGNAL(textChanged(const QString &)), this, SLOT(checkSaveable()));",
        "// Line_Reference 153:     connect(smbAvahiPassword, SIGNAL(textChanged(const QString &)), this, SLOT(checkSaveable()));",
        "// Line_Reference 154:     connect(smbAvahiDomain, SIGNAL(textChanged(const QString &)), this, SLOT(checkSaveable()));",
        "// Line_Reference 155:     connect(smbAvahiShare, SIGNAL(textChanged(const QString &)), this, SLOT(checkSaveable()));",
        "// Line_Reference 166:     if (Type_Samba==type->itemData(type->currentIndex()).toInt() && 0==smbPort->value()) {",
        "// Line_Reference 167:         smbPort->setValue(445);",
        "// Line_Reference 168:     }",
        "// Line_Reference 176:     if (saveable && Type_SambaAvahi==type->itemData(type->currentIndex()).toInt()) {",
        "// Line_Reference 177:         saveable=!smbAvahiName->text().trimmed().isEmpty();",
        "// Line_Reference 178:     }",
        "// Line_Reference 207:     case Type_Samba:",
        "// Line_Reference 208:         det.url.setHost(smbHost->text().trimmed());",
        "// Line_Reference 209:         det.url.setUserName(smbUser->text().trimmed());",
        "// Line_Reference 210:         det.url.setPath(smbShare->text().trimmed());",
        "// Line_Reference 211:         det.url.setPort(smbPort->value());",
        "// Line_Reference 212:         det.url.setScheme(RemoteFsDevice::constSambaProtocol);",
        "// Line_Reference 213:         det.url.setPassword(smbPassword->text().trimmed());",
        "// Line_Reference 214:         if (!smbDomain->text().trimmed().isEmpty()) {",
        "// Line_Reference 215:             QUrlQuery q;",
        "// Line_Reference 216:             q.addQueryItem(RemoteFsDevice::constDomainQuery, smbDomain->text().trimmed());",
        "// Line_Reference 217:             det.url.setQuery(q);",
        "// Line_Reference 218:         }",
        "// Line_Reference 219:         break;",
        "// Line_Reference 220:     case Type_SambaAvahi:",
        "// Line_Reference 221:         det.url.setUserName(smbAvahiUser->text().trimmed());",
        "// Line_Reference 222:         det.url.setPath(smbAvahiShare->text().trimmed());",
        "// Line_Reference 223:         det.url.setPort(0);",
        "// Line_Reference 224:         det.url.setScheme(RemoteFsDevice::constSambaAvahiProtocol);",
        "// Line_Reference 225:         det.url.setPassword(smbAvahiPassword->text().trimmed());",
        "// Line_Reference 226:         if (!smbDomain->text().trimmed().isEmpty() || !smbAvahiName->text().trimmed().isEmpty()) {",
        "// Line_Reference 227:             QUrlQuery q;",
        "// Line_Reference 228:             if (!smbDomain->text().trimmed().isEmpty()) {",
        "// Line_Reference 229:                 q.addQueryItem(RemoteFsDevice::constDomainQuery, smbAvahiDomain->text().trimmed());",
        "// Line_Reference 230:             }",
        "// Line_Reference 231:             if (!smbAvahiName->text().trimmed().isEmpty()) {",
        "// Line_Reference 232:                 det.serviceName=smbAvahiName->text().trimmed();",
        "// Line_Reference 233:                 q.addQueryItem(RemoteFsDevice::constServiceNameQuery, det.serviceName);",
        "// Line_Reference 234:             }",
        "// Line_Reference 235:             det.url.setQuery(q);",
        "// Line_Reference 236:         }",
        "// Line_Reference 237:         break;"
    ]
}
