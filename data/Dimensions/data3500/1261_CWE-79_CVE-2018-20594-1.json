{
    "cve_id": "CVE-2018-20594",
    "cve_description": "An issue was discovered in hsweb 3.0.4. It is a reflected XSS vulnerability due to the absence of type parameter checking in FlowableModelManagerController.java.",
    "cve_publish_date": "2018-12-30",
    "cwe_id": "CWE-79",
    "cwe_name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
    "cwe_description": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
    "commit_message": "fix #107  修复反射型xss",
    "type_of_change": "Modification",
    "filename_of_changes": "FlowableModelManagerController.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "37",
    "number_of_lines_deleted_vulnerable_to_cve": "42",
    "vulnerable_lines": [
        "// Line_Reference 136:                        @PathVariable(\"type\") @ApiParam(value = \"类型\", allowableValues = \"bpmn,json\", example = \"json\") String type,",
        "// Line_Reference 138:         try {",
        "// Line_Reference 139:             Model modelData = repositoryService.getModel(modelId);",
        "// Line_Reference 140:             BpmnJsonConverter jsonConverter = new BpmnJsonConverter();",
        "// Line_Reference 141:             byte[] modelEditorSource = repositoryService.getModelEditorSource(modelData.getId());",
        "// Line_Reference 142: ",
        "// Line_Reference 143:             JsonNode editorNode = new ObjectMapper().readTree(modelEditorSource);",
        "// Line_Reference 144:             BpmnModel bpmnModel = jsonConverter.convertToBpmnModel(editorNode);",
        "// Line_Reference 145: ",
        "// Line_Reference 146:             // 处理异常",
        "// Line_Reference 147:             if (bpmnModel.getMainProcess() == null) {",
        "// Line_Reference 148:                 response.setStatus(HttpStatus.UNPROCESSABLE_ENTITY.value());",
        "// Line_Reference 149:                 response.getOutputStream().println(\"no main process, can't export for dimension: \" + type);",
        "// Line_Reference 150:                 response.flushBuffer();",
        "// Line_Reference 151:                 return;",
        "// Line_Reference 152:             }",
        "// Line_Reference 153: ",
        "// Line_Reference 154:             String filename = \"\";",
        "// Line_Reference 155:             byte[] exportBytes = null;",
        "// Line_Reference 156: ",
        "// Line_Reference 157:             String mainProcessId = bpmnModel.getMainProcess().getId();",
        "// Line_Reference 159:             if (\"bpmn\".equals(type)) {",
        "// Line_Reference 161:                 BpmnXMLConverter xmlConverter = new BpmnXMLConverter();",
        "// Line_Reference 162:                 exportBytes = xmlConverter.convertToXML(bpmnModel);",
        "// Line_Reference 164:                 filename = mainProcessId + \".bpmn20.xml\";",
        "// Line_Reference 165:             } else if (\"json\".equals(type)) {",
        "// Line_Reference 167:                 exportBytes = modelEditorSource;",
        "// Line_Reference 168:                 filename = mainProcessId + \".json\";",
        "// Line_Reference 170:             } else {",
        "// Line_Reference 171:                 throw new UnsupportedOperationException(\"不支持的格式:\" + type);",
        "// Line_Reference 172:             }",
        "// Line_Reference 174:             response.setCharacterEncoding(\"UTF-8\");",
        "// Line_Reference 175:             response.setContentType(\"application/octet-stream\");",
        "// Line_Reference 176:             response.setHeader(\"Content-Disposition\", \"attachment; filename=\" + URLEncoder.encode(filename, \"UTF-8\"));",
        "// Line_Reference 178:             /*创建输入流*/",
        "// Line_Reference 179:             try (ByteArrayInputStream in = new ByteArrayInputStream(exportBytes)) {",
        "// Line_Reference 180:                 IOUtils.copy(in, response.getOutputStream());",
        "// Line_Reference 181:                 response.flushBuffer();",
        "// Line_Reference 182:                 in.close();",
        "// Line_Reference 183:             }",
        "// Line_Reference 185:         } catch (Exception e) {",
        "// Line_Reference 186:             log.error(\"导出model的xml文件失败：modelId={}, type={}\", modelId, type, e);"
    ]
}
