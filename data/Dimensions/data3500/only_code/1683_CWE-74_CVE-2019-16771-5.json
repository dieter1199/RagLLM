import static org.junit.Assert.fail;
import org.junit.Test;
public class HttpHeadersBaseTest {
public void testEqualsInsertionOrderSameHeaderName() {
public void testEqualsInsertionOrderDifferentHeaderNames() {
public void addShouldIncreaseAndRemoveShouldDecreaseTheSize() {
public void afterClearHeadersShouldBeEmpty() {
public void removingANameForASecondTimeShouldReturnFalse() {
public void multipleValuesPerNameShouldBeAllowed() {
public void multipleValuesPerNameIteratorWithOtherNames() {
public void multipleValuesPerNameIterator() {
public void multipleValuesPerNameIteratorEmpty() {
public void testContains() {
public void testCopy() throws Exception {
public void canMixConvertedAndNormalValues() {
public void testGetAndRemove() {
public void whenNameContainsMultipleValuesGetShouldReturnTheFirst() {
public void getWithDefaultValueWorks() {
public void setShouldOverWritePreviousValue() {
public void setAllShouldOverwriteSomeAndLeaveOthersUntouched() {
public void headersWithSameNamesAndValuesShouldBeEquivalent() {
public void emptyHeadersShouldBeEqual() {
public void headersWithSameNamesButDifferentValuesShouldNotBeEquivalent() {
public void subsetOfHeadersShouldNotBeEquivalent() {
public void headersWithDifferentNamesAndValuesShouldNotBeEquivalent() {
@Test(expected = NoSuchElementException.class)
public void iterateEmptyHeadersShouldThrow() {
iterator.next();
public void iteratorShouldReturnAllNameValuePairs() {
public void iteratorSetShouldFail() {
public void testEntryEquals() {
public void getAllReturnsEmptyListForUnknownName() {
public void setHeadersShouldClearAndOverwrite() {
public void setHeadersShouldOnlyOverwriteHeaders() {
@Test(expected = IllegalArgumentException.class)
public void testAddSelf() {
headers.add(headers);
public void testSetSelfIsNoOp() {
public void testToString() {
public void testNotThrowWhenConvertFails() {
public void testGetOperations() {
@Test(expected = NullPointerException.class)
public void testSetNullHeaderValue() {
final HttpHeadersBase headers = newEmptyHeaders();
headers.set("test", (String) null);
@Test(expected = NullPointerException.class)
public void nullHeaderNameNotAllowed() {
newEmptyHeaders().add(null, "foo");
@Test(expected = IllegalArgumentException.class)
public void emptyHeaderNameNotAllowed() {
newEmptyHeaders().add("", "foo");
public void testPseudoHeadersMustComeFirstWhenIterating() {
public void testPseudoHeadersWithRemovePreservesPseudoIterationOrder() {
public void testPseudoHeadersWithClearDoesNotLeak() {
public void testSetOrdersPseudoHeadersCorrectly() {
public void testHeaderNameNormalization() {
public void testClearResetsPseudoHeaderDivision() {
public void testContainsNameAndValue() {
public void testUri() {