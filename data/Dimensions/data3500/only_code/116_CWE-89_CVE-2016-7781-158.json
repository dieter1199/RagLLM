$src = empty($this->params['src']) ? null : $this->params['src'];
$src = empty($this->params['src']) ? null : $this->params['src'];
}
public function subscriptions() {
global $db;
expHistory::set('manageable', $this->params);
// make sure we have what we need.
if (empty($this->params['key'])) expQueue::flashAndFlow('error', gt('The security key for account was not supplied.'));
if (empty($this->params['id'])) expQueue::flashAndFlow('error', gt('The subscriber id for account was not supplied.'));
// verify the id/key pair
$sub = new subscribers($this->params['id']);
if (empty($sub->id)) expQueue::flashAndFlow('error', gt('We could not find any subscriptions matching the ID and Key you provided.'));
// get this users subscriptions
$subscriptions = $db->selectColumn('expeAlerts_subscribers', 'expeAlerts_id', 'subscribers_id='.$sub->id);
// get a list of all available E-Alerts
$ealerts = new expeAlerts();
assign_to_template(array(
'subscriber'=>$sub,
'subscriptions'=>$subscriptions,
'ealerts'=>$ealerts->find('all')
));
}
public function subscription_update() {
global $db;
// make sure we have what we need.
if (empty($this->params['email'])) expQueue::flashAndFlow('error', gt('You must supply an email address to sign up for email alerts.'));
if (empty($this->params['key'])) expQueue::flashAndFlow('error', gt('The security key for account was not supplied.'));
if (empty($this->params['id'])) expQueue::flashAndFlow('error', gt('The subscriber id for account was not supplied.'));
// find the subscriber and validate the security key
$subscriber = new subscribers($this->params['id']);
if ($subscriber->hash != $this->params['key']) expQueue::flashAndFlow('error', gt('The security key you supplied does not match the one we have on file.'));
// delete any old subscriptions and add the user to new subscriptions
$db->delete('expeAlerts_subscribers', 'subscribers_id='.$subscriber->id);
foreach($this->params['ealerts'] as $ea_id) {
$obj = new stdClass();
$obj->subscribers_id = $subscriber->id;
$obj->expeAlerts_id = $ea_id;
$db->insertObject($obj, 'expeAlerts_subscribers');
}
$count = count($this->params['ealerts']);
if ($count > 0) {
flash('message', gt("Your subscriptions have been updated.  You are now subscriber to")." ".$count.' '.gt('E-Alerts.'));
} else {
flash('error', gt("You have been unsubscribed from all E-Alerts."));
}
expHistory::back();
}
public function signup() {
global $db;
// check the anti-spam control
expValidator::check_antispam($this->params, gt("Anti-spam verification failed.  Please try again."));
// make sure we have what we need.
if (empty($this->params['email'])) expQueue::flashAndFlow('error', gt('You must supply an email address to sign up for email alerts.'));
if (empty($this->params['ealerts'])) expQueue::flashAndFlow('error', gt('You did not select any E-Alert topics to subscribe to.'));
// find or create the subscriber
$id = $db->selectValue('subscribers', 'id', 'email="'.$this->params['email'].'"');
$subscriber = new subscribers($id);
if (empty($subscriber->id)) {
$subscriber->email = trim($this->params['email']);
$subscriber->hash = md5($subscriber->email.time());
$subscriber->save();
}
// delete any old subscriptions and add the user to new subscriptions
$db->delete('expeAlerts_subscribers', 'subscribers_id='.$subscriber->id);
foreach($this->params['ealerts'] as $ea_id) {
$obj = new stdClass();
$obj->subscribers_id = $subscriber->id;
$obj->expeAlerts_id = $ea_id;
$db->insertObject($obj, 'expeAlerts_subscribers');
}
// send a confirmation email to the user.
$ealerts = $db->selectObjects('expeAlerts', 'id IN ('.implode(',', $this->params['ealerts']).')');
$body = expTemplate::get_template_for_action($this, 'email/confirmation_email', $this->loc);
$body->assign('ealerts', $ealerts);
$body->assign('subscriber', $subscriber);
$mail = new expMail();
$mail->quickSend(array(
'html_message'=>$body->render(),
'to'=>$subscriber->email,
'from'=>array(trim(SMTP_FROMADDRESS) => trim(ORGANIZATION_NAME)),
'subject'=>gt('Please confirm your E-Alert subscriptions'),
));
redirect_to(array('controller'=>'ealert', 'action'=>'pending', 'id'=>$subscriber->id));
}
public function pending() {
// make sure we have what we need.
if (empty($this->params['id'])) expQueue::flashAndFlow('error', gt('Your subscriber ID was not supplied.'));
// find the subscriber and their pending subscriptions
$ealerts = expeAlerts::getPendingBySubscriber($this->params['id']);
$subscriber = new subscribers($this->params['id']);
// render the template
assign_to_template(array(
'subscriber'=>$subscriber,
'ealerts'=>$ealerts
));
}
public function confirm() {
global $db;
// make sure we have what we need.
if (empty($this->params['key'])) expQueue::flashAndFlow('error', gt('The security key for account was not supplied.'));
if (empty($this->params['id'])) expQueue::flashAndFlow('error', gt('The subscriber id for account was not supplied.'));
// verify the id/key pair
$id = $db->selectValue('subscribers','id', 'id='.$this->params['id'].' AND hash="'.$this->params['key'].'"');
if (empty($id)) expQueue::flashAndFlow('error', gt('We could not find any subscriptions matching the ID and Key you provided.'));
// activate this users pending subscriptions
$sub = new stdClass();
$sub->enabled = 1;
$db->updateObject($sub, 'expeAlerts_subscribers', 'subscribers_id='.$id);
// find the users active subscriptions
$ealerts = expeAlerts::getBySubscriber($id);
assign_to_template(array(
'ealerts'=>$ealerts
));
}
