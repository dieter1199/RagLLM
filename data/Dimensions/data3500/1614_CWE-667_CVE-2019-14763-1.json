{
    "cve_id": "CVE-2019-14763",
    "cve_description": "In the Linux kernel before 4.16.4, a double-locking error in drivers/usb/dwc3/gadget.c may potentially cause a deadlock with f_hid.",
    "cve_publish_date": "2019-08-07",
    "cwe_id": "CWE-667",
    "cwe_name": "Improper Locking",
    "cwe_description": "The product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.",
    "commit_message": "usb: dwc3: gadget: never call ->complete() from ->ep_queue()\n\nThis is a requirement which has always existed but, somehow, wasn't\nreflected in the documentation and problems weren't found until now\nwhen Tuba Yavuz found a possible deadlock happening between dwc3 and\nf_hid. She described the situation as follows:\n\nspin_lock_irqsave(&hidg->write_spinlock, flags); // first acquire\n/* we our function has been disabled by host */\nif (!hidg->req) {\n\tfree_ep_req(hidg->in_ep, hidg->req);\n\tgoto try_again;\n}\n\n[...]\n\nstatus = usb_ep_queue(hidg->in_ep, hidg->req, GFP_ATOMIC);\n=>\n\t[...]\n\t=> usb_gadget_giveback_request\n\t\t=>\n\t\tf_hidg_req_complete\n\t\t\t=>\n\t\t\tspin_lock_irqsave(&hidg->write_spinlock, flags); // second acquire\n\nNote that this happens because dwc3 would call ->complete() on a\nfailed usb_ep_queue() due to failed Start Transfer command. This is,\nanyway, a theoretical situation because dwc3 currently uses \"No\nResponse Update Transfer\" command for Bulk and Interrupt endpoints.\n\nIt's still good to make this case impossible to happen even if the \"No\nReponse Update Transfer\" command is changed.\n\nReported-by: Tuba Yavuz <tuba@ece.ufl.edu>\nSigned-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>\nCc: stable <stable@vger.kernel.org>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "gadget.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "25",
    "number_of_lines_deleted_vulnerable_to_cve": "18",
    "vulnerable_lines": [
        "// Line_Reference 169: /**",
        "// Line_Reference 170:  * dwc3_gadget_giveback - call struct usb_request's ->complete callback",
        "// Line_Reference 171:  * @dep: The endpoint to whom the request belongs to",
        "// Line_Reference 172:  * @req: The request we're giving back",
        "// Line_Reference 173:  * @status: completion code for the request",
        "// Line_Reference 174:  *",
        "// Line_Reference 175:  * Must be called with controller's lock held and interrupts disabled. This",
        "// Line_Reference 176:  * function will unmap @req and call its ->complete() callback to notify upper",
        "// Line_Reference 177:  * layers that it has completed.",
        "// Line_Reference 178:  */",
        "// Line_Reference 179: void dwc3_gadget_giveback(struct dwc3_ep *dep, struct dwc3_request *req,",
        "// Line_Reference 180: \t\tint status)",
        "// Line_Reference 193: \t\t\t\t\t\t&req->request, req->direction);",
        "// Line_Reference 196: ",
        "// Line_Reference 202: ",
        "// Line_Reference 203: \tif (dep->number > 1)",
        "// Line_Reference 204: \t\tpm_runtime_put(dwc->dev);",
        "// Line_Reference 1230: \t\tdwc3_gadget_giveback(dep, req, ret);"
    ]
}
