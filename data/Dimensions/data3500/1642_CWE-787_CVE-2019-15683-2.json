{
    "cve_id": "CVE-2019-15683",
    "cve_description": "TurboVNC server code contains stack buffer overflow vulnerability in commit prior to cea98166008301e614e0d36776bf9435a536136e. This could possibly result into remote code execution, since stack frame is not protected with stack canary. This attack appear to be exploitable via network connectivity. To exploit this vulnerability authorization on server is required. These issues have been fixed in commit cea98166008301e614e0d36776bf9435a536136e.",
    "cve_publish_date": "2019-10-29",
    "cwe_id": "CWE-787",
    "cwe_name": "Out-of-bounds Write",
    "cwe_description": "The product writes data past the end, or before the beginning, of the intended buffer.",
    "commit_message": "Server: Fix two issues identified by ASan\n\n1. If the TLSPlain and X509Plain security types were both disabled, then\n   rfbOptPamAuth() would overflow the name field in the secTypes\n   structure when testing the \"none\" security type, since the name of\n   that security type has less than five characters.  This issue was\n   innocuous, since the overflow was fully contained within the secTypes\n   structure, but the ASan error caused Xvnc to abort, which made it\n   difficult to detect other errors.\n\n2. If an ill-behaved RFB client sent the TurboVNC Server a fence\n   message with more than 64 bytes, then the TurboVNC Server would\n   try to read that message and subsequently overflow the stack before\n   it detected that the payload was too large.  This could never have\n   occurred with any of the VNC viewers that currently support the RFB\n   flow control extensions (TigerVNC and TurboVNC, namely.)  This issue\n   was also innocuous, since the stack overflow affected two variables\n   (newScreens and errMsg) that were never accessed before the function\n   returned.",
    "type_of_change": "Modification",
    "filename_of_changes": "rfbserver.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "6",
    "number_of_lines_deleted_vulnerable_to_cve": "4",
    "vulnerable_lines": [
        "// Line_Reference 1317:       READ(data, msg.f.length)",
        "// Line_Reference 1318: ",
        "// Line_Reference 1319:       if (msg.f.length > sizeof(data))",
        "// Line_Reference 1322:       else"
    ]
}
