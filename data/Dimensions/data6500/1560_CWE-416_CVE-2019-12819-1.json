{
    "cve_id": "CVE-2019-12819",
    "cve_description": "An issue was discovered in the Linux kernel before 5.0. The function __mdiobus_register() in drivers/net/phy/mdio_bus.c calls put_device(), which will trigger a fixed_mdio_bus_init use-after-free. This will cause a denial of service.",
    "cve_publish_date": "2019-06-14",
    "cwe_id": "CWE-416",
    "cwe_name": "Use After Free",
    "cwe_description": "The product reuses or references memory after it has been freed. At some point afterward, the memory may be allocated again and saved in another pointer, while the original pointer references a location somewhere within the new allocation. Any operations using the original pointer are no longer valid because the memory \"belongs\" to the code that operates on the new pointer.",
    "commit_message": "mdio_bus: Fix use-after-free on device_register fails\n\nKASAN has found use-after-free in fixed_mdio_bus_init,\ncommit 0c692d07842a (\"drivers/net/phy/mdio_bus.c: call\nput_device on device_register() failure\") call put_device()\nwhile device_register() fails,give up the last reference\nto the device and allow mdiobus_release to be executed\n,kfreeing the bus. However in most drives, mdiobus_free\nbe called to free the bus while mdiobus_register fails.\nuse-after-free occurs when access bus again, this patch\nrevert it to let mdiobus_free free the bus.\n\nKASAN report details as below:\n\nBUG: KASAN: use-after-free in mdiobus_free+0x85/0x90 drivers/net/phy/mdio_bus.c:482\nRead of size 4 at addr ffff8881dc824d78 by task syz-executor.0/3524\n\nCPU: 1 PID: 3524 Comm: syz-executor.0 Not tainted 5.0.0-rc7+ #45\nHardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014\nCall Trace:\n __dump_stack lib/dump_stack.c:77 [inline]\n dump_stack+0xfa/0x1ce lib/dump_stack.c:113\n print_address_description+0x65/0x270 mm/kasan/report.c:187\n kasan_report+0x149/0x18d mm/kasan/report.c:317\n mdiobus_free+0x85/0x90 drivers/net/phy/mdio_bus.c:482\n fixed_mdio_bus_init+0x283/0x1000 [fixed_phy]\n ? 0xffffffffc0e40000\n ? 0xffffffffc0e40000\n ? 0xffffffffc0e40000\n do_one_initcall+0xfa/0x5ca init/main.c:887\n do_init_module+0x204/0x5f6 kernel/module.c:3460\n load_module+0x66b2/0x8570 kernel/module.c:3808\n __do_sys_finit_module+0x238/0x2a0 kernel/module.c:3902\n do_syscall_64+0x147/0x600 arch/x86/entry/common.c:290\n entry_SYSCALL_64_after_hwframe+0x49/0xbe\nRIP: 0033:0x462e99\nCode: f7 d8 64 89 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48\nRSP: 002b:00007f6215c19c58 EFLAGS: 00000246 ORIG_RAX: 0000000000000139\nRAX: ffffffffffffffda RBX: 000000000073bf00 RCX: 0000000000462e99\nRDX: 0000000000000000 RSI: 0000000020000080 RDI: 0000000000000003\nRBP: 00007f6215c19c70 R08: 0000000000000000 R09: 0000000000000000\nR10: 0000000000000000 R11: 0000000000000246 R12: 00007f6215c1a6bc\nR13: 00000000004bcefb R14: 00000000006f7030 R15: 0000000000000004\n\nAllocated by task 3524:\n set_track mm/kasan/common.c:85 [inline]\n __kasan_kmalloc.constprop.3+0xa0/0xd0 mm/kasan/common.c:496\n kmalloc include/linux/slab.h:545 [inline]\n kzalloc include/linux/slab.h:740 [inline]\n mdiobus_alloc_size+0x54/0x1b0 drivers/net/phy/mdio_bus.c:143\n fixed_mdio_bus_init+0x163/0x1000 [fixed_phy]\n do_one_initcall+0xfa/0x5ca init/main.c:887\n do_init_module+0x204/0x5f6 kernel/module.c:3460\n load_module+0x66b2/0x8570 kernel/module.c:3808\n __do_sys_finit_module+0x238/0x2a0 kernel/module.c:3902\n do_syscall_64+0x147/0x600 arch/x86/entry/common.c:290\n entry_SYSCALL_64_after_hwframe+0x49/0xbe\n\nFreed by task 3524:\n set_track mm/kasan/common.c:85 [inline]\n __kasan_slab_free+0x130/0x180 mm/kasan/common.c:458\n slab_free_hook mm/slub.c:1409 [inline]\n slab_free_freelist_hook mm/slub.c:1436 [inline]\n slab_free mm/slub.c:2986 [inline]\n kfree+0xe1/0x270 mm/slub.c:3938\n device_release+0x78/0x200 drivers/base/core.c:919\n kobject_cleanup lib/kobject.c:662 [inline]\n kobject_release lib/kobject.c:691 [inline]\n kref_put include/linux/kref.h:67 [inline]\n kobject_put+0x146/0x240 lib/kobject.c:708\n put_device+0x1c/0x30 drivers/base/core.c:2060\n __mdiobus_register+0x483/0x560 drivers/net/phy/mdio_bus.c:382\n fixed_mdio_bus_init+0x26b/0x1000 [fixed_phy]\n do_one_initcall+0xfa/0x5ca init/main.c:887\n do_init_module+0x204/0x5f6 kernel/module.c:3460\n load_module+0x66b2/0x8570 kernel/module.c:3808\n __do_sys_finit_module+0x238/0x2a0 kernel/module.c:3902\n do_syscall_64+0x147/0x600 arch/x86/entry/common.c:290\n entry_SYSCALL_64_after_hwframe+0x49/0xbe\n\nThe buggy address belongs to the object at ffff8881dc824c80\n which belongs to the cache kmalloc-2k of size 2048\nThe buggy address is located 248 bytes inside of\n 2048-byte region [ffff8881dc824c80, ffff8881dc825480)\nThe buggy address belongs to the page:\npage:ffffea0007720800 count:1 mapcount:0 mapping:ffff8881f6c02800 index:0x0 compound_mapcount: 0\nflags: 0x2fffc0000010200(slab|head)\nraw: 02fffc0000010200 0000000000000000 0000000500000001 ffff8881f6c02800\nraw: 0000000000000000 00000000800f000f 00000001ffffffff 0000000000000000\npage dumped because: kasan: bad access detected\n\nMemory state around the buggy address:\n ffff8881dc824c00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc\n ffff8881dc824c80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb\n>ffff8881dc824d00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb\n                                                                ^\n ffff8881dc824d80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb\n ffff8881dc824e00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb\n\nFixes: 0c692d07842a (\"drivers/net/phy/mdio_bus.c: call put_device on device_register() failure\")\nSigned-off-by: YueHaibing <yuehaibing@huawei.com>\nReviewed-by: Andrew Lunn <andrew@lunn.ch>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "type_of_change": "Modification",
    "filename_of_changes": "mdio_bus.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "0",
    "number_of_lines_deleted_vulnerable_to_cve": "1",
    "vulnerable_lines": [
        "// Line_Reference 382: \t\tput_device(&bus->dev);"
    ]
}
