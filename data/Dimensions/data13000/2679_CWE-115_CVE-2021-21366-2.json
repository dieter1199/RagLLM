{
    "cve_id": "CVE-2021-21366",
    "cve_description": "xmldom is a pure JavaScript W3C standard-based (XML DOM Level 2 Core) DOMParser and XMLSerializer module. xmldom versions 0.4.0 and older do not correctly preserve system identifiers, FPIs or namespaces when repeatedly parsing and serializing maliciously crafted documents. This may lead to unexpected syntactic changes during XML processing in some downstream applications. This is fixed in version 0.5.0. As a workaround downstream applications can validate the input and reject the maliciously crafted documents.",
    "cve_publish_date": "2021-03-12",
    "cwe_id": "CWE-115",
    "cwe_name": "Misinterpretation of Input",
    "cwe_description": "The product misinterprets an input, whether from an attacker or another product, in a security-relevant fashion.",
    "commit_message": "Merge pull request from GHSA-h6q6-9hqw-rwfv\n\n* fix!: Preserve quotes in DOCTYPE declaration\n\nSince the only purpose of parsing the DOCTYPE is to be able to restore it when serializing,\nwe decided that it would be best to leave the parsed publicId and systemId as is,\nincluding any quotes.\n\nBREAKING CHANGE: If somebody relies on the actual unquoted values of those ids,\nthey will need to take care of either single or double quotes and the right escaping.\n\n(Without this change this would not have been possible because the SAX parser already\ndropped the information about the quotes that have been used in the source.)\n\nhttps://www.w3.org/TR/2006/REC-xml11-20060816/#dtd\nhttps://www.w3.org/TR/2006/REC-xml11-20060816/#IDAX1KS (External Entity Declaration)\n\nCo-authored-by: Christian Bewernitz <coder@karfau.de>\nCo-authored-by: Chris Brody <chris.brody+brodybits@gmail.com>\n\n* feat(security): Improve error reporting; throw on duplicate attribute\n\nBREAKING CHANGE: It is currently not clear how to consistently deal with duplicate attributes,\nso it is also safer for our users to fail when detecting them.\n\nIt is possible to configure the `DOMParser.errorHandler` before parsing, to handle those errors differently.\n\nTo accomplish this and also be able to verify it in tests we needed to:\n\n- create a new `Error` type `ParseError` and export it\n- Throw `ParseError` from `errorHandler.fatalError` and prevent those from being caught in `XMLReader`.\n- export `DOMHandler` constructor as `__DOMHandler`\n\nCo-authored-by: Christian Bewernitz <coder@karfau.de>\nCo-authored-by: Chris Brody <chris.brody+brodybits@gmail.com>\n\nCo-authored-by: Christian Bewernitz <coder@karfau.de>",
    "type_of_change": "Modification",
    "filename_of_changes": "normalize.test.js.snap",
    "code_language": "HTML",
    "number_of_lines_added_for_mitigation": "8",
    "number_of_lines_deleted_vulnerable_to_cve": "4",
    "vulnerable_lines": [
        "// Line_Reference 35:     \"[xmldom warning]\tattribute \\\\\"123&&456\\\\\" missed quot(\\\\\")!!",
        "// Line_Reference 181:     \"[xmldom warning]\tattribute \\\\\"1\\\\\" missed quot(\\\\\")!!",
        "// Line_Reference 191:     \"[xmldom warning]\tattribute \\\\\"1/2\\\\\" missed quot(\\\\\")!!",
        "// Line_Reference 211:     \"[xmldom warning]\tattribute \\\\\"1\\\\\" missed quot(\\\\\")!!"
    ]
}
