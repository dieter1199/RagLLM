body, err := rewriteWithModifiersInBody(c, f, body)
var unsafe map[string]struct{}
if qc.unsafeBuiltins != nil {
unsafe = qc.unsafeBuiltins
} else {
unsafe = qc.compiler.unsafeBuiltinsMap
}
errs := checkUnsafeBuiltins(unsafe, body)
body, err := rewriteWithModifiersInBody(qc.compiler, f, body)
func rewriteWithModifiersInBody(c *Compiler, f *equalityFactory, body Body) (Body, *Error) {
exprs, err := rewriteWithModifier(c, f, body[i])
func rewriteWithModifier(c *Compiler, f *equalityFactory, expr *Expr) ([]*Expr, *Error) {
eval, err := validateWith(c, expr, i)
func validateWith(c *Compiler, expr *Expr, i int) (bool, *Error) {
if validateWithFunctionValue(c.builtins, c.RuleTree, value) {
return false, nil
case isBuiltinRefOrVar(c.builtins, target):
if validateWithFunctionValue(c.builtins, c.RuleTree, value) {
return false, nil
func validateWithFunctionValue(bs map[string]*Builtin, ruleTree *TreeNode, value *Term) bool {
return true
return isBuiltinRefOrVar(bs, value)
func isBuiltinRefOrVar(bs map[string]*Builtin, term *Term) bool {
return ok
return false