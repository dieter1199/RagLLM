public function crossOriginRedirectProvider()
return [
['http://example.com?a=b', 'http://test.com/', false],
['https://example.com?a=b', 'https://test.com/', false],
['http://example.com?a=b', 'https://test.com/', false],
['https://example.com?a=b', 'http://test.com/', false],
['http://example.com?a=b', 'http://example.com/', true],
['https://example.com?a=b', 'https://example.com/', true],
['http://example.com?a=b', 'https://example.com/', true],
['https://example.com?a=b', 'http://example.com/', false],
];
* @dataProvider crossOriginRedirectProvider
public function testHeadersTreatmentOnRedirect($originalUri, $targetUri, $shouldBePresent)
$mock = new MockHandler([
new Response(302, ['Location' => $targetUri]),
static function (RequestInterface $request) use ($shouldBePresent) {
self::assertSame($shouldBePresent, $request->hasHeader('Authorization'));
self::assertSame($shouldBePresent, $request->hasHeader('Cookie'));
$client->get($originalUri, ['auth' => ['testuser', 'testpass'], 'headers' => ['Cookie' => 'foo=bar']]);
public function testNotRemoveAuthorizationHeaderOnRedirect()
new Response(302, ['Location' => 'http://example.com/2']),
static function (RequestInterface $request) {
self::assertTrue($request->hasHeader('Authorization'));
$client->get('http://example.com?a=b', ['auth' => ['testuser', 'testpass']]);
public function testRemoveCurlAuthorizationOptionsOnRedirect($auth)
new Response(302, ['Location' => 'http://test.com']),
$client->get('http://example.com?a=b', ['auth' => ['testuser', 'testpass', $auth]]);