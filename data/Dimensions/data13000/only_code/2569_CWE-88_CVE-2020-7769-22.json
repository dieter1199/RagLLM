describe('SMTP Transport Tests', function() {
describe('Anonymous sender tests', function() {
beforeEach(function(done) {
stream.on('data', function() {});
afterEach(function(done) {
it('Should expose version number', function() {
it('Should detect wellknown data', function() {
it('Should fail envelope', function(done) {
function(err) {
it('Should not fail auth', function(done) {
function(err) {
it('Should fail auth if forceAuth=true', function(done) {
function(err) {
it('Should send mail', function(done) {
server.on('data', function(connection, chunk) {
server.on('dataReady', function(connection, callback) {
function(err) {
it('Should recover unexpeced close during transmission', function(done) {
server.on('data', function(connection, chunk) {
server.on('dataReady', function(connection, callback) {
function(err) {
describe('Authenticated sender tests', function() {
beforeEach(function(done) {
stream.on('data', function() {});
afterEach(function(done) {
it('Should login and send mail', function(done) {
server.on('data', function(connection, chunk) {
server.on('dataReady', function(connection, callback) {
function(err) {
it('Should verify connection with success', function(done) {
client.verify(function(err, success) {
it('Should not verify connection', function(done) {
client.verify(function(err) {
it('Should login and send mail using proxied socket', function(done) {
let errHandler = function(err) {
socket.on('connect', function() {
server.on('data', function(connection, chunk) {
server.on('dataReady', function(connection, callback) {
function(err) {