{
    "cve_id": "CVE-2021-41687",
    "cve_description": "DCMTK through 3.6.6 does not handle memory free properly. The program malloc a heap memory for parsing data, but does not free it when error in parsing. Sending specific requests to the dcmqrdb program incur the memory leak. An attacker can use it to launch a DoS attack.",
    "cve_publish_date": "2022-06-28",
    "cwe_id": "CWE-401",
    "cwe_name": "Missing Release of Memory after Effective Lifetime",
    "cwe_description": "The product does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory.",
    "commit_message": "Fixed poss. NULL pointer dereference/double free.\n\nThanks to Jinsheng Ba <bajinsheng@u.nus.edu> for the report and some patches.",
    "type_of_change": "Modification",
    "filename_of_changes": "dulparse.cc",
    "code_language": "C++",
    "number_of_lines_added_for_mitigation": "72",
    "number_of_lines_deleted_vulnerable_to_cve": "28",
    "vulnerable_lines": [
        "// Line_Reference 73: #include \"dulstruc.h\"",
        "// Line_Reference 145:     if ((assoc->presentationContextList = LST_Create()) == NULL) return EC_MemoryExhausted;",
        "// Line_Reference 146:     if ((assoc->userInfo.SCUSCPRoleList = LST_Create()) == NULL) return EC_MemoryExhausted;",
        "// Line_Reference 147: ",
        "// Line_Reference 222:                   return makeUnderflowError(\"Application Context item\", pduLength, itemLength);",
        "// Line_Reference 223:                 DCMNET_TRACE(\"Successfully parsed Application Context\");",
        "// Line_Reference 229:             if (context == NULL) return EC_MemoryExhausted;",
        "// Line_Reference 230:             (void) memset(context, 0, sizeof(*context));",
        "// Line_Reference 231:             cond = parsePresentationContext(type, context, buf, &itemLength, pduLength);",
        "// Line_Reference 232:             if (cond.bad()) return cond;",
        "// Line_Reference 233:             buf += itemLength;",
        "// Line_Reference 234:             if (!OFStandard::safeSubtract(pduLength, itemLength, pduLength))",
        "// Line_Reference 235:               return makeUnderflowError(\"Presentation Context item\", pduLength, itemLength);",
        "// Line_Reference 236:             LST_Enqueue(&assoc->presentationContextList, (LST_NODE*)context);",
        "// Line_Reference 237:             DCMNET_TRACE(\"Successfully parsed Presentation Context\");",
        "// Line_Reference 243:             if (cond.bad())",
        "// Line_Reference 244:                 return cond;",
        "// Line_Reference 245:             buf += itemLength;",
        "// Line_Reference 246:             if (!OFStandard::safeSubtract(pduLength, itemLength, pduLength))",
        "// Line_Reference 247:               return makeUnderflowError(\"User Information item\", pduLength, itemLength);",
        "// Line_Reference 248:             DCMNET_TRACE(\"Successfully parsed User Information\");",
        "// Line_Reference 252:             if (cond.bad())",
        "// Line_Reference 253:                 return cond;",
        "// Line_Reference 254:             buf += itemLength;",
        "// Line_Reference 255:             if (!OFStandard::safeSubtract(pduLength, itemLength, pduLength))",
        "// Line_Reference 256:               return makeUnderflowError(\"unknown item type\", pduLength, itemLength);",
        "// Line_Reference 407:                 if (cond.bad()) return cond;",
        "// Line_Reference 528:             if (cond.bad()) return cond;"
    ]
}
