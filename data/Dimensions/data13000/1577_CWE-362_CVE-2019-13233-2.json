{
    "cve_id": "CVE-2019-13233",
    "cve_description": "In arch/x86/lib/insn-eval.c in the Linux kernel before 5.1.9, there is a use-after-free for access to an LDT entry because of a race condition between modify_ldt() and a #BR exception for an MPX bounds violation.",
    "cve_publish_date": "2019-07-04",
    "cwe_id": "CWE-362",
    "cwe_name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
    "cwe_description": "The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.",
    "commit_message": "x86/insn-eval: Fix use-after-free access to LDT entry\n\nget_desc() computes a pointer into the LDT while holding a lock that\nprotects the LDT from being freed, but then drops the lock and returns the\n(now potentially dangling) pointer to its caller.\n\nFix it by giving the caller a copy of the LDT entry instead.\n\nFixes: 670f928ba09b (\"x86/insn-eval: Add utility function to get segment descriptor\")\nCc: stable@vger.kernel.org\nSigned-off-by: Jann Horn <jannh@google.com>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "insn-eval.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "24",
    "number_of_lines_deleted_vulnerable_to_cve": "23",
    "vulnerable_lines": [
        "// Line_Reference 560:  * get_desc() - Obtain pointer to a segment descriptor",
        "// Line_Reference 568:  * Pointer to segment descriptor on success.",
        "// Line_Reference 572: static struct desc_struct *get_desc(unsigned short sel)",
        "// Line_Reference 579: \t\tstruct desc_struct *desc = NULL;",
        "// Line_Reference 587: \t\tif (ldt && sel < ldt->nr_entries)",
        "// Line_Reference 588: \t\t\tdesc = &ldt->entries[sel];",
        "// Line_Reference 592: \t\treturn desc;",
        "// Line_Reference 607: \t\treturn NULL;",
        "// Line_Reference 609: \treturn (struct desc_struct *)(gdt_desc.address + desc_base);",
        "// Line_Reference 631: \tstruct desc_struct *desc;",
        "// Line_Reference 669: \tdesc = get_desc(sel);",
        "// Line_Reference 670: \tif (!desc)",
        "// Line_Reference 673: \treturn get_desc_base(desc);",
        "// Line_Reference 695: \tstruct desc_struct *desc;",
        "// Line_Reference 709: \tdesc = get_desc(sel);",
        "// Line_Reference 710: \tif (!desc)",
        "// Line_Reference 719: \tlimit = get_desc_limit(desc);",
        "// Line_Reference 720: \tif (desc->g)",
        "// Line_Reference 744: \tstruct desc_struct *desc;",
        "// Line_Reference 755: \tdesc = get_desc(sel);",
        "// Line_Reference 756: \tif (!desc)",
        "// Line_Reference 764: \tif (!(desc->type & BIT(3)))",
        "// Line_Reference 767: \tswitch ((desc->l << 1) | desc->d) {"
    ]
}
