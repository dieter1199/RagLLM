{
    "cve_id": "CVE-2018-7999",
    "cve_description": "In libgraphite2 in graphite2 1.3.11, a NULL pointer dereference vulnerability was found in Segment.cpp during a dumbRendering operation, which may allow attackers to cause a denial of service or possibly have unspecified other impact via a crafted .ttf file.",
    "cve_publish_date": "2018-03-09",
    "cwe_id": "CWE-476",
    "cwe_name": "NULL Pointer Dereference",
    "cwe_description": "The product dereferences a pointer that it expects to be valid but is NULL.",
    "commit_message": "Deprecate and make ineffective gr_face_dumbRendering",
    "type_of_change": "Modification",
    "filename_of_changes": "GlyphCache.cpp",
    "code_language": "C++",
    "number_of_lines_added_for_mitigation": "44",
    "number_of_lines_deleted_vulnerable_to_cve": "47",
    "vulnerable_lines": [
        "// Line_Reference 87:     Loader(const Face & face, const bool dumb_font);    //return result indicates success. Do not use if failed.",
        "// Line_Reference 118: : _glyph_loader(new Loader(face, bool(face_options & gr_face_dumbRendering))),",
        "// Line_Reference 242: GlyphCache::Loader::Loader(const Face & face, const bool dumb_font)",
        "// Line_Reference 268:     if (!dumb_font)",
        "// Line_Reference 270:         if ((m_pGlat = Face::Table(face, Tag::Glat, 0x00030000)) == NULL",
        "// Line_Reference 271:             || (m_pGloc = Face::Table(face, Tag::Gloc)) == NULL",
        "// Line_Reference 272:             || m_pGloc.size() < 8)",
        "// Line_Reference 273:         {",
        "// Line_Reference 274:             _head = Face::Table();",
        "// Line_Reference 275:             return;",
        "// Line_Reference 276:         }",
        "// Line_Reference 277:         const byte    * p = m_pGloc;",
        "// Line_Reference 278:         int       version = be::read<uint32>(p);",
        "// Line_Reference 279:         const uint16    flags = be::read<uint16>(p);",
        "// Line_Reference 280:         _num_attrs = be::read<uint16>(p);",
        "// Line_Reference 281:         // We can accurately calculate the number of attributed glyphs by",
        "// Line_Reference 282:         //  subtracting the length of the attribids array (numAttribs long if present)",
        "// Line_Reference 283:         //  and dividing by either 2 or 4 depending on shor or lonf format",
        "// Line_Reference 284:         _long_fmt              = flags & 1;",
        "// Line_Reference 285:         int tmpnumgattrs       = (m_pGloc.size()",
        "// Line_Reference 286:                                    - (p - m_pGloc)",
        "// Line_Reference 287:                                    - sizeof(uint16)*(flags & 0x2 ? _num_attrs : 0))",
        "// Line_Reference 288:                                        / (_long_fmt ? sizeof(uint32) : sizeof(uint16)) - 1;",
        "// Line_Reference 289: ",
        "// Line_Reference 290:         if (version >= 0x00020000 || tmpnumgattrs < 0 || tmpnumgattrs > 65535",
        "// Line_Reference 291:             || _num_attrs == 0 || _num_attrs > 0x3000  // is this hard limit appropriate?",
        "// Line_Reference 292:             || _num_glyphs_graphics > tmpnumgattrs",
        "// Line_Reference 293:             || m_pGlat.size() < 4)",
        "// Line_Reference 294:         {",
        "// Line_Reference 295:             _head = Face::Table();",
        "// Line_Reference 296:             return;",
        "// Line_Reference 297:         }",
        "// Line_Reference 299:         _num_glyphs_attributes = static_cast<unsigned short>(tmpnumgattrs);",
        "// Line_Reference 300:         p = m_pGlat;",
        "// Line_Reference 301:         version = be::read<uint32>(p);",
        "// Line_Reference 302:         if (version >= 0x00040000 || (version >= 0x00030000 && m_pGlat.size() < 8))       // reject Glat tables that are too new",
        "// Line_Reference 303:         {",
        "// Line_Reference 304:             _head = Face::Table();",
        "// Line_Reference 305:             return;",
        "// Line_Reference 306:         }",
        "// Line_Reference 307:         else if (version >= 0x00030000)",
        "// Line_Reference 308:         {",
        "// Line_Reference 309:             unsigned int glatflags = be::read<uint32>(p);",
        "// Line_Reference 310:             _has_boxes = glatflags & 1;",
        "// Line_Reference 311:             // delete this once the compiler is fixed",
        "// Line_Reference 312:             _has_boxes = true;",
        "// Line_Reference 313:         }"
    ]
}
