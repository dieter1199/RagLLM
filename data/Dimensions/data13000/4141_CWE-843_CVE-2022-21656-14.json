{
    "cve_id": "CVE-2022-21656",
    "cve_description": "Envoy is an open source edge and service proxy, designed for cloud-native applications. The default_validator.cc implementation used to implement the default certificate validation routines has a \"type confusion\" bug when processing subjectAltNames. This processing allows, for example, an rfc822Name or uniformResourceIndicator to be authenticated as a domain name. This confusion allows for the bypassing of nameConstraints, as processed by the underlying OpenSSL/BoringSSL implementation, exposing the possibility of impersonation of arbitrary servers. As a result Envoy will trust upstream certificates that should not be trusted.",
    "cve_publish_date": "2022-02-22",
    "cwe_id": "CWE-843",
    "cwe_name": "Access of Resource Using Incompatible Type ('Type Confusion')",
    "cwe_description": "The product allocates or initializes a resource such as a pointer, object, or variable using one type, but it later accesses that resource using a type that is incompatible with the original type.",
    "commit_message": "Specify type for matching Subject Alternative Name. (#18628)\n\n\r\nSigned-off-by: Pradeep Rao <pcrao@google.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "spiffe_validator.cc",
    "code_language": "C++",
    "number_of_lines_added_for_mitigation": "12",
    "number_of_lines_deleted_vulnerable_to_cve": "9",
    "vulnerable_lines": [
        "// Line_Reference 40:       subject_alt_name_matchers_.push_back(Matchers::StringMatcherImpl(matcher));",
        "// Line_Reference 227:   // Only match against URI SAN since SPIFFE specification does not restrict values in other SAN",
        "// Line_Reference 228:   // types. See the discussion: https://github.com/envoyproxy/envoy/issues/15392",
        "// Line_Reference 230:     if (general_name->type == GEN_URI) {",
        "// Line_Reference 231:       const std::string san = Utility::generalNameAsString(general_name);",
        "// Line_Reference 232:       for (const auto& config_san_matcher : subject_alt_name_matchers_) {",
        "// Line_Reference 233:         if (config_san_matcher.match(san)) {",
        "// Line_Reference 234:           return true;",
        "// Line_Reference 235:         }"
    ]
}
