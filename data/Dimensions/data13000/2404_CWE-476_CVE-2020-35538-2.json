{
    "cve_id": "CVE-2020-35538",
    "cve_description": "A crafted input file could cause a null pointer dereference in jcopy_sample_rows() when processed by libjpeg-turbo.",
    "cve_publish_date": "2022-08-31",
    "cwe_id": "CWE-476",
    "cwe_name": "NULL Pointer Dereference",
    "cwe_description": "The product dereferences a pointer that it expects to be valid but is NULL.",
    "commit_message": "Fix jpeg_skip_scanlines() segfault w/merged upsamp\n\nThe additional segfault mentioned in #244 was due to the fact that\nthe merged upsamplers use a different private structure than the\nnon-merged upsamplers.  jpeg_skip_scanlines() was assuming the latter, so\nwhen merged upsampling was enabled, jpeg_skip_scanlines() clobbered one\nof the IDCT method pointers in the merged upsampler's private structure.\n\nFor reasons unknown, the test image in #441 did not encounter this\nsegfault (too small?), but it encountered an issue similar to the one\nfixed in 5bc43c7821df982f65aa1c738f67fbf7cba8bd69, whereby it was\nnecessary to set up a dummy postprocessing function in\nread_and_discard_scanlines() when merged upsampling was enabled.\nFailing to do so caused either a segfault in merged_2v_upsample() (due\nto a NULL pointer being passed to jcopy_sample_rows()) or an error\n(\"Corrupt JPEG data: premature end of data segment\"), depending on the\nnumber of scanlines skipped and whether the first scanline skipped was\nan odd- or even-numbered row.\n\nFixes #441\nFixes #244 (for real this time)",
    "type_of_change": "Modification",
    "filename_of_changes": "jdmerge.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "9",
    "number_of_lines_deleted_vulnerable_to_cve": "37",
    "vulnerable_lines": [
        "// Line_Reference 8:  * Copyright (C) 2009, 2011, 2014-2015, D. R. Commander.",
        "// Line_Reference 49: /* Private subobject */",
        "// Line_Reference 50: ",
        "// Line_Reference 51: typedef struct {",
        "// Line_Reference 52:   struct jpeg_upsampler pub;    /* public fields */",
        "// Line_Reference 53: ",
        "// Line_Reference 54:   /* Pointer to routine to do actual upsampling/conversion of one row group */",
        "// Line_Reference 55:   void (*upmethod) (j_decompress_ptr cinfo, JSAMPIMAGE input_buf,",
        "// Line_Reference 56:                     JDIMENSION in_row_group_ctr, JSAMPARRAY output_buf);",
        "// Line_Reference 57: ",
        "// Line_Reference 58:   /* Private state for YCC->RGB conversion */",
        "// Line_Reference 59:   int *Cr_r_tab;                /* => table for Cr to R conversion */",
        "// Line_Reference 60:   int *Cb_b_tab;                /* => table for Cb to B conversion */",
        "// Line_Reference 61:   JLONG *Cr_g_tab;              /* => table for Cr to G conversion */",
        "// Line_Reference 62:   JLONG *Cb_g_tab;              /* => table for Cb to G conversion */",
        "// Line_Reference 63: ",
        "// Line_Reference 64:   /* For 2:1 vertical sampling, we produce two output rows at a time.",
        "// Line_Reference 65:    * We need a \"spare\" row buffer to hold the second output row if the",
        "// Line_Reference 66:    * application provides just a one-row buffer; we also use the spare",
        "// Line_Reference 67:    * to discard the dummy last row if the image height is odd.",
        "// Line_Reference 68:    */",
        "// Line_Reference 69:   JSAMPROW spare_row;",
        "// Line_Reference 70:   boolean spare_full;           /* T if spare buffer is occupied */",
        "// Line_Reference 71: ",
        "// Line_Reference 72:   JDIMENSION out_row_width;     /* samples per output row */",
        "// Line_Reference 73:   JDIMENSION rows_to_go;        /* counts rows remaining in image */",
        "// Line_Reference 74: } my_upsampler;",
        "// Line_Reference 75: ",
        "// Line_Reference 76: typedef my_upsampler *my_upsample_ptr;",
        "// Line_Reference 77: ",
        "// Line_Reference 192:   my_upsample_ptr upsample = (my_upsample_ptr)cinfo->upsample;",
        "// Line_Reference 235:   my_upsample_ptr upsample = (my_upsample_ptr)cinfo->upsample;",
        "// Line_Reference 257:   my_upsample_ptr upsample = (my_upsample_ptr)cinfo->upsample;",
        "// Line_Reference 308:   my_upsample_ptr upsample = (my_upsample_ptr)cinfo->upsample;",
        "// Line_Reference 569:   my_upsample_ptr upsample;",
        "// Line_Reference 571:   upsample = (my_upsample_ptr)",
        "// Line_Reference 573:                                 sizeof(my_upsampler));"
    ]
}
