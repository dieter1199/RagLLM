{
    "cve_id": "CVE-2020-15172",
    "cve_description": "The Act module for Red Discord Bot before commit 6b9f3b86 is vulnerable to Remote Code Execution. With this exploit, Discord users can use specially crafted messages to perform destructive actions and/or access sensitive information. Unloading the Act module with `unload act` can render this exploit inaccessible.",
    "cve_publish_date": "2020-09-15",
    "cwe_id": "CWE-502",
    "cwe_name": "Deserialization of Untrusted Data",
    "cwe_description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
    "commit_message": "[act] don't trigger on disabled cmds",
    "type_of_change": "Modification",
    "filename_of_changes": "act.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "44",
    "number_of_lines_deleted_vulnerable_to_cve": "28",
    "vulnerable_lines": [
        "// Line_Reference 1: import itertools",
        "// Line_Reference 8: from redbot.core import Config, checks, commands",
        "// Line_Reference 29:     def __init__(self, bot):",
        "// Line_Reference 37:     async def initialize(self, bot):",
        "// Line_Reference 46:     async def act(self, ctx, *, target: Union[discord.Member, str] = None):",
        "// Line_Reference 90:             message = message.format(target, user=target)",
        "// Line_Reference 134:     async def actset(self, ctx):",
        "// Line_Reference 142:     async def customize(self, ctx, command: str.lower, *, response: str = None):",
        "// Line_Reference 153:         await ctx.tick()",
        "// Line_Reference 157:     async def customize_global(self, ctx, command: str.lower, *, response: str = None):",
        "// Line_Reference 173:     async def ignore(self, ctx, command: str.lower):",
        "// Line_Reference 192:     async def ignore_global(self, ctx, command: str.lower):",
        "// Line_Reference 208:     async def tenorkey(self, ctx):",
        "// Line_Reference 228:     async def on_message(self, message):",
        "// Line_Reference 229:         if message.author.bot:",
        "// Line_Reference 231: ",
        "// Line_Reference 232:         ctx = await self.bot.get_context(message)",
        "// Line_Reference 233:         if ctx.prefix is None or not ctx.invoked_with.replace(\"_\", \"\").isalpha():",
        "// Line_Reference 235: ",
        "// Line_Reference 236:         if ctx.valid and ctx.command.enabled:",
        "// Line_Reference 237:             try:",
        "// Line_Reference 238:                 if await ctx.command.can_run(ctx):",
        "// Line_Reference 239:                     return",
        "// Line_Reference 240:             except commands.errors.CheckFailure:",
        "// Line_Reference 241:                 return",
        "// Line_Reference 242: ",
        "// Line_Reference 243:         ctx.command = self.act",
        "// Line_Reference 244:         await self.bot.invoke(ctx)"
    ]
}
