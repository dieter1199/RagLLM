{
    "cve_id": "CVE-2020-7765",
    "cve_description": "This affects the package @firebase/util before 0.3.4. This vulnerability relates to the deepExtend function within the DeepCopy.ts file. Depending on if user input is provided, an attacker can overwrite and pollute the object prototype of a program.",
    "cve_publish_date": "2020-11-16",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Prevent __proto__ pollution in util.deepExtend (#4001)\n\n* do not extend __proto__\r\n\r\n* replace asserts with expects\r\n\r\n* Create fuzzy-impalas-brake.md\r\n\r\n* address comment",
    "type_of_change": "Modification",
    "filename_of_changes": "deepCopy.test.ts",
    "code_language": "TypeScript",
    "number_of_lines_added_for_mitigation": "37",
    "number_of_lines_deleted_vulnerable_to_cve": "29",
    "vulnerable_lines": [
        "// Line_Reference 17: import { assert } from 'chai';",
        "// Line_Reference 22:     assert.strictEqual(deepCopy(true), true);",
        "// Line_Reference 23:     assert.strictEqual(deepCopy(123), 123);",
        "// Line_Reference 24:     assert.strictEqual(deepCopy('abc'), 'abc');",
        "// Line_Reference 29:     assert.deepEqual(deepCopy(d), d);",
        "// Line_Reference 33:     assert.deepEqual(deepCopy({}), {});",
        "// Line_Reference 34:     assert.deepEqual(deepCopy({ a: 123 }), { a: 123 });",
        "// Line_Reference 35:     assert.deepEqual(deepCopy({ a: { b: 123 } }), { a: { b: 123 } });",
        "// Line_Reference 39:     assert.deepEqual(deepCopy([]), []);",
        "// Line_Reference 40:     assert.deepEqual(deepCopy([123, 456]), [123, 456]);",
        "// Line_Reference 41:     assert.deepEqual(deepCopy([123, [456]]), [123, [456]]);",
        "// Line_Reference 47:     assert.strictEqual(deepExtend(1, true), true);",
        "// Line_Reference 48:     assert.strictEqual(deepExtend(undefined, 123), 123);",
        "// Line_Reference 49:     assert.strictEqual(deepExtend('was', 'abc'), 'abc');",
        "// Line_Reference 54:     assert.deepEqual(deepExtend(new Date(), d), d);",
        "// Line_Reference 58:     assert.deepEqual(deepExtend({ old: 123 }, {}), { old: 123 });",
        "// Line_Reference 59:     assert.deepEqual(deepExtend({ old: 123 }, { s: 'hello' }), {",
        "// Line_Reference 63:     assert.deepEqual(",
        "// Line_Reference 64:       deepExtend({ old: 123, a: { c: 'in-old' } }, { a: { b: 123 } }),",
        "// Line_Reference 65:       { old: 123, a: { b: 123, c: 'in-old' } }",
        "// Line_Reference 66:     );",
        "// Line_Reference 70:     assert.deepEqual(deepExtend([1], []), []);",
        "// Line_Reference 71:     assert.deepEqual(deepExtend([1], [123, 456]), [123, 456]);",
        "// Line_Reference 72:     assert.deepEqual(deepExtend([1], [123, [456]]), [123, [456]]);",
        "// Line_Reference 79:     assert.deepEqual(deepExtend(o1, o2), { a: [2] });",
        "// Line_Reference 81:     assert.deepEqual(o1, { a: [2] });",
        "// Line_Reference 88:     assert.deepEqual(b, [, , , '3']);",
        "// Line_Reference 103:     assert.deepEqual({ a: source }, target);",
        "// Line_Reference 104:     assert.strictEqual(source, target.a);"
    ]
}
