{
    "cve_id": "CVE-2020-26234",
    "cve_description": "Opencast before versions 8.9 and 7.9 disables HTTPS hostname verification of its HTTP client used for a large portion of Opencast's HTTP requests. Hostname verification is an important part when using HTTPS to ensure that the presented certificate is valid for the host. Disabling it can allow for man-in-the-middle attacks. This problem is fixed in Opencast 7.9 and Opencast 8.8 Please be aware that fixing the problem means that Opencast will not simply accept any self-signed certificates any longer without properly importing them. If you need those, please make sure to import them into the Java key store. Better yet, get a valid certificate.",
    "cve_publish_date": "2020-12-08",
    "cwe_id": "CWE-346",
    "cwe_name": "Origin Validation Error",
    "cwe_description": "The product does not properly verify that the source of data or communication is valid.",
    "commit_message": "Re-Enable Hostname Verification\n\nThis patch is a minimal change to re-enable HTTPS hostname verification\nof Opencast's HTTP client used for a large portion its HTTP requests.\n\nHostname verification is an important part when using HTTPS to ensure\nthat the presented certificate is valid for the host. Disabling it can\nallow for man-in-the-middle attacks.",
    "type_of_change": "Modification",
    "filename_of_changes": "HttpClientImpl.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "1",
    "number_of_lines_deleted_vulnerable_to_cve": "136",
    "vulnerable_lines": [
        "// Line_Reference 30: import org.apache.http.conn.scheme.Scheme;",
        "// Line_Reference 31: import org.apache.http.conn.scheme.SchemeRegistry;",
        "// Line_Reference 32: import org.apache.http.conn.ssl.SSLSocketFactory;",
        "// Line_Reference 33: import org.apache.http.conn.ssl.X509HostnameVerifier;",
        "// Line_Reference 40: import java.security.KeyManagementException;",
        "// Line_Reference 41: import java.security.NoSuchAlgorithmException;",
        "// Line_Reference 42: import java.security.SecureRandom;",
        "// Line_Reference 43: import java.security.cert.CertificateException;",
        "// Line_Reference 44: import java.security.cert.X509Certificate;",
        "// Line_Reference 45: ",
        "// Line_Reference 46: import javax.net.ssl.SSLContext;",
        "// Line_Reference 47: import javax.net.ssl.SSLException;",
        "// Line_Reference 48: import javax.net.ssl.SSLSession;",
        "// Line_Reference 49: import javax.net.ssl.SSLSocket;",
        "// Line_Reference 50: import javax.net.ssl.TrustManager;",
        "// Line_Reference 51: import javax.net.ssl.X509TrustManager;",
        "// Line_Reference 60:   private DefaultHttpClient defaultHttpClient = makeHttpClient();",
        "// Line_Reference 86:   /**",
        "// Line_Reference 87:    * Creates a new client that can deal with all kinds of oddities with regards to http/https connections.",
        "// Line_Reference 88:    *",
        "// Line_Reference 89:    * @return the client",
        "// Line_Reference 90:    */",
        "// Line_Reference 91:   private DefaultHttpClient makeHttpClient() {",
        "// Line_Reference 92: ",
        "// Line_Reference 93:     DefaultHttpClient defaultHttpClient = new DefaultHttpClient();",
        "// Line_Reference 94:     try {",
        "// Line_Reference 95:       logger.debug(\"Installing forgiving hostname verifier and trust managers\");",
        "// Line_Reference 96:       X509TrustManager trustManager = createTrustManager();",
        "// Line_Reference 97:       X509HostnameVerifier hostNameVerifier = createHostNameVerifier();",
        "// Line_Reference 98:       SSLContext sslContext = SSLContext.getInstance(\"TLS\");",
        "// Line_Reference 99:       sslContext.init(null, new TrustManager[] { trustManager }, new SecureRandom());",
        "// Line_Reference 100:       SSLSocketFactory ssf = new SSLSocketFactory(sslContext, hostNameVerifier);",
        "// Line_Reference 101:       ClientConnectionManager ccm = defaultHttpClient.getConnectionManager();",
        "// Line_Reference 102:       SchemeRegistry sr = ccm.getSchemeRegistry();",
        "// Line_Reference 103:       sr.register(new Scheme(\"https\", 443, ssf));",
        "// Line_Reference 104:     } catch (NoSuchAlgorithmException e) {",
        "// Line_Reference 105:       logger.error(\"Error creating context to handle TLS connections: {}\", e.getMessage());",
        "// Line_Reference 106:     } catch (KeyManagementException e) {",
        "// Line_Reference 107:       logger.error(\"Error creating context to handle TLS connections: {}\", e.getMessage());",
        "// Line_Reference 108:     }",
        "// Line_Reference 109: ",
        "// Line_Reference 110:     return defaultHttpClient;",
        "// Line_Reference 111:   }",
        "// Line_Reference 112: ",
        "// Line_Reference 113:   /**",
        "// Line_Reference 114:    * Returns a new trust manager which will be in charge of checking the SSL certificates that are being presented by",
        "// Line_Reference 115:    * SSL enabled hosts.",
        "// Line_Reference 116:    *",
        "// Line_Reference 117:    * @return the trust manager",
        "// Line_Reference 118:    */",
        "// Line_Reference 119:   private X509TrustManager createTrustManager() {",
        "// Line_Reference 120:     X509TrustManager trustManager = new X509TrustManager() {",
        "// Line_Reference 121: ",
        "// Line_Reference 122:       /**",
        "// Line_Reference 123:        * {@InheritDoc}",
        "// Line_Reference 124:        *",
        "// Line_Reference 125:        * @see javax.net.ssl.X509TrustManager#checkClientTrusted(java.security.cert.X509Certificate[], java.lang.String)",
        "// Line_Reference 126:        */",
        "// Line_Reference 127:       public void checkClientTrusted(X509Certificate[] xcs, String string) throws CertificateException {",
        "// Line_Reference 128:         logger.trace(\"Skipping trust check on client certificate {}\", string);",
        "// Line_Reference 129:       }",
        "// Line_Reference 130: ",
        "// Line_Reference 131:       /**",
        "// Line_Reference 132:        * {@InheritDoc}",
        "// Line_Reference 133:        *",
        "// Line_Reference 134:        * @see javax.net.ssl.X509TrustManager#checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String)",
        "// Line_Reference 135:        */",
        "// Line_Reference 136:       public void checkServerTrusted(X509Certificate[] xcs, String string) throws CertificateException {",
        "// Line_Reference 137:         logger.trace(\"Skipping trust check on server certificate {}\", string);",
        "// Line_Reference 138:       }",
        "// Line_Reference 139: ",
        "// Line_Reference 140:       /**",
        "// Line_Reference 141:        * {@InheritDoc}",
        "// Line_Reference 142:        *",
        "// Line_Reference 143:        * @see javax.net.ssl.X509TrustManager#getAcceptedIssuers()",
        "// Line_Reference 144:        */",
        "// Line_Reference 145:       public X509Certificate[] getAcceptedIssuers() {",
        "// Line_Reference 146:         logger.trace(\"Returning empty list of accepted issuers\");",
        "// Line_Reference 147:         return null;",
        "// Line_Reference 148:       }",
        "// Line_Reference 149: ",
        "// Line_Reference 150:     };",
        "// Line_Reference 151: ",
        "// Line_Reference 152:     return trustManager;",
        "// Line_Reference 153:   }",
        "// Line_Reference 154: ",
        "// Line_Reference 155:   /**",
        "// Line_Reference 156:    * Creates a host name verifier that will make sure the SSL host's name matches the name in the SSL certificate.",
        "// Line_Reference 157:    *",
        "// Line_Reference 158:    * @return the host name verifier",
        "// Line_Reference 159:    */",
        "// Line_Reference 160:   private X509HostnameVerifier createHostNameVerifier() {",
        "// Line_Reference 161:     X509HostnameVerifier verifier = new X509HostnameVerifier() {",
        "// Line_Reference 162: ",
        "// Line_Reference 163:       /**",
        "// Line_Reference 164:        * {@InheritDoc}",
        "// Line_Reference 165:        *",
        "// Line_Reference 166:        * @see org.apache.http.conn.ssl.X509HostnameVerifier#verify(java.lang.String, javax.net.ssl.SSLSocket)",
        "// Line_Reference 167:        */",
        "// Line_Reference 168:       public void verify(String host, SSLSocket ssl) throws IOException {",
        "// Line_Reference 169:         logger.trace(\"Skipping SSL host name check on {}\", host);",
        "// Line_Reference 170:       }",
        "// Line_Reference 171: ",
        "// Line_Reference 172:       /**",
        "// Line_Reference 173:        * {@InheritDoc}",
        "// Line_Reference 174:        *",
        "// Line_Reference 175:        * @see org.apache.http.conn.ssl.X509HostnameVerifier#verify(java.lang.String, java.security.cert.X509Certificate)",
        "// Line_Reference 176:        */",
        "// Line_Reference 177:       public void verify(String host, X509Certificate xc) throws SSLException {",
        "// Line_Reference 178:         logger.trace(\"Skipping X509 certificate host name check on {}\", host);",
        "// Line_Reference 179:       }",
        "// Line_Reference 180: ",
        "// Line_Reference 181:       /**",
        "// Line_Reference 182:        * {@InheritDoc}",
        "// Line_Reference 183:        *",
        "// Line_Reference 184:        * @see org.apache.http.conn.ssl.X509HostnameVerifier#verify(java.lang.String, java.lang.String[],",
        "// Line_Reference 185:        *      java.lang.String[])",
        "// Line_Reference 186:        */",
        "// Line_Reference 187:       public void verify(String host, String[] cns, String[] subjectAlts) throws SSLException {",
        "// Line_Reference 188:         logger.trace(\"Skipping DNS host name check on {}\", host);",
        "// Line_Reference 189:       }",
        "// Line_Reference 190: ",
        "// Line_Reference 191:       /**",
        "// Line_Reference 192:        * {@InheritDoc}",
        "// Line_Reference 193:        *",
        "// Line_Reference 194:        * @see javax.net.ssl.HostnameVerifier#verify(java.lang.String, javax.net.ssl.SSLSession)",
        "// Line_Reference 195:        */",
        "// Line_Reference 196:       public boolean verify(String host, SSLSession ssl) {",
        "// Line_Reference 197:         logger.trace(\"Skipping SSL session host name check on {}\", host);",
        "// Line_Reference 198:         return true;",
        "// Line_Reference 199:       }",
        "// Line_Reference 200:     };",
        "// Line_Reference 201: ",
        "// Line_Reference 202:     return verifier;",
        "// Line_Reference 203:   }",
        "// Line_Reference 204: "
    ]
}
