{
    "cve_id": "CVE-2017-13019",
    "cve_description": "The PGM parser in tcpdump before 4.9.2 has a buffer over-read in print-pgm.c:pgm_print().",
    "cve_publish_date": "2017-09-14",
    "cwe_id": "CWE-125",
    "cwe_name": "Out-of-bounds Read",
    "cwe_description": "The product reads data past the end, or before the beginning, of the intended buffer.",
    "commit_message": "CVE-2017-13019: Clean up PGM option processing.\n\nAdd #defines for option lengths or the lengths of the fixed-length part\nof the option.  Sometimes those #defines differ from what was there\nbefore; what was there before was wrong, probably because the option\nlengths given in RFC 3208 were sometimes wrong - some lengths included\nthe length of the option header, some lengths didn't.\n\nDon't use \"sizeof(uintXX_t)\" for sizes in the packet, just use the\nnumber of bytes directly.\n\nFor the options that include an IPv4 or IPv6 address, check the option\nlength against the length of what precedes the address before fetching\nany of that data.\n\nThis fixes a buffer over-read discovered by Bhargava Shastry,\nSecT/TU Berlin.\n\nAdd a test using the capture file supplied by the reporter(s), modified\nso the capture file won't be rejected as an invalid capture.",
    "type_of_change": "Modification",
    "filename_of_changes": "print-pgm.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "130",
    "number_of_lines_deleted_vulnerable_to_cve": "80",
    "vulnerable_lines": [
        "// Line_Reference 482: \t\t    if (opt_len != 4) {",
        "// Line_Reference 483: \t\t\tND_PRINT((ndo, \"[Bad OPT_LENGTH option, length %u != 4]\", opt_len));",
        "// Line_Reference 487: \t\t    bp += sizeof(uint16_t);",
        "// Line_Reference 488: \t\t    opts_len -= 4;",
        "// Line_Reference 492: \t\t    if (opt_len != 16) {",
        "// Line_Reference 493: \t\t\tND_PRINT((ndo, \"[Bad OPT_FRAGMENT option, length %u != 16]\", opt_len));",
        "// Line_Reference 498: \t\t    bp += sizeof(uint32_t);",
        "// Line_Reference 500: \t\t    bp += sizeof(uint32_t);",
        "// Line_Reference 502: \t\t    bp += sizeof(uint32_t);",
        "// Line_Reference 504: \t\t    opts_len -= 16;",
        "// Line_Reference 509: \t\t    opt_len -= sizeof(uint32_t);\t/* option header */",
        "// Line_Reference 512: \t\t\tif (opt_len < sizeof(uint32_t)) {",
        "// Line_Reference 516: \t\t\tND_TCHECK2(*bp, sizeof(uint32_t));",
        "// Line_Reference 518: \t\t\tbp += sizeof(uint32_t);",
        "// Line_Reference 519: \t\t\topt_len -= sizeof(uint32_t);",
        "// Line_Reference 520: \t\t\topts_len -= sizeof(uint32_t);",
        "// Line_Reference 525: \t\t    if (opt_len != 8) {",
        "// Line_Reference 526: \t\t\tND_PRINT((ndo, \"[Bad OPT_JOIN option, length %u != 8]\", opt_len));",
        "// Line_Reference 531: \t\t    bp += sizeof(uint32_t);",
        "// Line_Reference 533: \t\t    opts_len -= 8;",
        "// Line_Reference 537: \t\t    if (opt_len != 12) {",
        "// Line_Reference 538: \t\t\tND_PRINT((ndo, \"[Bad OPT_NAK_BO_IVL option, length %u != 12]\", opt_len));",
        "// Line_Reference 543: \t\t    bp += sizeof(uint32_t);",
        "// Line_Reference 545: \t\t    bp += sizeof(uint32_t);",
        "// Line_Reference 547: \t\t    opts_len -= 12;",
        "// Line_Reference 551: \t\t    if (opt_len != 12) {",
        "// Line_Reference 552: \t\t\tND_PRINT((ndo, \"[Bad OPT_NAK_BO_RNG option, length %u != 12]\", opt_len));",
        "// Line_Reference 557: \t\t    bp += sizeof(uint32_t);",
        "// Line_Reference 559: \t\t    bp += sizeof(uint32_t);",
        "// Line_Reference 561: \t\t    opts_len -= 12;",
        "// Line_Reference 567: \t\t    bp += (2 * sizeof(uint16_t));",
        "// Line_Reference 570: \t\t\tif (opt_len != 4 + sizeof(struct in_addr)) {",
        "// Line_Reference 571: \t\t\t    ND_PRINT((ndo, \"[Bad OPT_REDIRECT option, length %u != 4 + address size]\", opt_len));",
        "// Line_Reference 577: \t\t\topts_len -= 4 + sizeof(struct in_addr);",
        "// Line_Reference 580: \t\t\tif (opt_len != 4 + sizeof(struct in6_addr)) {",
        "// Line_Reference 581: \t\t\t    ND_PRINT((ndo, \"[Bad OPT_REDIRECT option, length %u != 4 + address size]\", opt_len));",
        "// Line_Reference 587: \t\t\topts_len -= 4 + sizeof(struct in6_addr);",
        "// Line_Reference 598: \t\t    if (opt_len != 8) {",
        "// Line_Reference 599: \t\t\tND_PRINT((ndo, \"[Bad OPT_PARITY_PRM option, length %u != 8]\", opt_len));",
        "// Line_Reference 604: \t\t    bp += sizeof(uint32_t);",
        "// Line_Reference 606: \t\t    opts_len -= 8;",
        "// Line_Reference 610: \t\t    if (opt_len != 8) {",
        "// Line_Reference 611: \t\t\tND_PRINT((ndo, \"[Bad OPT_PARITY_GRP option, length %u != 8]\", opt_len));",
        "// Line_Reference 616: \t\t    bp += sizeof(uint32_t);",
        "// Line_Reference 618: \t\t    opts_len -= 8;",
        "// Line_Reference 622: \t\t    if (opt_len != 8) {",
        "// Line_Reference 623: \t\t\tND_PRINT((ndo, \"[Bad OPT_CURR_TGSIZE option, length %u != 8]\", opt_len));",
        "// Line_Reference 628: \t\t    bp += sizeof(uint32_t);",
        "// Line_Reference 630: \t\t    opts_len -= 8;",
        "// Line_Reference 634: \t\t    if (opt_len != 4) {",
        "// Line_Reference 635: \t\t\tND_PRINT((ndo, \"[Bad OPT_NBR_UNREACH option, length %u != 4]\", opt_len));",
        "// Line_Reference 640: \t\t    opts_len -= 4;",
        "// Line_Reference 650: \t\t    if (opt_len != 4) {",
        "// Line_Reference 651: \t\t\tND_PRINT((ndo, \"[Bad OPT_SYN option, length %u != 4]\", opt_len));",
        "// Line_Reference 656: \t\t    opts_len -= 4;",
        "// Line_Reference 660: \t\t    if (opt_len != 4) {",
        "// Line_Reference 661: \t\t\tND_PRINT((ndo, \"[Bad OPT_FIN option, length %u != 4]\", opt_len));",
        "// Line_Reference 666: \t\t    opts_len -= 4;",
        "// Line_Reference 670: \t\t    if (opt_len != 4) {",
        "// Line_Reference 671: \t\t\tND_PRINT((ndo, \"[Bad OPT_RST option, length %u != 4]\", opt_len));",
        "// Line_Reference 676: \t\t    opts_len -= 4;",
        "// Line_Reference 686: \t\t    if (opt_len != 4) {",
        "// Line_Reference 687: \t\t\tND_PRINT((ndo, \"[Bad OPT_CRQST option, length %u != 4]\", opt_len));",
        "// Line_Reference 692: \t\t    opts_len -= 4;",
        "// Line_Reference 698: \t\t    bp += sizeof(uint32_t);",
        "// Line_Reference 700: \t\t    bp += (2 * sizeof(uint16_t));",
        "// Line_Reference 703: \t\t\tif (opt_len != 12 + sizeof(struct in_addr)) {",
        "// Line_Reference 704: \t\t\t    ND_PRINT((ndo, \"[Bad OPT_PGMCC_DATA option, length %u != 12 + address size]\", opt_len));",
        "// Line_Reference 710: \t\t\topts_len -= 12 + sizeof(struct in_addr);",
        "// Line_Reference 713: \t\t\tif (opt_len != 12 + sizeof(struct in6_addr)) {",
        "// Line_Reference 714: \t\t\t    ND_PRINT((ndo, \"[Bad OPT_PGMCC_DATA option, length %u != 12 + address size]\", opt_len));",
        "// Line_Reference 720: \t\t\topts_len -= 12 + sizeof(struct in6_addr);",
        "// Line_Reference 733: \t\t    bp += sizeof(uint32_t);",
        "// Line_Reference 735: \t\t    bp += (2 * sizeof(uint16_t));",
        "// Line_Reference 738: \t\t\tif (opt_len != 12 + sizeof(struct in_addr)) {",
        "// Line_Reference 739: \t\t\t    ND_PRINT((ndo, \"[Bad OPT_PGMCC_DATA option, length %u != 12 + address size]\", opt_len));",
        "// Line_Reference 745: \t\t\topts_len -= 12 + sizeof(struct in_addr);",
        "// Line_Reference 748: \t\t\tif (opt_len != 12 + sizeof(struct in6_addr)) {",
        "// Line_Reference 749: \t\t\t    ND_PRINT((ndo, \"[Bad OPT_PGMCC_DATA option, length %u != 12 + address size]\", opt_len));",
        "// Line_Reference 755: \t\t\topts_len -= 12 + sizeof(struct in6_addr);"
    ]
}
