{
    "cve_id": "CVE-2022-38266",
    "cve_description": "An issue in the Leptonica linked library (v1.79.0) allows attackers to cause an arithmetic exception leading to a Denial of Service (DoS) via a crafted JPEG file.",
    "cve_publish_date": "2022-09-09",
    "cwe_id": "CWE-369",
    "cwe_name": "Divide By Zero",
    "cwe_description": "The product divides a value by zero.",
    "commit_message": "Issue 26393: morphapp_fuzzer: Divide-by-zero in blockconvLow\n* Removed the code that allowed divide by zero for tiny pix\n* Ditto for 4 other block convolution functions.",
    "type_of_change": "Modification",
    "filename_of_changes": "convolve.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "40",
    "number_of_lines_deleted_vulnerable_to_cve": "50",
    "vulnerable_lines": [
        "// Line_Reference 117:  * \\param[in]    pix 8    or 32 bpp; or 2, 4 or 8 bpp with colormap",
        "// Line_Reference 125:  *      (2) Returns a copy if both wc and hc are 0",
        "// Line_Reference 127:  *          where (w,h) are the dimensions of pixs.",
        "// Line_Reference 142:     if (wc < 0) wc = 0;",
        "// Line_Reference 143:     if (hc < 0) hc = 0;",
        "// Line_Reference 146:         wc = L_MIN(wc, (w - 1) / 2);",
        "// Line_Reference 147:         hc = L_MIN(hc, (h - 1) / 2);",
        "// Line_Reference 148:         L_WARNING(\"kernel too large; reducing!\\n\", procName);",
        "// Line_Reference 149:         L_INFO(\"wc = %d, hc = %d\\n\", procName, wc, hc);",
        "// Line_Reference 151:     if (wc == 0 && hc == 0)   /* no-op */",
        "// Line_Reference 152:         return pixCopy(NULL, pix);",
        "// Line_Reference 208:  *      (3) Returns a copy if both wc and hc are 0.",
        "// Line_Reference 210:  *          where (w,h) are the dimensions of pixs.",
        "// Line_Reference 230:     if (wc < 0) wc = 0;",
        "// Line_Reference 231:     if (hc < 0) hc = 0;",
        "// Line_Reference 232:     if (wc == 0 && hc == 0)   /* no-op */",
        "// Line_Reference 235:         L_WARNING(\"kernel too large; returning a copy\\n\", procName);",
        "// Line_Reference 236:         L_INFO(\"w = %d, wc = %d, h = %d, hc = %d\\n\", procName, w, wc, h, hc);",
        "// Line_Reference 615:  *      (3) Returns a copy if both wc and hc are 0.",
        "// Line_Reference 653:     if (wc < 0) wc = 0;",
        "// Line_Reference 654:     if (hc < 0) hc = 0;",
        "// Line_Reference 656:         wc = L_MIN(wc, (w - 1) / 2);",
        "// Line_Reference 657:         hc = L_MIN(hc, (h - 1) / 2);",
        "// Line_Reference 658:         L_WARNING(\"kernel too large; reducing!\\n\", procName);",
        "// Line_Reference 659:         L_INFO(\"wc = %d, hc = %d\\n\", procName, wc, hc);",
        "// Line_Reference 660:     }",
        "// Line_Reference 661:     if (wc == 0 && hc == 0)   /* no-op */",
        "// Line_Reference 710:  *      (2) Returns a copy if both wc and hc are 0",
        "// Line_Reference 712:  *          where (w,h) are the dimensions of pixs.",
        "// Line_Reference 744:     if (wc < 0) wc = 0;",
        "// Line_Reference 745:     if (hc < 0) hc = 0;",
        "// Line_Reference 746:     pixGetDimensions(pix, &w, &h, &d);",
        "// Line_Reference 747:     if (w < 2 * wc + 3 || h < 2 * hc + 3) {",
        "// Line_Reference 748:         wc = L_MAX(0, L_MIN(wc, (w - 3) / 2));",
        "// Line_Reference 749:         hc = L_MAX(0, L_MIN(hc, (h - 3) / 2));",
        "// Line_Reference 750:         L_WARNING(\"kernel too large; reducing!\\n\", procName);",
        "// Line_Reference 751:         L_INFO(\"wc = %d, hc = %d\\n\", procName, wc, hc);",
        "// Line_Reference 752:     }",
        "// Line_Reference 753:     if (wc == 0 && hc == 0)   /* no-op */",
        "// Line_Reference 849:  *      (3) Returns a copy if both wc and hc are 0",
        "// Line_Reference 850:  *      (4) Require that w > 2 * wc + 1 and h > 2 * hc + 1,",
        "// Line_Reference 851:  *          where (w,h) are the dimensions of pixs.",
        "// Line_Reference 873:     if (wc < 0) wc = 0;",
        "// Line_Reference 874:     if (hc < 0) hc = 0;",
        "// Line_Reference 876:         wc = L_MAX(0, L_MIN(wc, (w - 3) / 2));",
        "// Line_Reference 877:         hc = L_MAX(0, L_MIN(hc, (h - 3) / 2));",
        "// Line_Reference 878:         L_WARNING(\"kernel too large; reducing!\\n\", procName);",
        "// Line_Reference 879:         L_INFO(\"wc = %d, hc = %d\\n\", procName, wc, hc);",
        "// Line_Reference 880:     }",
        "// Line_Reference 881:     if (wc == 0 && hc == 0)"
    ]
}
