{
    "cve_id": "CVE-2020-6836",
    "cve_description": "grammar-parser.jison in the hot-formula-parser package before 3.0.1 for Node.js is vulnerable to arbitrary code injection. The package fails to sanitize values passed to the parse function and concatenates them in an eval call. If a value of the formula is taken from user-controlled input, it may allow attackers to run arbitrary commands on the server.",
    "cve_publish_date": "2020-01-11",
    "cwe_id": "CWE-94",
    "cwe_name": "Improper Control of Generation of Code ('Code Injection')",
    "cwe_description": "The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.",
    "commit_message": "Remove usage of the 'eval' function (#58)\n\n* Remove usage of the 'eval' function\r\n* Update formulajs module",
    "type_of_change": "Modification",
    "filename_of_changes": "grammar-parser.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "17",
    "number_of_lines_deleted_vulnerable_to_cve": "29",
    "vulnerable_lines": [
        "// Line_Reference 1: /* parser generated by jison 0.4.17 */",
        "// Line_Reference 76: var parser = {trace: function trace() { },",
        "// Line_Reference 225:       var result = [];",
        "// Line_Reference 226:       var arr = eval(\"[\" + yytext + \"]\");",
        "// Line_Reference 227: ",
        "// Line_Reference 228:       arr.forEach(function(item) {",
        "// Line_Reference 229:         result.push(item);",
        "// Line_Reference 230:       });",
        "// Line_Reference 231: ",
        "// Line_Reference 232:       this.$ = result;",
        "// Line_Reference 271: parseError: function parseError(str, hash) {",
        "// Line_Reference 275:         function _parseError (msg, hash) {",
        "// Line_Reference 276:             this.message = msg;",
        "// Line_Reference 277:             this.hash = hash;",
        "// Line_Reference 278:         }",
        "// Line_Reference 279:         _parseError.prototype = Error;",
        "// Line_Reference 280: ",
        "// Line_Reference 281:         throw new _parseError(str, hash);",
        "// Line_Reference 284: parse: function parse(input) {",
        "// Line_Reference 663: test_match:function (match, indexed_rule) {",
        "// Line_Reference 793: lex:function lex() {",
        "// Line_Reference 803: begin:function begin(condition) {",
        "// Line_Reference 808: popState:function popState() {",
        "// Line_Reference 818: _currentRules:function _currentRules() {",
        "// Line_Reference 827: topState:function topState(n) {",
        "// Line_Reference 837: pushState:function pushState(condition) {",
        "// Line_Reference 943: if (typeof module !== 'undefined' && require.main === module) {",
        "// Line_Reference 944:   exports.main(process.argv.slice(1));",
        "// Line_Reference 945: }"
    ]
}
