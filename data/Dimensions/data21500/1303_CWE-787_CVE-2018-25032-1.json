{
    "cve_id": "CVE-2018-25032",
    "cve_description": "zlib before 1.2.12 allows memory corruption when deflating (i.e., when compressing) if the input has many distant matches.",
    "cve_publish_date": "2022-03-25",
    "cwe_id": "CWE-787",
    "cwe_name": "Out-of-bounds Write",
    "cwe_description": "The product writes data past the end, or before the beginning, of the intended buffer.",
    "commit_message": "Fix a bug that can crash deflate on some input when using Z_FIXED.\n\nThis bug was reported by Danilo Ramos of Eideticom, Inc. It has\nlain in wait 13 years before being found! The bug was introduced\nin zlib 1.2.2.2, with the addition of the Z_FIXED option. That\noption forces the use of fixed Huffman codes. For rare inputs with\na large number of distant matches, the pending buffer into which\nthe compressed data is written can overwrite the distance symbol\ntable which it overlays. That results in corrupted output due to\ninvalid distances, and can result in out-of-bound accesses,\ncrashing the application.\n\nThe fix here combines the distance buffer and literal/length\nbuffers into a single symbol buffer. Now three bytes of pending\nbuffer space are opened up for each literal or length/distance\npair consumed, instead of the previous two bytes. This assures\nthat the pending buffer cannot overwrite the symbol table, since\nthe maximum fixed code compressed length/distance is 31 bits, and\nsince there are four bytes of pending space for every three bytes\nof symbol space.",
    "type_of_change": "Modification",
    "filename_of_changes": "deflate.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "54",
    "number_of_lines_deleted_vulnerable_to_cve": "20",
    "vulnerable_lines": [
        "// Line_Reference 258:     ushf *overlay;",
        "// Line_Reference 259:     /* We overlay pending_buf and d_buf+l_buf. This works since the average",
        "// Line_Reference 260:      * output size for (length,distance) codes is <= 24 bits.",
        "// Line_Reference 261:      */",
        "// Line_Reference 262: ",
        "// Line_Reference 332:     overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);",
        "// Line_Reference 333:     s->pending_buf = (uchf *) overlay;",
        "// Line_Reference 334:     s->pending_buf_size = (ulg)s->lit_bufsize * (sizeof(ush)+2L);",
        "// Line_Reference 343:     s->d_buf = overlay + s->lit_bufsize/sizeof(ush);",
        "// Line_Reference 344:     s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;",
        "// Line_Reference 555:     if ((Bytef *)(s->d_buf) < s->pending_out + ((Buf_size + 7) >> 3))",
        "// Line_Reference 1116:     ushf *overlay;",
        "// Line_Reference 1136:     overlay = (ushf *) ZALLOC(dest, ds->lit_bufsize, sizeof(ush)+2);",
        "// Line_Reference 1137:     ds->pending_buf = (uchf *) overlay;",
        "// Line_Reference 1151:     ds->d_buf = overlay + ds->lit_bufsize/sizeof(ush);",
        "// Line_Reference 1152:     ds->l_buf = ds->pending_buf + (1+sizeof(ush))*ds->lit_bufsize;",
        "// Line_Reference 1928:     if (s->last_lit)",
        "// Line_Reference 2059:     if (s->last_lit)",
        "// Line_Reference 2134:     if (s->last_lit)",
        "// Line_Reference 2173:     if (s->last_lit)"
    ]
}
