{
    "cve_id": "CVE-2014-2038",
    "cve_description": "The nfs_can_extend_write function in fs/nfs/write.c in the Linux kernel before 3.13.3 relies on a write delegation to extend a write operation without a certain up-to-date verification, which allows local users to obtain sensitive information from kernel memory in opportunistic circumstances by writing to a file in an NFS filesystem and then reading the same file.",
    "cve_publish_date": "2014-02-28",
    "cwe_id": "CWE-200",
    "cwe_name": "Exposure of Sensitive Information to an Unauthorized Actor",
    "cwe_description": "The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.",
    "commit_message": "nfs: always make sure page is up-to-date before extending a write to cover the entire page\n\nWe should always make sure the cached page is up-to-date when we're\ndetermining whether we can extend a write to cover the full page -- even\nif we've received a write delegation from the server.\n\nCommit c7559663 added logic to skip this check if we have a write\ndelegation, which can lead to data corruption such as the following\nscenario if client B receives a write delegation from the NFS server:\n\nClient A:\n    # echo 123456789 > /mnt/file\n\nClient B:\n    # echo abcdefghi >> /mnt/file\n    # cat /mnt/file\n    0�D0�abcdefghi\n\nJust because we hold a write delegation doesn't mean that we've read in\nthe entire page contents.\n\nCc: <stable@vger.kernel.org> # v3.11+\nSigned-off-by: Scott Mayhew <smayhew@redhat.com>\nSigned-off-by: Trond Myklebust <trond.myklebust@primarydata.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "write.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "6",
    "number_of_lines_deleted_vulnerable_to_cve": "5",
    "vulnerable_lines": [
        "// Line_Reference 925:  * If the file is opened for synchronous writes or if we have a write delegation",
        "// Line_Reference 926:  * from the server then we can just skip the rest of the checks.",
        "// Line_Reference 934: \tif (nfs_write_pageuptodate(page, inode) && (inode->i_flock == NULL ||",
        "// Line_Reference 935: \t\t\t(inode->i_flock->fl_start == 0 &&",
        "// Line_Reference 937: \t\t\tinode->i_flock->fl_type != F_RDLCK)))"
    ]
}
