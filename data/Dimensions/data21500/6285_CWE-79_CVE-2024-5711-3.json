{
    "cve_id": "CVE-2024-5711",
    "cve_description": "A stored Cross-Site Scripting (XSS) vulnerability exists in the stitionai/devika chat feature, allowing attackers to inject malicious payloads into the chat input. This vulnerability is due to the lack of input validation and sanitization on both the frontend and backend components of the application. Specifically, the application fails to sanitize user input in the chat feature, leading to the execution of arbitrary JavaScript code in the context of the user's browser session. This issue affects all versions of the application. The impact of this vulnerability includes the potential for stolen credentials, extraction of sensitive information from chat logs, projects, and other data accessible through the application.",
    "cve_publish_date": "2024-07-08",
    "cwe_id": "CWE-79",
    "cwe_name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
    "cwe_description": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
    "commit_message": "Fix: Sanitizing HTML inputs and Cors misconfiguration",
    "type_of_change": "Modification",
    "filename_of_changes": "state.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "1",
    "number_of_lines_deleted_vulnerable_to_cve": "25",
    "vulnerable_lines": [
        "// Line_Reference 177: ",
        "// Line_Reference 178:     def get_project_files(self, project_name: str):",
        "// Line_Reference 179:         if not project_name:",
        "// Line_Reference 180:             return []",
        "// Line_Reference 181:         project_directory = \"-\".join(project_name.split(\" \"))",
        "// Line_Reference 182:         directory = os.path.join(os.getcwd(), 'data', 'projects', project_directory)",
        "// Line_Reference 183:         if(not os.path.exists(directory)):",
        "// Line_Reference 184:             return []",
        "// Line_Reference 185:         files = []",
        "// Line_Reference 186:         for root, _, filenames in os.walk(directory):",
        "// Line_Reference 187:             for filename in filenames:",
        "// Line_Reference 188:                 file_relative_path = os.path.relpath(root, directory)",
        "// Line_Reference 189:                 if file_relative_path == '.': file_relative_path = ''",
        "// Line_Reference 190:                 file_path = os.path.join(file_relative_path, filename)",
        "// Line_Reference 191:                 print(\"file_path\",file_path)",
        "// Line_Reference 192:                 try:",
        "// Line_Reference 193:                     with open(os.path.join(root, filename), 'r') as file:",
        "// Line_Reference 194:                         print(\"File:\", filename)",
        "// Line_Reference 195:                         files.append({",
        "// Line_Reference 196:                             \"file\": file_path,",
        "// Line_Reference 197:                             \"code\": file.read()",
        "// Line_Reference 198:                         })",
        "// Line_Reference 199:                 except Exception as e:",
        "// Line_Reference 200:                     print(f\"Error reading file {filename}: {e}\")",
        "// Line_Reference 201:         return files"
    ]
}
