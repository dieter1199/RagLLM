{
    "cve_id": "CVE-2024-5206",
    "cve_description": "A sensitive data leakage vulnerability was identified in scikit-learn's TfidfVectorizer, specifically in versions up to and including 1.4.1.post1, which was fixed in version 1.5.0. The vulnerability arises from the unexpected storage of all tokens present in the training data within the `stop_words_` attribute, rather than only storing the subset of tokens required for the TF-IDF technique to function. This behavior leads to the potential leakage of sensitive information, as the `stop_words_` attribute could contain tokens that were meant to be discarded and not stored, such as passwords or keys. The impact of this vulnerability varies based on the nature of the data being processed by the vectorizer.",
    "cve_publish_date": "2024-06-06",
    "cwe_id": "CWE-921",
    "cwe_name": "Storage of Sensitive Data in a Mechanism without Access Control",
    "cwe_description": "The product stores sensitive information in a file system or device that does not have built-in access control.",
    "commit_message": "FIX remove the computed stop_words_ attribute of text vectorizer (#28823)",
    "type_of_change": "Modification",
    "filename_of_changes": "test_text.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "0",
    "number_of_lines_deleted_vulnerable_to_cve": "42",
    "vulnerable_lines": [
        "// Line_Reference 759:     expected_stop_words = {",
        "// Line_Reference 760:         \"celeri\",",
        "// Line_Reference 761:         \"tomato\",",
        "// Line_Reference 762:         \"copyright\",",
        "// Line_Reference 763:         \"coke\",",
        "// Line_Reference 764:         \"sparkling\",",
        "// Line_Reference 765:         \"water\",",
        "// Line_Reference 766:         \"the\",",
        "// Line_Reference 767:     }",
        "// Line_Reference 773:     assert vectorizer.stop_words_ == expected_stop_words",
        "// Line_Reference 808:     assert len(vect.stop_words_) == 0",
        "// Line_Reference 814:     assert \"a\" in vect.stop_words_",
        "// Line_Reference 815:     assert len(vect.stop_words_) == 2",
        "// Line_Reference 821:     assert \"a\" in vect.stop_words_",
        "// Line_Reference 822:     assert len(vect.stop_words_) == 2",
        "// Line_Reference 831:     assert len(vect.stop_words_) == 0",
        "// Line_Reference 837:     assert \"c\" in vect.stop_words_",
        "// Line_Reference 838:     assert len(vect.stop_words_) == 4",
        "// Line_Reference 844:     assert \"c\" in vect.stop_words_",
        "// Line_Reference 845:     assert len(vect.stop_words_) == 5",
        "// Line_Reference 1158: def test_stop_words_removal():",
        "// Line_Reference 1159:     # Ensure that deleting the stop_words_ attribute doesn't affect transform",
        "// Line_Reference 1160: ",
        "// Line_Reference 1161:     fitted_vectorizers = (",
        "// Line_Reference 1162:         TfidfVectorizer().fit(JUNK_FOOD_DOCS),",
        "// Line_Reference 1163:         CountVectorizer(preprocessor=strip_tags).fit(JUNK_FOOD_DOCS),",
        "// Line_Reference 1164:         CountVectorizer(strip_accents=strip_eacute).fit(JUNK_FOOD_DOCS),",
        "// Line_Reference 1165:     )",
        "// Line_Reference 1166: ",
        "// Line_Reference 1167:     for vect in fitted_vectorizers:",
        "// Line_Reference 1168:         vect_transform = vect.transform(JUNK_FOOD_DOCS).toarray()",
        "// Line_Reference 1169: ",
        "// Line_Reference 1170:         vect.stop_words_ = None",
        "// Line_Reference 1171:         stop_None_transform = vect.transform(JUNK_FOOD_DOCS).toarray()",
        "// Line_Reference 1172: ",
        "// Line_Reference 1173:         delattr(vect, \"stop_words_\")",
        "// Line_Reference 1174:         stop_del_transform = vect.transform(JUNK_FOOD_DOCS).toarray()",
        "// Line_Reference 1175: ",
        "// Line_Reference 1176:         assert_array_equal(stop_None_transform, vect_transform)",
        "// Line_Reference 1177:         assert_array_equal(stop_del_transform, vect_transform)",
        "// Line_Reference 1178: ",
        "// Line_Reference 1179: "
    ]
}
