{
    "cve_id": "CVE-2012-3447",
    "cve_description": "virt/disk/api.py in OpenStack Compute (Nova) 2012.1.x before 2012.1.2 and Folsom before Folsom-3 allows remote authenticated users to overwrite arbitrary files via a symlink attack on a file in an image that uses a symlink that is only readable by root.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2012-3361.",
    "cve_publish_date": "2012-08-20",
    "cwe_id": "CWE-264",
    "cwe_name": "Permissions, Privileges, and Access Controls",
    "cwe_description": "Weaknesses in this category are related to the management of permissions, privileges, and other security features that are used to perform access control.",
    "commit_message": "Prohibit file injection writing to host filesystem\n\nThis is a refinement of the previous fix in commit 2427d4a9,\nwhich does the file name canonicalization as the root user.\nThis is required so that guest images could not for example,\nprotect malicious symlinks in a directory only readable by root.\n\nFixes bug: 1031311, CVE-2012-3447\nChange-Id: I7f7cdeeffadebae7451e1e13f73f1313a7df9c5c",
    "type_of_change": "Modification",
    "filename_of_changes": "test_virt.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "29",
    "number_of_lines_deleted_vulnerable_to_cve": "16",
    "vulnerable_lines": [
        "// Line_Reference 102:     def test_check_safe_path(self):",
        "// Line_Reference 103:         ret = disk_api._join_and_check_path_within_fs('/foo', 'etc',",
        "// Line_Reference 104:                                                       'something.conf')",
        "// Line_Reference 105:         self.assertEquals(ret, '/foo/etc/something.conf')",
        "// Line_Reference 106: ",
        "// Line_Reference 107:     def test_check_unsafe_path(self):",
        "// Line_Reference 108:         self.assertRaises(exception.Invalid,",
        "// Line_Reference 109:                           disk_api._join_and_check_path_within_fs,",
        "// Line_Reference 110:                           '/foo', 'etc/../../../something.conf')",
        "// Line_Reference 111: ",
        "// Line_Reference 112:     def test_inject_files_with_bad_path(self):",
        "// Line_Reference 113:         self.assertRaises(exception.Invalid,",
        "// Line_Reference 114:                           disk_api._inject_file_into_fs,",
        "// Line_Reference 115:                           '/tmp', '/etc/../../../../etc/passwd',",
        "// Line_Reference 116:                           'hax')",
        "// Line_Reference 117: "
    ]
}
