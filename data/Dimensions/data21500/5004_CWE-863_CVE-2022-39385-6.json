{
    "cve_id": "CVE-2022-39385",
    "cve_description": "Discourse is the an open source discussion platform. In some rare cases users redeeming an invitation can be added as a participant to several private message topics that they should not be added to. They are not notified of this, it happens transparently in the background. This issue has been resolved in commit `a414520742` and will be included in future releases. Users are advised to upgrade. Users are also advised to set `SiteSetting.max_invites_per_day` to 0 until the patch is installed.",
    "cve_publish_date": "2022-11-14",
    "cwe_id": "CWE-863",
    "cwe_name": "Incorrect Authorization",
    "cwe_description": "The product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. This allows attackers to bypass intended access restrictions.",
    "commit_message": "SECURITY: Prevent email from being nil in InviteRedeemer (#19004)\n\nThis commit adds some protections in InviteRedeemer to ensure that email\r\ncan never be nil, which could cause issues with inviting the invited\r\nperson to private topics since there was an incorrect inner join.\r\n\r\nIf the email is nil and the invite is scoped to an email, we just use\r\nthat invite.email unconditionally.  If a redeeming_user (an existing\r\nuser) is passed in when redeeming an email, we use their email to\r\noverride the passed in email.  Otherwise we just use the passed in\r\nemail.  We now raise an error after all this if the email is still nil.\r\nThis commit also adds some tests to catch the private topic fix, and\r\nsome general improvements and comments around the invite code.\r\n\r\nThis commit also includes a migration to delete TopicAllowedUser records\r\nfor users who were mistakenly added to topics as part of the invite\r\nredemption process.",
    "type_of_change": "ModificationType.ADD",
    "filename_of_changes": "invite_redeemer.rb",
    "code_language": "Ruby",
    "number_of_lines_added_for_mitigation": "80",
    "number_of_lines_deleted_vulnerable_to_cve": "25",
    "vulnerable_lines": [
        "// Line_Reference 16:     invite: nil,",
        "// Line_Reference 26: ",
        "// Line_Reference 28:     @email = email",
        "// Line_Reference 48:   # extracted from User cause it is very specific to invites",
        "// Line_Reference 110:     if invite.emailed_status != Invite.emailed_status_types[:not_required] && email == invite.email && invite.email_token.present? && email_token == invite.email_token",
        "// Line_Reference 122:     # Invite has already been redeemed by anyone.",
        "// Line_Reference 123:     if !invite.is_invite_link? && InvitedUser.exists?(invite_id: invite.id)",
        "// Line_Reference 127:     # Email will not be present if we are claiming an invite link, which",
        "// Line_Reference 128:     # does not have an email or domain scope on the invitation.",
        "// Line_Reference 129:     if email.present? || redeeming_user.present?",
        "// Line_Reference 130:       email_to_check = redeeming_user&.email || email",
        "// Line_Reference 132:       if invite.email.present? && !invite.email_matches?(email_to_check)",
        "// Line_Reference 133:         raise ActiveRecord::RecordNotSaved.new(I18n.t('invite.not_matching_email'))",
        "// Line_Reference 134:       end",
        "// Line_Reference 136:       if invite.domain.present? && !invite.domain_matches?(email_to_check)",
        "// Line_Reference 137:         raise ActiveRecord::RecordNotSaved.new(I18n.t('invite.domain_not_allowed'))",
        "// Line_Reference 138:       end",
        "// Line_Reference 199:     topic_ids = Topic.where(archetype: Archetype::private_message).includes(:invites).where(invites: { email: email }).pluck(:id)",
        "// Line_Reference 201:       TopicAllowedUser.create!(user_id: invited_user.id, topic_id: id) unless TopicAllowedUser.exists?(user_id: invited_user.id, topic_id: id)",
        "// Line_Reference 224:     if inviter = invite.invited_by",
        "// Line_Reference 225:       inviter.notifications.create!(",
        "// Line_Reference 226:         notification_type: Notification.types[:invitee_accepted],",
        "// Line_Reference 227:         data: { display_username: invited_user.username }.to_json",
        "// Line_Reference 228:       )",
        "// Line_Reference 229:     end"
    ]
}
