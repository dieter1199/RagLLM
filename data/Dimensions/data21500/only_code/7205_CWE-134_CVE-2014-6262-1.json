} else if (bad_format(im->gdes[i].format)) {
rrd_set_error
("bad format for PRINT in '%s'", im->gdes[i].format);
if (bad_format(im->gdes[i].format)) {
rrd_set_error
("bad format for GPRINT in '%s'",
im->gdes[i].format);
return -1;
rrd_set_error("bad format for imginfo");
if (bad_format(optarg)){
rrd_set_error("use either %le or %lf formats");
if (bad_format(optarg)){
rrd_set_error("use either %le or %lf formats");
int bad_format(
char *fmt)
{
char     *ptr;
int       n = 0;
ptr = fmt;
while (*ptr != '\0')
if (*ptr++ == '%') {
/* line cannot end with percent char */
if (*ptr == '\0')
return 1;
/* '%s', '%S' and '%%' are allowed */
if (*ptr == 's' || *ptr == 'S' || *ptr == '%')
ptr++;
/* %c is allowed (but use only with vdef!) */
else if (*ptr == 'c') {
ptr++;
n = 1;
}
/* or else '% 6.2lf' and such are allowed */
else {
/* optional padding character */
if (*ptr == ' ' || *ptr == '+' || *ptr == '-')
ptr++;
/* This should take care of 'm.n' with all three optional */
while (*ptr >= '0' && *ptr <= '9')
ptr++;
if (*ptr == '.')
ptr++;
while (*ptr >= '0' && *ptr <= '9')
ptr++;
/* Either 'le', 'lf' or 'lg' must follow here */
if (*ptr++ != 'l')
return 1;
if (*ptr == 'e' || *ptr == 'f' || *ptr == 'g')
ptr++;
else
return 1;
n++;
}
}
return (n != 1);
int bad_format_imginfo(
char *fmt)
{
char     *ptr;
int       n = 0;
ptr = fmt;
while (*ptr != '\0')
if (*ptr++ == '%') {
/* line cannot end with percent char */
if (*ptr == '\0')
return 1;
/* '%%' is allowed */
if (*ptr == '%')
ptr++;
/* '%s', '%S' are allowed */
else if (*ptr == 's' || *ptr == 'S') {
n = 1;
ptr++;
}
/* or else '% 4lu' and such are allowed */
else {
/* optional padding character */
if (*ptr == ' ')
ptr++;
/* This should take care of 'm' */
while (*ptr >= '0' && *ptr <= '9')
ptr++;
/* 'lu' must follow here */
if (*ptr++ != 'l')
return 1;
if (*ptr == 'u')
ptr++;
else
return 1;
n++;
}
}
return (n != 3);
