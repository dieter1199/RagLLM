import { ApolloLink, execute } from 'apollo-link'
private getSchema(data: any) {
const schema = buildClientSchema(data as any)
private fetchSchema(
const { endpoint } = session
const headersTracing = {
...parseHeaders(session.headers),
'X-Apollo-Tracing': '1',
}
const headersNoTracing = {
...parseHeaders(session.headers),
}
const headers = session.useTracingHeader ? headersTracing : headersNoTracing
const options = set(session, 'headers', headers) as any
const { link } = this.linkGetter(options)
const operation = makeOperation({ query: getIntrospectionQuery() })
return new Promise((resolve, reject) => {
execute(link, operation).subscribe({
next: schemaData => {
if (
schemaData &&
((schemaData.errors && schemaData.errors.length > 0) ||
!schemaData.data)
) {
throw new Error(JSON.stringify(schemaData, null, 2))
}
if (!schemaData) {
throw new NoSchemaError(endpoint)
}
const schema = this.getSchema(schemaData.data as any)
const tracingSupported =
(schemaData.extensions && Boolean(schemaData.extensions.tracing)) ||
false
const result: TracingSchemaTuple = {
schema,
tracingSupported,
}
this.sessionCache.set(this.hash(session), result)
resolve(result)
this.fetching = this.fetching.remove(hash)
const subscription = this.subscriptions.get(hash)
if (subscription) {
subscription(result.schema)
}
},
error: err => {
reject(err)
this.fetching = this.fetching.remove(this.hash(session))
},
})
})