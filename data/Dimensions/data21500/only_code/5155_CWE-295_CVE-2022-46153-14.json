"foo": {MinVersion: "VersionTLS12"},
"bar": {MinVersion: "VersionTLS11"},
desc:           "Get an tls config from an invalid name",
desc:           "Get an tls config from unexisting 'default' name",
assert.Error(t, err)
assert.NoError(t, err)
assert.Equal(t, config.MinVersion, test.expectedMinVersion)
})
}
}
func TestManager_Get_GetCertificate(t *testing.T) {
testCases := []struct {
desc                 string
expectedGetConfigErr require.ErrorAssertionFunc
expectedCertificate  assert.ValueAssertionFunc
}{
{
desc:                 "Get a default certificate from non-existing store",
expectedGetConfigErr: require.Error,
expectedCertificate:  assert.Nil,
},
}
tlsManager := NewManager()
for _, test := range testCases {
test := test
t.Run(test.desc, func(t *testing.T) {
t.Parallel()
config, err := tlsManager.Get("default", "foo")
test.expectedGetConfigErr(t, err)
certificate, err := config.GetCertificate(&tls.ClientHelloInfo{})
test.expectedCertificate(t, certificate)
