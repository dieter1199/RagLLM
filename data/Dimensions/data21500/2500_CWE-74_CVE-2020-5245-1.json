{
    "cve_id": "CVE-2020-5245",
    "cve_description": "Dropwizard-Validation before 1.3.19, and 2.0.2 may allow arbitrary code execution on the host system, with the privileges of the Dropwizard service account, by injecting arbitrary Java Expression Language expressions when using the self-validating feature.\n\nThe issue has been fixed in dropwizard-validation 1.3.19 and 2.0.2.",
    "cve_publish_date": "2020-02-24",
    "cwe_id": "CWE-74",
    "cwe_name": "Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')",
    "cwe_description": "The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.",
    "commit_message": "Escape EL expressions in ViolationCollector (#3157)\n\nFixes #3153",
    "type_of_change": "Modification",
    "filename_of_changes": "SelfValidationTest.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "122",
    "number_of_lines_deleted_vulnerable_to_cve": "86",
    "vulnerable_lines": [
        "// Line_Reference 3: import static org.assertj.core.api.Assertions.assertThat;",
        "// Line_Reference 4: ",
        "// Line_Reference 5: import javax.annotation.concurrent.NotThreadSafe;",
        "// Line_Reference 6: import javax.validation.Validator;",
        "// Line_Reference 7: ",
        "// Line_Reference 8: import org.junit.jupiter.api.AfterEach;",
        "// Line_Reference 9: import org.junit.jupiter.api.BeforeEach;",
        "// Line_Reference 10: import org.junit.jupiter.api.Test;",
        "// Line_Reference 11: ",
        "// Line_Reference 24: ",
        "// Line_Reference 25:     @BeforeEach @AfterEach",
        "// Line_Reference 38: ",
        "// Line_Reference 42:             col.addViolation(FAILED+\"subclass\");",
        "// Line_Reference 43:         }",
        "// Line_Reference 50:             col.addViolation(FAILED+\"subclass\");",
        "// Line_Reference 51:         }",
        "// Line_Reference 53: ",
        "// Line_Reference 57:         }",
        "// Line_Reference 112:             col.addViolation(FAILED + \"2\");",
        "// Line_Reference 117:             col.addViolation(FAILED + \"3\");",
        "// Line_Reference 133:     public void failingExample() throws Exception {",
        "// Line_Reference 135:             .containsExactlyInAnyOrder(FAILED_RESULT);",
        "// Line_Reference 137:             .isEmpty();",
        "// Line_Reference 139: ",
        "// Line_Reference 141:     public void subClassExample() throws Exception {",
        "// Line_Reference 143:             .containsExactlyInAnyOrder(",
        "// Line_Reference 144:                     FAILED_RESULT,",
        "// Line_Reference 145:                     FAILED_RESULT+\"subclass\"",
        "// Line_Reference 146:             );",
        "// Line_Reference 148:             .isEmpty();",
        "// Line_Reference 150: ",
        "// Line_Reference 152:     public void annotatedSubClassExample() throws Exception {",
        "// Line_Reference 154:             .containsExactlyInAnyOrder(",
        "// Line_Reference 155:                     FAILED_RESULT,",
        "// Line_Reference 156:                     FAILED_RESULT+\"subclass\"",
        "// Line_Reference 157:             );",
        "// Line_Reference 159:             .isEmpty();",
        "// Line_Reference 161: ",
        "// Line_Reference 163:     public void overridingSubClassExample() throws Exception {",
        "// Line_Reference 165:             .isEmpty();",
        "// Line_Reference 167:             .isEmpty();",
        "// Line_Reference 171:     public void correctExample() throws Exception {",
        "// Line_Reference 173:             .isEmpty();",
        "// Line_Reference 175:             .isEmpty();",
        "// Line_Reference 179:     public void multipleTestingOfSameClass() throws Exception {",
        "// Line_Reference 181:             .isEmpty();",
        "// Line_Reference 183:             .isEmpty();",
        "// Line_Reference 185:             .isEmpty();",
        "// Line_Reference 189:     public void testDirectContextUsage() throws Exception {",
        "// Line_Reference 191:             .containsExactlyInAnyOrder(FAILED_RESULT);",
        "// Line_Reference 193:             .isEmpty();",
        "// Line_Reference 197:     public void complexExample() throws Exception {",
        "// Line_Reference 199:             .containsExactlyInAnyOrder(",
        "// Line_Reference 200:                 FAILED_RESULT + \"1\",",
        "// Line_Reference 201:                 FAILED_RESULT + \"2\",",
        "// Line_Reference 202:                 FAILED_RESULT + \"3\"",
        "// Line_Reference 203:             );",
        "// Line_Reference 205:             .isEmpty();",
        "// Line_Reference 211:             .isEmpty();",
        "// Line_Reference 213:             .containsExactlyInAnyOrder(",
        "// Line_Reference 214:                     new LoggingEvent(",
        "// Line_Reference 215:                             Level.ERROR,",
        "// Line_Reference 216:                             \"The method {} is annotated with @SelfValidation but does not have a single parameter of type {}\",",
        "// Line_Reference 217:                             InvalidExample.class.getMethod(\"validateFailAdditionalParameters\", ViolationCollector.class, int.class),",
        "// Line_Reference 218:                             ViolationCollector.class",
        "// Line_Reference 219:                     ),",
        "// Line_Reference 220:                     new LoggingEvent(",
        "// Line_Reference 221:                             Level.ERROR,",
        "// Line_Reference 222:                             \"The method {} is annotated with @SelfValidation but does not return void. It is ignored\",",
        "// Line_Reference 223:                             InvalidExample.class.getMethod(\"validateFailReturn\", ViolationCollector.class)",
        "// Line_Reference 224:                     ),",
        "// Line_Reference 225:                     new LoggingEvent(",
        "// Line_Reference 226:                             Level.ERROR,",
        "// Line_Reference 227:                             \"The method {} is annotated with @SelfValidation but is not public\",",
        "// Line_Reference 228:                             InvalidExample.class.getDeclaredMethod(\"validateFailPrivate\", ViolationCollector.class)",
        "// Line_Reference 229:                     )",
        "// Line_Reference 230:             );",
        "// Line_Reference 234:     public void giveWarningIfNoValidationMethods() throws Exception {",
        "// Line_Reference 236:             .isEmpty();",
        "// Line_Reference 238:         .containsExactlyInAnyOrder(",
        "// Line_Reference 239:                 new LoggingEvent(",
        "// Line_Reference 240:                         Level.WARN,",
        "// Line_Reference 241:                         \"The class {} is annotated with @SelfValidating but contains no valid methods that are annotated with @SelfValidation\",",
        "// Line_Reference 242:                         NoValidations.class",
        "// Line_Reference 243:                 )",
        "// Line_Reference 244: "
    ]
}
