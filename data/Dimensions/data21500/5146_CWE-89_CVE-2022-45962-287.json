{
    "cve_id": "CVE-2022-45962",
    "cve_description": "Open Solutions for Education, Inc openSIS Community Edition v8.0 and earlier is vulnerable to SQL Injection via CalendarModal.php.",
    "cve_publish_date": "2023-02-13",
    "cwe_id": "CWE-89",
    "cwe_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
    "cwe_description": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.",
    "commit_message": "Version 9.0 release\n\nOlder version shifted to branch: Version_8.0",
    "type_of_change": "ModificationType.ADD",
    "filename_of_changes": "Rooms.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "63",
    "number_of_lines_deleted_vulnerable_to_cve": "104",
    "vulnerable_lines": [
        "// Line_Reference 32: if(clean_param($_REQUEST['values'], PARAM_NOTAGS) && ($_POST['values'] || $_REQUEST['ajax']) && AllowEdit())",
        "// Line_Reference 33: {",
        "// Line_Reference 34:     $mflag=0;",
        "// Line_Reference 35:     foreach ($_REQUEST['values'] as $id => $columns)",
        "// Line_Reference 36:     {",
        "// Line_Reference 38:         if (!(isset($columns['TITLE']) && trim($columns['TITLE']) == ''))",
        "// Line_Reference 39:         {",
        "// Line_Reference 41:             if($id != 'new')",
        "// Line_Reference 42:             {",
        "// Line_Reference 45:                 foreach ($columns as $column => $value)",
        "// Line_Reference 46:                 {",
        "// Line_Reference 47:                     if ($column == 'TITLE')",
        "// Line_Reference 48:                     {",
        "// Line_Reference 54:                     if ($column == 'CAPACITY')",
        "// Line_Reference 55:                     {",
        "// Line_Reference 57:                         if (count($assoc_check) == 0)",
        "// Line_Reference 58:                         {",
        "// Line_Reference 60:                         }",
        "// Line_Reference 61:                         else",
        "// Line_Reference 62:                         {",
        "// Line_Reference 65:                             foreach ($assoc_check as $ai => $ad)",
        "// Line_Reference 66:                             {",
        "// Line_Reference 76:                             if ($go_tot_seat == 'y')",
        "// Line_Reference 77:                             {",
        "// Line_Reference 79:                                 foreach ($assoc_check as $ai => $ad)",
        "// Line_Reference 80:                                 {",
        "// Line_Reference 83:                             }",
        "// Line_Reference 84:                             else",
        "// Line_Reference 85:                             {",
        "// Line_Reference 87:                                 echo '<button type=\"button\" class=\"close\" data-dismiss=\"alert\"><span>×</span><span class=\"sr-only\">'._close.'</span></button>';",
        "// Line_Reference 88:                                 echo cannotChangeRoomCapacityAsItHasAssociation.'.';",
        "// Line_Reference 95:                     if ($column == 'SORT_ORDER')",
        "// Line_Reference 96:                     {",
        "// Line_Reference 113:                 if(count($validate_title) != 0)",
        "// Line_Reference 114:                 {",
        "// Line_Reference 115:                     $mflag=1;",
        "// Line_Reference 120: //                } else if (isset($validate_srt_odr) && count($validate_srt_odr) != 0) {",
        "// Line_Reference 121: //                    $samedata = DBGet(DBQuery(\"select SORT_ORDER from rooms  WHERE room_id='$id'\"));",
        "// Line_Reference 122: //                    $samedata = $samedata[1]['SORT_ORDER'];",
        "// Line_Reference 123: //                    if ($samedata != $srt_odr) {",
        "// Line_Reference 124: //                        echo '<div class=\"alert bg-danger alert-styled-left\">';",
        "// Line_Reference 125: //                        echo '<button type=\"button\" class=\"close\" data-dismiss=\"alert\"><span>×</span><span class=\"sr-only\">Close</span></button>';",
        "// Line_Reference 126: //                        echo 'Unable to save data, because sort order already exists.';",
        "// Line_Reference 127: //                        echo '</div>';",
        "// Line_Reference 128: //                    }",
        "// Line_Reference 129: ",
        "// Line_Reference 133:                     DBQuery($sql);",
        "// Line_Reference 140:                 foreach ($columns as $column => $value)",
        "// Line_Reference 141:                 {",
        "// Line_Reference 142:                     if ($column == 'TITLE')",
        "// Line_Reference 143:                     {",
        "// Line_Reference 146:                     if($column == 'SORT_ORDER')",
        "// Line_Reference 147:                     {",
        "// Line_Reference 148:                         if ($value != '')",
        "// Line_Reference 149:                         {",
        "// Line_Reference 152: //                            $validate_srtodr = DBGet(DBQuery('SELECT count(*) as NO  FROM rooms WHERE  SORT_ORDER=\\'' . $value . '\\' AND SCHOOL_ID=\\'' . UserSchool() . '\\''));",
        "// Line_Reference 153: //                            if ($validate_srtodr[1]['NO'] > 0) {",
        "// Line_Reference 154: //                                echo '<div class=\"alert bg-danger alert-styled-left\">';",
        "// Line_Reference 155: //                                echo '<button type=\"button\" class=\"close\" data-dismiss=\"alert\"><span>×</span><span class=\"sr-only\">Close</span></button>';",
        "// Line_Reference 156: //                                echo 'Unable to save data, because sort order already exists.';",
        "// Line_Reference 157: //                                echo '</div>';",
        "// Line_Reference 158: //                                $go = false;",
        "// Line_Reference 159: //                            } else {",
        "// Line_Reference 160:                                 $fields .= $column . ',';",
        "// Line_Reference 161:                                 $values .= '\\'' . singleQuoteReplace(\"'\", \"''\", $value) . ' \\',';",
        "// Line_Reference 162:                                 $go = true;",
        "// Line_Reference 163: //                            }",
        "// Line_Reference 165:                     }",
        "// Line_Reference 166:                     else",
        "// Line_Reference 167:                     {",
        "// Line_Reference 180:                 if(count($validate_title) != 0)",
        "// Line_Reference 181:                 {",
        "// Line_Reference 182:                     $mflag=1;",
        "// Line_Reference 183:                     /*echo '<div class=\"alert alert-info\">';",
        "// Line_Reference 184:                     echo '<button type=\"button\" class=\"close\" data-dismiss=\"alert\"><span>×</span><span class=\"sr-only\">Close</span></button>';",
        "// Line_Reference 185:                     echo 'Room with similar title already exists.';",
        "// Line_Reference 186:                     echo '</div>';*/",
        "// Line_Reference 187:                 }",
        "// Line_Reference 188:                 //else {",
        "// Line_Reference 189: ",
        "// Line_Reference 190:                     if ($go)",
        "// Line_Reference 191:                         DBQuery($sql1);",
        "// Line_Reference 192:                 //}",
        "// Line_Reference 197:     if($mflag == 1)",
        "// Line_Reference 198:     {",
        "// Line_Reference 200:         echo '<button type=\"button\" class=\"close\" data-dismiss=\"alert\"><span>×</span><span class=\"sr-only\">'._close.'</span></button>';",
        "// Line_Reference 206: DrawBC(\"\"._schoolSetup.\" > \" . ProgramTitle());",
        "// Line_Reference 208:     $room_id = paramlib_validation($colmn = PERIOD_ID, $_REQUEST[id]);",
        "// Line_Reference 213:         UnableDeletePromptMod(''._cannotDeleteBecauseRoomAreAssociated.'.', 'delete', $qs);",
        "// Line_Reference 229:         array_push($room_id_arr, $td[ROOM_ID]);",
        "// Line_Reference 235:     $columns = array('TITLE' =>_title, 'CAPACITY' =>_capacity, 'DESCRIPTION' =>_description, 'SORT_ORDER' =>_sortOrder);",
        "// Line_Reference 239:     echo \"<FORM name=F1 id=F1 action=Modules.php?modname=\" . strip_tags(trim($_REQUEST[modname])) . \"&modfunc=update method=POST>\";",
        "// Line_Reference 254: function _makeTextInput($value, $name) {",
        "// Line_Reference 263:         $extra = 'size=5 maxlength=10 placeholder='.ucwords(strtolower(str_replace ('_', ' ', $name))).' class=form-control  id=' . $name . '_' . $id . '';",
        "// Line_Reference 266:         $extra = 'class=form-control placeholder='.ucwords(strtolower(str_replace ('_', ' ', $name))).' id=' . $name . '_' . $id . ' ';",
        "// Line_Reference 268:             $extra .= ' onkeyup=\\\"fill_rooms(this,' . $id . ');\\\"  placeholder='.ucwords(strtolower(str_replace ('_', ' ', $name)));",
        "// Line_Reference 271:         $extra = ' size=5 maxlength=10 class=form-control placeholder='.ucwords(strtolower(str_replace ('_', ' ', $name))).' id=' . $name . '_' . $id . ' onkeydown=\"return numberOnly(event);\"';",
        "// Line_Reference 273:         $extra = ' size=5 maxlength=10 class=form-control placeholder='.ucwords(strtolower(str_replace ('_', ' ', $name))).' id=' . $name . '_' . $id . ' onkeydown=\"return numberOnly(event);\"';",
        "// Line_Reference 275:         $extra = 'size=30 placeholder='.ucwords(strtolower(str_replace ('_', ' ', $name)));",
        "// Line_Reference 279: function _makeIntInput($value, $name) {",
        "// Line_Reference 286:         $extra = 'size=5 maxlength=10 class=form-control placeholder='.ucwords(strtolower(str_replace ('_', ' ', $name))).' onkeydown=\\\"return numberOnly(event);\\\"';",
        "// Line_Reference 288:         $extra = 'size=5 maxlength=10 class=form-control placeholder='.ucwords(strtolower(str_replace ('_', ' ', $name))).' onkeydown=\"return numberOnly(event);\"';",
        "// Line_Reference 292: ",
        "// Line_Reference 293: ?>"
    ]
}
