{
    "cve_id": "CVE-2016-9588",
    "cve_description": "arch/x86/kvm/vmx.c in the Linux kernel through 4.9 mismanages the #BP and #OF exceptions, which allows guest OS users to cause a denial of service (guest OS crash) by declining to handle an exception thrown by an L2 guest.",
    "cve_publish_date": "2016-12-28",
    "cwe_id": "CWE-388",
    "cwe_name": "7PK - Errors",
    "cwe_description": "This category represents one of the phyla in the Seven Pernicious Kingdoms vulnerability classification. It includes weaknesses that occur when an application does not properly handle errors that occur during processing. According to the authors of the Seven Pernicious Kingdoms, \"Errors and error handling represent a class of API. Errors related to error handling are so common that they deserve a special kingdom of their own. As with 'API Abuse,' there are two ways to introduce an error-related security vulnerability: the most common one is handling errors poorly (or not at all). The second is producing errors that either give out too much information (to possible attackers) or are difficult to handle.\"",
    "commit_message": "kvm: nVMX: Allow L1 to intercept software exceptions (#BP and #OF)\n\nWhen L2 exits to L0 due to \"exception or NMI\", software exceptions\n(#BP and #OF) for which L1 has requested an intercept should be\nhandled by L1 rather than L0. Previously, only hardware exceptions\nwere forwarded to L1.\n\nSigned-off-by: Jim Mattson <jmattson@google.com>\nCc: stable@vger.kernel.org\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "vmx.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "5",
    "number_of_lines_deleted_vulnerable_to_cve": "6",
    "vulnerable_lines": [
        "// Line_Reference 1392: static inline bool is_exception(u32 intr_info)",
        "// Line_Reference 1395: \t\t== (INTR_TYPE_HARD_EXCEPTION | INTR_INFO_VALID_MASK);",
        "// Line_Reference 5731: \tif ((intr_info & INTR_INFO_INTR_TYPE_MASK) == INTR_TYPE_NMI_INTR)",
        "// Line_Reference 8173: \t\tif (!is_exception(intr_info))",
        "// Line_Reference 8768: \tif ((exit_intr_info & INTR_INFO_INTR_TYPE_MASK) == INTR_TYPE_NMI_INTR &&",
        "// Line_Reference 8769: \t    (exit_intr_info & INTR_INFO_VALID_MASK)) {"
    ]
}
