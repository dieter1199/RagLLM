{
    "cve_id": "CVE-2020-7769",
    "cve_description": "This affects the package nodemailer before 6.4.16. Use of crafted recipient email addresses may result in arbitrary command flag injection in sendmail transport for sending mails.",
    "cve_publish_date": "2020-11-12",
    "cwe_id": "CWE-88",
    "cwe_name": "Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')",
    "cwe_description": "The product constructs a string for a command to be executed by a separate component\nin another control sphere, but it does not properly delimit the\nintended arguments, options, or switches within that command string.",
    "commit_message": "v6.4.16",
    "type_of_change": "Modification",
    "filename_of_changes": "shared-test.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "45",
    "number_of_lines_deleted_vulnerable_to_cve": "45",
    "vulnerable_lines": [
        "// Line_Reference 16: describe('Shared Funcs Tests', function() {",
        "// Line_Reference 17:     describe('Logger tests', function() {",
        "// Line_Reference 18:         it('Should create a logger', function() {",
        "// Line_Reference 33:     describe('Connection url parser tests', function() {",
        "// Line_Reference 34:         it('Should parse connection url', function() {",
        "// Line_Reference 51:         it('should not choke on special symbols in auth', function() {",
        "// Line_Reference 64:     describe('Resolver tests', function() {",
        "// Line_Reference 68:         beforeEach(function(done) {",
        "// Line_Reference 69:             server = http.createServer(function(req, res) {",
        "// Line_Reference 95:         afterEach(function(done) {",
        "// Line_Reference 99:         it('should set text from html string', function(done) {",
        "// Line_Reference 105:             shared.resolveContent(mail.data, 'html', function(err, value) {",
        "// Line_Reference 112:         it('should set text from html buffer', function(done) {",
        "// Line_Reference 118:             shared.resolveContent(mail.data, 'html', function(err, value) {",
        "// Line_Reference 125:         it('should set text from a html file', function(done) {",
        "// Line_Reference 133:             shared.resolveContent(mail.data, 'html', function(err, value) {",
        "// Line_Reference 140:         it('should set text from an html url', function(done) {",
        "// Line_Reference 148:             shared.resolveContent(mail.data, 'html', function(err, value) {",
        "// Line_Reference 155:         it('should set text from redirecting url', function(done) {",
        "// Line_Reference 163:             shared.resolveContent(mail.data, 'html', function(err, value) {",
        "// Line_Reference 170:         it('should set text from gzipped url', function(done) {",
        "// Line_Reference 178:             shared.resolveContent(mail.data, 'html', function(err, value) {",
        "// Line_Reference 185:         it('should set text from a html stream', function(done) {",
        "// Line_Reference 191:             shared.resolveContent(mail.data, 'html', function(err, value) {",
        "// Line_Reference 203:         it('should return an error', function(done) {",
        "// Line_Reference 211:             shared.resolveContent(mail.data, 'html', function(err) {",
        "// Line_Reference 217:         it('should return encoded string as buffer', function(done) {",
        "// Line_Reference 227:             shared.resolveContent(mail.data, 'html', function(err, value) {",
        "// Line_Reference 234:         describe('data uri tests', function() {",
        "// Line_Reference 235:             it('should resolve with mime type and base64', function(done) {",
        "// Line_Reference 244:                 shared.resolveContent(mail.data, 'attachment', function(err, value) {",
        "// Line_Reference 256:             it('should resolve with mime type and plaintext', function(done) {",
        "// Line_Reference 264:                 shared.resolveContent(mail.data, 'attachment', function(err, value) {",
        "// Line_Reference 271:             it('should resolve with plaintext', function(done) {",
        "// Line_Reference 279:                 shared.resolveContent(mail.data, 'attachment', function(err, value) {",
        "// Line_Reference 286:             it('should resolve with mime type, charset and base64', function(done) {",
        "// Line_Reference 295:                 shared.resolveContent(mail.data, 'attachment', function(err, value) {",
        "// Line_Reference 309:     describe('#assign tests', function() {",
        "// Line_Reference 310:         it('should assign multiple objects to target', function() {",
        "// Line_Reference 339:     describe('#encodeXText tests', function() {",
        "// Line_Reference 340:         it('should not encode atom', function() {",
        "// Line_Reference 344:         it('should not encode email', function() {",
        "// Line_Reference 348:         it('should encode space', function() {",
        "// Line_Reference 352:         it('should encode unicode', function() {",
        "// Line_Reference 356:         it('should encode low codes', function() {"
    ]
}
