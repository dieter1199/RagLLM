{
    "cve_id": "CVE-2024-23820",
    "cve_description": "OpenFGA, an authorization/permission engine, is vulnerable to a denial of service attack in versions prior to 1.4.3. In some scenarios that depend on the model and tuples used, a call to `ListObjects` may not  release memory properly. So when a sufficiently high number of those calls are executed, the OpenFGA server can create an `out of memory` error and terminate. Version 1.4.3 contains a patch for this issue.",
    "cve_publish_date": "2024-01-26",
    "cwe_id": "CWE-401",
    "cwe_name": "Missing Release of Memory after Effective Lifetime",
    "cwe_description": "The product does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory.",
    "commit_message": "fix: handle ReverseExpand channel closure correctly (#1315)",
    "type_of_change": "Modification",
    "filename_of_changes": "reverse_expand.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "26",
    "number_of_lines_deleted_vulnerable_to_cve": "26",
    "vulnerable_lines": [
        "// Line_Reference 1218: \t\t\trequire := require.New(t)",
        "// Line_Reference 1219: ",
        "// Line_Reference 1226: \t\t\trequire.NoError(err)",
        "// Line_Reference 1229: \t\t\trequire.NoError(err)",
        "// Line_Reference 1247: \t\t\t\treverseExpandQuery.Execute(timeoutCtx, test.request, resultChan, resolutionMetadata)",
        "// Line_Reference 1251: \t\t\treverseExpandErrCh := make(chan error)",
        "// Line_Reference 1252: \t\t\tgo func() {",
        "// Line_Reference 1253: \t\t\t\tfor result := range resultChan {",
        "// Line_Reference 1254: \t\t\t\t\tif result.Err != nil {",
        "// Line_Reference 1255: \t\t\t\t\t\treverseExpandErrCh <- result.Err",
        "// Line_Reference 1258: ",
        "// Line_Reference 1259: \t\t\t\t\tresults = append(results, result)",
        "// Line_Reference 1261: ",
        "// Line_Reference 1262: \t\t\t\treverseExpandErrCh <- nil",
        "// Line_Reference 1263: \t\t\t}()",
        "// Line_Reference 1264: ",
        "// Line_Reference 1265: \t\t\tselect {",
        "// Line_Reference 1266: \t\t\tcase <-timeoutCtx.Done():",
        "// Line_Reference 1267: \t\t\t\trequire.FailNow(\"timed out waiting for response\")",
        "// Line_Reference 1268: \t\t\tcase err := <-reverseExpandErrCh:",
        "// Line_Reference 1269: \t\t\t\trequire.ErrorIs(err, test.expectedError)",
        "// Line_Reference 1270: \t\t\t}",
        "// Line_Reference 1271: ",
        "// Line_Reference 1272: \t\t\tif test.expectedError == nil {",
        "// Line_Reference 1273: \t\t\t\trequire.ElementsMatch(test.expectedResult, results)",
        "// Line_Reference 1274: \t\t\t\trequire.Equal(test.expectedDSQueryCount, *resolutionMetadata.QueryCount)"
    ]
}
