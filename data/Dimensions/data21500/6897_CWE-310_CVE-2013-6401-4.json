{
    "cve_id": "CVE-2013-6401",
    "cve_description": "Jansson, possibly 2.4 and earlier, does not restrict the ability to trigger hash collisions predictably, which allows context-dependent attackers to cause a denial of service (CPU consumption) via a crafted JSON document.",
    "cve_publish_date": "2014-03-21",
    "cwe_id": "CWE-310",
    "cwe_name": "Cryptographic Issues",
    "cwe_description": "Weaknesses in this category are related to the design and implementation of data confidentiality and integrity. Frequently these deal with the use of encoding techniques, encryption libraries, and hashing algorithms. The weaknesses in this category could lead to a degradation of the quality data if they are not addressed.",
    "commit_message": "CVE-2013-6401: Change hash function, randomize hashes\n\nThanks to Florian Weimer and Eric Sesterhenn for reporting, reviewing\nand testing.",
    "type_of_change": "Modification",
    "filename_of_changes": "test_object.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "40",
    "number_of_lines_deleted_vulnerable_to_cve": "24",
    "vulnerable_lines": [
        "// Line_Reference 279:     if(strcmp(json_object_iter_key(iter), \"a\"))",
        "// Line_Reference 280:         fail(\"iterating failed: wrong key\");",
        "// Line_Reference 281:     if(json_object_iter_value(iter) != foo)",
        "// Line_Reference 282:         fail(\"iterating failed: wrong value\");",
        "// Line_Reference 287:     if(strcmp(json_object_iter_key(iter), \"b\"))",
        "// Line_Reference 288:         fail(\"iterating failed: wrong key\");",
        "// Line_Reference 289:     if(json_object_iter_value(iter) != bar)",
        "// Line_Reference 290:         fail(\"iterating failed: wrong value\");",
        "// Line_Reference 295:     if(strcmp(json_object_iter_key(iter), \"c\"))",
        "// Line_Reference 296:         fail(\"iterating failed: wrong key\");",
        "// Line_Reference 297:     if(json_object_iter_value(iter) != baz)",
        "// Line_Reference 298:         fail(\"iterating failed: wrong value\");",
        "// Line_Reference 315:     iter = json_object_iter_next(object, iter);",
        "// Line_Reference 316:     if(!iter)",
        "// Line_Reference 317:         fail(\"unable to increment iterator\");",
        "// Line_Reference 318:     if(strcmp(json_object_iter_key(iter), \"c\"))",
        "// Line_Reference 319:         fail(\"iterating failed: wrong key\");",
        "// Line_Reference 320:     if(json_object_iter_value(iter) != baz)",
        "// Line_Reference 321:         fail(\"iterating failed: wrong value\");",
        "// Line_Reference 322: ",
        "// Line_Reference 323:     if(json_object_iter_set(object, iter, bar))",
        "// Line_Reference 326:     if(strcmp(json_object_iter_key(iter), \"c\"))",
        "// Line_Reference 328:     if(json_object_iter_value(iter) != bar)",
        "// Line_Reference 330:     if(json_object_get(object, \"c\") != bar)"
    ]
}
