{
    "cve_id": "CVE-2022-39309",
    "cve_description": "GoCD is a continuous delivery server. GoCD helps you automate and streamline the build-test-release cycle for continuous delivery of your product. GoCD versions prior to 21.1.0 leak the symmetric key used to encrypt/decrypt any secure variables/secrets in GoCD configuration to authenticated agents. A malicious/compromised agent may then expose that key from memory, and potentially allow an attacker the ability to decrypt secrets intended for other agents/environments if they also are able to obtain access to encrypted configuration values from the GoCD server. This issue is fixed in GoCD version 21.1.0. There are currently no known workarounds.",
    "cve_publish_date": "2022-10-14",
    "cwe_id": "CWE-668",
    "cwe_name": "Exposure of Resource to Wrong Sphere",
    "cwe_description": "The product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource.",
    "commit_message": "SCMMaterial changes #000\n\n* SCMMaterial unlike SCMMaterialConfig objects are used for polling,\n  they do not need to encrypt the password. Hence removing the\n  encryptedPassword attribute.",
    "type_of_change": "Modification",
    "filename_of_changes": "SvnMaterialTest.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "0",
    "number_of_lines_deleted_vulnerable_to_cve": "51",
    "vulnerable_lines": [
        "// Line_Reference 331:     @Test",
        "// Line_Reference 332:     void shouldEncryptSvnPasswordAndMarkPasswordAsNull() throws Exception {",
        "// Line_Reference 333:         GoCipher mockGoCipher = mock(GoCipher.class);",
        "// Line_Reference 334:         when(mockGoCipher.encrypt(\"password\")).thenReturn(\"encrypted\");",
        "// Line_Reference 335: ",
        "// Line_Reference 336:         SvnMaterial material = new SvnMaterial(\"/foo\", \"username\", \"password\", false, mockGoCipher);",
        "// Line_Reference 337:         material.ensureEncrypted();",
        "// Line_Reference 338: ",
        "// Line_Reference 339:         assertThat(material.getPassword()).isNull();",
        "// Line_Reference 340:         assertThat(material.getEncryptedPassword()).isEqualTo(\"encrypted\");",
        "// Line_Reference 341:     }",
        "// Line_Reference 342: ",
        "// Line_Reference 343:     @Test",
        "// Line_Reference 344:     void shouldDecryptSvnPassword() throws Exception {",
        "// Line_Reference 345:         GoCipher mockGoCipher = mock(GoCipher.class);",
        "// Line_Reference 346:         when(mockGoCipher.decrypt(\"encrypted\")).thenReturn(\"password\");",
        "// Line_Reference 347: ",
        "// Line_Reference 348:         SvnMaterial material = new SvnMaterial(\"/foo\", \"username\", null, false, mockGoCipher);",
        "// Line_Reference 349:         ReflectionUtil.setField(material, \"encryptedPassword\", \"encrypted\");",
        "// Line_Reference 350: ",
        "// Line_Reference 351:         material.ensureEncrypted();",
        "// Line_Reference 352:         assertThat(material.getPassword()).isEqualTo(\"password\");",
        "// Line_Reference 353:     }",
        "// Line_Reference 354: ",
        "// Line_Reference 370:     @Test",
        "// Line_Reference 371:     void shouldErrorOutIfDecryptionFails() throws CryptoException {",
        "// Line_Reference 372:         GoCipher mockGoCipher = mock(GoCipher.class);",
        "// Line_Reference 373:         String fakeCipherText = \"fake cipher text\";",
        "// Line_Reference 374:         when(mockGoCipher.decrypt(fakeCipherText)).thenThrow(new CryptoException(\"exception\"));",
        "// Line_Reference 375:         SvnMaterial material = new SvnMaterial(\"/foo\", \"username\", null, false, mockGoCipher);",
        "// Line_Reference 376:         ReflectionUtil.setField(material, \"encryptedPassword\", fakeCipherText);",
        "// Line_Reference 377:         try {",
        "// Line_Reference 378:             material.getPassword();",
        "// Line_Reference 379:             fail(\"Should have thrown up\");",
        "// Line_Reference 380:         } catch (Exception e) {",
        "// Line_Reference 381:             assertThat(e.getMessage()).isEqualTo(\"Could not decrypt the password to get the real password\");",
        "// Line_Reference 382:         }",
        "// Line_Reference 383:     }",
        "// Line_Reference 384: ",
        "// Line_Reference 385:     @Test",
        "// Line_Reference 386:     void shouldErrorOutIfEncryptionFails() throws Exception {",
        "// Line_Reference 387:         GoCipher mockGoCipher = mock(GoCipher.class);",
        "// Line_Reference 388:         when(mockGoCipher.encrypt(\"password\")).thenThrow(new CryptoException(\"exception\"));",
        "// Line_Reference 389:         try {",
        "// Line_Reference 390:             new SvnMaterial(\"/foo\", \"username\", \"password\", false, mockGoCipher);",
        "// Line_Reference 391:             fail(\"Should have thrown up\");",
        "// Line_Reference 392:         } catch (Exception e) {",
        "// Line_Reference 393:             assertThat(e.getMessage()).isEqualTo(\"Password encryption failed. Please verify your cipher key.\");",
        "// Line_Reference 394:         }",
        "// Line_Reference 395:     }",
        "// Line_Reference 396: "
    ]
}
