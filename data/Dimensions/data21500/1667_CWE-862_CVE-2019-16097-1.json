{
    "cve_id": "CVE-2019-16097",
    "cve_description": "core/api/user.go in Harbor 1.7.0 through 1.8.2 allows non-admin users to create admin accounts via the POST /api/users API, when Harbor is setup with DB as authentication backend and allow user to do self-registration. Fixed version: v1.7.6 v1.8.3. v.1.9.0. Workaround without applying the fix: configure Harbor to use non-DB authentication backend such as LDAP.",
    "cve_publish_date": "2019-09-08",
    "cwe_id": "CWE-862",
    "cwe_name": "Missing Authorization",
    "cwe_description": "The product does not perform an authorization check when an actor attempts to access a resource or perform an action.",
    "commit_message": "Disallow creating an admin user when registration\n\nThis commit enhance the `POST /api/users` API to block request from non-admin to create\nadmin user.\n\nSigned-off-by: Daniel Jiang <jiangd@vmware.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "user_test.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "38",
    "number_of_lines_deleted_vulnerable_to_cve": "26",
    "vulnerable_lines": [
        "// Line_Reference 48: \tfmt.Println(\"Register user without admin auth\")",
        "// Line_Reference 54: \t\tassert.Equal(400, code, \"Add user status should be 400\")",
        "// Line_Reference 58: \tfmt.Println(\"Register user with admin auth, but username is empty\")",
        "// Line_Reference 64: \t\tassert.Equal(400, code, \"Add user status should be 400\")",
        "// Line_Reference 69: \tfmt.Println(\"Register user with admin auth, but bad username format\")",
        "// Line_Reference 75: \t\tassert.Equal(400, code, \"Add user status should be 400\")",
        "// Line_Reference 80: \tfmt.Println(\"Register user with admin auth, but empty password.\")",
        "// Line_Reference 86: \t\tassert.Equal(400, code, \"Add user status should be 400\")",
        "// Line_Reference 91: \tfmt.Println(\"Register user with admin auth, but email is empty\")",
        "// Line_Reference 97: \t\tassert.Equal(400, code, \"Add user status should be 400\")",
        "// Line_Reference 102: \tfmt.Println(\"Register user with admin auth, but bad email format\")",
        "// Line_Reference 108: \t\tassert.Equal(400, code, \"Add user status should be 400\")",
        "// Line_Reference 126: \tfmt.Println(\"Register user with admin auth, but bad user realname format\")",
        "// Line_Reference 133: \t\tassert.Equal(400, code, \"Add user status should be 400\")",
        "// Line_Reference 139: \tfmt.Println(\"Register user with admin auth, but user comment length is illegal\")",
        "// Line_Reference 145: \t\tassert.Equal(400, code, \"Add user status should be 400\")",
        "// Line_Reference 147: ",
        "// Line_Reference 148: \t// case 10: register a new user with admin auth, expect 201",
        "// Line_Reference 149: \tfmt.Println(\"Register user with admin auth, right parameters\")",
        "// Line_Reference 156: \t\tassert.Equal(201, code, \"Add user status should be 201\")",
        "// Line_Reference 159: \t// case 11: register duplicate user with admin auth, expect 409",
        "// Line_Reference 160: \tfmt.Println(\"Register duplicate user with admin auth\")",
        "// Line_Reference 166: \t\tassert.Equal(409, code, \"Add user status should be 409\")",
        "// Line_Reference 169: \t// case 12: register a new user with admin auth, but duplicate email, expect 409",
        "// Line_Reference 170: \tfmt.Println(\"Register user with admin auth, but duplicate email\")",
        "// Line_Reference 178: \t\tassert.Equal(409, code, \"Add user status should be 409\")"
    ]
}
