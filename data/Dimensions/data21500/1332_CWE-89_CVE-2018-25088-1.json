{
    "cve_id": "CVE-2018-25088",
    "cve_description": "A vulnerability, which was classified as critical, was found in Blue Yonder postgraas_server up to 2.0.0b2. Affected is the function _create_pg_connection/create_postgres_db of the file postgraas_server/backends/postgres_cluster/postgres_cluster_driver.py of the component PostgreSQL Backend Handler. The manipulation leads to sql injection. Upgrading to version 2.0.0 is able to address this issue. The patch is identified as 7cd8d016edc74a78af0d81c948bfafbcc93c937c. It is recommended to upgrade the affected component. VDB-234246 is the identifier assigned to this vulnerability.",
    "cve_publish_date": "2023-07-18",
    "cwe_id": "CWE-89",
    "cwe_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
    "cwe_description": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.",
    "commit_message": "Harden the database creation against SQL injections\n\nIf using the PostgreSQL backend, database creation was previously vulnerable to SQL injections. This commit fixes these.\n\nThere are two tests which no longer behave as expected and have been disabled for now. They use usernames that previously broke the SQL statement but have now become valid. We might want to think about restricting the possible username somewhat again.",
    "type_of_change": "Modification",
    "filename_of_changes": "postgres_cluster_driver.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "20",
    "number_of_lines_deleted_vulnerable_to_cve": "13",
    "vulnerable_lines": [
        "// Line_Reference 22:             cur.execute(\"SELECT 1 FROM pg_database WHERE datname='{}';\".format(db_name))",
        "// Line_Reference 24:             cur.execute(\"SELECT 1 FROM pg_roles WHERE rolname='{}';\".format(db_user))",
        "// Line_Reference 36:             create_role = \"CREATE USER {db_username} WITH PASSWORD '{db_pwd}';\".format(**connection_dict)",
        "// Line_Reference 37:             drop_role = \"DROP ROLE {db_username};\".format(**connection_dict)",
        "// Line_Reference 38:             grant_role = 'GRANT {db_username} TO \"{postgraas_user}\";'.format(",
        "// Line_Reference 39:                 db_username=connection_dict['db_username'], postgraas_user=get_normalized_username(config['username'])",
        "// Line_Reference 40:             )",
        "// Line_Reference 41:             create_database = \"CREATE DATABASE {db_name} OWNER {db_username};\".format(**connection_dict)",
        "// Line_Reference 43:                 cur.execute(create_role)",
        "// Line_Reference 44:                 cur.execute(grant_role)",
        "// Line_Reference 48:             # saidly 'CREATE DATABASE' cannot run inside a transaction block",
        "// Line_Reference 50:                 cur.execute(create_database)",
        "// Line_Reference 52:                 cur.execute(drop_role)"
    ]
}
