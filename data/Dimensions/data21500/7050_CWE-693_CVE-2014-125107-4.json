{
    "cve_id": "CVE-2014-125107",
    "cve_description": "A vulnerability was found in Corveda PHPSandbox 1.3.4 and classified as critical. Affected by this issue is some unknown functionality of the component String Handler. The manipulation leads to protection mechanism failure. The attack may be launched remotely. Upgrading to version 1.3.5 is able to address this issue. The patch is identified as 48fde5ffa4d76014bad260a3cbab7ada3744a4cc. It is recommended to upgrade the affected component. VDB-248270 is the identifier assigned to this vulnerability.",
    "cve_publish_date": "2023-12-19",
    "cwe_id": "CWE-693",
    "cwe_name": "Protection Mechanism Failure",
    "cwe_description": "The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.",
    "commit_message": "- Addressed potential vulnerabilities related to SandboxedStrings where sandboxed code could manipulate the strings in a way that could defeat their protection\n- Solved errors from casting sandboxed strings to int\n- Overwrote some internal PHP functions to further mask SandboxedStrings from the sandboxed code and prevent type-checking errors\n- Added more tests related to SandboxedStrings\n- Made some minor tweaks to PHPSandbox Toolkit",
    "type_of_change": "Modification",
    "filename_of_changes": "PHPSandbox.php.txt",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "184",
    "number_of_lines_deleted_vulnerable_to_cve": "43",
    "vulnerable_lines": [
        "// Line_Reference 17:      * @version 1.3.2",
        "// Line_Reference 90:         /**",
        "// Line_Reference 91:          * @var    array          A static array of var_dump, print_r and var_export for redefining those functions",
        "// Line_Reference 92:          */",
        "// Line_Reference 93:         public static $var_funcs = array(",
        "// Line_Reference 94:             'var_dump',",
        "// Line_Reference 95:             'print_r',",
        "// Line_Reference 96:             'var_export'",
        "// Line_Reference 97:         );",
        "// Line_Reference 256:         /**",
        "// Line_Reference 257:          * @var    bool       Should PHPSandbox overwrite var_dump, print_r, and var_export?",
        "// Line_Reference 258:          * @default true",
        "// Line_Reference 259:          */",
        "// Line_Reference 260:         public $overwrite_var_funcs         = true;",
        "// Line_Reference 1968:         /** Get PHPSandbox redefined function arguments array",
        "// Line_Reference 1970:          * @param   array           $arguments      Array result from func_get_args() is passed here",
        "// Line_Reference 1972:          * @return  array           Returns the redefined arguments array",
        "// Line_Reference 1974:         public function _func_get_args(array $arguments = array()){",
        "// Line_Reference 1975:             foreach($arguments as $index => $value){",
        "// Line_Reference 1976:                 if($value instanceof self){",
        "// Line_Reference 1977:                     unset($arguments[$index]); //hide PHPSandbox variable",
        "// Line_Reference 1978:                 }",
        "// Line_Reference 1979:             }",
        "// Line_Reference 1980:             return $arguments;",
        "// Line_Reference 1982:         /** Get PHPSandbox redefined function argument",
        "// Line_Reference 1984:          * @param   array           $arguments      Array result from func_get_args() is passed here",
        "// Line_Reference 1986:          * @param   int             $index          Requested func_get_arg index is passed here",
        "// Line_Reference 1988:          * @return  array           Returns the redefined argument",
        "// Line_Reference 1990:         public function _func_get_arg(array $arguments = array(), $index = 0){",
        "// Line_Reference 1991:             if($arguments[$index] instanceof self){",
        "// Line_Reference 1992:                 $index++;   //get next argument instead",
        "// Line_Reference 1994:             return isset($arguments[$index]) && !($arguments[$index] instanceof self) ? $arguments[$index] : null;",
        "// Line_Reference 1996:         /** Get PHPSandbox redefined number of function arguments",
        "// Line_Reference 1998:          * @param   array           $arguments      Array result from func_get_args() is passed here",
        "// Line_Reference 2000:          * @return  int             Returns the redefined number of function arguments",
        "// Line_Reference 2002:         public function _func_num_args(array $arguments = array()){",
        "// Line_Reference 2003:             $count = count($arguments);",
        "// Line_Reference 2004:             foreach($arguments as $argument){",
        "// Line_Reference 2005:                 if($argument instanceof self){",
        "// Line_Reference 2006:                     $count--;",
        "// Line_Reference 2007:                 }",
        "// Line_Reference 2009:             return $count > 0 ? $count : 0;",
        "// Line_Reference 6487:                 \"\\r\\n\" . 'if( PHP_MAJOR_VERSION >= 5 && PHP_MINOR_VERSION > 3){ $closure = $closure->bindTo(null); }' ."
    ]
}
