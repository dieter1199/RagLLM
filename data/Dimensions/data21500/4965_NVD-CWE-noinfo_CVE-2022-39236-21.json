{
    "cve_id": "CVE-2022-39236",
    "cve_description": "Matrix Javascript SDK is the Matrix Client-Server SDK for JavaScript. Starting with version 17.1.0-rc.1, improperly formed beacon events can disrupt or impede the matrix-js-sdk from functioning properly, potentially impacting the consumer's ability to process data safely. Note that the matrix-js-sdk can appear to be operating normally but be excluding or corrupting runtime data presented to the consumer. This is patched in matrix-js-sdk v19.7.0. Redacting applicable events, waiting for the sync processor to store data, and restarting the client are possible workarounds. Alternatively, redacting the applicable events and clearing all storage will fix the further perceived issues. Downgrading to an unaffected version, noting that such a version may be subject to other vulnerabilities, will additionally resolve the issue.",
    "cve_publish_date": "2022-09-28",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Resolve multiple CVEs\n\nCVE-2022-39249\nCVE-2022-39250\nCVE-2022-39251\nCVE-2022-39236",
    "type_of_change": "Modification",
    "filename_of_changes": "megolm.ts",
    "code_language": "TypeScript",
    "number_of_lines_added_for_mitigation": "108",
    "number_of_lines_deleted_vulnerable_to_cve": "17",
    "vulnerable_lines": [
        "// Line_Reference 38: import { MatrixEvent } from \"../..\";",
        "// Line_Reference 1192:     // events which we couldn't decrypt due to unknown sessions / indexes: map from",
        "// Line_Reference 1193:     // senderKey|sessionId to Set of MatrixEvents",
        "// Line_Reference 1297:         // success. We can remove the event from the pending list, if that hasn't",
        "// Line_Reference 1298:         // already happened.",
        "// Line_Reference 1299:         this.removeEventFromPendingList(event);",
        "// Line_Reference 1403:         if (!senderKey) {",
        "// Line_Reference 1404:             logger.error(\"key event has no sender key (not encrypted?)\");",
        "// Line_Reference 1421:             senderKey = content.sender_key;",
        "// Line_Reference 1438:         const extraSessionData: any = {};",
        "// Line_Reference 1456:             if (await this.retryDecryption(senderKey, content.session_id)) {",
        "// Line_Reference 1671:         const extraSessionData: any = {};",
        "// Line_Reference 1699:             this.retryDecryption(session.sender_key, session.session_id);",
        "// Line_Reference 1711:      * @return {Boolean} whether all messages were successfully decrypted",
        "// Line_Reference 1713:     private async retryDecryption(senderKey: string, sessionId: string): Promise<boolean> {",
        "// Line_Reference 1728:                 await ev.attemptDecryption(this.crypto, { isRetry: true });",
        "// Line_Reference 1734:         // If decrypted successfully, they'll have been removed from pendingEvents"
    ]
}
