{
    "cve_id": "CVE-2011-3209",
    "cve_description": "The div_long_long_rem implementation in include/asm-x86/div64.h in the Linux kernel before 2.6.26 on the x86 platform allows local users to cause a denial of service (Divide Error Fault and panic) via a clock_gettime system call.",
    "cve_publish_date": "2012-10-03",
    "cwe_id": "CWE-189",
    "cwe_name": "Numeric Errors",
    "cwe_description": "Weaknesses in this category are related to improper calculation or conversion of numbers.",
    "commit_message": "remove div_long_long_rem\n\nx86 is the only arch right now, which provides an optimized for\ndiv_long_long_rem and it has the downside that one has to be very careful that\nthe divide doesn't overflow.\n\nThe API is a little akward, as the arguments for the unsigned divide are\nsigned.  The signed version also doesn't handle a negative divisor and\nproduces worse code on 64bit archs.\n\nThere is little incentive to keep this API alive, so this converts the few\nusers to the new API.\n\nSigned-off-by: Roman Zippel <zippel@linux-m68k.org>\nCc: Ralf Baechle <ralf@linux-mips.org>\nCc: Ingo Molnar <mingo@elte.hu>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: john stultz <johnstul@us.ibm.com>\nCc: Christoph Lameter <clameter@sgi.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "div64.h",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "0",
    "number_of_lines_deleted_vulnerable_to_cve": "18",
    "vulnerable_lines": [
        "// Line_Reference 36: /*",
        "// Line_Reference 37:  * (long)X = ((long long)divs) / (long)div",
        "// Line_Reference 38:  * (long)rem = ((long long)divs) % (long)div",
        "// Line_Reference 39:  *",
        "// Line_Reference 40:  * Warning, this will do an exception if X overflows.",
        "// Line_Reference 41:  */",
        "// Line_Reference 42: #define div_long_long_rem(a, b, c) div_ll_X_l_rem(a, b, c)",
        "// Line_Reference 43: ",
        "// Line_Reference 44: static inline long div_ll_X_l_rem(long long divs, long div, long *rem)",
        "// Line_Reference 45: {",
        "// Line_Reference 46: \tlong dum2;",
        "// Line_Reference 47: \tasm(\"divl %2\":\"=a\"(dum2), \"=d\"(*rem)",
        "// Line_Reference 48: \t    : \"rm\"(div), \"A\"(divs));",
        "// Line_Reference 49: ",
        "// Line_Reference 50: \treturn dum2;",
        "// Line_Reference 51: ",
        "// Line_Reference 52: }",
        "// Line_Reference 53: "
    ]
}
