{
    "cve_id": "CVE-2022-34134",
    "cve_description": "Benjamin BALET Jorani v1.0 was discovered to contain a Cross-Site Request Forgery (CSRF) via the component /application/controllers/Users.php.",
    "cve_publish_date": "2022-06-28",
    "cwe_id": "CWE-352",
    "cwe_name": "Cross-Site Request Forgery (CSRF)",
    "cwe_description": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",
    "commit_message": "BF:security on users mgt with CSRF token fix #369",
    "type_of_change": "Modification",
    "filename_of_changes": "Users.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "25",
    "number_of_lines_deleted_vulnerable_to_cve": "44",
    "vulnerable_lines": [
        "// Line_Reference 49:      * Set a user as active (TRUE) or inactive (FALSE)",
        "// Line_Reference 50:      * @param int $id User identifier",
        "// Line_Reference 51:      * @param bool $active active (TRUE) or inactive (FALSE)",
        "// Line_Reference 54:     public function active($id, $active) {",
        "// Line_Reference 56:         $this->users_model->setActive($id, $active);",
        "// Line_Reference 57:         $this->session->set_flashdata('msg', lang('users_edit_flash_msg_success'));",
        "// Line_Reference 58:         redirect('users');",
        "// Line_Reference 59:     }",
        "// Line_Reference 60: ",
        "// Line_Reference 61:     /**",
        "// Line_Reference 62:      * Enable a user",
        "// Line_Reference 63:      * @param int $id User identifier",
        "// Line_Reference 64:      * @author Benjamin BALET <benjamin.balet@gmail.com>",
        "// Line_Reference 65:      */",
        "// Line_Reference 66:     public function enable($id) {",
        "// Line_Reference 67:         $this->active($id, TRUE);",
        "// Line_Reference 68:     }",
        "// Line_Reference 69: ",
        "// Line_Reference 70:     /**",
        "// Line_Reference 71:      * Disable a user",
        "// Line_Reference 72:      * @param int $id User identifier",
        "// Line_Reference 73:      * @author Benjamin BALET <benjamin.balet@gmail.com>",
        "// Line_Reference 74:      */",
        "// Line_Reference 75:     public function disable($id) {",
        "// Line_Reference 76:         $this->active($id, FALSE);",
        "// Line_Reference 197:     /**",
        "// Line_Reference 198:      * Delete a user. Log it as an error.",
        "// Line_Reference 199:      * @param int $id User identifier",
        "// Line_Reference 200:      * @author Benjamin BALET <benjamin.balet@gmail.com>",
        "// Line_Reference 201:      */",
        "// Line_Reference 202:     public function delete($id) {",
        "// Line_Reference 203:         $this->auth->checkIfOperationIsAllowed('delete_user');",
        "// Line_Reference 204:         //Test if user exists",
        "// Line_Reference 205:         $data['users_item'] = $this->users_model->getUsers($id);",
        "// Line_Reference 206:         if (empty($data['users_item'])) {",
        "// Line_Reference 207:             redirect('notfound');",
        "// Line_Reference 208:         } else {",
        "// Line_Reference 209:             $this->users_model->deleteUser($id);",
        "// Line_Reference 210:         }",
        "// Line_Reference 211:         log_message('error', 'User #' . $id . ' has been deleted by user #' . $this->session->userdata('id'));",
        "// Line_Reference 212:         $this->session->set_flashdata('msg', lang('users_delete_flash_msg_success'));",
        "// Line_Reference 213:         redirect('users');",
        "// Line_Reference 214:     }",
        "// Line_Reference 215: "
    ]
}
