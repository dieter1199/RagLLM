{
    "cve_id": "CVE-2015-3183",
    "cve_description": "The chunked transfer coding implementation in the Apache HTTP Server before 2.4.14 does not properly parse chunk headers, which allows remote attackers to conduct HTTP request smuggling attacks via a crafted request, related to mishandling of large chunk-size values and invalid chunk-extension characters in modules/http/http_filters.c.",
    "cve_publish_date": "2015-07-20",
    "cwe_id": "CWE-17",
    "cwe_name": "DEPRECATED: Code",
    "cwe_description": "This entry has been deprecated.  It was originally used for organizing the Development View (CWE-699) and some other views, but it introduced unnecessary complexity and depth to the resulting tree.",
    "commit_message": "Limit accepted chunk-size to 2^63-1 and be strict about chunk-ext\nauthorized characters.\n\nSubmitted by: Yann Ylavic\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpd/httpd/trunk@1684513 13f79535-47bb-0310-9956-ffa450edef68",
    "type_of_change": "Modification",
    "filename_of_changes": "http_filters.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "83",
    "number_of_lines_deleted_vulnerable_to_cve": "47",
    "vulnerable_lines": [
        "// Line_Reference 60: #define INVALID_CHAR -2",
        "// Line_Reference 61: ",
        "// Line_Reference 68:     apr_int16_t chunkbits;",
        "// Line_Reference 77:         BODY_CHUNK_END, /* chunk terminating CRLF */",
        "// Line_Reference 92:         apr_size_t len, int linelimit)",
        "// Line_Reference 102:         if (ctx->state == BODY_CHUNK_END) {",
        "// Line_Reference 114:                  * Detect invalid character at beginning. This also works for empty",
        "// Line_Reference 115:                  * chunk size lines.",
        "// Line_Reference 117:                 return APR_EGENERAL;",
        "// Line_Reference 123:             ctx->chunkbits = sizeof(long) * 8;",
        "// Line_Reference 127:         /* handle a chunk part, or a chunk extension */",
        "// Line_Reference 128:         /*",
        "// Line_Reference 129:          * In theory, we are supposed to expect CRLF only, but our",
        "// Line_Reference 130:          * test suite sends LF only. Tolerate a missing CR.",
        "// Line_Reference 131:          */",
        "// Line_Reference 132:         if (c == ';' || c == CR) {",
        "// Line_Reference 133:             ctx->state = BODY_CHUNK_EXT;",
        "// Line_Reference 134:         }",
        "// Line_Reference 135:         else if (c == LF) {",
        "// Line_Reference 143:         else if (ctx->state != BODY_CHUNK_EXT) {",
        "// Line_Reference 144:             int xvalue = 0;",
        "// Line_Reference 163:                 return APR_EGENERAL;",
        "// Line_Reference 167:             ctx->chunkbits -= 4;",
        "// Line_Reference 168:             if (ctx->chunkbits <= 0 || ctx->remaining < 0) {",
        "// Line_Reference 172: ",
        "// Line_Reference 235:         ap_input_mode_t mode, apr_read_type_e block, apr_off_t readbytes)",
        "// Line_Reference 285:                               \"Unknown Transfer-Encoding: %s;\"",
        "// Line_Reference 286:                               \" using read-until-close\", tenc);",
        "// Line_Reference 311:                 ap_log_rerror(",
        "// Line_Reference 312:                         APLOG_MARK, APLOG_INFO, 0, f->r, APLOGNO(01587)",
        "// Line_Reference 313:                         \"Invalid Content-Length\");",
        "// Line_Reference 315:                 return APR_ENOSPC;",
        "// Line_Reference 322:                 ap_log_rerror(",
        "// Line_Reference 323:                         APLOG_MARK, APLOG_INFO, 0, f->r, APLOGNO(01588)",
        "// Line_Reference 324:                         \"Requested content-length of %\" APR_OFF_T_FMT",
        "// Line_Reference 325:                         \" is larger than the configured limit\"",
        "// Line_Reference 326:                         \" of %\" APR_OFF_T_FMT, ctx->remaining, ctx->limit);",
        "// Line_Reference 404:         case BODY_CHUNK_END: {",
        "// Line_Reference 436:                         ap_log_rerror(",
        "// Line_Reference 437:                                 APLOG_MARK, APLOG_INFO, rv, f->r, APLOGNO(01590) \"Error reading chunk %s \", (APR_ENOSPC == rv) ? \"(overflow)\" : \"\");",
        "// Line_Reference 449:                 int merge_trailers =",
        "// Line_Reference 450:                     conf->merge_trailers == AP_MERGE_TRAILERS_ENABLE;",
        "// Line_Reference 451:                 return read_chunked_trailers(ctx, f, b, merge_trailers);",
        "// Line_Reference 525:                     ap_log_rerror(",
        "// Line_Reference 526:                             APLOG_MARK, APLOG_INFO, 0, f->r, APLOGNO(01591) \"Read content-length of %\" APR_OFF_T_FMT \" is larger than the configured limit\"",
        "// Line_Reference 527:                             \" of %\" APR_OFF_T_FMT, ctx->limit_used, ctx->limit);",
        "// Line_Reference 552:             break;"
    ]
}
