{
    "cve_id": "CVE-2014-125052",
    "cve_description": "A vulnerability was found in JervenBolleman sparql-identifiers and classified as critical. This issue affects some unknown processing of the file src/main/java/org/identifiers/db/RegistryDao.java. The manipulation leads to sql injection. The patch is named 44bb0db91c064e305b192fc73521d1dfd25bde52. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-217571.",
    "cve_publish_date": "2023-01-06",
    "cwe_id": "CWE-89",
    "cwe_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
    "cwe_description": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.",
    "commit_message": "Clean up DB code, remove some SQL injection holes.",
    "type_of_change": "Modification",
    "filename_of_changes": "RegistryDao.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "58",
    "number_of_lines_deleted_vulnerable_to_cve": "82",
    "vulnerable_lines": [
        "// Line_Reference 3: ",
        "// Line_Reference 14: ",
        "// Line_Reference 21: public class RegistryDao",
        "// Line_Reference 22: {",
        "// Line_Reference 23: \tprivate Connection connection = null;",
        "// Line_Reference 24: ",
        "// Line_Reference 25: ",
        "// Line_Reference 26: ",
        "// Line_Reference 27: ",
        "// Line_Reference 33: \tpublic List<URIextended> getSameAsURIs(String uri)",
        "// Line_Reference 34: \t{",
        "// Line_Reference 35:         Boolean error = false;   // if an error happens",
        "// Line_Reference 36:         PreparedStatement stmt = null;",
        "// Line_Reference 37:         ResultSet rs;",
        "// Line_Reference 38:         List<URIextended> urls = null;",
        "// Line_Reference 39: ",
        "// Line_Reference 40:         // initialisation of the database connection",
        "// Line_Reference 41: \t    connection = DbUtilities.initDbConnection();",
        "// Line_Reference 42: ",
        "// Line_Reference 43:         try",
        "// Line_Reference 44:         {",
        "// Line_Reference 46:             final String uriTobe = uri.substring(0,uri.indexOf(\"/\", 10));",
        "// Line_Reference 47: \t\t\tString query = \"SELECT convertPrefix, ptr_datatype FROM mir_resource WHERE `convertPrefix` LIKE '\"+uriTobe+\"%'\";",
        "// Line_Reference 48: ",
        "// Line_Reference 49:             try",
        "// Line_Reference 50:             {",
        "// Line_Reference 51:                 stmt = connection.prepareStatement(query);",
        "// Line_Reference 52:             }",
        "// Line_Reference 53:             catch (SQLException e)",
        "// Line_Reference 54:             {",
        "// Line_Reference 55:                 System.err.println(\"Error while creating the prepared statement!\");",
        "// Line_Reference 56:                 System.err.println(\"SQL Exception raised: \" + e.getMessage());",
        "// Line_Reference 57:             }",
        "// Line_Reference 58: ",
        "// Line_Reference 59:             //logger.debug(\"SQL prepared query: \" + stmt.toString());",
        "// Line_Reference 60:             rs = stmt.executeQuery();",
        "// Line_Reference 62:             String dataTypeId = null;",
        "// Line_Reference 63:             String identifier = null;",
        "// Line_Reference 65:             while (rs.next()) {",
        "// Line_Reference 66:                 String convertPrefix = rs.getString(\"convertPrefix\");",
        "// Line_Reference 67:                 if(uri.contains(convertPrefix)){",
        "// Line_Reference 68:                     dataTypeId = rs.getString(\"ptr_datatype\");",
        "// Line_Reference 69:                     identifier = uri.substring(convertPrefix.length());",
        "// Line_Reference 70:                 }",
        "// Line_Reference 72:             }",
        "// Line_Reference 74:             query = \"SELECT convertPrefix, obsolete FROM mir_resource WHERE ptr_datatype=\\\"\"+dataTypeId+\"\\\" and urischeme=1\";",
        "// Line_Reference 76:             try",
        "// Line_Reference 77:             {",
        "// Line_Reference 78:                 stmt = connection.prepareStatement(query);",
        "// Line_Reference 79:             }",
        "// Line_Reference 80:             catch (SQLException e)",
        "// Line_Reference 81:             {",
        "// Line_Reference 82:                 System.err.println(\"Error while creating the prepared statement!\");",
        "// Line_Reference 83:                 System.err.println(\"SQL Exception raised: \" + e.getMessage());",
        "// Line_Reference 84:             }",
        "// Line_Reference 85:             //logger.debug(\"SQL prepared query: \" + stmt.toString());",
        "// Line_Reference 86:             rs = stmt.executeQuery();",
        "// Line_Reference 88:             urls = new ArrayList<URIextended>();",
        "// Line_Reference 89:             while (rs.next())",
        "// Line_Reference 90:             {",
        "// Line_Reference 91:                 urls.add(new URIextended(rs.getString(\"convertPrefix\") + identifier, rs.getInt(\"obsolete\")));",
        "// Line_Reference 92:             }",
        "// Line_Reference 93:             rs.close();",
        "// Line_Reference 94:         }",
        "// Line_Reference 95:         catch (SQLException e)",
        "// Line_Reference 96:         {",
        "// Line_Reference 97:             //logger.error(\"Error during the processing of the result of a query.\");",
        "// Line_Reference 98:             //logger.error(\"SQL Exception raised: \" + e.getMessage());",
        "// Line_Reference 99:             error = true;",
        "// Line_Reference 100:         }",
        "// Line_Reference 101:         finally",
        "// Line_Reference 102:         {",
        "// Line_Reference 103:         \t// closes the database connection and statement",
        "// Line_Reference 104:             DbUtilities.closeDbConnection(connection, stmt);",
        "// Line_Reference 105:         }",
        "// Line_Reference 108:         // exception handling",
        "// Line_Reference 109:         if (error)",
        "// Line_Reference 110:         {",
        "// Line_Reference 111:             throw new RuntimeException(\"Sorry, an error occurred while dealing with your request.\");",
        "// Line_Reference 112:         }",
        "// Line_Reference 113:         System.out.println(\"u\"+urls.size());",
        "// Line_Reference 114:         return urls;"
    ]
}
