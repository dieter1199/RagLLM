{
    "cve_id": "CVE-2015-2320",
    "cve_description": "The TLS stack in Mono before 3.12.1 allows remote attackers to have unspecified impact via vectors related to client-side SSLv2 fallback.",
    "cve_publish_date": "2018-01-08",
    "cwe_id": "CWE-295",
    "cwe_name": "Improper Certificate Validation",
    "cwe_description": "The product does not validate, or incorrectly validates, a certificate.",
    "commit_message": "Remove the client-side SSLv2 fallback.\n\n    There's almost no SSLv3 web site left so a v2 fallback is only extra\n    code we do not need to carry forward.",
    "type_of_change": "Modification",
    "filename_of_changes": "RecordProtocol.cs",
    "code_language": "C#",
    "number_of_lines_added_for_mitigation": "1",
    "number_of_lines_deleted_vulnerable_to_cve": "168",
    "vulnerable_lines": [
        "// Line_Reference 522: \t\t\tswitch (contentType)",
        "// Line_Reference 523: \t\t\t{",
        "// Line_Reference 524: \t\t\t\tcase 0x80:",
        "// Line_Reference 525: \t\t\t\t\treturn this.ReadClientHelloV2(record);",
        "// Line_Reference 526: ",
        "// Line_Reference 527: \t\t\t\tdefault:",
        "// Line_Reference 528: \t\t\t\t\tif (!Enum.IsDefined(typeof(ContentType), (ContentType)contentType))",
        "// Line_Reference 529: \t\t\t\t\t{",
        "// Line_Reference 530: \t\t\t\t\t\tthrow new TlsException(AlertDescription.DecodeError);",
        "// Line_Reference 531: \t\t\t\t\t}",
        "// Line_Reference 532: \t\t\t\t\treturn this.ReadStandardRecordBuffer(record);",
        "// Line_Reference 533: \t\t\t}",
        "// Line_Reference 534: \t\t}",
        "// Line_Reference 535: ",
        "// Line_Reference 536: \t\tprivate byte[] ReadClientHelloV2 (Stream record)",
        "// Line_Reference 537: \t\t{",
        "// Line_Reference 538: \t\t\tint msgLength = record.ReadByte ();",
        "// Line_Reference 539: \t\t\t// process further only if the whole record is available",
        "// Line_Reference 540: \t\t\tif (record.CanSeek && (msgLength + 1 > record.Length))",
        "// Line_Reference 541: \t\t\t{",
        "// Line_Reference 542: \t\t\t\treturn null;",
        "// Line_Reference 543: \t\t\t}",
        "// Line_Reference 544: ",
        "// Line_Reference 545: \t\t\tbyte[] message = new byte[msgLength];",
        "// Line_Reference 546: \t\t\trecord.Read (message, 0, msgLength);",
        "// Line_Reference 547: ",
        "// Line_Reference 548: \t\t\tint msgType\t\t= message [0];",
        "// Line_Reference 549: \t\t\tif (msgType != 1)",
        "// Line_Reference 550: \t\t\t{",
        "// Line_Reference 551: \t\t\t\tthrow new TlsException(AlertDescription.DecodeError);",
        "// Line_Reference 552: \t\t\t}",
        "// Line_Reference 553: \t\t\tint protocol = (message [1] << 8 | message [2]);",
        "// Line_Reference 554: \t\t\tint cipherSpecLength = (message [3] << 8 | message [4]);",
        "// Line_Reference 555: \t\t\tint sessionIdLength = (message [5] << 8 | message [6]);",
        "// Line_Reference 556: \t\t\tint challengeLength = (message [7] << 8 | message [8]);",
        "// Line_Reference 557: \t\t\tint length = (challengeLength > 32) ? 32 : challengeLength;",
        "// Line_Reference 558: ",
        "// Line_Reference 559: \t\t\t// Read CipherSpecs",
        "// Line_Reference 560: \t\t\tbyte[] cipherSpecV2 = new byte[cipherSpecLength];",
        "// Line_Reference 561: \t\t\tBuffer.BlockCopy (message, 9, cipherSpecV2, 0, cipherSpecLength);",
        "// Line_Reference 562: ",
        "// Line_Reference 563: \t\t\t// Read session ID",
        "// Line_Reference 564: \t\t\tbyte[] sessionId = new byte[sessionIdLength];",
        "// Line_Reference 565: \t\t\tBuffer.BlockCopy (message, 9 + cipherSpecLength, sessionId, 0, sessionIdLength);",
        "// Line_Reference 566: ",
        "// Line_Reference 567: \t\t\t// Read challenge ID",
        "// Line_Reference 568: \t\t\tbyte[] challenge = new byte[challengeLength];",
        "// Line_Reference 569: \t\t\tBuffer.BlockCopy (message, 9 + cipherSpecLength + sessionIdLength, challenge, 0, challengeLength);",
        "// Line_Reference 570: ",
        "// Line_Reference 571: \t\t\tif (challengeLength < 16 || cipherSpecLength == 0 || (cipherSpecLength % 3) != 0)",
        "// Line_Reference 576: \t\t\t// Updated the Session ID",
        "// Line_Reference 577: \t\t\tif (sessionId.Length > 0)",
        "// Line_Reference 578: \t\t\t{",
        "// Line_Reference 579: \t\t\t\tthis.context.SessionId = sessionId;",
        "// Line_Reference 580: \t\t\t}",
        "// Line_Reference 581: ",
        "// Line_Reference 582: \t\t\t// Update the protocol version",
        "// Line_Reference 583: \t\t\tthis.Context.ChangeProtocol((short)protocol);",
        "// Line_Reference 584: ",
        "// Line_Reference 585: \t\t\t// Select the Cipher suite",
        "// Line_Reference 586: \t\t\tthis.ProcessCipherSpecV2Buffer(this.Context.SecurityProtocol, cipherSpecV2);",
        "// Line_Reference 587: ",
        "// Line_Reference 588: \t\t\t// Updated the Client Random",
        "// Line_Reference 589: \t\t\tthis.context.ClientRandom = new byte [32]; // Always 32",
        "// Line_Reference 590: \t\t\t// 1. if challenge is bigger than 32 bytes only use the last 32 bytes",
        "// Line_Reference 591: \t\t\t// 2. right justify (0) challenge in ClientRandom if less than 32",
        "// Line_Reference 592: \t\t\tBuffer.BlockCopy (challenge, challenge.Length - length, this.context.ClientRandom, 32 - length, length);",
        "// Line_Reference 593: ",
        "// Line_Reference 594: \t\t\t// Set",
        "// Line_Reference 595: \t\t\tthis.context.LastHandshakeMsg = HandshakeType.ClientHello;",
        "// Line_Reference 596: \t\t\tthis.context.ProtocolNegotiated = true;",
        "// Line_Reference 597: ",
        "// Line_Reference 598: \t\t\treturn message;",
        "// Line_Reference 599: \t\t}",
        "// Line_Reference 600: ",
        "// Line_Reference 601: \t\tprivate byte[] ReadStandardRecordBuffer (Stream record)",
        "// Line_Reference 602: \t\t{",
        "// Line_Reference 1040: ",
        "// Line_Reference 1041: \t\t#region CipherSpecV2 processing",
        "// Line_Reference 1042: ",
        "// Line_Reference 1043: \t\tprivate void ProcessCipherSpecV2Buffer (SecurityProtocolType protocol, byte[] buffer)",
        "// Line_Reference 1044: \t\t{",
        "// Line_Reference 1045: \t\t\tTlsStream codes = new TlsStream(buffer);",
        "// Line_Reference 1046: ",
        "// Line_Reference 1047: \t\t\tstring prefix = (protocol == SecurityProtocolType.Ssl3) ? \"SSL_\" : \"TLS_\";",
        "// Line_Reference 1048: ",
        "// Line_Reference 1049: \t\t\twhile (codes.Position < codes.Length)",
        "// Line_Reference 1050: \t\t\t{",
        "// Line_Reference 1051: \t\t\t\tbyte check = codes.ReadByte();",
        "// Line_Reference 1052: ",
        "// Line_Reference 1053: \t\t\t\tif (check == 0)",
        "// Line_Reference 1054: \t\t\t\t{",
        "// Line_Reference 1055: \t\t\t\t\t// SSL/TLS cipher spec",
        "// Line_Reference 1056: \t\t\t\t\tshort code = codes.ReadInt16();",
        "// Line_Reference 1057: \t\t\t\t\tint index = this.Context.SupportedCiphers.IndexOf(code);",
        "// Line_Reference 1058: \t\t\t\t\tif (index != -1)",
        "// Line_Reference 1059: \t\t\t\t\t{",
        "// Line_Reference 1060: \t\t\t\t\t\tthis.Context.Negotiating.Cipher = this.Context.SupportedCiphers[index];",
        "// Line_Reference 1061: \t\t\t\t\t\tbreak;",
        "// Line_Reference 1062: \t\t\t\t\t}",
        "// Line_Reference 1063: \t\t\t\t}",
        "// Line_Reference 1064: \t\t\t\telse",
        "// Line_Reference 1065: \t\t\t\t{",
        "// Line_Reference 1066: \t\t\t\t\tbyte[] tmp = new byte[2];",
        "// Line_Reference 1067: \t\t\t\t\tcodes.Read(tmp, 0, tmp.Length);",
        "// Line_Reference 1068: ",
        "// Line_Reference 1069: \t\t\t\t\tint tmpCode = ((check & 0xff) << 16) | ((tmp[0] & 0xff) << 8) | (tmp[1] & 0xff);",
        "// Line_Reference 1070: \t\t\t\t\tCipherSuite cipher = this.MapV2CipherCode(prefix, tmpCode);",
        "// Line_Reference 1071: ",
        "// Line_Reference 1072: \t\t\t\t\tif (cipher != null)",
        "// Line_Reference 1073: \t\t\t\t\t{",
        "// Line_Reference 1074: \t\t\t\t\t\tthis.Context.Negotiating.Cipher = cipher;",
        "// Line_Reference 1075: \t\t\t\t\t\tbreak;",
        "// Line_Reference 1076: \t\t\t\t\t}",
        "// Line_Reference 1077: \t\t\t\t}",
        "// Line_Reference 1078: \t\t\t}",
        "// Line_Reference 1079: ",
        "// Line_Reference 1080: \t\t\tif (this.Context.Negotiating == null)",
        "// Line_Reference 1081: \t\t\t{",
        "// Line_Reference 1082: \t\t\t\tthrow new TlsException(AlertDescription.InsuficientSecurity, \"Insuficient Security\");",
        "// Line_Reference 1083: \t\t\t}",
        "// Line_Reference 1084: \t\t}",
        "// Line_Reference 1085: ",
        "// Line_Reference 1086: \t\tprivate CipherSuite MapV2CipherCode(string prefix, int code)",
        "// Line_Reference 1087: \t\t{",
        "// Line_Reference 1088: \t\t\ttry",
        "// Line_Reference 1089: \t\t\t{",
        "// Line_Reference 1090: \t\t\t\tswitch (code)",
        "// Line_Reference 1091: \t\t\t\t{",
        "// Line_Reference 1092: \t\t\t\t\tcase 65664:",
        "// Line_Reference 1093: \t\t\t\t\t\t// TLS_RC4_128_WITH_MD5",
        "// Line_Reference 1094: \t\t\t\t\t\treturn this.Context.SupportedCiphers[prefix + \"RSA_WITH_RC4_128_MD5\"];",
        "// Line_Reference 1095: ",
        "// Line_Reference 1096: \t\t\t\t\tcase 131200:",
        "// Line_Reference 1097: \t\t\t\t\t\t// TLS_RC4_128_EXPORT40_WITH_MD5",
        "// Line_Reference 1098: \t\t\t\t\t\treturn this.Context.SupportedCiphers[prefix + \"RSA_EXPORT_WITH_RC4_40_MD5\"];",
        "// Line_Reference 1099: ",
        "// Line_Reference 1100: \t\t\t\t\tcase 196736:",
        "// Line_Reference 1101: \t\t\t\t\t\t// TLS_RC2_CBC_128_CBC_WITH_MD5",
        "// Line_Reference 1102: \t\t\t\t\t\treturn this.Context.SupportedCiphers[prefix + \"RSA_EXPORT_WITH_RC2_CBC_40_MD5\"];",
        "// Line_Reference 1103: ",
        "// Line_Reference 1104: \t\t\t\t\tcase 262272:",
        "// Line_Reference 1105: \t\t\t\t\t\t// TLS_RC2_CBC_128_CBC_EXPORT40_WITH_MD5",
        "// Line_Reference 1106: \t\t\t\t\t\treturn this.Context.SupportedCiphers[prefix + \"RSA_EXPORT_WITH_RC2_CBC_40_MD5\"];",
        "// Line_Reference 1107: ",
        "// Line_Reference 1108: \t\t\t\t\tcase 327808:",
        "// Line_Reference 1109: \t\t\t\t\t\t// TLS_IDEA_128_CBC_WITH_MD5",
        "// Line_Reference 1110: \t\t\t\t\t\treturn null;",
        "// Line_Reference 1111: ",
        "// Line_Reference 1112: \t\t\t\t\tcase 393280:",
        "// Line_Reference 1113: \t\t\t\t\t\t// TLS_DES_64_CBC_WITH_MD5",
        "// Line_Reference 1114: \t\t\t\t\t\treturn null;",
        "// Line_Reference 1115: ",
        "// Line_Reference 1116: \t\t\t\t\tcase 458944:",
        "// Line_Reference 1117: \t\t\t\t\t\t// TLS_DES_192_EDE3_CBC_WITH_MD5",
        "// Line_Reference 1118: \t\t\t\t\t\treturn null;",
        "// Line_Reference 1119: ",
        "// Line_Reference 1120: \t\t\t\t\tdefault:",
        "// Line_Reference 1121: \t\t\t\t\t\treturn null;",
        "// Line_Reference 1122: \t\t\t\t}",
        "// Line_Reference 1123: \t\t\t}",
        "// Line_Reference 1124: \t\t\tcatch",
        "// Line_Reference 1125: \t\t\t{",
        "// Line_Reference 1126: \t\t\t\treturn null;",
        "// Line_Reference 1127: \t\t\t}",
        "// Line_Reference 1128: \t\t}",
        "// Line_Reference 1129: ",
        "// Line_Reference 1130: \t\t#endregion"
    ]
}
