{
    "cve_id": "CVE-2012-3364",
    "cve_description": "Multiple stack-based buffer overflows in the Near Field Communication Controller Interface (NCI) in the Linux kernel before 3.4.5 allow remote attackers to cause a denial of service (crash) and possibly execute arbitrary code via incoming frames with crafted length fields.",
    "cve_publish_date": "2013-01-22",
    "cwe_id": "CWE-119",
    "cwe_name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
    "cwe_description": "The product performs operations on a memory buffer, but it reads from or writes to a memory location outside the buffer's intended boundary. This may result in read or write operations on unexpected memory locations that could be linked to other variables, data structures, or internal program data.",
    "commit_message": "NFC: Prevent multiple buffer overflows in NCI\n\nFix multiple remotely-exploitable stack-based buffer overflows due to\nthe NCI code pulling length fields directly from incoming frames and\ncopying too much data into statically-sized arrays.\n\nSigned-off-by: Dan Rosenberg <dan.j.rosenberg@gmail.com>\nCc: stable@kernel.org\nCc: security@kernel.org\nCc: Lauro Ramos Venancio <lauro.venancio@openbossa.org>\nCc: Aloisio Almeida Jr <aloisio.almeida@openbossa.org>\nCc: Samuel Ortiz <sameo@linux.intel.com>\nCc: David S. Miller <davem@davemloft.net>\nAcked-by: Ilan Elias <ilane@ti.com>\nSigned-off-by: Samuel Ortiz <sameo@linux.intel.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "ntf.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "5",
    "number_of_lines_deleted_vulnerable_to_cve": "5",
    "vulnerable_lines": [
        "// Line_Reference 109: \tnfca_poll->nfcid1_len = *data++;",
        "// Line_Reference 133: \tnfcb_poll->sensb_res_len = *data++;",
        "// Line_Reference 148: \tnfcf_poll->sensf_res_len = *data++;",
        "// Line_Reference 334: \t\tnfca_poll->rats_res_len = *data++;",
        "// Line_Reference 344: \t\tnfcb_poll->attrib_res_len = *data++;"
    ]
}
