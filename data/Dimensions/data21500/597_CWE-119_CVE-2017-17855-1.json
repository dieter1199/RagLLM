{
    "cve_id": "CVE-2017-17855",
    "cve_description": "kernel/bpf/verifier.c in the Linux kernel through 4.14.8 allows local users to cause a denial of service (memory corruption) or possibly have unspecified other impact by leveraging improper use of pointers in place of scalars.",
    "cve_publish_date": "2017-12-27",
    "cwe_id": "CWE-119",
    "cwe_name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
    "cwe_description": "The product performs operations on a memory buffer, but it reads from or writes to a memory location outside the buffer's intended boundary. This may result in read or write operations on unexpected memory locations that could be linked to other variables, data structures, or internal program data.",
    "commit_message": "bpf: don't prune branches when a scalar is replaced with a pointer\n\nThis could be made safe by passing through a reference to env and checking\nfor env->allow_ptr_leaks, but it would only work one way and is probably\nnot worth the hassle - not doing it will not directly lead to program\nrejection.\n\nFixes: f1174f77b50c (\"bpf/verifier: rework value tracking\")\nSigned-off-by: Jann Horn <jannh@google.com>\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>",
    "type_of_change": "Modification",
    "filename_of_changes": "verifier.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "7",
    "number_of_lines_deleted_vulnerable_to_cve": "8",
    "vulnerable_lines": [
        "// Line_Reference 3470: \t\t\t/* if we knew anything about the old value, we're not",
        "// Line_Reference 3471: \t\t\t * equal, because we can't know anything about the",
        "// Line_Reference 3472: \t\t\t * scalar value of the pointer in the new value.",
        "// Line_Reference 3474: \t\t\treturn rold->umin_value == 0 &&",
        "// Line_Reference 3475: \t\t\t       rold->umax_value == U64_MAX &&",
        "// Line_Reference 3476: \t\t\t       rold->smin_value == S64_MIN &&",
        "// Line_Reference 3477: \t\t\t       rold->smax_value == S64_MAX &&",
        "// Line_Reference 3478: \t\t\t       tnum_is_unknown(rold->var_off);"
    ]
}
