{
    "cve_id": "CVE-2019-16771",
    "cve_description": "Versions of Armeria 0.85.0 through and including 0.96.0 are vulnerable to HTTP response splitting, which allows remote attackers to inject arbitrary HTTP headers via CRLF sequences when unsanitized data is used to populate the headers of an HTTP response. This vulnerability has been patched in 0.97.0. Potential impacts of this vulnerability include cross-user defacement, cache poisoning, Cross-site scripting (XSS), and page hijacking.",
    "cve_publish_date": "2019-12-06",
    "cwe_id": "CWE-74",
    "cwe_name": "Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')",
    "cwe_description": "The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.",
    "commit_message": "Merge pull request from GHSA-35fr-h7jr-hh86\n\nMotivation:\n\nAn `HttpService` can produce a malformed HTTP response when a user\nspecified a malformed HTTP header values, such as:\n\n    ResponseHeaders.of(HttpStatus.OK\n                       \"my-header\", \"foo\\r\\nbad-header: bar\");\n\nModification:\n\n- Add strict header value validation to `HttpHeadersBase`\n- Add strict header name validation to `HttpHeaderNames.of()`, which is\n  used by `HttpHeadersBase`.\n\nResult:\n\n- It is not possible anymore to send a bad header value which can be\n  misused for sending additional headers or injecting arbitrary content.",
    "type_of_change": "Modification",
    "filename_of_changes": "HttpHeadersBaseTest.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "81",
    "number_of_lines_deleted_vulnerable_to_cve": "59",
    "vulnerable_lines": [
        "// Line_Reference 34: import static org.junit.Assert.fail;",
        "// Line_Reference 42: import org.junit.Test;",
        "// Line_Reference 49: public class HttpHeadersBaseTest {",
        "// Line_Reference 52:     public void testEqualsInsertionOrderSameHeaderName() {",
        "// Line_Reference 63:     public void testEqualsInsertionOrderDifferentHeaderNames() {",
        "// Line_Reference 76:     public void addShouldIncreaseAndRemoveShouldDecreaseTheSize() {",
        "// Line_Reference 96:     public void afterClearHeadersShouldBeEmpty() {",
        "// Line_Reference 109:     public void removingANameForASecondTimeShouldReturnFalse() {",
        "// Line_Reference 118:     public void multipleValuesPerNameShouldBeAllowed() {",
        "// Line_Reference 131:     public void multipleValuesPerNameIteratorWithOtherNames() {",
        "// Line_Reference 149:     public void multipleValuesPerNameIterator() {",
        "// Line_Reference 160:     public void multipleValuesPerNameIteratorEmpty() {",
        "// Line_Reference 168:     public void testContains() {",
        "// Line_Reference 203:     public void testCopy() throws Exception {",
        "// Line_Reference 242:     public void canMixConvertedAndNormalValues() {",
        "// Line_Reference 254:     public void testGetAndRemove() {",
        "// Line_Reference 270:     public void whenNameContainsMultipleValuesGetShouldReturnTheFirst() {",
        "// Line_Reference 277:     public void getWithDefaultValueWorks() {",
        "// Line_Reference 286:     public void setShouldOverWritePreviousValue() {",
        "// Line_Reference 297:     public void setAllShouldOverwriteSomeAndLeaveOthersUntouched() {",
        "// Line_Reference 322:     public void headersWithSameNamesAndValuesShouldBeEquivalent() {",
        "// Line_Reference 343:     public void emptyHeadersShouldBeEqual() {",
        "// Line_Reference 351:     public void headersWithSameNamesButDifferentValuesShouldNotBeEquivalent() {",
        "// Line_Reference 360:     public void subsetOfHeadersShouldNotBeEquivalent() {",
        "// Line_Reference 370:     public void headersWithDifferentNamesAndValuesShouldNotBeEquivalent() {",
        "// Line_Reference 381:     @Test(expected = NoSuchElementException.class)",
        "// Line_Reference 382:     public void iterateEmptyHeadersShouldThrow() {",
        "// Line_Reference 385:         iterator.next();",
        "// Line_Reference 389:     public void iteratorShouldReturnAllNameValuePairs() {",
        "// Line_Reference 406:     public void iteratorSetShouldFail() {",
        "// Line_Reference 417:     public void testEntryEquals() {",
        "// Line_Reference 447:     public void getAllReturnsEmptyListForUnknownName() {",
        "// Line_Reference 453:     public void setHeadersShouldClearAndOverwrite() {",
        "// Line_Reference 466:     public void setHeadersShouldOnlyOverwriteHeaders() {",
        "// Line_Reference 484:     @Test(expected = IllegalArgumentException.class)",
        "// Line_Reference 485:     public void testAddSelf() {",
        "// Line_Reference 487:         headers.add(headers);",
        "// Line_Reference 491:     public void testSetSelfIsNoOp() {",
        "// Line_Reference 499:     public void testToString() {",
        "// Line_Reference 530:     public void testNotThrowWhenConvertFails() {",
        "// Line_Reference 552:     public void testGetOperations() {",
        "// Line_Reference 563:     @Test(expected = NullPointerException.class)",
        "// Line_Reference 564:     public void testSetNullHeaderValue() {",
        "// Line_Reference 565:         final HttpHeadersBase headers = newEmptyHeaders();",
        "// Line_Reference 566:         headers.set(\"test\", (String) null);",
        "// Line_Reference 571:     @Test(expected = NullPointerException.class)",
        "// Line_Reference 572:     public void nullHeaderNameNotAllowed() {",
        "// Line_Reference 573:         newEmptyHeaders().add(null, \"foo\");",
        "// Line_Reference 576:     @Test(expected = IllegalArgumentException.class)",
        "// Line_Reference 577:     public void emptyHeaderNameNotAllowed() {",
        "// Line_Reference 578:         newEmptyHeaders().add(\"\", \"foo\");",
        "// Line_Reference 582:     public void testPseudoHeadersMustComeFirstWhenIterating() {",
        "// Line_Reference 589:     public void testPseudoHeadersWithRemovePreservesPseudoIterationOrder() {",
        "// Line_Reference 617:     public void testPseudoHeadersWithClearDoesNotLeak() {",
        "// Line_Reference 646:     public void testSetOrdersPseudoHeadersCorrectly() {",
        "// Line_Reference 666:     public void testHeaderNameNormalization() {",
        "// Line_Reference 676:     public void testClearResetsPseudoHeaderDivision() {",
        "// Line_Reference 687:     public void testContainsNameAndValue() {",
        "// Line_Reference 696:     public void testUri() {"
    ]
}
