{
    "cve_id": "CVE-2021-3609",
    "cve_description": ".A flaw was found in the CAN BCM networking protocol in the Linux kernel, where a local attacker can abuse a flaw in the CAN subsystem to corrupt memory, crash the system or escalate privileges. This race condition in net/can/bcm.c in the Linux kernel allows for local privilege escalation to root.",
    "cve_publish_date": "2022-03-03",
    "cwe_id": "CWE-362",
    "cwe_name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
    "cwe_description": "The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.",
    "commit_message": "can: bcm: delay release of struct bcm_op after synchronize_rcu()\n\ncan_rx_register() callbacks may be called concurrently to the call to\ncan_rx_unregister(). The callbacks and callback data, though, are\nprotected by RCU and the struct sock reference count.\n\nSo the callback data is really attached to the life of sk, meaning\nthat it should be released on sk_destruct. However, bcm_remove_op()\ncalls tasklet_kill(), and RCU callbacks may be called under RCU\nsoftirq, so that cannot be used on kernels before the introduction of\nHRTIMER_MODE_SOFT.\n\nHowever, bcm_rx_handler() is called under RCU protection, so after\ncalling can_rx_unregister(), we may call synchronize_rcu() in order to\nwait for any RCU read-side critical sections to finish. That is,\nbcm_rx_handler() won't be called anymore for those ops. So, we only\nfree them, after we do that synchronize_rcu().\n\nFixes: ffd980f976e7 (\"[CAN]: Add broadcast manager (bcm) protocol\")\nLink: https://lore.kernel.org/r/20210619161813.2098382-1-cascardo@canonical.com\nCc: linux-stable <stable@vger.kernel.org>\nReported-by: syzbot+0f7e7e5e2f4f40fa89c0@syzkaller.appspotmail.com\nReported-by: Norbert Slusarek <nslusarek@gmx.net>\nSigned-off-by: Thadeu Lima de Souza Cascardo <cascardo@canonical.com>\nAcked-by: Oliver Hartkopp <socketcan@hartkopp.net>\nSigned-off-by: Marc Kleine-Budde <mkl@pengutronix.de>",
    "type_of_change": "Modification",
    "filename_of_changes": "bcm.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "6",
    "number_of_lines_deleted_vulnerable_to_cve": "1",
    "vulnerable_lines": [
        "// Line_Reference 1536: \t\tbcm_remove_op(op);"
    ]
}
