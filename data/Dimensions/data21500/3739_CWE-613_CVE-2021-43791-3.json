{
    "cve_id": "CVE-2021-43791",
    "cve_description": "Zulip is an open source group chat application that combines real-time chat with threaded conversations. In affected versions expiration dates on the confirmation objects associated with email invitations were not enforced properly in the new account registration flow. A confirmation link takes a user to the check_prereg_key_and_redirect endpoint, before getting redirected to POST to /accounts/register/. The problem was that validation was happening in the check_prereg_key_and_redirect part and not in /accounts/register/ - meaning that one could submit an expired confirmation key and be able to register. The issue is fixed in Zulip 4.8. There are no known workarounds and users are advised to upgrade as soon as possible.",
    "cve_publish_date": "2021-12-02",
    "cwe_id": "CWE-613",
    "cwe_name": "Insufficient Session Expiration",
    "cwe_description": "According to WASC, \"Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization.\"",
    "commit_message": "CVE-2021-43791: Validate confirmation keys in /accounts/register/ codepath.\n\nA confirmation link takes a user to the check_prereg_key_and_redirect\nendpoint, before getting redirected to POST to /accounts/register/. The\nproblem was that validation was happening in the check_prereg_key_and_redirect\npart and not in /accounts/register/ - meaning that one could submit an\nexpired confirmation key and be able to register.\n\nWe fix this by moving validation into /accouts/register/.",
    "type_of_change": "Modification",
    "filename_of_changes": "test_signup.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "16",
    "number_of_lines_deleted_vulnerable_to_cve": "6",
    "vulnerable_lines": [
        "// Line_Reference 858:         self.assert_length(queries, 89)",
        "// Line_Reference 2017:         url = \"/accounts/do_confirm/\" + email_change_key",
        "// Line_Reference 2018:         result = self.client_get(url)",
        "// Line_Reference 2035:         target_url = \"/\" + url.split(\"/\", 3)[3]",
        "// Line_Reference 2036:         result = self.client_get(target_url)",
        "// Line_Reference 2127:         self.assert_in_response(\"The registration link has expired or is not valid.\", response)"
    ]
}
