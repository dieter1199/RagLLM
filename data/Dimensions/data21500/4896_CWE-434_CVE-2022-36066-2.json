{
    "cve_id": "CVE-2022-36066",
    "cve_description": "Discourse is an open source discussion platform. In versions prior to 2.8.9 on the `stable` branch and prior to 2.9.0.beta10 on the `beta` and `tests-passed` branches, admins can upload a maliciously crafted Zip or Gzip Tar archive to write files at arbitrary locations and trigger remote code execution. The problem is patched in version 2.8.9 on the `stable` branch and version 2.9.0.beta10 on the `beta` and `tests-passed` branches. There are no known workarounds.",
    "cve_publish_date": "2022-09-29",
    "cwe_id": "CWE-434",
    "cwe_name": "Unrestricted Upload of File with Dangerous Type",
    "cwe_description": "The product allows the upload or transfer of dangerous file types that are automatically processed within its environment.",
    "commit_message": "SECURITY: Prevent arbitrary file write when decompressing files (#18421)\n\n* SECURITY: Prevent arbitrary file write when decompressing files\r\n* FIX: Allow decompressing files into symlinked directories\r\n\r\nCo-authored-by: OsamaSayegh <asooomaasoooma90@gmail.com>\r\nCo-authored-by: Gerhard Schlager <gerhard.schlager@discourse.org>",
    "type_of_change": "Modification",
    "filename_of_changes": "engine_spec.rb",
    "code_language": "Ruby",
    "number_of_lines_added_for_mitigation": "131",
    "number_of_lines_deleted_vulnerable_to_cve": "20",
    "vulnerable_lines": [
        "// Line_Reference 7:     @temp_folder = \"#{Pathname.new(Dir.tmpdir).realpath}/#{SecureRandom.hex}\"",
        "// Line_Reference 8:     @folder_name = 'test'",
        "// Line_Reference 9: ",
        "// Line_Reference 10:     FileUtils.mkdir(@temp_folder)",
        "// Line_Reference 11:     Dir.chdir(@temp_folder) do",
        "// Line_Reference 12:       FileUtils.mkdir_p(\"#{@folder_name}/a\")",
        "// Line_Reference 13:       File.write(\"#{@folder_name}/hello.txt\", 'hello world')",
        "// Line_Reference 14:       File.write(\"#{@folder_name}/a/inner\", 'hello world inner')",
        "// Line_Reference 18:   after { FileUtils.rm_rf @temp_folder }",
        "// Line_Reference 27:       Dir.chdir(@temp_folder) do",
        "// Line_Reference 28:         @compressed_path = Compression::Engine.engine_for(\"#{@folder_name}#{extension}\").compress(@temp_folder, @folder_name)",
        "// Line_Reference 29:         FileUtils.rm_rf(\"#{@folder_name}/\")",
        "// Line_Reference 36:       it 'decompress the folder and inspect files correctly' do",
        "// Line_Reference 39:         engine.decompress(@temp_folder, \"#{@temp_folder}/#{@folder_name}.zip\", available_size)",
        "// Line_Reference 41:         expect(read_file(\"test/hello.txt\")).to eq(\"hello world\")",
        "// Line_Reference 42:         expect(read_file(\"test/a/inner\")).to eq(\"hello world inner\")",
        "// Line_Reference 49:       it 'decompress the folder and inspect files correctly' do",
        "// Line_Reference 52:         engine.decompress(@temp_folder, \"#{@temp_folder}/#{@folder_name}.tar.gz\", available_size)",
        "// Line_Reference 65:         engine.decompress(@temp_folder, \"#{@temp_folder}/#{@folder_name}.tar\", available_size)",
        "// Line_Reference 74:     File.read(\"#{@temp_folder}/#{relative_path}\")"
    ]
}
