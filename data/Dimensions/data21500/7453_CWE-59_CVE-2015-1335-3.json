{
    "cve_id": "CVE-2015-1335",
    "cve_description": "lxc-start in lxc before 1.0.8 and 1.1.x before 1.1.4 allows local container administrators to escape AppArmor confinement via a symlink attack on a (1) mount target or (2) bind mount source.",
    "cve_publish_date": "2015-10-01",
    "cwe_id": "CWE-59",
    "cwe_name": "Improper Link Resolution Before File Access ('Link Following')",
    "cwe_description": "The product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.",
    "commit_message": "CVE-2015-1335: Protect container mounts against symlinks\n\nWhen a container starts up, lxc sets up the container's inital fstree\nby doing a bunch of mounting, guided by the container configuration\nfile.  The container config is owned by the admin or user on the host,\nso we do not try to guard against bad entries.  However, since the\nmount target is in the container, it's possible that the container admin\ncould divert the mount with symbolic links.  This could bypass proper\ncontainer startup (i.e. confinement of a root-owned container by the\nrestrictive apparmor policy, by diverting the required write to\n/proc/self/attr/current), or bypass the (path-based) apparmor policy\nby diverting, say, /proc to /mnt in the container.\n\nTo prevent this,\n\n1. do not allow mounts to paths containing symbolic links\n\n2. do not allow bind mounts from relative paths containing symbolic\nlinks.\n\nDetails:\n\nDefine safe_mount which ensures that the container has not inserted any\nsymbolic links into any mount targets for mounts to be done during\ncontainer setup.\n\nThe host's mount path may contain symbolic links.  As it is under the\ncontrol of the administrator, that's ok.  So safe_mount begins the check\nfor symbolic links after the rootfs->mount, by opening that directory.\n\nIt opens each directory along the path using openat() relative to the\nparent directory using O_NOFOLLOW.  When the target is reached, it\nmounts onto /proc/self/fd/<targetfd>.\n\nUse safe_mount() in mount_entry(), when mounting container proc,\nand when needed.  In particular, safe_mount() need not be used in\nany case where:\n\n1. the mount is done in the container's namespace\n2. the mount is for the container's rootfs\n3. the mount is relative to a tmpfs or proc/sysfs which we have\n   just safe_mount()ed ourselves\n\nSince we were using proc/net as a temporary placeholder for /proc/sys/net\nduring container startup, and proc/net is a symbolic link, use proc/tty\ninstead.\n\nUpdate the lxc.container.conf manpage with details about the new\nrestrictions.\n\nFinally, add a testcase to test some symbolic link possibilities.\n\nReported-by: Roman Fiedler\nSigned-off-by: Serge Hallyn <serge.hallyn@ubuntu.com>\nAcked-by: St√©phane Graber <stgraber@ubuntu.com>",
    "type_of_change": "Modification",
    "filename_of_changes": "conf.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "19",
    "number_of_lines_deleted_vulnerable_to_cve": "16",
    "vulnerable_lines": [
        "// Line_Reference 772: \t\t{ LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, \"%r/proc/sys/net\",                                   \"%r/proc/net\",                  NULL,       MS_BIND,                        NULL },",
        "// Line_Reference 775: \t\t{ LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, \"%r/proc/net\",                                       \"%r/proc/sys/net\",              NULL,       MS_MOVE,                        NULL },",
        "// Line_Reference 818: \t\t\tr = mount(source, destination, default_mounts[i].fstype, mflags, default_mounts[i].options);",
        "// Line_Reference 1170: \tif (mount(\"none\", path, \"tmpfs\", 0, \"size=100000,mode=755\")) {",
        "// Line_Reference 1255: \t\t\tif (mount(hostpath, path, 0, MS_BIND, NULL) != 0) {",
        "// Line_Reference 1508: \tif (mount(console->name, path, \"none\", MS_BIND, 0)) {",
        "// Line_Reference 1563: \tif (mount(console->name, lxcpath, \"none\", MS_BIND, 0)) {",
        "// Line_Reference 1713: \t\t       const char *data, int optional)",
        "// Line_Reference 1719: \tif (mount(fsname, target, fstype, mountflags & ~MS_REMOUNT, data)) {",
        "// Line_Reference 1766: \t\t\t  mountflags | MS_REMOUNT, data)) {",
        "// Line_Reference 1846:                  const char* path)",
        "// Line_Reference 1866: \t\t\t  mntflags, mntdata, optional);",
        "// Line_Reference 1875:   return mount_entry_on_generic(mntent, mntent->mnt_dir);",
        "// Line_Reference 1922: \treturn mount_entry_on_generic(mntent, path);",
        "// Line_Reference 1938: \treturn mount_entry_on_generic(mntent, path);",
        "// Line_Reference 3605: \tret = mount(path, destpath, \"none\", MS_BIND, NULL);"
    ]
}
