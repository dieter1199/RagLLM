{
    "cve_id": "CVE-2021-28041",
    "cve_description": "ssh-agent in OpenSSH before 8.5 has a double free that may be relevant in a few less-common scenarios, such as unconstrained agent-socket access on a legacy operating system, or the forwarding of an agent to an attacker-controlled host.",
    "cve_publish_date": "2021-03-05",
    "cwe_id": "CWE-415",
    "cwe_name": "Double Free",
    "cwe_description": "The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations.",
    "commit_message": "upstream: factor SSH_AGENT_CONSTRAIN_EXTENSION parsing into its own\n\nfunction and remove an unused variable; ok dtucker@\n\nOpenBSD-Commit-ID: e1a938657fbf7ef0ba5e73b30365734a0cc96559",
    "type_of_change": "Modification",
    "filename_of_changes": "ssh-agent.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "59",
    "number_of_lines_deleted_vulnerable_to_cve": "41",
    "vulnerable_lines": [
        "// Line_Reference 1: /* $OpenBSD: ssh-agent.c,v 1.276 2021/02/02 22:35:14 djm Exp $ */",
        "// Line_Reference 584: \tchar *ext_name = NULL;",
        "// Line_Reference 585: \tstruct sshbuf *b = NULL;",
        "// Line_Reference 590: \t\t\tgoto err;",
        "// Line_Reference 596: \t\t\t\tgoto err;",
        "// Line_Reference 600: \t\t\t\tgoto err;",
        "// Line_Reference 608: \t\t\t\tgoto err;",
        "// Line_Reference 615: \t\t\t\tgoto err;",
        "// Line_Reference 619: \t\t\t\tgoto err;",
        "// Line_Reference 623: \t\t\t\tgoto err;",
        "// Line_Reference 627: \t\t\t\tgoto err;",
        "// Line_Reference 631: \t\t\tif ((r = sshbuf_get_cstring(m, &ext_name, NULL)) != 0) {",
        "// Line_Reference 632: \t\t\t\terror_fr(r, \"parse constraint extension\");",
        "// Line_Reference 633: \t\t\t\tgoto err;",
        "// Line_Reference 634: \t\t\t}",
        "// Line_Reference 635: \t\t\tdebug_f(\"constraint ext %s\", ext_name);",
        "// Line_Reference 636: \t\t\tif (strcmp(ext_name, \"sk-provider@openssh.com\") == 0) {",
        "// Line_Reference 637: \t\t\t\tif (sk_providerp == NULL) {",
        "// Line_Reference 638: \t\t\t\t\terror_f(\"%s not valid here\", ext_name);",
        "// Line_Reference 639: \t\t\t\t\tgoto err;",
        "// Line_Reference 640: \t\t\t\t}",
        "// Line_Reference 641: \t\t\t\tif (*sk_providerp != NULL) {",
        "// Line_Reference 642: \t\t\t\t\terror_f(\"%s already set\", ext_name);",
        "// Line_Reference 643: \t\t\t\t\tgoto err;",
        "// Line_Reference 644: \t\t\t\t}",
        "// Line_Reference 645: \t\t\t\tif ((r = sshbuf_get_cstring(m,",
        "// Line_Reference 646: \t\t\t\t    sk_providerp, NULL)) != 0) {",
        "// Line_Reference 647: \t\t\t\t\terror_fr(r, \"parse %s\", ext_name);",
        "// Line_Reference 648: \t\t\t\t\tgoto err;",
        "// Line_Reference 649: \t\t\t\t}",
        "// Line_Reference 650: \t\t\t} else {",
        "// Line_Reference 651: \t\t\t\terror_f(\"unsupported constraint \\\"%s\\\"\",",
        "// Line_Reference 652: \t\t\t\t    ext_name);",
        "// Line_Reference 653: \t\t\t\tgoto err;",
        "// Line_Reference 654: \t\t\t}",
        "// Line_Reference 655: \t\t\tfree(ext_name);",
        "// Line_Reference 659:  err:",
        "// Line_Reference 660: \t\t\tfree(ext_name);",
        "// Line_Reference 661: \t\t\tsshbuf_free(b);",
        "// Line_Reference 662: \t\t\treturn -1;",
        "// Line_Reference 666: \treturn 0;"
    ]
}
