{
    "cve_id": "CVE-2023-5572",
    "cve_description": "Server-Side Request Forgery (SSRF) in GitHub repository vriteio/vrite prior to 0.3.0.",
    "cve_publish_date": "2023-10-13",
    "cwe_id": "CWE-918",
    "cwe_name": "Server-Side Request Forgery (SSRF)",
    "cwe_description": "The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.",
    "commit_message": "Vrite v0.3 (#45)\n\n- Replace wrapper with element;\r\n- Add XML-like syntax for elements;\r\n- Redesign editor block menus;\r\n- Add MDX extension;\r\n- Allow CORS API access;\r\n- Restructure @vrite/backend;",
    "type_of_change": "Modification",
    "filename_of_changes": "workspace-settings.ts",
    "code_language": "TypeScript",
    "number_of_lines_added_for_mitigation": "8",
    "number_of_lines_deleted_vulnerable_to_cve": "126",
    "vulnerable_lines": [
        "// Line_Reference 1: import { procedure, router } from \"../lib/trpc\";",
        "// Line_Reference 2: import { isAuthenticated } from \"../lib/middleware\";",
        "// Line_Reference 8:   WorkspaceSettings,",
        "// Line_Reference 9:   wrapper,",
        "// Line_Reference 12:   workspaceSettings,",
        "// Line_Reference 13:   Wrapper",
        "// Line_Reference 15: import * as errors from \"#lib/errors\";",
        "// Line_Reference 16: import { createEventPublisher, createEventSubscription } from \"#lib/pub-sub\";",
        "// Line_Reference 18: type WorkspaceSettingsEvent =",
        "// Line_Reference 19:   | {",
        "// Line_Reference 20:       action: \"update\";",
        "// Line_Reference 21:       data: Partial<Omit<WorkspaceSettings, \"id\">>;",
        "// Line_Reference 22:     }",
        "// Line_Reference 23:   | {",
        "// Line_Reference 24:       action: \"createWrapper\";",
        "// Line_Reference 25:       data: Wrapper;",
        "// Line_Reference 26:     }",
        "// Line_Reference 27:   | {",
        "// Line_Reference 28:       action: \"deleteWrapper\";",
        "// Line_Reference 29:       data: Pick<Wrapper, \"key\">;",
        "// Line_Reference 30:     };",
        "// Line_Reference 31: ",
        "// Line_Reference 32: const publishEvent = createEventPublisher<WorkspaceSettingsEvent>((workspaceId) => {",
        "// Line_Reference 33:   return `workspaceSettings:${workspaceId}`;",
        "// Line_Reference 34: });",
        "// Line_Reference 61:         embeds: workspaceSettings.embeds,",
        "// Line_Reference 62:         wrappers: workspaceSettings.wrappers || []",
        "// Line_Reference 63:       };",
        "// Line_Reference 64:     }),",
        "// Line_Reference 65:   createWrapper: authenticatedProcedure",
        "// Line_Reference 66:     .meta({",
        "// Line_Reference 67:       openapi: { method: \"POST\", path: `${basePath}/wrapper`, protect: true },",
        "// Line_Reference 68:       permissions: { session: [\"manageWorkspace\"], token: [\"workspace:write\"] }",
        "// Line_Reference 69:     })",
        "// Line_Reference 70:     .input(wrapper)",
        "// Line_Reference 71:     .output(z.object({ key: wrapper.shape.key }))",
        "// Line_Reference 72:     .mutation(async ({ input, ctx }) => {",
        "// Line_Reference 73:       const extensionId = ctx.req.headers[\"x-vrite-extension-id\"] as string | undefined;",
        "// Line_Reference 74:       const workspaceSettingsCollection = getWorkspaceSettingsCollection(ctx.db);",
        "// Line_Reference 75:       const workspaceSettings = await workspaceSettingsCollection.findOne({",
        "// Line_Reference 76:         workspaceId: ctx.auth.workspaceId",
        "// Line_Reference 77:       });",
        "// Line_Reference 78: ",
        "// Line_Reference 79:       if (!workspaceSettings) throw errors.notFound(\"workspaceSettings\");",
        "// Line_Reference 80: ",
        "// Line_Reference 81:       const sameKeyWrapperIndex =",
        "// Line_Reference 82:         workspaceSettings.wrappers?.findIndex((wrapper) => wrapper.key === input.key) || -1;",
        "// Line_Reference 83: ",
        "// Line_Reference 84:       if (sameKeyWrapperIndex >= 0) {",
        "// Line_Reference 85:         await workspaceSettingsCollection.updateOne(",
        "// Line_Reference 86:           {",
        "// Line_Reference 87:             workspaceId: ctx.auth.workspaceId",
        "// Line_Reference 88:           },",
        "// Line_Reference 89:           {",
        "// Line_Reference 90:             $set: {",
        "// Line_Reference 91:               wrappers: (workspaceSettings.wrappers || []).map((item, index) => {",
        "// Line_Reference 92:                 if (index === sameKeyWrapperIndex) {",
        "// Line_Reference 93:                   return {",
        "// Line_Reference 94:                     ...item,",
        "// Line_Reference 95:                     ...input,",
        "// Line_Reference 96:                     ...(extensionId && { extension: item.extension || true })",
        "// Line_Reference 97:                   };",
        "// Line_Reference 98:                 }",
        "// Line_Reference 99: ",
        "// Line_Reference 100:                 return item;",
        "// Line_Reference 101:               })",
        "// Line_Reference 102:             }",
        "// Line_Reference 103:           }",
        "// Line_Reference 104:         );",
        "// Line_Reference 105:       } else {",
        "// Line_Reference 106:         await workspaceSettingsCollection.updateOne(",
        "// Line_Reference 107:           {",
        "// Line_Reference 108:             workspaceId: ctx.auth.workspaceId",
        "// Line_Reference 109:           },",
        "// Line_Reference 110:           {",
        "// Line_Reference 111:             $push: {",
        "// Line_Reference 112:               wrappers: {",
        "// Line_Reference 113:                 ...input,",
        "// Line_Reference 114:                 ...(extensionId && { extension: true })",
        "// Line_Reference 115:               }",
        "// Line_Reference 116:             }",
        "// Line_Reference 117:           }",
        "// Line_Reference 118:         );",
        "// Line_Reference 119:       }",
        "// Line_Reference 120: ",
        "// Line_Reference 121:       publishEvent(ctx, `${ctx.auth.workspaceId}`, {",
        "// Line_Reference 122:         action: \"createWrapper\",",
        "// Line_Reference 123:         data: input",
        "// Line_Reference 124:       });",
        "// Line_Reference 125: ",
        "// Line_Reference 126:       return {",
        "// Line_Reference 127:         key: input.key",
        "// Line_Reference 130:   deleteWrapper: authenticatedProcedure",
        "// Line_Reference 131:     .meta({",
        "// Line_Reference 132:       openapi: { method: \"DELETE\", path: `${basePath}/wrapper`, protect: true },",
        "// Line_Reference 133:       permissions: { session: [\"manageWorkspace\"], token: [\"workspace:write\"] }",
        "// Line_Reference 134:     })",
        "// Line_Reference 135:     .input(wrapper.pick({ key: true }))",
        "// Line_Reference 136:     .output(z.void())",
        "// Line_Reference 137:     .mutation(async ({ input, ctx }) => {",
        "// Line_Reference 138:       const workspaceSettingsCollection = getWorkspaceSettingsCollection(ctx.db);",
        "// Line_Reference 139: ",
        "// Line_Reference 140:       await workspaceSettingsCollection.updateOne(",
        "// Line_Reference 141:         {",
        "// Line_Reference 142:           workspaceId: ctx.auth.workspaceId",
        "// Line_Reference 143:         },",
        "// Line_Reference 144:         {",
        "// Line_Reference 145:           $pull: {",
        "// Line_Reference 146:             wrappers: {",
        "// Line_Reference 147:               key: input.key",
        "// Line_Reference 148:             }",
        "// Line_Reference 149:           }",
        "// Line_Reference 150:         }",
        "// Line_Reference 151:       );",
        "// Line_Reference 152:       publishEvent(ctx, `${ctx.auth.workspaceId}`, {",
        "// Line_Reference 153:         action: \"deleteWrapper\",",
        "// Line_Reference 154:         data: input",
        "// Line_Reference 155:       });",
        "// Line_Reference 156:     }),",
        "// Line_Reference 158:     return createEventSubscription<WorkspaceSettingsEvent>(",
        "// Line_Reference 159:       ctx,",
        "// Line_Reference 160:       `workspaceSettings:${ctx.auth.workspaceId}`",
        "// Line_Reference 161:     );",
        "// Line_Reference 171:         .omit({ id: true, prettierConfig: true, wrappers: true })",
        "// Line_Reference 199:       publishEvent(ctx, `${ctx.auth.workspaceId}`, {",
        "// Line_Reference 213: export { workspaceSettingsRouter, publishEvent as publishWorkspaceSettingsEvent };"
    ]
}
