{
    "cve_id": "CVE-2022-21208",
    "cve_description": "The package node-opcua before 2.74.0 are vulnerable to Denial of Service (DoS) due to a missing limitation on the number of received chunks - per single session or in total for all concurrent sessions. An attacker can exploit this vulnerability by sending an unlimited number of huge chunks (e.g. 2GB each) without sending the Final closing chunk.",
    "cve_publish_date": "2022-08-23",
    "cwe_id": "CWE-1284",
    "cwe_name": "Improper Validation of Specified Quantity in Input",
    "cwe_description": "The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.",
    "commit_message": "fix message chunk overflow detection",
    "type_of_change": "Modification",
    "filename_of_changes": "message_builder_base.ts",
    "code_language": "TypeScript",
    "number_of_lines_added_for_mitigation": "68",
    "number_of_lines_deleted_vulnerable_to_cve": "16",
    "vulnerable_lines": [
        "// Line_Reference 10: import { make_errorLog, make_debugLog } from \"node-opcua-debug\";",
        "// Line_Reference 38:     public readonly signatureLength: number;",
        "// Line_Reference 39:     public readonly options: { signatureLength?: number };",
        "// Line_Reference 60:     constructor(options?: { signatureLength?: number }) {",
        "// Line_Reference 72:         options = options || {};",
        "// Line_Reference 79:             minimumSizeInBytes: 0,",
        "// Line_Reference 80:             readMessageFunc: readRawMessageHeader",
        "// Line_Reference 83:         this._packetAssembler.on(\"message\", (messageChunk) => this._feed_messageChunk(messageChunk));",
        "// Line_Reference 85:         this._packetAssembler.on(\"newMessage\", (info, data) => {",
        "// Line_Reference 97:             this.emit(\"start_chunk\", info, data);",
        "// Line_Reference 138:                 return this._report_error(\"Invalid secure channel Id\");",
        "// Line_Reference 142:             return false;",
        "// Line_Reference 146:     protected _report_error(errorMessage: string): false {",
        "// Line_Reference 155:         this.emit(\"error\", new Error(errorMessage), this.sequenceHeader ? this.sequenceHeader.requestId : null);",
        "// Line_Reference 186:             return this._report_error(`Invalid message header detected`);",
        "// Line_Reference 257:             return this._report_error(\"received and Abort Message\");"
    ]
}
