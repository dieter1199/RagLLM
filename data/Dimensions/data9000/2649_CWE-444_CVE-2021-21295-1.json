{
    "cve_id": "CVE-2021-21295",
    "cve_description": "Netty is an open-source, asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients. In Netty (io.netty:netty-codec-http2) before version 4.1.60.Final there is a vulnerability that enables request smuggling. If a Content-Length header is present in the original HTTP/2 request, the field is not validated by `Http2MultiplexHandler` as it is propagated up. This is fine as long as the request is not proxied through as HTTP/1.1. If the request comes in as an HTTP/2 stream, gets converted into the HTTP/1.1 domain objects (`HttpRequest`, `HttpContent`, etc.) via `Http2StreamFrameToHttpObjectCodec `and then sent up to the child channel's pipeline and proxied through a remote peer as HTTP/1.1 this may result in request smuggling. In a proxy case, users may assume the content-length is validated somehow, which is not the case. If the request is forwarded to a backend channel that is a HTTP/1.1 connection, the Content-Length now has meaning and needs to be checked. An attacker can smuggle requests inside the body as it gets downgraded from HTTP/2 to HTTP/1.1. For an example attack refer to the linked GitHub Advisory. Users are only affected if all of this is true: `HTTP2MultiplexCodec` or `Http2FrameCodec` is used, `Http2StreamFrameToHttpObjectCodec` is used to convert to HTTP/1.1 objects, and these HTTP/1.1 objects are forwarded to another remote peer. This has been patched in 4.1.60.Final As a workaround, the user can do the validation by themselves by implementing a custom `ChannelInboundHandler` that is put in the `ChannelPipeline` behind `Http2StreamFrameToHttpObjectCodec`.",
    "cve_publish_date": "2021-03-09",
    "cwe_id": "CWE-444",
    "cwe_name": "Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')",
    "cwe_description": "The product acts as an intermediary HTTP agent\n         (such as a proxy or firewall) in the data flow between two\n         entities such as a client and server, but it does not\n         interpret malformed HTTP requests or responses in ways that\n         are consistent with how the messages will be processed by\n         those entities that are at the ultimate destination.",
    "commit_message": "Merge pull request from GHSA-wm47-8v5p-wjpj\n\nMotivation:\n\nAs stated by https://tools.ietf.org/html/rfc7540#section-8.1.2.6 we should report a stream error if the content-length does not match the sum of all data frames.\n\nModifications:\n\n- Verify that the sum of data frames match if a content-length header was send.\n- Handle multiple content-length headers and also handle negative values\n- Add io.netty.http2.validateContentLength system property which allows to disable the more strict validation\n- Add unit tests\n\nResult:\n\nCorrectly handle the case when the content-length header was included but not match what is send and also when content-length header is invalid",
    "type_of_change": "Modification",
    "filename_of_changes": "DefaultHttp2ConnectionDecoder.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "91",
    "number_of_lines_deleted_vulnerable_to_cve": "9",
    "vulnerable_lines": [
        "// Line_Reference 235:             int bytesToReturn = data.readableBytes() + padding;",
        "// Line_Reference 262: ",
        "// Line_Reference 370:             stream.headersReceived(isInformational);",
        "// Line_Reference 371:             encoder.flowController().updateDependencyTree(streamId, streamDependency, weight, exclusive);",
        "// Line_Reference 372: ",
        "// Line_Reference 373:             listener.onHeadersRead(ctx, streamId, headers, streamDependency, weight, exclusive, padding, endOfStream);",
        "// Line_Reference 375:             // If the headers completes this stream, close it.",
        "// Line_Reference 376:             if (endOfStream) {",
        "// Line_Reference 377:                 lifecycleManager.closeStreamRemote(stream, ctx.newSucceededFuture());"
    ]
}
