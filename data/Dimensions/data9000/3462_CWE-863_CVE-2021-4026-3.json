{
    "cve_id": "CVE-2021-4026",
    "cve_description": "bookstack is vulnerable to Improper Access Control",
    "cve_publish_date": "2021-11-30",
    "cwe_id": "CWE-863",
    "cwe_name": "Incorrect Authorization",
    "cwe_description": "The product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. This allows attackers to bypass intended access restrictions.",
    "commit_message": "Fixed related permissions query not considering drafts\n\nPage-related items added on drafts could be visible in certain scenarios\nsince the applied permissions query filters would not consider\npage draft visibility.\nThis commit alters queries on related items to apply such filtering.\n\nIncluded test to cover API scenario.\nThanks to @haxatron for reporting.",
    "type_of_change": "Modification",
    "filename_of_changes": "PermissionService.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "56",
    "number_of_lines_deleted_vulnerable_to_cve": "32",
    "vulnerable_lines": [
        "// Line_Reference 611: ",
        "// Line_Reference 612:         $q = $query->where(function ($query) use ($tableDetails, $action) {",
        "// Line_Reference 613:             $query->whereExists(function ($permissionQuery) use (&$tableDetails, $action) {",
        "// Line_Reference 614:                 /** @var Builder $permissionQuery */",
        "// Line_Reference 615:                 $permissionQuery->select(['role_id'])->from('joint_permissions')",
        "// Line_Reference 616:                     ->whereColumn('joint_permissions.entity_id', '=', $tableDetails['tableName'] . '.' . $tableDetails['entityIdColumn'])",
        "// Line_Reference 617:                     ->whereColumn('joint_permissions.entity_type', '=', $tableDetails['tableName'] . '.' . $tableDetails['entityTypeColumn'])",
        "// Line_Reference 618:                     ->where('action', '=', $action)",
        "// Line_Reference 619:                     ->whereIn('role_id', $this->getCurrentUserRoles())",
        "// Line_Reference 620:                     ->where(function (QueryBuilder $query) {",
        "// Line_Reference 621:                         $this->addJointHasPermissionCheck($query, $this->currentUser()->id);",
        "// Line_Reference 622:                     });",
        "// Line_Reference 623:             });",
        "// Line_Reference 637:         $tableDetails = ['tableName' => $tableName, 'entityIdColumn' => $entityIdColumn];",
        "// Line_Reference 638:         $morphClass = app($entityClass)->getMorphClass();",
        "// Line_Reference 639: ",
        "// Line_Reference 640:         $q = $query->where(function ($query) use ($tableDetails, $morphClass) {",
        "// Line_Reference 641:             $query->where(function ($query) use (&$tableDetails, $morphClass) {",
        "// Line_Reference 642:                 $query->whereExists(function ($permissionQuery) use (&$tableDetails, $morphClass) {",
        "// Line_Reference 643:                     /** @var Builder $permissionQuery */",
        "// Line_Reference 644:                     $permissionQuery->select('id')->from('joint_permissions')",
        "// Line_Reference 645:                         ->whereColumn('joint_permissions.entity_id', '=', $tableDetails['tableName'] . '.' . $tableDetails['entityIdColumn'])",
        "// Line_Reference 646:                         ->where('entity_type', '=', $morphClass)",
        "// Line_Reference 647:                         ->where('action', '=', 'view')",
        "// Line_Reference 648:                         ->whereIn('role_id', $this->getCurrentUserRoles())",
        "// Line_Reference 649:                         ->where(function (QueryBuilder $query) {",
        "// Line_Reference 650:                             $this->addJointHasPermissionCheck($query, $this->currentUser()->id);",
        "// Line_Reference 651:                         });",
        "// Line_Reference 653:             })->orWhere($tableDetails['entityIdColumn'], '=', 0);",
        "// Line_Reference 669:         $query->where('has_permission', '=', true)->orWhere(function ($query) use ($userIdToCheck) {",
        "// Line_Reference 670:             $query->where('has_permission_own', '=', true)",
        "// Line_Reference 671:                 ->where('owned_by', '=', $userIdToCheck);"
    ]
}
