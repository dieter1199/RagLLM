{
    "cve_id": "CVE-2022-0224",
    "cve_description": "dolibarr is vulnerable to Improper Neutralization of Special Elements used in an SQL Command",
    "cve_publish_date": "2022-01-14",
    "cwe_id": "CWE-89",
    "cwe_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
    "cwe_description": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.",
    "commit_message": "Fix #hunterf1d1ce3e-ca92-4c7b-b1b8-934e28eaa486\n\nConflicts:\n\ttest/phpunit/CodingPhpTest.php",
    "type_of_change": "Modification",
    "filename_of_changes": "CodingPhpTest.php",
    "code_language": "PHP",
    "number_of_lines_added_for_mitigation": "12",
    "number_of_lines_deleted_vulnerable_to_cve": "4",
    "vulnerable_lines": [
        "// Line_Reference 331: \t\t\t// Check string 'IN (\".xxx' or 'IN (\\'.xxx'  with xxx that is not '$this->db->sanitize' and not '$db->sanitize'. It means we forget a db->sanitize when forging sql request.",
        "// Line_Reference 332: \t\t\tpreg_match_all('/ IN \\([\\'\"]\\s*\\.\\s*(.........)/i', $filecontent, $matches, PREG_SET_ORDER);",
        "// Line_Reference 344: \t\t\t// Check string 'IN (\\'\".xxx'   with xxx that is not '$this->db->sanitize' and not '$db->sanitize'. It means we forget a db->sanitize when forging sql request.",
        "// Line_Reference 345: \t\t\tpreg_match_all('/ IN \\(\\'\"\\s*\\.\\s*(.........)/i', $filecontent, $matches, PREG_SET_ORDER);"
    ]
}
