{
    "cve_id": "CVE-2021-21249",
    "cve_description": "OneDev is an all-in-one devops platform. In OneDev before version 4.0.3, there is an issue involving YAML parsing which can lead to post-auth remote code execution. In order to parse and process YAML files, OneDev uses SnakeYaml which by default (when not using `SafeConstructor`) allows the instantiation of arbitrary classes. We can leverage that to run arbitrary code by instantiating classes such as `javax.script.ScriptEngineManager` and using `URLClassLoader` to load the script engine provider, resulting in the instantiation of a user controlled class. For a full example refer to the referenced GHSA. This issue was addressed in 4.0.3 by only allowing certain known classes to be deserialized",
    "cve_publish_date": "2021-01-15",
    "cwe_id": "CWE-502",
    "cwe_name": "Deserialization of Untrusted Data",
    "cwe_description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
    "commit_message": "Fix security vulnerability issue caused by SnakeYaml deserialization",
    "type_of_change": "Modification",
    "filename_of_changes": "VersionedYamlDoc.java",
    "code_language": "Java",
    "number_of_lines_added_for_mitigation": "19",
    "number_of_lines_deleted_vulnerable_to_cve": "11",
    "vulnerable_lines": [
        "// Line_Reference 41: import io.onedev.server.OneDev;",
        "// Line_Reference 59: ",
        "// Line_Reference 134: \t\t\tClass<?> type = node.getType();",
        "// Line_Reference 135: \t\t\tif (type.getAnnotation(Editable.class) != null && !ClassUtils.isConcrete(type)) {",
        "// Line_Reference 136: \t\t\t\tImplementationRegistry registry = OneDev.getInstance(ImplementationRegistry.class);",
        "// Line_Reference 137: \t\t\t\tfor (Class<?> implementationClass: registry.getImplementations(node.getType())) {",
        "// Line_Reference 138: \t\t\t\t\tString implementationTag = new Tag(\"!\" + implementationClass.getSimpleName()).getValue();",
        "// Line_Reference 139: \t\t\t\t\tif (implementationTag.equals(node.getTag().getValue()))",
        "// Line_Reference 140: \t\t\t\t\t\treturn implementationClass;",
        "// Line_Reference 143: ",
        "// Line_Reference 144: \t\t\treturn super.getClassForNode(node);"
    ]
}
