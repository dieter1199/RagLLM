{
    "cve_id": "CVE-2022-0430",
    "cve_description": "Exposure of Sensitive Information to an Unauthorized Actor in GitHub repository httpie/httpie prior to 3.1.0.",
    "cve_publish_date": "2022-03-15",
    "cwe_id": "NVD-CWE-noinfo",
    "cwe_name": "Insufficient Information",
    "cwe_description": "There is insufficient information about the issue to classify it; details are unkown or unspecified.",
    "commit_message": "Implement new style cookies",
    "type_of_change": "Modification",
    "filename_of_changes": "sessions.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "170",
    "number_of_lines_deleted_vulnerable_to_cve": "36",
    "vulnerable_lines": [
        "// Line_Reference 10: from typing import Iterable, Optional, Union",
        "// Line_Reference 11: from urllib.parse import urlsplit",
        "// Line_Reference 14: from requests.cookies import RequestsCookieJar, create_cookie",
        "// Line_Reference 36:     if os.path.sep in session_name:",
        "// Line_Reference 39:         hostname = host or urlsplit(url).netloc.split('@')[-1]",
        "// Line_Reference 40:         if not hostname:",
        "// Line_Reference 41:             # HACK/FIXME: httpie-unixsocket's URLs have no hostname.",
        "// Line_Reference 42:             hostname = 'localhost'",
        "// Line_Reference 43: ",
        "// Line_Reference 44:         # host:port => host_port",
        "// Line_Reference 45:         hostname = hostname.replace(':', '_')",
        "// Line_Reference 49:     session = Session(path)",
        "// Line_Reference 58:     def __init__(self, path: Union[str, Path]):",
        "// Line_Reference 61:         self['cookies'] = {}",
        "// Line_Reference 76: ",
        "// Line_Reference 88:                     self['cookies'][cookie_name] = {'value': morsel.value}",
        "// Line_Reference 89:                 del request_headers[name]",
        "// Line_Reference 106:         jar = RequestsCookieJar()",
        "// Line_Reference 107:         for name, cookie_dict in self['cookies'].items():",
        "// Line_Reference 108:             jar.set_cookie(create_cookie(",
        "// Line_Reference 109:                 name, cookie_dict.pop('value'), **cookie_dict))",
        "// Line_Reference 110:         jar.clear_expired_cookies()",
        "// Line_Reference 111:         return jar",
        "// Line_Reference 115:         # <https://docs.python.org/3/library/cookielib.html#cookie-objects>",
        "// Line_Reference 116:         stored_attrs = ['value', 'path', 'secure', 'expires']",
        "// Line_Reference 117:         self['cookies'] = {}",
        "// Line_Reference 118:         for cookie in jar:",
        "// Line_Reference 119:             self['cookies'][cookie.name] = {",
        "// Line_Reference 120:                 attname: getattr(cookie, attname)",
        "// Line_Reference 121:                 for attname in stored_attrs",
        "// Line_Reference 122:             }",
        "// Line_Reference 157: ",
        "// Line_Reference 158:     def remove_cookies(self, names: Iterable[str]):",
        "// Line_Reference 159:         for name in names:",
        "// Line_Reference 160:             if name in self['cookies']:",
        "// Line_Reference 161:                 del self['cookies'][name]"
    ]
}
