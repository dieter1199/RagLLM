{
    "cve_id": "CVE-2021-20224",
    "cve_description": "An integer overflow issue was discovered in ImageMagick's ExportIndexQuantum() function in MagickCore/quantum-export.c. Function calls to GetPixelIndex() could result in values outside the range of representable for the 'unsigned char'. When ImageMagick processes a crafted pdf file, this could lead to an undefined behaviour or a crash.",
    "cve_publish_date": "2022-08-25",
    "cwe_id": "CWE-190",
    "cwe_name": "Integer Overflow or Wraparound",
    "cwe_description": "The product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number.",
    "commit_message": "https://github.com/ImageMagick/ImageMagick/pull/3083",
    "type_of_change": "Modification",
    "filename_of_changes": "quantum-export.c",
    "code_language": "C",
    "number_of_lines_added_for_mitigation": "37",
    "number_of_lines_deleted_vulnerable_to_cve": "32",
    "vulnerable_lines": [
        "// Line_Reference 2519:         pixel=(unsigned char) *indexes++;",
        "// Line_Reference 2521:         pixel=(unsigned char) *indexes++;",
        "// Line_Reference 2523:         pixel=(unsigned char) *indexes++;",
        "// Line_Reference 2525:         pixel=(unsigned char) *indexes++;",
        "// Line_Reference 2527:         pixel=(unsigned char) *indexes++;",
        "// Line_Reference 2529:         pixel=(unsigned char) *indexes++;",
        "// Line_Reference 2531:         pixel=(unsigned char) *indexes++;",
        "// Line_Reference 2533:         pixel=(unsigned char) *indexes++;",
        "// Line_Reference 2542:             pixel=(unsigned char) *indexes++;",
        "// Line_Reference 2556:         pixel=(unsigned char) *indexes++;",
        "// Line_Reference 2558:         pixel=(unsigned char) *indexes++;",
        "// Line_Reference 2564:           pixel=(unsigned char) *indexes++;",
        "// Line_Reference 2672:         pixel=(unsigned char) *indexes++;",
        "// Line_Reference 2678:         pixel=(unsigned char) *indexes++;",
        "// Line_Reference 2684:         pixel=(unsigned char) *indexes++;",
        "// Line_Reference 2690:         pixel=(unsigned char) *indexes++;",
        "// Line_Reference 2703:             pixel=(unsigned char) *indexes++;",
        "// Line_Reference 2721:         pixel=(unsigned char) *indexes++;",
        "// Line_Reference 2723:         pixel=(unsigned char) (16*QuantumScale*((Quantum) (QuantumRange-",
        "// Line_Reference 2724:           GetPixelOpacity(p)))+0.5);",
        "// Line_Reference 2755:             q=PopShortPixel(quantum_info->endian,(unsigned short) GetPixelIndex(indexes+x),q);",
        "// Line_Reference 2765:         q=PopShortPixel(quantum_info->endian,(unsigned short) GetPixelIndex(indexes+x),q);",
        "// Line_Reference 2795:         q=PopLongPixel(quantum_info->endian,(unsigned int) GetPixelIndex(indexes+x),q);",
        "// Line_Reference 2830:         q=PopQuantumPixel(quantum_info,",
        "// Line_Reference 2831:           GetPixelIndex(indexes+x),q);",
        "// Line_Reference 2832:         q=PopQuantumPixel(quantum_info,",
        "// Line_Reference 2833:           ScaleQuantumToAny((Quantum) (GetPixelAlpha(p)),range),q);",
        "// Line_Reference 3038:         q=PopQuantumPixel(quantum_info,",
        "// Line_Reference 3039:           ScaleQuantumToAny(GetPixelRed(p),range),q);",
        "// Line_Reference 3153:             q=PopShortPixel(quantum_info->endian,(unsigned short) (pixel << 4),q);",
        "// Line_Reference 3174:             q=PopShortPixel(quantum_info->endian,(unsigned short) (pixel << 4),q);",
        "// Line_Reference 3199:             q=PopShortPixel(quantum_info->endian,(unsigned short) (pixel << 4),q);"
    ]
}
