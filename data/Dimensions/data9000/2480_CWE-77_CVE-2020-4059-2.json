{
    "cve_id": "CVE-2020-4059",
    "cve_description": "In mversion before 2.0.0, there is a command injection vulnerability. This issue may lead to remote code execution if a client of the library calls the vulnerable method with untrusted input. This vulnerability is patched by version 2.0.0. Previous releases are deprecated in npm. As a workaround, make sure to escape git commit messages when using the commitMessage option for the update function.",
    "cve_publish_date": "2020-06-18",
    "cwe_id": "CWE-77",
    "cwe_name": "Improper Neutralization of Special Elements used in a Command ('Command Injection')",
    "cwe_description": "The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.",
    "commit_message": "Fixes missing shell escape for git commit message",
    "type_of_change": "Modification",
    "filename_of_changes": "git_test.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "104",
    "number_of_lines_deleted_vulnerable_to_cve": "72",
    "vulnerable_lines": [
        "// Line_Reference 1: var version = require('../'),",
        "// Line_Reference 2:     assert = require('assert'),",
        "// Line_Reference 3:     fs = require('fs'),",
        "// Line_Reference 4:     vinylFs = require('vinyl-fs'),",
        "// Line_Reference 5:     path = require('path'),",
        "// Line_Reference 6:     cp = require('child_process'),",
        "// Line_Reference 7:     File = require('vinyl'),",
        "// Line_Reference 8:     through = require('through2'),",
        "// Line_Reference 9:     fUtil = require('../lib/files'),",
        "// Line_Reference 10:     git = require('../lib/git');",
        "// Line_Reference 11: ",
        "// Line_Reference 12: describe('git', function () {",
        "// Line_Reference 13:   var filename = 'package.json';",
        "// Line_Reference 14:   var expectedPath = path.join(__dirname, './fixtures/', filename);",
        "// Line_Reference 24:   before(function ()Â {",
        "// Line_Reference 30:     }",
        "// Line_Reference 36:       contents: expectedContent",
        "// Line_Reference 60:   describe('#Update()', function(){",
        "// Line_Reference 61:     it('should return error on unclean git repository when commit is given', function (done) {",
        "// Line_Reference 63:         return cb(new Error('Not clean'));",
        "// Line_Reference 66:       version.update({",
        "// Line_Reference 67:         version: '1.0.0',",
        "// Line_Reference 68:         commitMessage: 'Message'",
        "// Line_Reference 69:       }, function (err, data) {",
        "// Line_Reference 70:         assert.ok(err);",
        "// Line_Reference 71:         assert.equal(err.message, 'Not clean', 'Error message should be set by isRepositoryClean');",
        "// Line_Reference 77:     it('should return NOT error on unclean git repository when no commit message is given', function (done) {",
        "// Line_Reference 79:         return cb(new Error('Not clean'));",
        "// Line_Reference 82:       version.update('1.0.0', function (err, data) {",
        "// Line_Reference 83:         assert.ifError(err);",
        "// Line_Reference 88:     it('should get updated version sent to commit when commit message is given', function (done) {",
        "// Line_Reference 94:         assert.equal(message, 'Message');",
        "// Line_Reference 95:         assert.equal(newVer, '1.0.0');",
        "// Line_Reference 97:         assert.equal(tagName, 'v1.0.0');",
        "// Line_Reference 101:       version.update({",
        "// Line_Reference 102:         version: '1.0.0',",
        "// Line_Reference 103:         commitMessage: 'Message'",
        "// Line_Reference 104:       }, function (err, data) {",
        "// Line_Reference 105:         assert.ifError(err);",
        "// Line_Reference 106:         done();",
        "// Line_Reference 107:       });",
        "// Line_Reference 110:     it('should be able to override tagName', function (done) {",
        "// Line_Reference 116:         assert.equal(tagName, 'v1.0.0-src');",
        "// Line_Reference 120:       version.update({",
        "// Line_Reference 121:         version: '1.0.0',",
        "// Line_Reference 122:         commitMessage: 'Message',",
        "// Line_Reference 123:         tagName: 'v%s-src'",
        "// Line_Reference 124:       }, function (err, data) {",
        "// Line_Reference 125:         assert.ifError(err);",
        "// Line_Reference 126:         done();",
        "// Line_Reference 127:       });",
        "// Line_Reference 130:     it('should get flag defining if v-prefix should be used or not', function (done) {",
        "// Line_Reference 136:         assert.ok(noPrefix, 'No prefix should be true');",
        "// Line_Reference 140:       version.update({",
        "// Line_Reference 141:         version: '1.0.0',",
        "// Line_Reference 142:         commitMessage: 'Message',",
        "// Line_Reference 143:         noPrefix: true",
        "// Line_Reference 144:       }, function (err, data) {",
        "// Line_Reference 145:         assert.ifError(err);",
        "// Line_Reference 146:         done();",
        "// Line_Reference 147:       });",
        "// Line_Reference 150:     it('should make tag with v-prefix per default', function (done) {",
        "// Line_Reference 156:         if (cmd.indexOf('-a') === -1) return cb(null);",
        "// Line_Reference 162:         version: '1.0.0',",
        "// Line_Reference 163:         commitMessage: 'Message'",
        "// Line_Reference 167:     it('should make tag without v-prefix if specified', function (done) {",
        "// Line_Reference 173:         if (cmd.indexOf('-a') === -1) return cb(null);",
        "// Line_Reference 179:         version: '1.0.0',",
        "// Line_Reference 180:         commitMessage: 'Message',",
        "// Line_Reference 181:         noPrefix: true",
        "// Line_Reference 185: ",
        "// Line_Reference 186: });"
    ]
}
