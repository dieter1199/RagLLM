{
    "cve_id": "CVE-2024-27102",
    "cve_description": "Wings is the server control plane for Pterodactyl Panel. This vulnerability impacts anyone running the affected versions of Wings. The vulnerability can potentially be used to access files and directories on the host system. The full scope of impact is exactly unknown, but reading files outside of a server's base directory (sandbox root) is possible. In order to use this exploit, an attacker must have an existing \"server\" allocated and controlled by Wings. Details on the exploitation of this vulnerability are embargoed until March 27th, 2024 at 18:00 UTC. In order to mitigate this vulnerability, a full rewrite of the entire server filesystem was necessary. Because of this, the size of the patch is massive, however effort was made to reduce the amount of breaking changes. Users are advised to update to version 1.11.9. There are no known workarounds for this vulnerability.",
    "cve_publish_date": "2024-03-13",
    "cwe_id": "NVD-CWE-noinfo",
    "commit_message": "server(filesystem): rebuild everything imaginable\n\nThis wonderfully large commit replaces basically everything under the\n`server/filesystem` package, re-implementing essentially everything.\n\nThis is related to\nhttps://github.com/pterodactyl/wings/security/advisories/GHSA-494h-9924-xww9\n\nIf any vulnerabilities related to symlinks persist after this commit, I\nwill be very upset.\n\nSigned-off-by: Matthew Penner <me@matthewp.io>",
    "type_of_change": "Modification",
    "filename_of_changes": "stat.go",
    "code_language": "Go",
    "number_of_lines_added_for_mitigation": "28",
    "number_of_lines_deleted_vulnerable_to_cve": "21",
    "vulnerable_lines": [
        "// Line_Reference 4:     \"os\"",
        "// Line_Reference 9:     \"github.com/goccy/go-json\"",
        "// Line_Reference 13:     os.FileInfo",
        "// Line_Reference 34:         // Using `&os.ModePerm` on the file's mode will cause the mode to only have the permission values, and nothing else.",
        "// Line_Reference 35:         ModeBits:  strconv.FormatUint(uint64(s.Mode()&os.ModePerm), 8),",
        "// Line_Reference 39:         Symlink:   s.Mode().Perm()&os.ModeSymlink != 0,",
        "// Line_Reference 44: // Stat stats a file or folder and returns the base stat object from go along",
        "// Line_Reference 45: // with the MIME data that can be used for editing files.",
        "// Line_Reference 46: func (fs *Filesystem) Stat(p string) (Stat, error) {",
        "// Line_Reference 47:     cleaned, err := fs.SafePath(p)",
        "// Line_Reference 48:     if err != nil {",
        "// Line_Reference 49:         return Stat{}, err",
        "// Line_Reference 50:     }",
        "// Line_Reference 51:     return fs.unsafeStat(cleaned)",
        "// Line_Reference 52: }",
        "// Line_Reference 53: ",
        "// Line_Reference 54: func (fs *Filesystem) unsafeStat(p string) (Stat, error) {",
        "// Line_Reference 55:     s, err := os.Stat(p)",
        "// Line_Reference 59: ",
        "// Line_Reference 62:         m, err = mimetype.DetectFile(p)",
        "// Line_Reference 67: "
    ]
}