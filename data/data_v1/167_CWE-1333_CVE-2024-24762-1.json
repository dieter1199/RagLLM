{
    "cve_id": "CVE-2024-24762",
    "cve_description": "`python-multipart` is a streaming multipart parser for Python. When using form data, `python-multipart` uses a Regular Expression to parse the HTTP `Content-Type` header, including options. An attacker could send a custom-made `Content-Type` option that is very difficult for the RegEx to process, consuming CPU resources and stalling indefinitely (minutes or more) while holding the main event loop. This means that process can't handle any more requests, leading to regular expression denial of service. This vulnerability has been patched in version 0.0.7.",
    "cve_publish_date": "2024-02-05",
    "cwe_id": "CWE-1333",
    "cwe_name": "Inefficient Regular Expression Complexity",
    "cwe_description": "The product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles.",
    "commit_message": "♻️ Refactor header option parser to use the standard library instead of a custom RegEx (#75)",
    "type_of_change": "Modification",
    "filename_of_changes": "multipart.py",
    "code_language": "Python",
    "number_of_lines_added_for_mitigation": "26",
    "number_of_lines_deleted_vulnerable_to_cve": "24",
    "vulnerable_lines": [
        "// Line_Reference 79: def parse_options_header(value):",
        "// Line_Reference 87:     # If we are passed a string, we assume that it conforms to WSGI and does",
        "// Line_Reference 88:     # not contain any code point that's not in latin-1.",
        "// Line_Reference 89:     if isinstance(value, str):            # pragma: no cover",
        "// Line_Reference 90:         value = value.encode('latin-1')",
        "// Line_Reference 93:     if b';' not in value:",
        "// Line_Reference 94:         return (value.lower().strip(), {})",
        "// Line_Reference 97:     ctype, rest = value.split(b';', 1)",
        "// Line_Reference 99: ",
        "// Line_Reference 100:     # Parse the options.",
        "// Line_Reference 101:     for match in OPTION_RE.finditer(rest):",
        "// Line_Reference 102:         key = match.group(1).lower()",
        "// Line_Reference 103:         value = match.group(2)",
        "// Line_Reference 104:         if value[0] == QUOTE and value[-1] == QUOTE:",
        "// Line_Reference 105:             # Unquote the value.",
        "// Line_Reference 106:             value = value[1:-1]",
        "// Line_Reference 107:             value = value.replace(b'\\\\\\\\', b'\\\\').replace(b'\\\\\"', b'\"')",
        "// Line_Reference 108: ",
        "// Line_Reference 111:         if key == b'filename':",
        "// Line_Reference 112:             if value[1:3] == b':\\\\' or value[:2] == b'\\\\\\\\':",
        "// Line_Reference 113:                 value = value.split(b'\\\\')[-1]",
        "// Line_Reference 114: ",
        "// Line_Reference 115:         options[key] = value",
        "// Line_Reference 116: "
    ]
}