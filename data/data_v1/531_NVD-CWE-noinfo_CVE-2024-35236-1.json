{
    "cve_id": "CVE-2024-35236",
    "cve_description": "Audiobookshelf is a self-hosted audiobook and podcast server. Prior to version 2.10.0, opening an ebook with malicious scripts inside leads to code execution inside the browsing context. Attacking a user with high privileges (upload, creation of libraries) can lead to remote code execution (RCE) in the worst case. This was tested on version 2.9.0 on Windows, but an arbitrary file write is powerful enough as is and should easily lead to RCE on Linux, too. Version 2.10.0 contains a patch for the vulnerability.",
    "cve_publish_date": "2024-05-27",
    "cwe_id": "NVD-CWE-noinfo",
    "commit_message": "Update:Disable epubs from running scripts by default, add library setting to enable it GHSA-7j99-76cj-q9pg",
    "type_of_change": "Modification",
    "filename_of_changes": "libraries.js",
    "code_language": "JavaScript",
    "number_of_lines_added_for_mitigation": "29",
    "number_of_lines_deleted_vulnerable_to_cve": "25",
    "vulnerable_lines": [
        "// Line_Reference 19:   getCurrentLibrary: state => {",
        "// Line_Reference 20:     return state.libraries.find(lib => lib.id === state.currentLibraryId)",
        "// Line_Reference 31:   getSortedLibraries: state => () => {",
        "// Line_Reference 32:     return state.libraries.map(lib => ({ ...lib })).sort((a, b) => a.displayOrder - b.displayOrder)",
        "// Line_Reference 34:   getLibraryProvider: state => libraryId => {",
        "// Line_Reference 35:     var library = state.libraries.find(l => l.id === libraryId)",
        "// Line_Reference 63:   getCollection: state => id => {",
        "// Line_Reference 64:     return state.collections.find(c => c.id === id)",
        "// Line_Reference 66:   getPlaylist: state => id => {",
        "// Line_Reference 67:     return state.userPlaylists.find(p => p.id === id)",
        "// Line_Reference 78:       if (lastCheck < 1000 * 5) { // 5 seconds",
        "// Line_Reference 207:     var index = state.libraries.findIndex(a => a.id === library.id)",
        "// Line_Reference 219:     state.libraries = state.libraries.filter(a => a.id !== library.id)",
        "// Line_Reference 226:     var index = state.listeners.findIndex(l => l.id === listener.id)",
        "// Line_Reference 231:     state.listeners = state.listeners.filter(l => l.id !== listenerId)",
        "// Line_Reference 241:     state.filterData.series = state.filterData.series.filter(se => se.id !== seriesId)",
        "// Line_Reference 263:         const indexOf = state.filterData.authors.findIndex(au => au.id === author.id)",
        "// Line_Reference 268:           state.filterData.authors.sort((a, b) => (a.name || '').localeCompare((b.name || '')))",
        "// Line_Reference 276:         const indexOf = state.filterData.series.findIndex(se => se.id === series.id)",
        "// Line_Reference 281:           state.filterData.series.sort((a, b) => (a.name || '').localeCompare((b.name || '')))",
        "// Line_Reference 332:     var index = state.collections.findIndex(c => c.id === collection.id)",
        "// Line_Reference 340:     state.collections = state.collections.filter(c => c.id !== collection.id)",
        "// Line_Reference 347:     const index = state.userPlaylists.findIndex(p => p.id === playlist.id)",
        "// Line_Reference 356:     state.userPlaylists = state.userPlaylists.filter(p => p.id !== playlist.id)",
        "// Line_Reference 362: }"
    ]
}