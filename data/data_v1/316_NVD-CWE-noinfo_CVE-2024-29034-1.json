{
    "cve_id": "CVE-2024-29034",
    "cve_description": "CarrierWave is a solution for file uploads for Rails, Sinatra and other Ruby web frameworks. The vulnerability CVE-2023-49090 wasn't fully addressed. This vulnerability is caused by the fact that when uploading to object storage, including Amazon S3, it is possible to set a Content-Type value that is interpreted by browsers to be different from what's allowed by `content_type_allowlist`, by providing multiple values separated by commas. This bypassed value can be used to cause XSS. Upgrade to 3.0.7 or 2.2.6.\n",
    "cve_publish_date": "2024-03-24",
    "cwe_id": "NVD-CWE-noinfo",
    "commit_message": "Fix Content-Type allowlist bypass vulnerability remained\n\nRefs. https://github.com/carrierwaveuploader/carrierwave/security/advisories/GHSA-vfmv-jfc5-pjjw",
    "type_of_change": "Modification",
    "filename_of_changes": "content_type_allowlist_spec.rb",
    "code_language": "Ruby",
    "number_of_lines_added_for_mitigation": "0",
    "number_of_lines_deleted_vulnerable_to_cve": "16",
    "vulnerable_lines": [
        "// Line_Reference 90: ",
        "// Line_Reference 91:       context \"when the allowlist contains charset\" do",
        "// Line_Reference 92:         before do",
        "// Line_Reference 93:           allow(uploader).to receive(:content_type_allowlist).and_return(%r{text/plain;\\s*charset=utf-8})",
        "// Line_Reference 94:         end",
        "// Line_Reference 95: ",
        "// Line_Reference 96:         it \"accepts the content with allowed charset\" do",
        "// Line_Reference 97:           allow(bork_file).to receive(:content_type).and_return('text/plain; charset=utf-8')",
        "// Line_Reference 98:           expect { uploader.cache!(bork_file) }.not_to raise_error",
        "// Line_Reference 99:         end",
        "// Line_Reference 100: ",
        "// Line_Reference 101:         it \"rejects the content without charset\" do",
        "// Line_Reference 102:           allow(bork_file).to receive(:content_type).and_return('text/plain')",
        "// Line_Reference 103:           expect { uploader.cache!(bork_file) }.to raise_error(CarrierWave::IntegrityError)",
        "// Line_Reference 104:         end",
        "// Line_Reference 105:       end"
    ]
}