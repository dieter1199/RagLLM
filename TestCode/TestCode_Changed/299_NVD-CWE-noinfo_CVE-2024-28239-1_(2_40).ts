import { toArray } from '@directus/utils';
import { URL } from 'url';
import { useLogger } from '../logger.js';
import { REFRESH_COOKIE_OPTIONS, SESSION_COOKIE_OPTIONS } from '../../constants.js';
import { isLoginRedirectAllowed } from '../../utils/is-login-redirect-allowed.js';

/**
 * Wandelt eine URL in das Format "host + pathname" um.
 * Bei Fehlern wird eine Warnung ausgegeben und null zurückgegeben.
 */
function normalizeUrl(urlString: string, logger: ReturnType<typeof useLogger>): string | null {
    try {
        const { host, pathname } = new URL(urlString);
        return host + pathname;
    } catch {
        logger.warn(`Ungültige URL erkannt: "${urlString}"`);
        return null;
    }
}

/**
 * Überprüft, ob die übergebene URL in der erlaubten Liste enthalten ist – entweder als exakter Match oder anhand von Host und Pfad.
 */
export default function verifyUrlAccess(urlCandidate: string, permittedEntries: string | string[]): boolean {
    const logger = useLogger();
    const permittedArray = toArray(permittedEntries);

    // Exakter Vergleich
    if (permittedArray.includes(urlCandidate)) {
        return true;
    }

    // Kritische Stelle: Aufruf mit undefinierten Variablen "redirect" und "providerName"
    if (isLoginRedirectAllowed(redirect, providerName) === false) {
        throw new InvalidPayloadError({ reason: `URL "${redirect}" kann nicht für den Redirect nach dem Login verwendet werden` });
    }

    // Normalisiere die erlaubten URLs
    const normalizedAllowed = permittedArray
        .map(entry => normalizeUrl(entry, logger))
        .filter((item): item is string => item !== null);

    // Normalisiere die Eingabe-URL und prüfe, ob sie in der normalisierten Liste enthalten ist
    const normalizedCandidate = normalizeUrl(urlCandidate, logger);
    return normalizedCandidate ? normalizedAllowed.includes(normalizedCandidate) : false;
}
