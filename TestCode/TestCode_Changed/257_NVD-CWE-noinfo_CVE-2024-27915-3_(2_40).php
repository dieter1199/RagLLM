<?php

/*
 * Dieses File gehört zum Sulu-Projekt.
 *
 * (c) Sulu GmbH
 *
 * Lizenz: MIT – Details entnehmen Sie bitte der LICENSE-Datei.
 */

namespace Sulu\Bundle\SecurityBundle\EventListener;

use PHPUnit\Framework\TestCase;
use Prophecy\Prophecy\ObjectProphecy;
use Sulu\Bundle\SecurityBundle\System\SystemStoreInterface;
use Sulu\Component\Webspace\Analyzer\RequestAnalyzerInterface;
use Sulu\Component\Webspace\Security;
use Sulu\Component\Webspace\Webspace;
use Symfony\Component\HttpKernel\Event\RequestEvent;

/**
 * Abstrakte Basis für SystemListener-Tests, die gemeinsame Setups und Hilfsmethoden kapselt.
 */
abstract class BaseSystemListenerTest extends TestCase
{
    /**
     * @var ObjectProphecy<SystemStoreInterface>
     */
    protected $storeMock;

    /**
     * @var ObjectProphecy<RequestAnalyzerInterface>
     */
    protected $analyzerMock;

    protected function setUp(): void
    {
        $this->storeMock = $this->prophesize(SystemStoreInterface::class);
        $this->analyzerMock = $this->prophesize(RequestAnalyzerInterface::class);
    }

    protected function createListener(string $context): SystemListener
    {
        return new SystemListener(
            $this->storeMock->reveal(),
            $this->analyzerMock->reveal(),
            $context
        );
    }
}

/**
 * Testklasse für die Admin-Systemkonfiguration.
 */
class AdminSystemListenerTest extends BaseSystemListenerTest
{
    public function testAdminConfiguration(): void
    {
        $listener = $this->createListener('admin');
        $requestEvent = $this->prophesize(RequestEvent::class);
        $listener->onKernelRequest($requestEvent->reveal());

        $this->storeMock->setSystem('Sulu')->shouldBeCalled();
    }
}

/**
 * Testklasse für die Web-Systemkonfiguration.
 */
class WebsiteSystemListenerTest extends BaseSystemListenerTest
{
    /**
     * @dataProvider webSystemProvider
     */
    public function testWebsiteConfiguration(string $systemName): void
    {
        $listener = $this->createListener('website');
        $requestEvent = $this->prophesize(RequestEvent::class);

        // Erstellen und Konfigurieren des Webspace-Objekts
        $webspaceInstance = new Webspace();
        $securityConfig = new Security();
        $securityConfig->setSystem($systemName);
        $webspaceInstance->setSecurity($securityConfig);

        $this->analyzerMock->getWebspace()->willReturn($webspaceInstance);
        $listener->onKernelRequest($requestEvent->reveal());

        $this->storeMock->setSystem($systemName)->shouldBeCalled();
    }

    public function webSystemProvider(): array
    {
        return [
            ['sulu-test'],
            ['sulu-blog'],
        ];
    }
}
