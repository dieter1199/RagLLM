// Copyright (C) 2017 1aim GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use serde_derive::{Deserialize, Serialize};
use std::fmt;

/// Repräsentiert den signifikanten, nationalen Teil einer Telefonnummer.
#[derive(Copy, Clone, Eq, PartialEq, Serialize, Deserialize, Hash, Debug)]
pub struct NationalTeil {
    pub(crate) wert: u64,
    pub(crate) anzahl_nullen: u8,
}

impl NationalTeil {
    /// Gibt den reinen Zahlenwert ohne führende Nullen zurück.
    pub fn hole_wert(&self) -> u64 {
        self.wert
    }

    /// Gibt die Anzahl der führenden Nullen zurück.
    pub fn hole_nullen(&self) -> u8 {
        self.anzahl_nullen
    }
}

impl fmt::Display for NationalTeil {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        // Zuerst alle führenden Nullen ausgeben
        for _ in 0..self.anzahl_nullen {
            f.write_str("0")?;
        }
        // Anschließend den Zahlenwert
        write!(f, "{}", self.wert)
    }
}

impl From<NationalTeil> for u64 {
    fn from(nt: NationalTeil) -> u64 {
        nt.wert
    }
}
