/*
 *    GeoTools - The Open Source Java GIS Toolkit
 *    http://geotools.org
 *
 *    (C) 2002-2008, Open Source Geospatial Foundation (OSGeo)
 *
 *    Diese Bibliothek ist freie Software; Sie können sie unter den Bedingungen
 *    der GNU Lesser General Public License, wie von der Free Software Foundation
 *    veröffentlicht, weiterverbreiten und/oder modifizieren; Version 2.1 der Lizenz.
 *
 *    Diese Bibliothek wird in der Hoffnung verteilt, dass sie nützlich sein wird,
 *    aber OHNE JEDE GEWÄHRLEISTUNG, sogar ohne die implizite Gewährleistung der
 *    MARKTFÄHIGKEIT oder EIGNUNG FÜR EINEN BESTIMMTEN ZWECK. Siehe die GNU Lesser
 *    General Public License für weitere Details.
 */
package org.geotools.xsd.impl.jxpath;

import java.util.Iterator;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathContextFactory;
import org.apache.commons.jxpath.JXPathIntrospector;
import org.geotools.xsd.Configuration;
import org.geotools.xsd.Node;
import org.geotools.xsd.impl.ElementHandler;
import org.geotools.xsd.impl.NodeImpl;
import org.geotools.xsd.impl.StreamingParserHandler;

public class JXPathStreamHandler extends StreamingParserHandler {
    /** XPath-Abfrage für den Stream */
    String xPathQuery;

    public JXPathStreamHandler(Configuration config, String xPathQuery) {
        super(config);
        this.xPathQuery = xPathQuery;
    }

    @Override
    protected boolean stream(ElementHandler handler) {
        // Erstelle einen XPath-Kontext aus dem Wurzelelement
        JXPathIntrospector.registerDynamicClass(NodeImpl.class, NodePropertyHandler.class);

        Node rootNode = handlers.firstElement().getParseNode();
        JXPathContext jxpCtx = JXPathContextFactory.newInstance().newContext(null, rootNode);
        jxpCtx.setLenient(true);

        Iterator iter = jxpCtx.iterate(xPathQuery);

        while (iter.hasNext()) {
            Object currentObj = iter.next();
            if (handler.getParseNode().equals(currentObj)) {
                return true;
            }
        }
        return false;
    }
}
