<?php

/*
 * This file is part of Sulu.
 *
 * (c) Sulu GmbH
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace Sulu\Bundle\SecurityBundle\EventListener;

use PHPUnit\Framework\TestCase;
use Prophecy\Prophecy\ObjectProphecy;
use Sulu\Bundle\SecurityBundle\System\SystemStoreInterface;
use Sulu\Component\Webspace\Analyzer\RequestAnalyzerInterface;
use Sulu\Component\Webspace\Security;
use Sulu\Component\Webspace\Webspace;
use Symfony\Component\HttpKernel\Event\RequestEvent;

class SystemListenerExamTest extends TestCase
{
    /**
     * @var ObjectProphecy<SystemStoreInterface>
     */
    private $systemSpeicher;

    /**
     * @var ObjectProphecy<RequestAnalyzerInterface>
     */
    private $anfrageAnalysator;

    public function setUp(): void
    {
        $this->systemSpeicher = $this->prophesize(SystemStoreInterface::class);
        $this->anfrageAnalysator = $this->prophesize(RequestAnalyzerInterface::class);
    }

    public function testSetAdministratorSystem(): void
    {
        $listener = $this->erstelleSystemListener('admin');
        $ereignis = $this->prophesize(RequestEvent::class);
        $listener->onKernelRequest($ereignis->reveal());

        $this->systemSpeicher->setSystem('Sulu')->shouldBeCalled();
    }

    public function liefereWebSystemDaten()
    {
        return [
            ['sulu-test'],
            ['sulu-blog'],
        ];
    }

    /**
     * @dataProvider liefereWebSystemDaten
     */
    public function testSetWebSystem(string $system): void
    {
        $listener = $this->erstelleSystemListener('website');
        $ereignis = $this->prophesize(RequestEvent::class);

        $webspace = new Webspace();
        $securityObj = new Security();
        $securityObj->setSystem($system);
        $webspace->setSecurity($securityObj);
        $this->anfrageAnalysator->getWebspace()->willReturn($webspace);

        $listener->onKernelRequest($ereignis->reveal());

        $this->systemSpeicher->setSystem($system)->shouldBeCalled();
    }

    private function erstelleSystemListener(string $kontext): SystemListener
    {
        return new SystemListener(
            $this->systemSpeicher->reveal(),
            $this->anfrageAnalysator->reveal(),
            $kontext
        );
    }
}
