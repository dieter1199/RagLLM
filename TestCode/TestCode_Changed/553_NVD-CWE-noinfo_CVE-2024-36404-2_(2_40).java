/*
 *    GeoTools - The Open Source Java GIS Toolkit
 *    http://geotools.org
 *
 *    (C) 2002-2008, Open Source Geospatial Foundation (OSGeo)
 *
 *    Diese Bibliothek ist freie Software; Sie können sie unter den Bedingungen
 *    der GNU Lesser General Public License, wie von der Free Software Foundation
 *    veröffentlicht, weiterverbreiten und/oder modifizieren; Version 2.1 der Lizenz.
 *
 *    Diese Bibliothek wird in der Hoffnung verteilt, dass sie nützlich ist,
 *    aber OHNE JEDE GEWÄHRLEISTUNG, sogar ohne die implizite Gewährleistung der
 *    MARKTFÄHIGKEIT oder EIGNUNG FÜR EINEN BESTIMMTEN ZWECK. Siehe die GNU Lesser
 *    General Public License für weitere Details.
 */
package org.geotools.xsd.impl.jxpath;

import java.util.Iterator;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathContextFactory;
import org.apache.commons.jxpath.JXPathIntrospector;
import org.geotools.xsd.Configuration;
import org.geotools.xsd.Node;
import org.geotools.xsd.impl.ElementHandler;
import org.geotools.xsd.impl.NodeImpl;
import org.geotools.xsd.impl.StreamingParserHandler;

public class JXPathStreamProcessor extends StreamingParserHandler {
    /** XPath-Abfrage für den Stream */
    String queryPfad;

    public JXPathStreamProcessor(Configuration config, String queryPfad) {
        super(config);
        this.queryPfad = queryPfad;
    }

    @Override
    protected boolean stream(ElementHandler elementHandler) {
        // Registriere dynamisch den Klassenhandler für NodeImpl
        JXPathIntrospector.registerDynamicClass(NodeImpl.class, NodePropertyHandler.class);

        // Hole das Wurzelknotenobjekt aus dem ersten Handler
        Node wurzelKnoten = handlers.firstElement().getParseNode();
        JXPathContext xpathKontext = JXPathContextFactory.newInstance().newContext(null, wurzelKnoten);
        xpathKontext.setLenient(true);

        Iterator<?> iterator = xpathKontext.iterate(queryPfad);

        while (iterator.hasNext()) {
            Object aktuellesObjekt = iterator.next();
            if (elementHandler.getParseNode().equals(aktuellesObjekt)) {
                return true;
            }
        }
        return false;
    }
}
