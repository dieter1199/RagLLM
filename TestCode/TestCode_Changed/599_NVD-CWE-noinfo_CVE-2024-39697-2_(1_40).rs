// Copyright (C) 2017 1aim GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use serde_derive::{Deserialize, Serialize};
use std::fmt;

/// Der nationale Teil einer Telefonnummer.
#[derive(Copy, Clone, Eq, PartialEq, Serialize, Deserialize, Hash, Debug)]
pub struct NationalNum {
    pub(crate) num_value: u64,

    /// In einigen Ländern beginnt der nationale (signifikante) Teil einer Telefonnummer
    /// mit einer oder mehreren "0", ohne dass dies als Vorwahl oder eine Art
    /// Rufnummernvorwahl gilt. Beispielsweise deutet die führende Null bei einer
    /// italienischen Festnetznummer darauf hin, dass es sich um einen Festnetzanschluss handelt.
    /// Weitere Details siehe http://en.wikipedia.org/wiki/%2B39.
    ///
    /// Diese Felder können für die meisten Länder ignoriert werden. Für
    /// einige wenige Länder – ähnlich wie in Italien – muss man jedoch, wenn
    /// die führenden Nullen auch bei internationaler Wahl erhalten bleiben sollen,
    /// diesen Wert auf true setzen und zusätzlich die Anzahl der führenden Nullen angeben.
    ///
    /// Beim Parsen oder Konvertieren von Telefonnummern werden diese Felder
    /// bei Bedarf automatisch gesetzt.
    pub(crate) num_zeros: u8,
}

impl NationalNum {
    /// Gibt den Zahlenwert ohne führende Nullen zurück.
    pub fn get_value(&self) -> u64 {
        self.num_value
    }

    /// Gibt die Anzahl der führenden Nullen zurück.
    pub fn get_zeros(&self) -> u8 {
        self.num_zeros
    }
}

impl From<NationalNum> for u64 {
    fn from(n: NationalNum) -> u64 {
        n.num_value
    }
}

impl fmt::Display for NationalNum {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        for _ in 0..self.num_zeros {
            write!(f, "0")?;
        }
        write!(f, "{}", self.num_value)
    }
}
