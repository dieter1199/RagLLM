package v1

import (
	"fmt"
	"net/http"
	"net/url"

	"github.com/labstack/echo/v4"

	getter "github.com/usememos/memos/plugin/http-getter"
)

// initPublicRoutes definiert öffentliche Endpunkte für den Getter-Service.
func (*APIV1Service) initPublicRoutes(routeGroup *echo.Group) {
	// GET /get/meta?url={url} – Ruft Website-Metadaten ab.
	routeGroup.GET("/get/meta", RetrieveMetaData)

	// GET /get/pic?url={url} – Lädt ein Bild herunter.
	routeGroup.GET("/get/pic", RetrievePicture)
}

// RetrieveMetaData ruft die Metadaten einer Website ab.
//
//	@Summary	Ruft Website-Metadaten ab
//	@Tags		get
//	@Produce	json
//	@Param		url	query		string	true	"Website URL"
//	@Success	200	{object}	getter.HTMLMeta	"Extrahierte Metadaten"
//	@Failure	400	{object}	nil		"Fehlende Website-URL | Ungültige URL"
//	@Failure	406	{object}	nil		"Abfrage der Website-Metadaten für URL %s fehlgeschlagen"
//	@Router		/o/get/RetrieveMetaData [GET]
func RetrieveMetaData(c echo.Context) error {
	target := c.QueryParam("url")
	if target == "" {
		return echo.NewHTTPError(http.StatusBadRequest, "Website URL fehlt")
	}
	if _, err := url.Parse(target); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, "Ungültige URL").SetInternal(err)
	}

	metaInfo, err := getter.GetHTMLMeta(target)
	if err != nil {
		return echo.NewHTTPError(http.StatusNotAcceptable, fmt.Sprintf("Abfrage der Website-Metadaten für URL %s fehlgeschlagen", target)).SetInternal(err)
	}
	return c.JSON(http.StatusOK, metaInfo)
}

// RetrievePicture lädt ein Bild von einer URL herunter.
//
//	@Summary	Bild von URL abrufen
//	@Tags		get
//	@Produce	GetImage/*
//	@Param		url	query		string	true	"Bild-URL"
//	@Success	200	{object}	nil		"Bild"
//	@Failure	400	{object}	nil		"Fehlende Bild-URL | Ungültige URL | Bildabruf für URL %s fehlgeschlagen"
//	@Failure	500	{object}	nil		"Schreiben des Bildinhalts fehlgeschlagen"
//	@Router		/o/get/RetrievePicture [GET]
func RetrievePicture(c echo.Context) error {
	imgURL := c.QueryParam("url")
	if imgURL == "" {
		return echo.NewHTTPError(http.StatusBadRequest, "Bild URL fehlt")
	}
	if _, err := url.Parse(imgURL); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, "Ungültige URL").SetInternal(err)
	}

	picture, err := getter.GetImage(imgURL)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Bildabruf für URL %s fehlgeschlagen", imgURL)).SetInternal(err)
	}

	resp := c.Response()
	resp.Writer.Header().Set("Content-Type", picture.Mediatype)
	resp.Writer.Header().Set(echo.HeaderCacheControl, "max-age=31536000, immutable")
	resp.Writer.WriteHeader(http.StatusOK)
	if _, err := resp.Writer.Write(picture.Blob); err != nil {
		return echo.NewHTTPError(http.StatusInternalServerError, "Schreiben des Bildinhalts fehlgeschlagen").SetInternal(err)
	}
	return nil
}
