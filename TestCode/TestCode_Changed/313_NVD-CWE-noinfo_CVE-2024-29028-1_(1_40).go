package v1

import (
	"fmt"
	"net/http"
	"net/url"

	"github.com/labstack/echo/v4"

	httpGetter "github.com/usememos/memos/plugin/http-getter"
)

func (*APIV1Service) registerPublicGetterRoutes(group *echo.Group) {
	// GET /get/meta?url={url} - Fetch website metadata.
	group.GET("/get/meta", FetchWebsiteMetadata)

	// GET /get/pic?url={url} - Fetch image.
	group.GET("/get/pic", FetchImage)
}

// FetchWebsiteMetadata godoc
//
//	@Summary	Fetch website metadata
//	@Tags		get
//	@Produce	json
//	@Param		url	query		string	true	"Website URL"
//	@Success	200	{object}	httpGetter.HTMLMeta	"Extracted metadata"
//	@Failure	400	{object}	nil		"Missing website URL | Invalid URL"
//	@Failure	406	{object}	nil		"Failed to fetch website metadata for URL: %s"
//	@Router		/o/get/FetchWebsiteMetadata [GET]
func FetchWebsiteMetadata(ctx echo.Context) error {
	queryURL := ctx.QueryParam("url")
	if queryURL == "" {
		return echo.NewHTTPError(http.StatusBadRequest, "Website URL is missing")
	}
	if _, err := url.Parse(queryURL); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, "Invalid URL").SetInternal(err)
	}

	meta, err := httpGetter.GetHTMLMeta(queryURL)
	if err != nil {
		return echo.NewHTTPError(http.StatusNotAcceptable, fmt.Sprintf("Failed to fetch website metadata for URL: %s", queryURL)).SetInternal(err)
	}
	return ctx.JSON(http.StatusOK, meta)
}

// FetchImage godoc
//
//	@Summary	Fetch image from URL
//	@Tags		get
//	@Produce	GetImage/*
//	@Param		url	query		string	true	"Image URL"
//	@Success	200	{object}	nil		"Image"
//	@Failure	400	{object}	nil		"Missing image URL | Invalid URL | Failed to fetch image for URL: %s"
//	@Failure	500	{object}	nil		"Failed to write image blob"
//	@Router		/o/get/FetchImage [GET]
func FetchImage(ctx echo.Context) error {
	queryURL := ctx.QueryParam("url")
	if queryURL == "" {
		return echo.NewHTTPError(http.StatusBadRequest, "Image URL is missing")
	}
	if _, err := url.Parse(queryURL); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, "Invalid URL").SetInternal(err)
	}

	img, err := httpGetter.GetImage(queryURL)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Failed to fetch image for URL: %s", queryURL)).SetInternal(err)
	}

	response := ctx.Response()
	response.Writer.WriteHeader(http.StatusOK)
	response.Writer.Header().Set("Content-Type", img.Mediatype)
	response.Writer.Header().Set(echo.HeaderCacheControl, "max-age=31536000, immutable")
	if _, err := response.Writer.Write(img.Blob); err != nil {
		return echo.NewHTTPError(http.StatusInternalServerError, "Failed to write image blob").SetInternal(err)
	}
	return nil
}
