// Copyright 2022 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @file PDPSecInitiatorListener.h
 *
 */

 #ifndef _DS_PDP_SEC_INIT_LISTENER_H_
 #define _DS_PDP_SEC_INIT_LISTENER_H_
 #ifndef DOXYGEN_SKIP_PUBLIC
 
 #include <fastdds/rtps/reader/ReaderListener.h>
 #include <fastdds/rtps/builtin/data/ParticipantProxyData.h>
 
 #include <mutex>
 
 namespace eprosima {
 namespace fastrtps {
 namespace rtps {
 
 class PDP;
 
 /**
  * Class PDPSecInitiatorListener, implementation for the secure discovery server handshake initiator.
  * @ingroup DISCOVERY_MODULE
  */
 class PDPSecInitiatorListener : public ReaderListener
 {
     using SecInitiatedCallback = std::function<void (const ParticipantProxyData&)>;
 
 public:
 
     /**
      * @param pdpParent Pointer to the object creating this instance.
      */
     PDPSecInitiatorListener(
             PDP* pdpParent,
             SecInitiatedCallback callback = [] (const ParticipantProxyData&)->void {});
 
     virtual ~PDPSecInitiatorListener() override = default;
 
     /**
      * Called when a new cache change is added.
      * @param reader
      * @param change
      */
     void onNewCacheChangeAdded(
             RTPSReader* reader,
             const CacheChange_t* const change) override;
 
 protected:
 
     /**
      * Retrieve the key from a CacheChange_t.
      * @param change Pointer to the CacheChange_t.
      * @return True on success.
      */
     bool retrieveKey(
             CacheChange_t* change);
 
     //! Pointer to the associated PDP instance.
     PDP* pdp_parent_;
 
     /**
      * @brief Temporary data to avoid reallocations.
      *
      * @remarks Should always be accessed with the pdp reader lock held.
      */
     ParticipantProxyData tempData_;
 
     //! Callback to execute upon participant discovery.
     SecInitiatedCallback secCallback_;
 };
 
 } // namespace rtps
 } // namespace fastrtps
 } // namespace eprosima
 
 #endif // ifndef DOXYGEN_SKIP_PUBLIC
 #endif /* _DS_PDP_SEC_INIT_LISTENER_H_ */
 