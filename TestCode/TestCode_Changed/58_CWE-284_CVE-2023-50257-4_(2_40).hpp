// Copyright 2022 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @file PDPSecurityInitiatorListener.h
 *
 */

 #ifndef _DS_PDP_SECURITY_INIT_LISTENER_H_
 #define _DS_PDP_SECURITY_INIT_LISTENER_H_
 #ifndef DOXYGEN_SKIP_PUBLIC
 
 #include <fastdds/rtps/reader/ReaderListener.h>
 #include <fastdds/rtps/builtin/data/ParticipantProxyData.h>
 #include <mutex>
 
 namespace eprosima {
 namespace fastrtps {
 namespace rtps {
 
 class PDP;
 
 /**
  * Class PDPSecurityInitiatorListener, realisiert den Handshake-Prozess im sicheren Discovery-Server.
  * @ingroup DISCOVERY_MODULE
  */
 class PDPSecurityInitiatorListener : public ReaderListener
 {
     using SecCallback = std::function<void(const ParticipantProxyData&)>;
 
 public:
     /**
      * @param pdpInst Zeiger auf die PDP-Instanz, die dieses Objekt erzeugt.
      */
     PDPSecurityInitiatorListener(
             PDP* pdpInst,
             SecCallback callback = [](const ParticipantProxyData&)->void {});
 
     virtual ~PDPSecurityInitiatorListener() override = default;
 
     /**
      * Wird aufgerufen, wenn ein neuer Cache-Eintrag hinzugefügt wird.
      * @param reader
      * @param change
      */
     void handleCacheUpdate(
             RTPSReader* reader,
             const CacheChange_t* const change) override;
 
 protected:
     /**
      * Extrahiert den Schlüssel aus einem CacheChange_t.
      * @param change Zeiger auf den CacheChange_t.
      * @return True bei Erfolg.
      */
     bool extractKey(CacheChange_t* change);
 
     //! Zeiger auf die zugehörige PDP-Instanz.
     PDP* pdp_instance_;
 
     /**
      * Temporäre Daten zur Vermeidung wiederholter Allokationen.
      * @remarks: Sollte stets unter Verwendung des PDP-Reader-Locks genutzt werden.
      */
     ParticipantProxyData cachedData_;
 
     //! Callback, der beim Entdecken eines Teilnehmers ausgeführt wird.
     SecCallback securityCallback_;
 };
 
 } // namespace rtps
 } // namespace fastrtps
 } // namespace eprosima
 
 #endif // ifndef DOXYGEN_SKIP_PUBLIC
 #endif /* _DS_PDP_SECURITY_INIT_LISTENER_H_ */
 