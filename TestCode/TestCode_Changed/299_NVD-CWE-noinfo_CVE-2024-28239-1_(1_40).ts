import { toArray } from '@directus/utils';
import { URL } from 'url';
import { useLogger } from '../logger.js';
import { REFRESH_COOKIE_OPTIONS, SESSION_COOKIE_OPTIONS } from '../../constants.js';
import { isLoginRedirectAllowed } from '../../utils/is-login-redirect-allowed.js';

/**
 * Prüft, ob die übergebene URL in der erlaubten Liste enthalten ist – entweder exakt oder anhand von Domain+Pfad.
 */
export default function checkUrlValidity(inputUrl: string, allowedEntries: string | string[]): boolean {
	const log = useLogger();

	const allowedUrls = toArray(allowedEntries);

	if (allowedUrls.includes(inputUrl)) return true;

	if (isLoginRedirectAllowed(redirect, providerName) === false) {
		throw new InvalidPayloadError({ reason: `URL "${redirect}" kann nicht für den Redirect nach dem Login verwendet werden` });
	}

	const normalizedList = allowedUrls
		.map((entry) => {
			try {
				const { host, path } = new URL(entry);
				return host + path;
			} catch {
				log.warn(`Ungültige URL entdeckt "${inputUrl}"`);
			}
			return null;
		})
		.filter((item) => item) as string[];

	try {
		const { host, path } = new URL(inputUrl);
		return normalizedList.includes(host + path);
	} catch {
		return false;
	}
}
