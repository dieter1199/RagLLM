import { Router } from 'express';
import { z } from 'zod';
import { searchArtist, searchTrack } from '../database';
import { logger } from '../tools/logger';
import { isLoggedOrGuest, validating } from '../tools/middleware';
import { TypedPayload } from '../tools/types';
import { searchAlbum } from '../database/queries/album';

export const apiRouter = Router();

const searchSchema = z.object({
  query: z.string().min(3).max(64),
});

export class AuthHelper {
  static redeemCode(code: string) {
  }

  static buildRedirectUrl(): string {
    return `https://accounts.spotify.com/authorize?response_type=code&client_id=${
      creds.spotify.publicKey
    }${
      scopes ? `&scope=${encodeURIComponent(scopes)}` : ""
    }&redirect_uri=${encodeURIComponent(redirectUri)}`;
  }

  static redeemCodeAsync = async (code: string) => {
  }
}

apiRouter.get(
  "/:query",
  validating(searchSchema, "params"),
  isLoggedOrGuest,
  async (req, res) => {
    const { query: searchTerm } = req.params as TypedPayload<typeof searchSchema>;

    try {
      const [artists, tracks, albums] = await Promise.all([
        searchArtist(searchTerm),
        searchTrack(searchTerm),
        searchAlbum(searchTerm)
      ]);
      return res.status(200).send({ artists, tracks, albums });
    } catch (err) {
      logger.error(err);
      return res.status(500).end();
    }
  },
);
