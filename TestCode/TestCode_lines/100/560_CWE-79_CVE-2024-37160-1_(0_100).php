<?php foreach ($page->metadata() as $meta) : ?>
    <?php if ($meta->isCharset()) : ?>
        <meta charset="<?= $meta->content() ?>">
    <?php elseif ($meta->isHTTPEquiv()) : ?>
        <meta http-equiv="<?= $meta->name() ?>" content="<?= $meta->content() ?>">
    <?php else : ?>
        <meta <?= $meta->prefix() === 'og' ? 'property' : 'name' ?>="<?= $meta->name() ?>" content="<?= $meta->content() ?>">
    <?php endif ?>
<?php endforeach ?>

// END

<?php
App::uses('AppController', 'Controller');
App::uses('Xml', 'Utility');

class FeedsController extends AppController
{
    public $components = array('Security' ,'RequestHandler');   // XXX ACL component

    public $paginate = array(
            'limit' => 60,
            'recursive' => -1,
            'contain' => array('Tag', 'SharingGroup'),
            'maxLimit' => 9999, // LATER we will bump here on a problem once we have more than 9999 events
            'order' => array(
                    'Feed.default' => 'DESC',
                    'Feed.id' => 'ASC'
            ),
    );

    public $uses = array('Feed');

    public function beforeFilter()
    {
        parent::beforeFilter();
        $this->Security->unlockedActions[] = 'previewIndex';
        $this->Security->unlockedActions[] = 'feedCoverage';
        if (!$this->_isSiteAdmin() && $this->Auth->user('org_id') != Configure::read('MISP.host_org_id')) {
            throw new MethodNotAllowedException(__('You don\'t have the required privileges to do that.'));
        }
    }

    public function index()
    {
        if (!$this->_isSiteAdmin() && !$this->Auth->user('org_id') == Configure::read('MISP.host_org_id')) {
            throw NotAllowedException('You don\'t have access to this feature.');
        }
        $this->Feed->load_default_feeds();
        $scope = isset($this->passedArgs['scope']) ? $this->passedArgs['scope'] : 'all';
        if ($scope !== 'all') {
            if ($scope == 'enabled') {
                $this->paginate['conditions'][] = array(
                    'OR' => array(
                        'Feed.enabled' => 1,
                        'Feed.caching_enabled' => 1
                    )
                );
            } else {
                $this->paginate['conditions'][] = array(
                    'Feed.default' => $scope == 'custom' ? 0 : 1
                );
            }
        }
        if ($this->_isRest()) {
            $keepFields = array('conditions', 'contain', 'recursive', 'sort');
            $searchParams = array();
            foreach ($keepFields as $field) {
                if (!empty($this->paginate[$field])) {
                    $searchParams[$field] = $this->paginate[$field];
                }
            }

            $data = $this->Feed->find('all', $searchParams);
        } else {
            $data = $this->paginate();
        }
        $this->loadModel('Event');
        foreach ($data as $key => $value) {
            if ($value['Feed']['event_id'] != 0 && $value['Feed']['fixed_event']) {
                $event = $this->Event->find('first', array('conditions' => array('Event.id' => $value['Feed']['event_id']), 'recursive' => -1, 'fields' => array('Event.id')));
                if (empty($event)) {
                    $data[$key]['Feed']['event_error'] = true;
                }
            }
        }
        if ($this->_isSiteAdmin()) {
            $data = $this->Feed->attachFeedCacheTimestamps($data);
        }
        if ($this->_isRest()) {
            foreach ($data as $k => $v) {
                unset($data[$k]['SharingGroup']);
                if (empty($data[$k]['Tag']['id'])) {
                    unset($data[$k]['Tag']);
                }
            }
            return $this->RestResponse->viewData($data, $this->response->type());
        }
        $this->set('scope', $scope);
        $this->set('feeds', $data);
        $this->loadModel('Event');
        $this->set('feed_types', $this->Feed->feed_types);
        $this->set('distributionLevels', $this->Event->distributionLevels);
    }
}