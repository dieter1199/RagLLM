<?php

include('../inc/includes.php');

header('Content-Type: application/json; charset=UTF-8');
Html::header_nocache();

Session::checkLoginUser();

if (!is_string($_POST['itemtype']) || getItemForItemtype($_POST['itemtype']) === false) {
    echo json_encode(['success' => false]);
    exit();
}

$all_pinned = importArrayFromDB($_SESSION['glpisavedsearches_pinned']);
$already_pinned = $all_pinned[$_POST['itemtype']] ?? 0;
$all_pinned[$_POST['itemtype']] = $already_pinned ? 0 : 1;
$_SESSION['glpisavedsearches_pinned'] = exportArrayToDB($all_pinned);

$user = new User();
$success = $user->update(
    [
        'id'                   => Session::getLoginUserID(),
        'savedsearches_pinned' => $_SESSION['glpisavedsearches_pinned'],
    ]
);

echo json_encode(['success' => $success]);

# END

<?php
App::uses('AppController', 'Controller');
App::uses('Xml', 'Utility');

class FeedsController extends AppController
{
    public $components = array('Security' ,'RequestHandler');   // XXX ACL component

    public $paginate = array(
            'limit' => 60,
            'recursive' => -1,
            'contain' => array('Tag', 'SharingGroup'),
            'maxLimit' => 9999, // LATER we will bump here on a problem once we have more than 9999 events
            'order' => array(
                    'Feed.default' => 'DESC',
                    'Feed.id' => 'ASC'
            ),
    );

    public $uses = array('Feed');

    public function beforeFilter()
    {
        parent::beforeFilter();
        $this->Security->unlockedActions[] = 'previewIndex';
        $this->Security->unlockedActions[] = 'feedCoverage';
        if (!$this->_isSiteAdmin() && $this->Auth->user('org_id') != Configure::read('MISP.host_org_id')) {
            throw new MethodNotAllowedException(__('You don\'t have the required privileges to do that.'));
        }
    }

    public function index()
    {
        if (!$this->_isSiteAdmin() && !$this->Auth->user('org_id') == Configure::read('MISP.host_org_id')) {
            throw NotAllowedException('You don\'t have access to this feature.');
        }
        $this->Feed->load_default_feeds();
        $scope = isset($this->passedArgs['scope']) ? $this->passedArgs['scope'] : 'all';
        if ($scope !== 'all') {
            if ($scope == 'enabled') {
                $this->paginate['conditions'][] = array(
                    'OR' => array(
                        'Feed.enabled' => 1,
                        'Feed.caching_enabled' => 1
                    )
                );
            } else {
                $this->paginate['conditions'][] = array(
                    'Feed.default' => $scope == 'custom' ? 0 : 1
                );
            }
        }
        if ($this->_isRest()) {
            $keepFields = array('conditions', 'contain', 'recursive', 'sort');
            $searchParams = array();
            foreach ($keepFields as $field) {
                if (!empty($this->paginate[$field])) {
                    $searchParams[$field] = $this->paginate[$field];
                }
            }

            $data = $this->Feed->find('all', $searchParams);
        } else {
            $data = $this->paginate();
        }
        $this->loadModel('Event');
        foreach ($data as $key => $value) {
            if ($value['Feed']['event_id'] != 0 && $value['Feed']['fixed_event']) {
                $event = $this->Event->find('first', array('conditions' => array('Event.id' => $value['Feed']['event_id']), 'recursive' => -1, 'fields' => array('Event.id')));
                if (empty($event)) {
                    $data[$key]['Feed']['event_error'] = true;
                }
            }
        }
        if ($this->_isSiteAdmin()) {
            $data = $this->Feed->attachFeedCacheTimestamps($data);
        }
        if ($this->_isRest()) {
            foreach ($data as $k => $v) {
                unset($data[$k]['SharingGroup']);
                if (empty($data[$k]['Tag']['id'])) {
                    unset($data[$k]['Tag']);
                }
            }
            return $this->RestResponse->viewData($data, $this->response->type());
        }
        $this->set('scope', $scope);
        $this->set('feeds', $data);
        $this->loadModel('Event');
        $this->set('feed_types', $this->Feed->feed_types);
        $this->set('distributionLevels', $this->Event->distributionLevels);
    }

    public function view($feedId)
    {
        if (!$this->_isSiteAdmin() && !$this->Auth->user('org_id') == Configure::read('MISP.host_org_id')) {
            throw NotAllowedException('You don\'t have access to this feature.');
        }
        $feed = $this->Feed->find('first', array(
            'conditions' => array('Feed.id' => $feedId),
            'recursive' => -1,
            'contain' => array('Tag')
        ));
        $feed['Feed']['cached_elements'] = $this->Feed->getCachedElements($feed['Feed']['id']);
        $feed['Feed']['coverage_by_other_feeds'] = $this->Feed->getFeedCoverage($feed['Feed']['id'], 'feed', 'all') . '%';
        if ($this->_isRest()) {
            if (empty($feed['Tag']['id'])) {
                unset($feed['Tag']);
            }
            return $this->RestResponse->viewData($feed, $this->response->type());
        }
        $feeds = $this->Feed->getAllCachingEnabledFeeds($feed['Feed']['id'], true);
        $this->set('other_feeds', $feeds);
        $this->set('feed', $feed);
    }

    public function feedCoverage($feedId)
    {
        if (!$this->_isSiteAdmin() && !$this->Auth->user('org_id') == Configure::read('MISP.host_org_id')) {
            throw NotAllowedException('You don\'t have access to this feature.');
        }
        $feed = $this->Feed->find('first', array(
            'conditions' => array('Feed.id' => $feedId),
            'recursive' => -1,
            'contain' => array('Tag')
        ));
        $result = $this->Feed->getFeedCoverage($feed['Feed']['id'], 'feed', $this->request->data);
        return $this->RestResponse->viewData($result, $this->response->type());

    }

    public function importFeeds()
    {
        if ($this->request->is('post')) {
            if (isset($this->request->data['Feed']['json'])) {
                $this->request->data = $this->request->data['Feed']['json'];
            }
            $results = $this->Feed->importFeeds($this->request->data, $this->Auth->user());
            if ($results['successes'] > 0) {
                $flashType = 'success';
                $message = $results['successes'] . ' new feeds added.';
            } else {
                $flashType = 'info';
                $message = 'No new feeds to add.';
            }
            if ($results['fails']) {
                $message .= ' ' . $results['fails'] . ' feeds could not be added (possibly because they already exist)';
            }
            if ($this->_isRest()) {
                return $this->RestResponse->saveSuccessResponse('Feed', 'importFeeds', false, $this->response->type(), $message);
            } else {
                $this->Flash->{$flashType}($message);
                $this->redirect(array('controller' => 'Feeds', 'action' => 'index', 'all'));
            }
        }
    }

    public function add()
    {
        $this->loadModel('Event');
        $sgs = $this->Event->SharingGroup->fetchAllAuthorised($this->Auth->user(), 'name', 1);
        $distributionLevels = $this->Event->distributionLevels;
        if (empty($sgs)) {
            unset($distributionLevels[4]);
        }
        $this->set('distributionLevels', $distributionLevels);
        $this->set('sharingGroups', $sgs);
        $this->set('feed_types', $this->Feed->getFeedTypesOptions());
        $tags = $this->Event->EventTag->Tag->find('list', array('fields' => array('Tag.name'), 'order' => array('lower(Tag.name) asc')));
        $tags[0] = 'None';
        $this->set('tags', $tags);
        if (empty($this->request->data['Feed']['fixed_event'])) {
            $this->request->data['Feed']['fixed_event'] = 1;
        }
        if ($this->request->is('post')) {
            if ($this->_isRest()) {
                if (empty($this->request->data['Feed'])) {
                    $this->request->data['Feed'] = $this->request->data;
                    if (empty($this->request->data['Feed']['source_format'])) {
                        $this->request->data['Feed']['source_format'] = 'freetext';
                    }
                    if (empty($this->request->data['Feed']['fixed_event'])) {
                        $this->request->data['Feed']['source_format'] = 1;
                    }
                }
            }
            $error = false;
            if (isset($this->request->data['Feed']['pull_rules'])) {
                $this->request->data['Feed']['rules'] = $this->request->data['Feed']['pull_rules'];
            }
            if (!isset($this->request->data['Feed']['distribution'])) {
                $this->request->data['Feed']['distribution'] = 0;
            }
            if ($this->request->data['Feed']['distribution'] != 4) {
                $this->request->data['Feed']['sharing_group_id'] = 0;
            }
            $this->request->data['Feed']['default'] = 0;
            if (!isset($this->request->data['Feed']['source_format'])) {
                $this->request->data['Feed']['source_format'] = 'freetext';
            }
            if ($this->request->data['Feed']['source_format'] == 'freetext') {
                if ($this->request->data['Feed']['fixed_event'] == 1) {
                    if (!empty($this->request->data['Feed']['target_event']) && is_numeric($this->request->data['Feed']['target_event'])) {
                        $this->request->data['Feed']['event_id'] = $this->request->data['Feed']['target_event'];
                    }
                }
            }
            if (!isset($this->request->data['Feed']['settings'])) {
                $this->request->data['Feed']['settings'] = array();
            } else {
                if (!empty($this->request->data['Feed']['settings']['common']['excluderegex']) && !$this->__checkRegex($this->request->data['Feed']['settings']['common']['excluderegex'])) {
                    $this->Flash->error('Invalid exclude regex. Make sure it\'s a delimited PCRE regex pattern.');
                    return true;
                }
            }
            if (isset($this->request->data['Feed']['settings']['delimiter']) && empty($this->request->data['Feed']['settings']['delimiter'])) {
                $this->request->data['Feed']['settings']['delimiter'] = ',';
            }
            if (empty($this->request->data['Feed']['target_event'])) {
                $this->request->data['Feed']['target_event'] = 0;
            }
            if (empty($this->request->data['Feed']['lookup_visible'])) {
                $this->request->data['Feed']['lookup_visible'] = 0;
            }
            if (empty($this->request->data['Feed']['input_source'])) {
                $this->request->data['Feed']['input_source'] = 'network';
            } else {
                $this->request->data['Feed']['input_source'] = strtolower($this->request->data['Feed']['input_source']);
            }
            if (!in_array($this->request->data['Feed']['input_source'], array('network', 'local'))) {
                $this->request->data['Feed']['input_source'] = 'network';
            }
            if (!isset($this->request->data['Feed']['delete_local_file'])) {
                $this->request->data['Feed']['delete_local_file'] = 0;
            }
            $this->request->data['Feed']['settings'] = json_encode($this->request->data['Feed']['settings']);
            $this->request->data['Feed']['event_id'] = !empty($this->request->data['Feed']['fixed_event']) ? $this->request->data['Feed']['target_event'] : 0;
            if (!$error) {
                $result = $this->Feed->save($this->request->data);
                if ($result) {
                    $message = __('Feed added.');
                    if ($this->_isRest()) {
                        $feed = $this->Feed->find('first', array('conditions' => array('Feed.id' => $this->Feed->id), 'recursive' => -1));
                        return $this->RestResponse->viewData($feed, $this->response->type());
                    }
                    $this->Flash->success($message);
                    $this->redirect(array('controller' => 'feeds', 'action' => 'index'));
                } else {
                    $message = __('Feed could not be added. Reason: %s', json_encode($this->Feed->validationErrors));
                    if ($this->_isRest()) {
                        return $this->RestResponse->saveFailResponse('Feeds', 'add', false, $message, $this->response->type());
                    }
                    $this->Flash->error($message);
                    $this->request->data['Feed']['settings'] = json_decode($this->request->data['Feed']['settings'], true);
                }
            }
        } elseif ($this->_isRest()) {
            return $this->RestResponse->describe('Feeds', 'add', false, $this->response->type());
        }
    }

    private function __checkRegex($pattern)
    {
        if (@preg_match($pattern, null) === false) {
            return false;
        }
        return true;
    }

    public function edit($feedId)
    {
        $this->Feed->id = $feedId;
        if (!$this->Feed->exists()) {
            throw new NotFoundException(__('Invalid feed.'));
        }
        $this->Feed->read();
        $this->set('feed', $this->Feed->data);
        $this->loadModel('Event');
        $sgs = $this->Event->SharingGroup->fetchAllAuthorised($this->Auth->user(), 'name', 1);
        $distributionLevels = $this->Event->distributionLevels;
        if (empty($sgs)) {
            unset($distributionLevels[4]);
        }
        $this->set('distributionLevels', $distributionLevels);
        $this->set('sharingGroups', $sgs);
        $tags = $this->Event->EventTag->Tag->find('list', array('fields' => array('Tag.name'), 'order' => array('lower(Tag.name) asc')));
        $tags[0] = 'None';
        $this->set('feed_types', $this->Feed->getFeedTypesOptions());
        $this->set('tags', $tags);
        if (!empty($this->Feed->data['Feed']['settings'])) {
            $this->Feed->data['Feed']['settings'] = json_decode($this->Feed->data['Feed']['settings'], true);
        }
        if ($this->request->is('post') || $this->request->is('put')) {
            if ($this->_isRest()) {
                if (empty($this->request->data['Feed'])) {
                    $this->request->data['Feed'] = $this->request->data;
                }
            }
            if (isset($this->request->data['Feed']['pull_rules'])) {
                $this->request->data['Feed']['rules'] = $this->request->data['Feed']['pull_rules'];
            }
            if (isset($this->request->data['Feed']['distribution']) && $this->request->data['Feed']['distribution'] != 4) {
                $this->request->data['Feed']['sharing_group_id'] = 0;
            }
            $this->request->data['Feed']['id'] = $feedId;
            if (!empty($this->request->data['Feed']['source_format']) && ($this->request->data['Feed']['source_format'] == 'freetext' || $this->request->data['Feed']['source_format'] == 'csv')) {
                if ($this->request->data['Feed']['fixed_event'] == 1) {
                    if (isset($this->request->data['Feed']['target_event']) && is_numeric($this->request->data['Feed']['target_event'])) {
                        $this->request->data['Feed']['event_id'] = $this->request->data['Feed']['target_event'];
                    } else {
                        $this->request->data['Feed']['event_id'] = 0;
                    }
                }
            }
            if (!isset($this->request->data['Feed']['settings'])) {
                $this->request->data['Feed']['settings'] = array();
            } else {
                if (!empty($this->request->data['Feed']['settings']['common']['excluderegex']) && !$this->__checkRegex($this->request->data['Feed']['settings']['common']['excluderegex'])) {
                    $this->Flash->error('Invalid exclude regex. Make sure it\'s a delimited PCRE regex pattern.');
                    return true;
                }
            }
            if (isset($this->request->data['Feed']['settings']['delimiter']) && empty($this->request->data['Feed']['settings']['delimiter'])) {
                $this->request->data['Feed']['settings']['delimiter'] = ',';
            }
            $this->request->data['Feed']['settings'] = json_encode($this->request->data['Feed']['settings']);
            $fields = array('id', 'name', 'provider', 'enabled', 'caching_enabled','rules', 'url', 'distribution', 'sharing_group_id', 'tag_id', 'fixed_event', 'event_id', 'publish', 'delta_merge', 'source_format', 'override_ids', 'settings', 'input_source', 'delete_local_file', 'lookup_visible', 'headers');
            $feed = array();
            foreach ($fields as $field) {
                if (isset($this->request->data['Feed'][$field])) {
                    $feed[$field] = $this->request->data['Feed'][$field];
                }
            }
            $result = $this->Feed->save($feed);
            if ($result) {
                $feedCache = APP . 'tmp' . DS . 'cache' . DS . 'misp_feed_' . intval($feedId) . '.cache';
                if (file_exists($feedCache)) {
                    unlink($feedCache);
                }
                $message = __('Feed added.');
                if ($this->_isRest()) {
                    $feed = $this->Feed->find('first', array('conditions' => array('Feed.id' => $this->Feed->id), 'recursive' => -1));
                    return $this->RestResponse->viewData($feed, $this->response->type());
                }
                $this->Flash->success($message);
                $this->redirect(array('controller' => 'feeds', 'action' => 'index'));
            } else {
                $message = __('Feed could not be updated. Reason: %s', json_encode($this->Feed->validationErrors));
                if ($this->_isRest()) {
                    return $this->RestResponse->saveFailResponse('Feeds', 'add', false, $message, $this->response->type());
                }
                $this->Flash->error($message);
            }
        } else {
            if ($this->_isRest()) {
                return $this->RestResponse->describe('Feeds', 'edit', false, $this->response->type());
            }
            if (!isset($this->request->data['Feed'])) {
                $this->request->data = $this->Feed->data;
                if ($this->Feed->data['Feed']['event_id']) {
                    $this->request->data['Feed']['target_event'] = $this->Feed->data['Feed']['event_id'];
                }
            }
            $this->request->data['Feed']['pull_rules'] = $this->request->data['Feed']['rules'];
        }
    }

    public function delete($feedId)
    {
        if (!$this->request->is('post') && !$this->request->is('delete')) {
            throw new MethodNotAllowedException(__('Action not allowed, post or delete request expected.'));
        }
        $this->Feed->id = $feedId;
        if (!$this->Feed->exists()) {
            throw new NotFoundException(__('Invalid feed.'));
        }
        if ($this->Feed->delete($feedId)) {
            $message = 'Feed deleted.';
            if ($this->_isRest()) {
                return $this->RestResponse->saveSuccessResponse('Feeds', 'delete', $feedId, false, $message);
            }
            $this->Flash->success($message);
        } else {
            $message = 'Feed could not be deleted.';
            if ($this->_isRest()) {
                return $this->RestResponse->saveFailResponse('Feeds', 'delete', false, $message, $this->response->type());
            }
            $this->Flash->error($message);
        }
        $this->redirect(array('controller' => 'feeds', 'action' => 'index'));
    }

    public function fetchFromFeed($feedId)
    {
        $this->Feed->id = $feedId;
        if (!$this->Feed->exists()) {
            throw new NotFoundException(__('Invalid feed.'));
        }
        $this->Feed->read();
        if (!empty($this->Feed->data['Feed']['settings'])) {
            $this->Feed->data['Feed']['settings'] = json_decode($this->Feed->data['Feed']['settings'], true);
        }
        if (!$this->Feed->data['Feed']['enabled']) {
            $this->Flash->info(__('Feed is currently not enabled. Make sure you enable it.'));
            $this->redirect(array('action' => 'index'));
        }
        if (Configure::read('MISP.background_jobs')) {
            $this->loadModel('Job');
            $this->Job->create();
            $data = array(
                    'worker' => 'default',
                    'job_type' => 'fetch_feeds',
                    'job_input' => 'Feed: ' . $feedId,
                    'status' => 0,
                    'retries' => 0,
                    'org' => $this->Auth->user('Organisation')['name'],
                    'message' => __('Starting fetch from Feed.'),
            );
            $this->Job->save($data);
            $jobId = $this->Job->id;
            $process_id = CakeResque::enqueue(
                    'default',
                    'ServerShell',
                    array('fetchFeed', $this->Auth->user('id'), $feedId, $jobId),
                    true
            );
            $this->Job->saveField('process_id', $process_id);
            $message = __('Pull queued for background execution.');
        } else {
            $result = $this->Feed->downloadFromFeedInitiator($feedId, $this->Auth->user());
            if (!$result) {
                if ($this->_isRest()) {
                    return $this->RestResponse->viewData(array('result' => __('Fetching the feed has failed.')), $this->response->type());
                } else {
                    $this->Flash->error(__('Fetching the feed has failed.'));
                    $this->redirect(array('action' => 'index'));
                }
            }
            $message = __('Fetching the feed has successfully completed.');
            if ($this->Feed->data['Feed']['source_format'] == 'misp') {
                if (isset($result['add'])) {
                    $message .= ' Downloaded ' . count($result['add']) . ' new event(s).';
                }
                if (isset($result['edit'])) {
                    $message .= ' Updated ' . count($result['edit']) . ' event(s).';
                }
            }
        }
        if ($this->_isRest()) {
            return $this->RestResponse->viewData(array('result' => $message), $this->response->type());
        } else {
            $this->Flash->success($message);
            $this->redirect(array('action' => 'index'));
        }
    }

    public function fetchFromAllFeeds()
    {
        $feeds = $this->Feed->find('all', array(
            'recursive' => -1,
            'fields' => array('id')
        ));
        foreach ($feeds as $feed) {
            $feedId = $feed['Feed']['id'];
            $this->Feed->id = $feedId;
            $this->Feed->read();
            if (!empty($this->Feed->data['Feed']['settings'])) {
                $this->Feed->data['Feed']['settings'] = json_decode($this->Feed->data['Feed']['settings'], true);
            }
            if (!$this->Feed->data['Feed']['enabled']) {
                continue;
            }
            if (Configure::read('MISP.background_jobs')) {
                $this->loadModel('Job');
                $this->Job->create();
                $data = array(
                    'worker' => 'default',
                    'job_type' => 'fetch_feed',
                    'job_input' => 'Feed: ' . $feedId,
                    'status' => 0,
                    'retries' => 0,
                    'org' => $this->Auth->user('Organisation')['name'],
                    'message' => __('Starting fetch from Feed.'),
                );
                $this->Job->save($data);
                $jobId = $this->Job->id;
                $process_id = CakeResque::enqueue(
                    'default',
                    'ServerShell',
                    array('fetchFeed', $this->Auth->user('id'), $feedId, $jobId),
                    true
                );
                $this->Job->saveField('process_id', $process_id);
                $message = 'Pull queued for background execution.';
            } else {
                $result = $this->Feed->downloadFromFeedInitiator($feedId, $this->Auth->user());
                if (!$result) {
                    continue;
                }
                $message = __('Fetching the feed has successfully completed.');
                if ($this->Feed->data['Feed']['source_format'] == 'misp') {
                    if (isset($result['add'])) {
                        $message['result'] .= ' Downloaded ' . count($result['add']) . ' new event(s).';
                    }
                    if (isset($result['edit'])) {
                        $message['result'] .= ' Updated ' . count($result['edit']) . ' event(s).';
                    }
                }
            }
        }
        if (!isset($message)) {
            $message = __('No feed enabled.');
        }
        if ($this->_isRest()) {
            return $this->RestResponse->viewData(array('result' => $message), $this->response->type());
        } else {
            $this->Flash->success($message);
            $this->redirect(array('action' => 'index'));
        }
    }
